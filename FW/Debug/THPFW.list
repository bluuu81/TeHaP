
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800f570  0800f570  0001f570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd5c  0800fd5c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd5c  0800fd5c  0001fd5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd64  0800fd64  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd64  0800fd64  0001fd64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd68  0800fd68  0001fd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800fd6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  200001f0  0800ff5c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ec  0800ff5c  000209ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   000207b1  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a47  00000000  00000000  00040a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  00045460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015e1  00000000  00000000  00047088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d6c  00000000  00000000  00048669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023bbb  00000000  00000000  000703d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8772  00000000  00000000  00093f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008858  00000000  00000000  0017c704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00184f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f558 	.word	0x0800f558

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800f558 	.word	0x0800f558

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_ldivmod>:
 8000e64:	b97b      	cbnz	r3, 8000e86 <__aeabi_ldivmod+0x22>
 8000e66:	b972      	cbnz	r2, 8000e86 <__aeabi_ldivmod+0x22>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bfbe      	ittt	lt
 8000e6c:	2000      	movlt	r0, #0
 8000e6e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e72:	e006      	blt.n	8000e82 <__aeabi_ldivmod+0x1e>
 8000e74:	bf08      	it	eq
 8000e76:	2800      	cmpeq	r0, #0
 8000e78:	bf1c      	itt	ne
 8000e7a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e82:	f000 b9bb 	b.w	80011fc <__aeabi_idiv0>
 8000e86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	db09      	blt.n	8000ea6 <__aeabi_ldivmod+0x42>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db1a      	blt.n	8000ecc <__aeabi_ldivmod+0x68>
 8000e96:	f000 f84d 	bl	8000f34 <__udivmoddi4>
 8000e9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4770      	bx	lr
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db1b      	blt.n	8000ee8 <__aeabi_ldivmod+0x84>
 8000eb0:	f000 f840 	bl	8000f34 <__udivmoddi4>
 8000eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec4:	4252      	negs	r2, r2
 8000ec6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eca:	4770      	bx	lr
 8000ecc:	4252      	negs	r2, r2
 8000ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed2:	f000 f82f 	bl	8000f34 <__udivmoddi4>
 8000ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ede:	b004      	add	sp, #16
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee6:	4770      	bx	lr
 8000ee8:	4252      	negs	r2, r2
 8000eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eee:	f000 f821 	bl	8000f34 <__udivmoddi4>
 8000ef2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efa:	b004      	add	sp, #16
 8000efc:	4252      	negs	r2, r2
 8000efe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_uldivmod>:
 8000f04:	b953      	cbnz	r3, 8000f1c <__aeabi_uldivmod+0x18>
 8000f06:	b94a      	cbnz	r2, 8000f1c <__aeabi_uldivmod+0x18>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bf08      	it	eq
 8000f0c:	2800      	cmpeq	r0, #0
 8000f0e:	bf1c      	itt	ne
 8000f10:	f04f 31ff 	movne.w	r1, #4294967295
 8000f14:	f04f 30ff 	movne.w	r0, #4294967295
 8000f18:	f000 b970 	b.w	80011fc <__aeabi_idiv0>
 8000f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f24:	f000 f806 	bl	8000f34 <__udivmoddi4>
 8000f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr

08000f34 <__udivmoddi4>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	9e08      	ldr	r6, [sp, #32]
 8000f3a:	460d      	mov	r5, r1
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	460f      	mov	r7, r1
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d14a      	bne.n	8000fda <__udivmoddi4+0xa6>
 8000f44:	428a      	cmp	r2, r1
 8000f46:	4694      	mov	ip, r2
 8000f48:	d965      	bls.n	8001016 <__udivmoddi4+0xe2>
 8000f4a:	fab2 f382 	clz	r3, r2
 8000f4e:	b143      	cbz	r3, 8000f62 <__udivmoddi4+0x2e>
 8000f50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f54:	f1c3 0220 	rsb	r2, r3, #32
 8000f58:	409f      	lsls	r7, r3
 8000f5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000f5e:	4317      	orrs	r7, r2
 8000f60:	409c      	lsls	r4, r3
 8000f62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f66:	fa1f f58c 	uxth.w	r5, ip
 8000f6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f6e:	0c22      	lsrs	r2, r4, #16
 8000f70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f78:	fb01 f005 	mul.w	r0, r1, r5
 8000f7c:	4290      	cmp	r0, r2
 8000f7e:	d90a      	bls.n	8000f96 <__udivmoddi4+0x62>
 8000f80:	eb1c 0202 	adds.w	r2, ip, r2
 8000f84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f88:	f080 811c 	bcs.w	80011c4 <__udivmoddi4+0x290>
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	f240 8119 	bls.w	80011c4 <__udivmoddi4+0x290>
 8000f92:	3902      	subs	r1, #2
 8000f94:	4462      	add	r2, ip
 8000f96:	1a12      	subs	r2, r2, r0
 8000f98:	b2a4      	uxth	r4, r4
 8000f9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fa6:	fb00 f505 	mul.w	r5, r0, r5
 8000faa:	42a5      	cmp	r5, r4
 8000fac:	d90a      	bls.n	8000fc4 <__udivmoddi4+0x90>
 8000fae:	eb1c 0404 	adds.w	r4, ip, r4
 8000fb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fb6:	f080 8107 	bcs.w	80011c8 <__udivmoddi4+0x294>
 8000fba:	42a5      	cmp	r5, r4
 8000fbc:	f240 8104 	bls.w	80011c8 <__udivmoddi4+0x294>
 8000fc0:	4464      	add	r4, ip
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fc8:	1b64      	subs	r4, r4, r5
 8000fca:	2100      	movs	r1, #0
 8000fcc:	b11e      	cbz	r6, 8000fd6 <__udivmoddi4+0xa2>
 8000fce:	40dc      	lsrs	r4, r3
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d908      	bls.n	8000ff0 <__udivmoddi4+0xbc>
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	f000 80ed 	beq.w	80011be <__udivmoddi4+0x28a>
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	e9c6 0500 	strd	r0, r5, [r6]
 8000fea:	4608      	mov	r0, r1
 8000fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff0:	fab3 f183 	clz	r1, r3
 8000ff4:	2900      	cmp	r1, #0
 8000ff6:	d149      	bne.n	800108c <__udivmoddi4+0x158>
 8000ff8:	42ab      	cmp	r3, r5
 8000ffa:	d302      	bcc.n	8001002 <__udivmoddi4+0xce>
 8000ffc:	4282      	cmp	r2, r0
 8000ffe:	f200 80f8 	bhi.w	80011f2 <__udivmoddi4+0x2be>
 8001002:	1a84      	subs	r4, r0, r2
 8001004:	eb65 0203 	sbc.w	r2, r5, r3
 8001008:	2001      	movs	r0, #1
 800100a:	4617      	mov	r7, r2
 800100c:	2e00      	cmp	r6, #0
 800100e:	d0e2      	beq.n	8000fd6 <__udivmoddi4+0xa2>
 8001010:	e9c6 4700 	strd	r4, r7, [r6]
 8001014:	e7df      	b.n	8000fd6 <__udivmoddi4+0xa2>
 8001016:	b902      	cbnz	r2, 800101a <__udivmoddi4+0xe6>
 8001018:	deff      	udf	#255	; 0xff
 800101a:	fab2 f382 	clz	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 8090 	bne.w	8001144 <__udivmoddi4+0x210>
 8001024:	1a8a      	subs	r2, r1, r2
 8001026:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102a:	fa1f fe8c 	uxth.w	lr, ip
 800102e:	2101      	movs	r1, #1
 8001030:	fbb2 f5f7 	udiv	r5, r2, r7
 8001034:	fb07 2015 	mls	r0, r7, r5, r2
 8001038:	0c22      	lsrs	r2, r4, #16
 800103a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800103e:	fb0e f005 	mul.w	r0, lr, r5
 8001042:	4290      	cmp	r0, r2
 8001044:	d908      	bls.n	8001058 <__udivmoddi4+0x124>
 8001046:	eb1c 0202 	adds.w	r2, ip, r2
 800104a:	f105 38ff 	add.w	r8, r5, #4294967295
 800104e:	d202      	bcs.n	8001056 <__udivmoddi4+0x122>
 8001050:	4290      	cmp	r0, r2
 8001052:	f200 80cb 	bhi.w	80011ec <__udivmoddi4+0x2b8>
 8001056:	4645      	mov	r5, r8
 8001058:	1a12      	subs	r2, r2, r0
 800105a:	b2a4      	uxth	r4, r4
 800105c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001060:	fb07 2210 	mls	r2, r7, r0, r2
 8001064:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001068:	fb0e fe00 	mul.w	lr, lr, r0
 800106c:	45a6      	cmp	lr, r4
 800106e:	d908      	bls.n	8001082 <__udivmoddi4+0x14e>
 8001070:	eb1c 0404 	adds.w	r4, ip, r4
 8001074:	f100 32ff 	add.w	r2, r0, #4294967295
 8001078:	d202      	bcs.n	8001080 <__udivmoddi4+0x14c>
 800107a:	45a6      	cmp	lr, r4
 800107c:	f200 80bb 	bhi.w	80011f6 <__udivmoddi4+0x2c2>
 8001080:	4610      	mov	r0, r2
 8001082:	eba4 040e 	sub.w	r4, r4, lr
 8001086:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800108a:	e79f      	b.n	8000fcc <__udivmoddi4+0x98>
 800108c:	f1c1 0720 	rsb	r7, r1, #32
 8001090:	408b      	lsls	r3, r1
 8001092:	fa22 fc07 	lsr.w	ip, r2, r7
 8001096:	ea4c 0c03 	orr.w	ip, ip, r3
 800109a:	fa05 f401 	lsl.w	r4, r5, r1
 800109e:	fa20 f307 	lsr.w	r3, r0, r7
 80010a2:	40fd      	lsrs	r5, r7
 80010a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010a8:	4323      	orrs	r3, r4
 80010aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80010ae:	fa1f fe8c 	uxth.w	lr, ip
 80010b2:	fb09 5518 	mls	r5, r9, r8, r5
 80010b6:	0c1c      	lsrs	r4, r3, #16
 80010b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80010bc:	fb08 f50e 	mul.w	r5, r8, lr
 80010c0:	42a5      	cmp	r5, r4
 80010c2:	fa02 f201 	lsl.w	r2, r2, r1
 80010c6:	fa00 f001 	lsl.w	r0, r0, r1
 80010ca:	d90b      	bls.n	80010e4 <__udivmoddi4+0x1b0>
 80010cc:	eb1c 0404 	adds.w	r4, ip, r4
 80010d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80010d4:	f080 8088 	bcs.w	80011e8 <__udivmoddi4+0x2b4>
 80010d8:	42a5      	cmp	r5, r4
 80010da:	f240 8085 	bls.w	80011e8 <__udivmoddi4+0x2b4>
 80010de:	f1a8 0802 	sub.w	r8, r8, #2
 80010e2:	4464      	add	r4, ip
 80010e4:	1b64      	subs	r4, r4, r5
 80010e6:	b29d      	uxth	r5, r3
 80010e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010ec:	fb09 4413 	mls	r4, r9, r3, r4
 80010f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80010f8:	45a6      	cmp	lr, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x1da>
 80010fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001100:	f103 35ff 	add.w	r5, r3, #4294967295
 8001104:	d26c      	bcs.n	80011e0 <__udivmoddi4+0x2ac>
 8001106:	45a6      	cmp	lr, r4
 8001108:	d96a      	bls.n	80011e0 <__udivmoddi4+0x2ac>
 800110a:	3b02      	subs	r3, #2
 800110c:	4464      	add	r4, ip
 800110e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001112:	fba3 9502 	umull	r9, r5, r3, r2
 8001116:	eba4 040e 	sub.w	r4, r4, lr
 800111a:	42ac      	cmp	r4, r5
 800111c:	46c8      	mov	r8, r9
 800111e:	46ae      	mov	lr, r5
 8001120:	d356      	bcc.n	80011d0 <__udivmoddi4+0x29c>
 8001122:	d053      	beq.n	80011cc <__udivmoddi4+0x298>
 8001124:	b156      	cbz	r6, 800113c <__udivmoddi4+0x208>
 8001126:	ebb0 0208 	subs.w	r2, r0, r8
 800112a:	eb64 040e 	sbc.w	r4, r4, lr
 800112e:	fa04 f707 	lsl.w	r7, r4, r7
 8001132:	40ca      	lsrs	r2, r1
 8001134:	40cc      	lsrs	r4, r1
 8001136:	4317      	orrs	r7, r2
 8001138:	e9c6 7400 	strd	r7, r4, [r6]
 800113c:	4618      	mov	r0, r3
 800113e:	2100      	movs	r1, #0
 8001140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001144:	f1c3 0120 	rsb	r1, r3, #32
 8001148:	fa02 fc03 	lsl.w	ip, r2, r3
 800114c:	fa20 f201 	lsr.w	r2, r0, r1
 8001150:	fa25 f101 	lsr.w	r1, r5, r1
 8001154:	409d      	lsls	r5, r3
 8001156:	432a      	orrs	r2, r5
 8001158:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800115c:	fa1f fe8c 	uxth.w	lr, ip
 8001160:	fbb1 f0f7 	udiv	r0, r1, r7
 8001164:	fb07 1510 	mls	r5, r7, r0, r1
 8001168:	0c11      	lsrs	r1, r2, #16
 800116a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800116e:	fb00 f50e 	mul.w	r5, r0, lr
 8001172:	428d      	cmp	r5, r1
 8001174:	fa04 f403 	lsl.w	r4, r4, r3
 8001178:	d908      	bls.n	800118c <__udivmoddi4+0x258>
 800117a:	eb1c 0101 	adds.w	r1, ip, r1
 800117e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001182:	d22f      	bcs.n	80011e4 <__udivmoddi4+0x2b0>
 8001184:	428d      	cmp	r5, r1
 8001186:	d92d      	bls.n	80011e4 <__udivmoddi4+0x2b0>
 8001188:	3802      	subs	r0, #2
 800118a:	4461      	add	r1, ip
 800118c:	1b49      	subs	r1, r1, r5
 800118e:	b292      	uxth	r2, r2
 8001190:	fbb1 f5f7 	udiv	r5, r1, r7
 8001194:	fb07 1115 	mls	r1, r7, r5, r1
 8001198:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800119c:	fb05 f10e 	mul.w	r1, r5, lr
 80011a0:	4291      	cmp	r1, r2
 80011a2:	d908      	bls.n	80011b6 <__udivmoddi4+0x282>
 80011a4:	eb1c 0202 	adds.w	r2, ip, r2
 80011a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80011ac:	d216      	bcs.n	80011dc <__udivmoddi4+0x2a8>
 80011ae:	4291      	cmp	r1, r2
 80011b0:	d914      	bls.n	80011dc <__udivmoddi4+0x2a8>
 80011b2:	3d02      	subs	r5, #2
 80011b4:	4462      	add	r2, ip
 80011b6:	1a52      	subs	r2, r2, r1
 80011b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80011bc:	e738      	b.n	8001030 <__udivmoddi4+0xfc>
 80011be:	4631      	mov	r1, r6
 80011c0:	4630      	mov	r0, r6
 80011c2:	e708      	b.n	8000fd6 <__udivmoddi4+0xa2>
 80011c4:	4639      	mov	r1, r7
 80011c6:	e6e6      	b.n	8000f96 <__udivmoddi4+0x62>
 80011c8:	4610      	mov	r0, r2
 80011ca:	e6fb      	b.n	8000fc4 <__udivmoddi4+0x90>
 80011cc:	4548      	cmp	r0, r9
 80011ce:	d2a9      	bcs.n	8001124 <__udivmoddi4+0x1f0>
 80011d0:	ebb9 0802 	subs.w	r8, r9, r2
 80011d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80011d8:	3b01      	subs	r3, #1
 80011da:	e7a3      	b.n	8001124 <__udivmoddi4+0x1f0>
 80011dc:	4645      	mov	r5, r8
 80011de:	e7ea      	b.n	80011b6 <__udivmoddi4+0x282>
 80011e0:	462b      	mov	r3, r5
 80011e2:	e794      	b.n	800110e <__udivmoddi4+0x1da>
 80011e4:	4640      	mov	r0, r8
 80011e6:	e7d1      	b.n	800118c <__udivmoddi4+0x258>
 80011e8:	46d0      	mov	r8, sl
 80011ea:	e77b      	b.n	80010e4 <__udivmoddi4+0x1b0>
 80011ec:	3d02      	subs	r5, #2
 80011ee:	4462      	add	r2, ip
 80011f0:	e732      	b.n	8001058 <__udivmoddi4+0x124>
 80011f2:	4608      	mov	r0, r1
 80011f4:	e70a      	b.n	800100c <__udivmoddi4+0xd8>
 80011f6:	4464      	add	r4, ip
 80011f8:	3802      	subs	r0, #2
 80011fa:	e742      	b.n	8001082 <__udivmoddi4+0x14e>

080011fc <__aeabi_idiv0>:
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop

08001200 <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 8001204:	217f      	movs	r1, #127	; 0x7f
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <ADC_DMA_Start+0x20>)
 8001208:	f006 f8ac 	bl	8007364 <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 800120c:	200a      	movs	r0, #10
 800120e:	f004 ff27 	bl	8006060 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 8001212:	2205      	movs	r2, #5
 8001214:	4903      	ldr	r1, [pc, #12]	; (8001224 <ADC_DMA_Start+0x24>)
 8001216:	4802      	ldr	r0, [pc, #8]	; (8001220 <ADC_DMA_Start+0x20>)
 8001218:	f005 fa7c 	bl	8006714 <HAL_ADC_Start_DMA>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2000048c 	.word	0x2000048c
 8001224:	2000020c 	.word	0x2000020c

08001228 <GET_MCU_Temp>:

float GET_MCU_Temp()
{
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
	    uint16_t tmp=0;
 800122e:	2300      	movs	r3, #0
 8001230:	81fb      	strh	r3, [r7, #14]
	    float temperature;
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 8001232:	4b33      	ldr	r3, [pc, #204]	; (8001300 <GET_MCU_Temp+0xd8>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	817b      	strh	r3, [r7, #10]
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));
 8001238:	4b32      	ldr	r3, [pc, #200]	; (8001304 <GET_MCU_Temp+0xdc>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	813b      	strh	r3, [r7, #8]

	  	for(uint8_t i=0; i<5;i+=1)
 800123e:	2300      	movs	r3, #0
 8001240:	737b      	strb	r3, [r7, #13]
 8001242:	e00a      	b.n	800125a <GET_MCU_Temp+0x32>
	  	{
	  		tmp+=adc_data[i];
 8001244:	7b7b      	ldrb	r3, [r7, #13]
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <GET_MCU_Temp+0xe0>)
 8001248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800124c:	b29a      	uxth	r2, r3
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	4413      	add	r3, r2
 8001252:	81fb      	strh	r3, [r7, #14]
	  	for(uint8_t i=0; i<5;i+=1)
 8001254:	7b7b      	ldrb	r3, [r7, #13]
 8001256:	3301      	adds	r3, #1
 8001258:	737b      	strb	r3, [r7, #13]
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d9f1      	bls.n	8001244 <GET_MCU_Temp+0x1c>
	  	}
	  	tmp*=0.2f;
 8001260:	89fb      	ldrh	r3, [r7, #14]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800130c <GET_MCU_Temp+0xe4>
 800126e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001276:	ee17 3a90 	vmov	r3, s15
 800127a:	81fb      	strh	r3, [r7, #14]

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001294:	ee17 0a90 	vmov	r0, s15
 8001298:	f7ff f956 	bl	8000548 <__aeabi_f2d>
 800129c:	a316      	add	r3, pc, #88	; (adr r3, 80012f8 <GET_MCU_Temp+0xd0>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f9a9 	bl	80005f8 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4614      	mov	r4, r2
 80012ac:	461d      	mov	r5, r3
 80012ae:	893b      	ldrh	r3, [r7, #8]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f937 	bl	8000524 <__aeabi_i2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff fac5 	bl	800084c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <GET_MCU_Temp+0xe8>)
 80012d0:	f7fe ffdc 	bl	800028c <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f7ff fc64 	bl	8000ba8 <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	607b      	str	r3, [r7, #4]
	  	return temperature;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	ee07 3a90 	vmov	s15, r3
}
 80012ea:	eeb0 0a67 	vmov.f32	s0, s15
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}
 80012f4:	f3af 8000 	nop.w
 80012f8:	33333333 	.word	0x33333333
 80012fc:	40113333 	.word	0x40113333
 8001300:	1fff75a8 	.word	0x1fff75a8
 8001304:	1fff75ca 	.word	0x1fff75ca
 8001308:	2000020c 	.word	0x2000020c
 800130c:	3e4ccccd 	.word	0x3e4ccccd
 8001310:	40390000 	.word	0x40390000

08001314 <read_register16>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af04      	add	r7, sp, #16
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	460b      	mov	r3, r1
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800132e:	7afb      	ldrb	r3, [r7, #11]
 8001330:	b29a      	uxth	r2, r3
 8001332:	8af9      	ldrh	r1, [r7, #22]
 8001334:	f241 3388 	movw	r3, #5000	; 0x1388
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2302      	movs	r3, #2
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	f007 fb33 	bl	80089b0 <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10b      	bne.n	8001368 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001350:	7d7b      	ldrb	r3, [r7, #21]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	b21a      	sxth	r2, r3
 8001356:	7d3b      	ldrb	r3, [r7, #20]
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21b      	sxth	r3, r3
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	801a      	strh	r2, [r3, #0]
		return true;
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <read_register16+0x56>
	} else
		return false;
 8001368:	2300      	movs	r3, #0

}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001372:	b590      	push	{r4, r7, lr}
 8001374:	b08b      	sub	sp, #44	; 0x2c
 8001376:	af04      	add	r7, sp, #16
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	461a      	mov	r2, r3
 800137e:	460b      	mov	r3, r1
 8001380:	72fb      	strb	r3, [r7, #11]
 8001382:	4613      	mov	r3, r2
 8001384:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	b29a      	uxth	r2, r3
 8001396:	7abb      	ldrb	r3, [r7, #10]
 8001398:	b29b      	uxth	r3, r3
 800139a:	8af9      	ldrh	r1, [r7, #22]
 800139c:	f241 3488 	movw	r4, #5000	; 0x1388
 80013a0:	9402      	str	r4, [sp, #8]
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	f007 fb01 	bl	80089b0 <HAL_I2C_Mem_Read>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <read_data+0x46>
		return 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e000      	b.n	80013ba <read_data+0x48>
	else
		return 1;
 80013b8:	2301      	movs	r3, #1

}
 80013ba:	4618      	mov	r0, r3
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd90      	pop	{r4, r7, pc}

080013c2 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	461a      	mov	r2, r3
 80013ce:	2188      	movs	r1, #136	; 0x88
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff9f 	bl	8001314 <read_register16>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d06f      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3302      	adds	r3, #2
 80013e0:	461a      	mov	r2, r3
 80013e2:	218a      	movs	r1, #138	; 0x8a
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff95 	bl	8001314 <read_register16>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d065      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3304      	adds	r3, #4
 80013f4:	461a      	mov	r2, r3
 80013f6:	218c      	movs	r1, #140	; 0x8c
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff8b 	bl	8001314 <read_register16>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d05b      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3306      	adds	r3, #6
 8001408:	461a      	mov	r2, r3
 800140a:	218e      	movs	r1, #142	; 0x8e
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff81 	bl	8001314 <read_register16>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d051      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3308      	adds	r3, #8
 800141c:	461a      	mov	r2, r3
 800141e:	2190      	movs	r1, #144	; 0x90
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff77 	bl	8001314 <read_register16>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d047      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	330a      	adds	r3, #10
 8001430:	461a      	mov	r2, r3
 8001432:	2192      	movs	r1, #146	; 0x92
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff6d 	bl	8001314 <read_register16>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d03d      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	330c      	adds	r3, #12
 8001444:	461a      	mov	r2, r3
 8001446:	2194      	movs	r1, #148	; 0x94
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff63 	bl	8001314 <read_register16>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d033      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	330e      	adds	r3, #14
 8001458:	461a      	mov	r2, r3
 800145a:	2196      	movs	r1, #150	; 0x96
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff59 	bl	8001314 <read_register16>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d029      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3310      	adds	r3, #16
 800146c:	461a      	mov	r2, r3
 800146e:	2198      	movs	r1, #152	; 0x98
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff4f 	bl	8001314 <read_register16>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d01f      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3312      	adds	r3, #18
 8001480:	461a      	mov	r2, r3
 8001482:	219a      	movs	r1, #154	; 0x9a
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff45 	bl	8001314 <read_register16>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d015      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3314      	adds	r3, #20
 8001494:	461a      	mov	r2, r3
 8001496:	219c      	movs	r1, #156	; 0x9c
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff3b 	bl	8001314 <read_register16>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80014a8:	461a      	mov	r2, r3
 80014aa:	219e      	movs	r1, #158	; 0x9e
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff31 	bl	8001314 <read_register16>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <read_calibration_data+0xfa>

		return true;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <read_calibration_data+0xfc>
	}

	return false;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b084      	sub	sp, #16
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0218 	add.w	r2, r3, #24
 80014d4:	2301      	movs	r3, #1
 80014d6:	21a1      	movs	r1, #161	; 0xa1
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff4a 	bl	8001372 <read_data>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d14b      	bne.n	800157c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	331a      	adds	r3, #26
 80014e8:	461a      	mov	r2, r3
 80014ea:	21e1      	movs	r1, #225	; 0xe1
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff11 	bl	8001314 <read_register16>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d041      	beq.n	800157c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f103 021c 	add.w	r2, r3, #28
 80014fe:	2301      	movs	r3, #1
 8001500:	21e3      	movs	r1, #227	; 0xe3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff35 	bl	8001372 <read_data>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d136      	bne.n	800157c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800150e:	f107 030e 	add.w	r3, r7, #14
 8001512:	461a      	mov	r2, r3
 8001514:	21e4      	movs	r1, #228	; 0xe4
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fefc 	bl	8001314 <read_register16>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d02c      	beq.n	800157c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	461a      	mov	r2, r3
 8001528:	21e5      	movs	r1, #229	; 0xe5
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fef2 	bl	8001314 <read_register16>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d022      	beq.n	800157c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800153c:	2301      	movs	r3, #1
 800153e:	21e7      	movs	r1, #231	; 0xe7
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff16 	bl	8001372 <read_data>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d117      	bne.n	800157c <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	b21b      	sxth	r3, r3
 8001552:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001556:	b21a      	sxth	r2, r3
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	121b      	asrs	r3, r3, #8
 800155c:	b21b      	sxth	r3, r3
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	b29b      	uxth	r3, r3
 8001572:	b21a      	sxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	841a      	strh	r2, [r3, #32]

		return true;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <read_hum_calibration_data+0xb8>
	}

	return false;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001586:	b580      	push	{r7, lr}
 8001588:	b088      	sub	sp, #32
 800158a:	af04      	add	r7, sp, #16
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	70fb      	strb	r3, [r7, #3]
 8001592:	4613      	mov	r3, r2
 8001594:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	89f9      	ldrh	r1, [r7, #14]
 80015a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	2301      	movs	r3, #1
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	1cbb      	adds	r3, r7, #2
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	f007 f8e6 	bl	8008788 <HAL_I2C_Mem_Write>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <write_register8+0x40>
		return false;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <write_register8+0x42>
	else
		return true;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015de:	2b76      	cmp	r3, #118	; 0x76
 80015e0:	d005      	beq.n	80015ee <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015e6:	2b77      	cmp	r3, #119	; 0x77
 80015e8:	d001      	beq.n	80015ee <bmp280_init+0x1e>

		return false;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e099      	b.n	8001722 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80015f4:	2301      	movs	r3, #1
 80015f6:	21d0      	movs	r1, #208	; 0xd0
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff feba 	bl	8001372 <read_data>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <bmp280_init+0x38>
		return false;
 8001604:	2300      	movs	r3, #0
 8001606:	e08c      	b.n	8001722 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800160e:	2b58      	cmp	r3, #88	; 0x58
 8001610:	d006      	beq.n	8001620 <bmp280_init+0x50>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001618:	2b60      	cmp	r3, #96	; 0x60
 800161a:	d001      	beq.n	8001620 <bmp280_init+0x50>

		return false;
 800161c:	2300      	movs	r3, #0
 800161e:	e080      	b.n	8001722 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001620:	22b6      	movs	r2, #182	; 0xb6
 8001622:	21e0      	movs	r1, #224	; 0xe0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffae 	bl	8001586 <write_register8>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <bmp280_init+0x64>
		return false;
 8001630:	2300      	movs	r3, #0
 8001632:	e076      	b.n	8001722 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001634:	f107 020c 	add.w	r2, r7, #12
 8001638:	2301      	movs	r3, #1
 800163a:	21f3      	movs	r1, #243	; 0xf3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fe98 	bl	8001372 <read_data>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f5      	bne.n	8001634 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001648:	7b3b      	ldrb	r3, [r7, #12]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff feb5 	bl	80013c2 <read_calibration_data>
 8001658:	4603      	mov	r3, r0
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d100      	bne.n	8001666 <bmp280_init+0x96>
 8001664:	e001      	b.n	800166a <bmp280_init+0x9a>
		return false;
 8001666:	2300      	movs	r3, #0
 8001668:	e05b      	b.n	8001722 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001670:	2b60      	cmp	r3, #96	; 0x60
 8001672:	d10a      	bne.n	800168a <bmp280_init+0xba>
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff26 	bl	80014c6 <read_hum_calibration_data>
 800167a:	4603      	mov	r3, r0
 800167c:	f083 0301 	eor.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <bmp280_init+0xba>
		return false;
 8001686:	2300      	movs	r3, #0
 8001688:	e04b      	b.n	8001722 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	b25a      	sxtb	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	785b      	ldrb	r3, [r3, #1]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	b25b      	sxtb	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b25b      	sxtb	r3, r3
 800169e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	461a      	mov	r2, r3
 80016a4:	21f5      	movs	r1, #245	; 0xf5
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff6d 	bl	8001586 <write_register8>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <bmp280_init+0xe6>
		return false;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e035      	b.n	8001722 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d102      	bne.n	80016c4 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	78db      	ldrb	r3, [r3, #3]
 80016c8:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80016ca:	b25a      	sxtb	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	789b      	ldrb	r3, [r3, #2]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b25a      	sxtb	r2, r3
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80016e2:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016ea:	2b60      	cmp	r3, #96	; 0x60
 80016ec:	d10d      	bne.n	800170a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	791b      	ldrb	r3, [r3, #4]
 80016f2:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	461a      	mov	r2, r3
 80016f8:	21f2      	movs	r1, #242	; 0xf2
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ff43 	bl	8001586 <write_register8>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <bmp280_init+0x13a>
			return false;
 8001706:	2300      	movs	r3, #0
 8001708:	e00b      	b.n	8001722 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	461a      	mov	r2, r3
 800170e:	21f4      	movs	r1, #244	; 0xf4
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff38 	bl	8001586 <write_register8>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <bmp280_init+0x150>
		return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <bmp280_init+0x152>
	}

	return true;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 8001732:	f107 020f 	add.w	r2, r7, #15
 8001736:	2301      	movs	r3, #1
 8001738:	21f4      	movs	r1, #244	; 0xf4
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fe19 	bl	8001372 <read_data>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <bmp280_force_measurement+0x20>
		return false;
 8001746:	2300      	movs	r3, #0
 8001748:	e015      	b.n	8001776 <bmp280_force_measurement+0x4c>
	ctrl &= ~0b11;  // clear two lower bits
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	f023 0303 	bic.w	r3, r3, #3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	73fb      	strb	r3, [r7, #15]
	ctrl |= BMP280_MODE_FORCED;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	461a      	mov	r2, r3
 8001762:	21f4      	movs	r1, #244	; 0xf4
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff0e 	bl	8001586 <write_register8>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <bmp280_force_measurement+0x4a>
		return false;
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <bmp280_force_measurement+0x4c>
	}
	return true;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8001786:	f107 020f 	add.w	r2, r7, #15
 800178a:	2301      	movs	r3, #1
 800178c:	21f3      	movs	r1, #243	; 0xf3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fdef 	bl	8001372 <read_data>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <bmp280_is_measuring+0x20>
		return false;
 800179a:	2300      	movs	r3, #0
 800179c:	e007      	b.n	80017ae <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <bmp280_is_measuring+0x2e>
		return true;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <bmp280_is_measuring+0x30>
	}
	return false;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80017b6:	b480      	push	{r7}
 80017b8:	b087      	sub	sp, #28
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	10da      	asrs	r2, r3, #3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80017d8:	12db      	asrs	r3, r3, #11
 80017da:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	111b      	asrs	r3, r3, #4
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	8812      	ldrh	r2, [r2, #0]
 80017e4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	1112      	asrs	r2, r2, #4
 80017ea:	68f9      	ldr	r1, [r7, #12]
 80017ec:	8809      	ldrh	r1, [r1, #0]
 80017ee:	1a52      	subs	r2, r2, r1
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80017fc:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001800:	139b      	asrs	r3, r3, #14
 8001802:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	441a      	add	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3380      	adds	r3, #128	; 0x80
 800181a:	121b      	asrs	r3, r3, #8
}
 800181c:	4618      	mov	r0, r3
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800182c:	b0cc      	sub	sp, #304	; 0x130
 800182e:	af00      	add	r7, sp, #0
 8001830:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001834:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001838:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800183c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001840:	17da      	asrs	r2, r3, #31
 8001842:	461c      	mov	r4, r3
 8001844:	4615      	mov	r5, r2
 8001846:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800184a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800184e:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001852:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001856:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800185a:	fb03 f102 	mul.w	r1, r3, r2
 800185e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	18ca      	adds	r2, r1, r3
 800186c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001870:	fba3 8903 	umull	r8, r9, r3, r3
 8001874:	eb02 0309 	add.w	r3, r2, r9
 8001878:	4699      	mov	r9, r3
 800187a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800187e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001882:	b21b      	sxth	r3, r3
 8001884:	17da      	asrs	r2, r3, #31
 8001886:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800188a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800188e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001892:	4603      	mov	r3, r0
 8001894:	fb03 f209 	mul.w	r2, r3, r9
 8001898:	460b      	mov	r3, r1
 800189a:	fb08 f303 	mul.w	r3, r8, r3
 800189e:	4413      	add	r3, r2
 80018a0:	4602      	mov	r2, r0
 80018a2:	fba8 1202 	umull	r1, r2, r8, r2
 80018a6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80018aa:	460a      	mov	r2, r1
 80018ac:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80018b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80018b4:	4413      	add	r3, r2
 80018b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80018ba:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80018be:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80018c2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80018c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	17da      	asrs	r2, r3, #31
 80018d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018d6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80018da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018de:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80018e2:	462a      	mov	r2, r5
 80018e4:	fb02 f203 	mul.w	r2, r2, r3
 80018e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018ec:	4621      	mov	r1, r4
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	441a      	add	r2, r3
 80018f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018f8:	4621      	mov	r1, r4
 80018fa:	fba3 1301 	umull	r1, r3, r3, r1
 80018fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001902:	460b      	mov	r3, r1
 8001904:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800190c:	18d3      	adds	r3, r2, r3
 800190e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800191e:	462b      	mov	r3, r5
 8001920:	0459      	lsls	r1, r3, #17
 8001922:	4623      	mov	r3, r4
 8001924:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001928:	4623      	mov	r3, r4
 800192a:	0458      	lsls	r0, r3, #17
 800192c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001930:	1814      	adds	r4, r2, r0
 8001932:	643c      	str	r4, [r7, #64]	; 0x40
 8001934:	414b      	adcs	r3, r1
 8001936:	647b      	str	r3, [r7, #68]	; 0x44
 8001938:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800193c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001944:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001948:	b21b      	sxth	r3, r3
 800194a:	17da      	asrs	r2, r3, #31
 800194c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001954:	f04f 0000 	mov.w	r0, #0
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001960:	00d9      	lsls	r1, r3, #3
 8001962:	2000      	movs	r0, #0
 8001964:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001968:	1814      	adds	r4, r2, r0
 800196a:	63bc      	str	r4, [r7, #56]	; 0x38
 800196c:	414b      	adcs	r3, r1
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001970:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001974:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001978:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800197c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001980:	fb03 f102 	mul.w	r1, r3, r2
 8001984:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	18ca      	adds	r2, r1, r3
 8001992:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001996:	fba3 1303 	umull	r1, r3, r3, r3
 800199a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800199e:	460b      	mov	r3, r1
 80019a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80019a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019a8:	18d3      	adds	r3, r2, r3
 80019aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80019ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	17da      	asrs	r2, r3, #31
 80019ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80019c2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80019c6:	462b      	mov	r3, r5
 80019c8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80019cc:	4642      	mov	r2, r8
 80019ce:	fb02 f203 	mul.w	r2, r2, r3
 80019d2:	464b      	mov	r3, r9
 80019d4:	4621      	mov	r1, r4
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	4622      	mov	r2, r4
 80019de:	4641      	mov	r1, r8
 80019e0:	fba2 1201 	umull	r1, r2, r2, r1
 80019e4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80019e8:	460a      	mov	r2, r1
 80019ea:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80019ee:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80019f2:	4413      	add	r3, r2
 80019f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019f8:	f04f 0000 	mov.w	r0, #0
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001a04:	4623      	mov	r3, r4
 8001a06:	0a18      	lsrs	r0, r3, #8
 8001a08:	462b      	mov	r3, r5
 8001a0a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a0e:	462b      	mov	r3, r5
 8001a10:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	17da      	asrs	r2, r3, #31
 8001a1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a22:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a2a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001a2e:	464a      	mov	r2, r9
 8001a30:	fb02 f203 	mul.w	r2, r2, r3
 8001a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a38:	4644      	mov	r4, r8
 8001a3a:	fb04 f303 	mul.w	r3, r4, r3
 8001a3e:	441a      	add	r2, r3
 8001a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a44:	4644      	mov	r4, r8
 8001a46:	fba3 4304 	umull	r4, r3, r3, r4
 8001a4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a4e:	4623      	mov	r3, r4
 8001a50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001a54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001a58:	18d3      	adds	r3, r2, r3
 8001a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001a6a:	464c      	mov	r4, r9
 8001a6c:	0323      	lsls	r3, r4, #12
 8001a6e:	4644      	mov	r4, r8
 8001a70:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001a74:	4644      	mov	r4, r8
 8001a76:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001a78:	1884      	adds	r4, r0, r2
 8001a7a:	633c      	str	r4, [r7, #48]	; 0x30
 8001a7c:	eb41 0303 	adc.w	r3, r1, r3
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
 8001a82:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001a86:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001a8a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001a8e:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001a92:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001a96:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a9e:	88db      	ldrh	r3, [r3, #6]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001aa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001aac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ab0:	462b      	mov	r3, r5
 8001ab2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001ab6:	4642      	mov	r2, r8
 8001ab8:	fb02 f203 	mul.w	r2, r2, r3
 8001abc:	464b      	mov	r3, r9
 8001abe:	4621      	mov	r1, r4
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	4641      	mov	r1, r8
 8001aca:	fba2 1201 	umull	r1, r2, r2, r1
 8001ace:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001ad8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001adc:	4413      	add	r3, r2
 8001ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001aee:	4629      	mov	r1, r5
 8001af0:	104a      	asrs	r2, r1, #1
 8001af2:	4629      	mov	r1, r5
 8001af4:	17cb      	asrs	r3, r1, #31
 8001af6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001afa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001afe:	4313      	orrs	r3, r2
 8001b00:	d101      	bne.n	8001b06 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001b02:	2300      	movs	r3, #0
 8001b04:	e148      	b.n	8001d98 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001b06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b0a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001b0e:	17da      	asrs	r2, r3, #31
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b14:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001b18:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001b1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b20:	105b      	asrs	r3, r3, #1
 8001b22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b2a:	07db      	lsls	r3, r3, #31
 8001b2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b30:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b34:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001b38:	4621      	mov	r1, r4
 8001b3a:	1a89      	subs	r1, r1, r2
 8001b3c:	67b9      	str	r1, [r7, #120]	; 0x78
 8001b3e:	4629      	mov	r1, r5
 8001b40:	eb61 0303 	sbc.w	r3, r1, r3
 8001b44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	1891      	adds	r1, r2, r2
 8001b50:	6239      	str	r1, [r7, #32]
 8001b52:	415b      	adcs	r3, r3
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	1851      	adds	r1, r2, r1
 8001b5e:	61b9      	str	r1, [r7, #24]
 8001b60:	4629      	mov	r1, r5
 8001b62:	414b      	adcs	r3, r1
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b72:	4649      	mov	r1, r9
 8001b74:	018b      	lsls	r3, r1, #6
 8001b76:	4641      	mov	r1, r8
 8001b78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	018a      	lsls	r2, r1, #6
 8001b80:	4641      	mov	r1, r8
 8001b82:	1889      	adds	r1, r1, r2
 8001b84:	6139      	str	r1, [r7, #16]
 8001b86:	4649      	mov	r1, r9
 8001b88:	eb43 0101 	adc.w	r1, r3, r1
 8001b8c:	6179      	str	r1, [r7, #20]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b9a:	4649      	mov	r1, r9
 8001b9c:	008b      	lsls	r3, r1, #2
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	008a      	lsls	r2, r1, #2
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	4622      	mov	r2, r4
 8001bb0:	189b      	adds	r3, r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	462a      	mov	r2, r5
 8001bb8:	eb42 0303 	adc.w	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001bca:	4649      	mov	r1, r9
 8001bcc:	008b      	lsls	r3, r1, #2
 8001bce:	4641      	mov	r1, r8
 8001bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	008a      	lsls	r2, r1, #2
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4622      	mov	r2, r4
 8001be0:	189b      	adds	r3, r3, r2
 8001be2:	673b      	str	r3, [r7, #112]	; 0x70
 8001be4:	462b      	mov	r3, r5
 8001be6:	460a      	mov	r2, r1
 8001be8:	eb42 0303 	adc.w	r3, r2, r3
 8001bec:	677b      	str	r3, [r7, #116]	; 0x74
 8001bee:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001bf2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001bf6:	f7ff f935 	bl	8000e64 <__aeabi_ldivmod>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c06:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	17da      	asrs	r2, r3, #31
 8001c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	0b50      	lsrs	r0, r2, #13
 8001c20:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c24:	1359      	asrs	r1, r3, #13
 8001c26:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001c2a:	462b      	mov	r3, r5
 8001c2c:	fb00 f203 	mul.w	r2, r0, r3
 8001c30:	4623      	mov	r3, r4
 8001c32:	fb03 f301 	mul.w	r3, r3, r1
 8001c36:	4413      	add	r3, r2
 8001c38:	4622      	mov	r2, r4
 8001c3a:	fba2 1200 	umull	r1, r2, r2, r0
 8001c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c42:	460a      	mov	r2, r1
 8001c44:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001c48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001c52:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c56:	f04f 0000 	mov.w	r0, #0
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	0b50      	lsrs	r0, r2, #13
 8001c60:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c64:	1359      	asrs	r1, r3, #13
 8001c66:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	fb00 f203 	mul.w	r2, r0, r3
 8001c70:	4623      	mov	r3, r4
 8001c72:	fb03 f301 	mul.w	r3, r3, r1
 8001c76:	4413      	add	r3, r2
 8001c78:	4622      	mov	r2, r4
 8001c7a:	fba2 1200 	umull	r1, r2, r2, r0
 8001c7e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001c82:	460a      	mov	r2, r1
 8001c84:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001c88:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	0e4a      	lsrs	r2, r1, #25
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001ca8:	4629      	mov	r1, r5
 8001caa:	164b      	asrs	r3, r1, #25
 8001cac:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cb4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	17da      	asrs	r2, r3, #31
 8001cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8001cbe:	667a      	str	r2, [r7, #100]	; 0x64
 8001cc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cc4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001cc8:	462a      	mov	r2, r5
 8001cca:	fb02 f203 	mul.w	r2, r2, r3
 8001cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	fb01 f303 	mul.w	r3, r1, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cde:	4621      	mov	r1, r4
 8001ce0:	fba2 1201 	umull	r1, r2, r2, r1
 8001ce4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001ce8:	460a      	mov	r2, r1
 8001cea:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001cee:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001d04:	4621      	mov	r1, r4
 8001d06:	0cca      	lsrs	r2, r1, #19
 8001d08:	4629      	mov	r1, r5
 8001d0a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001d0e:	4629      	mov	r1, r5
 8001d10:	14cb      	asrs	r3, r1, #19
 8001d12:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001d16:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001d1a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001d1e:	1884      	adds	r4, r0, r2
 8001d20:	65bc      	str	r4, [r7, #88]	; 0x58
 8001d22:	eb41 0303 	adc.w	r3, r1, r3
 8001d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d28:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001d2c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001d30:	4621      	mov	r1, r4
 8001d32:	1889      	adds	r1, r1, r2
 8001d34:	6539      	str	r1, [r7, #80]	; 0x50
 8001d36:	4629      	mov	r1, r5
 8001d38:	eb43 0101 	adc.w	r1, r3, r1
 8001d3c:	6579      	str	r1, [r7, #84]	; 0x54
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	0a18      	lsrs	r0, r3, #8
 8001d4e:	462b      	mov	r3, r5
 8001d50:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d54:	462b      	mov	r3, r5
 8001d56:	1219      	asrs	r1, r3, #8
 8001d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d5c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	17da      	asrs	r2, r3, #31
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001d74:	464c      	mov	r4, r9
 8001d76:	0123      	lsls	r3, r4, #4
 8001d78:	4644      	mov	r4, r8
 8001d7a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d7e:	4644      	mov	r4, r8
 8001d80:	0122      	lsls	r2, r4, #4
 8001d82:	1884      	adds	r4, r0, r2
 8001d84:	603c      	str	r4, [r7, #0]
 8001d86:	eb41 0303 	adc.w	r3, r1, r3
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d90:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001d94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001da4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001db6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	039a      	lsls	r2, r3, #14
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001dc2:	051b      	lsls	r3, r3, #20
 8001dc4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001dda:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001de2:	4611      	mov	r1, r2
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	fb01 f202 	mul.w	r2, r1, r2
 8001dea:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001dec:	68f9      	ldr	r1, [r7, #12]
 8001dee:	7f09      	ldrb	r1, [r1, #28]
 8001df0:	4608      	mov	r0, r1
 8001df2:	6979      	ldr	r1, [r7, #20]
 8001df4:	fb00 f101 	mul.w	r1, r0, r1
 8001df8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001dfa:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001dfe:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001e02:	1292      	asrs	r2, r2, #10
 8001e04:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001e0e:	fb01 f202 	mul.w	r2, r1, r2
 8001e12:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001e16:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001e18:	fb02 f303 	mul.w	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	13db      	asrs	r3, r3, #15
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	13d2      	asrs	r2, r2, #15
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	7e12      	ldrb	r2, [r2, #24]
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e42:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001e4a:	bfa8      	it	ge
 8001e4c:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001e50:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	131b      	asrs	r3, r3, #12
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08c      	sub	sp, #48	; 0x30
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e76:	2b60      	cmp	r3, #96	; 0x60
 8001e78:	d007      	beq.n	8001e8a <bmp280_read_fixed+0x28>
		if (humidity)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <bmp280_read_fixed+0x32>
 8001e90:	2308      	movs	r3, #8
 8001e92:	e000      	b.n	8001e96 <bmp280_read_fixed+0x34>
 8001e94:	2306      	movs	r3, #6
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f107 0218 	add.w	r2, r7, #24
 8001ea0:	21f7      	movs	r1, #247	; 0xf7
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f7ff fa65 	bl	8001372 <read_data>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <bmp280_read_fixed+0x50>
		return false;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e038      	b.n	8001f24 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001eb2:	7e3b      	ldrb	r3, [r7, #24]
 8001eb4:	031a      	lsls	r2, r3, #12
 8001eb6:	7e7b      	ldrb	r3, [r7, #25]
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	7eba      	ldrb	r2, [r7, #26]
 8001ebe:	0912      	lsrs	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001ec6:	7efb      	ldrb	r3, [r7, #27]
 8001ec8:	031a      	lsls	r2, r3, #12
 8001eca:	7f3b      	ldrb	r3, [r7, #28]
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	7f7a      	ldrb	r2, [r7, #29]
 8001ed2:	0912      	lsrs	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff fc67 	bl	80017b6 <compensate_temperature>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7ff fc97 	bl	8001828 <compensate_pressure>
 8001efa:	4602      	mov	r2, r0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00d      	beq.n	8001f22 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001f06:	7fbb      	ldrb	r3, [r7, #30]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	7ffa      	ldrb	r2, [r7, #31]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	461a      	mov	r2, r3
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f7ff ff44 	bl	8001da4 <compensate_humidity>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3730      	adds	r7, #48	; 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <bmp280_read_float+0x1a>
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	e000      	b.n	8001f48 <bmp280_read_float+0x1c>
 8001f46:	2300      	movs	r3, #0
 8001f48:	f107 0218 	add.w	r2, r7, #24
 8001f4c:	f107 011c 	add.w	r1, r7, #28
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff ff86 	bl	8001e62 <bmp280_read_fixed>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d028      	beq.n	8001fae <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f66:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001fb8 <bmp280_read_float+0x8c>
 8001f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f7e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001fbc <bmp280_read_float+0x90>
 8001f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f9c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001fc0 <bmp280_read_float+0x94>
 8001fa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <bmp280_read_float+0x84>
	}

	return false;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3720      	adds	r7, #32
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	42c80000 	.word	0x42c80000
 8001fbc:	43800000 	.word	0x43800000
 8001fc0:	44800000 	.word	0x44800000

08001fc4 <BQ25798_check>:
#define BQ25798_ADDR 0x6B


// Checking
uint8_t BQ25798_check()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 8001fca:	4819      	ldr	r0, [pc, #100]	; (8002030 <BQ25798_check+0x6c>)
 8001fcc:	f00b fac2 	bl	800d554 <iprintf>
	for (int i = 0; i < 10; i++) {
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	e01d      	b.n	8002012 <BQ25798_check+0x4e>
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8001fd6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001fda:	2203      	movs	r2, #3
 8001fdc:	216b      	movs	r1, #107	; 0x6b
 8001fde:	4815      	ldr	r0, [pc, #84]	; (8002034 <BQ25798_check+0x70>)
 8001fe0:	f006 fe00 	bl	8008be4 <HAL_I2C_IsDeviceReady>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(100);
 8001fe8:	2064      	movs	r0, #100	; 0x64
 8001fea:	f004 f839 	bl	8006060 <HAL_Delay>
	    if (status == HAL_OK) {
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <BQ25798_check+0x3c>
	    	printf("OK !\r\n");
 8001ff4:	4810      	ldr	r0, [pc, #64]	; (8002038 <BQ25798_check+0x74>)
 8001ff6:	f00b fb13 	bl	800d620 <puts>
	    	res = OK;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
	        break;
 8001ffe:	e00b      	b.n	8002018 <BQ25798_check+0x54>
	    } else {
	    	res = FAULT;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
	    	HAL_Delay(500);
 8002004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002008:	f004 f82a 	bl	8006060 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3301      	adds	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b09      	cmp	r3, #9
 8002016:	ddde      	ble.n	8001fd6 <BQ25798_check+0x12>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <BQ25798_check+0x60>
 800201e:	4807      	ldr	r0, [pc, #28]	; (800203c <BQ25798_check+0x78>)
 8002020:	f00b fafe 	bl	800d620 <puts>
	return res;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	0800f570 	.word	0x0800f570
 8002034:	2000055c 	.word	0x2000055c
 8002038:	0800f588 	.word	0x0800f588
 800203c:	0800f590 	.word	0x0800f590

08002040 <_write>:

static char clibuf[32];
static int cliptr;

int _write(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	b29a      	uxth	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3301      	adds	r3, #1
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	4804      	ldr	r0, [pc, #16]	; (8002068 <_write+0x28>)
 8002058:	f009 faa2 	bl	800b5a0 <HAL_UART_Transmit>
    return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200006a4 	.word	0x200006a4

0800206c <HAL_UART_RxCpltCallback>:
{
    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_UART_RxCpltCallback+0x38>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d105      	bne.n	8002088 <HAL_UART_RxCpltCallback+0x1c>
 800207c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002080:	4909      	ldr	r1, [pc, #36]	; (80020a8 <HAL_UART_RxCpltCallback+0x3c>)
 8002082:	4808      	ldr	r0, [pc, #32]	; (80020a4 <HAL_UART_RxCpltCallback+0x38>)
 8002084:	f009 fb20 	bl	800b6c8 <HAL_UART_Receive_IT>
	if(huart == &huart2) HAL_UART_Receive_IT(&huart2, sim_rx_buf, SIM_BUF_SIZE); // Interrupt start Uart2 RX
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_UART_RxCpltCallback+0x40>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d105      	bne.n	800209c <HAL_UART_RxCpltCallback+0x30>
 8002090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002094:	4906      	ldr	r1, [pc, #24]	; (80020b0 <HAL_UART_RxCpltCallback+0x44>)
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <HAL_UART_RxCpltCallback+0x40>)
 8002098:	f009 fb16 	bl	800b6c8 <HAL_UART_Receive_IT>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200006a4 	.word	0x200006a4
 80020a8:	20000218 	.word	0x20000218
 80020ac:	20000728 	.word	0x20000728
 80020b0:	2000041c 	.word	0x2000041c

080020b4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    HAL_UART_RxCpltCallback(huart);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ffd5 	bl	800206c <HAL_UART_RxCpltCallback>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <UART_has_char>:

uint16_t UART_has_char()      // Return number of bytes in buffer
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 80020d0:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <UART_has_char+0x3c>)
 80020d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <UART_has_char+0x3c>)
 80020da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <UART_has_char+0x40>)
 80020e8:	8812      	ldrh	r2, [r2, #0]
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	425a      	negs	r2, r3
 80020ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f6:	bf58      	it	pl
 80020f8:	4253      	negpl	r3, r2
 80020fa:	b29b      	uxth	r3, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	200006a4 	.word	0x200006a4
 800210c:	20000418 	.word	0x20000418

08002110 <UART_receive>:

uint8_t UART_receive()       // Receive byte from buffer
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <UART_receive+0x38>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	b291      	uxth	r1, r2
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <UART_receive+0x38>)
 8002120:	8011      	strh	r1, [r2, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <UART_receive+0x3c>)
 8002126:	5c9b      	ldrb	r3, [r3, r2]
 8002128:	71fb      	strb	r3, [r7, #7]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <UART_receive+0x38>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002132:	d302      	bcc.n	800213a <UART_receive+0x2a>
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <UART_receive+0x38>)
 8002136:	2200      	movs	r2, #0
 8002138:	801a      	strh	r2, [r3, #0]
    return tmp;
 800213a:	79fb      	ldrb	r3, [r7, #7]
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000418 	.word	0x20000418
 800214c:	20000218 	.word	0x20000218

08002150 <find>:

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	e031      	b.n	80021c2 <find+0x72>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e011      	b.n	800218c <find+0x3c>
			if(!arg2[k+1]) return (clibuf+(j+1));
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3301      	adds	r3, #1
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4413      	add	r3, r2
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d104      	bne.n	8002180 <find+0x30>
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	3301      	adds	r3, #1
 800217a:	4a18      	ldr	r2, [pc, #96]	; (80021dc <find+0x8c>)
 800217c:	4413      	add	r3, r2
 800217e:	e027      	b.n	80021d0 <find+0x80>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3301      	adds	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	4a13      	ldr	r2, [pc, #76]	; (80021dc <find+0x8c>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	72fb      	strb	r3, [r7, #11]
 8002196:	7afb      	ldrb	r3, [r7, #11]
 8002198:	3301      	adds	r3, #1
 800219a:	4a11      	ldr	r2, [pc, #68]	; (80021e0 <find+0x90>)
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d102      	bne.n	80021ae <find+0x5e>
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	3320      	adds	r3, #32
 80021ac:	e000      	b.n	80021b0 <find+0x60>
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	440a      	add	r2, r1
 80021b6:	7812      	ldrb	r2, [r2, #0]
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0d5      	beq.n	8002168 <find+0x18>
	for(i=0; clibuf[i]; i++)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3301      	adds	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <find+0x8c>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4413      	add	r3, r2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1c7      	bne.n	800215e <find+0xe>
	return NULL;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	2000043c 	.word	0x2000043c
 80021e0:	0800f9e8 	.word	0x0800f9e8

080021e4 <CLI>:
    }
    *val = tmp;
    return p;
}

void CLI() {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
    int len = UART_has_char();
 80021ea:	f7ff ff6f 	bl	80020cc <UART_has_char>
 80021ee:	4603      	mov	r3, r0
 80021f0:	603b      	str	r3, [r7, #0]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00f      	beq.n	8002218 <CLI+0x34>
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	e008      	b.n	8002210 <CLI+0x2c>
 80021fe:	f7ff ff87 	bl	8002110 <UART_receive>
 8002202:	4603      	mov	r3, r0
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f80b 	bl	8002220 <CLI_proc>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3301      	adds	r3, #1
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	dbf2      	blt.n	80021fe <CLI+0x1a>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <CLI_proc>:

void CLI_proc(char ch)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
	char *p;
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 800222a:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <CLI_proc+0xc8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b1f      	cmp	r3, #31
 8002230:	d807      	bhi.n	8002242 <CLI_proc+0x22>
 8002232:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <CLI_proc+0xc8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	492b      	ldr	r1, [pc, #172]	; (80022e8 <CLI_proc+0xc8>)
 800223a:	600a      	str	r2, [r1, #0]
 800223c:	492b      	ldr	r1, [pc, #172]	; (80022ec <CLI_proc+0xcc>)
 800223e:	79fa      	ldrb	r2, [r7, #7]
 8002240:	54ca      	strb	r2, [r1, r3]
	if(ch == 10)	// LF
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b0a      	cmp	r3, #10
 8002246:	d14b      	bne.n	80022e0 <CLI_proc+0xc0>
	{
	    if(clibuf[cliptr-1] == 13) cliptr--;
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <CLI_proc+0xc8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3b01      	subs	r3, #1
 800224e:	4a27      	ldr	r2, [pc, #156]	; (80022ec <CLI_proc+0xcc>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	2b0d      	cmp	r3, #13
 8002254:	d104      	bne.n	8002260 <CLI_proc+0x40>
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <CLI_proc+0xc8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3b01      	subs	r3, #1
 800225c:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <CLI_proc+0xc8>)
 800225e:	6013      	str	r3, [r2, #0]
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <CLI_proc+0xc8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <CLI_proc+0xcc>)
 8002268:	4413      	add	r3, r2
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <CLI_proc+0xc8>)
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	f1c2 0220 	rsb	r2, r2, #32
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f00b fab3 	bl	800d7e0 <memset>
		cliptr = 0;
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <CLI_proc+0xc8>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
// Main commands ------------------------------------------------------------------------------
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{help(); return;}
 8002280:	481b      	ldr	r0, [pc, #108]	; (80022f0 <CLI_proc+0xd0>)
 8002282:	f7ff ff65 	bl	8002150 <find>
 8002286:	4603      	mov	r3, r0
 8002288:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <CLI_proc+0xd4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d006      	beq.n	800229c <CLI_proc+0x7c>
 800228e:	481a      	ldr	r0, [pc, #104]	; (80022f8 <CLI_proc+0xd8>)
 8002290:	f7ff ff5e 	bl	8002150 <find>
 8002294:	4603      	mov	r3, r0
 8002296:	4a19      	ldr	r2, [pc, #100]	; (80022fc <CLI_proc+0xdc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d102      	bne.n	80022a2 <CLI_proc+0x82>
 800229c:	f000 f83c 	bl	8002318 <help>
 80022a0:	e01e      	b.n	80022e0 <CLI_proc+0xc0>
		if(find("cyclic")==clibuf+6) {cyclic = !cyclic; return;}
 80022a2:	4817      	ldr	r0, [pc, #92]	; (8002300 <CLI_proc+0xe0>)
 80022a4:	f7ff ff54 	bl	8002150 <find>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <CLI_proc+0xe4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d10a      	bne.n	80022c6 <CLI_proc+0xa6>
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <CLI_proc+0xe8>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf0c      	ite	eq
 80022b8:	2301      	moveq	r3, #1
 80022ba:	2300      	movne	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <CLI_proc+0xe8>)
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e00c      	b.n	80022e0 <CLI_proc+0xc0>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 80022c6:	4811      	ldr	r0, [pc, #68]	; (800230c <CLI_proc+0xec>)
 80022c8:	f7ff ff42 	bl	8002150 <find>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <CLI_proc+0xf0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d105      	bne.n	80022e0 <CLI_proc+0xc0>
 80022d4:	22a0      	movs	r2, #160	; 0xa0
 80022d6:	2138      	movs	r1, #56	; 0x38
 80022d8:	480e      	ldr	r0, [pc, #56]	; (8002314 <CLI_proc+0xf4>)
 80022da:	f003 fa43 	bl	8005764 <i2c_scan>
 80022de:	bf00      	nop
//                return;
//            }
//
//        }
	}
}
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000045c 	.word	0x2000045c
 80022ec:	2000043c 	.word	0x2000043c
 80022f0:	0800f5c0 	.word	0x0800f5c0
 80022f4:	2000043d 	.word	0x2000043d
 80022f8:	0800f5c4 	.word	0x0800f5c4
 80022fc:	20000440 	.word	0x20000440
 8002300:	0800f5cc 	.word	0x0800f5cc
 8002304:	20000442 	.word	0x20000442
 8002308:	20000000 	.word	0x20000000
 800230c:	0800f5d4 	.word	0x0800f5d4
 8002310:	20000443 	.word	0x20000443
 8002314:	200005b0 	.word	0x200005b0

08002318 <help>:

void help()
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af02      	add	r7, sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 800231e:	a33b      	add	r3, pc, #236	; (adr r3, 800240c <help+0xf4>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	e9cd 2300 	strd	r2, r3, [sp]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	4b28      	ldr	r3, [pc, #160]	; (80023d0 <help+0xb8>)
 800232e:	4829      	ldr	r0, [pc, #164]	; (80023d4 <help+0xbc>)
 8002330:	f00b f910 	bl	800d554 <iprintf>
	printf("Charger state : ");
 8002334:	4828      	ldr	r0, [pc, #160]	; (80023d8 <help+0xc0>)
 8002336:	f00b f90d 	bl	800d554 <iprintf>
	switch (charger_state)
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <help+0xc4>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d81a      	bhi.n	8002378 <help+0x60>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <help+0x30>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002359 	.word	0x08002359
 800234c:	08002361 	.word	0x08002361
 8002350:	08002369 	.word	0x08002369
 8002354:	08002371 	.word	0x08002371
	{
	case 0:
		printf("FAULT\r\n");
 8002358:	4821      	ldr	r0, [pc, #132]	; (80023e0 <help+0xc8>)
 800235a:	f00b f961 	bl	800d620 <puts>
		break;
 800235e:	e00b      	b.n	8002378 <help+0x60>
	case 1:
		printf("OK\r\n");
 8002360:	4820      	ldr	r0, [pc, #128]	; (80023e4 <help+0xcc>)
 8002362:	f00b f95d 	bl	800d620 <puts>
		break;
 8002366:	e007      	b.n	8002378 <help+0x60>
	case 2:
		printf("No charging ...\r\n");
 8002368:	481f      	ldr	r0, [pc, #124]	; (80023e8 <help+0xd0>)
 800236a:	f00b f959 	bl	800d620 <puts>
		break;
 800236e:	e003      	b.n	8002378 <help+0x60>
	case 3:
		printf("Charging ...\r\n");
 8002370:	481e      	ldr	r0, [pc, #120]	; (80023ec <help+0xd4>)
 8002372:	f00b f955 	bl	800d620 <puts>
		break;
 8002376:	bf00      	nop
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 8002378:	f7fe ff56 	bl	8001228 <GET_MCU_Temp>
 800237c:	ee10 3a10 	vmov	r3, s0
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e1 	bl	8000548 <__aeabi_f2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4819      	ldr	r0, [pc, #100]	; (80023f0 <help+0xd8>)
 800238c:	f00b f8e2 	bl	800d554 <iprintf>
	printf("TMP117 Stat: %d", TMP117_temp_sensor.sensor_present);
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <help+0xdc>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	4619      	mov	r1, r3
 800239c:	4816      	ldr	r0, [pc, #88]	; (80023f8 <help+0xe0>)
 800239e:	f00b f8d9 	bl	800d554 <iprintf>
	printf("   MS8607 Stat: %d", MS8607_temp_sensor.sensor_present);
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <help+0xe4>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4619      	mov	r1, r3
 80023ae:	4814      	ldr	r0, [pc, #80]	; (8002400 <help+0xe8>)
 80023b0:	f00b f8d0 	bl	800d554 <iprintf>
	printf("   SHTC3 Stat: %d \r\n", SHTC3_temp_sensor.sensor_present);
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <help+0xec>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	4811      	ldr	r0, [pc, #68]	; (8002408 <help+0xf0>)
 80023c2:	f00b f8c7 	bl	800d554 <iprintf>
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	f3af 8000 	nop.w
 80023d0:	3ff00000 	.word	0x3ff00000
 80023d4:	0800f5dc 	.word	0x0800f5dc
 80023d8:	0800f600 	.word	0x0800f600
 80023dc:	200007ac 	.word	0x200007ac
 80023e0:	0800f614 	.word	0x0800f614
 80023e4:	0800f61c 	.word	0x0800f61c
 80023e8:	0800f620 	.word	0x0800f620
 80023ec:	0800f634 	.word	0x0800f634
 80023f0:	0800f644 	.word	0x0800f644
 80023f4:	200007b0 	.word	0x200007b0
 80023f8:	0800f660 	.word	0x0800f660
 80023fc:	200007bc 	.word	0x200007bc
 8002400:	0800f670 	.word	0x0800f670
 8002404:	200007c8 	.word	0x200007c8
 8002408:	0800f684 	.word	0x0800f684
 800240c:	a0000000 	.word	0xa0000000
 8002410:	3fc99999 	.word	0x3fc99999

08002414 <DPS368_check>:

DPS_coeff_t DPS_coef;
volatile int32_t Kt_coef, Kp_coef;

uint8_t DPS368_check()
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
	uint8_t value;
	TCA9543A_SelectChannel(2);
 800241a:	2002      	movs	r0, #2
 800241c:	f003 f9f8 	bl	8005810 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8002420:	2001      	movs	r0, #1
 8002422:	f003 fe1d 	bl	8006060 <HAL_Delay>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, DPS368_ADDR, 3, 150);
 8002426:	2396      	movs	r3, #150	; 0x96
 8002428:	2203      	movs	r2, #3
 800242a:	21ee      	movs	r1, #238	; 0xee
 800242c:	4814      	ldr	r0, [pc, #80]	; (8002480 <DPS368_check+0x6c>)
 800242e:	f006 fbd9 	bl	8008be4 <HAL_I2C_IsDeviceReady>
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8002436:	2064      	movs	r0, #100	; 0x64
 8002438:	f003 fe12 	bl	8006060 <HAL_Delay>
	if (status == HAL_OK) {
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <DPS368_check+0x5a>
		i2c_read8(&hi2c2, DPS368_REG_ID, &value, DPS368_ADDR);
 8002442:	1dba      	adds	r2, r7, #6
 8002444:	23ee      	movs	r3, #238	; 0xee
 8002446:	210d      	movs	r1, #13
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <DPS368_check+0x6c>)
 800244a:	f003 f8d3 	bl	80055f4 <i2c_read8>
		TCA9543A_SelectChannel(0);
 800244e:	2000      	movs	r0, #0
 8002450:	f003 f9de 	bl	8005810 <TCA9543A_SelectChannel>
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8002454:	79bb      	ldrb	r3, [r7, #6]
 8002456:	2b10      	cmp	r3, #16
 8002458:	d104      	bne.n	8002464 <DPS368_check+0x50>
 800245a:	480a      	ldr	r0, [pc, #40]	; (8002484 <DPS368_check+0x70>)
 800245c:	f00b f8e0 	bl	800d620 <puts>
 8002460:	2301      	movs	r3, #1
 8002462:	e008      	b.n	8002476 <DPS368_check+0x62>
 8002464:	4808      	ldr	r0, [pc, #32]	; (8002488 <DPS368_check+0x74>)
 8002466:	f00b f8db 	bl	800d620 <puts>
 800246a:	2300      	movs	r3, #0
 800246c:	e003      	b.n	8002476 <DPS368_check+0x62>
	} else {printf("DPS368 FAILED\r\n"); return 0;}
 800246e:	4807      	ldr	r0, [pc, #28]	; (800248c <DPS368_check+0x78>)
 8002470:	f00b f8d6 	bl	800d620 <puts>
 8002474:	2300      	movs	r3, #0
	return 0;
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200005b0 	.word	0x200005b0
 8002484:	0800f69c 	.word	0x0800f69c
 8002488:	0800f6a8 	.word	0x0800f6a8
 800248c:	0800f6b4 	.word	0x0800f6b4

08002490 <getTwosComplement>:

void getTwosComplement(int32_t *raw, uint8_t length)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
    if (*raw & ((uint32_t)1 << (length - 1)))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <getTwosComplement+0x38>
    {
        *raw -= (uint32_t)1 << length;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	2201      	movs	r2, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	1acb      	subs	r3, r1, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	601a      	str	r2, [r3, #0]
    }
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <DPS368_read_coeff>:


void DPS368_read_coeff()
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af04      	add	r7, sp, #16
	uint8_t regs[18];
	SET_DPS368();
 80024da:	f003 f9dd 	bl	8005898 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, regs, 18, 250);
 80024de:	23fa      	movs	r3, #250	; 0xfa
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	2312      	movs	r3, #18
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2301      	movs	r3, #1
 80024ec:	2210      	movs	r2, #16
 80024ee:	21ee      	movs	r1, #238	; 0xee
 80024f0:	4841      	ldr	r0, [pc, #260]	; (80025f8 <DPS368_read_coeff+0x124>)
 80024f2:	f006 fa5d 	bl	80089b0 <HAL_I2C_Mem_Read>
//	for(uint8_t i=0; i<19;i++){
//		printf("Coef %d : %#x\r\n",i,regs[i]);
//	}
	UNSET_BME_DPS();
 80024f6:	f003 f9d6 	bl	80058a6 <UNSET_BME_DPS>
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 80024fa:	793b      	ldrb	r3, [r7, #4]
 80024fc:	011a      	lsls	r2, r3, #4
 80024fe:	797b      	ldrb	r3, [r7, #5]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4313      	orrs	r3, r2
 800250a:	461a      	mov	r2, r3
 800250c:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <DPS368_read_coeff+0x128>)
 800250e:	601a      	str	r2, [r3, #0]
    getTwosComplement(&DPS_coef.C0, 12);
 8002510:	210c      	movs	r1, #12
 8002512:	483a      	ldr	r0, [pc, #232]	; (80025fc <DPS368_read_coeff+0x128>)
 8002514:	f7ff ffbc 	bl	8002490 <getTwosComplement>
    // c0 is only used as c0*0.5, so c0_half is calculated immediately
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8002518:	4b38      	ldr	r3, [pc, #224]	; (80025fc <DPS368_read_coeff+0x128>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	461a      	mov	r2, r3
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <DPS368_read_coeff+0x128>)
 8002522:	601a      	str	r2, [r3, #0]

    // now do the same thing for all other coefficients
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8002524:	797b      	ldrb	r3, [r7, #5]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800252c:	79ba      	ldrb	r2, [r7, #6]
 800252e:	4313      	orrs	r3, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4b32      	ldr	r3, [pc, #200]	; (80025fc <DPS368_read_coeff+0x128>)
 8002534:	605a      	str	r2, [r3, #4]
    getTwosComplement(&DPS_coef.C1, 12);
 8002536:	210c      	movs	r1, #12
 8002538:	4831      	ldr	r0, [pc, #196]	; (8002600 <DPS368_read_coeff+0x12c>)
 800253a:	f7ff ffa9 	bl	8002490 <getTwosComplement>
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	031a      	lsls	r2, r3, #12
 8002542:	7a3b      	ldrb	r3, [r7, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	431a      	orrs	r2, r3
 8002548:	7a7b      	ldrb	r3, [r7, #9]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4313      	orrs	r3, r2
 8002554:	461a      	mov	r2, r3
 8002556:	4b29      	ldr	r3, [pc, #164]	; (80025fc <DPS368_read_coeff+0x128>)
 8002558:	609a      	str	r2, [r3, #8]
    getTwosComplement(&DPS_coef.C00, 20);
 800255a:	2114      	movs	r1, #20
 800255c:	4829      	ldr	r0, [pc, #164]	; (8002604 <DPS368_read_coeff+0x130>)
 800255e:	f7ff ff97 	bl	8002490 <getTwosComplement>
    DPS_coef.C10 = (((uint32_t)regs[5] & 0x0F) << 16) | ((uint32_t)regs[6] << 8) | (uint32_t)regs[7];
 8002562:	7a7b      	ldrb	r3, [r7, #9]
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800256a:	7abb      	ldrb	r3, [r7, #10]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	4313      	orrs	r3, r2
 8002570:	7afa      	ldrb	r2, [r7, #11]
 8002572:	4313      	orrs	r3, r2
 8002574:	461a      	mov	r2, r3
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <DPS368_read_coeff+0x128>)
 8002578:	60da      	str	r2, [r3, #12]
    getTwosComplement(&DPS_coef.C10, 20);
 800257a:	2114      	movs	r1, #20
 800257c:	4822      	ldr	r0, [pc, #136]	; (8002608 <DPS368_read_coeff+0x134>)
 800257e:	f7ff ff87 	bl	8002490 <getTwosComplement>

    DPS_coef.C01 = ((uint32_t)regs[8] << 8) | (uint32_t)regs[9];
 8002582:	7b3b      	ldrb	r3, [r7, #12]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	7b7a      	ldrb	r2, [r7, #13]
 8002588:	4313      	orrs	r3, r2
 800258a:	461a      	mov	r2, r3
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <DPS368_read_coeff+0x128>)
 800258e:	611a      	str	r2, [r3, #16]
    getTwosComplement(&DPS_coef.C01, 16);
 8002590:	2110      	movs	r1, #16
 8002592:	481e      	ldr	r0, [pc, #120]	; (800260c <DPS368_read_coeff+0x138>)
 8002594:	f7ff ff7c 	bl	8002490 <getTwosComplement>

    DPS_coef.C11 = ((uint32_t)regs[10] << 8) | (uint32_t)regs[11];
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	4313      	orrs	r3, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <DPS368_read_coeff+0x128>)
 80025a4:	615a      	str	r2, [r3, #20]
    getTwosComplement(&DPS_coef.C11, 16);
 80025a6:	2110      	movs	r1, #16
 80025a8:	4819      	ldr	r0, [pc, #100]	; (8002610 <DPS368_read_coeff+0x13c>)
 80025aa:	f7ff ff71 	bl	8002490 <getTwosComplement>
    DPS_coef.C20 = ((uint32_t)regs[12] << 8) | (uint32_t)regs[13];
 80025ae:	7c3b      	ldrb	r3, [r7, #16]
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	7c7a      	ldrb	r2, [r7, #17]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <DPS368_read_coeff+0x128>)
 80025ba:	619a      	str	r2, [r3, #24]
    getTwosComplement(&DPS_coef.C20, 16);
 80025bc:	2110      	movs	r1, #16
 80025be:	4815      	ldr	r0, [pc, #84]	; (8002614 <DPS368_read_coeff+0x140>)
 80025c0:	f7ff ff66 	bl	8002490 <getTwosComplement>
    DPS_coef.C21 = ((uint32_t)regs[14] << 8) | (uint32_t)regs[15];
 80025c4:	7cbb      	ldrb	r3, [r7, #18]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	7cfa      	ldrb	r2, [r7, #19]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <DPS368_read_coeff+0x128>)
 80025d0:	61da      	str	r2, [r3, #28]
    getTwosComplement(&DPS_coef.C21, 16);
 80025d2:	2110      	movs	r1, #16
 80025d4:	4810      	ldr	r0, [pc, #64]	; (8002618 <DPS368_read_coeff+0x144>)
 80025d6:	f7ff ff5b 	bl	8002490 <getTwosComplement>
    DPS_coef.C30 = ((uint32_t)regs[16] << 8) | (uint32_t)regs[17];
 80025da:	7d3b      	ldrb	r3, [r7, #20]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	7d7a      	ldrb	r2, [r7, #21]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <DPS368_read_coeff+0x128>)
 80025e6:	621a      	str	r2, [r3, #32]
    getTwosComplement(&DPS_coef.C30, 16);
 80025e8:	2110      	movs	r1, #16
 80025ea:	480c      	ldr	r0, [pc, #48]	; (800261c <DPS368_read_coeff+0x148>)
 80025ec:	f7ff ff50 	bl	8002490 <getTwosComplement>
//    printf("C0: %ld   C1: %ld\r\n",DPS_coef.C0,DPS_coef.C1);
//    printf("C00: %ld   C01: %ld\r\n",DPS_coef.C00,DPS_coef.C01);
//    printf("C10: %ld   C11: %ld\r\n",DPS_coef.C10,DPS_coef.C11);
//    printf("C20: %ld   C21: %ld\r\n",DPS_coef.C20,DPS_coef.C21);
//    printf("C30: %ld\r\n",DPS_coef.C30);
}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200005b0 	.word	0x200005b0
 80025fc:	20000460 	.word	0x20000460
 8002600:	20000464 	.word	0x20000464
 8002604:	20000468 	.word	0x20000468
 8002608:	2000046c 	.word	0x2000046c
 800260c:	20000470 	.word	0x20000470
 8002610:	20000474 	.word	0x20000474
 8002614:	20000478 	.word	0x20000478
 8002618:	2000047c 	.word	0x2000047c
 800261c:	20000480 	.word	0x20000480

08002620 <DPS368_fifo>:
	printbinaryMSB(reg);
//	UNSET_BME_DPS();
}

void DPS368_fifo(uint8_t endis)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af04      	add	r7, sp, #16
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	SET_DPS368();
 800262a:	f003 f935 	bl	8005898 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 800262e:	23fa      	movs	r3, #250	; 0xfa
 8002630:	9302      	str	r3, [sp, #8]
 8002632:	2301      	movs	r3, #1
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	f107 030f 	add.w	r3, r7, #15
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2301      	movs	r3, #1
 800263e:	2209      	movs	r2, #9
 8002640:	21ee      	movs	r1, #238	; 0xee
 8002642:	4810      	ldr	r0, [pc, #64]	; (8002684 <DPS368_fifo+0x64>)
 8002644:	f006 f9b4 	bl	80089b0 <HAL_I2C_Mem_Read>
//	printf("(fifo) CFG REG READ (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	setBit(&reg,1,endis);
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	f107 030f 	add.w	r3, r7, #15
 800264e:	2101      	movs	r1, #1
 8002650:	4618      	mov	r0, r3
 8002652:	f003 f837 	bl	80056c4 <setBit>
//	printf("SET FIFO EN\r\n");
//	printf("(fifo) CFG REG WRITE (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002656:	23fa      	movs	r3, #250	; 0xfa
 8002658:	9302      	str	r3, [sp, #8]
 800265a:	2301      	movs	r3, #1
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	f107 030f 	add.w	r3, r7, #15
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	2209      	movs	r2, #9
 8002668:	21ee      	movs	r1, #238	; 0xee
 800266a:	4806      	ldr	r0, [pc, #24]	; (8002684 <DPS368_fifo+0x64>)
 800266c:	f006 f88c 	bl	8008788 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8002670:	2001      	movs	r0, #1
 8002672:	f003 fcf5 	bl	8006060 <HAL_Delay>
	UNSET_BME_DPS();
 8002676:	f003 f916 	bl	80058a6 <UNSET_BME_DPS>
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200005b0 	.word	0x200005b0

08002688 <DPS368_conf_int>:

void DPS368_conf_int(uint8_t ints)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af04      	add	r7, sp, #16
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	SET_DPS368();
 8002692:	f003 f901 	bl	8005898 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002696:	23fa      	movs	r3, #250	; 0xfa
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	2301      	movs	r3, #1
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	f107 030f 	add.w	r3, r7, #15
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2301      	movs	r3, #1
 80026a6:	2209      	movs	r2, #9
 80026a8:	21ee      	movs	r1, #238	; 0xee
 80026aa:	4810      	ldr	r0, [pc, #64]	; (80026ec <DPS368_conf_int+0x64>)
 80026ac:	f006 f980 	bl	80089b0 <HAL_I2C_Mem_Read>
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	modifyRegister(&reg, 0xF0, ints);
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	f107 030f 	add.w	r3, r7, #15
 80026b6:	21f0      	movs	r1, #240	; 0xf0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 f832 	bl	8005722 <modifyRegister>
//	printf("SET INT \r\n");
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80026be:	23fa      	movs	r3, #250	; 0xfa
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	2301      	movs	r3, #1
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	f107 030f 	add.w	r3, r7, #15
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2301      	movs	r3, #1
 80026ce:	2209      	movs	r2, #9
 80026d0:	21ee      	movs	r1, #238	; 0xee
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <DPS368_conf_int+0x64>)
 80026d4:	f006 f858 	bl	8008788 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80026d8:	2001      	movs	r0, #1
 80026da:	f003 fcc1 	bl	8006060 <HAL_Delay>
	UNSET_BME_DPS();
 80026de:	f003 f8e2 	bl	80058a6 <UNSET_BME_DPS>
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200005b0 	.word	0x200005b0

080026f0 <DPS368_temp_source>:

void DPS368_temp_source()
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af04      	add	r7, sp, #16
	uint8_t reg, reg_mod;
	SET_DPS368();
 80026f6:	f003 f8cf 	bl	8005898 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 80026fa:	23fa      	movs	r3, #250	; 0xfa
 80026fc:	9302      	str	r3, [sp, #8]
 80026fe:	2301      	movs	r3, #1
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	1dbb      	adds	r3, r7, #6
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2301      	movs	r3, #1
 8002708:	2207      	movs	r2, #7
 800270a:	21ee      	movs	r1, #238	; 0xee
 800270c:	4818      	ldr	r0, [pc, #96]	; (8002770 <DPS368_temp_source+0x80>)
 800270e:	f006 f94f 	bl	80089b0 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x07 (hex) (NOMOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x28, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002712:	23fa      	movs	r3, #250	; 0xfa
 8002714:	9302      	str	r3, [sp, #8]
 8002716:	2301      	movs	r3, #1
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2301      	movs	r3, #1
 8002720:	2228      	movs	r2, #40	; 0x28
 8002722:	21ee      	movs	r1, #238	; 0xee
 8002724:	4812      	ldr	r0, [pc, #72]	; (8002770 <DPS368_temp_source+0x80>)
 8002726:	f006 f943 	bl	80089b0 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x28 (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	if((reg & 0x80) == 0) {
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	b25b      	sxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	db06      	blt.n	8002740 <DPS368_temp_source+0x50>
//		printf("Internal Temp\r\n");
		setBit(&reg_mod, 7, 0);
 8002732:	1dbb      	adds	r3, r7, #6
 8002734:	2200      	movs	r2, #0
 8002736:	2107      	movs	r1, #7
 8002738:	4618      	mov	r0, r3
 800273a:	f002 ffc3 	bl	80056c4 <setBit>
 800273e:	e005      	b.n	800274c <DPS368_temp_source+0x5c>
	} else {
//		printf("External Temp\r\n");
		setBit(&reg_mod, 7, 1);
 8002740:	1dbb      	adds	r3, r7, #6
 8002742:	2201      	movs	r2, #1
 8002744:	2107      	movs	r1, #7
 8002746:	4618      	mov	r0, r3
 8002748:	f002 ffbc 	bl	80056c4 <setBit>
		}
//	printf("CFG TEMP SRC 0x07 (hex) (MOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 800274c:	23fa      	movs	r3, #250	; 0xfa
 800274e:	9302      	str	r3, [sp, #8]
 8002750:	2301      	movs	r3, #1
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	1dbb      	adds	r3, r7, #6
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2301      	movs	r3, #1
 800275a:	2207      	movs	r2, #7
 800275c:	21ee      	movs	r1, #238	; 0xee
 800275e:	4804      	ldr	r0, [pc, #16]	; (8002770 <DPS368_temp_source+0x80>)
 8002760:	f006 f812 	bl	8008788 <HAL_I2C_Mem_Write>
	UNSET_BME_DPS();
 8002764:	f003 f89f 	bl	80058a6 <UNSET_BME_DPS>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200005b0 	.word	0x200005b0

08002774 <DPS368_conf_temp>:



void DPS368_conf_temp(uint8_t ovr, uint8_t rate)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af04      	add	r7, sp, #16
 800277a:	4603      	mov	r3, r0
 800277c:	460a      	mov	r2, r1
 800277e:	71fb      	strb	r3, [r7, #7]
 8002780:	4613      	mov	r3, r2
 8002782:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	SET_DPS368();
 8002784:	f003 f888 	bl	8005898 <SET_DPS368>
	reg = ovr + rate;
 8002788:	79fa      	ldrb	r2, [r7, #7]
 800278a:	79bb      	ldrb	r3, [r7, #6]
 800278c:	4413      	add	r3, r2
 800278e:	b2db      	uxtb	r3, r3
 8002790:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002792:	23fa      	movs	r3, #250	; 0xfa
 8002794:	9302      	str	r3, [sp, #8]
 8002796:	2301      	movs	r3, #1
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	f107 030f 	add.w	r3, r7, #15
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2301      	movs	r3, #1
 80027a2:	2207      	movs	r2, #7
 80027a4:	21ee      	movs	r1, #238	; 0xee
 80027a6:	4835      	ldr	r0, [pc, #212]	; (800287c <DPS368_conf_temp+0x108>)
 80027a8:	f005 ffee 	bl	8008788 <HAL_I2C_Mem_Write>
    switch (ovr)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b07      	cmp	r3, #7
 80027b0:	d83a      	bhi.n	8002828 <DPS368_conf_temp+0xb4>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <DPS368_conf_temp+0x44>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027d9 	.word	0x080027d9
 80027bc:	080027e3 	.word	0x080027e3
 80027c0:	080027ed 	.word	0x080027ed
 80027c4:	080027f7 	.word	0x080027f7
 80027c8:	08002801 	.word	0x08002801
 80027cc:	0800280b 	.word	0x0800280b
 80027d0:	08002815 	.word	0x08002815
 80027d4:	0800281f 	.word	0x0800281f
    {
        case DPS_OVERSAMPLE_1:
            Kt_coef = DPS_OSR_SF_1;
 80027d8:	4b29      	ldr	r3, [pc, #164]	; (8002880 <DPS368_conf_temp+0x10c>)
 80027da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80027de:	601a      	str	r2, [r3, #0]
            break;
 80027e0:	e022      	b.n	8002828 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_2:
        	Kt_coef = DPS_OSR_SF_2;
 80027e2:	4b27      	ldr	r3, [pc, #156]	; (8002880 <DPS368_conf_temp+0x10c>)
 80027e4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80027e8:	601a      	str	r2, [r3, #0]
            break;
 80027ea:	e01d      	b.n	8002828 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_4:
        	Kt_coef = DPS_OSR_SF_4;
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <DPS368_conf_temp+0x10c>)
 80027ee:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80027f2:	601a      	str	r2, [r3, #0]
            break;
 80027f4:	e018      	b.n	8002828 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_8:
        	Kt_coef = DPS_OSR_SF_8;
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <DPS368_conf_temp+0x10c>)
 80027f8:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 80027fc:	601a      	str	r2, [r3, #0]
            break;
 80027fe:	e013      	b.n	8002828 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_16:
        	Kt_coef = DPS_OSR_SF_16;
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <DPS368_conf_temp+0x10c>)
 8002802:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8002806:	601a      	str	r2, [r3, #0]
            break;
 8002808:	e00e      	b.n	8002828 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_32:
        	Kt_coef = DPS_OSR_SF_32;
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <DPS368_conf_temp+0x10c>)
 800280c:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8002810:	601a      	str	r2, [r3, #0]
            break;
 8002812:	e009      	b.n	8002828 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_64:
        	Kt_coef = DPS_OSR_SF_64;
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <DPS368_conf_temp+0x10c>)
 8002816:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 800281a:	601a      	str	r2, [r3, #0]
            break;
 800281c:	e004      	b.n	8002828 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_128:
        	Kt_coef = DPS_OSR_SF_128;
 800281e:	4b18      	ldr	r3, [pc, #96]	; (8002880 <DPS368_conf_temp+0x10c>)
 8002820:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8002824:	601a      	str	r2, [r3, #0]
            break;
 8002826:	bf00      	nop
    }
//    printf("Kt_coef set: %lu\r\n",Kt_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002828:	23fa      	movs	r3, #250	; 0xfa
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	2301      	movs	r3, #1
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	f107 030f 	add.w	r3, r7, #15
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2301      	movs	r3, #1
 8002838:	2209      	movs	r2, #9
 800283a:	21ee      	movs	r1, #238	; 0xee
 800283c:	480f      	ldr	r0, [pc, #60]	; (800287c <DPS368_conf_temp+0x108>)
 800283e:	f006 f8b7 	bl	80089b0 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OSR_SF_8) setBit(&reg, 3, 1);
    else setBit(&reg, 3, 0);
 8002842:	f107 030f 	add.w	r3, r7, #15
 8002846:	2200      	movs	r2, #0
 8002848:	2103      	movs	r1, #3
 800284a:	4618      	mov	r0, r3
 800284c:	f002 ff3a 	bl	80056c4 <setBit>
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002850:	23fa      	movs	r3, #250	; 0xfa
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	2301      	movs	r3, #1
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	f107 030f 	add.w	r3, r7, #15
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2301      	movs	r3, #1
 8002860:	2209      	movs	r2, #9
 8002862:	21ee      	movs	r1, #238	; 0xee
 8002864:	4805      	ldr	r0, [pc, #20]	; (800287c <DPS368_conf_temp+0x108>)
 8002866:	f005 ff8f 	bl	8008788 <HAL_I2C_Mem_Write>

	DPS368_temp_source();
 800286a:	f7ff ff41 	bl	80026f0 <DPS368_temp_source>
	UNSET_BME_DPS();
 800286e:	f003 f81a 	bl	80058a6 <UNSET_BME_DPS>
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200005b0 	.word	0x200005b0
 8002880:	20000484 	.word	0x20000484

08002884 <DPS368_conf_press>:

void DPS368_conf_press(uint8_t ovr, uint8_t rate)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af04      	add	r7, sp, #16
 800288a:	4603      	mov	r3, r0
 800288c:	460a      	mov	r2, r1
 800288e:	71fb      	strb	r3, [r7, #7]
 8002890:	4613      	mov	r3, r2
 8002892:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	SET_DPS368();
 8002894:	f003 f800 	bl	8005898 <SET_DPS368>
	reg = ovr + rate;
 8002898:	79fa      	ldrb	r2, [r7, #7]
 800289a:	79bb      	ldrb	r3, [r7, #6]
 800289c:	4413      	add	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80028a2:	23fa      	movs	r3, #250	; 0xfa
 80028a4:	9302      	str	r3, [sp, #8]
 80028a6:	2301      	movs	r3, #1
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	f107 030f 	add.w	r3, r7, #15
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2301      	movs	r3, #1
 80028b2:	2206      	movs	r2, #6
 80028b4:	21ee      	movs	r1, #238	; 0xee
 80028b6:	4834      	ldr	r0, [pc, #208]	; (8002988 <DPS368_conf_press+0x104>)
 80028b8:	f005 ff66 	bl	8008788 <HAL_I2C_Mem_Write>
    switch (ovr)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	2b07      	cmp	r3, #7
 80028c0:	d83a      	bhi.n	8002938 <DPS368_conf_press+0xb4>
 80028c2:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <DPS368_conf_press+0x44>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	080028e9 	.word	0x080028e9
 80028cc:	080028f3 	.word	0x080028f3
 80028d0:	080028fd 	.word	0x080028fd
 80028d4:	08002907 	.word	0x08002907
 80028d8:	08002911 	.word	0x08002911
 80028dc:	0800291b 	.word	0x0800291b
 80028e0:	08002925 	.word	0x08002925
 80028e4:	0800292f 	.word	0x0800292f
    {
        case DPS_OVERSAMPLE_1:
            Kp_coef = DPS_OSR_SF_1;
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <DPS368_conf_press+0x108>)
 80028ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028ee:	601a      	str	r2, [r3, #0]
            break;
 80028f0:	e022      	b.n	8002938 <DPS368_conf_press+0xb4>

        case DPS_OVERSAMPLE_2:
        	Kp_coef = DPS_OSR_SF_2;
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <DPS368_conf_press+0x108>)
 80028f4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80028f8:	601a      	str	r2, [r3, #0]
            break;
 80028fa:	e01d      	b.n	8002938 <DPS368_conf_press+0xb4>

        case DPS_OVERSAMPLE_4:
        	Kp_coef = DPS_OSR_SF_4;
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <DPS368_conf_press+0x108>)
 80028fe:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8002902:	601a      	str	r2, [r3, #0]
            break;
 8002904:	e018      	b.n	8002938 <DPS368_conf_press+0xb4>

        case DPS_OVERSAMPLE_8:
        	Kp_coef = DPS_OSR_SF_8;
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <DPS368_conf_press+0x108>)
 8002908:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800290c:	601a      	str	r2, [r3, #0]
            break;
 800290e:	e013      	b.n	8002938 <DPS368_conf_press+0xb4>

        case DPS_OVERSAMPLE_16:
        	Kp_coef = DPS_OSR_SF_16;
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <DPS368_conf_press+0x108>)
 8002912:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8002916:	601a      	str	r2, [r3, #0]
            break;
 8002918:	e00e      	b.n	8002938 <DPS368_conf_press+0xb4>

        case DPS_OVERSAMPLE_32:
        	Kp_coef = DPS_OSR_SF_32;
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <DPS368_conf_press+0x108>)
 800291c:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8002920:	601a      	str	r2, [r3, #0]
            break;
 8002922:	e009      	b.n	8002938 <DPS368_conf_press+0xb4>

        case DPS_OVERSAMPLE_64:
        	Kp_coef = DPS_OSR_SF_64;
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <DPS368_conf_press+0x108>)
 8002926:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 800292a:	601a      	str	r2, [r3, #0]
            break;
 800292c:	e004      	b.n	8002938 <DPS368_conf_press+0xb4>

        case DPS_OVERSAMPLE_128:
        	Kp_coef = DPS_OSR_SF_128;
 800292e:	4b17      	ldr	r3, [pc, #92]	; (800298c <DPS368_conf_press+0x108>)
 8002930:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8002934:	601a      	str	r2, [r3, #0]
            break;
 8002936:	bf00      	nop
    }

//    printf("Kp_coef set: %lu\r\n",Kp_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002938:	23fa      	movs	r3, #250	; 0xfa
 800293a:	9302      	str	r3, [sp, #8]
 800293c:	2301      	movs	r3, #1
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	f107 030f 	add.w	r3, r7, #15
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	2301      	movs	r3, #1
 8002948:	2209      	movs	r2, #9
 800294a:	21ee      	movs	r1, #238	; 0xee
 800294c:	480e      	ldr	r0, [pc, #56]	; (8002988 <DPS368_conf_press+0x104>)
 800294e:	f006 f82f 	bl	80089b0 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OSR_SF_8) setBit(&reg, 2, 1);
    else setBit(&reg, 2, 0);
 8002952:	f107 030f 	add.w	r3, r7, #15
 8002956:	2200      	movs	r2, #0
 8002958:	2102      	movs	r1, #2
 800295a:	4618      	mov	r0, r3
 800295c:	f002 feb2 	bl	80056c4 <setBit>
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002960:	23fa      	movs	r3, #250	; 0xfa
 8002962:	9302      	str	r3, [sp, #8]
 8002964:	2301      	movs	r3, #1
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	f107 030f 	add.w	r3, r7, #15
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	2209      	movs	r2, #9
 8002972:	21ee      	movs	r1, #238	; 0xee
 8002974:	4804      	ldr	r0, [pc, #16]	; (8002988 <DPS368_conf_press+0x104>)
 8002976:	f005 ff07 	bl	8008788 <HAL_I2C_Mem_Write>

	UNSET_BME_DPS();
 800297a:	f002 ff94 	bl	80058a6 <UNSET_BME_DPS>
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200005b0 	.word	0x200005b0
 800298c:	20000488 	.word	0x20000488

08002990 <DPS368_temp_correct>:
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
	UNSET_BME_DPS();
}

void DPS368_temp_correct()
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af04      	add	r7, sp, #16
	SET_DPS368();
 8002996:	f002 ff7f 	bl	8005898 <SET_DPS368>
	HAL_StatusTypeDef status;
	uint8_t write_data = 0xA5;
 800299a:	23a5      	movs	r3, #165	; 0xa5
 800299c:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 800299e:	23fa      	movs	r3, #250	; 0xfa
 80029a0:	9302      	str	r3, [sp, #8]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	1dbb      	adds	r3, r7, #6
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2301      	movs	r3, #1
 80029ac:	220e      	movs	r2, #14
 80029ae:	21ee      	movs	r1, #238	; 0xee
 80029b0:	482e      	ldr	r0, [pc, #184]	; (8002a6c <DPS368_temp_correct+0xdc>)
 80029b2:	f005 fee9 	bl	8008788 <HAL_I2C_Mem_Write>
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK) {
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10f      	bne.n	80029e0 <DPS368_temp_correct+0x50>
        write_data = 0x96;
 80029c0:	2396      	movs	r3, #150	; 0x96
 80029c2:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 80029c4:	23fa      	movs	r3, #250	; 0xfa
 80029c6:	9302      	str	r3, [sp, #8]
 80029c8:	2301      	movs	r3, #1
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	1dbb      	adds	r3, r7, #6
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2301      	movs	r3, #1
 80029d2:	220f      	movs	r2, #15
 80029d4:	21ee      	movs	r1, #238	; 0xee
 80029d6:	4825      	ldr	r0, [pc, #148]	; (8002a6c <DPS368_temp_correct+0xdc>)
 80029d8:	f005 fed6 	bl	8008788 <HAL_I2C_Mem_Write>
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <DPS368_temp_correct+0x76>
        write_data = 0x02;
 80029e6:	2302      	movs	r3, #2
 80029e8:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x62, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 80029ea:	23fa      	movs	r3, #250	; 0xfa
 80029ec:	9302      	str	r3, [sp, #8]
 80029ee:	2301      	movs	r3, #1
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	1dbb      	adds	r3, r7, #6
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	2262      	movs	r2, #98	; 0x62
 80029fa:	21ee      	movs	r1, #238	; 0xee
 80029fc:	481b      	ldr	r0, [pc, #108]	; (8002a6c <DPS368_temp_correct+0xdc>)
 80029fe:	f005 fec3 	bl	8008788 <HAL_I2C_Mem_Write>
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10f      	bne.n	8002a2c <DPS368_temp_correct+0x9c>
        write_data = 0x00;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8002a10:	23fa      	movs	r3, #250	; 0xfa
 8002a12:	9302      	str	r3, [sp, #8]
 8002a14:	2301      	movs	r3, #1
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	1dbb      	adds	r3, r7, #6
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	220e      	movs	r2, #14
 8002a20:	21ee      	movs	r1, #238	; 0xee
 8002a22:	4812      	ldr	r0, [pc, #72]	; (8002a6c <DPS368_temp_correct+0xdc>)
 8002a24:	f005 feb0 	bl	8008788 <HAL_I2C_Mem_Write>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <DPS368_temp_correct+0xc2>
        write_data = 0x00;
 8002a32:	2300      	movs	r3, #0
 8002a34:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8002a36:	23fa      	movs	r3, #250	; 0xfa
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	1dbb      	adds	r3, r7, #6
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2301      	movs	r3, #1
 8002a44:	220f      	movs	r2, #15
 8002a46:	21ee      	movs	r1, #238	; 0xee
 8002a48:	4808      	ldr	r0, [pc, #32]	; (8002a6c <DPS368_temp_correct+0xdc>)
 8002a4a:	f005 fe9d 	bl	8008788 <HAL_I2C_Mem_Write>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
	}
	DPS368_conf_temp(DPS_OVERSAMPLE_1, DPS_RATE_1);
 8002a52:	2100      	movs	r1, #0
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff fe8d 	bl	8002774 <DPS368_conf_temp>
	DPS368_run_mode(MODE_CMD_TEMP);
 8002a5a:	2002      	movs	r0, #2
 8002a5c:	f000 f808 	bl	8002a70 <DPS368_run_mode>
	UNSET_BME_DPS();
 8002a60:	f002 ff21 	bl	80058a6 <UNSET_BME_DPS>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200005b0 	.word	0x200005b0

08002a70 <DPS368_run_mode>:


void DPS368_run_mode(uint8_t mode)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af04      	add	r7, sp, #16
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
	SET_DPS368();
 8002a7a:	f002 ff0d 	bl	8005898 <SET_DPS368>
	uint8_t reg;
//	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
//	reg = (reg & 0x0E) | mode;
	reg = mode;
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002a82:	23fa      	movs	r3, #250	; 0xfa
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	2301      	movs	r3, #1
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	f107 030f 	add.w	r3, r7, #15
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2301      	movs	r3, #1
 8002a92:	2208      	movs	r2, #8
 8002a94:	21ee      	movs	r1, #238	; 0xee
 8002a96:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <DPS368_run_mode+0x40>)
 8002a98:	f005 fe76 	bl	8008788 <HAL_I2C_Mem_Write>
	HAL_Delay(2);
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f003 fadf 	bl	8006060 <HAL_Delay>
	UNSET_BME_DPS();
 8002aa2:	f002 ff00 	bl	80058a6 <UNSET_BME_DPS>
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200005b0 	.word	0x200005b0

08002ab4 <DPS368_get_temp_cmd>:
	UNSET_BME_DPS();
	return ((reg & 0x10) >> 4);
}

float DPS368_get_temp_cmd(uint8_t ovr)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	; 0x30
 8002ab8:	af04      	add	r7, sp, #16
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
	DPS368_conf_temp(ovr, 0U);
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fe56 	bl	8002774 <DPS368_conf_temp>
	DPS368_run_mode(MODE_CMD_TEMP);
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f7ff ffd1 	bl	8002a70 <DPS368_run_mode>
	HAL_Delay(calcBusyTime(ovr));
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f9ab 	bl	8002e2c <calcBusyTime>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fac1 	bl	8006060 <HAL_Delay>
	HAL_Delay(1);
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f003 fabe 	bl	8006060 <HAL_Delay>
	SET_DPS368();
 8002ae4:	f002 fed8 	bl	8005898 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_temp;
	float temp_scaled, temperature;
//	dumpCFGreg();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8002ae8:	23fa      	movs	r3, #250	; 0xfa
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	2303      	movs	r3, #3
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2301      	movs	r3, #1
 8002af8:	2203      	movs	r2, #3
 8002afa:	21ee      	movs	r1, #238	; 0xee
 8002afc:	4825      	ldr	r0, [pc, #148]	; (8002b94 <DPS368_get_temp_cmd+0xe0>)
 8002afe:	f005 ff57 	bl	80089b0 <HAL_I2C_Mem_Read>
	UNSET_BME_DPS();
 8002b02:	f002 fed0 	bl	80058a6 <UNSET_BME_DPS>
	raw_temp = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8002b06:	7cbb      	ldrb	r3, [r7, #18]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	7c7b      	ldrb	r3, [r7, #17]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	441a      	add	r2, r3
 8002b10:	7c3b      	ldrb	r3, [r7, #16]
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	4413      	add	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
	getTwosComplement(&raw_temp, 24);
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	2118      	movs	r1, #24
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fcb6 	bl	8002490 <getTwosComplement>
	const float scaling = 1.0f/Kt_coef;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <DPS368_get_temp_cmd+0xe4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b38:	edc7 7a07 	vstr	s15, [r7, #28]
	printf("DPS RAW VALUE: %ld\r\n", raw_temp);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4816      	ldr	r0, [pc, #88]	; (8002b9c <DPS368_get_temp_cmd+0xe8>)
 8002b42:	f00a fd07 	bl	800d554 <iprintf>
//	printf("DPS SCALING VALUE: %.12f\r\n", scaling);
	temp_scaled = (float)raw_temp * scaling;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b50:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b58:	edc7 7a06 	vstr	s15, [r7, #24]
//	printf("DPS TEMP SCALED VALUE: %.3f\r\n", temp_scaled);
	temperature = DPS_coef.C0 + DPS_coef.C1 * temp_scaled;
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <DPS368_get_temp_cmd+0xec>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <DPS368_get_temp_cmd+0xec>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b74:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b80:	edc7 7a05 	vstr	s15, [r7, #20]
	return temperature;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	ee07 3a90 	vmov	s15, r3
}
 8002b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200005b0 	.word	0x200005b0
 8002b98:	20000484 	.word	0x20000484
 8002b9c:	0800f6e4 	.word	0x0800f6e4
 8002ba0:	20000460 	.word	0x20000460

08002ba4 <DPS368_get_press_cmd>:



float DPS368_get_press_cmd(uint8_t ovr)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	; 0x38
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
	DPS368_conf_temp(ovr, 0U);
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fdde 	bl	8002774 <DPS368_conf_temp>
	DPS368_run_mode(MODE_CMD_TEMP);
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f7ff ff59 	bl	8002a70 <DPS368_run_mode>
	HAL_Delay(calcBusyTime(ovr));
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f933 	bl	8002e2c <calcBusyTime>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f003 fa49 	bl	8006060 <HAL_Delay>
	HAL_Delay(1);
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f003 fa46 	bl	8006060 <HAL_Delay>
	SET_DPS368();
 8002bd4:	f002 fe60 	bl	8005898 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_temp, raw_press;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8002bd8:	23fa      	movs	r3, #250	; 0xfa
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	2303      	movs	r3, #3
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2301      	movs	r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	21ee      	movs	r1, #238	; 0xee
 8002bec:	4884      	ldr	r0, [pc, #528]	; (8002e00 <DPS368_get_press_cmd+0x25c>)
 8002bee:	f005 fedf 	bl	80089b0 <HAL_I2C_Mem_Read>
	UNSET_BME_DPS();
 8002bf2:	f002 fe58 	bl	80058a6 <UNSET_BME_DPS>
	raw_temp = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8002bf6:	7cbb      	ldrb	r3, [r7, #18]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	7c7b      	ldrb	r3, [r7, #17]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	441a      	add	r2, r3
 8002c00:	7c3b      	ldrb	r3, [r7, #16]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	4413      	add	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
	getTwosComplement(&raw_temp, 24);
 8002c08:	f107 030c 	add.w	r3, r7, #12
 8002c0c:	2118      	movs	r1, #24
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fc3e 	bl	8002490 <getTwosComplement>
	const float scalingT = 1.0f/Kt_coef;
 8002c14:	4b7b      	ldr	r3, [pc, #492]	; (8002e04 <DPS368_get_press_cmd+0x260>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c28:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	printf("DPS RAW TEMP VALUE: %ld\r\n", raw_temp);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4875      	ldr	r0, [pc, #468]	; (8002e08 <DPS368_get_press_cmd+0x264>)
 8002c32:	f00a fc8f 	bl	800d554 <iprintf>
	printf("DPS SCALING TEMP VALUE: %.12f\r\n", scalingT);
 8002c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c38:	f7fd fc86 	bl	8000548 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4872      	ldr	r0, [pc, #456]	; (8002e0c <DPS368_get_press_cmd+0x268>)
 8002c42:	f00a fc87 	bl	800d554 <iprintf>
	float temp_scaled = (float)raw_temp * scalingT;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	ee07 3a90 	vmov	s15, r3
 8002c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c50:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c58:	edc7 7a08 	vstr	s15, [r7, #32]
	printf("DPS TEMP SCALED VALUE: %.3f\r\n", temp_scaled);
 8002c5c:	6a38      	ldr	r0, [r7, #32]
 8002c5e:	f7fd fc73 	bl	8000548 <__aeabi_f2d>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	486a      	ldr	r0, [pc, #424]	; (8002e10 <DPS368_get_press_cmd+0x26c>)
 8002c68:	f00a fc74 	bl	800d554 <iprintf>

	float press_scaled, pressure;
	DPS368_conf_press(ovr, 0U);
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fe07 	bl	8002884 <DPS368_conf_press>
	DPS368_run_mode(MODE_CMD_PRESS);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7ff fefa 	bl	8002a70 <DPS368_run_mode>
	HAL_Delay(calcBusyTime(ovr));
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 f8d4 	bl	8002e2c <calcBusyTime>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 f9ea 	bl	8006060 <HAL_Delay>
	HAL_Delay(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f003 f9e7 	bl	8006060 <HAL_Delay>
	SET_DPS368();
 8002c92:	f002 fe01 	bl	8005898 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_PRESS, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8002c96:	23fa      	movs	r3, #250	; 0xfa
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	21ee      	movs	r1, #238	; 0xee
 8002caa:	4855      	ldr	r0, [pc, #340]	; (8002e00 <DPS368_get_press_cmd+0x25c>)
 8002cac:	f005 fe80 	bl	80089b0 <HAL_I2C_Mem_Read>
	UNSET_BME_DPS();
 8002cb0:	f002 fdf9 	bl	80058a6 <UNSET_BME_DPS>
	raw_press = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8002cb4:	7cbb      	ldrb	r3, [r7, #18]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	7c7b      	ldrb	r3, [r7, #17]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	441a      	add	r2, r3
 8002cbe:	7c3b      	ldrb	r3, [r7, #16]
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60bb      	str	r3, [r7, #8]
	getTwosComplement(&raw_press, 24);
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	2118      	movs	r1, #24
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fbdf 	bl	8002490 <getTwosComplement>
	const float scalingP = 1.0f/Kp_coef;
 8002cd2:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <DPS368_get_press_cmd+0x270>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	ee07 3a90 	vmov	s15, r3
 8002cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce6:	edc7 7a07 	vstr	s15, [r7, #28]
	printf("DPS RAW PRESS VALUE: %ld\r\n", raw_press);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4619      	mov	r1, r3
 8002cee:	484a      	ldr	r0, [pc, #296]	; (8002e18 <DPS368_get_press_cmd+0x274>)
 8002cf0:	f00a fc30 	bl	800d554 <iprintf>
	printf("DPS SCALING PRESS VALUE: %.12f\r\n", scalingP);
 8002cf4:	69f8      	ldr	r0, [r7, #28]
 8002cf6:	f7fd fc27 	bl	8000548 <__aeabi_f2d>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4847      	ldr	r0, [pc, #284]	; (8002e1c <DPS368_get_press_cmd+0x278>)
 8002d00:	f00a fc28 	bl	800d554 <iprintf>
	press_scaled = (float)raw_press * scalingP;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	edc7 7a06 	vstr	s15, [r7, #24]
	printf("DPS PRESS SCALED VALUE: %.3f\r\n", press_scaled);
 8002d1a:	69b8      	ldr	r0, [r7, #24]
 8002d1c:	f7fd fc14 	bl	8000548 <__aeabi_f2d>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	483e      	ldr	r0, [pc, #248]	; (8002e20 <DPS368_get_press_cmd+0x27c>)
 8002d26:	f00a fc15 	bl	800d554 <iprintf>
    pressure = DPS_coef.C00;
 8002d2a:	4b3e      	ldr	r3, [pc, #248]	; (8002e24 <DPS368_get_press_cmd+0x280>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d36:	edc7 7a05 	vstr	s15, [r7, #20]
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8002d3a:	4b3a      	ldr	r3, [pc, #232]	; (8002e24 <DPS368_get_press_cmd+0x280>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d46:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <DPS368_get_press_cmd+0x280>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d52:	4b34      	ldr	r3, [pc, #208]	; (8002e24 <DPS368_get_press_cmd+0x280>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d76:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d86:	edc7 7a05 	vstr	s15, [r7, #20]
	pressure += (temp_scaled * DPS_coef.C01);
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <DPS368_get_press_cmd+0x280>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	ee07 3a90 	vmov	s15, r3
 8002d92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d96:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da6:	edc7 7a05 	vstr	s15, [r7, #20]
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8002daa:	ed97 7a08 	vldr	s14, [r7, #32]
 8002dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8002db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db6:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <DPS368_get_press_cmd+0x280>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dc2:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <DPS368_get_press_cmd+0x280>)
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002dce:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dde:	ed97 7a05 	vldr	s14, [r7, #20]
 8002de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de6:	edc7 7a05 	vstr	s15, [r7, #20]
	return pressure *0.01f;
 8002dea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dee:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002e28 <DPS368_get_press_cmd+0x284>
 8002df2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002df6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	200005b0 	.word	0x200005b0
 8002e04:	20000484 	.word	0x20000484
 8002e08:	0800f6fc 	.word	0x0800f6fc
 8002e0c:	0800f718 	.word	0x0800f718
 8002e10:	0800f738 	.word	0x0800f738
 8002e14:	20000488 	.word	0x20000488
 8002e18:	0800f758 	.word	0x0800f758
 8002e1c:	0800f774 	.word	0x0800f774
 8002e20:	0800f798 	.word	0x0800f798
 8002e24:	20000460 	.word	0x20000460
 8002e28:	3c23d70a 	.word	0x3c23d70a

08002e2c <calcBusyTime>:



uint32_t calcBusyTime(uint8_t osr)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
    // formula from datasheet (optimized)
    return (((uint32_t)20U) + ((uint32_t)16U << ((uint16_t)osr)));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2210      	movs	r2, #16
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	3314      	adds	r3, #20
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <DPS368_init>:

void DPS368_init(uint8_t fifo, uint8_t int_m)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	460a      	mov	r2, r1
 8002e56:	71fb      	strb	r3, [r7, #7]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71bb      	strb	r3, [r7, #6]
	DPS368_read_coeff();
 8002e5c:	f7ff fb3a 	bl	80024d4 <DPS368_read_coeff>
	DPS368_conf_int(int_m);
 8002e60:	79bb      	ldrb	r3, [r7, #6]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fc10 	bl	8002688 <DPS368_conf_int>
	DPS368_fifo(fifo);
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fbd8 	bl	8002620 <DPS368_fifo>
	DPS368_run_mode(MODE_IDLE);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7ff fdfd 	bl	8002a70 <DPS368_run_mode>
	DPS368_temp_correct();
 8002e76:	f7ff fd8b 	bl	8002990 <DPS368_temp_correct>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e8a:	f003 f874 	bl	8005f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e8e:	f000 fa45 	bl	800331c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e92:	f000 fcf9 	bl	8003888 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e96:	f000 fcd9 	bl	800384c <MX_DMA_Init>
  MX_ADC1_Init();
 8002e9a:	f000 faa3 	bl	80033e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002e9e:	f000 fb3d 	bl	800351c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002ea2:	f000 fb7b 	bl	800359c <MX_I2C2_Init>
  MX_I2C3_Init();
 8002ea6:	f000 fbb9 	bl	800361c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8002eaa:	f000 fc6f 	bl	800378c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002eae:	f000 fc9d 	bl	80037ec <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002eb2:	f000 fb07 	bl	80034c4 <MX_CRC_Init>
  MX_TIM16_Init();
 8002eb6:	f000 fbf1 	bl	800369c <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002eba:	f000 fa7e 	bl	80033ba <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);	// LED2 na PWM
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	485d      	ldr	r0, [pc, #372]	; (8003038 <main+0x1b4>)
 8002ec2:	f007 fdad 	bl	800aa20 <HAL_TIM_PWM_Start>
  HAL_UART_RxCpltCallback(&huart1); //CLI
 8002ec6:	485d      	ldr	r0, [pc, #372]	; (800303c <main+0x1b8>)
 8002ec8:	f7ff f8d0 	bl	800206c <HAL_UART_RxCpltCallback>
  HAL_UART_RxCpltCallback(&huart2); //SIM
 8002ecc:	485c      	ldr	r0, [pc, #368]	; (8003040 <main+0x1bc>)
 8002ece:	f7ff f8cd 	bl	800206c <HAL_UART_RxCpltCallback>
  printf("Initializing ...\r\n");
 8002ed2:	485c      	ldr	r0, [pc, #368]	; (8003044 <main+0x1c0>)
 8002ed4:	f00a fba4 	bl	800d620 <puts>
//  check_powerOn();
  charger_state = BQ25798_check();
 8002ed8:	f7ff f874 	bl	8001fc4 <BQ25798_check>
 8002edc:	4603      	mov	r3, r0
 8002ede:	461a      	mov	r2, r3
 8002ee0:	4b59      	ldr	r3, [pc, #356]	; (8003048 <main+0x1c4>)
 8002ee2:	701a      	strb	r2, [r3, #0]
  LED1_ON();
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	4858      	ldr	r0, [pc, #352]	; (800304c <main+0x1c8>)
 8002eea:	f005 f9a1 	bl	8008230 <HAL_GPIO_WritePin>
  LED2_OFF();
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f002 fb48 	bl	8005584 <setLed2>
  ADC_DMA_Start();
 8002ef4:	f7fe f984 	bl	8001200 <ADC_DMA_Start>
  uint32_t ticks1s = HAL_GetTick();
 8002ef8:	f003 f8a6 	bl	8006048 <HAL_GetTick>
 8002efc:	6078      	str	r0, [r7, #4]
  uint32_t ticks30ms = HAL_GetTick();
 8002efe:	f003 f8a3 	bl	8006048 <HAL_GetTick>
 8002f02:	6038      	str	r0, [r7, #0]
  I2C2TCA_RST();
 8002f04:	2200      	movs	r2, #0
 8002f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0e:	f005 f98f 	bl	8008230 <HAL_GPIO_WritePin>
//  i2c_scan(&hi2c2, 0x38, 0xA0);
  TMP117_temp_sensor.sensor_present = TMP117_check();
 8002f12:	f002 fccf 	bl	80058b4 <TMP117_check>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	b2d9      	uxtb	r1, r3
 8002f1e:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <main+0x1cc>)
 8002f20:	7813      	ldrb	r3, [r2, #0]
 8002f22:	f361 0300 	bfi	r3, r1, #0, #1
 8002f26:	7013      	strb	r3, [r2, #0]
  MS8607_temp_sensor.sensor_present = MS8607_check();
 8002f28:	f002 fd64 	bl	80059f4 <MS8607_check>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2d9      	uxtb	r1, r3
 8002f34:	4a47      	ldr	r2, [pc, #284]	; (8003054 <main+0x1d0>)
 8002f36:	7813      	ldrb	r3, [r2, #0]
 8002f38:	f361 0300 	bfi	r3, r1, #0, #1
 8002f3c:	7013      	strb	r3, [r2, #0]
  if(MS8607_temp_sensor.sensor_present) {
 8002f3e:	4b45      	ldr	r3, [pc, #276]	; (8003054 <main+0x1d0>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <main+0xde>
	  MS8607_press_sensor.sensor_present = 1;
 8002f4c:	4a42      	ldr	r2, [pc, #264]	; (8003058 <main+0x1d4>)
 8002f4e:	7813      	ldrb	r3, [r2, #0]
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	7013      	strb	r3, [r2, #0]
	  MS8607_hum_sensor.sensor_present = 1;
 8002f56:	4a41      	ldr	r2, [pc, #260]	; (800305c <main+0x1d8>)
 8002f58:	7813      	ldrb	r3, [r2, #0]
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	7013      	strb	r3, [r2, #0]
 8002f60:	e009      	b.n	8002f76 <main+0xf2>
  } else {
	  MS8607_press_sensor.sensor_present = 0;
 8002f62:	4a3d      	ldr	r2, [pc, #244]	; (8003058 <main+0x1d4>)
 8002f64:	7813      	ldrb	r3, [r2, #0]
 8002f66:	f36f 0300 	bfc	r3, #0, #1
 8002f6a:	7013      	strb	r3, [r2, #0]
	  MS8607_hum_sensor.sensor_present = 0;
 8002f6c:	4a3b      	ldr	r2, [pc, #236]	; (800305c <main+0x1d8>)
 8002f6e:	7813      	ldrb	r3, [r2, #0]
 8002f70:	f36f 0300 	bfc	r3, #0, #1
 8002f74:	7013      	strb	r3, [r2, #0]
  }
  SHTC3_temp_sensor.sensor_present = SHTC3_check();
 8002f76:	f002 fdb3 	bl	8005ae0 <SHTC3_check>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	b2d9      	uxtb	r1, r3
 8002f82:	4a37      	ldr	r2, [pc, #220]	; (8003060 <main+0x1dc>)
 8002f84:	7813      	ldrb	r3, [r2, #0]
 8002f86:	f361 0300 	bfi	r3, r1, #0, #1
 8002f8a:	7013      	strb	r3, [r2, #0]
  if(SHTC3_temp_sensor.sensor_present) SHTC3_hum_sensor.sensor_present = 1; else SHTC3_hum_sensor.sensor_present = 0;
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <main+0x1dc>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <main+0x122>
 8002f9a:	4a32      	ldr	r2, [pc, #200]	; (8003064 <main+0x1e0>)
 8002f9c:	7813      	ldrb	r3, [r2, #0]
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	7013      	strb	r3, [r2, #0]
 8002fa4:	e004      	b.n	8002fb0 <main+0x12c>
 8002fa6:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <main+0x1e0>)
 8002fa8:	7813      	ldrb	r3, [r2, #0]
 8002faa:	f36f 0300 	bfc	r3, #0, #1
 8002fae:	7013      	strb	r3, [r2, #0]

  BME280_temp_sensor.sensor_present = BME280_check();
 8002fb0:	f002 feca 	bl	8005d48 <BME280_check>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	b2d9      	uxtb	r1, r3
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <main+0x1e4>)
 8002fbe:	7813      	ldrb	r3, [r2, #0]
 8002fc0:	f361 0300 	bfi	r3, r1, #0, #1
 8002fc4:	7013      	strb	r3, [r2, #0]
  if(BME280_temp_sensor.sensor_present) {
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <main+0x1e4>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <main+0x166>
	  BME280_press_sensor.sensor_present = 1;
 8002fd4:	4a25      	ldr	r2, [pc, #148]	; (800306c <main+0x1e8>)
 8002fd6:	7813      	ldrb	r3, [r2, #0]
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	7013      	strb	r3, [r2, #0]
	  BME280_hum_sensor.sensor_present = 1;
 8002fde:	4a24      	ldr	r2, [pc, #144]	; (8003070 <main+0x1ec>)
 8002fe0:	7813      	ldrb	r3, [r2, #0]
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	7013      	strb	r3, [r2, #0]
 8002fe8:	e009      	b.n	8002ffe <main+0x17a>
  } else {
	  BME280_press_sensor.sensor_present = 0;
 8002fea:	4a20      	ldr	r2, [pc, #128]	; (800306c <main+0x1e8>)
 8002fec:	7813      	ldrb	r3, [r2, #0]
 8002fee:	f36f 0300 	bfc	r3, #0, #1
 8002ff2:	7013      	strb	r3, [r2, #0]
	  BME280_hum_sensor.sensor_present = 0;
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <main+0x1ec>)
 8002ff6:	7813      	ldrb	r3, [r2, #0]
 8002ff8:	f36f 0300 	bfc	r3, #0, #1
 8002ffc:	7013      	strb	r3, [r2, #0]
  }

  DPS368_temp_sensor.sensor_present = DPS368_check();
 8002ffe:	f7ff fa09 	bl	8002414 <DPS368_check>
 8003002:	4603      	mov	r3, r0
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	b2d9      	uxtb	r1, r3
 800300a:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <main+0x1f0>)
 800300c:	7813      	ldrb	r3, [r2, #0]
 800300e:	f361 0300 	bfi	r3, r1, #0, #1
 8003012:	7013      	strb	r3, [r2, #0]
  if(DPS368_temp_sensor.sensor_present) {
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <main+0x1f0>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02e      	beq.n	8003080 <main+0x1fc>
	  DPS368_press_sensor.sensor_present = 1;
 8003022:	4a15      	ldr	r2, [pc, #84]	; (8003078 <main+0x1f4>)
 8003024:	7813      	ldrb	r3, [r2, #0]
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	7013      	strb	r3, [r2, #0]
	  DPS368_hum_sensor.sensor_present = 1;
 800302c:	4a13      	ldr	r2, [pc, #76]	; (800307c <main+0x1f8>)
 800302e:	7813      	ldrb	r3, [r2, #0]
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	7013      	strb	r3, [r2, #0]
 8003036:	e02d      	b.n	8003094 <main+0x210>
 8003038:	20000658 	.word	0x20000658
 800303c:	200006a4 	.word	0x200006a4
 8003040:	20000728 	.word	0x20000728
 8003044:	0800f7b8 	.word	0x0800f7b8
 8003048:	200007ac 	.word	0x200007ac
 800304c:	48000400 	.word	0x48000400
 8003050:	200007b0 	.word	0x200007b0
 8003054:	200007bc 	.word	0x200007bc
 8003058:	200007ec 	.word	0x200007ec
 800305c:	20000810 	.word	0x20000810
 8003060:	200007c8 	.word	0x200007c8
 8003064:	2000081c 	.word	0x2000081c
 8003068:	200007d4 	.word	0x200007d4
 800306c:	200007f8 	.word	0x200007f8
 8003070:	20000828 	.word	0x20000828
 8003074:	200007e0 	.word	0x200007e0
 8003078:	20000804 	.word	0x20000804
 800307c:	20000834 	.word	0x20000834
  } else {
	  DPS368_press_sensor.sensor_present = 0;
 8003080:	4a8d      	ldr	r2, [pc, #564]	; (80032b8 <main+0x434>)
 8003082:	7813      	ldrb	r3, [r2, #0]
 8003084:	f36f 0300 	bfc	r3, #0, #1
 8003088:	7013      	strb	r3, [r2, #0]
	  DPS368_hum_sensor.sensor_present = 0;
 800308a:	4a8c      	ldr	r2, [pc, #560]	; (80032bc <main+0x438>)
 800308c:	7813      	ldrb	r3, [r2, #0]
 800308e:	f36f 0300 	bfc	r3, #0, #1
 8003092:	7013      	strb	r3, [r2, #0]
  }

  BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_OFF);
 8003094:	2300      	movs	r3, #0
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2303      	movs	r3, #3
 800309a:	2203      	movs	r2, #3
 800309c:	2103      	movs	r1, #3
 800309e:	2001      	movs	r0, #1
 80030a0:	f002 fe90 	bl	8005dc4 <BME280_init_config>

  DPS368_init(FIFO_DIS, INT_NONE);
 80030a4:	2100      	movs	r1, #0
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7ff fed0 	bl	8002e4c <DPS368_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  thp_loop();
 80030ac:	f002 fa7c 	bl	80055a8 <thp_loop>
	  if(HAL_GetTick()-ticks1s >= 10000)
 80030b0:	f002 ffca 	bl	8006048 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80030be:	4293      	cmp	r3, r2
 80030c0:	f240 80e9 	bls.w	8003296 <main+0x412>
	  {
		  if(cyclic) {
 80030c4:	4b7e      	ldr	r3, [pc, #504]	; (80032c0 <main+0x43c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80e3 	beq.w	8003296 <main+0x412>
			  ticks1s = HAL_GetTick();
 80030d0:	f002 ffba 	bl	8006048 <HAL_GetTick>
 80030d4:	6078      	str	r0, [r7, #4]
			  TMP117_temp_sensor.temperature=TMP117_get_temp(avg8);
 80030d6:	2020      	movs	r0, #32
 80030d8:	f002 fc34 	bl	8005944 <TMP117_get_temp>
 80030dc:	eef0 7a40 	vmov.f32	s15, s0
 80030e0:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <main+0x440>)
 80030e2:	ee17 2a90 	vmov	r2, s15
 80030e6:	f8c3 2001 	str.w	r2, [r3, #1]
			  MS8607_temp_sensor.temperature=MS8607_get_temp();
 80030ea:	f002 fc9b 	bl	8005a24 <MS8607_get_temp>
 80030ee:	eef0 7a40 	vmov.f32	s15, s0
 80030f2:	4b75      	ldr	r3, [pc, #468]	; (80032c8 <main+0x444>)
 80030f4:	ee17 2a90 	vmov	r2, s15
 80030f8:	f8c3 2001 	str.w	r2, [r3, #1]
			  MS8607_press_sensor.pressure=MS8607_get_press();
 80030fc:	f002 fca1 	bl	8005a42 <MS8607_get_press>
 8003100:	eef0 7a40 	vmov.f32	s15, s0
 8003104:	4b71      	ldr	r3, [pc, #452]	; (80032cc <main+0x448>)
 8003106:	ee17 2a90 	vmov	r2, s15
 800310a:	f8c3 2001 	str.w	r2, [r3, #1]
			  SHTC3_temp_sensor.temperature=SHTC3_get_temp(0);
 800310e:	2000      	movs	r0, #0
 8003110:	f002 fd46 	bl	8005ba0 <SHTC3_get_temp>
 8003114:	eef0 7a40 	vmov.f32	s15, s0
 8003118:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <main+0x44c>)
 800311a:	ee17 2a90 	vmov	r2, s15
 800311e:	f8c3 2001 	str.w	r2, [r3, #1]
			  SHTC3_hum_sensor.humidity=SHTC3_get_hum(0);
 8003122:	2000      	movs	r0, #0
 8003124:	f002 fda8 	bl	8005c78 <SHTC3_get_hum>
 8003128:	eef0 7a40 	vmov.f32	s15, s0
 800312c:	4b69      	ldr	r3, [pc, #420]	; (80032d4 <main+0x450>)
 800312e:	ee17 2a90 	vmov	r2, s15
 8003132:	f8c3 2001 	str.w	r2, [r3, #1]
			  BME280_temp_sensor.temperature = BME280_get_temp();
 8003136:	f002 fe9d 	bl	8005e74 <BME280_get_temp>
 800313a:	eef0 7a40 	vmov.f32	s15, s0
 800313e:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <main+0x454>)
 8003140:	ee17 2a90 	vmov	r2, s15
 8003144:	f8c3 2001 	str.w	r2, [r3, #1]
			  BME280_press_sensor.pressure = BME280_get_press();
 8003148:	f002 fec0 	bl	8005ecc <BME280_get_press>
 800314c:	eef0 7a40 	vmov.f32	s15, s0
 8003150:	4b62      	ldr	r3, [pc, #392]	; (80032dc <main+0x458>)
 8003152:	ee17 2a90 	vmov	r2, s15
 8003156:	f8c3 2001 	str.w	r2, [r3, #1]
			  printf("Start TEMP DPS\r\n");
 800315a:	4861      	ldr	r0, [pc, #388]	; (80032e0 <main+0x45c>)
 800315c:	f00a fa60 	bl	800d620 <puts>
			  DPS368_temp_sensor.temperature = DPS368_get_temp_cmd(DPS_OVERSAMPLE_8);
 8003160:	2003      	movs	r0, #3
 8003162:	f7ff fca7 	bl	8002ab4 <DPS368_get_temp_cmd>
 8003166:	eef0 7a40 	vmov.f32	s15, s0
 800316a:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <main+0x460>)
 800316c:	ee17 2a90 	vmov	r2, s15
 8003170:	f8c3 2001 	str.w	r2, [r3, #1]
			  DPS368_press_sensor.pressure = DPS368_get_press_cmd(DPS_OVERSAMPLE_8);
 8003174:	2003      	movs	r0, #3
 8003176:	f7ff fd15 	bl	8002ba4 <DPS368_get_press_cmd>
 800317a:	eef0 7a40 	vmov.f32	s15, s0
 800317e:	4b4e      	ldr	r3, [pc, #312]	; (80032b8 <main+0x434>)
 8003180:	ee17 2a90 	vmov	r2, s15
 8003184:	f8c3 2001 	str.w	r2, [r3, #1]
			  printf("-- TEMPERATURE --\r\n");
 8003188:	4857      	ldr	r0, [pc, #348]	; (80032e8 <main+0x464>)
 800318a:	f00a fa49 	bl	800d620 <puts>
			  printf("TMP117: %.3f", TMP117_temp_sensor.temperature);
 800318e:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <main+0x440>)
 8003190:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fd f9d7 	bl	8000548 <__aeabi_f2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	4853      	ldr	r0, [pc, #332]	; (80032ec <main+0x468>)
 80031a0:	f00a f9d8 	bl	800d554 <iprintf>
			  printf("    ");
 80031a4:	4852      	ldr	r0, [pc, #328]	; (80032f0 <main+0x46c>)
 80031a6:	f00a f9d5 	bl	800d554 <iprintf>
			  printf("MS8607: %.3f", MS8607_temp_sensor.temperature);
 80031aa:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <main+0x444>)
 80031ac:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f9c9 	bl	8000548 <__aeabi_f2d>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	484e      	ldr	r0, [pc, #312]	; (80032f4 <main+0x470>)
 80031bc:	f00a f9ca 	bl	800d554 <iprintf>
			  printf("    ");
 80031c0:	484b      	ldr	r0, [pc, #300]	; (80032f0 <main+0x46c>)
 80031c2:	f00a f9c7 	bl	800d554 <iprintf>
			  printf("DPS368: %.3f", DPS368_temp_sensor.temperature);
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <main+0x460>)
 80031c8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd f9bb 	bl	8000548 <__aeabi_f2d>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4848      	ldr	r0, [pc, #288]	; (80032f8 <main+0x474>)
 80031d8:	f00a f9bc 	bl	800d554 <iprintf>
			  printf("    \r\n");
 80031dc:	4847      	ldr	r0, [pc, #284]	; (80032fc <main+0x478>)
 80031de:	f00a fa1f 	bl	800d620 <puts>
			  printf("SHTC3 Normal\r\n");
 80031e2:	4847      	ldr	r0, [pc, #284]	; (8003300 <main+0x47c>)
 80031e4:	f00a fa1c 	bl	800d620 <puts>
			  printf("SHTC3: %.3f", SHTC3_temp_sensor.temperature);
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <main+0x44c>)
 80031ea:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f9aa 	bl	8000548 <__aeabi_f2d>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4842      	ldr	r0, [pc, #264]	; (8003304 <main+0x480>)
 80031fa:	f00a f9ab 	bl	800d554 <iprintf>
			  printf("      ");
 80031fe:	4842      	ldr	r0, [pc, #264]	; (8003308 <main+0x484>)
 8003200:	f00a f9a8 	bl	800d554 <iprintf>
			  printf("SHTC3: %.3f", SHTC3_hum_sensor.humidity);
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <main+0x450>)
 8003206:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f99c 	bl	8000548 <__aeabi_f2d>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	483b      	ldr	r0, [pc, #236]	; (8003304 <main+0x480>)
 8003216:	f00a f99d 	bl	800d554 <iprintf>
			  printf("\r\n");
 800321a:	483c      	ldr	r0, [pc, #240]	; (800330c <main+0x488>)
 800321c:	f00a fa00 	bl	800d620 <puts>
			  printf("-- PRESSURE --\r\n");
 8003220:	483b      	ldr	r0, [pc, #236]	; (8003310 <main+0x48c>)
 8003222:	f00a f9fd 	bl	800d620 <puts>
			  printf("MS8607: %.3f", MS8607_press_sensor.pressure);
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <main+0x448>)
 8003228:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f98b 	bl	8000548 <__aeabi_f2d>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	482f      	ldr	r0, [pc, #188]	; (80032f4 <main+0x470>)
 8003238:	f00a f98c 	bl	800d554 <iprintf>
			  printf("    ");
 800323c:	482c      	ldr	r0, [pc, #176]	; (80032f0 <main+0x46c>)
 800323e:	f00a f989 	bl	800d554 <iprintf>
			  printf("BME280: %.3f", BME280_press_sensor.pressure);
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <main+0x458>)
 8003244:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f97d 	bl	8000548 <__aeabi_f2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4830      	ldr	r0, [pc, #192]	; (8003314 <main+0x490>)
 8003254:	f00a f97e 	bl	800d554 <iprintf>
			  printf("    ");
 8003258:	4825      	ldr	r0, [pc, #148]	; (80032f0 <main+0x46c>)
 800325a:	f00a f97b 	bl	800d554 <iprintf>
			  printf("DPS368: %.3f", DPS368_press_sensor.pressure);
 800325e:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <main+0x434>)
 8003260:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd f96f 	bl	8000548 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4822      	ldr	r0, [pc, #136]	; (80032f8 <main+0x474>)
 8003270:	f00a f970 	bl	800d554 <iprintf>
			  printf("    \r\n");
 8003274:	4821      	ldr	r0, [pc, #132]	; (80032fc <main+0x478>)
 8003276:	f00a f9d3 	bl	800d620 <puts>
//			  printf("SHTC3 LP\r\n");
//			  printf("SHTC3: %.3f", SHTC3_temp_sensor.temperature);
//			  printf("      ");
//			  printf("SHTC3: %.3f", SHTC3_hum_sensor.humidity);
//			  printf("\r\n");
			  printf("BME280: %.3f", BME280_temp_sensor.temperature);
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <main+0x454>)
 800327c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd f961 	bl	8000548 <__aeabi_f2d>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4822      	ldr	r0, [pc, #136]	; (8003314 <main+0x490>)
 800328c:	f00a f962 	bl	800d554 <iprintf>
			  printf("\r\n");
 8003290:	481e      	ldr	r0, [pc, #120]	; (800330c <main+0x488>)
 8003292:	f00a f9c5 	bl	800d620 <puts>
//			  printf("BME280: %d %d %d \r\n",BME280_temp_sensor.sensor_present, BME280_press_sensor.sensor_present, BME280_hum_sensor.sensor_present);
//			  printf("DPS368: %d %d %d \r\n",DPS368_temp_sensor.sensor_present, DPS368_press_sensor.sensor_present, DPS368_hum_sensor.sensor_present);

		  }
	  }
	  if(HAL_GetTick()-ticks30ms >= 30)
 8003296:	f002 fed7 	bl	8006048 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b1d      	cmp	r3, #29
 80032a2:	f67f af03 	bls.w	80030ac <main+0x228>
	  {
	  	    ticks30ms = HAL_GetTick();
 80032a6:	f002 fecf 	bl	8006048 <HAL_GetTick>
 80032aa:	6038      	str	r0, [r7, #0]
	  	    LED1_TOGGLE();
 80032ac:	2120      	movs	r1, #32
 80032ae:	481a      	ldr	r0, [pc, #104]	; (8003318 <main+0x494>)
 80032b0:	f004 ffd6 	bl	8008260 <HAL_GPIO_TogglePin>
	  thp_loop();
 80032b4:	e6fa      	b.n	80030ac <main+0x228>
 80032b6:	bf00      	nop
 80032b8:	20000804 	.word	0x20000804
 80032bc:	20000834 	.word	0x20000834
 80032c0:	20000000 	.word	0x20000000
 80032c4:	200007b0 	.word	0x200007b0
 80032c8:	200007bc 	.word	0x200007bc
 80032cc:	200007ec 	.word	0x200007ec
 80032d0:	200007c8 	.word	0x200007c8
 80032d4:	2000081c 	.word	0x2000081c
 80032d8:	200007d4 	.word	0x200007d4
 80032dc:	200007f8 	.word	0x200007f8
 80032e0:	0800f7cc 	.word	0x0800f7cc
 80032e4:	200007e0 	.word	0x200007e0
 80032e8:	0800f7dc 	.word	0x0800f7dc
 80032ec:	0800f7f0 	.word	0x0800f7f0
 80032f0:	0800f800 	.word	0x0800f800
 80032f4:	0800f808 	.word	0x0800f808
 80032f8:	0800f818 	.word	0x0800f818
 80032fc:	0800f828 	.word	0x0800f828
 8003300:	0800f830 	.word	0x0800f830
 8003304:	0800f840 	.word	0x0800f840
 8003308:	0800f84c 	.word	0x0800f84c
 800330c:	0800f854 	.word	0x0800f854
 8003310:	0800f858 	.word	0x0800f858
 8003314:	0800f868 	.word	0x0800f868
 8003318:	48000400 	.word	0x48000400

0800331c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b096      	sub	sp, #88	; 0x58
 8003320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	2244      	movs	r2, #68	; 0x44
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f00a fa58 	bl	800d7e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003330:	463b      	mov	r3, r7
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800333e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003342:	f006 f91d 	bl	8009580 <HAL_PWREx_ControlVoltageScaling>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800334c:	f000 fb5e 	bl	8003a0c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003350:	2301      	movs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800335a:	2302      	movs	r3, #2
 800335c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800335e:	2303      	movs	r3, #3
 8003360:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003362:	2301      	movs	r3, #1
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003366:	230a      	movs	r3, #10
 8003368:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800336a:	2307      	movs	r3, #7
 800336c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800336e:	2302      	movs	r3, #2
 8003370:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003372:	2302      	movs	r3, #2
 8003374:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4618      	mov	r0, r3
 800337c:	f006 f956 	bl	800962c <HAL_RCC_OscConfig>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003386:	f000 fb41 	bl	8003a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800338a:	230f      	movs	r3, #15
 800338c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800338e:	2303      	movs	r3, #3
 8003390:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800339e:	463b      	mov	r3, r7
 80033a0:	2102      	movs	r1, #2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f006 fd56 	bl	8009e54 <HAL_RCC_ClockConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80033ae:	f000 fb2d 	bl	8003a0c <Error_Handler>
  }
}
 80033b2:	bf00      	nop
 80033b4:	3758      	adds	r7, #88	; 0x58
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	2025      	movs	r0, #37	; 0x25
 80033c4:	f004 f909 	bl	80075da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033c8:	2025      	movs	r0, #37	; 0x25
 80033ca:	f004 f922 	bl	8007612 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	2026      	movs	r0, #38	; 0x26
 80033d4:	f004 f901 	bl	80075da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033d8:	2026      	movs	r0, #38	; 0x26
 80033da:	f004 f91a 	bl	8007612 <HAL_NVIC_EnableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033ea:	463b      	mov	r3, r7
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	605a      	str	r2, [r3, #4]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	611a      	str	r2, [r3, #16]
 80033f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80033fa:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <MX_ADC1_Init+0xd4>)
 80033fc:	4a2f      	ldr	r2, [pc, #188]	; (80034bc <MX_ADC1_Init+0xd8>)
 80033fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003402:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003406:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <MX_ADC1_Init+0xd4>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003410:	2200      	movs	r2, #0
 8003412:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800341a:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <MX_ADC1_Init+0xd4>)
 800341c:	2204      	movs	r2, #4
 800341e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003422:	2200      	movs	r2, #0
 8003424:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003428:	2201      	movs	r2, #1
 800342a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <MX_ADC1_Init+0xd4>)
 800342e:	2201      	movs	r2, #1
 8003430:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003432:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <MX_ADC1_Init+0xd4>)
 800343c:	2200      	movs	r2, #0
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003442:	2200      	movs	r2, #0
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003450:	2200      	movs	r2, #0
 8003452:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8003454:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800345c:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <MX_ADC1_Init+0xd4>)
 800345e:	220c      	movs	r2, #12
 8003460:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003464:	2200      	movs	r2, #0
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <MX_ADC1_Init+0xd4>)
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003470:	2201      	movs	r2, #1
 8003472:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003474:	4810      	ldr	r0, [pc, #64]	; (80034b8 <MX_ADC1_Init+0xd4>)
 8003476:	f003 f805 	bl	8006484 <HAL_ADC_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003480:	f000 fac4 	bl	8003a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <MX_ADC1_Init+0xdc>)
 8003486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003488:	2306      	movs	r3, #6
 800348a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800348c:	2307      	movs	r3, #7
 800348e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003490:	237f      	movs	r3, #127	; 0x7f
 8003492:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003494:	2304      	movs	r3, #4
 8003496:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800349c:	463b      	mov	r3, r7
 800349e:	4619      	mov	r1, r3
 80034a0:	4805      	ldr	r0, [pc, #20]	; (80034b8 <MX_ADC1_Init+0xd4>)
 80034a2:	f003 f9d9 	bl	8006858 <HAL_ADC_ConfigChannel>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80034ac:	f000 faae 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80034b0:	bf00      	nop
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	2000048c 	.word	0x2000048c
 80034bc:	50040000 	.word	0x50040000
 80034c0:	c7520000 	.word	0xc7520000

080034c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <MX_CRC_Init+0x50>)
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <MX_CRC_Init+0x54>)
 80034cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <MX_CRC_Init+0x50>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80034d4:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <MX_CRC_Init+0x50>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x31;
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <MX_CRC_Init+0x50>)
 80034dc:	2231      	movs	r2, #49	; 0x31
 80034de:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <MX_CRC_Init+0x50>)
 80034e2:	2210      	movs	r2, #16
 80034e4:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFF;
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <MX_CRC_Init+0x50>)
 80034e8:	22ff      	movs	r2, #255	; 0xff
 80034ea:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <MX_CRC_Init+0x50>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <MX_CRC_Init+0x50>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <MX_CRC_Init+0x50>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80034fe:	4805      	ldr	r0, [pc, #20]	; (8003514 <MX_CRC_Init+0x50>)
 8003500:	f004 f8a8 	bl	8007654 <HAL_CRC_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 800350a:	f000 fa7f 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000538 	.word	0x20000538
 8003518:	40023000 	.word	0x40023000

0800351c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <MX_I2C1_Init+0x74>)
 8003522:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <MX_I2C1_Init+0x78>)
 8003524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <MX_I2C1_Init+0x74>)
 8003528:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <MX_I2C1_Init+0x7c>)
 800352a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <MX_I2C1_Init+0x74>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <MX_I2C1_Init+0x74>)
 8003534:	2201      	movs	r2, #1
 8003536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <MX_I2C1_Init+0x74>)
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <MX_I2C1_Init+0x74>)
 8003540:	2200      	movs	r2, #0
 8003542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <MX_I2C1_Init+0x74>)
 8003546:	2200      	movs	r2, #0
 8003548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800354a:	4b11      	ldr	r3, [pc, #68]	; (8003590 <MX_I2C1_Init+0x74>)
 800354c:	2200      	movs	r2, #0
 800354e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <MX_I2C1_Init+0x74>)
 8003552:	2200      	movs	r2, #0
 8003554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003556:	480e      	ldr	r0, [pc, #56]	; (8003590 <MX_I2C1_Init+0x74>)
 8003558:	f004 fe9c 	bl	8008294 <HAL_I2C_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003562:	f000 fa53 	bl	8003a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003566:	2100      	movs	r1, #0
 8003568:	4809      	ldr	r0, [pc, #36]	; (8003590 <MX_I2C1_Init+0x74>)
 800356a:	f005 ff63 	bl	8009434 <HAL_I2CEx_ConfigAnalogFilter>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003574:	f000 fa4a 	bl	8003a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003578:	2100      	movs	r1, #0
 800357a:	4805      	ldr	r0, [pc, #20]	; (8003590 <MX_I2C1_Init+0x74>)
 800357c:	f005 ffa5 	bl	80094ca <HAL_I2CEx_ConfigDigitalFilter>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003586:	f000 fa41 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000055c 	.word	0x2000055c
 8003594:	40005400 	.word	0x40005400
 8003598:	00301347 	.word	0x00301347

0800359c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <MX_I2C2_Init+0x74>)
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <MX_I2C2_Init+0x78>)
 80035a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <MX_I2C2_Init+0x74>)
 80035a8:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <MX_I2C2_Init+0x7c>)
 80035aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80035ac:	4b18      	ldr	r3, [pc, #96]	; (8003610 <MX_I2C2_Init+0x74>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035b2:	4b17      	ldr	r3, [pc, #92]	; (8003610 <MX_I2C2_Init+0x74>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035b8:	4b15      	ldr	r3, [pc, #84]	; (8003610 <MX_I2C2_Init+0x74>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80035be:	4b14      	ldr	r3, [pc, #80]	; (8003610 <MX_I2C2_Init+0x74>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035c4:	4b12      	ldr	r3, [pc, #72]	; (8003610 <MX_I2C2_Init+0x74>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <MX_I2C2_Init+0x74>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <MX_I2C2_Init+0x74>)
 80035d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80035d8:	480d      	ldr	r0, [pc, #52]	; (8003610 <MX_I2C2_Init+0x74>)
 80035da:	f004 fe5b 	bl	8008294 <HAL_I2C_Init>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80035e4:	f000 fa12 	bl	8003a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035e8:	2100      	movs	r1, #0
 80035ea:	4809      	ldr	r0, [pc, #36]	; (8003610 <MX_I2C2_Init+0x74>)
 80035ec:	f005 ff22 	bl	8009434 <HAL_I2CEx_ConfigAnalogFilter>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80035f6:	f000 fa09 	bl	8003a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80035fa:	2100      	movs	r1, #0
 80035fc:	4804      	ldr	r0, [pc, #16]	; (8003610 <MX_I2C2_Init+0x74>)
 80035fe:	f005 ff64 	bl	80094ca <HAL_I2CEx_ConfigDigitalFilter>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003608:	f000 fa00 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800360c:	bf00      	nop
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200005b0 	.word	0x200005b0
 8003614:	40005800 	.word	0x40005800
 8003618:	00909beb 	.word	0x00909beb

0800361c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <MX_I2C3_Init+0x74>)
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <MX_I2C3_Init+0x78>)
 8003624:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00301347;
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <MX_I2C3_Init+0x74>)
 8003628:	4a1b      	ldr	r2, [pc, #108]	; (8003698 <MX_I2C3_Init+0x7c>)
 800362a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <MX_I2C3_Init+0x74>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <MX_I2C3_Init+0x74>)
 8003634:	2201      	movs	r2, #1
 8003636:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003638:	4b15      	ldr	r3, [pc, #84]	; (8003690 <MX_I2C3_Init+0x74>)
 800363a:	2200      	movs	r2, #0
 800363c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <MX_I2C3_Init+0x74>)
 8003640:	2200      	movs	r2, #0
 8003642:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <MX_I2C3_Init+0x74>)
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <MX_I2C3_Init+0x74>)
 800364c:	2200      	movs	r2, #0
 800364e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <MX_I2C3_Init+0x74>)
 8003652:	2200      	movs	r2, #0
 8003654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003656:	480e      	ldr	r0, [pc, #56]	; (8003690 <MX_I2C3_Init+0x74>)
 8003658:	f004 fe1c 	bl	8008294 <HAL_I2C_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003662:	f000 f9d3 	bl	8003a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003666:	2100      	movs	r1, #0
 8003668:	4809      	ldr	r0, [pc, #36]	; (8003690 <MX_I2C3_Init+0x74>)
 800366a:	f005 fee3 	bl	8009434 <HAL_I2CEx_ConfigAnalogFilter>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003674:	f000 f9ca 	bl	8003a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003678:	2100      	movs	r1, #0
 800367a:	4805      	ldr	r0, [pc, #20]	; (8003690 <MX_I2C3_Init+0x74>)
 800367c:	f005 ff25 	bl	80094ca <HAL_I2CEx_ConfigDigitalFilter>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003686:	f000 f9c1 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000604 	.word	0x20000604
 8003694:	40005c00 	.word	0x40005c00
 8003698:	00301347 	.word	0x00301347

0800369c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b092      	sub	sp, #72	; 0x48
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80036a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	611a      	str	r2, [r3, #16]
 80036b2:	615a      	str	r2, [r3, #20]
 80036b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036b6:	463b      	mov	r3, r7
 80036b8:	222c      	movs	r2, #44	; 0x2c
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f00a f88f 	bl	800d7e0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <MX_TIM16_Init+0xe8>)
 80036c4:	4a30      	ldr	r2, [pc, #192]	; (8003788 <MX_TIM16_Init+0xec>)
 80036c6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 312;
 80036c8:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <MX_TIM16_Init+0xe8>)
 80036ca:	f44f 729c 	mov.w	r2, #312	; 0x138
 80036ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d0:	4b2c      	ldr	r3, [pc, #176]	; (8003784 <MX_TIM16_Init+0xe8>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256;
 80036d6:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <MX_TIM16_Init+0xe8>)
 80036d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036dc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <MX_TIM16_Init+0xe8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80036e4:	4b27      	ldr	r3, [pc, #156]	; (8003784 <MX_TIM16_Init+0xe8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ea:	4b26      	ldr	r3, [pc, #152]	; (8003784 <MX_TIM16_Init+0xe8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80036f0:	4824      	ldr	r0, [pc, #144]	; (8003784 <MX_TIM16_Init+0xe8>)
 80036f2:	f007 f8dd 	bl	800a8b0 <HAL_TIM_Base_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80036fc:	f000 f986 	bl	8003a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003700:	4820      	ldr	r0, [pc, #128]	; (8003784 <MX_TIM16_Init+0xe8>)
 8003702:	f007 f92c 	bl	800a95e <HAL_TIM_PWM_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800370c:	f000 f97e 	bl	8003a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003710:	2360      	movs	r3, #96	; 0x60
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003718:	2302      	movs	r3, #2
 800371a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800371c:	2300      	movs	r3, #0
 800371e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003720:	2304      	movs	r3, #4
 8003722:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800372c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003730:	2200      	movs	r2, #0
 8003732:	4619      	mov	r1, r3
 8003734:	4813      	ldr	r0, [pc, #76]	; (8003784 <MX_TIM16_Init+0xe8>)
 8003736:	f007 fa51 	bl	800abdc <HAL_TIM_PWM_ConfigChannel>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8003740:	f000 f964 	bl	8003a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003748:	2300      	movs	r3, #0
 800374a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800375c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800375e:	2300      	movs	r3, #0
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003762:	463b      	mov	r3, r7
 8003764:	4619      	mov	r1, r3
 8003766:	4807      	ldr	r0, [pc, #28]	; (8003784 <MX_TIM16_Init+0xe8>)
 8003768:	f007 fe54 	bl	800b414 <HAL_TIMEx_ConfigBreakDeadTime>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8003772:	f000 f94b 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003776:	4803      	ldr	r0, [pc, #12]	; (8003784 <MX_TIM16_Init+0xe8>)
 8003778:	f001 fcb0 	bl	80050dc <HAL_TIM_MspPostInit>

}
 800377c:	bf00      	nop
 800377e:	3748      	adds	r7, #72	; 0x48
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000658 	.word	0x20000658
 8003788:	40014400 	.word	0x40014400

0800378c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 8003792:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <MX_USART1_UART_Init+0x5c>)
 8003794:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003796:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 8003798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800379c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037a4:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037b2:	220c      	movs	r2, #12
 80037b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037b6:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037be:	2200      	movs	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037c2:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ce:	4805      	ldr	r0, [pc, #20]	; (80037e4 <MX_USART1_UART_Init+0x58>)
 80037d0:	f007 fe98 	bl	800b504 <HAL_UART_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80037da:	f000 f917 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	200006a4 	.word	0x200006a4
 80037e8:	40013800 	.word	0x40013800

080037ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <MX_USART2_UART_Init+0x58>)
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <MX_USART2_UART_Init+0x5c>)
 80037f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037f6:	4b13      	ldr	r3, [pc, #76]	; (8003844 <MX_USART2_UART_Init+0x58>)
 80037f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <MX_USART2_UART_Init+0x58>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <MX_USART2_UART_Init+0x58>)
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <MX_USART2_UART_Init+0x58>)
 800380c:	2200      	movs	r2, #0
 800380e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <MX_USART2_UART_Init+0x58>)
 8003812:	220c      	movs	r2, #12
 8003814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <MX_USART2_UART_Init+0x58>)
 8003818:	2200      	movs	r2, #0
 800381a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <MX_USART2_UART_Init+0x58>)
 800381e:	2200      	movs	r2, #0
 8003820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <MX_USART2_UART_Init+0x58>)
 8003824:	2200      	movs	r2, #0
 8003826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <MX_USART2_UART_Init+0x58>)
 800382a:	2200      	movs	r2, #0
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800382e:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_USART2_UART_Init+0x58>)
 8003830:	f007 fe68 	bl	800b504 <HAL_UART_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800383a:	f000 f8e7 	bl	8003a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000728 	.word	0x20000728
 8003848:	40004400 	.word	0x40004400

0800384c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_DMA_Init+0x38>)
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <MX_DMA_Init+0x38>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6493      	str	r3, [r2, #72]	; 0x48
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_DMA_Init+0x38>)
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	2100      	movs	r1, #0
 800386e:	200b      	movs	r0, #11
 8003870:	f003 feb3 	bl	80075da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003874:	200b      	movs	r0, #11
 8003876:	f003 fecc 	bl	8007612 <HAL_NVIC_EnableIRQ>

}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000

08003888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388e:	f107 0314 	add.w	r3, r7, #20
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800389e:	4b57      	ldr	r3, [pc, #348]	; (80039fc <MX_GPIO_Init+0x174>)
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	4a56      	ldr	r2, [pc, #344]	; (80039fc <MX_GPIO_Init+0x174>)
 80038a4:	f043 0304 	orr.w	r3, r3, #4
 80038a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038aa:	4b54      	ldr	r3, [pc, #336]	; (80039fc <MX_GPIO_Init+0x174>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038b6:	4b51      	ldr	r3, [pc, #324]	; (80039fc <MX_GPIO_Init+0x174>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	4a50      	ldr	r2, [pc, #320]	; (80039fc <MX_GPIO_Init+0x174>)
 80038bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c2:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <MX_GPIO_Init+0x174>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ce:	4b4b      	ldr	r3, [pc, #300]	; (80039fc <MX_GPIO_Init+0x174>)
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	4a4a      	ldr	r2, [pc, #296]	; (80039fc <MX_GPIO_Init+0x174>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038da:	4b48      	ldr	r3, [pc, #288]	; (80039fc <MX_GPIO_Init+0x174>)
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e6:	4b45      	ldr	r3, [pc, #276]	; (80039fc <MX_GPIO_Init+0x174>)
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	4a44      	ldr	r2, [pc, #272]	; (80039fc <MX_GPIO_Init+0x174>)
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038f2:	4b42      	ldr	r3, [pc, #264]	; (80039fc <MX_GPIO_Init+0x174>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 80038fe:	2200      	movs	r2, #0
 8003900:	f44f 51cb 	mov.w	r1, #6496	; 0x1960
 8003904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003908:	f004 fc92 	bl	8008230 <HAL_GPIO_WritePin>
                          |BQ_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 800390c:	2200      	movs	r2, #0
 800390e:	f248 2121 	movw	r1, #33313	; 0x8221
 8003912:	483b      	ldr	r0, [pc, #236]	; (8003a00 <MX_GPIO_Init+0x178>)
 8003914:	f004 fc8c 	bl	8008230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003918:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800391c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800391e:	2303      	movs	r3, #3
 8003920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4619      	mov	r1, r3
 800392c:	4835      	ldr	r0, [pc, #212]	; (8003a04 <MX_GPIO_Init+0x17c>)
 800392e:	f004 fb05 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8003932:	f248 0302 	movw	r3, #32770	; 0x8002
 8003936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003938:	2303      	movs	r3, #3
 800393a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4619      	mov	r1, r3
 8003946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800394a:	f004 faf7 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_UART_RI_Pin */
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 800394e:	2310      	movs	r3, #16
 8003950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 800395a:	f107 0314 	add.w	r3, r7, #20
 800395e:	4619      	mov	r1, r3
 8003960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003964:	f004 faea 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_UART_DTR_Pin SIM_GPS_Pin RST2_Pin BQ_QON_Pin
                           BQ_CE_Pin */
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8003968:	f44f 53cb 	mov.w	r3, #6496	; 0x1960
 800396c:	617b      	str	r3, [r7, #20]
                          |BQ_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396e:	2301      	movs	r3, #1
 8003970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003976:	2300      	movs	r3, #0
 8003978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397a:	f107 0314 	add.w	r3, r7, #20
 800397e:	4619      	mov	r1, r3
 8003980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003984:	f004 fada 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_PWR_Pin RST3_Pin LED1_Pin Main_SW_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin;
 8003988:	f248 2321 	movw	r3, #33313	; 0x8221
 800398c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800398e:	2301      	movs	r3, #1
 8003990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399a:	f107 0314 	add.w	r3, r7, #20
 800399e:	4619      	mov	r1, r3
 80039a0:	4817      	ldr	r0, [pc, #92]	; (8003a00 <MX_GPIO_Init+0x178>)
 80039a2:	f004 facb 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_WDT_Pin BQ_INT_Pin */
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 80039a6:	f241 0302 	movw	r3, #4098	; 0x1002
 80039aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	4619      	mov	r1, r3
 80039ba:	4811      	ldr	r0, [pc, #68]	; (8003a00 <MX_GPIO_Init+0x178>)
 80039bc:	f004 fabe 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP7_Pin TP8_Pin PB11 PB3 */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 80039c0:	f640 430c 	movw	r3, #3084	; 0xc0c
 80039c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039c6:	2303      	movs	r3, #3
 80039c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	480a      	ldr	r0, [pc, #40]	; (8003a00 <MX_GPIO_Init+0x178>)
 80039d6:	f004 fab1 	bl	8007f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039da:	2308      	movs	r3, #8
 80039dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039de:	2303      	movs	r3, #3
 80039e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4806      	ldr	r0, [pc, #24]	; (8003a08 <MX_GPIO_Init+0x180>)
 80039ee:	f004 faa5 	bl	8007f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039f2:	bf00      	nop
 80039f4:	3728      	adds	r7, #40	; 0x28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	48000400 	.word	0x48000400
 8003a04:	48000800 	.word	0x48000800
 8003a08:	48001c00 	.word	0x48001c00

08003a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a10:	b672      	cpsid	i
}
 8003a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LED1_OFF();
 8003a14:	2201      	movs	r2, #1
 8003a16:	2120      	movs	r1, #32
 8003a18:	4803      	ldr	r0, [pc, #12]	; (8003a28 <Error_Handler+0x1c>)
 8003a1a:	f004 fc09 	bl	8008230 <HAL_GPIO_WritePin>
  LED2_ON();
 8003a1e:	201f      	movs	r0, #31
 8003a20:	f001 fdb0 	bl	8005584 <setLed2>
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <Error_Handler+0x18>
 8003a26:	bf00      	nop
 8003a28:	48000400 	.word	0x48000400

08003a2c <ms8607_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the ms8607 device.
 */
void ms8607_init(void)
{	
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
	hsensor_i2c_master_mode = ms8607_i2c_no_hold;
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <ms8607_init+0x18>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <ms8607_init+0x1c>)
 8003a38:	2205      	movs	r2, #5
 8003a3a:	701a      	strb	r2, [r3, #0]
	
	/* Initialize and enable device with config. */
	i2c_master_init();
 8003a3c:	f001 f933 	bl	8004ca6 <i2c_master_init>
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000874 	.word	0x20000874
 8003a48:	20000875 	.word	0x20000875

08003a4c <ms8607_is_connected>:
 * \return bool : status of MS8607
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool ms8607_is_connected(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
	return (hsensor_is_connected() && psensor_is_connected());
 8003a50:	f000 f836 	bl	8003ac0 <hsensor_is_connected>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <ms8607_is_connected+0x1c>
 8003a5a:	f000 f84a 	bl	8003af2 <psensor_is_connected>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <ms8607_is_connected+0x1c>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <ms8607_is_connected+0x1e>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <ms8607_read_temperature>:

	return ms8607_status_ok;
}

enum ms8607_status ms8607_read_temperature( float *t)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	enum ms8607_status status;

	status = psensor_read_temperature(t);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f951 	bl	8003d24 <psensor_read_temperature>
 8003a82:	4603      	mov	r3, r0
 8003a84:	73fb      	strb	r3, [r7, #15]
	if(status != ms8607_status_ok)
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <ms8607_read_temperature+0x1c>
		return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	e000      	b.n	8003a92 <ms8607_read_temperature+0x1e>

	return ms8607_status_ok;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <ms8607_read_pressure>:

enum ms8607_status ms8607_read_pressure( float *p)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
	enum ms8607_status status;

	status = psensor_read_pressure(p);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fc4e 	bl	8004344 <psensor_read_pressure>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	73fb      	strb	r3, [r7, #15]
	if(status != ms8607_status_ok)
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <ms8607_read_pressure+0x1c>
		return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	e000      	b.n	8003ab8 <ms8607_read_pressure+0x1e>

	return ms8607_status_ok;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <hsensor_is_connected>:
 * \return bool : status of humidity sensor
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool hsensor_is_connected(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
	enum status_code i2c_status;
	
	struct i2c_master_packet transfer = {
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	80bb      	strh	r3, [r7, #4]
 8003aca:	2300      	movs	r3, #0
 8003acc:	80fb      	strh	r3, [r7, #6]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
		.address     = HSENSOR_ADDR,
		.data_length = 0,
		.data        = NULL,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8003ad2:	1d3b      	adds	r3, r7, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 f905 	bl	8004ce4 <i2c_master_write_packet_wait>
 8003ada:	4603      	mov	r3, r0
 8003adc:	73fb      	strb	r3, [r7, #15]
	if( i2c_status != STATUS_OK)
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <hsensor_is_connected+0x28>
		return false;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <hsensor_is_connected+0x2a>
	
	return true;
 8003ae8:	2301      	movs	r3, #1
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <psensor_is_connected>:
 * \return bool : status of Pressure sensor
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool psensor_is_connected(void)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
	enum status_code i2c_status;
	
	struct i2c_master_packet transfer = {
 8003af8:	23ec      	movs	r3, #236	; 0xec
 8003afa:	80bb      	strh	r3, [r7, #4]
 8003afc:	2300      	movs	r3, #0
 8003afe:	80fb      	strh	r3, [r7, #6]
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]
		.address     = PSENSOR_ADDR,
		.data_length = 0,
		.data        = NULL,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8003b04:	1d3b      	adds	r3, r7, #4
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 f8ec 	bl	8004ce4 <i2c_master_write_packet_wait>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]
	if( i2c_status != STATUS_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <psensor_is_connected+0x28>
		return false;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e000      	b.n	8003b1c <psensor_is_connected+0x2a>
	
	return true;
 8003b1a:	2301      	movs	r3, #1
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <psensor_write_command>:
 *       - ms8607_status_ok : I2C transfer completed successfully
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 */
enum ms8607_status psensor_write_command( uint8_t cmd)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
	enum status_code i2c_status;
	uint8_t data[1];
		
	data[0] = cmd;
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	753b      	strb	r3, [r7, #20]
		
	struct i2c_master_packet transfer = {
 8003b32:	23ec      	movs	r3, #236	; 0xec
 8003b34:	81bb      	strh	r3, [r7, #12]
 8003b36:	2301      	movs	r3, #1
 8003b38:	81fb      	strh	r3, [r7, #14]
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	613b      	str	r3, [r7, #16]
		.address     = PSENSOR_ADDR,
		.data_length = 1,
		.data        = data,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f8cd 	bl	8004ce4 <i2c_master_write_packet_wait>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	75fb      	strb	r3, [r7, #23]
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <psensor_write_command+0x34>
		return ms8607_status_no_i2c_acknowledge;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e005      	b.n	8003b64 <psensor_write_command+0x40>
	if( i2c_status != STATUS_OK)
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <psensor_write_command+0x3e>
		return ms8607_status_i2c_transfer_error;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e000      	b.n	8003b64 <psensor_write_command+0x40>
	
	return ms8607_status_ok;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <psensor_read_eeprom_coeff>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error on the coefficients
 */
enum ms8607_status psensor_read_eeprom_coeff(uint8_t command, uint16_t *coeff)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	6039      	str	r1, [r7, #0]
 8003b76:	71fb      	strb	r3, [r7, #7]
	enum ms8607_status status;
	enum status_code i2c_status;
	uint8_t buffer[2];
	
	buffer[0] = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	753b      	strb	r3, [r7, #20]
	buffer[1] = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	757b      	strb	r3, [r7, #21]

	/* Read data */
	struct i2c_master_packet read_transfer = {
 8003b80:	23ec      	movs	r3, #236	; 0xec
 8003b82:	81bb      	strh	r3, [r7, #12]
 8003b84:	2302      	movs	r3, #2
 8003b86:	81fb      	strh	r3, [r7, #14]
 8003b88:	f107 0314 	add.w	r3, r7, #20
 8003b8c:	613b      	str	r3, [r7, #16]
		.data_length = 2,
		.data        = buffer,
	};
	
	// Send the conversion command
	status = psensor_write_command(command);
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ffc7 	bl	8003b24 <psensor_write_command>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]
	if(status != ms8607_status_ok)
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <psensor_read_eeprom_coeff+0x38>
		return status;
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	e021      	b.n	8003be8 <psensor_read_eeprom_coeff+0x7c>
	
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8003ba4:	f107 030c 	add.w	r3, r7, #12
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 f883 	bl	8004cb4 <i2c_master_read_packet_wait>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	75bb      	strb	r3, [r7, #22]
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8003bb2:	7dbb      	ldrb	r3, [r7, #22]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <psensor_read_eeprom_coeff+0x50>
		return ms8607_status_no_i2c_acknowledge;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e015      	b.n	8003be8 <psensor_read_eeprom_coeff+0x7c>
	if( i2c_status != STATUS_OK)
 8003bbc:	7dbb      	ldrb	r3, [r7, #22]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <psensor_read_eeprom_coeff+0x5a>
		return ms8607_status_i2c_transfer_error;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e010      	b.n	8003be8 <psensor_read_eeprom_coeff+0x7c>
		
	*coeff = (buffer[0] << 8) | buffer[1];
 8003bc6:	7d3b      	ldrb	r3, [r7, #20]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	b21a      	sxth	r2, r3
 8003bcc:	7d7b      	ldrb	r3, [r7, #21]
 8003bce:	b21b      	sxth	r3, r3
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	801a      	strh	r2, [r3, #0]
    
    if (*coeff == 0)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <psensor_read_eeprom_coeff+0x7a>
        return ms8607_status_i2c_transfer_error;
 8003be2:	2302      	movs	r3, #2
 8003be4:	e000      	b.n	8003be8 <psensor_read_eeprom_coeff+0x7c>
	
	return ms8607_status_ok;	
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <psensor_read_eeprom>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error on the coefficients
 */
enum ms8607_status psensor_read_eeprom(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
	enum ms8607_status status;
	uint8_t i;
	
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	71fb      	strb	r3, [r7, #7]
 8003bfa:	e016      	b.n	8003c2a <psensor_read_eeprom+0x3a>
	{
		status = psensor_read_eeprom_coeff( PROM_ADDRESS_READ_ADDRESS_0 + i*2, eeprom_coeff+i);
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	3350      	adds	r3, #80	; 0x50
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4916      	ldr	r1, [pc, #88]	; (8003c64 <psensor_read_eeprom+0x74>)
 8003c0c:	440b      	add	r3, r1
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4610      	mov	r0, r2
 8003c12:	f7ff ffab 	bl	8003b6c <psensor_read_eeprom_coeff>
 8003c16:	4603      	mov	r3, r0
 8003c18:	71bb      	strb	r3, [r7, #6]
		if(status != ms8607_status_ok)
 8003c1a:	79bb      	ldrb	r3, [r7, #6]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <psensor_read_eeprom+0x34>
			return status;
 8003c20:	79bb      	ldrb	r3, [r7, #6]
 8003c22:	e01a      	b.n	8003c5a <psensor_read_eeprom+0x6a>
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	3301      	adds	r3, #1
 8003c28:	71fb      	strb	r3, [r7, #7]
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b06      	cmp	r3, #6
 8003c2e:	d9e5      	bls.n	8003bfc <psensor_read_eeprom+0xc>
	}
	
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <psensor_read_eeprom+0x74>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	0b1b      	lsrs	r3, r3, #12
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4809      	ldr	r0, [pc, #36]	; (8003c64 <psensor_read_eeprom+0x74>)
 8003c3e:	f000 ffc5 	bl	8004bcc <psensor_crc_check>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f083 0301 	eor.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <psensor_read_eeprom+0x62>
		return ms8607_status_crc_error;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e003      	b.n	8003c5a <psensor_read_eeprom+0x6a>
	
	psensor_coeff_read = true;
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <psensor_read_eeprom+0x78>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
	
  	return ms8607_status_ok;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000878 	.word	0x20000878
 8003c68:	20000876 	.word	0x20000876

08003c6c <psensor_conversion_and_read_adc>:
 *       - ms8607_status_ok : I2C transfer completed successfully
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 */
static enum ms8607_status psensor_conversion_and_read_adc(uint8_t cmd, uint32_t *adc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	71fb      	strb	r3, [r7, #7]
	enum ms8607_status status;
	enum status_code i2c_status;
	uint8_t buffer[3];
	
	buffer[0] = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	743b      	strb	r3, [r7, #16]
	buffer[1] = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	747b      	strb	r3, [r7, #17]
	buffer[2] = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	74bb      	strb	r3, [r7, #18]

	/* Read data */
    struct i2c_master_packet read_transfer = {
 8003c84:	23ec      	movs	r3, #236	; 0xec
 8003c86:	813b      	strh	r3, [r7, #8]
 8003c88:	2303      	movs	r3, #3
 8003c8a:	817b      	strh	r3, [r7, #10]
 8003c8c:	f107 0310 	add.w	r3, r7, #16
 8003c90:	60fb      	str	r3, [r7, #12]
		.address     = PSENSOR_ADDR,
		.data_length = 3,
		.data        = buffer,
	};

	status = psensor_write_command(cmd);
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff45 	bl	8003b24 <psensor_write_command>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]
	// 20ms wait for conversion
	HAL_Delay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	0fda      	lsrs	r2, r3, #31
 8003ca6:	4413      	add	r3, r2
 8003ca8:	105b      	asrs	r3, r3, #1
 8003caa:	461a      	mov	r2, r3
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <psensor_conversion_and_read_adc+0xb0>)
 8003cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <psensor_conversion_and_read_adc+0xb4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	099b      	lsrs	r3, r3, #6
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f002 f9d0 	bl	8006060 <HAL_Delay>
	if( status != ms8607_status_ok)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <psensor_conversion_and_read_adc+0x5e>
		return status;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	e024      	b.n	8003d14 <psensor_conversion_and_read_adc+0xa8>

	// Send the read command
	status = psensor_write_command(PSENSOR_READ_ADC);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7ff ff2a 	bl	8003b24 <psensor_write_command>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	75fb      	strb	r3, [r7, #23]
	if( status != ms8607_status_ok)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <psensor_conversion_and_read_adc+0x72>
		return status;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	e01a      	b.n	8003d14 <psensor_conversion_and_read_adc+0xa8>
	
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 ffe6 	bl	8004cb4 <i2c_master_read_packet_wait>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	75bb      	strb	r3, [r7, #22]
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8003cec:	7dbb      	ldrb	r3, [r7, #22]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <psensor_conversion_and_read_adc+0x8a>
		return ms8607_status_no_i2c_acknowledge;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00e      	b.n	8003d14 <psensor_conversion_and_read_adc+0xa8>
	if( i2c_status != STATUS_OK)
 8003cf6:	7dbb      	ldrb	r3, [r7, #22]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <psensor_conversion_and_read_adc+0x94>
		return ms8607_status_i2c_transfer_error;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e009      	b.n	8003d14 <psensor_conversion_and_read_adc+0xa8>

	*adc = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8003d00:	7c3b      	ldrb	r3, [r7, #16]
 8003d02:	041a      	lsls	r2, r3, #16
 8003d04:	7c7b      	ldrb	r3, [r7, #17]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	7cba      	ldrb	r2, [r7, #18]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]
	
	return status;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000004 	.word	0x20000004
 8003d20:	10624dd3 	.word	0x10624dd3

08003d24 <psensor_read_temperature>:
	
	return status;
}

enum ms8607_status psensor_read_temperature( float *temperature)
{
 8003d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d28:	ed2d 8b02 	vpush	{d8}
 8003d2c:	b0de      	sub	sp, #376	; 0x178
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	enum ms8607_status status = ms8607_status_ok;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	int32_t dT, TEMP;
	int64_t T2, OFF2, SENS2;
	uint8_t cmd;

	// If first time adc is requested, get EEPROM coefficients
	if( psensor_coeff_read == false )
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <psensor_read_temperature+0x84>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	f083 0301 	eor.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <psensor_read_temperature+0x2e>
		status = psensor_read_eeprom();
 8003d48:	f7ff ff52 	bl	8003bf0 <psensor_read_eeprom>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	if( status != ms8607_status_ok)
 8003d52:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <psensor_read_temperature+0x3c>
		return status;
 8003d5a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8003d5e:	e2e9      	b.n	8004334 <psensor_read_temperature+0x610>

	// First read temperature
	cmd = psensor_resolution_osr*2;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <psensor_read_temperature+0x88>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	cmd |= PSENSOR_START_TEMPERATURE_ADC_CONVERSION;
 8003d6a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8003d6e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8003d72:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8003d76:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8003d7a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff73 	bl	8003c6c <psensor_conversion_and_read_adc>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	if( status != ms8607_status_ok)
 8003d8c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <psensor_read_temperature+0x76>
		return status;
 8003d94:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8003d98:	e2cc      	b.n	8004334 <psensor_read_temperature+0x610>

    if (adc_temperature == 0)
 8003d9a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <psensor_read_temperature+0x8c>
        return ms8607_status_i2c_transfer_error;
 8003da2:	2302      	movs	r3, #2
 8003da4:	e2c6      	b.n	8004334 <psensor_read_temperature+0x610>
 8003da6:	bf00      	nop
 8003da8:	20000876 	.word	0x20000876
 8003dac:	20000875 	.word	0x20000875

	// Difference between actual and reference temperature = D2 - Tref
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8003db0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003db4:	461a      	mov	r2, r3
 8003db6:	4bcb      	ldr	r3, [pc, #812]	; (80040e4 <psensor_read_temperature+0x3c0>)
 8003db8:	895b      	ldrh	r3, [r3, #10]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	// Actual temperature = 2000 + dT * TEMPSENS
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8003dc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003dc6:	17da      	asrs	r2, r3, #31
 8003dc8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003dcc:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8003dd0:	4bc4      	ldr	r3, [pc, #784]	; (80040e4 <psensor_read_temperature+0x3c0>)
 8003dd2:	899b      	ldrh	r3, [r3, #12]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003ddc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003de0:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8003de4:	460b      	mov	r3, r1
 8003de6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003dea:	fb02 f203 	mul.w	r2, r2, r3
 8003dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003df2:	e9c7 014c 	strd	r0, r1, [r7, #304]	; 0x130
 8003df6:	4601      	mov	r1, r0
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8003e02:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8003e06:	fba2 8901 	umull	r8, r9, r2, r1
 8003e0a:	444b      	add	r3, r9
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 8003e1a:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 8003e1e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8003e22:	4613      	mov	r3, r2
 8003e24:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003e28:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

	// Second order temperature compensation
	if( TEMP < 2000 )
 8003e2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003e34:	f280 8221 	bge.w	800427a <psensor_read_temperature+0x556>
	{
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 8003e38:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e3c:	17da      	asrs	r2, r3, #31
 8003e3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e42:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003e46:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e4a:	17da      	asrs	r2, r3, #31
 8003e4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e50:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003e54:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8003e58:	462b      	mov	r3, r5
 8003e5a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8003e5e:	4642      	mov	r2, r8
 8003e60:	fb02 f203 	mul.w	r2, r2, r3
 8003e64:	464b      	mov	r3, r9
 8003e66:	4621      	mov	r1, r4
 8003e68:	fb01 f303 	mul.w	r3, r1, r3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4622      	mov	r2, r4
 8003e70:	4641      	mov	r1, r8
 8003e72:	fba2 1201 	umull	r1, r2, r2, r1
 8003e76:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8003e80:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003e84:	4413      	add	r3, r2
 8003e86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e8a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003e8e:	4622      	mov	r2, r4
 8003e90:	462b      	mov	r3, r5
 8003e92:	1891      	adds	r1, r2, r2
 8003e94:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e96:	415b      	adcs	r3, r3
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	1851      	adds	r1, r2, r1
 8003ea2:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	eb43 0101 	adc.w	r1, r3, r1
 8003eac:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	104a      	asrs	r2, r1, #1
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	17cb      	asrs	r3, r1, #31
 8003ec4:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8003ec8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ecc:	17da      	asrs	r2, r3, #31
 8003ece:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ed2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003ed6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003eda:	460b      	mov	r3, r1
 8003edc:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8003ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003eee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ef2:	17da      	asrs	r2, r3, #31
 8003ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003efc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003f00:	460b      	mov	r3, r1
 8003f02:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8003f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003f10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f14:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003f18:	462b      	mov	r3, r5
 8003f1a:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8003f1e:	4642      	mov	r2, r8
 8003f20:	fb02 f203 	mul.w	r2, r2, r3
 8003f24:	464b      	mov	r3, r9
 8003f26:	4621      	mov	r1, r4
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	4622      	mov	r2, r4
 8003f30:	4641      	mov	r1, r8
 8003f32:	fba2 1201 	umull	r1, r2, r2, r1
 8003f36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003f40:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f44:	4413      	add	r3, r2
 8003f46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f4a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003f4e:	4622      	mov	r2, r4
 8003f50:	462b      	mov	r3, r5
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f04f 0100 	mov.w	r1, #0
 8003f5a:	0119      	lsls	r1, r3, #4
 8003f5c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003f60:	0110      	lsls	r0, r2, #4
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4621      	mov	r1, r4
 8003f68:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8003f7e:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8003f82:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8003f86:	4692      	mov	sl, r2
 8003f88:	469b      	mov	fp, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	eb1a 0303 	adds.w	r3, sl, r3
 8003f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f94:	462b      	mov	r3, r5
 8003f96:	eb4b 0303 	adc.w	r3, fp, r3
 8003f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f9e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	da07      	bge.n	8003fb6 <psensor_read_temperature+0x292>
 8003fa6:	f112 010f 	adds.w	r1, r2, #15
 8003faa:	6239      	str	r1, [r7, #32]
 8003fac:	f143 0300 	adc.w	r3, r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fb6:	f04f 0000 	mov.w	r0, #0
 8003fba:	f04f 0100 	mov.w	r1, #0
 8003fbe:	0910      	lsrs	r0, r2, #4
 8003fc0:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8003fc4:	1119      	asrs	r1, r3, #4
 8003fc6:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8003fca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003fce:	17da      	asrs	r2, r3, #31
 8003fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fd8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003fdc:	460b      	mov	r3, r1
 8003fde:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8003fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	f143 33ff 	adc.w	r3, r3, #4294967295
 8003fec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ff0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ff4:	17da      	asrs	r2, r3, #31
 8003ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ffa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ffe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004002:	460b      	mov	r3, r1
 8004004:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004008:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800400c:	4613      	mov	r3, r2
 800400e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004012:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004016:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800401a:	462b      	mov	r3, r5
 800401c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004020:	4642      	mov	r2, r8
 8004022:	fb02 f203 	mul.w	r2, r2, r3
 8004026:	464b      	mov	r3, r9
 8004028:	4621      	mov	r1, r4
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	4413      	add	r3, r2
 8004030:	4622      	mov	r2, r4
 8004032:	4641      	mov	r1, r8
 8004034:	fba2 1201 	umull	r1, r2, r2, r1
 8004038:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800403c:	460a      	mov	r2, r1
 800403e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004042:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004046:	4413      	add	r3, r2
 8004048:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800404c:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8004050:	4622      	mov	r2, r4
 8004052:	462b      	mov	r3, r5
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	00d9      	lsls	r1, r3, #3
 800405e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004062:	00d0      	lsls	r0, r2, #3
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4621      	mov	r1, r4
 800406a:	1a51      	subs	r1, r2, r1
 800406c:	61b9      	str	r1, [r7, #24]
 800406e:	4629      	mov	r1, r5
 8004070:	eb63 0301 	sbc.w	r3, r3, r1
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004082:	4649      	mov	r1, r9
 8004084:	008b      	lsls	r3, r1, #2
 8004086:	4641      	mov	r1, r8
 8004088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800408c:	4641      	mov	r1, r8
 800408e:	008a      	lsls	r2, r1, #2
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	4603      	mov	r3, r0
 8004096:	4622      	mov	r2, r4
 8004098:	189b      	adds	r3, r3, r2
 800409a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800409e:	462b      	mov	r3, r5
 80040a0:	460a      	mov	r2, r1
 80040a2:	eb42 0303 	adc.w	r3, r2, r3
 80040a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040aa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da07      	bge.n	80040c2 <psensor_read_temperature+0x39e>
 80040b2:	f112 010f 	adds.w	r1, r2, #15
 80040b6:	6139      	str	r1, [r7, #16]
 80040b8:	f143 0300 	adc.w	r3, r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	0910      	lsrs	r0, r2, #4
 80040cc:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 80040d0:	1119      	asrs	r1, r3, #4
 80040d2:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148

		if( TEMP < -1500 )
 80040d6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80040da:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <psensor_read_temperature+0x3c4>)
 80040dc:	429a      	cmp	r2, r3
 80040de:	f280 8111 	bge.w	8004304 <psensor_read_temperature+0x5e0>
 80040e2:	e005      	b.n	80040f0 <psensor_read_temperature+0x3cc>
 80040e4:	20000878 	.word	0x20000878
 80040e8:	fffffa24 	.word	0xfffffa24
 80040ec:	42c80000 	.word	0x42c80000
		{
			OFF2 += 17 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 80040f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80040f4:	17da      	asrs	r2, r3, #31
 80040f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040fe:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004102:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004106:	4602      	mov	r2, r0
 8004108:	18d3      	adds	r3, r2, r3
 800410a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800410e:	460b      	mov	r3, r1
 8004110:	f143 0300 	adc.w	r3, r3, #0
 8004114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004118:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800411c:	17da      	asrs	r2, r3, #31
 800411e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004122:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004126:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800412a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800412e:	4602      	mov	r2, r0
 8004130:	18d3      	adds	r3, r2, r3
 8004132:	67bb      	str	r3, [r7, #120]	; 0x78
 8004134:	460b      	mov	r3, r1
 8004136:	f143 0300 	adc.w	r3, r3, #0
 800413a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800413c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8004140:	462b      	mov	r3, r5
 8004142:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004146:	4642      	mov	r2, r8
 8004148:	fb02 f203 	mul.w	r2, r2, r3
 800414c:	464b      	mov	r3, r9
 800414e:	4621      	mov	r1, r4
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	4622      	mov	r2, r4
 8004158:	4641      	mov	r1, r8
 800415a:	fba2 1201 	umull	r1, r2, r2, r1
 800415e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004162:	460a      	mov	r2, r1
 8004164:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8004168:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800416c:	4413      	add	r3, r2
 800416e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004172:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004176:	4622      	mov	r2, r4
 8004178:	462b      	mov	r3, r5
 800417a:	f04f 0000 	mov.w	r0, #0
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	0119      	lsls	r1, r3, #4
 8004184:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8004188:	0110      	lsls	r0, r2, #4
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4621      	mov	r1, r4
 8004190:	1851      	adds	r1, r2, r1
 8004192:	6739      	str	r1, [r7, #112]	; 0x70
 8004194:	4629      	mov	r1, r5
 8004196:	eb43 0101 	adc.w	r1, r3, r1
 800419a:	6779      	str	r1, [r7, #116]	; 0x74
 800419c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 80041a0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80041a4:	4621      	mov	r1, r4
 80041a6:	1851      	adds	r1, r2, r1
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	4629      	mov	r1, r5
 80041ac:	eb43 0101 	adc.w	r1, r3, r1
 80041b0:	60f9      	str	r1, [r7, #12]
 80041b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80041b6:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			SENS2 += 9 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 80041ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80041be:	17da      	asrs	r2, r3, #31
 80041c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80041c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80041c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80041cc:	4602      	mov	r2, r0
 80041ce:	18d3      	adds	r3, r2, r3
 80041d0:	663b      	str	r3, [r7, #96]	; 0x60
 80041d2:	460b      	mov	r3, r1
 80041d4:	f143 0300 	adc.w	r3, r3, #0
 80041d8:	667b      	str	r3, [r7, #100]	; 0x64
 80041da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80041de:	17da      	asrs	r2, r3, #31
 80041e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80041e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80041e4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80041e8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80041ec:	4602      	mov	r2, r0
 80041ee:	18d3      	adds	r3, r2, r3
 80041f0:	653b      	str	r3, [r7, #80]	; 0x50
 80041f2:	460b      	mov	r3, r1
 80041f4:	f143 0300 	adc.w	r3, r3, #0
 80041f8:	657b      	str	r3, [r7, #84]	; 0x54
 80041fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80041fe:	462b      	mov	r3, r5
 8004200:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004204:	4642      	mov	r2, r8
 8004206:	fb02 f203 	mul.w	r2, r2, r3
 800420a:	464b      	mov	r3, r9
 800420c:	4621      	mov	r1, r4
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	4622      	mov	r2, r4
 8004216:	4641      	mov	r1, r8
 8004218:	fba2 1201 	umull	r1, r2, r2, r1
 800421c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004220:	460a      	mov	r2, r1
 8004222:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8004226:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800422a:	4413      	add	r3, r2
 800422c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004230:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8004234:	4622      	mov	r2, r4
 8004236:	462b      	mov	r3, r5
 8004238:	f04f 0000 	mov.w	r0, #0
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	00d9      	lsls	r1, r3, #3
 8004242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004246:	00d0      	lsls	r0, r2, #3
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4621      	mov	r1, r4
 800424e:	1851      	adds	r1, r2, r1
 8004250:	64b9      	str	r1, [r7, #72]	; 0x48
 8004252:	4629      	mov	r1, r5
 8004254:	eb43 0101 	adc.w	r1, r3, r1
 8004258:	64f9      	str	r1, [r7, #76]	; 0x4c
 800425a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800425e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004262:	4621      	mov	r1, r4
 8004264:	1851      	adds	r1, r2, r1
 8004266:	6039      	str	r1, [r7, #0]
 8004268:	4629      	mov	r1, r5
 800426a:	eb43 0101 	adc.w	r1, r3, r1
 800426e:	6079      	str	r1, [r7, #4]
 8004270:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004274:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8004278:	e044      	b.n	8004304 <psensor_read_temperature+0x5e0>
		}
	}
	else
	{
		T2 = ( 5 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 38;
 800427a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800427e:	17da      	asrs	r2, r3, #31
 8004280:	643b      	str	r3, [r7, #64]	; 0x40
 8004282:	647a      	str	r2, [r7, #68]	; 0x44
 8004284:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004288:	17da      	asrs	r2, r3, #31
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
 800428c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800428e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004292:	464b      	mov	r3, r9
 8004294:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8004298:	4652      	mov	r2, sl
 800429a:	fb02 f203 	mul.w	r2, r2, r3
 800429e:	465b      	mov	r3, fp
 80042a0:	4641      	mov	r1, r8
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	4642      	mov	r2, r8
 80042aa:	4651      	mov	r1, sl
 80042ac:	fba2 4501 	umull	r4, r5, r2, r1
 80042b0:	442b      	add	r3, r5
 80042b2:	461d      	mov	r5, r3
 80042b4:	4622      	mov	r2, r4
 80042b6:	462b      	mov	r3, r5
 80042b8:	f04f 0000 	mov.w	r0, #0
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	0099      	lsls	r1, r3, #2
 80042c2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80042c6:	0090      	lsls	r0, r2, #2
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	1911      	adds	r1, r2, r4
 80042ce:	6339      	str	r1, [r7, #48]	; 0x30
 80042d0:	416b      	adcs	r3, r5
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042e0:	4629      	mov	r1, r5
 80042e2:	118a      	asrs	r2, r1, #6
 80042e4:	4629      	mov	r1, r5
 80042e6:	17cb      	asrs	r3, r1, #31
 80042e8:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
		OFF2 = 0 ;
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
		SENS2 = 0 ;
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	}

	*temperature = ( (float)TEMP - T2 ) / 100;
 8004304:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004310:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8004314:	f7fc fd68 	bl	8000de8 <__aeabi_l2f>
 8004318:	ee07 0a90 	vmov	s15, r0
 800431c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8004320:	ed5f 6a8e 	vldr	s13, [pc, #-568]	; 80040ec <psensor_read_temperature+0x3c8>
 8004324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004328:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800432c:	edc3 7a00 	vstr	s15, [r3]

	return status;
 8004330:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
}
 8004334:	4618      	mov	r0, r3
 8004336:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800433a:	46bd      	mov	sp, r7
 800433c:	ecbd 8b02 	vpop	{d8}
 8004340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004344 <psensor_read_pressure>:

enum ms8607_status psensor_read_pressure( float *pressure)
{
 8004344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004348:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800434c:	af00      	add	r7, sp, #0
 800434e:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
	enum ms8607_status status = ms8607_status_ok;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	int32_t dT, TEMP;
	int64_t OFF, SENS, P, T2, OFF2, SENS2;
	uint8_t cmd;

	// If first time adc is requested, get EEPROM coefficients
	if( psensor_coeff_read == false )
 8004358:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <psensor_read_pressure+0xc4>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	f083 0301 	eor.w	r3, r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <psensor_read_pressure+0x2c>
		status = psensor_read_eeprom();
 8004366:	f7ff fc43 	bl	8003bf0 <psensor_read_eeprom>
 800436a:	4603      	mov	r3, r0
 800436c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if( status != ms8607_status_ok)
 8004370:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <psensor_read_pressure+0x3c>
		return status;
 8004378:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800437c:	f000 bc1b 	b.w	8004bb6 <psensor_read_pressure+0x872>

	// First read temperature
	cmd = psensor_resolution_osr*2;
 8004380:	4b22      	ldr	r3, [pc, #136]	; (800440c <psensor_read_pressure+0xc8>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
	cmd |= PSENSOR_START_TEMPERATURE_ADC_CONVERSION;
 800438a:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800438e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004392:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8004396:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 800439a:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fc63 	bl	8003c6c <psensor_conversion_and_read_adc>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if( status != ms8607_status_ok)
 80043ac:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <psensor_read_pressure+0x76>
		return status;
 80043b4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80043b8:	e3fd      	b.n	8004bb6 <psensor_read_pressure+0x872>

	// Now read pressure
	cmd = psensor_resolution_osr*2;
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <psensor_read_pressure+0xc8>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
	cmd |= PSENSOR_START_PRESSURE_ADC_CONVERSION;
 80043c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80043c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
	status = psensor_conversion_and_read_adc( cmd, &adc_pressure);
 80043d0:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80043d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fc46 	bl	8003c6c <psensor_conversion_and_read_adc>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if( status != ms8607_status_ok)
 80043e6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <psensor_read_pressure+0xb0>
		return status;
 80043ee:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 80043f2:	e3e0      	b.n	8004bb6 <psensor_read_pressure+0x872>

    if (adc_temperature == 0 || adc_pressure == 0)
 80043f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <psensor_read_pressure+0xc0>
 80043fc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <psensor_read_pressure+0xcc>
        return ms8607_status_i2c_transfer_error;
 8004404:	2302      	movs	r3, #2
 8004406:	e3d6      	b.n	8004bb6 <psensor_read_pressure+0x872>
 8004408:	20000876 	.word	0x20000876
 800440c:	20000875 	.word	0x20000875

	// Difference between actual and reference temperature = D2 - Tref
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8004410:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004414:	461a      	mov	r2, r3
 8004416:	4bc7      	ldr	r3, [pc, #796]	; (8004734 <psensor_read_pressure+0x3f0>)
 8004418:	895b      	ldrh	r3, [r3, #10]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

	// Actual temperature = 2000 + dT * TEMPSENS
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8004422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004426:	17da      	asrs	r2, r3, #31
 8004428:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800442c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004430:	4bc0      	ldr	r3, [pc, #768]	; (8004734 <psensor_read_pressure+0x3f0>)
 8004432:	899b      	ldrh	r3, [r3, #12]
 8004434:	b29b      	uxth	r3, r3
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800443c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004440:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8004444:	460b      	mov	r3, r1
 8004446:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800444a:	fb02 f203 	mul.w	r2, r2, r3
 800444e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004452:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
 8004456:	4601      	mov	r1, r0
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004462:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8004466:	fba2 4501 	umull	r4, r5, r2, r1
 800446a:	442b      	add	r3, r5
 800446c:	461d      	mov	r5, r3
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	0de2      	lsrs	r2, r4, #23
 8004478:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 800447c:	15eb      	asrs	r3, r5, #23
 800447e:	4613      	mov	r3, r2
 8004480:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004484:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

	// Second order temperature compensation
	if( TEMP < 2000 )
 8004488:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800448c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004490:	f280 8227 	bge.w	80048e2 <psensor_read_pressure+0x59e>
	{
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 8004494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004498:	17da      	asrs	r2, r3, #31
 800449a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800449e:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80044a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044a6:	17da      	asrs	r2, r3, #31
 80044a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80044ac:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80044b0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80044b4:	460b      	mov	r3, r1
 80044b6:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80044ba:	4622      	mov	r2, r4
 80044bc:	fb02 f203 	mul.w	r2, r2, r3
 80044c0:	e9c7 456a 	strd	r4, r5, [r7, #424]	; 0x1a8
 80044c4:	462b      	mov	r3, r5
 80044c6:	4604      	mov	r4, r0
 80044c8:	460d      	mov	r5, r1
 80044ca:	4621      	mov	r1, r4
 80044cc:	fb01 f303 	mul.w	r3, r1, r3
 80044d0:	4413      	add	r3, r2
 80044d2:	4622      	mov	r2, r4
 80044d4:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80044d8:	fba2 ab01 	umull	sl, fp, r2, r1
 80044dc:	445b      	add	r3, fp
 80044de:	469b      	mov	fp, r3
 80044e0:	4652      	mov	r2, sl
 80044e2:	465b      	mov	r3, fp
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80044e8:	415b      	adcs	r3, r3
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044f0:	eb12 010a 	adds.w	r1, r2, sl
 80044f4:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80044f8:	eb43 030b 	adc.w	r3, r3, fp
 80044fc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800450c:	4629      	mov	r1, r5
 800450e:	104a      	asrs	r2, r1, #1
 8004510:	4629      	mov	r1, r5
 8004512:	17cb      	asrs	r3, r1, #31
 8004514:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004518:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800451c:	17da      	asrs	r2, r3, #31
 800451e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004522:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8004526:	e9d7 1254 	ldrd	r1, r2, [r7, #336]	; 0x150
 800452a:	460b      	mov	r3, r1
 800452c:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004530:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8004534:	4613      	mov	r3, r2
 8004536:	f143 33ff 	adc.w	r3, r3, #4294967295
 800453a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800453e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004542:	17da      	asrs	r2, r3, #31
 8004544:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004548:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800454c:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8004550:	460b      	mov	r3, r1
 8004552:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004556:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800455a:	4613      	mov	r3, r2
 800455c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004560:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8004564:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8004568:	462b      	mov	r3, r5
 800456a:	e9d7 ab4e 	ldrd	sl, fp, [r7, #312]	; 0x138
 800456e:	4652      	mov	r2, sl
 8004570:	fb02 f203 	mul.w	r2, r2, r3
 8004574:	465b      	mov	r3, fp
 8004576:	4621      	mov	r1, r4
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	4622      	mov	r2, r4
 8004580:	4651      	mov	r1, sl
 8004582:	fba2 1201 	umull	r1, r2, r2, r1
 8004586:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800458a:	460a      	mov	r2, r1
 800458c:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
 8004590:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004594:	4413      	add	r3, r2
 8004596:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800459a:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 800459e:	4622      	mov	r2, r4
 80045a0:	462b      	mov	r3, r5
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	0119      	lsls	r1, r3, #4
 80045ac:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80045b0:	0110      	lsls	r0, r2, #4
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4621      	mov	r1, r4
 80045b8:	ebb2 0801 	subs.w	r8, r2, r1
 80045bc:	4629      	mov	r1, r5
 80045be:	eb63 0901 	sbc.w	r9, r3, r1
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80045ce:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80045d2:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80045d6:	4690      	mov	r8, r2
 80045d8:	4699      	mov	r9, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	eb18 0303 	adds.w	r3, r8, r3
 80045e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80045e4:	462b      	mov	r3, r5
 80045e6:	eb49 0303 	adc.w	r3, r9, r3
 80045ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80045ee:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da07      	bge.n	8004606 <psensor_read_pressure+0x2c2>
 80045f6:	f112 010f 	adds.w	r1, r2, #15
 80045fa:	6439      	str	r1, [r7, #64]	; 0x40
 80045fc:	f143 0300 	adc.w	r3, r3, #0
 8004600:	647b      	str	r3, [r7, #68]	; 0x44
 8004602:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	0910      	lsrs	r0, r2, #4
 8004610:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8004614:	1119      	asrs	r1, r3, #4
 8004616:	e9c7 0182 	strd	r0, r1, [r7, #520]	; 0x208
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 800461a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800461e:	17da      	asrs	r2, r3, #31
 8004620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004624:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004628:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800462c:	460b      	mov	r3, r1
 800462e:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004632:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004636:	4613      	mov	r3, r2
 8004638:	f143 33ff 	adc.w	r3, r3, #4294967295
 800463c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004640:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004644:	17da      	asrs	r2, r3, #31
 8004646:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800464a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800464e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8004652:	460b      	mov	r3, r1
 8004654:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004658:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800465c:	4613      	mov	r3, r2
 800465e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004662:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004666:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800466a:	462b      	mov	r3, r5
 800466c:	e9d7 8944 	ldrd	r8, r9, [r7, #272]	; 0x110
 8004670:	4642      	mov	r2, r8
 8004672:	fb02 f203 	mul.w	r2, r2, r3
 8004676:	464b      	mov	r3, r9
 8004678:	4621      	mov	r1, r4
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	4622      	mov	r2, r4
 8004682:	4641      	mov	r1, r8
 8004684:	fba2 1201 	umull	r1, r2, r2, r1
 8004688:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800468c:	460a      	mov	r2, r1
 800468e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004692:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004696:	4413      	add	r3, r2
 8004698:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800469c:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 80046a0:	4622      	mov	r2, r4
 80046a2:	462b      	mov	r3, r5
 80046a4:	f04f 0000 	mov.w	r0, #0
 80046a8:	f04f 0100 	mov.w	r1, #0
 80046ac:	00d9      	lsls	r1, r3, #3
 80046ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046b2:	00d0      	lsls	r0, r2, #3
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4621      	mov	r1, r4
 80046ba:	1a51      	subs	r1, r2, r1
 80046bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80046be:	4629      	mov	r1, r5
 80046c0:	eb63 0301 	sbc.w	r3, r3, r1
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80046d2:	4649      	mov	r1, r9
 80046d4:	008b      	lsls	r3, r1, #2
 80046d6:	4641      	mov	r1, r8
 80046d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046dc:	4641      	mov	r1, r8
 80046de:	008a      	lsls	r2, r1, #2
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	4603      	mov	r3, r0
 80046e6:	4622      	mov	r2, r4
 80046e8:	189b      	adds	r3, r3, r2
 80046ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80046ee:	462b      	mov	r3, r5
 80046f0:	460a      	mov	r2, r1
 80046f2:	eb42 0303 	adc.w	r3, r2, r3
 80046f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046fa:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80046fe:	2b00      	cmp	r3, #0
 8004700:	da07      	bge.n	8004712 <psensor_read_pressure+0x3ce>
 8004702:	f112 010f 	adds.w	r1, r2, #15
 8004706:	6339      	str	r1, [r7, #48]	; 0x30
 8004708:	f143 0300 	adc.w	r3, r3, #0
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
 800470e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	0910      	lsrs	r0, r2, #4
 800471c:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8004720:	1119      	asrs	r1, r3, #4
 8004722:	e9c7 0180 	strd	r0, r1, [r7, #512]	; 0x200

		if( TEMP < -1500 )
 8004726:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 800472a:	4b03      	ldr	r3, [pc, #12]	; (8004738 <psensor_read_pressure+0x3f4>)
 800472c:	429a      	cmp	r2, r3
 800472e:	f280 8130 	bge.w	8004992 <psensor_read_pressure+0x64e>
 8004732:	e003      	b.n	800473c <psensor_read_pressure+0x3f8>
 8004734:	20000878 	.word	0x20000878
 8004738:	fffffa24 	.word	0xfffffa24
		{
			OFF2 += 17 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 800473c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004740:	17da      	asrs	r2, r3, #31
 8004742:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004746:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800474a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800474e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8004752:	4602      	mov	r2, r0
 8004754:	18d3      	adds	r3, r2, r3
 8004756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800475a:	460b      	mov	r3, r1
 800475c:	f143 0300 	adc.w	r3, r3, #0
 8004760:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004764:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004768:	17da      	asrs	r2, r3, #31
 800476a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800476e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004772:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004776:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 800477a:	4602      	mov	r2, r0
 800477c:	18d3      	adds	r3, r2, r3
 800477e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004782:	460b      	mov	r3, r1
 8004784:	f143 0300 	adc.w	r3, r3, #0
 8004788:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800478c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8004790:	462b      	mov	r3, r5
 8004792:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004796:	4642      	mov	r2, r8
 8004798:	fb02 f203 	mul.w	r2, r2, r3
 800479c:	464b      	mov	r3, r9
 800479e:	4621      	mov	r1, r4
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	4622      	mov	r2, r4
 80047a8:	4641      	mov	r1, r8
 80047aa:	fba2 1201 	umull	r1, r2, r2, r1
 80047ae:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80047b2:	460a      	mov	r2, r1
 80047b4:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 80047b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80047bc:	4413      	add	r3, r2
 80047be:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80047c2:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80047c6:	4622      	mov	r2, r4
 80047c8:	462b      	mov	r3, r5
 80047ca:	f04f 0000 	mov.w	r0, #0
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	0119      	lsls	r1, r3, #4
 80047d4:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80047d8:	0110      	lsls	r0, r2, #4
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4621      	mov	r1, r4
 80047e0:	1851      	adds	r1, r2, r1
 80047e2:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80047e6:	4629      	mov	r1, r5
 80047e8:	eb43 0101 	adc.w	r1, r3, r1
 80047ec:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80047f0:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 80047f4:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80047f8:	4621      	mov	r1, r4
 80047fa:	1851      	adds	r1, r2, r1
 80047fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80047fe:	4629      	mov	r1, r5
 8004800:	eb43 0101 	adc.w	r1, r3, r1
 8004804:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004806:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800480a:	e9c7 3482 	strd	r3, r4, [r7, #520]	; 0x208
			SENS2 += 9 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 800480e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004812:	17da      	asrs	r2, r3, #31
 8004814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004818:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800481c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004820:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004824:	4602      	mov	r2, r0
 8004826:	18d3      	adds	r3, r2, r3
 8004828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800482c:	460b      	mov	r3, r1
 800482e:	f143 0300 	adc.w	r3, r3, #0
 8004832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004836:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800483a:	17da      	asrs	r2, r3, #31
 800483c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004840:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004844:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004848:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800484c:	4602      	mov	r2, r0
 800484e:	18d3      	adds	r3, r2, r3
 8004850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004854:	460b      	mov	r3, r1
 8004856:	f143 0300 	adc.w	r3, r3, #0
 800485a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800485e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004862:	462b      	mov	r3, r5
 8004864:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004868:	4642      	mov	r2, r8
 800486a:	fb02 f203 	mul.w	r2, r2, r3
 800486e:	464b      	mov	r3, r9
 8004870:	4621      	mov	r1, r4
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	4622      	mov	r2, r4
 800487a:	4641      	mov	r1, r8
 800487c:	fba2 1201 	umull	r1, r2, r2, r1
 8004880:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8004884:	460a      	mov	r2, r1
 8004886:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 800488a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800488e:	4413      	add	r3, r2
 8004890:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004894:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8004898:	4622      	mov	r2, r4
 800489a:	462b      	mov	r3, r5
 800489c:	f04f 0000 	mov.w	r0, #0
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	00d9      	lsls	r1, r3, #3
 80048a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048aa:	00d0      	lsls	r0, r2, #3
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4621      	mov	r1, r4
 80048b2:	1851      	adds	r1, r2, r1
 80048b4:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80048b8:	4629      	mov	r1, r5
 80048ba:	eb43 0101 	adc.w	r1, r3, r1
 80048be:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 80048c2:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80048c6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80048ca:	4621      	mov	r1, r4
 80048cc:	1851      	adds	r1, r2, r1
 80048ce:	6239      	str	r1, [r7, #32]
 80048d0:	4629      	mov	r1, r5
 80048d2:	eb43 0101 	adc.w	r1, r3, r1
 80048d6:	6279      	str	r1, [r7, #36]	; 0x24
 80048d8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80048dc:	e9c7 3480 	strd	r3, r4, [r7, #512]	; 0x200
 80048e0:	e057      	b.n	8004992 <psensor_read_pressure+0x64e>
		}
	}
	else
	{
		T2 = ( 5 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 38;
 80048e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048e6:	17da      	asrs	r2, r3, #31
 80048e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048ec:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80048f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f4:	17da      	asrs	r2, r3, #31
 80048f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048fa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048fe:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8004902:	462b      	mov	r3, r5
 8004904:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004908:	4642      	mov	r2, r8
 800490a:	fb02 f203 	mul.w	r2, r2, r3
 800490e:	464b      	mov	r3, r9
 8004910:	4621      	mov	r1, r4
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	4622      	mov	r2, r4
 800491a:	4641      	mov	r1, r8
 800491c:	fba2 1201 	umull	r1, r2, r2, r1
 8004920:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004924:	460a      	mov	r2, r1
 8004926:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 800492a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800492e:	4413      	add	r3, r2
 8004930:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004934:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8004938:	4622      	mov	r2, r4
 800493a:	462b      	mov	r3, r5
 800493c:	f04f 0000 	mov.w	r0, #0
 8004940:	f04f 0100 	mov.w	r1, #0
 8004944:	0099      	lsls	r1, r3, #2
 8004946:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800494a:	0090      	lsls	r0, r2, #2
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4621      	mov	r1, r4
 8004952:	1851      	adds	r1, r2, r1
 8004954:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004958:	4629      	mov	r1, r5
 800495a:	eb43 0101 	adc.w	r1, r3, r1
 800495e:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800496e:	4629      	mov	r1, r5
 8004970:	118a      	asrs	r2, r1, #6
 8004972:	4629      	mov	r1, r5
 8004974:	17cb      	asrs	r3, r1, #31
 8004976:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
		OFF2 = 0 ;
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	e9c7 2382 	strd	r2, r3, [r7, #520]	; 0x208
		SENS2 = 0 ;
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
	}

	// OFF = OFF_T1 + TCO * dT
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8004992:	4b8c      	ldr	r3, [pc, #560]	; (8004bc4 <psensor_read_pressure+0x880>)
 8004994:	889b      	ldrh	r3, [r3, #4]
 8004996:	b29b      	uxth	r3, r3
 8004998:	2200      	movs	r2, #0
 800499a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800499e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80049a2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80049a6:	460b      	mov	r3, r1
 80049a8:	0bdb      	lsrs	r3, r3, #15
 80049aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049ae:	460b      	mov	r3, r1
 80049b0:	045b      	lsls	r3, r3, #17
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049b6:	4b83      	ldr	r3, [pc, #524]	; (8004bc4 <psensor_read_pressure+0x880>)
 80049b8:	891b      	ldrh	r3, [r3, #8]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2200      	movs	r2, #0
 80049be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049c2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049ca:	17da      	asrs	r2, r3, #31
 80049cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049d0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80049d4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80049d8:	462b      	mov	r3, r5
 80049da:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80049de:	4642      	mov	r2, r8
 80049e0:	fb02 f203 	mul.w	r2, r2, r3
 80049e4:	464b      	mov	r3, r9
 80049e6:	4621      	mov	r1, r4
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	4413      	add	r3, r2
 80049ee:	4622      	mov	r2, r4
 80049f0:	4641      	mov	r1, r8
 80049f2:	fba2 1201 	umull	r1, r2, r2, r1
 80049f6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80049fa:	460a      	mov	r2, r1
 80049fc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004a00:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004a04:	4413      	add	r3, r2
 8004a06:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8004a16:	4621      	mov	r1, r4
 8004a18:	098a      	lsrs	r2, r1, #6
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8004a20:	4629      	mov	r1, r5
 8004a22:	118b      	asrs	r3, r1, #6
 8004a24:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a28:	4621      	mov	r1, r4
 8004a2a:	1889      	adds	r1, r1, r2
 8004a2c:	61b9      	str	r1, [r7, #24]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	eb43 0101 	adc.w	r1, r3, r1
 8004a34:	61f9      	str	r1, [r7, #28]
 8004a36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004a3a:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
	OFF -= OFF2 ;
 8004a3e:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8004a42:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 8004a46:	1a84      	subs	r4, r0, r2
 8004a48:	613c      	str	r4, [r7, #16]
 8004a4a:	eb61 0303 	sbc.w	r3, r1, r3
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004a54:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

	// Sensitivity at actual temperature = SENS_T1 + TCS * dT
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8004a58:	4b5a      	ldr	r3, [pc, #360]	; (8004bc4 <psensor_read_pressure+0x880>)
 8004a5a:	885b      	ldrh	r3, [r3, #2]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2200      	movs	r2, #0
 8004a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a64:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004a68:	460b      	mov	r3, r1
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	677b      	str	r3, [r7, #116]	; 0x74
 8004a6e:	460b      	mov	r3, r1
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	673b      	str	r3, [r7, #112]	; 0x70
 8004a74:	4b53      	ldr	r3, [pc, #332]	; (8004bc4 <psensor_read_pressure+0x880>)
 8004a76:	88db      	ldrh	r3, [r3, #6]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a84:	17da      	asrs	r2, r3, #31
 8004a86:	663b      	str	r3, [r7, #96]	; 0x60
 8004a88:	667a      	str	r2, [r7, #100]	; 0x64
 8004a8a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8004a8e:	462b      	mov	r3, r5
 8004a90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a94:	4642      	mov	r2, r8
 8004a96:	fb02 f203 	mul.w	r2, r2, r3
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	fba2 1201 	umull	r1, r2, r2, r1
 8004aac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8004ab0:	460a      	mov	r2, r1
 8004ab2:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8004ab6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004aba:	4413      	add	r3, r2
 8004abc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8004acc:	4621      	mov	r1, r4
 8004ace:	09ca      	lsrs	r2, r1, #7
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	11cb      	asrs	r3, r1, #7
 8004ada:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004ade:	4621      	mov	r1, r4
 8004ae0:	1889      	adds	r1, r1, r2
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	eb43 0101 	adc.w	r1, r3, r1
 8004aea:	60f9      	str	r1, [r7, #12]
 8004aec:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004af0:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8
	SENS -= SENS2 ;
 8004af4:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8004af8:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8004afc:	1a84      	subs	r4, r0, r2
 8004afe:	603c      	str	r4, [r7, #0]
 8004b00:	eb61 0303 	sbc.w	r3, r1, r3
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004b0a:	e9c7 3476 	strd	r3, r4, [r7, #472]	; 0x1d8

	// Temperature compensated pressure = D1 * SENS - OFF
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8004b0e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b12:	2200      	movs	r2, #0
 8004b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b16:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004b18:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8004b1c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8004b20:	462a      	mov	r2, r5
 8004b22:	fb02 f203 	mul.w	r2, r2, r3
 8004b26:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	4413      	add	r3, r2
 8004b32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004b36:	4621      	mov	r1, r4
 8004b38:	fba2 1201 	umull	r1, r2, r2, r1
 8004b3c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8004b40:	460a      	mov	r2, r1
 8004b42:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8004b46:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	f04f 0300 	mov.w	r3, #0
 8004b58:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	0d4a      	lsrs	r2, r1, #21
 8004b60:	4629      	mov	r1, r5
 8004b62:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8004b66:	4629      	mov	r1, r5
 8004b68:	154b      	asrs	r3, r1, #21
 8004b6a:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 8004b6e:	1a14      	subs	r4, r2, r0
 8004b70:	653c      	str	r4, [r7, #80]	; 0x50
 8004b72:	eb63 0301 	sbc.w	r3, r3, r1
 8004b76:	657b      	str	r3, [r7, #84]	; 0x54
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004b84:	4621      	mov	r1, r4
 8004b86:	0bca      	lsrs	r2, r1, #15
 8004b88:	4629      	mov	r1, r5
 8004b8a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8004b8e:	4629      	mov	r1, r5
 8004b90:	13cb      	asrs	r3, r1, #15
 8004b92:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0

	*pressure = (float)P / 100;
 8004b96:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004b9a:	f7fc f925 	bl	8000de8 <__aeabi_l2f>
 8004b9e:	ee06 0a90 	vmov	s13, r0
 8004ba2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004bc8 <psensor_read_pressure+0x884>
 8004ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004baa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004bae:	edc3 7a00 	vstr	s15, [r3]

	return status;
 8004bb2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000878 	.word	0x20000878
 8004bc8:	42c80000 	.word	0x42c80000

08004bcc <psensor_crc_check>:
 * \param[in] uint8_t : crc to compare
 *
 * \return bool : TRUE if CRC is OK, FALSE if KO
 */
bool psensor_crc_check (uint16_t *n_prom, uint8_t crc)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
	uint8_t cnt, n_bit;
	uint16_t n_rem, crc_read;
	
	n_rem = 0x00;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	81bb      	strh	r3, [r7, #12]
	crc_read = n_prom[0];
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	817b      	strh	r3, [r7, #10]
	n_prom[COEFFICIENT_NUMBERS] = 0;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	330e      	adds	r3, #14
 8004be6:	2200      	movs	r2, #0
 8004be8:	801a      	strh	r2, [r3, #0]
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	801a      	strh	r2, [r3, #0]

	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	73fb      	strb	r3, [r7, #15]
 8004bfc:	e03c      	b.n	8004c78 <psensor_crc_check+0xac>

		// Get next byte
		if (cnt%2 == 1)
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00f      	beq.n	8004c2a <psensor_crc_check+0x5e>
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b21b      	sxth	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	b21a      	sxth	r2, r3
 8004c1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c22:	4053      	eors	r3, r2
 8004c24:	b21b      	sxth	r3, r3
 8004c26:	81bb      	strh	r3, [r7, #12]
 8004c28:	e00b      	b.n	8004c42 <psensor_crc_check+0x76>
		else
			n_rem ^=  n_prom[cnt>>1]>>8 ;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4413      	add	r3, r2
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	89bb      	ldrh	r3, [r7, #12]
 8004c3e:	4053      	eors	r3, r2
 8004c40:	81bb      	strh	r3, [r7, #12]

		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 8004c42:	2308      	movs	r3, #8
 8004c44:	73bb      	strb	r3, [r7, #14]
 8004c46:	e011      	b.n	8004c6c <psensor_crc_check+0xa0>

			if( n_rem & 0x8000 )
 8004c48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da07      	bge.n	8004c60 <psensor_crc_check+0x94>
				n_rem = (n_rem << 1) ^ 0x3000;
 8004c50:	89bb      	ldrh	r3, [r7, #12]
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	b21b      	sxth	r3, r3
 8004c56:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004c5a:	b21b      	sxth	r3, r3
 8004c5c:	81bb      	strh	r3, [r7, #12]
 8004c5e:	e002      	b.n	8004c66 <psensor_crc_check+0x9a>
			else
				n_rem <<= 1;
 8004c60:	89bb      	ldrh	r3, [r7, #12]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	81bb      	strh	r3, [r7, #12]
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 8004c66:	7bbb      	ldrb	r3, [r7, #14]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	73bb      	strb	r3, [r7, #14]
 8004c6c:	7bbb      	ldrb	r3, [r7, #14]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1ea      	bne.n	8004c48 <psensor_crc_check+0x7c>
	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	3301      	adds	r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	2b0f      	cmp	r3, #15
 8004c7c:	d9bf      	bls.n	8004bfe <psensor_crc_check+0x32>
		}
	}
	n_rem >>= 12;
 8004c7e:	89bb      	ldrh	r3, [r7, #12]
 8004c80:	0b1b      	lsrs	r3, r3, #12
 8004c82:	81bb      	strh	r3, [r7, #12]
	n_prom[0] = crc_read;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	897a      	ldrh	r2, [r7, #10]
 8004c88:	801a      	strh	r2, [r3, #0]
	
	return  ( n_rem == crc );
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	89ba      	ldrh	r2, [r7, #12]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <i2c_master_init>:

#include "ms8607.h"
#include "ms8607_i2c.h"

void i2c_master_init(void)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	af00      	add	r7, sp, #0
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <i2c_master_read_packet_wait>:

enum status_code i2c_master_read_packet_wait(struct i2c_master_packet *const packet)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
    uint8_t res = HAL_I2C_Master_Receive(&hi2c2, packet->address, packet->data, packet->data_length, 20);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8819      	ldrh	r1, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	885b      	ldrh	r3, [r3, #2]
 8004cc8:	2014      	movs	r0, #20
 8004cca:	9000      	str	r0, [sp, #0]
 8004ccc:	4804      	ldr	r0, [pc, #16]	; (8004ce0 <i2c_master_read_packet_wait+0x2c>)
 8004cce:	f003 fc65 	bl	800859c <HAL_I2C_Master_Receive>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	73fb      	strb	r3, [r7, #15]
    return (enum status_code)res;
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	200005b0 	.word	0x200005b0

08004ce4 <i2c_master_write_packet_wait>:


enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *const packet)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	6078      	str	r0, [r7, #4]
    uint8_t res = HAL_I2C_Master_Transmit(&hi2c2, packet->address, packet->data, packet->data_length, 20);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8819      	ldrh	r1, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	885b      	ldrh	r3, [r3, #2]
 8004cf8:	2014      	movs	r0, #20
 8004cfa:	9000      	str	r0, [sp, #0]
 8004cfc:	4804      	ldr	r0, [pc, #16]	; (8004d10 <i2c_master_write_packet_wait+0x2c>)
 8004cfe:	f003 fb59 	bl	80083b4 <HAL_I2C_Master_Transmit>
 8004d02:	4603      	mov	r3, r0
 8004d04:	73fb      	strb	r3, [r7, #15]
    return (enum status_code)res;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	200005b0 	.word	0x200005b0

08004d14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_MspInit+0x48>)
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1e:	4a0f      	ldr	r2, [pc, #60]	; (8004d5c <HAL_MspInit+0x48>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6613      	str	r3, [r2, #96]	; 0x60
 8004d26:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <HAL_MspInit+0x48>)
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	607b      	str	r3, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_MspInit+0x48>)
 8004d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <HAL_MspInit+0x48>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <HAL_MspInit+0x48>)
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	2005      	movs	r0, #5
 8004d50:	f002 fc43 	bl	80075da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000

08004d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b09a      	sub	sp, #104	; 0x68
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d68:	f107 030c 	add.w	r3, r7, #12
 8004d6c:	225c      	movs	r2, #92	; 0x5c
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f008 fd35 	bl	800d7e0 <memset>
  if(hadc->Instance==ADC1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2e      	ldr	r2, [pc, #184]	; (8004e34 <HAL_ADC_MspInit+0xd4>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d155      	bne.n	8004e2c <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004d80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d84:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004d86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004d90:	2301      	movs	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004d94:	2308      	movs	r3, #8
 8004d96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004d98:	2307      	movs	r3, #7
 8004d9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004da0:	2302      	movs	r3, #2
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004daa:	f107 030c 	add.w	r3, r7, #12
 8004dae:	4618      	mov	r0, r3
 8004db0:	f005 fa74 	bl	800a29c <HAL_RCCEx_PeriphCLKConfig>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8004dba:	f7fe fe27 	bl	8003a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <HAL_ADC_MspInit+0xd8>)
 8004dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc2:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <HAL_ADC_MspInit+0xd8>)
 8004dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <HAL_ADC_MspInit+0xd8>)
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004dd8:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <HAL_ADC_MspInit+0xe0>)
 8004dda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004ddc:	4b17      	ldr	r3, [pc, #92]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004de2:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004dee:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004df0:	2280      	movs	r2, #128	; 0x80
 8004df2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004df4:	4b11      	ldr	r3, [pc, #68]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dfa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e02:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004e06:	2220      	movs	r2, #32
 8004e08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e10:	480a      	ldr	r0, [pc, #40]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004e12:	f002 fe1d 	bl	8007a50 <HAL_DMA_Init>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8004e1c:	f7fe fdf6 	bl	8003a0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a06      	ldr	r2, [pc, #24]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004e24:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e26:	4a05      	ldr	r2, [pc, #20]	; (8004e3c <HAL_ADC_MspInit+0xdc>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004e2c:	bf00      	nop
 8004e2e:	3768      	adds	r7, #104	; 0x68
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	50040000 	.word	0x50040000
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	200004f0 	.word	0x200004f0
 8004e40:	40020008 	.word	0x40020008

08004e44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <HAL_CRC_MspInit+0x38>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10b      	bne.n	8004e6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_CRC_MspInit+0x3c>)
 8004e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <HAL_CRC_MspInit+0x3c>)
 8004e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e60:	6493      	str	r3, [r2, #72]	; 0x48
 8004e62:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_CRC_MspInit+0x3c>)
 8004e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40023000 	.word	0x40023000
 8004e80:	40021000 	.word	0x40021000

08004e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b0a6      	sub	sp, #152	; 0x98
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e8c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	609a      	str	r2, [r3, #8]
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ea0:	225c      	movs	r2, #92	; 0x5c
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f008 fc9b 	bl	800d7e0 <memset>
  if(hi2c->Instance==I2C1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a76      	ldr	r2, [pc, #472]	; (8005088 <HAL_I2C_MspInit+0x204>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d13e      	bne.n	8004f32 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004eb4:	2340      	movs	r3, #64	; 0x40
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8004eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ebc:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f005 f9ea 	bl	800a29c <HAL_RCCEx_PeriphCLKConfig>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004ece:	f7fe fd9d 	bl	8003a0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed2:	4b6e      	ldr	r3, [pc, #440]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed6:	4a6d      	ldr	r2, [pc, #436]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ede:	4b6b      	ldr	r3, [pc, #428]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004eea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004eee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ef2:	2312      	movs	r3, #18
 8004ef4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efe:	2303      	movs	r3, #3
 8004f00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f04:	2304      	movs	r3, #4
 8004f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f0a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f14:	f003 f812 	bl	8007f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f18:	4b5c      	ldr	r3, [pc, #368]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1c:	4a5b      	ldr	r2, [pc, #364]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f22:	6593      	str	r3, [r2, #88]	; 0x58
 8004f24:	4b59      	ldr	r3, [pc, #356]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2c:	623b      	str	r3, [r7, #32]
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004f30:	e0a6      	b.n	8005080 <HAL_I2C_MspInit+0x1fc>
  else if(hi2c->Instance==I2C2)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a56      	ldr	r2, [pc, #344]	; (8005090 <HAL_I2C_MspInit+0x20c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d13d      	bne.n	8004fb8 <HAL_I2C_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8004f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f44:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f005 f9a6 	bl	800a29c <HAL_RCCEx_PeriphCLKConfig>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8004f56:	f7fe fd59 	bl	8003a0c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f5a:	4b4c      	ldr	r3, [pc, #304]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	4a4b      	ldr	r2, [pc, #300]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004f60:	f043 0302 	orr.w	r3, r3, #2
 8004f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f66:	4b49      	ldr	r3, [pc, #292]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004f72:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f7a:	2312      	movs	r3, #18
 8004f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f86:	2303      	movs	r3, #3
 8004f88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004f96:	4619      	mov	r1, r3
 8004f98:	483e      	ldr	r0, [pc, #248]	; (8005094 <HAL_I2C_MspInit+0x210>)
 8004f9a:	f002 ffcf 	bl	8007f3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004f9e:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	4a3a      	ldr	r2, [pc, #232]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8004faa:	4b38      	ldr	r3, [pc, #224]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb2:	61bb      	str	r3, [r7, #24]
 8004fb4:	69bb      	ldr	r3, [r7, #24]
}
 8004fb6:	e063      	b.n	8005080 <HAL_I2C_MspInit+0x1fc>
  else if(hi2c->Instance==I2C3)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a36      	ldr	r2, [pc, #216]	; (8005098 <HAL_I2C_MspInit+0x214>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d15e      	bne.n	8005080 <HAL_I2C_MspInit+0x1fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8004fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fcc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f005 f962 	bl	800a29c <HAL_RCCEx_PeriphCLKConfig>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_I2C_MspInit+0x15e>
      Error_Handler();
 8004fde:	f7fe fd15 	bl	8003a0c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe2:	4b2a      	ldr	r3, [pc, #168]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	4a29      	ldr	r2, [pc, #164]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fee:	4b27      	ldr	r3, [pc, #156]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <HAL_I2C_MspInit+0x208>)
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	4a23      	ldr	r2, [pc, #140]	; (800508c <HAL_I2C_MspInit+0x208>)
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005006:	4b21      	ldr	r3, [pc, #132]	; (800508c <HAL_I2C_MspInit+0x208>)
 8005008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005012:	2380      	movs	r3, #128	; 0x80
 8005014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005018:	2312      	movs	r3, #18
 800501a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501e:	2300      	movs	r3, #0
 8005020:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005024:	2303      	movs	r3, #3
 8005026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800502a:	2304      	movs	r3, #4
 800502c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005030:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005034:	4619      	mov	r1, r3
 8005036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800503a:	f002 ff7f 	bl	8007f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800503e:	2310      	movs	r3, #16
 8005040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005044:	2312      	movs	r3, #18
 8005046:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005050:	2303      	movs	r3, #3
 8005052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005056:	2304      	movs	r3, #4
 8005058:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800505c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005060:	4619      	mov	r1, r3
 8005062:	480c      	ldr	r0, [pc, #48]	; (8005094 <HAL_I2C_MspInit+0x210>)
 8005064:	f002 ff6a 	bl	8007f3c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <HAL_I2C_MspInit+0x208>)
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	4a07      	ldr	r2, [pc, #28]	; (800508c <HAL_I2C_MspInit+0x208>)
 800506e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005072:	6593      	str	r3, [r2, #88]	; 0x58
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_I2C_MspInit+0x208>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	68fb      	ldr	r3, [r7, #12]
}
 8005080:	bf00      	nop
 8005082:	3798      	adds	r7, #152	; 0x98
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40005400 	.word	0x40005400
 800508c:	40021000 	.word	0x40021000
 8005090:	40005800 	.word	0x40005800
 8005094:	48000400 	.word	0x48000400
 8005098:	40005c00 	.word	0x40005c00

0800509c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a0a      	ldr	r2, [pc, #40]	; (80050d4 <HAL_TIM_Base_MspInit+0x38>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10b      	bne.n	80050c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <HAL_TIM_Base_MspInit+0x3c>)
 80050b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b2:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <HAL_TIM_Base_MspInit+0x3c>)
 80050b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b8:	6613      	str	r3, [r2, #96]	; 0x60
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <HAL_TIM_Base_MspInit+0x3c>)
 80050bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40021000 	.word	0x40021000

080050dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	f107 030c 	add.w	r3, r7, #12
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a11      	ldr	r2, [pc, #68]	; (8005140 <HAL_TIM_MspPostInit+0x64>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d11c      	bne.n	8005138 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_TIM_MspPostInit+0x68>)
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <HAL_TIM_MspPostInit+0x68>)
 8005104:	f043 0302 	orr.w	r3, r3, #2
 8005108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800510a:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <HAL_TIM_MspPostInit+0x68>)
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 8005116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800511a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511c:	2302      	movs	r3, #2
 800511e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005124:	2300      	movs	r3, #0
 8005126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8005128:	230e      	movs	r3, #14
 800512a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800512c:	f107 030c 	add.w	r3, r7, #12
 8005130:	4619      	mov	r1, r3
 8005132:	4805      	ldr	r0, [pc, #20]	; (8005148 <HAL_TIM_MspPostInit+0x6c>)
 8005134:	f002 ff02 	bl	8007f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8005138:	bf00      	nop
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40014400 	.word	0x40014400
 8005144:	40021000 	.word	0x40021000
 8005148:	48000400 	.word	0x48000400

0800514c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b0a2      	sub	sp, #136	; 0x88
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005154:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005164:	f107 0318 	add.w	r3, r7, #24
 8005168:	225c      	movs	r2, #92	; 0x5c
 800516a:	2100      	movs	r1, #0
 800516c:	4618      	mov	r0, r3
 800516e:	f008 fb37 	bl	800d7e0 <memset>
  if(huart->Instance==USART1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a3f      	ldr	r2, [pc, #252]	; (8005274 <HAL_UART_MspInit+0x128>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d138      	bne.n	80051ee <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800517c:	2301      	movs	r3, #1
 800517e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8005180:	2301      	movs	r3, #1
 8005182:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005184:	f107 0318 	add.w	r3, r7, #24
 8005188:	4618      	mov	r0, r3
 800518a:	f005 f887 	bl	800a29c <HAL_RCCEx_PeriphCLKConfig>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005194:	f7fe fc3a 	bl	8003a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005198:	4b37      	ldr	r3, [pc, #220]	; (8005278 <HAL_UART_MspInit+0x12c>)
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	4a36      	ldr	r2, [pc, #216]	; (8005278 <HAL_UART_MspInit+0x12c>)
 800519e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051a2:	6613      	str	r3, [r2, #96]	; 0x60
 80051a4:	4b34      	ldr	r3, [pc, #208]	; (8005278 <HAL_UART_MspInit+0x12c>)
 80051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051b0:	4b31      	ldr	r3, [pc, #196]	; (8005278 <HAL_UART_MspInit+0x12c>)
 80051b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b4:	4a30      	ldr	r2, [pc, #192]	; (8005278 <HAL_UART_MspInit+0x12c>)
 80051b6:	f043 0302 	orr.w	r3, r3, #2
 80051ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051bc:	4b2e      	ldr	r3, [pc, #184]	; (8005278 <HAL_UART_MspInit+0x12c>)
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051c8:	23c0      	movs	r3, #192	; 0xc0
 80051ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d4:	2303      	movs	r3, #3
 80051d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051da:	2307      	movs	r3, #7
 80051dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80051e4:	4619      	mov	r1, r3
 80051e6:	4825      	ldr	r0, [pc, #148]	; (800527c <HAL_UART_MspInit+0x130>)
 80051e8:	f002 fea8 	bl	8007f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80051ec:	e03d      	b.n	800526a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART2)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a23      	ldr	r2, [pc, #140]	; (8005280 <HAL_UART_MspInit+0x134>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d138      	bne.n	800526a <HAL_UART_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051f8:	2302      	movs	r3, #2
 80051fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80051fc:	2304      	movs	r3, #4
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005200:	f107 0318 	add.w	r3, r7, #24
 8005204:	4618      	mov	r0, r3
 8005206:	f005 f849 	bl	800a29c <HAL_RCCEx_PeriphCLKConfig>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8005210:	f7fe fbfc 	bl	8003a0c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005214:	4b18      	ldr	r3, [pc, #96]	; (8005278 <HAL_UART_MspInit+0x12c>)
 8005216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005218:	4a17      	ldr	r2, [pc, #92]	; (8005278 <HAL_UART_MspInit+0x12c>)
 800521a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521e:	6593      	str	r3, [r2, #88]	; 0x58
 8005220:	4b15      	ldr	r3, [pc, #84]	; (8005278 <HAL_UART_MspInit+0x12c>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800522c:	4b12      	ldr	r3, [pc, #72]	; (8005278 <HAL_UART_MspInit+0x12c>)
 800522e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005230:	4a11      	ldr	r2, [pc, #68]	; (8005278 <HAL_UART_MspInit+0x12c>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <HAL_UART_MspInit+0x12c>)
 800523a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin|SIM_UART_RX_Pin;
 8005244:	230c      	movs	r3, #12
 8005246:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005248:	2302      	movs	r3, #2
 800524a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005250:	2303      	movs	r3, #3
 8005252:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005256:	2307      	movs	r3, #7
 8005258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005260:	4619      	mov	r1, r3
 8005262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005266:	f002 fe69 	bl	8007f3c <HAL_GPIO_Init>
}
 800526a:	bf00      	nop
 800526c:	3788      	adds	r7, #136	; 0x88
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40013800 	.word	0x40013800
 8005278:	40021000 	.word	0x40021000
 800527c:	48000400 	.word	0x48000400
 8005280:	40004400 	.word	0x40004400

08005284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005288:	e7fe      	b.n	8005288 <NMI_Handler+0x4>

0800528a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800528a:	b480      	push	{r7}
 800528c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800528e:	e7fe      	b.n	800528e <HardFault_Handler+0x4>

08005290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005294:	e7fe      	b.n	8005294 <MemManage_Handler+0x4>

08005296 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005296:	b480      	push	{r7}
 8005298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800529a:	e7fe      	b.n	800529a <BusFault_Handler+0x4>

0800529c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052a0:	e7fe      	b.n	80052a0 <UsageFault_Handler+0x4>

080052a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052be:	b480      	push	{r7}
 80052c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052d0:	f000 fea6 	bl	8006020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80052d4:	f002 f9b7 	bl	8007646 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80052d8:	bf00      	nop
 80052da:	bd80      	pop	{r7, pc}

080052dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80052e0:	4802      	ldr	r0, [pc, #8]	; (80052ec <DMA1_Channel1_IRQHandler+0x10>)
 80052e2:	f002 fd4c 	bl	8007d7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200004f0 	.word	0x200004f0

080052f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052f4:	4802      	ldr	r0, [pc, #8]	; (8005300 <USART1_IRQHandler+0x10>)
 80052f6:	f006 fa3d 	bl	800b774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200006a4 	.word	0x200006a4

08005304 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005308:	4802      	ldr	r0, [pc, #8]	; (8005314 <USART2_IRQHandler+0x10>)
 800530a:	f006 fa33 	bl	800b774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000728 	.word	0x20000728

08005318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  return 1;
 800531c:	2301      	movs	r3, #1
}
 800531e:	4618      	mov	r0, r3
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <_kill>:

int _kill(int pid, int sig)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005332:	f008 faa7 	bl	800d884 <__errno>
 8005336:	4603      	mov	r3, r0
 8005338:	2216      	movs	r2, #22
 800533a:	601a      	str	r2, [r3, #0]
  return -1;
 800533c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005340:	4618      	mov	r0, r3
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_exit>:

void _exit (int status)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005350:	f04f 31ff 	mov.w	r1, #4294967295
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ffe7 	bl	8005328 <_kill>
  while (1) {}    /* Make sure we hang here */
 800535a:	e7fe      	b.n	800535a <_exit+0x12>

0800535c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e00a      	b.n	8005384 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800536e:	f3af 8000 	nop.w
 8005372:	4601      	mov	r1, r0
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	60ba      	str	r2, [r7, #8]
 800537a:	b2ca      	uxtb	r2, r1
 800537c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	3301      	adds	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	dbf0      	blt.n	800536e <_read+0x12>
  }

  return len;
 800538c:	687b      	ldr	r3, [r7, #4]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053be:	605a      	str	r2, [r3, #4]
  return 0;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <_isatty>:

int _isatty(int file)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80053d6:	2301      	movs	r3, #1
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005408:	4a14      	ldr	r2, [pc, #80]	; (800545c <_sbrk+0x5c>)
 800540a:	4b15      	ldr	r3, [pc, #84]	; (8005460 <_sbrk+0x60>)
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005414:	4b13      	ldr	r3, [pc, #76]	; (8005464 <_sbrk+0x64>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800541c:	4b11      	ldr	r3, [pc, #68]	; (8005464 <_sbrk+0x64>)
 800541e:	4a12      	ldr	r2, [pc, #72]	; (8005468 <_sbrk+0x68>)
 8005420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005422:	4b10      	ldr	r3, [pc, #64]	; (8005464 <_sbrk+0x64>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4413      	add	r3, r2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	429a      	cmp	r2, r3
 800542e:	d207      	bcs.n	8005440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005430:	f008 fa28 	bl	800d884 <__errno>
 8005434:	4603      	mov	r3, r0
 8005436:	220c      	movs	r2, #12
 8005438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
 800543e:	e009      	b.n	8005454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005440:	4b08      	ldr	r3, [pc, #32]	; (8005464 <_sbrk+0x64>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <_sbrk+0x64>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	4a05      	ldr	r2, [pc, #20]	; (8005464 <_sbrk+0x64>)
 8005450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005452:	68fb      	ldr	r3, [r7, #12]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20010000 	.word	0x20010000
 8005460:	00000400 	.word	0x00000400
 8005464:	20000888 	.word	0x20000888
 8005468:	200009f0 	.word	0x200009f0

0800546c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <SystemInit+0x20>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005476:	4a05      	ldr	r2, [pc, #20]	; (800548c <SystemInit+0x20>)
 8005478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800547c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005480:	bf00      	nop
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <HAL_SYSTICK_Callback>:
volatile uint8_t device_state = 0;
volatile uint32_t offTim;


void HAL_SYSTICK_Callback(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
	static uint32_t led2swp, led2lev;

    if(led2_tim && ++led2swp >= led2_tim)
 8005494:	4b2e      	ldr	r3, [pc, #184]	; (8005550 <HAL_SYSTICK_Callback+0xc0>)
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d04b      	beq.n	8005534 <HAL_SYSTICK_Callback+0xa4>
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <HAL_SYSTICK_Callback+0xc4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <HAL_SYSTICK_Callback+0xc4>)
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <HAL_SYSTICK_Callback+0xc4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a29      	ldr	r2, [pc, #164]	; (8005550 <HAL_SYSTICK_Callback+0xc0>)
 80054ac:	8812      	ldrh	r2, [r2, #0]
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d340      	bcc.n	8005534 <HAL_SYSTICK_Callback+0xa4>
    {
        led2swp = 0;
 80054b2:	4b28      	ldr	r3, [pc, #160]	; (8005554 <HAL_SYSTICK_Callback+0xc4>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
        if(++led2lev >= 64 + (led2_cycles>>16))
 80054b8:	4b27      	ldr	r3, [pc, #156]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	4a26      	ldr	r2, [pc, #152]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b25      	ldr	r3, [pc, #148]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	4b25      	ldr	r3, [pc, #148]	; (800555c <HAL_SYSTICK_Callback+0xcc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	0c1b      	lsrs	r3, r3, #16
 80054cc:	3340      	adds	r3, #64	; 0x40
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d316      	bcc.n	8005500 <HAL_SYSTICK_Callback+0x70>
        {
            led2lev = 0;
 80054d2:	4b21      	ldr	r3, [pc, #132]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
            if((led2_cycles & 0xFFFF) != 0xFFFF) led2_cycles--;
 80054d8:	4b20      	ldr	r3, [pc, #128]	; (800555c <HAL_SYSTICK_Callback+0xcc>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_SYSTICK_Callback+0x60>
 80054e6:	4b1d      	ldr	r3, [pc, #116]	; (800555c <HAL_SYSTICK_Callback+0xcc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_SYSTICK_Callback+0xcc>)
 80054ee:	6013      	str	r3, [r2, #0]
            if((led2_cycles & 0xFFFF) == 0) led2_tim = 0;
 80054f0:	4b1a      	ldr	r3, [pc, #104]	; (800555c <HAL_SYSTICK_Callback+0xcc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d102      	bne.n	8005500 <HAL_SYSTICK_Callback+0x70>
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <HAL_SYSTICK_Callback+0xc0>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	801a      	strh	r2, [r3, #0]
        }
        if(led2lev>=64) setLed2(0); else setLed2((led2lev<32) ? led2lev : 63-led2lev);
 8005500:	4b15      	ldr	r3, [pc, #84]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b3f      	cmp	r3, #63	; 0x3f
 8005506:	d903      	bls.n	8005510 <HAL_SYSTICK_Callback+0x80>
 8005508:	2000      	movs	r0, #0
 800550a:	f000 f83b 	bl	8005584 <setLed2>
 800550e:	e01c      	b.n	800554a <HAL_SYSTICK_Callback+0xba>
 8005510:	4b11      	ldr	r3, [pc, #68]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b1f      	cmp	r3, #31
 8005516:	d906      	bls.n	8005526 <HAL_SYSTICK_Callback+0x96>
 8005518:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005522:	b2db      	uxtb	r3, r3
 8005524:	e002      	b.n	800552c <HAL_SYSTICK_Callback+0x9c>
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	4618      	mov	r0, r3
 800552e:	f000 f829 	bl	8005584 <setLed2>
 8005532:	e00a      	b.n	800554a <HAL_SYSTICK_Callback+0xba>
     } else if(led2_tim == 0) {led2swp=0; led2lev=0;}
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_SYSTICK_Callback+0xc0>)
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d106      	bne.n	800554a <HAL_SYSTICK_Callback+0xba>
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <HAL_SYSTICK_Callback+0xc4>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_SYSTICK_Callback+0xc8>)
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

}
 8005548:	e7ff      	b.n	800554a <HAL_SYSTICK_Callback+0xba>
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	2000088c 	.word	0x2000088c
 8005554:	20000894 	.word	0x20000894
 8005558:	20000898 	.word	0x20000898
 800555c:	20000890 	.word	0x20000890

08005560 <setPwmLed>:


void setPwmLed(uint8_t pwm)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, pwm);
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <setPwmLed+0x20>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	79fa      	ldrb	r2, [r7, #7]
 8005570:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20000658 	.word	0x20000658

08005584 <setLed2>:

void setLed2(uint8_t bri)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	71fb      	strb	r3, [r7, #7]
    setPwmLed(bri_corr[bri]);
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <setLed2+0x20>)
 8005592:	5cd3      	ldrb	r3, [r2, r3]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ffe3 	bl	8005560 <setPwmLed>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	0800f9c8 	.word	0x0800f9c8

080055a8 <thp_loop>:
    POWER_OFF();
    HAL_PWR_EnterSTANDBYMode();
}

void thp_loop()
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
	CLI();
 80055ac:	f7fc fe1a 	bl	80021e4 <CLI>
}
 80055b0:	bf00      	nop
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HALcalculateCRC>:

uint8_t HALcalculateCRC(uint8_t* data, uint8_t len)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
    HAL_CRC_Init(&hcrc);
 80055c0:	480b      	ldr	r0, [pc, #44]	; (80055f0 <HALcalculateCRC+0x3c>)
 80055c2:	f002 f847 	bl	8007654 <HAL_CRC_Init>
    __HAL_CRC_DR_RESET(&hcrc);
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HALcalculateCRC+0x3c>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <HALcalculateCRC+0x3c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	609a      	str	r2, [r3, #8]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	461a      	mov	r2, r3
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4804      	ldr	r0, [pc, #16]	; (80055f0 <HALcalculateCRC+0x3c>)
 80055de:	f002 f89d 	bl	800771c <HAL_CRC_Calculate>
 80055e2:	60f8      	str	r0, [r7, #12]
    return (uint8_t)(crc & 0xFF);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	b2db      	uxtb	r3, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000538 	.word	0x20000538

080055f4 <i2c_read8>:
#include <math.h>



uint8_t i2c_read8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t *value, uint8_t addr)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08a      	sub	sp, #40	; 0x28
 80055f8:	af04      	add	r7, sp, #16
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	461a      	mov	r2, r3
 8005600:	460b      	mov	r3, r1
 8005602:	817b      	strh	r3, [r7, #10]
 8005604:	4613      	mov	r3, r2
 8005606:	727b      	strb	r3, [r7, #9]
	uint8_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8005608:	7a7b      	ldrb	r3, [r7, #9]
 800560a:	b299      	uxth	r1, r3
 800560c:	897a      	ldrh	r2, [r7, #10]
 800560e:	2308      	movs	r3, #8
 8005610:	9302      	str	r3, [sp, #8]
 8005612:	2301      	movs	r3, #1
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	f107 0316 	add.w	r3, r7, #22
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	2301      	movs	r3, #1
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f003 f9c6 	bl	80089b0 <HAL_I2C_Mem_Read>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]
    *value = tmp;
 8005628:	7dba      	ldrb	r2, [r7, #22]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	701a      	strb	r2, [r3, #0]
    return res;
 800562e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <i2c_read16>:

uint8_t i2c_read16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t *value, uint8_t addr)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	; 0x28
 800563c:	af04      	add	r7, sp, #16
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	461a      	mov	r2, r3
 8005644:	460b      	mov	r3, r1
 8005646:	817b      	strh	r3, [r7, #10]
 8005648:	4613      	mov	r3, r2
 800564a:	727b      	strb	r3, [r7, #9]
	uint16_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800564c:	7a7b      	ldrb	r3, [r7, #9]
 800564e:	b299      	uxth	r1, r3
 8005650:	897a      	ldrh	r2, [r7, #10]
 8005652:	2308      	movs	r3, #8
 8005654:	9302      	str	r3, [sp, #8]
 8005656:	2302      	movs	r3, #2
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	f107 0314 	add.w	r3, r7, #20
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	2301      	movs	r3, #1
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f003 f9a4 	bl	80089b0 <HAL_I2C_Mem_Read>
 8005668:	4603      	mov	r3, r0
 800566a:	75fb      	strb	r3, [r7, #23]
    *value = tmp;
 800566c:	8aba      	ldrh	r2, [r7, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	801a      	strh	r2, [r3, #0]
    return res;
 8005672:	7dfb      	ldrb	r3, [r7, #23]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <i2c_write16>:
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
    return res;
}

uint8_t i2c_write16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t value, uint8_t addr)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af04      	add	r7, sp, #16
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	4608      	mov	r0, r1
 8005686:	4611      	mov	r1, r2
 8005688:	461a      	mov	r2, r3
 800568a:	4603      	mov	r3, r0
 800568c:	817b      	strh	r3, [r7, #10]
 800568e:	460b      	mov	r3, r1
 8005690:	813b      	strh	r3, [r7, #8]
 8005692:	4613      	mov	r3, r2
 8005694:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp = value;
 8005696:	893b      	ldrh	r3, [r7, #8]
 8005698:	82bb      	strh	r3, [r7, #20]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	b299      	uxth	r1, r3
 800569e:	897a      	ldrh	r2, [r7, #10]
 80056a0:	2308      	movs	r3, #8
 80056a2:	9302      	str	r3, [sp, #8]
 80056a4:	2302      	movs	r3, #2
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	f107 0314 	add.w	r3, r7, #20
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	2301      	movs	r3, #1
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f003 f869 	bl	8008788 <HAL_I2C_Mem_Write>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]
    return res;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <setBit>:
    i2c_read16(i2c, sub_address, &old_word, addr);
    old_word |= new_word;
    i2c_write16(i2c, sub_address, old_word, addr);
}

void setBit(unsigned char* reg, int bitNumber, int value) {
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
    if (value == 0) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10f      	bne.n	80056f6 <setBit+0x32>
        *reg &= ~(1 << bitNumber);  // Ustawienie bitu na 0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	b25a      	sxtb	r2, r3
 80056dc:	2101      	movs	r1, #1
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	43db      	mvns	r3, r3
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	4013      	ands	r3, r2
 80056ec:	b25b      	sxtb	r3, r3
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	701a      	strb	r2, [r3, #0]
    } else if (value == 1) {
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
    }
}
 80056f4:	e00f      	b.n	8005716 <setBit+0x52>
    } else if (value == 1) {
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10c      	bne.n	8005716 <setBit+0x52>
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	b25a      	sxtb	r2, r3
 8005702:	2101      	movs	r1, #1
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	fa01 f303 	lsl.w	r3, r1, r3
 800570a:	b25b      	sxtb	r3, r3
 800570c:	4313      	orrs	r3, r2
 800570e:	b25b      	sxtb	r3, r3
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	701a      	strb	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <modifyRegister>:

void modifyRegister(unsigned char* reg, unsigned char mask, unsigned char value) {
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	70fb      	strb	r3, [r7, #3]
 800572e:	4613      	mov	r3, r2
 8005730:	70bb      	strb	r3, [r7, #2]
    *reg = (*reg & ~mask) | (value & mask);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	b25a      	sxtb	r2, r3
 8005738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800573c:	43db      	mvns	r3, r3
 800573e:	b25b      	sxtb	r3, r3
 8005740:	4013      	ands	r3, r2
 8005742:	b25a      	sxtb	r2, r3
 8005744:	78b9      	ldrb	r1, [r7, #2]
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	400b      	ands	r3, r1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	b25b      	sxtb	r3, r3
 800574e:	4313      	orrs	r3, r2
 8005750:	b25b      	sxtb	r3, r3
 8005752:	b2da      	uxtb	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	701a      	strb	r2, [r3, #0]
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <i2c_scan>:

void i2c_scan(I2C_HandleTypeDef * i2c, uint8_t addr_min, uint8_t addr_max)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
 8005770:	4613      	mov	r3, r2
 8005772:	70bb      	strb	r3, [r7, #2]
	printf("Scanning I2C devices ...\r\n");
 8005774:	4818      	ldr	r0, [pc, #96]	; (80057d8 <i2c_scan+0x74>)
 8005776:	f007 ff53 	bl	800d620 <puts>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	73fb      	strb	r3, [r7, #15]
 800577e:	e022      	b.n	80057c6 <i2c_scan+0x62>
	{
		HAL_StatusTypeDef status;
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	b29b      	uxth	r3, r3
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	b299      	uxth	r1, r3
 8005788:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800578c:	2203      	movs	r2, #3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f003 fa28 	bl	8008be4 <HAL_I2C_IsDeviceReady>
 8005794:	4603      	mov	r3, r0
 8005796:	73bb      	strb	r3, [r7, #14]
		HAL_Delay(100);
 8005798:	2064      	movs	r0, #100	; 0x64
 800579a:	f000 fc61 	bl	8006060 <HAL_Delay>
		if (status == HAL_OK) {
 800579e:	7bbb      	ldrb	r3, [r7, #14]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <i2c_scan+0x4c>
			    	printf("Device found on %#x \r\n", addr);
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	4619      	mov	r1, r3
 80057a8:	480c      	ldr	r0, [pc, #48]	; (80057dc <i2c_scan+0x78>)
 80057aa:	f007 fed3 	bl	800d554 <iprintf>
 80057ae:	e007      	b.n	80057c0 <i2c_scan+0x5c>
			    } else {
			    	printf("Device NOTfound on %#x \r\n", addr);
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	4619      	mov	r1, r3
 80057b4:	480a      	ldr	r0, [pc, #40]	; (80057e0 <i2c_scan+0x7c>)
 80057b6:	f007 fecd 	bl	800d554 <iprintf>
			    	HAL_Delay(100);
 80057ba:	2064      	movs	r0, #100	; 0x64
 80057bc:	f000 fc50 	bl	8006060 <HAL_Delay>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	3301      	adds	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
 80057c6:	7bfa      	ldrb	r2, [r7, #15]
 80057c8:	78bb      	ldrb	r3, [r7, #2]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d9d8      	bls.n	8005780 <i2c_scan+0x1c>
			    }
	}
}
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	0800f878 	.word	0x0800f878
 80057dc:	0800f894 	.word	0x0800f894
 80057e0:	0800f8ac 	.word	0x0800f8ac

080057e4 <byteswap16>:

uint16_t byteswap16 (uint16_t bytes)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	80fb      	strh	r3, [r7, #6]
	return ((bytes & 0xFF) << 8) | ((bytes >> 8) & 0xFF);
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	b21a      	sxth	r2, r3
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	b21b      	sxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b21b      	sxth	r3, r3
 8005800:	b29b      	uxth	r3, r3
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <TCA9543A_SelectChannel>:
  }
  printf("\r\n");
}

void TCA9543A_SelectChannel(uint8_t channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af02      	add	r7, sp, #8
 8005816:	4603      	mov	r3, r0
 8005818:	71fb      	strb	r3, [r7, #7]
	if (channel == 1 || channel == 2) {
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d002      	beq.n	8005826 <TCA9543A_SelectChannel+0x16>
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d11f      	bne.n	8005866 <TCA9543A_SelectChannel+0x56>
			I2C2TCA_NRST();
 8005826:	2201      	movs	r2, #1
 8005828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800582c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005830:	f002 fcfe 	bl	8008230 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005834:	2001      	movs	r0, #1
 8005836:	f000 fc13 	bl	8006060 <HAL_Delay>
		    uint8_t data = (1 << (channel - 1));
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	3b01      	subs	r3, #1
 800583e:	2201      	movs	r2, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	b2db      	uxtb	r3, r3
 8005846:	73fb      	strb	r3, [r7, #15]
		    HAL_I2C_Master_Transmit(&hi2c2, TCA9543A_ADDRESS, &data, sizeof(data), HAL_MAX_DELAY);
 8005848:	f107 020f 	add.w	r2, r7, #15
 800584c:	f04f 33ff 	mov.w	r3, #4294967295
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	2301      	movs	r3, #1
 8005854:	21e4      	movs	r1, #228	; 0xe4
 8005856:	480e      	ldr	r0, [pc, #56]	; (8005890 <TCA9543A_SelectChannel+0x80>)
 8005858:	f002 fdac 	bl	80083b4 <HAL_I2C_Master_Transmit>
		    HAL_Delay(1);
 800585c:	2001      	movs	r0, #1
 800585e:	f000 fbff 	bl	8006060 <HAL_Delay>
	if (channel == 1 || channel == 2) {
 8005862:	bf00      	nop
	} else if (channel == 0) {I2C2TCA_RST(); HAL_Delay(1);}
	else printf("Wrong parameter\r\n");
}
 8005864:	e010      	b.n	8005888 <TCA9543A_SelectChannel+0x78>
	} else if (channel == 0) {I2C2TCA_RST(); HAL_Delay(1);}
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <TCA9543A_SelectChannel+0x72>
 800586c:	2200      	movs	r2, #0
 800586e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005876:	f002 fcdb 	bl	8008230 <HAL_GPIO_WritePin>
 800587a:	2001      	movs	r0, #1
 800587c:	f000 fbf0 	bl	8006060 <HAL_Delay>
}
 8005880:	e002      	b.n	8005888 <TCA9543A_SelectChannel+0x78>
	else printf("Wrong parameter\r\n");
 8005882:	4804      	ldr	r0, [pc, #16]	; (8005894 <TCA9543A_SelectChannel+0x84>)
 8005884:	f007 fecc 	bl	800d620 <puts>
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	200005b0 	.word	0x200005b0
 8005894:	0800f8cc 	.word	0x0800f8cc

08005898 <SET_DPS368>:
{
	TCA9543A_SelectChannel(1);
}

void SET_DPS368()
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(2);
 800589c:	2002      	movs	r0, #2
 800589e:	f7ff ffb7 	bl	8005810 <TCA9543A_SelectChannel>
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UNSET_BME_DPS>:

void UNSET_BME_DPS()
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(0);
 80058aa:	2000      	movs	r0, #0
 80058ac:	f7ff ffb0 	bl	8005810 <TCA9543A_SelectChannel>
}
 80058b0:	bf00      	nop
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <TMP117_check>:


uint8_t TMP117_check()
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 80058ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80058be:	2203      	movs	r2, #3
 80058c0:	2192      	movs	r1, #146	; 0x92
 80058c2:	4814      	ldr	r0, [pc, #80]	; (8005914 <TMP117_check+0x60>)
 80058c4:	f003 f98e 	bl	8008be4 <HAL_I2C_IsDeviceReady>
 80058c8:	4603      	mov	r3, r0
 80058ca:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80058cc:	2064      	movs	r0, #100	; 0x64
 80058ce:	f000 fbc7 	bl	8006060 <HAL_Delay>
	if (status == HAL_OK) {
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d114      	bne.n	8005902 <TMP117_check+0x4e>
		uint16_t value;
		i2c_read16(&hi2c2, TMP117_ID_REG, &value, TMP117_ADDR << 1);
 80058d8:	1d3a      	adds	r2, r7, #4
 80058da:	2392      	movs	r3, #146	; 0x92
 80058dc:	210f      	movs	r1, #15
 80058de:	480d      	ldr	r0, [pc, #52]	; (8005914 <TMP117_check+0x60>)
 80058e0:	f7ff feaa 	bl	8005638 <i2c_read16>
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 80058e4:	88bb      	ldrh	r3, [r7, #4]
 80058e6:	f241 7201 	movw	r2, #5889	; 0x1701
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d104      	bne.n	80058f8 <TMP117_check+0x44>
 80058ee:	480a      	ldr	r0, [pc, #40]	; (8005918 <TMP117_check+0x64>)
 80058f0:	f007 fe96 	bl	800d620 <puts>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e008      	b.n	800590a <TMP117_check+0x56>
 80058f8:	4808      	ldr	r0, [pc, #32]	; (800591c <TMP117_check+0x68>)
 80058fa:	f007 fe91 	bl	800d620 <puts>
 80058fe:	2300      	movs	r3, #0
 8005900:	e003      	b.n	800590a <TMP117_check+0x56>
	} else {printf("TMP117 FAILED\r\n"); return 0;}
 8005902:	4807      	ldr	r0, [pc, #28]	; (8005920 <TMP117_check+0x6c>)
 8005904:	f007 fe8c 	bl	800d620 <puts>
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	200005b0 	.word	0x200005b0
 8005918:	0800f8e0 	.word	0x0800f8e0
 800591c:	0800f8ec 	.word	0x0800f8ec
 8005920:	0800f8f8 	.word	0x0800f8f8

08005924 <TMP117_RST_Conf_Reg>:

void TMP117_RST_Conf_Reg()
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
//	printf("TMP117 RESET REG\r\n");
	i2c_write16(&hi2c2, TMP117_CONF_REG, TMP117_RESET_CONF, TMP117_ADDR << 1);
 8005928:	2392      	movs	r3, #146	; 0x92
 800592a:	f44f 7208 	mov.w	r2, #544	; 0x220
 800592e:	2101      	movs	r1, #1
 8005930:	4803      	ldr	r0, [pc, #12]	; (8005940 <TMP117_RST_Conf_Reg+0x1c>)
 8005932:	f7ff fea3 	bl	800567c <i2c_write16>
	HAL_Delay(1);
 8005936:	2001      	movs	r0, #1
 8005938:	f000 fb92 	bl	8006060 <HAL_Delay>

}
 800593c:	bf00      	nop
 800593e:	bd80      	pop	{r7, pc}
 8005940:	200005b0 	.word	0x200005b0

08005944 <TMP117_get_temp>:

float TMP117_get_temp(uint8_t avg_mode)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	71fb      	strb	r3, [r7, #7]
	uint16_t config, swapconfig;
	TMP117_RST_Conf_Reg();
 800594e:	f7ff ffe9 	bl	8005924 <TMP117_RST_Conf_Reg>
	i2c_read16(&hi2c2, TMP117_CONF_REG, &config, TMP117_ADDR << 1);
 8005952:	f107 020c 	add.w	r2, r7, #12
 8005956:	2392      	movs	r3, #146	; 0x92
 8005958:	2101      	movs	r1, #1
 800595a:	4824      	ldr	r0, [pc, #144]	; (80059ec <TMP117_get_temp+0xa8>)
 800595c:	f7ff fe6c 	bl	8005638 <i2c_read16>
	swapconfig = byteswap16(config);
 8005960:	89bb      	ldrh	r3, [r7, #12]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ff3e 	bl	80057e4 <byteswap16>
 8005968:	4603      	mov	r3, r0
 800596a:	81fb      	strh	r3, [r7, #14]
//	printf("REG in TMP (hex): %x \r\n", swapconfig);
	swapconfig |= avg_mode;
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	b29a      	uxth	r2, r3
 8005970:	89fb      	ldrh	r3, [r7, #14]
 8005972:	4313      	orrs	r3, r2
 8005974:	81fb      	strh	r3, [r7, #14]
	swapconfig |= one_shot;
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800597c:	81fb      	strh	r3, [r7, #14]
	config = byteswap16(swapconfig);
 800597e:	89fb      	ldrh	r3, [r7, #14]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ff2f 	bl	80057e4 <byteswap16>
 8005986:	4603      	mov	r3, r0
 8005988:	81bb      	strh	r3, [r7, #12]
	i2c_write16(&hi2c2, TMP117_CONF_REG, config, TMP117_ADDR << 1);
 800598a:	89ba      	ldrh	r2, [r7, #12]
 800598c:	2392      	movs	r3, #146	; 0x92
 800598e:	2101      	movs	r1, #1
 8005990:	4816      	ldr	r0, [pc, #88]	; (80059ec <TMP117_get_temp+0xa8>)
 8005992:	f7ff fe73 	bl	800567c <i2c_write16>
	HAL_Delay(2);
 8005996:	2002      	movs	r0, #2
 8005998:	f000 fb62 	bl	8006060 <HAL_Delay>
	if((avg_mode == no_avg) || (avg_mode == avg8)) {HAL_Delay(200);} else {HAL_Delay(1200);}
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <TMP117_get_temp+0x64>
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d103      	bne.n	80059b0 <TMP117_get_temp+0x6c>
 80059a8:	20c8      	movs	r0, #200	; 0xc8
 80059aa:	f000 fb59 	bl	8006060 <HAL_Delay>
 80059ae:	e003      	b.n	80059b8 <TMP117_get_temp+0x74>
 80059b0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80059b4:	f000 fb54 	bl	8006060 <HAL_Delay>
	uint16_t value;
    i2c_read16(&hi2c2, TMP117_TEMP_REG, &value, TMP117_ADDR << 1);
 80059b8:	f107 020a 	add.w	r2, r7, #10
 80059bc:	2392      	movs	r3, #146	; 0x92
 80059be:	2100      	movs	r1, #0
 80059c0:	480a      	ldr	r0, [pc, #40]	; (80059ec <TMP117_get_temp+0xa8>)
 80059c2:	f7ff fe39 	bl	8005638 <i2c_read16>
    return (float)byteswap16(value) * TMP117_RESOLUTION;
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff ff0b 	bl	80057e4 <byteswap16>
 80059ce:	4603      	mov	r3, r0
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80059f0 <TMP117_get_temp+0xac>
 80059dc:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80059e0:	eeb0 0a67 	vmov.f32	s0, s15
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200005b0 	.word	0x200005b0
 80059f0:	3c000000 	.word	0x3c000000

080059f4 <MS8607_check>:


uint8_t MS8607_check()
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
	ms8607_init();
 80059f8:	f7fe f818 	bl	8003a2c <ms8607_init>
	if(ms8607_is_connected()) {printf("MS8607 OK\r\n"); return 1;
 80059fc:	f7fe f826 	bl	8003a4c <ms8607_is_connected>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <MS8607_check+0x1c>
 8005a06:	4805      	ldr	r0, [pc, #20]	; (8005a1c <MS8607_check+0x28>)
 8005a08:	f007 fe0a 	bl	800d620 <puts>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e003      	b.n	8005a18 <MS8607_check+0x24>
	} else {printf("MS8607 FAIL\r\n"); return 0;};
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <MS8607_check+0x2c>)
 8005a12:	f007 fe05 	bl	800d620 <puts>
 8005a16:	2300      	movs	r3, #0
	ms8607_reset();
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	0800f908 	.word	0x0800f908
 8005a20:	0800f914 	.word	0x0800f914

08005a24 <MS8607_get_temp>:

float MS8607_get_temp()
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
	float temp;
	ms8607_read_temperature(&temp);
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe f821 	bl	8003a74 <ms8607_read_temperature>
//	printf("MS Temp: %f\r\n",temp);
	return temp;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	ee07 3a90 	vmov	s15, r3
}
 8005a38:	eeb0 0a67 	vmov.f32	s0, s15
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <MS8607_get_press>:

float MS8607_get_press()
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
	float press;
	ms8607_read_pressure(&press);
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe f825 	bl	8003a9a <ms8607_read_pressure>
//	printf("MS Press: %f\r\n",press);
	return press;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	ee07 3a90 	vmov	s15, r3
}
 8005a56:	eeb0 0a67 	vmov.f32	s0, s15
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <SHTC3_wakeup>:
//	printf("MS Hum: %f\r\n",hum);
	return hum;
}

uint8_t SHTC3_wakeup()
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	uint16_t command = SHTC3_CMD_WAKEUP;
 8005a66:	f241 7335 	movw	r3, #5941	; 0x1735
 8005a6a:	80bb      	strh	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 3, 150);
 8005a6c:	1d3a      	adds	r2, r7, #4
 8005a6e:	2396      	movs	r3, #150	; 0x96
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	2303      	movs	r3, #3
 8005a74:	21e0      	movs	r1, #224	; 0xe0
 8005a76:	4809      	ldr	r0, [pc, #36]	; (8005a9c <SHTC3_wakeup+0x3c>)
 8005a78:	f002 fc9c 	bl	80083b4 <HAL_I2C_Master_Transmit>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(13);
 8005a80:	200d      	movs	r0, #13
 8005a82:	f000 faed 	bl	8006060 <HAL_Delay>
	if(status == HAL_OK) return 1;
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <SHTC3_wakeup+0x30>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <SHTC3_wakeup+0x32>
	else return 0;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200005b0 	.word	0x200005b0

08005aa0 <SHTC3_sleep>:

uint8_t SHTC3_sleep()
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	uint16_t command = SHTC3_CMD_SLEEP;
 8005aa6:	f649 03b0 	movw	r3, #39088	; 0x98b0
 8005aaa:	80bb      	strh	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 3, 150);
 8005aac:	1d3a      	adds	r2, r7, #4
 8005aae:	2396      	movs	r3, #150	; 0x96
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	21e0      	movs	r1, #224	; 0xe0
 8005ab6:	4809      	ldr	r0, [pc, #36]	; (8005adc <SHTC3_sleep+0x3c>)
 8005ab8:	f002 fc7c 	bl	80083b4 <HAL_I2C_Master_Transmit>
 8005abc:	4603      	mov	r3, r0
 8005abe:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	f000 facd 	bl	8006060 <HAL_Delay>
	if(status == HAL_OK) return 1;
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <SHTC3_sleep+0x30>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <SHTC3_sleep+0x32>
	else return 0;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	200005b0 	.word	0x200005b0

08005ae0 <SHTC3_check>:


uint8_t SHTC3_check()
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status, status2;
	uint8_t data[2];
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 8005ae6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005aea:	2203      	movs	r2, #3
 8005aec:	21e0      	movs	r1, #224	; 0xe0
 8005aee:	4828      	ldr	r0, [pc, #160]	; (8005b90 <SHTC3_check+0xb0>)
 8005af0:	f003 f878 	bl	8008be4 <HAL_I2C_IsDeviceReady>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8005af8:	2002      	movs	r0, #2
 8005afa:	f000 fab1 	bl	8006060 <HAL_Delay>
	if (status == HAL_OK) {
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d13b      	bne.n	8005b7c <SHTC3_check+0x9c>
		SHTC3_wakeup();
 8005b04:	f7ff ffac 	bl	8005a60 <SHTC3_wakeup>
		uint16_t command = SHTC3_CMD_READ_ID;
 8005b08:	f64c 03ef 	movw	r3, #51439	; 0xc8ef
 8005b0c:	80fb      	strh	r3, [r7, #6]
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8005b0e:	1dba      	adds	r2, r7, #6
 8005b10:	2396      	movs	r3, #150	; 0x96
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	2302      	movs	r3, #2
 8005b16:	21e0      	movs	r1, #224	; 0xe0
 8005b18:	481d      	ldr	r0, [pc, #116]	; (8005b90 <SHTC3_check+0xb0>)
 8005b1a:	f002 fc4b 	bl	80083b4 <HAL_I2C_Master_Transmit>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	73bb      	strb	r3, [r7, #14]
		status2 = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 2, 150);
 8005b22:	f107 0208 	add.w	r2, r7, #8
 8005b26:	2396      	movs	r3, #150	; 0x96
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	21e1      	movs	r1, #225	; 0xe1
 8005b2e:	4818      	ldr	r0, [pc, #96]	; (8005b90 <SHTC3_check+0xb0>)
 8005b30:	f002 fd34 	bl	800859c <HAL_I2C_Master_Receive>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73bb      	strb	r3, [r7, #14]
		  if (status2 == HAL_OK) {
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d119      	bne.n	8005b72 <SHTC3_check+0x92>
			  uint16_t id = data[0] << 8 | data[1];
 8005b3e:	7a3b      	ldrb	r3, [r7, #8]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	b21a      	sxth	r2, r3
 8005b44:	7a7b      	ldrb	r3, [r7, #9]
 8005b46:	b21b      	sxth	r3, r3
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	b21b      	sxth	r3, r3
 8005b4c:	81bb      	strh	r3, [r7, #12]
			  uint16_t code = id & SHTC3_PRODUCT_CODE_MASK;
 8005b4e:	89bb      	ldrh	r3, [r7, #12]
 8005b50:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8005b54:	051b      	lsls	r3, r3, #20
 8005b56:	0d1b      	lsrs	r3, r3, #20
 8005b58:	817b      	strh	r3, [r7, #10]
			  if (code == 0x807) {
 8005b5a:	897b      	ldrh	r3, [r7, #10]
 8005b5c:	f640 0207 	movw	r2, #2055	; 0x807
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d110      	bne.n	8005b86 <SHTC3_check+0xa6>
				  printf("SHTC3 OK\r\n");
 8005b64:	480b      	ldr	r0, [pc, #44]	; (8005b94 <SHTC3_check+0xb4>)
 8005b66:	f007 fd5b 	bl	800d620 <puts>
				  SHTC3_sleep();
 8005b6a:	f7ff ff99 	bl	8005aa0 <SHTC3_sleep>
				  return 1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e00a      	b.n	8005b88 <SHTC3_check+0xa8>
			  }
		  } else {printf("NO SHTC3\r\n"); return 0;}
 8005b72:	4809      	ldr	r0, [pc, #36]	; (8005b98 <SHTC3_check+0xb8>)
 8005b74:	f007 fd54 	bl	800d620 <puts>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e005      	b.n	8005b88 <SHTC3_check+0xa8>
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 8005b7c:	4807      	ldr	r0, [pc, #28]	; (8005b9c <SHTC3_check+0xbc>)
 8005b7e:	f007 fd4f 	bl	800d620 <puts>
 8005b82:	2300      	movs	r3, #0
 8005b84:	e000      	b.n	8005b88 <SHTC3_check+0xa8>
	return 0;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	200005b0 	.word	0x200005b0
 8005b94:	0800f924 	.word	0x0800f924
 8005b98:	0800f930 	.word	0x0800f930
 8005b9c:	0800f93c 	.word	0x0800f93c

08005ba0 <SHTC3_get_temp>:

float SHTC3_get_temp(uint8_t mode)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint16_t command;
		SHTC3_wakeup();
 8005baa:	f7ff ff59 	bl	8005a60 <SHTC3_wakeup>
		if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 8005bae:	79fb      	ldrb	r3, [r7, #7]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d103      	bne.n	8005bbc <SHTC3_get_temp+0x1c>
 8005bb4:	f24a 237c 	movw	r3, #41596	; 0xa27c
 8005bb8:	81fb      	strh	r3, [r7, #14]
 8005bba:	e002      	b.n	8005bc2 <SHTC3_get_temp+0x22>
		else command = SHTC3_CMD_TEMP_HUM_LP;
 8005bbc:	f645 0364 	movw	r3, #22628	; 0x5864
 8005bc0:	81fb      	strh	r3, [r7, #14]
		status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8005bc2:	f107 020e 	add.w	r2, r7, #14
 8005bc6:	2396      	movs	r3, #150	; 0x96
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	2302      	movs	r3, #2
 8005bcc:	21e0      	movs	r1, #224	; 0xe0
 8005bce:	4824      	ldr	r0, [pc, #144]	; (8005c60 <SHTC3_get_temp+0xc0>)
 8005bd0:	f002 fbf0 	bl	80083b4 <HAL_I2C_Master_Transmit>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(20);
 8005bd8:	2014      	movs	r0, #20
 8005bda:	f000 fa41 	bl	8006060 <HAL_Delay>
		status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 3, 150);
 8005bde:	f107 0210 	add.w	r2, r7, #16
 8005be2:	2396      	movs	r3, #150	; 0x96
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	2303      	movs	r3, #3
 8005be8:	21e1      	movs	r1, #225	; 0xe1
 8005bea:	481d      	ldr	r0, [pc, #116]	; (8005c60 <SHTC3_get_temp+0xc0>)
 8005bec:	f002 fcd6 	bl	800859c <HAL_I2C_Master_Receive>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d127      	bne.n	8005c4a <SHTC3_get_temp+0xaa>
		uint16_t raw_temp = data[0] << 8 | data[1];
 8005bfa:	7c3b      	ldrb	r3, [r7, #16]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	b21a      	sxth	r2, r3
 8005c00:	7c7b      	ldrb	r3, [r7, #17]
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b21b      	sxth	r3, r3
 8005c08:	82bb      	strh	r3, [r7, #20]
		uint8_t crc_hal = HALcalculateCRC(data,2);
 8005c0a:	f107 0310 	add.w	r3, r7, #16
 8005c0e:	2102      	movs	r1, #2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fccf 	bl	80055b4 <HALcalculateCRC>
 8005c16:	4603      	mov	r3, r0
 8005c18:	74fb      	strb	r3, [r7, #19]
		if(data[2] == crc_hal) {
 8005c1a:	7cbb      	ldrb	r3, [r7, #18]
 8005c1c:	7cfa      	ldrb	r2, [r7, #19]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d116      	bne.n	8005c50 <SHTC3_get_temp+0xb0>
			SHTC3_sleep();
 8005c22:	f7ff ff3d 	bl	8005aa0 <SHTC3_sleep>
			return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
 8005c26:	8abb      	ldrh	r3, [r7, #20]
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c30:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005c64 <SHTC3_get_temp+0xc4>
 8005c34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c38:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005c68 <SHTC3_get_temp+0xc8>
 8005c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c40:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005c6c <SHTC3_get_temp+0xcc>
 8005c44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c48:	e004      	b.n	8005c54 <SHTC3_get_temp+0xb4>
		}
	} else {printf("SHTC3 Busy\r\n");};
 8005c4a:	4809      	ldr	r0, [pc, #36]	; (8005c70 <SHTC3_get_temp+0xd0>)
 8005c4c:	f007 fce8 	bl	800d620 <puts>
	return -1000.0;
 8005c50:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005c74 <SHTC3_get_temp+0xd4>
}
 8005c54:	eeb0 0a67 	vmov.f32	s0, s15
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	200005b0 	.word	0x200005b0
 8005c64:	432f0000 	.word	0x432f0000
 8005c68:	477fff00 	.word	0x477fff00
 8005c6c:	42340000 	.word	0x42340000
 8005c70:	0800f94c 	.word	0x0800f94c
 8005c74:	c47a0000 	.word	0xc47a0000

08005c78 <SHTC3_get_hum>:

float SHTC3_get_hum(uint8_t mode)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	4603      	mov	r3, r0
 8005c80:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint16_t command;
	SHTC3_wakeup();
 8005c82:	f7ff feed 	bl	8005a60 <SHTC3_wakeup>
	if(mode == 0) command = SHTC3_CMD_HUM_TEMP;
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d103      	bne.n	8005c94 <SHTC3_get_hum+0x1c>
 8005c8c:	f242 435c 	movw	r3, #9308	; 0x245c
 8005c90:	81fb      	strh	r3, [r7, #14]
 8005c92:	e002      	b.n	8005c9a <SHTC3_get_hum+0x22>
	else command = SHTC3_CMD_HUM_TEMP_LP;
 8005c94:	f64d 6344 	movw	r3, #56900	; 0xde44
 8005c98:	81fb      	strh	r3, [r7, #14]
		status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8005c9a:	f107 020e 	add.w	r2, r7, #14
 8005c9e:	2396      	movs	r3, #150	; 0x96
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	21e0      	movs	r1, #224	; 0xe0
 8005ca6:	4823      	ldr	r0, [pc, #140]	; (8005d34 <SHTC3_get_hum+0xbc>)
 8005ca8:	f002 fb84 	bl	80083b4 <HAL_I2C_Master_Transmit>
 8005cac:	4603      	mov	r3, r0
 8005cae:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(20);
 8005cb0:	2014      	movs	r0, #20
 8005cb2:	f000 f9d5 	bl	8006060 <HAL_Delay>
		status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 3, 150);
 8005cb6:	f107 0210 	add.w	r2, r7, #16
 8005cba:	2396      	movs	r3, #150	; 0x96
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	21e1      	movs	r1, #225	; 0xe1
 8005cc2:	481c      	ldr	r0, [pc, #112]	; (8005d34 <SHTC3_get_hum+0xbc>)
 8005cc4:	f002 fc6a 	bl	800859c <HAL_I2C_Master_Receive>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d123      	bne.n	8005d1a <SHTC3_get_hum+0xa2>
		uint16_t raw_hum = data[0] << 8 | data[1];
 8005cd2:	7c3b      	ldrb	r3, [r7, #16]
 8005cd4:	021b      	lsls	r3, r3, #8
 8005cd6:	b21a      	sxth	r2, r3
 8005cd8:	7c7b      	ldrb	r3, [r7, #17]
 8005cda:	b21b      	sxth	r3, r3
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	b21b      	sxth	r3, r3
 8005ce0:	82bb      	strh	r3, [r7, #20]
		uint8_t crc_hal = HALcalculateCRC(data,2);
 8005ce2:	f107 0310 	add.w	r3, r7, #16
 8005ce6:	2102      	movs	r1, #2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fc63 	bl	80055b4 <HALcalculateCRC>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	74fb      	strb	r3, [r7, #19]

		if(data[2] == crc_hal) {
 8005cf2:	7cbb      	ldrb	r3, [r7, #18]
 8005cf4:	7cfa      	ldrb	r2, [r7, #19]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d112      	bne.n	8005d20 <SHTC3_get_hum+0xa8>
			SHTC3_sleep();
 8005cfa:	f7ff fed1 	bl	8005aa0 <SHTC3_sleep>
			return (float)((raw_hum * 100.0f) / 65535.0f);
 8005cfe:	8abb      	ldrh	r3, [r7, #20]
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d08:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005d38 <SHTC3_get_hum+0xc0>
 8005d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d10:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8005d3c <SHTC3_get_hum+0xc4>
 8005d14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d18:	e004      	b.n	8005d24 <SHTC3_get_hum+0xac>
		}
	} else {printf("SHTC3 Busy\r\n");};
 8005d1a:	4809      	ldr	r0, [pc, #36]	; (8005d40 <SHTC3_get_hum+0xc8>)
 8005d1c:	f007 fc80 	bl	800d620 <puts>
	return -1000.0;
 8005d20:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005d44 <SHTC3_get_hum+0xcc>
}
 8005d24:	eef0 7a47 	vmov.f32	s15, s14
 8005d28:	eeb0 0a67 	vmov.f32	s0, s15
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200005b0 	.word	0x200005b0
 8005d38:	42c80000 	.word	0x42c80000
 8005d3c:	477fff00 	.word	0x477fff00
 8005d40:	0800f94c 	.word	0x0800f94c
 8005d44:	c47a0000 	.word	0xc47a0000

08005d48 <BME280_check>:

uint8_t BME280_check()
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
	uint8_t value;
	TCA9543A_SelectChannel(1);
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f7ff fd5e 	bl	8005810 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8005d54:	2001      	movs	r0, #1
 8005d56:	f000 f983 	bl	8006060 <HAL_Delay>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, BMP280_I2C_ADDRESS_1 << 1, 3, 150);
 8005d5a:	2396      	movs	r3, #150	; 0x96
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	21ee      	movs	r1, #238	; 0xee
 8005d60:	4814      	ldr	r0, [pc, #80]	; (8005db4 <BME280_check+0x6c>)
 8005d62:	f002 ff3f 	bl	8008be4 <HAL_I2C_IsDeviceReady>
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8005d6a:	2064      	movs	r0, #100	; 0x64
 8005d6c:	f000 f978 	bl	8006060 <HAL_Delay>
	if (status == HAL_OK) {
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d115      	bne.n	8005da2 <BME280_check+0x5a>
		i2c_read8(&hi2c2, BMP280_REG_ID, &value, BMP280_I2C_ADDRESS_1 << 1);
 8005d76:	1dba      	adds	r2, r7, #6
 8005d78:	23ee      	movs	r3, #238	; 0xee
 8005d7a:	21d0      	movs	r1, #208	; 0xd0
 8005d7c:	480d      	ldr	r0, [pc, #52]	; (8005db4 <BME280_check+0x6c>)
 8005d7e:	f7ff fc39 	bl	80055f4 <i2c_read8>
		TCA9543A_SelectChannel(0);
 8005d82:	2000      	movs	r0, #0
 8005d84:	f7ff fd44 	bl	8005810 <TCA9543A_SelectChannel>
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 8005d88:	79bb      	ldrb	r3, [r7, #6]
 8005d8a:	2b60      	cmp	r3, #96	; 0x60
 8005d8c:	d104      	bne.n	8005d98 <BME280_check+0x50>
 8005d8e:	480a      	ldr	r0, [pc, #40]	; (8005db8 <BME280_check+0x70>)
 8005d90:	f007 fc46 	bl	800d620 <puts>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e008      	b.n	8005daa <BME280_check+0x62>
 8005d98:	4808      	ldr	r0, [pc, #32]	; (8005dbc <BME280_check+0x74>)
 8005d9a:	f007 fc41 	bl	800d620 <puts>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e003      	b.n	8005daa <BME280_check+0x62>
	} else {printf("BME280 FAILED\r\n"); return 0;}
 8005da2:	4807      	ldr	r0, [pc, #28]	; (8005dc0 <BME280_check+0x78>)
 8005da4:	f007 fc3c 	bl	800d620 <puts>
 8005da8:	2300      	movs	r3, #0
	return 0;

}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	200005b0 	.word	0x200005b0
 8005db8:	0800f958 	.word	0x0800f958
 8005dbc:	0800f964 	.word	0x0800f964
 8005dc0:	0800f970 	.word	0x0800f970

08005dc4 <BME280_init_config>:

void BME280_init_config(uint8_t conf_mode, uint8_t ovr_temp, uint8_t ovr_press, uint8_t ovr_hum, uint8_t coeff)
{
 8005dc4:	b590      	push	{r4, r7, lr}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	71fb      	strb	r3, [r7, #7]
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	71bb      	strb	r3, [r7, #6]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	717b      	strb	r3, [r7, #5]
 8005dde:	4613      	mov	r3, r2
 8005de0:	713b      	strb	r3, [r7, #4]
	TCA9543A_SelectChannel(1);
 8005de2:	2001      	movs	r0, #1
 8005de4:	f7ff fd14 	bl	8005810 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8005de8:	2001      	movs	r0, #1
 8005dea:	f000 f939 	bl	8006060 <HAL_Delay>
//	bmp280_init_default_params(&bmp280.params);

	bmp280.params.filter = coeff;
 8005dee:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <BME280_init_config+0xa4>)
 8005df0:	7e3b      	ldrb	r3, [r7, #24]
 8005df2:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
	bmp280.params.oversampling_pressure = ovr_press;
 8005df6:	4a1c      	ldr	r2, [pc, #112]	; (8005e68 <BME280_init_config+0xa4>)
 8005df8:	797b      	ldrb	r3, [r7, #5]
 8005dfa:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	bmp280.params.oversampling_temperature = ovr_temp;
 8005dfe:	4a1a      	ldr	r2, [pc, #104]	; (8005e68 <BME280_init_config+0xa4>)
 8005e00:	79bb      	ldrb	r3, [r7, #6]
 8005e02:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	bmp280.params.oversampling_humidity = ovr_hum;
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <BME280_init_config+0xa4>)
 8005e08:	793b      	ldrb	r3, [r7, #4]
 8005e0a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	bmp280.params.standby = BMP280_STANDBY_250;
 8005e0e:	4b16      	ldr	r3, [pc, #88]	; (8005e68 <BME280_init_config+0xa4>)
 8005e10:	2203      	movs	r2, #3
 8005e12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <BME280_init_config+0xa4>)
 8005e18:	2277      	movs	r2, #119	; 0x77
 8005e1a:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 8005e1c:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <BME280_init_config+0xa4>)
 8005e1e:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <BME280_init_config+0xa8>)
 8005e20:	629a      	str	r2, [r3, #40]	; 0x28

	switch (conf_mode)
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d002      	beq.n	8005e2e <BME280_init_config+0x6a>
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d005      	beq.n	8005e38 <BME280_init_config+0x74>
 8005e2c:	e009      	b.n	8005e42 <BME280_init_config+0x7e>
	{
	case 1:
		bmp280.params.mode = BMP280_MODE_FORCED;
 8005e2e:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <BME280_init_config+0xa4>)
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8005e36:	e008      	b.n	8005e4a <BME280_init_config+0x86>
	case 2:
		bmp280.params.mode = BMP280_MODE_NORMAL;
 8005e38:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <BME280_init_config+0xa4>)
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8005e40:	e003      	b.n	8005e4a <BME280_init_config+0x86>
	default:
		bmp280.params.mode = BMP280_MODE_NORMAL;
 8005e42:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <BME280_init_config+0xa4>)
 8005e44:	2203      	movs	r2, #3
 8005e46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	  }
	bmp280_init(&bmp280, &bmp280.params);
 8005e4a:	4909      	ldr	r1, [pc, #36]	; (8005e70 <BME280_init_config+0xac>)
 8005e4c:	4806      	ldr	r0, [pc, #24]	; (8005e68 <BME280_init_config+0xa4>)
 8005e4e:	f7fb fbbf 	bl	80015d0 <bmp280_init>
	HAL_Delay(1);
 8005e52:	2001      	movs	r0, #1
 8005e54:	f000 f904 	bl	8006060 <HAL_Delay>
	TCA9543A_SelectChannel(0);
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f7ff fcd9 	bl	8005810 <TCA9543A_SelectChannel>
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000840 	.word	0x20000840
 8005e6c:	200005b0 	.word	0x200005b0
 8005e70:	2000086c 	.word	0x2000086c

08005e74 <BME280_get_temp>:

float BME280_get_temp()
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(1);
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	f7ff fcc8 	bl	8005810 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8005e80:	2001      	movs	r0, #1
 8005e82:	f000 f8ed 	bl	8006060 <HAL_Delay>
	float temp, press, hum;
	bmp280_force_measurement(&bmp280);
 8005e86:	4810      	ldr	r0, [pc, #64]	; (8005ec8 <BME280_get_temp+0x54>)
 8005e88:	f7fb fc4f 	bl	800172a <bmp280_force_measurement>
	while(bmp280_is_measuring(&bmp280));
 8005e8c:	bf00      	nop
 8005e8e:	480e      	ldr	r0, [pc, #56]	; (8005ec8 <BME280_get_temp+0x54>)
 8005e90:	f7fb fc75 	bl	800177e <bmp280_is_measuring>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f9      	bne.n	8005e8e <BME280_get_temp+0x1a>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8005e9a:	1d3b      	adds	r3, r7, #4
 8005e9c:	f107 0208 	add.w	r2, r7, #8
 8005ea0:	f107 010c 	add.w	r1, r7, #12
 8005ea4:	4808      	ldr	r0, [pc, #32]	; (8005ec8 <BME280_get_temp+0x54>)
 8005ea6:	f7fc f841 	bl	8001f2c <bmp280_read_float>
	HAL_Delay(1);
 8005eaa:	2001      	movs	r0, #1
 8005eac:	f000 f8d8 	bl	8006060 <HAL_Delay>
	TCA9543A_SelectChannel(0);
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	f7ff fcad 	bl	8005810 <TCA9543A_SelectChannel>
	return temp;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	ee07 3a90 	vmov	s15, r3
}
 8005ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000840 	.word	0x20000840

08005ecc <BME280_get_press>:

float BME280_get_press()
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(1);
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	f7ff fc9c 	bl	8005810 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8005ed8:	2001      	movs	r0, #1
 8005eda:	f000 f8c1 	bl	8006060 <HAL_Delay>
	float temp, press, hum;
	bmp280_force_measurement(&bmp280);
 8005ede:	4810      	ldr	r0, [pc, #64]	; (8005f20 <BME280_get_press+0x54>)
 8005ee0:	f7fb fc23 	bl	800172a <bmp280_force_measurement>
	while(bmp280_is_measuring(&bmp280));
 8005ee4:	bf00      	nop
 8005ee6:	480e      	ldr	r0, [pc, #56]	; (8005f20 <BME280_get_press+0x54>)
 8005ee8:	f7fb fc49 	bl	800177e <bmp280_is_measuring>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f9      	bne.n	8005ee6 <BME280_get_press+0x1a>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8005ef2:	1d3b      	adds	r3, r7, #4
 8005ef4:	f107 0208 	add.w	r2, r7, #8
 8005ef8:	f107 010c 	add.w	r1, r7, #12
 8005efc:	4808      	ldr	r0, [pc, #32]	; (8005f20 <BME280_get_press+0x54>)
 8005efe:	f7fc f815 	bl	8001f2c <bmp280_read_float>
	HAL_Delay(1);
 8005f02:	2001      	movs	r0, #1
 8005f04:	f000 f8ac 	bl	8006060 <HAL_Delay>
	TCA9543A_SelectChannel(0);
 8005f08:	2000      	movs	r0, #0
 8005f0a:	f7ff fc81 	bl	8005810 <TCA9543A_SelectChannel>
	return press;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	ee07 3a90 	vmov	s15, r3
}
 8005f14:	eeb0 0a67 	vmov.f32	s0, s15
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000840 	.word	0x20000840

08005f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f28:	f7ff faa0 	bl	800546c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f2c:	480c      	ldr	r0, [pc, #48]	; (8005f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8005f2e:	490d      	ldr	r1, [pc, #52]	; (8005f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005f30:	4a0d      	ldr	r2, [pc, #52]	; (8005f68 <LoopForever+0xe>)
  movs r3, #0
 8005f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f34:	e002      	b.n	8005f3c <LoopCopyDataInit>

08005f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f3a:	3304      	adds	r3, #4

08005f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f40:	d3f9      	bcc.n	8005f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f42:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005f44:	4c0a      	ldr	r4, [pc, #40]	; (8005f70 <LoopForever+0x16>)
  movs r3, #0
 8005f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f48:	e001      	b.n	8005f4e <LoopFillZerobss>

08005f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f4c:	3204      	adds	r2, #4

08005f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f50:	d3fb      	bcc.n	8005f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f52:	f007 fc9d 	bl	800d890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f56:	f7fc ff95 	bl	8002e84 <main>

08005f5a <LoopForever>:

LoopForever:
    b LoopForever
 8005f5a:	e7fe      	b.n	8005f5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005f5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f64:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005f68:	0800fd6c 	.word	0x0800fd6c
  ldr r2, =_sbss
 8005f6c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005f70:	200009ec 	.word	0x200009ec

08005f74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f74:	e7fe      	b.n	8005f74 <ADC1_IRQHandler>

08005f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f80:	2003      	movs	r0, #3
 8005f82:	f001 fb1f 	bl	80075c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f86:	200f      	movs	r0, #15
 8005f88:	f000 f80e 	bl	8005fa8 <HAL_InitTick>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	71fb      	strb	r3, [r7, #7]
 8005f96:	e001      	b.n	8005f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005f98:	f7fe febc 	bl	8004d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005fb4:	4b17      	ldr	r3, [pc, #92]	; (8006014 <HAL_InitTick+0x6c>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d023      	beq.n	8006004 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005fbc:	4b16      	ldr	r3, [pc, #88]	; (8006018 <HAL_InitTick+0x70>)
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b14      	ldr	r3, [pc, #80]	; (8006014 <HAL_InitTick+0x6c>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 fb2b 	bl	800762e <HAL_SYSTICK_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b0f      	cmp	r3, #15
 8005fe2:	d809      	bhi.n	8005ff8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fec:	f001 faf5 	bl	80075da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <HAL_InitTick+0x74>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	e007      	b.n	8006008 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]
 8005ffc:	e004      	b.n	8006008 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
 8006002:	e001      	b.n	8006008 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000024 	.word	0x20000024
 8006018:	2000001c 	.word	0x2000001c
 800601c:	20000020 	.word	0x20000020

08006020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <HAL_IncTick+0x20>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <HAL_IncTick+0x24>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4413      	add	r3, r2
 8006030:	4a04      	ldr	r2, [pc, #16]	; (8006044 <HAL_IncTick+0x24>)
 8006032:	6013      	str	r3, [r2, #0]
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000024 	.word	0x20000024
 8006044:	2000089c 	.word	0x2000089c

08006048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return uwTick;
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <HAL_GetTick+0x14>)
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	2000089c 	.word	0x2000089c

08006060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006068:	f7ff ffee 	bl	8006048 <HAL_GetTick>
 800606c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d005      	beq.n	8006086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800607a:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <HAL_Delay+0x44>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006086:	bf00      	nop
 8006088:	f7ff ffde 	bl	8006048 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	429a      	cmp	r2, r3
 8006096:	d8f7      	bhi.n	8006088 <HAL_Delay+0x28>
  {
  }
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000024 	.word	0x20000024

080060a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	609a      	str	r2, [r3, #8]
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	609a      	str	r2, [r3, #8]
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3360      	adds	r3, #96	; 0x60
 8006122:	461a      	mov	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	4b08      	ldr	r3, [pc, #32]	; (8006154 <LL_ADC_SetOffset+0x44>)
 8006132:	4013      	ands	r3, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	4313      	orrs	r3, r2
 8006140:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006148:	bf00      	nop
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	03fff000 	.word	0x03fff000

08006158 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3360      	adds	r3, #96	; 0x60
 8006166:	461a      	mov	r2, r3
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3360      	adds	r3, #96	; 0x60
 8006194:	461a      	mov	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	431a      	orrs	r2, r3
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3330      	adds	r3, #48	; 0x30
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	f003 030c 	and.w	r3, r3, #12
 80061fc:	4413      	add	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 031f 	and.w	r3, r3, #31
 800620a:	211f      	movs	r1, #31
 800620c:	fa01 f303 	lsl.w	r3, r1, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	0e9b      	lsrs	r3, r3, #26
 8006218:	f003 011f 	and.w	r1, r3, #31
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	fa01 f303 	lsl.w	r3, r1, r3
 8006226:	431a      	orrs	r2, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800622c:	bf00      	nop
 800622e:	371c      	adds	r7, #28
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3314      	adds	r3, #20
 8006248:	461a      	mov	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	0e5b      	lsrs	r3, r3, #25
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	4413      	add	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	0d1b      	lsrs	r3, r3, #20
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2107      	movs	r1, #7
 8006266:	fa01 f303 	lsl.w	r3, r1, r3
 800626a:	43db      	mvns	r3, r3
 800626c:	401a      	ands	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	0d1b      	lsrs	r3, r3, #20
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	fa01 f303 	lsl.w	r3, r1, r3
 800627c:	431a      	orrs	r2, r3
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a8:	43db      	mvns	r3, r3
 80062aa:	401a      	ands	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f003 0318 	and.w	r3, r3, #24
 80062b2:	4908      	ldr	r1, [pc, #32]	; (80062d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80062b4:	40d9      	lsrs	r1, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	400b      	ands	r3, r1
 80062ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062be:	431a      	orrs	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	0007ffff 	.word	0x0007ffff

080062d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80062e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6093      	str	r3, [r2, #8]
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800630c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006310:	d101      	bne.n	8006316 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006360:	d101      	bne.n	8006366 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006388:	f043 0201 	orr.w	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80063b0:	f043 0202 	orr.w	r2, r3, #2
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <LL_ADC_IsEnabled+0x18>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <LL_ADC_IsEnabled+0x1a>
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d101      	bne.n	8006402 <LL_ADC_IsDisableOngoing+0x18>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <LL_ADC_IsDisableOngoing+0x1a>
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006424:	f043 0204 	orr.w	r2, r3, #4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b04      	cmp	r3, #4
 800644a:	d101      	bne.n	8006450 <LL_ADC_REG_IsConversionOngoing+0x18>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	2b08      	cmp	r3, #8
 8006470:	d101      	bne.n	8006476 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006490:	2300      	movs	r3, #0
 8006492:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e12c      	b.n	80066f8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d109      	bne.n	80064c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7fe fc57 	bl	8004d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff ff19 	bl	80062fc <LL_ADC_IsDeepPowerDownEnabled>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff feff 	bl	80062d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff ff34 	bl	800634c <LL_ADC_IsInternalRegulatorEnabled>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d115      	bne.n	8006516 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff ff18 	bl	8006324 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064f4:	4b82      	ldr	r3, [pc, #520]	; (8006700 <HAL_ADC_Init+0x27c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	4a82      	ldr	r2, [pc, #520]	; (8006704 <HAL_ADC_Init+0x280>)
 80064fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006500:	099b      	lsrs	r3, r3, #6
 8006502:	3301      	adds	r3, #1
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006508:	e002      	b.n	8006510 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	3b01      	subs	r3, #1
 800650e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f9      	bne.n	800650a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff ff16 	bl	800634c <LL_ADC_IsInternalRegulatorEnabled>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10d      	bne.n	8006542 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	f043 0210 	orr.w	r2, r3, #16
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006536:	f043 0201 	orr.w	r2, r3, #1
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ff76 	bl	8006438 <LL_ADC_REG_IsConversionOngoing>
 800654c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	f040 80c5 	bne.w	80066e6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 80c1 	bne.w	80066e6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006568:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800656c:	f043 0202 	orr.w	r2, r3, #2
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff ff23 	bl	80063c4 <LL_ADC_IsEnabled>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10b      	bne.n	800659c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006584:	4860      	ldr	r0, [pc, #384]	; (8006708 <HAL_ADC_Init+0x284>)
 8006586:	f7ff ff1d 	bl	80063c4 <LL_ADC_IsEnabled>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	4619      	mov	r1, r3
 8006596:	485d      	ldr	r0, [pc, #372]	; (800670c <HAL_ADC_Init+0x288>)
 8006598:	f7ff fd86 	bl	80060a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7e5b      	ldrb	r3, [r3, #25]
 80065a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80065ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80065b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80065bc:	4313      	orrs	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d106      	bne.n	80065d8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	3b01      	subs	r3, #1
 80065d0:	045b      	lsls	r3, r3, #17
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	4b45      	ldr	r3, [pc, #276]	; (8006710 <HAL_ADC_Init+0x28c>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	69b9      	ldr	r1, [r7, #24]
 8006604:	430b      	orrs	r3, r1
 8006606:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff ff13 	bl	8006438 <LL_ADC_REG_IsConversionOngoing>
 8006612:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff ff20 	bl	800645e <LL_ADC_INJ_IsConversionOngoing>
 800661e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d13d      	bne.n	80066a2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d13a      	bne.n	80066a2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006630:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006638:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800663a:	4313      	orrs	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006648:	f023 0302 	bic.w	r3, r3, #2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	69b9      	ldr	r1, [r7, #24]
 8006652:	430b      	orrs	r3, r1
 8006654:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800665c:	2b01      	cmp	r3, #1
 800665e:	d118      	bne.n	8006692 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800666a:	f023 0304 	bic.w	r3, r3, #4
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800667c:	4311      	orrs	r1, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006682:	430a      	orrs	r2, r1
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	611a      	str	r2, [r3, #16]
 8006690:	e007      	b.n	80066a2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d10c      	bne.n	80066c4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	f023 010f 	bic.w	r1, r3, #15
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	1e5a      	subs	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	631a      	str	r2, [r3, #48]	; 0x30
 80066c2:	e007      	b.n	80066d4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 020f 	bic.w	r2, r2, #15
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d8:	f023 0303 	bic.w	r3, r3, #3
 80066dc:	f043 0201 	orr.w	r2, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
 80066e4:	e007      	b.n	80066f6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f043 0210 	orr.w	r2, r3, #16
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80066f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	2000001c 	.word	0x2000001c
 8006704:	053e2d63 	.word	0x053e2d63
 8006708:	50040000 	.word	0x50040000
 800670c:	50040300 	.word	0x50040300
 8006710:	fff0c007 	.word	0xfff0c007

08006714 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fe87 	bl	8006438 <LL_ADC_REG_IsConversionOngoing>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d167      	bne.n	8006800 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_ADC_Start_DMA+0x2a>
 800673a:	2302      	movs	r3, #2
 800673c:	e063      	b.n	8006806 <HAL_ADC_Start_DMA+0xf2>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fc66 	bl	8007018 <ADC_Enable>
 800674c:	4603      	mov	r3, r0
 800674e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d14f      	bne.n	80067f6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d006      	beq.n	8006784 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677a:	f023 0206 	bic.w	r2, r3, #6
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	659a      	str	r2, [r3, #88]	; 0x58
 8006782:	e002      	b.n	800678a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678e:	4a20      	ldr	r2, [pc, #128]	; (8006810 <HAL_ADC_Start_DMA+0xfc>)
 8006790:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006796:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_ADC_Start_DMA+0x100>)
 8006798:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679e:	4a1e      	ldr	r2, [pc, #120]	; (8006818 <HAL_ADC_Start_DMA+0x104>)
 80067a0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	221c      	movs	r2, #28
 80067a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0210 	orr.w	r2, r2, #16
 80067c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0201 	orr.w	r2, r2, #1
 80067d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3340      	adds	r3, #64	; 0x40
 80067dc:	4619      	mov	r1, r3
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f001 f9ed 	bl	8007bc0 <HAL_DMA_Start_IT>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fe0e 	bl	8006410 <LL_ADC_REG_StartConversion>
 80067f4:	e006      	b.n	8006804 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80067fe:	e001      	b.n	8006804 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006800:	2302      	movs	r3, #2
 8006802:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	080071e3 	.word	0x080071e3
 8006814:	080072bb 	.word	0x080072bb
 8006818:	080072d7 	.word	0x080072d7

0800681c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b0b6      	sub	sp, #216	; 0xd8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_ADC_ConfigChannel+0x22>
 8006876:	2302      	movs	r3, #2
 8006878:	e3b9      	b.n	8006fee <HAL_ADC_ConfigChannel+0x796>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fdd6 	bl	8006438 <LL_ADC_REG_IsConversionOngoing>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	f040 839e 	bne.w	8006fd0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b05      	cmp	r3, #5
 800689a:	d824      	bhi.n	80068e6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	3b02      	subs	r3, #2
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d81b      	bhi.n	80068de <HAL_ADC_ConfigChannel+0x86>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <HAL_ADC_ConfigChannel+0x54>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068c5 	.word	0x080068c5
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	080068d5 	.word	0x080068d5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	220c      	movs	r2, #12
 80068c0:	605a      	str	r2, [r3, #4]
          break;
 80068c2:	e010      	b.n	80068e6 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2212      	movs	r2, #18
 80068c8:	605a      	str	r2, [r3, #4]
          break;
 80068ca:	e00c      	b.n	80068e6 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2218      	movs	r2, #24
 80068d0:	605a      	str	r2, [r3, #4]
          break;
 80068d2:	e008      	b.n	80068e6 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068da:	605a      	str	r2, [r3, #4]
          break;
 80068dc:	e003      	b.n	80068e6 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2206      	movs	r2, #6
 80068e2:	605a      	str	r2, [r3, #4]
          break;
 80068e4:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6859      	ldr	r1, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f7ff fc74 	bl	80061e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff fd9b 	bl	8006438 <LL_ADC_REG_IsConversionOngoing>
 8006902:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fda7 	bl	800645e <LL_ADC_INJ_IsConversionOngoing>
 8006910:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006914:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006918:	2b00      	cmp	r3, #0
 800691a:	f040 81a6 	bne.w	8006c6a <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800691e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006922:	2b00      	cmp	r3, #0
 8006924:	f040 81a1 	bne.w	8006c6a <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6819      	ldr	r1, [r3, #0]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	461a      	mov	r2, r3
 8006936:	f7ff fc7f 	bl	8006238 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	08db      	lsrs	r3, r3, #3
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b04      	cmp	r3, #4
 800695a:	d00a      	beq.n	8006972 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	6919      	ldr	r1, [r3, #16]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800696c:	f7ff fbd0 	bl	8006110 <LL_ADC_SetOffset>
 8006970:	e17b      	b.n	8006c6a <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fbed 	bl	8006158 <LL_ADC_GetOffsetChannel>
 800697e:	4603      	mov	r3, r0
 8006980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <HAL_ADC_ConfigChannel+0x146>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2100      	movs	r1, #0
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fbe2 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006994:	4603      	mov	r3, r0
 8006996:	0e9b      	lsrs	r3, r3, #26
 8006998:	f003 021f 	and.w	r2, r3, #31
 800699c:	e01e      	b.n	80069dc <HAL_ADC_ConfigChannel+0x184>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2100      	movs	r1, #0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff fbd7 	bl	8006158 <LL_ADC_GetOffsetChannel>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069b4:	fa93 f3a3 	rbit	r3, r3
 80069b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80069bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80069c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 80069cc:	2320      	movs	r3, #32
 80069ce:	e004      	b.n	80069da <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 80069d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069d4:	fab3 f383 	clz	r3, r3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d105      	bne.n	80069f4 <HAL_ADC_ConfigChannel+0x19c>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	0e9b      	lsrs	r3, r3, #26
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	e018      	b.n	8006a26 <HAL_ADC_ConfigChannel+0x1ce>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a00:	fa93 f3a3 	rbit	r3, r3
 8006a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006a08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006a10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8006a18:	2320      	movs	r3, #32
 8006a1a:	e004      	b.n	8006a26 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8006a1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a20:	fab3 f383 	clz	r3, r3
 8006a24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d106      	bne.n	8006a38 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fba6 	bl	8006184 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7ff fb8a 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <HAL_ADC_ConfigChannel+0x20c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2101      	movs	r1, #1
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff fb7f 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	0e9b      	lsrs	r3, r3, #26
 8006a5e:	f003 021f 	and.w	r2, r3, #31
 8006a62:	e01e      	b.n	8006aa2 <HAL_ADC_ConfigChannel+0x24a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2101      	movs	r1, #1
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7ff fb74 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a7a:	fa93 f3a3 	rbit	r3, r3
 8006a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8006a92:	2320      	movs	r3, #32
 8006a94:	e004      	b.n	8006aa0 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8006a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a9a:	fab3 f383 	clz	r3, r3
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d105      	bne.n	8006aba <HAL_ADC_ConfigChannel+0x262>
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	0e9b      	lsrs	r3, r3, #26
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	e018      	b.n	8006aec <HAL_ADC_ConfigChannel+0x294>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ac6:	fa93 f3a3 	rbit	r3, r3
 8006aca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006ace:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006ad6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8006ade:	2320      	movs	r3, #32
 8006ae0:	e004      	b.n	8006aec <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8006ae2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ae6:	fab3 f383 	clz	r3, r3
 8006aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d106      	bne.n	8006afe <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2200      	movs	r2, #0
 8006af6:	2101      	movs	r1, #1
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fb43 	bl	8006184 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2102      	movs	r1, #2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fb27 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <HAL_ADC_ConfigChannel+0x2d2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fb1c 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006b20:	4603      	mov	r3, r0
 8006b22:	0e9b      	lsrs	r3, r3, #26
 8006b24:	f003 021f 	and.w	r2, r3, #31
 8006b28:	e01e      	b.n	8006b68 <HAL_ADC_ConfigChannel+0x310>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2102      	movs	r1, #2
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fb11 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b40:	fa93 f3a3 	rbit	r3, r3
 8006b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8006b58:	2320      	movs	r3, #32
 8006b5a:	e004      	b.n	8006b66 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8006b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b60:	fab3 f383 	clz	r3, r3
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <HAL_ADC_ConfigChannel+0x328>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	0e9b      	lsrs	r3, r3, #26
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	e016      	b.n	8006bae <HAL_ADC_ConfigChannel+0x356>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b8c:	fa93 f3a3 	rbit	r3, r3
 8006b90:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	e004      	b.n	8006bae <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8006ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ba8:	fab3 f383 	clz	r3, r3
 8006bac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d106      	bne.n	8006bc0 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2102      	movs	r1, #2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fae2 	bl	8006184 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2103      	movs	r1, #3
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fac6 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <HAL_ADC_ConfigChannel+0x394>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2103      	movs	r1, #3
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff fabb 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006be2:	4603      	mov	r3, r0
 8006be4:	0e9b      	lsrs	r3, r3, #26
 8006be6:	f003 021f 	and.w	r2, r3, #31
 8006bea:	e017      	b.n	8006c1c <HAL_ADC_ConfigChannel+0x3c4>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2103      	movs	r1, #3
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff fab0 	bl	8006158 <LL_ADC_GetOffsetChannel>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bfe:	fa93 f3a3 	rbit	r3, r3
 8006c02:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c06:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8006c0e:	2320      	movs	r3, #32
 8006c10:	e003      	b.n	8006c1a <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8006c12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c14:	fab3 f383 	clz	r3, r3
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <HAL_ADC_ConfigChannel+0x3dc>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	0e9b      	lsrs	r3, r3, #26
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	e011      	b.n	8006c58 <HAL_ADC_ConfigChannel+0x400>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c3c:	fa93 f3a3 	rbit	r3, r3
 8006c40:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c44:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8006c4c:	2320      	movs	r3, #32
 8006c4e:	e003      	b.n	8006c58 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	fab3 f383 	clz	r3, r3
 8006c56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d106      	bne.n	8006c6a <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2200      	movs	r2, #0
 8006c62:	2103      	movs	r1, #3
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fa8d 	bl	8006184 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff fba8 	bl	80063c4 <LL_ADC_IsEnabled>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f040 8140 	bne.w	8006efc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f7ff fb01 	bl	8006290 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	4a8f      	ldr	r2, [pc, #572]	; (8006ed0 <HAL_ADC_ConfigChannel+0x678>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	f040 8131 	bne.w	8006efc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10b      	bne.n	8006cc2 <HAL_ADC_ConfigChannel+0x46a>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	0e9b      	lsrs	r3, r3, #26
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	bf94      	ite	ls
 8006cba:	2301      	movls	r3, #1
 8006cbc:	2300      	movhi	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	e019      	b.n	8006cf6 <HAL_ADC_ConfigChannel+0x49e>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cca:	fa93 f3a3 	rbit	r3, r3
 8006cce:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8006cda:	2320      	movs	r3, #32
 8006cdc:	e003      	b.n	8006ce6 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8006cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce0:	fab3 f383 	clz	r3, r3
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	f003 031f 	and.w	r3, r3, #31
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	bf94      	ite	ls
 8006cf0:	2301      	movls	r3, #1
 8006cf2:	2300      	movhi	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d079      	beq.n	8006dee <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d107      	bne.n	8006d16 <HAL_ADC_ConfigChannel+0x4be>
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	0e9b      	lsrs	r3, r3, #26
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	069b      	lsls	r3, r3, #26
 8006d10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d14:	e015      	b.n	8006d42 <HAL_ADC_ConfigChannel+0x4ea>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1e:	fa93 f3a3 	rbit	r3, r3
 8006d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d26:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8006d2e:	2320      	movs	r3, #32
 8006d30:	e003      	b.n	8006d3a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8006d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d34:	fab3 f383 	clz	r3, r3
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	069b      	lsls	r3, r3, #26
 8006d3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <HAL_ADC_ConfigChannel+0x50a>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	0e9b      	lsrs	r3, r3, #26
 8006d54:	3301      	adds	r3, #1
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d60:	e017      	b.n	8006d92 <HAL_ADC_ConfigChannel+0x53a>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d6a:	fa93 f3a3 	rbit	r3, r3
 8006d6e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d72:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8006d7a:	2320      	movs	r3, #32
 8006d7c:	e003      	b.n	8006d86 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8006d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d80:	fab3 f383 	clz	r3, r3
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	3301      	adds	r3, #1
 8006d88:	f003 031f 	and.w	r3, r3, #31
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d92:	ea42 0103 	orr.w	r1, r2, r3
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <HAL_ADC_ConfigChannel+0x560>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	0e9b      	lsrs	r3, r3, #26
 8006da8:	3301      	adds	r3, #1
 8006daa:	f003 021f 	and.w	r2, r3, #31
 8006dae:	4613      	mov	r3, r2
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	4413      	add	r3, r2
 8006db4:	051b      	lsls	r3, r3, #20
 8006db6:	e018      	b.n	8006dea <HAL_ADC_ConfigChannel+0x592>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	fa93 f3a3 	rbit	r3, r3
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	e003      	b.n	8006ddc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8006dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd6:	fab3 f383 	clz	r3, r3
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	3301      	adds	r3, #1
 8006dde:	f003 021f 	and.w	r2, r3, #31
 8006de2:	4613      	mov	r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006dea:	430b      	orrs	r3, r1
 8006dec:	e081      	b.n	8006ef2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d107      	bne.n	8006e0a <HAL_ADC_ConfigChannel+0x5b2>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	0e9b      	lsrs	r3, r3, #26
 8006e00:	3301      	adds	r3, #1
 8006e02:	069b      	lsls	r3, r3, #26
 8006e04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006e08:	e015      	b.n	8006e36 <HAL_ADC_ConfigChannel+0x5de>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	fa93 f3a3 	rbit	r3, r3
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8006e22:	2320      	movs	r3, #32
 8006e24:	e003      	b.n	8006e2e <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	fab3 f383 	clz	r3, r3
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	3301      	adds	r3, #1
 8006e30:	069b      	lsls	r3, r3, #26
 8006e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <HAL_ADC_ConfigChannel+0x5fe>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	0e9b      	lsrs	r3, r3, #26
 8006e48:	3301      	adds	r3, #1
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	2101      	movs	r1, #1
 8006e50:	fa01 f303 	lsl.w	r3, r1, r3
 8006e54:	e017      	b.n	8006e86 <HAL_ADC_ConfigChannel+0x62e>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	fa93 f3a3 	rbit	r3, r3
 8006e62:	61fb      	str	r3, [r7, #28]
  return result;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8006e6e:	2320      	movs	r3, #32
 8006e70:	e003      	b.n	8006e7a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	fab3 f383 	clz	r3, r3
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	2101      	movs	r1, #1
 8006e82:	fa01 f303 	lsl.w	r3, r1, r3
 8006e86:	ea42 0103 	orr.w	r1, r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10d      	bne.n	8006eb2 <HAL_ADC_ConfigChannel+0x65a>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	0e9b      	lsrs	r3, r3, #26
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f003 021f 	and.w	r2, r3, #31
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	3b1e      	subs	r3, #30
 8006eaa:	051b      	lsls	r3, r3, #20
 8006eac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006eb0:	e01e      	b.n	8006ef0 <HAL_ADC_ConfigChannel+0x698>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	fa93 f3a3 	rbit	r3, r3
 8006ebe:	613b      	str	r3, [r7, #16]
  return result;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006eca:	2320      	movs	r3, #32
 8006ecc:	e006      	b.n	8006edc <HAL_ADC_ConfigChannel+0x684>
 8006ece:	bf00      	nop
 8006ed0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	fab3 f383 	clz	r3, r3
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	3301      	adds	r3, #1
 8006ede:	f003 021f 	and.w	r2, r3, #31
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3b1e      	subs	r3, #30
 8006eea:	051b      	lsls	r3, r3, #20
 8006eec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	6892      	ldr	r2, [r2, #8]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	f7ff f99e 	bl	8006238 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	4b3d      	ldr	r3, [pc, #244]	; (8006ff8 <HAL_ADC_ConfigChannel+0x7a0>)
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d06c      	beq.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f08:	483c      	ldr	r0, [pc, #240]	; (8006ffc <HAL_ADC_ConfigChannel+0x7a4>)
 8006f0a:	f7ff f8f3 	bl	80060f4 <LL_ADC_GetCommonPathInternalCh>
 8006f0e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a3a      	ldr	r2, [pc, #232]	; (8007000 <HAL_ADC_ConfigChannel+0x7a8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d127      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d121      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a35      	ldr	r2, [pc, #212]	; (8007004 <HAL_ADC_ConfigChannel+0x7ac>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d157      	bne.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	482f      	ldr	r0, [pc, #188]	; (8006ffc <HAL_ADC_ConfigChannel+0x7a4>)
 8006f3e:	f7ff f8c6 	bl	80060ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f42:	4b31      	ldr	r3, [pc, #196]	; (8007008 <HAL_ADC_ConfigChannel+0x7b0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	099b      	lsrs	r3, r3, #6
 8006f48:	4a30      	ldr	r2, [pc, #192]	; (800700c <HAL_ADC_ConfigChannel+0x7b4>)
 8006f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4e:	099b      	lsrs	r3, r3, #6
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	4613      	mov	r3, r2
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006f5c:	e002      	b.n	8006f64 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f9      	bne.n	8006f5e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006f6a:	e03a      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a27      	ldr	r2, [pc, #156]	; (8007010 <HAL_ADC_ConfigChannel+0x7b8>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d113      	bne.n	8006f9e <HAL_ADC_ConfigChannel+0x746>
 8006f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10d      	bne.n	8006f9e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <HAL_ADC_ConfigChannel+0x7ac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d12a      	bne.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f94:	4619      	mov	r1, r3
 8006f96:	4819      	ldr	r0, [pc, #100]	; (8006ffc <HAL_ADC_ConfigChannel+0x7a4>)
 8006f98:	f7ff f899 	bl	80060ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006f9c:	e021      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1c      	ldr	r2, [pc, #112]	; (8007014 <HAL_ADC_ConfigChannel+0x7bc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d11c      	bne.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d116      	bne.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a12      	ldr	r2, [pc, #72]	; (8007004 <HAL_ADC_ConfigChannel+0x7ac>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d111      	bne.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	480c      	ldr	r0, [pc, #48]	; (8006ffc <HAL_ADC_ConfigChannel+0x7a4>)
 8006fca:	f7ff f880 	bl	80060ce <LL_ADC_SetCommonPathInternalCh>
 8006fce:	e008      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd4:	f043 0220 	orr.w	r2, r3, #32
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006fea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	37d8      	adds	r7, #216	; 0xd8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	80080000 	.word	0x80080000
 8006ffc:	50040300 	.word	0x50040300
 8007000:	c7520000 	.word	0xc7520000
 8007004:	50040000 	.word	0x50040000
 8007008:	2000001c 	.word	0x2000001c
 800700c:	053e2d63 	.word	0x053e2d63
 8007010:	cb840000 	.word	0xcb840000
 8007014:	80000001 	.word	0x80000001

08007018 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007020:	2300      	movs	r3, #0
 8007022:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff f9cb 	bl	80063c4 <LL_ADC_IsEnabled>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d169      	bne.n	8007108 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	4b36      	ldr	r3, [pc, #216]	; (8007114 <ADC_Enable+0xfc>)
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00d      	beq.n	800705e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007046:	f043 0210 	orr.w	r2, r3, #16
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	f043 0201 	orr.w	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e055      	b.n	800710a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff f986 	bl	8006374 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007068:	482b      	ldr	r0, [pc, #172]	; (8007118 <ADC_Enable+0x100>)
 800706a:	f7ff f843 	bl	80060f4 <LL_ADC_GetCommonPathInternalCh>
 800706e:	4603      	mov	r3, r0
 8007070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d013      	beq.n	80070a0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007078:	4b28      	ldr	r3, [pc, #160]	; (800711c <ADC_Enable+0x104>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	099b      	lsrs	r3, r3, #6
 800707e:	4a28      	ldr	r2, [pc, #160]	; (8007120 <ADC_Enable+0x108>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	099b      	lsrs	r3, r3, #6
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	4613      	mov	r3, r2
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007092:	e002      	b.n	800709a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	3b01      	subs	r3, #1
 8007098:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1f9      	bne.n	8007094 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80070a0:	f7fe ffd2 	bl	8006048 <HAL_GetTick>
 80070a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070a6:	e028      	b.n	80070fa <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff f989 	bl	80063c4 <LL_ADC_IsEnabled>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f7ff f959 	bl	8006374 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80070c2:	f7fe ffc1 	bl	8006048 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d914      	bls.n	80070fa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d00d      	beq.n	80070fa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	f043 0210 	orr.w	r2, r3, #16
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ee:	f043 0201 	orr.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e007      	b.n	800710a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b01      	cmp	r3, #1
 8007106:	d1cf      	bne.n	80070a8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	8000003f 	.word	0x8000003f
 8007118:	50040300 	.word	0x50040300
 800711c:	2000001c 	.word	0x2000001c
 8007120:	053e2d63 	.word	0x053e2d63

08007124 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff f95a 	bl	80063ea <LL_ADC_IsDisableOngoing>
 8007136:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff f941 	bl	80063c4 <LL_ADC_IsEnabled>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d047      	beq.n	80071d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d144      	bne.n	80071d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f003 030d 	and.w	r3, r3, #13
 8007158:	2b01      	cmp	r3, #1
 800715a:	d10c      	bne.n	8007176 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff f91b 	bl	800639c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2203      	movs	r2, #3
 800716c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800716e:	f7fe ff6b 	bl	8006048 <HAL_GetTick>
 8007172:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007174:	e029      	b.n	80071ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	f043 0210 	orr.w	r2, r3, #16
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007186:	f043 0201 	orr.w	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e023      	b.n	80071da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007192:	f7fe ff59 	bl	8006048 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d914      	bls.n	80071ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00d      	beq.n	80071ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b2:	f043 0210 	orr.w	r2, r3, #16
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071be:	f043 0201 	orr.w	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e007      	b.n	80071da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1dc      	bne.n	8007192 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d14b      	bne.n	8007294 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d021      	beq.n	800725a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe ffcd 	bl	80061ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d032      	beq.n	800728c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d12b      	bne.n	800728c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11f      	bne.n	800728c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007250:	f043 0201 	orr.w	r2, r3, #1
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	655a      	str	r2, [r3, #84]	; 0x54
 8007258:	e018      	b.n	800728c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d111      	bne.n	800728c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007284:	f043 0201 	orr.w	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fac5 	bl	800681c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007292:	e00e      	b.n	80072b2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007298:	f003 0310 	and.w	r3, r3, #16
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7ff facf 	bl	8006844 <HAL_ADC_ErrorCallback>
}
 80072a6:	e004      	b.n	80072b2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff fab1 	bl	8006830 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f4:	f043 0204 	orr.w	r2, r3, #4
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff faa1 	bl	8006844 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <LL_ADC_StartCalibration>:
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800731c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007326:	4313      	orrs	r3, r2
 8007328:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	609a      	str	r2, [r3, #8]
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <LL_ADC_IsCalibrationOnGoing>:
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800734c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007350:	d101      	bne.n	8007356 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800736e:	2300      	movs	r3, #0
 8007370:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_ADCEx_Calibration_Start+0x1c>
 800737c:	2302      	movs	r3, #2
 800737e:	e04d      	b.n	800741c <HAL_ADCEx_Calibration_Start+0xb8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff fecb 	bl	8007124 <ADC_Disable>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d136      	bne.n	8007406 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80073a0:	f023 0302 	bic.w	r3, r3, #2
 80073a4:	f043 0202 	orr.w	r2, r3, #2
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6839      	ldr	r1, [r7, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff ffa9 	bl	800730a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80073b8:	e014      	b.n	80073e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	3301      	adds	r3, #1
 80073be:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80073c6:	d30d      	bcc.n	80073e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073cc:	f023 0312 	bic.w	r3, r3, #18
 80073d0:	f043 0210 	orr.w	r2, r3, #16
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e01b      	b.n	800741c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff ffa7 	bl	800733c <LL_ADC_IsCalibrationOnGoing>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e2      	bne.n	80073ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f8:	f023 0303 	bic.w	r3, r3, #3
 80073fc:	f043 0201 	orr.w	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
 8007404:	e005      	b.n	8007412 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740a:	f043 0210 	orr.w	r2, r3, #16
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007434:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <__NVIC_SetPriorityGrouping+0x44>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007440:	4013      	ands	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800744c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007456:	4a04      	ldr	r2, [pc, #16]	; (8007468 <__NVIC_SetPriorityGrouping+0x44>)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	60d3      	str	r3, [r2, #12]
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	e000ed00 	.word	0xe000ed00

0800746c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <__NVIC_GetPriorityGrouping+0x18>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	0a1b      	lsrs	r3, r3, #8
 8007476:	f003 0307 	and.w	r3, r3, #7
}
 800747a:	4618      	mov	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	e000ed00 	.word	0xe000ed00

08007488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007496:	2b00      	cmp	r3, #0
 8007498:	db0b      	blt.n	80074b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	f003 021f 	and.w	r2, r3, #31
 80074a0:	4907      	ldr	r1, [pc, #28]	; (80074c0 <__NVIC_EnableIRQ+0x38>)
 80074a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074a6:	095b      	lsrs	r3, r3, #5
 80074a8:	2001      	movs	r0, #1
 80074aa:	fa00 f202 	lsl.w	r2, r0, r2
 80074ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	e000e100 	.word	0xe000e100

080074c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	6039      	str	r1, [r7, #0]
 80074ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	db0a      	blt.n	80074ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	490c      	ldr	r1, [pc, #48]	; (8007510 <__NVIC_SetPriority+0x4c>)
 80074de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e2:	0112      	lsls	r2, r2, #4
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	440b      	add	r3, r1
 80074e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074ec:	e00a      	b.n	8007504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	4908      	ldr	r1, [pc, #32]	; (8007514 <__NVIC_SetPriority+0x50>)
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	3b04      	subs	r3, #4
 80074fc:	0112      	lsls	r2, r2, #4
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	440b      	add	r3, r1
 8007502:	761a      	strb	r2, [r3, #24]
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	e000e100 	.word	0xe000e100
 8007514:	e000ed00 	.word	0xe000ed00

08007518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007518:	b480      	push	{r7}
 800751a:	b089      	sub	sp, #36	; 0x24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f1c3 0307 	rsb	r3, r3, #7
 8007532:	2b04      	cmp	r3, #4
 8007534:	bf28      	it	cs
 8007536:	2304      	movcs	r3, #4
 8007538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	3304      	adds	r3, #4
 800753e:	2b06      	cmp	r3, #6
 8007540:	d902      	bls.n	8007548 <NVIC_EncodePriority+0x30>
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	3b03      	subs	r3, #3
 8007546:	e000      	b.n	800754a <NVIC_EncodePriority+0x32>
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	43da      	mvns	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	401a      	ands	r2, r3
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007560:	f04f 31ff 	mov.w	r1, #4294967295
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	fa01 f303 	lsl.w	r3, r1, r3
 800756a:	43d9      	mvns	r1, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007570:	4313      	orrs	r3, r2
         );
}
 8007572:	4618      	mov	r0, r3
 8007574:	3724      	adds	r7, #36	; 0x24
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3b01      	subs	r3, #1
 800758c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007590:	d301      	bcc.n	8007596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007592:	2301      	movs	r3, #1
 8007594:	e00f      	b.n	80075b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007596:	4a0a      	ldr	r2, [pc, #40]	; (80075c0 <SysTick_Config+0x40>)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3b01      	subs	r3, #1
 800759c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800759e:	210f      	movs	r1, #15
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	f7ff ff8e 	bl	80074c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <SysTick_Config+0x40>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <SysTick_Config+0x40>)
 80075b0:	2207      	movs	r2, #7
 80075b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	e000e010 	.word	0xe000e010

080075c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff ff29 	bl	8007424 <__NVIC_SetPriorityGrouping>
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	4603      	mov	r3, r0
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
 80075e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80075ec:	f7ff ff3e 	bl	800746c <__NVIC_GetPriorityGrouping>
 80075f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	6978      	ldr	r0, [r7, #20]
 80075f8:	f7ff ff8e 	bl	8007518 <NVIC_EncodePriority>
 80075fc:	4602      	mov	r2, r0
 80075fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007602:	4611      	mov	r1, r2
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff ff5d 	bl	80074c4 <__NVIC_SetPriority>
}
 800760a:	bf00      	nop
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b082      	sub	sp, #8
 8007616:	af00      	add	r7, sp, #0
 8007618:	4603      	mov	r3, r0
 800761a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800761c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff ff31 	bl	8007488 <__NVIC_EnableIRQ>
}
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b082      	sub	sp, #8
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff ffa2 	bl	8007580 <SysTick_Config>
 800763c:	4603      	mov	r3, r0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800764a:	f7fd ff21 	bl	8005490 <HAL_SYSTICK_Callback>
}
 800764e:	bf00      	nop
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e054      	b.n	8007710 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	7f5b      	ldrb	r3, [r3, #29]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d105      	bne.n	800767c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fd fbe4 	bl	8004e44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10c      	bne.n	80076a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a22      	ldr	r2, [pc, #136]	; (8007718 <HAL_CRC_Init+0xc4>)
 8007690:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0218 	bic.w	r2, r2, #24
 80076a0:	609a      	str	r2, [r3, #8]
 80076a2:	e00c      	b.n	80076be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6899      	ldr	r1, [r3, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	461a      	mov	r2, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f948 	bl	8007944 <HAL_CRCEx_Polynomial_Set>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e028      	b.n	8007710 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	795b      	ldrb	r3, [r3, #5]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295
 80076ce:	611a      	str	r2, [r3, #16]
 80076d0:	e004      	b.n	80076dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6912      	ldr	r2, [r2, #16]
 80076da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695a      	ldr	r2, [r3, #20]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	04c11db7 	.word	0x04c11db7

0800771c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2202      	movs	r2, #2
 8007730:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0201 	orr.w	r2, r2, #1
 8007740:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	2b03      	cmp	r3, #3
 8007748:	d006      	beq.n	8007758 <HAL_CRC_Calculate+0x3c>
 800774a:	2b03      	cmp	r3, #3
 800774c:	d829      	bhi.n	80077a2 <HAL_CRC_Calculate+0x86>
 800774e:	2b01      	cmp	r3, #1
 8007750:	d019      	beq.n	8007786 <HAL_CRC_Calculate+0x6a>
 8007752:	2b02      	cmp	r3, #2
 8007754:	d01e      	beq.n	8007794 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8007756:	e024      	b.n	80077a2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	e00a      	b.n	8007774 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	441a      	add	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	3301      	adds	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	429a      	cmp	r2, r3
 800777a:	d3f0      	bcc.n	800775e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	613b      	str	r3, [r7, #16]
      break;
 8007784:	e00e      	b.n	80077a4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f812 	bl	80077b4 <CRC_Handle_8>
 8007790:	6138      	str	r0, [r7, #16]
      break;
 8007792:	e007      	b.n	80077a4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 f899 	bl	80078d0 <CRC_Handle_16>
 800779e:	6138      	str	r0, [r7, #16]
      break;
 80077a0:	e000      	b.n	80077a4 <HAL_CRC_Calculate+0x88>
      break;
 80077a2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80077aa:	693b      	ldr	r3, [r7, #16]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b089      	sub	sp, #36	; 0x24
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80077c0:	2300      	movs	r3, #0
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	e023      	b.n	800780e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	4413      	add	r3, r2
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	3301      	adds	r3, #1
 80077d8:	68b9      	ldr	r1, [r7, #8]
 80077da:	440b      	add	r3, r1
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80077e0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	3302      	adds	r3, #2
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	440b      	add	r3, r1
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80077f0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	3303      	adds	r3, #3
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	440b      	add	r3, r1
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007804:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	3301      	adds	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	089b      	lsrs	r3, r3, #2
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	429a      	cmp	r2, r3
 8007816:	d3d6      	bcc.n	80077c6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d04d      	beq.n	80078be <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	2b01      	cmp	r3, #1
 800782a:	d107      	bne.n	800783c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	4413      	add	r3, r2
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	6812      	ldr	r2, [r2, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d116      	bne.n	8007874 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	b21a      	sxth	r2, r3
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	3301      	adds	r3, #1
 800785a:	68b9      	ldr	r1, [r7, #8]
 800785c:	440b      	add	r3, r1
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	b21b      	sxth	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b21b      	sxth	r3, r3
 8007866:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	8b7a      	ldrh	r2, [r7, #26]
 8007872:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d11f      	bne.n	80078be <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4413      	add	r3, r2
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b21a      	sxth	r2, r3
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	3301      	adds	r3, #1
 8007892:	68b9      	ldr	r1, [r7, #8]
 8007894:	440b      	add	r3, r1
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	b21b      	sxth	r3, r3
 800789a:	4313      	orrs	r3, r2
 800789c:	b21b      	sxth	r3, r3
 800789e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	8b7a      	ldrh	r2, [r7, #26]
 80078aa:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	3302      	adds	r3, #2
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4413      	add	r3, r2
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3724      	adds	r7, #36	; 0x24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80078dc:	2300      	movs	r3, #0
 80078de:	617b      	str	r3, [r7, #20]
 80078e0:	e013      	b.n	800790a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	041a      	lsls	r2, r3, #16
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	3302      	adds	r3, #2
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	440b      	add	r3, r1
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	4619      	mov	r1, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	3301      	adds	r3, #1
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	429a      	cmp	r2, r3
 8007912:	d3e6      	bcc.n	80078e2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	4413      	add	r3, r2
 800792c:	881a      	ldrh	r2, [r3, #0]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007950:	2300      	movs	r3, #0
 8007952:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007954:	231f      	movs	r3, #31
 8007956:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007958:	bf00      	nop
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1e5a      	subs	r2, r3, #1
 800795e:	613a      	str	r2, [r7, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <HAL_CRCEx_Polynomial_Set+0x34>
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f003 031f 	and.w	r3, r3, #31
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0f0      	beq.n	800795a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b18      	cmp	r3, #24
 800797c:	d846      	bhi.n	8007a0c <HAL_CRCEx_Polynomial_Set+0xc8>
 800797e:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <HAL_CRCEx_Polynomial_Set+0x40>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	08007a13 	.word	0x08007a13
 8007988:	08007a0d 	.word	0x08007a0d
 800798c:	08007a0d 	.word	0x08007a0d
 8007990:	08007a0d 	.word	0x08007a0d
 8007994:	08007a0d 	.word	0x08007a0d
 8007998:	08007a0d 	.word	0x08007a0d
 800799c:	08007a0d 	.word	0x08007a0d
 80079a0:	08007a0d 	.word	0x08007a0d
 80079a4:	08007a01 	.word	0x08007a01
 80079a8:	08007a0d 	.word	0x08007a0d
 80079ac:	08007a0d 	.word	0x08007a0d
 80079b0:	08007a0d 	.word	0x08007a0d
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	08007a0d 	.word	0x08007a0d
 80079bc:	08007a0d 	.word	0x08007a0d
 80079c0:	08007a0d 	.word	0x08007a0d
 80079c4:	080079f5 	.word	0x080079f5
 80079c8:	08007a0d 	.word	0x08007a0d
 80079cc:	08007a0d 	.word	0x08007a0d
 80079d0:	08007a0d 	.word	0x08007a0d
 80079d4:	08007a0d 	.word	0x08007a0d
 80079d8:	08007a0d 	.word	0x08007a0d
 80079dc:	08007a0d 	.word	0x08007a0d
 80079e0:	08007a0d 	.word	0x08007a0d
 80079e4:	080079e9 	.word	0x080079e9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	2b06      	cmp	r3, #6
 80079ec:	d913      	bls.n	8007a16 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80079f2:	e010      	b.n	8007a16 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b07      	cmp	r3, #7
 80079f8:	d90f      	bls.n	8007a1a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80079fe:	e00c      	b.n	8007a1a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2b0f      	cmp	r3, #15
 8007a04:	d90b      	bls.n	8007a1e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007a0a:	e008      	b.n	8007a1e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a10:	e006      	b.n	8007a20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a12:	bf00      	nop
 8007a14:	e004      	b.n	8007a20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a16:	bf00      	nop
 8007a18:	e002      	b.n	8007a20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a1a:	bf00      	nop
 8007a1c:	e000      	b.n	8007a20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a1e:	bf00      	nop
  }
  if (status == HAL_OK)
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10d      	bne.n	8007a42 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f023 0118 	bic.w	r1, r3, #24
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	371c      	adds	r7, #28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e098      	b.n	8007b94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	4b4d      	ldr	r3, [pc, #308]	; (8007ba0 <HAL_DMA_Init+0x150>)
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d80f      	bhi.n	8007a8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	4b4b      	ldr	r3, [pc, #300]	; (8007ba4 <HAL_DMA_Init+0x154>)
 8007a76:	4413      	add	r3, r2
 8007a78:	4a4b      	ldr	r2, [pc, #300]	; (8007ba8 <HAL_DMA_Init+0x158>)
 8007a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	009a      	lsls	r2, r3, #2
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a48      	ldr	r2, [pc, #288]	; (8007bac <HAL_DMA_Init+0x15c>)
 8007a8a:	641a      	str	r2, [r3, #64]	; 0x40
 8007a8c:	e00e      	b.n	8007aac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	4b46      	ldr	r3, [pc, #280]	; (8007bb0 <HAL_DMA_Init+0x160>)
 8007a96:	4413      	add	r3, r2
 8007a98:	4a43      	ldr	r2, [pc, #268]	; (8007ba8 <HAL_DMA_Init+0x158>)
 8007a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9e:	091b      	lsrs	r3, r3, #4
 8007aa0:	009a      	lsls	r2, r3, #2
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a42      	ldr	r2, [pc, #264]	; (8007bb4 <HAL_DMA_Init+0x164>)
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b06:	d039      	beq.n	8007b7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	4a27      	ldr	r2, [pc, #156]	; (8007bac <HAL_DMA_Init+0x15c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d11a      	bne.n	8007b48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007b12:	4b29      	ldr	r3, [pc, #164]	; (8007bb8 <HAL_DMA_Init+0x168>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1a:	f003 031c 	and.w	r3, r3, #28
 8007b1e:	210f      	movs	r1, #15
 8007b20:	fa01 f303 	lsl.w	r3, r1, r3
 8007b24:	43db      	mvns	r3, r3
 8007b26:	4924      	ldr	r1, [pc, #144]	; (8007bb8 <HAL_DMA_Init+0x168>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007b2c:	4b22      	ldr	r3, [pc, #136]	; (8007bb8 <HAL_DMA_Init+0x168>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6859      	ldr	r1, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b38:	f003 031c 	and.w	r3, r3, #28
 8007b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b40:	491d      	ldr	r1, [pc, #116]	; (8007bb8 <HAL_DMA_Init+0x168>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	600b      	str	r3, [r1, #0]
 8007b46:	e019      	b.n	8007b7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007b48:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <HAL_DMA_Init+0x16c>)
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b50:	f003 031c 	and.w	r3, r3, #28
 8007b54:	210f      	movs	r1, #15
 8007b56:	fa01 f303 	lsl.w	r3, r1, r3
 8007b5a:	43db      	mvns	r3, r3
 8007b5c:	4917      	ldr	r1, [pc, #92]	; (8007bbc <HAL_DMA_Init+0x16c>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007b62:	4b16      	ldr	r3, [pc, #88]	; (8007bbc <HAL_DMA_Init+0x16c>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6859      	ldr	r1, [r3, #4]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6e:	f003 031c 	and.w	r3, r3, #28
 8007b72:	fa01 f303 	lsl.w	r3, r1, r3
 8007b76:	4911      	ldr	r1, [pc, #68]	; (8007bbc <HAL_DMA_Init+0x16c>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	40020407 	.word	0x40020407
 8007ba4:	bffdfff8 	.word	0xbffdfff8
 8007ba8:	cccccccd 	.word	0xcccccccd
 8007bac:	40020000 	.word	0x40020000
 8007bb0:	bffdfbf8 	.word	0xbffdfbf8
 8007bb4:	40020400 	.word	0x40020400
 8007bb8:	400200a8 	.word	0x400200a8
 8007bbc:	400204a8 	.word	0x400204a8

08007bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_DMA_Start_IT+0x20>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e04b      	b.n	8007c78 <HAL_DMA_Start_IT+0xb8>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d13a      	bne.n	8007c6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0201 	bic.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	68b9      	ldr	r1, [r7, #8]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 f95f 	bl	8007edc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d008      	beq.n	8007c38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 020e 	orr.w	r2, r2, #14
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	e00f      	b.n	8007c58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0204 	bic.w	r2, r2, #4
 8007c46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 020a 	orr.w	r2, r2, #10
 8007c56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	e005      	b.n	8007c76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c72:	2302      	movs	r3, #2
 8007c74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d008      	beq.n	8007caa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e022      	b.n	8007cf0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 020e 	bic.w	r2, r2, #14
 8007cb8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0201 	bic.w	r2, r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cce:	f003 021c 	and.w	r2, r3, #28
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8007cdc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d005      	beq.n	8007d20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2204      	movs	r2, #4
 8007d18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	73fb      	strb	r3, [r7, #15]
 8007d1e:	e029      	b.n	8007d74 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 020e 	bic.w	r2, r2, #14
 8007d2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d44:	f003 021c 	and.w	r2, r3, #28
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d52:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
    }
  }
  return status;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9a:	f003 031c 	and.w	r3, r3, #28
 8007d9e:	2204      	movs	r2, #4
 8007da0:	409a      	lsls	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4013      	ands	r3, r2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d026      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x7a>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d021      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d107      	bne.n	8007dd2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0204 	bic.w	r2, r2, #4
 8007dd0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	f003 021c 	and.w	r2, r3, #28
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	2104      	movs	r1, #4
 8007de0:	fa01 f202 	lsl.w	r2, r1, r2
 8007de4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d071      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007df6:	e06c      	b.n	8007ed2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfc:	f003 031c 	and.w	r3, r3, #28
 8007e00:	2202      	movs	r2, #2
 8007e02:	409a      	lsls	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4013      	ands	r3, r2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d02e      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xec>
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d029      	beq.n	8007e6a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10b      	bne.n	8007e3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 020a 	bic.w	r2, r2, #10
 8007e32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e40:	f003 021c 	and.w	r2, r3, #28
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	2102      	movs	r1, #2
 8007e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d038      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007e68:	e033      	b.n	8007ed2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	f003 031c 	and.w	r3, r3, #28
 8007e72:	2208      	movs	r2, #8
 8007e74:	409a      	lsls	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d02a      	beq.n	8007ed4 <HAL_DMA_IRQHandler+0x156>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d025      	beq.n	8007ed4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 020e 	bic.w	r2, r2, #14
 8007e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9c:	f003 021c 	and.w	r2, r3, #28
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d004      	beq.n	8007ed4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
}
 8007ed6:	3710      	adds	r7, #16
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	f003 021c 	and.w	r2, r3, #28
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8007efc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b10      	cmp	r3, #16
 8007f0c:	d108      	bne.n	8007f20 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f1e:	e007      	b.n	8007f30 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	60da      	str	r2, [r3, #12]
}
 8007f30:	bf00      	nop
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007f4a:	e154      	b.n	80081f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	2101      	movs	r1, #1
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	fa01 f303 	lsl.w	r3, r1, r3
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8146 	beq.w	80081f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d005      	beq.n	8007f7c <HAL_GPIO_Init+0x40>
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d130      	bne.n	8007fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	2203      	movs	r2, #3
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4013      	ands	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	091b      	lsrs	r3, r3, #4
 8007fc8:	f003 0201 	and.w	r2, r3, #1
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d017      	beq.n	800801a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffa:	43db      	mvns	r3, r3
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	4013      	ands	r3, r2
 8008000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d123      	bne.n	800806e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	08da      	lsrs	r2, r3, #3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3208      	adds	r2, #8
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f003 0307 	and.w	r3, r3, #7
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	220f      	movs	r2, #15
 800803e:	fa02 f303 	lsl.w	r3, r2, r3
 8008042:	43db      	mvns	r3, r3
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4013      	ands	r3, r2
 8008048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	08da      	lsrs	r2, r3, #3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3208      	adds	r2, #8
 8008068:	6939      	ldr	r1, [r7, #16]
 800806a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	2203      	movs	r2, #3
 800807a:	fa02 f303 	lsl.w	r3, r2, r3
 800807e:	43db      	mvns	r3, r3
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4013      	ands	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f003 0203 	and.w	r2, r3, #3
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	fa02 f303 	lsl.w	r3, r2, r3
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80a0 	beq.w	80081f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080b0:	4b58      	ldr	r3, [pc, #352]	; (8008214 <HAL_GPIO_Init+0x2d8>)
 80080b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b4:	4a57      	ldr	r2, [pc, #348]	; (8008214 <HAL_GPIO_Init+0x2d8>)
 80080b6:	f043 0301 	orr.w	r3, r3, #1
 80080ba:	6613      	str	r3, [r2, #96]	; 0x60
 80080bc:	4b55      	ldr	r3, [pc, #340]	; (8008214 <HAL_GPIO_Init+0x2d8>)
 80080be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	60bb      	str	r3, [r7, #8]
 80080c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80080c8:	4a53      	ldr	r2, [pc, #332]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	089b      	lsrs	r3, r3, #2
 80080ce:	3302      	adds	r3, #2
 80080d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f003 0303 	and.w	r3, r3, #3
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	220f      	movs	r2, #15
 80080e0:	fa02 f303 	lsl.w	r3, r2, r3
 80080e4:	43db      	mvns	r3, r3
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	4013      	ands	r3, r2
 80080ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080f2:	d019      	beq.n	8008128 <HAL_GPIO_Init+0x1ec>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a49      	ldr	r2, [pc, #292]	; (800821c <HAL_GPIO_Init+0x2e0>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d013      	beq.n	8008124 <HAL_GPIO_Init+0x1e8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a48      	ldr	r2, [pc, #288]	; (8008220 <HAL_GPIO_Init+0x2e4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00d      	beq.n	8008120 <HAL_GPIO_Init+0x1e4>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a47      	ldr	r2, [pc, #284]	; (8008224 <HAL_GPIO_Init+0x2e8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d007      	beq.n	800811c <HAL_GPIO_Init+0x1e0>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a46      	ldr	r2, [pc, #280]	; (8008228 <HAL_GPIO_Init+0x2ec>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d101      	bne.n	8008118 <HAL_GPIO_Init+0x1dc>
 8008114:	2304      	movs	r3, #4
 8008116:	e008      	b.n	800812a <HAL_GPIO_Init+0x1ee>
 8008118:	2307      	movs	r3, #7
 800811a:	e006      	b.n	800812a <HAL_GPIO_Init+0x1ee>
 800811c:	2303      	movs	r3, #3
 800811e:	e004      	b.n	800812a <HAL_GPIO_Init+0x1ee>
 8008120:	2302      	movs	r3, #2
 8008122:	e002      	b.n	800812a <HAL_GPIO_Init+0x1ee>
 8008124:	2301      	movs	r3, #1
 8008126:	e000      	b.n	800812a <HAL_GPIO_Init+0x1ee>
 8008128:	2300      	movs	r3, #0
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	f002 0203 	and.w	r2, r2, #3
 8008130:	0092      	lsls	r2, r2, #2
 8008132:	4093      	lsls	r3, r2
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800813a:	4937      	ldr	r1, [pc, #220]	; (8008218 <HAL_GPIO_Init+0x2dc>)
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	089b      	lsrs	r3, r3, #2
 8008140:	3302      	adds	r3, #2
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008148:	4b38      	ldr	r3, [pc, #224]	; (800822c <HAL_GPIO_Init+0x2f0>)
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	43db      	mvns	r3, r3
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4013      	ands	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800816c:	4a2f      	ldr	r2, [pc, #188]	; (800822c <HAL_GPIO_Init+0x2f0>)
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008172:	4b2e      	ldr	r3, [pc, #184]	; (800822c <HAL_GPIO_Init+0x2f0>)
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	43db      	mvns	r3, r3
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4013      	ands	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008196:	4a25      	ldr	r2, [pc, #148]	; (800822c <HAL_GPIO_Init+0x2f0>)
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800819c:	4b23      	ldr	r3, [pc, #140]	; (800822c <HAL_GPIO_Init+0x2f0>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	43db      	mvns	r3, r3
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	4013      	ands	r3, r2
 80081aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081c0:	4a1a      	ldr	r2, [pc, #104]	; (800822c <HAL_GPIO_Init+0x2f0>)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80081c6:	4b19      	ldr	r3, [pc, #100]	; (800822c <HAL_GPIO_Init+0x2f0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	43db      	mvns	r3, r3
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	4013      	ands	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80081ea:	4a10      	ldr	r2, [pc, #64]	; (800822c <HAL_GPIO_Init+0x2f0>)
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	3301      	adds	r3, #1
 80081f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	f47f aea3 	bne.w	8007f4c <HAL_GPIO_Init+0x10>
  }
}
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	40021000 	.word	0x40021000
 8008218:	40010000 	.word	0x40010000
 800821c:	48000400 	.word	0x48000400
 8008220:	48000800 	.word	0x48000800
 8008224:	48000c00 	.word	0x48000c00
 8008228:	48001000 	.word	0x48001000
 800822c:	40010400 	.word	0x40010400

08008230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	807b      	strh	r3, [r7, #2]
 800823c:	4613      	mov	r3, r2
 800823e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008240:	787b      	ldrb	r3, [r7, #1]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008246:	887a      	ldrh	r2, [r7, #2]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800824c:	e002      	b.n	8008254 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800824e:	887a      	ldrh	r2, [r7, #2]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008272:	887a      	ldrh	r2, [r7, #2]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4013      	ands	r3, r2
 8008278:	041a      	lsls	r2, r3, #16
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	43d9      	mvns	r1, r3
 800827e:	887b      	ldrh	r3, [r7, #2]
 8008280:	400b      	ands	r3, r1
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	619a      	str	r2, [r3, #24]
}
 8008288:	bf00      	nop
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e081      	b.n	80083aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fc fde2 	bl	8004e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2224      	movs	r2, #36	; 0x24
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0201 	bic.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80082e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d107      	bne.n	800830e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800830a:	609a      	str	r2, [r3, #8]
 800830c:	e006      	b.n	800831c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689a      	ldr	r2, [r3, #8]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800831a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d104      	bne.n	800832e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800832c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6812      	ldr	r2, [r2, #0]
 8008338:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800833c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008340:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008350:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691a      	ldr	r2, [r3, #16]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	430a      	orrs	r2, r1
 800836a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69d9      	ldr	r1, [r3, #28]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a1a      	ldr	r2, [r3, #32]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	607a      	str	r2, [r7, #4]
 80083be:	461a      	mov	r2, r3
 80083c0:	460b      	mov	r3, r1
 80083c2:	817b      	strh	r3, [r7, #10]
 80083c4:	4613      	mov	r3, r2
 80083c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b20      	cmp	r3, #32
 80083d2:	f040 80da 	bne.w	800858a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_I2C_Master_Transmit+0x30>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e0d3      	b.n	800858c <HAL_I2C_Master_Transmit+0x1d8>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083ec:	f7fd fe2c 	bl	8006048 <HAL_GetTick>
 80083f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	2319      	movs	r3, #25
 80083f8:	2201      	movs	r2, #1
 80083fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fdc4 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e0be      	b.n	800858c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2221      	movs	r2, #33	; 0x21
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2210      	movs	r2, #16
 800841a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	893a      	ldrh	r2, [r7, #8]
 800842e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843a:	b29b      	uxth	r3, r3
 800843c:	2bff      	cmp	r3, #255	; 0xff
 800843e:	d90e      	bls.n	800845e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	22ff      	movs	r2, #255	; 0xff
 8008444:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800844a:	b2da      	uxtb	r2, r3
 800844c:	8979      	ldrh	r1, [r7, #10]
 800844e:	4b51      	ldr	r3, [pc, #324]	; (8008594 <HAL_I2C_Master_Transmit+0x1e0>)
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 ffba 	bl	80093d0 <I2C_TransferConfig>
 800845c:	e06c      	b.n	8008538 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008462:	b29a      	uxth	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800846c:	b2da      	uxtb	r2, r3
 800846e:	8979      	ldrh	r1, [r7, #10]
 8008470:	4b48      	ldr	r3, [pc, #288]	; (8008594 <HAL_I2C_Master_Transmit+0x1e0>)
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 ffa9 	bl	80093d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800847e:	e05b      	b.n	8008538 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	6a39      	ldr	r1, [r7, #32]
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 fdc1 	bl	800900c <I2C_WaitOnTXISFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e07b      	b.n	800858c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	781a      	ldrb	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d034      	beq.n	8008538 <HAL_I2C_Master_Transmit+0x184>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d130      	bne.n	8008538 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	2200      	movs	r2, #0
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fd53 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e04d      	b.n	800858c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2bff      	cmp	r3, #255	; 0xff
 80084f8:	d90e      	bls.n	8008518 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	22ff      	movs	r2, #255	; 0xff
 80084fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008504:	b2da      	uxtb	r2, r3
 8008506:	8979      	ldrh	r1, [r7, #10]
 8008508:	2300      	movs	r3, #0
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 ff5d 	bl	80093d0 <I2C_TransferConfig>
 8008516:	e00f      	b.n	8008538 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008526:	b2da      	uxtb	r2, r3
 8008528:	8979      	ldrh	r1, [r7, #10]
 800852a:	2300      	movs	r3, #0
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 ff4c 	bl	80093d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d19e      	bne.n	8008480 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	6a39      	ldr	r1, [r7, #32]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 fda0 	bl	800908c <I2C_WaitOnSTOPFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e01a      	b.n	800858c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2220      	movs	r2, #32
 800855c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6859      	ldr	r1, [r3, #4]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <HAL_I2C_Master_Transmit+0x1e4>)
 800856a:	400b      	ands	r3, r1
 800856c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2220      	movs	r2, #32
 8008572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	e000      	b.n	800858c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800858a:	2302      	movs	r3, #2
  }
}
 800858c:	4618      	mov	r0, r3
 800858e:	3718      	adds	r7, #24
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	80002000 	.word	0x80002000
 8008598:	fe00e800 	.word	0xfe00e800

0800859c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b088      	sub	sp, #32
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	607a      	str	r2, [r7, #4]
 80085a6:	461a      	mov	r2, r3
 80085a8:	460b      	mov	r3, r1
 80085aa:	817b      	strh	r3, [r7, #10]
 80085ac:	4613      	mov	r3, r2
 80085ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	f040 80db 	bne.w	8008774 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_I2C_Master_Receive+0x30>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e0d4      	b.n	8008776 <HAL_I2C_Master_Receive+0x1da>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085d4:	f7fd fd38 	bl	8006048 <HAL_GetTick>
 80085d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	2319      	movs	r3, #25
 80085e0:	2201      	movs	r2, #1
 80085e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 fcd0 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e0bf      	b.n	8008776 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2222      	movs	r2, #34	; 0x22
 80085fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2210      	movs	r2, #16
 8008602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	893a      	ldrh	r2, [r7, #8]
 8008616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008622:	b29b      	uxth	r3, r3
 8008624:	2bff      	cmp	r3, #255	; 0xff
 8008626:	d90e      	bls.n	8008646 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	22ff      	movs	r2, #255	; 0xff
 800862c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008632:	b2da      	uxtb	r2, r3
 8008634:	8979      	ldrh	r1, [r7, #10]
 8008636:	4b52      	ldr	r3, [pc, #328]	; (8008780 <HAL_I2C_Master_Receive+0x1e4>)
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 fec6 	bl	80093d0 <I2C_TransferConfig>
 8008644:	e06d      	b.n	8008722 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864a:	b29a      	uxth	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008654:	b2da      	uxtb	r2, r3
 8008656:	8979      	ldrh	r1, [r7, #10]
 8008658:	4b49      	ldr	r3, [pc, #292]	; (8008780 <HAL_I2C_Master_Receive+0x1e4>)
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 feb5 	bl	80093d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008666:	e05c      	b.n	8008722 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	6a39      	ldr	r1, [r7, #32]
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fd49 	bl	8009104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e07c      	b.n	8008776 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	3b01      	subs	r3, #1
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d034      	beq.n	8008722 <HAL_I2C_Master_Receive+0x186>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d130      	bne.n	8008722 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	2200      	movs	r2, #0
 80086c8:	2180      	movs	r1, #128	; 0x80
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 fc5e 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e04d      	b.n	8008776 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086de:	b29b      	uxth	r3, r3
 80086e0:	2bff      	cmp	r3, #255	; 0xff
 80086e2:	d90e      	bls.n	8008702 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	22ff      	movs	r2, #255	; 0xff
 80086e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	8979      	ldrh	r1, [r7, #10]
 80086f2:	2300      	movs	r3, #0
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fe68 	bl	80093d0 <I2C_TransferConfig>
 8008700:	e00f      	b.n	8008722 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008710:	b2da      	uxtb	r2, r3
 8008712:	8979      	ldrh	r1, [r7, #10]
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f000 fe57 	bl	80093d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	d19d      	bne.n	8008668 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	6a39      	ldr	r1, [r7, #32]
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 fcab 	bl	800908c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e01a      	b.n	8008776 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2220      	movs	r2, #32
 8008746:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6859      	ldr	r1, [r3, #4]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <HAL_I2C_Master_Receive+0x1e8>)
 8008754:	400b      	ands	r3, r1
 8008756:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2220      	movs	r2, #32
 800875c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	e000      	b.n	8008776 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008774:	2302      	movs	r3, #2
  }
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	80002400 	.word	0x80002400
 8008784:	fe00e800 	.word	0xfe00e800

08008788 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af02      	add	r7, sp, #8
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	461a      	mov	r2, r3
 8008796:	4603      	mov	r3, r0
 8008798:	817b      	strh	r3, [r7, #10]
 800879a:	460b      	mov	r3, r1
 800879c:	813b      	strh	r3, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	f040 80f9 	bne.w	80089a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_I2C_Mem_Write+0x34>
 80087b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d105      	bne.n	80087c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0ed      	b.n	80089a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_I2C_Mem_Write+0x4e>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e0e6      	b.n	80089a4 <HAL_I2C_Mem_Write+0x21c>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087de:	f7fd fc33 	bl	8006048 <HAL_GetTick>
 80087e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2319      	movs	r3, #25
 80087ea:	2201      	movs	r2, #1
 80087ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fbcb 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e0d1      	b.n	80089a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2221      	movs	r2, #33	; 0x21
 8008804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2240      	movs	r2, #64	; 0x40
 800880c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a3a      	ldr	r2, [r7, #32]
 800881a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008828:	88f8      	ldrh	r0, [r7, #6]
 800882a:	893a      	ldrh	r2, [r7, #8]
 800882c:	8979      	ldrh	r1, [r7, #10]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	9301      	str	r3, [sp, #4]
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	4603      	mov	r3, r0
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 fadb 	bl	8008df4 <I2C_RequestMemoryWrite>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0a9      	b.n	80089a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	2bff      	cmp	r3, #255	; 0xff
 8008858:	d90e      	bls.n	8008878 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	22ff      	movs	r2, #255	; 0xff
 800885e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008864:	b2da      	uxtb	r2, r3
 8008866:	8979      	ldrh	r1, [r7, #10]
 8008868:	2300      	movs	r3, #0
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fdad 	bl	80093d0 <I2C_TransferConfig>
 8008876:	e00f      	b.n	8008898 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887c:	b29a      	uxth	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008886:	b2da      	uxtb	r2, r3
 8008888:	8979      	ldrh	r1, [r7, #10]
 800888a:	2300      	movs	r3, #0
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f000 fd9c 	bl	80093d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fbb5 	bl	800900c <I2C_WaitOnTXISFlagUntilTimeout>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e07b      	b.n	80089a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	781a      	ldrb	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d034      	beq.n	8008950 <HAL_I2C_Mem_Write+0x1c8>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d130      	bne.n	8008950 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	2200      	movs	r2, #0
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fb47 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e04d      	b.n	80089a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890c:	b29b      	uxth	r3, r3
 800890e:	2bff      	cmp	r3, #255	; 0xff
 8008910:	d90e      	bls.n	8008930 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	22ff      	movs	r2, #255	; 0xff
 8008916:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891c:	b2da      	uxtb	r2, r3
 800891e:	8979      	ldrh	r1, [r7, #10]
 8008920:	2300      	movs	r3, #0
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fd51 	bl	80093d0 <I2C_TransferConfig>
 800892e:	e00f      	b.n	8008950 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893e:	b2da      	uxtb	r2, r3
 8008940:	8979      	ldrh	r1, [r7, #10]
 8008942:	2300      	movs	r3, #0
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 fd40 	bl	80093d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d19e      	bne.n	8008898 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fb94 	bl	800908c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e01a      	b.n	80089a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2220      	movs	r2, #32
 8008974:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6859      	ldr	r1, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <HAL_I2C_Mem_Write+0x224>)
 8008982:	400b      	ands	r3, r1
 8008984:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2220      	movs	r2, #32
 800898a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	e000      	b.n	80089a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80089a2:	2302      	movs	r3, #2
  }
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	fe00e800 	.word	0xfe00e800

080089b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b088      	sub	sp, #32
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	4608      	mov	r0, r1
 80089ba:	4611      	mov	r1, r2
 80089bc:	461a      	mov	r2, r3
 80089be:	4603      	mov	r3, r0
 80089c0:	817b      	strh	r3, [r7, #10]
 80089c2:	460b      	mov	r3, r1
 80089c4:	813b      	strh	r3, [r7, #8]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	f040 80fd 	bne.w	8008bd2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <HAL_I2C_Mem_Read+0x34>
 80089de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d105      	bne.n	80089f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e0f1      	b.n	8008bd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <HAL_I2C_Mem_Read+0x4e>
 80089fa:	2302      	movs	r3, #2
 80089fc:	e0ea      	b.n	8008bd4 <HAL_I2C_Mem_Read+0x224>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a06:	f7fd fb1f 	bl	8006048 <HAL_GetTick>
 8008a0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	2319      	movs	r3, #25
 8008a12:	2201      	movs	r2, #1
 8008a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fab7 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e0d5      	b.n	8008bd4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2222      	movs	r2, #34	; 0x22
 8008a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2240      	movs	r2, #64	; 0x40
 8008a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a50:	88f8      	ldrh	r0, [r7, #6]
 8008a52:	893a      	ldrh	r2, [r7, #8]
 8008a54:	8979      	ldrh	r1, [r7, #10]
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	4603      	mov	r3, r0
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 fa1b 	bl	8008e9c <I2C_RequestMemoryRead>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e0ad      	b.n	8008bd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2bff      	cmp	r3, #255	; 0xff
 8008a80:	d90e      	bls.n	8008aa0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	8979      	ldrh	r1, [r7, #10]
 8008a90:	4b52      	ldr	r3, [pc, #328]	; (8008bdc <HAL_I2C_Mem_Read+0x22c>)
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 fc99 	bl	80093d0 <I2C_TransferConfig>
 8008a9e:	e00f      	b.n	8008ac0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	8979      	ldrh	r1, [r7, #10]
 8008ab2:	4b4a      	ldr	r3, [pc, #296]	; (8008bdc <HAL_I2C_Mem_Read+0x22c>)
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f000 fc88 	bl	80093d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2104      	movs	r1, #4
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fa5e 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e07c      	b.n	8008bd4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af6:	3b01      	subs	r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	3b01      	subs	r3, #1
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d034      	beq.n	8008b80 <HAL_I2C_Mem_Read+0x1d0>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d130      	bne.n	8008b80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	2200      	movs	r2, #0
 8008b26:	2180      	movs	r1, #128	; 0x80
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 fa2f 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e04d      	b.n	8008bd4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2bff      	cmp	r3, #255	; 0xff
 8008b40:	d90e      	bls.n	8008b60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	22ff      	movs	r2, #255	; 0xff
 8008b46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	8979      	ldrh	r1, [r7, #10]
 8008b50:	2300      	movs	r3, #0
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fc39 	bl	80093d0 <I2C_TransferConfig>
 8008b5e:	e00f      	b.n	8008b80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	8979      	ldrh	r1, [r7, #10]
 8008b72:	2300      	movs	r3, #0
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 fc28 	bl	80093d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d19a      	bne.n	8008ac0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fa7c 	bl	800908c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e01a      	b.n	8008bd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6859      	ldr	r1, [r3, #4]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <HAL_I2C_Mem_Read+0x230>)
 8008bb2:	400b      	ands	r3, r1
 8008bb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e000      	b.n	8008bd4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008bd2:	2302      	movs	r3, #2
  }
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	80002400 	.word	0x80002400
 8008be0:	fe00e800 	.word	0xfe00e800

08008be4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	607a      	str	r2, [r7, #4]
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b20      	cmp	r3, #32
 8008c02:	f040 80f1 	bne.w	8008de8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c14:	d101      	bne.n	8008c1a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8008c16:	2302      	movs	r3, #2
 8008c18:	e0e7      	b.n	8008dea <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_I2C_IsDeviceReady+0x44>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e0e0      	b.n	8008dea <HAL_I2C_IsDeviceReady+0x206>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2224      	movs	r2, #36	; 0x24
 8008c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d107      	bne.n	8008c56 <HAL_I2C_IsDeviceReady+0x72>
 8008c46:	897b      	ldrh	r3, [r7, #10]
 8008c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c54:	e004      	b.n	8008c60 <HAL_I2C_IsDeviceReady+0x7c>
 8008c56:	897b      	ldrh	r3, [r7, #10]
 8008c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c5c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	6812      	ldr	r2, [r2, #0]
 8008c64:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8008c66:	f7fd f9ef 	bl	8006048 <HAL_GetTick>
 8008c6a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	bf0c      	ite	eq
 8008c7a:	2301      	moveq	r3, #1
 8008c7c:	2300      	movne	r3, #0
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	f003 0310 	and.w	r3, r3, #16
 8008c8c:	2b10      	cmp	r3, #16
 8008c8e:	bf0c      	ite	eq
 8008c90:	2301      	moveq	r3, #1
 8008c92:	2300      	movne	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008c98:	e034      	b.n	8008d04 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca0:	d01a      	beq.n	8008cd8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ca2:	f7fd f9d1 	bl	8006048 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d302      	bcc.n	8008cb8 <HAL_I2C_IsDeviceReady+0xd4>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10f      	bne.n	8008cd8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc4:	f043 0220 	orr.w	r2, r3, #32
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e088      	b.n	8008dea <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	f003 0320 	and.w	r3, r3, #32
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	bf0c      	ite	eq
 8008ce6:	2301      	moveq	r3, #1
 8008ce8:	2300      	movne	r3, #0
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2301      	moveq	r3, #1
 8008cfe:	2300      	movne	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008d04:	7ffb      	ldrb	r3, [r7, #31]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d102      	bne.n	8008d10 <HAL_I2C_IsDeviceReady+0x12c>
 8008d0a:	7fbb      	ldrb	r3, [r7, #30]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0c4      	beq.n	8008c9a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b10      	cmp	r3, #16
 8008d1c:	d01a      	beq.n	8008d54 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2200      	movs	r2, #0
 8008d26:	2120      	movs	r1, #32
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 f92f 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e058      	b.n	8008dea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e04a      	b.n	8008dea <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2120      	movs	r1, #32
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 f914 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e03d      	b.n	8008dea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2210      	movs	r2, #16
 8008d74:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d118      	bne.n	8008db8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d94:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	2120      	movs	r1, #32
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f8f3 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e01c      	b.n	8008dea <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2220      	movs	r2, #32
 8008db6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	f63f af3b 	bhi.w	8008c3e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd4:	f043 0220 	orr.w	r2, r3, #32
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e000      	b.n	8008dea <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008de8:	2302      	movs	r3, #2
  }
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	4611      	mov	r1, r2
 8008e00:	461a      	mov	r2, r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	817b      	strh	r3, [r7, #10]
 8008e06:	460b      	mov	r3, r1
 8008e08:	813b      	strh	r3, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	8979      	ldrh	r1, [r7, #10]
 8008e14:	4b20      	ldr	r3, [pc, #128]	; (8008e98 <I2C_RequestMemoryWrite+0xa4>)
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 fad7 	bl	80093d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e22:	69fa      	ldr	r2, [r7, #28]
 8008e24:	69b9      	ldr	r1, [r7, #24]
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 f8f0 	bl	800900c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e02c      	b.n	8008e90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d105      	bne.n	8008e48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e3c:	893b      	ldrh	r3, [r7, #8]
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	629a      	str	r2, [r3, #40]	; 0x28
 8008e46:	e015      	b.n	8008e74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e48:	893b      	ldrh	r3, [r7, #8]
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	69b9      	ldr	r1, [r7, #24]
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f000 f8d6 	bl	800900c <I2C_WaitOnTXISFlagUntilTimeout>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e012      	b.n	8008e90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e6a:	893b      	ldrh	r3, [r7, #8]
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2180      	movs	r1, #128	; 0x80
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 f884 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	80002000 	.word	0x80002000

08008e9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	4608      	mov	r0, r1
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	817b      	strh	r3, [r7, #10]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	813b      	strh	r3, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008eb6:	88fb      	ldrh	r3, [r7, #6]
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	8979      	ldrh	r1, [r7, #10]
 8008ebc:	4b20      	ldr	r3, [pc, #128]	; (8008f40 <I2C_RequestMemoryRead+0xa4>)
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	68f8      	ldr	r0, [r7, #12]
 8008ec4:	f000 fa84 	bl	80093d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	69b9      	ldr	r1, [r7, #24]
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 f89d 	bl	800900c <I2C_WaitOnTXISFlagUntilTimeout>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e02c      	b.n	8008f36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008edc:	88fb      	ldrh	r3, [r7, #6]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d105      	bne.n	8008eee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ee2:	893b      	ldrh	r3, [r7, #8]
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	629a      	str	r2, [r3, #40]	; 0x28
 8008eec:	e015      	b.n	8008f1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008eee:	893b      	ldrh	r3, [r7, #8]
 8008ef0:	0a1b      	lsrs	r3, r3, #8
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	69b9      	ldr	r1, [r7, #24]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f883 	bl	800900c <I2C_WaitOnTXISFlagUntilTimeout>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e012      	b.n	8008f36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f10:	893b      	ldrh	r3, [r7, #8]
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2200      	movs	r2, #0
 8008f22:	2140      	movs	r1, #64	; 0x40
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f831 	bl	8008f8c <I2C_WaitOnFlagUntilTimeout>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d001      	beq.n	8008f34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e000      	b.n	8008f36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	80002000 	.word	0x80002000

08008f44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d103      	bne.n	8008f62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d007      	beq.n	8008f80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0201 	orr.w	r2, r2, #1
 8008f7e:	619a      	str	r2, [r3, #24]
  }
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	603b      	str	r3, [r7, #0]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f9c:	e022      	b.n	8008fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa4:	d01e      	beq.n	8008fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa6:	f7fd f84f 	bl	8006048 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d302      	bcc.n	8008fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d113      	bne.n	8008fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc0:	f043 0220 	orr.w	r2, r3, #32
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e00f      	b.n	8009004 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4013      	ands	r3, r2
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	bf0c      	ite	eq
 8008ff4:	2301      	moveq	r3, #1
 8008ff6:	2300      	movne	r3, #0
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d0cd      	beq.n	8008f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009018:	e02c      	b.n	8009074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 f8ea 	bl	80091f8 <I2C_IsErrorOccurred>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e02a      	b.n	8009084 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009034:	d01e      	beq.n	8009074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009036:	f7fd f807 	bl	8006048 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	d302      	bcc.n	800904c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d113      	bne.n	8009074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009050:	f043 0220 	orr.w	r2, r3, #32
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2220      	movs	r2, #32
 800905c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e007      	b.n	8009084 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b02      	cmp	r3, #2
 8009080:	d1cb      	bne.n	800901a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009098:	e028      	b.n	80090ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 f8aa 	bl	80091f8 <I2C_IsErrorOccurred>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e026      	b.n	80090fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ae:	f7fc ffcb 	bl	8006048 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d302      	bcc.n	80090c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d113      	bne.n	80090ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c8:	f043 0220 	orr.w	r2, r3, #32
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e007      	b.n	80090fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	f003 0320 	and.w	r3, r3, #32
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d1cf      	bne.n	800909a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009110:	e064      	b.n	80091dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68b9      	ldr	r1, [r7, #8]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 f86e 	bl	80091f8 <I2C_IsErrorOccurred>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e062      	b.n	80091ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f003 0320 	and.w	r3, r3, #32
 8009130:	2b20      	cmp	r3, #32
 8009132:	d138      	bne.n	80091a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b04      	cmp	r3, #4
 8009140:	d105      	bne.n	800914e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e04e      	b.n	80091ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	f003 0310 	and.w	r3, r3, #16
 8009158:	2b10      	cmp	r3, #16
 800915a:	d107      	bne.n	800916c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2210      	movs	r2, #16
 8009162:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2204      	movs	r2, #4
 8009168:	645a      	str	r2, [r3, #68]	; 0x44
 800916a:	e002      	b.n	8009172 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2220      	movs	r2, #32
 8009178:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6859      	ldr	r1, [r3, #4]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	4b1b      	ldr	r3, [pc, #108]	; (80091f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8009186:	400b      	ands	r3, r1
 8009188:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2220      	movs	r2, #32
 800918e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e022      	b.n	80091ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091a6:	f7fc ff4f 	bl	8006048 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d302      	bcc.n	80091bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10f      	bne.n	80091dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c0:	f043 0220 	orr.w	r2, r3, #32
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e007      	b.n	80091ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d193      	bne.n	8009112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	fe00e800 	.word	0xfe00e800

080091f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08a      	sub	sp, #40	; 0x28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b00      	cmp	r3, #0
 8009222:	d075      	beq.n	8009310 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2210      	movs	r2, #16
 800922a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800922c:	e056      	b.n	80092dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d052      	beq.n	80092dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009236:	f7fc ff07 	bl	8006048 <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	429a      	cmp	r2, r3
 8009244:	d302      	bcc.n	800924c <I2C_IsErrorOccurred+0x54>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d147      	bne.n	80092dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009256:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800925e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800926a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800926e:	d12e      	bne.n	80092ce <I2C_IsErrorOccurred+0xd6>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009276:	d02a      	beq.n	80092ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009278:	7cfb      	ldrb	r3, [r7, #19]
 800927a:	2b20      	cmp	r3, #32
 800927c:	d027      	beq.n	80092ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800928c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800928e:	f7fc fedb 	bl	8006048 <HAL_GetTick>
 8009292:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009294:	e01b      	b.n	80092ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009296:	f7fc fed7 	bl	8006048 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b19      	cmp	r3, #25
 80092a2:	d914      	bls.n	80092ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a8:	f043 0220 	orr.w	r2, r3, #32
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d1dc      	bne.n	8009296 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d003      	beq.n	80092f2 <I2C_IsErrorOccurred+0xfa>
 80092ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d09d      	beq.n	800922e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80092f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d103      	bne.n	8009302 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2220      	movs	r2, #32
 8009300:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	f043 0304 	orr.w	r3, r3, #4
 8009308:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00b      	beq.n	800933a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	f043 0301 	orr.w	r3, r3, #1
 8009328:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	f043 0308 	orr.w	r3, r3, #8
 800934a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	f043 0302 	orr.w	r3, r3, #2
 800936c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009376:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800937e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009382:	2b00      	cmp	r3, #0
 8009384:	d01c      	beq.n	80093c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f7ff fddc 	bl	8008f44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6859      	ldr	r1, [r3, #4]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <I2C_IsErrorOccurred+0x1d4>)
 8009398:	400b      	ands	r3, r1
 800939a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	431a      	orrs	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2220      	movs	r2, #32
 80093ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80093c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3728      	adds	r7, #40	; 0x28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	fe00e800 	.word	0xfe00e800

080093d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	607b      	str	r3, [r7, #4]
 80093da:	460b      	mov	r3, r1
 80093dc:	817b      	strh	r3, [r7, #10]
 80093de:	4613      	mov	r3, r2
 80093e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093e2:	897b      	ldrh	r3, [r7, #10]
 80093e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093e8:	7a7b      	ldrb	r3, [r7, #9]
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	0d5b      	lsrs	r3, r3, #21
 800940a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800940e:	4b08      	ldr	r3, [pc, #32]	; (8009430 <I2C_TransferConfig+0x60>)
 8009410:	430b      	orrs	r3, r1
 8009412:	43db      	mvns	r3, r3
 8009414:	ea02 0103 	and.w	r1, r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	430a      	orrs	r2, r1
 8009420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009422:	bf00      	nop
 8009424:	371c      	adds	r7, #28
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	03ff63ff 	.word	0x03ff63ff

08009434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b20      	cmp	r3, #32
 8009448:	d138      	bne.n	80094bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009450:	2b01      	cmp	r3, #1
 8009452:	d101      	bne.n	8009458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009454:	2302      	movs	r3, #2
 8009456:	e032      	b.n	80094be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2224      	movs	r2, #36	; 0x24
 8009464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0201 	bic.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6819      	ldr	r1, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0201 	orr.w	r2, r2, #1
 80094a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2220      	movs	r2, #32
 80094ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	e000      	b.n	80094be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094bc:	2302      	movs	r3, #2
  }
}
 80094be:	4618      	mov	r0, r3
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d139      	bne.n	8009554 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80094ea:	2302      	movs	r3, #2
 80094ec:	e033      	b.n	8009556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2224      	movs	r2, #36	; 0x24
 80094fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0201 	bic.w	r2, r2, #1
 800950c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800951c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	021b      	lsls	r3, r3, #8
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	4313      	orrs	r3, r2
 8009526:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f042 0201 	orr.w	r2, r2, #1
 800953e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	e000      	b.n	8009556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009554:	2302      	movs	r3, #2
  }
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009568:	4b04      	ldr	r3, [pc, #16]	; (800957c <HAL_PWREx_GetVoltageRange+0x18>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009570:	4618      	mov	r0, r3
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	40007000 	.word	0x40007000

08009580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800958e:	d130      	bne.n	80095f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009590:	4b23      	ldr	r3, [pc, #140]	; (8009620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800959c:	d038      	beq.n	8009610 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800959e:	4b20      	ldr	r3, [pc, #128]	; (8009620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80095a6:	4a1e      	ldr	r2, [pc, #120]	; (8009620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80095ae:	4b1d      	ldr	r3, [pc, #116]	; (8009624 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2232      	movs	r2, #50	; 0x32
 80095b4:	fb02 f303 	mul.w	r3, r2, r3
 80095b8:	4a1b      	ldr	r2, [pc, #108]	; (8009628 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80095ba:	fba2 2303 	umull	r2, r3, r2, r3
 80095be:	0c9b      	lsrs	r3, r3, #18
 80095c0:	3301      	adds	r3, #1
 80095c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095c4:	e002      	b.n	80095cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095cc:	4b14      	ldr	r3, [pc, #80]	; (8009620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095ce:	695b      	ldr	r3, [r3, #20]
 80095d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095d8:	d102      	bne.n	80095e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1f2      	bne.n	80095c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80095e0:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ec:	d110      	bne.n	8009610 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e00f      	b.n	8009612 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80095f2:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80095fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095fe:	d007      	beq.n	8009610 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009608:	4a05      	ldr	r2, [pc, #20]	; (8009620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800960a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800960e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	40007000 	.word	0x40007000
 8009624:	2000001c 	.word	0x2000001c
 8009628:	431bde83 	.word	0x431bde83

0800962c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	f000 bc02 	b.w	8009e44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009640:	4b96      	ldr	r3, [pc, #600]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 030c 	and.w	r3, r3, #12
 8009648:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800964a:	4b94      	ldr	r3, [pc, #592]	; (800989c <HAL_RCC_OscConfig+0x270>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f003 0303 	and.w	r3, r3, #3
 8009652:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 80e4 	beq.w	800982a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d007      	beq.n	8009678 <HAL_RCC_OscConfig+0x4c>
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	2b0c      	cmp	r3, #12
 800966c:	f040 808b 	bne.w	8009786 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2b01      	cmp	r3, #1
 8009674:	f040 8087 	bne.w	8009786 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009678:	4b88      	ldr	r3, [pc, #544]	; (800989c <HAL_RCC_OscConfig+0x270>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <HAL_RCC_OscConfig+0x64>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e3d9      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a1a      	ldr	r2, [r3, #32]
 8009694:	4b81      	ldr	r3, [pc, #516]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0308 	and.w	r3, r3, #8
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <HAL_RCC_OscConfig+0x7e>
 80096a0:	4b7e      	ldr	r3, [pc, #504]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096a8:	e005      	b.n	80096b6 <HAL_RCC_OscConfig+0x8a>
 80096aa:	4b7c      	ldr	r3, [pc, #496]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80096ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b0:	091b      	lsrs	r3, r3, #4
 80096b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d223      	bcs.n	8009702 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a1b      	ldr	r3, [r3, #32]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 fd8c 	bl	800a1dc <RCC_SetFlashLatencyFromMSIRange>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e3ba      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096ce:	4b73      	ldr	r3, [pc, #460]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a72      	ldr	r2, [pc, #456]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80096d4:	f043 0308 	orr.w	r3, r3, #8
 80096d8:	6013      	str	r3, [r2, #0]
 80096da:	4b70      	ldr	r3, [pc, #448]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	496d      	ldr	r1, [pc, #436]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80096ec:	4b6b      	ldr	r3, [pc, #428]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	021b      	lsls	r3, r3, #8
 80096fa:	4968      	ldr	r1, [pc, #416]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	604b      	str	r3, [r1, #4]
 8009700:	e025      	b.n	800974e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009702:	4b66      	ldr	r3, [pc, #408]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a65      	ldr	r2, [pc, #404]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009708:	f043 0308 	orr.w	r3, r3, #8
 800970c:	6013      	str	r3, [r2, #0]
 800970e:	4b63      	ldr	r3, [pc, #396]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a1b      	ldr	r3, [r3, #32]
 800971a:	4960      	ldr	r1, [pc, #384]	; (800989c <HAL_RCC_OscConfig+0x270>)
 800971c:	4313      	orrs	r3, r2
 800971e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009720:	4b5e      	ldr	r3, [pc, #376]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	495b      	ldr	r1, [pc, #364]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009730:	4313      	orrs	r3, r2
 8009732:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d109      	bne.n	800974e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fd4c 	bl	800a1dc <RCC_SetFlashLatencyFromMSIRange>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e37a      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800974e:	f000 fc81 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 8009752:	4602      	mov	r2, r0
 8009754:	4b51      	ldr	r3, [pc, #324]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	091b      	lsrs	r3, r3, #4
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	4950      	ldr	r1, [pc, #320]	; (80098a0 <HAL_RCC_OscConfig+0x274>)
 8009760:	5ccb      	ldrb	r3, [r1, r3]
 8009762:	f003 031f 	and.w	r3, r3, #31
 8009766:	fa22 f303 	lsr.w	r3, r2, r3
 800976a:	4a4e      	ldr	r2, [pc, #312]	; (80098a4 <HAL_RCC_OscConfig+0x278>)
 800976c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800976e:	4b4e      	ldr	r3, [pc, #312]	; (80098a8 <HAL_RCC_OscConfig+0x27c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f7fc fc18 	bl	8005fa8 <HAL_InitTick>
 8009778:	4603      	mov	r3, r0
 800977a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d052      	beq.n	8009828 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	e35e      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d032      	beq.n	80097f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800978e:	4b43      	ldr	r3, [pc, #268]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a42      	ldr	r2, [pc, #264]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009794:	f043 0301 	orr.w	r3, r3, #1
 8009798:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800979a:	f7fc fc55 	bl	8006048 <HAL_GetTick>
 800979e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097a0:	e008      	b.n	80097b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80097a2:	f7fc fc51 	bl	8006048 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d901      	bls.n	80097b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e347      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097b4:	4b39      	ldr	r3, [pc, #228]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d0f0      	beq.n	80097a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80097c0:	4b36      	ldr	r3, [pc, #216]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a35      	ldr	r2, [pc, #212]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097c6:	f043 0308 	orr.w	r3, r3, #8
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	4b33      	ldr	r3, [pc, #204]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	4930      	ldr	r1, [pc, #192]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80097de:	4b2f      	ldr	r3, [pc, #188]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	021b      	lsls	r3, r3, #8
 80097ec:	492b      	ldr	r1, [pc, #172]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	604b      	str	r3, [r1, #4]
 80097f2:	e01a      	b.n	800982a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80097f4:	4b29      	ldr	r3, [pc, #164]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a28      	ldr	r2, [pc, #160]	; (800989c <HAL_RCC_OscConfig+0x270>)
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009800:	f7fc fc22 	bl	8006048 <HAL_GetTick>
 8009804:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009808:	f7fc fc1e 	bl	8006048 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e314      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800981a:	4b20      	ldr	r3, [pc, #128]	; (800989c <HAL_RCC_OscConfig+0x270>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f0      	bne.n	8009808 <HAL_RCC_OscConfig+0x1dc>
 8009826:	e000      	b.n	800982a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009828:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d073      	beq.n	800991e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b08      	cmp	r3, #8
 800983a:	d005      	beq.n	8009848 <HAL_RCC_OscConfig+0x21c>
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	2b0c      	cmp	r3, #12
 8009840:	d10e      	bne.n	8009860 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b03      	cmp	r3, #3
 8009846:	d10b      	bne.n	8009860 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009848:	4b14      	ldr	r3, [pc, #80]	; (800989c <HAL_RCC_OscConfig+0x270>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d063      	beq.n	800991c <HAL_RCC_OscConfig+0x2f0>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d15f      	bne.n	800991c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e2f1      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009868:	d106      	bne.n	8009878 <HAL_RCC_OscConfig+0x24c>
 800986a:	4b0c      	ldr	r3, [pc, #48]	; (800989c <HAL_RCC_OscConfig+0x270>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a0b      	ldr	r2, [pc, #44]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	e025      	b.n	80098c4 <HAL_RCC_OscConfig+0x298>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009880:	d114      	bne.n	80098ac <HAL_RCC_OscConfig+0x280>
 8009882:	4b06      	ldr	r3, [pc, #24]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a05      	ldr	r2, [pc, #20]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	4b03      	ldr	r3, [pc, #12]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a02      	ldr	r2, [pc, #8]	; (800989c <HAL_RCC_OscConfig+0x270>)
 8009894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	e013      	b.n	80098c4 <HAL_RCC_OscConfig+0x298>
 800989c:	40021000 	.word	0x40021000
 80098a0:	0800f980 	.word	0x0800f980
 80098a4:	2000001c 	.word	0x2000001c
 80098a8:	20000020 	.word	0x20000020
 80098ac:	4ba0      	ldr	r3, [pc, #640]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a9f      	ldr	r2, [pc, #636]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80098b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	4b9d      	ldr	r3, [pc, #628]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a9c      	ldr	r2, [pc, #624]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80098be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d013      	beq.n	80098f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098cc:	f7fc fbbc 	bl	8006048 <HAL_GetTick>
 80098d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098d2:	e008      	b.n	80098e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098d4:	f7fc fbb8 	bl	8006048 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b64      	cmp	r3, #100	; 0x64
 80098e0:	d901      	bls.n	80098e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e2ae      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098e6:	4b92      	ldr	r3, [pc, #584]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0f0      	beq.n	80098d4 <HAL_RCC_OscConfig+0x2a8>
 80098f2:	e014      	b.n	800991e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f4:	f7fc fba8 	bl	8006048 <HAL_GetTick>
 80098f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098fa:	e008      	b.n	800990e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098fc:	f7fc fba4 	bl	8006048 <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b64      	cmp	r3, #100	; 0x64
 8009908:	d901      	bls.n	800990e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e29a      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800990e:	4b88      	ldr	r3, [pc, #544]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1f0      	bne.n	80098fc <HAL_RCC_OscConfig+0x2d0>
 800991a:	e000      	b.n	800991e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800991c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b00      	cmp	r3, #0
 8009928:	d060      	beq.n	80099ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	2b04      	cmp	r3, #4
 800992e:	d005      	beq.n	800993c <HAL_RCC_OscConfig+0x310>
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	2b0c      	cmp	r3, #12
 8009934:	d119      	bne.n	800996a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	2b02      	cmp	r3, #2
 800993a:	d116      	bne.n	800996a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800993c:	4b7c      	ldr	r3, [pc, #496]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <HAL_RCC_OscConfig+0x328>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e277      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009954:	4b76      	ldr	r3, [pc, #472]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	061b      	lsls	r3, r3, #24
 8009962:	4973      	ldr	r1, [pc, #460]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009964:	4313      	orrs	r3, r2
 8009966:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009968:	e040      	b.n	80099ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d023      	beq.n	80099ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009972:	4b6f      	ldr	r3, [pc, #444]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a6e      	ldr	r2, [pc, #440]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800997c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800997e:	f7fc fb63 	bl	8006048 <HAL_GetTick>
 8009982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009984:	e008      	b.n	8009998 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009986:	f7fc fb5f 	bl	8006048 <HAL_GetTick>
 800998a:	4602      	mov	r2, r0
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	2b02      	cmp	r3, #2
 8009992:	d901      	bls.n	8009998 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009994:	2303      	movs	r3, #3
 8009996:	e255      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009998:	4b65      	ldr	r3, [pc, #404]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0f0      	beq.n	8009986 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099a4:	4b62      	ldr	r3, [pc, #392]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	061b      	lsls	r3, r3, #24
 80099b2:	495f      	ldr	r1, [pc, #380]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	604b      	str	r3, [r1, #4]
 80099b8:	e018      	b.n	80099ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099ba:	4b5d      	ldr	r3, [pc, #372]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a5c      	ldr	r2, [pc, #368]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80099c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c6:	f7fc fb3f 	bl	8006048 <HAL_GetTick>
 80099ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099cc:	e008      	b.n	80099e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ce:	f7fc fb3b 	bl	8006048 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d901      	bls.n	80099e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e231      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099e0:	4b53      	ldr	r3, [pc, #332]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1f0      	bne.n	80099ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d03c      	beq.n	8009a72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01c      	beq.n	8009a3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a00:	4b4b      	ldr	r3, [pc, #300]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a06:	4a4a      	ldr	r2, [pc, #296]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a08:	f043 0301 	orr.w	r3, r3, #1
 8009a0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a10:	f7fc fb1a 	bl	8006048 <HAL_GetTick>
 8009a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a16:	e008      	b.n	8009a2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a18:	f7fc fb16 	bl	8006048 <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d901      	bls.n	8009a2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	e20c      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a2a:	4b41      	ldr	r3, [pc, #260]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a30:	f003 0302 	and.w	r3, r3, #2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0ef      	beq.n	8009a18 <HAL_RCC_OscConfig+0x3ec>
 8009a38:	e01b      	b.n	8009a72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a3a:	4b3d      	ldr	r3, [pc, #244]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a40:	4a3b      	ldr	r2, [pc, #236]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a42:	f023 0301 	bic.w	r3, r3, #1
 8009a46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4a:	f7fc fafd 	bl	8006048 <HAL_GetTick>
 8009a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a52:	f7fc faf9 	bl	8006048 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e1ef      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a64:	4b32      	ldr	r3, [pc, #200]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1ef      	bne.n	8009a52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0304 	and.w	r3, r3, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 80a6 	beq.w	8009bcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a80:	2300      	movs	r3, #0
 8009a82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009a84:	4b2a      	ldr	r3, [pc, #168]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10d      	bne.n	8009aac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a90:	4b27      	ldr	r3, [pc, #156]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a94:	4a26      	ldr	r2, [pc, #152]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8009a9c:	4b24      	ldr	r3, [pc, #144]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aa4:	60bb      	str	r3, [r7, #8]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aac:	4b21      	ldr	r3, [pc, #132]	; (8009b34 <HAL_RCC_OscConfig+0x508>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d118      	bne.n	8009aea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ab8:	4b1e      	ldr	r3, [pc, #120]	; (8009b34 <HAL_RCC_OscConfig+0x508>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <HAL_RCC_OscConfig+0x508>)
 8009abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ac4:	f7fc fac0 	bl	8006048 <HAL_GetTick>
 8009ac8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aca:	e008      	b.n	8009ade <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009acc:	f7fc fabc 	bl	8006048 <HAL_GetTick>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e1b2      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ade:	4b15      	ldr	r3, [pc, #84]	; (8009b34 <HAL_RCC_OscConfig+0x508>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0f0      	beq.n	8009acc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d108      	bne.n	8009b04 <HAL_RCC_OscConfig+0x4d8>
 8009af2:	4b0f      	ldr	r3, [pc, #60]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af8:	4a0d      	ldr	r2, [pc, #52]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009afa:	f043 0301 	orr.w	r3, r3, #1
 8009afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b02:	e029      	b.n	8009b58 <HAL_RCC_OscConfig+0x52c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	2b05      	cmp	r3, #5
 8009b0a:	d115      	bne.n	8009b38 <HAL_RCC_OscConfig+0x50c>
 8009b0c:	4b08      	ldr	r3, [pc, #32]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b12:	4a07      	ldr	r2, [pc, #28]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009b14:	f043 0304 	orr.w	r3, r3, #4
 8009b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b1c:	4b04      	ldr	r3, [pc, #16]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b22:	4a03      	ldr	r2, [pc, #12]	; (8009b30 <HAL_RCC_OscConfig+0x504>)
 8009b24:	f043 0301 	orr.w	r3, r3, #1
 8009b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b2c:	e014      	b.n	8009b58 <HAL_RCC_OscConfig+0x52c>
 8009b2e:	bf00      	nop
 8009b30:	40021000 	.word	0x40021000
 8009b34:	40007000 	.word	0x40007000
 8009b38:	4b9a      	ldr	r3, [pc, #616]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b3e:	4a99      	ldr	r2, [pc, #612]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b48:	4b96      	ldr	r3, [pc, #600]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b4e:	4a95      	ldr	r2, [pc, #596]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009b50:	f023 0304 	bic.w	r3, r3, #4
 8009b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d016      	beq.n	8009b8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b60:	f7fc fa72 	bl	8006048 <HAL_GetTick>
 8009b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b66:	e00a      	b.n	8009b7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b68:	f7fc fa6e 	bl	8006048 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d901      	bls.n	8009b7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e162      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b7e:	4b89      	ldr	r3, [pc, #548]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d0ed      	beq.n	8009b68 <HAL_RCC_OscConfig+0x53c>
 8009b8c:	e015      	b.n	8009bba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b8e:	f7fc fa5b 	bl	8006048 <HAL_GetTick>
 8009b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009b94:	e00a      	b.n	8009bac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b96:	f7fc fa57 	bl	8006048 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d901      	bls.n	8009bac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e14b      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bac:	4b7d      	ldr	r3, [pc, #500]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1ed      	bne.n	8009b96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bba:	7ffb      	ldrb	r3, [r7, #31]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d105      	bne.n	8009bcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bc0:	4b78      	ldr	r3, [pc, #480]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc4:	4a77      	ldr	r2, [pc, #476]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 0320 	and.w	r3, r3, #32
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d03c      	beq.n	8009c52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01c      	beq.n	8009c1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009be0:	4b70      	ldr	r3, [pc, #448]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009be6:	4a6f      	ldr	r2, [pc, #444]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009be8:	f043 0301 	orr.w	r3, r3, #1
 8009bec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bf0:	f7fc fa2a 	bl	8006048 <HAL_GetTick>
 8009bf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009bf6:	e008      	b.n	8009c0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bf8:	f7fc fa26 	bl	8006048 <HAL_GetTick>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e11c      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c0a:	4b66      	ldr	r3, [pc, #408]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0ef      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x5cc>
 8009c18:	e01b      	b.n	8009c52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c1a:	4b62      	ldr	r3, [pc, #392]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c20:	4a60      	ldr	r2, [pc, #384]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009c22:	f023 0301 	bic.w	r3, r3, #1
 8009c26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c2a:	f7fc fa0d 	bl	8006048 <HAL_GetTick>
 8009c2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c30:	e008      	b.n	8009c44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c32:	f7fc fa09 	bl	8006048 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	d901      	bls.n	8009c44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e0ff      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c44:	4b57      	ldr	r3, [pc, #348]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1ef      	bne.n	8009c32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 80f3 	beq.w	8009e42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	f040 80c9 	bne.w	8009df8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009c66:	4b4f      	ldr	r3, [pc, #316]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f003 0203 	and.w	r2, r3, #3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d12c      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c84:	3b01      	subs	r3, #1
 8009c86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d123      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d11b      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d113      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d109      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cca:	085b      	lsrs	r3, r3, #1
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d06b      	beq.n	8009dac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2b0c      	cmp	r3, #12
 8009cd8:	d062      	beq.n	8009da0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009cda:	4b32      	ldr	r3, [pc, #200]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e0ac      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009cea:	4b2e      	ldr	r3, [pc, #184]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a2d      	ldr	r2, [pc, #180]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cf4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009cf6:	f7fc f9a7 	bl	8006048 <HAL_GetTick>
 8009cfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009cfc:	e008      	b.n	8009d10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cfe:	f7fc f9a3 	bl	8006048 <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d901      	bls.n	8009d10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e099      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d10:	4b24      	ldr	r3, [pc, #144]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1f0      	bne.n	8009cfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d1c:	4b21      	ldr	r3, [pc, #132]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009d1e:	68da      	ldr	r2, [r3, #12]
 8009d20:	4b21      	ldr	r3, [pc, #132]	; (8009da8 <HAL_RCC_OscConfig+0x77c>)
 8009d22:	4013      	ands	r3, r2
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009d2c:	3a01      	subs	r2, #1
 8009d2e:	0112      	lsls	r2, r2, #4
 8009d30:	4311      	orrs	r1, r2
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009d36:	0212      	lsls	r2, r2, #8
 8009d38:	4311      	orrs	r1, r2
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009d3e:	0852      	lsrs	r2, r2, #1
 8009d40:	3a01      	subs	r2, #1
 8009d42:	0552      	lsls	r2, r2, #21
 8009d44:	4311      	orrs	r1, r2
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009d4a:	0852      	lsrs	r2, r2, #1
 8009d4c:	3a01      	subs	r2, #1
 8009d4e:	0652      	lsls	r2, r2, #25
 8009d50:	4311      	orrs	r1, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d56:	06d2      	lsls	r2, r2, #27
 8009d58:	430a      	orrs	r2, r1
 8009d5a:	4912      	ldr	r1, [pc, #72]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009d60:	4b10      	ldr	r3, [pc, #64]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a0f      	ldr	r2, [pc, #60]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d6c:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	4a0c      	ldr	r2, [pc, #48]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009d78:	f7fc f966 	bl	8006048 <HAL_GetTick>
 8009d7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d7e:	e008      	b.n	8009d92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d80:	f7fc f962 	bl	8006048 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d901      	bls.n	8009d92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e058      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d92:	4b04      	ldr	r3, [pc, #16]	; (8009da4 <HAL_RCC_OscConfig+0x778>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0f0      	beq.n	8009d80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009d9e:	e050      	b.n	8009e42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e04f      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
 8009da4:	40021000 	.word	0x40021000
 8009da8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dac:	4b27      	ldr	r3, [pc, #156]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d144      	bne.n	8009e42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009db8:	4b24      	ldr	r3, [pc, #144]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a23      	ldr	r2, [pc, #140]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009dc4:	4b21      	ldr	r3, [pc, #132]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	4a20      	ldr	r2, [pc, #128]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009dd0:	f7fc f93a 	bl	8006048 <HAL_GetTick>
 8009dd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dd6:	e008      	b.n	8009dea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009dd8:	f7fc f936 	bl	8006048 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d901      	bls.n	8009dea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e02c      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dea:	4b18      	ldr	r3, [pc, #96]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0f0      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x7ac>
 8009df6:	e024      	b.n	8009e42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	2b0c      	cmp	r3, #12
 8009dfc:	d01f      	beq.n	8009e3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dfe:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a12      	ldr	r2, [pc, #72]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e0a:	f7fc f91d 	bl	8006048 <HAL_GetTick>
 8009e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e10:	e008      	b.n	8009e24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e12:	f7fc f919 	bl	8006048 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d901      	bls.n	8009e24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e00f      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e24:	4b09      	ldr	r3, [pc, #36]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1f0      	bne.n	8009e12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009e30:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009e32:	68da      	ldr	r2, [r3, #12]
 8009e34:	4905      	ldr	r1, [pc, #20]	; (8009e4c <HAL_RCC_OscConfig+0x820>)
 8009e36:	4b06      	ldr	r3, [pc, #24]	; (8009e50 <HAL_RCC_OscConfig+0x824>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	60cb      	str	r3, [r1, #12]
 8009e3c:	e001      	b.n	8009e42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e000      	b.n	8009e44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3720      	adds	r7, #32
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	40021000 	.word	0x40021000
 8009e50:	feeefffc 	.word	0xfeeefffc

08009e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e0e7      	b.n	800a038 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e68:	4b75      	ldr	r3, [pc, #468]	; (800a040 <HAL_RCC_ClockConfig+0x1ec>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0307 	and.w	r3, r3, #7
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d910      	bls.n	8009e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e76:	4b72      	ldr	r3, [pc, #456]	; (800a040 <HAL_RCC_ClockConfig+0x1ec>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f023 0207 	bic.w	r2, r3, #7
 8009e7e:	4970      	ldr	r1, [pc, #448]	; (800a040 <HAL_RCC_ClockConfig+0x1ec>)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e86:	4b6e      	ldr	r3, [pc, #440]	; (800a040 <HAL_RCC_ClockConfig+0x1ec>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0307 	and.w	r3, r3, #7
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d001      	beq.n	8009e98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e0cf      	b.n	800a038 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d010      	beq.n	8009ec6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	4b66      	ldr	r3, [pc, #408]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d908      	bls.n	8009ec6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009eb4:	4b63      	ldr	r3, [pc, #396]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	4960      	ldr	r1, [pc, #384]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d04c      	beq.n	8009f6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d107      	bne.n	8009eea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009eda:	4b5a      	ldr	r3, [pc, #360]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d121      	bne.n	8009f2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e0a6      	b.n	800a038 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d107      	bne.n	8009f02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ef2:	4b54      	ldr	r3, [pc, #336]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d115      	bne.n	8009f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e09a      	b.n	800a038 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d107      	bne.n	8009f1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009f0a:	4b4e      	ldr	r3, [pc, #312]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d109      	bne.n	8009f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e08e      	b.n	800a038 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f1a:	4b4a      	ldr	r3, [pc, #296]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e086      	b.n	800a038 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f2a:	4b46      	ldr	r3, [pc, #280]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f023 0203 	bic.w	r2, r3, #3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	4943      	ldr	r1, [pc, #268]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f3c:	f7fc f884 	bl	8006048 <HAL_GetTick>
 8009f40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f42:	e00a      	b.n	8009f5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f44:	f7fc f880 	bl	8006048 <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d901      	bls.n	8009f5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e06e      	b.n	800a038 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f5a:	4b3a      	ldr	r3, [pc, #232]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f003 020c 	and.w	r2, r3, #12
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d1eb      	bne.n	8009f44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0302 	and.w	r3, r3, #2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d010      	beq.n	8009f9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	4b31      	ldr	r3, [pc, #196]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d208      	bcs.n	8009f9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f88:	4b2e      	ldr	r3, [pc, #184]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	492b      	ldr	r1, [pc, #172]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f9a:	4b29      	ldr	r3, [pc, #164]	; (800a040 <HAL_RCC_ClockConfig+0x1ec>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0307 	and.w	r3, r3, #7
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d210      	bcs.n	8009fca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fa8:	4b25      	ldr	r3, [pc, #148]	; (800a040 <HAL_RCC_ClockConfig+0x1ec>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f023 0207 	bic.w	r2, r3, #7
 8009fb0:	4923      	ldr	r1, [pc, #140]	; (800a040 <HAL_RCC_ClockConfig+0x1ec>)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fb8:	4b21      	ldr	r3, [pc, #132]	; (800a040 <HAL_RCC_ClockConfig+0x1ec>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d001      	beq.n	8009fca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e036      	b.n	800a038 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d008      	beq.n	8009fe8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009fd6:	4b1b      	ldr	r3, [pc, #108]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	4918      	ldr	r1, [pc, #96]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0308 	and.w	r3, r3, #8
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d009      	beq.n	800a008 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009ff4:	4b13      	ldr	r3, [pc, #76]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	4910      	ldr	r1, [pc, #64]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 800a004:	4313      	orrs	r3, r2
 800a006:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a008:	f000 f824 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 800a00c:	4602      	mov	r2, r0
 800a00e:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <HAL_RCC_ClockConfig+0x1f0>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	091b      	lsrs	r3, r3, #4
 800a014:	f003 030f 	and.w	r3, r3, #15
 800a018:	490b      	ldr	r1, [pc, #44]	; (800a048 <HAL_RCC_ClockConfig+0x1f4>)
 800a01a:	5ccb      	ldrb	r3, [r1, r3]
 800a01c:	f003 031f 	and.w	r3, r3, #31
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
 800a024:	4a09      	ldr	r2, [pc, #36]	; (800a04c <HAL_RCC_ClockConfig+0x1f8>)
 800a026:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a028:	4b09      	ldr	r3, [pc, #36]	; (800a050 <HAL_RCC_ClockConfig+0x1fc>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fb ffbb 	bl	8005fa8 <HAL_InitTick>
 800a032:	4603      	mov	r3, r0
 800a034:	72fb      	strb	r3, [r7, #11]

  return status;
 800a036:	7afb      	ldrb	r3, [r7, #11]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	40022000 	.word	0x40022000
 800a044:	40021000 	.word	0x40021000
 800a048:	0800f980 	.word	0x0800f980
 800a04c:	2000001c 	.word	0x2000001c
 800a050:	20000020 	.word	0x20000020

0800a054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a054:	b480      	push	{r7}
 800a056:	b089      	sub	sp, #36	; 0x24
 800a058:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a05a:	2300      	movs	r3, #0
 800a05c:	61fb      	str	r3, [r7, #28]
 800a05e:	2300      	movs	r3, #0
 800a060:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a062:	4b3e      	ldr	r3, [pc, #248]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f003 030c 	and.w	r3, r3, #12
 800a06a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a06c:	4b3b      	ldr	r3, [pc, #236]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f003 0303 	and.w	r3, r3, #3
 800a074:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <HAL_RCC_GetSysClockFreq+0x34>
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	2b0c      	cmp	r3, #12
 800a080:	d121      	bne.n	800a0c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d11e      	bne.n	800a0c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a088:	4b34      	ldr	r3, [pc, #208]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 0308 	and.w	r3, r3, #8
 800a090:	2b00      	cmp	r3, #0
 800a092:	d107      	bne.n	800a0a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a094:	4b31      	ldr	r3, [pc, #196]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a09a:	0a1b      	lsrs	r3, r3, #8
 800a09c:	f003 030f 	and.w	r3, r3, #15
 800a0a0:	61fb      	str	r3, [r7, #28]
 800a0a2:	e005      	b.n	800a0b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a0a4:	4b2d      	ldr	r3, [pc, #180]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	091b      	lsrs	r3, r3, #4
 800a0aa:	f003 030f 	and.w	r3, r3, #15
 800a0ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a0b0:	4a2b      	ldr	r2, [pc, #172]	; (800a160 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10d      	bne.n	800a0dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a0c4:	e00a      	b.n	800a0dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	2b04      	cmp	r3, #4
 800a0ca:	d102      	bne.n	800a0d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a0cc:	4b25      	ldr	r3, [pc, #148]	; (800a164 <HAL_RCC_GetSysClockFreq+0x110>)
 800a0ce:	61bb      	str	r3, [r7, #24]
 800a0d0:	e004      	b.n	800a0dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d101      	bne.n	800a0dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a0d8:	4b23      	ldr	r3, [pc, #140]	; (800a168 <HAL_RCC_GetSysClockFreq+0x114>)
 800a0da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	2b0c      	cmp	r3, #12
 800a0e0:	d134      	bne.n	800a14c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a0e2:	4b1e      	ldr	r3, [pc, #120]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	f003 0303 	and.w	r3, r3, #3
 800a0ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d003      	beq.n	800a0fa <HAL_RCC_GetSysClockFreq+0xa6>
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d003      	beq.n	800a100 <HAL_RCC_GetSysClockFreq+0xac>
 800a0f8:	e005      	b.n	800a106 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a0fa:	4b1a      	ldr	r3, [pc, #104]	; (800a164 <HAL_RCC_GetSysClockFreq+0x110>)
 800a0fc:	617b      	str	r3, [r7, #20]
      break;
 800a0fe:	e005      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a100:	4b19      	ldr	r3, [pc, #100]	; (800a168 <HAL_RCC_GetSysClockFreq+0x114>)
 800a102:	617b      	str	r3, [r7, #20]
      break;
 800a104:	e002      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	617b      	str	r3, [r7, #20]
      break;
 800a10a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a10c:	4b13      	ldr	r3, [pc, #76]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	091b      	lsrs	r3, r3, #4
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	3301      	adds	r3, #1
 800a118:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a11a:	4b10      	ldr	r3, [pc, #64]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	0a1b      	lsrs	r3, r3, #8
 800a120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	fb03 f202 	mul.w	r2, r3, r2
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a130:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a132:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <HAL_RCC_GetSysClockFreq+0x108>)
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	0e5b      	lsrs	r3, r3, #25
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	3301      	adds	r3, #1
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	fbb2 f3f3 	udiv	r3, r2, r3
 800a14a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a14c:	69bb      	ldr	r3, [r7, #24]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3724      	adds	r7, #36	; 0x24
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	40021000 	.word	0x40021000
 800a160:	0800f998 	.word	0x0800f998
 800a164:	00f42400 	.word	0x00f42400
 800a168:	007a1200 	.word	0x007a1200

0800a16c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a170:	4b03      	ldr	r3, [pc, #12]	; (800a180 <HAL_RCC_GetHCLKFreq+0x14>)
 800a172:	681b      	ldr	r3, [r3, #0]
}
 800a174:	4618      	mov	r0, r3
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	2000001c 	.word	0x2000001c

0800a184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a188:	f7ff fff0 	bl	800a16c <HAL_RCC_GetHCLKFreq>
 800a18c:	4602      	mov	r2, r0
 800a18e:	4b06      	ldr	r3, [pc, #24]	; (800a1a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	0a1b      	lsrs	r3, r3, #8
 800a194:	f003 0307 	and.w	r3, r3, #7
 800a198:	4904      	ldr	r1, [pc, #16]	; (800a1ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800a19a:	5ccb      	ldrb	r3, [r1, r3]
 800a19c:	f003 031f 	and.w	r3, r3, #31
 800a1a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	40021000 	.word	0x40021000
 800a1ac:	0800f990 	.word	0x0800f990

0800a1b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a1b4:	f7ff ffda 	bl	800a16c <HAL_RCC_GetHCLKFreq>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	4b06      	ldr	r3, [pc, #24]	; (800a1d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	0adb      	lsrs	r3, r3, #11
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	4904      	ldr	r1, [pc, #16]	; (800a1d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1c6:	5ccb      	ldrb	r3, [r1, r3]
 800a1c8:	f003 031f 	and.w	r3, r3, #31
 800a1cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	40021000 	.word	0x40021000
 800a1d8:	0800f990 	.word	0x0800f990

0800a1dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a1e8:	4b2a      	ldr	r3, [pc, #168]	; (800a294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a1f4:	f7ff f9b6 	bl	8009564 <HAL_PWREx_GetVoltageRange>
 800a1f8:	6178      	str	r0, [r7, #20]
 800a1fa:	e014      	b.n	800a226 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a1fc:	4b25      	ldr	r3, [pc, #148]	; (800a294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a200:	4a24      	ldr	r2, [pc, #144]	; (800a294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a206:	6593      	str	r3, [r2, #88]	; 0x58
 800a208:	4b22      	ldr	r3, [pc, #136]	; (800a294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a214:	f7ff f9a6 	bl	8009564 <HAL_PWREx_GetVoltageRange>
 800a218:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a21a:	4b1e      	ldr	r3, [pc, #120]	; (800a294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21e:	4a1d      	ldr	r2, [pc, #116]	; (800a294 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a224:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a22c:	d10b      	bne.n	800a246 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b80      	cmp	r3, #128	; 0x80
 800a232:	d919      	bls.n	800a268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2ba0      	cmp	r3, #160	; 0xa0
 800a238:	d902      	bls.n	800a240 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a23a:	2302      	movs	r3, #2
 800a23c:	613b      	str	r3, [r7, #16]
 800a23e:	e013      	b.n	800a268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a240:	2301      	movs	r3, #1
 800a242:	613b      	str	r3, [r7, #16]
 800a244:	e010      	b.n	800a268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b80      	cmp	r3, #128	; 0x80
 800a24a:	d902      	bls.n	800a252 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a24c:	2303      	movs	r3, #3
 800a24e:	613b      	str	r3, [r7, #16]
 800a250:	e00a      	b.n	800a268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b80      	cmp	r3, #128	; 0x80
 800a256:	d102      	bne.n	800a25e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a258:	2302      	movs	r3, #2
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	e004      	b.n	800a268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b70      	cmp	r3, #112	; 0x70
 800a262:	d101      	bne.n	800a268 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a264:	2301      	movs	r3, #1
 800a266:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a268:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f023 0207 	bic.w	r2, r3, #7
 800a270:	4909      	ldr	r1, [pc, #36]	; (800a298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	4313      	orrs	r3, r2
 800a276:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a278:	4b07      	ldr	r3, [pc, #28]	; (800a298 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0307 	and.w	r3, r3, #7
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	429a      	cmp	r2, r3
 800a284:	d001      	beq.n	800a28a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e000      	b.n	800a28c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	40021000 	.word	0x40021000
 800a298:	40022000 	.word	0x40022000

0800a29c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d031      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a2c0:	d01a      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a2c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a2c6:	d814      	bhi.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d009      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a2cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2d0:	d10f      	bne.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a2d2:	4b5d      	ldr	r3, [pc, #372]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	4a5c      	ldr	r2, [pc, #368]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a2d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a2de:	e00c      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 f9f0 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a2f0:	e003      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	74fb      	strb	r3, [r7, #19]
      break;
 800a2f6:	e000      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a2f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2fa:	7cfb      	ldrb	r3, [r7, #19]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10b      	bne.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a300:	4b51      	ldr	r3, [pc, #324]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a306:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a30e:	494e      	ldr	r1, [pc, #312]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a310:	4313      	orrs	r3, r2
 800a312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a316:	e001      	b.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a318:	7cfb      	ldrb	r3, [r7, #19]
 800a31a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 809e 	beq.w	800a466 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a32a:	2300      	movs	r3, #0
 800a32c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a32e:	4b46      	ldr	r3, [pc, #280]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a33a:	2301      	movs	r3, #1
 800a33c:	e000      	b.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a33e:	2300      	movs	r3, #0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00d      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a344:	4b40      	ldr	r3, [pc, #256]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a348:	4a3f      	ldr	r2, [pc, #252]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a34a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a34e:	6593      	str	r3, [r2, #88]	; 0x58
 800a350:	4b3d      	ldr	r3, [pc, #244]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a358:	60bb      	str	r3, [r7, #8]
 800a35a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a35c:	2301      	movs	r3, #1
 800a35e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a360:	4b3a      	ldr	r3, [pc, #232]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a39      	ldr	r2, [pc, #228]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a36a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a36c:	f7fb fe6c 	bl	8006048 <HAL_GetTick>
 800a370:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a372:	e009      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a374:	f7fb fe68 	bl	8006048 <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d902      	bls.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	74fb      	strb	r3, [r7, #19]
        break;
 800a386:	e005      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a388:	4b30      	ldr	r3, [pc, #192]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0ef      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a394:	7cfb      	ldrb	r3, [r7, #19]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d15a      	bne.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a39a:	4b2b      	ldr	r3, [pc, #172]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a39c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01e      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d019      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a3b6:	4b24      	ldr	r3, [pc, #144]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3c2:	4b21      	ldr	r3, [pc, #132]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c8:	4a1f      	ldr	r2, [pc, #124]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3d2:	4b1d      	ldr	r3, [pc, #116]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d8:	4a1b      	ldr	r2, [pc, #108]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a3e2:	4a19      	ldr	r2, [pc, #100]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d016      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f4:	f7fb fe28 	bl	8006048 <HAL_GetTick>
 800a3f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3fa:	e00b      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3fc:	f7fb fe24 	bl	8006048 <HAL_GetTick>
 800a400:	4602      	mov	r2, r0
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	f241 3288 	movw	r2, #5000	; 0x1388
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d902      	bls.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	74fb      	strb	r3, [r7, #19]
            break;
 800a412:	e006      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a414:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0ec      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800a422:	7cfb      	ldrb	r3, [r7, #19]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10b      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a428:	4b07      	ldr	r3, [pc, #28]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a42e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a436:	4904      	ldr	r1, [pc, #16]	; (800a448 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a438:	4313      	orrs	r3, r2
 800a43a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a43e:	e009      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a440:	7cfb      	ldrb	r3, [r7, #19]
 800a442:	74bb      	strb	r3, [r7, #18]
 800a444:	e006      	b.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a446:	bf00      	nop
 800a448:	40021000 	.word	0x40021000
 800a44c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a450:	7cfb      	ldrb	r3, [r7, #19]
 800a452:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a454:	7c7b      	ldrb	r3, [r7, #17]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d105      	bne.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a45a:	4b9b      	ldr	r3, [pc, #620]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a45c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45e:	4a9a      	ldr	r2, [pc, #616]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a464:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a472:	4b95      	ldr	r3, [pc, #596]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a478:	f023 0203 	bic.w	r2, r3, #3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a1b      	ldr	r3, [r3, #32]
 800a480:	4991      	ldr	r1, [pc, #580]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a482:	4313      	orrs	r3, r2
 800a484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0302 	and.w	r3, r3, #2
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00a      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a494:	4b8c      	ldr	r3, [pc, #560]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49a:	f023 020c 	bic.w	r2, r3, #12
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	4989      	ldr	r1, [pc, #548]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00a      	beq.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a4b6:	4b84      	ldr	r3, [pc, #528]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c4:	4980      	ldr	r1, [pc, #512]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0320 	and.w	r3, r3, #32
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00a      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4d8:	4b7b      	ldr	r3, [pc, #492]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	4978      	ldr	r1, [pc, #480]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00a      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a4fa:	4b73      	ldr	r3, [pc, #460]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a500:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a508:	496f      	ldr	r1, [pc, #444]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00a      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a51c:	4b6a      	ldr	r3, [pc, #424]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a522:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52a:	4967      	ldr	r1, [pc, #412]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a52c:	4313      	orrs	r3, r2
 800a52e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a53e:	4b62      	ldr	r3, [pc, #392]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a544:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54c:	495e      	ldr	r1, [pc, #376]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a54e:	4313      	orrs	r3, r2
 800a550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00a      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a560:	4b59      	ldr	r3, [pc, #356]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a566:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56e:	4956      	ldr	r1, [pc, #344]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a570:	4313      	orrs	r3, r2
 800a572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a582:	4b51      	ldr	r3, [pc, #324]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a590:	494d      	ldr	r1, [pc, #308]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a592:	4313      	orrs	r3, r2
 800a594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d028      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a5a4:	4b48      	ldr	r3, [pc, #288]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5b2:	4945      	ldr	r1, [pc, #276]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5c2:	d106      	bne.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5c4:	4b40      	ldr	r3, [pc, #256]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	4a3f      	ldr	r2, [pc, #252]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a5ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5ce:	60d3      	str	r3, [r2, #12]
 800a5d0:	e011      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5da:	d10c      	bne.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 f872 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a5ec:	7cfb      	ldrb	r3, [r7, #19]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800a5f2:	7cfb      	ldrb	r3, [r7, #19]
 800a5f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d028      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a602:	4b31      	ldr	r3, [pc, #196]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a608:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a610:	492d      	ldr	r1, [pc, #180]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a612:	4313      	orrs	r3, r2
 800a614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a620:	d106      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a622:	4b29      	ldr	r3, [pc, #164]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	4a28      	ldr	r2, [pc, #160]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a62c:	60d3      	str	r3, [r2, #12]
 800a62e:	e011      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a638:	d10c      	bne.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3304      	adds	r3, #4
 800a63e:	2101      	movs	r1, #1
 800a640:	4618      	mov	r0, r3
 800a642:	f000 f843 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a646:	4603      	mov	r3, r0
 800a648:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a64a:	7cfb      	ldrb	r3, [r7, #19]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800a650:	7cfb      	ldrb	r3, [r7, #19]
 800a652:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01c      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a660:	4b19      	ldr	r3, [pc, #100]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a666:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66e:	4916      	ldr	r1, [pc, #88]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a670:	4313      	orrs	r3, r2
 800a672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a67e:	d10c      	bne.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3304      	adds	r3, #4
 800a684:	2102      	movs	r1, #2
 800a686:	4618      	mov	r0, r3
 800a688:	f000 f820 	bl	800a6cc <RCCEx_PLLSAI1_Config>
 800a68c:	4603      	mov	r3, r0
 800a68e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a690:	7cfb      	ldrb	r3, [r7, #19]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800a696:	7cfb      	ldrb	r3, [r7, #19]
 800a698:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00a      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6a6:	4b08      	ldr	r3, [pc, #32]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b4:	4904      	ldr	r1, [pc, #16]	; (800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a6bc:	7cbb      	ldrb	r3, [r7, #18]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	40021000 	.word	0x40021000

0800a6cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a6da:	4b74      	ldr	r3, [pc, #464]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a6e6:	4b71      	ldr	r3, [pc, #452]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f003 0203 	and.w	r2, r3, #3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d10d      	bne.n	800a712 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
       ||
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d009      	beq.n	800a712 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a6fe:	4b6b      	ldr	r3, [pc, #428]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	091b      	lsrs	r3, r3, #4
 800a704:	f003 0307 	and.w	r3, r3, #7
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
       ||
 800a70e:	429a      	cmp	r2, r3
 800a710:	d047      	beq.n	800a7a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	73fb      	strb	r3, [r7, #15]
 800a716:	e044      	b.n	800a7a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b03      	cmp	r3, #3
 800a71e:	d018      	beq.n	800a752 <RCCEx_PLLSAI1_Config+0x86>
 800a720:	2b03      	cmp	r3, #3
 800a722:	d825      	bhi.n	800a770 <RCCEx_PLLSAI1_Config+0xa4>
 800a724:	2b01      	cmp	r3, #1
 800a726:	d002      	beq.n	800a72e <RCCEx_PLLSAI1_Config+0x62>
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d009      	beq.n	800a740 <RCCEx_PLLSAI1_Config+0x74>
 800a72c:	e020      	b.n	800a770 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a72e:	4b5f      	ldr	r3, [pc, #380]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d11d      	bne.n	800a776 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a73e:	e01a      	b.n	800a776 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a740:	4b5a      	ldr	r3, [pc, #360]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d116      	bne.n	800a77a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a750:	e013      	b.n	800a77a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a752:	4b56      	ldr	r3, [pc, #344]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10f      	bne.n	800a77e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a75e:	4b53      	ldr	r3, [pc, #332]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d109      	bne.n	800a77e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a76e:	e006      	b.n	800a77e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	73fb      	strb	r3, [r7, #15]
      break;
 800a774:	e004      	b.n	800a780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a776:	bf00      	nop
 800a778:	e002      	b.n	800a780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a77a:	bf00      	nop
 800a77c:	e000      	b.n	800a780 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a77e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10d      	bne.n	800a7a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a786:	4b49      	ldr	r3, [pc, #292]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6819      	ldr	r1, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	3b01      	subs	r3, #1
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	430b      	orrs	r3, r1
 800a79c:	4943      	ldr	r1, [pc, #268]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d17c      	bne.n	800a8a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a7a8:	4b40      	ldr	r3, [pc, #256]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a3f      	ldr	r2, [pc, #252]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a7b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7b4:	f7fb fc48 	bl	8006048 <HAL_GetTick>
 800a7b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a7ba:	e009      	b.n	800a7d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7bc:	f7fb fc44 	bl	8006048 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d902      	bls.n	800a7d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
        break;
 800a7ce:	e005      	b.n	800a7dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a7d0:	4b36      	ldr	r3, [pc, #216]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1ef      	bne.n	800a7bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d15f      	bne.n	800a8a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d110      	bne.n	800a80a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a7e8:	4b30      	ldr	r3, [pc, #192]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a7f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6892      	ldr	r2, [r2, #8]
 800a7f8:	0211      	lsls	r1, r2, #8
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	68d2      	ldr	r2, [r2, #12]
 800a7fe:	06d2      	lsls	r2, r2, #27
 800a800:	430a      	orrs	r2, r1
 800a802:	492a      	ldr	r1, [pc, #168]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a804:	4313      	orrs	r3, r2
 800a806:	610b      	str	r3, [r1, #16]
 800a808:	e027      	b.n	800a85a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d112      	bne.n	800a836 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a810:	4b26      	ldr	r3, [pc, #152]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a818:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	6892      	ldr	r2, [r2, #8]
 800a820:	0211      	lsls	r1, r2, #8
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6912      	ldr	r2, [r2, #16]
 800a826:	0852      	lsrs	r2, r2, #1
 800a828:	3a01      	subs	r2, #1
 800a82a:	0552      	lsls	r2, r2, #21
 800a82c:	430a      	orrs	r2, r1
 800a82e:	491f      	ldr	r1, [pc, #124]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a830:	4313      	orrs	r3, r2
 800a832:	610b      	str	r3, [r1, #16]
 800a834:	e011      	b.n	800a85a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a836:	4b1d      	ldr	r3, [pc, #116]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a83e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	6892      	ldr	r2, [r2, #8]
 800a846:	0211      	lsls	r1, r2, #8
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	6952      	ldr	r2, [r2, #20]
 800a84c:	0852      	lsrs	r2, r2, #1
 800a84e:	3a01      	subs	r2, #1
 800a850:	0652      	lsls	r2, r2, #25
 800a852:	430a      	orrs	r2, r1
 800a854:	4915      	ldr	r1, [pc, #84]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a856:	4313      	orrs	r3, r2
 800a858:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a85a:	4b14      	ldr	r3, [pc, #80]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a13      	ldr	r2, [pc, #76]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a860:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a864:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a866:	f7fb fbef 	bl	8006048 <HAL_GetTick>
 800a86a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a86c:	e009      	b.n	800a882 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a86e:	f7fb fbeb 	bl	8006048 <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d902      	bls.n	800a882 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	73fb      	strb	r3, [r7, #15]
          break;
 800a880:	e005      	b.n	800a88e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a882:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d0ef      	beq.n	800a86e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d106      	bne.n	800a8a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a894:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	4903      	ldr	r1, [pc, #12]	; (800a8ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	40021000 	.word	0x40021000

0800a8b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e049      	b.n	800a956 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d106      	bne.n	800a8dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7fa fbe0 	bl	800509c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f000 fa88 	bl	800ae04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2201      	movs	r2, #1
 800a940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e049      	b.n	800aa04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d106      	bne.n	800a98a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f841 	bl	800aa0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2202      	movs	r2, #2
 800a98e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3304      	adds	r3, #4
 800a99a:	4619      	mov	r1, r3
 800a99c:	4610      	mov	r0, r2
 800a99e:	f000 fa31 	bl	800ae04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d109      	bne.n	800aa44 <HAL_TIM_PWM_Start+0x24>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	bf14      	ite	ne
 800aa3c:	2301      	movne	r3, #1
 800aa3e:	2300      	moveq	r3, #0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	e03c      	b.n	800aabe <HAL_TIM_PWM_Start+0x9e>
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	d109      	bne.n	800aa5e <HAL_TIM_PWM_Start+0x3e>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	bf14      	ite	ne
 800aa56:	2301      	movne	r3, #1
 800aa58:	2300      	moveq	r3, #0
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	e02f      	b.n	800aabe <HAL_TIM_PWM_Start+0x9e>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b08      	cmp	r3, #8
 800aa62:	d109      	bne.n	800aa78 <HAL_TIM_PWM_Start+0x58>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	bf14      	ite	ne
 800aa70:	2301      	movne	r3, #1
 800aa72:	2300      	moveq	r3, #0
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	e022      	b.n	800aabe <HAL_TIM_PWM_Start+0x9e>
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2b0c      	cmp	r3, #12
 800aa7c:	d109      	bne.n	800aa92 <HAL_TIM_PWM_Start+0x72>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	bf14      	ite	ne
 800aa8a:	2301      	movne	r3, #1
 800aa8c:	2300      	moveq	r3, #0
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	e015      	b.n	800aabe <HAL_TIM_PWM_Start+0x9e>
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2b10      	cmp	r3, #16
 800aa96:	d109      	bne.n	800aaac <HAL_TIM_PWM_Start+0x8c>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	bf14      	ite	ne
 800aaa4:	2301      	movne	r3, #1
 800aaa6:	2300      	moveq	r3, #0
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	e008      	b.n	800aabe <HAL_TIM_PWM_Start+0x9e>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	bf14      	ite	ne
 800aab8:	2301      	movne	r3, #1
 800aaba:	2300      	moveq	r3, #0
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e07e      	b.n	800abc4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d104      	bne.n	800aad6 <HAL_TIM_PWM_Start+0xb6>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aad4:	e023      	b.n	800ab1e <HAL_TIM_PWM_Start+0xfe>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d104      	bne.n	800aae6 <HAL_TIM_PWM_Start+0xc6>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2202      	movs	r2, #2
 800aae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aae4:	e01b      	b.n	800ab1e <HAL_TIM_PWM_Start+0xfe>
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d104      	bne.n	800aaf6 <HAL_TIM_PWM_Start+0xd6>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2202      	movs	r2, #2
 800aaf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaf4:	e013      	b.n	800ab1e <HAL_TIM_PWM_Start+0xfe>
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b0c      	cmp	r3, #12
 800aafa:	d104      	bne.n	800ab06 <HAL_TIM_PWM_Start+0xe6>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab04:	e00b      	b.n	800ab1e <HAL_TIM_PWM_Start+0xfe>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b10      	cmp	r3, #16
 800ab0a:	d104      	bne.n	800ab16 <HAL_TIM_PWM_Start+0xf6>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab14:	e003      	b.n	800ab1e <HAL_TIM_PWM_Start+0xfe>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2202      	movs	r2, #2
 800ab1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2201      	movs	r2, #1
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 fc4e 	bl	800b3c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a26      	ldr	r2, [pc, #152]	; (800abcc <HAL_TIM_PWM_Start+0x1ac>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d009      	beq.n	800ab4a <HAL_TIM_PWM_Start+0x12a>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a25      	ldr	r2, [pc, #148]	; (800abd0 <HAL_TIM_PWM_Start+0x1b0>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d004      	beq.n	800ab4a <HAL_TIM_PWM_Start+0x12a>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a23      	ldr	r2, [pc, #140]	; (800abd4 <HAL_TIM_PWM_Start+0x1b4>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d101      	bne.n	800ab4e <HAL_TIM_PWM_Start+0x12e>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e000      	b.n	800ab50 <HAL_TIM_PWM_Start+0x130>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d007      	beq.n	800ab64 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a18      	ldr	r2, [pc, #96]	; (800abcc <HAL_TIM_PWM_Start+0x1ac>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d009      	beq.n	800ab82 <HAL_TIM_PWM_Start+0x162>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab76:	d004      	beq.n	800ab82 <HAL_TIM_PWM_Start+0x162>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a14      	ldr	r2, [pc, #80]	; (800abd0 <HAL_TIM_PWM_Start+0x1b0>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d115      	bne.n	800abae <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689a      	ldr	r2, [r3, #8]
 800ab88:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <HAL_TIM_PWM_Start+0x1b8>)
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b06      	cmp	r3, #6
 800ab92:	d015      	beq.n	800abc0 <HAL_TIM_PWM_Start+0x1a0>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab9a:	d011      	beq.n	800abc0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f042 0201 	orr.w	r2, r2, #1
 800abaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abac:	e008      	b.n	800abc0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f042 0201 	orr.w	r2, r2, #1
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	e000      	b.n	800abc2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	40012c00 	.word	0x40012c00
 800abd0:	40014000 	.word	0x40014000
 800abd4:	40014400 	.word	0x40014400
 800abd8:	00010007 	.word	0x00010007

0800abdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d101      	bne.n	800abfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800abf6:	2302      	movs	r3, #2
 800abf8:	e0ff      	b.n	800adfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b14      	cmp	r3, #20
 800ac06:	f200 80f0 	bhi.w	800adea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ac0a:	a201      	add	r2, pc, #4	; (adr r2, 800ac10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ac0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac10:	0800ac65 	.word	0x0800ac65
 800ac14:	0800adeb 	.word	0x0800adeb
 800ac18:	0800adeb 	.word	0x0800adeb
 800ac1c:	0800adeb 	.word	0x0800adeb
 800ac20:	0800aca5 	.word	0x0800aca5
 800ac24:	0800adeb 	.word	0x0800adeb
 800ac28:	0800adeb 	.word	0x0800adeb
 800ac2c:	0800adeb 	.word	0x0800adeb
 800ac30:	0800ace7 	.word	0x0800ace7
 800ac34:	0800adeb 	.word	0x0800adeb
 800ac38:	0800adeb 	.word	0x0800adeb
 800ac3c:	0800adeb 	.word	0x0800adeb
 800ac40:	0800ad27 	.word	0x0800ad27
 800ac44:	0800adeb 	.word	0x0800adeb
 800ac48:	0800adeb 	.word	0x0800adeb
 800ac4c:	0800adeb 	.word	0x0800adeb
 800ac50:	0800ad69 	.word	0x0800ad69
 800ac54:	0800adeb 	.word	0x0800adeb
 800ac58:	0800adeb 	.word	0x0800adeb
 800ac5c:	0800adeb 	.word	0x0800adeb
 800ac60:	0800ada9 	.word	0x0800ada9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 f92e 	bl	800aecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	699a      	ldr	r2, [r3, #24]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0208 	orr.w	r2, r2, #8
 800ac7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	699a      	ldr	r2, [r3, #24]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0204 	bic.w	r2, r2, #4
 800ac8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6999      	ldr	r1, [r3, #24]
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	691a      	ldr	r2, [r3, #16]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	619a      	str	r2, [r3, #24]
      break;
 800aca2:	e0a5      	b.n	800adf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68b9      	ldr	r1, [r7, #8]
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 f98a 	bl	800afc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	699a      	ldr	r2, [r3, #24]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699a      	ldr	r2, [r3, #24]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6999      	ldr	r1, [r3, #24]
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	021a      	lsls	r2, r3, #8
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	430a      	orrs	r2, r1
 800ace2:	619a      	str	r2, [r3, #24]
      break;
 800ace4:	e084      	b.n	800adf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68b9      	ldr	r1, [r7, #8]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f9e3 	bl	800b0b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69da      	ldr	r2, [r3, #28]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f042 0208 	orr.w	r2, r2, #8
 800ad00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69da      	ldr	r2, [r3, #28]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f022 0204 	bic.w	r2, r2, #4
 800ad10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69d9      	ldr	r1, [r3, #28]
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	691a      	ldr	r2, [r3, #16]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	61da      	str	r2, [r3, #28]
      break;
 800ad24:	e064      	b.n	800adf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 fa3b 	bl	800b1a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	69da      	ldr	r2, [r3, #28]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	69da      	ldr	r2, [r3, #28]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69d9      	ldr	r1, [r3, #28]
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	021a      	lsls	r2, r3, #8
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	430a      	orrs	r2, r1
 800ad64:	61da      	str	r2, [r3, #28]
      break;
 800ad66:	e043      	b.n	800adf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68b9      	ldr	r1, [r7, #8]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fa78 	bl	800b264 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f042 0208 	orr.w	r2, r2, #8
 800ad82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f022 0204 	bic.w	r2, r2, #4
 800ad92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	691a      	ldr	r2, [r3, #16]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	430a      	orrs	r2, r1
 800ada4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ada6:	e023      	b.n	800adf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68b9      	ldr	r1, [r7, #8]
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fab0 	bl	800b314 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800add2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	021a      	lsls	r2, r3, #8
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ade8:	e002      	b.n	800adf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	75fb      	strb	r3, [r7, #23]
      break;
 800adee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop

0800ae04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a2a      	ldr	r2, [pc, #168]	; (800aec0 <TIM_Base_SetConfig+0xbc>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d003      	beq.n	800ae24 <TIM_Base_SetConfig+0x20>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae22:	d108      	bne.n	800ae36 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a21      	ldr	r2, [pc, #132]	; (800aec0 <TIM_Base_SetConfig+0xbc>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d00b      	beq.n	800ae56 <TIM_Base_SetConfig+0x52>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae44:	d007      	beq.n	800ae56 <TIM_Base_SetConfig+0x52>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a1e      	ldr	r2, [pc, #120]	; (800aec4 <TIM_Base_SetConfig+0xc0>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d003      	beq.n	800ae56 <TIM_Base_SetConfig+0x52>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a1d      	ldr	r2, [pc, #116]	; (800aec8 <TIM_Base_SetConfig+0xc4>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d108      	bne.n	800ae68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	695b      	ldr	r3, [r3, #20]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	689a      	ldr	r2, [r3, #8]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a0c      	ldr	r2, [pc, #48]	; (800aec0 <TIM_Base_SetConfig+0xbc>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d007      	beq.n	800aea4 <TIM_Base_SetConfig+0xa0>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a0b      	ldr	r2, [pc, #44]	; (800aec4 <TIM_Base_SetConfig+0xc0>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d003      	beq.n	800aea4 <TIM_Base_SetConfig+0xa0>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a0a      	ldr	r2, [pc, #40]	; (800aec8 <TIM_Base_SetConfig+0xc4>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d103      	bne.n	800aeac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	691a      	ldr	r2, [r3, #16]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	615a      	str	r2, [r3, #20]
}
 800aeb2:	bf00      	nop
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40012c00 	.word	0x40012c00
 800aec4:	40014000 	.word	0x40014000
 800aec8:	40014400 	.word	0x40014400

0800aecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aecc:	b480      	push	{r7}
 800aece:	b087      	sub	sp, #28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	f023 0201 	bic.w	r2, r3, #1
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a1b      	ldr	r3, [r3, #32]
 800aee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aefa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aefe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f023 0303 	bic.w	r3, r3, #3
 800af06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	4313      	orrs	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f023 0302 	bic.w	r3, r3, #2
 800af18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	4313      	orrs	r3, r2
 800af22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a24      	ldr	r2, [pc, #144]	; (800afb8 <TIM_OC1_SetConfig+0xec>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d007      	beq.n	800af3c <TIM_OC1_SetConfig+0x70>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a23      	ldr	r2, [pc, #140]	; (800afbc <TIM_OC1_SetConfig+0xf0>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d003      	beq.n	800af3c <TIM_OC1_SetConfig+0x70>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a22      	ldr	r2, [pc, #136]	; (800afc0 <TIM_OC1_SetConfig+0xf4>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d10c      	bne.n	800af56 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	f023 0308 	bic.w	r3, r3, #8
 800af42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f023 0304 	bic.w	r3, r3, #4
 800af54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a17      	ldr	r2, [pc, #92]	; (800afb8 <TIM_OC1_SetConfig+0xec>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d007      	beq.n	800af6e <TIM_OC1_SetConfig+0xa2>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a16      	ldr	r2, [pc, #88]	; (800afbc <TIM_OC1_SetConfig+0xf0>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d003      	beq.n	800af6e <TIM_OC1_SetConfig+0xa2>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a15      	ldr	r2, [pc, #84]	; (800afc0 <TIM_OC1_SetConfig+0xf4>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d111      	bne.n	800af92 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	4313      	orrs	r3, r2
 800af86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	4313      	orrs	r3, r2
 800af90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	697a      	ldr	r2, [r7, #20]
 800afaa:	621a      	str	r2, [r3, #32]
}
 800afac:	bf00      	nop
 800afae:	371c      	adds	r7, #28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	40012c00 	.word	0x40012c00
 800afbc:	40014000 	.word	0x40014000
 800afc0:	40014400 	.word	0x40014400

0800afc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b087      	sub	sp, #28
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	f023 0210 	bic.w	r2, r3, #16
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800affe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f023 0320 	bic.w	r3, r3, #32
 800b012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a22      	ldr	r2, [pc, #136]	; (800b0ac <TIM_OC2_SetConfig+0xe8>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d10d      	bne.n	800b044 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b02e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	011b      	lsls	r3, r3, #4
 800b036:	697a      	ldr	r2, [r7, #20]
 800b038:	4313      	orrs	r3, r2
 800b03a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b042:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a19      	ldr	r2, [pc, #100]	; (800b0ac <TIM_OC2_SetConfig+0xe8>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d007      	beq.n	800b05c <TIM_OC2_SetConfig+0x98>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a18      	ldr	r2, [pc, #96]	; (800b0b0 <TIM_OC2_SetConfig+0xec>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d003      	beq.n	800b05c <TIM_OC2_SetConfig+0x98>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a17      	ldr	r2, [pc, #92]	; (800b0b4 <TIM_OC2_SetConfig+0xf0>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d113      	bne.n	800b084 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b06a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	4313      	orrs	r3, r2
 800b076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	4313      	orrs	r3, r2
 800b082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	621a      	str	r2, [r3, #32]
}
 800b09e:	bf00      	nop
 800b0a0:	371c      	adds	r7, #28
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	40012c00 	.word	0x40012c00
 800b0b0:	40014000 	.word	0x40014000
 800b0b4:	40014400 	.word	0x40014400

0800b0b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b087      	sub	sp, #28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f023 0303 	bic.w	r3, r3, #3
 800b0f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	021b      	lsls	r3, r3, #8
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	4313      	orrs	r3, r2
 800b110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a21      	ldr	r2, [pc, #132]	; (800b19c <TIM_OC3_SetConfig+0xe4>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d10d      	bne.n	800b136 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	021b      	lsls	r3, r3, #8
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a18      	ldr	r2, [pc, #96]	; (800b19c <TIM_OC3_SetConfig+0xe4>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d007      	beq.n	800b14e <TIM_OC3_SetConfig+0x96>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a17      	ldr	r2, [pc, #92]	; (800b1a0 <TIM_OC3_SetConfig+0xe8>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d003      	beq.n	800b14e <TIM_OC3_SetConfig+0x96>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a16      	ldr	r2, [pc, #88]	; (800b1a4 <TIM_OC3_SetConfig+0xec>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d113      	bne.n	800b176 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b15c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	011b      	lsls	r3, r3, #4
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	4313      	orrs	r3, r2
 800b168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	011b      	lsls	r3, r3, #4
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	4313      	orrs	r3, r2
 800b174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	621a      	str	r2, [r3, #32]
}
 800b190:	bf00      	nop
 800b192:	371c      	adds	r7, #28
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	40012c00 	.word	0x40012c00
 800b1a0:	40014000 	.word	0x40014000
 800b1a4:	40014400 	.word	0x40014400

0800b1a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	021b      	lsls	r3, r3, #8
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	031b      	lsls	r3, r3, #12
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	4313      	orrs	r3, r2
 800b202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a14      	ldr	r2, [pc, #80]	; (800b258 <TIM_OC4_SetConfig+0xb0>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d007      	beq.n	800b21c <TIM_OC4_SetConfig+0x74>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a13      	ldr	r2, [pc, #76]	; (800b25c <TIM_OC4_SetConfig+0xb4>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d003      	beq.n	800b21c <TIM_OC4_SetConfig+0x74>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a12      	ldr	r2, [pc, #72]	; (800b260 <TIM_OC4_SetConfig+0xb8>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d109      	bne.n	800b230 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	019b      	lsls	r3, r3, #6
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	621a      	str	r2, [r3, #32]
}
 800b24a:	bf00      	nop
 800b24c:	371c      	adds	r7, #28
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	bf00      	nop
 800b258:	40012c00 	.word	0x40012c00
 800b25c:	40014000 	.word	0x40014000
 800b260:	40014400 	.word	0x40014400

0800b264 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a1b      	ldr	r3, [r3, #32]
 800b27e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b2a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	041b      	lsls	r3, r3, #16
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a13      	ldr	r2, [pc, #76]	; (800b308 <TIM_OC5_SetConfig+0xa4>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d007      	beq.n	800b2ce <TIM_OC5_SetConfig+0x6a>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a12      	ldr	r2, [pc, #72]	; (800b30c <TIM_OC5_SetConfig+0xa8>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d003      	beq.n	800b2ce <TIM_OC5_SetConfig+0x6a>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a11      	ldr	r2, [pc, #68]	; (800b310 <TIM_OC5_SetConfig+0xac>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d109      	bne.n	800b2e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	621a      	str	r2, [r3, #32]
}
 800b2fc:	bf00      	nop
 800b2fe:	371c      	adds	r7, #28
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	40012c00 	.word	0x40012c00
 800b30c:	40014000 	.word	0x40014000
 800b310:	40014400 	.word	0x40014400

0800b314 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	021b      	lsls	r3, r3, #8
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4313      	orrs	r3, r2
 800b352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b35a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	051b      	lsls	r3, r3, #20
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a14      	ldr	r2, [pc, #80]	; (800b3bc <TIM_OC6_SetConfig+0xa8>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d007      	beq.n	800b380 <TIM_OC6_SetConfig+0x6c>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a13      	ldr	r2, [pc, #76]	; (800b3c0 <TIM_OC6_SetConfig+0xac>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d003      	beq.n	800b380 <TIM_OC6_SetConfig+0x6c>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a12      	ldr	r2, [pc, #72]	; (800b3c4 <TIM_OC6_SetConfig+0xb0>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d109      	bne.n	800b394 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	029b      	lsls	r3, r3, #10
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	4313      	orrs	r3, r2
 800b392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	621a      	str	r2, [r3, #32]
}
 800b3ae:	bf00      	nop
 800b3b0:	371c      	adds	r7, #28
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	40012c00 	.word	0x40012c00
 800b3c0:	40014000 	.word	0x40014000
 800b3c4:	40014400 	.word	0x40014400

0800b3c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f003 031f 	and.w	r3, r3, #31
 800b3da:	2201      	movs	r2, #1
 800b3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6a1a      	ldr	r2, [r3, #32]
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	43db      	mvns	r3, r3
 800b3ea:	401a      	ands	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6a1a      	ldr	r2, [r3, #32]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	f003 031f 	and.w	r3, r3, #31
 800b3fa:	6879      	ldr	r1, [r7, #4]
 800b3fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b400:	431a      	orrs	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	621a      	str	r2, [r3, #32]
}
 800b406:	bf00      	nop
 800b408:	371c      	adds	r7, #28
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
	...

0800b414 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b41e:	2300      	movs	r3, #0
 800b420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d101      	bne.n	800b430 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b42c:	2302      	movs	r3, #2
 800b42e:	e060      	b.n	800b4f2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	4313      	orrs	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	4313      	orrs	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	695b      	ldr	r3, [r3, #20]
 800b488:	4313      	orrs	r3, r2
 800b48a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	041b      	lsls	r3, r3, #16
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a14      	ldr	r2, [pc, #80]	; (800b500 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d115      	bne.n	800b4e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	051b      	lsls	r3, r3, #20
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	6a1b      	ldr	r3, [r3, #32]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	40012c00 	.word	0x40012c00

0800b504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e040      	b.n	800b598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f7f9 fe10 	bl	800514c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2224      	movs	r2, #36	; 0x24
 800b530:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 0201 	bic.w	r2, r2, #1
 800b540:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fc0e 	bl	800bd64 <UART_SetConfig>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d101      	bne.n	800b552 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e022      	b.n	800b598 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fe5c 	bl	800c218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b56e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689a      	ldr	r2, [r3, #8]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b57e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f042 0201 	orr.w	r2, r2, #1
 800b58e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fee3 	bl	800c35c <UART_CheckIdleState>
 800b596:	4603      	mov	r3, r0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08a      	sub	sp, #40	; 0x28
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	603b      	str	r3, [r7, #0]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5b4:	2b20      	cmp	r3, #32
 800b5b6:	f040 8082 	bne.w	800b6be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <HAL_UART_Transmit+0x26>
 800b5c0:	88fb      	ldrh	r3, [r7, #6]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e07a      	b.n	800b6c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d101      	bne.n	800b5d8 <HAL_UART_Transmit+0x38>
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	e073      	b.n	800b6c0 <HAL_UART_Transmit+0x120>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2221      	movs	r2, #33	; 0x21
 800b5ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5ee:	f7fa fd2b 	bl	8006048 <HAL_GetTick>
 800b5f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	88fa      	ldrh	r2, [r7, #6]
 800b600:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b60c:	d108      	bne.n	800b620 <HAL_UART_Transmit+0x80>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d104      	bne.n	800b620 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b616:	2300      	movs	r3, #0
 800b618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	61bb      	str	r3, [r7, #24]
 800b61e:	e003      	b.n	800b628 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b624:	2300      	movs	r3, #0
 800b626:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b630:	e02d      	b.n	800b68e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2200      	movs	r2, #0
 800b63a:	2180      	movs	r1, #128	; 0x80
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 fed6 	bl	800c3ee <UART_WaitOnFlagUntilTimeout>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d001      	beq.n	800b64c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e039      	b.n	800b6c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10b      	bne.n	800b66a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	881a      	ldrh	r2, [r3, #0]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b65e:	b292      	uxth	r2, r2
 800b660:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	3302      	adds	r3, #2
 800b666:	61bb      	str	r3, [r7, #24]
 800b668:	e008      	b.n	800b67c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	781a      	ldrb	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	b292      	uxth	r2, r2
 800b674:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	3301      	adds	r3, #1
 800b67a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b682:	b29b      	uxth	r3, r3
 800b684:	3b01      	subs	r3, #1
 800b686:	b29a      	uxth	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b694:	b29b      	uxth	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1cb      	bne.n	800b632 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	9300      	str	r3, [sp, #0]
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2140      	movs	r1, #64	; 0x40
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 fea2 	bl	800c3ee <UART_WaitOnFlagUntilTimeout>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e005      	b.n	800b6c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e000      	b.n	800b6c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b6be:	2302      	movs	r3, #2
  }
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3720      	adds	r7, #32
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08a      	sub	sp, #40	; 0x28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6da:	2b20      	cmp	r3, #32
 800b6dc:	d142      	bne.n	800b764 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <HAL_UART_Receive_IT+0x22>
 800b6e4:	88fb      	ldrh	r3, [r7, #6]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e03b      	b.n	800b766 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d101      	bne.n	800b6fc <HAL_UART_Receive_IT+0x34>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	e034      	b.n	800b766 <HAL_UART_Receive_IT+0x9e>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a18      	ldr	r2, [pc, #96]	; (800b770 <HAL_UART_Receive_IT+0xa8>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d01f      	beq.n	800b754 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d018      	beq.n	800b754 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	e853 3f00 	ldrex	r3, [r3]
 800b72e:	613b      	str	r3, [r7, #16]
   return(result);
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b736:	627b      	str	r3, [r7, #36]	; 0x24
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	623b      	str	r3, [r7, #32]
 800b742:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	69f9      	ldr	r1, [r7, #28]
 800b746:	6a3a      	ldr	r2, [r7, #32]
 800b748:	e841 2300 	strex	r3, r2, [r1]
 800b74c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e6      	bne.n	800b722 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	461a      	mov	r2, r3
 800b758:	68b9      	ldr	r1, [r7, #8]
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 ff0c 	bl	800c578 <UART_Start_Receive_IT>
 800b760:	4603      	mov	r3, r0
 800b762:	e000      	b.n	800b766 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b764:	2302      	movs	r3, #2
  }
}
 800b766:	4618      	mov	r0, r3
 800b768:	3728      	adds	r7, #40	; 0x28
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	40008000 	.word	0x40008000

0800b774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b0ba      	sub	sp, #232	; 0xe8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b79a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b79e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b7a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d115      	bne.n	800b7dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b7b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7b4:	f003 0320 	and.w	r3, r3, #32
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d00f      	beq.n	800b7dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b7bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7c0:	f003 0320 	and.w	r3, r3, #32
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 82a6 	beq.w	800bd1e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	4798      	blx	r3
      }
      return;
 800b7da:	e2a0      	b.n	800bd1e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b7dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 8117 	beq.w	800ba14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b7e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b7f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b7f6:	4b85      	ldr	r3, [pc, #532]	; (800ba0c <HAL_UART_IRQHandler+0x298>)
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 810a 	beq.w	800ba14 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d011      	beq.n	800b830 <HAL_UART_IRQHandler+0xbc>
 800b80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2201      	movs	r2, #1
 800b81e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b826:	f043 0201 	orr.w	r2, r3, #1
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d011      	beq.n	800b860 <HAL_UART_IRQHandler+0xec>
 800b83c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00b      	beq.n	800b860 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2202      	movs	r2, #2
 800b84e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b856:	f043 0204 	orr.w	r2, r3, #4
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d011      	beq.n	800b890 <HAL_UART_IRQHandler+0x11c>
 800b86c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00b      	beq.n	800b890 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2204      	movs	r2, #4
 800b87e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b886:	f043 0202 	orr.w	r2, r3, #2
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b894:	f003 0308 	and.w	r3, r3, #8
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d017      	beq.n	800b8cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b89c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8a0:	f003 0320 	and.w	r3, r3, #32
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d105      	bne.n	800b8b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b8a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2208      	movs	r2, #8
 800b8ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c2:	f043 0208 	orr.w	r2, r3, #8
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d012      	beq.n	800b8fe <HAL_UART_IRQHandler+0x18a>
 800b8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00c      	beq.n	800b8fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8f4:	f043 0220 	orr.w	r2, r3, #32
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b904:	2b00      	cmp	r3, #0
 800b906:	f000 820c 	beq.w	800bd22 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b90a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b90e:	f003 0320 	and.w	r3, r3, #32
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00d      	beq.n	800b932 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b91a:	f003 0320 	and.w	r3, r3, #32
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d007      	beq.n	800b932 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b938:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b946:	2b40      	cmp	r3, #64	; 0x40
 800b948:	d005      	beq.n	800b956 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b94a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b94e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b952:	2b00      	cmp	r3, #0
 800b954:	d04f      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fed8 	bl	800c70c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b966:	2b40      	cmp	r3, #64	; 0x40
 800b968:	d141      	bne.n	800b9ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3308      	adds	r3, #8
 800b970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b978:	e853 3f00 	ldrex	r3, [r3]
 800b97c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3308      	adds	r3, #8
 800b992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b99a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b9ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1d9      	bne.n	800b96a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d013      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c2:	4a13      	ldr	r2, [pc, #76]	; (800ba10 <HAL_UART_IRQHandler+0x29c>)
 800b9c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f7fc f996 	bl	8007cfc <HAL_DMA_Abort_IT>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d017      	beq.n	800ba06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e4:	e00f      	b.n	800ba06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7f6 fb64 	bl	80020b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ec:	e00b      	b.n	800ba06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7f6 fb60 	bl	80020b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9f4:	e007      	b.n	800ba06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7f6 fb5c 	bl	80020b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ba04:	e18d      	b.n	800bd22 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba06:	bf00      	nop
    return;
 800ba08:	e18b      	b.n	800bd22 <HAL_UART_IRQHandler+0x5ae>
 800ba0a:	bf00      	nop
 800ba0c:	04000120 	.word	0x04000120
 800ba10:	0800c7d3 	.word	0x0800c7d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	f040 8146 	bne.w	800bcaa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba22:	f003 0310 	and.w	r3, r3, #16
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	f000 813f 	beq.w	800bcaa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba30:	f003 0310 	and.w	r3, r3, #16
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 8138 	beq.w	800bcaa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2210      	movs	r2, #16
 800ba40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba4c:	2b40      	cmp	r3, #64	; 0x40
 800ba4e:	f040 80b4 	bne.w	800bbba <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 815f 	beq.w	800bd26 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba72:	429a      	cmp	r2, r3
 800ba74:	f080 8157 	bcs.w	800bd26 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0320 	and.w	r3, r3, #32
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f040 8085 	bne.w	800bb9e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800baa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800baac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	461a      	mov	r2, r3
 800baba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800babe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bac2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800baca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bace:	e841 2300 	strex	r3, r2, [r1]
 800bad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1da      	bne.n	800ba94 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	3308      	adds	r3, #8
 800bae4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bae8:	e853 3f00 	ldrex	r3, [r3]
 800baec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800baee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baf0:	f023 0301 	bic.w	r3, r3, #1
 800baf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3308      	adds	r3, #8
 800bafe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb0e:	e841 2300 	strex	r3, r2, [r1]
 800bb12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bb14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1e1      	bne.n	800bade <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb24:	e853 3f00 	ldrex	r3, [r3]
 800bb28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bb2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3308      	adds	r3, #8
 800bb3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb46:	e841 2300 	strex	r3, r2, [r1]
 800bb4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d1e3      	bne.n	800bb1a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2220      	movs	r2, #32
 800bb56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb6e:	f023 0310 	bic.w	r3, r3, #16
 800bb72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb80:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb88:	e841 2300 	strex	r3, r2, [r1]
 800bb8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e4      	bne.n	800bb5e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fc f871 	bl	8007c80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f8ca 	bl	800bd4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bbb8:	e0b5      	b.n	800bd26 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f000 80a7 	beq.w	800bd2a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800bbdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f000 80a2 	beq.w	800bd2a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	e853 3f00 	ldrex	r3, [r3]
 800bbf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc08:	647b      	str	r3, [r7, #68]	; 0x44
 800bc0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc10:	e841 2300 	strex	r3, r2, [r1]
 800bc14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1e4      	bne.n	800bbe6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	3308      	adds	r3, #8
 800bc22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	e853 3f00 	ldrex	r3, [r3]
 800bc2a:	623b      	str	r3, [r7, #32]
   return(result);
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	f023 0301 	bic.w	r3, r3, #1
 800bc32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc40:	633a      	str	r2, [r7, #48]	; 0x30
 800bc42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc48:	e841 2300 	strex	r3, r2, [r1]
 800bc4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1e3      	bne.n	800bc1c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2220      	movs	r2, #32
 800bc58:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f023 0310 	bic.w	r3, r3, #16
 800bc7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc88:	61fb      	str	r3, [r7, #28]
 800bc8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	69b9      	ldr	r1, [r7, #24]
 800bc8e:	69fa      	ldr	r2, [r7, #28]
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	617b      	str	r3, [r7, #20]
   return(result);
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e4      	bne.n	800bc66 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bca0:	4619      	mov	r1, r3
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f852 	bl	800bd4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bca8:	e03f      	b.n	800bd2a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bcaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00e      	beq.n	800bcd4 <HAL_UART_IRQHandler+0x560>
 800bcb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d008      	beq.n	800bcd4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bcca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 ff20 	bl	800cb12 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcd2:	e02d      	b.n	800bd30 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00e      	beq.n	800bcfe <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d008      	beq.n	800bcfe <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01c      	beq.n	800bd2e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	4798      	blx	r3
    }
    return;
 800bcfc:	e017      	b.n	800bd2e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bcfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d012      	beq.n	800bd30 <HAL_UART_IRQHandler+0x5bc>
 800bd0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00c      	beq.n	800bd30 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fd71 	bl	800c7fe <UART_EndTransmit_IT>
    return;
 800bd1c:	e008      	b.n	800bd30 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bd1e:	bf00      	nop
 800bd20:	e006      	b.n	800bd30 <HAL_UART_IRQHandler+0x5bc>
    return;
 800bd22:	bf00      	nop
 800bd24:	e004      	b.n	800bd30 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bd26:	bf00      	nop
 800bd28:	e002      	b.n	800bd30 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bd2a:	bf00      	nop
 800bd2c:	e000      	b.n	800bd30 <HAL_UART_IRQHandler+0x5bc>
    return;
 800bd2e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800bd30:	37e8      	adds	r7, #232	; 0xe8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop

0800bd38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd68:	b08a      	sub	sp, #40	; 0x28
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	689a      	ldr	r2, [r3, #8]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	431a      	orrs	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	69db      	ldr	r3, [r3, #28]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	4b9e      	ldr	r3, [pc, #632]	; (800c00c <UART_SetConfig+0x2a8>)
 800bd94:	4013      	ands	r3, r2
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	6812      	ldr	r2, [r2, #0]
 800bd9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a93      	ldr	r2, [pc, #588]	; (800c010 <UART_SetConfig+0x2ac>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d004      	beq.n	800bdd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde0:	430a      	orrs	r2, r1
 800bde2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a8a      	ldr	r2, [pc, #552]	; (800c014 <UART_SetConfig+0x2b0>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d126      	bne.n	800be3c <UART_SetConfig+0xd8>
 800bdee:	4b8a      	ldr	r3, [pc, #552]	; (800c018 <UART_SetConfig+0x2b4>)
 800bdf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdf4:	f003 0303 	and.w	r3, r3, #3
 800bdf8:	2b03      	cmp	r3, #3
 800bdfa:	d81b      	bhi.n	800be34 <UART_SetConfig+0xd0>
 800bdfc:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <UART_SetConfig+0xa0>)
 800bdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be02:	bf00      	nop
 800be04:	0800be15 	.word	0x0800be15
 800be08:	0800be25 	.word	0x0800be25
 800be0c:	0800be1d 	.word	0x0800be1d
 800be10:	0800be2d 	.word	0x0800be2d
 800be14:	2301      	movs	r3, #1
 800be16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be1a:	e0ab      	b.n	800bf74 <UART_SetConfig+0x210>
 800be1c:	2302      	movs	r3, #2
 800be1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be22:	e0a7      	b.n	800bf74 <UART_SetConfig+0x210>
 800be24:	2304      	movs	r3, #4
 800be26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be2a:	e0a3      	b.n	800bf74 <UART_SetConfig+0x210>
 800be2c:	2308      	movs	r3, #8
 800be2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be32:	e09f      	b.n	800bf74 <UART_SetConfig+0x210>
 800be34:	2310      	movs	r3, #16
 800be36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be3a:	e09b      	b.n	800bf74 <UART_SetConfig+0x210>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a76      	ldr	r2, [pc, #472]	; (800c01c <UART_SetConfig+0x2b8>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d138      	bne.n	800beb8 <UART_SetConfig+0x154>
 800be46:	4b74      	ldr	r3, [pc, #464]	; (800c018 <UART_SetConfig+0x2b4>)
 800be48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be4c:	f003 030c 	and.w	r3, r3, #12
 800be50:	2b0c      	cmp	r3, #12
 800be52:	d82d      	bhi.n	800beb0 <UART_SetConfig+0x14c>
 800be54:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <UART_SetConfig+0xf8>)
 800be56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5a:	bf00      	nop
 800be5c:	0800be91 	.word	0x0800be91
 800be60:	0800beb1 	.word	0x0800beb1
 800be64:	0800beb1 	.word	0x0800beb1
 800be68:	0800beb1 	.word	0x0800beb1
 800be6c:	0800bea1 	.word	0x0800bea1
 800be70:	0800beb1 	.word	0x0800beb1
 800be74:	0800beb1 	.word	0x0800beb1
 800be78:	0800beb1 	.word	0x0800beb1
 800be7c:	0800be99 	.word	0x0800be99
 800be80:	0800beb1 	.word	0x0800beb1
 800be84:	0800beb1 	.word	0x0800beb1
 800be88:	0800beb1 	.word	0x0800beb1
 800be8c:	0800bea9 	.word	0x0800bea9
 800be90:	2300      	movs	r3, #0
 800be92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be96:	e06d      	b.n	800bf74 <UART_SetConfig+0x210>
 800be98:	2302      	movs	r3, #2
 800be9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be9e:	e069      	b.n	800bf74 <UART_SetConfig+0x210>
 800bea0:	2304      	movs	r3, #4
 800bea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bea6:	e065      	b.n	800bf74 <UART_SetConfig+0x210>
 800bea8:	2308      	movs	r3, #8
 800beaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beae:	e061      	b.n	800bf74 <UART_SetConfig+0x210>
 800beb0:	2310      	movs	r3, #16
 800beb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beb6:	e05d      	b.n	800bf74 <UART_SetConfig+0x210>
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a58      	ldr	r2, [pc, #352]	; (800c020 <UART_SetConfig+0x2bc>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d125      	bne.n	800bf0e <UART_SetConfig+0x1aa>
 800bec2:	4b55      	ldr	r3, [pc, #340]	; (800c018 <UART_SetConfig+0x2b4>)
 800bec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bec8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800becc:	2b30      	cmp	r3, #48	; 0x30
 800bece:	d016      	beq.n	800befe <UART_SetConfig+0x19a>
 800bed0:	2b30      	cmp	r3, #48	; 0x30
 800bed2:	d818      	bhi.n	800bf06 <UART_SetConfig+0x1a2>
 800bed4:	2b20      	cmp	r3, #32
 800bed6:	d00a      	beq.n	800beee <UART_SetConfig+0x18a>
 800bed8:	2b20      	cmp	r3, #32
 800beda:	d814      	bhi.n	800bf06 <UART_SetConfig+0x1a2>
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <UART_SetConfig+0x182>
 800bee0:	2b10      	cmp	r3, #16
 800bee2:	d008      	beq.n	800bef6 <UART_SetConfig+0x192>
 800bee4:	e00f      	b.n	800bf06 <UART_SetConfig+0x1a2>
 800bee6:	2300      	movs	r3, #0
 800bee8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beec:	e042      	b.n	800bf74 <UART_SetConfig+0x210>
 800beee:	2302      	movs	r3, #2
 800bef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bef4:	e03e      	b.n	800bf74 <UART_SetConfig+0x210>
 800bef6:	2304      	movs	r3, #4
 800bef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800befc:	e03a      	b.n	800bf74 <UART_SetConfig+0x210>
 800befe:	2308      	movs	r3, #8
 800bf00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf04:	e036      	b.n	800bf74 <UART_SetConfig+0x210>
 800bf06:	2310      	movs	r3, #16
 800bf08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf0c:	e032      	b.n	800bf74 <UART_SetConfig+0x210>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a3f      	ldr	r2, [pc, #252]	; (800c010 <UART_SetConfig+0x2ac>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d12a      	bne.n	800bf6e <UART_SetConfig+0x20a>
 800bf18:	4b3f      	ldr	r3, [pc, #252]	; (800c018 <UART_SetConfig+0x2b4>)
 800bf1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bf22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf26:	d01a      	beq.n	800bf5e <UART_SetConfig+0x1fa>
 800bf28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf2c:	d81b      	bhi.n	800bf66 <UART_SetConfig+0x202>
 800bf2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf32:	d00c      	beq.n	800bf4e <UART_SetConfig+0x1ea>
 800bf34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf38:	d815      	bhi.n	800bf66 <UART_SetConfig+0x202>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <UART_SetConfig+0x1e2>
 800bf3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf42:	d008      	beq.n	800bf56 <UART_SetConfig+0x1f2>
 800bf44:	e00f      	b.n	800bf66 <UART_SetConfig+0x202>
 800bf46:	2300      	movs	r3, #0
 800bf48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf4c:	e012      	b.n	800bf74 <UART_SetConfig+0x210>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf54:	e00e      	b.n	800bf74 <UART_SetConfig+0x210>
 800bf56:	2304      	movs	r3, #4
 800bf58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf5c:	e00a      	b.n	800bf74 <UART_SetConfig+0x210>
 800bf5e:	2308      	movs	r3, #8
 800bf60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf64:	e006      	b.n	800bf74 <UART_SetConfig+0x210>
 800bf66:	2310      	movs	r3, #16
 800bf68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf6c:	e002      	b.n	800bf74 <UART_SetConfig+0x210>
 800bf6e:	2310      	movs	r3, #16
 800bf70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a25      	ldr	r2, [pc, #148]	; (800c010 <UART_SetConfig+0x2ac>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	f040 808a 	bne.w	800c094 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf84:	2b08      	cmp	r3, #8
 800bf86:	d824      	bhi.n	800bfd2 <UART_SetConfig+0x26e>
 800bf88:	a201      	add	r2, pc, #4	; (adr r2, 800bf90 <UART_SetConfig+0x22c>)
 800bf8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf8e:	bf00      	nop
 800bf90:	0800bfb5 	.word	0x0800bfb5
 800bf94:	0800bfd3 	.word	0x0800bfd3
 800bf98:	0800bfbd 	.word	0x0800bfbd
 800bf9c:	0800bfd3 	.word	0x0800bfd3
 800bfa0:	0800bfc3 	.word	0x0800bfc3
 800bfa4:	0800bfd3 	.word	0x0800bfd3
 800bfa8:	0800bfd3 	.word	0x0800bfd3
 800bfac:	0800bfd3 	.word	0x0800bfd3
 800bfb0:	0800bfcb 	.word	0x0800bfcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfb4:	f7fe f8e6 	bl	800a184 <HAL_RCC_GetPCLK1Freq>
 800bfb8:	61f8      	str	r0, [r7, #28]
        break;
 800bfba:	e010      	b.n	800bfde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfbc:	4b19      	ldr	r3, [pc, #100]	; (800c024 <UART_SetConfig+0x2c0>)
 800bfbe:	61fb      	str	r3, [r7, #28]
        break;
 800bfc0:	e00d      	b.n	800bfde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfc2:	f7fe f847 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 800bfc6:	61f8      	str	r0, [r7, #28]
        break;
 800bfc8:	e009      	b.n	800bfde <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfce:	61fb      	str	r3, [r7, #28]
        break;
 800bfd0:	e005      	b.n	800bfde <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bfdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f000 8109 	beq.w	800c1f8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	685a      	ldr	r2, [r3, #4]
 800bfea:	4613      	mov	r3, r2
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	4413      	add	r3, r2
 800bff0:	69fa      	ldr	r2, [r7, #28]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d305      	bcc.n	800c002 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bffc:	69fa      	ldr	r2, [r7, #28]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d912      	bls.n	800c028 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c008:	e0f6      	b.n	800c1f8 <UART_SetConfig+0x494>
 800c00a:	bf00      	nop
 800c00c:	efff69f3 	.word	0xefff69f3
 800c010:	40008000 	.word	0x40008000
 800c014:	40013800 	.word	0x40013800
 800c018:	40021000 	.word	0x40021000
 800c01c:	40004400 	.word	0x40004400
 800c020:	40004800 	.word	0x40004800
 800c024:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	2200      	movs	r2, #0
 800c02c:	461c      	mov	r4, r3
 800c02e:	4615      	mov	r5, r2
 800c030:	f04f 0200 	mov.w	r2, #0
 800c034:	f04f 0300 	mov.w	r3, #0
 800c038:	022b      	lsls	r3, r5, #8
 800c03a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c03e:	0222      	lsls	r2, r4, #8
 800c040:	68f9      	ldr	r1, [r7, #12]
 800c042:	6849      	ldr	r1, [r1, #4]
 800c044:	0849      	lsrs	r1, r1, #1
 800c046:	2000      	movs	r0, #0
 800c048:	4688      	mov	r8, r1
 800c04a:	4681      	mov	r9, r0
 800c04c:	eb12 0a08 	adds.w	sl, r2, r8
 800c050:	eb43 0b09 	adc.w	fp, r3, r9
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	603b      	str	r3, [r7, #0]
 800c05c:	607a      	str	r2, [r7, #4]
 800c05e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c062:	4650      	mov	r0, sl
 800c064:	4659      	mov	r1, fp
 800c066:	f7f4 ff4d 	bl	8000f04 <__aeabi_uldivmod>
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	4613      	mov	r3, r2
 800c070:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c078:	d308      	bcc.n	800c08c <UART_SetConfig+0x328>
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c080:	d204      	bcs.n	800c08c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	69ba      	ldr	r2, [r7, #24]
 800c088:	60da      	str	r2, [r3, #12]
 800c08a:	e0b5      	b.n	800c1f8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c092:	e0b1      	b.n	800c1f8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	69db      	ldr	r3, [r3, #28]
 800c098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c09c:	d15d      	bne.n	800c15a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800c09e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0a2:	2b08      	cmp	r3, #8
 800c0a4:	d827      	bhi.n	800c0f6 <UART_SetConfig+0x392>
 800c0a6:	a201      	add	r2, pc, #4	; (adr r2, 800c0ac <UART_SetConfig+0x348>)
 800c0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ac:	0800c0d1 	.word	0x0800c0d1
 800c0b0:	0800c0d9 	.word	0x0800c0d9
 800c0b4:	0800c0e1 	.word	0x0800c0e1
 800c0b8:	0800c0f7 	.word	0x0800c0f7
 800c0bc:	0800c0e7 	.word	0x0800c0e7
 800c0c0:	0800c0f7 	.word	0x0800c0f7
 800c0c4:	0800c0f7 	.word	0x0800c0f7
 800c0c8:	0800c0f7 	.word	0x0800c0f7
 800c0cc:	0800c0ef 	.word	0x0800c0ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0d0:	f7fe f858 	bl	800a184 <HAL_RCC_GetPCLK1Freq>
 800c0d4:	61f8      	str	r0, [r7, #28]
        break;
 800c0d6:	e014      	b.n	800c102 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0d8:	f7fe f86a 	bl	800a1b0 <HAL_RCC_GetPCLK2Freq>
 800c0dc:	61f8      	str	r0, [r7, #28]
        break;
 800c0de:	e010      	b.n	800c102 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0e0:	4b4c      	ldr	r3, [pc, #304]	; (800c214 <UART_SetConfig+0x4b0>)
 800c0e2:	61fb      	str	r3, [r7, #28]
        break;
 800c0e4:	e00d      	b.n	800c102 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0e6:	f7fd ffb5 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 800c0ea:	61f8      	str	r0, [r7, #28]
        break;
 800c0ec:	e009      	b.n	800c102 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0f2:	61fb      	str	r3, [r7, #28]
        break;
 800c0f4:	e005      	b.n	800c102 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d077      	beq.n	800c1f8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	005a      	lsls	r2, r3, #1
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	085b      	lsrs	r3, r3, #1
 800c112:	441a      	add	r2, r3
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	2b0f      	cmp	r3, #15
 800c122:	d916      	bls.n	800c152 <UART_SetConfig+0x3ee>
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c12a:	d212      	bcs.n	800c152 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	b29b      	uxth	r3, r3
 800c130:	f023 030f 	bic.w	r3, r3, #15
 800c134:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	085b      	lsrs	r3, r3, #1
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	f003 0307 	and.w	r3, r3, #7
 800c140:	b29a      	uxth	r2, r3
 800c142:	8afb      	ldrh	r3, [r7, #22]
 800c144:	4313      	orrs	r3, r2
 800c146:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	8afa      	ldrh	r2, [r7, #22]
 800c14e:	60da      	str	r2, [r3, #12]
 800c150:	e052      	b.n	800c1f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c158:	e04e      	b.n	800c1f8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c15a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c15e:	2b08      	cmp	r3, #8
 800c160:	d827      	bhi.n	800c1b2 <UART_SetConfig+0x44e>
 800c162:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <UART_SetConfig+0x404>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c18d 	.word	0x0800c18d
 800c16c:	0800c195 	.word	0x0800c195
 800c170:	0800c19d 	.word	0x0800c19d
 800c174:	0800c1b3 	.word	0x0800c1b3
 800c178:	0800c1a3 	.word	0x0800c1a3
 800c17c:	0800c1b3 	.word	0x0800c1b3
 800c180:	0800c1b3 	.word	0x0800c1b3
 800c184:	0800c1b3 	.word	0x0800c1b3
 800c188:	0800c1ab 	.word	0x0800c1ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c18c:	f7fd fffa 	bl	800a184 <HAL_RCC_GetPCLK1Freq>
 800c190:	61f8      	str	r0, [r7, #28]
        break;
 800c192:	e014      	b.n	800c1be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c194:	f7fe f80c 	bl	800a1b0 <HAL_RCC_GetPCLK2Freq>
 800c198:	61f8      	str	r0, [r7, #28]
        break;
 800c19a:	e010      	b.n	800c1be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c19c:	4b1d      	ldr	r3, [pc, #116]	; (800c214 <UART_SetConfig+0x4b0>)
 800c19e:	61fb      	str	r3, [r7, #28]
        break;
 800c1a0:	e00d      	b.n	800c1be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1a2:	f7fd ff57 	bl	800a054 <HAL_RCC_GetSysClockFreq>
 800c1a6:	61f8      	str	r0, [r7, #28]
        break;
 800c1a8:	e009      	b.n	800c1be <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1ae:	61fb      	str	r3, [r7, #28]
        break;
 800c1b0:	e005      	b.n	800c1be <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c1bc:	bf00      	nop
    }

    if (pclk != 0U)
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d019      	beq.n	800c1f8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	085a      	lsrs	r2, r3, #1
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	441a      	add	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	2b0f      	cmp	r3, #15
 800c1dc:	d909      	bls.n	800c1f2 <UART_SetConfig+0x48e>
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1e4:	d205      	bcs.n	800c1f2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	60da      	str	r2, [r3, #12]
 800c1f0:	e002      	b.n	800c1f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c204:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3728      	adds	r7, #40	; 0x28
 800c20c:	46bd      	mov	sp, r7
 800c20e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c212:	bf00      	nop
 800c214:	00f42400 	.word	0x00f42400

0800c218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c224:	f003 0301 	and.w	r3, r3, #1
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	430a      	orrs	r2, r1
 800c240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c246:	f003 0302 	and.w	r3, r3, #2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00a      	beq.n	800c264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	430a      	orrs	r2, r1
 800c262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	f003 0304 	and.w	r3, r3, #4
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00a      	beq.n	800c286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	430a      	orrs	r2, r1
 800c284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28a:	f003 0308 	and.w	r3, r3, #8
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00a      	beq.n	800c2a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ac:	f003 0310 	and.w	r3, r3, #16
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00a      	beq.n	800c2ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	430a      	orrs	r2, r1
 800c2c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ce:	f003 0320 	and.w	r3, r3, #32
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00a      	beq.n	800c2ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	430a      	orrs	r2, r1
 800c2ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d01a      	beq.n	800c32e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c316:	d10a      	bne.n	800c32e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00a      	beq.n	800c350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	430a      	orrs	r2, r1
 800c34e:	605a      	str	r2, [r3, #4]
  }
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af02      	add	r7, sp, #8
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c36c:	f7f9 fe6c 	bl	8006048 <HAL_GetTick>
 800c370:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 0308 	and.w	r3, r3, #8
 800c37c:	2b08      	cmp	r3, #8
 800c37e:	d10e      	bne.n	800c39e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2200      	movs	r2, #0
 800c38a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 f82d 	bl	800c3ee <UART_WaitOnFlagUntilTimeout>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d001      	beq.n	800c39e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c39a:	2303      	movs	r3, #3
 800c39c:	e023      	b.n	800c3e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 0304 	and.w	r3, r3, #4
 800c3a8:	2b04      	cmp	r3, #4
 800c3aa:	d10e      	bne.n	800c3ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f817 	bl	800c3ee <UART_WaitOnFlagUntilTimeout>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3c6:	2303      	movs	r3, #3
 800c3c8:	e00d      	b.n	800c3e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2220      	movs	r2, #32
 800c3d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b09c      	sub	sp, #112	; 0x70
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	60f8      	str	r0, [r7, #12]
 800c3f6:	60b9      	str	r1, [r7, #8]
 800c3f8:	603b      	str	r3, [r7, #0]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3fe:	e0a5      	b.n	800c54c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c406:	f000 80a1 	beq.w	800c54c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c40a:	f7f9 fe1d 	bl	8006048 <HAL_GetTick>
 800c40e:	4602      	mov	r2, r0
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	1ad3      	subs	r3, r2, r3
 800c414:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c416:	429a      	cmp	r2, r3
 800c418:	d302      	bcc.n	800c420 <UART_WaitOnFlagUntilTimeout+0x32>
 800c41a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d13e      	bne.n	800c49e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c428:	e853 3f00 	ldrex	r3, [r3]
 800c42c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c434:	667b      	str	r3, [r7, #100]	; 0x64
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c43e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c440:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c442:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c444:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c446:	e841 2300 	strex	r3, r2, [r1]
 800c44a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c44c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1e6      	bne.n	800c420 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3308      	adds	r3, #8
 800c458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c45c:	e853 3f00 	ldrex	r3, [r3]
 800c460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	f023 0301 	bic.w	r3, r3, #1
 800c468:	663b      	str	r3, [r7, #96]	; 0x60
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c472:	64ba      	str	r2, [r7, #72]	; 0x48
 800c474:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c47a:	e841 2300 	strex	r3, r2, [r1]
 800c47e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1e5      	bne.n	800c452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2220      	movs	r2, #32
 800c48a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2220      	movs	r2, #32
 800c490:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e067      	b.n	800c56e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 0304 	and.w	r3, r3, #4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d04f      	beq.n	800c54c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4ba:	d147      	bne.n	800c54c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c4c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	e853 3f00 	ldrex	r3, [r3]
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4e4:	637b      	str	r3, [r7, #52]	; 0x34
 800c4e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4ec:	e841 2300 	strex	r3, r2, [r1]
 800c4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1e6      	bne.n	800c4c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	3308      	adds	r3, #8
 800c4fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	e853 3f00 	ldrex	r3, [r3]
 800c506:	613b      	str	r3, [r7, #16]
   return(result);
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f023 0301 	bic.w	r3, r3, #1
 800c50e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3308      	adds	r3, #8
 800c516:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c518:	623a      	str	r2, [r7, #32]
 800c51a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51c:	69f9      	ldr	r1, [r7, #28]
 800c51e:	6a3a      	ldr	r2, [r7, #32]
 800c520:	e841 2300 	strex	r3, r2, [r1]
 800c524:	61bb      	str	r3, [r7, #24]
   return(result);
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e5      	bne.n	800c4f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2220      	movs	r2, #32
 800c530:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2220      	movs	r2, #32
 800c536:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2220      	movs	r2, #32
 800c53c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c548:	2303      	movs	r3, #3
 800c54a:	e010      	b.n	800c56e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	69da      	ldr	r2, [r3, #28]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	4013      	ands	r3, r2
 800c556:	68ba      	ldr	r2, [r7, #8]
 800c558:	429a      	cmp	r2, r3
 800c55a:	bf0c      	ite	eq
 800c55c:	2301      	moveq	r3, #1
 800c55e:	2300      	movne	r3, #0
 800c560:	b2db      	uxtb	r3, r3
 800c562:	461a      	mov	r2, r3
 800c564:	79fb      	ldrb	r3, [r7, #7]
 800c566:	429a      	cmp	r2, r3
 800c568:	f43f af4a 	beq.w	800c400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3770      	adds	r7, #112	; 0x70
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
	...

0800c578 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c578:	b480      	push	{r7}
 800c57a:	b097      	sub	sp, #92	; 0x5c
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	4613      	mov	r3, r2
 800c584:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	88fa      	ldrh	r2, [r7, #6]
 800c590:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5aa:	d10e      	bne.n	800c5ca <UART_Start_Receive_IT+0x52>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d105      	bne.n	800c5c0 <UART_Start_Receive_IT+0x48>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c5ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5be:	e02d      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	22ff      	movs	r2, #255	; 0xff
 800c5c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5c8:	e028      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10d      	bne.n	800c5ee <UART_Start_Receive_IT+0x76>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d104      	bne.n	800c5e4 <UART_Start_Receive_IT+0x6c>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	22ff      	movs	r2, #255	; 0xff
 800c5de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5e2:	e01b      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	227f      	movs	r2, #127	; 0x7f
 800c5e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c5ec:	e016      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5f6:	d10d      	bne.n	800c614 <UART_Start_Receive_IT+0x9c>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d104      	bne.n	800c60a <UART_Start_Receive_IT+0x92>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	227f      	movs	r2, #127	; 0x7f
 800c604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c608:	e008      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	223f      	movs	r2, #63	; 0x3f
 800c60e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c612:	e003      	b.n	800c61c <UART_Start_Receive_IT+0xa4>
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2222      	movs	r2, #34	; 0x22
 800c628:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	3308      	adds	r3, #8
 800c630:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c634:	e853 3f00 	ldrex	r3, [r3]
 800c638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	f043 0301 	orr.w	r3, r3, #1
 800c640:	657b      	str	r3, [r7, #84]	; 0x54
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3308      	adds	r3, #8
 800c648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c64a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c64c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c652:	e841 2300 	strex	r3, r2, [r1]
 800c656:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1e5      	bne.n	800c62a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c666:	d107      	bne.n	800c678 <UART_Start_Receive_IT+0x100>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	691b      	ldr	r3, [r3, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	4a24      	ldr	r2, [pc, #144]	; (800c704 <UART_Start_Receive_IT+0x18c>)
 800c674:	665a      	str	r2, [r3, #100]	; 0x64
 800c676:	e002      	b.n	800c67e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	4a23      	ldr	r2, [pc, #140]	; (800c708 <UART_Start_Receive_IT+0x190>)
 800c67c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d019      	beq.n	800c6c2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c6a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c6ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6b4:	e841 2300 	strex	r3, r2, [r1]
 800c6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1e6      	bne.n	800c68e <UART_Start_Receive_IT+0x116>
 800c6c0:	e018      	b.n	800c6f4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	e853 3f00 	ldrex	r3, [r3]
 800c6ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f043 0320 	orr.w	r3, r3, #32
 800c6d6:	653b      	str	r3, [r7, #80]	; 0x50
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	461a      	mov	r2, r3
 800c6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6e0:	623b      	str	r3, [r7, #32]
 800c6e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e4:	69f9      	ldr	r1, [r7, #28]
 800c6e6:	6a3a      	ldr	r2, [r7, #32]
 800c6e8:	e841 2300 	strex	r3, r2, [r1]
 800c6ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1e6      	bne.n	800c6c2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	375c      	adds	r7, #92	; 0x5c
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	0800c9b3 	.word	0x0800c9b3
 800c708:	0800c853 	.word	0x0800c853

0800c70c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b095      	sub	sp, #84	; 0x54
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c728:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c732:	643b      	str	r3, [r7, #64]	; 0x40
 800c734:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e6      	bne.n	800c714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3308      	adds	r3, #8
 800c74c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	6a3b      	ldr	r3, [r7, #32]
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	61fb      	str	r3, [r7, #28]
   return(result);
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	f023 0301 	bic.w	r3, r3, #1
 800c75c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3308      	adds	r3, #8
 800c764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c766:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c76c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e5      	bne.n	800c746 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d118      	bne.n	800c7b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	e853 3f00 	ldrex	r3, [r3]
 800c78e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	f023 0310 	bic.w	r3, r3, #16
 800c796:	647b      	str	r3, [r7, #68]	; 0x44
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	461a      	mov	r2, r3
 800c79e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7a0:	61bb      	str	r3, [r7, #24]
 800c7a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a4:	6979      	ldr	r1, [r7, #20]
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	e841 2300 	strex	r3, r2, [r1]
 800c7ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1e6      	bne.n	800c782 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2220      	movs	r2, #32
 800c7b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c7c6:	bf00      	nop
 800c7c8:	3754      	adds	r7, #84	; 0x54
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr

0800c7d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f7f5 fc5f 	bl	80020b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7f6:	bf00      	nop
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b088      	sub	sp, #32
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	e853 3f00 	ldrex	r3, [r3]
 800c812:	60bb      	str	r3, [r7, #8]
   return(result);
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c81a:	61fb      	str	r3, [r7, #28]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	461a      	mov	r2, r3
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	61bb      	str	r3, [r7, #24]
 800c826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c828:	6979      	ldr	r1, [r7, #20]
 800c82a:	69ba      	ldr	r2, [r7, #24]
 800c82c:	e841 2300 	strex	r3, r2, [r1]
 800c830:	613b      	str	r3, [r7, #16]
   return(result);
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1e6      	bne.n	800c806 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2220      	movs	r2, #32
 800c83c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff fa77 	bl	800bd38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c84a:	bf00      	nop
 800c84c:	3720      	adds	r7, #32
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b096      	sub	sp, #88	; 0x58
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c860:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c868:	2b22      	cmp	r3, #34	; 0x22
 800c86a:	f040 8094 	bne.w	800c996 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c874:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c878:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c87c:	b2d9      	uxtb	r1, r3
 800c87e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c882:	b2da      	uxtb	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c888:	400a      	ands	r2, r1
 800c88a:	b2d2      	uxtb	r2, r2
 800c88c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c892:	1c5a      	adds	r2, r3, #1
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d179      	bne.n	800c9aa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	e853 3f00 	ldrex	r3, [r3]
 800c8c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8ca:	653b      	str	r3, [r7, #80]	; 0x50
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d4:	647b      	str	r3, [r7, #68]	; 0x44
 800c8d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c8da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8dc:	e841 2300 	strex	r3, r2, [r1]
 800c8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1e6      	bne.n	800c8b6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	3308      	adds	r3, #8
 800c8ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	623b      	str	r3, [r7, #32]
   return(result);
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	f023 0301 	bic.w	r3, r3, #1
 800c8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	3308      	adds	r3, #8
 800c906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c908:	633a      	str	r2, [r7, #48]	; 0x30
 800c90a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c90e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e5      	bne.n	800c8e8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2220      	movs	r2, #32
 800c920:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2200      	movs	r2, #0
 800c926:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d12e      	bne.n	800c98e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	60fb      	str	r3, [r7, #12]
   return(result);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f023 0310 	bic.w	r3, r3, #16
 800c94a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c954:	61fb      	str	r3, [r7, #28]
 800c956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	69b9      	ldr	r1, [r7, #24]
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	617b      	str	r3, [r7, #20]
   return(result);
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e6      	bne.n	800c936 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	69db      	ldr	r3, [r3, #28]
 800c96e:	f003 0310 	and.w	r3, r3, #16
 800c972:	2b10      	cmp	r3, #16
 800c974:	d103      	bne.n	800c97e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2210      	movs	r2, #16
 800c97c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7ff f9e0 	bl	800bd4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c98c:	e00d      	b.n	800c9aa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7f5 fb6c 	bl	800206c <HAL_UART_RxCpltCallback>
}
 800c994:	e009      	b.n	800c9aa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	8b1b      	ldrh	r3, [r3, #24]
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f042 0208 	orr.w	r2, r2, #8
 800c9a6:	b292      	uxth	r2, r2
 800c9a8:	831a      	strh	r2, [r3, #24]
}
 800c9aa:	bf00      	nop
 800c9ac:	3758      	adds	r7, #88	; 0x58
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b096      	sub	sp, #88	; 0x58
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9c8:	2b22      	cmp	r3, #34	; 0x22
 800c9ca:	f040 8094 	bne.w	800caf6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c9d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9dc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c9de:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c9e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9f2:	1c9a      	adds	r2, r3, #2
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	3b01      	subs	r3, #1
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d179      	bne.n	800cb0a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca1e:	e853 3f00 	ldrex	r3, [r3]
 800ca22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ca24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	461a      	mov	r2, r3
 800ca32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca34:	643b      	str	r3, [r7, #64]	; 0x40
 800ca36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca3c:	e841 2300 	strex	r3, r2, [r1]
 800ca40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1e6      	bne.n	800ca16 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3308      	adds	r3, #8
 800ca4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	e853 3f00 	ldrex	r3, [r3]
 800ca56:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	f023 0301 	bic.w	r3, r3, #1
 800ca5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3308      	adds	r3, #8
 800ca66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca68:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca70:	e841 2300 	strex	r3, r2, [r1]
 800ca74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e5      	bne.n	800ca48 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2220      	movs	r2, #32
 800ca80:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d12e      	bne.n	800caee <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	e853 3f00 	ldrex	r3, [r3]
 800caa2:	60bb      	str	r3, [r7, #8]
   return(result);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	f023 0310 	bic.w	r3, r3, #16
 800caaa:	647b      	str	r3, [r7, #68]	; 0x44
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	461a      	mov	r2, r3
 800cab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cab4:	61bb      	str	r3, [r7, #24]
 800cab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab8:	6979      	ldr	r1, [r7, #20]
 800caba:	69ba      	ldr	r2, [r7, #24]
 800cabc:	e841 2300 	strex	r3, r2, [r1]
 800cac0:	613b      	str	r3, [r7, #16]
   return(result);
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1e6      	bne.n	800ca96 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	69db      	ldr	r3, [r3, #28]
 800cace:	f003 0310 	and.w	r3, r3, #16
 800cad2:	2b10      	cmp	r3, #16
 800cad4:	d103      	bne.n	800cade <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2210      	movs	r2, #16
 800cadc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff f930 	bl	800bd4c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800caec:	e00d      	b.n	800cb0a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7f5 fabc 	bl	800206c <HAL_UART_RxCpltCallback>
}
 800caf4:	e009      	b.n	800cb0a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	8b1b      	ldrh	r3, [r3, #24]
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f042 0208 	orr.w	r2, r2, #8
 800cb06:	b292      	uxth	r2, r2
 800cb08:	831a      	strh	r2, [r3, #24]
}
 800cb0a:	bf00      	nop
 800cb0c:	3758      	adds	r7, #88	; 0x58
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cb12:	b480      	push	{r7}
 800cb14:	b083      	sub	sp, #12
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb1a:	bf00      	nop
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <__cvt>:
 800cb26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2a:	ec55 4b10 	vmov	r4, r5, d0
 800cb2e:	2d00      	cmp	r5, #0
 800cb30:	460e      	mov	r6, r1
 800cb32:	4619      	mov	r1, r3
 800cb34:	462b      	mov	r3, r5
 800cb36:	bfbb      	ittet	lt
 800cb38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb3c:	461d      	movlt	r5, r3
 800cb3e:	2300      	movge	r3, #0
 800cb40:	232d      	movlt	r3, #45	; 0x2d
 800cb42:	700b      	strb	r3, [r1, #0]
 800cb44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb4a:	4691      	mov	r9, r2
 800cb4c:	f023 0820 	bic.w	r8, r3, #32
 800cb50:	bfbc      	itt	lt
 800cb52:	4622      	movlt	r2, r4
 800cb54:	4614      	movlt	r4, r2
 800cb56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb5a:	d005      	beq.n	800cb68 <__cvt+0x42>
 800cb5c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb60:	d100      	bne.n	800cb64 <__cvt+0x3e>
 800cb62:	3601      	adds	r6, #1
 800cb64:	2102      	movs	r1, #2
 800cb66:	e000      	b.n	800cb6a <__cvt+0x44>
 800cb68:	2103      	movs	r1, #3
 800cb6a:	ab03      	add	r3, sp, #12
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	ab02      	add	r3, sp, #8
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	ec45 4b10 	vmov	d0, r4, r5
 800cb76:	4653      	mov	r3, sl
 800cb78:	4632      	mov	r2, r6
 800cb7a:	f000 ff39 	bl	800d9f0 <_dtoa_r>
 800cb7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb82:	4607      	mov	r7, r0
 800cb84:	d102      	bne.n	800cb8c <__cvt+0x66>
 800cb86:	f019 0f01 	tst.w	r9, #1
 800cb8a:	d022      	beq.n	800cbd2 <__cvt+0xac>
 800cb8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb90:	eb07 0906 	add.w	r9, r7, r6
 800cb94:	d110      	bne.n	800cbb8 <__cvt+0x92>
 800cb96:	783b      	ldrb	r3, [r7, #0]
 800cb98:	2b30      	cmp	r3, #48	; 0x30
 800cb9a:	d10a      	bne.n	800cbb2 <__cvt+0x8c>
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4620      	mov	r0, r4
 800cba2:	4629      	mov	r1, r5
 800cba4:	f7f3 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 800cba8:	b918      	cbnz	r0, 800cbb2 <__cvt+0x8c>
 800cbaa:	f1c6 0601 	rsb	r6, r6, #1
 800cbae:	f8ca 6000 	str.w	r6, [sl]
 800cbb2:	f8da 3000 	ldr.w	r3, [sl]
 800cbb6:	4499      	add	r9, r3
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2300      	movs	r3, #0
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	f7f3 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbc4:	b108      	cbz	r0, 800cbca <__cvt+0xa4>
 800cbc6:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbca:	2230      	movs	r2, #48	; 0x30
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	454b      	cmp	r3, r9
 800cbd0:	d307      	bcc.n	800cbe2 <__cvt+0xbc>
 800cbd2:	9b03      	ldr	r3, [sp, #12]
 800cbd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbd6:	1bdb      	subs	r3, r3, r7
 800cbd8:	4638      	mov	r0, r7
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	b004      	add	sp, #16
 800cbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe2:	1c59      	adds	r1, r3, #1
 800cbe4:	9103      	str	r1, [sp, #12]
 800cbe6:	701a      	strb	r2, [r3, #0]
 800cbe8:	e7f0      	b.n	800cbcc <__cvt+0xa6>

0800cbea <__exponent>:
 800cbea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbec:	4603      	mov	r3, r0
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	bfb8      	it	lt
 800cbf2:	4249      	neglt	r1, r1
 800cbf4:	f803 2b02 	strb.w	r2, [r3], #2
 800cbf8:	bfb4      	ite	lt
 800cbfa:	222d      	movlt	r2, #45	; 0x2d
 800cbfc:	222b      	movge	r2, #43	; 0x2b
 800cbfe:	2909      	cmp	r1, #9
 800cc00:	7042      	strb	r2, [r0, #1]
 800cc02:	dd2a      	ble.n	800cc5a <__exponent+0x70>
 800cc04:	f10d 0207 	add.w	r2, sp, #7
 800cc08:	4617      	mov	r7, r2
 800cc0a:	260a      	movs	r6, #10
 800cc0c:	4694      	mov	ip, r2
 800cc0e:	fb91 f5f6 	sdiv	r5, r1, r6
 800cc12:	fb06 1415 	mls	r4, r6, r5, r1
 800cc16:	3430      	adds	r4, #48	; 0x30
 800cc18:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	2c63      	cmp	r4, #99	; 0x63
 800cc20:	f102 32ff 	add.w	r2, r2, #4294967295
 800cc24:	4629      	mov	r1, r5
 800cc26:	dcf1      	bgt.n	800cc0c <__exponent+0x22>
 800cc28:	3130      	adds	r1, #48	; 0x30
 800cc2a:	f1ac 0402 	sub.w	r4, ip, #2
 800cc2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cc32:	1c41      	adds	r1, r0, #1
 800cc34:	4622      	mov	r2, r4
 800cc36:	42ba      	cmp	r2, r7
 800cc38:	d30a      	bcc.n	800cc50 <__exponent+0x66>
 800cc3a:	f10d 0209 	add.w	r2, sp, #9
 800cc3e:	eba2 020c 	sub.w	r2, r2, ip
 800cc42:	42bc      	cmp	r4, r7
 800cc44:	bf88      	it	hi
 800cc46:	2200      	movhi	r2, #0
 800cc48:	4413      	add	r3, r2
 800cc4a:	1a18      	subs	r0, r3, r0
 800cc4c:	b003      	add	sp, #12
 800cc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc50:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cc54:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cc58:	e7ed      	b.n	800cc36 <__exponent+0x4c>
 800cc5a:	2330      	movs	r3, #48	; 0x30
 800cc5c:	3130      	adds	r1, #48	; 0x30
 800cc5e:	7083      	strb	r3, [r0, #2]
 800cc60:	70c1      	strb	r1, [r0, #3]
 800cc62:	1d03      	adds	r3, r0, #4
 800cc64:	e7f1      	b.n	800cc4a <__exponent+0x60>
	...

0800cc68 <_printf_float>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	ed2d 8b02 	vpush	{d8}
 800cc70:	b08d      	sub	sp, #52	; 0x34
 800cc72:	460c      	mov	r4, r1
 800cc74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc78:	4616      	mov	r6, r2
 800cc7a:	461f      	mov	r7, r3
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	f000 fdb7 	bl	800d7f0 <_localeconv_r>
 800cc82:	f8d0 a000 	ldr.w	sl, [r0]
 800cc86:	4650      	mov	r0, sl
 800cc88:	f7f3 faf2 	bl	8000270 <strlen>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cc90:	6823      	ldr	r3, [r4, #0]
 800cc92:	9305      	str	r3, [sp, #20]
 800cc94:	f8d8 3000 	ldr.w	r3, [r8]
 800cc98:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc9c:	3307      	adds	r3, #7
 800cc9e:	f023 0307 	bic.w	r3, r3, #7
 800cca2:	f103 0208 	add.w	r2, r3, #8
 800cca6:	f8c8 2000 	str.w	r2, [r8]
 800ccaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccb2:	9307      	str	r3, [sp, #28]
 800ccb4:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccb8:	ee08 0a10 	vmov	s16, r0
 800ccbc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ccc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccc4:	4b9e      	ldr	r3, [pc, #632]	; (800cf40 <_printf_float+0x2d8>)
 800ccc6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccca:	f7f3 ff2f 	bl	8000b2c <__aeabi_dcmpun>
 800ccce:	bb88      	cbnz	r0, 800cd34 <_printf_float+0xcc>
 800ccd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccd4:	4b9a      	ldr	r3, [pc, #616]	; (800cf40 <_printf_float+0x2d8>)
 800ccd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccda:	f7f3 ff09 	bl	8000af0 <__aeabi_dcmple>
 800ccde:	bb48      	cbnz	r0, 800cd34 <_printf_float+0xcc>
 800cce0:	2200      	movs	r2, #0
 800cce2:	2300      	movs	r3, #0
 800cce4:	4640      	mov	r0, r8
 800cce6:	4649      	mov	r1, r9
 800cce8:	f7f3 fef8 	bl	8000adc <__aeabi_dcmplt>
 800ccec:	b110      	cbz	r0, 800ccf4 <_printf_float+0x8c>
 800ccee:	232d      	movs	r3, #45	; 0x2d
 800ccf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf4:	4a93      	ldr	r2, [pc, #588]	; (800cf44 <_printf_float+0x2dc>)
 800ccf6:	4b94      	ldr	r3, [pc, #592]	; (800cf48 <_printf_float+0x2e0>)
 800ccf8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ccfc:	bf94      	ite	ls
 800ccfe:	4690      	movls	r8, r2
 800cd00:	4698      	movhi	r8, r3
 800cd02:	2303      	movs	r3, #3
 800cd04:	6123      	str	r3, [r4, #16]
 800cd06:	9b05      	ldr	r3, [sp, #20]
 800cd08:	f023 0304 	bic.w	r3, r3, #4
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	f04f 0900 	mov.w	r9, #0
 800cd12:	9700      	str	r7, [sp, #0]
 800cd14:	4633      	mov	r3, r6
 800cd16:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f000 f9da 	bl	800d0d4 <_printf_common>
 800cd20:	3001      	adds	r0, #1
 800cd22:	f040 8090 	bne.w	800ce46 <_printf_float+0x1de>
 800cd26:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2a:	b00d      	add	sp, #52	; 0x34
 800cd2c:	ecbd 8b02 	vpop	{d8}
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	4642      	mov	r2, r8
 800cd36:	464b      	mov	r3, r9
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	f7f3 fef6 	bl	8000b2c <__aeabi_dcmpun>
 800cd40:	b140      	cbz	r0, 800cd54 <_printf_float+0xec>
 800cd42:	464b      	mov	r3, r9
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	bfbc      	itt	lt
 800cd48:	232d      	movlt	r3, #45	; 0x2d
 800cd4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd4e:	4a7f      	ldr	r2, [pc, #508]	; (800cf4c <_printf_float+0x2e4>)
 800cd50:	4b7f      	ldr	r3, [pc, #508]	; (800cf50 <_printf_float+0x2e8>)
 800cd52:	e7d1      	b.n	800ccf8 <_printf_float+0x90>
 800cd54:	6863      	ldr	r3, [r4, #4]
 800cd56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd5a:	9206      	str	r2, [sp, #24]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	d13f      	bne.n	800cde0 <_printf_float+0x178>
 800cd60:	2306      	movs	r3, #6
 800cd62:	6063      	str	r3, [r4, #4]
 800cd64:	9b05      	ldr	r3, [sp, #20]
 800cd66:	6861      	ldr	r1, [r4, #4]
 800cd68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	9303      	str	r3, [sp, #12]
 800cd70:	ab0a      	add	r3, sp, #40	; 0x28
 800cd72:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd76:	ab09      	add	r3, sp, #36	; 0x24
 800cd78:	ec49 8b10 	vmov	d0, r8, r9
 800cd7c:	9300      	str	r3, [sp, #0]
 800cd7e:	6022      	str	r2, [r4, #0]
 800cd80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd84:	4628      	mov	r0, r5
 800cd86:	f7ff fece 	bl	800cb26 <__cvt>
 800cd8a:	9b06      	ldr	r3, [sp, #24]
 800cd8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd8e:	2b47      	cmp	r3, #71	; 0x47
 800cd90:	4680      	mov	r8, r0
 800cd92:	d108      	bne.n	800cda6 <_printf_float+0x13e>
 800cd94:	1cc8      	adds	r0, r1, #3
 800cd96:	db02      	blt.n	800cd9e <_printf_float+0x136>
 800cd98:	6863      	ldr	r3, [r4, #4]
 800cd9a:	4299      	cmp	r1, r3
 800cd9c:	dd41      	ble.n	800ce22 <_printf_float+0x1ba>
 800cd9e:	f1ab 0302 	sub.w	r3, fp, #2
 800cda2:	fa5f fb83 	uxtb.w	fp, r3
 800cda6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cdaa:	d820      	bhi.n	800cdee <_printf_float+0x186>
 800cdac:	3901      	subs	r1, #1
 800cdae:	465a      	mov	r2, fp
 800cdb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cdb4:	9109      	str	r1, [sp, #36]	; 0x24
 800cdb6:	f7ff ff18 	bl	800cbea <__exponent>
 800cdba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdbc:	1813      	adds	r3, r2, r0
 800cdbe:	2a01      	cmp	r2, #1
 800cdc0:	4681      	mov	r9, r0
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	dc02      	bgt.n	800cdcc <_printf_float+0x164>
 800cdc6:	6822      	ldr	r2, [r4, #0]
 800cdc8:	07d2      	lsls	r2, r2, #31
 800cdca:	d501      	bpl.n	800cdd0 <_printf_float+0x168>
 800cdcc:	3301      	adds	r3, #1
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d09c      	beq.n	800cd12 <_printf_float+0xaa>
 800cdd8:	232d      	movs	r3, #45	; 0x2d
 800cdda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdde:	e798      	b.n	800cd12 <_printf_float+0xaa>
 800cde0:	9a06      	ldr	r2, [sp, #24]
 800cde2:	2a47      	cmp	r2, #71	; 0x47
 800cde4:	d1be      	bne.n	800cd64 <_printf_float+0xfc>
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d1bc      	bne.n	800cd64 <_printf_float+0xfc>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e7b9      	b.n	800cd62 <_printf_float+0xfa>
 800cdee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cdf2:	d118      	bne.n	800ce26 <_printf_float+0x1be>
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	dd0b      	ble.n	800ce12 <_printf_float+0x1aa>
 800cdfa:	6121      	str	r1, [r4, #16]
 800cdfc:	b913      	cbnz	r3, 800ce04 <_printf_float+0x19c>
 800cdfe:	6822      	ldr	r2, [r4, #0]
 800ce00:	07d0      	lsls	r0, r2, #31
 800ce02:	d502      	bpl.n	800ce0a <_printf_float+0x1a2>
 800ce04:	3301      	adds	r3, #1
 800ce06:	440b      	add	r3, r1
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ce0c:	f04f 0900 	mov.w	r9, #0
 800ce10:	e7de      	b.n	800cdd0 <_printf_float+0x168>
 800ce12:	b913      	cbnz	r3, 800ce1a <_printf_float+0x1b2>
 800ce14:	6822      	ldr	r2, [r4, #0]
 800ce16:	07d2      	lsls	r2, r2, #31
 800ce18:	d501      	bpl.n	800ce1e <_printf_float+0x1b6>
 800ce1a:	3302      	adds	r3, #2
 800ce1c:	e7f4      	b.n	800ce08 <_printf_float+0x1a0>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e7f2      	b.n	800ce08 <_printf_float+0x1a0>
 800ce22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce28:	4299      	cmp	r1, r3
 800ce2a:	db05      	blt.n	800ce38 <_printf_float+0x1d0>
 800ce2c:	6823      	ldr	r3, [r4, #0]
 800ce2e:	6121      	str	r1, [r4, #16]
 800ce30:	07d8      	lsls	r0, r3, #31
 800ce32:	d5ea      	bpl.n	800ce0a <_printf_float+0x1a2>
 800ce34:	1c4b      	adds	r3, r1, #1
 800ce36:	e7e7      	b.n	800ce08 <_printf_float+0x1a0>
 800ce38:	2900      	cmp	r1, #0
 800ce3a:	bfd4      	ite	le
 800ce3c:	f1c1 0202 	rsble	r2, r1, #2
 800ce40:	2201      	movgt	r2, #1
 800ce42:	4413      	add	r3, r2
 800ce44:	e7e0      	b.n	800ce08 <_printf_float+0x1a0>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	055a      	lsls	r2, r3, #21
 800ce4a:	d407      	bmi.n	800ce5c <_printf_float+0x1f4>
 800ce4c:	6923      	ldr	r3, [r4, #16]
 800ce4e:	4642      	mov	r2, r8
 800ce50:	4631      	mov	r1, r6
 800ce52:	4628      	mov	r0, r5
 800ce54:	47b8      	blx	r7
 800ce56:	3001      	adds	r0, #1
 800ce58:	d12c      	bne.n	800ceb4 <_printf_float+0x24c>
 800ce5a:	e764      	b.n	800cd26 <_printf_float+0xbe>
 800ce5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce60:	f240 80e0 	bls.w	800d024 <_printf_float+0x3bc>
 800ce64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce68:	2200      	movs	r2, #0
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f7f3 fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d034      	beq.n	800cede <_printf_float+0x276>
 800ce74:	4a37      	ldr	r2, [pc, #220]	; (800cf54 <_printf_float+0x2ec>)
 800ce76:	2301      	movs	r3, #1
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	47b8      	blx	r7
 800ce7e:	3001      	adds	r0, #1
 800ce80:	f43f af51 	beq.w	800cd26 <_printf_float+0xbe>
 800ce84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	db02      	blt.n	800ce92 <_printf_float+0x22a>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	07d8      	lsls	r0, r3, #31
 800ce90:	d510      	bpl.n	800ceb4 <_printf_float+0x24c>
 800ce92:	ee18 3a10 	vmov	r3, s16
 800ce96:	4652      	mov	r2, sl
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	47b8      	blx	r7
 800ce9e:	3001      	adds	r0, #1
 800cea0:	f43f af41 	beq.w	800cd26 <_printf_float+0xbe>
 800cea4:	f04f 0800 	mov.w	r8, #0
 800cea8:	f104 091a 	add.w	r9, r4, #26
 800ceac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	4543      	cmp	r3, r8
 800ceb2:	dc09      	bgt.n	800cec8 <_printf_float+0x260>
 800ceb4:	6823      	ldr	r3, [r4, #0]
 800ceb6:	079b      	lsls	r3, r3, #30
 800ceb8:	f100 8107 	bmi.w	800d0ca <_printf_float+0x462>
 800cebc:	68e0      	ldr	r0, [r4, #12]
 800cebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec0:	4298      	cmp	r0, r3
 800cec2:	bfb8      	it	lt
 800cec4:	4618      	movlt	r0, r3
 800cec6:	e730      	b.n	800cd2a <_printf_float+0xc2>
 800cec8:	2301      	movs	r3, #1
 800ceca:	464a      	mov	r2, r9
 800cecc:	4631      	mov	r1, r6
 800cece:	4628      	mov	r0, r5
 800ced0:	47b8      	blx	r7
 800ced2:	3001      	adds	r0, #1
 800ced4:	f43f af27 	beq.w	800cd26 <_printf_float+0xbe>
 800ced8:	f108 0801 	add.w	r8, r8, #1
 800cedc:	e7e6      	b.n	800ceac <_printf_float+0x244>
 800cede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	dc39      	bgt.n	800cf58 <_printf_float+0x2f0>
 800cee4:	4a1b      	ldr	r2, [pc, #108]	; (800cf54 <_printf_float+0x2ec>)
 800cee6:	2301      	movs	r3, #1
 800cee8:	4631      	mov	r1, r6
 800ceea:	4628      	mov	r0, r5
 800ceec:	47b8      	blx	r7
 800ceee:	3001      	adds	r0, #1
 800cef0:	f43f af19 	beq.w	800cd26 <_printf_float+0xbe>
 800cef4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cef8:	4313      	orrs	r3, r2
 800cefa:	d102      	bne.n	800cf02 <_printf_float+0x29a>
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	07d9      	lsls	r1, r3, #31
 800cf00:	d5d8      	bpl.n	800ceb4 <_printf_float+0x24c>
 800cf02:	ee18 3a10 	vmov	r3, s16
 800cf06:	4652      	mov	r2, sl
 800cf08:	4631      	mov	r1, r6
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	47b8      	blx	r7
 800cf0e:	3001      	adds	r0, #1
 800cf10:	f43f af09 	beq.w	800cd26 <_printf_float+0xbe>
 800cf14:	f04f 0900 	mov.w	r9, #0
 800cf18:	f104 0a1a 	add.w	sl, r4, #26
 800cf1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf1e:	425b      	negs	r3, r3
 800cf20:	454b      	cmp	r3, r9
 800cf22:	dc01      	bgt.n	800cf28 <_printf_float+0x2c0>
 800cf24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf26:	e792      	b.n	800ce4e <_printf_float+0x1e6>
 800cf28:	2301      	movs	r3, #1
 800cf2a:	4652      	mov	r2, sl
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	4628      	mov	r0, r5
 800cf30:	47b8      	blx	r7
 800cf32:	3001      	adds	r0, #1
 800cf34:	f43f aef7 	beq.w	800cd26 <_printf_float+0xbe>
 800cf38:	f109 0901 	add.w	r9, r9, #1
 800cf3c:	e7ee      	b.n	800cf1c <_printf_float+0x2b4>
 800cf3e:	bf00      	nop
 800cf40:	7fefffff 	.word	0x7fefffff
 800cf44:	0800fae9 	.word	0x0800fae9
 800cf48:	0800faed 	.word	0x0800faed
 800cf4c:	0800faf1 	.word	0x0800faf1
 800cf50:	0800faf5 	.word	0x0800faf5
 800cf54:	0800faf9 	.word	0x0800faf9
 800cf58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	bfa8      	it	ge
 800cf60:	461a      	movge	r2, r3
 800cf62:	2a00      	cmp	r2, #0
 800cf64:	4691      	mov	r9, r2
 800cf66:	dc37      	bgt.n	800cfd8 <_printf_float+0x370>
 800cf68:	f04f 0b00 	mov.w	fp, #0
 800cf6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf70:	f104 021a 	add.w	r2, r4, #26
 800cf74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf76:	9305      	str	r3, [sp, #20]
 800cf78:	eba3 0309 	sub.w	r3, r3, r9
 800cf7c:	455b      	cmp	r3, fp
 800cf7e:	dc33      	bgt.n	800cfe8 <_printf_float+0x380>
 800cf80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf84:	429a      	cmp	r2, r3
 800cf86:	db3b      	blt.n	800d000 <_printf_float+0x398>
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	07da      	lsls	r2, r3, #31
 800cf8c:	d438      	bmi.n	800d000 <_printf_float+0x398>
 800cf8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cf92:	eba2 0903 	sub.w	r9, r2, r3
 800cf96:	9b05      	ldr	r3, [sp, #20]
 800cf98:	1ad2      	subs	r2, r2, r3
 800cf9a:	4591      	cmp	r9, r2
 800cf9c:	bfa8      	it	ge
 800cf9e:	4691      	movge	r9, r2
 800cfa0:	f1b9 0f00 	cmp.w	r9, #0
 800cfa4:	dc35      	bgt.n	800d012 <_printf_float+0x3aa>
 800cfa6:	f04f 0800 	mov.w	r8, #0
 800cfaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfae:	f104 0a1a 	add.w	sl, r4, #26
 800cfb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfb6:	1a9b      	subs	r3, r3, r2
 800cfb8:	eba3 0309 	sub.w	r3, r3, r9
 800cfbc:	4543      	cmp	r3, r8
 800cfbe:	f77f af79 	ble.w	800ceb4 <_printf_float+0x24c>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	4652      	mov	r2, sl
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b8      	blx	r7
 800cfcc:	3001      	adds	r0, #1
 800cfce:	f43f aeaa 	beq.w	800cd26 <_printf_float+0xbe>
 800cfd2:	f108 0801 	add.w	r8, r8, #1
 800cfd6:	e7ec      	b.n	800cfb2 <_printf_float+0x34a>
 800cfd8:	4613      	mov	r3, r2
 800cfda:	4631      	mov	r1, r6
 800cfdc:	4642      	mov	r2, r8
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b8      	blx	r7
 800cfe2:	3001      	adds	r0, #1
 800cfe4:	d1c0      	bne.n	800cf68 <_printf_float+0x300>
 800cfe6:	e69e      	b.n	800cd26 <_printf_float+0xbe>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4631      	mov	r1, r6
 800cfec:	4628      	mov	r0, r5
 800cfee:	9205      	str	r2, [sp, #20]
 800cff0:	47b8      	blx	r7
 800cff2:	3001      	adds	r0, #1
 800cff4:	f43f ae97 	beq.w	800cd26 <_printf_float+0xbe>
 800cff8:	9a05      	ldr	r2, [sp, #20]
 800cffa:	f10b 0b01 	add.w	fp, fp, #1
 800cffe:	e7b9      	b.n	800cf74 <_printf_float+0x30c>
 800d000:	ee18 3a10 	vmov	r3, s16
 800d004:	4652      	mov	r2, sl
 800d006:	4631      	mov	r1, r6
 800d008:	4628      	mov	r0, r5
 800d00a:	47b8      	blx	r7
 800d00c:	3001      	adds	r0, #1
 800d00e:	d1be      	bne.n	800cf8e <_printf_float+0x326>
 800d010:	e689      	b.n	800cd26 <_printf_float+0xbe>
 800d012:	9a05      	ldr	r2, [sp, #20]
 800d014:	464b      	mov	r3, r9
 800d016:	4442      	add	r2, r8
 800d018:	4631      	mov	r1, r6
 800d01a:	4628      	mov	r0, r5
 800d01c:	47b8      	blx	r7
 800d01e:	3001      	adds	r0, #1
 800d020:	d1c1      	bne.n	800cfa6 <_printf_float+0x33e>
 800d022:	e680      	b.n	800cd26 <_printf_float+0xbe>
 800d024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d026:	2a01      	cmp	r2, #1
 800d028:	dc01      	bgt.n	800d02e <_printf_float+0x3c6>
 800d02a:	07db      	lsls	r3, r3, #31
 800d02c:	d53a      	bpl.n	800d0a4 <_printf_float+0x43c>
 800d02e:	2301      	movs	r3, #1
 800d030:	4642      	mov	r2, r8
 800d032:	4631      	mov	r1, r6
 800d034:	4628      	mov	r0, r5
 800d036:	47b8      	blx	r7
 800d038:	3001      	adds	r0, #1
 800d03a:	f43f ae74 	beq.w	800cd26 <_printf_float+0xbe>
 800d03e:	ee18 3a10 	vmov	r3, s16
 800d042:	4652      	mov	r2, sl
 800d044:	4631      	mov	r1, r6
 800d046:	4628      	mov	r0, r5
 800d048:	47b8      	blx	r7
 800d04a:	3001      	adds	r0, #1
 800d04c:	f43f ae6b 	beq.w	800cd26 <_printf_float+0xbe>
 800d050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d054:	2200      	movs	r2, #0
 800d056:	2300      	movs	r3, #0
 800d058:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d05c:	f7f3 fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 800d060:	b9d8      	cbnz	r0, 800d09a <_printf_float+0x432>
 800d062:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d066:	f108 0201 	add.w	r2, r8, #1
 800d06a:	4631      	mov	r1, r6
 800d06c:	4628      	mov	r0, r5
 800d06e:	47b8      	blx	r7
 800d070:	3001      	adds	r0, #1
 800d072:	d10e      	bne.n	800d092 <_printf_float+0x42a>
 800d074:	e657      	b.n	800cd26 <_printf_float+0xbe>
 800d076:	2301      	movs	r3, #1
 800d078:	4652      	mov	r2, sl
 800d07a:	4631      	mov	r1, r6
 800d07c:	4628      	mov	r0, r5
 800d07e:	47b8      	blx	r7
 800d080:	3001      	adds	r0, #1
 800d082:	f43f ae50 	beq.w	800cd26 <_printf_float+0xbe>
 800d086:	f108 0801 	add.w	r8, r8, #1
 800d08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d08c:	3b01      	subs	r3, #1
 800d08e:	4543      	cmp	r3, r8
 800d090:	dcf1      	bgt.n	800d076 <_printf_float+0x40e>
 800d092:	464b      	mov	r3, r9
 800d094:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d098:	e6da      	b.n	800ce50 <_printf_float+0x1e8>
 800d09a:	f04f 0800 	mov.w	r8, #0
 800d09e:	f104 0a1a 	add.w	sl, r4, #26
 800d0a2:	e7f2      	b.n	800d08a <_printf_float+0x422>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	4642      	mov	r2, r8
 800d0a8:	e7df      	b.n	800d06a <_printf_float+0x402>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	464a      	mov	r2, r9
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	47b8      	blx	r7
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	f43f ae36 	beq.w	800cd26 <_printf_float+0xbe>
 800d0ba:	f108 0801 	add.w	r8, r8, #1
 800d0be:	68e3      	ldr	r3, [r4, #12]
 800d0c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0c2:	1a5b      	subs	r3, r3, r1
 800d0c4:	4543      	cmp	r3, r8
 800d0c6:	dcf0      	bgt.n	800d0aa <_printf_float+0x442>
 800d0c8:	e6f8      	b.n	800cebc <_printf_float+0x254>
 800d0ca:	f04f 0800 	mov.w	r8, #0
 800d0ce:	f104 0919 	add.w	r9, r4, #25
 800d0d2:	e7f4      	b.n	800d0be <_printf_float+0x456>

0800d0d4 <_printf_common>:
 800d0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d8:	4616      	mov	r6, r2
 800d0da:	4699      	mov	r9, r3
 800d0dc:	688a      	ldr	r2, [r1, #8]
 800d0de:	690b      	ldr	r3, [r1, #16]
 800d0e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	bfb8      	it	lt
 800d0e8:	4613      	movlt	r3, r2
 800d0ea:	6033      	str	r3, [r6, #0]
 800d0ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	b10a      	cbz	r2, 800d0fa <_printf_common+0x26>
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	6033      	str	r3, [r6, #0]
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	0699      	lsls	r1, r3, #26
 800d0fe:	bf42      	ittt	mi
 800d100:	6833      	ldrmi	r3, [r6, #0]
 800d102:	3302      	addmi	r3, #2
 800d104:	6033      	strmi	r3, [r6, #0]
 800d106:	6825      	ldr	r5, [r4, #0]
 800d108:	f015 0506 	ands.w	r5, r5, #6
 800d10c:	d106      	bne.n	800d11c <_printf_common+0x48>
 800d10e:	f104 0a19 	add.w	sl, r4, #25
 800d112:	68e3      	ldr	r3, [r4, #12]
 800d114:	6832      	ldr	r2, [r6, #0]
 800d116:	1a9b      	subs	r3, r3, r2
 800d118:	42ab      	cmp	r3, r5
 800d11a:	dc26      	bgt.n	800d16a <_printf_common+0x96>
 800d11c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d120:	1e13      	subs	r3, r2, #0
 800d122:	6822      	ldr	r2, [r4, #0]
 800d124:	bf18      	it	ne
 800d126:	2301      	movne	r3, #1
 800d128:	0692      	lsls	r2, r2, #26
 800d12a:	d42b      	bmi.n	800d184 <_printf_common+0xb0>
 800d12c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d130:	4649      	mov	r1, r9
 800d132:	4638      	mov	r0, r7
 800d134:	47c0      	blx	r8
 800d136:	3001      	adds	r0, #1
 800d138:	d01e      	beq.n	800d178 <_printf_common+0xa4>
 800d13a:	6823      	ldr	r3, [r4, #0]
 800d13c:	6922      	ldr	r2, [r4, #16]
 800d13e:	f003 0306 	and.w	r3, r3, #6
 800d142:	2b04      	cmp	r3, #4
 800d144:	bf02      	ittt	eq
 800d146:	68e5      	ldreq	r5, [r4, #12]
 800d148:	6833      	ldreq	r3, [r6, #0]
 800d14a:	1aed      	subeq	r5, r5, r3
 800d14c:	68a3      	ldr	r3, [r4, #8]
 800d14e:	bf0c      	ite	eq
 800d150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d154:	2500      	movne	r5, #0
 800d156:	4293      	cmp	r3, r2
 800d158:	bfc4      	itt	gt
 800d15a:	1a9b      	subgt	r3, r3, r2
 800d15c:	18ed      	addgt	r5, r5, r3
 800d15e:	2600      	movs	r6, #0
 800d160:	341a      	adds	r4, #26
 800d162:	42b5      	cmp	r5, r6
 800d164:	d11a      	bne.n	800d19c <_printf_common+0xc8>
 800d166:	2000      	movs	r0, #0
 800d168:	e008      	b.n	800d17c <_printf_common+0xa8>
 800d16a:	2301      	movs	r3, #1
 800d16c:	4652      	mov	r2, sl
 800d16e:	4649      	mov	r1, r9
 800d170:	4638      	mov	r0, r7
 800d172:	47c0      	blx	r8
 800d174:	3001      	adds	r0, #1
 800d176:	d103      	bne.n	800d180 <_printf_common+0xac>
 800d178:	f04f 30ff 	mov.w	r0, #4294967295
 800d17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d180:	3501      	adds	r5, #1
 800d182:	e7c6      	b.n	800d112 <_printf_common+0x3e>
 800d184:	18e1      	adds	r1, r4, r3
 800d186:	1c5a      	adds	r2, r3, #1
 800d188:	2030      	movs	r0, #48	; 0x30
 800d18a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d18e:	4422      	add	r2, r4
 800d190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d198:	3302      	adds	r3, #2
 800d19a:	e7c7      	b.n	800d12c <_printf_common+0x58>
 800d19c:	2301      	movs	r3, #1
 800d19e:	4622      	mov	r2, r4
 800d1a0:	4649      	mov	r1, r9
 800d1a2:	4638      	mov	r0, r7
 800d1a4:	47c0      	blx	r8
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	d0e6      	beq.n	800d178 <_printf_common+0xa4>
 800d1aa:	3601      	adds	r6, #1
 800d1ac:	e7d9      	b.n	800d162 <_printf_common+0x8e>
	...

0800d1b0 <_printf_i>:
 800d1b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b4:	7e0f      	ldrb	r7, [r1, #24]
 800d1b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1b8:	2f78      	cmp	r7, #120	; 0x78
 800d1ba:	4691      	mov	r9, r2
 800d1bc:	4680      	mov	r8, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	469a      	mov	sl, r3
 800d1c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1c6:	d807      	bhi.n	800d1d8 <_printf_i+0x28>
 800d1c8:	2f62      	cmp	r7, #98	; 0x62
 800d1ca:	d80a      	bhi.n	800d1e2 <_printf_i+0x32>
 800d1cc:	2f00      	cmp	r7, #0
 800d1ce:	f000 80d4 	beq.w	800d37a <_printf_i+0x1ca>
 800d1d2:	2f58      	cmp	r7, #88	; 0x58
 800d1d4:	f000 80c0 	beq.w	800d358 <_printf_i+0x1a8>
 800d1d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1e0:	e03a      	b.n	800d258 <_printf_i+0xa8>
 800d1e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1e6:	2b15      	cmp	r3, #21
 800d1e8:	d8f6      	bhi.n	800d1d8 <_printf_i+0x28>
 800d1ea:	a101      	add	r1, pc, #4	; (adr r1, 800d1f0 <_printf_i+0x40>)
 800d1ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1f0:	0800d249 	.word	0x0800d249
 800d1f4:	0800d25d 	.word	0x0800d25d
 800d1f8:	0800d1d9 	.word	0x0800d1d9
 800d1fc:	0800d1d9 	.word	0x0800d1d9
 800d200:	0800d1d9 	.word	0x0800d1d9
 800d204:	0800d1d9 	.word	0x0800d1d9
 800d208:	0800d25d 	.word	0x0800d25d
 800d20c:	0800d1d9 	.word	0x0800d1d9
 800d210:	0800d1d9 	.word	0x0800d1d9
 800d214:	0800d1d9 	.word	0x0800d1d9
 800d218:	0800d1d9 	.word	0x0800d1d9
 800d21c:	0800d361 	.word	0x0800d361
 800d220:	0800d289 	.word	0x0800d289
 800d224:	0800d31b 	.word	0x0800d31b
 800d228:	0800d1d9 	.word	0x0800d1d9
 800d22c:	0800d1d9 	.word	0x0800d1d9
 800d230:	0800d383 	.word	0x0800d383
 800d234:	0800d1d9 	.word	0x0800d1d9
 800d238:	0800d289 	.word	0x0800d289
 800d23c:	0800d1d9 	.word	0x0800d1d9
 800d240:	0800d1d9 	.word	0x0800d1d9
 800d244:	0800d323 	.word	0x0800d323
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	1d1a      	adds	r2, r3, #4
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	602a      	str	r2, [r5, #0]
 800d250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d258:	2301      	movs	r3, #1
 800d25a:	e09f      	b.n	800d39c <_printf_i+0x1ec>
 800d25c:	6820      	ldr	r0, [r4, #0]
 800d25e:	682b      	ldr	r3, [r5, #0]
 800d260:	0607      	lsls	r7, r0, #24
 800d262:	f103 0104 	add.w	r1, r3, #4
 800d266:	6029      	str	r1, [r5, #0]
 800d268:	d501      	bpl.n	800d26e <_printf_i+0xbe>
 800d26a:	681e      	ldr	r6, [r3, #0]
 800d26c:	e003      	b.n	800d276 <_printf_i+0xc6>
 800d26e:	0646      	lsls	r6, r0, #25
 800d270:	d5fb      	bpl.n	800d26a <_printf_i+0xba>
 800d272:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d276:	2e00      	cmp	r6, #0
 800d278:	da03      	bge.n	800d282 <_printf_i+0xd2>
 800d27a:	232d      	movs	r3, #45	; 0x2d
 800d27c:	4276      	negs	r6, r6
 800d27e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d282:	485a      	ldr	r0, [pc, #360]	; (800d3ec <_printf_i+0x23c>)
 800d284:	230a      	movs	r3, #10
 800d286:	e012      	b.n	800d2ae <_printf_i+0xfe>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	6820      	ldr	r0, [r4, #0]
 800d28c:	1d19      	adds	r1, r3, #4
 800d28e:	6029      	str	r1, [r5, #0]
 800d290:	0605      	lsls	r5, r0, #24
 800d292:	d501      	bpl.n	800d298 <_printf_i+0xe8>
 800d294:	681e      	ldr	r6, [r3, #0]
 800d296:	e002      	b.n	800d29e <_printf_i+0xee>
 800d298:	0641      	lsls	r1, r0, #25
 800d29a:	d5fb      	bpl.n	800d294 <_printf_i+0xe4>
 800d29c:	881e      	ldrh	r6, [r3, #0]
 800d29e:	4853      	ldr	r0, [pc, #332]	; (800d3ec <_printf_i+0x23c>)
 800d2a0:	2f6f      	cmp	r7, #111	; 0x6f
 800d2a2:	bf0c      	ite	eq
 800d2a4:	2308      	moveq	r3, #8
 800d2a6:	230a      	movne	r3, #10
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2ae:	6865      	ldr	r5, [r4, #4]
 800d2b0:	60a5      	str	r5, [r4, #8]
 800d2b2:	2d00      	cmp	r5, #0
 800d2b4:	bfa2      	ittt	ge
 800d2b6:	6821      	ldrge	r1, [r4, #0]
 800d2b8:	f021 0104 	bicge.w	r1, r1, #4
 800d2bc:	6021      	strge	r1, [r4, #0]
 800d2be:	b90e      	cbnz	r6, 800d2c4 <_printf_i+0x114>
 800d2c0:	2d00      	cmp	r5, #0
 800d2c2:	d04b      	beq.n	800d35c <_printf_i+0x1ac>
 800d2c4:	4615      	mov	r5, r2
 800d2c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2ca:	fb03 6711 	mls	r7, r3, r1, r6
 800d2ce:	5dc7      	ldrb	r7, [r0, r7]
 800d2d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2d4:	4637      	mov	r7, r6
 800d2d6:	42bb      	cmp	r3, r7
 800d2d8:	460e      	mov	r6, r1
 800d2da:	d9f4      	bls.n	800d2c6 <_printf_i+0x116>
 800d2dc:	2b08      	cmp	r3, #8
 800d2de:	d10b      	bne.n	800d2f8 <_printf_i+0x148>
 800d2e0:	6823      	ldr	r3, [r4, #0]
 800d2e2:	07de      	lsls	r6, r3, #31
 800d2e4:	d508      	bpl.n	800d2f8 <_printf_i+0x148>
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	6861      	ldr	r1, [r4, #4]
 800d2ea:	4299      	cmp	r1, r3
 800d2ec:	bfde      	ittt	le
 800d2ee:	2330      	movle	r3, #48	; 0x30
 800d2f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2f8:	1b52      	subs	r2, r2, r5
 800d2fa:	6122      	str	r2, [r4, #16]
 800d2fc:	f8cd a000 	str.w	sl, [sp]
 800d300:	464b      	mov	r3, r9
 800d302:	aa03      	add	r2, sp, #12
 800d304:	4621      	mov	r1, r4
 800d306:	4640      	mov	r0, r8
 800d308:	f7ff fee4 	bl	800d0d4 <_printf_common>
 800d30c:	3001      	adds	r0, #1
 800d30e:	d14a      	bne.n	800d3a6 <_printf_i+0x1f6>
 800d310:	f04f 30ff 	mov.w	r0, #4294967295
 800d314:	b004      	add	sp, #16
 800d316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	f043 0320 	orr.w	r3, r3, #32
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	4833      	ldr	r0, [pc, #204]	; (800d3f0 <_printf_i+0x240>)
 800d324:	2778      	movs	r7, #120	; 0x78
 800d326:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d32a:	6823      	ldr	r3, [r4, #0]
 800d32c:	6829      	ldr	r1, [r5, #0]
 800d32e:	061f      	lsls	r7, r3, #24
 800d330:	f851 6b04 	ldr.w	r6, [r1], #4
 800d334:	d402      	bmi.n	800d33c <_printf_i+0x18c>
 800d336:	065f      	lsls	r7, r3, #25
 800d338:	bf48      	it	mi
 800d33a:	b2b6      	uxthmi	r6, r6
 800d33c:	07df      	lsls	r7, r3, #31
 800d33e:	bf48      	it	mi
 800d340:	f043 0320 	orrmi.w	r3, r3, #32
 800d344:	6029      	str	r1, [r5, #0]
 800d346:	bf48      	it	mi
 800d348:	6023      	strmi	r3, [r4, #0]
 800d34a:	b91e      	cbnz	r6, 800d354 <_printf_i+0x1a4>
 800d34c:	6823      	ldr	r3, [r4, #0]
 800d34e:	f023 0320 	bic.w	r3, r3, #32
 800d352:	6023      	str	r3, [r4, #0]
 800d354:	2310      	movs	r3, #16
 800d356:	e7a7      	b.n	800d2a8 <_printf_i+0xf8>
 800d358:	4824      	ldr	r0, [pc, #144]	; (800d3ec <_printf_i+0x23c>)
 800d35a:	e7e4      	b.n	800d326 <_printf_i+0x176>
 800d35c:	4615      	mov	r5, r2
 800d35e:	e7bd      	b.n	800d2dc <_printf_i+0x12c>
 800d360:	682b      	ldr	r3, [r5, #0]
 800d362:	6826      	ldr	r6, [r4, #0]
 800d364:	6961      	ldr	r1, [r4, #20]
 800d366:	1d18      	adds	r0, r3, #4
 800d368:	6028      	str	r0, [r5, #0]
 800d36a:	0635      	lsls	r5, r6, #24
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	d501      	bpl.n	800d374 <_printf_i+0x1c4>
 800d370:	6019      	str	r1, [r3, #0]
 800d372:	e002      	b.n	800d37a <_printf_i+0x1ca>
 800d374:	0670      	lsls	r0, r6, #25
 800d376:	d5fb      	bpl.n	800d370 <_printf_i+0x1c0>
 800d378:	8019      	strh	r1, [r3, #0]
 800d37a:	2300      	movs	r3, #0
 800d37c:	6123      	str	r3, [r4, #16]
 800d37e:	4615      	mov	r5, r2
 800d380:	e7bc      	b.n	800d2fc <_printf_i+0x14c>
 800d382:	682b      	ldr	r3, [r5, #0]
 800d384:	1d1a      	adds	r2, r3, #4
 800d386:	602a      	str	r2, [r5, #0]
 800d388:	681d      	ldr	r5, [r3, #0]
 800d38a:	6862      	ldr	r2, [r4, #4]
 800d38c:	2100      	movs	r1, #0
 800d38e:	4628      	mov	r0, r5
 800d390:	f7f2 ff1e 	bl	80001d0 <memchr>
 800d394:	b108      	cbz	r0, 800d39a <_printf_i+0x1ea>
 800d396:	1b40      	subs	r0, r0, r5
 800d398:	6060      	str	r0, [r4, #4]
 800d39a:	6863      	ldr	r3, [r4, #4]
 800d39c:	6123      	str	r3, [r4, #16]
 800d39e:	2300      	movs	r3, #0
 800d3a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3a4:	e7aa      	b.n	800d2fc <_printf_i+0x14c>
 800d3a6:	6923      	ldr	r3, [r4, #16]
 800d3a8:	462a      	mov	r2, r5
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	47d0      	blx	sl
 800d3b0:	3001      	adds	r0, #1
 800d3b2:	d0ad      	beq.n	800d310 <_printf_i+0x160>
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	079b      	lsls	r3, r3, #30
 800d3b8:	d413      	bmi.n	800d3e2 <_printf_i+0x232>
 800d3ba:	68e0      	ldr	r0, [r4, #12]
 800d3bc:	9b03      	ldr	r3, [sp, #12]
 800d3be:	4298      	cmp	r0, r3
 800d3c0:	bfb8      	it	lt
 800d3c2:	4618      	movlt	r0, r3
 800d3c4:	e7a6      	b.n	800d314 <_printf_i+0x164>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4632      	mov	r2, r6
 800d3ca:	4649      	mov	r1, r9
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	47d0      	blx	sl
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	d09d      	beq.n	800d310 <_printf_i+0x160>
 800d3d4:	3501      	adds	r5, #1
 800d3d6:	68e3      	ldr	r3, [r4, #12]
 800d3d8:	9903      	ldr	r1, [sp, #12]
 800d3da:	1a5b      	subs	r3, r3, r1
 800d3dc:	42ab      	cmp	r3, r5
 800d3de:	dcf2      	bgt.n	800d3c6 <_printf_i+0x216>
 800d3e0:	e7eb      	b.n	800d3ba <_printf_i+0x20a>
 800d3e2:	2500      	movs	r5, #0
 800d3e4:	f104 0619 	add.w	r6, r4, #25
 800d3e8:	e7f5      	b.n	800d3d6 <_printf_i+0x226>
 800d3ea:	bf00      	nop
 800d3ec:	0800fafb 	.word	0x0800fafb
 800d3f0:	0800fb0c 	.word	0x0800fb0c

0800d3f4 <std>:
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	b510      	push	{r4, lr}
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d3fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d402:	6083      	str	r3, [r0, #8]
 800d404:	8181      	strh	r1, [r0, #12]
 800d406:	6643      	str	r3, [r0, #100]	; 0x64
 800d408:	81c2      	strh	r2, [r0, #14]
 800d40a:	6183      	str	r3, [r0, #24]
 800d40c:	4619      	mov	r1, r3
 800d40e:	2208      	movs	r2, #8
 800d410:	305c      	adds	r0, #92	; 0x5c
 800d412:	f000 f9e5 	bl	800d7e0 <memset>
 800d416:	4b05      	ldr	r3, [pc, #20]	; (800d42c <std+0x38>)
 800d418:	6263      	str	r3, [r4, #36]	; 0x24
 800d41a:	4b05      	ldr	r3, [pc, #20]	; (800d430 <std+0x3c>)
 800d41c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d41e:	4b05      	ldr	r3, [pc, #20]	; (800d434 <std+0x40>)
 800d420:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d422:	4b05      	ldr	r3, [pc, #20]	; (800d438 <std+0x44>)
 800d424:	6224      	str	r4, [r4, #32]
 800d426:	6323      	str	r3, [r4, #48]	; 0x30
 800d428:	bd10      	pop	{r4, pc}
 800d42a:	bf00      	nop
 800d42c:	0800d631 	.word	0x0800d631
 800d430:	0800d653 	.word	0x0800d653
 800d434:	0800d68b 	.word	0x0800d68b
 800d438:	0800d6af 	.word	0x0800d6af

0800d43c <stdio_exit_handler>:
 800d43c:	4a02      	ldr	r2, [pc, #8]	; (800d448 <stdio_exit_handler+0xc>)
 800d43e:	4903      	ldr	r1, [pc, #12]	; (800d44c <stdio_exit_handler+0x10>)
 800d440:	4803      	ldr	r0, [pc, #12]	; (800d450 <stdio_exit_handler+0x14>)
 800d442:	f000 b869 	b.w	800d518 <_fwalk_sglue>
 800d446:	bf00      	nop
 800d448:	20000028 	.word	0x20000028
 800d44c:	0800f261 	.word	0x0800f261
 800d450:	20000034 	.word	0x20000034

0800d454 <cleanup_stdio>:
 800d454:	6841      	ldr	r1, [r0, #4]
 800d456:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <cleanup_stdio+0x34>)
 800d458:	4299      	cmp	r1, r3
 800d45a:	b510      	push	{r4, lr}
 800d45c:	4604      	mov	r4, r0
 800d45e:	d001      	beq.n	800d464 <cleanup_stdio+0x10>
 800d460:	f001 fefe 	bl	800f260 <_fflush_r>
 800d464:	68a1      	ldr	r1, [r4, #8]
 800d466:	4b09      	ldr	r3, [pc, #36]	; (800d48c <cleanup_stdio+0x38>)
 800d468:	4299      	cmp	r1, r3
 800d46a:	d002      	beq.n	800d472 <cleanup_stdio+0x1e>
 800d46c:	4620      	mov	r0, r4
 800d46e:	f001 fef7 	bl	800f260 <_fflush_r>
 800d472:	68e1      	ldr	r1, [r4, #12]
 800d474:	4b06      	ldr	r3, [pc, #24]	; (800d490 <cleanup_stdio+0x3c>)
 800d476:	4299      	cmp	r1, r3
 800d478:	d004      	beq.n	800d484 <cleanup_stdio+0x30>
 800d47a:	4620      	mov	r0, r4
 800d47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d480:	f001 beee 	b.w	800f260 <_fflush_r>
 800d484:	bd10      	pop	{r4, pc}
 800d486:	bf00      	nop
 800d488:	200008a0 	.word	0x200008a0
 800d48c:	20000908 	.word	0x20000908
 800d490:	20000970 	.word	0x20000970

0800d494 <global_stdio_init.part.0>:
 800d494:	b510      	push	{r4, lr}
 800d496:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <global_stdio_init.part.0+0x30>)
 800d498:	4c0b      	ldr	r4, [pc, #44]	; (800d4c8 <global_stdio_init.part.0+0x34>)
 800d49a:	4a0c      	ldr	r2, [pc, #48]	; (800d4cc <global_stdio_init.part.0+0x38>)
 800d49c:	601a      	str	r2, [r3, #0]
 800d49e:	4620      	mov	r0, r4
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	2104      	movs	r1, #4
 800d4a4:	f7ff ffa6 	bl	800d3f4 <std>
 800d4a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	2109      	movs	r1, #9
 800d4b0:	f7ff ffa0 	bl	800d3f4 <std>
 800d4b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4be:	2112      	movs	r1, #18
 800d4c0:	f7ff bf98 	b.w	800d3f4 <std>
 800d4c4:	200009d8 	.word	0x200009d8
 800d4c8:	200008a0 	.word	0x200008a0
 800d4cc:	0800d43d 	.word	0x0800d43d

0800d4d0 <__sfp_lock_acquire>:
 800d4d0:	4801      	ldr	r0, [pc, #4]	; (800d4d8 <__sfp_lock_acquire+0x8>)
 800d4d2:	f000 ba01 	b.w	800d8d8 <__retarget_lock_acquire_recursive>
 800d4d6:	bf00      	nop
 800d4d8:	200009e1 	.word	0x200009e1

0800d4dc <__sfp_lock_release>:
 800d4dc:	4801      	ldr	r0, [pc, #4]	; (800d4e4 <__sfp_lock_release+0x8>)
 800d4de:	f000 b9fc 	b.w	800d8da <__retarget_lock_release_recursive>
 800d4e2:	bf00      	nop
 800d4e4:	200009e1 	.word	0x200009e1

0800d4e8 <__sinit>:
 800d4e8:	b510      	push	{r4, lr}
 800d4ea:	4604      	mov	r4, r0
 800d4ec:	f7ff fff0 	bl	800d4d0 <__sfp_lock_acquire>
 800d4f0:	6a23      	ldr	r3, [r4, #32]
 800d4f2:	b11b      	cbz	r3, 800d4fc <__sinit+0x14>
 800d4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4f8:	f7ff bff0 	b.w	800d4dc <__sfp_lock_release>
 800d4fc:	4b04      	ldr	r3, [pc, #16]	; (800d510 <__sinit+0x28>)
 800d4fe:	6223      	str	r3, [r4, #32]
 800d500:	4b04      	ldr	r3, [pc, #16]	; (800d514 <__sinit+0x2c>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1f5      	bne.n	800d4f4 <__sinit+0xc>
 800d508:	f7ff ffc4 	bl	800d494 <global_stdio_init.part.0>
 800d50c:	e7f2      	b.n	800d4f4 <__sinit+0xc>
 800d50e:	bf00      	nop
 800d510:	0800d455 	.word	0x0800d455
 800d514:	200009d8 	.word	0x200009d8

0800d518 <_fwalk_sglue>:
 800d518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d51c:	4607      	mov	r7, r0
 800d51e:	4688      	mov	r8, r1
 800d520:	4614      	mov	r4, r2
 800d522:	2600      	movs	r6, #0
 800d524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d528:	f1b9 0901 	subs.w	r9, r9, #1
 800d52c:	d505      	bpl.n	800d53a <_fwalk_sglue+0x22>
 800d52e:	6824      	ldr	r4, [r4, #0]
 800d530:	2c00      	cmp	r4, #0
 800d532:	d1f7      	bne.n	800d524 <_fwalk_sglue+0xc>
 800d534:	4630      	mov	r0, r6
 800d536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53a:	89ab      	ldrh	r3, [r5, #12]
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d907      	bls.n	800d550 <_fwalk_sglue+0x38>
 800d540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d544:	3301      	adds	r3, #1
 800d546:	d003      	beq.n	800d550 <_fwalk_sglue+0x38>
 800d548:	4629      	mov	r1, r5
 800d54a:	4638      	mov	r0, r7
 800d54c:	47c0      	blx	r8
 800d54e:	4306      	orrs	r6, r0
 800d550:	3568      	adds	r5, #104	; 0x68
 800d552:	e7e9      	b.n	800d528 <_fwalk_sglue+0x10>

0800d554 <iprintf>:
 800d554:	b40f      	push	{r0, r1, r2, r3}
 800d556:	b507      	push	{r0, r1, r2, lr}
 800d558:	4906      	ldr	r1, [pc, #24]	; (800d574 <iprintf+0x20>)
 800d55a:	ab04      	add	r3, sp, #16
 800d55c:	6808      	ldr	r0, [r1, #0]
 800d55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d562:	6881      	ldr	r1, [r0, #8]
 800d564:	9301      	str	r3, [sp, #4]
 800d566:	f001 fcdb 	bl	800ef20 <_vfiprintf_r>
 800d56a:	b003      	add	sp, #12
 800d56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d570:	b004      	add	sp, #16
 800d572:	4770      	bx	lr
 800d574:	20000080 	.word	0x20000080

0800d578 <_puts_r>:
 800d578:	6a03      	ldr	r3, [r0, #32]
 800d57a:	b570      	push	{r4, r5, r6, lr}
 800d57c:	6884      	ldr	r4, [r0, #8]
 800d57e:	4605      	mov	r5, r0
 800d580:	460e      	mov	r6, r1
 800d582:	b90b      	cbnz	r3, 800d588 <_puts_r+0x10>
 800d584:	f7ff ffb0 	bl	800d4e8 <__sinit>
 800d588:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d58a:	07db      	lsls	r3, r3, #31
 800d58c:	d405      	bmi.n	800d59a <_puts_r+0x22>
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	0598      	lsls	r0, r3, #22
 800d592:	d402      	bmi.n	800d59a <_puts_r+0x22>
 800d594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d596:	f000 f99f 	bl	800d8d8 <__retarget_lock_acquire_recursive>
 800d59a:	89a3      	ldrh	r3, [r4, #12]
 800d59c:	0719      	lsls	r1, r3, #28
 800d59e:	d513      	bpl.n	800d5c8 <_puts_r+0x50>
 800d5a0:	6923      	ldr	r3, [r4, #16]
 800d5a2:	b18b      	cbz	r3, 800d5c8 <_puts_r+0x50>
 800d5a4:	3e01      	subs	r6, #1
 800d5a6:	68a3      	ldr	r3, [r4, #8]
 800d5a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	60a3      	str	r3, [r4, #8]
 800d5b0:	b9e9      	cbnz	r1, 800d5ee <_puts_r+0x76>
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	da2e      	bge.n	800d614 <_puts_r+0x9c>
 800d5b6:	4622      	mov	r2, r4
 800d5b8:	210a      	movs	r1, #10
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f000 f87b 	bl	800d6b6 <__swbuf_r>
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	d007      	beq.n	800d5d4 <_puts_r+0x5c>
 800d5c4:	250a      	movs	r5, #10
 800d5c6:	e007      	b.n	800d5d8 <_puts_r+0x60>
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	f000 f8b0 	bl	800d730 <__swsetup_r>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d0e7      	beq.n	800d5a4 <_puts_r+0x2c>
 800d5d4:	f04f 35ff 	mov.w	r5, #4294967295
 800d5d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5da:	07da      	lsls	r2, r3, #31
 800d5dc:	d405      	bmi.n	800d5ea <_puts_r+0x72>
 800d5de:	89a3      	ldrh	r3, [r4, #12]
 800d5e0:	059b      	lsls	r3, r3, #22
 800d5e2:	d402      	bmi.n	800d5ea <_puts_r+0x72>
 800d5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5e6:	f000 f978 	bl	800d8da <__retarget_lock_release_recursive>
 800d5ea:	4628      	mov	r0, r5
 800d5ec:	bd70      	pop	{r4, r5, r6, pc}
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	da04      	bge.n	800d5fc <_puts_r+0x84>
 800d5f2:	69a2      	ldr	r2, [r4, #24]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	dc06      	bgt.n	800d606 <_puts_r+0x8e>
 800d5f8:	290a      	cmp	r1, #10
 800d5fa:	d004      	beq.n	800d606 <_puts_r+0x8e>
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	1c5a      	adds	r2, r3, #1
 800d600:	6022      	str	r2, [r4, #0]
 800d602:	7019      	strb	r1, [r3, #0]
 800d604:	e7cf      	b.n	800d5a6 <_puts_r+0x2e>
 800d606:	4622      	mov	r2, r4
 800d608:	4628      	mov	r0, r5
 800d60a:	f000 f854 	bl	800d6b6 <__swbuf_r>
 800d60e:	3001      	adds	r0, #1
 800d610:	d1c9      	bne.n	800d5a6 <_puts_r+0x2e>
 800d612:	e7df      	b.n	800d5d4 <_puts_r+0x5c>
 800d614:	6823      	ldr	r3, [r4, #0]
 800d616:	250a      	movs	r5, #10
 800d618:	1c5a      	adds	r2, r3, #1
 800d61a:	6022      	str	r2, [r4, #0]
 800d61c:	701d      	strb	r5, [r3, #0]
 800d61e:	e7db      	b.n	800d5d8 <_puts_r+0x60>

0800d620 <puts>:
 800d620:	4b02      	ldr	r3, [pc, #8]	; (800d62c <puts+0xc>)
 800d622:	4601      	mov	r1, r0
 800d624:	6818      	ldr	r0, [r3, #0]
 800d626:	f7ff bfa7 	b.w	800d578 <_puts_r>
 800d62a:	bf00      	nop
 800d62c:	20000080 	.word	0x20000080

0800d630 <__sread>:
 800d630:	b510      	push	{r4, lr}
 800d632:	460c      	mov	r4, r1
 800d634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d638:	f000 f900 	bl	800d83c <_read_r>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	bfab      	itete	ge
 800d640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d642:	89a3      	ldrhlt	r3, [r4, #12]
 800d644:	181b      	addge	r3, r3, r0
 800d646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d64a:	bfac      	ite	ge
 800d64c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d64e:	81a3      	strhlt	r3, [r4, #12]
 800d650:	bd10      	pop	{r4, pc}

0800d652 <__swrite>:
 800d652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d656:	461f      	mov	r7, r3
 800d658:	898b      	ldrh	r3, [r1, #12]
 800d65a:	05db      	lsls	r3, r3, #23
 800d65c:	4605      	mov	r5, r0
 800d65e:	460c      	mov	r4, r1
 800d660:	4616      	mov	r6, r2
 800d662:	d505      	bpl.n	800d670 <__swrite+0x1e>
 800d664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d668:	2302      	movs	r3, #2
 800d66a:	2200      	movs	r2, #0
 800d66c:	f000 f8d4 	bl	800d818 <_lseek_r>
 800d670:	89a3      	ldrh	r3, [r4, #12]
 800d672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d67a:	81a3      	strh	r3, [r4, #12]
 800d67c:	4632      	mov	r2, r6
 800d67e:	463b      	mov	r3, r7
 800d680:	4628      	mov	r0, r5
 800d682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d686:	f000 b8eb 	b.w	800d860 <_write_r>

0800d68a <__sseek>:
 800d68a:	b510      	push	{r4, lr}
 800d68c:	460c      	mov	r4, r1
 800d68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d692:	f000 f8c1 	bl	800d818 <_lseek_r>
 800d696:	1c43      	adds	r3, r0, #1
 800d698:	89a3      	ldrh	r3, [r4, #12]
 800d69a:	bf15      	itete	ne
 800d69c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d69e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6a6:	81a3      	strheq	r3, [r4, #12]
 800d6a8:	bf18      	it	ne
 800d6aa:	81a3      	strhne	r3, [r4, #12]
 800d6ac:	bd10      	pop	{r4, pc}

0800d6ae <__sclose>:
 800d6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b2:	f000 b8a1 	b.w	800d7f8 <_close_r>

0800d6b6 <__swbuf_r>:
 800d6b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b8:	460e      	mov	r6, r1
 800d6ba:	4614      	mov	r4, r2
 800d6bc:	4605      	mov	r5, r0
 800d6be:	b118      	cbz	r0, 800d6c8 <__swbuf_r+0x12>
 800d6c0:	6a03      	ldr	r3, [r0, #32]
 800d6c2:	b90b      	cbnz	r3, 800d6c8 <__swbuf_r+0x12>
 800d6c4:	f7ff ff10 	bl	800d4e8 <__sinit>
 800d6c8:	69a3      	ldr	r3, [r4, #24]
 800d6ca:	60a3      	str	r3, [r4, #8]
 800d6cc:	89a3      	ldrh	r3, [r4, #12]
 800d6ce:	071a      	lsls	r2, r3, #28
 800d6d0:	d525      	bpl.n	800d71e <__swbuf_r+0x68>
 800d6d2:	6923      	ldr	r3, [r4, #16]
 800d6d4:	b31b      	cbz	r3, 800d71e <__swbuf_r+0x68>
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	6922      	ldr	r2, [r4, #16]
 800d6da:	1a98      	subs	r0, r3, r2
 800d6dc:	6963      	ldr	r3, [r4, #20]
 800d6de:	b2f6      	uxtb	r6, r6
 800d6e0:	4283      	cmp	r3, r0
 800d6e2:	4637      	mov	r7, r6
 800d6e4:	dc04      	bgt.n	800d6f0 <__swbuf_r+0x3a>
 800d6e6:	4621      	mov	r1, r4
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f001 fdb9 	bl	800f260 <_fflush_r>
 800d6ee:	b9e0      	cbnz	r0, 800d72a <__swbuf_r+0x74>
 800d6f0:	68a3      	ldr	r3, [r4, #8]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	60a3      	str	r3, [r4, #8]
 800d6f6:	6823      	ldr	r3, [r4, #0]
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	6022      	str	r2, [r4, #0]
 800d6fc:	701e      	strb	r6, [r3, #0]
 800d6fe:	6962      	ldr	r2, [r4, #20]
 800d700:	1c43      	adds	r3, r0, #1
 800d702:	429a      	cmp	r2, r3
 800d704:	d004      	beq.n	800d710 <__swbuf_r+0x5a>
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	07db      	lsls	r3, r3, #31
 800d70a:	d506      	bpl.n	800d71a <__swbuf_r+0x64>
 800d70c:	2e0a      	cmp	r6, #10
 800d70e:	d104      	bne.n	800d71a <__swbuf_r+0x64>
 800d710:	4621      	mov	r1, r4
 800d712:	4628      	mov	r0, r5
 800d714:	f001 fda4 	bl	800f260 <_fflush_r>
 800d718:	b938      	cbnz	r0, 800d72a <__swbuf_r+0x74>
 800d71a:	4638      	mov	r0, r7
 800d71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d71e:	4621      	mov	r1, r4
 800d720:	4628      	mov	r0, r5
 800d722:	f000 f805 	bl	800d730 <__swsetup_r>
 800d726:	2800      	cmp	r0, #0
 800d728:	d0d5      	beq.n	800d6d6 <__swbuf_r+0x20>
 800d72a:	f04f 37ff 	mov.w	r7, #4294967295
 800d72e:	e7f4      	b.n	800d71a <__swbuf_r+0x64>

0800d730 <__swsetup_r>:
 800d730:	b538      	push	{r3, r4, r5, lr}
 800d732:	4b2a      	ldr	r3, [pc, #168]	; (800d7dc <__swsetup_r+0xac>)
 800d734:	4605      	mov	r5, r0
 800d736:	6818      	ldr	r0, [r3, #0]
 800d738:	460c      	mov	r4, r1
 800d73a:	b118      	cbz	r0, 800d744 <__swsetup_r+0x14>
 800d73c:	6a03      	ldr	r3, [r0, #32]
 800d73e:	b90b      	cbnz	r3, 800d744 <__swsetup_r+0x14>
 800d740:	f7ff fed2 	bl	800d4e8 <__sinit>
 800d744:	89a3      	ldrh	r3, [r4, #12]
 800d746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d74a:	0718      	lsls	r0, r3, #28
 800d74c:	d422      	bmi.n	800d794 <__swsetup_r+0x64>
 800d74e:	06d9      	lsls	r1, r3, #27
 800d750:	d407      	bmi.n	800d762 <__swsetup_r+0x32>
 800d752:	2309      	movs	r3, #9
 800d754:	602b      	str	r3, [r5, #0]
 800d756:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d75a:	81a3      	strh	r3, [r4, #12]
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295
 800d760:	e034      	b.n	800d7cc <__swsetup_r+0x9c>
 800d762:	0758      	lsls	r0, r3, #29
 800d764:	d512      	bpl.n	800d78c <__swsetup_r+0x5c>
 800d766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d768:	b141      	cbz	r1, 800d77c <__swsetup_r+0x4c>
 800d76a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d76e:	4299      	cmp	r1, r3
 800d770:	d002      	beq.n	800d778 <__swsetup_r+0x48>
 800d772:	4628      	mov	r0, r5
 800d774:	f000 ff2e 	bl	800e5d4 <_free_r>
 800d778:	2300      	movs	r3, #0
 800d77a:	6363      	str	r3, [r4, #52]	; 0x34
 800d77c:	89a3      	ldrh	r3, [r4, #12]
 800d77e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d782:	81a3      	strh	r3, [r4, #12]
 800d784:	2300      	movs	r3, #0
 800d786:	6063      	str	r3, [r4, #4]
 800d788:	6923      	ldr	r3, [r4, #16]
 800d78a:	6023      	str	r3, [r4, #0]
 800d78c:	89a3      	ldrh	r3, [r4, #12]
 800d78e:	f043 0308 	orr.w	r3, r3, #8
 800d792:	81a3      	strh	r3, [r4, #12]
 800d794:	6923      	ldr	r3, [r4, #16]
 800d796:	b94b      	cbnz	r3, 800d7ac <__swsetup_r+0x7c>
 800d798:	89a3      	ldrh	r3, [r4, #12]
 800d79a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d79e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7a2:	d003      	beq.n	800d7ac <__swsetup_r+0x7c>
 800d7a4:	4621      	mov	r1, r4
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f001 fda8 	bl	800f2fc <__smakebuf_r>
 800d7ac:	89a0      	ldrh	r0, [r4, #12]
 800d7ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7b2:	f010 0301 	ands.w	r3, r0, #1
 800d7b6:	d00a      	beq.n	800d7ce <__swsetup_r+0x9e>
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	60a3      	str	r3, [r4, #8]
 800d7bc:	6963      	ldr	r3, [r4, #20]
 800d7be:	425b      	negs	r3, r3
 800d7c0:	61a3      	str	r3, [r4, #24]
 800d7c2:	6923      	ldr	r3, [r4, #16]
 800d7c4:	b943      	cbnz	r3, 800d7d8 <__swsetup_r+0xa8>
 800d7c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7ca:	d1c4      	bne.n	800d756 <__swsetup_r+0x26>
 800d7cc:	bd38      	pop	{r3, r4, r5, pc}
 800d7ce:	0781      	lsls	r1, r0, #30
 800d7d0:	bf58      	it	pl
 800d7d2:	6963      	ldrpl	r3, [r4, #20]
 800d7d4:	60a3      	str	r3, [r4, #8]
 800d7d6:	e7f4      	b.n	800d7c2 <__swsetup_r+0x92>
 800d7d8:	2000      	movs	r0, #0
 800d7da:	e7f7      	b.n	800d7cc <__swsetup_r+0x9c>
 800d7dc:	20000080 	.word	0x20000080

0800d7e0 <memset>:
 800d7e0:	4402      	add	r2, r0
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	4293      	cmp	r3, r2
 800d7e6:	d100      	bne.n	800d7ea <memset+0xa>
 800d7e8:	4770      	bx	lr
 800d7ea:	f803 1b01 	strb.w	r1, [r3], #1
 800d7ee:	e7f9      	b.n	800d7e4 <memset+0x4>

0800d7f0 <_localeconv_r>:
 800d7f0:	4800      	ldr	r0, [pc, #0]	; (800d7f4 <_localeconv_r+0x4>)
 800d7f2:	4770      	bx	lr
 800d7f4:	20000174 	.word	0x20000174

0800d7f8 <_close_r>:
 800d7f8:	b538      	push	{r3, r4, r5, lr}
 800d7fa:	4d06      	ldr	r5, [pc, #24]	; (800d814 <_close_r+0x1c>)
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	4604      	mov	r4, r0
 800d800:	4608      	mov	r0, r1
 800d802:	602b      	str	r3, [r5, #0]
 800d804:	f7f7 fdc7 	bl	8005396 <_close>
 800d808:	1c43      	adds	r3, r0, #1
 800d80a:	d102      	bne.n	800d812 <_close_r+0x1a>
 800d80c:	682b      	ldr	r3, [r5, #0]
 800d80e:	b103      	cbz	r3, 800d812 <_close_r+0x1a>
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	bd38      	pop	{r3, r4, r5, pc}
 800d814:	200009dc 	.word	0x200009dc

0800d818 <_lseek_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4d07      	ldr	r5, [pc, #28]	; (800d838 <_lseek_r+0x20>)
 800d81c:	4604      	mov	r4, r0
 800d81e:	4608      	mov	r0, r1
 800d820:	4611      	mov	r1, r2
 800d822:	2200      	movs	r2, #0
 800d824:	602a      	str	r2, [r5, #0]
 800d826:	461a      	mov	r2, r3
 800d828:	f7f7 fddc 	bl	80053e4 <_lseek>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	d102      	bne.n	800d836 <_lseek_r+0x1e>
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	b103      	cbz	r3, 800d836 <_lseek_r+0x1e>
 800d834:	6023      	str	r3, [r4, #0]
 800d836:	bd38      	pop	{r3, r4, r5, pc}
 800d838:	200009dc 	.word	0x200009dc

0800d83c <_read_r>:
 800d83c:	b538      	push	{r3, r4, r5, lr}
 800d83e:	4d07      	ldr	r5, [pc, #28]	; (800d85c <_read_r+0x20>)
 800d840:	4604      	mov	r4, r0
 800d842:	4608      	mov	r0, r1
 800d844:	4611      	mov	r1, r2
 800d846:	2200      	movs	r2, #0
 800d848:	602a      	str	r2, [r5, #0]
 800d84a:	461a      	mov	r2, r3
 800d84c:	f7f7 fd86 	bl	800535c <_read>
 800d850:	1c43      	adds	r3, r0, #1
 800d852:	d102      	bne.n	800d85a <_read_r+0x1e>
 800d854:	682b      	ldr	r3, [r5, #0]
 800d856:	b103      	cbz	r3, 800d85a <_read_r+0x1e>
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	bd38      	pop	{r3, r4, r5, pc}
 800d85c:	200009dc 	.word	0x200009dc

0800d860 <_write_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4d07      	ldr	r5, [pc, #28]	; (800d880 <_write_r+0x20>)
 800d864:	4604      	mov	r4, r0
 800d866:	4608      	mov	r0, r1
 800d868:	4611      	mov	r1, r2
 800d86a:	2200      	movs	r2, #0
 800d86c:	602a      	str	r2, [r5, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	f7f4 fbe6 	bl	8002040 <_write>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_write_r+0x1e>
 800d878:	682b      	ldr	r3, [r5, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_write_r+0x1e>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	200009dc 	.word	0x200009dc

0800d884 <__errno>:
 800d884:	4b01      	ldr	r3, [pc, #4]	; (800d88c <__errno+0x8>)
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	20000080 	.word	0x20000080

0800d890 <__libc_init_array>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	4d0d      	ldr	r5, [pc, #52]	; (800d8c8 <__libc_init_array+0x38>)
 800d894:	4c0d      	ldr	r4, [pc, #52]	; (800d8cc <__libc_init_array+0x3c>)
 800d896:	1b64      	subs	r4, r4, r5
 800d898:	10a4      	asrs	r4, r4, #2
 800d89a:	2600      	movs	r6, #0
 800d89c:	42a6      	cmp	r6, r4
 800d89e:	d109      	bne.n	800d8b4 <__libc_init_array+0x24>
 800d8a0:	4d0b      	ldr	r5, [pc, #44]	; (800d8d0 <__libc_init_array+0x40>)
 800d8a2:	4c0c      	ldr	r4, [pc, #48]	; (800d8d4 <__libc_init_array+0x44>)
 800d8a4:	f001 fe58 	bl	800f558 <_init>
 800d8a8:	1b64      	subs	r4, r4, r5
 800d8aa:	10a4      	asrs	r4, r4, #2
 800d8ac:	2600      	movs	r6, #0
 800d8ae:	42a6      	cmp	r6, r4
 800d8b0:	d105      	bne.n	800d8be <__libc_init_array+0x2e>
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8b8:	4798      	blx	r3
 800d8ba:	3601      	adds	r6, #1
 800d8bc:	e7ee      	b.n	800d89c <__libc_init_array+0xc>
 800d8be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8c2:	4798      	blx	r3
 800d8c4:	3601      	adds	r6, #1
 800d8c6:	e7f2      	b.n	800d8ae <__libc_init_array+0x1e>
 800d8c8:	0800fd64 	.word	0x0800fd64
 800d8cc:	0800fd64 	.word	0x0800fd64
 800d8d0:	0800fd64 	.word	0x0800fd64
 800d8d4:	0800fd68 	.word	0x0800fd68

0800d8d8 <__retarget_lock_acquire_recursive>:
 800d8d8:	4770      	bx	lr

0800d8da <__retarget_lock_release_recursive>:
 800d8da:	4770      	bx	lr

0800d8dc <quorem>:
 800d8dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e0:	6903      	ldr	r3, [r0, #16]
 800d8e2:	690c      	ldr	r4, [r1, #16]
 800d8e4:	42a3      	cmp	r3, r4
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	db7e      	blt.n	800d9e8 <quorem+0x10c>
 800d8ea:	3c01      	subs	r4, #1
 800d8ec:	f101 0814 	add.w	r8, r1, #20
 800d8f0:	f100 0514 	add.w	r5, r0, #20
 800d8f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8f8:	9301      	str	r3, [sp, #4]
 800d8fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d902:	3301      	adds	r3, #1
 800d904:	429a      	cmp	r2, r3
 800d906:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d90a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d90e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d912:	d331      	bcc.n	800d978 <quorem+0x9c>
 800d914:	f04f 0e00 	mov.w	lr, #0
 800d918:	4640      	mov	r0, r8
 800d91a:	46ac      	mov	ip, r5
 800d91c:	46f2      	mov	sl, lr
 800d91e:	f850 2b04 	ldr.w	r2, [r0], #4
 800d922:	b293      	uxth	r3, r2
 800d924:	fb06 e303 	mla	r3, r6, r3, lr
 800d928:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d92c:	0c1a      	lsrs	r2, r3, #16
 800d92e:	b29b      	uxth	r3, r3
 800d930:	ebaa 0303 	sub.w	r3, sl, r3
 800d934:	f8dc a000 	ldr.w	sl, [ip]
 800d938:	fa13 f38a 	uxtah	r3, r3, sl
 800d93c:	fb06 220e 	mla	r2, r6, lr, r2
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	9b00      	ldr	r3, [sp, #0]
 800d944:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d948:	b292      	uxth	r2, r2
 800d94a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d94e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d952:	f8bd 3000 	ldrh.w	r3, [sp]
 800d956:	4581      	cmp	r9, r0
 800d958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d95c:	f84c 3b04 	str.w	r3, [ip], #4
 800d960:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d964:	d2db      	bcs.n	800d91e <quorem+0x42>
 800d966:	f855 300b 	ldr.w	r3, [r5, fp]
 800d96a:	b92b      	cbnz	r3, 800d978 <quorem+0x9c>
 800d96c:	9b01      	ldr	r3, [sp, #4]
 800d96e:	3b04      	subs	r3, #4
 800d970:	429d      	cmp	r5, r3
 800d972:	461a      	mov	r2, r3
 800d974:	d32c      	bcc.n	800d9d0 <quorem+0xf4>
 800d976:	613c      	str	r4, [r7, #16]
 800d978:	4638      	mov	r0, r7
 800d97a:	f001 f9a7 	bl	800eccc <__mcmp>
 800d97e:	2800      	cmp	r0, #0
 800d980:	db22      	blt.n	800d9c8 <quorem+0xec>
 800d982:	3601      	adds	r6, #1
 800d984:	4629      	mov	r1, r5
 800d986:	2000      	movs	r0, #0
 800d988:	f858 2b04 	ldr.w	r2, [r8], #4
 800d98c:	f8d1 c000 	ldr.w	ip, [r1]
 800d990:	b293      	uxth	r3, r2
 800d992:	1ac3      	subs	r3, r0, r3
 800d994:	0c12      	lsrs	r2, r2, #16
 800d996:	fa13 f38c 	uxtah	r3, r3, ip
 800d99a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d99e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9a8:	45c1      	cmp	r9, r8
 800d9aa:	f841 3b04 	str.w	r3, [r1], #4
 800d9ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d9b2:	d2e9      	bcs.n	800d988 <quorem+0xac>
 800d9b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9bc:	b922      	cbnz	r2, 800d9c8 <quorem+0xec>
 800d9be:	3b04      	subs	r3, #4
 800d9c0:	429d      	cmp	r5, r3
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	d30a      	bcc.n	800d9dc <quorem+0x100>
 800d9c6:	613c      	str	r4, [r7, #16]
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	b003      	add	sp, #12
 800d9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d0:	6812      	ldr	r2, [r2, #0]
 800d9d2:	3b04      	subs	r3, #4
 800d9d4:	2a00      	cmp	r2, #0
 800d9d6:	d1ce      	bne.n	800d976 <quorem+0x9a>
 800d9d8:	3c01      	subs	r4, #1
 800d9da:	e7c9      	b.n	800d970 <quorem+0x94>
 800d9dc:	6812      	ldr	r2, [r2, #0]
 800d9de:	3b04      	subs	r3, #4
 800d9e0:	2a00      	cmp	r2, #0
 800d9e2:	d1f0      	bne.n	800d9c6 <quorem+0xea>
 800d9e4:	3c01      	subs	r4, #1
 800d9e6:	e7eb      	b.n	800d9c0 <quorem+0xe4>
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	e7ee      	b.n	800d9ca <quorem+0xee>
 800d9ec:	0000      	movs	r0, r0
	...

0800d9f0 <_dtoa_r>:
 800d9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f4:	ed2d 8b04 	vpush	{d8-d9}
 800d9f8:	69c5      	ldr	r5, [r0, #28]
 800d9fa:	b093      	sub	sp, #76	; 0x4c
 800d9fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800da00:	ec57 6b10 	vmov	r6, r7, d0
 800da04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da08:	9107      	str	r1, [sp, #28]
 800da0a:	4604      	mov	r4, r0
 800da0c:	920a      	str	r2, [sp, #40]	; 0x28
 800da0e:	930d      	str	r3, [sp, #52]	; 0x34
 800da10:	b975      	cbnz	r5, 800da30 <_dtoa_r+0x40>
 800da12:	2010      	movs	r0, #16
 800da14:	f000 fe2a 	bl	800e66c <malloc>
 800da18:	4602      	mov	r2, r0
 800da1a:	61e0      	str	r0, [r4, #28]
 800da1c:	b920      	cbnz	r0, 800da28 <_dtoa_r+0x38>
 800da1e:	4bae      	ldr	r3, [pc, #696]	; (800dcd8 <_dtoa_r+0x2e8>)
 800da20:	21ef      	movs	r1, #239	; 0xef
 800da22:	48ae      	ldr	r0, [pc, #696]	; (800dcdc <_dtoa_r+0x2ec>)
 800da24:	f001 fce6 	bl	800f3f4 <__assert_func>
 800da28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da2c:	6005      	str	r5, [r0, #0]
 800da2e:	60c5      	str	r5, [r0, #12]
 800da30:	69e3      	ldr	r3, [r4, #28]
 800da32:	6819      	ldr	r1, [r3, #0]
 800da34:	b151      	cbz	r1, 800da4c <_dtoa_r+0x5c>
 800da36:	685a      	ldr	r2, [r3, #4]
 800da38:	604a      	str	r2, [r1, #4]
 800da3a:	2301      	movs	r3, #1
 800da3c:	4093      	lsls	r3, r2
 800da3e:	608b      	str	r3, [r1, #8]
 800da40:	4620      	mov	r0, r4
 800da42:	f000 ff07 	bl	800e854 <_Bfree>
 800da46:	69e3      	ldr	r3, [r4, #28]
 800da48:	2200      	movs	r2, #0
 800da4a:	601a      	str	r2, [r3, #0]
 800da4c:	1e3b      	subs	r3, r7, #0
 800da4e:	bfbb      	ittet	lt
 800da50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da54:	9303      	strlt	r3, [sp, #12]
 800da56:	2300      	movge	r3, #0
 800da58:	2201      	movlt	r2, #1
 800da5a:	bfac      	ite	ge
 800da5c:	f8c8 3000 	strge.w	r3, [r8]
 800da60:	f8c8 2000 	strlt.w	r2, [r8]
 800da64:	4b9e      	ldr	r3, [pc, #632]	; (800dce0 <_dtoa_r+0x2f0>)
 800da66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800da6a:	ea33 0308 	bics.w	r3, r3, r8
 800da6e:	d11b      	bne.n	800daa8 <_dtoa_r+0xb8>
 800da70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da72:	f242 730f 	movw	r3, #9999	; 0x270f
 800da76:	6013      	str	r3, [r2, #0]
 800da78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800da7c:	4333      	orrs	r3, r6
 800da7e:	f000 8593 	beq.w	800e5a8 <_dtoa_r+0xbb8>
 800da82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da84:	b963      	cbnz	r3, 800daa0 <_dtoa_r+0xb0>
 800da86:	4b97      	ldr	r3, [pc, #604]	; (800dce4 <_dtoa_r+0x2f4>)
 800da88:	e027      	b.n	800dada <_dtoa_r+0xea>
 800da8a:	4b97      	ldr	r3, [pc, #604]	; (800dce8 <_dtoa_r+0x2f8>)
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	3308      	adds	r3, #8
 800da90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da92:	6013      	str	r3, [r2, #0]
 800da94:	9800      	ldr	r0, [sp, #0]
 800da96:	b013      	add	sp, #76	; 0x4c
 800da98:	ecbd 8b04 	vpop	{d8-d9}
 800da9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa0:	4b90      	ldr	r3, [pc, #576]	; (800dce4 <_dtoa_r+0x2f4>)
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	3303      	adds	r3, #3
 800daa6:	e7f3      	b.n	800da90 <_dtoa_r+0xa0>
 800daa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800daac:	2200      	movs	r2, #0
 800daae:	ec51 0b17 	vmov	r0, r1, d7
 800dab2:	eeb0 8a47 	vmov.f32	s16, s14
 800dab6:	eef0 8a67 	vmov.f32	s17, s15
 800daba:	2300      	movs	r3, #0
 800dabc:	f7f3 f804 	bl	8000ac8 <__aeabi_dcmpeq>
 800dac0:	4681      	mov	r9, r0
 800dac2:	b160      	cbz	r0, 800dade <_dtoa_r+0xee>
 800dac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dac6:	2301      	movs	r3, #1
 800dac8:	6013      	str	r3, [r2, #0]
 800daca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 8568 	beq.w	800e5a2 <_dtoa_r+0xbb2>
 800dad2:	4b86      	ldr	r3, [pc, #536]	; (800dcec <_dtoa_r+0x2fc>)
 800dad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dad6:	6013      	str	r3, [r2, #0]
 800dad8:	3b01      	subs	r3, #1
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	e7da      	b.n	800da94 <_dtoa_r+0xa4>
 800dade:	aa10      	add	r2, sp, #64	; 0x40
 800dae0:	a911      	add	r1, sp, #68	; 0x44
 800dae2:	4620      	mov	r0, r4
 800dae4:	eeb0 0a48 	vmov.f32	s0, s16
 800dae8:	eef0 0a68 	vmov.f32	s1, s17
 800daec:	f001 f994 	bl	800ee18 <__d2b>
 800daf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800daf4:	4682      	mov	sl, r0
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	d07f      	beq.n	800dbfa <_dtoa_r+0x20a>
 800dafa:	ee18 3a90 	vmov	r3, s17
 800dafe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800db06:	ec51 0b18 	vmov	r0, r1, d8
 800db0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800db0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800db16:	4619      	mov	r1, r3
 800db18:	2200      	movs	r2, #0
 800db1a:	4b75      	ldr	r3, [pc, #468]	; (800dcf0 <_dtoa_r+0x300>)
 800db1c:	f7f2 fbb4 	bl	8000288 <__aeabi_dsub>
 800db20:	a367      	add	r3, pc, #412	; (adr r3, 800dcc0 <_dtoa_r+0x2d0>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	f7f2 fd67 	bl	80005f8 <__aeabi_dmul>
 800db2a:	a367      	add	r3, pc, #412	; (adr r3, 800dcc8 <_dtoa_r+0x2d8>)
 800db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db30:	f7f2 fbac 	bl	800028c <__adddf3>
 800db34:	4606      	mov	r6, r0
 800db36:	4628      	mov	r0, r5
 800db38:	460f      	mov	r7, r1
 800db3a:	f7f2 fcf3 	bl	8000524 <__aeabi_i2d>
 800db3e:	a364      	add	r3, pc, #400	; (adr r3, 800dcd0 <_dtoa_r+0x2e0>)
 800db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db44:	f7f2 fd58 	bl	80005f8 <__aeabi_dmul>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4630      	mov	r0, r6
 800db4e:	4639      	mov	r1, r7
 800db50:	f7f2 fb9c 	bl	800028c <__adddf3>
 800db54:	4606      	mov	r6, r0
 800db56:	460f      	mov	r7, r1
 800db58:	f7f2 fffe 	bl	8000b58 <__aeabi_d2iz>
 800db5c:	2200      	movs	r2, #0
 800db5e:	4683      	mov	fp, r0
 800db60:	2300      	movs	r3, #0
 800db62:	4630      	mov	r0, r6
 800db64:	4639      	mov	r1, r7
 800db66:	f7f2 ffb9 	bl	8000adc <__aeabi_dcmplt>
 800db6a:	b148      	cbz	r0, 800db80 <_dtoa_r+0x190>
 800db6c:	4658      	mov	r0, fp
 800db6e:	f7f2 fcd9 	bl	8000524 <__aeabi_i2d>
 800db72:	4632      	mov	r2, r6
 800db74:	463b      	mov	r3, r7
 800db76:	f7f2 ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800db7a:	b908      	cbnz	r0, 800db80 <_dtoa_r+0x190>
 800db7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db80:	f1bb 0f16 	cmp.w	fp, #22
 800db84:	d857      	bhi.n	800dc36 <_dtoa_r+0x246>
 800db86:	4b5b      	ldr	r3, [pc, #364]	; (800dcf4 <_dtoa_r+0x304>)
 800db88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	ec51 0b18 	vmov	r0, r1, d8
 800db94:	f7f2 ffa2 	bl	8000adc <__aeabi_dcmplt>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d04e      	beq.n	800dc3a <_dtoa_r+0x24a>
 800db9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dba0:	2300      	movs	r3, #0
 800dba2:	930c      	str	r3, [sp, #48]	; 0x30
 800dba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dba6:	1b5b      	subs	r3, r3, r5
 800dba8:	1e5a      	subs	r2, r3, #1
 800dbaa:	bf45      	ittet	mi
 800dbac:	f1c3 0301 	rsbmi	r3, r3, #1
 800dbb0:	9305      	strmi	r3, [sp, #20]
 800dbb2:	2300      	movpl	r3, #0
 800dbb4:	2300      	movmi	r3, #0
 800dbb6:	9206      	str	r2, [sp, #24]
 800dbb8:	bf54      	ite	pl
 800dbba:	9305      	strpl	r3, [sp, #20]
 800dbbc:	9306      	strmi	r3, [sp, #24]
 800dbbe:	f1bb 0f00 	cmp.w	fp, #0
 800dbc2:	db3c      	blt.n	800dc3e <_dtoa_r+0x24e>
 800dbc4:	9b06      	ldr	r3, [sp, #24]
 800dbc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dbca:	445b      	add	r3, fp
 800dbcc:	9306      	str	r3, [sp, #24]
 800dbce:	2300      	movs	r3, #0
 800dbd0:	9308      	str	r3, [sp, #32]
 800dbd2:	9b07      	ldr	r3, [sp, #28]
 800dbd4:	2b09      	cmp	r3, #9
 800dbd6:	d868      	bhi.n	800dcaa <_dtoa_r+0x2ba>
 800dbd8:	2b05      	cmp	r3, #5
 800dbda:	bfc4      	itt	gt
 800dbdc:	3b04      	subgt	r3, #4
 800dbde:	9307      	strgt	r3, [sp, #28]
 800dbe0:	9b07      	ldr	r3, [sp, #28]
 800dbe2:	f1a3 0302 	sub.w	r3, r3, #2
 800dbe6:	bfcc      	ite	gt
 800dbe8:	2500      	movgt	r5, #0
 800dbea:	2501      	movle	r5, #1
 800dbec:	2b03      	cmp	r3, #3
 800dbee:	f200 8085 	bhi.w	800dcfc <_dtoa_r+0x30c>
 800dbf2:	e8df f003 	tbb	[pc, r3]
 800dbf6:	3b2e      	.short	0x3b2e
 800dbf8:	5839      	.short	0x5839
 800dbfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dbfe:	441d      	add	r5, r3
 800dc00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc04:	2b20      	cmp	r3, #32
 800dc06:	bfc1      	itttt	gt
 800dc08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc0c:	fa08 f803 	lslgt.w	r8, r8, r3
 800dc10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dc14:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dc18:	bfd6      	itet	le
 800dc1a:	f1c3 0320 	rsble	r3, r3, #32
 800dc1e:	ea48 0003 	orrgt.w	r0, r8, r3
 800dc22:	fa06 f003 	lslle.w	r0, r6, r3
 800dc26:	f7f2 fc6d 	bl	8000504 <__aeabi_ui2d>
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dc30:	3d01      	subs	r5, #1
 800dc32:	920e      	str	r2, [sp, #56]	; 0x38
 800dc34:	e76f      	b.n	800db16 <_dtoa_r+0x126>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e7b3      	b.n	800dba2 <_dtoa_r+0x1b2>
 800dc3a:	900c      	str	r0, [sp, #48]	; 0x30
 800dc3c:	e7b2      	b.n	800dba4 <_dtoa_r+0x1b4>
 800dc3e:	9b05      	ldr	r3, [sp, #20]
 800dc40:	eba3 030b 	sub.w	r3, r3, fp
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	f1cb 0300 	rsb	r3, fp, #0
 800dc4a:	9308      	str	r3, [sp, #32]
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc50:	e7bf      	b.n	800dbd2 <_dtoa_r+0x1e2>
 800dc52:	2300      	movs	r3, #0
 800dc54:	9309      	str	r3, [sp, #36]	; 0x24
 800dc56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	dc52      	bgt.n	800dd02 <_dtoa_r+0x312>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	9301      	str	r3, [sp, #4]
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	461a      	mov	r2, r3
 800dc64:	920a      	str	r2, [sp, #40]	; 0x28
 800dc66:	e00b      	b.n	800dc80 <_dtoa_r+0x290>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e7f3      	b.n	800dc54 <_dtoa_r+0x264>
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc72:	445b      	add	r3, fp
 800dc74:	9301      	str	r3, [sp, #4]
 800dc76:	3301      	adds	r3, #1
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	bfb8      	it	lt
 800dc7e:	2301      	movlt	r3, #1
 800dc80:	69e0      	ldr	r0, [r4, #28]
 800dc82:	2100      	movs	r1, #0
 800dc84:	2204      	movs	r2, #4
 800dc86:	f102 0614 	add.w	r6, r2, #20
 800dc8a:	429e      	cmp	r6, r3
 800dc8c:	d93d      	bls.n	800dd0a <_dtoa_r+0x31a>
 800dc8e:	6041      	str	r1, [r0, #4]
 800dc90:	4620      	mov	r0, r4
 800dc92:	f000 fd9f 	bl	800e7d4 <_Balloc>
 800dc96:	9000      	str	r0, [sp, #0]
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d139      	bne.n	800dd10 <_dtoa_r+0x320>
 800dc9c:	4b16      	ldr	r3, [pc, #88]	; (800dcf8 <_dtoa_r+0x308>)
 800dc9e:	4602      	mov	r2, r0
 800dca0:	f240 11af 	movw	r1, #431	; 0x1af
 800dca4:	e6bd      	b.n	800da22 <_dtoa_r+0x32>
 800dca6:	2301      	movs	r3, #1
 800dca8:	e7e1      	b.n	800dc6e <_dtoa_r+0x27e>
 800dcaa:	2501      	movs	r5, #1
 800dcac:	2300      	movs	r3, #0
 800dcae:	9307      	str	r3, [sp, #28]
 800dcb0:	9509      	str	r5, [sp, #36]	; 0x24
 800dcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	9304      	str	r3, [sp, #16]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	2312      	movs	r3, #18
 800dcbe:	e7d1      	b.n	800dc64 <_dtoa_r+0x274>
 800dcc0:	636f4361 	.word	0x636f4361
 800dcc4:	3fd287a7 	.word	0x3fd287a7
 800dcc8:	8b60c8b3 	.word	0x8b60c8b3
 800dccc:	3fc68a28 	.word	0x3fc68a28
 800dcd0:	509f79fb 	.word	0x509f79fb
 800dcd4:	3fd34413 	.word	0x3fd34413
 800dcd8:	0800fb2a 	.word	0x0800fb2a
 800dcdc:	0800fb41 	.word	0x0800fb41
 800dce0:	7ff00000 	.word	0x7ff00000
 800dce4:	0800fb26 	.word	0x0800fb26
 800dce8:	0800fb1d 	.word	0x0800fb1d
 800dcec:	0800fafa 	.word	0x0800fafa
 800dcf0:	3ff80000 	.word	0x3ff80000
 800dcf4:	0800fc30 	.word	0x0800fc30
 800dcf8:	0800fb99 	.word	0x0800fb99
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800dd00:	e7d7      	b.n	800dcb2 <_dtoa_r+0x2c2>
 800dd02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd04:	9301      	str	r3, [sp, #4]
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	e7ba      	b.n	800dc80 <_dtoa_r+0x290>
 800dd0a:	3101      	adds	r1, #1
 800dd0c:	0052      	lsls	r2, r2, #1
 800dd0e:	e7ba      	b.n	800dc86 <_dtoa_r+0x296>
 800dd10:	69e3      	ldr	r3, [r4, #28]
 800dd12:	9a00      	ldr	r2, [sp, #0]
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	9b04      	ldr	r3, [sp, #16]
 800dd18:	2b0e      	cmp	r3, #14
 800dd1a:	f200 80a8 	bhi.w	800de6e <_dtoa_r+0x47e>
 800dd1e:	2d00      	cmp	r5, #0
 800dd20:	f000 80a5 	beq.w	800de6e <_dtoa_r+0x47e>
 800dd24:	f1bb 0f00 	cmp.w	fp, #0
 800dd28:	dd38      	ble.n	800dd9c <_dtoa_r+0x3ac>
 800dd2a:	4bc0      	ldr	r3, [pc, #768]	; (800e02c <_dtoa_r+0x63c>)
 800dd2c:	f00b 020f 	and.w	r2, fp, #15
 800dd30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dd38:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dd3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dd40:	d019      	beq.n	800dd76 <_dtoa_r+0x386>
 800dd42:	4bbb      	ldr	r3, [pc, #748]	; (800e030 <_dtoa_r+0x640>)
 800dd44:	ec51 0b18 	vmov	r0, r1, d8
 800dd48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd4c:	f7f2 fd7e 	bl	800084c <__aeabi_ddiv>
 800dd50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd54:	f008 080f 	and.w	r8, r8, #15
 800dd58:	2503      	movs	r5, #3
 800dd5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e030 <_dtoa_r+0x640>
 800dd5e:	f1b8 0f00 	cmp.w	r8, #0
 800dd62:	d10a      	bne.n	800dd7a <_dtoa_r+0x38a>
 800dd64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd68:	4632      	mov	r2, r6
 800dd6a:	463b      	mov	r3, r7
 800dd6c:	f7f2 fd6e 	bl	800084c <__aeabi_ddiv>
 800dd70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd74:	e02b      	b.n	800ddce <_dtoa_r+0x3de>
 800dd76:	2502      	movs	r5, #2
 800dd78:	e7ef      	b.n	800dd5a <_dtoa_r+0x36a>
 800dd7a:	f018 0f01 	tst.w	r8, #1
 800dd7e:	d008      	beq.n	800dd92 <_dtoa_r+0x3a2>
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dd88:	f7f2 fc36 	bl	80005f8 <__aeabi_dmul>
 800dd8c:	3501      	adds	r5, #1
 800dd8e:	4606      	mov	r6, r0
 800dd90:	460f      	mov	r7, r1
 800dd92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dd96:	f109 0908 	add.w	r9, r9, #8
 800dd9a:	e7e0      	b.n	800dd5e <_dtoa_r+0x36e>
 800dd9c:	f000 809f 	beq.w	800dede <_dtoa_r+0x4ee>
 800dda0:	f1cb 0600 	rsb	r6, fp, #0
 800dda4:	4ba1      	ldr	r3, [pc, #644]	; (800e02c <_dtoa_r+0x63c>)
 800dda6:	4fa2      	ldr	r7, [pc, #648]	; (800e030 <_dtoa_r+0x640>)
 800dda8:	f006 020f 	and.w	r2, r6, #15
 800ddac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb4:	ec51 0b18 	vmov	r0, r1, d8
 800ddb8:	f7f2 fc1e 	bl	80005f8 <__aeabi_dmul>
 800ddbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddc0:	1136      	asrs	r6, r6, #4
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2502      	movs	r5, #2
 800ddc6:	2e00      	cmp	r6, #0
 800ddc8:	d17e      	bne.n	800dec8 <_dtoa_r+0x4d8>
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1d0      	bne.n	800dd70 <_dtoa_r+0x380>
 800ddce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 8084 	beq.w	800dee2 <_dtoa_r+0x4f2>
 800ddda:	4b96      	ldr	r3, [pc, #600]	; (800e034 <_dtoa_r+0x644>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	4640      	mov	r0, r8
 800dde0:	4649      	mov	r1, r9
 800dde2:	f7f2 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d07b      	beq.n	800dee2 <_dtoa_r+0x4f2>
 800ddea:	9b04      	ldr	r3, [sp, #16]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d078      	beq.n	800dee2 <_dtoa_r+0x4f2>
 800ddf0:	9b01      	ldr	r3, [sp, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	dd39      	ble.n	800de6a <_dtoa_r+0x47a>
 800ddf6:	4b90      	ldr	r3, [pc, #576]	; (800e038 <_dtoa_r+0x648>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	4640      	mov	r0, r8
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	f7f2 fbfb 	bl	80005f8 <__aeabi_dmul>
 800de02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de06:	9e01      	ldr	r6, [sp, #4]
 800de08:	f10b 37ff 	add.w	r7, fp, #4294967295
 800de0c:	3501      	adds	r5, #1
 800de0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800de12:	4628      	mov	r0, r5
 800de14:	f7f2 fb86 	bl	8000524 <__aeabi_i2d>
 800de18:	4642      	mov	r2, r8
 800de1a:	464b      	mov	r3, r9
 800de1c:	f7f2 fbec 	bl	80005f8 <__aeabi_dmul>
 800de20:	4b86      	ldr	r3, [pc, #536]	; (800e03c <_dtoa_r+0x64c>)
 800de22:	2200      	movs	r2, #0
 800de24:	f7f2 fa32 	bl	800028c <__adddf3>
 800de28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800de2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de30:	9303      	str	r3, [sp, #12]
 800de32:	2e00      	cmp	r6, #0
 800de34:	d158      	bne.n	800dee8 <_dtoa_r+0x4f8>
 800de36:	4b82      	ldr	r3, [pc, #520]	; (800e040 <_dtoa_r+0x650>)
 800de38:	2200      	movs	r2, #0
 800de3a:	4640      	mov	r0, r8
 800de3c:	4649      	mov	r1, r9
 800de3e:	f7f2 fa23 	bl	8000288 <__aeabi_dsub>
 800de42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de46:	4680      	mov	r8, r0
 800de48:	4689      	mov	r9, r1
 800de4a:	f7f2 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 800de4e:	2800      	cmp	r0, #0
 800de50:	f040 8296 	bne.w	800e380 <_dtoa_r+0x990>
 800de54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de58:	4640      	mov	r0, r8
 800de5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de5e:	4649      	mov	r1, r9
 800de60:	f7f2 fe3c 	bl	8000adc <__aeabi_dcmplt>
 800de64:	2800      	cmp	r0, #0
 800de66:	f040 8289 	bne.w	800e37c <_dtoa_r+0x98c>
 800de6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800de6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de70:	2b00      	cmp	r3, #0
 800de72:	f2c0 814e 	blt.w	800e112 <_dtoa_r+0x722>
 800de76:	f1bb 0f0e 	cmp.w	fp, #14
 800de7a:	f300 814a 	bgt.w	800e112 <_dtoa_r+0x722>
 800de7e:	4b6b      	ldr	r3, [pc, #428]	; (800e02c <_dtoa_r+0x63c>)
 800de80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f280 80dc 	bge.w	800e048 <_dtoa_r+0x658>
 800de90:	9b04      	ldr	r3, [sp, #16]
 800de92:	2b00      	cmp	r3, #0
 800de94:	f300 80d8 	bgt.w	800e048 <_dtoa_r+0x658>
 800de98:	f040 826f 	bne.w	800e37a <_dtoa_r+0x98a>
 800de9c:	4b68      	ldr	r3, [pc, #416]	; (800e040 <_dtoa_r+0x650>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	4640      	mov	r0, r8
 800dea2:	4649      	mov	r1, r9
 800dea4:	f7f2 fba8 	bl	80005f8 <__aeabi_dmul>
 800dea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800deac:	f7f2 fe2a 	bl	8000b04 <__aeabi_dcmpge>
 800deb0:	9e04      	ldr	r6, [sp, #16]
 800deb2:	4637      	mov	r7, r6
 800deb4:	2800      	cmp	r0, #0
 800deb6:	f040 8245 	bne.w	800e344 <_dtoa_r+0x954>
 800deba:	9d00      	ldr	r5, [sp, #0]
 800debc:	2331      	movs	r3, #49	; 0x31
 800debe:	f805 3b01 	strb.w	r3, [r5], #1
 800dec2:	f10b 0b01 	add.w	fp, fp, #1
 800dec6:	e241      	b.n	800e34c <_dtoa_r+0x95c>
 800dec8:	07f2      	lsls	r2, r6, #31
 800deca:	d505      	bpl.n	800ded8 <_dtoa_r+0x4e8>
 800decc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ded0:	f7f2 fb92 	bl	80005f8 <__aeabi_dmul>
 800ded4:	3501      	adds	r5, #1
 800ded6:	2301      	movs	r3, #1
 800ded8:	1076      	asrs	r6, r6, #1
 800deda:	3708      	adds	r7, #8
 800dedc:	e773      	b.n	800ddc6 <_dtoa_r+0x3d6>
 800dede:	2502      	movs	r5, #2
 800dee0:	e775      	b.n	800ddce <_dtoa_r+0x3de>
 800dee2:	9e04      	ldr	r6, [sp, #16]
 800dee4:	465f      	mov	r7, fp
 800dee6:	e792      	b.n	800de0e <_dtoa_r+0x41e>
 800dee8:	9900      	ldr	r1, [sp, #0]
 800deea:	4b50      	ldr	r3, [pc, #320]	; (800e02c <_dtoa_r+0x63c>)
 800deec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800def0:	4431      	add	r1, r6
 800def2:	9102      	str	r1, [sp, #8]
 800def4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800def6:	eeb0 9a47 	vmov.f32	s18, s14
 800defa:	eef0 9a67 	vmov.f32	s19, s15
 800defe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800df02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df06:	2900      	cmp	r1, #0
 800df08:	d044      	beq.n	800df94 <_dtoa_r+0x5a4>
 800df0a:	494e      	ldr	r1, [pc, #312]	; (800e044 <_dtoa_r+0x654>)
 800df0c:	2000      	movs	r0, #0
 800df0e:	f7f2 fc9d 	bl	800084c <__aeabi_ddiv>
 800df12:	ec53 2b19 	vmov	r2, r3, d9
 800df16:	f7f2 f9b7 	bl	8000288 <__aeabi_dsub>
 800df1a:	9d00      	ldr	r5, [sp, #0]
 800df1c:	ec41 0b19 	vmov	d9, r0, r1
 800df20:	4649      	mov	r1, r9
 800df22:	4640      	mov	r0, r8
 800df24:	f7f2 fe18 	bl	8000b58 <__aeabi_d2iz>
 800df28:	4606      	mov	r6, r0
 800df2a:	f7f2 fafb 	bl	8000524 <__aeabi_i2d>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	4640      	mov	r0, r8
 800df34:	4649      	mov	r1, r9
 800df36:	f7f2 f9a7 	bl	8000288 <__aeabi_dsub>
 800df3a:	3630      	adds	r6, #48	; 0x30
 800df3c:	f805 6b01 	strb.w	r6, [r5], #1
 800df40:	ec53 2b19 	vmov	r2, r3, d9
 800df44:	4680      	mov	r8, r0
 800df46:	4689      	mov	r9, r1
 800df48:	f7f2 fdc8 	bl	8000adc <__aeabi_dcmplt>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d164      	bne.n	800e01a <_dtoa_r+0x62a>
 800df50:	4642      	mov	r2, r8
 800df52:	464b      	mov	r3, r9
 800df54:	4937      	ldr	r1, [pc, #220]	; (800e034 <_dtoa_r+0x644>)
 800df56:	2000      	movs	r0, #0
 800df58:	f7f2 f996 	bl	8000288 <__aeabi_dsub>
 800df5c:	ec53 2b19 	vmov	r2, r3, d9
 800df60:	f7f2 fdbc 	bl	8000adc <__aeabi_dcmplt>
 800df64:	2800      	cmp	r0, #0
 800df66:	f040 80b6 	bne.w	800e0d6 <_dtoa_r+0x6e6>
 800df6a:	9b02      	ldr	r3, [sp, #8]
 800df6c:	429d      	cmp	r5, r3
 800df6e:	f43f af7c 	beq.w	800de6a <_dtoa_r+0x47a>
 800df72:	4b31      	ldr	r3, [pc, #196]	; (800e038 <_dtoa_r+0x648>)
 800df74:	ec51 0b19 	vmov	r0, r1, d9
 800df78:	2200      	movs	r2, #0
 800df7a:	f7f2 fb3d 	bl	80005f8 <__aeabi_dmul>
 800df7e:	4b2e      	ldr	r3, [pc, #184]	; (800e038 <_dtoa_r+0x648>)
 800df80:	ec41 0b19 	vmov	d9, r0, r1
 800df84:	2200      	movs	r2, #0
 800df86:	4640      	mov	r0, r8
 800df88:	4649      	mov	r1, r9
 800df8a:	f7f2 fb35 	bl	80005f8 <__aeabi_dmul>
 800df8e:	4680      	mov	r8, r0
 800df90:	4689      	mov	r9, r1
 800df92:	e7c5      	b.n	800df20 <_dtoa_r+0x530>
 800df94:	ec51 0b17 	vmov	r0, r1, d7
 800df98:	f7f2 fb2e 	bl	80005f8 <__aeabi_dmul>
 800df9c:	9b02      	ldr	r3, [sp, #8]
 800df9e:	9d00      	ldr	r5, [sp, #0]
 800dfa0:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfa2:	ec41 0b19 	vmov	d9, r0, r1
 800dfa6:	4649      	mov	r1, r9
 800dfa8:	4640      	mov	r0, r8
 800dfaa:	f7f2 fdd5 	bl	8000b58 <__aeabi_d2iz>
 800dfae:	4606      	mov	r6, r0
 800dfb0:	f7f2 fab8 	bl	8000524 <__aeabi_i2d>
 800dfb4:	3630      	adds	r6, #48	; 0x30
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	4640      	mov	r0, r8
 800dfbc:	4649      	mov	r1, r9
 800dfbe:	f7f2 f963 	bl	8000288 <__aeabi_dsub>
 800dfc2:	f805 6b01 	strb.w	r6, [r5], #1
 800dfc6:	9b02      	ldr	r3, [sp, #8]
 800dfc8:	429d      	cmp	r5, r3
 800dfca:	4680      	mov	r8, r0
 800dfcc:	4689      	mov	r9, r1
 800dfce:	f04f 0200 	mov.w	r2, #0
 800dfd2:	d124      	bne.n	800e01e <_dtoa_r+0x62e>
 800dfd4:	4b1b      	ldr	r3, [pc, #108]	; (800e044 <_dtoa_r+0x654>)
 800dfd6:	ec51 0b19 	vmov	r0, r1, d9
 800dfda:	f7f2 f957 	bl	800028c <__adddf3>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4640      	mov	r0, r8
 800dfe4:	4649      	mov	r1, r9
 800dfe6:	f7f2 fd97 	bl	8000b18 <__aeabi_dcmpgt>
 800dfea:	2800      	cmp	r0, #0
 800dfec:	d173      	bne.n	800e0d6 <_dtoa_r+0x6e6>
 800dfee:	ec53 2b19 	vmov	r2, r3, d9
 800dff2:	4914      	ldr	r1, [pc, #80]	; (800e044 <_dtoa_r+0x654>)
 800dff4:	2000      	movs	r0, #0
 800dff6:	f7f2 f947 	bl	8000288 <__aeabi_dsub>
 800dffa:	4602      	mov	r2, r0
 800dffc:	460b      	mov	r3, r1
 800dffe:	4640      	mov	r0, r8
 800e000:	4649      	mov	r1, r9
 800e002:	f7f2 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800e006:	2800      	cmp	r0, #0
 800e008:	f43f af2f 	beq.w	800de6a <_dtoa_r+0x47a>
 800e00c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e00e:	1e6b      	subs	r3, r5, #1
 800e010:	930f      	str	r3, [sp, #60]	; 0x3c
 800e012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e016:	2b30      	cmp	r3, #48	; 0x30
 800e018:	d0f8      	beq.n	800e00c <_dtoa_r+0x61c>
 800e01a:	46bb      	mov	fp, r7
 800e01c:	e04a      	b.n	800e0b4 <_dtoa_r+0x6c4>
 800e01e:	4b06      	ldr	r3, [pc, #24]	; (800e038 <_dtoa_r+0x648>)
 800e020:	f7f2 faea 	bl	80005f8 <__aeabi_dmul>
 800e024:	4680      	mov	r8, r0
 800e026:	4689      	mov	r9, r1
 800e028:	e7bd      	b.n	800dfa6 <_dtoa_r+0x5b6>
 800e02a:	bf00      	nop
 800e02c:	0800fc30 	.word	0x0800fc30
 800e030:	0800fc08 	.word	0x0800fc08
 800e034:	3ff00000 	.word	0x3ff00000
 800e038:	40240000 	.word	0x40240000
 800e03c:	401c0000 	.word	0x401c0000
 800e040:	40140000 	.word	0x40140000
 800e044:	3fe00000 	.word	0x3fe00000
 800e048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e04c:	9d00      	ldr	r5, [sp, #0]
 800e04e:	4642      	mov	r2, r8
 800e050:	464b      	mov	r3, r9
 800e052:	4630      	mov	r0, r6
 800e054:	4639      	mov	r1, r7
 800e056:	f7f2 fbf9 	bl	800084c <__aeabi_ddiv>
 800e05a:	f7f2 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800e05e:	9001      	str	r0, [sp, #4]
 800e060:	f7f2 fa60 	bl	8000524 <__aeabi_i2d>
 800e064:	4642      	mov	r2, r8
 800e066:	464b      	mov	r3, r9
 800e068:	f7f2 fac6 	bl	80005f8 <__aeabi_dmul>
 800e06c:	4602      	mov	r2, r0
 800e06e:	460b      	mov	r3, r1
 800e070:	4630      	mov	r0, r6
 800e072:	4639      	mov	r1, r7
 800e074:	f7f2 f908 	bl	8000288 <__aeabi_dsub>
 800e078:	9e01      	ldr	r6, [sp, #4]
 800e07a:	9f04      	ldr	r7, [sp, #16]
 800e07c:	3630      	adds	r6, #48	; 0x30
 800e07e:	f805 6b01 	strb.w	r6, [r5], #1
 800e082:	9e00      	ldr	r6, [sp, #0]
 800e084:	1bae      	subs	r6, r5, r6
 800e086:	42b7      	cmp	r7, r6
 800e088:	4602      	mov	r2, r0
 800e08a:	460b      	mov	r3, r1
 800e08c:	d134      	bne.n	800e0f8 <_dtoa_r+0x708>
 800e08e:	f7f2 f8fd 	bl	800028c <__adddf3>
 800e092:	4642      	mov	r2, r8
 800e094:	464b      	mov	r3, r9
 800e096:	4606      	mov	r6, r0
 800e098:	460f      	mov	r7, r1
 800e09a:	f7f2 fd3d 	bl	8000b18 <__aeabi_dcmpgt>
 800e09e:	b9c8      	cbnz	r0, 800e0d4 <_dtoa_r+0x6e4>
 800e0a0:	4642      	mov	r2, r8
 800e0a2:	464b      	mov	r3, r9
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	4639      	mov	r1, r7
 800e0a8:	f7f2 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0ac:	b110      	cbz	r0, 800e0b4 <_dtoa_r+0x6c4>
 800e0ae:	9b01      	ldr	r3, [sp, #4]
 800e0b0:	07db      	lsls	r3, r3, #31
 800e0b2:	d40f      	bmi.n	800e0d4 <_dtoa_r+0x6e4>
 800e0b4:	4651      	mov	r1, sl
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	f000 fbcc 	bl	800e854 <_Bfree>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0c0:	702b      	strb	r3, [r5, #0]
 800e0c2:	f10b 0301 	add.w	r3, fp, #1
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f43f ace2 	beq.w	800da94 <_dtoa_r+0xa4>
 800e0d0:	601d      	str	r5, [r3, #0]
 800e0d2:	e4df      	b.n	800da94 <_dtoa_r+0xa4>
 800e0d4:	465f      	mov	r7, fp
 800e0d6:	462b      	mov	r3, r5
 800e0d8:	461d      	mov	r5, r3
 800e0da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0de:	2a39      	cmp	r2, #57	; 0x39
 800e0e0:	d106      	bne.n	800e0f0 <_dtoa_r+0x700>
 800e0e2:	9a00      	ldr	r2, [sp, #0]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d1f7      	bne.n	800e0d8 <_dtoa_r+0x6e8>
 800e0e8:	9900      	ldr	r1, [sp, #0]
 800e0ea:	2230      	movs	r2, #48	; 0x30
 800e0ec:	3701      	adds	r7, #1
 800e0ee:	700a      	strb	r2, [r1, #0]
 800e0f0:	781a      	ldrb	r2, [r3, #0]
 800e0f2:	3201      	adds	r2, #1
 800e0f4:	701a      	strb	r2, [r3, #0]
 800e0f6:	e790      	b.n	800e01a <_dtoa_r+0x62a>
 800e0f8:	4ba3      	ldr	r3, [pc, #652]	; (800e388 <_dtoa_r+0x998>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f7f2 fa7c 	bl	80005f8 <__aeabi_dmul>
 800e100:	2200      	movs	r2, #0
 800e102:	2300      	movs	r3, #0
 800e104:	4606      	mov	r6, r0
 800e106:	460f      	mov	r7, r1
 800e108:	f7f2 fcde 	bl	8000ac8 <__aeabi_dcmpeq>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d09e      	beq.n	800e04e <_dtoa_r+0x65e>
 800e110:	e7d0      	b.n	800e0b4 <_dtoa_r+0x6c4>
 800e112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e114:	2a00      	cmp	r2, #0
 800e116:	f000 80ca 	beq.w	800e2ae <_dtoa_r+0x8be>
 800e11a:	9a07      	ldr	r2, [sp, #28]
 800e11c:	2a01      	cmp	r2, #1
 800e11e:	f300 80ad 	bgt.w	800e27c <_dtoa_r+0x88c>
 800e122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e124:	2a00      	cmp	r2, #0
 800e126:	f000 80a5 	beq.w	800e274 <_dtoa_r+0x884>
 800e12a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e12e:	9e08      	ldr	r6, [sp, #32]
 800e130:	9d05      	ldr	r5, [sp, #20]
 800e132:	9a05      	ldr	r2, [sp, #20]
 800e134:	441a      	add	r2, r3
 800e136:	9205      	str	r2, [sp, #20]
 800e138:	9a06      	ldr	r2, [sp, #24]
 800e13a:	2101      	movs	r1, #1
 800e13c:	441a      	add	r2, r3
 800e13e:	4620      	mov	r0, r4
 800e140:	9206      	str	r2, [sp, #24]
 800e142:	f000 fc3d 	bl	800e9c0 <__i2b>
 800e146:	4607      	mov	r7, r0
 800e148:	b165      	cbz	r5, 800e164 <_dtoa_r+0x774>
 800e14a:	9b06      	ldr	r3, [sp, #24]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	dd09      	ble.n	800e164 <_dtoa_r+0x774>
 800e150:	42ab      	cmp	r3, r5
 800e152:	9a05      	ldr	r2, [sp, #20]
 800e154:	bfa8      	it	ge
 800e156:	462b      	movge	r3, r5
 800e158:	1ad2      	subs	r2, r2, r3
 800e15a:	9205      	str	r2, [sp, #20]
 800e15c:	9a06      	ldr	r2, [sp, #24]
 800e15e:	1aed      	subs	r5, r5, r3
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	9306      	str	r3, [sp, #24]
 800e164:	9b08      	ldr	r3, [sp, #32]
 800e166:	b1f3      	cbz	r3, 800e1a6 <_dtoa_r+0x7b6>
 800e168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 80a3 	beq.w	800e2b6 <_dtoa_r+0x8c6>
 800e170:	2e00      	cmp	r6, #0
 800e172:	dd10      	ble.n	800e196 <_dtoa_r+0x7a6>
 800e174:	4639      	mov	r1, r7
 800e176:	4632      	mov	r2, r6
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fce1 	bl	800eb40 <__pow5mult>
 800e17e:	4652      	mov	r2, sl
 800e180:	4601      	mov	r1, r0
 800e182:	4607      	mov	r7, r0
 800e184:	4620      	mov	r0, r4
 800e186:	f000 fc31 	bl	800e9ec <__multiply>
 800e18a:	4651      	mov	r1, sl
 800e18c:	4680      	mov	r8, r0
 800e18e:	4620      	mov	r0, r4
 800e190:	f000 fb60 	bl	800e854 <_Bfree>
 800e194:	46c2      	mov	sl, r8
 800e196:	9b08      	ldr	r3, [sp, #32]
 800e198:	1b9a      	subs	r2, r3, r6
 800e19a:	d004      	beq.n	800e1a6 <_dtoa_r+0x7b6>
 800e19c:	4651      	mov	r1, sl
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f000 fcce 	bl	800eb40 <__pow5mult>
 800e1a4:	4682      	mov	sl, r0
 800e1a6:	2101      	movs	r1, #1
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f000 fc09 	bl	800e9c0 <__i2b>
 800e1ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	4606      	mov	r6, r0
 800e1b4:	f340 8081 	ble.w	800e2ba <_dtoa_r+0x8ca>
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	4601      	mov	r1, r0
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f000 fcbf 	bl	800eb40 <__pow5mult>
 800e1c2:	9b07      	ldr	r3, [sp, #28]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	dd7a      	ble.n	800e2c0 <_dtoa_r+0x8d0>
 800e1ca:	f04f 0800 	mov.w	r8, #0
 800e1ce:	6933      	ldr	r3, [r6, #16]
 800e1d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e1d4:	6918      	ldr	r0, [r3, #16]
 800e1d6:	f000 fba5 	bl	800e924 <__hi0bits>
 800e1da:	f1c0 0020 	rsb	r0, r0, #32
 800e1de:	9b06      	ldr	r3, [sp, #24]
 800e1e0:	4418      	add	r0, r3
 800e1e2:	f010 001f 	ands.w	r0, r0, #31
 800e1e6:	f000 8094 	beq.w	800e312 <_dtoa_r+0x922>
 800e1ea:	f1c0 0320 	rsb	r3, r0, #32
 800e1ee:	2b04      	cmp	r3, #4
 800e1f0:	f340 8085 	ble.w	800e2fe <_dtoa_r+0x90e>
 800e1f4:	9b05      	ldr	r3, [sp, #20]
 800e1f6:	f1c0 001c 	rsb	r0, r0, #28
 800e1fa:	4403      	add	r3, r0
 800e1fc:	9305      	str	r3, [sp, #20]
 800e1fe:	9b06      	ldr	r3, [sp, #24]
 800e200:	4403      	add	r3, r0
 800e202:	4405      	add	r5, r0
 800e204:	9306      	str	r3, [sp, #24]
 800e206:	9b05      	ldr	r3, [sp, #20]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	dd05      	ble.n	800e218 <_dtoa_r+0x828>
 800e20c:	4651      	mov	r1, sl
 800e20e:	461a      	mov	r2, r3
 800e210:	4620      	mov	r0, r4
 800e212:	f000 fcef 	bl	800ebf4 <__lshift>
 800e216:	4682      	mov	sl, r0
 800e218:	9b06      	ldr	r3, [sp, #24]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	dd05      	ble.n	800e22a <_dtoa_r+0x83a>
 800e21e:	4631      	mov	r1, r6
 800e220:	461a      	mov	r2, r3
 800e222:	4620      	mov	r0, r4
 800e224:	f000 fce6 	bl	800ebf4 <__lshift>
 800e228:	4606      	mov	r6, r0
 800e22a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d072      	beq.n	800e316 <_dtoa_r+0x926>
 800e230:	4631      	mov	r1, r6
 800e232:	4650      	mov	r0, sl
 800e234:	f000 fd4a 	bl	800eccc <__mcmp>
 800e238:	2800      	cmp	r0, #0
 800e23a:	da6c      	bge.n	800e316 <_dtoa_r+0x926>
 800e23c:	2300      	movs	r3, #0
 800e23e:	4651      	mov	r1, sl
 800e240:	220a      	movs	r2, #10
 800e242:	4620      	mov	r0, r4
 800e244:	f000 fb28 	bl	800e898 <__multadd>
 800e248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e24a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e24e:	4682      	mov	sl, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	f000 81b0 	beq.w	800e5b6 <_dtoa_r+0xbc6>
 800e256:	2300      	movs	r3, #0
 800e258:	4639      	mov	r1, r7
 800e25a:	220a      	movs	r2, #10
 800e25c:	4620      	mov	r0, r4
 800e25e:	f000 fb1b 	bl	800e898 <__multadd>
 800e262:	9b01      	ldr	r3, [sp, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	4607      	mov	r7, r0
 800e268:	f300 8096 	bgt.w	800e398 <_dtoa_r+0x9a8>
 800e26c:	9b07      	ldr	r3, [sp, #28]
 800e26e:	2b02      	cmp	r3, #2
 800e270:	dc59      	bgt.n	800e326 <_dtoa_r+0x936>
 800e272:	e091      	b.n	800e398 <_dtoa_r+0x9a8>
 800e274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e27a:	e758      	b.n	800e12e <_dtoa_r+0x73e>
 800e27c:	9b04      	ldr	r3, [sp, #16]
 800e27e:	1e5e      	subs	r6, r3, #1
 800e280:	9b08      	ldr	r3, [sp, #32]
 800e282:	42b3      	cmp	r3, r6
 800e284:	bfbf      	itttt	lt
 800e286:	9b08      	ldrlt	r3, [sp, #32]
 800e288:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e28a:	9608      	strlt	r6, [sp, #32]
 800e28c:	1af3      	sublt	r3, r6, r3
 800e28e:	bfb4      	ite	lt
 800e290:	18d2      	addlt	r2, r2, r3
 800e292:	1b9e      	subge	r6, r3, r6
 800e294:	9b04      	ldr	r3, [sp, #16]
 800e296:	bfbc      	itt	lt
 800e298:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e29a:	2600      	movlt	r6, #0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	bfb7      	itett	lt
 800e2a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e2a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e2a8:	1a9d      	sublt	r5, r3, r2
 800e2aa:	2300      	movlt	r3, #0
 800e2ac:	e741      	b.n	800e132 <_dtoa_r+0x742>
 800e2ae:	9e08      	ldr	r6, [sp, #32]
 800e2b0:	9d05      	ldr	r5, [sp, #20]
 800e2b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e2b4:	e748      	b.n	800e148 <_dtoa_r+0x758>
 800e2b6:	9a08      	ldr	r2, [sp, #32]
 800e2b8:	e770      	b.n	800e19c <_dtoa_r+0x7ac>
 800e2ba:	9b07      	ldr	r3, [sp, #28]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	dc19      	bgt.n	800e2f4 <_dtoa_r+0x904>
 800e2c0:	9b02      	ldr	r3, [sp, #8]
 800e2c2:	b9bb      	cbnz	r3, 800e2f4 <_dtoa_r+0x904>
 800e2c4:	9b03      	ldr	r3, [sp, #12]
 800e2c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2ca:	b99b      	cbnz	r3, 800e2f4 <_dtoa_r+0x904>
 800e2cc:	9b03      	ldr	r3, [sp, #12]
 800e2ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2d2:	0d1b      	lsrs	r3, r3, #20
 800e2d4:	051b      	lsls	r3, r3, #20
 800e2d6:	b183      	cbz	r3, 800e2fa <_dtoa_r+0x90a>
 800e2d8:	9b05      	ldr	r3, [sp, #20]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	9305      	str	r3, [sp, #20]
 800e2de:	9b06      	ldr	r3, [sp, #24]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	9306      	str	r3, [sp, #24]
 800e2e4:	f04f 0801 	mov.w	r8, #1
 800e2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f47f af6f 	bne.w	800e1ce <_dtoa_r+0x7de>
 800e2f0:	2001      	movs	r0, #1
 800e2f2:	e774      	b.n	800e1de <_dtoa_r+0x7ee>
 800e2f4:	f04f 0800 	mov.w	r8, #0
 800e2f8:	e7f6      	b.n	800e2e8 <_dtoa_r+0x8f8>
 800e2fa:	4698      	mov	r8, r3
 800e2fc:	e7f4      	b.n	800e2e8 <_dtoa_r+0x8f8>
 800e2fe:	d082      	beq.n	800e206 <_dtoa_r+0x816>
 800e300:	9a05      	ldr	r2, [sp, #20]
 800e302:	331c      	adds	r3, #28
 800e304:	441a      	add	r2, r3
 800e306:	9205      	str	r2, [sp, #20]
 800e308:	9a06      	ldr	r2, [sp, #24]
 800e30a:	441a      	add	r2, r3
 800e30c:	441d      	add	r5, r3
 800e30e:	9206      	str	r2, [sp, #24]
 800e310:	e779      	b.n	800e206 <_dtoa_r+0x816>
 800e312:	4603      	mov	r3, r0
 800e314:	e7f4      	b.n	800e300 <_dtoa_r+0x910>
 800e316:	9b04      	ldr	r3, [sp, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	dc37      	bgt.n	800e38c <_dtoa_r+0x99c>
 800e31c:	9b07      	ldr	r3, [sp, #28]
 800e31e:	2b02      	cmp	r3, #2
 800e320:	dd34      	ble.n	800e38c <_dtoa_r+0x99c>
 800e322:	9b04      	ldr	r3, [sp, #16]
 800e324:	9301      	str	r3, [sp, #4]
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	b963      	cbnz	r3, 800e344 <_dtoa_r+0x954>
 800e32a:	4631      	mov	r1, r6
 800e32c:	2205      	movs	r2, #5
 800e32e:	4620      	mov	r0, r4
 800e330:	f000 fab2 	bl	800e898 <__multadd>
 800e334:	4601      	mov	r1, r0
 800e336:	4606      	mov	r6, r0
 800e338:	4650      	mov	r0, sl
 800e33a:	f000 fcc7 	bl	800eccc <__mcmp>
 800e33e:	2800      	cmp	r0, #0
 800e340:	f73f adbb 	bgt.w	800deba <_dtoa_r+0x4ca>
 800e344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e346:	9d00      	ldr	r5, [sp, #0]
 800e348:	ea6f 0b03 	mvn.w	fp, r3
 800e34c:	f04f 0800 	mov.w	r8, #0
 800e350:	4631      	mov	r1, r6
 800e352:	4620      	mov	r0, r4
 800e354:	f000 fa7e 	bl	800e854 <_Bfree>
 800e358:	2f00      	cmp	r7, #0
 800e35a:	f43f aeab 	beq.w	800e0b4 <_dtoa_r+0x6c4>
 800e35e:	f1b8 0f00 	cmp.w	r8, #0
 800e362:	d005      	beq.n	800e370 <_dtoa_r+0x980>
 800e364:	45b8      	cmp	r8, r7
 800e366:	d003      	beq.n	800e370 <_dtoa_r+0x980>
 800e368:	4641      	mov	r1, r8
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 fa72 	bl	800e854 <_Bfree>
 800e370:	4639      	mov	r1, r7
 800e372:	4620      	mov	r0, r4
 800e374:	f000 fa6e 	bl	800e854 <_Bfree>
 800e378:	e69c      	b.n	800e0b4 <_dtoa_r+0x6c4>
 800e37a:	2600      	movs	r6, #0
 800e37c:	4637      	mov	r7, r6
 800e37e:	e7e1      	b.n	800e344 <_dtoa_r+0x954>
 800e380:	46bb      	mov	fp, r7
 800e382:	4637      	mov	r7, r6
 800e384:	e599      	b.n	800deba <_dtoa_r+0x4ca>
 800e386:	bf00      	nop
 800e388:	40240000 	.word	0x40240000
 800e38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 80c8 	beq.w	800e524 <_dtoa_r+0xb34>
 800e394:	9b04      	ldr	r3, [sp, #16]
 800e396:	9301      	str	r3, [sp, #4]
 800e398:	2d00      	cmp	r5, #0
 800e39a:	dd05      	ble.n	800e3a8 <_dtoa_r+0x9b8>
 800e39c:	4639      	mov	r1, r7
 800e39e:	462a      	mov	r2, r5
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f000 fc27 	bl	800ebf4 <__lshift>
 800e3a6:	4607      	mov	r7, r0
 800e3a8:	f1b8 0f00 	cmp.w	r8, #0
 800e3ac:	d05b      	beq.n	800e466 <_dtoa_r+0xa76>
 800e3ae:	6879      	ldr	r1, [r7, #4]
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f000 fa0f 	bl	800e7d4 <_Balloc>
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	b928      	cbnz	r0, 800e3c6 <_dtoa_r+0x9d6>
 800e3ba:	4b83      	ldr	r3, [pc, #524]	; (800e5c8 <_dtoa_r+0xbd8>)
 800e3bc:	4602      	mov	r2, r0
 800e3be:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e3c2:	f7ff bb2e 	b.w	800da22 <_dtoa_r+0x32>
 800e3c6:	693a      	ldr	r2, [r7, #16]
 800e3c8:	3202      	adds	r2, #2
 800e3ca:	0092      	lsls	r2, r2, #2
 800e3cc:	f107 010c 	add.w	r1, r7, #12
 800e3d0:	300c      	adds	r0, #12
 800e3d2:	f001 f801 	bl	800f3d8 <memcpy>
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	4629      	mov	r1, r5
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f000 fc0a 	bl	800ebf4 <__lshift>
 800e3e0:	9b00      	ldr	r3, [sp, #0]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	9304      	str	r3, [sp, #16]
 800e3e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	9308      	str	r3, [sp, #32]
 800e3ee:	9b02      	ldr	r3, [sp, #8]
 800e3f0:	f003 0301 	and.w	r3, r3, #1
 800e3f4:	46b8      	mov	r8, r7
 800e3f6:	9306      	str	r3, [sp, #24]
 800e3f8:	4607      	mov	r7, r0
 800e3fa:	9b04      	ldr	r3, [sp, #16]
 800e3fc:	4631      	mov	r1, r6
 800e3fe:	3b01      	subs	r3, #1
 800e400:	4650      	mov	r0, sl
 800e402:	9301      	str	r3, [sp, #4]
 800e404:	f7ff fa6a 	bl	800d8dc <quorem>
 800e408:	4641      	mov	r1, r8
 800e40a:	9002      	str	r0, [sp, #8]
 800e40c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e410:	4650      	mov	r0, sl
 800e412:	f000 fc5b 	bl	800eccc <__mcmp>
 800e416:	463a      	mov	r2, r7
 800e418:	9005      	str	r0, [sp, #20]
 800e41a:	4631      	mov	r1, r6
 800e41c:	4620      	mov	r0, r4
 800e41e:	f000 fc71 	bl	800ed04 <__mdiff>
 800e422:	68c2      	ldr	r2, [r0, #12]
 800e424:	4605      	mov	r5, r0
 800e426:	bb02      	cbnz	r2, 800e46a <_dtoa_r+0xa7a>
 800e428:	4601      	mov	r1, r0
 800e42a:	4650      	mov	r0, sl
 800e42c:	f000 fc4e 	bl	800eccc <__mcmp>
 800e430:	4602      	mov	r2, r0
 800e432:	4629      	mov	r1, r5
 800e434:	4620      	mov	r0, r4
 800e436:	9209      	str	r2, [sp, #36]	; 0x24
 800e438:	f000 fa0c 	bl	800e854 <_Bfree>
 800e43c:	9b07      	ldr	r3, [sp, #28]
 800e43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e440:	9d04      	ldr	r5, [sp, #16]
 800e442:	ea43 0102 	orr.w	r1, r3, r2
 800e446:	9b06      	ldr	r3, [sp, #24]
 800e448:	4319      	orrs	r1, r3
 800e44a:	d110      	bne.n	800e46e <_dtoa_r+0xa7e>
 800e44c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e450:	d029      	beq.n	800e4a6 <_dtoa_r+0xab6>
 800e452:	9b05      	ldr	r3, [sp, #20]
 800e454:	2b00      	cmp	r3, #0
 800e456:	dd02      	ble.n	800e45e <_dtoa_r+0xa6e>
 800e458:	9b02      	ldr	r3, [sp, #8]
 800e45a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e45e:	9b01      	ldr	r3, [sp, #4]
 800e460:	f883 9000 	strb.w	r9, [r3]
 800e464:	e774      	b.n	800e350 <_dtoa_r+0x960>
 800e466:	4638      	mov	r0, r7
 800e468:	e7ba      	b.n	800e3e0 <_dtoa_r+0x9f0>
 800e46a:	2201      	movs	r2, #1
 800e46c:	e7e1      	b.n	800e432 <_dtoa_r+0xa42>
 800e46e:	9b05      	ldr	r3, [sp, #20]
 800e470:	2b00      	cmp	r3, #0
 800e472:	db04      	blt.n	800e47e <_dtoa_r+0xa8e>
 800e474:	9907      	ldr	r1, [sp, #28]
 800e476:	430b      	orrs	r3, r1
 800e478:	9906      	ldr	r1, [sp, #24]
 800e47a:	430b      	orrs	r3, r1
 800e47c:	d120      	bne.n	800e4c0 <_dtoa_r+0xad0>
 800e47e:	2a00      	cmp	r2, #0
 800e480:	dded      	ble.n	800e45e <_dtoa_r+0xa6e>
 800e482:	4651      	mov	r1, sl
 800e484:	2201      	movs	r2, #1
 800e486:	4620      	mov	r0, r4
 800e488:	f000 fbb4 	bl	800ebf4 <__lshift>
 800e48c:	4631      	mov	r1, r6
 800e48e:	4682      	mov	sl, r0
 800e490:	f000 fc1c 	bl	800eccc <__mcmp>
 800e494:	2800      	cmp	r0, #0
 800e496:	dc03      	bgt.n	800e4a0 <_dtoa_r+0xab0>
 800e498:	d1e1      	bne.n	800e45e <_dtoa_r+0xa6e>
 800e49a:	f019 0f01 	tst.w	r9, #1
 800e49e:	d0de      	beq.n	800e45e <_dtoa_r+0xa6e>
 800e4a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e4a4:	d1d8      	bne.n	800e458 <_dtoa_r+0xa68>
 800e4a6:	9a01      	ldr	r2, [sp, #4]
 800e4a8:	2339      	movs	r3, #57	; 0x39
 800e4aa:	7013      	strb	r3, [r2, #0]
 800e4ac:	462b      	mov	r3, r5
 800e4ae:	461d      	mov	r5, r3
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e4b6:	2a39      	cmp	r2, #57	; 0x39
 800e4b8:	d06c      	beq.n	800e594 <_dtoa_r+0xba4>
 800e4ba:	3201      	adds	r2, #1
 800e4bc:	701a      	strb	r2, [r3, #0]
 800e4be:	e747      	b.n	800e350 <_dtoa_r+0x960>
 800e4c0:	2a00      	cmp	r2, #0
 800e4c2:	dd07      	ble.n	800e4d4 <_dtoa_r+0xae4>
 800e4c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e4c8:	d0ed      	beq.n	800e4a6 <_dtoa_r+0xab6>
 800e4ca:	9a01      	ldr	r2, [sp, #4]
 800e4cc:	f109 0301 	add.w	r3, r9, #1
 800e4d0:	7013      	strb	r3, [r2, #0]
 800e4d2:	e73d      	b.n	800e350 <_dtoa_r+0x960>
 800e4d4:	9b04      	ldr	r3, [sp, #16]
 800e4d6:	9a08      	ldr	r2, [sp, #32]
 800e4d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d043      	beq.n	800e568 <_dtoa_r+0xb78>
 800e4e0:	4651      	mov	r1, sl
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	220a      	movs	r2, #10
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f000 f9d6 	bl	800e898 <__multadd>
 800e4ec:	45b8      	cmp	r8, r7
 800e4ee:	4682      	mov	sl, r0
 800e4f0:	f04f 0300 	mov.w	r3, #0
 800e4f4:	f04f 020a 	mov.w	r2, #10
 800e4f8:	4641      	mov	r1, r8
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	d107      	bne.n	800e50e <_dtoa_r+0xb1e>
 800e4fe:	f000 f9cb 	bl	800e898 <__multadd>
 800e502:	4680      	mov	r8, r0
 800e504:	4607      	mov	r7, r0
 800e506:	9b04      	ldr	r3, [sp, #16]
 800e508:	3301      	adds	r3, #1
 800e50a:	9304      	str	r3, [sp, #16]
 800e50c:	e775      	b.n	800e3fa <_dtoa_r+0xa0a>
 800e50e:	f000 f9c3 	bl	800e898 <__multadd>
 800e512:	4639      	mov	r1, r7
 800e514:	4680      	mov	r8, r0
 800e516:	2300      	movs	r3, #0
 800e518:	220a      	movs	r2, #10
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 f9bc 	bl	800e898 <__multadd>
 800e520:	4607      	mov	r7, r0
 800e522:	e7f0      	b.n	800e506 <_dtoa_r+0xb16>
 800e524:	9b04      	ldr	r3, [sp, #16]
 800e526:	9301      	str	r3, [sp, #4]
 800e528:	9d00      	ldr	r5, [sp, #0]
 800e52a:	4631      	mov	r1, r6
 800e52c:	4650      	mov	r0, sl
 800e52e:	f7ff f9d5 	bl	800d8dc <quorem>
 800e532:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e536:	9b00      	ldr	r3, [sp, #0]
 800e538:	f805 9b01 	strb.w	r9, [r5], #1
 800e53c:	1aea      	subs	r2, r5, r3
 800e53e:	9b01      	ldr	r3, [sp, #4]
 800e540:	4293      	cmp	r3, r2
 800e542:	dd07      	ble.n	800e554 <_dtoa_r+0xb64>
 800e544:	4651      	mov	r1, sl
 800e546:	2300      	movs	r3, #0
 800e548:	220a      	movs	r2, #10
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 f9a4 	bl	800e898 <__multadd>
 800e550:	4682      	mov	sl, r0
 800e552:	e7ea      	b.n	800e52a <_dtoa_r+0xb3a>
 800e554:	9b01      	ldr	r3, [sp, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	bfc8      	it	gt
 800e55a:	461d      	movgt	r5, r3
 800e55c:	9b00      	ldr	r3, [sp, #0]
 800e55e:	bfd8      	it	le
 800e560:	2501      	movle	r5, #1
 800e562:	441d      	add	r5, r3
 800e564:	f04f 0800 	mov.w	r8, #0
 800e568:	4651      	mov	r1, sl
 800e56a:	2201      	movs	r2, #1
 800e56c:	4620      	mov	r0, r4
 800e56e:	f000 fb41 	bl	800ebf4 <__lshift>
 800e572:	4631      	mov	r1, r6
 800e574:	4682      	mov	sl, r0
 800e576:	f000 fba9 	bl	800eccc <__mcmp>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	dc96      	bgt.n	800e4ac <_dtoa_r+0xabc>
 800e57e:	d102      	bne.n	800e586 <_dtoa_r+0xb96>
 800e580:	f019 0f01 	tst.w	r9, #1
 800e584:	d192      	bne.n	800e4ac <_dtoa_r+0xabc>
 800e586:	462b      	mov	r3, r5
 800e588:	461d      	mov	r5, r3
 800e58a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e58e:	2a30      	cmp	r2, #48	; 0x30
 800e590:	d0fa      	beq.n	800e588 <_dtoa_r+0xb98>
 800e592:	e6dd      	b.n	800e350 <_dtoa_r+0x960>
 800e594:	9a00      	ldr	r2, [sp, #0]
 800e596:	429a      	cmp	r2, r3
 800e598:	d189      	bne.n	800e4ae <_dtoa_r+0xabe>
 800e59a:	f10b 0b01 	add.w	fp, fp, #1
 800e59e:	2331      	movs	r3, #49	; 0x31
 800e5a0:	e796      	b.n	800e4d0 <_dtoa_r+0xae0>
 800e5a2:	4b0a      	ldr	r3, [pc, #40]	; (800e5cc <_dtoa_r+0xbdc>)
 800e5a4:	f7ff ba99 	b.w	800dada <_dtoa_r+0xea>
 800e5a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f47f aa6d 	bne.w	800da8a <_dtoa_r+0x9a>
 800e5b0:	4b07      	ldr	r3, [pc, #28]	; (800e5d0 <_dtoa_r+0xbe0>)
 800e5b2:	f7ff ba92 	b.w	800dada <_dtoa_r+0xea>
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	dcb5      	bgt.n	800e528 <_dtoa_r+0xb38>
 800e5bc:	9b07      	ldr	r3, [sp, #28]
 800e5be:	2b02      	cmp	r3, #2
 800e5c0:	f73f aeb1 	bgt.w	800e326 <_dtoa_r+0x936>
 800e5c4:	e7b0      	b.n	800e528 <_dtoa_r+0xb38>
 800e5c6:	bf00      	nop
 800e5c8:	0800fb99 	.word	0x0800fb99
 800e5cc:	0800faf9 	.word	0x0800faf9
 800e5d0:	0800fb1d 	.word	0x0800fb1d

0800e5d4 <_free_r>:
 800e5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5d6:	2900      	cmp	r1, #0
 800e5d8:	d044      	beq.n	800e664 <_free_r+0x90>
 800e5da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5de:	9001      	str	r0, [sp, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e5e6:	bfb8      	it	lt
 800e5e8:	18e4      	addlt	r4, r4, r3
 800e5ea:	f000 f8e7 	bl	800e7bc <__malloc_lock>
 800e5ee:	4a1e      	ldr	r2, [pc, #120]	; (800e668 <_free_r+0x94>)
 800e5f0:	9801      	ldr	r0, [sp, #4]
 800e5f2:	6813      	ldr	r3, [r2, #0]
 800e5f4:	b933      	cbnz	r3, 800e604 <_free_r+0x30>
 800e5f6:	6063      	str	r3, [r4, #4]
 800e5f8:	6014      	str	r4, [r2, #0]
 800e5fa:	b003      	add	sp, #12
 800e5fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e600:	f000 b8e2 	b.w	800e7c8 <__malloc_unlock>
 800e604:	42a3      	cmp	r3, r4
 800e606:	d908      	bls.n	800e61a <_free_r+0x46>
 800e608:	6825      	ldr	r5, [r4, #0]
 800e60a:	1961      	adds	r1, r4, r5
 800e60c:	428b      	cmp	r3, r1
 800e60e:	bf01      	itttt	eq
 800e610:	6819      	ldreq	r1, [r3, #0]
 800e612:	685b      	ldreq	r3, [r3, #4]
 800e614:	1949      	addeq	r1, r1, r5
 800e616:	6021      	streq	r1, [r4, #0]
 800e618:	e7ed      	b.n	800e5f6 <_free_r+0x22>
 800e61a:	461a      	mov	r2, r3
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	b10b      	cbz	r3, 800e624 <_free_r+0x50>
 800e620:	42a3      	cmp	r3, r4
 800e622:	d9fa      	bls.n	800e61a <_free_r+0x46>
 800e624:	6811      	ldr	r1, [r2, #0]
 800e626:	1855      	adds	r5, r2, r1
 800e628:	42a5      	cmp	r5, r4
 800e62a:	d10b      	bne.n	800e644 <_free_r+0x70>
 800e62c:	6824      	ldr	r4, [r4, #0]
 800e62e:	4421      	add	r1, r4
 800e630:	1854      	adds	r4, r2, r1
 800e632:	42a3      	cmp	r3, r4
 800e634:	6011      	str	r1, [r2, #0]
 800e636:	d1e0      	bne.n	800e5fa <_free_r+0x26>
 800e638:	681c      	ldr	r4, [r3, #0]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	6053      	str	r3, [r2, #4]
 800e63e:	440c      	add	r4, r1
 800e640:	6014      	str	r4, [r2, #0]
 800e642:	e7da      	b.n	800e5fa <_free_r+0x26>
 800e644:	d902      	bls.n	800e64c <_free_r+0x78>
 800e646:	230c      	movs	r3, #12
 800e648:	6003      	str	r3, [r0, #0]
 800e64a:	e7d6      	b.n	800e5fa <_free_r+0x26>
 800e64c:	6825      	ldr	r5, [r4, #0]
 800e64e:	1961      	adds	r1, r4, r5
 800e650:	428b      	cmp	r3, r1
 800e652:	bf04      	itt	eq
 800e654:	6819      	ldreq	r1, [r3, #0]
 800e656:	685b      	ldreq	r3, [r3, #4]
 800e658:	6063      	str	r3, [r4, #4]
 800e65a:	bf04      	itt	eq
 800e65c:	1949      	addeq	r1, r1, r5
 800e65e:	6021      	streq	r1, [r4, #0]
 800e660:	6054      	str	r4, [r2, #4]
 800e662:	e7ca      	b.n	800e5fa <_free_r+0x26>
 800e664:	b003      	add	sp, #12
 800e666:	bd30      	pop	{r4, r5, pc}
 800e668:	200009e4 	.word	0x200009e4

0800e66c <malloc>:
 800e66c:	4b02      	ldr	r3, [pc, #8]	; (800e678 <malloc+0xc>)
 800e66e:	4601      	mov	r1, r0
 800e670:	6818      	ldr	r0, [r3, #0]
 800e672:	f000 b823 	b.w	800e6bc <_malloc_r>
 800e676:	bf00      	nop
 800e678:	20000080 	.word	0x20000080

0800e67c <sbrk_aligned>:
 800e67c:	b570      	push	{r4, r5, r6, lr}
 800e67e:	4e0e      	ldr	r6, [pc, #56]	; (800e6b8 <sbrk_aligned+0x3c>)
 800e680:	460c      	mov	r4, r1
 800e682:	6831      	ldr	r1, [r6, #0]
 800e684:	4605      	mov	r5, r0
 800e686:	b911      	cbnz	r1, 800e68e <sbrk_aligned+0x12>
 800e688:	f000 fe96 	bl	800f3b8 <_sbrk_r>
 800e68c:	6030      	str	r0, [r6, #0]
 800e68e:	4621      	mov	r1, r4
 800e690:	4628      	mov	r0, r5
 800e692:	f000 fe91 	bl	800f3b8 <_sbrk_r>
 800e696:	1c43      	adds	r3, r0, #1
 800e698:	d00a      	beq.n	800e6b0 <sbrk_aligned+0x34>
 800e69a:	1cc4      	adds	r4, r0, #3
 800e69c:	f024 0403 	bic.w	r4, r4, #3
 800e6a0:	42a0      	cmp	r0, r4
 800e6a2:	d007      	beq.n	800e6b4 <sbrk_aligned+0x38>
 800e6a4:	1a21      	subs	r1, r4, r0
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f000 fe86 	bl	800f3b8 <_sbrk_r>
 800e6ac:	3001      	adds	r0, #1
 800e6ae:	d101      	bne.n	800e6b4 <sbrk_aligned+0x38>
 800e6b0:	f04f 34ff 	mov.w	r4, #4294967295
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}
 800e6b8:	200009e8 	.word	0x200009e8

0800e6bc <_malloc_r>:
 800e6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c0:	1ccd      	adds	r5, r1, #3
 800e6c2:	f025 0503 	bic.w	r5, r5, #3
 800e6c6:	3508      	adds	r5, #8
 800e6c8:	2d0c      	cmp	r5, #12
 800e6ca:	bf38      	it	cc
 800e6cc:	250c      	movcc	r5, #12
 800e6ce:	2d00      	cmp	r5, #0
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	db01      	blt.n	800e6d8 <_malloc_r+0x1c>
 800e6d4:	42a9      	cmp	r1, r5
 800e6d6:	d905      	bls.n	800e6e4 <_malloc_r+0x28>
 800e6d8:	230c      	movs	r3, #12
 800e6da:	603b      	str	r3, [r7, #0]
 800e6dc:	2600      	movs	r6, #0
 800e6de:	4630      	mov	r0, r6
 800e6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e7b8 <_malloc_r+0xfc>
 800e6e8:	f000 f868 	bl	800e7bc <__malloc_lock>
 800e6ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e6f0:	461c      	mov	r4, r3
 800e6f2:	bb5c      	cbnz	r4, 800e74c <_malloc_r+0x90>
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	4638      	mov	r0, r7
 800e6f8:	f7ff ffc0 	bl	800e67c <sbrk_aligned>
 800e6fc:	1c43      	adds	r3, r0, #1
 800e6fe:	4604      	mov	r4, r0
 800e700:	d155      	bne.n	800e7ae <_malloc_r+0xf2>
 800e702:	f8d8 4000 	ldr.w	r4, [r8]
 800e706:	4626      	mov	r6, r4
 800e708:	2e00      	cmp	r6, #0
 800e70a:	d145      	bne.n	800e798 <_malloc_r+0xdc>
 800e70c:	2c00      	cmp	r4, #0
 800e70e:	d048      	beq.n	800e7a2 <_malloc_r+0xe6>
 800e710:	6823      	ldr	r3, [r4, #0]
 800e712:	4631      	mov	r1, r6
 800e714:	4638      	mov	r0, r7
 800e716:	eb04 0903 	add.w	r9, r4, r3
 800e71a:	f000 fe4d 	bl	800f3b8 <_sbrk_r>
 800e71e:	4581      	cmp	r9, r0
 800e720:	d13f      	bne.n	800e7a2 <_malloc_r+0xe6>
 800e722:	6821      	ldr	r1, [r4, #0]
 800e724:	1a6d      	subs	r5, r5, r1
 800e726:	4629      	mov	r1, r5
 800e728:	4638      	mov	r0, r7
 800e72a:	f7ff ffa7 	bl	800e67c <sbrk_aligned>
 800e72e:	3001      	adds	r0, #1
 800e730:	d037      	beq.n	800e7a2 <_malloc_r+0xe6>
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	442b      	add	r3, r5
 800e736:	6023      	str	r3, [r4, #0]
 800e738:	f8d8 3000 	ldr.w	r3, [r8]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d038      	beq.n	800e7b2 <_malloc_r+0xf6>
 800e740:	685a      	ldr	r2, [r3, #4]
 800e742:	42a2      	cmp	r2, r4
 800e744:	d12b      	bne.n	800e79e <_malloc_r+0xe2>
 800e746:	2200      	movs	r2, #0
 800e748:	605a      	str	r2, [r3, #4]
 800e74a:	e00f      	b.n	800e76c <_malloc_r+0xb0>
 800e74c:	6822      	ldr	r2, [r4, #0]
 800e74e:	1b52      	subs	r2, r2, r5
 800e750:	d41f      	bmi.n	800e792 <_malloc_r+0xd6>
 800e752:	2a0b      	cmp	r2, #11
 800e754:	d917      	bls.n	800e786 <_malloc_r+0xca>
 800e756:	1961      	adds	r1, r4, r5
 800e758:	42a3      	cmp	r3, r4
 800e75a:	6025      	str	r5, [r4, #0]
 800e75c:	bf18      	it	ne
 800e75e:	6059      	strne	r1, [r3, #4]
 800e760:	6863      	ldr	r3, [r4, #4]
 800e762:	bf08      	it	eq
 800e764:	f8c8 1000 	streq.w	r1, [r8]
 800e768:	5162      	str	r2, [r4, r5]
 800e76a:	604b      	str	r3, [r1, #4]
 800e76c:	4638      	mov	r0, r7
 800e76e:	f104 060b 	add.w	r6, r4, #11
 800e772:	f000 f829 	bl	800e7c8 <__malloc_unlock>
 800e776:	f026 0607 	bic.w	r6, r6, #7
 800e77a:	1d23      	adds	r3, r4, #4
 800e77c:	1af2      	subs	r2, r6, r3
 800e77e:	d0ae      	beq.n	800e6de <_malloc_r+0x22>
 800e780:	1b9b      	subs	r3, r3, r6
 800e782:	50a3      	str	r3, [r4, r2]
 800e784:	e7ab      	b.n	800e6de <_malloc_r+0x22>
 800e786:	42a3      	cmp	r3, r4
 800e788:	6862      	ldr	r2, [r4, #4]
 800e78a:	d1dd      	bne.n	800e748 <_malloc_r+0x8c>
 800e78c:	f8c8 2000 	str.w	r2, [r8]
 800e790:	e7ec      	b.n	800e76c <_malloc_r+0xb0>
 800e792:	4623      	mov	r3, r4
 800e794:	6864      	ldr	r4, [r4, #4]
 800e796:	e7ac      	b.n	800e6f2 <_malloc_r+0x36>
 800e798:	4634      	mov	r4, r6
 800e79a:	6876      	ldr	r6, [r6, #4]
 800e79c:	e7b4      	b.n	800e708 <_malloc_r+0x4c>
 800e79e:	4613      	mov	r3, r2
 800e7a0:	e7cc      	b.n	800e73c <_malloc_r+0x80>
 800e7a2:	230c      	movs	r3, #12
 800e7a4:	603b      	str	r3, [r7, #0]
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	f000 f80e 	bl	800e7c8 <__malloc_unlock>
 800e7ac:	e797      	b.n	800e6de <_malloc_r+0x22>
 800e7ae:	6025      	str	r5, [r4, #0]
 800e7b0:	e7dc      	b.n	800e76c <_malloc_r+0xb0>
 800e7b2:	605b      	str	r3, [r3, #4]
 800e7b4:	deff      	udf	#255	; 0xff
 800e7b6:	bf00      	nop
 800e7b8:	200009e4 	.word	0x200009e4

0800e7bc <__malloc_lock>:
 800e7bc:	4801      	ldr	r0, [pc, #4]	; (800e7c4 <__malloc_lock+0x8>)
 800e7be:	f7ff b88b 	b.w	800d8d8 <__retarget_lock_acquire_recursive>
 800e7c2:	bf00      	nop
 800e7c4:	200009e0 	.word	0x200009e0

0800e7c8 <__malloc_unlock>:
 800e7c8:	4801      	ldr	r0, [pc, #4]	; (800e7d0 <__malloc_unlock+0x8>)
 800e7ca:	f7ff b886 	b.w	800d8da <__retarget_lock_release_recursive>
 800e7ce:	bf00      	nop
 800e7d0:	200009e0 	.word	0x200009e0

0800e7d4 <_Balloc>:
 800e7d4:	b570      	push	{r4, r5, r6, lr}
 800e7d6:	69c6      	ldr	r6, [r0, #28]
 800e7d8:	4604      	mov	r4, r0
 800e7da:	460d      	mov	r5, r1
 800e7dc:	b976      	cbnz	r6, 800e7fc <_Balloc+0x28>
 800e7de:	2010      	movs	r0, #16
 800e7e0:	f7ff ff44 	bl	800e66c <malloc>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	61e0      	str	r0, [r4, #28]
 800e7e8:	b920      	cbnz	r0, 800e7f4 <_Balloc+0x20>
 800e7ea:	4b18      	ldr	r3, [pc, #96]	; (800e84c <_Balloc+0x78>)
 800e7ec:	4818      	ldr	r0, [pc, #96]	; (800e850 <_Balloc+0x7c>)
 800e7ee:	216b      	movs	r1, #107	; 0x6b
 800e7f0:	f000 fe00 	bl	800f3f4 <__assert_func>
 800e7f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7f8:	6006      	str	r6, [r0, #0]
 800e7fa:	60c6      	str	r6, [r0, #12]
 800e7fc:	69e6      	ldr	r6, [r4, #28]
 800e7fe:	68f3      	ldr	r3, [r6, #12]
 800e800:	b183      	cbz	r3, 800e824 <_Balloc+0x50>
 800e802:	69e3      	ldr	r3, [r4, #28]
 800e804:	68db      	ldr	r3, [r3, #12]
 800e806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e80a:	b9b8      	cbnz	r0, 800e83c <_Balloc+0x68>
 800e80c:	2101      	movs	r1, #1
 800e80e:	fa01 f605 	lsl.w	r6, r1, r5
 800e812:	1d72      	adds	r2, r6, #5
 800e814:	0092      	lsls	r2, r2, #2
 800e816:	4620      	mov	r0, r4
 800e818:	f000 fe0a 	bl	800f430 <_calloc_r>
 800e81c:	b160      	cbz	r0, 800e838 <_Balloc+0x64>
 800e81e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e822:	e00e      	b.n	800e842 <_Balloc+0x6e>
 800e824:	2221      	movs	r2, #33	; 0x21
 800e826:	2104      	movs	r1, #4
 800e828:	4620      	mov	r0, r4
 800e82a:	f000 fe01 	bl	800f430 <_calloc_r>
 800e82e:	69e3      	ldr	r3, [r4, #28]
 800e830:	60f0      	str	r0, [r6, #12]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d1e4      	bne.n	800e802 <_Balloc+0x2e>
 800e838:	2000      	movs	r0, #0
 800e83a:	bd70      	pop	{r4, r5, r6, pc}
 800e83c:	6802      	ldr	r2, [r0, #0]
 800e83e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e842:	2300      	movs	r3, #0
 800e844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e848:	e7f7      	b.n	800e83a <_Balloc+0x66>
 800e84a:	bf00      	nop
 800e84c:	0800fb2a 	.word	0x0800fb2a
 800e850:	0800fbaa 	.word	0x0800fbaa

0800e854 <_Bfree>:
 800e854:	b570      	push	{r4, r5, r6, lr}
 800e856:	69c6      	ldr	r6, [r0, #28]
 800e858:	4605      	mov	r5, r0
 800e85a:	460c      	mov	r4, r1
 800e85c:	b976      	cbnz	r6, 800e87c <_Bfree+0x28>
 800e85e:	2010      	movs	r0, #16
 800e860:	f7ff ff04 	bl	800e66c <malloc>
 800e864:	4602      	mov	r2, r0
 800e866:	61e8      	str	r0, [r5, #28]
 800e868:	b920      	cbnz	r0, 800e874 <_Bfree+0x20>
 800e86a:	4b09      	ldr	r3, [pc, #36]	; (800e890 <_Bfree+0x3c>)
 800e86c:	4809      	ldr	r0, [pc, #36]	; (800e894 <_Bfree+0x40>)
 800e86e:	218f      	movs	r1, #143	; 0x8f
 800e870:	f000 fdc0 	bl	800f3f4 <__assert_func>
 800e874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e878:	6006      	str	r6, [r0, #0]
 800e87a:	60c6      	str	r6, [r0, #12]
 800e87c:	b13c      	cbz	r4, 800e88e <_Bfree+0x3a>
 800e87e:	69eb      	ldr	r3, [r5, #28]
 800e880:	6862      	ldr	r2, [r4, #4]
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e888:	6021      	str	r1, [r4, #0]
 800e88a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e88e:	bd70      	pop	{r4, r5, r6, pc}
 800e890:	0800fb2a 	.word	0x0800fb2a
 800e894:	0800fbaa 	.word	0x0800fbaa

0800e898 <__multadd>:
 800e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	690d      	ldr	r5, [r1, #16]
 800e89e:	4607      	mov	r7, r0
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	461e      	mov	r6, r3
 800e8a4:	f101 0c14 	add.w	ip, r1, #20
 800e8a8:	2000      	movs	r0, #0
 800e8aa:	f8dc 3000 	ldr.w	r3, [ip]
 800e8ae:	b299      	uxth	r1, r3
 800e8b0:	fb02 6101 	mla	r1, r2, r1, r6
 800e8b4:	0c1e      	lsrs	r6, r3, #16
 800e8b6:	0c0b      	lsrs	r3, r1, #16
 800e8b8:	fb02 3306 	mla	r3, r2, r6, r3
 800e8bc:	b289      	uxth	r1, r1
 800e8be:	3001      	adds	r0, #1
 800e8c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8c4:	4285      	cmp	r5, r0
 800e8c6:	f84c 1b04 	str.w	r1, [ip], #4
 800e8ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8ce:	dcec      	bgt.n	800e8aa <__multadd+0x12>
 800e8d0:	b30e      	cbz	r6, 800e916 <__multadd+0x7e>
 800e8d2:	68a3      	ldr	r3, [r4, #8]
 800e8d4:	42ab      	cmp	r3, r5
 800e8d6:	dc19      	bgt.n	800e90c <__multadd+0x74>
 800e8d8:	6861      	ldr	r1, [r4, #4]
 800e8da:	4638      	mov	r0, r7
 800e8dc:	3101      	adds	r1, #1
 800e8de:	f7ff ff79 	bl	800e7d4 <_Balloc>
 800e8e2:	4680      	mov	r8, r0
 800e8e4:	b928      	cbnz	r0, 800e8f2 <__multadd+0x5a>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	4b0c      	ldr	r3, [pc, #48]	; (800e91c <__multadd+0x84>)
 800e8ea:	480d      	ldr	r0, [pc, #52]	; (800e920 <__multadd+0x88>)
 800e8ec:	21ba      	movs	r1, #186	; 0xba
 800e8ee:	f000 fd81 	bl	800f3f4 <__assert_func>
 800e8f2:	6922      	ldr	r2, [r4, #16]
 800e8f4:	3202      	adds	r2, #2
 800e8f6:	f104 010c 	add.w	r1, r4, #12
 800e8fa:	0092      	lsls	r2, r2, #2
 800e8fc:	300c      	adds	r0, #12
 800e8fe:	f000 fd6b 	bl	800f3d8 <memcpy>
 800e902:	4621      	mov	r1, r4
 800e904:	4638      	mov	r0, r7
 800e906:	f7ff ffa5 	bl	800e854 <_Bfree>
 800e90a:	4644      	mov	r4, r8
 800e90c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e910:	3501      	adds	r5, #1
 800e912:	615e      	str	r6, [r3, #20]
 800e914:	6125      	str	r5, [r4, #16]
 800e916:	4620      	mov	r0, r4
 800e918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e91c:	0800fb99 	.word	0x0800fb99
 800e920:	0800fbaa 	.word	0x0800fbaa

0800e924 <__hi0bits>:
 800e924:	0c03      	lsrs	r3, r0, #16
 800e926:	041b      	lsls	r3, r3, #16
 800e928:	b9d3      	cbnz	r3, 800e960 <__hi0bits+0x3c>
 800e92a:	0400      	lsls	r0, r0, #16
 800e92c:	2310      	movs	r3, #16
 800e92e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e932:	bf04      	itt	eq
 800e934:	0200      	lsleq	r0, r0, #8
 800e936:	3308      	addeq	r3, #8
 800e938:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e93c:	bf04      	itt	eq
 800e93e:	0100      	lsleq	r0, r0, #4
 800e940:	3304      	addeq	r3, #4
 800e942:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e946:	bf04      	itt	eq
 800e948:	0080      	lsleq	r0, r0, #2
 800e94a:	3302      	addeq	r3, #2
 800e94c:	2800      	cmp	r0, #0
 800e94e:	db05      	blt.n	800e95c <__hi0bits+0x38>
 800e950:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e954:	f103 0301 	add.w	r3, r3, #1
 800e958:	bf08      	it	eq
 800e95a:	2320      	moveq	r3, #32
 800e95c:	4618      	mov	r0, r3
 800e95e:	4770      	bx	lr
 800e960:	2300      	movs	r3, #0
 800e962:	e7e4      	b.n	800e92e <__hi0bits+0xa>

0800e964 <__lo0bits>:
 800e964:	6803      	ldr	r3, [r0, #0]
 800e966:	f013 0207 	ands.w	r2, r3, #7
 800e96a:	d00c      	beq.n	800e986 <__lo0bits+0x22>
 800e96c:	07d9      	lsls	r1, r3, #31
 800e96e:	d422      	bmi.n	800e9b6 <__lo0bits+0x52>
 800e970:	079a      	lsls	r2, r3, #30
 800e972:	bf49      	itett	mi
 800e974:	085b      	lsrmi	r3, r3, #1
 800e976:	089b      	lsrpl	r3, r3, #2
 800e978:	6003      	strmi	r3, [r0, #0]
 800e97a:	2201      	movmi	r2, #1
 800e97c:	bf5c      	itt	pl
 800e97e:	6003      	strpl	r3, [r0, #0]
 800e980:	2202      	movpl	r2, #2
 800e982:	4610      	mov	r0, r2
 800e984:	4770      	bx	lr
 800e986:	b299      	uxth	r1, r3
 800e988:	b909      	cbnz	r1, 800e98e <__lo0bits+0x2a>
 800e98a:	0c1b      	lsrs	r3, r3, #16
 800e98c:	2210      	movs	r2, #16
 800e98e:	b2d9      	uxtb	r1, r3
 800e990:	b909      	cbnz	r1, 800e996 <__lo0bits+0x32>
 800e992:	3208      	adds	r2, #8
 800e994:	0a1b      	lsrs	r3, r3, #8
 800e996:	0719      	lsls	r1, r3, #28
 800e998:	bf04      	itt	eq
 800e99a:	091b      	lsreq	r3, r3, #4
 800e99c:	3204      	addeq	r2, #4
 800e99e:	0799      	lsls	r1, r3, #30
 800e9a0:	bf04      	itt	eq
 800e9a2:	089b      	lsreq	r3, r3, #2
 800e9a4:	3202      	addeq	r2, #2
 800e9a6:	07d9      	lsls	r1, r3, #31
 800e9a8:	d403      	bmi.n	800e9b2 <__lo0bits+0x4e>
 800e9aa:	085b      	lsrs	r3, r3, #1
 800e9ac:	f102 0201 	add.w	r2, r2, #1
 800e9b0:	d003      	beq.n	800e9ba <__lo0bits+0x56>
 800e9b2:	6003      	str	r3, [r0, #0]
 800e9b4:	e7e5      	b.n	800e982 <__lo0bits+0x1e>
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	e7e3      	b.n	800e982 <__lo0bits+0x1e>
 800e9ba:	2220      	movs	r2, #32
 800e9bc:	e7e1      	b.n	800e982 <__lo0bits+0x1e>
	...

0800e9c0 <__i2b>:
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	f7ff ff05 	bl	800e7d4 <_Balloc>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	b928      	cbnz	r0, 800e9da <__i2b+0x1a>
 800e9ce:	4b05      	ldr	r3, [pc, #20]	; (800e9e4 <__i2b+0x24>)
 800e9d0:	4805      	ldr	r0, [pc, #20]	; (800e9e8 <__i2b+0x28>)
 800e9d2:	f240 1145 	movw	r1, #325	; 0x145
 800e9d6:	f000 fd0d 	bl	800f3f4 <__assert_func>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	6144      	str	r4, [r0, #20]
 800e9de:	6103      	str	r3, [r0, #16]
 800e9e0:	bd10      	pop	{r4, pc}
 800e9e2:	bf00      	nop
 800e9e4:	0800fb99 	.word	0x0800fb99
 800e9e8:	0800fbaa 	.word	0x0800fbaa

0800e9ec <__multiply>:
 800e9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	4691      	mov	r9, r2
 800e9f2:	690a      	ldr	r2, [r1, #16]
 800e9f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	bfb8      	it	lt
 800e9fc:	460b      	movlt	r3, r1
 800e9fe:	460c      	mov	r4, r1
 800ea00:	bfbc      	itt	lt
 800ea02:	464c      	movlt	r4, r9
 800ea04:	4699      	movlt	r9, r3
 800ea06:	6927      	ldr	r7, [r4, #16]
 800ea08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea0c:	68a3      	ldr	r3, [r4, #8]
 800ea0e:	6861      	ldr	r1, [r4, #4]
 800ea10:	eb07 060a 	add.w	r6, r7, sl
 800ea14:	42b3      	cmp	r3, r6
 800ea16:	b085      	sub	sp, #20
 800ea18:	bfb8      	it	lt
 800ea1a:	3101      	addlt	r1, #1
 800ea1c:	f7ff feda 	bl	800e7d4 <_Balloc>
 800ea20:	b930      	cbnz	r0, 800ea30 <__multiply+0x44>
 800ea22:	4602      	mov	r2, r0
 800ea24:	4b44      	ldr	r3, [pc, #272]	; (800eb38 <__multiply+0x14c>)
 800ea26:	4845      	ldr	r0, [pc, #276]	; (800eb3c <__multiply+0x150>)
 800ea28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ea2c:	f000 fce2 	bl	800f3f4 <__assert_func>
 800ea30:	f100 0514 	add.w	r5, r0, #20
 800ea34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea38:	462b      	mov	r3, r5
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	4543      	cmp	r3, r8
 800ea3e:	d321      	bcc.n	800ea84 <__multiply+0x98>
 800ea40:	f104 0314 	add.w	r3, r4, #20
 800ea44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea48:	f109 0314 	add.w	r3, r9, #20
 800ea4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea50:	9202      	str	r2, [sp, #8]
 800ea52:	1b3a      	subs	r2, r7, r4
 800ea54:	3a15      	subs	r2, #21
 800ea56:	f022 0203 	bic.w	r2, r2, #3
 800ea5a:	3204      	adds	r2, #4
 800ea5c:	f104 0115 	add.w	r1, r4, #21
 800ea60:	428f      	cmp	r7, r1
 800ea62:	bf38      	it	cc
 800ea64:	2204      	movcc	r2, #4
 800ea66:	9201      	str	r2, [sp, #4]
 800ea68:	9a02      	ldr	r2, [sp, #8]
 800ea6a:	9303      	str	r3, [sp, #12]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d80c      	bhi.n	800ea8a <__multiply+0x9e>
 800ea70:	2e00      	cmp	r6, #0
 800ea72:	dd03      	ble.n	800ea7c <__multiply+0x90>
 800ea74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d05b      	beq.n	800eb34 <__multiply+0x148>
 800ea7c:	6106      	str	r6, [r0, #16]
 800ea7e:	b005      	add	sp, #20
 800ea80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea84:	f843 2b04 	str.w	r2, [r3], #4
 800ea88:	e7d8      	b.n	800ea3c <__multiply+0x50>
 800ea8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea8e:	f1ba 0f00 	cmp.w	sl, #0
 800ea92:	d024      	beq.n	800eade <__multiply+0xf2>
 800ea94:	f104 0e14 	add.w	lr, r4, #20
 800ea98:	46a9      	mov	r9, r5
 800ea9a:	f04f 0c00 	mov.w	ip, #0
 800ea9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eaa2:	f8d9 1000 	ldr.w	r1, [r9]
 800eaa6:	fa1f fb82 	uxth.w	fp, r2
 800eaaa:	b289      	uxth	r1, r1
 800eaac:	fb0a 110b 	mla	r1, sl, fp, r1
 800eab0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eab4:	f8d9 2000 	ldr.w	r2, [r9]
 800eab8:	4461      	add	r1, ip
 800eaba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eabe:	fb0a c20b 	mla	r2, sl, fp, ip
 800eac2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eac6:	b289      	uxth	r1, r1
 800eac8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eacc:	4577      	cmp	r7, lr
 800eace:	f849 1b04 	str.w	r1, [r9], #4
 800ead2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ead6:	d8e2      	bhi.n	800ea9e <__multiply+0xb2>
 800ead8:	9a01      	ldr	r2, [sp, #4]
 800eada:	f845 c002 	str.w	ip, [r5, r2]
 800eade:	9a03      	ldr	r2, [sp, #12]
 800eae0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eae4:	3304      	adds	r3, #4
 800eae6:	f1b9 0f00 	cmp.w	r9, #0
 800eaea:	d021      	beq.n	800eb30 <__multiply+0x144>
 800eaec:	6829      	ldr	r1, [r5, #0]
 800eaee:	f104 0c14 	add.w	ip, r4, #20
 800eaf2:	46ae      	mov	lr, r5
 800eaf4:	f04f 0a00 	mov.w	sl, #0
 800eaf8:	f8bc b000 	ldrh.w	fp, [ip]
 800eafc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb00:	fb09 220b 	mla	r2, r9, fp, r2
 800eb04:	4452      	add	r2, sl
 800eb06:	b289      	uxth	r1, r1
 800eb08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb0c:	f84e 1b04 	str.w	r1, [lr], #4
 800eb10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eb14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb18:	f8be 1000 	ldrh.w	r1, [lr]
 800eb1c:	fb09 110a 	mla	r1, r9, sl, r1
 800eb20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800eb24:	4567      	cmp	r7, ip
 800eb26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb2a:	d8e5      	bhi.n	800eaf8 <__multiply+0x10c>
 800eb2c:	9a01      	ldr	r2, [sp, #4]
 800eb2e:	50a9      	str	r1, [r5, r2]
 800eb30:	3504      	adds	r5, #4
 800eb32:	e799      	b.n	800ea68 <__multiply+0x7c>
 800eb34:	3e01      	subs	r6, #1
 800eb36:	e79b      	b.n	800ea70 <__multiply+0x84>
 800eb38:	0800fb99 	.word	0x0800fb99
 800eb3c:	0800fbaa 	.word	0x0800fbaa

0800eb40 <__pow5mult>:
 800eb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb44:	4615      	mov	r5, r2
 800eb46:	f012 0203 	ands.w	r2, r2, #3
 800eb4a:	4606      	mov	r6, r0
 800eb4c:	460f      	mov	r7, r1
 800eb4e:	d007      	beq.n	800eb60 <__pow5mult+0x20>
 800eb50:	4c25      	ldr	r4, [pc, #148]	; (800ebe8 <__pow5mult+0xa8>)
 800eb52:	3a01      	subs	r2, #1
 800eb54:	2300      	movs	r3, #0
 800eb56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb5a:	f7ff fe9d 	bl	800e898 <__multadd>
 800eb5e:	4607      	mov	r7, r0
 800eb60:	10ad      	asrs	r5, r5, #2
 800eb62:	d03d      	beq.n	800ebe0 <__pow5mult+0xa0>
 800eb64:	69f4      	ldr	r4, [r6, #28]
 800eb66:	b97c      	cbnz	r4, 800eb88 <__pow5mult+0x48>
 800eb68:	2010      	movs	r0, #16
 800eb6a:	f7ff fd7f 	bl	800e66c <malloc>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	61f0      	str	r0, [r6, #28]
 800eb72:	b928      	cbnz	r0, 800eb80 <__pow5mult+0x40>
 800eb74:	4b1d      	ldr	r3, [pc, #116]	; (800ebec <__pow5mult+0xac>)
 800eb76:	481e      	ldr	r0, [pc, #120]	; (800ebf0 <__pow5mult+0xb0>)
 800eb78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800eb7c:	f000 fc3a 	bl	800f3f4 <__assert_func>
 800eb80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb84:	6004      	str	r4, [r0, #0]
 800eb86:	60c4      	str	r4, [r0, #12]
 800eb88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800eb8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb90:	b94c      	cbnz	r4, 800eba6 <__pow5mult+0x66>
 800eb92:	f240 2171 	movw	r1, #625	; 0x271
 800eb96:	4630      	mov	r0, r6
 800eb98:	f7ff ff12 	bl	800e9c0 <__i2b>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800eba2:	4604      	mov	r4, r0
 800eba4:	6003      	str	r3, [r0, #0]
 800eba6:	f04f 0900 	mov.w	r9, #0
 800ebaa:	07eb      	lsls	r3, r5, #31
 800ebac:	d50a      	bpl.n	800ebc4 <__pow5mult+0x84>
 800ebae:	4639      	mov	r1, r7
 800ebb0:	4622      	mov	r2, r4
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7ff ff1a 	bl	800e9ec <__multiply>
 800ebb8:	4639      	mov	r1, r7
 800ebba:	4680      	mov	r8, r0
 800ebbc:	4630      	mov	r0, r6
 800ebbe:	f7ff fe49 	bl	800e854 <_Bfree>
 800ebc2:	4647      	mov	r7, r8
 800ebc4:	106d      	asrs	r5, r5, #1
 800ebc6:	d00b      	beq.n	800ebe0 <__pow5mult+0xa0>
 800ebc8:	6820      	ldr	r0, [r4, #0]
 800ebca:	b938      	cbnz	r0, 800ebdc <__pow5mult+0x9c>
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4621      	mov	r1, r4
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f7ff ff0b 	bl	800e9ec <__multiply>
 800ebd6:	6020      	str	r0, [r4, #0]
 800ebd8:	f8c0 9000 	str.w	r9, [r0]
 800ebdc:	4604      	mov	r4, r0
 800ebde:	e7e4      	b.n	800ebaa <__pow5mult+0x6a>
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebe6:	bf00      	nop
 800ebe8:	0800fcf8 	.word	0x0800fcf8
 800ebec:	0800fb2a 	.word	0x0800fb2a
 800ebf0:	0800fbaa 	.word	0x0800fbaa

0800ebf4 <__lshift>:
 800ebf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf8:	460c      	mov	r4, r1
 800ebfa:	6849      	ldr	r1, [r1, #4]
 800ebfc:	6923      	ldr	r3, [r4, #16]
 800ebfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec02:	68a3      	ldr	r3, [r4, #8]
 800ec04:	4607      	mov	r7, r0
 800ec06:	4691      	mov	r9, r2
 800ec08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec0c:	f108 0601 	add.w	r6, r8, #1
 800ec10:	42b3      	cmp	r3, r6
 800ec12:	db0b      	blt.n	800ec2c <__lshift+0x38>
 800ec14:	4638      	mov	r0, r7
 800ec16:	f7ff fddd 	bl	800e7d4 <_Balloc>
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	b948      	cbnz	r0, 800ec32 <__lshift+0x3e>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	4b28      	ldr	r3, [pc, #160]	; (800ecc4 <__lshift+0xd0>)
 800ec22:	4829      	ldr	r0, [pc, #164]	; (800ecc8 <__lshift+0xd4>)
 800ec24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ec28:	f000 fbe4 	bl	800f3f4 <__assert_func>
 800ec2c:	3101      	adds	r1, #1
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	e7ee      	b.n	800ec10 <__lshift+0x1c>
 800ec32:	2300      	movs	r3, #0
 800ec34:	f100 0114 	add.w	r1, r0, #20
 800ec38:	f100 0210 	add.w	r2, r0, #16
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	4553      	cmp	r3, sl
 800ec40:	db33      	blt.n	800ecaa <__lshift+0xb6>
 800ec42:	6920      	ldr	r0, [r4, #16]
 800ec44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec48:	f104 0314 	add.w	r3, r4, #20
 800ec4c:	f019 091f 	ands.w	r9, r9, #31
 800ec50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec58:	d02b      	beq.n	800ecb2 <__lshift+0xbe>
 800ec5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ec5e:	468a      	mov	sl, r1
 800ec60:	2200      	movs	r2, #0
 800ec62:	6818      	ldr	r0, [r3, #0]
 800ec64:	fa00 f009 	lsl.w	r0, r0, r9
 800ec68:	4310      	orrs	r0, r2
 800ec6a:	f84a 0b04 	str.w	r0, [sl], #4
 800ec6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec72:	459c      	cmp	ip, r3
 800ec74:	fa22 f20e 	lsr.w	r2, r2, lr
 800ec78:	d8f3      	bhi.n	800ec62 <__lshift+0x6e>
 800ec7a:	ebac 0304 	sub.w	r3, ip, r4
 800ec7e:	3b15      	subs	r3, #21
 800ec80:	f023 0303 	bic.w	r3, r3, #3
 800ec84:	3304      	adds	r3, #4
 800ec86:	f104 0015 	add.w	r0, r4, #21
 800ec8a:	4584      	cmp	ip, r0
 800ec8c:	bf38      	it	cc
 800ec8e:	2304      	movcc	r3, #4
 800ec90:	50ca      	str	r2, [r1, r3]
 800ec92:	b10a      	cbz	r2, 800ec98 <__lshift+0xa4>
 800ec94:	f108 0602 	add.w	r6, r8, #2
 800ec98:	3e01      	subs	r6, #1
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	612e      	str	r6, [r5, #16]
 800ec9e:	4621      	mov	r1, r4
 800eca0:	f7ff fdd8 	bl	800e854 <_Bfree>
 800eca4:	4628      	mov	r0, r5
 800eca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecae:	3301      	adds	r3, #1
 800ecb0:	e7c5      	b.n	800ec3e <__lshift+0x4a>
 800ecb2:	3904      	subs	r1, #4
 800ecb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecbc:	459c      	cmp	ip, r3
 800ecbe:	d8f9      	bhi.n	800ecb4 <__lshift+0xc0>
 800ecc0:	e7ea      	b.n	800ec98 <__lshift+0xa4>
 800ecc2:	bf00      	nop
 800ecc4:	0800fb99 	.word	0x0800fb99
 800ecc8:	0800fbaa 	.word	0x0800fbaa

0800eccc <__mcmp>:
 800eccc:	b530      	push	{r4, r5, lr}
 800ecce:	6902      	ldr	r2, [r0, #16]
 800ecd0:	690c      	ldr	r4, [r1, #16]
 800ecd2:	1b12      	subs	r2, r2, r4
 800ecd4:	d10e      	bne.n	800ecf4 <__mcmp+0x28>
 800ecd6:	f100 0314 	add.w	r3, r0, #20
 800ecda:	3114      	adds	r1, #20
 800ecdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ece0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ece4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ece8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ecec:	42a5      	cmp	r5, r4
 800ecee:	d003      	beq.n	800ecf8 <__mcmp+0x2c>
 800ecf0:	d305      	bcc.n	800ecfe <__mcmp+0x32>
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	4610      	mov	r0, r2
 800ecf6:	bd30      	pop	{r4, r5, pc}
 800ecf8:	4283      	cmp	r3, r0
 800ecfa:	d3f3      	bcc.n	800ece4 <__mcmp+0x18>
 800ecfc:	e7fa      	b.n	800ecf4 <__mcmp+0x28>
 800ecfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ed02:	e7f7      	b.n	800ecf4 <__mcmp+0x28>

0800ed04 <__mdiff>:
 800ed04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed08:	460c      	mov	r4, r1
 800ed0a:	4606      	mov	r6, r0
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	4620      	mov	r0, r4
 800ed10:	4690      	mov	r8, r2
 800ed12:	f7ff ffdb 	bl	800eccc <__mcmp>
 800ed16:	1e05      	subs	r5, r0, #0
 800ed18:	d110      	bne.n	800ed3c <__mdiff+0x38>
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	4630      	mov	r0, r6
 800ed1e:	f7ff fd59 	bl	800e7d4 <_Balloc>
 800ed22:	b930      	cbnz	r0, 800ed32 <__mdiff+0x2e>
 800ed24:	4b3a      	ldr	r3, [pc, #232]	; (800ee10 <__mdiff+0x10c>)
 800ed26:	4602      	mov	r2, r0
 800ed28:	f240 2137 	movw	r1, #567	; 0x237
 800ed2c:	4839      	ldr	r0, [pc, #228]	; (800ee14 <__mdiff+0x110>)
 800ed2e:	f000 fb61 	bl	800f3f4 <__assert_func>
 800ed32:	2301      	movs	r3, #1
 800ed34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3c:	bfa4      	itt	ge
 800ed3e:	4643      	movge	r3, r8
 800ed40:	46a0      	movge	r8, r4
 800ed42:	4630      	mov	r0, r6
 800ed44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed48:	bfa6      	itte	ge
 800ed4a:	461c      	movge	r4, r3
 800ed4c:	2500      	movge	r5, #0
 800ed4e:	2501      	movlt	r5, #1
 800ed50:	f7ff fd40 	bl	800e7d4 <_Balloc>
 800ed54:	b920      	cbnz	r0, 800ed60 <__mdiff+0x5c>
 800ed56:	4b2e      	ldr	r3, [pc, #184]	; (800ee10 <__mdiff+0x10c>)
 800ed58:	4602      	mov	r2, r0
 800ed5a:	f240 2145 	movw	r1, #581	; 0x245
 800ed5e:	e7e5      	b.n	800ed2c <__mdiff+0x28>
 800ed60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed64:	6926      	ldr	r6, [r4, #16]
 800ed66:	60c5      	str	r5, [r0, #12]
 800ed68:	f104 0914 	add.w	r9, r4, #20
 800ed6c:	f108 0514 	add.w	r5, r8, #20
 800ed70:	f100 0e14 	add.w	lr, r0, #20
 800ed74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ed78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ed7c:	f108 0210 	add.w	r2, r8, #16
 800ed80:	46f2      	mov	sl, lr
 800ed82:	2100      	movs	r1, #0
 800ed84:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ed8c:	fa11 f88b 	uxtah	r8, r1, fp
 800ed90:	b299      	uxth	r1, r3
 800ed92:	0c1b      	lsrs	r3, r3, #16
 800ed94:	eba8 0801 	sub.w	r8, r8, r1
 800ed98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ed9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eda0:	fa1f f888 	uxth.w	r8, r8
 800eda4:	1419      	asrs	r1, r3, #16
 800eda6:	454e      	cmp	r6, r9
 800eda8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edac:	f84a 3b04 	str.w	r3, [sl], #4
 800edb0:	d8e8      	bhi.n	800ed84 <__mdiff+0x80>
 800edb2:	1b33      	subs	r3, r6, r4
 800edb4:	3b15      	subs	r3, #21
 800edb6:	f023 0303 	bic.w	r3, r3, #3
 800edba:	3304      	adds	r3, #4
 800edbc:	3415      	adds	r4, #21
 800edbe:	42a6      	cmp	r6, r4
 800edc0:	bf38      	it	cc
 800edc2:	2304      	movcc	r3, #4
 800edc4:	441d      	add	r5, r3
 800edc6:	4473      	add	r3, lr
 800edc8:	469e      	mov	lr, r3
 800edca:	462e      	mov	r6, r5
 800edcc:	4566      	cmp	r6, ip
 800edce:	d30e      	bcc.n	800edee <__mdiff+0xea>
 800edd0:	f10c 0203 	add.w	r2, ip, #3
 800edd4:	1b52      	subs	r2, r2, r5
 800edd6:	f022 0203 	bic.w	r2, r2, #3
 800edda:	3d03      	subs	r5, #3
 800eddc:	45ac      	cmp	ip, r5
 800edde:	bf38      	it	cc
 800ede0:	2200      	movcc	r2, #0
 800ede2:	4413      	add	r3, r2
 800ede4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ede8:	b17a      	cbz	r2, 800ee0a <__mdiff+0x106>
 800edea:	6107      	str	r7, [r0, #16]
 800edec:	e7a4      	b.n	800ed38 <__mdiff+0x34>
 800edee:	f856 8b04 	ldr.w	r8, [r6], #4
 800edf2:	fa11 f288 	uxtah	r2, r1, r8
 800edf6:	1414      	asrs	r4, r2, #16
 800edf8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800edfc:	b292      	uxth	r2, r2
 800edfe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee02:	f84e 2b04 	str.w	r2, [lr], #4
 800ee06:	1421      	asrs	r1, r4, #16
 800ee08:	e7e0      	b.n	800edcc <__mdiff+0xc8>
 800ee0a:	3f01      	subs	r7, #1
 800ee0c:	e7ea      	b.n	800ede4 <__mdiff+0xe0>
 800ee0e:	bf00      	nop
 800ee10:	0800fb99 	.word	0x0800fb99
 800ee14:	0800fbaa 	.word	0x0800fbaa

0800ee18 <__d2b>:
 800ee18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee1c:	460f      	mov	r7, r1
 800ee1e:	2101      	movs	r1, #1
 800ee20:	ec59 8b10 	vmov	r8, r9, d0
 800ee24:	4616      	mov	r6, r2
 800ee26:	f7ff fcd5 	bl	800e7d4 <_Balloc>
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	b930      	cbnz	r0, 800ee3c <__d2b+0x24>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	4b24      	ldr	r3, [pc, #144]	; (800eec4 <__d2b+0xac>)
 800ee32:	4825      	ldr	r0, [pc, #148]	; (800eec8 <__d2b+0xb0>)
 800ee34:	f240 310f 	movw	r1, #783	; 0x30f
 800ee38:	f000 fadc 	bl	800f3f4 <__assert_func>
 800ee3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee44:	bb2d      	cbnz	r5, 800ee92 <__d2b+0x7a>
 800ee46:	9301      	str	r3, [sp, #4]
 800ee48:	f1b8 0300 	subs.w	r3, r8, #0
 800ee4c:	d026      	beq.n	800ee9c <__d2b+0x84>
 800ee4e:	4668      	mov	r0, sp
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	f7ff fd87 	bl	800e964 <__lo0bits>
 800ee56:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ee5a:	b1e8      	cbz	r0, 800ee98 <__d2b+0x80>
 800ee5c:	f1c0 0320 	rsb	r3, r0, #32
 800ee60:	fa02 f303 	lsl.w	r3, r2, r3
 800ee64:	430b      	orrs	r3, r1
 800ee66:	40c2      	lsrs	r2, r0
 800ee68:	6163      	str	r3, [r4, #20]
 800ee6a:	9201      	str	r2, [sp, #4]
 800ee6c:	9b01      	ldr	r3, [sp, #4]
 800ee6e:	61a3      	str	r3, [r4, #24]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	bf14      	ite	ne
 800ee74:	2202      	movne	r2, #2
 800ee76:	2201      	moveq	r2, #1
 800ee78:	6122      	str	r2, [r4, #16]
 800ee7a:	b1bd      	cbz	r5, 800eeac <__d2b+0x94>
 800ee7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ee80:	4405      	add	r5, r0
 800ee82:	603d      	str	r5, [r7, #0]
 800ee84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee88:	6030      	str	r0, [r6, #0]
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	b003      	add	sp, #12
 800ee8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee96:	e7d6      	b.n	800ee46 <__d2b+0x2e>
 800ee98:	6161      	str	r1, [r4, #20]
 800ee9a:	e7e7      	b.n	800ee6c <__d2b+0x54>
 800ee9c:	a801      	add	r0, sp, #4
 800ee9e:	f7ff fd61 	bl	800e964 <__lo0bits>
 800eea2:	9b01      	ldr	r3, [sp, #4]
 800eea4:	6163      	str	r3, [r4, #20]
 800eea6:	3020      	adds	r0, #32
 800eea8:	2201      	movs	r2, #1
 800eeaa:	e7e5      	b.n	800ee78 <__d2b+0x60>
 800eeac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eeb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eeb4:	6038      	str	r0, [r7, #0]
 800eeb6:	6918      	ldr	r0, [r3, #16]
 800eeb8:	f7ff fd34 	bl	800e924 <__hi0bits>
 800eebc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eec0:	e7e2      	b.n	800ee88 <__d2b+0x70>
 800eec2:	bf00      	nop
 800eec4:	0800fb99 	.word	0x0800fb99
 800eec8:	0800fbaa 	.word	0x0800fbaa

0800eecc <__sfputc_r>:
 800eecc:	6893      	ldr	r3, [r2, #8]
 800eece:	3b01      	subs	r3, #1
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	b410      	push	{r4}
 800eed4:	6093      	str	r3, [r2, #8]
 800eed6:	da08      	bge.n	800eeea <__sfputc_r+0x1e>
 800eed8:	6994      	ldr	r4, [r2, #24]
 800eeda:	42a3      	cmp	r3, r4
 800eedc:	db01      	blt.n	800eee2 <__sfputc_r+0x16>
 800eede:	290a      	cmp	r1, #10
 800eee0:	d103      	bne.n	800eeea <__sfputc_r+0x1e>
 800eee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eee6:	f7fe bbe6 	b.w	800d6b6 <__swbuf_r>
 800eeea:	6813      	ldr	r3, [r2, #0]
 800eeec:	1c58      	adds	r0, r3, #1
 800eeee:	6010      	str	r0, [r2, #0]
 800eef0:	7019      	strb	r1, [r3, #0]
 800eef2:	4608      	mov	r0, r1
 800eef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eef8:	4770      	bx	lr

0800eefa <__sfputs_r>:
 800eefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefc:	4606      	mov	r6, r0
 800eefe:	460f      	mov	r7, r1
 800ef00:	4614      	mov	r4, r2
 800ef02:	18d5      	adds	r5, r2, r3
 800ef04:	42ac      	cmp	r4, r5
 800ef06:	d101      	bne.n	800ef0c <__sfputs_r+0x12>
 800ef08:	2000      	movs	r0, #0
 800ef0a:	e007      	b.n	800ef1c <__sfputs_r+0x22>
 800ef0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef10:	463a      	mov	r2, r7
 800ef12:	4630      	mov	r0, r6
 800ef14:	f7ff ffda 	bl	800eecc <__sfputc_r>
 800ef18:	1c43      	adds	r3, r0, #1
 800ef1a:	d1f3      	bne.n	800ef04 <__sfputs_r+0xa>
 800ef1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef20 <_vfiprintf_r>:
 800ef20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef24:	460d      	mov	r5, r1
 800ef26:	b09d      	sub	sp, #116	; 0x74
 800ef28:	4614      	mov	r4, r2
 800ef2a:	4698      	mov	r8, r3
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	b118      	cbz	r0, 800ef38 <_vfiprintf_r+0x18>
 800ef30:	6a03      	ldr	r3, [r0, #32]
 800ef32:	b90b      	cbnz	r3, 800ef38 <_vfiprintf_r+0x18>
 800ef34:	f7fe fad8 	bl	800d4e8 <__sinit>
 800ef38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef3a:	07d9      	lsls	r1, r3, #31
 800ef3c:	d405      	bmi.n	800ef4a <_vfiprintf_r+0x2a>
 800ef3e:	89ab      	ldrh	r3, [r5, #12]
 800ef40:	059a      	lsls	r2, r3, #22
 800ef42:	d402      	bmi.n	800ef4a <_vfiprintf_r+0x2a>
 800ef44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef46:	f7fe fcc7 	bl	800d8d8 <__retarget_lock_acquire_recursive>
 800ef4a:	89ab      	ldrh	r3, [r5, #12]
 800ef4c:	071b      	lsls	r3, r3, #28
 800ef4e:	d501      	bpl.n	800ef54 <_vfiprintf_r+0x34>
 800ef50:	692b      	ldr	r3, [r5, #16]
 800ef52:	b99b      	cbnz	r3, 800ef7c <_vfiprintf_r+0x5c>
 800ef54:	4629      	mov	r1, r5
 800ef56:	4630      	mov	r0, r6
 800ef58:	f7fe fbea 	bl	800d730 <__swsetup_r>
 800ef5c:	b170      	cbz	r0, 800ef7c <_vfiprintf_r+0x5c>
 800ef5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef60:	07dc      	lsls	r4, r3, #31
 800ef62:	d504      	bpl.n	800ef6e <_vfiprintf_r+0x4e>
 800ef64:	f04f 30ff 	mov.w	r0, #4294967295
 800ef68:	b01d      	add	sp, #116	; 0x74
 800ef6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6e:	89ab      	ldrh	r3, [r5, #12]
 800ef70:	0598      	lsls	r0, r3, #22
 800ef72:	d4f7      	bmi.n	800ef64 <_vfiprintf_r+0x44>
 800ef74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef76:	f7fe fcb0 	bl	800d8da <__retarget_lock_release_recursive>
 800ef7a:	e7f3      	b.n	800ef64 <_vfiprintf_r+0x44>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef80:	2320      	movs	r3, #32
 800ef82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef8a:	2330      	movs	r3, #48	; 0x30
 800ef8c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f140 <_vfiprintf_r+0x220>
 800ef90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef94:	f04f 0901 	mov.w	r9, #1
 800ef98:	4623      	mov	r3, r4
 800ef9a:	469a      	mov	sl, r3
 800ef9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efa0:	b10a      	cbz	r2, 800efa6 <_vfiprintf_r+0x86>
 800efa2:	2a25      	cmp	r2, #37	; 0x25
 800efa4:	d1f9      	bne.n	800ef9a <_vfiprintf_r+0x7a>
 800efa6:	ebba 0b04 	subs.w	fp, sl, r4
 800efaa:	d00b      	beq.n	800efc4 <_vfiprintf_r+0xa4>
 800efac:	465b      	mov	r3, fp
 800efae:	4622      	mov	r2, r4
 800efb0:	4629      	mov	r1, r5
 800efb2:	4630      	mov	r0, r6
 800efb4:	f7ff ffa1 	bl	800eefa <__sfputs_r>
 800efb8:	3001      	adds	r0, #1
 800efba:	f000 80a9 	beq.w	800f110 <_vfiprintf_r+0x1f0>
 800efbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efc0:	445a      	add	r2, fp
 800efc2:	9209      	str	r2, [sp, #36]	; 0x24
 800efc4:	f89a 3000 	ldrb.w	r3, [sl]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f000 80a1 	beq.w	800f110 <_vfiprintf_r+0x1f0>
 800efce:	2300      	movs	r3, #0
 800efd0:	f04f 32ff 	mov.w	r2, #4294967295
 800efd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efd8:	f10a 0a01 	add.w	sl, sl, #1
 800efdc:	9304      	str	r3, [sp, #16]
 800efde:	9307      	str	r3, [sp, #28]
 800efe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efe4:	931a      	str	r3, [sp, #104]	; 0x68
 800efe6:	4654      	mov	r4, sl
 800efe8:	2205      	movs	r2, #5
 800efea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efee:	4854      	ldr	r0, [pc, #336]	; (800f140 <_vfiprintf_r+0x220>)
 800eff0:	f7f1 f8ee 	bl	80001d0 <memchr>
 800eff4:	9a04      	ldr	r2, [sp, #16]
 800eff6:	b9d8      	cbnz	r0, 800f030 <_vfiprintf_r+0x110>
 800eff8:	06d1      	lsls	r1, r2, #27
 800effa:	bf44      	itt	mi
 800effc:	2320      	movmi	r3, #32
 800effe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f002:	0713      	lsls	r3, r2, #28
 800f004:	bf44      	itt	mi
 800f006:	232b      	movmi	r3, #43	; 0x2b
 800f008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f00c:	f89a 3000 	ldrb.w	r3, [sl]
 800f010:	2b2a      	cmp	r3, #42	; 0x2a
 800f012:	d015      	beq.n	800f040 <_vfiprintf_r+0x120>
 800f014:	9a07      	ldr	r2, [sp, #28]
 800f016:	4654      	mov	r4, sl
 800f018:	2000      	movs	r0, #0
 800f01a:	f04f 0c0a 	mov.w	ip, #10
 800f01e:	4621      	mov	r1, r4
 800f020:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f024:	3b30      	subs	r3, #48	; 0x30
 800f026:	2b09      	cmp	r3, #9
 800f028:	d94d      	bls.n	800f0c6 <_vfiprintf_r+0x1a6>
 800f02a:	b1b0      	cbz	r0, 800f05a <_vfiprintf_r+0x13a>
 800f02c:	9207      	str	r2, [sp, #28]
 800f02e:	e014      	b.n	800f05a <_vfiprintf_r+0x13a>
 800f030:	eba0 0308 	sub.w	r3, r0, r8
 800f034:	fa09 f303 	lsl.w	r3, r9, r3
 800f038:	4313      	orrs	r3, r2
 800f03a:	9304      	str	r3, [sp, #16]
 800f03c:	46a2      	mov	sl, r4
 800f03e:	e7d2      	b.n	800efe6 <_vfiprintf_r+0xc6>
 800f040:	9b03      	ldr	r3, [sp, #12]
 800f042:	1d19      	adds	r1, r3, #4
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	9103      	str	r1, [sp, #12]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	bfbb      	ittet	lt
 800f04c:	425b      	neglt	r3, r3
 800f04e:	f042 0202 	orrlt.w	r2, r2, #2
 800f052:	9307      	strge	r3, [sp, #28]
 800f054:	9307      	strlt	r3, [sp, #28]
 800f056:	bfb8      	it	lt
 800f058:	9204      	strlt	r2, [sp, #16]
 800f05a:	7823      	ldrb	r3, [r4, #0]
 800f05c:	2b2e      	cmp	r3, #46	; 0x2e
 800f05e:	d10c      	bne.n	800f07a <_vfiprintf_r+0x15a>
 800f060:	7863      	ldrb	r3, [r4, #1]
 800f062:	2b2a      	cmp	r3, #42	; 0x2a
 800f064:	d134      	bne.n	800f0d0 <_vfiprintf_r+0x1b0>
 800f066:	9b03      	ldr	r3, [sp, #12]
 800f068:	1d1a      	adds	r2, r3, #4
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	9203      	str	r2, [sp, #12]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	bfb8      	it	lt
 800f072:	f04f 33ff 	movlt.w	r3, #4294967295
 800f076:	3402      	adds	r4, #2
 800f078:	9305      	str	r3, [sp, #20]
 800f07a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f150 <_vfiprintf_r+0x230>
 800f07e:	7821      	ldrb	r1, [r4, #0]
 800f080:	2203      	movs	r2, #3
 800f082:	4650      	mov	r0, sl
 800f084:	f7f1 f8a4 	bl	80001d0 <memchr>
 800f088:	b138      	cbz	r0, 800f09a <_vfiprintf_r+0x17a>
 800f08a:	9b04      	ldr	r3, [sp, #16]
 800f08c:	eba0 000a 	sub.w	r0, r0, sl
 800f090:	2240      	movs	r2, #64	; 0x40
 800f092:	4082      	lsls	r2, r0
 800f094:	4313      	orrs	r3, r2
 800f096:	3401      	adds	r4, #1
 800f098:	9304      	str	r3, [sp, #16]
 800f09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09e:	4829      	ldr	r0, [pc, #164]	; (800f144 <_vfiprintf_r+0x224>)
 800f0a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0a4:	2206      	movs	r2, #6
 800f0a6:	f7f1 f893 	bl	80001d0 <memchr>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d03f      	beq.n	800f12e <_vfiprintf_r+0x20e>
 800f0ae:	4b26      	ldr	r3, [pc, #152]	; (800f148 <_vfiprintf_r+0x228>)
 800f0b0:	bb1b      	cbnz	r3, 800f0fa <_vfiprintf_r+0x1da>
 800f0b2:	9b03      	ldr	r3, [sp, #12]
 800f0b4:	3307      	adds	r3, #7
 800f0b6:	f023 0307 	bic.w	r3, r3, #7
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	9303      	str	r3, [sp, #12]
 800f0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c0:	443b      	add	r3, r7
 800f0c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0c4:	e768      	b.n	800ef98 <_vfiprintf_r+0x78>
 800f0c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	e7a6      	b.n	800f01e <_vfiprintf_r+0xfe>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	3401      	adds	r4, #1
 800f0d4:	9305      	str	r3, [sp, #20]
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	f04f 0c0a 	mov.w	ip, #10
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0e2:	3a30      	subs	r2, #48	; 0x30
 800f0e4:	2a09      	cmp	r2, #9
 800f0e6:	d903      	bls.n	800f0f0 <_vfiprintf_r+0x1d0>
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d0c6      	beq.n	800f07a <_vfiprintf_r+0x15a>
 800f0ec:	9105      	str	r1, [sp, #20]
 800f0ee:	e7c4      	b.n	800f07a <_vfiprintf_r+0x15a>
 800f0f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e7f0      	b.n	800f0dc <_vfiprintf_r+0x1bc>
 800f0fa:	ab03      	add	r3, sp, #12
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	462a      	mov	r2, r5
 800f100:	4b12      	ldr	r3, [pc, #72]	; (800f14c <_vfiprintf_r+0x22c>)
 800f102:	a904      	add	r1, sp, #16
 800f104:	4630      	mov	r0, r6
 800f106:	f7fd fdaf 	bl	800cc68 <_printf_float>
 800f10a:	4607      	mov	r7, r0
 800f10c:	1c78      	adds	r0, r7, #1
 800f10e:	d1d6      	bne.n	800f0be <_vfiprintf_r+0x19e>
 800f110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f112:	07d9      	lsls	r1, r3, #31
 800f114:	d405      	bmi.n	800f122 <_vfiprintf_r+0x202>
 800f116:	89ab      	ldrh	r3, [r5, #12]
 800f118:	059a      	lsls	r2, r3, #22
 800f11a:	d402      	bmi.n	800f122 <_vfiprintf_r+0x202>
 800f11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f11e:	f7fe fbdc 	bl	800d8da <__retarget_lock_release_recursive>
 800f122:	89ab      	ldrh	r3, [r5, #12]
 800f124:	065b      	lsls	r3, r3, #25
 800f126:	f53f af1d 	bmi.w	800ef64 <_vfiprintf_r+0x44>
 800f12a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f12c:	e71c      	b.n	800ef68 <_vfiprintf_r+0x48>
 800f12e:	ab03      	add	r3, sp, #12
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	462a      	mov	r2, r5
 800f134:	4b05      	ldr	r3, [pc, #20]	; (800f14c <_vfiprintf_r+0x22c>)
 800f136:	a904      	add	r1, sp, #16
 800f138:	4630      	mov	r0, r6
 800f13a:	f7fe f839 	bl	800d1b0 <_printf_i>
 800f13e:	e7e4      	b.n	800f10a <_vfiprintf_r+0x1ea>
 800f140:	0800fd04 	.word	0x0800fd04
 800f144:	0800fd0e 	.word	0x0800fd0e
 800f148:	0800cc69 	.word	0x0800cc69
 800f14c:	0800eefb 	.word	0x0800eefb
 800f150:	0800fd0a 	.word	0x0800fd0a

0800f154 <__sflush_r>:
 800f154:	898a      	ldrh	r2, [r1, #12]
 800f156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15a:	4605      	mov	r5, r0
 800f15c:	0710      	lsls	r0, r2, #28
 800f15e:	460c      	mov	r4, r1
 800f160:	d458      	bmi.n	800f214 <__sflush_r+0xc0>
 800f162:	684b      	ldr	r3, [r1, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	dc05      	bgt.n	800f174 <__sflush_r+0x20>
 800f168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	dc02      	bgt.n	800f174 <__sflush_r+0x20>
 800f16e:	2000      	movs	r0, #0
 800f170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f176:	2e00      	cmp	r6, #0
 800f178:	d0f9      	beq.n	800f16e <__sflush_r+0x1a>
 800f17a:	2300      	movs	r3, #0
 800f17c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f180:	682f      	ldr	r7, [r5, #0]
 800f182:	6a21      	ldr	r1, [r4, #32]
 800f184:	602b      	str	r3, [r5, #0]
 800f186:	d032      	beq.n	800f1ee <__sflush_r+0x9a>
 800f188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	075a      	lsls	r2, r3, #29
 800f18e:	d505      	bpl.n	800f19c <__sflush_r+0x48>
 800f190:	6863      	ldr	r3, [r4, #4]
 800f192:	1ac0      	subs	r0, r0, r3
 800f194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f196:	b10b      	cbz	r3, 800f19c <__sflush_r+0x48>
 800f198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f19a:	1ac0      	subs	r0, r0, r3
 800f19c:	2300      	movs	r3, #0
 800f19e:	4602      	mov	r2, r0
 800f1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1a2:	6a21      	ldr	r1, [r4, #32]
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	47b0      	blx	r6
 800f1a8:	1c43      	adds	r3, r0, #1
 800f1aa:	89a3      	ldrh	r3, [r4, #12]
 800f1ac:	d106      	bne.n	800f1bc <__sflush_r+0x68>
 800f1ae:	6829      	ldr	r1, [r5, #0]
 800f1b0:	291d      	cmp	r1, #29
 800f1b2:	d82b      	bhi.n	800f20c <__sflush_r+0xb8>
 800f1b4:	4a29      	ldr	r2, [pc, #164]	; (800f25c <__sflush_r+0x108>)
 800f1b6:	410a      	asrs	r2, r1
 800f1b8:	07d6      	lsls	r6, r2, #31
 800f1ba:	d427      	bmi.n	800f20c <__sflush_r+0xb8>
 800f1bc:	2200      	movs	r2, #0
 800f1be:	6062      	str	r2, [r4, #4]
 800f1c0:	04d9      	lsls	r1, r3, #19
 800f1c2:	6922      	ldr	r2, [r4, #16]
 800f1c4:	6022      	str	r2, [r4, #0]
 800f1c6:	d504      	bpl.n	800f1d2 <__sflush_r+0x7e>
 800f1c8:	1c42      	adds	r2, r0, #1
 800f1ca:	d101      	bne.n	800f1d0 <__sflush_r+0x7c>
 800f1cc:	682b      	ldr	r3, [r5, #0]
 800f1ce:	b903      	cbnz	r3, 800f1d2 <__sflush_r+0x7e>
 800f1d0:	6560      	str	r0, [r4, #84]	; 0x54
 800f1d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1d4:	602f      	str	r7, [r5, #0]
 800f1d6:	2900      	cmp	r1, #0
 800f1d8:	d0c9      	beq.n	800f16e <__sflush_r+0x1a>
 800f1da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1de:	4299      	cmp	r1, r3
 800f1e0:	d002      	beq.n	800f1e8 <__sflush_r+0x94>
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	f7ff f9f6 	bl	800e5d4 <_free_r>
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	6360      	str	r0, [r4, #52]	; 0x34
 800f1ec:	e7c0      	b.n	800f170 <__sflush_r+0x1c>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	47b0      	blx	r6
 800f1f4:	1c41      	adds	r1, r0, #1
 800f1f6:	d1c8      	bne.n	800f18a <__sflush_r+0x36>
 800f1f8:	682b      	ldr	r3, [r5, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d0c5      	beq.n	800f18a <__sflush_r+0x36>
 800f1fe:	2b1d      	cmp	r3, #29
 800f200:	d001      	beq.n	800f206 <__sflush_r+0xb2>
 800f202:	2b16      	cmp	r3, #22
 800f204:	d101      	bne.n	800f20a <__sflush_r+0xb6>
 800f206:	602f      	str	r7, [r5, #0]
 800f208:	e7b1      	b.n	800f16e <__sflush_r+0x1a>
 800f20a:	89a3      	ldrh	r3, [r4, #12]
 800f20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f210:	81a3      	strh	r3, [r4, #12]
 800f212:	e7ad      	b.n	800f170 <__sflush_r+0x1c>
 800f214:	690f      	ldr	r7, [r1, #16]
 800f216:	2f00      	cmp	r7, #0
 800f218:	d0a9      	beq.n	800f16e <__sflush_r+0x1a>
 800f21a:	0793      	lsls	r3, r2, #30
 800f21c:	680e      	ldr	r6, [r1, #0]
 800f21e:	bf08      	it	eq
 800f220:	694b      	ldreq	r3, [r1, #20]
 800f222:	600f      	str	r7, [r1, #0]
 800f224:	bf18      	it	ne
 800f226:	2300      	movne	r3, #0
 800f228:	eba6 0807 	sub.w	r8, r6, r7
 800f22c:	608b      	str	r3, [r1, #8]
 800f22e:	f1b8 0f00 	cmp.w	r8, #0
 800f232:	dd9c      	ble.n	800f16e <__sflush_r+0x1a>
 800f234:	6a21      	ldr	r1, [r4, #32]
 800f236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f238:	4643      	mov	r3, r8
 800f23a:	463a      	mov	r2, r7
 800f23c:	4628      	mov	r0, r5
 800f23e:	47b0      	blx	r6
 800f240:	2800      	cmp	r0, #0
 800f242:	dc06      	bgt.n	800f252 <__sflush_r+0xfe>
 800f244:	89a3      	ldrh	r3, [r4, #12]
 800f246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f24a:	81a3      	strh	r3, [r4, #12]
 800f24c:	f04f 30ff 	mov.w	r0, #4294967295
 800f250:	e78e      	b.n	800f170 <__sflush_r+0x1c>
 800f252:	4407      	add	r7, r0
 800f254:	eba8 0800 	sub.w	r8, r8, r0
 800f258:	e7e9      	b.n	800f22e <__sflush_r+0xda>
 800f25a:	bf00      	nop
 800f25c:	dfbffffe 	.word	0xdfbffffe

0800f260 <_fflush_r>:
 800f260:	b538      	push	{r3, r4, r5, lr}
 800f262:	690b      	ldr	r3, [r1, #16]
 800f264:	4605      	mov	r5, r0
 800f266:	460c      	mov	r4, r1
 800f268:	b913      	cbnz	r3, 800f270 <_fflush_r+0x10>
 800f26a:	2500      	movs	r5, #0
 800f26c:	4628      	mov	r0, r5
 800f26e:	bd38      	pop	{r3, r4, r5, pc}
 800f270:	b118      	cbz	r0, 800f27a <_fflush_r+0x1a>
 800f272:	6a03      	ldr	r3, [r0, #32]
 800f274:	b90b      	cbnz	r3, 800f27a <_fflush_r+0x1a>
 800f276:	f7fe f937 	bl	800d4e8 <__sinit>
 800f27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d0f3      	beq.n	800f26a <_fflush_r+0xa>
 800f282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f284:	07d0      	lsls	r0, r2, #31
 800f286:	d404      	bmi.n	800f292 <_fflush_r+0x32>
 800f288:	0599      	lsls	r1, r3, #22
 800f28a:	d402      	bmi.n	800f292 <_fflush_r+0x32>
 800f28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f28e:	f7fe fb23 	bl	800d8d8 <__retarget_lock_acquire_recursive>
 800f292:	4628      	mov	r0, r5
 800f294:	4621      	mov	r1, r4
 800f296:	f7ff ff5d 	bl	800f154 <__sflush_r>
 800f29a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f29c:	07da      	lsls	r2, r3, #31
 800f29e:	4605      	mov	r5, r0
 800f2a0:	d4e4      	bmi.n	800f26c <_fflush_r+0xc>
 800f2a2:	89a3      	ldrh	r3, [r4, #12]
 800f2a4:	059b      	lsls	r3, r3, #22
 800f2a6:	d4e1      	bmi.n	800f26c <_fflush_r+0xc>
 800f2a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2aa:	f7fe fb16 	bl	800d8da <__retarget_lock_release_recursive>
 800f2ae:	e7dd      	b.n	800f26c <_fflush_r+0xc>

0800f2b0 <__swhatbuf_r>:
 800f2b0:	b570      	push	{r4, r5, r6, lr}
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2b8:	2900      	cmp	r1, #0
 800f2ba:	b096      	sub	sp, #88	; 0x58
 800f2bc:	4615      	mov	r5, r2
 800f2be:	461e      	mov	r6, r3
 800f2c0:	da0d      	bge.n	800f2de <__swhatbuf_r+0x2e>
 800f2c2:	89a3      	ldrh	r3, [r4, #12]
 800f2c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f2c8:	f04f 0100 	mov.w	r1, #0
 800f2cc:	bf0c      	ite	eq
 800f2ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f2d2:	2340      	movne	r3, #64	; 0x40
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	6031      	str	r1, [r6, #0]
 800f2d8:	602b      	str	r3, [r5, #0]
 800f2da:	b016      	add	sp, #88	; 0x58
 800f2dc:	bd70      	pop	{r4, r5, r6, pc}
 800f2de:	466a      	mov	r2, sp
 800f2e0:	f000 f848 	bl	800f374 <_fstat_r>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	dbec      	blt.n	800f2c2 <__swhatbuf_r+0x12>
 800f2e8:	9901      	ldr	r1, [sp, #4]
 800f2ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f2ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f2f2:	4259      	negs	r1, r3
 800f2f4:	4159      	adcs	r1, r3
 800f2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2fa:	e7eb      	b.n	800f2d4 <__swhatbuf_r+0x24>

0800f2fc <__smakebuf_r>:
 800f2fc:	898b      	ldrh	r3, [r1, #12]
 800f2fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f300:	079d      	lsls	r5, r3, #30
 800f302:	4606      	mov	r6, r0
 800f304:	460c      	mov	r4, r1
 800f306:	d507      	bpl.n	800f318 <__smakebuf_r+0x1c>
 800f308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f30c:	6023      	str	r3, [r4, #0]
 800f30e:	6123      	str	r3, [r4, #16]
 800f310:	2301      	movs	r3, #1
 800f312:	6163      	str	r3, [r4, #20]
 800f314:	b002      	add	sp, #8
 800f316:	bd70      	pop	{r4, r5, r6, pc}
 800f318:	ab01      	add	r3, sp, #4
 800f31a:	466a      	mov	r2, sp
 800f31c:	f7ff ffc8 	bl	800f2b0 <__swhatbuf_r>
 800f320:	9900      	ldr	r1, [sp, #0]
 800f322:	4605      	mov	r5, r0
 800f324:	4630      	mov	r0, r6
 800f326:	f7ff f9c9 	bl	800e6bc <_malloc_r>
 800f32a:	b948      	cbnz	r0, 800f340 <__smakebuf_r+0x44>
 800f32c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f330:	059a      	lsls	r2, r3, #22
 800f332:	d4ef      	bmi.n	800f314 <__smakebuf_r+0x18>
 800f334:	f023 0303 	bic.w	r3, r3, #3
 800f338:	f043 0302 	orr.w	r3, r3, #2
 800f33c:	81a3      	strh	r3, [r4, #12]
 800f33e:	e7e3      	b.n	800f308 <__smakebuf_r+0xc>
 800f340:	89a3      	ldrh	r3, [r4, #12]
 800f342:	6020      	str	r0, [r4, #0]
 800f344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f348:	81a3      	strh	r3, [r4, #12]
 800f34a:	9b00      	ldr	r3, [sp, #0]
 800f34c:	6163      	str	r3, [r4, #20]
 800f34e:	9b01      	ldr	r3, [sp, #4]
 800f350:	6120      	str	r0, [r4, #16]
 800f352:	b15b      	cbz	r3, 800f36c <__smakebuf_r+0x70>
 800f354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f358:	4630      	mov	r0, r6
 800f35a:	f000 f81d 	bl	800f398 <_isatty_r>
 800f35e:	b128      	cbz	r0, 800f36c <__smakebuf_r+0x70>
 800f360:	89a3      	ldrh	r3, [r4, #12]
 800f362:	f023 0303 	bic.w	r3, r3, #3
 800f366:	f043 0301 	orr.w	r3, r3, #1
 800f36a:	81a3      	strh	r3, [r4, #12]
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	431d      	orrs	r5, r3
 800f370:	81a5      	strh	r5, [r4, #12]
 800f372:	e7cf      	b.n	800f314 <__smakebuf_r+0x18>

0800f374 <_fstat_r>:
 800f374:	b538      	push	{r3, r4, r5, lr}
 800f376:	4d07      	ldr	r5, [pc, #28]	; (800f394 <_fstat_r+0x20>)
 800f378:	2300      	movs	r3, #0
 800f37a:	4604      	mov	r4, r0
 800f37c:	4608      	mov	r0, r1
 800f37e:	4611      	mov	r1, r2
 800f380:	602b      	str	r3, [r5, #0]
 800f382:	f7f6 f814 	bl	80053ae <_fstat>
 800f386:	1c43      	adds	r3, r0, #1
 800f388:	d102      	bne.n	800f390 <_fstat_r+0x1c>
 800f38a:	682b      	ldr	r3, [r5, #0]
 800f38c:	b103      	cbz	r3, 800f390 <_fstat_r+0x1c>
 800f38e:	6023      	str	r3, [r4, #0]
 800f390:	bd38      	pop	{r3, r4, r5, pc}
 800f392:	bf00      	nop
 800f394:	200009dc 	.word	0x200009dc

0800f398 <_isatty_r>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	4d06      	ldr	r5, [pc, #24]	; (800f3b4 <_isatty_r+0x1c>)
 800f39c:	2300      	movs	r3, #0
 800f39e:	4604      	mov	r4, r0
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	602b      	str	r3, [r5, #0]
 800f3a4:	f7f6 f813 	bl	80053ce <_isatty>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d102      	bne.n	800f3b2 <_isatty_r+0x1a>
 800f3ac:	682b      	ldr	r3, [r5, #0]
 800f3ae:	b103      	cbz	r3, 800f3b2 <_isatty_r+0x1a>
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	200009dc 	.word	0x200009dc

0800f3b8 <_sbrk_r>:
 800f3b8:	b538      	push	{r3, r4, r5, lr}
 800f3ba:	4d06      	ldr	r5, [pc, #24]	; (800f3d4 <_sbrk_r+0x1c>)
 800f3bc:	2300      	movs	r3, #0
 800f3be:	4604      	mov	r4, r0
 800f3c0:	4608      	mov	r0, r1
 800f3c2:	602b      	str	r3, [r5, #0]
 800f3c4:	f7f6 f81c 	bl	8005400 <_sbrk>
 800f3c8:	1c43      	adds	r3, r0, #1
 800f3ca:	d102      	bne.n	800f3d2 <_sbrk_r+0x1a>
 800f3cc:	682b      	ldr	r3, [r5, #0]
 800f3ce:	b103      	cbz	r3, 800f3d2 <_sbrk_r+0x1a>
 800f3d0:	6023      	str	r3, [r4, #0]
 800f3d2:	bd38      	pop	{r3, r4, r5, pc}
 800f3d4:	200009dc 	.word	0x200009dc

0800f3d8 <memcpy>:
 800f3d8:	440a      	add	r2, r1
 800f3da:	4291      	cmp	r1, r2
 800f3dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3e0:	d100      	bne.n	800f3e4 <memcpy+0xc>
 800f3e2:	4770      	bx	lr
 800f3e4:	b510      	push	{r4, lr}
 800f3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ee:	4291      	cmp	r1, r2
 800f3f0:	d1f9      	bne.n	800f3e6 <memcpy+0xe>
 800f3f2:	bd10      	pop	{r4, pc}

0800f3f4 <__assert_func>:
 800f3f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3f6:	4614      	mov	r4, r2
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	4b09      	ldr	r3, [pc, #36]	; (800f420 <__assert_func+0x2c>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	4605      	mov	r5, r0
 800f400:	68d8      	ldr	r0, [r3, #12]
 800f402:	b14c      	cbz	r4, 800f418 <__assert_func+0x24>
 800f404:	4b07      	ldr	r3, [pc, #28]	; (800f424 <__assert_func+0x30>)
 800f406:	9100      	str	r1, [sp, #0]
 800f408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f40c:	4906      	ldr	r1, [pc, #24]	; (800f428 <__assert_func+0x34>)
 800f40e:	462b      	mov	r3, r5
 800f410:	f000 f844 	bl	800f49c <fiprintf>
 800f414:	f000 f854 	bl	800f4c0 <abort>
 800f418:	4b04      	ldr	r3, [pc, #16]	; (800f42c <__assert_func+0x38>)
 800f41a:	461c      	mov	r4, r3
 800f41c:	e7f3      	b.n	800f406 <__assert_func+0x12>
 800f41e:	bf00      	nop
 800f420:	20000080 	.word	0x20000080
 800f424:	0800fd1f 	.word	0x0800fd1f
 800f428:	0800fd2c 	.word	0x0800fd2c
 800f42c:	0800fd5a 	.word	0x0800fd5a

0800f430 <_calloc_r>:
 800f430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f432:	fba1 2402 	umull	r2, r4, r1, r2
 800f436:	b94c      	cbnz	r4, 800f44c <_calloc_r+0x1c>
 800f438:	4611      	mov	r1, r2
 800f43a:	9201      	str	r2, [sp, #4]
 800f43c:	f7ff f93e 	bl	800e6bc <_malloc_r>
 800f440:	9a01      	ldr	r2, [sp, #4]
 800f442:	4605      	mov	r5, r0
 800f444:	b930      	cbnz	r0, 800f454 <_calloc_r+0x24>
 800f446:	4628      	mov	r0, r5
 800f448:	b003      	add	sp, #12
 800f44a:	bd30      	pop	{r4, r5, pc}
 800f44c:	220c      	movs	r2, #12
 800f44e:	6002      	str	r2, [r0, #0]
 800f450:	2500      	movs	r5, #0
 800f452:	e7f8      	b.n	800f446 <_calloc_r+0x16>
 800f454:	4621      	mov	r1, r4
 800f456:	f7fe f9c3 	bl	800d7e0 <memset>
 800f45a:	e7f4      	b.n	800f446 <_calloc_r+0x16>

0800f45c <__ascii_mbtowc>:
 800f45c:	b082      	sub	sp, #8
 800f45e:	b901      	cbnz	r1, 800f462 <__ascii_mbtowc+0x6>
 800f460:	a901      	add	r1, sp, #4
 800f462:	b142      	cbz	r2, 800f476 <__ascii_mbtowc+0x1a>
 800f464:	b14b      	cbz	r3, 800f47a <__ascii_mbtowc+0x1e>
 800f466:	7813      	ldrb	r3, [r2, #0]
 800f468:	600b      	str	r3, [r1, #0]
 800f46a:	7812      	ldrb	r2, [r2, #0]
 800f46c:	1e10      	subs	r0, r2, #0
 800f46e:	bf18      	it	ne
 800f470:	2001      	movne	r0, #1
 800f472:	b002      	add	sp, #8
 800f474:	4770      	bx	lr
 800f476:	4610      	mov	r0, r2
 800f478:	e7fb      	b.n	800f472 <__ascii_mbtowc+0x16>
 800f47a:	f06f 0001 	mvn.w	r0, #1
 800f47e:	e7f8      	b.n	800f472 <__ascii_mbtowc+0x16>

0800f480 <__ascii_wctomb>:
 800f480:	b149      	cbz	r1, 800f496 <__ascii_wctomb+0x16>
 800f482:	2aff      	cmp	r2, #255	; 0xff
 800f484:	bf85      	ittet	hi
 800f486:	238a      	movhi	r3, #138	; 0x8a
 800f488:	6003      	strhi	r3, [r0, #0]
 800f48a:	700a      	strbls	r2, [r1, #0]
 800f48c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f490:	bf98      	it	ls
 800f492:	2001      	movls	r0, #1
 800f494:	4770      	bx	lr
 800f496:	4608      	mov	r0, r1
 800f498:	4770      	bx	lr
	...

0800f49c <fiprintf>:
 800f49c:	b40e      	push	{r1, r2, r3}
 800f49e:	b503      	push	{r0, r1, lr}
 800f4a0:	4601      	mov	r1, r0
 800f4a2:	ab03      	add	r3, sp, #12
 800f4a4:	4805      	ldr	r0, [pc, #20]	; (800f4bc <fiprintf+0x20>)
 800f4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4aa:	6800      	ldr	r0, [r0, #0]
 800f4ac:	9301      	str	r3, [sp, #4]
 800f4ae:	f7ff fd37 	bl	800ef20 <_vfiprintf_r>
 800f4b2:	b002      	add	sp, #8
 800f4b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4b8:	b003      	add	sp, #12
 800f4ba:	4770      	bx	lr
 800f4bc:	20000080 	.word	0x20000080

0800f4c0 <abort>:
 800f4c0:	b508      	push	{r3, lr}
 800f4c2:	2006      	movs	r0, #6
 800f4c4:	f000 f82c 	bl	800f520 <raise>
 800f4c8:	2001      	movs	r0, #1
 800f4ca:	f7f5 ff3d 	bl	8005348 <_exit>

0800f4ce <_raise_r>:
 800f4ce:	291f      	cmp	r1, #31
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	460d      	mov	r5, r1
 800f4d6:	d904      	bls.n	800f4e2 <_raise_r+0x14>
 800f4d8:	2316      	movs	r3, #22
 800f4da:	6003      	str	r3, [r0, #0]
 800f4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e0:	bd38      	pop	{r3, r4, r5, pc}
 800f4e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f4e4:	b112      	cbz	r2, 800f4ec <_raise_r+0x1e>
 800f4e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4ea:	b94b      	cbnz	r3, 800f500 <_raise_r+0x32>
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f000 f831 	bl	800f554 <_getpid_r>
 800f4f2:	462a      	mov	r2, r5
 800f4f4:	4601      	mov	r1, r0
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4fc:	f000 b818 	b.w	800f530 <_kill_r>
 800f500:	2b01      	cmp	r3, #1
 800f502:	d00a      	beq.n	800f51a <_raise_r+0x4c>
 800f504:	1c59      	adds	r1, r3, #1
 800f506:	d103      	bne.n	800f510 <_raise_r+0x42>
 800f508:	2316      	movs	r3, #22
 800f50a:	6003      	str	r3, [r0, #0]
 800f50c:	2001      	movs	r0, #1
 800f50e:	e7e7      	b.n	800f4e0 <_raise_r+0x12>
 800f510:	2400      	movs	r4, #0
 800f512:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f516:	4628      	mov	r0, r5
 800f518:	4798      	blx	r3
 800f51a:	2000      	movs	r0, #0
 800f51c:	e7e0      	b.n	800f4e0 <_raise_r+0x12>
	...

0800f520 <raise>:
 800f520:	4b02      	ldr	r3, [pc, #8]	; (800f52c <raise+0xc>)
 800f522:	4601      	mov	r1, r0
 800f524:	6818      	ldr	r0, [r3, #0]
 800f526:	f7ff bfd2 	b.w	800f4ce <_raise_r>
 800f52a:	bf00      	nop
 800f52c:	20000080 	.word	0x20000080

0800f530 <_kill_r>:
 800f530:	b538      	push	{r3, r4, r5, lr}
 800f532:	4d07      	ldr	r5, [pc, #28]	; (800f550 <_kill_r+0x20>)
 800f534:	2300      	movs	r3, #0
 800f536:	4604      	mov	r4, r0
 800f538:	4608      	mov	r0, r1
 800f53a:	4611      	mov	r1, r2
 800f53c:	602b      	str	r3, [r5, #0]
 800f53e:	f7f5 fef3 	bl	8005328 <_kill>
 800f542:	1c43      	adds	r3, r0, #1
 800f544:	d102      	bne.n	800f54c <_kill_r+0x1c>
 800f546:	682b      	ldr	r3, [r5, #0]
 800f548:	b103      	cbz	r3, 800f54c <_kill_r+0x1c>
 800f54a:	6023      	str	r3, [r4, #0]
 800f54c:	bd38      	pop	{r3, r4, r5, pc}
 800f54e:	bf00      	nop
 800f550:	200009dc 	.word	0x200009dc

0800f554 <_getpid_r>:
 800f554:	f7f5 bee0 	b.w	8005318 <_getpid>

0800f558 <_init>:
 800f558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55a:	bf00      	nop
 800f55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f55e:	bc08      	pop	{r3}
 800f560:	469e      	mov	lr, r3
 800f562:	4770      	bx	lr

0800f564 <_fini>:
 800f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f566:	bf00      	nop
 800f568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f56a:	bc08      	pop	{r3}
 800f56c:	469e      	mov	lr, r3
 800f56e:	4770      	bx	lr
