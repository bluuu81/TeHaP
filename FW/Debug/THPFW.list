
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  0800fe30  0800fe30  0001fe30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cf4  08010cf4  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08010cf4  08010cf4  00020cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cfc  08010cfc  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cfc  08010cfc  00020cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d00  08010d00  00020d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08010d04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  200001f8  08010efc  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  08010efc  00030a20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   000222c5  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051ff  00000000  00000000  00052530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e28  00000000  00000000  00057730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001763  00000000  00000000  00059558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002865f  00000000  00000000  0005acbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002663f  00000000  00000000  0008331a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e91a6  00000000  00000000  000a9959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000092d4  00000000  00000000  00192b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0019bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fe14 	.word	0x0800fe14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800fe14 	.word	0x0800fe14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <Crc16_up>:
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "EEPROM.h"

uint16_t Crc16_up(uint16_t crc, uint8_t data)			// liczenie CRC
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	80fb      	strh	r3, [r7, #6]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	717b      	strb	r3, [r7, #5]
	uint8_t x = crc >> 8 ^ data;
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	b2da      	uxtb	r2, r3
 8001008:	797b      	ldrb	r3, [r7, #5]
 800100a:	4053      	eors	r3, r2
 800100c:	73fb      	strb	r3, [r7, #15]
	x ^= x>>4;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	b2da      	uxtb	r2, r3
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	4053      	eors	r3, r2
 8001018:	73fb      	strb	r3, [r7, #15]
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	b29b      	uxth	r3, r3
 8001024:	031b      	lsls	r3, r3, #12
 8001026:	b29b      	uxth	r3, r3
 8001028:	b21b      	sxth	r3, r3
 800102a:	4053      	eors	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	b29b      	uxth	r3, r3
 8001032:	015b      	lsls	r3, r3, #5
 8001034:	b29b      	uxth	r3, r3
 8001036:	b21b      	sxth	r3, r3
 8001038:	4053      	eors	r3, r2
 800103a:	b21a      	sxth	r2, r3
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4053      	eors	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	80fb      	strh	r3, [r7, #6]
	return crc;
 8001046:	88fb      	ldrh	r3, [r7, #6]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <Calc_config_crc>:

void Calc_config_crc(void)		// aktualizacja CRC struktury config
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
	config.checksum = 0xFFFF;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <Calc_config_crc+0x58>)
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	uint8_t *p = (uint8_t*)&config;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <Calc_config_crc+0x58>)
 800106e:	60fb      	str	r3, [r7, #12]
	//printf("calc config crc, size of config: %i \r\n",sizeof(config));
	//for(int i=0; i<sizeof(config)-2; i++) config.checksum = Crc16_up(config.checksum, *p++);

	 uint16_t chk = 0xFFFF;
 8001070:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001074:	817b      	strh	r3, [r7, #10]
	    for(int i=0; i<sizeof(config)-2; i++) chk = Crc16_up(chk, *p++);
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e00d      	b.n	8001098 <Calc_config_crc+0x44>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	60fa      	str	r2, [r7, #12]
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	897b      	ldrh	r3, [r7, #10]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ffb1 	bl	8000ff0 <Crc16_up>
 800108e:	4603      	mov	r3, r0
 8001090:	817b      	strh	r3, [r7, #10]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3301      	adds	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b37      	cmp	r3, #55	; 0x37
 800109c:	d9ee      	bls.n	800107c <Calc_config_crc+0x28>
	    //printf("calc config crc: 0x%X \r\n",chk);
	    config.checksum=chk;
 800109e:	4b03      	ldr	r3, [pc, #12]	; (80010ac <Calc_config_crc+0x58>)
 80010a0:	897a      	ldrh	r2, [r7, #10]
 80010a2:	871a      	strh	r2, [r3, #56]	; 0x38

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000087c 	.word	0x2000087c

080010b0 <Flash_write_block>:

#define ADDR_FLASH_PAGE_0   ((uint32_t)0x08000000) /* Base @ of Page 0, 2 Kbytes */
#define FLASH_PAGE_ADDRESS 	(ADDR_FLASH_PAGE_0 | (FLASH_PAGE_SIZE * USE_FLASH_PAGE))

uint8_t Flash_write_block(uint32_t blk, uint8_t *buff, uint32_t len)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
	//WDR();
	HAL_FLASH_Unlock();
 80010c0:	f005 fe46 	bl	8006d50 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80010c4:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <Flash_write_block+0xd4>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a2e      	ldr	r2, [pc, #184]	; (8001184 <Flash_write_block+0xd4>)
 80010ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <Flash_write_block+0xd4>)
 80010d2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80010d6:	611a      	str	r2, [r3, #16]
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Banks       = FLASH_BANK_1;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Page        = blk;                                  // 2kb page
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages     = 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 80010e8:	f107 0214 	add.w	r2, r7, #20
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f005 ff12 	bl	8006f1c <HAL_FLASHEx_Erase>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <Flash_write_block+0x60>
	{
		HAL_FLASH_Lock();			// blad kasowania
 80010fe:	f005 fe49 	bl	8006d94 <HAL_FLASH_Lock>
		printf("Erase error at %u\r\n", (int)blk);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4619      	mov	r1, r3
 8001106:	4820      	ldr	r0, [pc, #128]	; (8001188 <Flash_write_block+0xd8>)
 8001108:	f00c f9d8 	bl	800d4bc <iprintf>
		return 0;
 800110c:	2300      	movs	r3, #0
 800110e:	e035      	b.n	800117c <Flash_write_block+0xcc>
	}
    blk *= FLASH_PAGE_SIZE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	02db      	lsls	r3, r3, #11
 8001114:	60fb      	str	r3, [r7, #12]
    blk += ADDR_FLASH_PAGE_0;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800111c:	60fb      	str	r3, [r7, #12]
	uint64_t data64;
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
 8001122:	e022      	b.n	800116a <Flash_write_block+0xba>
    {
        data64 = *(uint64_t*)buff;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        buff += 8;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3308      	adds	r3, #8
 8001132:	60bb      	str	r3, [r7, #8]
        //printf("WRITE FLASH ADDR 0x%X \r\n",blk);
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 8001134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001136:	00da      	lsls	r2, r3, #3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	18d1      	adds	r1, r2, r3
 800113c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001140:	2000      	movs	r0, #0
 8001142:	f005 fd99 	bl	8006c78 <HAL_FLASH_Program>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <Flash_write_block+0xb4>
        {
            HAL_FLASH_Lock();
 800114c:	f005 fe22 	bl	8006d94 <HAL_FLASH_Lock>
           // HAL_IWDG_Refresh(&hiwdg);
            printf("Programming error at %X\r\n",(unsigned int)(8*i + blk));
 8001150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001152:	00da      	lsls	r2, r3, #3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	; (800118c <Flash_write_block+0xdc>)
 800115c:	f00c f9ae 	bl	800d4bc <iprintf>
            return 1;                               // blad
 8001160:	2301      	movs	r3, #1
 8001162:	e00b      	b.n	800117c <Flash_write_block+0xcc>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 8001164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001166:	3301      	adds	r3, #1
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	3301      	adds	r3, #1
 8001170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001172:	429a      	cmp	r2, r3
 8001174:	d3d6      	bcc.n	8001124 <Flash_write_block+0x74>
        }
    }
	HAL_FLASH_Lock();
 8001176:	f005 fe0d 	bl	8006d94 <HAL_FLASH_Lock>
	//WDR();
	return 0;										// OK
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3738      	adds	r7, #56	; 0x38
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40022000 	.word	0x40022000
 8001188:	0800fe30 	.word	0x0800fe30
 800118c:	0800fe44 	.word	0x0800fe44

08001190 <Flash_read>:

void Flash_read(uint32_t adr, uint8_t *data, uint32_t size)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
    uint8_t *psrc = (uint8_t*)(ADDR_FLASH_PAGE_0 + adr);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80011a2:	617b      	str	r3, [r7, #20]
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	e00a      	b.n	80011c0 <Flash_read+0x30>
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	617a      	str	r2, [r7, #20]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	440a      	add	r2, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	7013      	strb	r3, [r2, #0]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	3301      	adds	r3, #1
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3f0      	bcc.n	80011aa <Flash_read+0x1a>
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <FLASH_write_block>:
////////////////////////////////////////////////////////////////////////////////////////////////////

#define USE_FLASH_PAGE      126

uint8_t FLASH_write_block(uint32_t adr, uint8_t *buff, uint32_t len)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
    uint8_t err;
    adr &= 1;                   // adr = 0 -> page 62, adr = 1 -> page 63
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
    adr += USE_FLASH_PAGE;      // adr = page number
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	337e      	adds	r3, #126	; 0x7e
 80011ee:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<4; ++i)
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	e00c      	b.n	8001210 <FLASH_write_block+0x3a>
    {
        err =  Flash_write_block(adr, buff, len);
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f7ff ff58 	bl	80010b0 <Flash_write_block>
 8001200:	4603      	mov	r3, r0
 8001202:	75fb      	strb	r3, [r7, #23]
        if(err == 0) break;
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d006      	beq.n	8001218 <FLASH_write_block+0x42>
    for(int i=0; i<4; ++i)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	3301      	adds	r3, #1
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	2b03      	cmp	r3, #3
 8001214:	ddef      	ble.n	80011f6 <FLASH_write_block+0x20>
 8001216:	e000      	b.n	800121a <FLASH_write_block+0x44>
        if(err == 0) break;
 8001218:	bf00      	nop
    }
    return err;
 800121a:	7dfb      	ldrb	r3, [r7, #23]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <FLASH_read_block>:

void FLASH_read_block(uint32_t adr, uint8_t *data, uint32_t size)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
    adr &= 1;                   // adr = 0 -> page 62, adr = 1 -> page 63
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
    adr *= FLASH_PAGE_SIZE;     // adr = page number
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	02db      	lsls	r3, r3, #11
 800123c:	60fb      	str	r3, [r7, #12]
    adr += (FLASH_PAGE_SIZE * USE_FLASH_PAGE);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f503 337c 	add.w	r3, r3, #258048	; 0x3f000
 8001244:	60fb      	str	r3, [r7, #12]
    //printf("READ FLASH ADDR 0x%X \r\n",adr);
    Flash_read(adr, data, size);
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7ff ffa0 	bl	8001190 <Flash_read>
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <EEPROM_Save_config>:

uint8_t EEPROM_Save_config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
    uint8_t err = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	71fb      	strb	r3, [r7, #7]
    uint16_t oldcrc = config.checksum;
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <EEPROM_Save_config+0x60>)
 8001264:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001268:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4313      	orrs	r3, r2
 8001270:	80bb      	strh	r3, [r7, #4]
    Calc_config_crc();
 8001272:	f7ff feef 	bl	8001054 <Calc_config_crc>
    if(config.checksum != oldcrc)
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <EEPROM_Save_config+0x60>)
 8001278:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800127a:	b29b      	uxth	r3, r3
 800127c:	88ba      	ldrh	r2, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	d015      	beq.n	80012ae <EEPROM_Save_config+0x56>
    {
        uint8_t *p = (uint8_t*)&config;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <EEPROM_Save_config+0x60>)
 8001284:	603b      	str	r3, [r7, #0]
        err  = FLASH_write_block(0, p, sizeof(config));     // zapisz do 1 kopii
 8001286:	223a      	movs	r2, #58	; 0x3a
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff ffa3 	bl	80011d6 <FLASH_write_block>
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
 8001294:	223a      	movs	r2, #58	; 0x3a
 8001296:	6839      	ldr	r1, [r7, #0]
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ff9c 	bl	80011d6 <FLASH_write_block>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	71fb      	strb	r3, [r7, #7]
        err++;
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	3301      	adds	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
    }
    return err;         // 0=NotNeed, 1=OK, 2=blad
 80012ae:	79fb      	ldrb	r3, [r7, #7]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000087c 	.word	0x2000087c

080012bc <EEPROM_Load_defaults>:

void EEPROM_Load_defaults(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	memset((uint8_t*)&config, 0, sizeof(config));
 80012c0:	223a      	movs	r2, #58	; 0x3a
 80012c2:	2100      	movs	r1, #0
 80012c4:	482b      	ldr	r0, [pc, #172]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 80012c6:	f00c fa3f 	bl	800d748 <memset>

	config.version = CONFIG_VERSION;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	2200      	movs	r2, #0
 80012d6:	705a      	strb	r2, [r3, #1]
	config.bat_scale = 0.0505f;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 80012da:	3302      	adds	r3, #2
 80012dc:	4a26      	ldr	r2, [pc, #152]	; (8001378 <EEPROM_Load_defaults+0xbc>)
 80012de:	601a      	str	r2, [r3, #0]
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	f062 021b 	orn	r2, r2, #27
 80012e8:	719a      	strb	r2, [r3, #6]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f042 020c 	orr.w	r2, r2, #12
 80012f0:	71da      	strb	r2, [r3, #7]
	config.TMP117_t_offset=0;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
	config.SHT3_t_offset=0;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
	config.SHT3_h_offset=0;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
	config.MS8607_t_offset=0;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	615a      	str	r2, [r3, #20]
	config.MS8607_h_offset=0;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
	config.MS8607_p_offset=0;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
	config.BME280_t_offset=0;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
	config.BME280_h_offset=0;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
	config.BME280_p_offset=0;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
	config.DPS368_t_offset=0;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
	config.DPS368_p_offset=0;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	631a      	str	r2, [r3, #48]	; 0x30

	config.TMP117_config=0;
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	config.SHT3_config=0;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	config.DPS368_config=0;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	config.MS8607_config=0;
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <EEPROM_Load_defaults+0xb8>)
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37


	Calc_config_crc();
 800136a:	f7ff fe73 	bl	8001054 <Calc_config_crc>

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000087c 	.word	0x2000087c
 8001378:	3d4ed917 	.word	0x3d4ed917

0800137c <EEPROM_Load_config>:

uint8_t EEPROM_Load_config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
    uint32_t eepok = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
    uint32_t len = sizeof(config);
 8001386:	233a      	movs	r3, #58	; 0x3a
 8001388:	603b      	str	r3, [r7, #0]
    uint8_t *p = (uint8_t*)&config;
 800138a:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <EEPROM_Load_config+0x158>)
 800138c:	613b      	str	r3, [r7, #16]
    FLASH_read_block(0, p, len);                                // odczyt pierwszej kopii
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	2000      	movs	r0, #0
 8001394:	f7ff ff46 	bl	8001224 <FLASH_read_block>
    //printf("load config crc: size of config: %i",sizeof(config));
    uint16_t chk = 0xFFFF;
 8001398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139c:	81fb      	strh	r3, [r7, #14]
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	e00d      	b.n	80013c0 <EEPROM_Load_config+0x44>
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	613a      	str	r2, [r7, #16]
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe1d 	bl	8000ff0 <Crc16_up>
 80013b6:	4603      	mov	r3, r0
 80013b8:	81fb      	strh	r3, [r7, #14]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3301      	adds	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	1e9a      	subs	r2, r3, #2
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d8ec      	bhi.n	80013a4 <EEPROM_Load_config+0x28>
    //printf("read crc1: 0x%X \r\n",chk);
    if(chk == config.checksum) eepok |= 1;                      // zaznacz ze jest ok
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <EEPROM_Load_config+0x158>)
 80013cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	89fa      	ldrh	r2, [r7, #14]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d103      	bne.n	80013de <EEPROM_Load_config+0x62>
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	617b      	str	r3, [r7, #20]

    p = (uint8_t*)&config;
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <EEPROM_Load_config+0x158>)
 80013e0:	613b      	str	r3, [r7, #16]
    FLASH_read_block(1, p, len);                                // odczyt drugiej kopii
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	6939      	ldr	r1, [r7, #16]
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff ff1c 	bl	8001224 <FLASH_read_block>
    chk = 0xFFFF;
 80013ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f0:	81fb      	strh	r3, [r7, #14]
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	e00d      	b.n	8001414 <EEPROM_Load_config+0x98>
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	613a      	str	r2, [r7, #16]
 80013fe:	781a      	ldrb	r2, [r3, #0]
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fdf3 	bl	8000ff0 <Crc16_up>
 800140a:	4603      	mov	r3, r0
 800140c:	81fb      	strh	r3, [r7, #14]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3301      	adds	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	1e9a      	subs	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d8ec      	bhi.n	80013f8 <EEPROM_Load_config+0x7c>
    //printf("read crc2: 0x%X \r\n",chk);
    //printf("curr crc: 0x%X \r\n",config.checksum);
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <EEPROM_Load_config+0x158>)
 8001420:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001422:	b29b      	uxth	r3, r3
 8001424:	89fa      	ldrh	r2, [r7, #14]
 8001426:	429a      	cmp	r2, r3
 8001428:	d103      	bne.n	8001432 <EEPROM_Load_config+0xb6>
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	617b      	str	r3, [r7, #20]
    //printf("config chk: %X   eepok:%i \r\n", config.checksum, eepok);
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <EEPROM_Load_config+0x158>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d001      	beq.n	8001440 <EEPROM_Load_config+0xc4>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

    p = (uint8_t*)&config;
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <EEPROM_Load_config+0x158>)
 8001442:	613b      	str	r3, [r7, #16]
    switch(eepok)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d02d      	beq.n	80014a6 <EEPROM_Load_config+0x12a>
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d83c      	bhi.n	80014ca <EEPROM_Load_config+0x14e>
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <EEPROM_Load_config+0xe2>
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d010      	beq.n	800147e <EEPROM_Load_config+0x102>
 800145c:	e035      	b.n	80014ca <EEPROM_Load_config+0x14e>
    {
        case 0:                                                 // obie kopie zwalone
            EEPROM_Load_defaults();
 800145e:	f7ff ff2d 	bl	80012bc <EEPROM_Load_defaults>
            printf("config error, restoring to defaults \r\n");
 8001462:	481d      	ldr	r0, [pc, #116]	; (80014d8 <EEPROM_Load_config+0x15c>)
 8001464:	f00c f890 	bl	800d588 <puts>
            eepok = EEPROM_Save_config();
 8001468:	f7ff fef6 	bl	8001258 <EEPROM_Save_config>
 800146c:	4603      	mov	r3, r0
 800146e:	617b      	str	r3, [r7, #20]

            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d901      	bls.n	800147a <EEPROM_Load_config+0xfe>
 8001476:	2303      	movs	r3, #3
 8001478:	e028      	b.n	80014cc <EEPROM_Load_config+0x150>
 800147a:	2302      	movs	r3, #2
 800147c:	e026      	b.n	80014cc <EEPROM_Load_config+0x150>
            break;
        case 1:                                                 // 1 ok, 2 zwalona
            FLASH_read_block(0, p, len);
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	6939      	ldr	r1, [r7, #16]
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fece 	bl	8001224 <FLASH_read_block>
            printf("config bank 2 error,copying bank 1 to bank 2 \r\n");
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <EEPROM_Load_config+0x160>)
 800148a:	f00c f87d 	bl	800d588 <puts>
            eepok = FLASH_write_block(1, p, len);               // przepisz do 2 kopii
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	6939      	ldr	r1, [r7, #16]
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fe9f 	bl	80011d6 <FLASH_write_block>
 8001498:	4603      	mov	r3, r0
 800149a:	617b      	str	r3, [r7, #20]
            if(eepok) return 3;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d010      	beq.n	80014c4 <EEPROM_Load_config+0x148>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e012      	b.n	80014cc <EEPROM_Load_config+0x150>
            break;
        case 2:                                                 // 2 ok, 1 zwalona
            eepok = FLASH_write_block(0, p, len);               // przepisz do 1 kopii
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	6939      	ldr	r1, [r7, #16]
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fe93 	bl	80011d6 <FLASH_write_block>
 80014b0:	4603      	mov	r3, r0
 80014b2:	617b      	str	r3, [r7, #20]
            printf("config bank 1 error,copying bank 2 to bank 1 \r\n");
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <EEPROM_Load_config+0x164>)
 80014b6:	f00c f867 	bl	800d588 <puts>
            if(eepok) return 3;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <EEPROM_Load_config+0x14c>
 80014c0:	2303      	movs	r3, #3
 80014c2:	e003      	b.n	80014cc <EEPROM_Load_config+0x150>
            break;
 80014c4:	bf00      	nop
 80014c6:	e000      	b.n	80014ca <EEPROM_Load_config+0x14e>
            break;
 80014c8:	bf00      	nop
    }
    return 0;                                                   // config OK
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000087c 	.word	0x2000087c
 80014d8:	0800fe60 	.word	0x0800fe60
 80014dc:	0800fe88 	.word	0x0800fe88
 80014e0:	0800feb8 	.word	0x0800feb8

080014e4 <EEPROM_Print_config>:


void EEPROM_Print_config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	printf("================================= \r\n");
 80014e8:	4858      	ldr	r0, [pc, #352]	; (800164c <EEPROM_Print_config+0x168>)
 80014ea:	f00c f84d 	bl	800d588 <puts>
	printf("Config version: %i \r\n", config.version);
 80014ee:	4b58      	ldr	r3, [pc, #352]	; (8001650 <EEPROM_Print_config+0x16c>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4619      	mov	r1, r3
 80014f6:	4857      	ldr	r0, [pc, #348]	; (8001654 <EEPROM_Print_config+0x170>)
 80014f8:	f00b ffe0 	bl	800d4bc <iprintf>
	printf("Battery scale: %f \r\n", config.bat_scale);
 80014fc:	4b54      	ldr	r3, [pc, #336]	; (8001650 <EEPROM_Print_config+0x16c>)
 80014fe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f820 	bl	8000548 <__aeabi_f2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4852      	ldr	r0, [pc, #328]	; (8001658 <EEPROM_Print_config+0x174>)
 800150e:	f00b ffd5 	bl	800d4bc <iprintf>
	printf("Low Batt alarm: %i \r\n", config.batt_alarm);
 8001512:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <EEPROM_Print_config+0x16c>)
 8001514:	88db      	ldrh	r3, [r3, #6]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4619      	mov	r1, r3
 800151a:	4850      	ldr	r0, [pc, #320]	; (800165c <EEPROM_Print_config+0x178>)
 800151c:	f00b ffce 	bl	800d4bc <iprintf>
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);
 8001520:	4b4b      	ldr	r3, [pc, #300]	; (8001650 <EEPROM_Print_config+0x16c>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f80f 	bl	8000548 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	484c      	ldr	r0, [pc, #304]	; (8001660 <EEPROM_Print_config+0x17c>)
 8001530:	f00b ffc4 	bl	800d4bc <iprintf>
	printf("SHT3 temp offset: %f \r\n", config.SHT3_t_offset);
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <EEPROM_Print_config+0x16c>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4848      	ldr	r0, [pc, #288]	; (8001664 <EEPROM_Print_config+0x180>)
 8001544:	f00b ffba 	bl	800d4bc <iprintf>
	printf("SHT3 hum offset: %f \r\n", config.SHT3_h_offset);
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <EEPROM_Print_config+0x16c>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4844      	ldr	r0, [pc, #272]	; (8001668 <EEPROM_Print_config+0x184>)
 8001558:	f00b ffb0 	bl	800d4bc <iprintf>
	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <EEPROM_Print_config+0x16c>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4840      	ldr	r0, [pc, #256]	; (800166c <EEPROM_Print_config+0x188>)
 800156c:	f00b ffa6 	bl	800d4bc <iprintf>
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <EEPROM_Print_config+0x16c>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffe7 	bl	8000548 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	483c      	ldr	r0, [pc, #240]	; (8001670 <EEPROM_Print_config+0x18c>)
 8001580:	f00b ff9c 	bl	800d4bc <iprintf>
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <EEPROM_Print_config+0x16c>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4838      	ldr	r0, [pc, #224]	; (8001674 <EEPROM_Print_config+0x190>)
 8001594:	f00b ff92 	bl	800d4bc <iprintf>
	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <EEPROM_Print_config+0x16c>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffd3 	bl	8000548 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4834      	ldr	r0, [pc, #208]	; (8001678 <EEPROM_Print_config+0x194>)
 80015a8:	f00b ff88 	bl	800d4bc <iprintf>
	printf("BME280 hum offset: %f \r\n", config.BME280_h_offset);
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <EEPROM_Print_config+0x16c>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffc9 	bl	8000548 <__aeabi_f2d>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4830      	ldr	r0, [pc, #192]	; (800167c <EEPROM_Print_config+0x198>)
 80015bc:	f00b ff7e 	bl	800d4bc <iprintf>
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <EEPROM_Print_config+0x16c>)
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_f2d>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	482c      	ldr	r0, [pc, #176]	; (8001680 <EEPROM_Print_config+0x19c>)
 80015d0:	f00b ff74 	bl	800d4bc <iprintf>
	printf("DPS368 temp offset: %f \r\n", config.DPS368_t_offset);
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <EEPROM_Print_config+0x16c>)
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffb5 	bl	8000548 <__aeabi_f2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4828      	ldr	r0, [pc, #160]	; (8001684 <EEPROM_Print_config+0x1a0>)
 80015e4:	f00b ff6a 	bl	800d4bc <iprintf>
	printf("DPS368 press ofset: %f \r\n \r\n", config.DPS368_p_offset);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <EEPROM_Print_config+0x16c>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffab 	bl	8000548 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4824      	ldr	r0, [pc, #144]	; (8001688 <EEPROM_Print_config+0x1a4>)
 80015f8:	f00b ff60 	bl	800d4bc <iprintf>

	printf("TMP117 config data: %i \r\n", 	config.TMP117_config);
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <EEPROM_Print_config+0x16c>)
 80015fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001602:	4619      	mov	r1, r3
 8001604:	4821      	ldr	r0, [pc, #132]	; (800168c <EEPROM_Print_config+0x1a8>)
 8001606:	f00b ff59 	bl	800d4bc <iprintf>
	printf("SHT3 config data: %i \r\n", config.SHT3_config);
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <EEPROM_Print_config+0x16c>)
 800160c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001610:	4619      	mov	r1, r3
 8001612:	481f      	ldr	r0, [pc, #124]	; (8001690 <EEPROM_Print_config+0x1ac>)
 8001614:	f00b ff52 	bl	800d4bc <iprintf>
	printf("DPS368 config data: %i \r\n", config.DPS368_config);
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <EEPROM_Print_config+0x16c>)
 800161a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800161e:	4619      	mov	r1, r3
 8001620:	481c      	ldr	r0, [pc, #112]	; (8001694 <EEPROM_Print_config+0x1b0>)
 8001622:	f00b ff4b 	bl	800d4bc <iprintf>
	printf("MS8607 config data: %i \r\n", config.MS8607_config);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <EEPROM_Print_config+0x16c>)
 8001628:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800162c:	4619      	mov	r1, r3
 800162e:	481a      	ldr	r0, [pc, #104]	; (8001698 <EEPROM_Print_config+0x1b4>)
 8001630:	f00b ff44 	bl	800d4bc <iprintf>
	printf("CHECKSUM: 0x%4X \r\n", config.checksum);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <EEPROM_Print_config+0x16c>)
 8001636:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001638:	b29b      	uxth	r3, r3
 800163a:	4619      	mov	r1, r3
 800163c:	4817      	ldr	r0, [pc, #92]	; (800169c <EEPROM_Print_config+0x1b8>)
 800163e:	f00b ff3d 	bl	800d4bc <iprintf>
	printf("================================= \r\n");
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <EEPROM_Print_config+0x168>)
 8001644:	f00b ffa0 	bl	800d588 <puts>




}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	0800fee8 	.word	0x0800fee8
 8001650:	2000087c 	.word	0x2000087c
 8001654:	0800ff0c 	.word	0x0800ff0c
 8001658:	0800ff24 	.word	0x0800ff24
 800165c:	0800ff3c 	.word	0x0800ff3c
 8001660:	0800ff54 	.word	0x0800ff54
 8001664:	0800ff70 	.word	0x0800ff70
 8001668:	0800ff88 	.word	0x0800ff88
 800166c:	0800ffa0 	.word	0x0800ffa0
 8001670:	0800ffbc 	.word	0x0800ffbc
 8001674:	0800ffd8 	.word	0x0800ffd8
 8001678:	0800fff4 	.word	0x0800fff4
 800167c:	08010010 	.word	0x08010010
 8001680:	0801002c 	.word	0x0801002c
 8001684:	08010048 	.word	0x08010048
 8001688:	08010064 	.word	0x08010064
 800168c:	08010084 	.word	0x08010084
 8001690:	080100a0 	.word	0x080100a0
 8001694:	080100b8 	.word	0x080100b8
 8001698:	080100d4 	.word	0x080100d4
 800169c:	080100f0 	.word	0x080100f0

080016a0 <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 80016a4:	217f      	movs	r1, #127	; 0x7f
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <ADC_DMA_Start+0x20>)
 80016a8:	f004 fcfa 	bl	80060a0 <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f003 fb75 	bl	8004d9c <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 80016b2:	2205      	movs	r2, #5
 80016b4:	4903      	ldr	r1, [pc, #12]	; (80016c4 <ADC_DMA_Start+0x24>)
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <ADC_DMA_Start+0x20>)
 80016b8:	f003 feca 	bl	8005450 <HAL_ADC_Start_DMA>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000494 	.word	0x20000494
 80016c4:	20000214 	.word	0x20000214

080016c8 <GET_MCU_Temp>:

float GET_MCU_Temp()
{
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
	    uint16_t tmp=0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	81fb      	strh	r3, [r7, #14]
	    float temperature;
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <GET_MCU_Temp+0xd8>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	817b      	strh	r3, [r7, #10]
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <GET_MCU_Temp+0xdc>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	813b      	strh	r3, [r7, #8]

	  	for(uint8_t i=0; i<5;i+=1)
 80016de:	2300      	movs	r3, #0
 80016e0:	737b      	strb	r3, [r7, #13]
 80016e2:	e00a      	b.n	80016fa <GET_MCU_Temp+0x32>
	  	{
	  		tmp+=adc_data[i];
 80016e4:	7b7b      	ldrb	r3, [r7, #13]
 80016e6:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <GET_MCU_Temp+0xe0>)
 80016e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	4413      	add	r3, r2
 80016f2:	81fb      	strh	r3, [r7, #14]
	  	for(uint8_t i=0; i<5;i+=1)
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	3301      	adds	r3, #1
 80016f8:	737b      	strb	r3, [r7, #13]
 80016fa:	7b7b      	ldrb	r3, [r7, #13]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d9f1      	bls.n	80016e4 <GET_MCU_Temp+0x1c>
	  	}
	  	tmp*=0.2f;
 8001700:	89fb      	ldrh	r3, [r7, #14]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80017ac <GET_MCU_Temp+0xe4>
 800170e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001716:	ee17 3a90 	vmov	r3, s15
 800171a:	81fb      	strh	r3, [r7, #14]

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 800171c:	897b      	ldrh	r3, [r7, #10]
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001734:	ee17 0a90 	vmov	r0, s15
 8001738:	f7fe ff06 	bl	8000548 <__aeabi_f2d>
 800173c:	a316      	add	r3, pc, #88	; (adr r3, 8001798 <GET_MCU_Temp+0xd0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff59 	bl	80005f8 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	893b      	ldrh	r3, [r7, #8]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fee7 	bl	8000524 <__aeabi_i2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7ff f875 	bl	800084c <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <GET_MCU_Temp+0xe8>)
 8001770:	f7fe fd8c 	bl	800028c <__adddf3>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa34 	bl	8000be8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	607b      	str	r3, [r7, #4]
	  	return temperature;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	ee07 3a90 	vmov	s15, r3
}
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bdb0      	pop	{r4, r5, r7, pc}
 8001794:	f3af 8000 	nop.w
 8001798:	33333333 	.word	0x33333333
 800179c:	40113333 	.word	0x40113333
 80017a0:	1fff75a8 	.word	0x1fff75a8
 80017a4:	1fff75ca 	.word	0x1fff75ca
 80017a8:	20000214 	.word	0x20000214
 80017ac:	3e4ccccd 	.word	0x3e4ccccd
 80017b0:	40390000 	.word	0x40390000

080017b4 <read_register16>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	460b      	mov	r3, r1
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80017ce:	7afb      	ldrb	r3, [r7, #11]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	8af9      	ldrh	r1, [r7, #22]
 80017d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	2302      	movs	r3, #2
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2301      	movs	r3, #1
 80017e6:	f006 fa11 	bl	8007c0c <HAL_I2C_Mem_Read>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10b      	bne.n	8001808 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80017f0:	7d7b      	ldrb	r3, [r7, #21]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	7d3b      	ldrb	r3, [r7, #20]
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	801a      	strh	r2, [r3, #0]
		return true;
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <read_register16+0x56>
	} else
		return false;
 8001808:	2300      	movs	r3, #0

}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001812:	b590      	push	{r4, r7, lr}
 8001814:	b08b      	sub	sp, #44	; 0x2c
 8001816:	af04      	add	r7, sp, #16
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	461a      	mov	r2, r3
 800181e:	460b      	mov	r3, r1
 8001820:	72fb      	strb	r3, [r7, #11]
 8001822:	4613      	mov	r3, r2
 8001824:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001832:	7afb      	ldrb	r3, [r7, #11]
 8001834:	b29a      	uxth	r2, r3
 8001836:	7abb      	ldrb	r3, [r7, #10]
 8001838:	b29b      	uxth	r3, r3
 800183a:	8af9      	ldrh	r1, [r7, #22]
 800183c:	f241 3488 	movw	r4, #5000	; 0x1388
 8001840:	9402      	str	r4, [sp, #8]
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2301      	movs	r3, #1
 800184a:	f006 f9df 	bl	8007c0c <HAL_I2C_Mem_Read>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <read_data+0x46>
		return 0;
 8001854:	2300      	movs	r3, #0
 8001856:	e000      	b.n	800185a <read_data+0x48>
	else
		return 1;
 8001858:	2301      	movs	r3, #1

}
 800185a:	4618      	mov	r0, r3
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd90      	pop	{r4, r7, pc}

08001862 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	461a      	mov	r2, r3
 800186e:	2188      	movs	r1, #136	; 0x88
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff9f 	bl	80017b4 <read_register16>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d06f      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3302      	adds	r3, #2
 8001880:	461a      	mov	r2, r3
 8001882:	218a      	movs	r1, #138	; 0x8a
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff95 	bl	80017b4 <read_register16>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d065      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	461a      	mov	r2, r3
 8001896:	218c      	movs	r1, #140	; 0x8c
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff8b 	bl	80017b4 <read_register16>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05b      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3306      	adds	r3, #6
 80018a8:	461a      	mov	r2, r3
 80018aa:	218e      	movs	r1, #142	; 0x8e
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff81 	bl	80017b4 <read_register16>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d051      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3308      	adds	r3, #8
 80018bc:	461a      	mov	r2, r3
 80018be:	2190      	movs	r1, #144	; 0x90
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff77 	bl	80017b4 <read_register16>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d047      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	330a      	adds	r3, #10
 80018d0:	461a      	mov	r2, r3
 80018d2:	2192      	movs	r1, #146	; 0x92
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ff6d 	bl	80017b4 <read_register16>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d03d      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	330c      	adds	r3, #12
 80018e4:	461a      	mov	r2, r3
 80018e6:	2194      	movs	r1, #148	; 0x94
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff63 	bl	80017b4 <read_register16>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d033      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	330e      	adds	r3, #14
 80018f8:	461a      	mov	r2, r3
 80018fa:	2196      	movs	r1, #150	; 0x96
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff59 	bl	80017b4 <read_register16>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d029      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3310      	adds	r3, #16
 800190c:	461a      	mov	r2, r3
 800190e:	2198      	movs	r1, #152	; 0x98
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff4f 	bl	80017b4 <read_register16>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01f      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3312      	adds	r3, #18
 8001920:	461a      	mov	r2, r3
 8001922:	219a      	movs	r1, #154	; 0x9a
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff45 	bl	80017b4 <read_register16>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d015      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3314      	adds	r3, #20
 8001934:	461a      	mov	r2, r3
 8001936:	219c      	movs	r1, #156	; 0x9c
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff3b 	bl	80017b4 <read_register16>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00b      	beq.n	800195c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001948:	461a      	mov	r2, r3
 800194a:	219e      	movs	r1, #158	; 0x9e
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff31 	bl	80017b4 <read_register16>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <read_calibration_data+0xfa>

		return true;
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <read_calibration_data+0xfc>
	}

	return false;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001966:	b580      	push	{r7, lr}
 8001968:	b084      	sub	sp, #16
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f103 0218 	add.w	r2, r3, #24
 8001974:	2301      	movs	r3, #1
 8001976:	21a1      	movs	r1, #161	; 0xa1
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff4a 	bl	8001812 <read_data>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d14b      	bne.n	8001a1c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	331a      	adds	r3, #26
 8001988:	461a      	mov	r2, r3
 800198a:	21e1      	movs	r1, #225	; 0xe1
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff11 	bl	80017b4 <read_register16>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d041      	beq.n	8001a1c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f103 021c 	add.w	r2, r3, #28
 800199e:	2301      	movs	r3, #1
 80019a0:	21e3      	movs	r1, #227	; 0xe3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff35 	bl	8001812 <read_data>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d136      	bne.n	8001a1c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80019ae:	f107 030e 	add.w	r3, r7, #14
 80019b2:	461a      	mov	r2, r3
 80019b4:	21e4      	movs	r1, #228	; 0xe4
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fefc 	bl	80017b4 <read_register16>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d02c      	beq.n	8001a1c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	461a      	mov	r2, r3
 80019c8:	21e5      	movs	r1, #229	; 0xe5
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fef2 	bl	80017b4 <read_register16>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d022      	beq.n	8001a1c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80019dc:	2301      	movs	r3, #1
 80019de:	21e7      	movs	r1, #231	; 0xe7
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff16 	bl	8001812 <read_data>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d117      	bne.n	8001a1c <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	b21b      	sxth	r3, r3
 80019f2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	121b      	asrs	r3, r3, #8
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001a0c:	89bb      	ldrh	r3, [r7, #12]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	841a      	strh	r2, [r3, #32]

		return true;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <read_hum_calibration_data+0xb8>
	}

	return false;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b088      	sub	sp, #32
 8001a2a:	af04      	add	r7, sp, #16
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	70fb      	strb	r3, [r7, #3]
 8001a32:	4613      	mov	r3, r2
 8001a34:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	89f9      	ldrh	r1, [r7, #14]
 8001a48:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	1cbb      	adds	r3, r7, #2
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	f005 ffc4 	bl	80079e4 <HAL_I2C_Mem_Write>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <write_register8+0x40>
		return false;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <write_register8+0x42>
	else
		return true;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a7e:	2b76      	cmp	r3, #118	; 0x76
 8001a80:	d005      	beq.n	8001a8e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a86:	2b77      	cmp	r3, #119	; 0x77
 8001a88:	d001      	beq.n	8001a8e <bmp280_init+0x1e>

		return false;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e099      	b.n	8001bc2 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a94:	2301      	movs	r3, #1
 8001a96:	21d0      	movs	r1, #208	; 0xd0
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff feba 	bl	8001812 <read_data>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <bmp280_init+0x38>
		return false;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e08c      	b.n	8001bc2 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001aae:	2b58      	cmp	r3, #88	; 0x58
 8001ab0:	d006      	beq.n	8001ac0 <bmp280_init+0x50>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ab8:	2b60      	cmp	r3, #96	; 0x60
 8001aba:	d001      	beq.n	8001ac0 <bmp280_init+0x50>

		return false;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e080      	b.n	8001bc2 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001ac0:	22b6      	movs	r2, #182	; 0xb6
 8001ac2:	21e0      	movs	r1, #224	; 0xe0
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffae 	bl	8001a26 <write_register8>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <bmp280_init+0x64>
		return false;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e076      	b.n	8001bc2 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001ad4:	f107 020c 	add.w	r2, r7, #12
 8001ad8:	2301      	movs	r3, #1
 8001ada:	21f3      	movs	r1, #243	; 0xf3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fe98 	bl	8001812 <read_data>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f5      	bne.n	8001ad4 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001ae8:	7b3b      	ldrb	r3, [r7, #12]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff feb5 	bl	8001862 <read_calibration_data>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <bmp280_init+0x96>
 8001b04:	e001      	b.n	8001b0a <bmp280_init+0x9a>
		return false;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e05b      	b.n	8001bc2 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b10:	2b60      	cmp	r3, #96	; 0x60
 8001b12:	d10a      	bne.n	8001b2a <bmp280_init+0xba>
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ff26 	bl	8001966 <read_hum_calibration_data>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <bmp280_init+0xba>
		return false;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e04b      	b.n	8001bc2 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	015b      	lsls	r3, r3, #5
 8001b30:	b25a      	sxtb	r2, r3
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	785b      	ldrb	r3, [r3, #1]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	461a      	mov	r2, r3
 8001b44:	21f5      	movs	r1, #245	; 0xf5
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff6d 	bl	8001a26 <write_register8>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <bmp280_init+0xe6>
		return false;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e035      	b.n	8001bc2 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d102      	bne.n	8001b64 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	78db      	ldrb	r3, [r3, #3]
 8001b68:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001b6a:	b25a      	sxtb	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	789b      	ldrb	r3, [r3, #2]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	b25b      	sxtb	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b25a      	sxtb	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001b82:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b8a:	2b60      	cmp	r3, #96	; 0x60
 8001b8c:	d10d      	bne.n	8001baa <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001b94:	7b7b      	ldrb	r3, [r7, #13]
 8001b96:	461a      	mov	r2, r3
 8001b98:	21f2      	movs	r1, #242	; 0xf2
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ff43 	bl	8001a26 <write_register8>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <bmp280_init+0x13a>
			return false;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e00b      	b.n	8001bc2 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001baa:	7bbb      	ldrb	r3, [r7, #14]
 8001bac:	461a      	mov	r2, r3
 8001bae:	21f4      	movs	r1, #244	; 0xf4
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff38 	bl	8001a26 <write_register8>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <bmp280_init+0x150>
		return false;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e000      	b.n	8001bc2 <bmp280_init+0x152>
	}

	return true;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <BQ25798_check>:
#define BQ25798_ADDR 0x6B << 1


// Checking
uint8_t BQ25798_check()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 8001bd2:	481a      	ldr	r0, [pc, #104]	; (8001c3c <BQ25798_check+0x70>)
 8001bd4:	f00b fc72 	bl	800d4bc <iprintf>
	for (int i = 0; i < 10; i++) {
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	e01f      	b.n	8001c1e <BQ25798_check+0x52>
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8001bde:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001be2:	2203      	movs	r2, #3
 8001be4:	21d6      	movs	r1, #214	; 0xd6
 8001be6:	4816      	ldr	r0, [pc, #88]	; (8001c40 <BQ25798_check+0x74>)
 8001be8:	f006 f92a 	bl	8007e40 <HAL_I2C_IsDeviceReady>
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(100);
 8001bf0:	2064      	movs	r0, #100	; 0x64
 8001bf2:	f003 f8d3 	bl	8004d9c <HAL_Delay>
	    if (status == HAL_OK) {
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <BQ25798_check+0x40>
	    	printf("OK !\r\n");
 8001bfc:	4811      	ldr	r0, [pc, #68]	; (8001c44 <BQ25798_check+0x78>)
 8001bfe:	f00b fcc3 	bl	800d588 <puts>
	    	BQ25798_set_ADC();
 8001c02:	f000 f823 	bl	8001c4c <BQ25798_set_ADC>
	    	res = OK;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
	        break;
 8001c0a:	e00b      	b.n	8001c24 <BQ25798_check+0x58>
	    } else {
	    	res = FAULT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]
	    	HAL_Delay(500);
 8001c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c14:	f003 f8c2 	bl	8004d9c <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	dddc      	ble.n	8001bde <BQ25798_check+0x12>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <BQ25798_check+0x64>
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <BQ25798_check+0x7c>)
 8001c2c:	f00b fcac 	bl	800d588 <puts>
	return res;
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	08010104 	.word	0x08010104
 8001c40:	20000564 	.word	0x20000564
 8001c44:	0801011c 	.word	0x0801011c
 8001c48:	08010124 	.word	0x08010124

08001c4c <BQ25798_set_ADC>:

void BQ25798_set_ADC()
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
	uint8_t reg;
	reg = 0b10000000;
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	71fb      	strb	r3, [r7, #7]
	i2c_write8(&hi2c1, REG2E_ADC_Control, reg, BQ25798_ADDR);
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	23d6      	movs	r3, #214	; 0xd6
 8001c5a:	212e      	movs	r1, #46	; 0x2e
 8001c5c:	4804      	ldr	r0, [pc, #16]	; (8001c70 <BQ25798_set_ADC+0x24>)
 8001c5e:	f002 fc65 	bl	800452c <i2c_write8>
	HAL_Delay(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f003 f89a 	bl	8004d9c <HAL_Delay>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000564 	.word	0x20000564

08001c74 <BQ25798_Vbat_read>:

uint16_t BQ25798_Vbat_read()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG3B_VBAT_ADC, &value, BQ25798_ADDR);
 8001c7a:	1dba      	adds	r2, r7, #6
 8001c7c:	23d6      	movs	r3, #214	; 0xd6
 8001c7e:	213b      	movs	r1, #59	; 0x3b
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <BQ25798_Vbat_read+0x24>)
 8001c82:	f002 fc31 	bl	80044e8 <i2c_read16>
    return byteswap16(value);
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fd27 	bl	80046dc <byteswap16>
 8001c8e:	4603      	mov	r3, r0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000564 	.word	0x20000564

08001c9c <BQ25798_Vsys_read>:

uint16_t BQ25798_Vsys_read()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG3D_VSYS_ADC, &value, BQ25798_ADDR);
 8001ca2:	1dba      	adds	r2, r7, #6
 8001ca4:	23d6      	movs	r3, #214	; 0xd6
 8001ca6:	213d      	movs	r1, #61	; 0x3d
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <BQ25798_Vsys_read+0x24>)
 8001caa:	f002 fc1d 	bl	80044e8 <i2c_read16>
    return byteswap16(value);
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fd13 	bl	80046dc <byteswap16>
 8001cb6:	4603      	mov	r3, r0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000564 	.word	0x20000564

08001cc4 <BQ25798_Vac1_read>:
    i2c_read16(&hi2c1, REG35_VBUS_ADC, &value, BQ25798_ADDR);
    return byteswap16(value);
}

uint16_t BQ25798_Vac1_read()
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG37_VAC1_ADC, &value, BQ25798_ADDR);
 8001cca:	1dba      	adds	r2, r7, #6
 8001ccc:	23d6      	movs	r3, #214	; 0xd6
 8001cce:	2137      	movs	r1, #55	; 0x37
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <BQ25798_Vac1_read+0x24>)
 8001cd2:	f002 fc09 	bl	80044e8 <i2c_read16>
    return byteswap16(value);
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 fcff 	bl	80046dc <byteswap16>
 8001cde:	4603      	mov	r3, r0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000564 	.word	0x20000564

08001cec <BQ25798_Vac2_read>:

uint16_t BQ25798_Vac2_read()
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG39_VAC2_ADC, &value, BQ25798_ADDR);
 8001cf2:	1dba      	adds	r2, r7, #6
 8001cf4:	23d6      	movs	r3, #214	; 0xd6
 8001cf6:	2139      	movs	r1, #57	; 0x39
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <BQ25798_Vac2_read+0x24>)
 8001cfa:	f002 fbf5 	bl	80044e8 <i2c_read16>
    return byteswap16(value);
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fceb 	bl	80046dc <byteswap16>
 8001d06:	4603      	mov	r3, r0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000564 	.word	0x20000564

08001d14 <BQ25798_Ibus_read>:

uint16_t BQ25798_Ibus_read()
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG31_IBUS_ADC, &value, BQ25798_ADDR);
 8001d1a:	1dba      	adds	r2, r7, #6
 8001d1c:	23d6      	movs	r3, #214	; 0xd6
 8001d1e:	2131      	movs	r1, #49	; 0x31
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <BQ25798_Ibus_read+0x24>)
 8001d22:	f002 fbe1 	bl	80044e8 <i2c_read16>
    return byteswap16(value);
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f002 fcd7 	bl	80046dc <byteswap16>
 8001d2e:	4603      	mov	r3, r0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000564 	.word	0x20000564

08001d3c <BQ25798_Ibat_read>:

uint16_t BQ25798_Ibat_read()
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG33_IBAT_ADC, &value, BQ25798_ADDR);
 8001d42:	1dba      	adds	r2, r7, #6
 8001d44:	23d6      	movs	r3, #214	; 0xd6
 8001d46:	2133      	movs	r1, #51	; 0x33
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <BQ25798_Ibat_read+0x24>)
 8001d4a:	f002 fbcd 	bl	80044e8 <i2c_read16>
    return byteswap16(value);
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 fcc3 	bl	80046dc <byteswap16>
 8001d56:	4603      	mov	r3, r0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000564 	.word	0x20000564

08001d64 <BQ25798_Sys_Min_Voltage_read>:

uint16_t BQ25798_Sys_Min_Voltage_read()
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af04      	add	r7, sp, #16
	uint8_t value;
	uint8_t mask = 0x3F;
 8001d6a:	233f      	movs	r3, #63	; 0x3f
 8001d6c:	71fb      	strb	r3, [r7, #7]
	uint16_t voltage;
    HAL_I2C_Mem_Read(&hi2c1, BQ25798_ADDR, REG00_Minimal_System_Voltage, I2C_MEMADD_SIZE_8BIT, &value, 1, 500);
 8001d6e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	2301      	movs	r3, #1
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	1cfb      	adds	r3, r7, #3
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	2200      	movs	r2, #0
 8001d80:	21d6      	movs	r1, #214	; 0xd6
 8001d82:	480c      	ldr	r0, [pc, #48]	; (8001db4 <BQ25798_Sys_Min_Voltage_read+0x50>)
 8001d84:	f005 ff42 	bl	8007c0c <HAL_I2C_Mem_Read>
    voltage= value & mask;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	80bb      	strh	r3, [r7, #4]
    voltage *= 250;
 8001d92:	88bb      	ldrh	r3, [r7, #4]
 8001d94:	461a      	mov	r2, r3
 8001d96:	0152      	lsls	r2, r2, #5
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	80bb      	strh	r3, [r7, #4]
    voltage += 2500;
 8001da2:	88bb      	ldrh	r3, [r7, #4]
 8001da4:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8001da8:	80bb      	strh	r3, [r7, #4]
    return voltage;
 8001daa:	88bb      	ldrh	r3, [r7, #4]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000564 	.word	0x20000564

08001db8 <BQ25798_Chr_Volt_Limit_read>:

uint16_t BQ25798_Chr_Volt_Limit_read()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
	uint16_t value;
	i2c_read16(&hi2c1, REG01_Charge_Voltage_Limit, &value, BQ25798_ADDR);
 8001dbe:	1d3a      	adds	r2, r7, #4
 8001dc0:	23d6      	movs	r3, #214	; 0xd6
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4809      	ldr	r0, [pc, #36]	; (8001dec <BQ25798_Chr_Volt_Limit_read+0x34>)
 8001dc6:	f002 fb8f 	bl	80044e8 <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f002 fc85 	bl	80046dc <byteswap16>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
    return swapvalue * 10;
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	b29b      	uxth	r3, r3
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000564 	.word	0x20000564

08001df0 <BQ25798_Chr_Curr_Limit_read>:

uint16_t BQ25798_Chr_Curr_Limit_read()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
	uint16_t value;
	i2c_read16(&hi2c1, REG03_Charge_Current_Limit, &value, BQ25798_ADDR);
 8001df6:	1d3a      	adds	r2, r7, #4
 8001df8:	23d6      	movs	r3, #214	; 0xd6
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	4809      	ldr	r0, [pc, #36]	; (8001e24 <BQ25798_Chr_Curr_Limit_read+0x34>)
 8001dfe:	f002 fb73 	bl	80044e8 <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 fc69 	bl	80046dc <byteswap16>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
    return swapvalue * 10;
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	461a      	mov	r2, r3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	b29b      	uxth	r3, r3
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000564 	.word	0x20000564

08001e28 <BQ25798_Sys_Min_Voltage_write>:

uint8_t BQ25798_Sys_Min_Voltage_write(uint8_t bits) // 6 bits multiplier (2500mV + 6bits * 250mV) e.g 3000mV = 2500 + 3*250 = 3,25V / bits=3
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
    res = i2c_write8(&hi2c1, REG00_Minimal_System_Voltage, (bits & 0x3F), BQ25798_ADDR);
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	23d6      	movs	r3, #214	; 0xd6
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <BQ25798_Sys_Min_Voltage_write+0x2c>)
 8001e40:	f002 fb74 	bl	800452c <i2c_write8>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
    return res;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000564 	.word	0x20000564

08001e58 <BQ25798_Chr_Volt_Limit_write>:

uint8_t BQ25798_Chr_Volt_Limit_write(uint16_t val)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
	uint8_t res;
	val /= 10;
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <BQ25798_Chr_Volt_Limit_write+0x3c>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	80fb      	strh	r3, [r7, #6]
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 fc33 	bl	80046dc <byteswap16>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	23d6      	movs	r3, #214	; 0xd6
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	4806      	ldr	r0, [pc, #24]	; (8001e98 <BQ25798_Chr_Volt_Limit_write+0x40>)
 8001e80:	f002 fb78 	bl	8004574 <i2c_write16>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
    return res;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	cccccccd 	.word	0xcccccccd
 8001e98:	20000564 	.word	0x20000564

08001e9c <BQ25798_Chr_Curr_Limit_write>:

uint8_t BQ25798_Chr_Curr_Limit_write(uint16_t val)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
	uint8_t res;
	val /= 10;
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <BQ25798_Chr_Curr_Limit_write+0x3c>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	80fb      	strh	r3, [r7, #6]
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fc11 	bl	80046dc <byteswap16>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	23d6      	movs	r3, #214	; 0xd6
 8001ec0:	2103      	movs	r1, #3
 8001ec2:	4806      	ldr	r0, [pc, #24]	; (8001edc <BQ25798_Chr_Curr_Limit_write+0x40>)
 8001ec4:	f002 fb56 	bl	8004574 <i2c_write16>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	73fb      	strb	r3, [r7, #15]
    return res;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	cccccccd 	.word	0xcccccccd
 8001edc:	20000564 	.word	0x20000564

08001ee0 <_write>:

static char clibuf[32];
static int cliptr;

int _write(int file, char *ptr, int len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <_write+0x28>)
 8001ef8:	f008 fc80 	bl	800a7fc <HAL_UART_Transmit>
    return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200006ac 	.word	0x200006ac

08001f0c <HAL_UART_RxCpltCallback>:
{
    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <HAL_UART_RxCpltCallback+0x38>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d105      	bne.n	8001f28 <HAL_UART_RxCpltCallback+0x1c>
 8001f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f20:	4909      	ldr	r1, [pc, #36]	; (8001f48 <HAL_UART_RxCpltCallback+0x3c>)
 8001f22:	4808      	ldr	r0, [pc, #32]	; (8001f44 <HAL_UART_RxCpltCallback+0x38>)
 8001f24:	f008 fcfe 	bl	800a924 <HAL_UART_Receive_IT>
	if(huart == &huart2) HAL_UART_Receive_IT(&huart2, sim_rx_buf, SIM_BUF_SIZE); // Interrupt start Uart2 RX
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <HAL_UART_RxCpltCallback+0x40>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d105      	bne.n	8001f3c <HAL_UART_RxCpltCallback+0x30>
 8001f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f34:	4906      	ldr	r1, [pc, #24]	; (8001f50 <HAL_UART_RxCpltCallback+0x44>)
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <HAL_UART_RxCpltCallback+0x40>)
 8001f38:	f008 fcf4 	bl	800a924 <HAL_UART_Receive_IT>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200006ac 	.word	0x200006ac
 8001f48:	20000220 	.word	0x20000220
 8001f4c:	20000730 	.word	0x20000730
 8001f50:	20000424 	.word	0x20000424

08001f54 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    HAL_UART_RxCpltCallback(huart);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ffd5 	bl	8001f0c <HAL_UART_RxCpltCallback>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <UART_has_char>:

uint16_t UART_has_char()      // Return number of bytes in buffer
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <UART_has_char+0x3c>)
 8001f72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <UART_has_char+0x3c>)
 8001f7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <UART_has_char+0x40>)
 8001f88:	8812      	ldrh	r2, [r2, #0]
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	425a      	negs	r2, r3
 8001f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f96:	bf58      	it	pl
 8001f98:	4253      	negpl	r3, r2
 8001f9a:	b29b      	uxth	r3, r3
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200006ac 	.word	0x200006ac
 8001fac:	20000420 	.word	0x20000420

08001fb0 <UART_receive>:

uint8_t UART_receive()       // Receive byte from buffer
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <UART_receive+0x38>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	b291      	uxth	r1, r2
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <UART_receive+0x38>)
 8001fc0:	8011      	strh	r1, [r2, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <UART_receive+0x3c>)
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	71fb      	strb	r3, [r7, #7]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <UART_receive+0x38>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd2:	d302      	bcc.n	8001fda <UART_receive+0x2a>
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <UART_receive+0x38>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	801a      	strh	r2, [r3, #0]
    return tmp;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	20000420 	.word	0x20000420
 8001fec:	20000220 	.word	0x20000220

08001ff0 <find>:

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e031      	b.n	8002062 <find+0x72>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e011      	b.n	800202c <find+0x3c>
			if(!arg2[k+1]) return (clibuf+(j+1));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3301      	adds	r3, #1
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d104      	bne.n	8002020 <find+0x30>
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	3301      	adds	r3, #1
 800201a:	4a18      	ldr	r2, [pc, #96]	; (800207c <find+0x8c>)
 800201c:	4413      	add	r3, r2
 800201e:	e027      	b.n	8002070 <find+0x80>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	3301      	adds	r3, #1
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4a13      	ldr	r2, [pc, #76]	; (800207c <find+0x8c>)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	72fb      	strb	r3, [r7, #11]
 8002036:	7afb      	ldrb	r3, [r7, #11]
 8002038:	3301      	adds	r3, #1
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <find+0x90>)
 800203c:	4413      	add	r3, r2
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d102      	bne.n	800204e <find+0x5e>
 8002048:	7afb      	ldrb	r3, [r7, #11]
 800204a:	3320      	adds	r3, #32
 800204c:	e000      	b.n	8002050 <find+0x60>
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	440a      	add	r2, r1
 8002056:	7812      	ldrb	r2, [r2, #0]
 8002058:	4293      	cmp	r3, r2
 800205a:	d0d5      	beq.n	8002008 <find+0x18>
	for(i=0; clibuf[i]; i++)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	4a06      	ldr	r2, [pc, #24]	; (800207c <find+0x8c>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1c7      	bne.n	8001ffe <find+0xe>
	return NULL;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	20000448 	.word	0x20000448
 8002080:	08010920 	.word	0x08010920

08002084 <getval>:

char * getval(char *p, int32_t *val, int32_t min, int32_t max)		// get s32 value from cmdline
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
	int32_t tmp = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
	if(*p == ' ') p++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b20      	cmp	r3, #32
 800209c:	d102      	bne.n	80020a4 <getval+0x20>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
	uint8_t sign = (*p == '-') ? 1:0;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b2d      	cmp	r3, #45	; 0x2d
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	74fb      	strb	r3, [r7, #19]
	while(*p)
 80020b4:	e016      	b.n	80020e4 <getval+0x60>
	{
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b2f      	cmp	r3, #47	; 0x2f
 80020bc:	d916      	bls.n	80020ec <getval+0x68>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b39      	cmp	r3, #57	; 0x39
 80020c4:	d812      	bhi.n	80020ec <getval+0x68>
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	3b30      	subs	r3, #48	; 0x30
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	4413      	add	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3301      	adds	r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
	while(*p)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1e4      	bne.n	80020b6 <getval+0x32>
		else break;
	}
	if(sign) tmp = -tmp;
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <getval+0x74>
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	425b      	negs	r3, r3
 80020f6:	617b      	str	r3, [r7, #20]
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	db07      	blt.n	8002110 <getval+0x8c>
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	dc03      	bgt.n	8002110 <getval+0x8c>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e002      	b.n	8002116 <getval+0x92>
 8002110:	4803      	ldr	r0, [pc, #12]	; (8002120 <getval+0x9c>)
 8002112:	f00b fa39 	bl	800d588 <puts>
	return p;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	08010130 	.word	0x08010130

08002124 <getFloat>:
	}
	printf("%s: %s\r\n", nam, dst);
}

char * getFloat (char *p, float *val, float min, float max)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002132:	edc7 0a00 	vstr	s1, [r7]
	 char* pend;
	float tmp = 0;
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
		while(*p == ' ') p++;
 800213c:	e002      	b.n	8002144 <getFloat+0x20>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b20      	cmp	r3, #32
 800214a:	d0f8      	beq.n	800213e <getFloat+0x1a>
		tmp = strtof(p, &pend);
 800214c:	f107 0310 	add.w	r3, r7, #16
 8002150:	4619      	mov	r1, r3
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f00a fc24 	bl	800c9a0 <strtof>
 8002158:	ed87 0a05 	vstr	s0, [r7, #20]
		if(tmp >= min && tmp <= max) {*val = tmp; return 1;} else { printf("Bad value\r\n"); return 0;}
 800215c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002160:	edd7 7a01 	vldr	s15, [r7, #4]
 8002164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	db0d      	blt.n	800218a <getFloat+0x66>
 800216e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002172:	edd7 7a00 	vldr	s15, [r7]
 8002176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d804      	bhi.n	800218a <getFloat+0x66>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	e003      	b.n	8002192 <getFloat+0x6e>
 800218a:	4804      	ldr	r0, [pc, #16]	; (800219c <getFloat+0x78>)
 800218c:	f00b f9fc 	bl	800d588 <puts>
 8002190:	2300      	movs	r3, #0

}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	08010130 	.word	0x08010130

080021a0 <CLI>:
    }
    *val = tmp;
    return p;
}

void CLI() {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
    int len = UART_has_char();
 80021a6:	f7ff fee1 	bl	8001f6c <UART_has_char>
 80021aa:	4603      	mov	r3, r0
 80021ac:	603b      	str	r3, [r7, #0]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00f      	beq.n	80021d4 <CLI+0x34>
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	e008      	b.n	80021cc <CLI+0x2c>
 80021ba:	f7ff fef9 	bl	8001fb0 <UART_receive>
 80021be:	4603      	mov	r3, r0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f80b 	bl	80021dc <CLI_proc>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf2      	blt.n	80021ba <CLI+0x1a>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <CLI_proc>:

void CLI_proc(char ch)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
	char *p;
	float tempfloat;
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 80021e6:	4b6d      	ldr	r3, [pc, #436]	; (800239c <CLI_proc+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b1f      	cmp	r3, #31
 80021ec:	d807      	bhi.n	80021fe <CLI_proc+0x22>
 80021ee:	4b6b      	ldr	r3, [pc, #428]	; (800239c <CLI_proc+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	4969      	ldr	r1, [pc, #420]	; (800239c <CLI_proc+0x1c0>)
 80021f6:	600a      	str	r2, [r1, #0]
 80021f8:	4969      	ldr	r1, [pc, #420]	; (80023a0 <CLI_proc+0x1c4>)
 80021fa:	79fa      	ldrb	r2, [r7, #7]
 80021fc:	54ca      	strb	r2, [r1, r3]
	if(ch == 10)	// LF
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b0a      	cmp	r3, #10
 8002202:	f040 80c8 	bne.w	8002396 <CLI_proc+0x1ba>
	{
	    if(clibuf[cliptr-1] == 13) cliptr--;
 8002206:	4b65      	ldr	r3, [pc, #404]	; (800239c <CLI_proc+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3b01      	subs	r3, #1
 800220c:	4a64      	ldr	r2, [pc, #400]	; (80023a0 <CLI_proc+0x1c4>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	2b0d      	cmp	r3, #13
 8002212:	d104      	bne.n	800221e <CLI_proc+0x42>
 8002214:	4b61      	ldr	r3, [pc, #388]	; (800239c <CLI_proc+0x1c0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3b01      	subs	r3, #1
 800221a:	4a60      	ldr	r2, [pc, #384]	; (800239c <CLI_proc+0x1c0>)
 800221c:	6013      	str	r3, [r2, #0]
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 800221e:	4b5f      	ldr	r3, [pc, #380]	; (800239c <CLI_proc+0x1c0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <CLI_proc+0x1c4>)
 8002226:	4413      	add	r3, r2
 8002228:	4a5c      	ldr	r2, [pc, #368]	; (800239c <CLI_proc+0x1c0>)
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	f1c2 0220 	rsb	r2, r2, #32
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f00b fa88 	bl	800d748 <memset>
		cliptr = 0;
 8002238:	4b58      	ldr	r3, [pc, #352]	; (800239c <CLI_proc+0x1c0>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
// Main commands ------------------------------------------------------------------------------
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{help(); return;}
 800223e:	4859      	ldr	r0, [pc, #356]	; (80023a4 <CLI_proc+0x1c8>)
 8002240:	f7ff fed6 	bl	8001ff0 <find>
 8002244:	4603      	mov	r3, r0
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <CLI_proc+0x1cc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d006      	beq.n	800225a <CLI_proc+0x7e>
 800224c:	4857      	ldr	r0, [pc, #348]	; (80023ac <CLI_proc+0x1d0>)
 800224e:	f7ff fecf 	bl	8001ff0 <find>
 8002252:	4603      	mov	r3, r0
 8002254:	4a56      	ldr	r2, [pc, #344]	; (80023b0 <CLI_proc+0x1d4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d102      	bne.n	8002260 <CLI_proc+0x84>
 800225a:	f000 fab9 	bl	80027d0 <help>
 800225e:	e09a      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("cyclic")==clibuf+6) {cyclic = !cyclic; return;}
 8002260:	4854      	ldr	r0, [pc, #336]	; (80023b4 <CLI_proc+0x1d8>)
 8002262:	f7ff fec5 	bl	8001ff0 <find>
 8002266:	4603      	mov	r3, r0
 8002268:	4a53      	ldr	r2, [pc, #332]	; (80023b8 <CLI_proc+0x1dc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10a      	bne.n	8002284 <CLI_proc+0xa8>
 800226e:	4b53      	ldr	r3, [pc, #332]	; (80023bc <CLI_proc+0x1e0>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <CLI_proc+0x1e0>)
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	e088      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 8002284:	484e      	ldr	r0, [pc, #312]	; (80023c0 <CLI_proc+0x1e4>)
 8002286:	f7ff feb3 	bl	8001ff0 <find>
 800228a:	4603      	mov	r3, r0
 800228c:	4a4d      	ldr	r2, [pc, #308]	; (80023c4 <CLI_proc+0x1e8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d105      	bne.n	800229e <CLI_proc+0xc2>
 8002292:	22a0      	movs	r2, #160	; 0xa0
 8002294:	2138      	movs	r1, #56	; 0x38
 8002296:	484c      	ldr	r0, [pc, #304]	; (80023c8 <CLI_proc+0x1ec>)
 8002298:	f002 f9e0 	bl	800465c <i2c_scan>
 800229c:	e07b      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults"); EEPROM_Load_defaults(); return;}
 800229e:	484b      	ldr	r0, [pc, #300]	; (80023cc <CLI_proc+0x1f0>)
 80022a0:	f7ff fea6 	bl	8001ff0 <find>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4a4a      	ldr	r2, [pc, #296]	; (80023d0 <CLI_proc+0x1f4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d105      	bne.n	80022b8 <CLI_proc+0xdc>
 80022ac:	4849      	ldr	r0, [pc, #292]	; (80023d4 <CLI_proc+0x1f8>)
 80022ae:	f00b f905 	bl	800d4bc <iprintf>
 80022b2:	f7ff f803 	bl	80012bc <EEPROM_Load_defaults>
 80022b6:	e06e      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 80022b8:	4847      	ldr	r0, [pc, #284]	; (80023d8 <CLI_proc+0x1fc>)
 80022ba:	f7ff fe99 	bl	8001ff0 <find>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a43      	ldr	r2, [pc, #268]	; (80023d0 <CLI_proc+0x1f4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d102      	bne.n	80022cc <CLI_proc+0xf0>
 80022c6:	f7ff f90d 	bl	80014e4 <EEPROM_Print_config>
 80022ca:	e064      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",EEPROM_Load_config()); return;}
 80022cc:	4843      	ldr	r0, [pc, #268]	; (80023dc <CLI_proc+0x200>)
 80022ce:	f7ff fe8f 	bl	8001ff0 <find>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4a42      	ldr	r2, [pc, #264]	; (80023e0 <CLI_proc+0x204>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d107      	bne.n	80022ea <CLI_proc+0x10e>
 80022da:	f7ff f84f 	bl	800137c <EEPROM_Load_config>
 80022de:	4603      	mov	r3, r0
 80022e0:	4619      	mov	r1, r3
 80022e2:	4840      	ldr	r0, [pc, #256]	; (80023e4 <CLI_proc+0x208>)
 80022e4:	f00b f8ea 	bl	800d4bc <iprintf>
 80022e8:	e055      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",EEPROM_Save_config()); return;}
 80022ea:	483f      	ldr	r0, [pc, #252]	; (80023e8 <CLI_proc+0x20c>)
 80022ec:	f7ff fe80 	bl	8001ff0 <find>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4a3b      	ldr	r2, [pc, #236]	; (80023e0 <CLI_proc+0x204>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d107      	bne.n	8002308 <CLI_proc+0x12c>
 80022f8:	f7fe ffae 	bl	8001258 <EEPROM_Save_config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4619      	mov	r1, r3
 8002300:	483a      	ldr	r0, [pc, #232]	; (80023ec <CLI_proc+0x210>)
 8002302:	f00b f8db 	bl	800d4bc <iprintf>
 8002306:	e046      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 8002308:	4839      	ldr	r0, [pc, #228]	; (80023f0 <CLI_proc+0x214>)
 800230a:	f7ff fe71 	bl	8001ff0 <find>
 800230e:	4603      	mov	r3, r0
 8002310:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <CLI_proc+0x218>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d113      	bne.n	800233e <CLI_proc+0x162>
 8002316:	4838      	ldr	r0, [pc, #224]	; (80023f8 <CLI_proc+0x21c>)
 8002318:	f643 2398 	movw	r3, #15000	; 0x3a98
 800231c:	2200      	movs	r2, #0
 800231e:	4937      	ldr	r1, [pc, #220]	; (80023fc <CLI_proc+0x220>)
 8002320:	f7ff feb0 	bl	8002084 <getval>
 8002324:	4b35      	ldr	r3, [pc, #212]	; (80023fc <CLI_proc+0x220>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b29a      	uxth	r2, r3
 800232a:	4b35      	ldr	r3, [pc, #212]	; (8002400 <CLI_proc+0x224>)
 800232c:	80da      	strh	r2, [r3, #6]
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <CLI_proc+0x224>)
 8002330:	88db      	ldrh	r3, [r3, #6]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4619      	mov	r1, r3
 8002336:	4833      	ldr	r0, [pc, #204]	; (8002404 <CLI_proc+0x228>)
 8002338:	f00b f8c0 	bl	800d4bc <iprintf>
 800233c:	e02b      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 800233e:	4832      	ldr	r0, [pc, #200]	; (8002408 <CLI_proc+0x22c>)
 8002340:	f7ff fe56 	bl	8001ff0 <find>
 8002344:	4603      	mov	r3, r0
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <CLI_proc+0x1f4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d11a      	bne.n	8002382 <CLI_proc+0x1a6>
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <CLI_proc+0x218>)
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002356:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f7ff fee1 	bl	8002124 <getFloat>
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4b26      	ldr	r3, [pc, #152]	; (8002400 <CLI_proc+0x224>)
 8002366:	3302      	adds	r3, #2
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <CLI_proc+0x224>)
 800236c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f8e9 	bl	8000548 <__aeabi_f2d>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4824      	ldr	r0, [pc, #144]	; (800240c <CLI_proc+0x230>)
 800237c:	f00b f89e 	bl	800d4bc <iprintf>
 8002380:	e009      	b.n	8002396 <CLI_proc+0x1ba>
		if(find("setoffset")==clibuf+9){setOffset();return;}
 8002382:	4823      	ldr	r0, [pc, #140]	; (8002410 <CLI_proc+0x234>)
 8002384:	f7ff fe34 	bl	8001ff0 <find>
 8002388:	4603      	mov	r3, r0
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <CLI_proc+0x238>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d102      	bne.n	8002396 <CLI_proc+0x1ba>
 8002390:	f000 f842 	bl	8002418 <setOffset>
 8002394:	bf00      	nop
//                return;
//            }
//
//        }
	}
}
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000468 	.word	0x20000468
 80023a0:	20000448 	.word	0x20000448
 80023a4:	08010154 	.word	0x08010154
 80023a8:	20000449 	.word	0x20000449
 80023ac:	08010158 	.word	0x08010158
 80023b0:	2000044c 	.word	0x2000044c
 80023b4:	08010160 	.word	0x08010160
 80023b8:	2000044e 	.word	0x2000044e
 80023bc:	20000000 	.word	0x20000000
 80023c0:	08010168 	.word	0x08010168
 80023c4:	2000044f 	.word	0x2000044f
 80023c8:	200005b8 	.word	0x200005b8
 80023cc:	08010170 	.word	0x08010170
 80023d0:	20000453 	.word	0x20000453
 80023d4:	0801017c 	.word	0x0801017c
 80023d8:	08010198 	.word	0x08010198
 80023dc:	080101a4 	.word	0x080101a4
 80023e0:	20000452 	.word	0x20000452
 80023e4:	080101b0 	.word	0x080101b0
 80023e8:	080101d8 	.word	0x080101d8
 80023ec:	080101e4 	.word	0x080101e4
 80023f0:	08010224 	.word	0x08010224
 80023f4:	20000454 	.word	0x20000454
 80023f8:	20000455 	.word	0x20000455
 80023fc:	20000444 	.word	0x20000444
 8002400:	2000087c 	.word	0x2000087c
 8002404:	08010234 	.word	0x08010234
 8002408:	08010244 	.word	0x08010244
 800240c:	08010250 	.word	0x08010250
 8002410:	08010264 	.word	0x08010264
 8002414:	20000451 	.word	0x20000451

08002418 <setOffset>:


void setOffset(void)
{ float valtostore;
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0

switch (clibuf[10])
 800241e:	4bb4      	ldr	r3, [pc, #720]	; (80026f0 <setOffset+0x2d8>)
 8002420:	7a9b      	ldrb	r3, [r3, #10]
 8002422:	2b74      	cmp	r3, #116	; 0x74
 8002424:	f000 80dc 	beq.w	80025e0 <setOffset+0x1c8>
 8002428:	2b74      	cmp	r3, #116	; 0x74
 800242a:	f300 81b3 	bgt.w	8002794 <setOffset+0x37c>
 800242e:	2b68      	cmp	r3, #104	; 0x68
 8002430:	d002      	beq.n	8002438 <setOffset+0x20>
 8002432:	2b70      	cmp	r3, #112	; 0x70
 8002434:	d06a      	beq.n	800250c <setOffset+0xf4>
 8002436:	e1ad      	b.n	8002794 <setOffset+0x37c>
{

case 'h':
	if(find("sht3")==clibuf+16)
 8002438:	48ae      	ldr	r0, [pc, #696]	; (80026f4 <setOffset+0x2dc>)
 800243a:	f7ff fdd9 	bl	8001ff0 <find>
 800243e:	4603      	mov	r3, r0
 8002440:	4aad      	ldr	r2, [pc, #692]	; (80026f8 <setOffset+0x2e0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11a      	bne.n	800247c <setOffset+0x64>
	{
		if (getFloat(clibuf+17, &valtostore, MIN_OFFSET, MAX_OFFSET))
 8002446:	4aad      	ldr	r2, [pc, #692]	; (80026fc <setOffset+0x2e4>)
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800244e:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f7ff fe65 	bl	8002124 <getFloat>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <setOffset+0x4e>
		{config.SHT3_h_offset=valtostore;}
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4ba7      	ldr	r3, [pc, #668]	; (8002700 <setOffset+0x2e8>)
 8002464:	611a      	str	r2, [r3, #16]
		printf("SHT3 hum offset:%f \r\n",config.SHT3_h_offset);
 8002466:	4ba6      	ldr	r3, [pc, #664]	; (8002700 <setOffset+0x2e8>)
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f86c 	bl	8000548 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	48a3      	ldr	r0, [pc, #652]	; (8002704 <setOffset+0x2ec>)
 8002476:	f00b f821 	bl	800d4bc <iprintf>
		return;
 800247a:	e193      	b.n	80027a4 <setOffset+0x38c>
		break;
	}

	if(find("ms8607")==clibuf+18)
 800247c:	48a2      	ldr	r0, [pc, #648]	; (8002708 <setOffset+0x2f0>)
 800247e:	f7ff fdb7 	bl	8001ff0 <find>
 8002482:	4603      	mov	r3, r0
 8002484:	4aa1      	ldr	r2, [pc, #644]	; (800270c <setOffset+0x2f4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d11a      	bne.n	80024c0 <setOffset+0xa8>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 800248a:	4aa1      	ldr	r2, [pc, #644]	; (8002710 <setOffset+0x2f8>)
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002492:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f7ff fe43 	bl	8002124 <getFloat>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <setOffset+0x92>
		{config.MS8607_h_offset=valtostore;}
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4b96      	ldr	r3, [pc, #600]	; (8002700 <setOffset+0x2e8>)
 80024a8:	619a      	str	r2, [r3, #24]
		printf("MS8607 hump offset:%f \r\n",config.MS8607_h_offset);
 80024aa:	4b95      	ldr	r3, [pc, #596]	; (8002700 <setOffset+0x2e8>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe f84a 	bl	8000548 <__aeabi_f2d>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4896      	ldr	r0, [pc, #600]	; (8002714 <setOffset+0x2fc>)
 80024ba:	f00a ffff 	bl	800d4bc <iprintf>
		return;
 80024be:	e171      	b.n	80027a4 <setOffset+0x38c>
		break;
	}
	if(find("bme280")==clibuf+18)
 80024c0:	4895      	ldr	r0, [pc, #596]	; (8002718 <setOffset+0x300>)
 80024c2:	f7ff fd95 	bl	8001ff0 <find>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a90      	ldr	r2, [pc, #576]	; (800270c <setOffset+0x2f4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d11a      	bne.n	8002504 <setOffset+0xec>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 80024ce:	4a90      	ldr	r2, [pc, #576]	; (8002710 <setOffset+0x2f8>)
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80024d6:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f7ff fe21 	bl	8002124 <getFloat>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <setOffset+0xd6>
		{config.BME280_h_offset=valtostore;}
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4b85      	ldr	r3, [pc, #532]	; (8002700 <setOffset+0x2e8>)
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
		printf("BME280 hum offset:%f \r\n",config.BME280_h_offset);
 80024ee:	4b84      	ldr	r3, [pc, #528]	; (8002700 <setOffset+0x2e8>)
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f828 	bl	8000548 <__aeabi_f2d>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4887      	ldr	r0, [pc, #540]	; (800271c <setOffset+0x304>)
 80024fe:	f00a ffdd 	bl	800d4bc <iprintf>
		return;
 8002502:	e14f      	b.n	80027a4 <setOffset+0x38c>
		break;
	}

	printf("unknown sensor");
 8002504:	4886      	ldr	r0, [pc, #536]	; (8002720 <setOffset+0x308>)
 8002506:	f00a ffd9 	bl	800d4bc <iprintf>
	break;
 800250a:	e147      	b.n	800279c <setOffset+0x384>
case 'p':
	if(find("ms8607")==clibuf+18)
 800250c:	487e      	ldr	r0, [pc, #504]	; (8002708 <setOffset+0x2f0>)
 800250e:	f7ff fd6f 	bl	8001ff0 <find>
 8002512:	4603      	mov	r3, r0
 8002514:	4a7d      	ldr	r2, [pc, #500]	; (800270c <setOffset+0x2f4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d11a      	bne.n	8002550 <setOffset+0x138>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 800251a:	4a7d      	ldr	r2, [pc, #500]	; (8002710 <setOffset+0x2f8>)
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002522:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7ff fdfb 	bl	8002124 <getFloat>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <setOffset+0x122>
		{config.MS8607_p_offset=valtostore;}
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	4b72      	ldr	r3, [pc, #456]	; (8002700 <setOffset+0x2e8>)
 8002538:	61da      	str	r2, [r3, #28]
		printf("MS8607 press offset:%f \r\n",config.MS8607_p_offset);
 800253a:	4b71      	ldr	r3, [pc, #452]	; (8002700 <setOffset+0x2e8>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f802 	bl	8000548 <__aeabi_f2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4876      	ldr	r0, [pc, #472]	; (8002724 <setOffset+0x30c>)
 800254a:	f00a ffb7 	bl	800d4bc <iprintf>
		return;
 800254e:	e129      	b.n	80027a4 <setOffset+0x38c>
		break;
	}
	if(find("bme280")==clibuf+18)
 8002550:	4871      	ldr	r0, [pc, #452]	; (8002718 <setOffset+0x300>)
 8002552:	f7ff fd4d 	bl	8001ff0 <find>
 8002556:	4603      	mov	r3, r0
 8002558:	4a6c      	ldr	r2, [pc, #432]	; (800270c <setOffset+0x2f4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d11a      	bne.n	8002594 <setOffset+0x17c>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 800255e:	4a6c      	ldr	r2, [pc, #432]	; (8002710 <setOffset+0x2f8>)
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002566:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f7ff fdd9 	bl	8002124 <getFloat>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <setOffset+0x166>
		{config.BME280_p_offset=valtostore;}
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4b61      	ldr	r3, [pc, #388]	; (8002700 <setOffset+0x2e8>)
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
		printf("BME280 press offset:%f \r\n",config.BME280_p_offset);
 800257e:	4b60      	ldr	r3, [pc, #384]	; (8002700 <setOffset+0x2e8>)
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ffe0 	bl	8000548 <__aeabi_f2d>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4866      	ldr	r0, [pc, #408]	; (8002728 <setOffset+0x310>)
 800258e:	f00a ff95 	bl	800d4bc <iprintf>
		return;
 8002592:	e107      	b.n	80027a4 <setOffset+0x38c>
		break;
	}
	if(find("dps368")==clibuf+18)
 8002594:	4865      	ldr	r0, [pc, #404]	; (800272c <setOffset+0x314>)
 8002596:	f7ff fd2b 	bl	8001ff0 <find>
 800259a:	4603      	mov	r3, r0
 800259c:	4a5b      	ldr	r2, [pc, #364]	; (800270c <setOffset+0x2f4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d11a      	bne.n	80025d8 <setOffset+0x1c0>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 80025a2:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <setOffset+0x2f8>)
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80025aa:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f7ff fdb7 	bl	8002124 <getFloat>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <setOffset+0x1aa>
		{config.DPS368_p_offset=valtostore;}
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <setOffset+0x2e8>)
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
		printf("DPS368 press offset:%f \r\n",config.DPS368_p_offset);
 80025c2:	4b4f      	ldr	r3, [pc, #316]	; (8002700 <setOffset+0x2e8>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ffbe 	bl	8000548 <__aeabi_f2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4857      	ldr	r0, [pc, #348]	; (8002730 <setOffset+0x318>)
 80025d2:	f00a ff73 	bl	800d4bc <iprintf>
		return;
 80025d6:	e0e5      	b.n	80027a4 <setOffset+0x38c>
		break;
	}
	printf("unknown sensor");
 80025d8:	4851      	ldr	r0, [pc, #324]	; (8002720 <setOffset+0x308>)
 80025da:	f00a ff6f 	bl	800d4bc <iprintf>
	break;
 80025de:	e0dd      	b.n	800279c <setOffset+0x384>
case 't':
	if(find("tmp117")==clibuf+18)
 80025e0:	4854      	ldr	r0, [pc, #336]	; (8002734 <setOffset+0x31c>)
 80025e2:	f7ff fd05 	bl	8001ff0 <find>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a48      	ldr	r2, [pc, #288]	; (800270c <setOffset+0x2f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11a      	bne.n	8002624 <setOffset+0x20c>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 80025ee:	4a48      	ldr	r2, [pc, #288]	; (8002710 <setOffset+0x2f8>)
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80025f6:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4610      	mov	r0, r2
 80025fe:	f7ff fd91 	bl	8002124 <getFloat>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <setOffset+0x1f6>
		{config.TMP117_t_offset=valtostore;}
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <setOffset+0x2e8>)
 800260c:	609a      	str	r2, [r3, #8]
		printf("TMP117 temp offset:%f \r\n",config.TMP117_t_offset);
 800260e:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <setOffset+0x2e8>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff98 	bl	8000548 <__aeabi_f2d>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4846      	ldr	r0, [pc, #280]	; (8002738 <setOffset+0x320>)
 800261e:	f00a ff4d 	bl	800d4bc <iprintf>
		return;
 8002622:	e0bf      	b.n	80027a4 <setOffset+0x38c>
		break;
	}

	if(find("sht3")==clibuf+16)
 8002624:	4833      	ldr	r0, [pc, #204]	; (80026f4 <setOffset+0x2dc>)
 8002626:	f7ff fce3 	bl	8001ff0 <find>
 800262a:	4603      	mov	r3, r0
 800262c:	4a32      	ldr	r2, [pc, #200]	; (80026f8 <setOffset+0x2e0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d11a      	bne.n	8002668 <setOffset+0x250>
	{
		if (getFloat(clibuf+17, &valtostore, MIN_OFFSET, MAX_OFFSET))
 8002632:	4a32      	ldr	r2, [pc, #200]	; (80026fc <setOffset+0x2e4>)
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800263a:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f7ff fd6f 	bl	8002124 <getFloat>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <setOffset+0x23a>
		{config.SHT3_t_offset=valtostore;}
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <setOffset+0x2e8>)
 8002650:	60da      	str	r2, [r3, #12]
		printf("SHT3 temp offset:%f \r\n",config.SHT3_t_offset);
 8002652:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <setOffset+0x2e8>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd ff76 	bl	8000548 <__aeabi_f2d>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4836      	ldr	r0, [pc, #216]	; (800273c <setOffset+0x324>)
 8002662:	f00a ff2b 	bl	800d4bc <iprintf>
		return;
 8002666:	e09d      	b.n	80027a4 <setOffset+0x38c>
		break;
	}

	if(find("ms8607")==clibuf+18)
 8002668:	4827      	ldr	r0, [pc, #156]	; (8002708 <setOffset+0x2f0>)
 800266a:	f7ff fcc1 	bl	8001ff0 <find>
 800266e:	4603      	mov	r3, r0
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <setOffset+0x2f4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d11a      	bne.n	80026ac <setOffset+0x294>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 8002676:	4a26      	ldr	r2, [pc, #152]	; (8002710 <setOffset+0x2f8>)
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800267e:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7ff fd4d 	bl	8002124 <getFloat>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <setOffset+0x27e>
		{config.MS8607_t_offset=valtostore;}
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <setOffset+0x2e8>)
 8002694:	615a      	str	r2, [r3, #20]
		printf("MS8607 temp offset:%f \r\n",config.MS8607_t_offset);
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <setOffset+0x2e8>)
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff54 	bl	8000548 <__aeabi_f2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4826      	ldr	r0, [pc, #152]	; (8002740 <setOffset+0x328>)
 80026a6:	f00a ff09 	bl	800d4bc <iprintf>
		return;
 80026aa:	e07b      	b.n	80027a4 <setOffset+0x38c>
		break;
	}
	if(find("bme280")==clibuf+18)
 80026ac:	481a      	ldr	r0, [pc, #104]	; (8002718 <setOffset+0x300>)
 80026ae:	f7ff fc9f 	bl	8001ff0 <find>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a15      	ldr	r2, [pc, #84]	; (800270c <setOffset+0x2f4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d146      	bne.n	8002748 <setOffset+0x330>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <setOffset+0x2f8>)
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80026c2:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80026c6:	4619      	mov	r1, r3
 80026c8:	4610      	mov	r0, r2
 80026ca:	f7ff fd2b 	bl	8002124 <getFloat>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <setOffset+0x2c2>
		{config.BME280_t_offset=valtostore;}
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <setOffset+0x2e8>)
 80026d8:	621a      	str	r2, [r3, #32]
		printf("BME280 temp offset:%f \r\n",config.BME280_t_offset);
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <setOffset+0x2e8>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd ff32 	bl	8000548 <__aeabi_f2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4816      	ldr	r0, [pc, #88]	; (8002744 <setOffset+0x32c>)
 80026ea:	f00a fee7 	bl	800d4bc <iprintf>
		return;
 80026ee:	e059      	b.n	80027a4 <setOffset+0x38c>
 80026f0:	20000448 	.word	0x20000448
 80026f4:	08010270 	.word	0x08010270
 80026f8:	20000458 	.word	0x20000458
 80026fc:	20000459 	.word	0x20000459
 8002700:	2000087c 	.word	0x2000087c
 8002704:	08010278 	.word	0x08010278
 8002708:	08010290 	.word	0x08010290
 800270c:	2000045a 	.word	0x2000045a
 8002710:	2000045b 	.word	0x2000045b
 8002714:	08010298 	.word	0x08010298
 8002718:	080102b4 	.word	0x080102b4
 800271c:	080102bc 	.word	0x080102bc
 8002720:	080102d4 	.word	0x080102d4
 8002724:	080102e4 	.word	0x080102e4
 8002728:	08010300 	.word	0x08010300
 800272c:	0801031c 	.word	0x0801031c
 8002730:	08010324 	.word	0x08010324
 8002734:	08010340 	.word	0x08010340
 8002738:	08010348 	.word	0x08010348
 800273c:	08010364 	.word	0x08010364
 8002740:	0801037c 	.word	0x0801037c
 8002744:	08010398 	.word	0x08010398
		break;
	}
	if(find("dps368")==clibuf+18)
 8002748:	4818      	ldr	r0, [pc, #96]	; (80027ac <setOffset+0x394>)
 800274a:	f7ff fc51 	bl	8001ff0 <find>
 800274e:	4603      	mov	r3, r0
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <setOffset+0x398>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d11a      	bne.n	800278c <setOffset+0x374>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <setOffset+0x39c>)
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800275e:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f7ff fcdd 	bl	8002124 <getFloat>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <setOffset+0x35e>
		{config.DPS368_t_offset=valtostore;}
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <setOffset+0x3a0>)
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c
		printf("DPS368 temp offset:%f \r\n",config.DPS368_t_offset);
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <setOffset+0x3a0>)
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd fee4 	bl	8000548 <__aeabi_f2d>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	480d      	ldr	r0, [pc, #52]	; (80027bc <setOffset+0x3a4>)
 8002786:	f00a fe99 	bl	800d4bc <iprintf>
		return;
 800278a:	e00b      	b.n	80027a4 <setOffset+0x38c>
		break;
	}
	printf("unknown sensor");
 800278c:	480c      	ldr	r0, [pc, #48]	; (80027c0 <setOffset+0x3a8>)
 800278e:	f00a fe95 	bl	800d4bc <iprintf>
	break;
 8002792:	e003      	b.n	800279c <setOffset+0x384>

default:
	printf( "unknown parameter");
 8002794:	480b      	ldr	r0, [pc, #44]	; (80027c4 <setOffset+0x3ac>)
 8002796:	f00a fe91 	bl	800d4bc <iprintf>
	break;
 800279a:	bf00      	nop
}

printf("bad parameters. usage: setoffset X YYYY ff.fff | x:t/p/h | Y:sensor name | ff.fff: offset\r\n");
 800279c:	480a      	ldr	r0, [pc, #40]	; (80027c8 <setOffset+0x3b0>)
 800279e:	f00a fef3 	bl	800d588 <puts>
return;
 80027a2:	bf00      	nop
}
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	0801031c 	.word	0x0801031c
 80027b0:	2000045a 	.word	0x2000045a
 80027b4:	2000045b 	.word	0x2000045b
 80027b8:	2000087c 	.word	0x2000087c
 80027bc:	080103b4 	.word	0x080103b4
 80027c0:	080102d4 	.word	0x080102d4
 80027c4:	080103d0 	.word	0x080103d0
 80027c8:	080103e4 	.word	0x080103e4
 80027cc:	00000000 	.word	0x00000000

080027d0 <help>:



void help()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af02      	add	r7, sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 80027d6:	a350      	add	r3, pc, #320	; (adr r3, 8002918 <help+0x148>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	e9cd 2300 	strd	r2, r3, [sp]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <help+0x100>)
 80027e6:	483b      	ldr	r0, [pc, #236]	; (80028d4 <help+0x104>)
 80027e8:	f00a fe68 	bl	800d4bc <iprintf>
	printf("Charger state : ");
 80027ec:	483a      	ldr	r0, [pc, #232]	; (80028d8 <help+0x108>)
 80027ee:	f00a fe65 	bl	800d4bc <iprintf>
	switch (charger_state)
 80027f2:	4b3a      	ldr	r3, [pc, #232]	; (80028dc <help+0x10c>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d81a      	bhi.n	8002830 <help+0x60>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <help+0x30>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002811 	.word	0x08002811
 8002804:	08002819 	.word	0x08002819
 8002808:	08002821 	.word	0x08002821
 800280c:	08002829 	.word	0x08002829
	{
	case 0:
		printf("FAULT\r\n");
 8002810:	4833      	ldr	r0, [pc, #204]	; (80028e0 <help+0x110>)
 8002812:	f00a feb9 	bl	800d588 <puts>
		break;
 8002816:	e00b      	b.n	8002830 <help+0x60>
	case 1:
		printf("OK\r\n");
 8002818:	4832      	ldr	r0, [pc, #200]	; (80028e4 <help+0x114>)
 800281a:	f00a feb5 	bl	800d588 <puts>
		break;
 800281e:	e007      	b.n	8002830 <help+0x60>
	case 2:
		printf("No charging ...\r\n");
 8002820:	4831      	ldr	r0, [pc, #196]	; (80028e8 <help+0x118>)
 8002822:	f00a feb1 	bl	800d588 <puts>
		break;
 8002826:	e003      	b.n	8002830 <help+0x60>
	case 3:
		printf("Charging ...\r\n");
 8002828:	4830      	ldr	r0, [pc, #192]	; (80028ec <help+0x11c>)
 800282a:	f00a fead 	bl	800d588 <puts>
		break;
 800282e:	bf00      	nop
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 8002830:	f7fe ff4a 	bl	80016c8 <GET_MCU_Temp>
 8002834:	ee10 3a10 	vmov	r3, s0
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe85 	bl	8000548 <__aeabi_f2d>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	482b      	ldr	r0, [pc, #172]	; (80028f0 <help+0x120>)
 8002844:	f00a fe3a 	bl	800d4bc <iprintf>
	printf("VBAT: %u [mV]  ", BQ25798_Vbat_read());
 8002848:	f7ff fa14 	bl	8001c74 <BQ25798_Vbat_read>
 800284c:	4603      	mov	r3, r0
 800284e:	4619      	mov	r1, r3
 8002850:	4828      	ldr	r0, [pc, #160]	; (80028f4 <help+0x124>)
 8002852:	f00a fe33 	bl	800d4bc <iprintf>
	printf("Vac1: %u [mV]  ", BQ25798_Vac1_read());
 8002856:	f7ff fa35 	bl	8001cc4 <BQ25798_Vac1_read>
 800285a:	4603      	mov	r3, r0
 800285c:	4619      	mov	r1, r3
 800285e:	4826      	ldr	r0, [pc, #152]	; (80028f8 <help+0x128>)
 8002860:	f00a fe2c 	bl	800d4bc <iprintf>
	printf("Vac2: %u [mV]  ", BQ25798_Vac2_read());
 8002864:	f7ff fa42 	bl	8001cec <BQ25798_Vac2_read>
 8002868:	4603      	mov	r3, r0
 800286a:	4619      	mov	r1, r3
 800286c:	4823      	ldr	r0, [pc, #140]	; (80028fc <help+0x12c>)
 800286e:	f00a fe25 	bl	800d4bc <iprintf>
	printf("VSYS: %u [mV]  \r\n", BQ25798_Vsys_read());
 8002872:	f7ff fa13 	bl	8001c9c <BQ25798_Vsys_read>
 8002876:	4603      	mov	r3, r0
 8002878:	4619      	mov	r1, r3
 800287a:	4821      	ldr	r0, [pc, #132]	; (8002900 <help+0x130>)
 800287c:	f00a fe1e 	bl	800d4bc <iprintf>
	printf("Ibus: %u [mA]  ", BQ25798_Ibus_read());
 8002880:	f7ff fa48 	bl	8001d14 <BQ25798_Ibus_read>
 8002884:	4603      	mov	r3, r0
 8002886:	4619      	mov	r1, r3
 8002888:	481e      	ldr	r0, [pc, #120]	; (8002904 <help+0x134>)
 800288a:	f00a fe17 	bl	800d4bc <iprintf>
	printf("Ibat: %u [mA]  \r\n", BQ25798_Ibat_read());
 800288e:	f7ff fa55 	bl	8001d3c <BQ25798_Ibat_read>
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	481c      	ldr	r0, [pc, #112]	; (8002908 <help+0x138>)
 8002898:	f00a fe10 	bl	800d4bc <iprintf>
	printf("Minimal SYS Voltage: %u [mV]  \r\n", BQ25798_Sys_Min_Voltage_read());
 800289c:	f7ff fa62 	bl	8001d64 <BQ25798_Sys_Min_Voltage_read>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4619      	mov	r1, r3
 80028a4:	4819      	ldr	r0, [pc, #100]	; (800290c <help+0x13c>)
 80028a6:	f00a fe09 	bl	800d4bc <iprintf>
	printf("Charge Voltage Limit: %u [mV]  \r\n",BQ25798_Chr_Volt_Limit_read());
 80028aa:	f7ff fa85 	bl	8001db8 <BQ25798_Chr_Volt_Limit_read>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4619      	mov	r1, r3
 80028b2:	4817      	ldr	r0, [pc, #92]	; (8002910 <help+0x140>)
 80028b4:	f00a fe02 	bl	800d4bc <iprintf>
	printf("Charge Current Limit: %u [mA]  \r\n",BQ25798_Chr_Curr_Limit_read());
 80028b8:	f7ff fa9a 	bl	8001df0 <BQ25798_Chr_Curr_Limit_read>
 80028bc:	4603      	mov	r3, r0
 80028be:	4619      	mov	r1, r3
 80028c0:	4814      	ldr	r0, [pc, #80]	; (8002914 <help+0x144>)
 80028c2:	f00a fdfb 	bl	800d4bc <iprintf>

}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	f3af 8000 	nop.w
 80028d0:	3ff00000 	.word	0x3ff00000
 80028d4:	08010440 	.word	0x08010440
 80028d8:	08010464 	.word	0x08010464
 80028dc:	200007b4 	.word	0x200007b4
 80028e0:	08010478 	.word	0x08010478
 80028e4:	08010480 	.word	0x08010480
 80028e8:	08010484 	.word	0x08010484
 80028ec:	08010498 	.word	0x08010498
 80028f0:	080104a8 	.word	0x080104a8
 80028f4:	080104c4 	.word	0x080104c4
 80028f8:	080104d4 	.word	0x080104d4
 80028fc:	080104e4 	.word	0x080104e4
 8002900:	080104f4 	.word	0x080104f4
 8002904:	08010508 	.word	0x08010508
 8002908:	08010518 	.word	0x08010518
 800290c:	0801052c 	.word	0x0801052c
 8002910:	08010550 	.word	0x08010550
 8002914:	08010574 	.word	0x08010574
 8002918:	a0000000 	.word	0xa0000000
 800291c:	3fc99999 	.word	0x3fc99999

08002920 <DPS368_check>:

DPS_coeff_t DPS_coef;
volatile int32_t Kt_coef, Kp_coef;

uint8_t DPS368_check()
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
	uint8_t value;
	TCA9543A_SelectChannel(2);
 8002926:	2002      	movs	r0, #2
 8002928:	f001 feee 	bl	8004708 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 800292c:	2001      	movs	r0, #1
 800292e:	f002 fa35 	bl	8004d9c <HAL_Delay>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, DPS368_ADDR, 3, 150);
 8002932:	2396      	movs	r3, #150	; 0x96
 8002934:	2203      	movs	r2, #3
 8002936:	21ee      	movs	r1, #238	; 0xee
 8002938:	4814      	ldr	r0, [pc, #80]	; (800298c <DPS368_check+0x6c>)
 800293a:	f005 fa81 	bl	8007e40 <HAL_I2C_IsDeviceReady>
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8002942:	2064      	movs	r0, #100	; 0x64
 8002944:	f002 fa2a 	bl	8004d9c <HAL_Delay>
	if (status == HAL_OK) {
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d115      	bne.n	800297a <DPS368_check+0x5a>
		i2c_read8(&hi2c2, DPS368_REG_ID, &value, DPS368_ADDR);
 800294e:	1dba      	adds	r2, r7, #6
 8002950:	23ee      	movs	r3, #238	; 0xee
 8002952:	210d      	movs	r1, #13
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <DPS368_check+0x6c>)
 8002956:	f001 fda5 	bl	80044a4 <i2c_read8>
		TCA9543A_SelectChannel(0);
 800295a:	2000      	movs	r0, #0
 800295c:	f001 fed4 	bl	8004708 <TCA9543A_SelectChannel>
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	2b10      	cmp	r3, #16
 8002964:	d104      	bne.n	8002970 <DPS368_check+0x50>
 8002966:	480a      	ldr	r0, [pc, #40]	; (8002990 <DPS368_check+0x70>)
 8002968:	f00a fe0e 	bl	800d588 <puts>
 800296c:	2301      	movs	r3, #1
 800296e:	e008      	b.n	8002982 <DPS368_check+0x62>
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <DPS368_check+0x74>)
 8002972:	f00a fe09 	bl	800d588 <puts>
 8002976:	2300      	movs	r3, #0
 8002978:	e003      	b.n	8002982 <DPS368_check+0x62>
	} else {printf("DPS368 FAILED\r\n"); return 0;}
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <DPS368_check+0x78>)
 800297c:	f00a fe04 	bl	800d588 <puts>
 8002980:	2300      	movs	r3, #0
	return 0;
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200005b8 	.word	0x200005b8
 8002990:	08010598 	.word	0x08010598
 8002994:	080105a4 	.word	0x080105a4
 8002998:	080105b0 	.word	0x080105b0

0800299c <getTwosComplement>:

void getTwosComplement(int32_t *raw, uint8_t length)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
    if (*raw & ((uint32_t)1 << (length - 1)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <getTwosComplement+0x38>
    {
        *raw -= (uint32_t)1 << length;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	2201      	movs	r2, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	1acb      	subs	r3, r1, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	601a      	str	r2, [r3, #0]
    }
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <DPS368_read_coeff>:


void DPS368_read_coeff()
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af04      	add	r7, sp, #16
	uint8_t regs[18];
	SET_DPS368();
 80029e6:	f001 fed3 	bl	8004790 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, regs, 18, 250);
 80029ea:	23fa      	movs	r3, #250	; 0xfa
 80029ec:	9302      	str	r3, [sp, #8]
 80029ee:	2312      	movs	r3, #18
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	1d3b      	adds	r3, r7, #4
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2301      	movs	r3, #1
 80029f8:	2210      	movs	r2, #16
 80029fa:	21ee      	movs	r1, #238	; 0xee
 80029fc:	4841      	ldr	r0, [pc, #260]	; (8002b04 <DPS368_read_coeff+0x124>)
 80029fe:	f005 f905 	bl	8007c0c <HAL_I2C_Mem_Read>
//	for(uint8_t i=0; i<19;i++){
//		printf("Coef %d : %#x\r\n",i,regs[i]);
//	}
	UNSET_BME_DPS();
 8002a02:	f001 fecc 	bl	800479e <UNSET_BME_DPS>
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 8002a06:	793b      	ldrb	r3, [r7, #4]
 8002a08:	011a      	lsls	r2, r3, #4
 8002a0a:	797b      	ldrb	r3, [r7, #5]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	4313      	orrs	r3, r2
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002a1a:	601a      	str	r2, [r3, #0]
    getTwosComplement(&DPS_coef.C0, 12);
 8002a1c:	210c      	movs	r1, #12
 8002a1e:	483a      	ldr	r0, [pc, #232]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002a20:	f7ff ffbc 	bl	800299c <getTwosComplement>
    // c0 is only used as c0*0.5, so c0_half is calculated immediately
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002a2e:	601a      	str	r2, [r3, #0]

    // now do the same thing for all other coefficients
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8002a30:	797b      	ldrb	r3, [r7, #5]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a38:	79ba      	ldrb	r2, [r7, #6]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002a40:	605a      	str	r2, [r3, #4]
    getTwosComplement(&DPS_coef.C1, 12);
 8002a42:	210c      	movs	r1, #12
 8002a44:	4831      	ldr	r0, [pc, #196]	; (8002b0c <DPS368_read_coeff+0x12c>)
 8002a46:	f7ff ffa9 	bl	800299c <getTwosComplement>
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	031a      	lsls	r2, r3, #12
 8002a4e:	7a3b      	ldrb	r3, [r7, #8]
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	431a      	orrs	r2, r3
 8002a54:	7a7b      	ldrb	r3, [r7, #9]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002a64:	609a      	str	r2, [r3, #8]
    getTwosComplement(&DPS_coef.C00, 20);
 8002a66:	2114      	movs	r1, #20
 8002a68:	4829      	ldr	r0, [pc, #164]	; (8002b10 <DPS368_read_coeff+0x130>)
 8002a6a:	f7ff ff97 	bl	800299c <getTwosComplement>
    DPS_coef.C10 = (((uint32_t)regs[5] & 0x0F) << 16) | ((uint32_t)regs[6] << 8) | (uint32_t)regs[7];
 8002a6e:	7a7b      	ldrb	r3, [r7, #9]
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002a76:	7abb      	ldrb	r3, [r7, #10]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	7afa      	ldrb	r2, [r7, #11]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002a84:	60da      	str	r2, [r3, #12]
    getTwosComplement(&DPS_coef.C10, 20);
 8002a86:	2114      	movs	r1, #20
 8002a88:	4822      	ldr	r0, [pc, #136]	; (8002b14 <DPS368_read_coeff+0x134>)
 8002a8a:	f7ff ff87 	bl	800299c <getTwosComplement>

    DPS_coef.C01 = ((uint32_t)regs[8] << 8) | (uint32_t)regs[9];
 8002a8e:	7b3b      	ldrb	r3, [r7, #12]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	7b7a      	ldrb	r2, [r7, #13]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002a9a:	611a      	str	r2, [r3, #16]
    getTwosComplement(&DPS_coef.C01, 16);
 8002a9c:	2110      	movs	r1, #16
 8002a9e:	481e      	ldr	r0, [pc, #120]	; (8002b18 <DPS368_read_coeff+0x138>)
 8002aa0:	f7ff ff7c 	bl	800299c <getTwosComplement>

    DPS_coef.C11 = ((uint32_t)regs[10] << 8) | (uint32_t)regs[11];
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002ab0:	615a      	str	r2, [r3, #20]
    getTwosComplement(&DPS_coef.C11, 16);
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	4819      	ldr	r0, [pc, #100]	; (8002b1c <DPS368_read_coeff+0x13c>)
 8002ab6:	f7ff ff71 	bl	800299c <getTwosComplement>
    DPS_coef.C20 = ((uint32_t)regs[12] << 8) | (uint32_t)regs[13];
 8002aba:	7c3b      	ldrb	r3, [r7, #16]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	7c7a      	ldrb	r2, [r7, #17]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002ac6:	619a      	str	r2, [r3, #24]
    getTwosComplement(&DPS_coef.C20, 16);
 8002ac8:	2110      	movs	r1, #16
 8002aca:	4815      	ldr	r0, [pc, #84]	; (8002b20 <DPS368_read_coeff+0x140>)
 8002acc:	f7ff ff66 	bl	800299c <getTwosComplement>
    DPS_coef.C21 = ((uint32_t)regs[14] << 8) | (uint32_t)regs[15];
 8002ad0:	7cbb      	ldrb	r3, [r7, #18]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	7cfa      	ldrb	r2, [r7, #19]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002adc:	61da      	str	r2, [r3, #28]
    getTwosComplement(&DPS_coef.C21, 16);
 8002ade:	2110      	movs	r1, #16
 8002ae0:	4810      	ldr	r0, [pc, #64]	; (8002b24 <DPS368_read_coeff+0x144>)
 8002ae2:	f7ff ff5b 	bl	800299c <getTwosComplement>
    DPS_coef.C30 = ((uint32_t)regs[16] << 8) | (uint32_t)regs[17];
 8002ae6:	7d3b      	ldrb	r3, [r7, #20]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	7d7a      	ldrb	r2, [r7, #21]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <DPS368_read_coeff+0x128>)
 8002af2:	621a      	str	r2, [r3, #32]
    getTwosComplement(&DPS_coef.C30, 16);
 8002af4:	2110      	movs	r1, #16
 8002af6:	480c      	ldr	r0, [pc, #48]	; (8002b28 <DPS368_read_coeff+0x148>)
 8002af8:	f7ff ff50 	bl	800299c <getTwosComplement>
//    printf("C0: %ld   C1: %ld\r\n",DPS_coef.C0,DPS_coef.C1);
//    printf("C00: %ld   C01: %ld\r\n",DPS_coef.C00,DPS_coef.C01);
//    printf("C10: %ld   C11: %ld\r\n",DPS_coef.C10,DPS_coef.C11);
//    printf("C20: %ld   C21: %ld\r\n",DPS_coef.C20,DPS_coef.C21);
//    printf("C30: %ld\r\n",DPS_coef.C30);
}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200005b8 	.word	0x200005b8
 8002b08:	2000046c 	.word	0x2000046c
 8002b0c:	20000470 	.word	0x20000470
 8002b10:	20000474 	.word	0x20000474
 8002b14:	20000478 	.word	0x20000478
 8002b18:	2000047c 	.word	0x2000047c
 8002b1c:	20000480 	.word	0x20000480
 8002b20:	20000484 	.word	0x20000484
 8002b24:	20000488 	.word	0x20000488
 8002b28:	2000048c 	.word	0x2000048c

08002b2c <DPS368_fifo>:
	printbinaryMSB(reg);
//	UNSET_BME_DPS();
}

void DPS368_fifo(uint8_t endis)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af04      	add	r7, sp, #16
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	SET_DPS368();
 8002b36:	f001 fe2b 	bl	8004790 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002b3a:	23fa      	movs	r3, #250	; 0xfa
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	f107 030f 	add.w	r3, r7, #15
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	2209      	movs	r2, #9
 8002b4c:	21ee      	movs	r1, #238	; 0xee
 8002b4e:	4810      	ldr	r0, [pc, #64]	; (8002b90 <DPS368_fifo+0x64>)
 8002b50:	f005 f85c 	bl	8007c0c <HAL_I2C_Mem_Read>
//	printf("(fifo) CFG REG READ (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	setBit(&reg,1,endis);
 8002b54:	79fa      	ldrb	r2, [r7, #7]
 8002b56:	f107 030f 	add.w	r3, r7, #15
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 fd2d 	bl	80045bc <setBit>
//	printf("SET FIFO EN\r\n");
//	printf("(fifo) CFG REG WRITE (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002b62:	23fa      	movs	r3, #250	; 0xfa
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	2301      	movs	r3, #1
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	f107 030f 	add.w	r3, r7, #15
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2301      	movs	r3, #1
 8002b72:	2209      	movs	r2, #9
 8002b74:	21ee      	movs	r1, #238	; 0xee
 8002b76:	4806      	ldr	r0, [pc, #24]	; (8002b90 <DPS368_fifo+0x64>)
 8002b78:	f004 ff34 	bl	80079e4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f002 f90d 	bl	8004d9c <HAL_Delay>
	UNSET_BME_DPS();
 8002b82:	f001 fe0c 	bl	800479e <UNSET_BME_DPS>
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200005b8 	.word	0x200005b8

08002b94 <DPS368_conf_int>:

void DPS368_conf_int(uint8_t ints)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af04      	add	r7, sp, #16
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	SET_DPS368();
 8002b9e:	f001 fdf7 	bl	8004790 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002ba2:	23fa      	movs	r3, #250	; 0xfa
 8002ba4:	9302      	str	r3, [sp, #8]
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	f107 030f 	add.w	r3, r7, #15
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	2209      	movs	r2, #9
 8002bb4:	21ee      	movs	r1, #238	; 0xee
 8002bb6:	4810      	ldr	r0, [pc, #64]	; (8002bf8 <DPS368_conf_int+0x64>)
 8002bb8:	f005 f828 	bl	8007c0c <HAL_I2C_Mem_Read>
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	modifyRegister(&reg, 0xF0, ints);
 8002bbc:	79fa      	ldrb	r2, [r7, #7]
 8002bbe:	f107 030f 	add.w	r3, r7, #15
 8002bc2:	21f0      	movs	r1, #240	; 0xf0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fd28 	bl	800461a <modifyRegister>
//	printf("SET INT \r\n");
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002bca:	23fa      	movs	r3, #250	; 0xfa
 8002bcc:	9302      	str	r3, [sp, #8]
 8002bce:	2301      	movs	r3, #1
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	f107 030f 	add.w	r3, r7, #15
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	2209      	movs	r2, #9
 8002bdc:	21ee      	movs	r1, #238	; 0xee
 8002bde:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <DPS368_conf_int+0x64>)
 8002be0:	f004 ff00 	bl	80079e4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f002 f8d9 	bl	8004d9c <HAL_Delay>
	UNSET_BME_DPS();
 8002bea:	f001 fdd8 	bl	800479e <UNSET_BME_DPS>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200005b8 	.word	0x200005b8

08002bfc <DPS368_temp_source>:

void DPS368_temp_source()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af04      	add	r7, sp, #16
	uint8_t reg, reg_mod;
	SET_DPS368();
 8002c02:	f001 fdc5 	bl	8004790 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8002c06:	23fa      	movs	r3, #250	; 0xfa
 8002c08:	9302      	str	r3, [sp, #8]
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	1dbb      	adds	r3, r7, #6
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2301      	movs	r3, #1
 8002c14:	2207      	movs	r2, #7
 8002c16:	21ee      	movs	r1, #238	; 0xee
 8002c18:	4818      	ldr	r0, [pc, #96]	; (8002c7c <DPS368_temp_source+0x80>)
 8002c1a:	f004 fff7 	bl	8007c0c <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x07 (hex) (NOMOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x28, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002c1e:	23fa      	movs	r3, #250	; 0xfa
 8002c20:	9302      	str	r3, [sp, #8]
 8002c22:	2301      	movs	r3, #1
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	1dfb      	adds	r3, r7, #7
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	2228      	movs	r2, #40	; 0x28
 8002c2e:	21ee      	movs	r1, #238	; 0xee
 8002c30:	4812      	ldr	r0, [pc, #72]	; (8002c7c <DPS368_temp_source+0x80>)
 8002c32:	f004 ffeb 	bl	8007c0c <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x28 (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	if((reg & 0x80) == 0) {
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db06      	blt.n	8002c4c <DPS368_temp_source+0x50>
//		printf("Internal Temp\r\n");
		setBit(&reg_mod, 7, 0);
 8002c3e:	1dbb      	adds	r3, r7, #6
 8002c40:	2200      	movs	r2, #0
 8002c42:	2107      	movs	r1, #7
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 fcb9 	bl	80045bc <setBit>
 8002c4a:	e005      	b.n	8002c58 <DPS368_temp_source+0x5c>
	} else {
//		printf("External Temp\r\n");
		setBit(&reg_mod, 7, 1);
 8002c4c:	1dbb      	adds	r3, r7, #6
 8002c4e:	2201      	movs	r2, #1
 8002c50:	2107      	movs	r1, #7
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fcb2 	bl	80045bc <setBit>
		}
//	printf("CFG TEMP SRC 0x07 (hex) (MOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8002c58:	23fa      	movs	r3, #250	; 0xfa
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	1dbb      	adds	r3, r7, #6
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2301      	movs	r3, #1
 8002c66:	2207      	movs	r2, #7
 8002c68:	21ee      	movs	r1, #238	; 0xee
 8002c6a:	4804      	ldr	r0, [pc, #16]	; (8002c7c <DPS368_temp_source+0x80>)
 8002c6c:	f004 feba 	bl	80079e4 <HAL_I2C_Mem_Write>
	UNSET_BME_DPS();
 8002c70:	f001 fd95 	bl	800479e <UNSET_BME_DPS>
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200005b8 	.word	0x200005b8

08002c80 <DPS368_conf_temp>:



void DPS368_conf_temp(uint8_t ovr, uint8_t rate)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af04      	add	r7, sp, #16
 8002c86:	4603      	mov	r3, r0
 8002c88:	460a      	mov	r2, r1
 8002c8a:	71fb      	strb	r3, [r7, #7]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	SET_DPS368();
 8002c90:	f001 fd7e 	bl	8004790 <SET_DPS368>
	reg = ovr + rate;
 8002c94:	79fa      	ldrb	r2, [r7, #7]
 8002c96:	79bb      	ldrb	r3, [r7, #6]
 8002c98:	4413      	add	r3, r2
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002c9e:	23fa      	movs	r3, #250	; 0xfa
 8002ca0:	9302      	str	r3, [sp, #8]
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	f107 030f 	add.w	r3, r7, #15
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2301      	movs	r3, #1
 8002cae:	2207      	movs	r2, #7
 8002cb0:	21ee      	movs	r1, #238	; 0xee
 8002cb2:	4835      	ldr	r0, [pc, #212]	; (8002d88 <DPS368_conf_temp+0x108>)
 8002cb4:	f004 fe96 	bl	80079e4 <HAL_I2C_Mem_Write>
    switch (ovr)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2b07      	cmp	r3, #7
 8002cbc:	d83a      	bhi.n	8002d34 <DPS368_conf_temp+0xb4>
 8002cbe:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <DPS368_conf_temp+0x44>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002ce5 	.word	0x08002ce5
 8002cc8:	08002cef 	.word	0x08002cef
 8002ccc:	08002cf9 	.word	0x08002cf9
 8002cd0:	08002d03 	.word	0x08002d03
 8002cd4:	08002d0d 	.word	0x08002d0d
 8002cd8:	08002d17 	.word	0x08002d17
 8002cdc:	08002d21 	.word	0x08002d21
 8002ce0:	08002d2b 	.word	0x08002d2b
    {
        case DPS_OVERSAMPLE_1:
            Kt_coef = DPS_OSR_SF_1;
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <DPS368_conf_temp+0x10c>)
 8002ce6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cea:	601a      	str	r2, [r3, #0]
            break;
 8002cec:	e022      	b.n	8002d34 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_2:
        	Kt_coef = DPS_OSR_SF_2;
 8002cee:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <DPS368_conf_temp+0x10c>)
 8002cf0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8002cf4:	601a      	str	r2, [r3, #0]
            break;
 8002cf6:	e01d      	b.n	8002d34 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_4:
        	Kt_coef = DPS_OSR_SF_4;
 8002cf8:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <DPS368_conf_temp+0x10c>)
 8002cfa:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8002cfe:	601a      	str	r2, [r3, #0]
            break;
 8002d00:	e018      	b.n	8002d34 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_8:
        	Kt_coef = DPS_OSR_SF_8;
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <DPS368_conf_temp+0x10c>)
 8002d04:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8002d08:	601a      	str	r2, [r3, #0]
            break;
 8002d0a:	e013      	b.n	8002d34 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_16:
        	Kt_coef = DPS_OSR_SF_16;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <DPS368_conf_temp+0x10c>)
 8002d0e:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8002d12:	601a      	str	r2, [r3, #0]
            break;
 8002d14:	e00e      	b.n	8002d34 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_32:
        	Kt_coef = DPS_OSR_SF_32;
 8002d16:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <DPS368_conf_temp+0x10c>)
 8002d18:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8002d1c:	601a      	str	r2, [r3, #0]
            break;
 8002d1e:	e009      	b.n	8002d34 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_64:
        	Kt_coef = DPS_OSR_SF_64;
 8002d20:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <DPS368_conf_temp+0x10c>)
 8002d22:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8002d26:	601a      	str	r2, [r3, #0]
            break;
 8002d28:	e004      	b.n	8002d34 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_128:
        	Kt_coef = DPS_OSR_SF_128;
 8002d2a:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <DPS368_conf_temp+0x10c>)
 8002d2c:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8002d30:	601a      	str	r2, [r3, #0]
            break;
 8002d32:	bf00      	nop
    }
//    printf("Kt_coef set: %lu\r\n",Kt_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002d34:	23fa      	movs	r3, #250	; 0xfa
 8002d36:	9302      	str	r3, [sp, #8]
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	f107 030f 	add.w	r3, r7, #15
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2301      	movs	r3, #1
 8002d44:	2209      	movs	r2, #9
 8002d46:	21ee      	movs	r1, #238	; 0xee
 8002d48:	480f      	ldr	r0, [pc, #60]	; (8002d88 <DPS368_conf_temp+0x108>)
 8002d4a:	f004 ff5f 	bl	8007c0c <HAL_I2C_Mem_Read>
    if(ovr > DPS_OSR_SF_8) setBit(&reg, 3, 1);
    else setBit(&reg, 3, 0);
 8002d4e:	f107 030f 	add.w	r3, r7, #15
 8002d52:	2200      	movs	r2, #0
 8002d54:	2103      	movs	r1, #3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 fc30 	bl	80045bc <setBit>
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002d5c:	23fa      	movs	r3, #250	; 0xfa
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	2301      	movs	r3, #1
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	f107 030f 	add.w	r3, r7, #15
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	2209      	movs	r2, #9
 8002d6e:	21ee      	movs	r1, #238	; 0xee
 8002d70:	4805      	ldr	r0, [pc, #20]	; (8002d88 <DPS368_conf_temp+0x108>)
 8002d72:	f004 fe37 	bl	80079e4 <HAL_I2C_Mem_Write>

	DPS368_temp_source();
 8002d76:	f7ff ff41 	bl	8002bfc <DPS368_temp_source>
	UNSET_BME_DPS();
 8002d7a:	f001 fd10 	bl	800479e <UNSET_BME_DPS>
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200005b8 	.word	0x200005b8
 8002d8c:	20000490 	.word	0x20000490

08002d90 <DPS368_temp_correct>:
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
	UNSET_BME_DPS();
}

void DPS368_temp_correct()
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af04      	add	r7, sp, #16
	SET_DPS368();
 8002d96:	f001 fcfb 	bl	8004790 <SET_DPS368>
	HAL_StatusTypeDef status;
	uint8_t write_data = 0xA5;
 8002d9a:	23a5      	movs	r3, #165	; 0xa5
 8002d9c:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8002d9e:	23fa      	movs	r3, #250	; 0xfa
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	2301      	movs	r3, #1
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	1dbb      	adds	r3, r7, #6
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2301      	movs	r3, #1
 8002dac:	220e      	movs	r2, #14
 8002dae:	21ee      	movs	r1, #238	; 0xee
 8002db0:	482e      	ldr	r0, [pc, #184]	; (8002e6c <DPS368_temp_correct+0xdc>)
 8002db2:	f004 fe17 	bl	80079e4 <HAL_I2C_Mem_Write>
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK) {
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10f      	bne.n	8002de0 <DPS368_temp_correct+0x50>
        write_data = 0x96;
 8002dc0:	2396      	movs	r3, #150	; 0x96
 8002dc2:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8002dc4:	23fa      	movs	r3, #250	; 0xfa
 8002dc6:	9302      	str	r3, [sp, #8]
 8002dc8:	2301      	movs	r3, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	21ee      	movs	r1, #238	; 0xee
 8002dd6:	4825      	ldr	r0, [pc, #148]	; (8002e6c <DPS368_temp_correct+0xdc>)
 8002dd8:	f004 fe04 	bl	80079e4 <HAL_I2C_Mem_Write>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <DPS368_temp_correct+0x76>
        write_data = 0x02;
 8002de6:	2302      	movs	r3, #2
 8002de8:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x62, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8002dea:	23fa      	movs	r3, #250	; 0xfa
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	2301      	movs	r3, #1
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	1dbb      	adds	r3, r7, #6
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	2301      	movs	r3, #1
 8002df8:	2262      	movs	r2, #98	; 0x62
 8002dfa:	21ee      	movs	r1, #238	; 0xee
 8002dfc:	481b      	ldr	r0, [pc, #108]	; (8002e6c <DPS368_temp_correct+0xdc>)
 8002dfe:	f004 fdf1 	bl	80079e4 <HAL_I2C_Mem_Write>
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10f      	bne.n	8002e2c <DPS368_temp_correct+0x9c>
        write_data = 0x00;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8002e10:	23fa      	movs	r3, #250	; 0xfa
 8002e12:	9302      	str	r3, [sp, #8]
 8002e14:	2301      	movs	r3, #1
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	1dbb      	adds	r3, r7, #6
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	220e      	movs	r2, #14
 8002e20:	21ee      	movs	r1, #238	; 0xee
 8002e22:	4812      	ldr	r0, [pc, #72]	; (8002e6c <DPS368_temp_correct+0xdc>)
 8002e24:	f004 fdde 	bl	80079e4 <HAL_I2C_Mem_Write>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <DPS368_temp_correct+0xc2>
        write_data = 0x00;
 8002e32:	2300      	movs	r3, #0
 8002e34:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8002e36:	23fa      	movs	r3, #250	; 0xfa
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	1dbb      	adds	r3, r7, #6
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2301      	movs	r3, #1
 8002e44:	220f      	movs	r2, #15
 8002e46:	21ee      	movs	r1, #238	; 0xee
 8002e48:	4808      	ldr	r0, [pc, #32]	; (8002e6c <DPS368_temp_correct+0xdc>)
 8002e4a:	f004 fdcb 	bl	80079e4 <HAL_I2C_Mem_Write>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
	}
	DPS368_conf_temp(DPS_OVERSAMPLE_1, DPS_RATE_1);
 8002e52:	2100      	movs	r1, #0
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7ff ff13 	bl	8002c80 <DPS368_conf_temp>
	DPS368_run_mode(MODE_CMD_TEMP);
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	f000 f808 	bl	8002e70 <DPS368_run_mode>
	UNSET_BME_DPS();
 8002e60:	f001 fc9d 	bl	800479e <UNSET_BME_DPS>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	200005b8 	.word	0x200005b8

08002e70 <DPS368_run_mode>:


void DPS368_run_mode(uint8_t mode)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af04      	add	r7, sp, #16
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
	SET_DPS368();
 8002e7a:	f001 fc89 	bl	8004790 <SET_DPS368>
	uint8_t reg;
//	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
//	reg = (reg & 0x0E) | mode;
	reg = mode;
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8002e82:	23fa      	movs	r3, #250	; 0xfa
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	2301      	movs	r3, #1
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	f107 030f 	add.w	r3, r7, #15
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2301      	movs	r3, #1
 8002e92:	2208      	movs	r2, #8
 8002e94:	21ee      	movs	r1, #238	; 0xee
 8002e96:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <DPS368_run_mode+0x40>)
 8002e98:	f004 fda4 	bl	80079e4 <HAL_I2C_Mem_Write>
	HAL_Delay(2);
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f001 ff7d 	bl	8004d9c <HAL_Delay>
	UNSET_BME_DPS();
 8002ea2:	f001 fc7c 	bl	800479e <UNSET_BME_DPS>
}
 8002ea6:	bf00      	nop
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200005b8 	.word	0x200005b8

08002eb4 <DPS368_init>:
    // formula from datasheet (optimized)
    return (((uint32_t)20U) + ((uint32_t)16U << ((uint16_t)osr)));
}

void DPS368_init(uint8_t fifo, uint8_t int_m)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	71fb      	strb	r3, [r7, #7]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	71bb      	strb	r3, [r7, #6]
	DPS368_read_coeff();
 8002ec4:	f7ff fd8c 	bl	80029e0 <DPS368_read_coeff>
	DPS368_conf_int(int_m);
 8002ec8:	79bb      	ldrb	r3, [r7, #6]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fe62 	bl	8002b94 <DPS368_conf_int>
	DPS368_fifo(fifo);
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fe2a 	bl	8002b2c <DPS368_fifo>
	DPS368_run_mode(MODE_IDLE);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7ff ffc9 	bl	8002e70 <DPS368_run_mode>
	DPS368_temp_correct();
 8002ede:	f7ff ff57 	bl	8002d90 <DPS368_temp_correct>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ef2:	f001 fede 	bl	8004cb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ef6:	f000 f9c5 	bl	8003284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002efa:	f000 fc79 	bl	80037f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002efe:	f000 fc59 	bl	80037b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002f02:	f000 fa23 	bl	800334c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002f06:	f000 fabd 	bl	8003484 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002f0a:	f000 fafb 	bl	8003504 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002f0e:	f000 fb39 	bl	8003584 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8002f12:	f000 fbef 	bl	80036f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002f16:	f000 fc1d 	bl	8003754 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002f1a:	f000 fa87 	bl	800342c <MX_CRC_Init>
  MX_TIM16_Init();
 8002f1e:	f000 fb71 	bl	8003604 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002f22:	f000 f9fe 	bl	8003322 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);	// LED2 na PWM
 8002f26:	2100      	movs	r1, #0
 8002f28:	48bc      	ldr	r0, [pc, #752]	; (800321c <main+0x330>)
 8002f2a:	f006 fea7 	bl	8009c7c <HAL_TIM_PWM_Start>
  HAL_UART_RxCpltCallback(&huart1); //CLI
 8002f2e:	48bc      	ldr	r0, [pc, #752]	; (8003220 <main+0x334>)
 8002f30:	f7fe ffec 	bl	8001f0c <HAL_UART_RxCpltCallback>
  HAL_UART_RxCpltCallback(&huart2); //SIM
 8002f34:	48bb      	ldr	r0, [pc, #748]	; (8003224 <main+0x338>)
 8002f36:	f7fe ffe9 	bl	8001f0c <HAL_UART_RxCpltCallback>
  check_powerOn();
 8002f3a:	f001 fa17 	bl	800436c <check_powerOn>
  printf("\r\n\r\n\r\nInitializing ...\r\n");
 8002f3e:	48ba      	ldr	r0, [pc, #744]	; (8003228 <main+0x33c>)
 8002f40:	f00a fb22 	bl	800d588 <puts>
  if (EEPROM_Load_config()==0) {printf("Config loaded OK \r\n");};
 8002f44:	f7fe fa1a 	bl	800137c <EEPROM_Load_config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <main+0x68>
 8002f4e:	48b7      	ldr	r0, [pc, #732]	; (800322c <main+0x340>)
 8002f50:	f00a fb1a 	bl	800d588 <puts>
  charger_state = BQ25798_check();
 8002f54:	f7fe fe3a 	bl	8001bcc <BQ25798_check>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4bb4      	ldr	r3, [pc, #720]	; (8003230 <main+0x344>)
 8002f5e:	701a      	strb	r2, [r3, #0]
  if (charger_state) {
 8002f60:	4bb3      	ldr	r3, [pc, #716]	; (8003230 <main+0x344>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <main+0x9a>
	  printf("Configure charger \r\n");
 8002f6a:	48b2      	ldr	r0, [pc, #712]	; (8003234 <main+0x348>)
 8002f6c:	f00a fb0c 	bl	800d588 <puts>
	  BQ25798_Sys_Min_Voltage_write(3); 	// 3250mV
 8002f70:	2003      	movs	r0, #3
 8002f72:	f7fe ff59 	bl	8001e28 <BQ25798_Sys_Min_Voltage_write>
	  BQ25798_Chr_Volt_Limit_write(4200); 	// 4200mV
 8002f76:	f241 0068 	movw	r0, #4200	; 0x1068
 8002f7a:	f7fe ff6d 	bl	8001e58 <BQ25798_Chr_Volt_Limit_write>
	  BQ25798_Chr_Curr_Limit_write(2000); 	// 2000mA
 8002f7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f82:	f7fe ff8b 	bl	8001e9c <BQ25798_Chr_Curr_Limit_write>
  }
  LED1_ON();
 8002f86:	2200      	movs	r2, #0
 8002f88:	2120      	movs	r1, #32
 8002f8a:	48ab      	ldr	r0, [pc, #684]	; (8003238 <main+0x34c>)
 8002f8c:	f004 fa7e 	bl	800748c <HAL_GPIO_WritePin>
  LED2_OFF();
 8002f90:	2000      	movs	r0, #0
 8002f92:	f001 f9d9 	bl	8004348 <setLed2>
  ADC_DMA_Start();
 8002f96:	f7fe fb83 	bl	80016a0 <ADC_DMA_Start>
  uint32_t ticks1s = HAL_GetTick();
 8002f9a:	f001 fef3 	bl	8004d84 <HAL_GetTick>
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t ticks30ms = HAL_GetTick();
 8002fa0:	f001 fef0 	bl	8004d84 <HAL_GetTick>
 8002fa4:	6038      	str	r0, [r7, #0]
  I2C2TCA_RST();
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb0:	f004 fa6c 	bl	800748c <HAL_GPIO_WritePin>
  TMP117_temp_sensor.sensor_present = TMP117_check();
 8002fb4:	f001 fbfa 	bl	80047ac <TMP117_check>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	b2d9      	uxtb	r1, r3
 8002fc0:	4a9e      	ldr	r2, [pc, #632]	; (800323c <main+0x350>)
 8002fc2:	7813      	ldrb	r3, [r2, #0]
 8002fc4:	f361 0300 	bfi	r3, r1, #0, #1
 8002fc8:	7013      	strb	r3, [r2, #0]
  MS8607_temp_sensor.sensor_present = MS8607_check();
 8002fca:	f001 fc27 	bl	800481c <MS8607_check>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	b2d9      	uxtb	r1, r3
 8002fd6:	4a9a      	ldr	r2, [pc, #616]	; (8003240 <main+0x354>)
 8002fd8:	7813      	ldrb	r3, [r2, #0]
 8002fda:	f361 0300 	bfi	r3, r1, #0, #1
 8002fde:	7013      	strb	r3, [r2, #0]
  if(MS8607_temp_sensor.sensor_present) {
 8002fe0:	4b97      	ldr	r3, [pc, #604]	; (8003240 <main+0x354>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <main+0x118>
	  MS8607_press_sensor.sensor_present = 1;
 8002fee:	4a95      	ldr	r2, [pc, #596]	; (8003244 <main+0x358>)
 8002ff0:	7813      	ldrb	r3, [r2, #0]
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	7013      	strb	r3, [r2, #0]
	  MS8607_hum_sensor.sensor_present = 1;
 8002ff8:	4a93      	ldr	r2, [pc, #588]	; (8003248 <main+0x35c>)
 8002ffa:	7813      	ldrb	r3, [r2, #0]
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	7013      	strb	r3, [r2, #0]
 8003002:	e009      	b.n	8003018 <main+0x12c>
  } else {
	  MS8607_press_sensor.sensor_present = 0;
 8003004:	4a8f      	ldr	r2, [pc, #572]	; (8003244 <main+0x358>)
 8003006:	7813      	ldrb	r3, [r2, #0]
 8003008:	f36f 0300 	bfc	r3, #0, #1
 800300c:	7013      	strb	r3, [r2, #0]
	  MS8607_hum_sensor.sensor_present = 0;
 800300e:	4a8e      	ldr	r2, [pc, #568]	; (8003248 <main+0x35c>)
 8003010:	7813      	ldrb	r3, [r2, #0]
 8003012:	f36f 0300 	bfc	r3, #0, #1
 8003016:	7013      	strb	r3, [r2, #0]
  }
  SHTC3_temp_sensor.sensor_present = SHTC3_check();
 8003018:	f001 fc58 	bl	80048cc <SHTC3_check>
 800301c:	4603      	mov	r3, r0
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	b2d9      	uxtb	r1, r3
 8003024:	4a89      	ldr	r2, [pc, #548]	; (800324c <main+0x360>)
 8003026:	7813      	ldrb	r3, [r2, #0]
 8003028:	f361 0300 	bfi	r3, r1, #0, #1
 800302c:	7013      	strb	r3, [r2, #0]
  if(SHTC3_temp_sensor.sensor_present) SHTC3_hum_sensor.sensor_present = 1; else SHTC3_hum_sensor.sensor_present = 0;
 800302e:	4b87      	ldr	r3, [pc, #540]	; (800324c <main+0x360>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <main+0x15c>
 800303c:	4a84      	ldr	r2, [pc, #528]	; (8003250 <main+0x364>)
 800303e:	7813      	ldrb	r3, [r2, #0]
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	7013      	strb	r3, [r2, #0]
 8003046:	e004      	b.n	8003052 <main+0x166>
 8003048:	4a81      	ldr	r2, [pc, #516]	; (8003250 <main+0x364>)
 800304a:	7813      	ldrb	r3, [r2, #0]
 800304c:	f36f 0300 	bfc	r3, #0, #1
 8003050:	7013      	strb	r3, [r2, #0]

  BME280_temp_sensor.sensor_present = BME280_check();
 8003052:	f001 fd6f 	bl	8004b34 <BME280_check>
 8003056:	4603      	mov	r3, r0
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	b2d9      	uxtb	r1, r3
 800305e:	4a7d      	ldr	r2, [pc, #500]	; (8003254 <main+0x368>)
 8003060:	7813      	ldrb	r3, [r2, #0]
 8003062:	f361 0300 	bfi	r3, r1, #0, #1
 8003066:	7013      	strb	r3, [r2, #0]
  if(BME280_temp_sensor.sensor_present) {
 8003068:	4b7a      	ldr	r3, [pc, #488]	; (8003254 <main+0x368>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <main+0x1a0>
	  BME280_press_sensor.sensor_present = 1;
 8003076:	4a78      	ldr	r2, [pc, #480]	; (8003258 <main+0x36c>)
 8003078:	7813      	ldrb	r3, [r2, #0]
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	7013      	strb	r3, [r2, #0]
	  BME280_hum_sensor.sensor_present = 1;
 8003080:	4a76      	ldr	r2, [pc, #472]	; (800325c <main+0x370>)
 8003082:	7813      	ldrb	r3, [r2, #0]
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	7013      	strb	r3, [r2, #0]
 800308a:	e009      	b.n	80030a0 <main+0x1b4>
  } else {
	  BME280_press_sensor.sensor_present = 0;
 800308c:	4a72      	ldr	r2, [pc, #456]	; (8003258 <main+0x36c>)
 800308e:	7813      	ldrb	r3, [r2, #0]
 8003090:	f36f 0300 	bfc	r3, #0, #1
 8003094:	7013      	strb	r3, [r2, #0]
	  BME280_hum_sensor.sensor_present = 0;
 8003096:	4a71      	ldr	r2, [pc, #452]	; (800325c <main+0x370>)
 8003098:	7813      	ldrb	r3, [r2, #0]
 800309a:	f36f 0300 	bfc	r3, #0, #1
 800309e:	7013      	strb	r3, [r2, #0]
  }

  DPS368_temp_sensor.sensor_present = DPS368_check();
 80030a0:	f7ff fc3e 	bl	8002920 <DPS368_check>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	b2d9      	uxtb	r1, r3
 80030ac:	4a6c      	ldr	r2, [pc, #432]	; (8003260 <main+0x374>)
 80030ae:	7813      	ldrb	r3, [r2, #0]
 80030b0:	f361 0300 	bfi	r3, r1, #0, #1
 80030b4:	7013      	strb	r3, [r2, #0]
  if(DPS368_temp_sensor.sensor_present) {
 80030b6:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <main+0x374>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <main+0x1ee>
	  DPS368_press_sensor.sensor_present = 1;
 80030c4:	4a67      	ldr	r2, [pc, #412]	; (8003264 <main+0x378>)
 80030c6:	7813      	ldrb	r3, [r2, #0]
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	7013      	strb	r3, [r2, #0]
	  DPS368_hum_sensor.sensor_present = 1;
 80030ce:	4a66      	ldr	r2, [pc, #408]	; (8003268 <main+0x37c>)
 80030d0:	7813      	ldrb	r3, [r2, #0]
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	7013      	strb	r3, [r2, #0]
 80030d8:	e009      	b.n	80030ee <main+0x202>
  } else {
	  DPS368_press_sensor.sensor_present = 0;
 80030da:	4a62      	ldr	r2, [pc, #392]	; (8003264 <main+0x378>)
 80030dc:	7813      	ldrb	r3, [r2, #0]
 80030de:	f36f 0300 	bfc	r3, #0, #1
 80030e2:	7013      	strb	r3, [r2, #0]
	  DPS368_hum_sensor.sensor_present = 0;
 80030e4:	4a60      	ldr	r2, [pc, #384]	; (8003268 <main+0x37c>)
 80030e6:	7813      	ldrb	r3, [r2, #0]
 80030e8:	f36f 0300 	bfc	r3, #0, #1
 80030ec:	7013      	strb	r3, [r2, #0]
  }

  BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_OFF);
 80030ee:	2300      	movs	r3, #0
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2303      	movs	r3, #3
 80030f4:	2203      	movs	r2, #3
 80030f6:	2103      	movs	r1, #3
 80030f8:	2001      	movs	r0, #1
 80030fa:	f001 fd59 	bl	8004bb0 <BME280_init_config>

  DPS368_init(FIFO_DIS, INT_NONE);
 80030fe:	2100      	movs	r1, #0
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff fed7 	bl	8002eb4 <DPS368_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  thp_loop();
 8003106:	f001 f9a7 	bl	8004458 <thp_loop>
	  if(HAL_GetTick()-ticks1s >= 10000)
 800310a:	f001 fe3b 	bl	8004d84 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f242 720f 	movw	r2, #9999	; 0x270f
 8003118:	4293      	cmp	r3, r2
 800311a:	d96d      	bls.n	80031f8 <main+0x30c>
	  {
		  if(cyclic) {
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <main+0x380>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d068      	beq.n	80031f8 <main+0x30c>
			  ticks1s = HAL_GetTick();
 8003126:	f001 fe2d 	bl	8004d84 <HAL_GetTick>
 800312a:	6078      	str	r0, [r7, #4]
//			  TMP117_temp_sensor.temperature=TMP117_get_temp(avg8);
//			  MS8607_temp_sensor.temperature=MS8607_get_temp();
//			  MS8607_press_sensor.pressure=MS8607_get_press();
			  SHTC3_temp_sensor.temperature=SHTC3_get_temp(0);
 800312c:	2000      	movs	r0, #0
 800312e:	f001 fc2d 	bl	800498c <SHTC3_get_temp>
 8003132:	eef0 7a40 	vmov.f32	s15, s0
 8003136:	4b45      	ldr	r3, [pc, #276]	; (800324c <main+0x360>)
 8003138:	ee17 2a90 	vmov	r2, s15
 800313c:	f8c3 2001 	str.w	r2, [r3, #1]
			  SHTC3_hum_sensor.humidity=SHTC3_get_hum(0);
 8003140:	2000      	movs	r0, #0
 8003142:	f001 fc8f 	bl	8004a64 <SHTC3_get_hum>
 8003146:	eef0 7a40 	vmov.f32	s15, s0
 800314a:	4b41      	ldr	r3, [pc, #260]	; (8003250 <main+0x364>)
 800314c:	ee17 2a90 	vmov	r2, s15
 8003150:	f8c3 2001 	str.w	r2, [r3, #1]
//			  BME280_temp_sensor.temperature = BME280_get_temp();
//			  BME280_press_sensor.pressure = BME280_get_press();
//			  printf("Start TEMP DPS\r\n");
//			  DPS368_temp_sensor.temperature = DPS368_get_temp_cmd(DPS_OVERSAMPLE_8);
//			  DPS368_press_sensor.pressure = DPS368_get_press_cmd(DPS_OVERSAMPLE_8);
			  printf("SHTC3 Normal\r\n");
 8003154:	4846      	ldr	r0, [pc, #280]	; (8003270 <main+0x384>)
 8003156:	f00a fa17 	bl	800d588 <puts>
			  printf("SHTC3: %.3f", SHTC3_temp_sensor.temperature);
 800315a:	4b3c      	ldr	r3, [pc, #240]	; (800324c <main+0x360>)
 800315c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f9f1 	bl	8000548 <__aeabi_f2d>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4842      	ldr	r0, [pc, #264]	; (8003274 <main+0x388>)
 800316c:	f00a f9a6 	bl	800d4bc <iprintf>
			  printf("      ");
 8003170:	4841      	ldr	r0, [pc, #260]	; (8003278 <main+0x38c>)
 8003172:	f00a f9a3 	bl	800d4bc <iprintf>
			  printf("SHTC3: %.3f", SHTC3_hum_sensor.humidity);
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <main+0x364>)
 8003178:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9e3 	bl	8000548 <__aeabi_f2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	483b      	ldr	r0, [pc, #236]	; (8003274 <main+0x388>)
 8003188:	f00a f998 	bl	800d4bc <iprintf>
			  printf("\r\n");
 800318c:	483b      	ldr	r0, [pc, #236]	; (800327c <main+0x390>)
 800318e:	f00a f9fb 	bl	800d588 <puts>



			  SHTC3_temp_sensor.temperature=SHTC3_get_temp(1);
 8003192:	2001      	movs	r0, #1
 8003194:	f001 fbfa 	bl	800498c <SHTC3_get_temp>
 8003198:	eef0 7a40 	vmov.f32	s15, s0
 800319c:	4b2b      	ldr	r3, [pc, #172]	; (800324c <main+0x360>)
 800319e:	ee17 2a90 	vmov	r2, s15
 80031a2:	f8c3 2001 	str.w	r2, [r3, #1]
			  SHTC3_hum_sensor.humidity=SHTC3_get_hum(1);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f001 fc5c 	bl	8004a64 <SHTC3_get_hum>
 80031ac:	eef0 7a40 	vmov.f32	s15, s0
 80031b0:	4b27      	ldr	r3, [pc, #156]	; (8003250 <main+0x364>)
 80031b2:	ee17 2a90 	vmov	r2, s15
 80031b6:	f8c3 2001 	str.w	r2, [r3, #1]

			  printf("SHTC3 LP\r\n");
 80031ba:	4831      	ldr	r0, [pc, #196]	; (8003280 <main+0x394>)
 80031bc:	f00a f9e4 	bl	800d588 <puts>
			  printf("SHTC3: %.3f", SHTC3_temp_sensor.temperature);
 80031c0:	4b22      	ldr	r3, [pc, #136]	; (800324c <main+0x360>)
 80031c2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f9be 	bl	8000548 <__aeabi_f2d>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4828      	ldr	r0, [pc, #160]	; (8003274 <main+0x388>)
 80031d2:	f00a f973 	bl	800d4bc <iprintf>
			  printf("      ");
 80031d6:	4828      	ldr	r0, [pc, #160]	; (8003278 <main+0x38c>)
 80031d8:	f00a f970 	bl	800d4bc <iprintf>
			  printf("SHTC3: %.3f", SHTC3_hum_sensor.humidity);
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <main+0x364>)
 80031de:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f9b0 	bl	8000548 <__aeabi_f2d>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4821      	ldr	r0, [pc, #132]	; (8003274 <main+0x388>)
 80031ee:	f00a f965 	bl	800d4bc <iprintf>
			  printf("\r\n");
 80031f2:	4822      	ldr	r0, [pc, #136]	; (800327c <main+0x390>)
 80031f4:	f00a f9c8 	bl	800d588 <puts>
//			  printf("BME280: %d %d %d \r\n",BME280_temp_sensor.sensor_present, BME280_press_sensor.sensor_present, BME280_hum_sensor.sensor_present);
//			  printf("DPS368: %d %d %d \r\n",DPS368_temp_sensor.sensor_present, DPS368_press_sensor.sensor_present, DPS368_hum_sensor.sensor_present);

		  }
	  }
	  if(HAL_GetTick()-ticks30ms >= 30)
 80031f8:	f001 fdc4 	bl	8004d84 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b1d      	cmp	r3, #29
 8003204:	f67f af7f 	bls.w	8003106 <main+0x21a>
	  {
	  	    ticks30ms = HAL_GetTick();
 8003208:	f001 fdbc 	bl	8004d84 <HAL_GetTick>
 800320c:	6038      	str	r0, [r7, #0]
	  	    LED1_TOGGLE();
 800320e:	2120      	movs	r1, #32
 8003210:	4809      	ldr	r0, [pc, #36]	; (8003238 <main+0x34c>)
 8003212:	f004 f953 	bl	80074bc <HAL_GPIO_TogglePin>
	  	    check_powerOff();
 8003216:	f001 f8e3 	bl	80043e0 <check_powerOff>
	  thp_loop();
 800321a:	e774      	b.n	8003106 <main+0x21a>
 800321c:	20000660 	.word	0x20000660
 8003220:	200006ac 	.word	0x200006ac
 8003224:	20000730 	.word	0x20000730
 8003228:	080106b4 	.word	0x080106b4
 800322c:	080106cc 	.word	0x080106cc
 8003230:	200007b4 	.word	0x200007b4
 8003234:	080106e0 	.word	0x080106e0
 8003238:	48000400 	.word	0x48000400
 800323c:	200007b8 	.word	0x200007b8
 8003240:	200007c4 	.word	0x200007c4
 8003244:	200007f4 	.word	0x200007f4
 8003248:	20000818 	.word	0x20000818
 800324c:	200007d0 	.word	0x200007d0
 8003250:	20000824 	.word	0x20000824
 8003254:	200007dc 	.word	0x200007dc
 8003258:	20000800 	.word	0x20000800
 800325c:	20000830 	.word	0x20000830
 8003260:	200007e8 	.word	0x200007e8
 8003264:	2000080c 	.word	0x2000080c
 8003268:	2000083c 	.word	0x2000083c
 800326c:	20000000 	.word	0x20000000
 8003270:	080106f4 	.word	0x080106f4
 8003274:	08010704 	.word	0x08010704
 8003278:	08010710 	.word	0x08010710
 800327c:	08010718 	.word	0x08010718
 8003280:	0801071c 	.word	0x0801071c

08003284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b096      	sub	sp, #88	; 0x58
 8003288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	2244      	movs	r2, #68	; 0x44
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f00a fa58 	bl	800d748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003298:	463b      	mov	r3, r7
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80032a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80032aa:	f005 fa97 	bl	80087dc <HAL_PWREx_ControlVoltageScaling>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80032b4:	f000 fb8a 	bl	80039cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032c2:	2302      	movs	r3, #2
 80032c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032c6:	2303      	movs	r3, #3
 80032c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80032ce:	230a      	movs	r3, #10
 80032d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80032d2:	2307      	movs	r3, #7
 80032d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032d6:	2302      	movs	r3, #2
 80032d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80032da:	2302      	movs	r3, #2
 80032dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4618      	mov	r0, r3
 80032e4:	f005 fad0 	bl	8008888 <HAL_RCC_OscConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80032ee:	f000 fb6d 	bl	80039cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032f2:	230f      	movs	r3, #15
 80032f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f6:	2303      	movs	r3, #3
 80032f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003306:	463b      	mov	r3, r7
 8003308:	2102      	movs	r1, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f005 fed0 	bl	80090b0 <HAL_RCC_ClockConfig>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003316:	f000 fb59 	bl	80039cc <Error_Handler>
  }
}
 800331a:	bf00      	nop
 800331c:	3758      	adds	r7, #88	; 0x58
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	2100      	movs	r1, #0
 800332a:	2025      	movs	r0, #37	; 0x25
 800332c:	f002 fff3 	bl	8006316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003330:	2025      	movs	r0, #37	; 0x25
 8003332:	f003 f80c 	bl	800634e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	2026      	movs	r0, #38	; 0x26
 800333c:	f002 ffeb 	bl	8006316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003340:	2026      	movs	r0, #38	; 0x26
 8003342:	f003 f804 	bl	800634e <HAL_NVIC_EnableIRQ>
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003352:	463b      	mov	r3, r7
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
 8003360:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003362:	4b2f      	ldr	r3, [pc, #188]	; (8003420 <MX_ADC1_Init+0xd4>)
 8003364:	4a2f      	ldr	r2, [pc, #188]	; (8003424 <MX_ADC1_Init+0xd8>)
 8003366:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8003368:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <MX_ADC1_Init+0xd4>)
 800336a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800336e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <MX_ADC1_Init+0xd4>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003376:	4b2a      	ldr	r3, [pc, #168]	; (8003420 <MX_ADC1_Init+0xd4>)
 8003378:	2200      	movs	r2, #0
 800337a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800337c:	4b28      	ldr	r3, [pc, #160]	; (8003420 <MX_ADC1_Init+0xd4>)
 800337e:	2200      	movs	r2, #0
 8003380:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003382:	4b27      	ldr	r3, [pc, #156]	; (8003420 <MX_ADC1_Init+0xd4>)
 8003384:	2204      	movs	r2, #4
 8003386:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003388:	4b25      	ldr	r3, [pc, #148]	; (8003420 <MX_ADC1_Init+0xd4>)
 800338a:	2200      	movs	r2, #0
 800338c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <MX_ADC1_Init+0xd4>)
 8003390:	2201      	movs	r2, #1
 8003392:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <MX_ADC1_Init+0xd4>)
 8003396:	2201      	movs	r2, #1
 8003398:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800339a:	4b21      	ldr	r3, [pc, #132]	; (8003420 <MX_ADC1_Init+0xd4>)
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80033ae:	4b1c      	ldr	r3, [pc, #112]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033c6:	220c      	movs	r2, #12
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80033ca:	4b15      	ldr	r3, [pc, #84]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033d8:	2201      	movs	r2, #1
 80033da:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033dc:	4810      	ldr	r0, [pc, #64]	; (8003420 <MX_ADC1_Init+0xd4>)
 80033de:	f001 feef 	bl	80051c0 <HAL_ADC_Init>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80033e8:	f000 faf0 	bl	80039cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <MX_ADC1_Init+0xdc>)
 80033ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033f0:	2306      	movs	r3, #6
 80033f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80033f4:	2307      	movs	r3, #7
 80033f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80033f8:	237f      	movs	r3, #127	; 0x7f
 80033fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80033fc:	2304      	movs	r3, #4
 80033fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003404:	463b      	mov	r3, r7
 8003406:	4619      	mov	r1, r3
 8003408:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_ADC1_Init+0xd4>)
 800340a:	f002 f8c3 	bl	8005594 <HAL_ADC_ConfigChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8003414:	f000 fada 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003418:	bf00      	nop
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000494 	.word	0x20000494
 8003424:	50040000 	.word	0x50040000
 8003428:	c7520000 	.word	0xc7520000

0800342c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <MX_CRC_Init+0x50>)
 8003432:	4a13      	ldr	r2, [pc, #76]	; (8003480 <MX_CRC_Init+0x54>)
 8003434:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <MX_CRC_Init+0x50>)
 8003438:	2201      	movs	r2, #1
 800343a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <MX_CRC_Init+0x50>)
 800343e:	2201      	movs	r2, #1
 8003440:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x31;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <MX_CRC_Init+0x50>)
 8003444:	2231      	movs	r2, #49	; 0x31
 8003446:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <MX_CRC_Init+0x50>)
 800344a:	2210      	movs	r2, #16
 800344c:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFF;
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <MX_CRC_Init+0x50>)
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <MX_CRC_Init+0x50>)
 8003456:	2200      	movs	r2, #0
 8003458:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <MX_CRC_Init+0x50>)
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <MX_CRC_Init+0x50>)
 8003462:	2201      	movs	r2, #1
 8003464:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003466:	4805      	ldr	r0, [pc, #20]	; (800347c <MX_CRC_Init+0x50>)
 8003468:	f002 ff92 	bl	8006390 <HAL_CRC_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8003472:	f000 faab 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000540 	.word	0x20000540
 8003480:	40023000 	.word	0x40023000

08003484 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <MX_I2C1_Init+0x74>)
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <MX_I2C1_Init+0x78>)
 800348c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <MX_I2C1_Init+0x74>)
 8003490:	4a1b      	ldr	r2, [pc, #108]	; (8003500 <MX_I2C1_Init+0x7c>)
 8003492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <MX_I2C1_Init+0x74>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <MX_I2C1_Init+0x74>)
 800349c:	2201      	movs	r2, #1
 800349e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034a6:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034be:	480e      	ldr	r0, [pc, #56]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034c0:	f004 f816 	bl	80074f0 <HAL_I2C_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034ca:	f000 fa7f 	bl	80039cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034ce:	2100      	movs	r1, #0
 80034d0:	4809      	ldr	r0, [pc, #36]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034d2:	f005 f8dd 	bl	8008690 <HAL_I2CEx_ConfigAnalogFilter>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80034dc:	f000 fa76 	bl	80039cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034e0:	2100      	movs	r1, #0
 80034e2:	4805      	ldr	r0, [pc, #20]	; (80034f8 <MX_I2C1_Init+0x74>)
 80034e4:	f005 f91f 	bl	8008726 <HAL_I2CEx_ConfigDigitalFilter>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80034ee:	f000 fa6d 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000564 	.word	0x20000564
 80034fc:	40005400 	.word	0x40005400
 8003500:	00301347 	.word	0x00301347

08003504 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003508:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <MX_I2C2_Init+0x74>)
 800350a:	4a1c      	ldr	r2, [pc, #112]	; (800357c <MX_I2C2_Init+0x78>)
 800350c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <MX_I2C2_Init+0x74>)
 8003510:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <MX_I2C2_Init+0x7c>)
 8003512:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003514:	4b18      	ldr	r3, [pc, #96]	; (8003578 <MX_I2C2_Init+0x74>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <MX_I2C2_Init+0x74>)
 800351c:	2201      	movs	r2, #1
 800351e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003520:	4b15      	ldr	r3, [pc, #84]	; (8003578 <MX_I2C2_Init+0x74>)
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003526:	4b14      	ldr	r3, [pc, #80]	; (8003578 <MX_I2C2_Init+0x74>)
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <MX_I2C2_Init+0x74>)
 800352e:	2200      	movs	r2, #0
 8003530:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003532:	4b11      	ldr	r3, [pc, #68]	; (8003578 <MX_I2C2_Init+0x74>)
 8003534:	2200      	movs	r2, #0
 8003536:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <MX_I2C2_Init+0x74>)
 800353a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800353e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003540:	480d      	ldr	r0, [pc, #52]	; (8003578 <MX_I2C2_Init+0x74>)
 8003542:	f003 ffd5 	bl	80074f0 <HAL_I2C_Init>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800354c:	f000 fa3e 	bl	80039cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003550:	2100      	movs	r1, #0
 8003552:	4809      	ldr	r0, [pc, #36]	; (8003578 <MX_I2C2_Init+0x74>)
 8003554:	f005 f89c 	bl	8008690 <HAL_I2CEx_ConfigAnalogFilter>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800355e:	f000 fa35 	bl	80039cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003562:	2100      	movs	r1, #0
 8003564:	4804      	ldr	r0, [pc, #16]	; (8003578 <MX_I2C2_Init+0x74>)
 8003566:	f005 f8de 	bl	8008726 <HAL_I2CEx_ConfigDigitalFilter>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8003570:	f000 fa2c 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}
 8003578:	200005b8 	.word	0x200005b8
 800357c:	40005800 	.word	0x40005800
 8003580:	00301347 	.word	0x00301347

08003584 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <MX_I2C3_Init+0x74>)
 800358a:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <MX_I2C3_Init+0x78>)
 800358c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00301347;
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <MX_I2C3_Init+0x74>)
 8003590:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <MX_I2C3_Init+0x7c>)
 8003592:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <MX_I2C3_Init+0x74>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800359a:	4b17      	ldr	r3, [pc, #92]	; (80035f8 <MX_I2C3_Init+0x74>)
 800359c:	2201      	movs	r2, #1
 800359e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035a0:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <MX_I2C3_Init+0x74>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80035a6:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <MX_I2C3_Init+0x74>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <MX_I2C3_Init+0x74>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <MX_I2C3_Init+0x74>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <MX_I2C3_Init+0x74>)
 80035ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80035c0:	480d      	ldr	r0, [pc, #52]	; (80035f8 <MX_I2C3_Init+0x74>)
 80035c2:	f003 ff95 	bl	80074f0 <HAL_I2C_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80035cc:	f000 f9fe 	bl	80039cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035d0:	2100      	movs	r1, #0
 80035d2:	4809      	ldr	r0, [pc, #36]	; (80035f8 <MX_I2C3_Init+0x74>)
 80035d4:	f005 f85c 	bl	8008690 <HAL_I2CEx_ConfigAnalogFilter>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80035de:	f000 f9f5 	bl	80039cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80035e2:	2100      	movs	r1, #0
 80035e4:	4804      	ldr	r0, [pc, #16]	; (80035f8 <MX_I2C3_Init+0x74>)
 80035e6:	f005 f89e 	bl	8008726 <HAL_I2CEx_ConfigDigitalFilter>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80035f0:	f000 f9ec 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80035f4:	bf00      	nop
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	2000060c 	.word	0x2000060c
 80035fc:	40005c00 	.word	0x40005c00
 8003600:	00301347 	.word	0x00301347

08003604 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b092      	sub	sp, #72	; 0x48
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800360a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	60da      	str	r2, [r3, #12]
 8003618:	611a      	str	r2, [r3, #16]
 800361a:	615a      	str	r2, [r3, #20]
 800361c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800361e:	463b      	mov	r3, r7
 8003620:	222c      	movs	r2, #44	; 0x2c
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f00a f88f 	bl	800d748 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800362a:	4b30      	ldr	r3, [pc, #192]	; (80036ec <MX_TIM16_Init+0xe8>)
 800362c:	4a30      	ldr	r2, [pc, #192]	; (80036f0 <MX_TIM16_Init+0xec>)
 800362e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 312;
 8003630:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <MX_TIM16_Init+0xe8>)
 8003632:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003636:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003638:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <MX_TIM16_Init+0xe8>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256;
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <MX_TIM16_Init+0xe8>)
 8003640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003644:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <MX_TIM16_Init+0xe8>)
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <MX_TIM16_Init+0xe8>)
 800364e:	2200      	movs	r2, #0
 8003650:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <MX_TIM16_Init+0xe8>)
 8003654:	2200      	movs	r2, #0
 8003656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003658:	4824      	ldr	r0, [pc, #144]	; (80036ec <MX_TIM16_Init+0xe8>)
 800365a:	f006 fa57 	bl	8009b0c <HAL_TIM_Base_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8003664:	f000 f9b2 	bl	80039cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003668:	4820      	ldr	r0, [pc, #128]	; (80036ec <MX_TIM16_Init+0xe8>)
 800366a:	f006 faa6 	bl	8009bba <HAL_TIM_PWM_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8003674:	f000 f9aa 	bl	80039cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003678:	2360      	movs	r3, #96	; 0x60
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003680:	2302      	movs	r3, #2
 8003682:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003684:	2300      	movs	r3, #0
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003688:	2304      	movs	r3, #4
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003690:	2300      	movs	r3, #0
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003698:	2200      	movs	r2, #0
 800369a:	4619      	mov	r1, r3
 800369c:	4813      	ldr	r0, [pc, #76]	; (80036ec <MX_TIM16_Init+0xe8>)
 800369e:	f006 fbcb 	bl	8009e38 <HAL_TIM_PWM_ConfigChannel>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80036a8:	f000 f990 	bl	80039cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036bc:	2300      	movs	r3, #0
 80036be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80036ca:	463b      	mov	r3, r7
 80036cc:	4619      	mov	r1, r3
 80036ce:	4807      	ldr	r0, [pc, #28]	; (80036ec <MX_TIM16_Init+0xe8>)
 80036d0:	f006 ffce 	bl	800a670 <HAL_TIMEx_ConfigBreakDeadTime>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80036da:	f000 f977 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80036de:	4803      	ldr	r0, [pc, #12]	; (80036ec <MX_TIM16_Init+0xe8>)
 80036e0:	f000 fbde 	bl	8003ea0 <HAL_TIM_MspPostInit>

}
 80036e4:	bf00      	nop
 80036e6:	3748      	adds	r7, #72	; 0x48
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000660 	.word	0x20000660
 80036f0:	40014400 	.word	0x40014400

080036f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036f8:	4b14      	ldr	r3, [pc, #80]	; (800374c <MX_USART1_UART_Init+0x58>)
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <MX_USART1_UART_Init+0x5c>)
 80036fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <MX_USART1_UART_Init+0x58>)
 8003700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003706:	4b11      	ldr	r3, [pc, #68]	; (800374c <MX_USART1_UART_Init+0x58>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800370c:	4b0f      	ldr	r3, [pc, #60]	; (800374c <MX_USART1_UART_Init+0x58>)
 800370e:	2200      	movs	r2, #0
 8003710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <MX_USART1_UART_Init+0x58>)
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <MX_USART1_UART_Init+0x58>)
 800371a:	220c      	movs	r2, #12
 800371c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <MX_USART1_UART_Init+0x58>)
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003724:	4b09      	ldr	r3, [pc, #36]	; (800374c <MX_USART1_UART_Init+0x58>)
 8003726:	2200      	movs	r2, #0
 8003728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800372a:	4b08      	ldr	r3, [pc, #32]	; (800374c <MX_USART1_UART_Init+0x58>)
 800372c:	2200      	movs	r2, #0
 800372e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <MX_USART1_UART_Init+0x58>)
 8003732:	2200      	movs	r2, #0
 8003734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003736:	4805      	ldr	r0, [pc, #20]	; (800374c <MX_USART1_UART_Init+0x58>)
 8003738:	f007 f812 	bl	800a760 <HAL_UART_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003742:	f000 f943 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	200006ac 	.word	0x200006ac
 8003750:	40013800 	.word	0x40013800

08003754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <MX_USART2_UART_Init+0x58>)
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <MX_USART2_UART_Init+0x5c>)
 800375c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800375e:	4b13      	ldr	r3, [pc, #76]	; (80037ac <MX_USART2_UART_Init+0x58>)
 8003760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <MX_USART2_UART_Init+0x58>)
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800376c:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MX_USART2_UART_Init+0x58>)
 800376e:	2200      	movs	r2, #0
 8003770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <MX_USART2_UART_Init+0x58>)
 8003774:	2200      	movs	r2, #0
 8003776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <MX_USART2_UART_Init+0x58>)
 800377a:	220c      	movs	r2, #12
 800377c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <MX_USART2_UART_Init+0x58>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003784:	4b09      	ldr	r3, [pc, #36]	; (80037ac <MX_USART2_UART_Init+0x58>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <MX_USART2_UART_Init+0x58>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <MX_USART2_UART_Init+0x58>)
 8003792:	2200      	movs	r2, #0
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <MX_USART2_UART_Init+0x58>)
 8003798:	f006 ffe2 	bl	800a760 <HAL_UART_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80037a2:	f000 f913 	bl	80039cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000730 	.word	0x20000730
 80037b0:	40004400 	.word	0x40004400

080037b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <MX_DMA_Init+0x38>)
 80037bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037be:	4a0b      	ldr	r2, [pc, #44]	; (80037ec <MX_DMA_Init+0x38>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6493      	str	r3, [r2, #72]	; 0x48
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <MX_DMA_Init+0x38>)
 80037c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80037d2:	2200      	movs	r2, #0
 80037d4:	2100      	movs	r1, #0
 80037d6:	200b      	movs	r0, #11
 80037d8:	f002 fd9d 	bl	8006316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80037dc:	200b      	movs	r0, #11
 80037de:	f002 fdb6 	bl	800634e <HAL_NVIC_EnableIRQ>

}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000

080037f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f6:	f107 0314 	add.w	r3, r7, #20
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	609a      	str	r2, [r3, #8]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003806:	4b6d      	ldr	r3, [pc, #436]	; (80039bc <MX_GPIO_Init+0x1cc>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	4a6c      	ldr	r2, [pc, #432]	; (80039bc <MX_GPIO_Init+0x1cc>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003812:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <MX_GPIO_Init+0x1cc>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800381e:	4b67      	ldr	r3, [pc, #412]	; (80039bc <MX_GPIO_Init+0x1cc>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	4a66      	ldr	r2, [pc, #408]	; (80039bc <MX_GPIO_Init+0x1cc>)
 8003824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800382a:	4b64      	ldr	r3, [pc, #400]	; (80039bc <MX_GPIO_Init+0x1cc>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003836:	4b61      	ldr	r3, [pc, #388]	; (80039bc <MX_GPIO_Init+0x1cc>)
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	4a60      	ldr	r2, [pc, #384]	; (80039bc <MX_GPIO_Init+0x1cc>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003842:	4b5e      	ldr	r3, [pc, #376]	; (80039bc <MX_GPIO_Init+0x1cc>)
 8003844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800384e:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <MX_GPIO_Init+0x1cc>)
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	4a5a      	ldr	r2, [pc, #360]	; (80039bc <MX_GPIO_Init+0x1cc>)
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800385a:	4b58      	ldr	r3, [pc, #352]	; (80039bc <MX_GPIO_Init+0x1cc>)
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8003866:	2200      	movs	r2, #0
 8003868:	f44f 51cb 	mov.w	r1, #6496	; 0x1960
 800386c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003870:	f003 fe0c 	bl	800748c <HAL_GPIO_WritePin>
                          |BQ_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 8003874:	2200      	movs	r2, #0
 8003876:	f248 2121 	movw	r1, #33313	; 0x8221
 800387a:	4851      	ldr	r0, [pc, #324]	; (80039c0 <MX_GPIO_Init+0x1d0>)
 800387c:	f003 fe06 	bl	800748c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : But_ONOFF_Pin */
  GPIO_InitStruct.Pin = But_ONOFF_Pin;
 8003880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 800388e:	f107 0314 	add.w	r3, r7, #20
 8003892:	4619      	mov	r1, r3
 8003894:	484b      	ldr	r0, [pc, #300]	; (80039c4 <MX_GPIO_Init+0x1d4>)
 8003896:	f003 fc67 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800389a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800389e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038a0:	2303      	movs	r3, #3
 80038a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	4845      	ldr	r0, [pc, #276]	; (80039c4 <MX_GPIO_Init+0x1d4>)
 80038b0:	f003 fc5a 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80038b4:	f248 0302 	movw	r3, #32770	; 0x8002
 80038b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ba:	2303      	movs	r3, #3
 80038bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c2:	f107 0314 	add.w	r3, r7, #20
 80038c6:	4619      	mov	r1, r3
 80038c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038cc:	f003 fc4c 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_UART_RI_Pin */
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80038d0:	2310      	movs	r3, #16
 80038d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	4619      	mov	r1, r3
 80038e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e6:	f003 fc3f 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_UART_DTR_Pin SIM_GPS_Pin BQ_QON_Pin BQ_CE_Pin */
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|SIM_GPS_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80038ea:	f44f 53c3 	mov.w	r3, #6240	; 0x1860
 80038ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f0:	2301      	movs	r3, #1
 80038f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2300      	movs	r3, #0
 80038fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4619      	mov	r1, r3
 8003902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003906:	f003 fc2f 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_PWR_Pin LED1_Pin Main_SW_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin|LED1_Pin|Main_SW_Pin;
 800390a:	f240 2321 	movw	r3, #545	; 0x221
 800390e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003910:	2301      	movs	r3, #1
 8003912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003918:	2300      	movs	r3, #0
 800391a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	4619      	mov	r1, r3
 8003922:	4827      	ldr	r0, [pc, #156]	; (80039c0 <MX_GPIO_Init+0x1d0>)
 8003924:	f003 fc20 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_WDT_Pin BQ_INT_Pin */
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8003928:	f241 0302 	movw	r3, #4098	; 0x1002
 800392c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800392e:	2300      	movs	r3, #0
 8003930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	4619      	mov	r1, r3
 800393c:	4820      	ldr	r0, [pc, #128]	; (80039c0 <MX_GPIO_Init+0x1d0>)
 800393e:	f003 fc13 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP7_Pin TP8_Pin PB11 PB3 */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8003942:	f640 430c 	movw	r3, #3084	; 0xc0c
 8003946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003948:	2303      	movs	r3, #3
 800394a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	4619      	mov	r1, r3
 8003956:	481a      	ldr	r0, [pc, #104]	; (80039c0 <MX_GPIO_Init+0x1d0>)
 8003958:	f003 fc06 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST3_Pin */
  GPIO_InitStruct.Pin = RST3_Pin;
 800395c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003966:	2301      	movs	r3, #1
 8003968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396a:	2300      	movs	r3, #0
 800396c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST3_GPIO_Port, &GPIO_InitStruct);
 800396e:	f107 0314 	add.w	r3, r7, #20
 8003972:	4619      	mov	r1, r3
 8003974:	4812      	ldr	r0, [pc, #72]	; (80039c0 <MX_GPIO_Init+0x1d0>)
 8003976:	f003 fbf7 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST2_Pin */
  GPIO_InitStruct.Pin = RST2_Pin;
 800397a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800397e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003980:	2301      	movs	r3, #1
 8003982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003984:	2301      	movs	r3, #1
 8003986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	2300      	movs	r3, #0
 800398a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	4619      	mov	r1, r3
 8003992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003996:	f003 fbe7 	bl	8007168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800399a:	2308      	movs	r3, #8
 800399c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800399e:	2303      	movs	r3, #3
 80039a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039a6:	f107 0314 	add.w	r3, r7, #20
 80039aa:	4619      	mov	r1, r3
 80039ac:	4806      	ldr	r0, [pc, #24]	; (80039c8 <MX_GPIO_Init+0x1d8>)
 80039ae:	f003 fbdb 	bl	8007168 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039b2:	bf00      	nop
 80039b4:	3728      	adds	r7, #40	; 0x28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	48000400 	.word	0x48000400
 80039c4:	48000800 	.word	0x48000800
 80039c8:	48001c00 	.word	0x48001c00

080039cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039d0:	b672      	cpsid	i
}
 80039d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LED1_OFF();
 80039d4:	2201      	movs	r2, #1
 80039d6:	2120      	movs	r1, #32
 80039d8:	4803      	ldr	r0, [pc, #12]	; (80039e8 <Error_Handler+0x1c>)
 80039da:	f003 fd57 	bl	800748c <HAL_GPIO_WritePin>
  LED2_ON();
 80039de:	201f      	movs	r0, #31
 80039e0:	f000 fcb2 	bl	8004348 <setLed2>
  while (1)
 80039e4:	e7fe      	b.n	80039e4 <Error_Handler+0x18>
 80039e6:	bf00      	nop
 80039e8:	48000400 	.word	0x48000400

080039ec <ms8607_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the ms8607 device.
 */
void ms8607_init(void)
{	
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
	hsensor_i2c_master_mode = ms8607_i2c_no_hold;
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <ms8607_init+0x18>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <ms8607_init+0x1c>)
 80039f8:	2205      	movs	r2, #5
 80039fa:	701a      	strb	r2, [r3, #0]
	
	/* Initialize and enable device with config. */
	i2c_master_init();
 80039fc:	f000 f84c 	bl	8003a98 <i2c_master_init>
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	200008b6 	.word	0x200008b6
 8003a08:	200008b7 	.word	0x200008b7

08003a0c <ms8607_is_connected>:
 * \return bool : status of MS8607
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool ms8607_is_connected(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
	return (hsensor_is_connected() && psensor_is_connected());
 8003a10:	f000 f810 	bl	8003a34 <hsensor_is_connected>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d006      	beq.n	8003a28 <ms8607_is_connected+0x1c>
 8003a1a:	f000 f824 	bl	8003a66 <psensor_is_connected>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <ms8607_is_connected+0x1c>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <ms8607_is_connected+0x1e>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	b2db      	uxtb	r3, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <hsensor_is_connected>:
 * \return bool : status of humidity sensor
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool hsensor_is_connected(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
	enum status_code i2c_status;
	
	struct i2c_master_packet transfer = {
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	80bb      	strh	r3, [r7, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	80fb      	strh	r3, [r7, #6]
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
		.address     = HSENSOR_ADDR,
		.data_length = 0,
		.data        = NULL,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 f82d 	bl	8003aa8 <i2c_master_write_packet_wait>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]
	if( i2c_status != STATUS_OK)
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <hsensor_is_connected+0x28>
		return false;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <hsensor_is_connected+0x2a>
	
	return true;
 8003a5c:	2301      	movs	r3, #1
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <psensor_is_connected>:
 * \return bool : status of Pressure sensor
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool psensor_is_connected(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
	enum status_code i2c_status;
	
	struct i2c_master_packet transfer = {
 8003a6c:	23ec      	movs	r3, #236	; 0xec
 8003a6e:	80bb      	strh	r3, [r7, #4]
 8003a70:	2300      	movs	r3, #0
 8003a72:	80fb      	strh	r3, [r7, #6]
 8003a74:	2300      	movs	r3, #0
 8003a76:	60bb      	str	r3, [r7, #8]
		.address     = PSENSOR_ADDR,
		.data_length = 0,
		.data        = NULL,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f814 	bl	8003aa8 <i2c_master_write_packet_wait>
 8003a80:	4603      	mov	r3, r0
 8003a82:	73fb      	strb	r3, [r7, #15]
	if( i2c_status != STATUS_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <psensor_is_connected+0x28>
		return false;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <psensor_is_connected+0x2a>
	
	return true;
 8003a8e:	2301      	movs	r3, #1
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <i2c_master_init>:

#include "ms8607.h"
#include "ms8607_i2c.h"

void i2c_master_init(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <i2c_master_write_packet_wait>:
    return (enum status_code)res;
}


enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *const packet)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	6078      	str	r0, [r7, #4]
    uint8_t res = HAL_I2C_Master_Transmit(&hi2c2, packet->address, packet->data, packet->data_length, 20);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8819      	ldrh	r1, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	885b      	ldrh	r3, [r3, #2]
 8003abc:	2014      	movs	r0, #20
 8003abe:	9000      	str	r0, [sp, #0]
 8003ac0:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <i2c_master_write_packet_wait+0x2c>)
 8003ac2:	f003 fda5 	bl	8007610 <HAL_I2C_Master_Transmit>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	73fb      	strb	r3, [r7, #15]
    return (enum status_code)res;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	200005b8 	.word	0x200005b8

08003ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_MspInit+0x48>)
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <HAL_MspInit+0x48>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_MspInit+0x48>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_MspInit+0x48>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_MspInit+0x48>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6593      	str	r3, [r2, #88]	; 0x58
 8003b02:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <HAL_MspInit+0x48>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2100      	movs	r1, #0
 8003b12:	2005      	movs	r0, #5
 8003b14:	f002 fbff 	bl	8006316 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b18:	bf00      	nop
 8003b1a:	3708      	adds	r7, #8
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000

08003b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b09a      	sub	sp, #104	; 0x68
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b2c:	f107 030c 	add.w	r3, r7, #12
 8003b30:	225c      	movs	r2, #92	; 0x5c
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f009 fe07 	bl	800d748 <memset>
  if(hadc->Instance==ADC1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2e      	ldr	r2, [pc, #184]	; (8003bf8 <HAL_ADC_MspInit+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d155      	bne.n	8003bf0 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003b44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b48:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003b4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003b50:	2303      	movs	r3, #3
 8003b52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003b54:	2301      	movs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003b58:	2308      	movs	r3, #8
 8003b5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003b5c:	2307      	movs	r3, #7
 8003b5e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003b60:	2302      	movs	r3, #2
 8003b62:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003b64:	2302      	movs	r3, #2
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	4618      	mov	r0, r3
 8003b74:	f005 fcc0 	bl	80094f8 <HAL_RCCEx_PeriphCLKConfig>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8003b7e:	f7ff ff25 	bl	80039cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <HAL_ADC_MspInit+0xd8>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <HAL_ADC_MspInit+0xd8>)
 8003b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_ADC_MspInit+0xd8>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003b9a:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <HAL_ADC_MspInit+0xe0>)
 8003b9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003bca:	2220      	movs	r2, #32
 8003bcc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003bd4:	480a      	ldr	r0, [pc, #40]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003bd6:	f002 fdd9 	bl	800678c <HAL_DMA_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8003be0:	f7ff fef4 	bl	80039cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a06      	ldr	r2, [pc, #24]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003be8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <HAL_ADC_MspInit+0xdc>)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003bf0:	bf00      	nop
 8003bf2:	3768      	adds	r7, #104	; 0x68
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	50040000 	.word	0x50040000
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	200004f8 	.word	0x200004f8
 8003c04:	40020008 	.word	0x40020008

08003c08 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <HAL_CRC_MspInit+0x38>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10b      	bne.n	8003c32 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_CRC_MspInit+0x3c>)
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1e:	4a09      	ldr	r2, [pc, #36]	; (8003c44 <HAL_CRC_MspInit+0x3c>)
 8003c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c24:	6493      	str	r3, [r2, #72]	; 0x48
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <HAL_CRC_MspInit+0x3c>)
 8003c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40023000 	.word	0x40023000
 8003c44:	40021000 	.word	0x40021000

08003c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b0a6      	sub	sp, #152	; 0x98
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c64:	225c      	movs	r2, #92	; 0x5c
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f009 fd6d 	bl	800d748 <memset>
  if(hi2c->Instance==I2C1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a76      	ldr	r2, [pc, #472]	; (8003e4c <HAL_I2C_MspInit+0x204>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d13e      	bne.n	8003cf6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003c78:	2340      	movs	r3, #64	; 0x40
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8003c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c80:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c86:	4618      	mov	r0, r3
 8003c88:	f005 fc36 	bl	80094f8 <HAL_RCCEx_PeriphCLKConfig>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c92:	f7ff fe9b 	bl	80039cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c96:	4b6e      	ldr	r3, [pc, #440]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	4a6d      	ldr	r2, [pc, #436]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca2:	4b6b      	ldr	r3, [pc, #428]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cb6:	2312      	movs	r3, #18
 8003cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cd8:	f003 fa46 	bl	8007168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cdc:	4b5c      	ldr	r3, [pc, #368]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	4a5b      	ldr	r2, [pc, #364]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce8:	4b59      	ldr	r3, [pc, #356]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003cf4:	e0a6      	b.n	8003e44 <HAL_I2C_MspInit+0x1fc>
  else if(hi2c->Instance==I2C2)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a56      	ldr	r2, [pc, #344]	; (8003e54 <HAL_I2C_MspInit+0x20c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d13d      	bne.n	8003d7c <HAL_I2C_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8003d04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d08:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f005 fbf2 	bl	80094f8 <HAL_RCCEx_PeriphCLKConfig>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003d1a:	f7ff fe57 	bl	80039cc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1e:	4b4c      	ldr	r3, [pc, #304]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d22:	4a4b      	ldr	r2, [pc, #300]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d2a:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	61fb      	str	r3, [r7, #28]
 8003d34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003d36:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d3e:	2312      	movs	r3, #18
 8003d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d50:	2304      	movs	r3, #4
 8003d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d56:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	483e      	ldr	r0, [pc, #248]	; (8003e58 <HAL_I2C_MspInit+0x210>)
 8003d5e:	f003 fa03 	bl	8007168 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d62:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	4a3a      	ldr	r2, [pc, #232]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6e:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	69bb      	ldr	r3, [r7, #24]
}
 8003d7a:	e063      	b.n	8003e44 <HAL_I2C_MspInit+0x1fc>
  else if(hi2c->Instance==I2C3)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a36      	ldr	r2, [pc, #216]	; (8003e5c <HAL_I2C_MspInit+0x214>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d15e      	bne.n	8003e44 <HAL_I2C_MspInit+0x1fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8003d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d90:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d96:	4618      	mov	r0, r3
 8003d98:	f005 fbae 	bl	80094f8 <HAL_RCCEx_PeriphCLKConfig>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_MspInit+0x15e>
      Error_Handler();
 8003da2:	f7ff fe13 	bl	80039cc <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003db2:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003dc4:	f043 0302 	orr.w	r3, r3, #2
 8003dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dca:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ddc:	2312      	movs	r3, #18
 8003dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de8:	2303      	movs	r3, #3
 8003dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003dee:	2304      	movs	r3, #4
 8003df0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dfe:	f003 f9b3 	bl	8007168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e02:	2310      	movs	r3, #16
 8003e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e08:	2312      	movs	r3, #18
 8003e0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e14:	2303      	movs	r3, #3
 8003e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e20:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003e24:	4619      	mov	r1, r3
 8003e26:	480c      	ldr	r0, [pc, #48]	; (8003e58 <HAL_I2C_MspInit+0x210>)
 8003e28:	f003 f99e 	bl	8007168 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003e32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e36:	6593      	str	r3, [r2, #88]	; 0x58
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_I2C_MspInit+0x208>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	bf00      	nop
 8003e46:	3798      	adds	r7, #152	; 0x98
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40005400 	.word	0x40005400
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40005800 	.word	0x40005800
 8003e58:	48000400 	.word	0x48000400
 8003e5c:	40005c00 	.word	0x40005c00

08003e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <HAL_TIM_Base_MspInit+0x38>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10b      	bne.n	8003e8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_TIM_Base_MspInit+0x3c>)
 8003e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e76:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <HAL_TIM_Base_MspInit+0x3c>)
 8003e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_TIM_Base_MspInit+0x3c>)
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <HAL_TIM_MspPostInit+0x64>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d11c      	bne.n	8003efc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_TIM_MspPostInit+0x68>)
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <HAL_TIM_MspPostInit+0x68>)
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ece:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <HAL_TIM_MspPostInit+0x68>)
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 8003eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003eec:	230e      	movs	r3, #14
 8003eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4805      	ldr	r0, [pc, #20]	; (8003f0c <HAL_TIM_MspPostInit+0x6c>)
 8003ef8:	f003 f936 	bl	8007168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003efc:	bf00      	nop
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	48000400 	.word	0x48000400

08003f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b0a2      	sub	sp, #136	; 0x88
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f28:	f107 0318 	add.w	r3, r7, #24
 8003f2c:	225c      	movs	r2, #92	; 0x5c
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f009 fc09 	bl	800d748 <memset>
  if(huart->Instance==USART1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a3f      	ldr	r2, [pc, #252]	; (8004038 <HAL_UART_MspInit+0x128>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d138      	bne.n	8003fb2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f40:	2301      	movs	r3, #1
 8003f42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8003f44:	2301      	movs	r3, #1
 8003f46:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f48:	f107 0318 	add.w	r3, r7, #24
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f005 fad3 	bl	80094f8 <HAL_RCCEx_PeriphCLKConfig>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003f58:	f7ff fd38 	bl	80039cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f5c:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	4a36      	ldr	r2, [pc, #216]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f66:	6613      	str	r3, [r2, #96]	; 0x60
 8003f68:	4b34      	ldr	r3, [pc, #208]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f74:	4b31      	ldr	r3, [pc, #196]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f78:	4a30      	ldr	r2, [pc, #192]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f80:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f8c:	23c0      	movs	r3, #192	; 0xc0
 8003f8e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f90:	2302      	movs	r3, #2
 8003f92:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4825      	ldr	r0, [pc, #148]	; (8004040 <HAL_UART_MspInit+0x130>)
 8003fac:	f003 f8dc 	bl	8007168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fb0:	e03d      	b.n	800402e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a23      	ldr	r2, [pc, #140]	; (8004044 <HAL_UART_MspInit+0x134>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d138      	bne.n	800402e <HAL_UART_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fc4:	f107 0318 	add.w	r3, r7, #24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f005 fa95 	bl	80094f8 <HAL_RCCEx_PeriphCLKConfig>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8003fd4:	f7ff fcfa 	bl	80039cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fd8:	4b18      	ldr	r3, [pc, #96]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	4a17      	ldr	r2, [pc, #92]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe4:	4b15      	ldr	r3, [pc, #84]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff4:	4a11      	ldr	r2, [pc, #68]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ffc:	4b0f      	ldr	r3, [pc, #60]	; (800403c <HAL_UART_MspInit+0x12c>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin|SIM_UART_RX_Pin;
 8004008:	230c      	movs	r3, #12
 800400a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800401a:	2307      	movs	r3, #7
 800401c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004020:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004024:	4619      	mov	r1, r3
 8004026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402a:	f003 f89d 	bl	8007168 <HAL_GPIO_Init>
}
 800402e:	bf00      	nop
 8004030:	3788      	adds	r7, #136	; 0x88
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40013800 	.word	0x40013800
 800403c:	40021000 	.word	0x40021000
 8004040:	48000400 	.word	0x48000400
 8004044:	40004400 	.word	0x40004400

08004048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800404c:	e7fe      	b.n	800404c <NMI_Handler+0x4>

0800404e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004052:	e7fe      	b.n	8004052 <HardFault_Handler+0x4>

08004054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004058:	e7fe      	b.n	8004058 <MemManage_Handler+0x4>

0800405a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800405e:	e7fe      	b.n	800405e <BusFault_Handler+0x4>

08004060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004064:	e7fe      	b.n	8004064 <UsageFault_Handler+0x4>

08004066 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004066:	b480      	push	{r7}
 8004068:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004094:	f000 fe62 	bl	8004d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004098:	f002 f973 	bl	8006382 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800409c:	bf00      	nop
 800409e:	bd80      	pop	{r7, pc}

080040a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040a4:	4802      	ldr	r0, [pc, #8]	; (80040b0 <DMA1_Channel1_IRQHandler+0x10>)
 80040a6:	f002 fd08 	bl	8006aba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200004f8 	.word	0x200004f8

080040b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80040b8:	4802      	ldr	r0, [pc, #8]	; (80040c4 <USART1_IRQHandler+0x10>)
 80040ba:	f006 fc89 	bl	800a9d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200006ac 	.word	0x200006ac

080040c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040cc:	4802      	ldr	r0, [pc, #8]	; (80040d8 <USART2_IRQHandler+0x10>)
 80040ce:	f006 fc7f 	bl	800a9d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000730 	.word	0x20000730

080040dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return 1;
 80040e0:	2301      	movs	r3, #1
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <_kill>:

int _kill(int pid, int sig)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040f6:	f009 fb8b 	bl	800d810 <__errno>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2216      	movs	r2, #22
 80040fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_exit>:

void _exit (int status)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004114:	f04f 31ff 	mov.w	r1, #4294967295
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ffe7 	bl	80040ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800411e:	e7fe      	b.n	800411e <_exit+0x12>

08004120 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e00a      	b.n	8004148 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004132:	f3af 8000 	nop.w
 8004136:	4601      	mov	r1, r0
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	60ba      	str	r2, [r7, #8]
 800413e:	b2ca      	uxtb	r2, r1
 8004140:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	3301      	adds	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	429a      	cmp	r2, r3
 800414e:	dbf0      	blt.n	8004132 <_read+0x12>
  }

  return len;
 8004150:	687b      	ldr	r3, [r7, #4]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <_close>:
  }
  return len;
}

int _close(int file)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004182:	605a      	str	r2, [r3, #4]
  return 0;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <_isatty>:

int _isatty(int file)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800419a:	2301      	movs	r3, #1
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <_sbrk+0x5c>)
 80041ce:	4b15      	ldr	r3, [pc, #84]	; (8004224 <_sbrk+0x60>)
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041d8:	4b13      	ldr	r3, [pc, #76]	; (8004228 <_sbrk+0x64>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <_sbrk+0x64>)
 80041e2:	4a12      	ldr	r2, [pc, #72]	; (800422c <_sbrk+0x68>)
 80041e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041e6:	4b10      	ldr	r3, [pc, #64]	; (8004228 <_sbrk+0x64>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d207      	bcs.n	8004204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041f4:	f009 fb0c 	bl	800d810 <__errno>
 80041f8:	4603      	mov	r3, r0
 80041fa:	220c      	movs	r2, #12
 80041fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e009      	b.n	8004218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <_sbrk+0x64>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <_sbrk+0x64>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <_sbrk+0x64>)
 8004214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004216:	68fb      	ldr	r3, [r7, #12]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20010000 	.word	0x20010000
 8004224:	00000400 	.word	0x00000400
 8004228:	200008b8 	.word	0x200008b8
 800422c:	20000a20 	.word	0x20000a20

08004230 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <SystemInit+0x20>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <SystemInit+0x20>)
 800423c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <HAL_SYSTICK_Callback>:
volatile uint8_t device_state = 0;
volatile uint32_t offTim;


void HAL_SYSTICK_Callback(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
	static uint32_t led2swp, led2lev;

    if(led2_tim && ++led2swp >= led2_tim)
 8004258:	4b2e      	ldr	r3, [pc, #184]	; (8004314 <HAL_SYSTICK_Callback+0xc0>)
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d04b      	beq.n	80042f8 <HAL_SYSTICK_Callback+0xa4>
 8004260:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <HAL_SYSTICK_Callback+0xc4>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	4a2c      	ldr	r2, [pc, #176]	; (8004318 <HAL_SYSTICK_Callback+0xc4>)
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <HAL_SYSTICK_Callback+0xc4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a29      	ldr	r2, [pc, #164]	; (8004314 <HAL_SYSTICK_Callback+0xc0>)
 8004270:	8812      	ldrh	r2, [r2, #0]
 8004272:	4293      	cmp	r3, r2
 8004274:	d340      	bcc.n	80042f8 <HAL_SYSTICK_Callback+0xa4>
    {
        led2swp = 0;
 8004276:	4b28      	ldr	r3, [pc, #160]	; (8004318 <HAL_SYSTICK_Callback+0xc4>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
        if(++led2lev >= 64 + (led2_cycles>>16))
 800427c:	4b27      	ldr	r3, [pc, #156]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a26      	ldr	r2, [pc, #152]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b25      	ldr	r3, [pc, #148]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b25      	ldr	r3, [pc, #148]	; (8004320 <HAL_SYSTICK_Callback+0xcc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	3340      	adds	r3, #64	; 0x40
 8004292:	429a      	cmp	r2, r3
 8004294:	d316      	bcc.n	80042c4 <HAL_SYSTICK_Callback+0x70>
        {
            led2lev = 0;
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
            if((led2_cycles & 0xFFFF) != 0xFFFF) led2_cycles--;
 800429c:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_SYSTICK_Callback+0xcc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_SYSTICK_Callback+0x60>
 80042aa:	4b1d      	ldr	r3, [pc, #116]	; (8004320 <HAL_SYSTICK_Callback+0xcc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <HAL_SYSTICK_Callback+0xcc>)
 80042b2:	6013      	str	r3, [r2, #0]
            if((led2_cycles & 0xFFFF) == 0) led2_tim = 0;
 80042b4:	4b1a      	ldr	r3, [pc, #104]	; (8004320 <HAL_SYSTICK_Callback+0xcc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_SYSTICK_Callback+0x70>
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <HAL_SYSTICK_Callback+0xc0>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	801a      	strh	r2, [r3, #0]
        }
        if(led2lev>=64) setLed2(0); else setLed2((led2lev<32) ? led2lev : 63-led2lev);
 80042c4:	4b15      	ldr	r3, [pc, #84]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b3f      	cmp	r3, #63	; 0x3f
 80042ca:	d903      	bls.n	80042d4 <HAL_SYSTICK_Callback+0x80>
 80042cc:	2000      	movs	r0, #0
 80042ce:	f000 f83b 	bl	8004348 <setLed2>
 80042d2:	e01c      	b.n	800430e <HAL_SYSTICK_Callback+0xba>
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b1f      	cmp	r3, #31
 80042da:	d906      	bls.n	80042ea <HAL_SYSTICK_Callback+0x96>
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	e002      	b.n	80042f0 <HAL_SYSTICK_Callback+0x9c>
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f829 	bl	8004348 <setLed2>
 80042f6:	e00a      	b.n	800430e <HAL_SYSTICK_Callback+0xba>
     } else if(led2_tim == 0) {led2swp=0; led2lev=0;}
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_SYSTICK_Callback+0xc0>)
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d106      	bne.n	800430e <HAL_SYSTICK_Callback+0xba>
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_SYSTICK_Callback+0xc4>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_SYSTICK_Callback+0xc8>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

}
 800430c:	e7ff      	b.n	800430e <HAL_SYSTICK_Callback+0xba>
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200008bc 	.word	0x200008bc
 8004318:	200008c8 	.word	0x200008c8
 800431c:	200008cc 	.word	0x200008cc
 8004320:	200008c0 	.word	0x200008c0

08004324 <setPwmLed>:


void setPwmLed(uint8_t pwm)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, pwm);
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <setPwmLed+0x20>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	79fa      	ldrb	r2, [r7, #7]
 8004334:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000660 	.word	0x20000660

08004348 <setLed2>:

void setLed2(uint8_t bri)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
    setPwmLed(bri_corr[bri]);
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <setLed2+0x20>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ffe3 	bl	8004324 <setPwmLed>
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	080108ac 	.word	0x080108ac

0800436c <check_powerOn>:
    led2_tim = spd;
    led2_cycles = cnt | (wait<<16);
}

void check_powerOn()
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	  POWER_OFF();
 8004372:	2200      	movs	r2, #0
 8004374:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004378:	4815      	ldr	r0, [pc, #84]	; (80043d0 <check_powerOn+0x64>)
 800437a:	f003 f887 	bl	800748c <HAL_GPIO_WritePin>
	  printf("1. Check Power ON\r\n");
 800437e:	4815      	ldr	r0, [pc, #84]	; (80043d4 <check_powerOn+0x68>)
 8004380:	f009 f902 	bl	800d588 <puts>
	  uint32_t timon = HAL_GetTick();
 8004384:	f000 fcfe 	bl	8004d84 <HAL_GetTick>
 8004388:	6078      	str	r0, [r7, #4]
	  while(Power_SW_READ() == GPIO_PIN_SET)
 800438a:	e014      	b.n	80043b6 <check_powerOn+0x4a>
	  {
//		  printf("2. Check Power BUT\r\n");
	    if(HAL_GetTick() - timon > 1000)     // 1 sec pushing
 800438c:	f000 fcfa 	bl	8004d84 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800439a:	d90c      	bls.n	80043b6 <check_powerOn+0x4a>
	    {
	    	timon = HAL_GetTick();
 800439c:	f000 fcf2 	bl	8004d84 <HAL_GetTick>
 80043a0:	6078      	str	r0, [r7, #4]
	        POWER_ON();    // pull-up power supply
 80043a2:	2201      	movs	r2, #1
 80043a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043a8:	4809      	ldr	r0, [pc, #36]	; (80043d0 <check_powerOn+0x64>)
 80043aa:	f003 f86f 	bl	800748c <HAL_GPIO_WritePin>
	    	printf("Power ON\r\n");
 80043ae:	480a      	ldr	r0, [pc, #40]	; (80043d8 <check_powerOn+0x6c>)
 80043b0:	f009 f8ea 	bl	800d588 <puts>
	        break;                // break while loop
 80043b4:	e008      	b.n	80043c8 <check_powerOn+0x5c>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 80043b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043ba:	4808      	ldr	r0, [pc, #32]	; (80043dc <check_powerOn+0x70>)
 80043bc:	f003 f84e 	bl	800745c <HAL_GPIO_ReadPin>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d0e2      	beq.n	800438c <check_powerOn+0x20>
	    }
	  }
}
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	48000400 	.word	0x48000400
 80043d4:	08010728 	.word	0x08010728
 80043d8:	0801073c 	.word	0x0801073c
 80043dc:	48000800 	.word	0x48000800

080043e0 <check_powerOff>:

void check_powerOff()
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  if(Power_SW_READ()) //power button pressed
 80043e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043e8:	4817      	ldr	r0, [pc, #92]	; (8004448 <check_powerOff+0x68>)
 80043ea:	f003 f837 	bl	800745c <HAL_GPIO_ReadPin>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d022      	beq.n	800443a <check_powerOff+0x5a>
  {
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 80043f4:	4b15      	ldr	r3, [pc, #84]	; (800444c <check_powerOff+0x6c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d023      	beq.n	8004444 <check_powerOff+0x64>
 80043fc:	f000 fcc2 	bl	8004d84 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <check_powerOff+0x6c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800440c:	d91a      	bls.n	8004444 <check_powerOff+0x64>
     {
    	 printf("Power off\r\n");
 800440e:	4810      	ldr	r0, [pc, #64]	; (8004450 <check_powerOff+0x70>)
 8004410:	f009 f8ba 	bl	800d588 <puts>
    	 POWER_OFF();
 8004414:	2200      	movs	r2, #0
 8004416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800441a:	480e      	ldr	r0, [pc, #56]	; (8004454 <check_powerOff+0x74>)
 800441c:	f003 f836 	bl	800748c <HAL_GPIO_WritePin>
    	 HAL_Delay(3000);
 8004420:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004424:	f000 fcba 	bl	8004d9c <HAL_Delay>
    	 LED1_OFF();
 8004428:	2201      	movs	r2, #1
 800442a:	2120      	movs	r1, #32
 800442c:	4809      	ldr	r0, [pc, #36]	; (8004454 <check_powerOff+0x74>)
 800442e:	f003 f82d 	bl	800748c <HAL_GPIO_WritePin>
    	 LED2_OFF();
 8004432:	2000      	movs	r0, #0
 8004434:	f7ff ff88 	bl	8004348 <setLed2>
     }
  } else offTim = HAL_GetTick();   // button released, update offTim

}
 8004438:	e004      	b.n	8004444 <check_powerOff+0x64>
  } else offTim = HAL_GetTick();   // button released, update offTim
 800443a:	f000 fca3 	bl	8004d84 <HAL_GetTick>
 800443e:	4603      	mov	r3, r0
 8004440:	4a02      	ldr	r2, [pc, #8]	; (800444c <check_powerOff+0x6c>)
 8004442:	6013      	str	r3, [r2, #0]
}
 8004444:	bf00      	nop
 8004446:	bd80      	pop	{r7, pc}
 8004448:	48000800 	.word	0x48000800
 800444c:	200008c4 	.word	0x200008c4
 8004450:	08010748 	.word	0x08010748
 8004454:	48000400 	.word	0x48000400

08004458 <thp_loop>:
    POWER_OFF();
    HAL_PWR_EnterSTANDBYMode();
}

void thp_loop()
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
	CLI();
 800445c:	f7fd fea0 	bl	80021a0 <CLI>
}
 8004460:	bf00      	nop
 8004462:	bd80      	pop	{r7, pc}

08004464 <HALcalculateCRC>:

uint8_t HALcalculateCRC(uint8_t* data, uint8_t len)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
    HAL_CRC_Init(&hcrc);
 8004470:	480b      	ldr	r0, [pc, #44]	; (80044a0 <HALcalculateCRC+0x3c>)
 8004472:	f001 ff8d 	bl	8006390 <HAL_CRC_Init>
    __HAL_CRC_DR_RESET(&hcrc);
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HALcalculateCRC+0x3c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <HALcalculateCRC+0x3c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	609a      	str	r2, [r3, #8]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	461a      	mov	r2, r3
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4804      	ldr	r0, [pc, #16]	; (80044a0 <HALcalculateCRC+0x3c>)
 800448e:	f001 ffe3 	bl	8006458 <HAL_CRC_Calculate>
 8004492:	60f8      	str	r0, [r7, #12]
    return (uint8_t)(crc & 0xFF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	b2db      	uxtb	r3, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000540 	.word	0x20000540

080044a4 <i2c_read8>:
#include <math.h>



uint8_t i2c_read8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t *value, uint8_t addr)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af04      	add	r7, sp, #16
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	461a      	mov	r2, r3
 80044b0:	460b      	mov	r3, r1
 80044b2:	817b      	strh	r3, [r7, #10]
 80044b4:	4613      	mov	r3, r2
 80044b6:	727b      	strb	r3, [r7, #9]
	uint8_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 80044b8:	7a7b      	ldrb	r3, [r7, #9]
 80044ba:	b299      	uxth	r1, r3
 80044bc:	897a      	ldrh	r2, [r7, #10]
 80044be:	2308      	movs	r3, #8
 80044c0:	9302      	str	r3, [sp, #8]
 80044c2:	2301      	movs	r3, #1
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	f107 0316 	add.w	r3, r7, #22
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	2301      	movs	r3, #1
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f003 fb9c 	bl	8007c0c <HAL_I2C_Mem_Read>
 80044d4:	4603      	mov	r3, r0
 80044d6:	75fb      	strb	r3, [r7, #23]
    *value = tmp;
 80044d8:	7dba      	ldrb	r2, [r7, #22]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	701a      	strb	r2, [r3, #0]
    return res;
 80044de:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <i2c_read16>:

uint8_t i2c_read16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t *value, uint8_t addr)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af04      	add	r7, sp, #16
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	461a      	mov	r2, r3
 80044f4:	460b      	mov	r3, r1
 80044f6:	817b      	strh	r3, [r7, #10]
 80044f8:	4613      	mov	r3, r2
 80044fa:	727b      	strb	r3, [r7, #9]
	uint16_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80044fc:	7a7b      	ldrb	r3, [r7, #9]
 80044fe:	b299      	uxth	r1, r3
 8004500:	897a      	ldrh	r2, [r7, #10]
 8004502:	2308      	movs	r3, #8
 8004504:	9302      	str	r3, [sp, #8]
 8004506:	2302      	movs	r3, #2
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	f107 0314 	add.w	r3, r7, #20
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2301      	movs	r3, #1
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f003 fb7a 	bl	8007c0c <HAL_I2C_Mem_Read>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]
    *value = tmp;
 800451c:	8aba      	ldrh	r2, [r7, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	801a      	strh	r2, [r3, #0]
    return res;
 8004522:	7dfb      	ldrb	r3, [r7, #23]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <i2c_write8>:
    *value = tmp;
    return res;
}

uint8_t i2c_write8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t value, uint8_t addr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af04      	add	r7, sp, #16
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	4608      	mov	r0, r1
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	4603      	mov	r3, r0
 800453c:	807b      	strh	r3, [r7, #2]
 800453e:	460b      	mov	r3, r1
 8004540:	707b      	strb	r3, [r7, #1]
 8004542:	4613      	mov	r3, r2
 8004544:	703b      	strb	r3, [r7, #0]
	uint8_t tmp = value;
 8004546:	787b      	ldrb	r3, [r7, #1]
 8004548:	73bb      	strb	r3, [r7, #14]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 800454a:	783b      	ldrb	r3, [r7, #0]
 800454c:	b299      	uxth	r1, r3
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	2308      	movs	r3, #8
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	2301      	movs	r3, #1
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	f107 030e 	add.w	r3, r7, #14
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2301      	movs	r3, #1
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f003 fa3f 	bl	80079e4 <HAL_I2C_Mem_Write>
 8004566:	4603      	mov	r3, r0
 8004568:	73fb      	strb	r3, [r7, #15]
    return res;
 800456a:	7bfb      	ldrb	r3, [r7, #15]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <i2c_write16>:

uint8_t i2c_write16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t value, uint8_t addr)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af04      	add	r7, sp, #16
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	817b      	strh	r3, [r7, #10]
 8004586:	460b      	mov	r3, r1
 8004588:	813b      	strh	r3, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp = value;
 800458e:	893b      	ldrh	r3, [r7, #8]
 8004590:	82bb      	strh	r3, [r7, #20]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	b299      	uxth	r1, r3
 8004596:	897a      	ldrh	r2, [r7, #10]
 8004598:	2308      	movs	r3, #8
 800459a:	9302      	str	r3, [sp, #8]
 800459c:	2302      	movs	r3, #2
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	f107 0314 	add.w	r3, r7, #20
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2301      	movs	r3, #1
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f003 fa1b 	bl	80079e4 <HAL_I2C_Mem_Write>
 80045ae:	4603      	mov	r3, r0
 80045b0:	75fb      	strb	r3, [r7, #23]
    return res;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <setBit>:
    i2c_read16(i2c, sub_address, &old_word, addr);
    old_word |= new_word;
    i2c_write16(i2c, sub_address, old_word, addr);
}

void setBit(unsigned char* reg, int bitNumber, int value) {
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
    if (value == 0) {
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <setBit+0x32>
        *reg &= ~(1 << bitNumber);  // Ustawienie bitu na 0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b25a      	sxtb	r2, r3
 80045d4:	2101      	movs	r1, #1
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	fa01 f303 	lsl.w	r3, r1, r3
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	b25b      	sxtb	r3, r3
 80045e2:	4013      	ands	r3, r2
 80045e4:	b25b      	sxtb	r3, r3
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	701a      	strb	r2, [r3, #0]
    } else if (value == 1) {
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
    }
}
 80045ec:	e00f      	b.n	800460e <setBit+0x52>
    } else if (value == 1) {
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d10c      	bne.n	800460e <setBit+0x52>
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	b25a      	sxtb	r2, r3
 80045fa:	2101      	movs	r1, #1
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	b25b      	sxtb	r3, r3
 8004604:	4313      	orrs	r3, r2
 8004606:	b25b      	sxtb	r3, r3
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	701a      	strb	r2, [r3, #0]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <modifyRegister>:

void modifyRegister(unsigned char* reg, unsigned char mask, unsigned char value) {
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	460b      	mov	r3, r1
 8004624:	70fb      	strb	r3, [r7, #3]
 8004626:	4613      	mov	r3, r2
 8004628:	70bb      	strb	r3, [r7, #2]
    *reg = (*reg & ~mask) | (value & mask);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b25a      	sxtb	r2, r3
 8004630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004634:	43db      	mvns	r3, r3
 8004636:	b25b      	sxtb	r3, r3
 8004638:	4013      	ands	r3, r2
 800463a:	b25a      	sxtb	r2, r3
 800463c:	78b9      	ldrb	r1, [r7, #2]
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	400b      	ands	r3, r1
 8004642:	b2db      	uxtb	r3, r3
 8004644:	b25b      	sxtb	r3, r3
 8004646:	4313      	orrs	r3, r2
 8004648:	b25b      	sxtb	r3, r3
 800464a:	b2da      	uxtb	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	701a      	strb	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <i2c_scan>:

void i2c_scan(I2C_HandleTypeDef * i2c, uint8_t addr_min, uint8_t addr_max)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
 8004668:	4613      	mov	r3, r2
 800466a:	70bb      	strb	r3, [r7, #2]
	printf("Scanning I2C devices ...\r\n");
 800466c:	4818      	ldr	r0, [pc, #96]	; (80046d0 <i2c_scan+0x74>)
 800466e:	f008 ff8b 	bl	800d588 <puts>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	e022      	b.n	80046be <i2c_scan+0x62>
	{
		HAL_StatusTypeDef status;
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	b29b      	uxth	r3, r3
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	b299      	uxth	r1, r3
 8004680:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004684:	2203      	movs	r2, #3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f003 fbda 	bl	8007e40 <HAL_I2C_IsDeviceReady>
 800468c:	4603      	mov	r3, r0
 800468e:	73bb      	strb	r3, [r7, #14]
		HAL_Delay(100);
 8004690:	2064      	movs	r0, #100	; 0x64
 8004692:	f000 fb83 	bl	8004d9c <HAL_Delay>
		if (status == HAL_OK) {
 8004696:	7bbb      	ldrb	r3, [r7, #14]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <i2c_scan+0x4c>
			    	printf("Device found on %#x \r\n", addr);
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	4619      	mov	r1, r3
 80046a0:	480c      	ldr	r0, [pc, #48]	; (80046d4 <i2c_scan+0x78>)
 80046a2:	f008 ff0b 	bl	800d4bc <iprintf>
 80046a6:	e007      	b.n	80046b8 <i2c_scan+0x5c>
			    } else {
			    	printf("Device NOTfound on %#x \r\n", addr);
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	4619      	mov	r1, r3
 80046ac:	480a      	ldr	r0, [pc, #40]	; (80046d8 <i2c_scan+0x7c>)
 80046ae:	f008 ff05 	bl	800d4bc <iprintf>
			    	HAL_Delay(100);
 80046b2:	2064      	movs	r0, #100	; 0x64
 80046b4:	f000 fb72 	bl	8004d9c <HAL_Delay>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	3301      	adds	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	78bb      	ldrb	r3, [r7, #2]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d9d8      	bls.n	8004678 <i2c_scan+0x1c>
			    }
	}
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	0801075c 	.word	0x0801075c
 80046d4:	08010778 	.word	0x08010778
 80046d8:	08010790 	.word	0x08010790

080046dc <byteswap16>:

uint16_t byteswap16 (uint16_t bytes)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	80fb      	strh	r3, [r7, #6]
	return ((bytes & 0xFF) << 8) | ((bytes >> 8) & 0xFF);
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	b21a      	sxth	r2, r3
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	b21b      	sxth	r3, r3
 80046f4:	4313      	orrs	r3, r2
 80046f6:	b21b      	sxth	r3, r3
 80046f8:	b29b      	uxth	r3, r3
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <TCA9543A_SelectChannel>:
  }
  printf("\r\n");
}

void TCA9543A_SelectChannel(uint8_t channel)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af02      	add	r7, sp, #8
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
	if (channel == 1 || channel == 2) {
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d002      	beq.n	800471e <TCA9543A_SelectChannel+0x16>
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d11f      	bne.n	800475e <TCA9543A_SelectChannel+0x56>
			I2C2TCA_NRST();
 800471e:	2201      	movs	r2, #1
 8004720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004728:	f002 feb0 	bl	800748c <HAL_GPIO_WritePin>
			HAL_Delay(1);
 800472c:	2001      	movs	r0, #1
 800472e:	f000 fb35 	bl	8004d9c <HAL_Delay>
		    uint8_t data = (1 << (channel - 1));
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	3b01      	subs	r3, #1
 8004736:	2201      	movs	r2, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	b2db      	uxtb	r3, r3
 800473e:	73fb      	strb	r3, [r7, #15]
		    HAL_I2C_Master_Transmit(&hi2c2, TCA9543A_ADDRESS, &data, sizeof(data), HAL_MAX_DELAY);
 8004740:	f107 020f 	add.w	r2, r7, #15
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	2301      	movs	r3, #1
 800474c:	21e4      	movs	r1, #228	; 0xe4
 800474e:	480e      	ldr	r0, [pc, #56]	; (8004788 <TCA9543A_SelectChannel+0x80>)
 8004750:	f002 ff5e 	bl	8007610 <HAL_I2C_Master_Transmit>
		    HAL_Delay(1);
 8004754:	2001      	movs	r0, #1
 8004756:	f000 fb21 	bl	8004d9c <HAL_Delay>
	if (channel == 1 || channel == 2) {
 800475a:	bf00      	nop
	} else if (channel == 0) {I2C2TCA_RST(); HAL_Delay(1);}
	else printf("Wrong parameter\r\n");
}
 800475c:	e010      	b.n	8004780 <TCA9543A_SelectChannel+0x78>
	} else if (channel == 0) {I2C2TCA_RST(); HAL_Delay(1);}
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <TCA9543A_SelectChannel+0x72>
 8004764:	2200      	movs	r2, #0
 8004766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800476a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800476e:	f002 fe8d 	bl	800748c <HAL_GPIO_WritePin>
 8004772:	2001      	movs	r0, #1
 8004774:	f000 fb12 	bl	8004d9c <HAL_Delay>
}
 8004778:	e002      	b.n	8004780 <TCA9543A_SelectChannel+0x78>
	else printf("Wrong parameter\r\n");
 800477a:	4804      	ldr	r0, [pc, #16]	; (800478c <TCA9543A_SelectChannel+0x84>)
 800477c:	f008 ff04 	bl	800d588 <puts>
}
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	200005b8 	.word	0x200005b8
 800478c:	080107b0 	.word	0x080107b0

08004790 <SET_DPS368>:
{
	TCA9543A_SelectChannel(1);
}

void SET_DPS368()
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(2);
 8004794:	2002      	movs	r0, #2
 8004796:	f7ff ffb7 	bl	8004708 <TCA9543A_SelectChannel>
}
 800479a:	bf00      	nop
 800479c:	bd80      	pop	{r7, pc}

0800479e <UNSET_BME_DPS>:

void UNSET_BME_DPS()
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(0);
 80047a2:	2000      	movs	r0, #0
 80047a4:	f7ff ffb0 	bl	8004708 <TCA9543A_SelectChannel>
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}

080047ac <TMP117_check>:


uint8_t TMP117_check()
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 80047b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80047b6:	2203      	movs	r2, #3
 80047b8:	2192      	movs	r1, #146	; 0x92
 80047ba:	4814      	ldr	r0, [pc, #80]	; (800480c <TMP117_check+0x60>)
 80047bc:	f003 fb40 	bl	8007e40 <HAL_I2C_IsDeviceReady>
 80047c0:	4603      	mov	r3, r0
 80047c2:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80047c4:	2064      	movs	r0, #100	; 0x64
 80047c6:	f000 fae9 	bl	8004d9c <HAL_Delay>
	if (status == HAL_OK) {
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d114      	bne.n	80047fa <TMP117_check+0x4e>
		uint16_t value;
		i2c_read16(&hi2c2, TMP117_ID_REG, &value, TMP117_ADDR << 1);
 80047d0:	1d3a      	adds	r2, r7, #4
 80047d2:	2392      	movs	r3, #146	; 0x92
 80047d4:	210f      	movs	r1, #15
 80047d6:	480d      	ldr	r0, [pc, #52]	; (800480c <TMP117_check+0x60>)
 80047d8:	f7ff fe86 	bl	80044e8 <i2c_read16>
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 80047dc:	88bb      	ldrh	r3, [r7, #4]
 80047de:	f241 7201 	movw	r2, #5889	; 0x1701
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d104      	bne.n	80047f0 <TMP117_check+0x44>
 80047e6:	480a      	ldr	r0, [pc, #40]	; (8004810 <TMP117_check+0x64>)
 80047e8:	f008 fece 	bl	800d588 <puts>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e008      	b.n	8004802 <TMP117_check+0x56>
 80047f0:	4808      	ldr	r0, [pc, #32]	; (8004814 <TMP117_check+0x68>)
 80047f2:	f008 fec9 	bl	800d588 <puts>
 80047f6:	2300      	movs	r3, #0
 80047f8:	e003      	b.n	8004802 <TMP117_check+0x56>
	} else {printf("TMP117 FAILED\r\n"); return 0;}
 80047fa:	4807      	ldr	r0, [pc, #28]	; (8004818 <TMP117_check+0x6c>)
 80047fc:	f008 fec4 	bl	800d588 <puts>
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	200005b8 	.word	0x200005b8
 8004810:	080107c4 	.word	0x080107c4
 8004814:	080107d0 	.word	0x080107d0
 8004818:	080107dc 	.word	0x080107dc

0800481c <MS8607_check>:
    return (float)byteswap16(value) * TMP117_RESOLUTION;
}


uint8_t MS8607_check()
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
	ms8607_init();
 8004820:	f7ff f8e4 	bl	80039ec <ms8607_init>
	if(ms8607_is_connected()) {printf("MS8607 OK\r\n"); return 1;
 8004824:	f7ff f8f2 	bl	8003a0c <ms8607_is_connected>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d004      	beq.n	8004838 <MS8607_check+0x1c>
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <MS8607_check+0x28>)
 8004830:	f008 feaa 	bl	800d588 <puts>
 8004834:	2301      	movs	r3, #1
 8004836:	e003      	b.n	8004840 <MS8607_check+0x24>
	} else {printf("MS8607 FAIL\r\n"); return 0;};
 8004838:	4803      	ldr	r0, [pc, #12]	; (8004848 <MS8607_check+0x2c>)
 800483a:	f008 fea5 	bl	800d588 <puts>
 800483e:	2300      	movs	r3, #0
	ms8607_reset();
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	080107ec 	.word	0x080107ec
 8004848:	080107f8 	.word	0x080107f8

0800484c <SHTC3_wakeup>:
//	printf("MS Hum: %f\r\n",hum);
	return hum;
}

uint8_t SHTC3_wakeup()
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	uint16_t command = SHTC3_CMD_WAKEUP;
 8004852:	f241 7335 	movw	r3, #5941	; 0x1735
 8004856:	80bb      	strh	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 3, 150);
 8004858:	1d3a      	adds	r2, r7, #4
 800485a:	2396      	movs	r3, #150	; 0x96
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	2303      	movs	r3, #3
 8004860:	21e0      	movs	r1, #224	; 0xe0
 8004862:	4809      	ldr	r0, [pc, #36]	; (8004888 <SHTC3_wakeup+0x3c>)
 8004864:	f002 fed4 	bl	8007610 <HAL_I2C_Master_Transmit>
 8004868:	4603      	mov	r3, r0
 800486a:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(13);
 800486c:	200d      	movs	r0, #13
 800486e:	f000 fa95 	bl	8004d9c <HAL_Delay>
	if(status == HAL_OK) return 1;
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <SHTC3_wakeup+0x30>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <SHTC3_wakeup+0x32>
	else return 0;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200005b8 	.word	0x200005b8

0800488c <SHTC3_sleep>:

uint8_t SHTC3_sleep()
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	uint16_t command = SHTC3_CMD_SLEEP;
 8004892:	f649 03b0 	movw	r3, #39088	; 0x98b0
 8004896:	80bb      	strh	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 3, 150);
 8004898:	1d3a      	adds	r2, r7, #4
 800489a:	2396      	movs	r3, #150	; 0x96
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2303      	movs	r3, #3
 80048a0:	21e0      	movs	r1, #224	; 0xe0
 80048a2:	4809      	ldr	r0, [pc, #36]	; (80048c8 <SHTC3_sleep+0x3c>)
 80048a4:	f002 feb4 	bl	8007610 <HAL_I2C_Master_Transmit>
 80048a8:	4603      	mov	r3, r0
 80048aa:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 80048ac:	2002      	movs	r0, #2
 80048ae:	f000 fa75 	bl	8004d9c <HAL_Delay>
	if(status == HAL_OK) return 1;
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <SHTC3_sleep+0x30>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <SHTC3_sleep+0x32>
	else return 0;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	200005b8 	.word	0x200005b8

080048cc <SHTC3_check>:


uint8_t SHTC3_check()
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status, status2;
	uint8_t data[2];
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 80048d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80048d6:	2203      	movs	r2, #3
 80048d8:	21e0      	movs	r1, #224	; 0xe0
 80048da:	4828      	ldr	r0, [pc, #160]	; (800497c <SHTC3_check+0xb0>)
 80048dc:	f003 fab0 	bl	8007e40 <HAL_I2C_IsDeviceReady>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 80048e4:	2002      	movs	r0, #2
 80048e6:	f000 fa59 	bl	8004d9c <HAL_Delay>
	if (status == HAL_OK) {
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d13b      	bne.n	8004968 <SHTC3_check+0x9c>
		SHTC3_wakeup();
 80048f0:	f7ff ffac 	bl	800484c <SHTC3_wakeup>
		uint16_t command = SHTC3_CMD_READ_ID;
 80048f4:	f64c 03ef 	movw	r3, #51439	; 0xc8ef
 80048f8:	80fb      	strh	r3, [r7, #6]
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80048fa:	1dba      	adds	r2, r7, #6
 80048fc:	2396      	movs	r3, #150	; 0x96
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2302      	movs	r3, #2
 8004902:	21e0      	movs	r1, #224	; 0xe0
 8004904:	481d      	ldr	r0, [pc, #116]	; (800497c <SHTC3_check+0xb0>)
 8004906:	f002 fe83 	bl	8007610 <HAL_I2C_Master_Transmit>
 800490a:	4603      	mov	r3, r0
 800490c:	73bb      	strb	r3, [r7, #14]
		status2 = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 2, 150);
 800490e:	f107 0208 	add.w	r2, r7, #8
 8004912:	2396      	movs	r3, #150	; 0x96
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	2302      	movs	r3, #2
 8004918:	21e1      	movs	r1, #225	; 0xe1
 800491a:	4818      	ldr	r0, [pc, #96]	; (800497c <SHTC3_check+0xb0>)
 800491c:	f002 ff6c 	bl	80077f8 <HAL_I2C_Master_Receive>
 8004920:	4603      	mov	r3, r0
 8004922:	73bb      	strb	r3, [r7, #14]
		  if (status2 == HAL_OK) {
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d119      	bne.n	800495e <SHTC3_check+0x92>
			  uint16_t id = data[0] << 8 | data[1];
 800492a:	7a3b      	ldrb	r3, [r7, #8]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	b21a      	sxth	r2, r3
 8004930:	7a7b      	ldrb	r3, [r7, #9]
 8004932:	b21b      	sxth	r3, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	b21b      	sxth	r3, r3
 8004938:	81bb      	strh	r3, [r7, #12]
			  uint16_t code = id & SHTC3_PRODUCT_CODE_MASK;
 800493a:	89bb      	ldrh	r3, [r7, #12]
 800493c:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 8004940:	051b      	lsls	r3, r3, #20
 8004942:	0d1b      	lsrs	r3, r3, #20
 8004944:	817b      	strh	r3, [r7, #10]
			  if (code == 0x807) {
 8004946:	897b      	ldrh	r3, [r7, #10]
 8004948:	f640 0207 	movw	r2, #2055	; 0x807
 800494c:	4293      	cmp	r3, r2
 800494e:	d110      	bne.n	8004972 <SHTC3_check+0xa6>
				  printf("SHTC3 OK\r\n");
 8004950:	480b      	ldr	r0, [pc, #44]	; (8004980 <SHTC3_check+0xb4>)
 8004952:	f008 fe19 	bl	800d588 <puts>
				  SHTC3_sleep();
 8004956:	f7ff ff99 	bl	800488c <SHTC3_sleep>
				  return 1;
 800495a:	2301      	movs	r3, #1
 800495c:	e00a      	b.n	8004974 <SHTC3_check+0xa8>
			  }
		  } else {printf("NO SHTC3\r\n"); return 0;}
 800495e:	4809      	ldr	r0, [pc, #36]	; (8004984 <SHTC3_check+0xb8>)
 8004960:	f008 fe12 	bl	800d588 <puts>
 8004964:	2300      	movs	r3, #0
 8004966:	e005      	b.n	8004974 <SHTC3_check+0xa8>
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 8004968:	4807      	ldr	r0, [pc, #28]	; (8004988 <SHTC3_check+0xbc>)
 800496a:	f008 fe0d 	bl	800d588 <puts>
 800496e:	2300      	movs	r3, #0
 8004970:	e000      	b.n	8004974 <SHTC3_check+0xa8>
	return 0;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	200005b8 	.word	0x200005b8
 8004980:	08010808 	.word	0x08010808
 8004984:	08010814 	.word	0x08010814
 8004988:	08010820 	.word	0x08010820

0800498c <SHTC3_get_temp>:

float SHTC3_get_temp(uint8_t mode)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af02      	add	r7, sp, #8
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint16_t command;
		SHTC3_wakeup();
 8004996:	f7ff ff59 	bl	800484c <SHTC3_wakeup>
		if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <SHTC3_get_temp+0x1c>
 80049a0:	f24a 237c 	movw	r3, #41596	; 0xa27c
 80049a4:	81fb      	strh	r3, [r7, #14]
 80049a6:	e002      	b.n	80049ae <SHTC3_get_temp+0x22>
		else command = SHTC3_CMD_TEMP_HUM_LP;
 80049a8:	f645 0364 	movw	r3, #22628	; 0x5864
 80049ac:	81fb      	strh	r3, [r7, #14]
		status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80049ae:	f107 020e 	add.w	r2, r7, #14
 80049b2:	2396      	movs	r3, #150	; 0x96
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2302      	movs	r3, #2
 80049b8:	21e0      	movs	r1, #224	; 0xe0
 80049ba:	4824      	ldr	r0, [pc, #144]	; (8004a4c <SHTC3_get_temp+0xc0>)
 80049bc:	f002 fe28 	bl	8007610 <HAL_I2C_Master_Transmit>
 80049c0:	4603      	mov	r3, r0
 80049c2:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(20);
 80049c4:	2014      	movs	r0, #20
 80049c6:	f000 f9e9 	bl	8004d9c <HAL_Delay>
		status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 3, 150);
 80049ca:	f107 0210 	add.w	r2, r7, #16
 80049ce:	2396      	movs	r3, #150	; 0x96
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2303      	movs	r3, #3
 80049d4:	21e1      	movs	r1, #225	; 0xe1
 80049d6:	481d      	ldr	r0, [pc, #116]	; (8004a4c <SHTC3_get_temp+0xc0>)
 80049d8:	f002 ff0e 	bl	80077f8 <HAL_I2C_Master_Receive>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 80049e0:	7dfb      	ldrb	r3, [r7, #23]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d127      	bne.n	8004a36 <SHTC3_get_temp+0xaa>
		uint16_t raw_temp = data[0] << 8 | data[1];
 80049e6:	7c3b      	ldrb	r3, [r7, #16]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	b21a      	sxth	r2, r3
 80049ec:	7c7b      	ldrb	r3, [r7, #17]
 80049ee:	b21b      	sxth	r3, r3
 80049f0:	4313      	orrs	r3, r2
 80049f2:	b21b      	sxth	r3, r3
 80049f4:	82bb      	strh	r3, [r7, #20]
		uint8_t crc_hal = HALcalculateCRC(data,2);
 80049f6:	f107 0310 	add.w	r3, r7, #16
 80049fa:	2102      	movs	r1, #2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fd31 	bl	8004464 <HALcalculateCRC>
 8004a02:	4603      	mov	r3, r0
 8004a04:	74fb      	strb	r3, [r7, #19]
		if(data[2] == crc_hal) {
 8004a06:	7cbb      	ldrb	r3, [r7, #18]
 8004a08:	7cfa      	ldrb	r2, [r7, #19]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d116      	bne.n	8004a3c <SHTC3_get_temp+0xb0>
			SHTC3_sleep();
 8004a0e:	f7ff ff3d 	bl	800488c <SHTC3_sleep>
			return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
 8004a12:	8abb      	ldrh	r3, [r7, #20]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004a50 <SHTC3_get_temp+0xc4>
 8004a20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a24:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004a54 <SHTC3_get_temp+0xc8>
 8004a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a2c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004a58 <SHTC3_get_temp+0xcc>
 8004a30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a34:	e004      	b.n	8004a40 <SHTC3_get_temp+0xb4>
		}
	} else {printf("SHTC3 Busy\r\n");};
 8004a36:	4809      	ldr	r0, [pc, #36]	; (8004a5c <SHTC3_get_temp+0xd0>)
 8004a38:	f008 fda6 	bl	800d588 <puts>
	return -1000.0;
 8004a3c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004a60 <SHTC3_get_temp+0xd4>
}
 8004a40:	eeb0 0a67 	vmov.f32	s0, s15
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	200005b8 	.word	0x200005b8
 8004a50:	432f0000 	.word	0x432f0000
 8004a54:	477fff00 	.word	0x477fff00
 8004a58:	42340000 	.word	0x42340000
 8004a5c:	08010830 	.word	0x08010830
 8004a60:	c47a0000 	.word	0xc47a0000

08004a64 <SHTC3_get_hum>:

float SHTC3_get_hum(uint8_t mode)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint16_t command;
	SHTC3_wakeup();
 8004a6e:	f7ff feed 	bl	800484c <SHTC3_wakeup>
	if(mode == 0) command = SHTC3_CMD_HUM_TEMP;
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d103      	bne.n	8004a80 <SHTC3_get_hum+0x1c>
 8004a78:	f242 435c 	movw	r3, #9308	; 0x245c
 8004a7c:	81fb      	strh	r3, [r7, #14]
 8004a7e:	e002      	b.n	8004a86 <SHTC3_get_hum+0x22>
	else command = SHTC3_CMD_HUM_TEMP_LP;
 8004a80:	f64d 6344 	movw	r3, #56900	; 0xde44
 8004a84:	81fb      	strh	r3, [r7, #14]
		status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8004a86:	f107 020e 	add.w	r2, r7, #14
 8004a8a:	2396      	movs	r3, #150	; 0x96
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	2302      	movs	r3, #2
 8004a90:	21e0      	movs	r1, #224	; 0xe0
 8004a92:	4823      	ldr	r0, [pc, #140]	; (8004b20 <SHTC3_get_hum+0xbc>)
 8004a94:	f002 fdbc 	bl	8007610 <HAL_I2C_Master_Transmit>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(20);
 8004a9c:	2014      	movs	r0, #20
 8004a9e:	f000 f97d 	bl	8004d9c <HAL_Delay>
		status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 3, 150);
 8004aa2:	f107 0210 	add.w	r2, r7, #16
 8004aa6:	2396      	movs	r3, #150	; 0x96
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	2303      	movs	r3, #3
 8004aac:	21e1      	movs	r1, #225	; 0xe1
 8004aae:	481c      	ldr	r0, [pc, #112]	; (8004b20 <SHTC3_get_hum+0xbc>)
 8004ab0:	f002 fea2 	bl	80077f8 <HAL_I2C_Master_Receive>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 8004ab8:	7dfb      	ldrb	r3, [r7, #23]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d123      	bne.n	8004b06 <SHTC3_get_hum+0xa2>
		uint16_t raw_hum = data[0] << 8 | data[1];
 8004abe:	7c3b      	ldrb	r3, [r7, #16]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	b21a      	sxth	r2, r3
 8004ac4:	7c7b      	ldrb	r3, [r7, #17]
 8004ac6:	b21b      	sxth	r3, r3
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	82bb      	strh	r3, [r7, #20]
		uint8_t crc_hal = HALcalculateCRC(data,2);
 8004ace:	f107 0310 	add.w	r3, r7, #16
 8004ad2:	2102      	movs	r1, #2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fcc5 	bl	8004464 <HALcalculateCRC>
 8004ada:	4603      	mov	r3, r0
 8004adc:	74fb      	strb	r3, [r7, #19]

		if(data[2] == crc_hal) {
 8004ade:	7cbb      	ldrb	r3, [r7, #18]
 8004ae0:	7cfa      	ldrb	r2, [r7, #19]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d112      	bne.n	8004b0c <SHTC3_get_hum+0xa8>
			SHTC3_sleep();
 8004ae6:	f7ff fed1 	bl	800488c <SHTC3_sleep>
			return (float)((raw_hum * 100.0f) / 65535.0f);
 8004aea:	8abb      	ldrh	r3, [r7, #20]
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004b24 <SHTC3_get_hum+0xc0>
 8004af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004afc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004b28 <SHTC3_get_hum+0xc4>
 8004b00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004b04:	e004      	b.n	8004b10 <SHTC3_get_hum+0xac>
		}
	} else {printf("SHTC3 Busy\r\n");};
 8004b06:	4809      	ldr	r0, [pc, #36]	; (8004b2c <SHTC3_get_hum+0xc8>)
 8004b08:	f008 fd3e 	bl	800d588 <puts>
	return -1000.0;
 8004b0c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004b30 <SHTC3_get_hum+0xcc>
}
 8004b10:	eef0 7a47 	vmov.f32	s15, s14
 8004b14:	eeb0 0a67 	vmov.f32	s0, s15
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200005b8 	.word	0x200005b8
 8004b24:	42c80000 	.word	0x42c80000
 8004b28:	477fff00 	.word	0x477fff00
 8004b2c:	08010830 	.word	0x08010830
 8004b30:	c47a0000 	.word	0xc47a0000

08004b34 <BME280_check>:

uint8_t BME280_check()
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
	uint8_t value;
	TCA9543A_SelectChannel(1);
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	f7ff fde4 	bl	8004708 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8004b40:	2001      	movs	r0, #1
 8004b42:	f000 f92b 	bl	8004d9c <HAL_Delay>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, BMP280_I2C_ADDRESS_1 << 1, 3, 150);
 8004b46:	2396      	movs	r3, #150	; 0x96
 8004b48:	2203      	movs	r2, #3
 8004b4a:	21ee      	movs	r1, #238	; 0xee
 8004b4c:	4814      	ldr	r0, [pc, #80]	; (8004ba0 <BME280_check+0x6c>)
 8004b4e:	f003 f977 	bl	8007e40 <HAL_I2C_IsDeviceReady>
 8004b52:	4603      	mov	r3, r0
 8004b54:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8004b56:	2064      	movs	r0, #100	; 0x64
 8004b58:	f000 f920 	bl	8004d9c <HAL_Delay>
	if (status == HAL_OK) {
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d115      	bne.n	8004b8e <BME280_check+0x5a>
		i2c_read8(&hi2c2, BMP280_REG_ID, &value, BMP280_I2C_ADDRESS_1 << 1);
 8004b62:	1dba      	adds	r2, r7, #6
 8004b64:	23ee      	movs	r3, #238	; 0xee
 8004b66:	21d0      	movs	r1, #208	; 0xd0
 8004b68:	480d      	ldr	r0, [pc, #52]	; (8004ba0 <BME280_check+0x6c>)
 8004b6a:	f7ff fc9b 	bl	80044a4 <i2c_read8>
		TCA9543A_SelectChannel(0);
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7ff fdca 	bl	8004708 <TCA9543A_SelectChannel>
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 8004b74:	79bb      	ldrb	r3, [r7, #6]
 8004b76:	2b60      	cmp	r3, #96	; 0x60
 8004b78:	d104      	bne.n	8004b84 <BME280_check+0x50>
 8004b7a:	480a      	ldr	r0, [pc, #40]	; (8004ba4 <BME280_check+0x70>)
 8004b7c:	f008 fd04 	bl	800d588 <puts>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e008      	b.n	8004b96 <BME280_check+0x62>
 8004b84:	4808      	ldr	r0, [pc, #32]	; (8004ba8 <BME280_check+0x74>)
 8004b86:	f008 fcff 	bl	800d588 <puts>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e003      	b.n	8004b96 <BME280_check+0x62>
	} else {printf("BME280 FAILED\r\n"); return 0;}
 8004b8e:	4807      	ldr	r0, [pc, #28]	; (8004bac <BME280_check+0x78>)
 8004b90:	f008 fcfa 	bl	800d588 <puts>
 8004b94:	2300      	movs	r3, #0
	return 0;

}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	200005b8 	.word	0x200005b8
 8004ba4:	0801083c 	.word	0x0801083c
 8004ba8:	08010848 	.word	0x08010848
 8004bac:	08010854 	.word	0x08010854

08004bb0 <BME280_init_config>:

void BME280_init_config(uint8_t conf_mode, uint8_t ovr_temp, uint8_t ovr_press, uint8_t ovr_hum, uint8_t coeff)
{
 8004bb0:	b590      	push	{r4, r7, lr}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	71fb      	strb	r3, [r7, #7]
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71bb      	strb	r3, [r7, #6]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	717b      	strb	r3, [r7, #5]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	713b      	strb	r3, [r7, #4]
	TCA9543A_SelectChannel(1);
 8004bce:	2001      	movs	r0, #1
 8004bd0:	f7ff fd9a 	bl	8004708 <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f000 f8e1 	bl	8004d9c <HAL_Delay>
//	bmp280_init_default_params(&bmp280.params);

	bmp280.params.filter = coeff;
 8004bda:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <BME280_init_config+0xa4>)
 8004bdc:	7e3b      	ldrb	r3, [r7, #24]
 8004bde:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
	bmp280.params.oversampling_pressure = ovr_press;
 8004be2:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <BME280_init_config+0xa4>)
 8004be4:	797b      	ldrb	r3, [r7, #5]
 8004be6:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	bmp280.params.oversampling_temperature = ovr_temp;
 8004bea:	4a1a      	ldr	r2, [pc, #104]	; (8004c54 <BME280_init_config+0xa4>)
 8004bec:	79bb      	ldrb	r3, [r7, #6]
 8004bee:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	bmp280.params.oversampling_humidity = ovr_hum;
 8004bf2:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <BME280_init_config+0xa4>)
 8004bf4:	793b      	ldrb	r3, [r7, #4]
 8004bf6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	bmp280.params.standby = BMP280_STANDBY_250;
 8004bfa:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <BME280_init_config+0xa4>)
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <BME280_init_config+0xa4>)
 8004c04:	2277      	movs	r2, #119	; 0x77
 8004c06:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <BME280_init_config+0xa4>)
 8004c0a:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <BME280_init_config+0xa8>)
 8004c0c:	629a      	str	r2, [r3, #40]	; 0x28

	switch (conf_mode)
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d002      	beq.n	8004c1a <BME280_init_config+0x6a>
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d005      	beq.n	8004c24 <BME280_init_config+0x74>
 8004c18:	e009      	b.n	8004c2e <BME280_init_config+0x7e>
	{
	case 1:
		bmp280.params.mode = BMP280_MODE_FORCED;
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <BME280_init_config+0xa4>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8004c22:	e008      	b.n	8004c36 <BME280_init_config+0x86>
	case 2:
		bmp280.params.mode = BMP280_MODE_NORMAL;
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <BME280_init_config+0xa4>)
 8004c26:	2203      	movs	r2, #3
 8004c28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 8004c2c:	e003      	b.n	8004c36 <BME280_init_config+0x86>
	default:
		bmp280.params.mode = BMP280_MODE_NORMAL;
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <BME280_init_config+0xa4>)
 8004c30:	2203      	movs	r2, #3
 8004c32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	  }
	bmp280_init(&bmp280, &bmp280.params);
 8004c36:	4909      	ldr	r1, [pc, #36]	; (8004c5c <BME280_init_config+0xac>)
 8004c38:	4806      	ldr	r0, [pc, #24]	; (8004c54 <BME280_init_config+0xa4>)
 8004c3a:	f7fc ff19 	bl	8001a70 <bmp280_init>
	HAL_Delay(1);
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f000 f8ac 	bl	8004d9c <HAL_Delay>
	TCA9543A_SelectChannel(0);
 8004c44:	2000      	movs	r0, #0
 8004c46:	f7ff fd5f 	bl	8004708 <TCA9543A_SelectChannel>
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000848 	.word	0x20000848
 8004c58:	200005b8 	.word	0x200005b8
 8004c5c:	20000874 	.word	0x20000874

08004c60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004c64:	f7ff fae4 	bl	8004230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c68:	480c      	ldr	r0, [pc, #48]	; (8004c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8004c6a:	490d      	ldr	r1, [pc, #52]	; (8004ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ca4 <LoopForever+0xe>)
  movs r3, #0
 8004c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c70:	e002      	b.n	8004c78 <LoopCopyDataInit>

08004c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c76:	3304      	adds	r3, #4

08004c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c7c:	d3f9      	bcc.n	8004c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c80:	4c0a      	ldr	r4, [pc, #40]	; (8004cac <LoopForever+0x16>)
  movs r3, #0
 8004c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c84:	e001      	b.n	8004c8a <LoopFillZerobss>

08004c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c88:	3204      	adds	r2, #4

08004c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c8c:	d3fb      	bcc.n	8004c86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c8e:	f008 fdc5 	bl	800d81c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c92:	f7fe f92b 	bl	8002eec <main>

08004c96 <LoopForever>:

LoopForever:
    b LoopForever
 8004c96:	e7fe      	b.n	8004c96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004c98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ca0:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004ca4:	08010d04 	.word	0x08010d04
  ldr r2, =_sbss
 8004ca8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004cac:	20000a20 	.word	0x20000a20

08004cb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004cb0:	e7fe      	b.n	8004cb0 <ADC1_IRQHandler>

08004cb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cbc:	2003      	movs	r0, #3
 8004cbe:	f001 fb1f 	bl	8006300 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cc2:	200f      	movs	r0, #15
 8004cc4:	f000 f80e 	bl	8004ce4 <HAL_InitTick>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	71fb      	strb	r3, [r7, #7]
 8004cd2:	e001      	b.n	8004cd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004cd4:	f7fe ff00 	bl	8003ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004cf0:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <HAL_InitTick+0x6c>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d023      	beq.n	8004d40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004cf8:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <HAL_InitTick+0x70>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <HAL_InitTick+0x6c>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	4619      	mov	r1, r3
 8004d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fb2b 	bl	800636a <HAL_SYSTICK_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10f      	bne.n	8004d3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b0f      	cmp	r3, #15
 8004d1e:	d809      	bhi.n	8004d34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d20:	2200      	movs	r2, #0
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	f001 faf5 	bl	8006316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <HAL_InitTick+0x74>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e007      	b.n	8004d44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
 8004d38:	e004      	b.n	8004d44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
 8004d3e:	e001      	b.n	8004d44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	2000000c 	.word	0x2000000c
 8004d54:	20000004 	.word	0x20000004
 8004d58:	20000008 	.word	0x20000008

08004d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d60:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_IncTick+0x20>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_IncTick+0x24>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	4a04      	ldr	r2, [pc, #16]	; (8004d80 <HAL_IncTick+0x24>)
 8004d6e:	6013      	str	r3, [r2, #0]
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	2000000c 	.word	0x2000000c
 8004d80:	200008d0 	.word	0x200008d0

08004d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return uwTick;
 8004d88:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <HAL_GetTick+0x14>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	200008d0 	.word	0x200008d0

08004d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004da4:	f7ff ffee 	bl	8004d84 <HAL_GetTick>
 8004da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db4:	d005      	beq.n	8004dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004db6:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <HAL_Delay+0x44>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004dc2:	bf00      	nop
 8004dc4:	f7ff ffde 	bl	8004d84 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d8f7      	bhi.n	8004dc4 <HAL_Delay+0x28>
  {
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	609a      	str	r2, [r3, #8]
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3360      	adds	r3, #96	; 0x60
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <LL_ADC_SetOffset+0x44>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	03fff000 	.word	0x03fff000

08004e94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3360      	adds	r3, #96	; 0x60
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3360      	adds	r3, #96	; 0x60
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3330      	adds	r3, #48	; 0x30
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	f003 030c 	and.w	r3, r3, #12
 8004f38:	4413      	add	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	211f      	movs	r1, #31
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	401a      	ands	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	0e9b      	lsrs	r3, r3, #26
 8004f54:	f003 011f 	and.w	r1, r3, #31
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f62:	431a      	orrs	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3314      	adds	r3, #20
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	0e5b      	lsrs	r3, r3, #25
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	4413      	add	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	0d1b      	lsrs	r3, r3, #20
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	2107      	movs	r1, #7
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	401a      	ands	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	0d1b      	lsrs	r3, r3, #20
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f003 0318 	and.w	r3, r3, #24
 8004fee:	4908      	ldr	r1, [pc, #32]	; (8005010 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ff0:	40d9      	lsrs	r1, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	400b      	ands	r3, r1
 8004ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	0007ffff 	.word	0x0007ffff

08005014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6093      	str	r3, [r2, #8]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800504c:	d101      	bne.n	8005052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005074:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509c:	d101      	bne.n	80050a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050c4:	f043 0201 	orr.w	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050ec:	f043 0202 	orr.w	r2, r3, #2
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <LL_ADC_IsEnabled+0x18>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <LL_ADC_IsEnabled+0x1a>
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d101      	bne.n	800513e <LL_ADC_IsDisableOngoing+0x18>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <LL_ADC_IsDisableOngoing+0x1a>
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800515c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005160:	f043 0204 	orr.w	r2, r3, #4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d101      	bne.n	800518c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005188:	2301      	movs	r3, #1
 800518a:	e000      	b.n	800518e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b08      	cmp	r3, #8
 80051ac:	d101      	bne.n	80051b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e12c      	b.n	8005434 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7fe fc9b 	bl	8003b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ff19 	bl	8005038 <LL_ADC_IsDeepPowerDownEnabled>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff feff 	bl	8005014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff34 	bl	8005088 <LL_ADC_IsInternalRegulatorEnabled>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d115      	bne.n	8005252 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff ff18 	bl	8005060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005230:	4b82      	ldr	r3, [pc, #520]	; (800543c <HAL_ADC_Init+0x27c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	099b      	lsrs	r3, r3, #6
 8005236:	4a82      	ldr	r2, [pc, #520]	; (8005440 <HAL_ADC_Init+0x280>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	099b      	lsrs	r3, r3, #6
 800523e:	3301      	adds	r3, #1
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005244:	e002      	b.n	800524c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	3b01      	subs	r3, #1
 800524a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f9      	bne.n	8005246 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff ff16 	bl	8005088 <LL_ADC_IsInternalRegulatorEnabled>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10d      	bne.n	800527e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	f043 0210 	orr.w	r2, r3, #16
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	f043 0201 	orr.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff ff76 	bl	8005174 <LL_ADC_REG_IsConversionOngoing>
 8005288:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	f040 80c5 	bne.w	8005422 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f040 80c1 	bne.w	8005422 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80052a8:	f043 0202 	orr.w	r2, r3, #2
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff ff23 	bl	8005100 <LL_ADC_IsEnabled>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052c0:	4860      	ldr	r0, [pc, #384]	; (8005444 <HAL_ADC_Init+0x284>)
 80052c2:	f7ff ff1d 	bl	8005100 <LL_ADC_IsEnabled>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4619      	mov	r1, r3
 80052d2:	485d      	ldr	r0, [pc, #372]	; (8005448 <HAL_ADC_Init+0x288>)
 80052d4:	f7ff fd86 	bl	8004de4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	7e5b      	ldrb	r3, [r3, #25]
 80052dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80052e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80052ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d106      	bne.n	8005314 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	3b01      	subs	r3, #1
 800530c:	045b      	lsls	r3, r3, #17
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	4b45      	ldr	r3, [pc, #276]	; (800544c <HAL_ADC_Init+0x28c>)
 8005338:	4013      	ands	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	69b9      	ldr	r1, [r7, #24]
 8005340:	430b      	orrs	r3, r1
 8005342:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff ff13 	bl	8005174 <LL_ADC_REG_IsConversionOngoing>
 800534e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff ff20 	bl	800519a <LL_ADC_INJ_IsConversionOngoing>
 800535a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d13d      	bne.n	80053de <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d13a      	bne.n	80053de <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800536c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005374:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005376:	4313      	orrs	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005384:	f023 0302 	bic.w	r3, r3, #2
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	430b      	orrs	r3, r1
 8005390:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005398:	2b01      	cmp	r3, #1
 800539a:	d118      	bne.n	80053ce <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053a6:	f023 0304 	bic.w	r3, r3, #4
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053b2:	4311      	orrs	r1, r2
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053b8:	4311      	orrs	r1, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053be:	430a      	orrs	r2, r1
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	611a      	str	r2, [r3, #16]
 80053cc:	e007      	b.n	80053de <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10c      	bne.n	8005400 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	f023 010f 	bic.w	r1, r3, #15
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	1e5a      	subs	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
 80053fe:	e007      	b.n	8005410 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 020f 	bic.w	r2, r2, #15
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	f023 0303 	bic.w	r3, r3, #3
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
 8005420:	e007      	b.n	8005432 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	f043 0210 	orr.w	r2, r3, #16
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005432:	7ffb      	ldrb	r3, [r7, #31]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000004 	.word	0x20000004
 8005440:	053e2d63 	.word	0x053e2d63
 8005444:	50040000 	.word	0x50040000
 8005448:	50040300 	.word	0x50040300
 800544c:	fff0c007 	.word	0xfff0c007

08005450 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff fe87 	bl	8005174 <LL_ADC_REG_IsConversionOngoing>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d167      	bne.n	800553c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_ADC_Start_DMA+0x2a>
 8005476:	2302      	movs	r3, #2
 8005478:	e063      	b.n	8005542 <HAL_ADC_Start_DMA+0xf2>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fc66 	bl	8005d54 <ADC_Enable>
 8005488:	4603      	mov	r3, r0
 800548a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800548c:	7dfb      	ldrb	r3, [r7, #23]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d14f      	bne.n	8005532 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800549a:	f023 0301 	bic.w	r3, r3, #1
 800549e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b6:	f023 0206 	bic.w	r2, r3, #6
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	659a      	str	r2, [r3, #88]	; 0x58
 80054be:	e002      	b.n	80054c6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ca:	4a20      	ldr	r2, [pc, #128]	; (800554c <HAL_ADC_Start_DMA+0xfc>)
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d2:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_ADC_Start_DMA+0x100>)
 80054d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <HAL_ADC_Start_DMA+0x104>)
 80054dc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	221c      	movs	r2, #28
 80054e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0210 	orr.w	r2, r2, #16
 80054fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3340      	adds	r3, #64	; 0x40
 8005518:	4619      	mov	r1, r3
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f001 f9ed 	bl	80068fc <HAL_DMA_Start_IT>
 8005522:	4603      	mov	r3, r0
 8005524:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff fe0e 	bl	800514c <LL_ADC_REG_StartConversion>
 8005530:	e006      	b.n	8005540 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800553a:	e001      	b.n	8005540 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800553c:	2302      	movs	r3, #2
 800553e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	08005f1f 	.word	0x08005f1f
 8005550:	08005ff7 	.word	0x08005ff7
 8005554:	08006013 	.word	0x08006013

08005558 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b0b6      	sub	sp, #216	; 0xd8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_ADC_ConfigChannel+0x22>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e3b9      	b.n	8005d2a <HAL_ADC_ConfigChannel+0x796>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fdd6 	bl	8005174 <LL_ADC_REG_IsConversionOngoing>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 839e 	bne.w	8005d0c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	d824      	bhi.n	8005622 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	3b02      	subs	r3, #2
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d81b      	bhi.n	800561a <HAL_ADC_ConfigChannel+0x86>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_ADC_ConfigChannel+0x54>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005601 	.word	0x08005601
 80055f0:	08005609 	.word	0x08005609
 80055f4:	08005611 	.word	0x08005611
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	220c      	movs	r2, #12
 80055fc:	605a      	str	r2, [r3, #4]
          break;
 80055fe:	e010      	b.n	8005622 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2212      	movs	r2, #18
 8005604:	605a      	str	r2, [r3, #4]
          break;
 8005606:	e00c      	b.n	8005622 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2218      	movs	r2, #24
 800560c:	605a      	str	r2, [r3, #4]
          break;
 800560e:	e008      	b.n	8005622 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005616:	605a      	str	r2, [r3, #4]
          break;
 8005618:	e003      	b.n	8005622 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2206      	movs	r2, #6
 800561e:	605a      	str	r2, [r3, #4]
          break;
 8005620:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7ff fc74 	bl	8004f1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fd9b 	bl	8005174 <LL_ADC_REG_IsConversionOngoing>
 800563e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fda7 	bl	800519a <LL_ADC_INJ_IsConversionOngoing>
 800564c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005650:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005654:	2b00      	cmp	r3, #0
 8005656:	f040 81a6 	bne.w	80059a6 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800565a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 81a1 	bne.w	80059a6 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6819      	ldr	r1, [r3, #0]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	461a      	mov	r2, r3
 8005672:	f7ff fc7f 	bl	8004f74 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	08db      	lsrs	r3, r3, #3
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b04      	cmp	r3, #4
 8005696:	d00a      	beq.n	80056ae <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	6919      	ldr	r1, [r3, #16]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056a8:	f7ff fbd0 	bl	8004e4c <LL_ADC_SetOffset>
 80056ac:	e17b      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2100      	movs	r1, #0
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fbed 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <HAL_ADC_ConfigChannel+0x146>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fbe2 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 80056d0:	4603      	mov	r3, r0
 80056d2:	0e9b      	lsrs	r3, r3, #26
 80056d4:	f003 021f 	and.w	r2, r3, #31
 80056d8:	e01e      	b.n	8005718 <HAL_ADC_ConfigChannel+0x184>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fbd7 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056f0:	fa93 f3a3 	rbit	r3, r3
 80056f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80056f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8005708:	2320      	movs	r3, #32
 800570a:	e004      	b.n	8005716 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 800570c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005710:	fab3 f383 	clz	r3, r3
 8005714:	b2db      	uxtb	r3, r3
 8005716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <HAL_ADC_ConfigChannel+0x19c>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0e9b      	lsrs	r3, r3, #26
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	e018      	b.n	8005762 <HAL_ADC_ConfigChannel+0x1ce>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005738:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800573c:	fa93 f3a3 	rbit	r3, r3
 8005740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800574c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8005754:	2320      	movs	r3, #32
 8005756:	e004      	b.n	8005762 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8005758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800575c:	fab3 f383 	clz	r3, r3
 8005760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005762:	429a      	cmp	r2, r3
 8005764:	d106      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2200      	movs	r2, #0
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fba6 	bl	8004ec0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2101      	movs	r1, #1
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fb8a 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 8005780:	4603      	mov	r3, r0
 8005782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x20c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2101      	movs	r1, #1
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fb7f 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 8005796:	4603      	mov	r3, r0
 8005798:	0e9b      	lsrs	r3, r3, #26
 800579a:	f003 021f 	and.w	r2, r3, #31
 800579e:	e01e      	b.n	80057de <HAL_ADC_ConfigChannel+0x24a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2101      	movs	r1, #1
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fb74 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057b6:	fa93 f3a3 	rbit	r3, r3
 80057ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80057be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80057c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 80057ce:	2320      	movs	r3, #32
 80057d0:	e004      	b.n	80057dc <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 80057d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057d6:	fab3 f383 	clz	r3, r3
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <HAL_ADC_ConfigChannel+0x262>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	0e9b      	lsrs	r3, r3, #26
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	e018      	b.n	8005828 <HAL_ADC_ConfigChannel+0x294>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800580a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800580e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 800581a:	2320      	movs	r3, #32
 800581c:	e004      	b.n	8005828 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800581e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005822:	fab3 f383 	clz	r3, r3
 8005826:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005828:	429a      	cmp	r2, r3
 800582a:	d106      	bne.n	800583a <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2200      	movs	r2, #0
 8005832:	2101      	movs	r1, #1
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fb43 	bl	8004ec0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fb27 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 8005846:	4603      	mov	r3, r0
 8005848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x2d2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2102      	movs	r1, #2
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fb1c 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 800585c:	4603      	mov	r3, r0
 800585e:	0e9b      	lsrs	r3, r3, #26
 8005860:	f003 021f 	and.w	r2, r3, #31
 8005864:	e01e      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x310>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2102      	movs	r1, #2
 800586c:	4618      	mov	r0, r3
 800586e:	f7ff fb11 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 8005872:	4603      	mov	r3, r0
 8005874:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005878:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800587c:	fa93 f3a3 	rbit	r3, r3
 8005880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800588c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8005894:	2320      	movs	r3, #32
 8005896:	e004      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8005898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800589c:	fab3 f383 	clz	r3, r3
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x328>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	0e9b      	lsrs	r3, r3, #26
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	e016      	b.n	80058ea <HAL_ADC_ConfigChannel+0x356>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058c8:	fa93 f3a3 	rbit	r3, r3
 80058cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80058ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80058d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 80058dc:	2320      	movs	r3, #32
 80058de:	e004      	b.n	80058ea <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80058e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d106      	bne.n	80058fc <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2200      	movs	r2, #0
 80058f4:	2102      	movs	r1, #2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fae2 	bl	8004ec0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2103      	movs	r1, #3
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff fac6 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 8005908:	4603      	mov	r3, r0
 800590a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10a      	bne.n	8005928 <HAL_ADC_ConfigChannel+0x394>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2103      	movs	r1, #3
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fabb 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 800591e:	4603      	mov	r3, r0
 8005920:	0e9b      	lsrs	r3, r3, #26
 8005922:	f003 021f 	and.w	r2, r3, #31
 8005926:	e017      	b.n	8005958 <HAL_ADC_ConfigChannel+0x3c4>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2103      	movs	r1, #3
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fab0 	bl	8004e94 <LL_ADC_GetOffsetChannel>
 8005934:	4603      	mov	r3, r0
 8005936:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593a:	fa93 f3a3 	rbit	r3, r3
 800593e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005942:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 800594a:	2320      	movs	r3, #32
 800594c:	e003      	b.n	8005956 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 800594e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005950:	fab3 f383 	clz	r3, r3
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005960:	2b00      	cmp	r3, #0
 8005962:	d105      	bne.n	8005970 <HAL_ADC_ConfigChannel+0x3dc>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	0e9b      	lsrs	r3, r3, #26
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	e011      	b.n	8005994 <HAL_ADC_ConfigChannel+0x400>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005978:	fa93 f3a3 	rbit	r3, r3
 800597c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800597e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005980:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8005988:	2320      	movs	r3, #32
 800598a:	e003      	b.n	8005994 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 800598c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005994:	429a      	cmp	r2, r3
 8005996:	d106      	bne.n	80059a6 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2200      	movs	r2, #0
 800599e:	2103      	movs	r1, #3
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fa8d 	bl	8004ec0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fba8 	bl	8005100 <LL_ADC_IsEnabled>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f040 8140 	bne.w	8005c38 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	6819      	ldr	r1, [r3, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	461a      	mov	r2, r3
 80059c6:	f7ff fb01 	bl	8004fcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4a8f      	ldr	r2, [pc, #572]	; (8005c0c <HAL_ADC_ConfigChannel+0x678>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	f040 8131 	bne.w	8005c38 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10b      	bne.n	80059fe <HAL_ADC_ConfigChannel+0x46a>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	0e9b      	lsrs	r3, r3, #26
 80059ec:	3301      	adds	r3, #1
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	2b09      	cmp	r3, #9
 80059f4:	bf94      	ite	ls
 80059f6:	2301      	movls	r3, #1
 80059f8:	2300      	movhi	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	e019      	b.n	8005a32 <HAL_ADC_ConfigChannel+0x49e>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a06:	fa93 f3a3 	rbit	r3, r3
 8005a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a0e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8005a16:	2320      	movs	r3, #32
 8005a18:	e003      	b.n	8005a22 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8005a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a1c:	fab3 f383 	clz	r3, r3
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	3301      	adds	r3, #1
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	2b09      	cmp	r3, #9
 8005a2a:	bf94      	ite	ls
 8005a2c:	2301      	movls	r3, #1
 8005a2e:	2300      	movhi	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d079      	beq.n	8005b2a <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0x4be>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	0e9b      	lsrs	r3, r3, #26
 8005a48:	3301      	adds	r3, #1
 8005a4a:	069b      	lsls	r3, r3, #26
 8005a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a50:	e015      	b.n	8005a7e <HAL_ADC_ConfigChannel+0x4ea>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a5a:	fa93 f3a3 	rbit	r3, r3
 8005a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a62:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	e003      	b.n	8005a76 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8005a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a70:	fab3 f383 	clz	r3, r3
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	3301      	adds	r3, #1
 8005a78:	069b      	lsls	r3, r3, #26
 8005a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d109      	bne.n	8005a9e <HAL_ADC_ConfigChannel+0x50a>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	0e9b      	lsrs	r3, r3, #26
 8005a90:	3301      	adds	r3, #1
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2101      	movs	r1, #1
 8005a98:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9c:	e017      	b.n	8005ace <HAL_ADC_ConfigChannel+0x53a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa6:	fa93 f3a3 	rbit	r3, r3
 8005aaa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	e003      	b.n	8005ac2 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8005aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005abc:	fab3 f383 	clz	r3, r3
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	ea42 0103 	orr.w	r1, r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <HAL_ADC_ConfigChannel+0x560>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0e9b      	lsrs	r3, r3, #26
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f003 021f 	and.w	r2, r3, #31
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	051b      	lsls	r3, r3, #20
 8005af2:	e018      	b.n	8005b26 <HAL_ADC_ConfigChannel+0x592>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	fa93 f3a3 	rbit	r3, r3
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005b0c:	2320      	movs	r3, #32
 8005b0e:	e003      	b.n	8005b18 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b12:	fab3 f383 	clz	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f003 021f 	and.w	r2, r3, #31
 8005b1e:	4613      	mov	r3, r2
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	4413      	add	r3, r2
 8005b24:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b26:	430b      	orrs	r3, r1
 8005b28:	e081      	b.n	8005c2e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d107      	bne.n	8005b46 <HAL_ADC_ConfigChannel+0x5b2>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	0e9b      	lsrs	r3, r3, #26
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	069b      	lsls	r3, r3, #26
 8005b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b44:	e015      	b.n	8005b72 <HAL_ADC_ConfigChannel+0x5de>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	fa93 f3a3 	rbit	r3, r3
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8005b5e:	2320      	movs	r3, #32
 8005b60:	e003      	b.n	8005b6a <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	fab3 f383 	clz	r3, r3
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	069b      	lsls	r3, r3, #26
 8005b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <HAL_ADC_ConfigChannel+0x5fe>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	0e9b      	lsrs	r3, r3, #26
 8005b84:	3301      	adds	r3, #1
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b90:	e017      	b.n	8005bc2 <HAL_ADC_ConfigChannel+0x62e>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	fa93 f3a3 	rbit	r3, r3
 8005b9e:	61fb      	str	r3, [r7, #28]
  return result;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8005baa:	2320      	movs	r3, #32
 8005bac:	e003      	b.n	8005bb6 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	fab3 f383 	clz	r3, r3
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	ea42 0103 	orr.w	r1, r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10d      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x65a>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	0e9b      	lsrs	r3, r3, #26
 8005bd8:	3301      	adds	r3, #1
 8005bda:	f003 021f 	and.w	r2, r3, #31
 8005bde:	4613      	mov	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	4413      	add	r3, r2
 8005be4:	3b1e      	subs	r3, #30
 8005be6:	051b      	lsls	r3, r3, #20
 8005be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bec:	e01e      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x698>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	fa93 f3a3 	rbit	r3, r3
 8005bfa:	613b      	str	r3, [r7, #16]
  return result;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005c06:	2320      	movs	r3, #32
 8005c08:	e006      	b.n	8005c18 <HAL_ADC_ConfigChannel+0x684>
 8005c0a:	bf00      	nop
 8005c0c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	fab3 f383 	clz	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	3301      	adds	r3, #1
 8005c1a:	f003 021f 	and.w	r2, r3, #31
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	3b1e      	subs	r3, #30
 8005c26:	051b      	lsls	r3, r3, #20
 8005c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	6892      	ldr	r2, [r2, #8]
 8005c32:	4619      	mov	r1, r3
 8005c34:	f7ff f99e 	bl	8004f74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b3d      	ldr	r3, [pc, #244]	; (8005d34 <HAL_ADC_ConfigChannel+0x7a0>)
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d06c      	beq.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c44:	483c      	ldr	r0, [pc, #240]	; (8005d38 <HAL_ADC_ConfigChannel+0x7a4>)
 8005c46:	f7ff f8f3 	bl	8004e30 <LL_ADC_GetCommonPathInternalCh>
 8005c4a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a3a      	ldr	r2, [pc, #232]	; (8005d3c <HAL_ADC_ConfigChannel+0x7a8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d127      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d121      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a35      	ldr	r2, [pc, #212]	; (8005d40 <HAL_ADC_ConfigChannel+0x7ac>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d157      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c76:	4619      	mov	r1, r3
 8005c78:	482f      	ldr	r0, [pc, #188]	; (8005d38 <HAL_ADC_ConfigChannel+0x7a4>)
 8005c7a:	f7ff f8c6 	bl	8004e0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c7e:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <HAL_ADC_ConfigChannel+0x7b0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	099b      	lsrs	r3, r3, #6
 8005c84:	4a30      	ldr	r2, [pc, #192]	; (8005d48 <HAL_ADC_ConfigChannel+0x7b4>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	099b      	lsrs	r3, r3, #6
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005c98:	e002      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1f9      	bne.n	8005c9a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ca6:	e03a      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a27      	ldr	r2, [pc, #156]	; (8005d4c <HAL_ADC_ConfigChannel+0x7b8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d113      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x746>
 8005cb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <HAL_ADC_ConfigChannel+0x7ac>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d12a      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4819      	ldr	r0, [pc, #100]	; (8005d38 <HAL_ADC_ConfigChannel+0x7a4>)
 8005cd4:	f7ff f899 	bl	8004e0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cd8:	e021      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <HAL_ADC_ConfigChannel+0x7bc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d11c      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ce8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d116      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a12      	ldr	r2, [pc, #72]	; (8005d40 <HAL_ADC_ConfigChannel+0x7ac>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d111      	bne.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d02:	4619      	mov	r1, r3
 8005d04:	480c      	ldr	r0, [pc, #48]	; (8005d38 <HAL_ADC_ConfigChannel+0x7a4>)
 8005d06:	f7ff f880 	bl	8004e0a <LL_ADC_SetCommonPathInternalCh>
 8005d0a:	e008      	b.n	8005d1e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d10:	f043 0220 	orr.w	r2, r3, #32
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d26:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	37d8      	adds	r7, #216	; 0xd8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	80080000 	.word	0x80080000
 8005d38:	50040300 	.word	0x50040300
 8005d3c:	c7520000 	.word	0xc7520000
 8005d40:	50040000 	.word	0x50040000
 8005d44:	20000004 	.word	0x20000004
 8005d48:	053e2d63 	.word	0x053e2d63
 8005d4c:	cb840000 	.word	0xcb840000
 8005d50:	80000001 	.word	0x80000001

08005d54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff f9cb 	bl	8005100 <LL_ADC_IsEnabled>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d169      	bne.n	8005e44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	4b36      	ldr	r3, [pc, #216]	; (8005e50 <ADC_Enable+0xfc>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00d      	beq.n	8005d9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f043 0210 	orr.w	r2, r3, #16
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	f043 0201 	orr.w	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e055      	b.n	8005e46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff f986 	bl	80050b0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005da4:	482b      	ldr	r0, [pc, #172]	; (8005e54 <ADC_Enable+0x100>)
 8005da6:	f7ff f843 	bl	8004e30 <LL_ADC_GetCommonPathInternalCh>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d013      	beq.n	8005ddc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005db4:	4b28      	ldr	r3, [pc, #160]	; (8005e58 <ADC_Enable+0x104>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	099b      	lsrs	r3, r3, #6
 8005dba:	4a28      	ldr	r2, [pc, #160]	; (8005e5c <ADC_Enable+0x108>)
 8005dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc0:	099b      	lsrs	r3, r3, #6
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005dce:	e002      	b.n	8005dd6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f9      	bne.n	8005dd0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005ddc:	f7fe ffd2 	bl	8004d84 <HAL_GetTick>
 8005de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005de2:	e028      	b.n	8005e36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff f989 	bl	8005100 <LL_ADC_IsEnabled>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff f959 	bl	80050b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005dfe:	f7fe ffc1 	bl	8004d84 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d914      	bls.n	8005e36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d00d      	beq.n	8005e36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	f043 0210 	orr.w	r2, r3, #16
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2a:	f043 0201 	orr.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e007      	b.n	8005e46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d1cf      	bne.n	8005de4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	8000003f 	.word	0x8000003f
 8005e54:	50040300 	.word	0x50040300
 8005e58:	20000004 	.word	0x20000004
 8005e5c:	053e2d63 	.word	0x053e2d63

08005e60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff f95a 	bl	8005126 <LL_ADC_IsDisableOngoing>
 8005e72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7ff f941 	bl	8005100 <LL_ADC_IsEnabled>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d047      	beq.n	8005f14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d144      	bne.n	8005f14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 030d 	and.w	r3, r3, #13
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d10c      	bne.n	8005eb2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff f91b 	bl	80050d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005eaa:	f7fe ff6b 	bl	8004d84 <HAL_GetTick>
 8005eae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005eb0:	e029      	b.n	8005f06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	f043 0210 	orr.w	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec2:	f043 0201 	orr.w	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e023      	b.n	8005f16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005ece:	f7fe ff59 	bl	8004d84 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d914      	bls.n	8005f06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f043 0210 	orr.w	r2, r3, #16
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efa:	f043 0201 	orr.w	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e007      	b.n	8005f16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1dc      	bne.n	8005ece <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d14b      	bne.n	8005fd0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d021      	beq.n	8005f96 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fe ffcd 	bl	8004ef6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d032      	beq.n	8005fc8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d12b      	bne.n	8005fc8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d11f      	bne.n	8005fc8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	f043 0201 	orr.w	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54
 8005f94:	e018      	b.n	8005fc8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d111      	bne.n	8005fc8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d105      	bne.n	8005fc8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	f043 0201 	orr.w	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff fac5 	bl	8005558 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005fce:	e00e      	b.n	8005fee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff facf 	bl	8005580 <HAL_ADC_ErrorCallback>
}
 8005fe2:	e004      	b.n	8005fee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3
}
 8005fee:	bf00      	nop
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff fab1 	bl	800556c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b084      	sub	sp, #16
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006030:	f043 0204 	orr.w	r2, r3, #4
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f7ff faa1 	bl	8005580 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <LL_ADC_StartCalibration>:
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006062:	4313      	orrs	r3, r2
 8006064:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <LL_ADC_IsCalibrationOnGoing>:
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800608c:	d101      	bne.n	8006092 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_ADCEx_Calibration_Start+0x1c>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e04d      	b.n	8006158 <HAL_ADCEx_Calibration_Start+0xb8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff fecb 	bl	8005e60 <ADC_Disable>
 80060ca:	4603      	mov	r3, r0
 80060cc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d136      	bne.n	8006142 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80060dc:	f023 0302 	bic.w	r3, r3, #2
 80060e0:	f043 0202 	orr.w	r2, r3, #2
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff ffa9 	bl	8006046 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80060f4:	e014      	b.n	8006120 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8006102:	d30d      	bcc.n	8006120 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	f023 0312 	bic.w	r3, r3, #18
 800610c:	f043 0210 	orr.w	r2, r3, #16
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e01b      	b.n	8006158 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ffa7 	bl	8006078 <LL_ADC_IsCalibrationOnGoing>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e2      	bne.n	80060f6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	f023 0303 	bic.w	r3, r3, #3
 8006138:	f043 0201 	orr.w	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
 8006140:	e005      	b.n	800614e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006146:	f043 0210 	orr.w	r2, r3, #16
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006170:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800617c:	4013      	ands	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800618c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006192:	4a04      	ldr	r2, [pc, #16]	; (80061a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	60d3      	str	r3, [r2, #12]
}
 8006198:	bf00      	nop
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	e000ed00 	.word	0xe000ed00

080061a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061ac:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <__NVIC_GetPriorityGrouping+0x18>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	0a1b      	lsrs	r3, r3, #8
 80061b2:	f003 0307 	and.w	r3, r3, #7
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	e000ed00 	.word	0xe000ed00

080061c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	db0b      	blt.n	80061ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	f003 021f 	and.w	r2, r3, #31
 80061dc:	4907      	ldr	r1, [pc, #28]	; (80061fc <__NVIC_EnableIRQ+0x38>)
 80061de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	2001      	movs	r0, #1
 80061e6:	fa00 f202 	lsl.w	r2, r0, r2
 80061ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	e000e100 	.word	0xe000e100

08006200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	6039      	str	r1, [r7, #0]
 800620a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800620c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006210:	2b00      	cmp	r3, #0
 8006212:	db0a      	blt.n	800622a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	490c      	ldr	r1, [pc, #48]	; (800624c <__NVIC_SetPriority+0x4c>)
 800621a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621e:	0112      	lsls	r2, r2, #4
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	440b      	add	r3, r1
 8006224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006228:	e00a      	b.n	8006240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	b2da      	uxtb	r2, r3
 800622e:	4908      	ldr	r1, [pc, #32]	; (8006250 <__NVIC_SetPriority+0x50>)
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	3b04      	subs	r3, #4
 8006238:	0112      	lsls	r2, r2, #4
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	440b      	add	r3, r1
 800623e:	761a      	strb	r2, [r3, #24]
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	e000e100 	.word	0xe000e100
 8006250:	e000ed00 	.word	0xe000ed00

08006254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	; 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f1c3 0307 	rsb	r3, r3, #7
 800626e:	2b04      	cmp	r3, #4
 8006270:	bf28      	it	cs
 8006272:	2304      	movcs	r3, #4
 8006274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3304      	adds	r3, #4
 800627a:	2b06      	cmp	r3, #6
 800627c:	d902      	bls.n	8006284 <NVIC_EncodePriority+0x30>
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	3b03      	subs	r3, #3
 8006282:	e000      	b.n	8006286 <NVIC_EncodePriority+0x32>
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006288:	f04f 32ff 	mov.w	r2, #4294967295
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43da      	mvns	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	401a      	ands	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800629c:	f04f 31ff 	mov.w	r1, #4294967295
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	43d9      	mvns	r1, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062ac:	4313      	orrs	r3, r2
         );
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3724      	adds	r7, #36	; 0x24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062cc:	d301      	bcc.n	80062d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062ce:	2301      	movs	r3, #1
 80062d0:	e00f      	b.n	80062f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <SysTick_Config+0x40>)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062da:	210f      	movs	r1, #15
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	f7ff ff8e 	bl	8006200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <SysTick_Config+0x40>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062ea:	4b04      	ldr	r3, [pc, #16]	; (80062fc <SysTick_Config+0x40>)
 80062ec:	2207      	movs	r2, #7
 80062ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	e000e010 	.word	0xe000e010

08006300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ff29 	bl	8006160 <__NVIC_SetPriorityGrouping>
}
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	4603      	mov	r3, r0
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006328:	f7ff ff3e 	bl	80061a8 <__NVIC_GetPriorityGrouping>
 800632c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f7ff ff8e 	bl	8006254 <NVIC_EncodePriority>
 8006338:	4602      	mov	r2, r0
 800633a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800633e:	4611      	mov	r1, r2
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff ff5d 	bl	8006200 <__NVIC_SetPriority>
}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	4603      	mov	r3, r0
 8006356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff ff31 	bl	80061c4 <__NVIC_EnableIRQ>
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff ffa2 	bl	80062bc <SysTick_Config>
 8006378:	4603      	mov	r3, r0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006386:	f7fd ff65 	bl	8004254 <HAL_SYSTICK_Callback>
}
 800638a:	bf00      	nop
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e054      	b.n	800644c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7f5b      	ldrb	r3, [r3, #29]
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d105      	bne.n	80063b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fd fc28 	bl	8003c08 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	791b      	ldrb	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10c      	bne.n	80063e0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a22      	ldr	r2, [pc, #136]	; (8006454 <HAL_CRC_Init+0xc4>)
 80063cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0218 	bic.w	r2, r2, #24
 80063dc:	609a      	str	r2, [r3, #8]
 80063de:	e00c      	b.n	80063fa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6899      	ldr	r1, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f948 	bl	8006680 <HAL_CRCEx_Polynomial_Set>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e028      	b.n	800644c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	795b      	ldrb	r3, [r3, #5]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d105      	bne.n	800640e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f04f 32ff 	mov.w	r2, #4294967295
 800640a:	611a      	str	r2, [r3, #16]
 800640c:	e004      	b.n	8006418 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6912      	ldr	r2, [r2, #16]
 8006416:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699a      	ldr	r2, [r3, #24]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	04c11db7 	.word	0x04c11db7

08006458 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2202      	movs	r2, #2
 800646c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f042 0201 	orr.w	r2, r2, #1
 800647c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	2b03      	cmp	r3, #3
 8006484:	d006      	beq.n	8006494 <HAL_CRC_Calculate+0x3c>
 8006486:	2b03      	cmp	r3, #3
 8006488:	d829      	bhi.n	80064de <HAL_CRC_Calculate+0x86>
 800648a:	2b01      	cmp	r3, #1
 800648c:	d019      	beq.n	80064c2 <HAL_CRC_Calculate+0x6a>
 800648e:	2b02      	cmp	r3, #2
 8006490:	d01e      	beq.n	80064d0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006492:	e024      	b.n	80064de <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	e00a      	b.n	80064b0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	441a      	add	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	3301      	adds	r3, #1
 80064ae:	617b      	str	r3, [r7, #20]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d3f0      	bcc.n	800649a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	613b      	str	r3, [r7, #16]
      break;
 80064c0:	e00e      	b.n	80064e0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 f812 	bl	80064f0 <CRC_Handle_8>
 80064cc:	6138      	str	r0, [r7, #16]
      break;
 80064ce:	e007      	b.n	80064e0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f899 	bl	800660c <CRC_Handle_16>
 80064da:	6138      	str	r0, [r7, #16]
      break;
 80064dc:	e000      	b.n	80064e0 <HAL_CRC_Calculate+0x88>
      break;
 80064de:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80064e6:	693b      	ldr	r3, [r7, #16]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b089      	sub	sp, #36	; 0x24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80064fc:	2300      	movs	r3, #0
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	e023      	b.n	800654a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	3301      	adds	r3, #1
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	440b      	add	r3, r1
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800651c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	3302      	adds	r3, #2
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	440b      	add	r3, r1
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800652c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	3303      	adds	r3, #3
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	440b      	add	r3, r1
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006540:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	089b      	lsrs	r3, r3, #2
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	429a      	cmp	r2, r3
 8006552:	d3d6      	bcc.n	8006502 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d04d      	beq.n	80065fa <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d107      	bne.n	8006578 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	4413      	add	r3, r2
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d116      	bne.n	80065b0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	4413      	add	r3, r2
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	b21a      	sxth	r2, r3
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	3301      	adds	r3, #1
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	440b      	add	r3, r1
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	b21b      	sxth	r3, r3
 800659e:	4313      	orrs	r3, r2
 80065a0:	b21b      	sxth	r3, r3
 80065a2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	8b7a      	ldrh	r2, [r7, #26]
 80065ae:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d11f      	bne.n	80065fa <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	4413      	add	r3, r2
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	b21a      	sxth	r2, r3
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	3301      	adds	r3, #1
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	440b      	add	r3, r1
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	b21b      	sxth	r3, r3
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b21b      	sxth	r3, r3
 80065da:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	8b7a      	ldrh	r2, [r7, #26]
 80065e6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	3302      	adds	r3, #2
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3724      	adds	r7, #36	; 0x24
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006618:	2300      	movs	r3, #0
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e013      	b.n	8006646 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	041a      	lsls	r2, r3, #16
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	3302      	adds	r3, #2
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	440b      	add	r3, r1
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	4619      	mov	r1, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	3301      	adds	r3, #1
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	429a      	cmp	r2, r3
 800664e:	d3e6      	bcc.n	800661e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	4413      	add	r3, r2
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
}
 8006674:	4618      	mov	r0, r3
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006690:	231f      	movs	r3, #31
 8006692:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006694:	bf00      	nop
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1e5a      	subs	r2, r3, #1
 800669a:	613a      	str	r2, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b18      	cmp	r3, #24
 80066b8:	d846      	bhi.n	8006748 <HAL_CRCEx_Polynomial_Set+0xc8>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	0800674f 	.word	0x0800674f
 80066c4:	08006749 	.word	0x08006749
 80066c8:	08006749 	.word	0x08006749
 80066cc:	08006749 	.word	0x08006749
 80066d0:	08006749 	.word	0x08006749
 80066d4:	08006749 	.word	0x08006749
 80066d8:	08006749 	.word	0x08006749
 80066dc:	08006749 	.word	0x08006749
 80066e0:	0800673d 	.word	0x0800673d
 80066e4:	08006749 	.word	0x08006749
 80066e8:	08006749 	.word	0x08006749
 80066ec:	08006749 	.word	0x08006749
 80066f0:	08006749 	.word	0x08006749
 80066f4:	08006749 	.word	0x08006749
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006749 	.word	0x08006749
 8006700:	08006731 	.word	0x08006731
 8006704:	08006749 	.word	0x08006749
 8006708:	08006749 	.word	0x08006749
 800670c:	08006749 	.word	0x08006749
 8006710:	08006749 	.word	0x08006749
 8006714:	08006749 	.word	0x08006749
 8006718:	08006749 	.word	0x08006749
 800671c:	08006749 	.word	0x08006749
 8006720:	08006725 	.word	0x08006725
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2b06      	cmp	r3, #6
 8006728:	d913      	bls.n	8006752 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800672e:	e010      	b.n	8006752 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b07      	cmp	r3, #7
 8006734:	d90f      	bls.n	8006756 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800673a:	e00c      	b.n	8006756 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b0f      	cmp	r3, #15
 8006740:	d90b      	bls.n	800675a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006746:	e008      	b.n	800675a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]
      break;
 800674c:	e006      	b.n	800675c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800674e:	bf00      	nop
 8006750:	e004      	b.n	800675c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800675a:	bf00      	nop
  }
  if (status == HAL_OK)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10d      	bne.n	800677e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f023 0118 	bic.w	r1, r3, #24
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	430a      	orrs	r2, r1
 800677c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800677e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006780:	4618      	mov	r0, r3
 8006782:	371c      	adds	r7, #28
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e098      	b.n	80068d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	4b4d      	ldr	r3, [pc, #308]	; (80068dc <HAL_DMA_Init+0x150>)
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d80f      	bhi.n	80067ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	4b4b      	ldr	r3, [pc, #300]	; (80068e0 <HAL_DMA_Init+0x154>)
 80067b2:	4413      	add	r3, r2
 80067b4:	4a4b      	ldr	r2, [pc, #300]	; (80068e4 <HAL_DMA_Init+0x158>)
 80067b6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ba:	091b      	lsrs	r3, r3, #4
 80067bc:	009a      	lsls	r2, r3, #2
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a48      	ldr	r2, [pc, #288]	; (80068e8 <HAL_DMA_Init+0x15c>)
 80067c6:	641a      	str	r2, [r3, #64]	; 0x40
 80067c8:	e00e      	b.n	80067e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	4b46      	ldr	r3, [pc, #280]	; (80068ec <HAL_DMA_Init+0x160>)
 80067d2:	4413      	add	r3, r2
 80067d4:	4a43      	ldr	r2, [pc, #268]	; (80068e4 <HAL_DMA_Init+0x158>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	009a      	lsls	r2, r3, #2
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a42      	ldr	r2, [pc, #264]	; (80068f0 <HAL_DMA_Init+0x164>)
 80067e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800680c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006842:	d039      	beq.n	80068b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	4a27      	ldr	r2, [pc, #156]	; (80068e8 <HAL_DMA_Init+0x15c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d11a      	bne.n	8006884 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800684e:	4b29      	ldr	r3, [pc, #164]	; (80068f4 <HAL_DMA_Init+0x168>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	f003 031c 	and.w	r3, r3, #28
 800685a:	210f      	movs	r1, #15
 800685c:	fa01 f303 	lsl.w	r3, r1, r3
 8006860:	43db      	mvns	r3, r3
 8006862:	4924      	ldr	r1, [pc, #144]	; (80068f4 <HAL_DMA_Init+0x168>)
 8006864:	4013      	ands	r3, r2
 8006866:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006868:	4b22      	ldr	r3, [pc, #136]	; (80068f4 <HAL_DMA_Init+0x168>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6859      	ldr	r1, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006874:	f003 031c 	and.w	r3, r3, #28
 8006878:	fa01 f303 	lsl.w	r3, r1, r3
 800687c:	491d      	ldr	r1, [pc, #116]	; (80068f4 <HAL_DMA_Init+0x168>)
 800687e:	4313      	orrs	r3, r2
 8006880:	600b      	str	r3, [r1, #0]
 8006882:	e019      	b.n	80068b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006884:	4b1c      	ldr	r3, [pc, #112]	; (80068f8 <HAL_DMA_Init+0x16c>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	f003 031c 	and.w	r3, r3, #28
 8006890:	210f      	movs	r1, #15
 8006892:	fa01 f303 	lsl.w	r3, r1, r3
 8006896:	43db      	mvns	r3, r3
 8006898:	4917      	ldr	r1, [pc, #92]	; (80068f8 <HAL_DMA_Init+0x16c>)
 800689a:	4013      	ands	r3, r2
 800689c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800689e:	4b16      	ldr	r3, [pc, #88]	; (80068f8 <HAL_DMA_Init+0x16c>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6859      	ldr	r1, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	f003 031c 	and.w	r3, r3, #28
 80068ae:	fa01 f303 	lsl.w	r3, r1, r3
 80068b2:	4911      	ldr	r1, [pc, #68]	; (80068f8 <HAL_DMA_Init+0x16c>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	40020407 	.word	0x40020407
 80068e0:	bffdfff8 	.word	0xbffdfff8
 80068e4:	cccccccd 	.word	0xcccccccd
 80068e8:	40020000 	.word	0x40020000
 80068ec:	bffdfbf8 	.word	0xbffdfbf8
 80068f0:	40020400 	.word	0x40020400
 80068f4:	400200a8 	.word	0x400200a8
 80068f8:	400204a8 	.word	0x400204a8

080068fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_DMA_Start_IT+0x20>
 8006918:	2302      	movs	r3, #2
 800691a:	e04b      	b.n	80069b4 <HAL_DMA_Start_IT+0xb8>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d13a      	bne.n	80069a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f95f 	bl	8006c18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 020e 	orr.w	r2, r2, #14
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e00f      	b.n	8006994 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0204 	bic.w	r2, r2, #4
 8006982:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 020a 	orr.w	r2, r2, #10
 8006992:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e005      	b.n	80069b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80069ae:	2302      	movs	r3, #2
 80069b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d008      	beq.n	80069e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2204      	movs	r2, #4
 80069d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e022      	b.n	8006a2c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 020e 	bic.w	r2, r2, #14
 80069f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0201 	bic.w	r2, r2, #1
 8006a04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0a:	f003 021c 	and.w	r2, r3, #28
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	2101      	movs	r1, #1
 8006a14:	fa01 f202 	lsl.w	r2, r1, r2
 8006a18:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d005      	beq.n	8006a5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2204      	movs	r2, #4
 8006a54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	73fb      	strb	r3, [r7, #15]
 8006a5a:	e029      	b.n	8006ab0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 020e 	bic.w	r2, r2, #14
 8006a6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0201 	bic.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a80:	f003 021c 	and.w	r2, r3, #28
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a8e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
    }
  }
  return status;
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b084      	sub	sp, #16
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	f003 031c 	and.w	r3, r3, #28
 8006ada:	2204      	movs	r2, #4
 8006adc:	409a      	lsls	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d026      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x7a>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d021      	beq.n	8006b34 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d107      	bne.n	8006b0e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0204 	bic.w	r2, r2, #4
 8006b0c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	f003 021c 	and.w	r2, r3, #28
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b20:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d071      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006b32:	e06c      	b.n	8006c0e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b38:	f003 031c 	and.w	r3, r3, #28
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	409a      	lsls	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d02e      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xec>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d029      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10b      	bne.n	8006b78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 020a 	bic.w	r2, r2, #10
 8006b6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	f003 021c 	and.w	r2, r3, #28
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	2102      	movs	r1, #2
 8006b86:	fa01 f202 	lsl.w	r2, r1, r2
 8006b8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d038      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006ba4:	e033      	b.n	8006c0e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	f003 031c 	and.w	r3, r3, #28
 8006bae:	2208      	movs	r2, #8
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d02a      	beq.n	8006c10 <HAL_DMA_IRQHandler+0x156>
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d025      	beq.n	8006c10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 020e 	bic.w	r2, r2, #14
 8006bd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd8:	f003 021c 	and.w	r2, r3, #28
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be0:	2101      	movs	r1, #1
 8006be2:	fa01 f202 	lsl.w	r2, r1, r2
 8006be6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d004      	beq.n	8006c10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
}
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	f003 021c 	and.w	r2, r3, #28
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	2101      	movs	r1, #1
 8006c34:	fa01 f202 	lsl.w	r2, r1, r2
 8006c38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d108      	bne.n	8006c5c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006c5a:	e007      	b.n	8006c6c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	60da      	str	r2, [r3, #12]
}
 8006c6c:	bf00      	nop
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006c8a:	4b2f      	ldr	r3, [pc, #188]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_FLASH_Program+0x1e>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e053      	b.n	8006d3e <HAL_FLASH_Program+0xc6>
 8006c96:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ca0:	f000 f888 	bl	8006db4 <FLASH_WaitForLastOperation>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d143      	bne.n	8006d36 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006cb4:	4b25      	ldr	r3, [pc, #148]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006cc0:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006cce:	2202      	movs	r2, #2
 8006cd0:	771a      	strb	r2, [r3, #28]
 8006cd2:	e002      	b.n	8006cda <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006cd4:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d107      	bne.n	8006cf0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce4:	68b8      	ldr	r0, [r7, #8]
 8006ce6:	f000 f8bd 	bl	8006e64 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006cea:	2301      	movs	r3, #1
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	e010      	b.n	8006d12 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d002      	beq.n	8006cfc <HAL_FLASH_Program+0x84>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d10a      	bne.n	8006d12 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	68b8      	ldr	r0, [r7, #8]
 8006d02:	f000 f8d5 	bl	8006eb0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d102      	bne.n	8006d12 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006d0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d10:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d12:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006d16:	f000 f84d 	bl	8006db4 <FLASH_WaitForLastOperation>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d006      	beq.n	8006d32 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006d24:	4b09      	ldr	r3, [pc, #36]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	4907      	ldr	r1, [pc, #28]	; (8006d4c <HAL_FLASH_Program+0xd4>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006d32:	f000 f9cf 	bl	80070d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006d36:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <HAL_FLASH_Program+0xd0>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]

  return status;
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000010 	.word	0x20000010
 8006d4c:	40022000 	.word	0x40022000

08006d50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_FLASH_Unlock+0x38>)
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da0b      	bge.n	8006d7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006d62:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <HAL_FLASH_Unlock+0x38>)
 8006d64:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_FLASH_Unlock+0x3c>)
 8006d66:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006d68:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <HAL_FLASH_Unlock+0x38>)
 8006d6a:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <HAL_FLASH_Unlock+0x40>)
 8006d6c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006d6e:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <HAL_FLASH_Unlock+0x38>)
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da01      	bge.n	8006d7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40022000 	.word	0x40022000
 8006d8c:	45670123 	.word	0x45670123
 8006d90:	cdef89ab 	.word	0xcdef89ab

08006d94 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <HAL_FLASH_Lock+0x1c>)
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	4a04      	ldr	r2, [pc, #16]	; (8006db0 <HAL_FLASH_Lock+0x1c>)
 8006d9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006da2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40022000 	.word	0x40022000

08006db4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006dbc:	f7fd ffe2 	bl	8004d84 <HAL_GetTick>
 8006dc0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006dc2:	e00d      	b.n	8006de0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dca:	d009      	beq.n	8006de0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8006dcc:	f7fd ffda 	bl	8004d84 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d801      	bhi.n	8006de0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e036      	b.n	8006e4e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006de0:	4b1d      	ldr	r3, [pc, #116]	; (8006e58 <FLASH_WaitForLastOperation+0xa4>)
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1eb      	bne.n	8006dc4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <FLASH_WaitForLastOperation+0xa4>)
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	4b1a      	ldr	r3, [pc, #104]	; (8006e5c <FLASH_WaitForLastOperation+0xa8>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01e      	beq.n	8006e3a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006dfc:	4b18      	ldr	r3, [pc, #96]	; (8006e60 <FLASH_WaitForLastOperation+0xac>)
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <FLASH_WaitForLastOperation+0xac>)
 8006e06:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <FLASH_WaitForLastOperation+0x6e>
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <FLASH_WaitForLastOperation+0xa4>)
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e1c:	490e      	ldr	r1, [pc, #56]	; (8006e58 <FLASH_WaitForLastOperation+0xa4>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	618b      	str	r3, [r1, #24]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <FLASH_WaitForLastOperation+0x82>
 8006e2c:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <FLASH_WaitForLastOperation+0xa4>)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006e34:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e009      	b.n	8006e4e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <FLASH_WaitForLastOperation+0xa4>)
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006e46:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <FLASH_WaitForLastOperation+0xa4>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40022000 	.word	0x40022000
 8006e5c:	0002c3fa 	.word	0x0002c3fa
 8006e60:	20000010 	.word	0x20000010

08006e64 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <FLASH_Program_DoubleWord+0x48>)
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <FLASH_Program_DoubleWord+0x48>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006e82:	f3bf 8f6f 	isb	sy
}
 8006e86:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	000a      	movs	r2, r1
 8006e96:	2300      	movs	r3, #0
 8006e98:	68f9      	ldr	r1, [r7, #12]
 8006e9a:	3104      	adds	r1, #4
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	600b      	str	r3, [r1, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	40022000 	.word	0x40022000

08006eb0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b089      	sub	sp, #36	; 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006eba:	2340      	movs	r3, #64	; 0x40
 8006ebc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006ec6:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <FLASH_Program_Fast+0x68>)
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <FLASH_Program_Fast+0x68>)
 8006ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ed0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ed8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8006eda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006edc:	b672      	cpsid	i
}
 8006ede:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	3304      	adds	r3, #4
 8006eec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	617b      	str	r3, [r7, #20]
    row_index--;
 8006ef4:	7ffb      	ldrb	r3, [r7, #31]
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1ef      	bne.n	8006ee0 <FLASH_Program_Fast+0x30>
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f383 8810 	msr	PRIMASK, r3
}
 8006f0a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8006f0c:	bf00      	nop
 8006f0e:	3724      	adds	r7, #36	; 0x24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	40022000 	.word	0x40022000

08006f1c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f26:	4b48      	ldr	r3, [pc, #288]	; (8007048 <HAL_FLASHEx_Erase+0x12c>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_FLASHEx_Erase+0x16>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e085      	b.n	800703e <HAL_FLASHEx_Erase+0x122>
 8006f32:	4b45      	ldr	r3, [pc, #276]	; (8007048 <HAL_FLASHEx_Erase+0x12c>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006f38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006f3c:	f7ff ff3a 	bl	8006db4 <FLASH_WaitForLastOperation>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d175      	bne.n	8007036 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f4a:	4b3f      	ldr	r3, [pc, #252]	; (8007048 <HAL_FLASHEx_Erase+0x12c>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006f50:	4b3e      	ldr	r3, [pc, #248]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d013      	beq.n	8006f84 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006f5c:	4b3b      	ldr	r3, [pc, #236]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d009      	beq.n	8006f7c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006f68:	4b38      	ldr	r3, [pc, #224]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a37      	ldr	r2, [pc, #220]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f72:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006f74:	4b34      	ldr	r3, [pc, #208]	; (8007048 <HAL_FLASHEx_Erase+0x12c>)
 8006f76:	2203      	movs	r2, #3
 8006f78:	771a      	strb	r2, [r3, #28]
 8006f7a:	e016      	b.n	8006faa <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <HAL_FLASHEx_Erase+0x12c>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	771a      	strb	r2, [r3, #28]
 8006f82:	e012      	b.n	8006faa <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006f84:	4b31      	ldr	r3, [pc, #196]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006f90:	4b2e      	ldr	r3, [pc, #184]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a2d      	ldr	r2, [pc, #180]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006f96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f9a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	; (8007048 <HAL_FLASHEx_Erase+0x12c>)
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	771a      	strb	r2, [r3, #28]
 8006fa2:	e002      	b.n	8006faa <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006fa4:	4b28      	ldr	r3, [pc, #160]	; (8007048 <HAL_FLASHEx_Erase+0x12c>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d111      	bne.n	8006fd6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f84a 	bl	8007050 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006fbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006fc0:	f7ff fef8 	bl	8006db4 <FLASH_WaitForLastOperation>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	4a1f      	ldr	r2, [pc, #124]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8006fce:	f023 0304 	bic.w	r3, r3, #4
 8006fd2:	6153      	str	r3, [r2, #20]
 8006fd4:	e02d      	b.n	8007032 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fdc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]
 8006fe4:	e01d      	b.n	8007022 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4619      	mov	r1, r3
 8006fec:	68b8      	ldr	r0, [r7, #8]
 8006fee:	f000 f84d 	bl	800708c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ff2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ff6:	f7ff fedd 	bl	8006db4 <FLASH_WaitForLastOperation>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	4a12      	ldr	r2, [pc, #72]	; (800704c <HAL_FLASHEx_Erase+0x130>)
 8007004:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8007008:	f023 0302 	bic.w	r3, r3, #2
 800700c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	601a      	str	r2, [r3, #0]
          break;
 800701a:	e00a      	b.n	8007032 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	3301      	adds	r3, #1
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	4413      	add	r3, r2
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	d3d9      	bcc.n	8006fe6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007032:	f000 f84f 	bl	80070d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007036:	4b04      	ldr	r3, [pc, #16]	; (8007048 <HAL_FLASHEx_Erase+0x12c>)
 8007038:	2200      	movs	r2, #0
 800703a:	701a      	strb	r2, [r3, #0]

  return status;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000010 	.word	0x20000010
 800704c:	40022000 	.word	0x40022000

08007050 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d005      	beq.n	800706e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007062:	4b09      	ldr	r3, [pc, #36]	; (8007088 <FLASH_MassErase+0x38>)
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	4a08      	ldr	r2, [pc, #32]	; (8007088 <FLASH_MassErase+0x38>)
 8007068:	f043 0304 	orr.w	r3, r3, #4
 800706c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <FLASH_MassErase+0x38>)
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	4a05      	ldr	r2, [pc, #20]	; (8007088 <FLASH_MassErase+0x38>)
 8007074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007078:	6153      	str	r3, [r2, #20]
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40022000 	.word	0x40022000

0800708c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007096:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <FLASH_PageErase+0x44>)
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	00db      	lsls	r3, r3, #3
 80070a2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80070a6:	490a      	ldr	r1, [pc, #40]	; (80070d0 <FLASH_PageErase+0x44>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80070ac:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <FLASH_PageErase+0x44>)
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	4a07      	ldr	r2, [pc, #28]	; (80070d0 <FLASH_PageErase+0x44>)
 80070b2:	f043 0302 	orr.w	r3, r3, #2
 80070b6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <FLASH_PageErase+0x44>)
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	4a04      	ldr	r2, [pc, #16]	; (80070d0 <FLASH_PageErase+0x44>)
 80070be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c2:	6153      	str	r3, [r2, #20]
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	40022000 	.word	0x40022000

080070d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80070da:	4b21      	ldr	r3, [pc, #132]	; (8007160 <FLASH_FlushCaches+0x8c>)
 80070dc:	7f1b      	ldrb	r3, [r3, #28]
 80070de:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80070e0:	79fb      	ldrb	r3, [r7, #7]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d002      	beq.n	80070ec <FLASH_FlushCaches+0x18>
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	2b03      	cmp	r3, #3
 80070ea:	d117      	bne.n	800711c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80070ec:	4b1d      	ldr	r3, [pc, #116]	; (8007164 <FLASH_FlushCaches+0x90>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <FLASH_FlushCaches+0x90>)
 80070f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80070f8:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <FLASH_FlushCaches+0x90>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <FLASH_FlushCaches+0x90>)
 80070fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	4b17      	ldr	r3, [pc, #92]	; (8007164 <FLASH_FlushCaches+0x90>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a16      	ldr	r2, [pc, #88]	; (8007164 <FLASH_FlushCaches+0x90>)
 800710a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800710e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007110:	4b14      	ldr	r3, [pc, #80]	; (8007164 <FLASH_FlushCaches+0x90>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a13      	ldr	r2, [pc, #76]	; (8007164 <FLASH_FlushCaches+0x90>)
 8007116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800711a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	2b02      	cmp	r3, #2
 8007120:	d002      	beq.n	8007128 <FLASH_FlushCaches+0x54>
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	2b03      	cmp	r3, #3
 8007126:	d111      	bne.n	800714c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007128:	4b0e      	ldr	r3, [pc, #56]	; (8007164 <FLASH_FlushCaches+0x90>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a0d      	ldr	r2, [pc, #52]	; (8007164 <FLASH_FlushCaches+0x90>)
 800712e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <FLASH_FlushCaches+0x90>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a0a      	ldr	r2, [pc, #40]	; (8007164 <FLASH_FlushCaches+0x90>)
 800713a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800713e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007140:	4b08      	ldr	r3, [pc, #32]	; (8007164 <FLASH_FlushCaches+0x90>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a07      	ldr	r2, [pc, #28]	; (8007164 <FLASH_FlushCaches+0x90>)
 8007146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800714a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800714c:	4b04      	ldr	r3, [pc, #16]	; (8007160 <FLASH_FlushCaches+0x8c>)
 800714e:	2200      	movs	r2, #0
 8007150:	771a      	strb	r2, [r3, #28]
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20000010 	.word	0x20000010
 8007164:	40022000 	.word	0x40022000

08007168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007176:	e154      	b.n	8007422 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	2101      	movs	r1, #1
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	fa01 f303 	lsl.w	r3, r1, r3
 8007184:	4013      	ands	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8146 	beq.w	800741c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	2b01      	cmp	r3, #1
 800719a:	d005      	beq.n	80071a8 <HAL_GPIO_Init+0x40>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d130      	bne.n	800720a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	2203      	movs	r2, #3
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	43db      	mvns	r3, r3
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4013      	ands	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071de:	2201      	movs	r2, #1
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	43db      	mvns	r3, r3
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4013      	ands	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	091b      	lsrs	r3, r3, #4
 80071f4:	f003 0201 	and.w	r2, r3, #1
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	fa02 f303 	lsl.w	r3, r2, r3
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	2b03      	cmp	r3, #3
 8007214:	d017      	beq.n	8007246 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	2203      	movs	r2, #3
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	43db      	mvns	r3, r3
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4013      	ands	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d123      	bne.n	800729a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	08da      	lsrs	r2, r3, #3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3208      	adds	r2, #8
 800725a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800725e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	220f      	movs	r2, #15
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	43db      	mvns	r3, r3
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4013      	ands	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	08da      	lsrs	r2, r3, #3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3208      	adds	r2, #8
 8007294:	6939      	ldr	r1, [r7, #16]
 8007296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	2203      	movs	r2, #3
 80072a6:	fa02 f303 	lsl.w	r3, r2, r3
 80072aa:	43db      	mvns	r3, r3
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4013      	ands	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f003 0203 	and.w	r2, r3, #3
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80a0 	beq.w	800741c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072dc:	4b58      	ldr	r3, [pc, #352]	; (8007440 <HAL_GPIO_Init+0x2d8>)
 80072de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e0:	4a57      	ldr	r2, [pc, #348]	; (8007440 <HAL_GPIO_Init+0x2d8>)
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	6613      	str	r3, [r2, #96]	; 0x60
 80072e8:	4b55      	ldr	r3, [pc, #340]	; (8007440 <HAL_GPIO_Init+0x2d8>)
 80072ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80072f4:	4a53      	ldr	r2, [pc, #332]	; (8007444 <HAL_GPIO_Init+0x2dc>)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	089b      	lsrs	r3, r3, #2
 80072fa:	3302      	adds	r3, #2
 80072fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	220f      	movs	r2, #15
 800730c:	fa02 f303 	lsl.w	r3, r2, r3
 8007310:	43db      	mvns	r3, r3
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4013      	ands	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800731e:	d019      	beq.n	8007354 <HAL_GPIO_Init+0x1ec>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a49      	ldr	r2, [pc, #292]	; (8007448 <HAL_GPIO_Init+0x2e0>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <HAL_GPIO_Init+0x1e8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a48      	ldr	r2, [pc, #288]	; (800744c <HAL_GPIO_Init+0x2e4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00d      	beq.n	800734c <HAL_GPIO_Init+0x1e4>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a47      	ldr	r2, [pc, #284]	; (8007450 <HAL_GPIO_Init+0x2e8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <HAL_GPIO_Init+0x1e0>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a46      	ldr	r2, [pc, #280]	; (8007454 <HAL_GPIO_Init+0x2ec>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d101      	bne.n	8007344 <HAL_GPIO_Init+0x1dc>
 8007340:	2304      	movs	r3, #4
 8007342:	e008      	b.n	8007356 <HAL_GPIO_Init+0x1ee>
 8007344:	2307      	movs	r3, #7
 8007346:	e006      	b.n	8007356 <HAL_GPIO_Init+0x1ee>
 8007348:	2303      	movs	r3, #3
 800734a:	e004      	b.n	8007356 <HAL_GPIO_Init+0x1ee>
 800734c:	2302      	movs	r3, #2
 800734e:	e002      	b.n	8007356 <HAL_GPIO_Init+0x1ee>
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <HAL_GPIO_Init+0x1ee>
 8007354:	2300      	movs	r3, #0
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	f002 0203 	and.w	r2, r2, #3
 800735c:	0092      	lsls	r2, r2, #2
 800735e:	4093      	lsls	r3, r2
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4313      	orrs	r3, r2
 8007364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007366:	4937      	ldr	r1, [pc, #220]	; (8007444 <HAL_GPIO_Init+0x2dc>)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	3302      	adds	r3, #2
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007374:	4b38      	ldr	r3, [pc, #224]	; (8007458 <HAL_GPIO_Init+0x2f0>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	43db      	mvns	r3, r3
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4013      	ands	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007398:	4a2f      	ldr	r2, [pc, #188]	; (8007458 <HAL_GPIO_Init+0x2f0>)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800739e:	4b2e      	ldr	r3, [pc, #184]	; (8007458 <HAL_GPIO_Init+0x2f0>)
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	43db      	mvns	r3, r3
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4013      	ands	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80073c2:	4a25      	ldr	r2, [pc, #148]	; (8007458 <HAL_GPIO_Init+0x2f0>)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80073c8:	4b23      	ldr	r3, [pc, #140]	; (8007458 <HAL_GPIO_Init+0x2f0>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4013      	ands	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80073ec:	4a1a      	ldr	r2, [pc, #104]	; (8007458 <HAL_GPIO_Init+0x2f0>)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80073f2:	4b19      	ldr	r3, [pc, #100]	; (8007458 <HAL_GPIO_Init+0x2f0>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4013      	ands	r3, r2
 8007400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007416:	4a10      	ldr	r2, [pc, #64]	; (8007458 <HAL_GPIO_Init+0x2f0>)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	3301      	adds	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	fa22 f303 	lsr.w	r3, r2, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	f47f aea3 	bne.w	8007178 <HAL_GPIO_Init+0x10>
  }
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	40021000 	.word	0x40021000
 8007444:	40010000 	.word	0x40010000
 8007448:	48000400 	.word	0x48000400
 800744c:	48000800 	.word	0x48000800
 8007450:	48000c00 	.word	0x48000c00
 8007454:	48001000 	.word	0x48001000
 8007458:	40010400 	.word	0x40010400

0800745c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	887b      	ldrh	r3, [r7, #2]
 800746e:	4013      	ands	r3, r2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007474:	2301      	movs	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
 8007478:	e001      	b.n	800747e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800747e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
 8007498:	4613      	mov	r3, r2
 800749a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800749c:	787b      	ldrb	r3, [r7, #1]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80074a2:	887a      	ldrh	r2, [r7, #2]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80074a8:	e002      	b.n	80074b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80074aa:	887a      	ldrh	r2, [r7, #2]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074ce:	887a      	ldrh	r2, [r7, #2]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4013      	ands	r3, r2
 80074d4:	041a      	lsls	r2, r3, #16
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	43d9      	mvns	r1, r3
 80074da:	887b      	ldrh	r3, [r7, #2]
 80074dc:	400b      	ands	r3, r1
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	619a      	str	r2, [r3, #24]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e081      	b.n	8007606 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7fc fb96 	bl	8003c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2224      	movs	r2, #36	; 0x24
 8007520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007540:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007550:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d107      	bne.n	800756a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007566:	609a      	str	r2, [r3, #8]
 8007568:	e006      	b.n	8007578 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007576:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d104      	bne.n	800758a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007588:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691a      	ldr	r2, [r3, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69d9      	ldr	r1, [r3, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a1a      	ldr	r2, [r3, #32]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	607a      	str	r2, [r7, #4]
 800761a:	461a      	mov	r2, r3
 800761c:	460b      	mov	r3, r1
 800761e:	817b      	strh	r3, [r7, #10]
 8007620:	4613      	mov	r3, r2
 8007622:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b20      	cmp	r3, #32
 800762e:	f040 80da 	bne.w	80077e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_I2C_Master_Transmit+0x30>
 800763c:	2302      	movs	r3, #2
 800763e:	e0d3      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007648:	f7fd fb9c 	bl	8004d84 <HAL_GetTick>
 800764c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	2319      	movs	r3, #25
 8007654:	2201      	movs	r2, #1
 8007656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 fdc4 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e0be      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2221      	movs	r2, #33	; 0x21
 800766e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2210      	movs	r2, #16
 8007676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	893a      	ldrh	r2, [r7, #8]
 800768a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007696:	b29b      	uxth	r3, r3
 8007698:	2bff      	cmp	r3, #255	; 0xff
 800769a:	d90e      	bls.n	80076ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	22ff      	movs	r2, #255	; 0xff
 80076a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	8979      	ldrh	r1, [r7, #10]
 80076aa:	4b51      	ldr	r3, [pc, #324]	; (80077f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 ffba 	bl	800862c <I2C_TransferConfig>
 80076b8:	e06c      	b.n	8007794 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	8979      	ldrh	r1, [r7, #10]
 80076cc:	4b48      	ldr	r3, [pc, #288]	; (80077f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 ffa9 	bl	800862c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80076da:	e05b      	b.n	8007794 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	6a39      	ldr	r1, [r7, #32]
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fdc1 	bl	8008268 <I2C_WaitOnTXISFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e07b      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d034      	beq.n	8007794 <HAL_I2C_Master_Transmit+0x184>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772e:	2b00      	cmp	r3, #0
 8007730:	d130      	bne.n	8007794 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	2200      	movs	r2, #0
 800773a:	2180      	movs	r1, #128	; 0x80
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 fd53 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e04d      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007750:	b29b      	uxth	r3, r3
 8007752:	2bff      	cmp	r3, #255	; 0xff
 8007754:	d90e      	bls.n	8007774 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	22ff      	movs	r2, #255	; 0xff
 800775a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007760:	b2da      	uxtb	r2, r3
 8007762:	8979      	ldrh	r1, [r7, #10]
 8007764:	2300      	movs	r3, #0
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 ff5d 	bl	800862c <I2C_TransferConfig>
 8007772:	e00f      	b.n	8007794 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007782:	b2da      	uxtb	r2, r3
 8007784:	8979      	ldrh	r1, [r7, #10]
 8007786:	2300      	movs	r3, #0
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 ff4c 	bl	800862c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d19e      	bne.n	80076dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	6a39      	ldr	r1, [r7, #32]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fda0 	bl	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e01a      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2220      	movs	r2, #32
 80077b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6859      	ldr	r1, [r3, #4]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80077c6:	400b      	ands	r3, r1
 80077c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	e000      	b.n	80077e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
  }
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	80002000 	.word	0x80002000
 80077f4:	fe00e800 	.word	0xfe00e800

080077f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	607a      	str	r2, [r7, #4]
 8007802:	461a      	mov	r2, r3
 8007804:	460b      	mov	r3, r1
 8007806:	817b      	strh	r3, [r7, #10]
 8007808:	4613      	mov	r3, r2
 800780a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b20      	cmp	r3, #32
 8007816:	f040 80db 	bne.w	80079d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_I2C_Master_Receive+0x30>
 8007824:	2302      	movs	r3, #2
 8007826:	e0d4      	b.n	80079d2 <HAL_I2C_Master_Receive+0x1da>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007830:	f7fd faa8 	bl	8004d84 <HAL_GetTick>
 8007834:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	2319      	movs	r3, #25
 800783c:	2201      	movs	r2, #1
 800783e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fcd0 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e0bf      	b.n	80079d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2222      	movs	r2, #34	; 0x22
 8007856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2210      	movs	r2, #16
 800785e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	893a      	ldrh	r2, [r7, #8]
 8007872:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787e:	b29b      	uxth	r3, r3
 8007880:	2bff      	cmp	r3, #255	; 0xff
 8007882:	d90e      	bls.n	80078a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	22ff      	movs	r2, #255	; 0xff
 8007888:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788e:	b2da      	uxtb	r2, r3
 8007890:	8979      	ldrh	r1, [r7, #10]
 8007892:	4b52      	ldr	r3, [pc, #328]	; (80079dc <HAL_I2C_Master_Receive+0x1e4>)
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 fec6 	bl	800862c <I2C_TransferConfig>
 80078a0:	e06d      	b.n	800797e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b0:	b2da      	uxtb	r2, r3
 80078b2:	8979      	ldrh	r1, [r7, #10]
 80078b4:	4b49      	ldr	r3, [pc, #292]	; (80079dc <HAL_I2C_Master_Receive+0x1e4>)
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 feb5 	bl	800862c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80078c2:	e05c      	b.n	800797e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	6a39      	ldr	r1, [r7, #32]
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fd49 	bl	8008360 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e07c      	b.n	80079d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	b2d2      	uxtb	r2, r2
 80078e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	b29b      	uxth	r3, r3
 8007902:	3b01      	subs	r3, #1
 8007904:	b29a      	uxth	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790e:	b29b      	uxth	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d034      	beq.n	800797e <HAL_I2C_Master_Receive+0x186>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007918:	2b00      	cmp	r3, #0
 800791a:	d130      	bne.n	800797e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	2200      	movs	r2, #0
 8007924:	2180      	movs	r1, #128	; 0x80
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 fc5e 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e04d      	b.n	80079d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	2bff      	cmp	r3, #255	; 0xff
 800793e:	d90e      	bls.n	800795e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	22ff      	movs	r2, #255	; 0xff
 8007944:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794a:	b2da      	uxtb	r2, r3
 800794c:	8979      	ldrh	r1, [r7, #10]
 800794e:	2300      	movs	r3, #0
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fe68 	bl	800862c <I2C_TransferConfig>
 800795c:	e00f      	b.n	800797e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007962:	b29a      	uxth	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796c:	b2da      	uxtb	r2, r3
 800796e:	8979      	ldrh	r1, [r7, #10]
 8007970:	2300      	movs	r3, #0
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fe57 	bl	800862c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d19d      	bne.n	80078c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	6a39      	ldr	r1, [r7, #32]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 fcab 	bl	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e01a      	b.n	80079d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2220      	movs	r2, #32
 80079a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6859      	ldr	r1, [r3, #4]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <HAL_I2C_Master_Receive+0x1e8>)
 80079b0:	400b      	ands	r3, r1
 80079b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	80002400 	.word	0x80002400
 80079e0:	fe00e800 	.word	0xfe00e800

080079e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	4608      	mov	r0, r1
 80079ee:	4611      	mov	r1, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	817b      	strh	r3, [r7, #10]
 80079f6:	460b      	mov	r3, r1
 80079f8:	813b      	strh	r3, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	f040 80f9 	bne.w	8007bfe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <HAL_I2C_Mem_Write+0x34>
 8007a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0ed      	b.n	8007c00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_I2C_Mem_Write+0x4e>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e0e6      	b.n	8007c00 <HAL_I2C_Mem_Write+0x21c>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a3a:	f7fd f9a3 	bl	8004d84 <HAL_GetTick>
 8007a3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2319      	movs	r3, #25
 8007a46:	2201      	movs	r2, #1
 8007a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fbcb 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d001      	beq.n	8007a5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e0d1      	b.n	8007c00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2221      	movs	r2, #33	; 0x21
 8007a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2240      	movs	r2, #64	; 0x40
 8007a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a3a      	ldr	r2, [r7, #32]
 8007a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a84:	88f8      	ldrh	r0, [r7, #6]
 8007a86:	893a      	ldrh	r2, [r7, #8]
 8007a88:	8979      	ldrh	r1, [r7, #10]
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4603      	mov	r3, r0
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fadb 	bl	8008050 <I2C_RequestMemoryWrite>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e0a9      	b.n	8007c00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2bff      	cmp	r3, #255	; 0xff
 8007ab4:	d90e      	bls.n	8007ad4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	22ff      	movs	r2, #255	; 0xff
 8007aba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	8979      	ldrh	r1, [r7, #10]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fdad 	bl	800862c <I2C_TransferConfig>
 8007ad2:	e00f      	b.n	8007af4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	8979      	ldrh	r1, [r7, #10]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fd9c 	bl	800862c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fbb5 	bl	8008268 <I2C_WaitOnTXISFlagUntilTimeout>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e07b      	b.n	8007c00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b30:	3b01      	subs	r3, #1
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d034      	beq.n	8007bac <HAL_I2C_Mem_Write+0x1c8>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d130      	bne.n	8007bac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	2200      	movs	r2, #0
 8007b52:	2180      	movs	r1, #128	; 0x80
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fb47 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e04d      	b.n	8007c00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2bff      	cmp	r3, #255	; 0xff
 8007b6c:	d90e      	bls.n	8007b8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	22ff      	movs	r2, #255	; 0xff
 8007b72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	8979      	ldrh	r1, [r7, #10]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fd51 	bl	800862c <I2C_TransferConfig>
 8007b8a:	e00f      	b.n	8007bac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	8979      	ldrh	r1, [r7, #10]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fd40 	bl	800862c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d19e      	bne.n	8007af4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fb94 	bl	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e01a      	b.n	8007c00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <HAL_I2C_Mem_Write+0x224>)
 8007bde:	400b      	ands	r3, r1
 8007be0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e000      	b.n	8007c00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007bfe:	2302      	movs	r3, #2
  }
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	fe00e800 	.word	0xfe00e800

08007c0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af02      	add	r7, sp, #8
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	4608      	mov	r0, r1
 8007c16:	4611      	mov	r1, r2
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	817b      	strh	r3, [r7, #10]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	813b      	strh	r3, [r7, #8]
 8007c22:	4613      	mov	r3, r2
 8007c24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	f040 80fd 	bne.w	8007e2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_I2C_Mem_Read+0x34>
 8007c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d105      	bne.n	8007c4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0f1      	b.n	8007e30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d101      	bne.n	8007c5a <HAL_I2C_Mem_Read+0x4e>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e0ea      	b.n	8007e30 <HAL_I2C_Mem_Read+0x224>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c62:	f7fd f88f 	bl	8004d84 <HAL_GetTick>
 8007c66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2319      	movs	r3, #25
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fab7 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e0d5      	b.n	8007e30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2222      	movs	r2, #34	; 0x22
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2240      	movs	r2, #64	; 0x40
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a3a      	ldr	r2, [r7, #32]
 8007c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cac:	88f8      	ldrh	r0, [r7, #6]
 8007cae:	893a      	ldrh	r2, [r7, #8]
 8007cb0:	8979      	ldrh	r1, [r7, #10]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	4603      	mov	r3, r0
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fa1b 	bl	80080f8 <I2C_RequestMemoryRead>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0ad      	b.n	8007e30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	2bff      	cmp	r3, #255	; 0xff
 8007cdc:	d90e      	bls.n	8007cfc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	22ff      	movs	r2, #255	; 0xff
 8007ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	8979      	ldrh	r1, [r7, #10]
 8007cec:	4b52      	ldr	r3, [pc, #328]	; (8007e38 <HAL_I2C_Mem_Read+0x22c>)
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fc99 	bl	800862c <I2C_TransferConfig>
 8007cfa:	e00f      	b.n	8007d1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	8979      	ldrh	r1, [r7, #10]
 8007d0e:	4b4a      	ldr	r3, [pc, #296]	; (8007e38 <HAL_I2C_Mem_Read+0x22c>)
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 fc88 	bl	800862c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d22:	2200      	movs	r2, #0
 8007d24:	2104      	movs	r1, #4
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fa5e 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e07c      	b.n	8007e30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	b2d2      	uxtb	r2, r2
 8007d42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d52:	3b01      	subs	r3, #1
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d034      	beq.n	8007ddc <HAL_I2C_Mem_Read+0x1d0>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d130      	bne.n	8007ddc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	2200      	movs	r2, #0
 8007d82:	2180      	movs	r1, #128	; 0x80
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 fa2f 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e04d      	b.n	8007e30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2bff      	cmp	r3, #255	; 0xff
 8007d9c:	d90e      	bls.n	8007dbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	22ff      	movs	r2, #255	; 0xff
 8007da2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	8979      	ldrh	r1, [r7, #10]
 8007dac:	2300      	movs	r3, #0
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 fc39 	bl	800862c <I2C_TransferConfig>
 8007dba:	e00f      	b.n	8007ddc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	8979      	ldrh	r1, [r7, #10]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 fc28 	bl	800862c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d19a      	bne.n	8007d1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 fa7c 	bl	80082e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e01a      	b.n	8007e30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6859      	ldr	r1, [r3, #4]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <HAL_I2C_Mem_Read+0x230>)
 8007e0e:	400b      	ands	r3, r1
 8007e10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e000      	b.n	8007e30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007e2e:	2302      	movs	r3, #2
  }
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	80002400 	.word	0x80002400
 8007e3c:	fe00e800 	.word	0xfe00e800

08007e40 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08a      	sub	sp, #40	; 0x28
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	607a      	str	r2, [r7, #4]
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007e50:	2300      	movs	r3, #0
 8007e52:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	f040 80f1 	bne.w	8008044 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e70:	d101      	bne.n	8007e76 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8007e72:	2302      	movs	r3, #2
 8007e74:	e0e7      	b.n	8008046 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_I2C_IsDeviceReady+0x44>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e0e0      	b.n	8008046 <HAL_I2C_IsDeviceReady+0x206>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2224      	movs	r2, #36	; 0x24
 8007e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d107      	bne.n	8007eb2 <HAL_I2C_IsDeviceReady+0x72>
 8007ea2:	897b      	ldrh	r3, [r7, #10]
 8007ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007eac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007eb0:	e004      	b.n	8007ebc <HAL_I2C_IsDeviceReady+0x7c>
 8007eb2:	897b      	ldrh	r3, [r7, #10]
 8007eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eb8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007ec2:	f7fc ff5f 	bl	8004d84 <HAL_GetTick>
 8007ec6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	bf0c      	ite	eq
 8007ed6:	2301      	moveq	r3, #1
 8007ed8:	2300      	movne	r3, #0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f003 0310 	and.w	r3, r3, #16
 8007ee8:	2b10      	cmp	r3, #16
 8007eea:	bf0c      	ite	eq
 8007eec:	2301      	moveq	r3, #1
 8007eee:	2300      	movne	r3, #0
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007ef4:	e034      	b.n	8007f60 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d01a      	beq.n	8007f34 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007efe:	f7fc ff41 	bl	8004d84 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d302      	bcc.n	8007f14 <HAL_I2C_IsDeviceReady+0xd4>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10f      	bne.n	8007f34 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	f043 0220 	orr.w	r2, r3, #32
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e088      	b.n	8008046 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f003 0320 	and.w	r3, r3, #32
 8007f3e:	2b20      	cmp	r3, #32
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b10      	cmp	r3, #16
 8007f56:	bf0c      	ite	eq
 8007f58:	2301      	moveq	r3, #1
 8007f5a:	2300      	movne	r3, #0
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007f60:	7ffb      	ldrb	r3, [r7, #31]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d102      	bne.n	8007f6c <HAL_I2C_IsDeviceReady+0x12c>
 8007f66:	7fbb      	ldrb	r3, [r7, #30]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0c4      	beq.n	8007ef6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f003 0310 	and.w	r3, r3, #16
 8007f76:	2b10      	cmp	r3, #16
 8007f78:	d01a      	beq.n	8007fb0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2200      	movs	r2, #0
 8007f82:	2120      	movs	r1, #32
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f92f 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e058      	b.n	8008046 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e04a      	b.n	8008046 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	9300      	str	r3, [sp, #0]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2120      	movs	r1, #32
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 f914 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e03d      	b.n	8008046 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2210      	movs	r2, #16
 8007fd0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d118      	bne.n	8008014 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ff0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2120      	movs	r1, #32
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 f8f3 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e01c      	b.n	8008046 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2220      	movs	r2, #32
 8008012:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	3301      	adds	r3, #1
 8008018:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	429a      	cmp	r2, r3
 8008020:	f63f af3b 	bhi.w	8007e9a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008030:	f043 0220 	orr.w	r2, r3, #32
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008044:	2302      	movs	r3, #2
  }
}
 8008046:	4618      	mov	r0, r3
 8008048:	3720      	adds	r7, #32
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	4608      	mov	r0, r1
 800805a:	4611      	mov	r1, r2
 800805c:	461a      	mov	r2, r3
 800805e:	4603      	mov	r3, r0
 8008060:	817b      	strh	r3, [r7, #10]
 8008062:	460b      	mov	r3, r1
 8008064:	813b      	strh	r3, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800806a:	88fb      	ldrh	r3, [r7, #6]
 800806c:	b2da      	uxtb	r2, r3
 800806e:	8979      	ldrh	r1, [r7, #10]
 8008070:	4b20      	ldr	r3, [pc, #128]	; (80080f4 <I2C_RequestMemoryWrite+0xa4>)
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 fad7 	bl	800862c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	69b9      	ldr	r1, [r7, #24]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 f8f0 	bl	8008268 <I2C_WaitOnTXISFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e02c      	b.n	80080ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d105      	bne.n	80080a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008098:	893b      	ldrh	r3, [r7, #8]
 800809a:	b2da      	uxtb	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	629a      	str	r2, [r3, #40]	; 0x28
 80080a2:	e015      	b.n	80080d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080a4:	893b      	ldrh	r3, [r7, #8]
 80080a6:	0a1b      	lsrs	r3, r3, #8
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	69b9      	ldr	r1, [r7, #24]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f8d6 	bl	8008268 <I2C_WaitOnTXISFlagUntilTimeout>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e012      	b.n	80080ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080c6:	893b      	ldrh	r3, [r7, #8]
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	2200      	movs	r2, #0
 80080d8:	2180      	movs	r1, #128	; 0x80
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f884 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e000      	b.n	80080ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	80002000 	.word	0x80002000

080080f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	4608      	mov	r0, r1
 8008102:	4611      	mov	r1, r2
 8008104:	461a      	mov	r2, r3
 8008106:	4603      	mov	r3, r0
 8008108:	817b      	strh	r3, [r7, #10]
 800810a:	460b      	mov	r3, r1
 800810c:	813b      	strh	r3, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	b2da      	uxtb	r2, r3
 8008116:	8979      	ldrh	r1, [r7, #10]
 8008118:	4b20      	ldr	r3, [pc, #128]	; (800819c <I2C_RequestMemoryRead+0xa4>)
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2300      	movs	r3, #0
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fa84 	bl	800862c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008124:	69fa      	ldr	r2, [r7, #28]
 8008126:	69b9      	ldr	r1, [r7, #24]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f89d 	bl	8008268 <I2C_WaitOnTXISFlagUntilTimeout>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e02c      	b.n	8008192 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008138:	88fb      	ldrh	r3, [r7, #6]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d105      	bne.n	800814a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800813e:	893b      	ldrh	r3, [r7, #8]
 8008140:	b2da      	uxtb	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	629a      	str	r2, [r3, #40]	; 0x28
 8008148:	e015      	b.n	8008176 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800814a:	893b      	ldrh	r3, [r7, #8]
 800814c:	0a1b      	lsrs	r3, r3, #8
 800814e:	b29b      	uxth	r3, r3
 8008150:	b2da      	uxtb	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	69b9      	ldr	r1, [r7, #24]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f883 	bl	8008268 <I2C_WaitOnTXISFlagUntilTimeout>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e012      	b.n	8008192 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800816c:	893b      	ldrh	r3, [r7, #8]
 800816e:	b2da      	uxtb	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	2200      	movs	r2, #0
 800817e:	2140      	movs	r1, #64	; 0x40
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f831 	bl	80081e8 <I2C_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e000      	b.n	8008192 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	80002000 	.word	0x80002000

080081a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d103      	bne.n	80081be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	f003 0301 	and.w	r3, r3, #1
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d007      	beq.n	80081dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f042 0201 	orr.w	r2, r2, #1
 80081da:	619a      	str	r2, [r3, #24]
  }
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	4613      	mov	r3, r2
 80081f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081f8:	e022      	b.n	8008240 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008200:	d01e      	beq.n	8008240 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008202:	f7fc fdbf 	bl	8004d84 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	d302      	bcc.n	8008218 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d113      	bne.n	8008240 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821c:	f043 0220 	orr.w	r2, r3, #32
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e00f      	b.n	8008260 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	4013      	ands	r3, r2
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	429a      	cmp	r2, r3
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	461a      	mov	r2, r3
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	429a      	cmp	r2, r3
 800825c:	d0cd      	beq.n	80081fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008274:	e02c      	b.n	80082d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 f8ea 	bl	8008454 <I2C_IsErrorOccurred>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e02a      	b.n	80082e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008290:	d01e      	beq.n	80082d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008292:	f7fc fd77 	bl	8004d84 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d302      	bcc.n	80082a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d113      	bne.n	80082d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ac:	f043 0220 	orr.w	r2, r3, #32
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e007      	b.n	80082e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d1cb      	bne.n	8008276 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082f4:	e028      	b.n	8008348 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	68b9      	ldr	r1, [r7, #8]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 f8aa 	bl	8008454 <I2C_IsErrorOccurred>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e026      	b.n	8008358 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fc fd3b 	bl	8004d84 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d113      	bne.n	8008348 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008324:	f043 0220 	orr.w	r2, r3, #32
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2220      	movs	r2, #32
 8008330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e007      	b.n	8008358 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b20      	cmp	r3, #32
 8008354:	d1cf      	bne.n	80082f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800836c:	e064      	b.n	8008438 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f86e 	bl	8008454 <I2C_IsErrorOccurred>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e062      	b.n	8008448 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b20      	cmp	r3, #32
 800838e:	d138      	bne.n	8008402 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b04      	cmp	r3, #4
 800839c:	d105      	bne.n	80083aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	e04e      	b.n	8008448 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	d107      	bne.n	80083c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2210      	movs	r2, #16
 80083be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2204      	movs	r2, #4
 80083c4:	645a      	str	r2, [r3, #68]	; 0x44
 80083c6:	e002      	b.n	80083ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2220      	movs	r2, #32
 80083d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6859      	ldr	r1, [r3, #4]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80083e2:	400b      	ands	r3, r1
 80083e4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e022      	b.n	8008448 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008402:	f7fc fcbf 	bl	8004d84 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	429a      	cmp	r2, r3
 8008410:	d302      	bcc.n	8008418 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10f      	bne.n	8008438 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800841c:	f043 0220 	orr.w	r2, r3, #32
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e007      	b.n	8008448 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b04      	cmp	r3, #4
 8008444:	d193      	bne.n	800836e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	fe00e800 	.word	0xfe00e800

08008454 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08a      	sub	sp, #40	; 0x28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800846e:	2300      	movs	r3, #0
 8008470:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	d075      	beq.n	800856c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2210      	movs	r2, #16
 8008486:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008488:	e056      	b.n	8008538 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d052      	beq.n	8008538 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008492:	f7fc fc77 	bl	8004d84 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d302      	bcc.n	80084a8 <I2C_IsErrorOccurred+0x54>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d147      	bne.n	8008538 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ca:	d12e      	bne.n	800852a <I2C_IsErrorOccurred+0xd6>
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084d2:	d02a      	beq.n	800852a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80084d4:	7cfb      	ldrb	r3, [r7, #19]
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d027      	beq.n	800852a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80084ea:	f7fc fc4b 	bl	8004d84 <HAL_GetTick>
 80084ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084f0:	e01b      	b.n	800852a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80084f2:	f7fc fc47 	bl	8004d84 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	2b19      	cmp	r3, #25
 80084fe:	d914      	bls.n	800852a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008504:	f043 0220 	orr.w	r2, r3, #32
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b20      	cmp	r3, #32
 8008536:	d1dc      	bne.n	80084f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b20      	cmp	r3, #32
 8008544:	d003      	beq.n	800854e <I2C_IsErrorOccurred+0xfa>
 8008546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800854a:	2b00      	cmp	r3, #0
 800854c:	d09d      	beq.n	800848a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800854e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008552:	2b00      	cmp	r3, #0
 8008554:	d103      	bne.n	800855e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2220      	movs	r2, #32
 800855c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	f043 0304 	orr.w	r3, r3, #4
 8008564:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800858e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	f043 0308 	orr.w	r3, r3, #8
 80085a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	f043 0302 	orr.w	r3, r3, #2
 80085c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80085da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d01c      	beq.n	800861c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff fddc 	bl	80081a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6859      	ldr	r1, [r3, #4]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <I2C_IsErrorOccurred+0x1d4>)
 80085f4:	400b      	ands	r3, r1
 80085f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	431a      	orrs	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2220      	movs	r2, #32
 8008608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800861c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008620:	4618      	mov	r0, r3
 8008622:	3728      	adds	r7, #40	; 0x28
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	fe00e800 	.word	0xfe00e800

0800862c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	607b      	str	r3, [r7, #4]
 8008636:	460b      	mov	r3, r1
 8008638:	817b      	strh	r3, [r7, #10]
 800863a:	4613      	mov	r3, r2
 800863c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800863e:	897b      	ldrh	r3, [r7, #10]
 8008640:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008644:	7a7b      	ldrb	r3, [r7, #9]
 8008646:	041b      	lsls	r3, r3, #16
 8008648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800864c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	4313      	orrs	r3, r2
 8008656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800865a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	0d5b      	lsrs	r3, r3, #21
 8008666:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800866a:	4b08      	ldr	r3, [pc, #32]	; (800868c <I2C_TransferConfig+0x60>)
 800866c:	430b      	orrs	r3, r1
 800866e:	43db      	mvns	r3, r3
 8008670:	ea02 0103 	and.w	r1, r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800867e:	bf00      	nop
 8008680:	371c      	adds	r7, #28
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	03ff63ff 	.word	0x03ff63ff

08008690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d138      	bne.n	8008718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e032      	b.n	800871a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2224      	movs	r2, #36	; 0x24
 80086c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 0201 	bic.w	r2, r2, #1
 80086d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6819      	ldr	r1, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0201 	orr.w	r2, r2, #1
 8008702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	e000      	b.n	800871a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008718:	2302      	movs	r3, #2
  }
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008726:	b480      	push	{r7}
 8008728:	b085      	sub	sp, #20
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b20      	cmp	r3, #32
 800873a:	d139      	bne.n	80087b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008742:	2b01      	cmp	r3, #1
 8008744:	d101      	bne.n	800874a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008746:	2302      	movs	r3, #2
 8008748:	e033      	b.n	80087b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2224      	movs	r2, #36	; 0x24
 8008756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0201 	bic.w	r2, r2, #1
 8008768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	e000      	b.n	80087b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80087b0:	2302      	movs	r3, #2
  }
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80087c4:	4b04      	ldr	r3, [pc, #16]	; (80087d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	40007000 	.word	0x40007000

080087dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ea:	d130      	bne.n	800884e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80087ec:	4b23      	ldr	r3, [pc, #140]	; (800887c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087f8:	d038      	beq.n	800886c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087fa:	4b20      	ldr	r3, [pc, #128]	; (800887c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008802:	4a1e      	ldr	r2, [pc, #120]	; (800887c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008804:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008808:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800880a:	4b1d      	ldr	r3, [pc, #116]	; (8008880 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2232      	movs	r2, #50	; 0x32
 8008810:	fb02 f303 	mul.w	r3, r2, r3
 8008814:	4a1b      	ldr	r2, [pc, #108]	; (8008884 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008816:	fba2 2303 	umull	r2, r3, r2, r3
 800881a:	0c9b      	lsrs	r3, r3, #18
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008820:	e002      	b.n	8008828 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3b01      	subs	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008828:	4b14      	ldr	r3, [pc, #80]	; (800887c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008834:	d102      	bne.n	800883c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f2      	bne.n	8008822 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800883c:	4b0f      	ldr	r3, [pc, #60]	; (800887c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008848:	d110      	bne.n	800886c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e00f      	b.n	800886e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800885a:	d007      	beq.n	800886c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800885c:	4b07      	ldr	r3, [pc, #28]	; (800887c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008864:	4a05      	ldr	r2, [pc, #20]	; (800887c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800886a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40007000 	.word	0x40007000
 8008880:	20000004 	.word	0x20000004
 8008884:	431bde83 	.word	0x431bde83

08008888 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d102      	bne.n	800889c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f000 bc02 	b.w	80090a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800889c:	4b96      	ldr	r3, [pc, #600]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f003 030c 	and.w	r3, r3, #12
 80088a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088a6:	4b94      	ldr	r3, [pc, #592]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 80e4 	beq.w	8008a86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <HAL_RCC_OscConfig+0x4c>
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	2b0c      	cmp	r3, #12
 80088c8:	f040 808b 	bne.w	80089e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	f040 8087 	bne.w	80089e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80088d4:	4b88      	ldr	r3, [pc, #544]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_RCC_OscConfig+0x64>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e3d9      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a1a      	ldr	r2, [r3, #32]
 80088f0:	4b81      	ldr	r3, [pc, #516]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0308 	and.w	r3, r3, #8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <HAL_RCC_OscConfig+0x7e>
 80088fc:	4b7e      	ldr	r3, [pc, #504]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008904:	e005      	b.n	8008912 <HAL_RCC_OscConfig+0x8a>
 8008906:	4b7c      	ldr	r3, [pc, #496]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800890c:	091b      	lsrs	r3, r3, #4
 800890e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008912:	4293      	cmp	r3, r2
 8008914:	d223      	bcs.n	800895e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fd8c 	bl	8009438 <RCC_SetFlashLatencyFromMSIRange>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e3ba      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800892a:	4b73      	ldr	r3, [pc, #460]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a72      	ldr	r2, [pc, #456]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008930:	f043 0308 	orr.w	r3, r3, #8
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	4b70      	ldr	r3, [pc, #448]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	496d      	ldr	r1, [pc, #436]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008944:	4313      	orrs	r3, r2
 8008946:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008948:	4b6b      	ldr	r3, [pc, #428]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	4968      	ldr	r1, [pc, #416]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008958:	4313      	orrs	r3, r2
 800895a:	604b      	str	r3, [r1, #4]
 800895c:	e025      	b.n	80089aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800895e:	4b66      	ldr	r3, [pc, #408]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a65      	ldr	r2, [pc, #404]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008964:	f043 0308 	orr.w	r3, r3, #8
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	4b63      	ldr	r3, [pc, #396]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	4960      	ldr	r1, [pc, #384]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008978:	4313      	orrs	r3, r2
 800897a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800897c:	4b5e      	ldr	r3, [pc, #376]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	495b      	ldr	r1, [pc, #364]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 800898c:	4313      	orrs	r3, r2
 800898e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fd4c 	bl	8009438 <RCC_SetFlashLatencyFromMSIRange>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e37a      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80089aa:	f000 fc81 	bl	80092b0 <HAL_RCC_GetSysClockFreq>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b51      	ldr	r3, [pc, #324]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	091b      	lsrs	r3, r3, #4
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	4950      	ldr	r1, [pc, #320]	; (8008afc <HAL_RCC_OscConfig+0x274>)
 80089bc:	5ccb      	ldrb	r3, [r1, r3]
 80089be:	f003 031f 	and.w	r3, r3, #31
 80089c2:	fa22 f303 	lsr.w	r3, r2, r3
 80089c6:	4a4e      	ldr	r2, [pc, #312]	; (8008b00 <HAL_RCC_OscConfig+0x278>)
 80089c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80089ca:	4b4e      	ldr	r3, [pc, #312]	; (8008b04 <HAL_RCC_OscConfig+0x27c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fc f988 	bl	8004ce4 <HAL_InitTick>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d052      	beq.n	8008a84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	e35e      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d032      	beq.n	8008a50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80089ea:	4b43      	ldr	r3, [pc, #268]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a42      	ldr	r2, [pc, #264]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 80089f0:	f043 0301 	orr.w	r3, r3, #1
 80089f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80089f6:	f7fc f9c5 	bl	8004d84 <HAL_GetTick>
 80089fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80089fc:	e008      	b.n	8008a10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80089fe:	f7fc f9c1 	bl	8004d84 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e347      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008a10:	4b39      	ldr	r3, [pc, #228]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0f0      	beq.n	80089fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a1c:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a35      	ldr	r2, [pc, #212]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a22:	f043 0308 	orr.w	r3, r3, #8
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	4b33      	ldr	r3, [pc, #204]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	4930      	ldr	r1, [pc, #192]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a3a:	4b2f      	ldr	r3, [pc, #188]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	021b      	lsls	r3, r3, #8
 8008a48:	492b      	ldr	r1, [pc, #172]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	604b      	str	r3, [r1, #4]
 8008a4e:	e01a      	b.n	8008a86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008a50:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a28      	ldr	r2, [pc, #160]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a56:	f023 0301 	bic.w	r3, r3, #1
 8008a5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008a5c:	f7fc f992 	bl	8004d84 <HAL_GetTick>
 8008a60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008a62:	e008      	b.n	8008a76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a64:	f7fc f98e 	bl	8004d84 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e314      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008a76:	4b20      	ldr	r3, [pc, #128]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1f0      	bne.n	8008a64 <HAL_RCC_OscConfig+0x1dc>
 8008a82:	e000      	b.n	8008a86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008a84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d073      	beq.n	8008b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d005      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x21c>
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b0c      	cmp	r3, #12
 8008a9c:	d10e      	bne.n	8008abc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d10b      	bne.n	8008abc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aa4:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d063      	beq.n	8008b78 <HAL_RCC_OscConfig+0x2f0>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d15f      	bne.n	8008b78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e2f1      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac4:	d106      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x24c>
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a0b      	ldr	r2, [pc, #44]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	e025      	b.n	8008b20 <HAL_RCC_OscConfig+0x298>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008adc:	d114      	bne.n	8008b08 <HAL_RCC_OscConfig+0x280>
 8008ade:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a05      	ldr	r2, [pc, #20]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	4b03      	ldr	r3, [pc, #12]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a02      	ldr	r2, [pc, #8]	; (8008af8 <HAL_RCC_OscConfig+0x270>)
 8008af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e013      	b.n	8008b20 <HAL_RCC_OscConfig+0x298>
 8008af8:	40021000 	.word	0x40021000
 8008afc:	08010864 	.word	0x08010864
 8008b00:	20000004 	.word	0x20000004
 8008b04:	20000008 	.word	0x20000008
 8008b08:	4ba0      	ldr	r3, [pc, #640]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a9f      	ldr	r2, [pc, #636]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	4b9d      	ldr	r3, [pc, #628]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a9c      	ldr	r2, [pc, #624]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d013      	beq.n	8008b50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b28:	f7fc f92c 	bl	8004d84 <HAL_GetTick>
 8008b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b2e:	e008      	b.n	8008b42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b30:	f7fc f928 	bl	8004d84 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b64      	cmp	r3, #100	; 0x64
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e2ae      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b42:	4b92      	ldr	r3, [pc, #584]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0f0      	beq.n	8008b30 <HAL_RCC_OscConfig+0x2a8>
 8008b4e:	e014      	b.n	8008b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b50:	f7fc f918 	bl	8004d84 <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b58:	f7fc f914 	bl	8004d84 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b64      	cmp	r3, #100	; 0x64
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e29a      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b6a:	4b88      	ldr	r3, [pc, #544]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1f0      	bne.n	8008b58 <HAL_RCC_OscConfig+0x2d0>
 8008b76:	e000      	b.n	8008b7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d060      	beq.n	8008c48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d005      	beq.n	8008b98 <HAL_RCC_OscConfig+0x310>
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b0c      	cmp	r3, #12
 8008b90:	d119      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d116      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b98:	4b7c      	ldr	r3, [pc, #496]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x328>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e277      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bb0:	4b76      	ldr	r3, [pc, #472]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	061b      	lsls	r3, r3, #24
 8008bbe:	4973      	ldr	r1, [pc, #460]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bc4:	e040      	b.n	8008c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d023      	beq.n	8008c16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bce:	4b6f      	ldr	r3, [pc, #444]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a6e      	ldr	r2, [pc, #440]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bda:	f7fc f8d3 	bl	8004d84 <HAL_GetTick>
 8008bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008be0:	e008      	b.n	8008bf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008be2:	f7fc f8cf 	bl	8004d84 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e255      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bf4:	4b65      	ldr	r3, [pc, #404]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0f0      	beq.n	8008be2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c00:	4b62      	ldr	r3, [pc, #392]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	061b      	lsls	r3, r3, #24
 8008c0e:	495f      	ldr	r1, [pc, #380]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c10:	4313      	orrs	r3, r2
 8008c12:	604b      	str	r3, [r1, #4]
 8008c14:	e018      	b.n	8008c48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c16:	4b5d      	ldr	r3, [pc, #372]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a5c      	ldr	r2, [pc, #368]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c22:	f7fc f8af 	bl	8004d84 <HAL_GetTick>
 8008c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c28:	e008      	b.n	8008c3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c2a:	f7fc f8ab 	bl	8004d84 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d901      	bls.n	8008c3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e231      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c3c:	4b53      	ldr	r3, [pc, #332]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1f0      	bne.n	8008c2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0308 	and.w	r3, r3, #8
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d03c      	beq.n	8008cce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d01c      	beq.n	8008c96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c5c:	4b4b      	ldr	r3, [pc, #300]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c62:	4a4a      	ldr	r2, [pc, #296]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c64:	f043 0301 	orr.w	r3, r3, #1
 8008c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c6c:	f7fc f88a 	bl	8004d84 <HAL_GetTick>
 8008c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c72:	e008      	b.n	8008c86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c74:	f7fc f886 	bl	8004d84 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e20c      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c86:	4b41      	ldr	r3, [pc, #260]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0ef      	beq.n	8008c74 <HAL_RCC_OscConfig+0x3ec>
 8008c94:	e01b      	b.n	8008cce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c96:	4b3d      	ldr	r3, [pc, #244]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c9c:	4a3b      	ldr	r2, [pc, #236]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca6:	f7fc f86d 	bl	8004d84 <HAL_GetTick>
 8008caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cac:	e008      	b.n	8008cc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cae:	f7fc f869 	bl	8004d84 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d901      	bls.n	8008cc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e1ef      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cc0:	4b32      	ldr	r3, [pc, #200]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1ef      	bne.n	8008cae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80a6 	beq.w	8008e28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008ce0:	4b2a      	ldr	r3, [pc, #168]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10d      	bne.n	8008d08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cec:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf0:	4a26      	ldr	r2, [pc, #152]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8008cf8:	4b24      	ldr	r3, [pc, #144]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d00:	60bb      	str	r3, [r7, #8]
 8008d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d04:	2301      	movs	r3, #1
 8008d06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d08:	4b21      	ldr	r3, [pc, #132]	; (8008d90 <HAL_RCC_OscConfig+0x508>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d118      	bne.n	8008d46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d14:	4b1e      	ldr	r3, [pc, #120]	; (8008d90 <HAL_RCC_OscConfig+0x508>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a1d      	ldr	r2, [pc, #116]	; (8008d90 <HAL_RCC_OscConfig+0x508>)
 8008d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d20:	f7fc f830 	bl	8004d84 <HAL_GetTick>
 8008d24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d28:	f7fc f82c 	bl	8004d84 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e1b2      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d3a:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <HAL_RCC_OscConfig+0x508>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d0f0      	beq.n	8008d28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d108      	bne.n	8008d60 <HAL_RCC_OscConfig+0x4d8>
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d54:	4a0d      	ldr	r2, [pc, #52]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d5e:	e029      	b.n	8008db4 <HAL_RCC_OscConfig+0x52c>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	2b05      	cmp	r3, #5
 8008d66:	d115      	bne.n	8008d94 <HAL_RCC_OscConfig+0x50c>
 8008d68:	4b08      	ldr	r3, [pc, #32]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d6e:	4a07      	ldr	r2, [pc, #28]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008d70:	f043 0304 	orr.w	r3, r3, #4
 8008d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d78:	4b04      	ldr	r3, [pc, #16]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d7e:	4a03      	ldr	r2, [pc, #12]	; (8008d8c <HAL_RCC_OscConfig+0x504>)
 8008d80:	f043 0301 	orr.w	r3, r3, #1
 8008d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d88:	e014      	b.n	8008db4 <HAL_RCC_OscConfig+0x52c>
 8008d8a:	bf00      	nop
 8008d8c:	40021000 	.word	0x40021000
 8008d90:	40007000 	.word	0x40007000
 8008d94:	4b9a      	ldr	r3, [pc, #616]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d9a:	4a99      	ldr	r2, [pc, #612]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008d9c:	f023 0301 	bic.w	r3, r3, #1
 8008da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008da4:	4b96      	ldr	r3, [pc, #600]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008daa:	4a95      	ldr	r2, [pc, #596]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008dac:	f023 0304 	bic.w	r3, r3, #4
 8008db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d016      	beq.n	8008dea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dbc:	f7fb ffe2 	bl	8004d84 <HAL_GetTick>
 8008dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dc2:	e00a      	b.n	8008dda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dc4:	f7fb ffde 	bl	8004d84 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e162      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dda:	4b89      	ldr	r3, [pc, #548]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0ed      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x53c>
 8008de8:	e015      	b.n	8008e16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dea:	f7fb ffcb 	bl	8004d84 <HAL_GetTick>
 8008dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008df0:	e00a      	b.n	8008e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008df2:	f7fb ffc7 	bl	8004d84 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d901      	bls.n	8008e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e14b      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e08:	4b7d      	ldr	r3, [pc, #500]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1ed      	bne.n	8008df2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e16:	7ffb      	ldrb	r3, [r7, #31]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d105      	bne.n	8008e28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e1c:	4b78      	ldr	r3, [pc, #480]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e20:	4a77      	ldr	r2, [pc, #476]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d03c      	beq.n	8008eae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01c      	beq.n	8008e76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e3c:	4b70      	ldr	r3, [pc, #448]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008e3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e42:	4a6f      	ldr	r2, [pc, #444]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e4c:	f7fb ff9a 	bl	8004d84 <HAL_GetTick>
 8008e50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e52:	e008      	b.n	8008e66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e54:	f7fb ff96 	bl	8004d84 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e11c      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e66:	4b66      	ldr	r3, [pc, #408]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008e68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0ef      	beq.n	8008e54 <HAL_RCC_OscConfig+0x5cc>
 8008e74:	e01b      	b.n	8008eae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e76:	4b62      	ldr	r3, [pc, #392]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e7c:	4a60      	ldr	r2, [pc, #384]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008e7e:	f023 0301 	bic.w	r3, r3, #1
 8008e82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e86:	f7fb ff7d 	bl	8004d84 <HAL_GetTick>
 8008e8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e8c:	e008      	b.n	8008ea0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e8e:	f7fb ff79 	bl	8004d84 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d901      	bls.n	8008ea0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e0ff      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ea0:	4b57      	ldr	r3, [pc, #348]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1ef      	bne.n	8008e8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 80f3 	beq.w	800909e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	f040 80c9 	bne.w	8009054 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008ec2:	4b4f      	ldr	r3, [pc, #316]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f003 0203 	and.w	r2, r3, #3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d12c      	bne.n	8008f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d123      	bne.n	8008f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d11b      	bne.n	8008f30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d113      	bne.n	8008f30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	3b01      	subs	r3, #1
 8008f16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d109      	bne.n	8008f30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	085b      	lsrs	r3, r3, #1
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d06b      	beq.n	8009008 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2b0c      	cmp	r3, #12
 8008f34:	d062      	beq.n	8008ffc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008f36:	4b32      	ldr	r3, [pc, #200]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e0ac      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008f46:	4b2e      	ldr	r3, [pc, #184]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a2d      	ldr	r2, [pc, #180]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008f52:	f7fb ff17 	bl	8004d84 <HAL_GetTick>
 8008f56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f58:	e008      	b.n	8008f6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f5a:	f7fb ff13 	bl	8004d84 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d901      	bls.n	8008f6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e099      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f6c:	4b24      	ldr	r3, [pc, #144]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1f0      	bne.n	8008f5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f78:	4b21      	ldr	r3, [pc, #132]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	4b21      	ldr	r3, [pc, #132]	; (8009004 <HAL_RCC_OscConfig+0x77c>)
 8008f7e:	4013      	ands	r3, r2
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f88:	3a01      	subs	r2, #1
 8008f8a:	0112      	lsls	r2, r2, #4
 8008f8c:	4311      	orrs	r1, r2
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f92:	0212      	lsls	r2, r2, #8
 8008f94:	4311      	orrs	r1, r2
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008f9a:	0852      	lsrs	r2, r2, #1
 8008f9c:	3a01      	subs	r2, #1
 8008f9e:	0552      	lsls	r2, r2, #21
 8008fa0:	4311      	orrs	r1, r2
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008fa6:	0852      	lsrs	r2, r2, #1
 8008fa8:	3a01      	subs	r2, #1
 8008faa:	0652      	lsls	r2, r2, #25
 8008fac:	4311      	orrs	r1, r2
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fb2:	06d2      	lsls	r2, r2, #27
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	4912      	ldr	r1, [pc, #72]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008fbc:	4b10      	ldr	r3, [pc, #64]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a0f      	ldr	r2, [pc, #60]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fc8:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	4a0c      	ldr	r2, [pc, #48]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008fd4:	f7fb fed6 	bl	8004d84 <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fda:	e008      	b.n	8008fee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fdc:	f7fb fed2 	bl	8004d84 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e058      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fee:	4b04      	ldr	r3, [pc, #16]	; (8009000 <HAL_RCC_OscConfig+0x778>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0f0      	beq.n	8008fdc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008ffa:	e050      	b.n	800909e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e04f      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
 8009000:	40021000 	.word	0x40021000
 8009004:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009008:	4b27      	ldr	r3, [pc, #156]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d144      	bne.n	800909e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a23      	ldr	r2, [pc, #140]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 800901a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800901e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009020:	4b21      	ldr	r3, [pc, #132]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4a20      	ldr	r2, [pc, #128]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 8009026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800902a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800902c:	f7fb feaa 	bl	8004d84 <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009034:	f7fb fea6 	bl	8004d84 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e02c      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009046:	4b18      	ldr	r3, [pc, #96]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <HAL_RCC_OscConfig+0x7ac>
 8009052:	e024      	b.n	800909e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	2b0c      	cmp	r3, #12
 8009058:	d01f      	beq.n	800909a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800905a:	4b13      	ldr	r3, [pc, #76]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a12      	ldr	r2, [pc, #72]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 8009060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009066:	f7fb fe8d 	bl	8004d84 <HAL_GetTick>
 800906a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800906c:	e008      	b.n	8009080 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800906e:	f7fb fe89 	bl	8004d84 <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	2b02      	cmp	r3, #2
 800907a:	d901      	bls.n	8009080 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e00f      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009080:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f0      	bne.n	800906e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800908c:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 800908e:	68da      	ldr	r2, [r3, #12]
 8009090:	4905      	ldr	r1, [pc, #20]	; (80090a8 <HAL_RCC_OscConfig+0x820>)
 8009092:	4b06      	ldr	r3, [pc, #24]	; (80090ac <HAL_RCC_OscConfig+0x824>)
 8009094:	4013      	ands	r3, r2
 8009096:	60cb      	str	r3, [r1, #12]
 8009098:	e001      	b.n	800909e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e000      	b.n	80090a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3720      	adds	r7, #32
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	40021000 	.word	0x40021000
 80090ac:	feeefffc 	.word	0xfeeefffc

080090b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0e7      	b.n	8009294 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090c4:	4b75      	ldr	r3, [pc, #468]	; (800929c <HAL_RCC_ClockConfig+0x1ec>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d910      	bls.n	80090f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b72      	ldr	r3, [pc, #456]	; (800929c <HAL_RCC_ClockConfig+0x1ec>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f023 0207 	bic.w	r2, r3, #7
 80090da:	4970      	ldr	r1, [pc, #448]	; (800929c <HAL_RCC_ClockConfig+0x1ec>)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	4313      	orrs	r3, r2
 80090e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e2:	4b6e      	ldr	r3, [pc, #440]	; (800929c <HAL_RCC_ClockConfig+0x1ec>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0307 	and.w	r3, r3, #7
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d001      	beq.n	80090f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e0cf      	b.n	8009294 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d010      	beq.n	8009122 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	4b66      	ldr	r3, [pc, #408]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800910c:	429a      	cmp	r2, r3
 800910e:	d908      	bls.n	8009122 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009110:	4b63      	ldr	r3, [pc, #396]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	4960      	ldr	r1, [pc, #384]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 800911e:	4313      	orrs	r3, r2
 8009120:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	2b00      	cmp	r3, #0
 800912c:	d04c      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	2b03      	cmp	r3, #3
 8009134:	d107      	bne.n	8009146 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009136:	4b5a      	ldr	r3, [pc, #360]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d121      	bne.n	8009186 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e0a6      	b.n	8009294 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d107      	bne.n	800915e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800914e:	4b54      	ldr	r3, [pc, #336]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d115      	bne.n	8009186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e09a      	b.n	8009294 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d107      	bne.n	8009176 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009166:	4b4e      	ldr	r3, [pc, #312]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0302 	and.w	r3, r3, #2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d109      	bne.n	8009186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e08e      	b.n	8009294 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009176:	4b4a      	ldr	r3, [pc, #296]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e086      	b.n	8009294 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009186:	4b46      	ldr	r3, [pc, #280]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f023 0203 	bic.w	r2, r3, #3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	4943      	ldr	r1, [pc, #268]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009194:	4313      	orrs	r3, r2
 8009196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009198:	f7fb fdf4 	bl	8004d84 <HAL_GetTick>
 800919c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800919e:	e00a      	b.n	80091b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091a0:	f7fb fdf0 	bl	8004d84 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d901      	bls.n	80091b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e06e      	b.n	8009294 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091b6:	4b3a      	ldr	r3, [pc, #232]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f003 020c 	and.w	r2, r3, #12
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d1eb      	bne.n	80091a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d010      	beq.n	80091f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	4b31      	ldr	r3, [pc, #196]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d208      	bcs.n	80091f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e4:	4b2e      	ldr	r3, [pc, #184]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	492b      	ldr	r1, [pc, #172]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091f6:	4b29      	ldr	r3, [pc, #164]	; (800929c <HAL_RCC_ClockConfig+0x1ec>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d210      	bcs.n	8009226 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009204:	4b25      	ldr	r3, [pc, #148]	; (800929c <HAL_RCC_ClockConfig+0x1ec>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f023 0207 	bic.w	r2, r3, #7
 800920c:	4923      	ldr	r1, [pc, #140]	; (800929c <HAL_RCC_ClockConfig+0x1ec>)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	4313      	orrs	r3, r2
 8009212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009214:	4b21      	ldr	r3, [pc, #132]	; (800929c <HAL_RCC_ClockConfig+0x1ec>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d001      	beq.n	8009226 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e036      	b.n	8009294 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 0304 	and.w	r3, r3, #4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d008      	beq.n	8009244 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009232:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	4918      	ldr	r1, [pc, #96]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009240:	4313      	orrs	r3, r2
 8009242:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d009      	beq.n	8009264 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009250:	4b13      	ldr	r3, [pc, #76]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4910      	ldr	r1, [pc, #64]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 8009260:	4313      	orrs	r3, r2
 8009262:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009264:	f000 f824 	bl	80092b0 <HAL_RCC_GetSysClockFreq>
 8009268:	4602      	mov	r2, r0
 800926a:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <HAL_RCC_ClockConfig+0x1f0>)
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	091b      	lsrs	r3, r3, #4
 8009270:	f003 030f 	and.w	r3, r3, #15
 8009274:	490b      	ldr	r1, [pc, #44]	; (80092a4 <HAL_RCC_ClockConfig+0x1f4>)
 8009276:	5ccb      	ldrb	r3, [r1, r3]
 8009278:	f003 031f 	and.w	r3, r3, #31
 800927c:	fa22 f303 	lsr.w	r3, r2, r3
 8009280:	4a09      	ldr	r2, [pc, #36]	; (80092a8 <HAL_RCC_ClockConfig+0x1f8>)
 8009282:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009284:	4b09      	ldr	r3, [pc, #36]	; (80092ac <HAL_RCC_ClockConfig+0x1fc>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f7fb fd2b 	bl	8004ce4 <HAL_InitTick>
 800928e:	4603      	mov	r3, r0
 8009290:	72fb      	strb	r3, [r7, #11]

  return status;
 8009292:	7afb      	ldrb	r3, [r7, #11]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	40022000 	.word	0x40022000
 80092a0:	40021000 	.word	0x40021000
 80092a4:	08010864 	.word	0x08010864
 80092a8:	20000004 	.word	0x20000004
 80092ac:	20000008 	.word	0x20000008

080092b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b089      	sub	sp, #36	; 0x24
 80092b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	2300      	movs	r3, #0
 80092bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092be:	4b3e      	ldr	r3, [pc, #248]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 030c 	and.w	r3, r3, #12
 80092c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80092c8:	4b3b      	ldr	r3, [pc, #236]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f003 0303 	and.w	r3, r3, #3
 80092d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d005      	beq.n	80092e4 <HAL_RCC_GetSysClockFreq+0x34>
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b0c      	cmp	r3, #12
 80092dc:	d121      	bne.n	8009322 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d11e      	bne.n	8009322 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80092e4:	4b34      	ldr	r3, [pc, #208]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0308 	and.w	r3, r3, #8
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d107      	bne.n	8009300 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80092f0:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80092f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092f6:	0a1b      	lsrs	r3, r3, #8
 80092f8:	f003 030f 	and.w	r3, r3, #15
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	e005      	b.n	800930c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009300:	4b2d      	ldr	r3, [pc, #180]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	091b      	lsrs	r3, r3, #4
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800930c:	4a2b      	ldr	r2, [pc, #172]	; (80093bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009314:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10d      	bne.n	8009338 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009320:	e00a      	b.n	8009338 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b04      	cmp	r3, #4
 8009326:	d102      	bne.n	800932e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009328:	4b25      	ldr	r3, [pc, #148]	; (80093c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	e004      	b.n	8009338 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b08      	cmp	r3, #8
 8009332:	d101      	bne.n	8009338 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009334:	4b23      	ldr	r3, [pc, #140]	; (80093c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8009336:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b0c      	cmp	r3, #12
 800933c:	d134      	bne.n	80093a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800933e:	4b1e      	ldr	r3, [pc, #120]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d003      	beq.n	8009356 <HAL_RCC_GetSysClockFreq+0xa6>
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b03      	cmp	r3, #3
 8009352:	d003      	beq.n	800935c <HAL_RCC_GetSysClockFreq+0xac>
 8009354:	e005      	b.n	8009362 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009356:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8009358:	617b      	str	r3, [r7, #20]
      break;
 800935a:	e005      	b.n	8009368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800935c:	4b19      	ldr	r3, [pc, #100]	; (80093c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800935e:	617b      	str	r3, [r7, #20]
      break;
 8009360:	e002      	b.n	8009368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	617b      	str	r3, [r7, #20]
      break;
 8009366:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009368:	4b13      	ldr	r3, [pc, #76]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	091b      	lsrs	r3, r3, #4
 800936e:	f003 0307 	and.w	r3, r3, #7
 8009372:	3301      	adds	r3, #1
 8009374:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	0a1b      	lsrs	r3, r3, #8
 800937c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	fb03 f202 	mul.w	r2, r3, r2
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	fbb2 f3f3 	udiv	r3, r2, r3
 800938c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800938e:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	0e5b      	lsrs	r3, r3, #25
 8009394:	f003 0303 	and.w	r3, r3, #3
 8009398:	3301      	adds	r3, #1
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80093a8:	69bb      	ldr	r3, [r7, #24]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3724      	adds	r7, #36	; 0x24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	40021000 	.word	0x40021000
 80093bc:	0801087c 	.word	0x0801087c
 80093c0:	00f42400 	.word	0x00f42400
 80093c4:	007a1200 	.word	0x007a1200

080093c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093cc:	4b03      	ldr	r3, [pc, #12]	; (80093dc <HAL_RCC_GetHCLKFreq+0x14>)
 80093ce:	681b      	ldr	r3, [r3, #0]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20000004 	.word	0x20000004

080093e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80093e4:	f7ff fff0 	bl	80093c8 <HAL_RCC_GetHCLKFreq>
 80093e8:	4602      	mov	r2, r0
 80093ea:	4b06      	ldr	r3, [pc, #24]	; (8009404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	0a1b      	lsrs	r3, r3, #8
 80093f0:	f003 0307 	and.w	r3, r3, #7
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80093f6:	5ccb      	ldrb	r3, [r1, r3]
 80093f8:	f003 031f 	and.w	r3, r3, #31
 80093fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009400:	4618      	mov	r0, r3
 8009402:	bd80      	pop	{r7, pc}
 8009404:	40021000 	.word	0x40021000
 8009408:	08010874 	.word	0x08010874

0800940c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009410:	f7ff ffda 	bl	80093c8 <HAL_RCC_GetHCLKFreq>
 8009414:	4602      	mov	r2, r0
 8009416:	4b06      	ldr	r3, [pc, #24]	; (8009430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	0adb      	lsrs	r3, r3, #11
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	4904      	ldr	r1, [pc, #16]	; (8009434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009422:	5ccb      	ldrb	r3, [r1, r3]
 8009424:	f003 031f 	and.w	r3, r3, #31
 8009428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800942c:	4618      	mov	r0, r3
 800942e:	bd80      	pop	{r7, pc}
 8009430:	40021000 	.word	0x40021000
 8009434:	08010874 	.word	0x08010874

08009438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009440:	2300      	movs	r3, #0
 8009442:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009444:	4b2a      	ldr	r3, [pc, #168]	; (80094f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d003      	beq.n	8009458 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009450:	f7ff f9b6 	bl	80087c0 <HAL_PWREx_GetVoltageRange>
 8009454:	6178      	str	r0, [r7, #20]
 8009456:	e014      	b.n	8009482 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009458:	4b25      	ldr	r3, [pc, #148]	; (80094f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800945a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945c:	4a24      	ldr	r2, [pc, #144]	; (80094f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800945e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009462:	6593      	str	r3, [r2, #88]	; 0x58
 8009464:	4b22      	ldr	r3, [pc, #136]	; (80094f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800946c:	60fb      	str	r3, [r7, #12]
 800946e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009470:	f7ff f9a6 	bl	80087c0 <HAL_PWREx_GetVoltageRange>
 8009474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009476:	4b1e      	ldr	r3, [pc, #120]	; (80094f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800947a:	4a1d      	ldr	r2, [pc, #116]	; (80094f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800947c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009480:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009488:	d10b      	bne.n	80094a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b80      	cmp	r3, #128	; 0x80
 800948e:	d919      	bls.n	80094c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2ba0      	cmp	r3, #160	; 0xa0
 8009494:	d902      	bls.n	800949c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009496:	2302      	movs	r3, #2
 8009498:	613b      	str	r3, [r7, #16]
 800949a:	e013      	b.n	80094c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800949c:	2301      	movs	r3, #1
 800949e:	613b      	str	r3, [r7, #16]
 80094a0:	e010      	b.n	80094c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b80      	cmp	r3, #128	; 0x80
 80094a6:	d902      	bls.n	80094ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80094a8:	2303      	movs	r3, #3
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	e00a      	b.n	80094c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b80      	cmp	r3, #128	; 0x80
 80094b2:	d102      	bne.n	80094ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80094b4:	2302      	movs	r3, #2
 80094b6:	613b      	str	r3, [r7, #16]
 80094b8:	e004      	b.n	80094c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b70      	cmp	r3, #112	; 0x70
 80094be:	d101      	bne.n	80094c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80094c0:	2301      	movs	r3, #1
 80094c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80094c4:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f023 0207 	bic.w	r2, r3, #7
 80094cc:	4909      	ldr	r1, [pc, #36]	; (80094f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80094d4:	4b07      	ldr	r3, [pc, #28]	; (80094f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d001      	beq.n	80094e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	40021000 	.word	0x40021000
 80094f4:	40022000 	.word	0x40022000

080094f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b086      	sub	sp, #24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009500:	2300      	movs	r3, #0
 8009502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009504:	2300      	movs	r3, #0
 8009506:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009510:	2b00      	cmp	r3, #0
 8009512:	d031      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009518:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800951c:	d01a      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800951e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009522:	d814      	bhi.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d009      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009528:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800952c:	d10f      	bne.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800952e:	4b5d      	ldr	r3, [pc, #372]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	4a5c      	ldr	r2, [pc, #368]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009538:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800953a:	e00c      	b.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	2100      	movs	r1, #0
 8009542:	4618      	mov	r0, r3
 8009544:	f000 f9f0 	bl	8009928 <RCCEx_PLLSAI1_Config>
 8009548:	4603      	mov	r3, r0
 800954a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800954c:	e003      	b.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	74fb      	strb	r3, [r7, #19]
      break;
 8009552:	e000      	b.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8009554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009556:	7cfb      	ldrb	r3, [r7, #19]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10b      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800955c:	4b51      	ldr	r3, [pc, #324]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800955e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009562:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956a:	494e      	ldr	r1, [pc, #312]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800956c:	4313      	orrs	r3, r2
 800956e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009572:	e001      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009574:	7cfb      	ldrb	r3, [r7, #19]
 8009576:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 809e 	beq.w	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009586:	2300      	movs	r3, #0
 8009588:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800958a:	4b46      	ldr	r3, [pc, #280]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800958c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800959a:	2300      	movs	r3, #0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00d      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095a0:	4b40      	ldr	r3, [pc, #256]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80095a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a4:	4a3f      	ldr	r2, [pc, #252]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80095a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095aa:	6593      	str	r3, [r2, #88]	; 0x58
 80095ac:	4b3d      	ldr	r3, [pc, #244]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80095ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095b4:	60bb      	str	r3, [r7, #8]
 80095b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095b8:	2301      	movs	r3, #1
 80095ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095bc:	4b3a      	ldr	r3, [pc, #232]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a39      	ldr	r2, [pc, #228]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80095c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095c8:	f7fb fbdc 	bl	8004d84 <HAL_GetTick>
 80095cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095ce:	e009      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095d0:	f7fb fbd8 	bl	8004d84 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d902      	bls.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	74fb      	strb	r3, [r7, #19]
        break;
 80095e2:	e005      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095e4:	4b30      	ldr	r3, [pc, #192]	; (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0ef      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80095f0:	7cfb      	ldrb	r3, [r7, #19]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d15a      	bne.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095f6:	4b2b      	ldr	r3, [pc, #172]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80095f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009600:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01e      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	429a      	cmp	r2, r3
 8009610:	d019      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009612:	4b24      	ldr	r3, [pc, #144]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800961c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800961e:	4b21      	ldr	r3, [pc, #132]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009624:	4a1f      	ldr	r2, [pc, #124]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800962a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800962e:	4b1d      	ldr	r3, [pc, #116]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009634:	4a1b      	ldr	r2, [pc, #108]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800963a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800963e:	4a19      	ldr	r2, [pc, #100]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d016      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009650:	f7fb fb98 	bl	8004d84 <HAL_GetTick>
 8009654:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009656:	e00b      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009658:	f7fb fb94 	bl	8004d84 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	f241 3288 	movw	r2, #5000	; 0x1388
 8009666:	4293      	cmp	r3, r2
 8009668:	d902      	bls.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800966a:	2303      	movs	r3, #3
 800966c:	74fb      	strb	r3, [r7, #19]
            break;
 800966e:	e006      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009670:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009676:	f003 0302 	and.w	r3, r3, #2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0ec      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800967e:	7cfb      	ldrb	r3, [r7, #19]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009684:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800968a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009692:	4904      	ldr	r1, [pc, #16]	; (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800969a:	e009      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800969c:	7cfb      	ldrb	r3, [r7, #19]
 800969e:	74bb      	strb	r3, [r7, #18]
 80096a0:	e006      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80096a2:	bf00      	nop
 80096a4:	40021000 	.word	0x40021000
 80096a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ac:	7cfb      	ldrb	r3, [r7, #19]
 80096ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096b0:	7c7b      	ldrb	r3, [r7, #17]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d105      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096b6:	4b9b      	ldr	r3, [pc, #620]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80096b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ba:	4a9a      	ldr	r2, [pc, #616]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80096bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096ce:	4b95      	ldr	r3, [pc, #596]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d4:	f023 0203 	bic.w	r2, r3, #3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a1b      	ldr	r3, [r3, #32]
 80096dc:	4991      	ldr	r1, [pc, #580]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00a      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096f0:	4b8c      	ldr	r3, [pc, #560]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80096f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f6:	f023 020c 	bic.w	r2, r3, #12
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	4989      	ldr	r1, [pc, #548]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009700:	4313      	orrs	r3, r2
 8009702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009712:	4b84      	ldr	r3, [pc, #528]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009720:	4980      	ldr	r1, [pc, #512]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009722:	4313      	orrs	r3, r2
 8009724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00a      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009734:	4b7b      	ldr	r3, [pc, #492]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009742:	4978      	ldr	r1, [pc, #480]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009756:	4b73      	ldr	r3, [pc, #460]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009764:	496f      	ldr	r1, [pc, #444]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009766:	4313      	orrs	r3, r2
 8009768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00a      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009778:	4b6a      	ldr	r3, [pc, #424]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800977a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800977e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	4967      	ldr	r1, [pc, #412]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009788:	4313      	orrs	r3, r2
 800978a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800979a:	4b62      	ldr	r3, [pc, #392]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800979c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	495e      	ldr	r1, [pc, #376]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097bc:	4b59      	ldr	r3, [pc, #356]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80097be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	4956      	ldr	r1, [pc, #344]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097de:	4b51      	ldr	r3, [pc, #324]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80097e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ec:	494d      	ldr	r1, [pc, #308]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d028      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009800:	4b48      	ldr	r3, [pc, #288]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009806:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800980e:	4945      	ldr	r1, [pc, #276]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009810:	4313      	orrs	r3, r2
 8009812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800981a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800981e:	d106      	bne.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009820:	4b40      	ldr	r3, [pc, #256]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	4a3f      	ldr	r2, [pc, #252]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009826:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800982a:	60d3      	str	r3, [r2, #12]
 800982c:	e011      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009836:	d10c      	bne.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3304      	adds	r3, #4
 800983c:	2101      	movs	r1, #1
 800983e:	4618      	mov	r0, r3
 8009840:	f000 f872 	bl	8009928 <RCCEx_PLLSAI1_Config>
 8009844:	4603      	mov	r3, r0
 8009846:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009848:	7cfb      	ldrb	r3, [r7, #19]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800984e:	7cfb      	ldrb	r3, [r7, #19]
 8009850:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d028      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800985e:	4b31      	ldr	r3, [pc, #196]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009864:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800986c:	492d      	ldr	r1, [pc, #180]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800986e:	4313      	orrs	r3, r2
 8009870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800987c:	d106      	bne.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800987e:	4b29      	ldr	r3, [pc, #164]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	4a28      	ldr	r2, [pc, #160]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009888:	60d3      	str	r3, [r2, #12]
 800988a:	e011      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009894:	d10c      	bne.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	3304      	adds	r3, #4
 800989a:	2101      	movs	r1, #1
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f843 	bl	8009928 <RCCEx_PLLSAI1_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80098a6:	7cfb      	ldrb	r3, [r7, #19]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80098ac:	7cfb      	ldrb	r3, [r7, #19]
 80098ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d01c      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098bc:	4b19      	ldr	r3, [pc, #100]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80098be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ca:	4916      	ldr	r1, [pc, #88]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098da:	d10c      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3304      	adds	r3, #4
 80098e0:	2102      	movs	r1, #2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f820 	bl	8009928 <RCCEx_PLLSAI1_Config>
 80098e8:	4603      	mov	r3, r0
 80098ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80098ec:	7cfb      	ldrb	r3, [r7, #19]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80098f2:	7cfb      	ldrb	r3, [r7, #19]
 80098f4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00a      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009902:	4b08      	ldr	r3, [pc, #32]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009908:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009910:	4904      	ldr	r1, [pc, #16]	; (8009924 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8009912:	4313      	orrs	r3, r2
 8009914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009918:	7cbb      	ldrb	r3, [r7, #18]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	40021000 	.word	0x40021000

08009928 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009936:	4b74      	ldr	r3, [pc, #464]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d018      	beq.n	8009974 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009942:	4b71      	ldr	r3, [pc, #452]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0203 	and.w	r2, r3, #3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d10d      	bne.n	800996e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
       ||
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800995a:	4b6b      	ldr	r3, [pc, #428]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	091b      	lsrs	r3, r3, #4
 8009960:	f003 0307 	and.w	r3, r3, #7
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
       ||
 800996a:	429a      	cmp	r2, r3
 800996c:	d047      	beq.n	80099fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	73fb      	strb	r3, [r7, #15]
 8009972:	e044      	b.n	80099fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b03      	cmp	r3, #3
 800997a:	d018      	beq.n	80099ae <RCCEx_PLLSAI1_Config+0x86>
 800997c:	2b03      	cmp	r3, #3
 800997e:	d825      	bhi.n	80099cc <RCCEx_PLLSAI1_Config+0xa4>
 8009980:	2b01      	cmp	r3, #1
 8009982:	d002      	beq.n	800998a <RCCEx_PLLSAI1_Config+0x62>
 8009984:	2b02      	cmp	r3, #2
 8009986:	d009      	beq.n	800999c <RCCEx_PLLSAI1_Config+0x74>
 8009988:	e020      	b.n	80099cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800998a:	4b5f      	ldr	r3, [pc, #380]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0302 	and.w	r3, r3, #2
 8009992:	2b00      	cmp	r3, #0
 8009994:	d11d      	bne.n	80099d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800999a:	e01a      	b.n	80099d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800999c:	4b5a      	ldr	r3, [pc, #360]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d116      	bne.n	80099d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099ac:	e013      	b.n	80099d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80099ae:	4b56      	ldr	r3, [pc, #344]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10f      	bne.n	80099da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80099ba:	4b53      	ldr	r3, [pc, #332]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099ca:	e006      	b.n	80099da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
      break;
 80099d0:	e004      	b.n	80099dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80099d2:	bf00      	nop
 80099d4:	e002      	b.n	80099dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80099d6:	bf00      	nop
 80099d8:	e000      	b.n	80099dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80099da:	bf00      	nop
    }

    if(status == HAL_OK)
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10d      	bne.n	80099fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80099e2:	4b49      	ldr	r3, [pc, #292]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6819      	ldr	r1, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	011b      	lsls	r3, r3, #4
 80099f6:	430b      	orrs	r3, r1
 80099f8:	4943      	ldr	r1, [pc, #268]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d17c      	bne.n	8009afe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009a04:	4b40      	ldr	r3, [pc, #256]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a3f      	ldr	r2, [pc, #252]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a10:	f7fb f9b8 	bl	8004d84 <HAL_GetTick>
 8009a14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009a16:	e009      	b.n	8009a2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a18:	f7fb f9b4 	bl	8004d84 <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d902      	bls.n	8009a2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009a26:	2303      	movs	r3, #3
 8009a28:	73fb      	strb	r3, [r7, #15]
        break;
 8009a2a:	e005      	b.n	8009a38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009a2c:	4b36      	ldr	r3, [pc, #216]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1ef      	bne.n	8009a18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d15f      	bne.n	8009afe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d110      	bne.n	8009a66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009a44:	4b30      	ldr	r3, [pc, #192]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6892      	ldr	r2, [r2, #8]
 8009a54:	0211      	lsls	r1, r2, #8
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	68d2      	ldr	r2, [r2, #12]
 8009a5a:	06d2      	lsls	r2, r2, #27
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	492a      	ldr	r1, [pc, #168]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a60:	4313      	orrs	r3, r2
 8009a62:	610b      	str	r3, [r1, #16]
 8009a64:	e027      	b.n	8009ab6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d112      	bne.n	8009a92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009a6c:	4b26      	ldr	r3, [pc, #152]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009a74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6892      	ldr	r2, [r2, #8]
 8009a7c:	0211      	lsls	r1, r2, #8
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6912      	ldr	r2, [r2, #16]
 8009a82:	0852      	lsrs	r2, r2, #1
 8009a84:	3a01      	subs	r2, #1
 8009a86:	0552      	lsls	r2, r2, #21
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	491f      	ldr	r1, [pc, #124]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	610b      	str	r3, [r1, #16]
 8009a90:	e011      	b.n	8009ab6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009a92:	4b1d      	ldr	r3, [pc, #116]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009a9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	6892      	ldr	r2, [r2, #8]
 8009aa2:	0211      	lsls	r1, r2, #8
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6952      	ldr	r2, [r2, #20]
 8009aa8:	0852      	lsrs	r2, r2, #1
 8009aaa:	3a01      	subs	r2, #1
 8009aac:	0652      	lsls	r2, r2, #25
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	4915      	ldr	r1, [pc, #84]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009ab6:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a13      	ldr	r2, [pc, #76]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009abc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ac0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ac2:	f7fb f95f 	bl	8004d84 <HAL_GetTick>
 8009ac6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009ac8:	e009      	b.n	8009ade <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009aca:	f7fb f95b 	bl	8004d84 <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d902      	bls.n	8009ade <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	73fb      	strb	r3, [r7, #15]
          break;
 8009adc:	e005      	b.n	8009aea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009ade:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0ef      	beq.n	8009aca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d106      	bne.n	8009afe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009af0:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009af2:	691a      	ldr	r2, [r3, #16]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	4903      	ldr	r1, [pc, #12]	; (8009b08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	40021000 	.word	0x40021000

08009b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e049      	b.n	8009bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7fa f994 	bl	8003e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	f000 fa88 	bl	800a060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d101      	bne.n	8009bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e049      	b.n	8009c60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d106      	bne.n	8009be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f841 	bl	8009c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2202      	movs	r2, #2
 8009bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	f000 fa31 	bl	800a060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2201      	movs	r2, #1
 8009c52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d109      	bne.n	8009ca0 <HAL_TIM_PWM_Start+0x24>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	bf14      	ite	ne
 8009c98:	2301      	movne	r3, #1
 8009c9a:	2300      	moveq	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	e03c      	b.n	8009d1a <HAL_TIM_PWM_Start+0x9e>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d109      	bne.n	8009cba <HAL_TIM_PWM_Start+0x3e>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	bf14      	ite	ne
 8009cb2:	2301      	movne	r3, #1
 8009cb4:	2300      	moveq	r3, #0
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	e02f      	b.n	8009d1a <HAL_TIM_PWM_Start+0x9e>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b08      	cmp	r3, #8
 8009cbe:	d109      	bne.n	8009cd4 <HAL_TIM_PWM_Start+0x58>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	bf14      	ite	ne
 8009ccc:	2301      	movne	r3, #1
 8009cce:	2300      	moveq	r3, #0
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	e022      	b.n	8009d1a <HAL_TIM_PWM_Start+0x9e>
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b0c      	cmp	r3, #12
 8009cd8:	d109      	bne.n	8009cee <HAL_TIM_PWM_Start+0x72>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	bf14      	ite	ne
 8009ce6:	2301      	movne	r3, #1
 8009ce8:	2300      	moveq	r3, #0
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	e015      	b.n	8009d1a <HAL_TIM_PWM_Start+0x9e>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b10      	cmp	r3, #16
 8009cf2:	d109      	bne.n	8009d08 <HAL_TIM_PWM_Start+0x8c>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	bf14      	ite	ne
 8009d00:	2301      	movne	r3, #1
 8009d02:	2300      	moveq	r3, #0
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	e008      	b.n	8009d1a <HAL_TIM_PWM_Start+0x9e>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	bf14      	ite	ne
 8009d14:	2301      	movne	r3, #1
 8009d16:	2300      	moveq	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e07e      	b.n	8009e20 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <HAL_TIM_PWM_Start+0xb6>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d30:	e023      	b.n	8009d7a <HAL_TIM_PWM_Start+0xfe>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d104      	bne.n	8009d42 <HAL_TIM_PWM_Start+0xc6>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d40:	e01b      	b.n	8009d7a <HAL_TIM_PWM_Start+0xfe>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	2b08      	cmp	r3, #8
 8009d46:	d104      	bne.n	8009d52 <HAL_TIM_PWM_Start+0xd6>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d50:	e013      	b.n	8009d7a <HAL_TIM_PWM_Start+0xfe>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b0c      	cmp	r3, #12
 8009d56:	d104      	bne.n	8009d62 <HAL_TIM_PWM_Start+0xe6>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d60:	e00b      	b.n	8009d7a <HAL_TIM_PWM_Start+0xfe>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b10      	cmp	r3, #16
 8009d66:	d104      	bne.n	8009d72 <HAL_TIM_PWM_Start+0xf6>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d70:	e003      	b.n	8009d7a <HAL_TIM_PWM_Start+0xfe>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2202      	movs	r2, #2
 8009d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 fc4e 	bl	800a624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a26      	ldr	r2, [pc, #152]	; (8009e28 <HAL_TIM_PWM_Start+0x1ac>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d009      	beq.n	8009da6 <HAL_TIM_PWM_Start+0x12a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a25      	ldr	r2, [pc, #148]	; (8009e2c <HAL_TIM_PWM_Start+0x1b0>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d004      	beq.n	8009da6 <HAL_TIM_PWM_Start+0x12a>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a23      	ldr	r2, [pc, #140]	; (8009e30 <HAL_TIM_PWM_Start+0x1b4>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d101      	bne.n	8009daa <HAL_TIM_PWM_Start+0x12e>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e000      	b.n	8009dac <HAL_TIM_PWM_Start+0x130>
 8009daa:	2300      	movs	r3, #0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d007      	beq.n	8009dc0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009dbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a18      	ldr	r2, [pc, #96]	; (8009e28 <HAL_TIM_PWM_Start+0x1ac>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d009      	beq.n	8009dde <HAL_TIM_PWM_Start+0x162>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dd2:	d004      	beq.n	8009dde <HAL_TIM_PWM_Start+0x162>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a14      	ldr	r2, [pc, #80]	; (8009e2c <HAL_TIM_PWM_Start+0x1b0>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d115      	bne.n	8009e0a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	4b13      	ldr	r3, [pc, #76]	; (8009e34 <HAL_TIM_PWM_Start+0x1b8>)
 8009de6:	4013      	ands	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b06      	cmp	r3, #6
 8009dee:	d015      	beq.n	8009e1c <HAL_TIM_PWM_Start+0x1a0>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df6:	d011      	beq.n	8009e1c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f042 0201 	orr.w	r2, r2, #1
 8009e06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e08:	e008      	b.n	8009e1c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f042 0201 	orr.w	r2, r2, #1
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	e000      	b.n	8009e1e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	40012c00 	.word	0x40012c00
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40014400 	.word	0x40014400
 8009e34:	00010007 	.word	0x00010007

08009e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d101      	bne.n	8009e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e52:	2302      	movs	r3, #2
 8009e54:	e0ff      	b.n	800a056 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b14      	cmp	r3, #20
 8009e62:	f200 80f0 	bhi.w	800a046 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009e66:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009ec1 	.word	0x08009ec1
 8009e70:	0800a047 	.word	0x0800a047
 8009e74:	0800a047 	.word	0x0800a047
 8009e78:	0800a047 	.word	0x0800a047
 8009e7c:	08009f01 	.word	0x08009f01
 8009e80:	0800a047 	.word	0x0800a047
 8009e84:	0800a047 	.word	0x0800a047
 8009e88:	0800a047 	.word	0x0800a047
 8009e8c:	08009f43 	.word	0x08009f43
 8009e90:	0800a047 	.word	0x0800a047
 8009e94:	0800a047 	.word	0x0800a047
 8009e98:	0800a047 	.word	0x0800a047
 8009e9c:	08009f83 	.word	0x08009f83
 8009ea0:	0800a047 	.word	0x0800a047
 8009ea4:	0800a047 	.word	0x0800a047
 8009ea8:	0800a047 	.word	0x0800a047
 8009eac:	08009fc5 	.word	0x08009fc5
 8009eb0:	0800a047 	.word	0x0800a047
 8009eb4:	0800a047 	.word	0x0800a047
 8009eb8:	0800a047 	.word	0x0800a047
 8009ebc:	0800a005 	.word	0x0800a005
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68b9      	ldr	r1, [r7, #8]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 f92e 	bl	800a128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	699a      	ldr	r2, [r3, #24]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f042 0208 	orr.w	r2, r2, #8
 8009eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	699a      	ldr	r2, [r3, #24]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0204 	bic.w	r2, r2, #4
 8009eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6999      	ldr	r1, [r3, #24]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	691a      	ldr	r2, [r3, #16]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	619a      	str	r2, [r3, #24]
      break;
 8009efe:	e0a5      	b.n	800a04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68b9      	ldr	r1, [r7, #8]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 f98a 	bl	800a220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	699a      	ldr	r2, [r3, #24]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	699a      	ldr	r2, [r3, #24]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6999      	ldr	r1, [r3, #24]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	021a      	lsls	r2, r3, #8
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	619a      	str	r2, [r3, #24]
      break;
 8009f40:	e084      	b.n	800a04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68b9      	ldr	r1, [r7, #8]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 f9e3 	bl	800a314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	69da      	ldr	r2, [r3, #28]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f042 0208 	orr.w	r2, r2, #8
 8009f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	69da      	ldr	r2, [r3, #28]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0204 	bic.w	r2, r2, #4
 8009f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	69d9      	ldr	r1, [r3, #28]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	691a      	ldr	r2, [r3, #16]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	61da      	str	r2, [r3, #28]
      break;
 8009f80:	e064      	b.n	800a04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68b9      	ldr	r1, [r7, #8]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 fa3b 	bl	800a404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69da      	ldr	r2, [r3, #28]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69da      	ldr	r2, [r3, #28]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	69d9      	ldr	r1, [r3, #28]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	021a      	lsls	r2, r3, #8
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	61da      	str	r2, [r3, #28]
      break;
 8009fc2:	e043      	b.n	800a04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68b9      	ldr	r1, [r7, #8]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 fa78 	bl	800a4c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f042 0208 	orr.w	r2, r2, #8
 8009fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0204 	bic.w	r2, r2, #4
 8009fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	691a      	ldr	r2, [r3, #16]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	430a      	orrs	r2, r1
 800a000:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a002:	e023      	b.n	800a04c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68b9      	ldr	r1, [r7, #8]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 fab0 	bl	800a570 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a01e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a02e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	021a      	lsls	r2, r3, #8
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	430a      	orrs	r2, r1
 800a042:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a044:	e002      	b.n	800a04c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	75fb      	strb	r3, [r7, #23]
      break;
 800a04a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop

0800a060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a2a      	ldr	r2, [pc, #168]	; (800a11c <TIM_Base_SetConfig+0xbc>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d003      	beq.n	800a080 <TIM_Base_SetConfig+0x20>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a07e:	d108      	bne.n	800a092 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a21      	ldr	r2, [pc, #132]	; (800a11c <TIM_Base_SetConfig+0xbc>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d00b      	beq.n	800a0b2 <TIM_Base_SetConfig+0x52>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a0:	d007      	beq.n	800a0b2 <TIM_Base_SetConfig+0x52>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a1e      	ldr	r2, [pc, #120]	; (800a120 <TIM_Base_SetConfig+0xc0>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d003      	beq.n	800a0b2 <TIM_Base_SetConfig+0x52>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a1d      	ldr	r2, [pc, #116]	; (800a124 <TIM_Base_SetConfig+0xc4>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d108      	bne.n	800a0c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a0c      	ldr	r2, [pc, #48]	; (800a11c <TIM_Base_SetConfig+0xbc>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d007      	beq.n	800a100 <TIM_Base_SetConfig+0xa0>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a0b      	ldr	r2, [pc, #44]	; (800a120 <TIM_Base_SetConfig+0xc0>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d003      	beq.n	800a100 <TIM_Base_SetConfig+0xa0>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a0a      	ldr	r2, [pc, #40]	; (800a124 <TIM_Base_SetConfig+0xc4>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d103      	bne.n	800a108 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	615a      	str	r2, [r3, #20]
}
 800a10e:	bf00      	nop
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	40012c00 	.word	0x40012c00
 800a120:	40014000 	.word	0x40014000
 800a124:	40014400 	.word	0x40014400

0800a128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a128:	b480      	push	{r7}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	f023 0201 	bic.w	r2, r3, #1
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a15a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f023 0302 	bic.w	r3, r3, #2
 800a174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a24      	ldr	r2, [pc, #144]	; (800a214 <TIM_OC1_SetConfig+0xec>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d007      	beq.n	800a198 <TIM_OC1_SetConfig+0x70>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a23      	ldr	r2, [pc, #140]	; (800a218 <TIM_OC1_SetConfig+0xf0>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d003      	beq.n	800a198 <TIM_OC1_SetConfig+0x70>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a22      	ldr	r2, [pc, #136]	; (800a21c <TIM_OC1_SetConfig+0xf4>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d10c      	bne.n	800a1b2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f023 0308 	bic.w	r3, r3, #8
 800a19e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f023 0304 	bic.w	r3, r3, #4
 800a1b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a17      	ldr	r2, [pc, #92]	; (800a214 <TIM_OC1_SetConfig+0xec>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d007      	beq.n	800a1ca <TIM_OC1_SetConfig+0xa2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a16      	ldr	r2, [pc, #88]	; (800a218 <TIM_OC1_SetConfig+0xf0>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d003      	beq.n	800a1ca <TIM_OC1_SetConfig+0xa2>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a15      	ldr	r2, [pc, #84]	; (800a21c <TIM_OC1_SetConfig+0xf4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d111      	bne.n	800a1ee <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	621a      	str	r2, [r3, #32]
}
 800a208:	bf00      	nop
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	40012c00 	.word	0x40012c00
 800a218:	40014000 	.word	0x40014000
 800a21c:	40014400 	.word	0x40014400

0800a220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	f023 0210 	bic.w	r2, r3, #16
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a24e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	021b      	lsls	r3, r3, #8
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f023 0320 	bic.w	r3, r3, #32
 800a26e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4313      	orrs	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a22      	ldr	r2, [pc, #136]	; (800a308 <TIM_OC2_SetConfig+0xe8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d10d      	bne.n	800a2a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a28a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	4313      	orrs	r3, r2
 800a296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a29e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a19      	ldr	r2, [pc, #100]	; (800a308 <TIM_OC2_SetConfig+0xe8>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d007      	beq.n	800a2b8 <TIM_OC2_SetConfig+0x98>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a18      	ldr	r2, [pc, #96]	; (800a30c <TIM_OC2_SetConfig+0xec>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d003      	beq.n	800a2b8 <TIM_OC2_SetConfig+0x98>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a17      	ldr	r2, [pc, #92]	; (800a310 <TIM_OC2_SetConfig+0xf0>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d113      	bne.n	800a2e0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	621a      	str	r2, [r3, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	40012c00 	.word	0x40012c00
 800a30c:	40014000 	.word	0x40014000
 800a310:	40014400 	.word	0x40014400

0800a314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f023 0303 	bic.w	r3, r3, #3
 800a34e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	697a      	ldr	r2, [r7, #20]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a21      	ldr	r2, [pc, #132]	; (800a3f8 <TIM_OC3_SetConfig+0xe4>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d10d      	bne.n	800a392 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a37c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	021b      	lsls	r3, r3, #8
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	4313      	orrs	r3, r2
 800a388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4a18      	ldr	r2, [pc, #96]	; (800a3f8 <TIM_OC3_SetConfig+0xe4>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d007      	beq.n	800a3aa <TIM_OC3_SetConfig+0x96>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a17      	ldr	r2, [pc, #92]	; (800a3fc <TIM_OC3_SetConfig+0xe8>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d003      	beq.n	800a3aa <TIM_OC3_SetConfig+0x96>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a16      	ldr	r2, [pc, #88]	; (800a400 <TIM_OC3_SetConfig+0xec>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d113      	bne.n	800a3d2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	011b      	lsls	r3, r3, #4
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	699b      	ldr	r3, [r3, #24]
 800a3ca:	011b      	lsls	r3, r3, #4
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68fa      	ldr	r2, [r7, #12]
 800a3dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	621a      	str	r2, [r3, #32]
}
 800a3ec:	bf00      	nop
 800a3ee:	371c      	adds	r7, #28
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	40012c00 	.word	0x40012c00
 800a3fc:	40014000 	.word	0x40014000
 800a400:	40014400 	.word	0x40014400

0800a404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a404:	b480      	push	{r7}
 800a406:	b087      	sub	sp, #28
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a1b      	ldr	r3, [r3, #32]
 800a412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	69db      	ldr	r3, [r3, #28]
 800a42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4313      	orrs	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	031b      	lsls	r3, r3, #12
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a14      	ldr	r2, [pc, #80]	; (800a4b4 <TIM_OC4_SetConfig+0xb0>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d007      	beq.n	800a478 <TIM_OC4_SetConfig+0x74>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a13      	ldr	r2, [pc, #76]	; (800a4b8 <TIM_OC4_SetConfig+0xb4>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d003      	beq.n	800a478 <TIM_OC4_SetConfig+0x74>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a12      	ldr	r2, [pc, #72]	; (800a4bc <TIM_OC4_SetConfig+0xb8>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d109      	bne.n	800a48c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a47e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	019b      	lsls	r3, r3, #6
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	4313      	orrs	r3, r2
 800a48a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	621a      	str	r2, [r3, #32]
}
 800a4a6:	bf00      	nop
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	40012c00 	.word	0x40012c00
 800a4b8:	40014000 	.word	0x40014000
 800a4bc:	40014400 	.word	0x40014400

0800a4c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a504:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	041b      	lsls	r3, r3, #16
 800a50c:	693a      	ldr	r2, [r7, #16]
 800a50e:	4313      	orrs	r3, r2
 800a510:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a13      	ldr	r2, [pc, #76]	; (800a564 <TIM_OC5_SetConfig+0xa4>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d007      	beq.n	800a52a <TIM_OC5_SetConfig+0x6a>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a12      	ldr	r2, [pc, #72]	; (800a568 <TIM_OC5_SetConfig+0xa8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d003      	beq.n	800a52a <TIM_OC5_SetConfig+0x6a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a11      	ldr	r2, [pc, #68]	; (800a56c <TIM_OC5_SetConfig+0xac>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d109      	bne.n	800a53e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a530:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	021b      	lsls	r3, r3, #8
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	621a      	str	r2, [r3, #32]
}
 800a558:	bf00      	nop
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	40012c00 	.word	0x40012c00
 800a568:	40014000 	.word	0x40014000
 800a56c:	40014400 	.word	0x40014400

0800a570 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a59e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	021b      	lsls	r3, r3, #8
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	051b      	lsls	r3, r3, #20
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a14      	ldr	r2, [pc, #80]	; (800a618 <TIM_OC6_SetConfig+0xa8>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d007      	beq.n	800a5dc <TIM_OC6_SetConfig+0x6c>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a13      	ldr	r2, [pc, #76]	; (800a61c <TIM_OC6_SetConfig+0xac>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d003      	beq.n	800a5dc <TIM_OC6_SetConfig+0x6c>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a12      	ldr	r2, [pc, #72]	; (800a620 <TIM_OC6_SetConfig+0xb0>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d109      	bne.n	800a5f0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	695b      	ldr	r3, [r3, #20]
 800a5e8:	029b      	lsls	r3, r3, #10
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	621a      	str	r2, [r3, #32]
}
 800a60a:	bf00      	nop
 800a60c:	371c      	adds	r7, #28
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	40012c00 	.word	0x40012c00
 800a61c:	40014000 	.word	0x40014000
 800a620:	40014400 	.word	0x40014400

0800a624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	f003 031f 	and.w	r3, r3, #31
 800a636:	2201      	movs	r2, #1
 800a638:	fa02 f303 	lsl.w	r3, r2, r3
 800a63c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6a1a      	ldr	r2, [r3, #32]
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	43db      	mvns	r3, r3
 800a646:	401a      	ands	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6a1a      	ldr	r2, [r3, #32]
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	f003 031f 	and.w	r3, r3, #31
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	fa01 f303 	lsl.w	r3, r1, r3
 800a65c:	431a      	orrs	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	621a      	str	r2, [r3, #32]
}
 800a662:	bf00      	nop
 800a664:	371c      	adds	r7, #28
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
	...

0800a670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a688:	2302      	movs	r3, #2
 800a68a:	e060      	b.n	800a74e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	041b      	lsls	r3, r3, #16
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a14      	ldr	r2, [pc, #80]	; (800a75c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d115      	bne.n	800a73c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	051b      	lsls	r3, r3, #20
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	6a1b      	ldr	r3, [r3, #32]
 800a738:	4313      	orrs	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	40012c00 	.word	0x40012c00

0800a760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e040      	b.n	800a7f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a776:	2b00      	cmp	r3, #0
 800a778:	d106      	bne.n	800a788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7f9 fbc4 	bl	8003f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2224      	movs	r2, #36	; 0x24
 800a78c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0201 	bic.w	r2, r2, #1
 800a79c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fc0e 	bl	800afc0 <UART_SetConfig>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d101      	bne.n	800a7ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e022      	b.n	800a7f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d002      	beq.n	800a7bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fe5c 	bl	800b474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689a      	ldr	r2, [r3, #8]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0201 	orr.w	r2, r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fee3 	bl	800b5b8 <UART_CheckIdleState>
 800a7f2:	4603      	mov	r3, r0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08a      	sub	sp, #40	; 0x28
 800a800:	af02      	add	r7, sp, #8
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	603b      	str	r3, [r7, #0]
 800a808:	4613      	mov	r3, r2
 800a80a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a810:	2b20      	cmp	r3, #32
 800a812:	f040 8082 	bne.w	800a91a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <HAL_UART_Transmit+0x26>
 800a81c:	88fb      	ldrh	r3, [r7, #6]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e07a      	b.n	800a91c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_UART_Transmit+0x38>
 800a830:	2302      	movs	r3, #2
 800a832:	e073      	b.n	800a91c <HAL_UART_Transmit+0x120>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2200      	movs	r2, #0
 800a840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2221      	movs	r2, #33	; 0x21
 800a848:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a84a:	f7fa fa9b 	bl	8004d84 <HAL_GetTick>
 800a84e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	88fa      	ldrh	r2, [r7, #6]
 800a854:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	88fa      	ldrh	r2, [r7, #6]
 800a85c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a868:	d108      	bne.n	800a87c <HAL_UART_Transmit+0x80>
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d104      	bne.n	800a87c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	61bb      	str	r3, [r7, #24]
 800a87a:	e003      	b.n	800a884 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a880:	2300      	movs	r3, #0
 800a882:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a88c:	e02d      	b.n	800a8ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2200      	movs	r2, #0
 800a896:	2180      	movs	r1, #128	; 0x80
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 fed6 	bl	800b64a <UART_WaitOnFlagUntilTimeout>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e039      	b.n	800a91c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10b      	bne.n	800a8c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	881a      	ldrh	r2, [r3, #0]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8ba:	b292      	uxth	r2, r2
 800a8bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	3302      	adds	r3, #2
 800a8c2:	61bb      	str	r3, [r7, #24]
 800a8c4:	e008      	b.n	800a8d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	781a      	ldrb	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	b292      	uxth	r2, r2
 800a8d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1cb      	bne.n	800a88e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2140      	movs	r1, #64	; 0x40
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f000 fea2 	bl	800b64a <UART_WaitOnFlagUntilTimeout>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a90c:	2303      	movs	r3, #3
 800a90e:	e005      	b.n	800a91c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2220      	movs	r2, #32
 800a914:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	e000      	b.n	800a91c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a91a:	2302      	movs	r3, #2
  }
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3720      	adds	r7, #32
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08a      	sub	sp, #40	; 0x28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	4613      	mov	r3, r2
 800a930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a936:	2b20      	cmp	r3, #32
 800a938:	d142      	bne.n	800a9c0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <HAL_UART_Receive_IT+0x22>
 800a940:	88fb      	ldrh	r3, [r7, #6]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e03b      	b.n	800a9c2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a950:	2b01      	cmp	r3, #1
 800a952:	d101      	bne.n	800a958 <HAL_UART_Receive_IT+0x34>
 800a954:	2302      	movs	r3, #2
 800a956:	e034      	b.n	800a9c2 <HAL_UART_Receive_IT+0x9e>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a18      	ldr	r2, [pc, #96]	; (800a9cc <HAL_UART_Receive_IT+0xa8>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d01f      	beq.n	800a9b0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d018      	beq.n	800a9b0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	e853 3f00 	ldrex	r3, [r3]
 800a98a:	613b      	str	r3, [r7, #16]
   return(result);
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	623b      	str	r3, [r7, #32]
 800a99e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a0:	69f9      	ldr	r1, [r7, #28]
 800a9a2:	6a3a      	ldr	r2, [r7, #32]
 800a9a4:	e841 2300 	strex	r3, r2, [r1]
 800a9a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e6      	bne.n	800a97e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 ff0c 	bl	800b7d4 <UART_Start_Receive_IT>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	e000      	b.n	800a9c2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a9c0:	2302      	movs	r3, #2
  }
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3728      	adds	r7, #40	; 0x28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	40008000 	.word	0x40008000

0800a9d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b0ba      	sub	sp, #232	; 0xe8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a9fa:	f640 030f 	movw	r3, #2063	; 0x80f
 800a9fe:	4013      	ands	r3, r2
 800aa00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aa04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d115      	bne.n	800aa38 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa10:	f003 0320 	and.w	r3, r3, #32
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00f      	beq.n	800aa38 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa1c:	f003 0320 	and.w	r3, r3, #32
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 82a6 	beq.w	800af7a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
      }
      return;
 800aa36:	e2a0      	b.n	800af7a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800aa38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8117 	beq.w	800ac70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d106      	bne.n	800aa5c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aa52:	4b85      	ldr	r3, [pc, #532]	; (800ac68 <HAL_UART_IRQHandler+0x298>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 810a 	beq.w	800ac70 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d011      	beq.n	800aa8c <HAL_UART_IRQHandler+0xbc>
 800aa68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa82:	f043 0201 	orr.w	r2, r3, #1
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d011      	beq.n	800aabc <HAL_UART_IRQHandler+0xec>
 800aa98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aab2:	f043 0204 	orr.w	r2, r3, #4
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d011      	beq.n	800aaec <HAL_UART_IRQHandler+0x11c>
 800aac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00b      	beq.n	800aaec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2204      	movs	r2, #4
 800aada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aae2:	f043 0202 	orr.w	r2, r3, #2
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aaec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf0:	f003 0308 	and.w	r3, r3, #8
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d017      	beq.n	800ab28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aaf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aafc:	f003 0320 	and.w	r3, r3, #32
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d105      	bne.n	800ab10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ab04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00b      	beq.n	800ab28 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2208      	movs	r2, #8
 800ab16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab1e:	f043 0208 	orr.w	r2, r3, #8
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d012      	beq.n	800ab5a <HAL_UART_IRQHandler+0x18a>
 800ab34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00c      	beq.n	800ab5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab50:	f043 0220 	orr.w	r2, r3, #32
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 820c 	beq.w	800af7e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00d      	beq.n	800ab8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab76:	f003 0320 	and.w	r3, r3, #32
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d007      	beq.n	800ab8e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba2:	2b40      	cmp	r3, #64	; 0x40
 800aba4:	d005      	beq.n	800abb2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d04f      	beq.n	800ac52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fed8 	bl	800b968 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc2:	2b40      	cmp	r3, #64	; 0x40
 800abc4:	d141      	bne.n	800ac4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	3308      	adds	r3, #8
 800abcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800abdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3308      	adds	r3, #8
 800abee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800abf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800abf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800abfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ac02:	e841 2300 	strex	r3, r2, [r1]
 800ac06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ac0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1d9      	bne.n	800abc6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d013      	beq.n	800ac42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1e:	4a13      	ldr	r2, [pc, #76]	; (800ac6c <HAL_UART_IRQHandler+0x29c>)
 800ac20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fb ff06 	bl	8006a38 <HAL_DMA_Abort_IT>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d017      	beq.n	800ac62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac40:	e00f      	b.n	800ac62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7f7 f986 	bl	8001f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac48:	e00b      	b.n	800ac62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7f7 f982 	bl	8001f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac50:	e007      	b.n	800ac62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7f7 f97e 	bl	8001f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ac60:	e18d      	b.n	800af7e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac62:	bf00      	nop
    return;
 800ac64:	e18b      	b.n	800af7e <HAL_UART_IRQHandler+0x5ae>
 800ac66:	bf00      	nop
 800ac68:	04000120 	.word	0x04000120
 800ac6c:	0800ba2f 	.word	0x0800ba2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	f040 8146 	bne.w	800af06 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7e:	f003 0310 	and.w	r3, r3, #16
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f000 813f 	beq.w	800af06 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac8c:	f003 0310 	and.w	r3, r3, #16
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 8138 	beq.w	800af06 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2210      	movs	r2, #16
 800ac9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca8:	2b40      	cmp	r3, #64	; 0x40
 800acaa:	f040 80b4 	bne.w	800ae16 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800acba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 815f 	beq.w	800af82 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800acca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acce:	429a      	cmp	r2, r3
 800acd0:	f080 8157 	bcs.w	800af82 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0320 	and.w	r3, r3, #32
 800acea:	2b00      	cmp	r3, #0
 800acec:	f040 8085 	bne.w	800adfa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acfc:	e853 3f00 	ldrex	r3, [r3]
 800ad00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ad04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	461a      	mov	r2, r3
 800ad16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ad1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad2a:	e841 2300 	strex	r3, r2, [r1]
 800ad2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1da      	bne.n	800acf0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ad4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad4c:	f023 0301 	bic.w	r3, r3, #1
 800ad50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3308      	adds	r3, #8
 800ad5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e1      	bne.n	800ad3a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3308      	adds	r3, #8
 800ad96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ada0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ada2:	e841 2300 	strex	r3, r2, [r1]
 800ada6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ada8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1e3      	bne.n	800ad76 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2220      	movs	r2, #32
 800adb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc2:	e853 3f00 	ldrex	r3, [r3]
 800adc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adca:	f023 0310 	bic.w	r3, r3, #16
 800adce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	461a      	mov	r2, r3
 800add8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800addc:	65bb      	str	r3, [r7, #88]	; 0x58
 800adde:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ade2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ade4:	e841 2300 	strex	r3, r2, [r1]
 800ade8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800adea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1e4      	bne.n	800adba <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fb fde1 	bl	80069bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f8ca 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae14:	e0b5      	b.n	800af82 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 80a7 	beq.w	800af86 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800ae38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f000 80a2 	beq.w	800af86 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4a:	e853 3f00 	ldrex	r3, [r3]
 800ae4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae64:	647b      	str	r3, [r7, #68]	; 0x44
 800ae66:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e4      	bne.n	800ae42 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	e853 3f00 	ldrex	r3, [r3]
 800ae86:	623b      	str	r3, [r7, #32]
   return(result);
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	f023 0301 	bic.w	r3, r3, #1
 800ae8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3308      	adds	r3, #8
 800ae98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae9c:	633a      	str	r2, [r7, #48]	; 0x30
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aea4:	e841 2300 	strex	r3, r2, [r1]
 800aea8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1e3      	bne.n	800ae78 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2220      	movs	r2, #32
 800aeb4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	e853 3f00 	ldrex	r3, [r3]
 800aece:	60fb      	str	r3, [r7, #12]
   return(result);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0310 	bic.w	r3, r3, #16
 800aed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aee4:	61fb      	str	r3, [r7, #28]
 800aee6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee8:	69b9      	ldr	r1, [r7, #24]
 800aeea:	69fa      	ldr	r2, [r7, #28]
 800aeec:	e841 2300 	strex	r3, r2, [r1]
 800aef0:	617b      	str	r3, [r7, #20]
   return(result);
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e4      	bne.n	800aec2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aefc:	4619      	mov	r1, r3
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f852 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af04:	e03f      	b.n	800af86 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00e      	beq.n	800af30 <HAL_UART_IRQHandler+0x560>
 800af12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d008      	beq.n	800af30 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800af26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 ff20 	bl	800bd6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af2e:	e02d      	b.n	800af8c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00e      	beq.n	800af5a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af44:	2b00      	cmp	r3, #0
 800af46:	d008      	beq.n	800af5a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01c      	beq.n	800af8a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	4798      	blx	r3
    }
    return;
 800af58:	e017      	b.n	800af8a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d012      	beq.n	800af8c <HAL_UART_IRQHandler+0x5bc>
 800af66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00c      	beq.n	800af8c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fd71 	bl	800ba5a <UART_EndTransmit_IT>
    return;
 800af78:	e008      	b.n	800af8c <HAL_UART_IRQHandler+0x5bc>
      return;
 800af7a:	bf00      	nop
 800af7c:	e006      	b.n	800af8c <HAL_UART_IRQHandler+0x5bc>
    return;
 800af7e:	bf00      	nop
 800af80:	e004      	b.n	800af8c <HAL_UART_IRQHandler+0x5bc>
      return;
 800af82:	bf00      	nop
 800af84:	e002      	b.n	800af8c <HAL_UART_IRQHandler+0x5bc>
      return;
 800af86:	bf00      	nop
 800af88:	e000      	b.n	800af8c <HAL_UART_IRQHandler+0x5bc>
    return;
 800af8a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800af8c:	37e8      	adds	r7, #232	; 0xe8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop

0800af94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afc4:	b08a      	sub	sp, #40	; 0x28
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	431a      	orrs	r2, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	431a      	orrs	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	69db      	ldr	r3, [r3, #28]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	4b9e      	ldr	r3, [pc, #632]	; (800b268 <UART_SetConfig+0x2a8>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	6812      	ldr	r2, [r2, #0]
 800aff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aff8:	430b      	orrs	r3, r1
 800affa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	68da      	ldr	r2, [r3, #12]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a93      	ldr	r2, [pc, #588]	; (800b26c <UART_SetConfig+0x2ac>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d004      	beq.n	800b02c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b028:	4313      	orrs	r3, r2
 800b02a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03c:	430a      	orrs	r2, r1
 800b03e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a8a      	ldr	r2, [pc, #552]	; (800b270 <UART_SetConfig+0x2b0>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d126      	bne.n	800b098 <UART_SetConfig+0xd8>
 800b04a:	4b8a      	ldr	r3, [pc, #552]	; (800b274 <UART_SetConfig+0x2b4>)
 800b04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b050:	f003 0303 	and.w	r3, r3, #3
 800b054:	2b03      	cmp	r3, #3
 800b056:	d81b      	bhi.n	800b090 <UART_SetConfig+0xd0>
 800b058:	a201      	add	r2, pc, #4	; (adr r2, 800b060 <UART_SetConfig+0xa0>)
 800b05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05e:	bf00      	nop
 800b060:	0800b071 	.word	0x0800b071
 800b064:	0800b081 	.word	0x0800b081
 800b068:	0800b079 	.word	0x0800b079
 800b06c:	0800b089 	.word	0x0800b089
 800b070:	2301      	movs	r3, #1
 800b072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b076:	e0ab      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b078:	2302      	movs	r3, #2
 800b07a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b07e:	e0a7      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b080:	2304      	movs	r3, #4
 800b082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b086:	e0a3      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b088:	2308      	movs	r3, #8
 800b08a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b08e:	e09f      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b090:	2310      	movs	r3, #16
 800b092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b096:	e09b      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a76      	ldr	r2, [pc, #472]	; (800b278 <UART_SetConfig+0x2b8>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d138      	bne.n	800b114 <UART_SetConfig+0x154>
 800b0a2:	4b74      	ldr	r3, [pc, #464]	; (800b274 <UART_SetConfig+0x2b4>)
 800b0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a8:	f003 030c 	and.w	r3, r3, #12
 800b0ac:	2b0c      	cmp	r3, #12
 800b0ae:	d82d      	bhi.n	800b10c <UART_SetConfig+0x14c>
 800b0b0:	a201      	add	r2, pc, #4	; (adr r2, 800b0b8 <UART_SetConfig+0xf8>)
 800b0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b6:	bf00      	nop
 800b0b8:	0800b0ed 	.word	0x0800b0ed
 800b0bc:	0800b10d 	.word	0x0800b10d
 800b0c0:	0800b10d 	.word	0x0800b10d
 800b0c4:	0800b10d 	.word	0x0800b10d
 800b0c8:	0800b0fd 	.word	0x0800b0fd
 800b0cc:	0800b10d 	.word	0x0800b10d
 800b0d0:	0800b10d 	.word	0x0800b10d
 800b0d4:	0800b10d 	.word	0x0800b10d
 800b0d8:	0800b0f5 	.word	0x0800b0f5
 800b0dc:	0800b10d 	.word	0x0800b10d
 800b0e0:	0800b10d 	.word	0x0800b10d
 800b0e4:	0800b10d 	.word	0x0800b10d
 800b0e8:	0800b105 	.word	0x0800b105
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0f2:	e06d      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0fa:	e069      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b0fc:	2304      	movs	r3, #4
 800b0fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b102:	e065      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b104:	2308      	movs	r3, #8
 800b106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b10a:	e061      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b10c:	2310      	movs	r3, #16
 800b10e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b112:	e05d      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a58      	ldr	r2, [pc, #352]	; (800b27c <UART_SetConfig+0x2bc>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d125      	bne.n	800b16a <UART_SetConfig+0x1aa>
 800b11e:	4b55      	ldr	r3, [pc, #340]	; (800b274 <UART_SetConfig+0x2b4>)
 800b120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b124:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b128:	2b30      	cmp	r3, #48	; 0x30
 800b12a:	d016      	beq.n	800b15a <UART_SetConfig+0x19a>
 800b12c:	2b30      	cmp	r3, #48	; 0x30
 800b12e:	d818      	bhi.n	800b162 <UART_SetConfig+0x1a2>
 800b130:	2b20      	cmp	r3, #32
 800b132:	d00a      	beq.n	800b14a <UART_SetConfig+0x18a>
 800b134:	2b20      	cmp	r3, #32
 800b136:	d814      	bhi.n	800b162 <UART_SetConfig+0x1a2>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <UART_SetConfig+0x182>
 800b13c:	2b10      	cmp	r3, #16
 800b13e:	d008      	beq.n	800b152 <UART_SetConfig+0x192>
 800b140:	e00f      	b.n	800b162 <UART_SetConfig+0x1a2>
 800b142:	2300      	movs	r3, #0
 800b144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b148:	e042      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b14a:	2302      	movs	r3, #2
 800b14c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b150:	e03e      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b152:	2304      	movs	r3, #4
 800b154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b158:	e03a      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b15a:	2308      	movs	r3, #8
 800b15c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b160:	e036      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b162:	2310      	movs	r3, #16
 800b164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b168:	e032      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a3f      	ldr	r2, [pc, #252]	; (800b26c <UART_SetConfig+0x2ac>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d12a      	bne.n	800b1ca <UART_SetConfig+0x20a>
 800b174:	4b3f      	ldr	r3, [pc, #252]	; (800b274 <UART_SetConfig+0x2b4>)
 800b176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b17e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b182:	d01a      	beq.n	800b1ba <UART_SetConfig+0x1fa>
 800b184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b188:	d81b      	bhi.n	800b1c2 <UART_SetConfig+0x202>
 800b18a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b18e:	d00c      	beq.n	800b1aa <UART_SetConfig+0x1ea>
 800b190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b194:	d815      	bhi.n	800b1c2 <UART_SetConfig+0x202>
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <UART_SetConfig+0x1e2>
 800b19a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b19e:	d008      	beq.n	800b1b2 <UART_SetConfig+0x1f2>
 800b1a0:	e00f      	b.n	800b1c2 <UART_SetConfig+0x202>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1a8:	e012      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1b0:	e00e      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b1b2:	2304      	movs	r3, #4
 800b1b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1b8:	e00a      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b1ba:	2308      	movs	r3, #8
 800b1bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1c0:	e006      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b1c2:	2310      	movs	r3, #16
 800b1c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1c8:	e002      	b.n	800b1d0 <UART_SetConfig+0x210>
 800b1ca:	2310      	movs	r3, #16
 800b1cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a25      	ldr	r2, [pc, #148]	; (800b26c <UART_SetConfig+0x2ac>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	f040 808a 	bne.w	800b2f0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	d824      	bhi.n	800b22e <UART_SetConfig+0x26e>
 800b1e4:	a201      	add	r2, pc, #4	; (adr r2, 800b1ec <UART_SetConfig+0x22c>)
 800b1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ea:	bf00      	nop
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b22f 	.word	0x0800b22f
 800b1f4:	0800b219 	.word	0x0800b219
 800b1f8:	0800b22f 	.word	0x0800b22f
 800b1fc:	0800b21f 	.word	0x0800b21f
 800b200:	0800b22f 	.word	0x0800b22f
 800b204:	0800b22f 	.word	0x0800b22f
 800b208:	0800b22f 	.word	0x0800b22f
 800b20c:	0800b227 	.word	0x0800b227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b210:	f7fe f8e6 	bl	80093e0 <HAL_RCC_GetPCLK1Freq>
 800b214:	61f8      	str	r0, [r7, #28]
        break;
 800b216:	e010      	b.n	800b23a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b218:	4b19      	ldr	r3, [pc, #100]	; (800b280 <UART_SetConfig+0x2c0>)
 800b21a:	61fb      	str	r3, [r7, #28]
        break;
 800b21c:	e00d      	b.n	800b23a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b21e:	f7fe f847 	bl	80092b0 <HAL_RCC_GetSysClockFreq>
 800b222:	61f8      	str	r0, [r7, #28]
        break;
 800b224:	e009      	b.n	800b23a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b22a:	61fb      	str	r3, [r7, #28]
        break;
 800b22c:	e005      	b.n	800b23a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 8109 	beq.w	800b454 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	4613      	mov	r3, r2
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	4413      	add	r3, r2
 800b24c:	69fa      	ldr	r2, [r7, #28]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d305      	bcc.n	800b25e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d912      	bls.n	800b284 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b264:	e0f6      	b.n	800b454 <UART_SetConfig+0x494>
 800b266:	bf00      	nop
 800b268:	efff69f3 	.word	0xefff69f3
 800b26c:	40008000 	.word	0x40008000
 800b270:	40013800 	.word	0x40013800
 800b274:	40021000 	.word	0x40021000
 800b278:	40004400 	.word	0x40004400
 800b27c:	40004800 	.word	0x40004800
 800b280:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b284:	69fb      	ldr	r3, [r7, #28]
 800b286:	2200      	movs	r2, #0
 800b288:	461c      	mov	r4, r3
 800b28a:	4615      	mov	r5, r2
 800b28c:	f04f 0200 	mov.w	r2, #0
 800b290:	f04f 0300 	mov.w	r3, #0
 800b294:	022b      	lsls	r3, r5, #8
 800b296:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b29a:	0222      	lsls	r2, r4, #8
 800b29c:	68f9      	ldr	r1, [r7, #12]
 800b29e:	6849      	ldr	r1, [r1, #4]
 800b2a0:	0849      	lsrs	r1, r1, #1
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	4688      	mov	r8, r1
 800b2a6:	4681      	mov	r9, r0
 800b2a8:	eb12 0a08 	adds.w	sl, r2, r8
 800b2ac:	eb43 0b09 	adc.w	fp, r3, r9
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	603b      	str	r3, [r7, #0]
 800b2b8:	607a      	str	r2, [r7, #4]
 800b2ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2be:	4650      	mov	r0, sl
 800b2c0:	4659      	mov	r1, fp
 800b2c2:	f7f5 fce1 	bl	8000c88 <__aeabi_uldivmod>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2d4:	d308      	bcc.n	800b2e8 <UART_SetConfig+0x328>
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2dc:	d204      	bcs.n	800b2e8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	69ba      	ldr	r2, [r7, #24]
 800b2e4:	60da      	str	r2, [r3, #12]
 800b2e6:	e0b5      	b.n	800b454 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b2ee:	e0b1      	b.n	800b454 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2f8:	d15d      	bne.n	800b3b6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800b2fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	d827      	bhi.n	800b352 <UART_SetConfig+0x392>
 800b302:	a201      	add	r2, pc, #4	; (adr r2, 800b308 <UART_SetConfig+0x348>)
 800b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b308:	0800b32d 	.word	0x0800b32d
 800b30c:	0800b335 	.word	0x0800b335
 800b310:	0800b33d 	.word	0x0800b33d
 800b314:	0800b353 	.word	0x0800b353
 800b318:	0800b343 	.word	0x0800b343
 800b31c:	0800b353 	.word	0x0800b353
 800b320:	0800b353 	.word	0x0800b353
 800b324:	0800b353 	.word	0x0800b353
 800b328:	0800b34b 	.word	0x0800b34b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b32c:	f7fe f858 	bl	80093e0 <HAL_RCC_GetPCLK1Freq>
 800b330:	61f8      	str	r0, [r7, #28]
        break;
 800b332:	e014      	b.n	800b35e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b334:	f7fe f86a 	bl	800940c <HAL_RCC_GetPCLK2Freq>
 800b338:	61f8      	str	r0, [r7, #28]
        break;
 800b33a:	e010      	b.n	800b35e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b33c:	4b4c      	ldr	r3, [pc, #304]	; (800b470 <UART_SetConfig+0x4b0>)
 800b33e:	61fb      	str	r3, [r7, #28]
        break;
 800b340:	e00d      	b.n	800b35e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b342:	f7fd ffb5 	bl	80092b0 <HAL_RCC_GetSysClockFreq>
 800b346:	61f8      	str	r0, [r7, #28]
        break;
 800b348:	e009      	b.n	800b35e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b34a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b34e:	61fb      	str	r3, [r7, #28]
        break;
 800b350:	e005      	b.n	800b35e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800b352:	2300      	movs	r3, #0
 800b354:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b35c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d077      	beq.n	800b454 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	005a      	lsls	r2, r3, #1
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	085b      	lsrs	r3, r3, #1
 800b36e:	441a      	add	r2, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	fbb2 f3f3 	udiv	r3, r2, r3
 800b378:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	2b0f      	cmp	r3, #15
 800b37e:	d916      	bls.n	800b3ae <UART_SetConfig+0x3ee>
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b386:	d212      	bcs.n	800b3ae <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	f023 030f 	bic.w	r3, r3, #15
 800b390:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	085b      	lsrs	r3, r3, #1
 800b396:	b29b      	uxth	r3, r3
 800b398:	f003 0307 	and.w	r3, r3, #7
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	8afb      	ldrh	r3, [r7, #22]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	8afa      	ldrh	r2, [r7, #22]
 800b3aa:	60da      	str	r2, [r3, #12]
 800b3ac:	e052      	b.n	800b454 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b3b4:	e04e      	b.n	800b454 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3ba:	2b08      	cmp	r3, #8
 800b3bc:	d827      	bhi.n	800b40e <UART_SetConfig+0x44e>
 800b3be:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <UART_SetConfig+0x404>)
 800b3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c4:	0800b3e9 	.word	0x0800b3e9
 800b3c8:	0800b3f1 	.word	0x0800b3f1
 800b3cc:	0800b3f9 	.word	0x0800b3f9
 800b3d0:	0800b40f 	.word	0x0800b40f
 800b3d4:	0800b3ff 	.word	0x0800b3ff
 800b3d8:	0800b40f 	.word	0x0800b40f
 800b3dc:	0800b40f 	.word	0x0800b40f
 800b3e0:	0800b40f 	.word	0x0800b40f
 800b3e4:	0800b407 	.word	0x0800b407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3e8:	f7fd fffa 	bl	80093e0 <HAL_RCC_GetPCLK1Freq>
 800b3ec:	61f8      	str	r0, [r7, #28]
        break;
 800b3ee:	e014      	b.n	800b41a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3f0:	f7fe f80c 	bl	800940c <HAL_RCC_GetPCLK2Freq>
 800b3f4:	61f8      	str	r0, [r7, #28]
        break;
 800b3f6:	e010      	b.n	800b41a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3f8:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <UART_SetConfig+0x4b0>)
 800b3fa:	61fb      	str	r3, [r7, #28]
        break;
 800b3fc:	e00d      	b.n	800b41a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3fe:	f7fd ff57 	bl	80092b0 <HAL_RCC_GetSysClockFreq>
 800b402:	61f8      	str	r0, [r7, #28]
        break;
 800b404:	e009      	b.n	800b41a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b40a:	61fb      	str	r3, [r7, #28]
        break;
 800b40c:	e005      	b.n	800b41a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800b40e:	2300      	movs	r3, #0
 800b410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b418:	bf00      	nop
    }

    if (pclk != 0U)
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d019      	beq.n	800b454 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	085a      	lsrs	r2, r3, #1
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	441a      	add	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b432:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	2b0f      	cmp	r3, #15
 800b438:	d909      	bls.n	800b44e <UART_SetConfig+0x48e>
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b440:	d205      	bcs.n	800b44e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	b29a      	uxth	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60da      	str	r2, [r3, #12]
 800b44c:	e002      	b.n	800b454 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b460:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b464:	4618      	mov	r0, r3
 800b466:	3728      	adds	r7, #40	; 0x28
 800b468:	46bd      	mov	sp, r7
 800b46a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b46e:	bf00      	nop
 800b470:	00f42400 	.word	0x00f42400

0800b474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	f003 0304 	and.w	r3, r3, #4
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e6:	f003 0308 	and.w	r3, r3, #8
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	430a      	orrs	r2, r1
 800b502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	f003 0310 	and.w	r3, r3, #16
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00a      	beq.n	800b526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	430a      	orrs	r2, r1
 800b524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52a:	f003 0320 	and.w	r3, r3, #32
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00a      	beq.n	800b548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	430a      	orrs	r2, r1
 800b546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01a      	beq.n	800b58a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	430a      	orrs	r2, r1
 800b568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b572:	d10a      	bne.n	800b58a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	430a      	orrs	r2, r1
 800b5aa:	605a      	str	r2, [r3, #4]
  }
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af02      	add	r7, sp, #8
 800b5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5c8:	f7f9 fbdc 	bl	8004d84 <HAL_GetTick>
 800b5cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0308 	and.w	r3, r3, #8
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d10e      	bne.n	800b5fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f82d 	bl	800b64a <UART_WaitOnFlagUntilTimeout>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e023      	b.n	800b642 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 0304 	and.w	r3, r3, #4
 800b604:	2b04      	cmp	r3, #4
 800b606:	d10e      	bne.n	800b626 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2200      	movs	r2, #0
 800b612:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f817 	bl	800b64a <UART_WaitOnFlagUntilTimeout>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e00d      	b.n	800b642 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2220      	movs	r2, #32
 800b62a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2220      	movs	r2, #32
 800b630:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b09c      	sub	sp, #112	; 0x70
 800b64e:	af00      	add	r7, sp, #0
 800b650:	60f8      	str	r0, [r7, #12]
 800b652:	60b9      	str	r1, [r7, #8]
 800b654:	603b      	str	r3, [r7, #0]
 800b656:	4613      	mov	r3, r2
 800b658:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b65a:	e0a5      	b.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b65c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b662:	f000 80a1 	beq.w	800b7a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b666:	f7f9 fb8d 	bl	8004d84 <HAL_GetTick>
 800b66a:	4602      	mov	r2, r0
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b672:	429a      	cmp	r2, r3
 800b674:	d302      	bcc.n	800b67c <UART_WaitOnFlagUntilTimeout+0x32>
 800b676:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d13e      	bne.n	800b6fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b68c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b690:	667b      	str	r3, [r7, #100]	; 0x64
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b69a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b69c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b6a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e6      	bne.n	800b67c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3308      	adds	r3, #8
 800b6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b8:	e853 3f00 	ldrex	r3, [r3]
 800b6bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	f023 0301 	bic.w	r3, r3, #1
 800b6c4:	663b      	str	r3, [r7, #96]	; 0x60
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800b6d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e5      	bne.n	800b6ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2220      	movs	r2, #32
 800b6ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e067      	b.n	800b7ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0304 	and.w	r3, r3, #4
 800b704:	2b00      	cmp	r3, #0
 800b706:	d04f      	beq.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b716:	d147      	bne.n	800b7a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b720:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72a:	e853 3f00 	ldrex	r3, [r3]
 800b72e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b736:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
 800b742:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b748:	e841 2300 	strex	r3, r2, [r1]
 800b74c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e6      	bne.n	800b722 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3308      	adds	r3, #8
 800b75a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	e853 3f00 	ldrex	r3, [r3]
 800b762:	613b      	str	r3, [r7, #16]
   return(result);
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	f023 0301 	bic.w	r3, r3, #1
 800b76a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	3308      	adds	r3, #8
 800b772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b774:	623a      	str	r2, [r7, #32]
 800b776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b778:	69f9      	ldr	r1, [r7, #28]
 800b77a:	6a3a      	ldr	r2, [r7, #32]
 800b77c:	e841 2300 	strex	r3, r2, [r1]
 800b780:	61bb      	str	r3, [r7, #24]
   return(result);
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e5      	bne.n	800b754 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2220      	movs	r2, #32
 800b78c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2220      	movs	r2, #32
 800b792:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2220      	movs	r2, #32
 800b798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b7a4:	2303      	movs	r3, #3
 800b7a6:	e010      	b.n	800b7ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69da      	ldr	r2, [r3, #28]
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	bf0c      	ite	eq
 800b7b8:	2301      	moveq	r3, #1
 800b7ba:	2300      	movne	r3, #0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	461a      	mov	r2, r3
 800b7c0:	79fb      	ldrb	r3, [r7, #7]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	f43f af4a 	beq.w	800b65c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3770      	adds	r7, #112	; 0x70
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
	...

0800b7d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b097      	sub	sp, #92	; 0x5c
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	88fa      	ldrh	r2, [r7, #6]
 800b7ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	88fa      	ldrh	r2, [r7, #6]
 800b7f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b806:	d10e      	bne.n	800b826 <UART_Start_Receive_IT+0x52>
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d105      	bne.n	800b81c <UART_Start_Receive_IT+0x48>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b816:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b81a:	e02d      	b.n	800b878 <UART_Start_Receive_IT+0xa4>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	22ff      	movs	r2, #255	; 0xff
 800b820:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b824:	e028      	b.n	800b878 <UART_Start_Receive_IT+0xa4>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10d      	bne.n	800b84a <UART_Start_Receive_IT+0x76>
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d104      	bne.n	800b840 <UART_Start_Receive_IT+0x6c>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	22ff      	movs	r2, #255	; 0xff
 800b83a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b83e:	e01b      	b.n	800b878 <UART_Start_Receive_IT+0xa4>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	227f      	movs	r2, #127	; 0x7f
 800b844:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b848:	e016      	b.n	800b878 <UART_Start_Receive_IT+0xa4>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b852:	d10d      	bne.n	800b870 <UART_Start_Receive_IT+0x9c>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d104      	bne.n	800b866 <UART_Start_Receive_IT+0x92>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	227f      	movs	r2, #127	; 0x7f
 800b860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b864:	e008      	b.n	800b878 <UART_Start_Receive_IT+0xa4>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	223f      	movs	r2, #63	; 0x3f
 800b86a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b86e:	e003      	b.n	800b878 <UART_Start_Receive_IT+0xa4>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2222      	movs	r2, #34	; 0x22
 800b884:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3308      	adds	r3, #8
 800b88c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b890:	e853 3f00 	ldrex	r3, [r3]
 800b894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	f043 0301 	orr.w	r3, r3, #1
 800b89c:	657b      	str	r3, [r7, #84]	; 0x54
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b8a6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b8a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8ae:	e841 2300 	strex	r3, r2, [r1]
 800b8b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e5      	bne.n	800b886 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8c2:	d107      	bne.n	800b8d4 <UART_Start_Receive_IT+0x100>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d103      	bne.n	800b8d4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4a24      	ldr	r2, [pc, #144]	; (800b960 <UART_Start_Receive_IT+0x18c>)
 800b8d0:	665a      	str	r2, [r3, #100]	; 0x64
 800b8d2:	e002      	b.n	800b8da <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4a23      	ldr	r2, [pc, #140]	; (800b964 <UART_Start_Receive_IT+0x190>)
 800b8d8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d019      	beq.n	800b91e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b908:	637b      	str	r3, [r7, #52]	; 0x34
 800b90a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b90e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b910:	e841 2300 	strex	r3, r2, [r1]
 800b914:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1e6      	bne.n	800b8ea <UART_Start_Receive_IT+0x116>
 800b91c:	e018      	b.n	800b950 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	e853 3f00 	ldrex	r3, [r3]
 800b92a:	613b      	str	r3, [r7, #16]
   return(result);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f043 0320 	orr.w	r3, r3, #32
 800b932:	653b      	str	r3, [r7, #80]	; 0x50
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	461a      	mov	r2, r3
 800b93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b93c:	623b      	str	r3, [r7, #32]
 800b93e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b940:	69f9      	ldr	r1, [r7, #28]
 800b942:	6a3a      	ldr	r2, [r7, #32]
 800b944:	e841 2300 	strex	r3, r2, [r1]
 800b948:	61bb      	str	r3, [r7, #24]
   return(result);
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1e6      	bne.n	800b91e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	375c      	adds	r7, #92	; 0x5c
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	0800bc0f 	.word	0x0800bc0f
 800b964:	0800baaf 	.word	0x0800baaf

0800b968 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b968:	b480      	push	{r7}
 800b96a:	b095      	sub	sp, #84	; 0x54
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b978:	e853 3f00 	ldrex	r3, [r3]
 800b97c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b984:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	461a      	mov	r2, r3
 800b98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b98e:	643b      	str	r3, [r7, #64]	; 0x40
 800b990:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b992:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b994:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b996:	e841 2300 	strex	r3, r2, [r1]
 800b99a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d1e6      	bne.n	800b970 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3308      	adds	r3, #8
 800b9a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	e853 3f00 	ldrex	r3, [r3]
 800b9b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	f023 0301 	bic.w	r3, r3, #1
 800b9b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9ca:	e841 2300 	strex	r3, r2, [r1]
 800b9ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1e5      	bne.n	800b9a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d118      	bne.n	800ba10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f023 0310 	bic.w	r3, r3, #16
 800b9f2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9fc:	61bb      	str	r3, [r7, #24]
 800b9fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba00:	6979      	ldr	r1, [r7, #20]
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	e841 2300 	strex	r3, r2, [r1]
 800ba08:	613b      	str	r3, [r7, #16]
   return(result);
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1e6      	bne.n	800b9de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ba22:	bf00      	nop
 800ba24:	3754      	adds	r7, #84	; 0x54
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f7f6 fa81 	bl	8001f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b088      	sub	sp, #32
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	e853 3f00 	ldrex	r3, [r3]
 800ba6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba76:	61fb      	str	r3, [r7, #28]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	61bb      	str	r3, [r7, #24]
 800ba82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba84:	6979      	ldr	r1, [r7, #20]
 800ba86:	69ba      	ldr	r2, [r7, #24]
 800ba88:	e841 2300 	strex	r3, r2, [r1]
 800ba8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1e6      	bne.n	800ba62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2220      	movs	r2, #32
 800ba98:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff fa77 	bl	800af94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800baa6:	bf00      	nop
 800baa8:	3720      	adds	r7, #32
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b096      	sub	sp, #88	; 0x58
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800babc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bac4:	2b22      	cmp	r3, #34	; 0x22
 800bac6:	f040 8094 	bne.w	800bbf2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bad0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bad4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bad8:	b2d9      	uxtb	r1, r3
 800bada:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae4:	400a      	ands	r2, r1
 800bae6:	b2d2      	uxtb	r2, r2
 800bae8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	3b01      	subs	r3, #1
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d179      	bne.n	800bc06 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	e853 3f00 	ldrex	r3, [r3]
 800bb1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb26:	653b      	str	r3, [r7, #80]	; 0x50
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb30:	647b      	str	r3, [r7, #68]	; 0x44
 800bb32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb38:	e841 2300 	strex	r3, r2, [r1]
 800bb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1e6      	bne.n	800bb12 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	3308      	adds	r3, #8
 800bb4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	e853 3f00 	ldrex	r3, [r3]
 800bb52:	623b      	str	r3, [r7, #32]
   return(result);
 800bb54:	6a3b      	ldr	r3, [r7, #32]
 800bb56:	f023 0301 	bic.w	r3, r3, #1
 800bb5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3308      	adds	r3, #8
 800bb62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb64:	633a      	str	r2, [r7, #48]	; 0x30
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e5      	bne.n	800bb44 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2220      	movs	r2, #32
 800bb7c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d12e      	bne.n	800bbea <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	e853 3f00 	ldrex	r3, [r3]
 800bb9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f023 0310 	bic.w	r3, r3, #16
 800bba6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	461a      	mov	r2, r3
 800bbae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbb0:	61fb      	str	r3, [r7, #28]
 800bbb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb4:	69b9      	ldr	r1, [r7, #24]
 800bbb6:	69fa      	ldr	r2, [r7, #28]
 800bbb8:	e841 2300 	strex	r3, r2, [r1]
 800bbbc:	617b      	str	r3, [r7, #20]
   return(result);
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1e6      	bne.n	800bb92 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	69db      	ldr	r3, [r3, #28]
 800bbca:	f003 0310 	and.w	r3, r3, #16
 800bbce:	2b10      	cmp	r3, #16
 800bbd0:	d103      	bne.n	800bbda <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2210      	movs	r2, #16
 800bbd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7ff f9e0 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bbe8:	e00d      	b.n	800bc06 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7f6 f98e 	bl	8001f0c <HAL_UART_RxCpltCallback>
}
 800bbf0:	e009      	b.n	800bc06 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	8b1b      	ldrh	r3, [r3, #24]
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f042 0208 	orr.w	r2, r2, #8
 800bc02:	b292      	uxth	r2, r2
 800bc04:	831a      	strh	r2, [r3, #24]
}
 800bc06:	bf00      	nop
 800bc08:	3758      	adds	r7, #88	; 0x58
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b096      	sub	sp, #88	; 0x58
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc24:	2b22      	cmp	r3, #34	; 0x22
 800bc26:	f040 8094 	bne.w	800bd52 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bc30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc38:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bc3a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bc3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bc42:	4013      	ands	r3, r2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4e:	1c9a      	adds	r2, r3, #2
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d179      	bne.n	800bd66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7a:	e853 3f00 	ldrex	r3, [r3]
 800bc7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc90:	643b      	str	r3, [r7, #64]	; 0x40
 800bc92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc98:	e841 2300 	strex	r3, r2, [r1]
 800bc9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1e6      	bne.n	800bc72 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3308      	adds	r3, #8
 800bcaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	e853 3f00 	ldrex	r3, [r3]
 800bcb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	f023 0301 	bic.w	r3, r3, #1
 800bcba:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bccc:	e841 2300 	strex	r3, r2, [r1]
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1e5      	bne.n	800bca4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2220      	movs	r2, #32
 800bcdc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d12e      	bne.n	800bd4a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	e853 3f00 	ldrex	r3, [r3]
 800bcfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f023 0310 	bic.w	r3, r3, #16
 800bd06:	647b      	str	r3, [r7, #68]	; 0x44
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd10:	61bb      	str	r3, [r7, #24]
 800bd12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd14:	6979      	ldr	r1, [r7, #20]
 800bd16:	69ba      	ldr	r2, [r7, #24]
 800bd18:	e841 2300 	strex	r3, r2, [r1]
 800bd1c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1e6      	bne.n	800bcf2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	f003 0310 	and.w	r3, r3, #16
 800bd2e:	2b10      	cmp	r3, #16
 800bd30:	d103      	bne.n	800bd3a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2210      	movs	r2, #16
 800bd38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bd40:	4619      	mov	r1, r3
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f7ff f930 	bl	800afa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd48:	e00d      	b.n	800bd66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7f6 f8de 	bl	8001f0c <HAL_UART_RxCpltCallback>
}
 800bd50:	e009      	b.n	800bd66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	8b1b      	ldrh	r3, [r3, #24]
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f042 0208 	orr.w	r2, r2, #8
 800bd62:	b292      	uxth	r2, r2
 800bd64:	831a      	strh	r2, [r3, #24]
}
 800bd66:	bf00      	nop
 800bd68:	3758      	adds	r7, #88	; 0x58
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b083      	sub	sp, #12
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd76:	bf00      	nop
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr

0800bd82 <sulp>:
 800bd82:	b570      	push	{r4, r5, r6, lr}
 800bd84:	4604      	mov	r4, r0
 800bd86:	460d      	mov	r5, r1
 800bd88:	ec45 4b10 	vmov	d0, r4, r5
 800bd8c:	4616      	mov	r6, r2
 800bd8e:	f003 fbdb 	bl	800f548 <__ulp>
 800bd92:	ec51 0b10 	vmov	r0, r1, d0
 800bd96:	b17e      	cbz	r6, 800bdb8 <sulp+0x36>
 800bd98:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd9c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	dd09      	ble.n	800bdb8 <sulp+0x36>
 800bda4:	051b      	lsls	r3, r3, #20
 800bda6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bdaa:	2400      	movs	r4, #0
 800bdac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	462b      	mov	r3, r5
 800bdb4:	f7f4 fc20 	bl	80005f8 <__aeabi_dmul>
 800bdb8:	bd70      	pop	{r4, r5, r6, pc}
 800bdba:	0000      	movs	r0, r0
 800bdbc:	0000      	movs	r0, r0
	...

0800bdc0 <_strtod_l>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	ed2d 8b02 	vpush	{d8}
 800bdc8:	b09b      	sub	sp, #108	; 0x6c
 800bdca:	4604      	mov	r4, r0
 800bdcc:	9213      	str	r2, [sp, #76]	; 0x4c
 800bdce:	2200      	movs	r2, #0
 800bdd0:	9216      	str	r2, [sp, #88]	; 0x58
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	f04f 0800 	mov.w	r8, #0
 800bdd8:	f04f 0900 	mov.w	r9, #0
 800bddc:	460a      	mov	r2, r1
 800bdde:	9215      	str	r2, [sp, #84]	; 0x54
 800bde0:	7811      	ldrb	r1, [r2, #0]
 800bde2:	292b      	cmp	r1, #43	; 0x2b
 800bde4:	d04c      	beq.n	800be80 <_strtod_l+0xc0>
 800bde6:	d83a      	bhi.n	800be5e <_strtod_l+0x9e>
 800bde8:	290d      	cmp	r1, #13
 800bdea:	d834      	bhi.n	800be56 <_strtod_l+0x96>
 800bdec:	2908      	cmp	r1, #8
 800bdee:	d834      	bhi.n	800be5a <_strtod_l+0x9a>
 800bdf0:	2900      	cmp	r1, #0
 800bdf2:	d03d      	beq.n	800be70 <_strtod_l+0xb0>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	920a      	str	r2, [sp, #40]	; 0x28
 800bdf8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bdfa:	7832      	ldrb	r2, [r6, #0]
 800bdfc:	2a30      	cmp	r2, #48	; 0x30
 800bdfe:	f040 80b4 	bne.w	800bf6a <_strtod_l+0x1aa>
 800be02:	7872      	ldrb	r2, [r6, #1]
 800be04:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800be08:	2a58      	cmp	r2, #88	; 0x58
 800be0a:	d170      	bne.n	800beee <_strtod_l+0x12e>
 800be0c:	9302      	str	r3, [sp, #8]
 800be0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	ab16      	add	r3, sp, #88	; 0x58
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	4a8e      	ldr	r2, [pc, #568]	; (800c050 <_strtod_l+0x290>)
 800be18:	ab17      	add	r3, sp, #92	; 0x5c
 800be1a:	a915      	add	r1, sp, #84	; 0x54
 800be1c:	4620      	mov	r0, r4
 800be1e:	f002 fc71 	bl	800e704 <__gethex>
 800be22:	f010 070f 	ands.w	r7, r0, #15
 800be26:	4605      	mov	r5, r0
 800be28:	d005      	beq.n	800be36 <_strtod_l+0x76>
 800be2a:	2f06      	cmp	r7, #6
 800be2c:	d12a      	bne.n	800be84 <_strtod_l+0xc4>
 800be2e:	3601      	adds	r6, #1
 800be30:	2300      	movs	r3, #0
 800be32:	9615      	str	r6, [sp, #84]	; 0x54
 800be34:	930a      	str	r3, [sp, #40]	; 0x28
 800be36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f040 857f 	bne.w	800c93c <_strtod_l+0xb7c>
 800be3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be40:	b1db      	cbz	r3, 800be7a <_strtod_l+0xba>
 800be42:	4642      	mov	r2, r8
 800be44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800be48:	ec43 2b10 	vmov	d0, r2, r3
 800be4c:	b01b      	add	sp, #108	; 0x6c
 800be4e:	ecbd 8b02 	vpop	{d8}
 800be52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be56:	2920      	cmp	r1, #32
 800be58:	d1cc      	bne.n	800bdf4 <_strtod_l+0x34>
 800be5a:	3201      	adds	r2, #1
 800be5c:	e7bf      	b.n	800bdde <_strtod_l+0x1e>
 800be5e:	292d      	cmp	r1, #45	; 0x2d
 800be60:	d1c8      	bne.n	800bdf4 <_strtod_l+0x34>
 800be62:	2101      	movs	r1, #1
 800be64:	910a      	str	r1, [sp, #40]	; 0x28
 800be66:	1c51      	adds	r1, r2, #1
 800be68:	9115      	str	r1, [sp, #84]	; 0x54
 800be6a:	7852      	ldrb	r2, [r2, #1]
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	d1c3      	bne.n	800bdf8 <_strtod_l+0x38>
 800be70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be72:	9515      	str	r5, [sp, #84]	; 0x54
 800be74:	2b00      	cmp	r3, #0
 800be76:	f040 855f 	bne.w	800c938 <_strtod_l+0xb78>
 800be7a:	4642      	mov	r2, r8
 800be7c:	464b      	mov	r3, r9
 800be7e:	e7e3      	b.n	800be48 <_strtod_l+0x88>
 800be80:	2100      	movs	r1, #0
 800be82:	e7ef      	b.n	800be64 <_strtod_l+0xa4>
 800be84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be86:	b13a      	cbz	r2, 800be98 <_strtod_l+0xd8>
 800be88:	2135      	movs	r1, #53	; 0x35
 800be8a:	a818      	add	r0, sp, #96	; 0x60
 800be8c:	f003 fc59 	bl	800f742 <__copybits>
 800be90:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be92:	4620      	mov	r0, r4
 800be94:	f003 f82c 	bl	800eef0 <_Bfree>
 800be98:	3f01      	subs	r7, #1
 800be9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be9c:	2f04      	cmp	r7, #4
 800be9e:	d806      	bhi.n	800beae <_strtod_l+0xee>
 800bea0:	e8df f007 	tbb	[pc, r7]
 800bea4:	201d0314 	.word	0x201d0314
 800bea8:	14          	.byte	0x14
 800bea9:	00          	.byte	0x00
 800beaa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800beae:	05e9      	lsls	r1, r5, #23
 800beb0:	bf48      	it	mi
 800beb2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800beb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800beba:	0d1b      	lsrs	r3, r3, #20
 800bebc:	051b      	lsls	r3, r3, #20
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d1b9      	bne.n	800be36 <_strtod_l+0x76>
 800bec2:	f001 fca5 	bl	800d810 <__errno>
 800bec6:	2322      	movs	r3, #34	; 0x22
 800bec8:	6003      	str	r3, [r0, #0]
 800beca:	e7b4      	b.n	800be36 <_strtod_l+0x76>
 800becc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800bed0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bed4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bed8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800bedc:	e7e7      	b.n	800beae <_strtod_l+0xee>
 800bede:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c058 <_strtod_l+0x298>
 800bee2:	e7e4      	b.n	800beae <_strtod_l+0xee>
 800bee4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800bee8:	f04f 38ff 	mov.w	r8, #4294967295
 800beec:	e7df      	b.n	800beae <_strtod_l+0xee>
 800beee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	9215      	str	r2, [sp, #84]	; 0x54
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	2b30      	cmp	r3, #48	; 0x30
 800bef8:	d0f9      	beq.n	800beee <_strtod_l+0x12e>
 800befa:	2b00      	cmp	r3, #0
 800befc:	d09b      	beq.n	800be36 <_strtod_l+0x76>
 800befe:	2301      	movs	r3, #1
 800bf00:	f04f 0a00 	mov.w	sl, #0
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf08:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf0a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bf0e:	46d3      	mov	fp, sl
 800bf10:	220a      	movs	r2, #10
 800bf12:	9815      	ldr	r0, [sp, #84]	; 0x54
 800bf14:	7806      	ldrb	r6, [r0, #0]
 800bf16:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bf1a:	b2d9      	uxtb	r1, r3
 800bf1c:	2909      	cmp	r1, #9
 800bf1e:	d926      	bls.n	800bf6e <_strtod_l+0x1ae>
 800bf20:	494c      	ldr	r1, [pc, #304]	; (800c054 <_strtod_l+0x294>)
 800bf22:	2201      	movs	r2, #1
 800bf24:	f001 fc18 	bl	800d758 <strncmp>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d030      	beq.n	800bf8e <_strtod_l+0x1ce>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	4632      	mov	r2, r6
 800bf30:	9005      	str	r0, [sp, #20]
 800bf32:	465e      	mov	r6, fp
 800bf34:	4603      	mov	r3, r0
 800bf36:	2a65      	cmp	r2, #101	; 0x65
 800bf38:	d001      	beq.n	800bf3e <_strtod_l+0x17e>
 800bf3a:	2a45      	cmp	r2, #69	; 0x45
 800bf3c:	d113      	bne.n	800bf66 <_strtod_l+0x1a6>
 800bf3e:	b91e      	cbnz	r6, 800bf48 <_strtod_l+0x188>
 800bf40:	9a04      	ldr	r2, [sp, #16]
 800bf42:	4302      	orrs	r2, r0
 800bf44:	d094      	beq.n	800be70 <_strtod_l+0xb0>
 800bf46:	2600      	movs	r6, #0
 800bf48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bf4a:	1c6a      	adds	r2, r5, #1
 800bf4c:	9215      	str	r2, [sp, #84]	; 0x54
 800bf4e:	786a      	ldrb	r2, [r5, #1]
 800bf50:	2a2b      	cmp	r2, #43	; 0x2b
 800bf52:	d074      	beq.n	800c03e <_strtod_l+0x27e>
 800bf54:	2a2d      	cmp	r2, #45	; 0x2d
 800bf56:	d078      	beq.n	800c04a <_strtod_l+0x28a>
 800bf58:	f04f 0c00 	mov.w	ip, #0
 800bf5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bf60:	2909      	cmp	r1, #9
 800bf62:	d97f      	bls.n	800c064 <_strtod_l+0x2a4>
 800bf64:	9515      	str	r5, [sp, #84]	; 0x54
 800bf66:	2700      	movs	r7, #0
 800bf68:	e09e      	b.n	800c0a8 <_strtod_l+0x2e8>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	e7c8      	b.n	800bf00 <_strtod_l+0x140>
 800bf6e:	f1bb 0f08 	cmp.w	fp, #8
 800bf72:	bfd8      	it	le
 800bf74:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bf76:	f100 0001 	add.w	r0, r0, #1
 800bf7a:	bfda      	itte	le
 800bf7c:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf80:	9309      	strle	r3, [sp, #36]	; 0x24
 800bf82:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bf86:	f10b 0b01 	add.w	fp, fp, #1
 800bf8a:	9015      	str	r0, [sp, #84]	; 0x54
 800bf8c:	e7c1      	b.n	800bf12 <_strtod_l+0x152>
 800bf8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf90:	1c5a      	adds	r2, r3, #1
 800bf92:	9215      	str	r2, [sp, #84]	; 0x54
 800bf94:	785a      	ldrb	r2, [r3, #1]
 800bf96:	f1bb 0f00 	cmp.w	fp, #0
 800bf9a:	d037      	beq.n	800c00c <_strtod_l+0x24c>
 800bf9c:	9005      	str	r0, [sp, #20]
 800bf9e:	465e      	mov	r6, fp
 800bfa0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bfa4:	2b09      	cmp	r3, #9
 800bfa6:	d912      	bls.n	800bfce <_strtod_l+0x20e>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e7c4      	b.n	800bf36 <_strtod_l+0x176>
 800bfac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfae:	1c5a      	adds	r2, r3, #1
 800bfb0:	9215      	str	r2, [sp, #84]	; 0x54
 800bfb2:	785a      	ldrb	r2, [r3, #1]
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	2a30      	cmp	r2, #48	; 0x30
 800bfb8:	d0f8      	beq.n	800bfac <_strtod_l+0x1ec>
 800bfba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bfbe:	2b08      	cmp	r3, #8
 800bfc0:	f200 84c1 	bhi.w	800c946 <_strtod_l+0xb86>
 800bfc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfc6:	9005      	str	r0, [sp, #20]
 800bfc8:	2000      	movs	r0, #0
 800bfca:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfcc:	4606      	mov	r6, r0
 800bfce:	3a30      	subs	r2, #48	; 0x30
 800bfd0:	f100 0301 	add.w	r3, r0, #1
 800bfd4:	d014      	beq.n	800c000 <_strtod_l+0x240>
 800bfd6:	9905      	ldr	r1, [sp, #20]
 800bfd8:	4419      	add	r1, r3
 800bfda:	9105      	str	r1, [sp, #20]
 800bfdc:	4633      	mov	r3, r6
 800bfde:	eb00 0c06 	add.w	ip, r0, r6
 800bfe2:	210a      	movs	r1, #10
 800bfe4:	4563      	cmp	r3, ip
 800bfe6:	d113      	bne.n	800c010 <_strtod_l+0x250>
 800bfe8:	1833      	adds	r3, r6, r0
 800bfea:	2b08      	cmp	r3, #8
 800bfec:	f106 0601 	add.w	r6, r6, #1
 800bff0:	4406      	add	r6, r0
 800bff2:	dc1a      	bgt.n	800c02a <_strtod_l+0x26a>
 800bff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bff6:	230a      	movs	r3, #10
 800bff8:	fb03 2301 	mla	r3, r3, r1, r2
 800bffc:	9309      	str	r3, [sp, #36]	; 0x24
 800bffe:	2300      	movs	r3, #0
 800c000:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c002:	1c51      	adds	r1, r2, #1
 800c004:	9115      	str	r1, [sp, #84]	; 0x54
 800c006:	7852      	ldrb	r2, [r2, #1]
 800c008:	4618      	mov	r0, r3
 800c00a:	e7c9      	b.n	800bfa0 <_strtod_l+0x1e0>
 800c00c:	4658      	mov	r0, fp
 800c00e:	e7d2      	b.n	800bfb6 <_strtod_l+0x1f6>
 800c010:	2b08      	cmp	r3, #8
 800c012:	f103 0301 	add.w	r3, r3, #1
 800c016:	dc03      	bgt.n	800c020 <_strtod_l+0x260>
 800c018:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c01a:	434f      	muls	r7, r1
 800c01c:	9709      	str	r7, [sp, #36]	; 0x24
 800c01e:	e7e1      	b.n	800bfe4 <_strtod_l+0x224>
 800c020:	2b10      	cmp	r3, #16
 800c022:	bfd8      	it	le
 800c024:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c028:	e7dc      	b.n	800bfe4 <_strtod_l+0x224>
 800c02a:	2e10      	cmp	r6, #16
 800c02c:	bfdc      	itt	le
 800c02e:	230a      	movle	r3, #10
 800c030:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c034:	e7e3      	b.n	800bffe <_strtod_l+0x23e>
 800c036:	2300      	movs	r3, #0
 800c038:	9305      	str	r3, [sp, #20]
 800c03a:	2301      	movs	r3, #1
 800c03c:	e780      	b.n	800bf40 <_strtod_l+0x180>
 800c03e:	f04f 0c00 	mov.w	ip, #0
 800c042:	1caa      	adds	r2, r5, #2
 800c044:	9215      	str	r2, [sp, #84]	; 0x54
 800c046:	78aa      	ldrb	r2, [r5, #2]
 800c048:	e788      	b.n	800bf5c <_strtod_l+0x19c>
 800c04a:	f04f 0c01 	mov.w	ip, #1
 800c04e:	e7f8      	b.n	800c042 <_strtod_l+0x282>
 800c050:	080108d0 	.word	0x080108d0
 800c054:	080108cc 	.word	0x080108cc
 800c058:	7ff00000 	.word	0x7ff00000
 800c05c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c05e:	1c51      	adds	r1, r2, #1
 800c060:	9115      	str	r1, [sp, #84]	; 0x54
 800c062:	7852      	ldrb	r2, [r2, #1]
 800c064:	2a30      	cmp	r2, #48	; 0x30
 800c066:	d0f9      	beq.n	800c05c <_strtod_l+0x29c>
 800c068:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c06c:	2908      	cmp	r1, #8
 800c06e:	f63f af7a 	bhi.w	800bf66 <_strtod_l+0x1a6>
 800c072:	3a30      	subs	r2, #48	; 0x30
 800c074:	9208      	str	r2, [sp, #32]
 800c076:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c078:	920c      	str	r2, [sp, #48]	; 0x30
 800c07a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c07c:	1c57      	adds	r7, r2, #1
 800c07e:	9715      	str	r7, [sp, #84]	; 0x54
 800c080:	7852      	ldrb	r2, [r2, #1]
 800c082:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c086:	f1be 0f09 	cmp.w	lr, #9
 800c08a:	d938      	bls.n	800c0fe <_strtod_l+0x33e>
 800c08c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c08e:	1a7f      	subs	r7, r7, r1
 800c090:	2f08      	cmp	r7, #8
 800c092:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c096:	dc03      	bgt.n	800c0a0 <_strtod_l+0x2e0>
 800c098:	9908      	ldr	r1, [sp, #32]
 800c09a:	428f      	cmp	r7, r1
 800c09c:	bfa8      	it	ge
 800c09e:	460f      	movge	r7, r1
 800c0a0:	f1bc 0f00 	cmp.w	ip, #0
 800c0a4:	d000      	beq.n	800c0a8 <_strtod_l+0x2e8>
 800c0a6:	427f      	negs	r7, r7
 800c0a8:	2e00      	cmp	r6, #0
 800c0aa:	d14f      	bne.n	800c14c <_strtod_l+0x38c>
 800c0ac:	9904      	ldr	r1, [sp, #16]
 800c0ae:	4301      	orrs	r1, r0
 800c0b0:	f47f aec1 	bne.w	800be36 <_strtod_l+0x76>
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f47f aedb 	bne.w	800be70 <_strtod_l+0xb0>
 800c0ba:	2a69      	cmp	r2, #105	; 0x69
 800c0bc:	d029      	beq.n	800c112 <_strtod_l+0x352>
 800c0be:	dc26      	bgt.n	800c10e <_strtod_l+0x34e>
 800c0c0:	2a49      	cmp	r2, #73	; 0x49
 800c0c2:	d026      	beq.n	800c112 <_strtod_l+0x352>
 800c0c4:	2a4e      	cmp	r2, #78	; 0x4e
 800c0c6:	f47f aed3 	bne.w	800be70 <_strtod_l+0xb0>
 800c0ca:	499b      	ldr	r1, [pc, #620]	; (800c338 <_strtod_l+0x578>)
 800c0cc:	a815      	add	r0, sp, #84	; 0x54
 800c0ce:	f002 fd59 	bl	800eb84 <__match>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f43f aecc 	beq.w	800be70 <_strtod_l+0xb0>
 800c0d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b28      	cmp	r3, #40	; 0x28
 800c0de:	d12f      	bne.n	800c140 <_strtod_l+0x380>
 800c0e0:	4996      	ldr	r1, [pc, #600]	; (800c33c <_strtod_l+0x57c>)
 800c0e2:	aa18      	add	r2, sp, #96	; 0x60
 800c0e4:	a815      	add	r0, sp, #84	; 0x54
 800c0e6:	f002 fd61 	bl	800ebac <__hexnan>
 800c0ea:	2805      	cmp	r0, #5
 800c0ec:	d128      	bne.n	800c140 <_strtod_l+0x380>
 800c0ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c0f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c0f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c0fc:	e69b      	b.n	800be36 <_strtod_l+0x76>
 800c0fe:	9f08      	ldr	r7, [sp, #32]
 800c100:	210a      	movs	r1, #10
 800c102:	fb01 2107 	mla	r1, r1, r7, r2
 800c106:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c10a:	9208      	str	r2, [sp, #32]
 800c10c:	e7b5      	b.n	800c07a <_strtod_l+0x2ba>
 800c10e:	2a6e      	cmp	r2, #110	; 0x6e
 800c110:	e7d9      	b.n	800c0c6 <_strtod_l+0x306>
 800c112:	498b      	ldr	r1, [pc, #556]	; (800c340 <_strtod_l+0x580>)
 800c114:	a815      	add	r0, sp, #84	; 0x54
 800c116:	f002 fd35 	bl	800eb84 <__match>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	f43f aea8 	beq.w	800be70 <_strtod_l+0xb0>
 800c120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c122:	4988      	ldr	r1, [pc, #544]	; (800c344 <_strtod_l+0x584>)
 800c124:	3b01      	subs	r3, #1
 800c126:	a815      	add	r0, sp, #84	; 0x54
 800c128:	9315      	str	r3, [sp, #84]	; 0x54
 800c12a:	f002 fd2b 	bl	800eb84 <__match>
 800c12e:	b910      	cbnz	r0, 800c136 <_strtod_l+0x376>
 800c130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c132:	3301      	adds	r3, #1
 800c134:	9315      	str	r3, [sp, #84]	; 0x54
 800c136:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c354 <_strtod_l+0x594>
 800c13a:	f04f 0800 	mov.w	r8, #0
 800c13e:	e67a      	b.n	800be36 <_strtod_l+0x76>
 800c140:	4881      	ldr	r0, [pc, #516]	; (800c348 <_strtod_l+0x588>)
 800c142:	f001 fba1 	bl	800d888 <nan>
 800c146:	ec59 8b10 	vmov	r8, r9, d0
 800c14a:	e674      	b.n	800be36 <_strtod_l+0x76>
 800c14c:	9b05      	ldr	r3, [sp, #20]
 800c14e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c150:	1afb      	subs	r3, r7, r3
 800c152:	f1bb 0f00 	cmp.w	fp, #0
 800c156:	bf08      	it	eq
 800c158:	46b3      	moveq	fp, r6
 800c15a:	2e10      	cmp	r6, #16
 800c15c:	9308      	str	r3, [sp, #32]
 800c15e:	4635      	mov	r5, r6
 800c160:	bfa8      	it	ge
 800c162:	2510      	movge	r5, #16
 800c164:	f7f4 f9ce 	bl	8000504 <__aeabi_ui2d>
 800c168:	2e09      	cmp	r6, #9
 800c16a:	4680      	mov	r8, r0
 800c16c:	4689      	mov	r9, r1
 800c16e:	dd13      	ble.n	800c198 <_strtod_l+0x3d8>
 800c170:	4b76      	ldr	r3, [pc, #472]	; (800c34c <_strtod_l+0x58c>)
 800c172:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c176:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c17a:	f7f4 fa3d 	bl	80005f8 <__aeabi_dmul>
 800c17e:	4680      	mov	r8, r0
 800c180:	4650      	mov	r0, sl
 800c182:	4689      	mov	r9, r1
 800c184:	f7f4 f9be 	bl	8000504 <__aeabi_ui2d>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	4640      	mov	r0, r8
 800c18e:	4649      	mov	r1, r9
 800c190:	f7f4 f87c 	bl	800028c <__adddf3>
 800c194:	4680      	mov	r8, r0
 800c196:	4689      	mov	r9, r1
 800c198:	2e0f      	cmp	r6, #15
 800c19a:	dc38      	bgt.n	800c20e <_strtod_l+0x44e>
 800c19c:	9b08      	ldr	r3, [sp, #32]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f43f ae49 	beq.w	800be36 <_strtod_l+0x76>
 800c1a4:	dd24      	ble.n	800c1f0 <_strtod_l+0x430>
 800c1a6:	2b16      	cmp	r3, #22
 800c1a8:	dc0b      	bgt.n	800c1c2 <_strtod_l+0x402>
 800c1aa:	4968      	ldr	r1, [pc, #416]	; (800c34c <_strtod_l+0x58c>)
 800c1ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1b4:	4642      	mov	r2, r8
 800c1b6:	464b      	mov	r3, r9
 800c1b8:	f7f4 fa1e 	bl	80005f8 <__aeabi_dmul>
 800c1bc:	4680      	mov	r8, r0
 800c1be:	4689      	mov	r9, r1
 800c1c0:	e639      	b.n	800be36 <_strtod_l+0x76>
 800c1c2:	9a08      	ldr	r2, [sp, #32]
 800c1c4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	db20      	blt.n	800c20e <_strtod_l+0x44e>
 800c1cc:	4c5f      	ldr	r4, [pc, #380]	; (800c34c <_strtod_l+0x58c>)
 800c1ce:	f1c6 060f 	rsb	r6, r6, #15
 800c1d2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c1d6:	4642      	mov	r2, r8
 800c1d8:	464b      	mov	r3, r9
 800c1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1de:	f7f4 fa0b 	bl	80005f8 <__aeabi_dmul>
 800c1e2:	9b08      	ldr	r3, [sp, #32]
 800c1e4:	1b9e      	subs	r6, r3, r6
 800c1e6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c1ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c1ee:	e7e3      	b.n	800c1b8 <_strtod_l+0x3f8>
 800c1f0:	9b08      	ldr	r3, [sp, #32]
 800c1f2:	3316      	adds	r3, #22
 800c1f4:	db0b      	blt.n	800c20e <_strtod_l+0x44e>
 800c1f6:	9b05      	ldr	r3, [sp, #20]
 800c1f8:	1bdf      	subs	r7, r3, r7
 800c1fa:	4b54      	ldr	r3, [pc, #336]	; (800c34c <_strtod_l+0x58c>)
 800c1fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c200:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c204:	4640      	mov	r0, r8
 800c206:	4649      	mov	r1, r9
 800c208:	f7f4 fb20 	bl	800084c <__aeabi_ddiv>
 800c20c:	e7d6      	b.n	800c1bc <_strtod_l+0x3fc>
 800c20e:	9b08      	ldr	r3, [sp, #32]
 800c210:	1b75      	subs	r5, r6, r5
 800c212:	441d      	add	r5, r3
 800c214:	2d00      	cmp	r5, #0
 800c216:	dd70      	ble.n	800c2fa <_strtod_l+0x53a>
 800c218:	f015 030f 	ands.w	r3, r5, #15
 800c21c:	d00a      	beq.n	800c234 <_strtod_l+0x474>
 800c21e:	494b      	ldr	r1, [pc, #300]	; (800c34c <_strtod_l+0x58c>)
 800c220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c224:	4642      	mov	r2, r8
 800c226:	464b      	mov	r3, r9
 800c228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	4680      	mov	r8, r0
 800c232:	4689      	mov	r9, r1
 800c234:	f035 050f 	bics.w	r5, r5, #15
 800c238:	d04d      	beq.n	800c2d6 <_strtod_l+0x516>
 800c23a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c23e:	dd22      	ble.n	800c286 <_strtod_l+0x4c6>
 800c240:	2500      	movs	r5, #0
 800c242:	46ab      	mov	fp, r5
 800c244:	9509      	str	r5, [sp, #36]	; 0x24
 800c246:	9505      	str	r5, [sp, #20]
 800c248:	2322      	movs	r3, #34	; 0x22
 800c24a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c354 <_strtod_l+0x594>
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	f04f 0800 	mov.w	r8, #0
 800c254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c256:	2b00      	cmp	r3, #0
 800c258:	f43f aded 	beq.w	800be36 <_strtod_l+0x76>
 800c25c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c25e:	4620      	mov	r0, r4
 800c260:	f002 fe46 	bl	800eef0 <_Bfree>
 800c264:	9905      	ldr	r1, [sp, #20]
 800c266:	4620      	mov	r0, r4
 800c268:	f002 fe42 	bl	800eef0 <_Bfree>
 800c26c:	4659      	mov	r1, fp
 800c26e:	4620      	mov	r0, r4
 800c270:	f002 fe3e 	bl	800eef0 <_Bfree>
 800c274:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c276:	4620      	mov	r0, r4
 800c278:	f002 fe3a 	bl	800eef0 <_Bfree>
 800c27c:	4629      	mov	r1, r5
 800c27e:	4620      	mov	r0, r4
 800c280:	f002 fe36 	bl	800eef0 <_Bfree>
 800c284:	e5d7      	b.n	800be36 <_strtod_l+0x76>
 800c286:	4b32      	ldr	r3, [pc, #200]	; (800c350 <_strtod_l+0x590>)
 800c288:	9304      	str	r3, [sp, #16]
 800c28a:	2300      	movs	r3, #0
 800c28c:	112d      	asrs	r5, r5, #4
 800c28e:	4640      	mov	r0, r8
 800c290:	4649      	mov	r1, r9
 800c292:	469a      	mov	sl, r3
 800c294:	2d01      	cmp	r5, #1
 800c296:	dc21      	bgt.n	800c2dc <_strtod_l+0x51c>
 800c298:	b10b      	cbz	r3, 800c29e <_strtod_l+0x4de>
 800c29a:	4680      	mov	r8, r0
 800c29c:	4689      	mov	r9, r1
 800c29e:	492c      	ldr	r1, [pc, #176]	; (800c350 <_strtod_l+0x590>)
 800c2a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c2a4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2b0:	f7f4 f9a2 	bl	80005f8 <__aeabi_dmul>
 800c2b4:	4b27      	ldr	r3, [pc, #156]	; (800c354 <_strtod_l+0x594>)
 800c2b6:	460a      	mov	r2, r1
 800c2b8:	400b      	ands	r3, r1
 800c2ba:	4927      	ldr	r1, [pc, #156]	; (800c358 <_strtod_l+0x598>)
 800c2bc:	428b      	cmp	r3, r1
 800c2be:	4680      	mov	r8, r0
 800c2c0:	d8be      	bhi.n	800c240 <_strtod_l+0x480>
 800c2c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c2c6:	428b      	cmp	r3, r1
 800c2c8:	bf86      	itte	hi
 800c2ca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c35c <_strtod_l+0x59c>
 800c2ce:	f04f 38ff 	movhi.w	r8, #4294967295
 800c2d2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9304      	str	r3, [sp, #16]
 800c2da:	e07b      	b.n	800c3d4 <_strtod_l+0x614>
 800c2dc:	07ea      	lsls	r2, r5, #31
 800c2de:	d505      	bpl.n	800c2ec <_strtod_l+0x52c>
 800c2e0:	9b04      	ldr	r3, [sp, #16]
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	f7f4 f987 	bl	80005f8 <__aeabi_dmul>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	9a04      	ldr	r2, [sp, #16]
 800c2ee:	3208      	adds	r2, #8
 800c2f0:	f10a 0a01 	add.w	sl, sl, #1
 800c2f4:	106d      	asrs	r5, r5, #1
 800c2f6:	9204      	str	r2, [sp, #16]
 800c2f8:	e7cc      	b.n	800c294 <_strtod_l+0x4d4>
 800c2fa:	d0ec      	beq.n	800c2d6 <_strtod_l+0x516>
 800c2fc:	426d      	negs	r5, r5
 800c2fe:	f015 020f 	ands.w	r2, r5, #15
 800c302:	d00a      	beq.n	800c31a <_strtod_l+0x55a>
 800c304:	4b11      	ldr	r3, [pc, #68]	; (800c34c <_strtod_l+0x58c>)
 800c306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c30a:	4640      	mov	r0, r8
 800c30c:	4649      	mov	r1, r9
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	f7f4 fa9b 	bl	800084c <__aeabi_ddiv>
 800c316:	4680      	mov	r8, r0
 800c318:	4689      	mov	r9, r1
 800c31a:	112d      	asrs	r5, r5, #4
 800c31c:	d0db      	beq.n	800c2d6 <_strtod_l+0x516>
 800c31e:	2d1f      	cmp	r5, #31
 800c320:	dd1e      	ble.n	800c360 <_strtod_l+0x5a0>
 800c322:	2500      	movs	r5, #0
 800c324:	46ab      	mov	fp, r5
 800c326:	9509      	str	r5, [sp, #36]	; 0x24
 800c328:	9505      	str	r5, [sp, #20]
 800c32a:	2322      	movs	r3, #34	; 0x22
 800c32c:	f04f 0800 	mov.w	r8, #0
 800c330:	f04f 0900 	mov.w	r9, #0
 800c334:	6023      	str	r3, [r4, #0]
 800c336:	e78d      	b.n	800c254 <_strtod_l+0x494>
 800c338:	08010a2e 	.word	0x08010a2e
 800c33c:	080108e4 	.word	0x080108e4
 800c340:	08010a26 	.word	0x08010a26
 800c344:	08010a60 	.word	0x08010a60
 800c348:	08010cf0 	.word	0x08010cf0
 800c34c:	08010bd0 	.word	0x08010bd0
 800c350:	08010ba8 	.word	0x08010ba8
 800c354:	7ff00000 	.word	0x7ff00000
 800c358:	7ca00000 	.word	0x7ca00000
 800c35c:	7fefffff 	.word	0x7fefffff
 800c360:	f015 0310 	ands.w	r3, r5, #16
 800c364:	bf18      	it	ne
 800c366:	236a      	movne	r3, #106	; 0x6a
 800c368:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c70c <_strtod_l+0x94c>
 800c36c:	9304      	str	r3, [sp, #16]
 800c36e:	4640      	mov	r0, r8
 800c370:	4649      	mov	r1, r9
 800c372:	2300      	movs	r3, #0
 800c374:	07ea      	lsls	r2, r5, #31
 800c376:	d504      	bpl.n	800c382 <_strtod_l+0x5c2>
 800c378:	e9da 2300 	ldrd	r2, r3, [sl]
 800c37c:	f7f4 f93c 	bl	80005f8 <__aeabi_dmul>
 800c380:	2301      	movs	r3, #1
 800c382:	106d      	asrs	r5, r5, #1
 800c384:	f10a 0a08 	add.w	sl, sl, #8
 800c388:	d1f4      	bne.n	800c374 <_strtod_l+0x5b4>
 800c38a:	b10b      	cbz	r3, 800c390 <_strtod_l+0x5d0>
 800c38c:	4680      	mov	r8, r0
 800c38e:	4689      	mov	r9, r1
 800c390:	9b04      	ldr	r3, [sp, #16]
 800c392:	b1bb      	cbz	r3, 800c3c4 <_strtod_l+0x604>
 800c394:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c398:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	4649      	mov	r1, r9
 800c3a0:	dd10      	ble.n	800c3c4 <_strtod_l+0x604>
 800c3a2:	2b1f      	cmp	r3, #31
 800c3a4:	f340 811e 	ble.w	800c5e4 <_strtod_l+0x824>
 800c3a8:	2b34      	cmp	r3, #52	; 0x34
 800c3aa:	bfde      	ittt	le
 800c3ac:	f04f 33ff 	movle.w	r3, #4294967295
 800c3b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c3b4:	4093      	lslle	r3, r2
 800c3b6:	f04f 0800 	mov.w	r8, #0
 800c3ba:	bfcc      	ite	gt
 800c3bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c3c0:	ea03 0901 	andle.w	r9, r3, r1
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	4640      	mov	r0, r8
 800c3ca:	4649      	mov	r1, r9
 800c3cc:	f7f4 fb7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d1a6      	bne.n	800c322 <_strtod_l+0x562>
 800c3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c3da:	4633      	mov	r3, r6
 800c3dc:	465a      	mov	r2, fp
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f002 fdee 	bl	800efc0 <__s2b>
 800c3e4:	9009      	str	r0, [sp, #36]	; 0x24
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f43f af2a 	beq.w	800c240 <_strtod_l+0x480>
 800c3ec:	9a08      	ldr	r2, [sp, #32]
 800c3ee:	9b05      	ldr	r3, [sp, #20]
 800c3f0:	2a00      	cmp	r2, #0
 800c3f2:	eba3 0307 	sub.w	r3, r3, r7
 800c3f6:	bfa8      	it	ge
 800c3f8:	2300      	movge	r3, #0
 800c3fa:	930c      	str	r3, [sp, #48]	; 0x30
 800c3fc:	2500      	movs	r5, #0
 800c3fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c402:	9312      	str	r3, [sp, #72]	; 0x48
 800c404:	46ab      	mov	fp, r5
 800c406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c408:	4620      	mov	r0, r4
 800c40a:	6859      	ldr	r1, [r3, #4]
 800c40c:	f002 fd30 	bl	800ee70 <_Balloc>
 800c410:	9005      	str	r0, [sp, #20]
 800c412:	2800      	cmp	r0, #0
 800c414:	f43f af18 	beq.w	800c248 <_strtod_l+0x488>
 800c418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c41a:	691a      	ldr	r2, [r3, #16]
 800c41c:	3202      	adds	r2, #2
 800c41e:	f103 010c 	add.w	r1, r3, #12
 800c422:	0092      	lsls	r2, r2, #2
 800c424:	300c      	adds	r0, #12
 800c426:	f001 fa20 	bl	800d86a <memcpy>
 800c42a:	ec49 8b10 	vmov	d0, r8, r9
 800c42e:	aa18      	add	r2, sp, #96	; 0x60
 800c430:	a917      	add	r1, sp, #92	; 0x5c
 800c432:	4620      	mov	r0, r4
 800c434:	f003 f8f8 	bl	800f628 <__d2b>
 800c438:	ec49 8b18 	vmov	d8, r8, r9
 800c43c:	9016      	str	r0, [sp, #88]	; 0x58
 800c43e:	2800      	cmp	r0, #0
 800c440:	f43f af02 	beq.w	800c248 <_strtod_l+0x488>
 800c444:	2101      	movs	r1, #1
 800c446:	4620      	mov	r0, r4
 800c448:	f002 fe52 	bl	800f0f0 <__i2b>
 800c44c:	4683      	mov	fp, r0
 800c44e:	2800      	cmp	r0, #0
 800c450:	f43f aefa 	beq.w	800c248 <_strtod_l+0x488>
 800c454:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c456:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c458:	2e00      	cmp	r6, #0
 800c45a:	bfab      	itete	ge
 800c45c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c45e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c460:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c462:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c466:	bfac      	ite	ge
 800c468:	eb06 0a03 	addge.w	sl, r6, r3
 800c46c:	1b9f      	sublt	r7, r3, r6
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	1af6      	subs	r6, r6, r3
 800c472:	4416      	add	r6, r2
 800c474:	4ba0      	ldr	r3, [pc, #640]	; (800c6f8 <_strtod_l+0x938>)
 800c476:	3e01      	subs	r6, #1
 800c478:	429e      	cmp	r6, r3
 800c47a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c47e:	f280 80c4 	bge.w	800c60a <_strtod_l+0x84a>
 800c482:	1b9b      	subs	r3, r3, r6
 800c484:	2b1f      	cmp	r3, #31
 800c486:	eba2 0203 	sub.w	r2, r2, r3
 800c48a:	f04f 0101 	mov.w	r1, #1
 800c48e:	f300 80b0 	bgt.w	800c5f2 <_strtod_l+0x832>
 800c492:	fa01 f303 	lsl.w	r3, r1, r3
 800c496:	930e      	str	r3, [sp, #56]	; 0x38
 800c498:	2300      	movs	r3, #0
 800c49a:	930d      	str	r3, [sp, #52]	; 0x34
 800c49c:	eb0a 0602 	add.w	r6, sl, r2
 800c4a0:	9b04      	ldr	r3, [sp, #16]
 800c4a2:	45b2      	cmp	sl, r6
 800c4a4:	4417      	add	r7, r2
 800c4a6:	441f      	add	r7, r3
 800c4a8:	4653      	mov	r3, sl
 800c4aa:	bfa8      	it	ge
 800c4ac:	4633      	movge	r3, r6
 800c4ae:	42bb      	cmp	r3, r7
 800c4b0:	bfa8      	it	ge
 800c4b2:	463b      	movge	r3, r7
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	bfc2      	ittt	gt
 800c4b8:	1af6      	subgt	r6, r6, r3
 800c4ba:	1aff      	subgt	r7, r7, r3
 800c4bc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dd17      	ble.n	800c4f6 <_strtod_l+0x736>
 800c4c6:	4659      	mov	r1, fp
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f002 fed0 	bl	800f270 <__pow5mult>
 800c4d0:	4683      	mov	fp, r0
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f43f aeb8 	beq.w	800c248 <_strtod_l+0x488>
 800c4d8:	4601      	mov	r1, r0
 800c4da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f002 fe1d 	bl	800f11c <__multiply>
 800c4e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f43f aeaf 	beq.w	800c248 <_strtod_l+0x488>
 800c4ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f002 fcff 	bl	800eef0 <_Bfree>
 800c4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4f4:	9316      	str	r3, [sp, #88]	; 0x58
 800c4f6:	2e00      	cmp	r6, #0
 800c4f8:	f300 808c 	bgt.w	800c614 <_strtod_l+0x854>
 800c4fc:	9b08      	ldr	r3, [sp, #32]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	dd08      	ble.n	800c514 <_strtod_l+0x754>
 800c502:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c504:	9905      	ldr	r1, [sp, #20]
 800c506:	4620      	mov	r0, r4
 800c508:	f002 feb2 	bl	800f270 <__pow5mult>
 800c50c:	9005      	str	r0, [sp, #20]
 800c50e:	2800      	cmp	r0, #0
 800c510:	f43f ae9a 	beq.w	800c248 <_strtod_l+0x488>
 800c514:	2f00      	cmp	r7, #0
 800c516:	dd08      	ble.n	800c52a <_strtod_l+0x76a>
 800c518:	9905      	ldr	r1, [sp, #20]
 800c51a:	463a      	mov	r2, r7
 800c51c:	4620      	mov	r0, r4
 800c51e:	f002 ff01 	bl	800f324 <__lshift>
 800c522:	9005      	str	r0, [sp, #20]
 800c524:	2800      	cmp	r0, #0
 800c526:	f43f ae8f 	beq.w	800c248 <_strtod_l+0x488>
 800c52a:	f1ba 0f00 	cmp.w	sl, #0
 800c52e:	dd08      	ble.n	800c542 <_strtod_l+0x782>
 800c530:	4659      	mov	r1, fp
 800c532:	4652      	mov	r2, sl
 800c534:	4620      	mov	r0, r4
 800c536:	f002 fef5 	bl	800f324 <__lshift>
 800c53a:	4683      	mov	fp, r0
 800c53c:	2800      	cmp	r0, #0
 800c53e:	f43f ae83 	beq.w	800c248 <_strtod_l+0x488>
 800c542:	9a05      	ldr	r2, [sp, #20]
 800c544:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c546:	4620      	mov	r0, r4
 800c548:	f002 ff74 	bl	800f434 <__mdiff>
 800c54c:	4605      	mov	r5, r0
 800c54e:	2800      	cmp	r0, #0
 800c550:	f43f ae7a 	beq.w	800c248 <_strtod_l+0x488>
 800c554:	68c3      	ldr	r3, [r0, #12]
 800c556:	930b      	str	r3, [sp, #44]	; 0x2c
 800c558:	2300      	movs	r3, #0
 800c55a:	60c3      	str	r3, [r0, #12]
 800c55c:	4659      	mov	r1, fp
 800c55e:	f002 ff4d 	bl	800f3fc <__mcmp>
 800c562:	2800      	cmp	r0, #0
 800c564:	da60      	bge.n	800c628 <_strtod_l+0x868>
 800c566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c568:	ea53 0308 	orrs.w	r3, r3, r8
 800c56c:	f040 8084 	bne.w	800c678 <_strtod_l+0x8b8>
 800c570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c574:	2b00      	cmp	r3, #0
 800c576:	d17f      	bne.n	800c678 <_strtod_l+0x8b8>
 800c578:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c57c:	0d1b      	lsrs	r3, r3, #20
 800c57e:	051b      	lsls	r3, r3, #20
 800c580:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c584:	d978      	bls.n	800c678 <_strtod_l+0x8b8>
 800c586:	696b      	ldr	r3, [r5, #20]
 800c588:	b913      	cbnz	r3, 800c590 <_strtod_l+0x7d0>
 800c58a:	692b      	ldr	r3, [r5, #16]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	dd73      	ble.n	800c678 <_strtod_l+0x8b8>
 800c590:	4629      	mov	r1, r5
 800c592:	2201      	movs	r2, #1
 800c594:	4620      	mov	r0, r4
 800c596:	f002 fec5 	bl	800f324 <__lshift>
 800c59a:	4659      	mov	r1, fp
 800c59c:	4605      	mov	r5, r0
 800c59e:	f002 ff2d 	bl	800f3fc <__mcmp>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	dd68      	ble.n	800c678 <_strtod_l+0x8b8>
 800c5a6:	9904      	ldr	r1, [sp, #16]
 800c5a8:	4a54      	ldr	r2, [pc, #336]	; (800c6fc <_strtod_l+0x93c>)
 800c5aa:	464b      	mov	r3, r9
 800c5ac:	2900      	cmp	r1, #0
 800c5ae:	f000 8084 	beq.w	800c6ba <_strtod_l+0x8fa>
 800c5b2:	ea02 0109 	and.w	r1, r2, r9
 800c5b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c5ba:	dc7e      	bgt.n	800c6ba <_strtod_l+0x8fa>
 800c5bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c5c0:	f77f aeb3 	ble.w	800c32a <_strtod_l+0x56a>
 800c5c4:	4b4e      	ldr	r3, [pc, #312]	; (800c700 <_strtod_l+0x940>)
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	4649      	mov	r1, r9
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f7f4 f814 	bl	80005f8 <__aeabi_dmul>
 800c5d0:	4b4a      	ldr	r3, [pc, #296]	; (800c6fc <_strtod_l+0x93c>)
 800c5d2:	400b      	ands	r3, r1
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	4689      	mov	r9, r1
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f47f ae3f 	bne.w	800c25c <_strtod_l+0x49c>
 800c5de:	2322      	movs	r3, #34	; 0x22
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	e63b      	b.n	800c25c <_strtod_l+0x49c>
 800c5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ec:	ea03 0808 	and.w	r8, r3, r8
 800c5f0:	e6e8      	b.n	800c3c4 <_strtod_l+0x604>
 800c5f2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c5f6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c5fa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c5fe:	36e2      	adds	r6, #226	; 0xe2
 800c600:	fa01 f306 	lsl.w	r3, r1, r6
 800c604:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c608:	e748      	b.n	800c49c <_strtod_l+0x6dc>
 800c60a:	2100      	movs	r1, #0
 800c60c:	2301      	movs	r3, #1
 800c60e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c612:	e743      	b.n	800c49c <_strtod_l+0x6dc>
 800c614:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c616:	4632      	mov	r2, r6
 800c618:	4620      	mov	r0, r4
 800c61a:	f002 fe83 	bl	800f324 <__lshift>
 800c61e:	9016      	str	r0, [sp, #88]	; 0x58
 800c620:	2800      	cmp	r0, #0
 800c622:	f47f af6b 	bne.w	800c4fc <_strtod_l+0x73c>
 800c626:	e60f      	b.n	800c248 <_strtod_l+0x488>
 800c628:	46ca      	mov	sl, r9
 800c62a:	d171      	bne.n	800c710 <_strtod_l+0x950>
 800c62c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c62e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c632:	b352      	cbz	r2, 800c68a <_strtod_l+0x8ca>
 800c634:	4a33      	ldr	r2, [pc, #204]	; (800c704 <_strtod_l+0x944>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d12a      	bne.n	800c690 <_strtod_l+0x8d0>
 800c63a:	9b04      	ldr	r3, [sp, #16]
 800c63c:	4641      	mov	r1, r8
 800c63e:	b1fb      	cbz	r3, 800c680 <_strtod_l+0x8c0>
 800c640:	4b2e      	ldr	r3, [pc, #184]	; (800c6fc <_strtod_l+0x93c>)
 800c642:	ea09 0303 	and.w	r3, r9, r3
 800c646:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c64a:	f04f 32ff 	mov.w	r2, #4294967295
 800c64e:	d81a      	bhi.n	800c686 <_strtod_l+0x8c6>
 800c650:	0d1b      	lsrs	r3, r3, #20
 800c652:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c656:	fa02 f303 	lsl.w	r3, r2, r3
 800c65a:	4299      	cmp	r1, r3
 800c65c:	d118      	bne.n	800c690 <_strtod_l+0x8d0>
 800c65e:	4b2a      	ldr	r3, [pc, #168]	; (800c708 <_strtod_l+0x948>)
 800c660:	459a      	cmp	sl, r3
 800c662:	d102      	bne.n	800c66a <_strtod_l+0x8aa>
 800c664:	3101      	adds	r1, #1
 800c666:	f43f adef 	beq.w	800c248 <_strtod_l+0x488>
 800c66a:	4b24      	ldr	r3, [pc, #144]	; (800c6fc <_strtod_l+0x93c>)
 800c66c:	ea0a 0303 	and.w	r3, sl, r3
 800c670:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c674:	f04f 0800 	mov.w	r8, #0
 800c678:	9b04      	ldr	r3, [sp, #16]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1a2      	bne.n	800c5c4 <_strtod_l+0x804>
 800c67e:	e5ed      	b.n	800c25c <_strtod_l+0x49c>
 800c680:	f04f 33ff 	mov.w	r3, #4294967295
 800c684:	e7e9      	b.n	800c65a <_strtod_l+0x89a>
 800c686:	4613      	mov	r3, r2
 800c688:	e7e7      	b.n	800c65a <_strtod_l+0x89a>
 800c68a:	ea53 0308 	orrs.w	r3, r3, r8
 800c68e:	d08a      	beq.n	800c5a6 <_strtod_l+0x7e6>
 800c690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c692:	b1e3      	cbz	r3, 800c6ce <_strtod_l+0x90e>
 800c694:	ea13 0f0a 	tst.w	r3, sl
 800c698:	d0ee      	beq.n	800c678 <_strtod_l+0x8b8>
 800c69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c69c:	9a04      	ldr	r2, [sp, #16]
 800c69e:	4640      	mov	r0, r8
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	b1c3      	cbz	r3, 800c6d6 <_strtod_l+0x916>
 800c6a4:	f7ff fb6d 	bl	800bd82 <sulp>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	ec51 0b18 	vmov	r0, r1, d8
 800c6b0:	f7f3 fdec 	bl	800028c <__adddf3>
 800c6b4:	4680      	mov	r8, r0
 800c6b6:	4689      	mov	r9, r1
 800c6b8:	e7de      	b.n	800c678 <_strtod_l+0x8b8>
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c6c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c6c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c6c8:	f04f 38ff 	mov.w	r8, #4294967295
 800c6cc:	e7d4      	b.n	800c678 <_strtod_l+0x8b8>
 800c6ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6d0:	ea13 0f08 	tst.w	r3, r8
 800c6d4:	e7e0      	b.n	800c698 <_strtod_l+0x8d8>
 800c6d6:	f7ff fb54 	bl	800bd82 <sulp>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	ec51 0b18 	vmov	r0, r1, d8
 800c6e2:	f7f3 fdd1 	bl	8000288 <__aeabi_dsub>
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	4680      	mov	r8, r0
 800c6ec:	4689      	mov	r9, r1
 800c6ee:	f7f4 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d0c0      	beq.n	800c678 <_strtod_l+0x8b8>
 800c6f6:	e618      	b.n	800c32a <_strtod_l+0x56a>
 800c6f8:	fffffc02 	.word	0xfffffc02
 800c6fc:	7ff00000 	.word	0x7ff00000
 800c700:	39500000 	.word	0x39500000
 800c704:	000fffff 	.word	0x000fffff
 800c708:	7fefffff 	.word	0x7fefffff
 800c70c:	080108f8 	.word	0x080108f8
 800c710:	4659      	mov	r1, fp
 800c712:	4628      	mov	r0, r5
 800c714:	f002 ffe2 	bl	800f6dc <__ratio>
 800c718:	ec57 6b10 	vmov	r6, r7, d0
 800c71c:	ee10 0a10 	vmov	r0, s0
 800c720:	2200      	movs	r2, #0
 800c722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c726:	4639      	mov	r1, r7
 800c728:	f7f4 f9e2 	bl	8000af0 <__aeabi_dcmple>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d071      	beq.n	800c814 <_strtod_l+0xa54>
 800c730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c732:	2b00      	cmp	r3, #0
 800c734:	d17c      	bne.n	800c830 <_strtod_l+0xa70>
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	d15a      	bne.n	800c7f2 <_strtod_l+0xa32>
 800c73c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c740:	2b00      	cmp	r3, #0
 800c742:	d15d      	bne.n	800c800 <_strtod_l+0xa40>
 800c744:	4b90      	ldr	r3, [pc, #576]	; (800c988 <_strtod_l+0xbc8>)
 800c746:	2200      	movs	r2, #0
 800c748:	4630      	mov	r0, r6
 800c74a:	4639      	mov	r1, r7
 800c74c:	f7f4 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800c750:	2800      	cmp	r0, #0
 800c752:	d15c      	bne.n	800c80e <_strtod_l+0xa4e>
 800c754:	4630      	mov	r0, r6
 800c756:	4639      	mov	r1, r7
 800c758:	4b8c      	ldr	r3, [pc, #560]	; (800c98c <_strtod_l+0xbcc>)
 800c75a:	2200      	movs	r2, #0
 800c75c:	f7f3 ff4c 	bl	80005f8 <__aeabi_dmul>
 800c760:	4606      	mov	r6, r0
 800c762:	460f      	mov	r7, r1
 800c764:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c768:	9606      	str	r6, [sp, #24]
 800c76a:	9307      	str	r3, [sp, #28]
 800c76c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c770:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c774:	4b86      	ldr	r3, [pc, #536]	; (800c990 <_strtod_l+0xbd0>)
 800c776:	ea0a 0303 	and.w	r3, sl, r3
 800c77a:	930d      	str	r3, [sp, #52]	; 0x34
 800c77c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c77e:	4b85      	ldr	r3, [pc, #532]	; (800c994 <_strtod_l+0xbd4>)
 800c780:	429a      	cmp	r2, r3
 800c782:	f040 8090 	bne.w	800c8a6 <_strtod_l+0xae6>
 800c786:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c78a:	ec49 8b10 	vmov	d0, r8, r9
 800c78e:	f002 fedb 	bl	800f548 <__ulp>
 800c792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c796:	ec51 0b10 	vmov	r0, r1, d0
 800c79a:	f7f3 ff2d 	bl	80005f8 <__aeabi_dmul>
 800c79e:	4642      	mov	r2, r8
 800c7a0:	464b      	mov	r3, r9
 800c7a2:	f7f3 fd73 	bl	800028c <__adddf3>
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4979      	ldr	r1, [pc, #484]	; (800c990 <_strtod_l+0xbd0>)
 800c7aa:	4a7b      	ldr	r2, [pc, #492]	; (800c998 <_strtod_l+0xbd8>)
 800c7ac:	4019      	ands	r1, r3
 800c7ae:	4291      	cmp	r1, r2
 800c7b0:	4680      	mov	r8, r0
 800c7b2:	d944      	bls.n	800c83e <_strtod_l+0xa7e>
 800c7b4:	ee18 2a90 	vmov	r2, s17
 800c7b8:	4b78      	ldr	r3, [pc, #480]	; (800c99c <_strtod_l+0xbdc>)
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d104      	bne.n	800c7c8 <_strtod_l+0xa08>
 800c7be:	ee18 3a10 	vmov	r3, s16
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	f43f ad40 	beq.w	800c248 <_strtod_l+0x488>
 800c7c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c99c <_strtod_l+0xbdc>
 800c7cc:	f04f 38ff 	mov.w	r8, #4294967295
 800c7d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f002 fb8c 	bl	800eef0 <_Bfree>
 800c7d8:	9905      	ldr	r1, [sp, #20]
 800c7da:	4620      	mov	r0, r4
 800c7dc:	f002 fb88 	bl	800eef0 <_Bfree>
 800c7e0:	4659      	mov	r1, fp
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f002 fb84 	bl	800eef0 <_Bfree>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f002 fb80 	bl	800eef0 <_Bfree>
 800c7f0:	e609      	b.n	800c406 <_strtod_l+0x646>
 800c7f2:	f1b8 0f01 	cmp.w	r8, #1
 800c7f6:	d103      	bne.n	800c800 <_strtod_l+0xa40>
 800c7f8:	f1b9 0f00 	cmp.w	r9, #0
 800c7fc:	f43f ad95 	beq.w	800c32a <_strtod_l+0x56a>
 800c800:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c958 <_strtod_l+0xb98>
 800c804:	4f60      	ldr	r7, [pc, #384]	; (800c988 <_strtod_l+0xbc8>)
 800c806:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c80a:	2600      	movs	r6, #0
 800c80c:	e7ae      	b.n	800c76c <_strtod_l+0x9ac>
 800c80e:	4f5f      	ldr	r7, [pc, #380]	; (800c98c <_strtod_l+0xbcc>)
 800c810:	2600      	movs	r6, #0
 800c812:	e7a7      	b.n	800c764 <_strtod_l+0x9a4>
 800c814:	4b5d      	ldr	r3, [pc, #372]	; (800c98c <_strtod_l+0xbcc>)
 800c816:	4630      	mov	r0, r6
 800c818:	4639      	mov	r1, r7
 800c81a:	2200      	movs	r2, #0
 800c81c:	f7f3 feec 	bl	80005f8 <__aeabi_dmul>
 800c820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c822:	4606      	mov	r6, r0
 800c824:	460f      	mov	r7, r1
 800c826:	2b00      	cmp	r3, #0
 800c828:	d09c      	beq.n	800c764 <_strtod_l+0x9a4>
 800c82a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c82e:	e79d      	b.n	800c76c <_strtod_l+0x9ac>
 800c830:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c960 <_strtod_l+0xba0>
 800c834:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c838:	ec57 6b17 	vmov	r6, r7, d7
 800c83c:	e796      	b.n	800c76c <_strtod_l+0x9ac>
 800c83e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c842:	9b04      	ldr	r3, [sp, #16]
 800c844:	46ca      	mov	sl, r9
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1c2      	bne.n	800c7d0 <_strtod_l+0xa10>
 800c84a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c84e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c850:	0d1b      	lsrs	r3, r3, #20
 800c852:	051b      	lsls	r3, r3, #20
 800c854:	429a      	cmp	r2, r3
 800c856:	d1bb      	bne.n	800c7d0 <_strtod_l+0xa10>
 800c858:	4630      	mov	r0, r6
 800c85a:	4639      	mov	r1, r7
 800c85c:	f7f4 fa2c 	bl	8000cb8 <__aeabi_d2lz>
 800c860:	f7f3 fe9c 	bl	800059c <__aeabi_l2d>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4630      	mov	r0, r6
 800c86a:	4639      	mov	r1, r7
 800c86c:	f7f3 fd0c 	bl	8000288 <__aeabi_dsub>
 800c870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c872:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c876:	ea43 0308 	orr.w	r3, r3, r8
 800c87a:	4313      	orrs	r3, r2
 800c87c:	4606      	mov	r6, r0
 800c87e:	460f      	mov	r7, r1
 800c880:	d054      	beq.n	800c92c <_strtod_l+0xb6c>
 800c882:	a339      	add	r3, pc, #228	; (adr r3, 800c968 <_strtod_l+0xba8>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f4 f928 	bl	8000adc <__aeabi_dcmplt>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	f47f ace5 	bne.w	800c25c <_strtod_l+0x49c>
 800c892:	a337      	add	r3, pc, #220	; (adr r3, 800c970 <_strtod_l+0xbb0>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	4630      	mov	r0, r6
 800c89a:	4639      	mov	r1, r7
 800c89c:	f7f4 f93c 	bl	8000b18 <__aeabi_dcmpgt>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d095      	beq.n	800c7d0 <_strtod_l+0xa10>
 800c8a4:	e4da      	b.n	800c25c <_strtod_l+0x49c>
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	b333      	cbz	r3, 800c8f8 <_strtod_l+0xb38>
 800c8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c8b0:	d822      	bhi.n	800c8f8 <_strtod_l+0xb38>
 800c8b2:	a331      	add	r3, pc, #196	; (adr r3, 800c978 <_strtod_l+0xbb8>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	f7f4 f918 	bl	8000af0 <__aeabi_dcmple>
 800c8c0:	b1a0      	cbz	r0, 800c8ec <_strtod_l+0xb2c>
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7f4 f96f 	bl	8000ba8 <__aeabi_d2uiz>
 800c8ca:	2801      	cmp	r0, #1
 800c8cc:	bf38      	it	cc
 800c8ce:	2001      	movcc	r0, #1
 800c8d0:	f7f3 fe18 	bl	8000504 <__aeabi_ui2d>
 800c8d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	460f      	mov	r7, r1
 800c8da:	bb23      	cbnz	r3, 800c926 <_strtod_l+0xb66>
 800c8dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8e0:	9010      	str	r0, [sp, #64]	; 0x40
 800c8e2:	9311      	str	r3, [sp, #68]	; 0x44
 800c8e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c8e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c8ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c8f4:	1a9b      	subs	r3, r3, r2
 800c8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c8fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c900:	eef0 0a68 	vmov.f32	s1, s17
 800c904:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c908:	f002 fe1e 	bl	800f548 <__ulp>
 800c90c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c910:	ec53 2b10 	vmov	r2, r3, d0
 800c914:	f7f3 fe70 	bl	80005f8 <__aeabi_dmul>
 800c918:	ec53 2b18 	vmov	r2, r3, d8
 800c91c:	f7f3 fcb6 	bl	800028c <__adddf3>
 800c920:	4680      	mov	r8, r0
 800c922:	4689      	mov	r9, r1
 800c924:	e78d      	b.n	800c842 <_strtod_l+0xa82>
 800c926:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c92a:	e7db      	b.n	800c8e4 <_strtod_l+0xb24>
 800c92c:	a314      	add	r3, pc, #80	; (adr r3, 800c980 <_strtod_l+0xbc0>)
 800c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c932:	f7f4 f8d3 	bl	8000adc <__aeabi_dcmplt>
 800c936:	e7b3      	b.n	800c8a0 <_strtod_l+0xae0>
 800c938:	2300      	movs	r3, #0
 800c93a:	930a      	str	r3, [sp, #40]	; 0x28
 800c93c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c93e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c940:	6013      	str	r3, [r2, #0]
 800c942:	f7ff ba7c 	b.w	800be3e <_strtod_l+0x7e>
 800c946:	2a65      	cmp	r2, #101	; 0x65
 800c948:	f43f ab75 	beq.w	800c036 <_strtod_l+0x276>
 800c94c:	2a45      	cmp	r2, #69	; 0x45
 800c94e:	f43f ab72 	beq.w	800c036 <_strtod_l+0x276>
 800c952:	2301      	movs	r3, #1
 800c954:	f7ff bbaa 	b.w	800c0ac <_strtod_l+0x2ec>
 800c958:	00000000 	.word	0x00000000
 800c95c:	bff00000 	.word	0xbff00000
 800c960:	00000000 	.word	0x00000000
 800c964:	3ff00000 	.word	0x3ff00000
 800c968:	94a03595 	.word	0x94a03595
 800c96c:	3fdfffff 	.word	0x3fdfffff
 800c970:	35afe535 	.word	0x35afe535
 800c974:	3fe00000 	.word	0x3fe00000
 800c978:	ffc00000 	.word	0xffc00000
 800c97c:	41dfffff 	.word	0x41dfffff
 800c980:	94a03595 	.word	0x94a03595
 800c984:	3fcfffff 	.word	0x3fcfffff
 800c988:	3ff00000 	.word	0x3ff00000
 800c98c:	3fe00000 	.word	0x3fe00000
 800c990:	7ff00000 	.word	0x7ff00000
 800c994:	7fe00000 	.word	0x7fe00000
 800c998:	7c9fffff 	.word	0x7c9fffff
 800c99c:	7fefffff 	.word	0x7fefffff

0800c9a0 <strtof>:
 800c9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ca68 <strtof+0xc8>
 800c9a8:	4b2a      	ldr	r3, [pc, #168]	; (800ca54 <strtof+0xb4>)
 800c9aa:	460a      	mov	r2, r1
 800c9ac:	ed2d 8b02 	vpush	{d8}
 800c9b0:	4601      	mov	r1, r0
 800c9b2:	f8d8 0000 	ldr.w	r0, [r8]
 800c9b6:	f7ff fa03 	bl	800bdc0 <_strtod_l>
 800c9ba:	ec55 4b10 	vmov	r4, r5, d0
 800c9be:	ee10 2a10 	vmov	r2, s0
 800c9c2:	ee10 0a10 	vmov	r0, s0
 800c9c6:	462b      	mov	r3, r5
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	f7f4 f8af 	bl	8000b2c <__aeabi_dcmpun>
 800c9ce:	b190      	cbz	r0, 800c9f6 <strtof+0x56>
 800c9d0:	2d00      	cmp	r5, #0
 800c9d2:	4821      	ldr	r0, [pc, #132]	; (800ca58 <strtof+0xb8>)
 800c9d4:	da09      	bge.n	800c9ea <strtof+0x4a>
 800c9d6:	f000 ff5f 	bl	800d898 <nanf>
 800c9da:	eeb1 8a40 	vneg.f32	s16, s0
 800c9de:	eeb0 0a48 	vmov.f32	s0, s16
 800c9e2:	ecbd 8b02 	vpop	{d8}
 800c9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ea:	ecbd 8b02 	vpop	{d8}
 800c9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f2:	f000 bf51 	b.w	800d898 <nanf>
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	f7f4 f8f5 	bl	8000be8 <__aeabi_d2f>
 800c9fe:	ee08 0a10 	vmov	s16, r0
 800ca02:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ca5c <strtof+0xbc>
 800ca06:	eeb0 7ac8 	vabs.f32	s14, s16
 800ca0a:	eeb4 7a67 	vcmp.f32	s14, s15
 800ca0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca12:	dd11      	ble.n	800ca38 <strtof+0x98>
 800ca14:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800ca18:	4b11      	ldr	r3, [pc, #68]	; (800ca60 <strtof+0xc0>)
 800ca1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca1e:	4620      	mov	r0, r4
 800ca20:	4639      	mov	r1, r7
 800ca22:	f7f4 f883 	bl	8000b2c <__aeabi_dcmpun>
 800ca26:	b980      	cbnz	r0, 800ca4a <strtof+0xaa>
 800ca28:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <strtof+0xc0>)
 800ca2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca2e:	4620      	mov	r0, r4
 800ca30:	4639      	mov	r1, r7
 800ca32:	f7f4 f85d 	bl	8000af0 <__aeabi_dcmple>
 800ca36:	b940      	cbnz	r0, 800ca4a <strtof+0xaa>
 800ca38:	ee18 3a10 	vmov	r3, s16
 800ca3c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ca40:	d1cd      	bne.n	800c9de <strtof+0x3e>
 800ca42:	4b08      	ldr	r3, [pc, #32]	; (800ca64 <strtof+0xc4>)
 800ca44:	402b      	ands	r3, r5
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0c9      	beq.n	800c9de <strtof+0x3e>
 800ca4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca4e:	2222      	movs	r2, #34	; 0x22
 800ca50:	601a      	str	r2, [r3, #0]
 800ca52:	e7c4      	b.n	800c9de <strtof+0x3e>
 800ca54:	2000003c 	.word	0x2000003c
 800ca58:	08010cf0 	.word	0x08010cf0
 800ca5c:	7f7fffff 	.word	0x7f7fffff
 800ca60:	7fefffff 	.word	0x7fefffff
 800ca64:	7ff00000 	.word	0x7ff00000
 800ca68:	200001f4 	.word	0x200001f4

0800ca6c <__cvt>:
 800ca6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	ec55 4b10 	vmov	r4, r5, d0
 800ca74:	2d00      	cmp	r5, #0
 800ca76:	460e      	mov	r6, r1
 800ca78:	4619      	mov	r1, r3
 800ca7a:	462b      	mov	r3, r5
 800ca7c:	bfbb      	ittet	lt
 800ca7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca82:	461d      	movlt	r5, r3
 800ca84:	2300      	movge	r3, #0
 800ca86:	232d      	movlt	r3, #45	; 0x2d
 800ca88:	700b      	strb	r3, [r1, #0]
 800ca8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca90:	4691      	mov	r9, r2
 800ca92:	f023 0820 	bic.w	r8, r3, #32
 800ca96:	bfbc      	itt	lt
 800ca98:	4622      	movlt	r2, r4
 800ca9a:	4614      	movlt	r4, r2
 800ca9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800caa0:	d005      	beq.n	800caae <__cvt+0x42>
 800caa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800caa6:	d100      	bne.n	800caaa <__cvt+0x3e>
 800caa8:	3601      	adds	r6, #1
 800caaa:	2102      	movs	r1, #2
 800caac:	e000      	b.n	800cab0 <__cvt+0x44>
 800caae:	2103      	movs	r1, #3
 800cab0:	ab03      	add	r3, sp, #12
 800cab2:	9301      	str	r3, [sp, #4]
 800cab4:	ab02      	add	r3, sp, #8
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	ec45 4b10 	vmov	d0, r4, r5
 800cabc:	4653      	mov	r3, sl
 800cabe:	4632      	mov	r2, r6
 800cac0:	f000 ff7a 	bl	800d9b8 <_dtoa_r>
 800cac4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cac8:	4607      	mov	r7, r0
 800caca:	d102      	bne.n	800cad2 <__cvt+0x66>
 800cacc:	f019 0f01 	tst.w	r9, #1
 800cad0:	d022      	beq.n	800cb18 <__cvt+0xac>
 800cad2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cad6:	eb07 0906 	add.w	r9, r7, r6
 800cada:	d110      	bne.n	800cafe <__cvt+0x92>
 800cadc:	783b      	ldrb	r3, [r7, #0]
 800cade:	2b30      	cmp	r3, #48	; 0x30
 800cae0:	d10a      	bne.n	800caf8 <__cvt+0x8c>
 800cae2:	2200      	movs	r2, #0
 800cae4:	2300      	movs	r3, #0
 800cae6:	4620      	mov	r0, r4
 800cae8:	4629      	mov	r1, r5
 800caea:	f7f3 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 800caee:	b918      	cbnz	r0, 800caf8 <__cvt+0x8c>
 800caf0:	f1c6 0601 	rsb	r6, r6, #1
 800caf4:	f8ca 6000 	str.w	r6, [sl]
 800caf8:	f8da 3000 	ldr.w	r3, [sl]
 800cafc:	4499      	add	r9, r3
 800cafe:	2200      	movs	r2, #0
 800cb00:	2300      	movs	r3, #0
 800cb02:	4620      	mov	r0, r4
 800cb04:	4629      	mov	r1, r5
 800cb06:	f7f3 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb0a:	b108      	cbz	r0, 800cb10 <__cvt+0xa4>
 800cb0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb10:	2230      	movs	r2, #48	; 0x30
 800cb12:	9b03      	ldr	r3, [sp, #12]
 800cb14:	454b      	cmp	r3, r9
 800cb16:	d307      	bcc.n	800cb28 <__cvt+0xbc>
 800cb18:	9b03      	ldr	r3, [sp, #12]
 800cb1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb1c:	1bdb      	subs	r3, r3, r7
 800cb1e:	4638      	mov	r0, r7
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	b004      	add	sp, #16
 800cb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb28:	1c59      	adds	r1, r3, #1
 800cb2a:	9103      	str	r1, [sp, #12]
 800cb2c:	701a      	strb	r2, [r3, #0]
 800cb2e:	e7f0      	b.n	800cb12 <__cvt+0xa6>

0800cb30 <__exponent>:
 800cb30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb32:	4603      	mov	r3, r0
 800cb34:	2900      	cmp	r1, #0
 800cb36:	bfb8      	it	lt
 800cb38:	4249      	neglt	r1, r1
 800cb3a:	f803 2b02 	strb.w	r2, [r3], #2
 800cb3e:	bfb4      	ite	lt
 800cb40:	222d      	movlt	r2, #45	; 0x2d
 800cb42:	222b      	movge	r2, #43	; 0x2b
 800cb44:	2909      	cmp	r1, #9
 800cb46:	7042      	strb	r2, [r0, #1]
 800cb48:	dd2a      	ble.n	800cba0 <__exponent+0x70>
 800cb4a:	f10d 0207 	add.w	r2, sp, #7
 800cb4e:	4617      	mov	r7, r2
 800cb50:	260a      	movs	r6, #10
 800cb52:	4694      	mov	ip, r2
 800cb54:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb58:	fb06 1415 	mls	r4, r6, r5, r1
 800cb5c:	3430      	adds	r4, #48	; 0x30
 800cb5e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cb62:	460c      	mov	r4, r1
 800cb64:	2c63      	cmp	r4, #99	; 0x63
 800cb66:	f102 32ff 	add.w	r2, r2, #4294967295
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	dcf1      	bgt.n	800cb52 <__exponent+0x22>
 800cb6e:	3130      	adds	r1, #48	; 0x30
 800cb70:	f1ac 0402 	sub.w	r4, ip, #2
 800cb74:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cb78:	1c41      	adds	r1, r0, #1
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	42ba      	cmp	r2, r7
 800cb7e:	d30a      	bcc.n	800cb96 <__exponent+0x66>
 800cb80:	f10d 0209 	add.w	r2, sp, #9
 800cb84:	eba2 020c 	sub.w	r2, r2, ip
 800cb88:	42bc      	cmp	r4, r7
 800cb8a:	bf88      	it	hi
 800cb8c:	2200      	movhi	r2, #0
 800cb8e:	4413      	add	r3, r2
 800cb90:	1a18      	subs	r0, r3, r0
 800cb92:	b003      	add	sp, #12
 800cb94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb96:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cb9a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cb9e:	e7ed      	b.n	800cb7c <__exponent+0x4c>
 800cba0:	2330      	movs	r3, #48	; 0x30
 800cba2:	3130      	adds	r1, #48	; 0x30
 800cba4:	7083      	strb	r3, [r0, #2]
 800cba6:	70c1      	strb	r1, [r0, #3]
 800cba8:	1d03      	adds	r3, r0, #4
 800cbaa:	e7f1      	b.n	800cb90 <__exponent+0x60>

0800cbac <_printf_float>:
 800cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	ed2d 8b02 	vpush	{d8}
 800cbb4:	b08d      	sub	sp, #52	; 0x34
 800cbb6:	460c      	mov	r4, r1
 800cbb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbbc:	4616      	mov	r6, r2
 800cbbe:	461f      	mov	r7, r3
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	f000 fddb 	bl	800d77c <_localeconv_r>
 800cbc6:	f8d0 a000 	ldr.w	sl, [r0]
 800cbca:	4650      	mov	r0, sl
 800cbcc:	f7f3 fb50 	bl	8000270 <strlen>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	930a      	str	r3, [sp, #40]	; 0x28
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	9305      	str	r3, [sp, #20]
 800cbd8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cbe0:	3307      	adds	r3, #7
 800cbe2:	f023 0307 	bic.w	r3, r3, #7
 800cbe6:	f103 0208 	add.w	r2, r3, #8
 800cbea:	f8c8 2000 	str.w	r2, [r8]
 800cbee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbf6:	9307      	str	r3, [sp, #28]
 800cbf8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbfc:	ee08 0a10 	vmov	s16, r0
 800cc00:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800cc04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc08:	4b9e      	ldr	r3, [pc, #632]	; (800ce84 <_printf_float+0x2d8>)
 800cc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc0e:	f7f3 ff8d 	bl	8000b2c <__aeabi_dcmpun>
 800cc12:	bb88      	cbnz	r0, 800cc78 <_printf_float+0xcc>
 800cc14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc18:	4b9a      	ldr	r3, [pc, #616]	; (800ce84 <_printf_float+0x2d8>)
 800cc1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc1e:	f7f3 ff67 	bl	8000af0 <__aeabi_dcmple>
 800cc22:	bb48      	cbnz	r0, 800cc78 <_printf_float+0xcc>
 800cc24:	2200      	movs	r2, #0
 800cc26:	2300      	movs	r3, #0
 800cc28:	4640      	mov	r0, r8
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	f7f3 ff56 	bl	8000adc <__aeabi_dcmplt>
 800cc30:	b110      	cbz	r0, 800cc38 <_printf_float+0x8c>
 800cc32:	232d      	movs	r3, #45	; 0x2d
 800cc34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc38:	4a93      	ldr	r2, [pc, #588]	; (800ce88 <_printf_float+0x2dc>)
 800cc3a:	4b94      	ldr	r3, [pc, #592]	; (800ce8c <_printf_float+0x2e0>)
 800cc3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc40:	bf94      	ite	ls
 800cc42:	4690      	movls	r8, r2
 800cc44:	4698      	movhi	r8, r3
 800cc46:	2303      	movs	r3, #3
 800cc48:	6123      	str	r3, [r4, #16]
 800cc4a:	9b05      	ldr	r3, [sp, #20]
 800cc4c:	f023 0304 	bic.w	r3, r3, #4
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	f04f 0900 	mov.w	r9, #0
 800cc56:	9700      	str	r7, [sp, #0]
 800cc58:	4633      	mov	r3, r6
 800cc5a:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	4628      	mov	r0, r5
 800cc60:	f000 f9da 	bl	800d018 <_printf_common>
 800cc64:	3001      	adds	r0, #1
 800cc66:	f040 8090 	bne.w	800cd8a <_printf_float+0x1de>
 800cc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6e:	b00d      	add	sp, #52	; 0x34
 800cc70:	ecbd 8b02 	vpop	{d8}
 800cc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc78:	4642      	mov	r2, r8
 800cc7a:	464b      	mov	r3, r9
 800cc7c:	4640      	mov	r0, r8
 800cc7e:	4649      	mov	r1, r9
 800cc80:	f7f3 ff54 	bl	8000b2c <__aeabi_dcmpun>
 800cc84:	b140      	cbz	r0, 800cc98 <_printf_float+0xec>
 800cc86:	464b      	mov	r3, r9
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bfbc      	itt	lt
 800cc8c:	232d      	movlt	r3, #45	; 0x2d
 800cc8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc92:	4a7f      	ldr	r2, [pc, #508]	; (800ce90 <_printf_float+0x2e4>)
 800cc94:	4b7f      	ldr	r3, [pc, #508]	; (800ce94 <_printf_float+0x2e8>)
 800cc96:	e7d1      	b.n	800cc3c <_printf_float+0x90>
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc9e:	9206      	str	r2, [sp, #24]
 800cca0:	1c5a      	adds	r2, r3, #1
 800cca2:	d13f      	bne.n	800cd24 <_printf_float+0x178>
 800cca4:	2306      	movs	r3, #6
 800cca6:	6063      	str	r3, [r4, #4]
 800cca8:	9b05      	ldr	r3, [sp, #20]
 800ccaa:	6861      	ldr	r1, [r4, #4]
 800ccac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	9303      	str	r3, [sp, #12]
 800ccb4:	ab0a      	add	r3, sp, #40	; 0x28
 800ccb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ccba:	ab09      	add	r3, sp, #36	; 0x24
 800ccbc:	ec49 8b10 	vmov	d0, r8, r9
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	6022      	str	r2, [r4, #0]
 800ccc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccc8:	4628      	mov	r0, r5
 800ccca:	f7ff fecf 	bl	800ca6c <__cvt>
 800ccce:	9b06      	ldr	r3, [sp, #24]
 800ccd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccd2:	2b47      	cmp	r3, #71	; 0x47
 800ccd4:	4680      	mov	r8, r0
 800ccd6:	d108      	bne.n	800ccea <_printf_float+0x13e>
 800ccd8:	1cc8      	adds	r0, r1, #3
 800ccda:	db02      	blt.n	800cce2 <_printf_float+0x136>
 800ccdc:	6863      	ldr	r3, [r4, #4]
 800ccde:	4299      	cmp	r1, r3
 800cce0:	dd41      	ble.n	800cd66 <_printf_float+0x1ba>
 800cce2:	f1ab 0302 	sub.w	r3, fp, #2
 800cce6:	fa5f fb83 	uxtb.w	fp, r3
 800ccea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ccee:	d820      	bhi.n	800cd32 <_printf_float+0x186>
 800ccf0:	3901      	subs	r1, #1
 800ccf2:	465a      	mov	r2, fp
 800ccf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccf8:	9109      	str	r1, [sp, #36]	; 0x24
 800ccfa:	f7ff ff19 	bl	800cb30 <__exponent>
 800ccfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd00:	1813      	adds	r3, r2, r0
 800cd02:	2a01      	cmp	r2, #1
 800cd04:	4681      	mov	r9, r0
 800cd06:	6123      	str	r3, [r4, #16]
 800cd08:	dc02      	bgt.n	800cd10 <_printf_float+0x164>
 800cd0a:	6822      	ldr	r2, [r4, #0]
 800cd0c:	07d2      	lsls	r2, r2, #31
 800cd0e:	d501      	bpl.n	800cd14 <_printf_float+0x168>
 800cd10:	3301      	adds	r3, #1
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d09c      	beq.n	800cc56 <_printf_float+0xaa>
 800cd1c:	232d      	movs	r3, #45	; 0x2d
 800cd1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd22:	e798      	b.n	800cc56 <_printf_float+0xaa>
 800cd24:	9a06      	ldr	r2, [sp, #24]
 800cd26:	2a47      	cmp	r2, #71	; 0x47
 800cd28:	d1be      	bne.n	800cca8 <_printf_float+0xfc>
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1bc      	bne.n	800cca8 <_printf_float+0xfc>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e7b9      	b.n	800cca6 <_printf_float+0xfa>
 800cd32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd36:	d118      	bne.n	800cd6a <_printf_float+0x1be>
 800cd38:	2900      	cmp	r1, #0
 800cd3a:	6863      	ldr	r3, [r4, #4]
 800cd3c:	dd0b      	ble.n	800cd56 <_printf_float+0x1aa>
 800cd3e:	6121      	str	r1, [r4, #16]
 800cd40:	b913      	cbnz	r3, 800cd48 <_printf_float+0x19c>
 800cd42:	6822      	ldr	r2, [r4, #0]
 800cd44:	07d0      	lsls	r0, r2, #31
 800cd46:	d502      	bpl.n	800cd4e <_printf_float+0x1a2>
 800cd48:	3301      	adds	r3, #1
 800cd4a:	440b      	add	r3, r1
 800cd4c:	6123      	str	r3, [r4, #16]
 800cd4e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd50:	f04f 0900 	mov.w	r9, #0
 800cd54:	e7de      	b.n	800cd14 <_printf_float+0x168>
 800cd56:	b913      	cbnz	r3, 800cd5e <_printf_float+0x1b2>
 800cd58:	6822      	ldr	r2, [r4, #0]
 800cd5a:	07d2      	lsls	r2, r2, #31
 800cd5c:	d501      	bpl.n	800cd62 <_printf_float+0x1b6>
 800cd5e:	3302      	adds	r3, #2
 800cd60:	e7f4      	b.n	800cd4c <_printf_float+0x1a0>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e7f2      	b.n	800cd4c <_printf_float+0x1a0>
 800cd66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd6c:	4299      	cmp	r1, r3
 800cd6e:	db05      	blt.n	800cd7c <_printf_float+0x1d0>
 800cd70:	6823      	ldr	r3, [r4, #0]
 800cd72:	6121      	str	r1, [r4, #16]
 800cd74:	07d8      	lsls	r0, r3, #31
 800cd76:	d5ea      	bpl.n	800cd4e <_printf_float+0x1a2>
 800cd78:	1c4b      	adds	r3, r1, #1
 800cd7a:	e7e7      	b.n	800cd4c <_printf_float+0x1a0>
 800cd7c:	2900      	cmp	r1, #0
 800cd7e:	bfd4      	ite	le
 800cd80:	f1c1 0202 	rsble	r2, r1, #2
 800cd84:	2201      	movgt	r2, #1
 800cd86:	4413      	add	r3, r2
 800cd88:	e7e0      	b.n	800cd4c <_printf_float+0x1a0>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	055a      	lsls	r2, r3, #21
 800cd8e:	d407      	bmi.n	800cda0 <_printf_float+0x1f4>
 800cd90:	6923      	ldr	r3, [r4, #16]
 800cd92:	4642      	mov	r2, r8
 800cd94:	4631      	mov	r1, r6
 800cd96:	4628      	mov	r0, r5
 800cd98:	47b8      	blx	r7
 800cd9a:	3001      	adds	r0, #1
 800cd9c:	d12c      	bne.n	800cdf8 <_printf_float+0x24c>
 800cd9e:	e764      	b.n	800cc6a <_printf_float+0xbe>
 800cda0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cda4:	f240 80e0 	bls.w	800cf68 <_printf_float+0x3bc>
 800cda8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdac:	2200      	movs	r2, #0
 800cdae:	2300      	movs	r3, #0
 800cdb0:	f7f3 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d034      	beq.n	800ce22 <_printf_float+0x276>
 800cdb8:	4a37      	ldr	r2, [pc, #220]	; (800ce98 <_printf_float+0x2ec>)
 800cdba:	2301      	movs	r3, #1
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	47b8      	blx	r7
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	f43f af51 	beq.w	800cc6a <_printf_float+0xbe>
 800cdc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	db02      	blt.n	800cdd6 <_printf_float+0x22a>
 800cdd0:	6823      	ldr	r3, [r4, #0]
 800cdd2:	07d8      	lsls	r0, r3, #31
 800cdd4:	d510      	bpl.n	800cdf8 <_printf_float+0x24c>
 800cdd6:	ee18 3a10 	vmov	r3, s16
 800cdda:	4652      	mov	r2, sl
 800cddc:	4631      	mov	r1, r6
 800cdde:	4628      	mov	r0, r5
 800cde0:	47b8      	blx	r7
 800cde2:	3001      	adds	r0, #1
 800cde4:	f43f af41 	beq.w	800cc6a <_printf_float+0xbe>
 800cde8:	f04f 0800 	mov.w	r8, #0
 800cdec:	f104 091a 	add.w	r9, r4, #26
 800cdf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	4543      	cmp	r3, r8
 800cdf6:	dc09      	bgt.n	800ce0c <_printf_float+0x260>
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	079b      	lsls	r3, r3, #30
 800cdfc:	f100 8107 	bmi.w	800d00e <_printf_float+0x462>
 800ce00:	68e0      	ldr	r0, [r4, #12]
 800ce02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce04:	4298      	cmp	r0, r3
 800ce06:	bfb8      	it	lt
 800ce08:	4618      	movlt	r0, r3
 800ce0a:	e730      	b.n	800cc6e <_printf_float+0xc2>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	464a      	mov	r2, r9
 800ce10:	4631      	mov	r1, r6
 800ce12:	4628      	mov	r0, r5
 800ce14:	47b8      	blx	r7
 800ce16:	3001      	adds	r0, #1
 800ce18:	f43f af27 	beq.w	800cc6a <_printf_float+0xbe>
 800ce1c:	f108 0801 	add.w	r8, r8, #1
 800ce20:	e7e6      	b.n	800cdf0 <_printf_float+0x244>
 800ce22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	dc39      	bgt.n	800ce9c <_printf_float+0x2f0>
 800ce28:	4a1b      	ldr	r2, [pc, #108]	; (800ce98 <_printf_float+0x2ec>)
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	4628      	mov	r0, r5
 800ce30:	47b8      	blx	r7
 800ce32:	3001      	adds	r0, #1
 800ce34:	f43f af19 	beq.w	800cc6a <_printf_float+0xbe>
 800ce38:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	d102      	bne.n	800ce46 <_printf_float+0x29a>
 800ce40:	6823      	ldr	r3, [r4, #0]
 800ce42:	07d9      	lsls	r1, r3, #31
 800ce44:	d5d8      	bpl.n	800cdf8 <_printf_float+0x24c>
 800ce46:	ee18 3a10 	vmov	r3, s16
 800ce4a:	4652      	mov	r2, sl
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4628      	mov	r0, r5
 800ce50:	47b8      	blx	r7
 800ce52:	3001      	adds	r0, #1
 800ce54:	f43f af09 	beq.w	800cc6a <_printf_float+0xbe>
 800ce58:	f04f 0900 	mov.w	r9, #0
 800ce5c:	f104 0a1a 	add.w	sl, r4, #26
 800ce60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce62:	425b      	negs	r3, r3
 800ce64:	454b      	cmp	r3, r9
 800ce66:	dc01      	bgt.n	800ce6c <_printf_float+0x2c0>
 800ce68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce6a:	e792      	b.n	800cd92 <_printf_float+0x1e6>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	4652      	mov	r2, sl
 800ce70:	4631      	mov	r1, r6
 800ce72:	4628      	mov	r0, r5
 800ce74:	47b8      	blx	r7
 800ce76:	3001      	adds	r0, #1
 800ce78:	f43f aef7 	beq.w	800cc6a <_printf_float+0xbe>
 800ce7c:	f109 0901 	add.w	r9, r9, #1
 800ce80:	e7ee      	b.n	800ce60 <_printf_float+0x2b4>
 800ce82:	bf00      	nop
 800ce84:	7fefffff 	.word	0x7fefffff
 800ce88:	08010a21 	.word	0x08010a21
 800ce8c:	08010a25 	.word	0x08010a25
 800ce90:	08010a29 	.word	0x08010a29
 800ce94:	08010a2d 	.word	0x08010a2d
 800ce98:	08010a31 	.word	0x08010a31
 800ce9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cea0:	429a      	cmp	r2, r3
 800cea2:	bfa8      	it	ge
 800cea4:	461a      	movge	r2, r3
 800cea6:	2a00      	cmp	r2, #0
 800cea8:	4691      	mov	r9, r2
 800ceaa:	dc37      	bgt.n	800cf1c <_printf_float+0x370>
 800ceac:	f04f 0b00 	mov.w	fp, #0
 800ceb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ceb4:	f104 021a 	add.w	r2, r4, #26
 800ceb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceba:	9305      	str	r3, [sp, #20]
 800cebc:	eba3 0309 	sub.w	r3, r3, r9
 800cec0:	455b      	cmp	r3, fp
 800cec2:	dc33      	bgt.n	800cf2c <_printf_float+0x380>
 800cec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cec8:	429a      	cmp	r2, r3
 800ceca:	db3b      	blt.n	800cf44 <_printf_float+0x398>
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	07da      	lsls	r2, r3, #31
 800ced0:	d438      	bmi.n	800cf44 <_printf_float+0x398>
 800ced2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ced6:	eba2 0903 	sub.w	r9, r2, r3
 800ceda:	9b05      	ldr	r3, [sp, #20]
 800cedc:	1ad2      	subs	r2, r2, r3
 800cede:	4591      	cmp	r9, r2
 800cee0:	bfa8      	it	ge
 800cee2:	4691      	movge	r9, r2
 800cee4:	f1b9 0f00 	cmp.w	r9, #0
 800cee8:	dc35      	bgt.n	800cf56 <_printf_float+0x3aa>
 800ceea:	f04f 0800 	mov.w	r8, #0
 800ceee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cef2:	f104 0a1a 	add.w	sl, r4, #26
 800cef6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cefa:	1a9b      	subs	r3, r3, r2
 800cefc:	eba3 0309 	sub.w	r3, r3, r9
 800cf00:	4543      	cmp	r3, r8
 800cf02:	f77f af79 	ble.w	800cdf8 <_printf_float+0x24c>
 800cf06:	2301      	movs	r3, #1
 800cf08:	4652      	mov	r2, sl
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	47b8      	blx	r7
 800cf10:	3001      	adds	r0, #1
 800cf12:	f43f aeaa 	beq.w	800cc6a <_printf_float+0xbe>
 800cf16:	f108 0801 	add.w	r8, r8, #1
 800cf1a:	e7ec      	b.n	800cef6 <_printf_float+0x34a>
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4642      	mov	r2, r8
 800cf22:	4628      	mov	r0, r5
 800cf24:	47b8      	blx	r7
 800cf26:	3001      	adds	r0, #1
 800cf28:	d1c0      	bne.n	800ceac <_printf_float+0x300>
 800cf2a:	e69e      	b.n	800cc6a <_printf_float+0xbe>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	4631      	mov	r1, r6
 800cf30:	4628      	mov	r0, r5
 800cf32:	9205      	str	r2, [sp, #20]
 800cf34:	47b8      	blx	r7
 800cf36:	3001      	adds	r0, #1
 800cf38:	f43f ae97 	beq.w	800cc6a <_printf_float+0xbe>
 800cf3c:	9a05      	ldr	r2, [sp, #20]
 800cf3e:	f10b 0b01 	add.w	fp, fp, #1
 800cf42:	e7b9      	b.n	800ceb8 <_printf_float+0x30c>
 800cf44:	ee18 3a10 	vmov	r3, s16
 800cf48:	4652      	mov	r2, sl
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	47b8      	blx	r7
 800cf50:	3001      	adds	r0, #1
 800cf52:	d1be      	bne.n	800ced2 <_printf_float+0x326>
 800cf54:	e689      	b.n	800cc6a <_printf_float+0xbe>
 800cf56:	9a05      	ldr	r2, [sp, #20]
 800cf58:	464b      	mov	r3, r9
 800cf5a:	4442      	add	r2, r8
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4628      	mov	r0, r5
 800cf60:	47b8      	blx	r7
 800cf62:	3001      	adds	r0, #1
 800cf64:	d1c1      	bne.n	800ceea <_printf_float+0x33e>
 800cf66:	e680      	b.n	800cc6a <_printf_float+0xbe>
 800cf68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf6a:	2a01      	cmp	r2, #1
 800cf6c:	dc01      	bgt.n	800cf72 <_printf_float+0x3c6>
 800cf6e:	07db      	lsls	r3, r3, #31
 800cf70:	d53a      	bpl.n	800cfe8 <_printf_float+0x43c>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4642      	mov	r2, r8
 800cf76:	4631      	mov	r1, r6
 800cf78:	4628      	mov	r0, r5
 800cf7a:	47b8      	blx	r7
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	f43f ae74 	beq.w	800cc6a <_printf_float+0xbe>
 800cf82:	ee18 3a10 	vmov	r3, s16
 800cf86:	4652      	mov	r2, sl
 800cf88:	4631      	mov	r1, r6
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	47b8      	blx	r7
 800cf8e:	3001      	adds	r0, #1
 800cf90:	f43f ae6b 	beq.w	800cc6a <_printf_float+0xbe>
 800cf94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800cfa0:	f7f3 fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfa4:	b9d8      	cbnz	r0, 800cfde <_printf_float+0x432>
 800cfa6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cfaa:	f108 0201 	add.w	r2, r8, #1
 800cfae:	4631      	mov	r1, r6
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	47b8      	blx	r7
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	d10e      	bne.n	800cfd6 <_printf_float+0x42a>
 800cfb8:	e657      	b.n	800cc6a <_printf_float+0xbe>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	4652      	mov	r2, sl
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	47b8      	blx	r7
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	f43f ae50 	beq.w	800cc6a <_printf_float+0xbe>
 800cfca:	f108 0801 	add.w	r8, r8, #1
 800cfce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	4543      	cmp	r3, r8
 800cfd4:	dcf1      	bgt.n	800cfba <_printf_float+0x40e>
 800cfd6:	464b      	mov	r3, r9
 800cfd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfdc:	e6da      	b.n	800cd94 <_printf_float+0x1e8>
 800cfde:	f04f 0800 	mov.w	r8, #0
 800cfe2:	f104 0a1a 	add.w	sl, r4, #26
 800cfe6:	e7f2      	b.n	800cfce <_printf_float+0x422>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	4642      	mov	r2, r8
 800cfec:	e7df      	b.n	800cfae <_printf_float+0x402>
 800cfee:	2301      	movs	r3, #1
 800cff0:	464a      	mov	r2, r9
 800cff2:	4631      	mov	r1, r6
 800cff4:	4628      	mov	r0, r5
 800cff6:	47b8      	blx	r7
 800cff8:	3001      	adds	r0, #1
 800cffa:	f43f ae36 	beq.w	800cc6a <_printf_float+0xbe>
 800cffe:	f108 0801 	add.w	r8, r8, #1
 800d002:	68e3      	ldr	r3, [r4, #12]
 800d004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d006:	1a5b      	subs	r3, r3, r1
 800d008:	4543      	cmp	r3, r8
 800d00a:	dcf0      	bgt.n	800cfee <_printf_float+0x442>
 800d00c:	e6f8      	b.n	800ce00 <_printf_float+0x254>
 800d00e:	f04f 0800 	mov.w	r8, #0
 800d012:	f104 0919 	add.w	r9, r4, #25
 800d016:	e7f4      	b.n	800d002 <_printf_float+0x456>

0800d018 <_printf_common>:
 800d018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d01c:	4616      	mov	r6, r2
 800d01e:	4699      	mov	r9, r3
 800d020:	688a      	ldr	r2, [r1, #8]
 800d022:	690b      	ldr	r3, [r1, #16]
 800d024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d028:	4293      	cmp	r3, r2
 800d02a:	bfb8      	it	lt
 800d02c:	4613      	movlt	r3, r2
 800d02e:	6033      	str	r3, [r6, #0]
 800d030:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d034:	4607      	mov	r7, r0
 800d036:	460c      	mov	r4, r1
 800d038:	b10a      	cbz	r2, 800d03e <_printf_common+0x26>
 800d03a:	3301      	adds	r3, #1
 800d03c:	6033      	str	r3, [r6, #0]
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	0699      	lsls	r1, r3, #26
 800d042:	bf42      	ittt	mi
 800d044:	6833      	ldrmi	r3, [r6, #0]
 800d046:	3302      	addmi	r3, #2
 800d048:	6033      	strmi	r3, [r6, #0]
 800d04a:	6825      	ldr	r5, [r4, #0]
 800d04c:	f015 0506 	ands.w	r5, r5, #6
 800d050:	d106      	bne.n	800d060 <_printf_common+0x48>
 800d052:	f104 0a19 	add.w	sl, r4, #25
 800d056:	68e3      	ldr	r3, [r4, #12]
 800d058:	6832      	ldr	r2, [r6, #0]
 800d05a:	1a9b      	subs	r3, r3, r2
 800d05c:	42ab      	cmp	r3, r5
 800d05e:	dc26      	bgt.n	800d0ae <_printf_common+0x96>
 800d060:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d064:	1e13      	subs	r3, r2, #0
 800d066:	6822      	ldr	r2, [r4, #0]
 800d068:	bf18      	it	ne
 800d06a:	2301      	movne	r3, #1
 800d06c:	0692      	lsls	r2, r2, #26
 800d06e:	d42b      	bmi.n	800d0c8 <_printf_common+0xb0>
 800d070:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d074:	4649      	mov	r1, r9
 800d076:	4638      	mov	r0, r7
 800d078:	47c0      	blx	r8
 800d07a:	3001      	adds	r0, #1
 800d07c:	d01e      	beq.n	800d0bc <_printf_common+0xa4>
 800d07e:	6823      	ldr	r3, [r4, #0]
 800d080:	6922      	ldr	r2, [r4, #16]
 800d082:	f003 0306 	and.w	r3, r3, #6
 800d086:	2b04      	cmp	r3, #4
 800d088:	bf02      	ittt	eq
 800d08a:	68e5      	ldreq	r5, [r4, #12]
 800d08c:	6833      	ldreq	r3, [r6, #0]
 800d08e:	1aed      	subeq	r5, r5, r3
 800d090:	68a3      	ldr	r3, [r4, #8]
 800d092:	bf0c      	ite	eq
 800d094:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d098:	2500      	movne	r5, #0
 800d09a:	4293      	cmp	r3, r2
 800d09c:	bfc4      	itt	gt
 800d09e:	1a9b      	subgt	r3, r3, r2
 800d0a0:	18ed      	addgt	r5, r5, r3
 800d0a2:	2600      	movs	r6, #0
 800d0a4:	341a      	adds	r4, #26
 800d0a6:	42b5      	cmp	r5, r6
 800d0a8:	d11a      	bne.n	800d0e0 <_printf_common+0xc8>
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	e008      	b.n	800d0c0 <_printf_common+0xa8>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	4652      	mov	r2, sl
 800d0b2:	4649      	mov	r1, r9
 800d0b4:	4638      	mov	r0, r7
 800d0b6:	47c0      	blx	r8
 800d0b8:	3001      	adds	r0, #1
 800d0ba:	d103      	bne.n	800d0c4 <_printf_common+0xac>
 800d0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c4:	3501      	adds	r5, #1
 800d0c6:	e7c6      	b.n	800d056 <_printf_common+0x3e>
 800d0c8:	18e1      	adds	r1, r4, r3
 800d0ca:	1c5a      	adds	r2, r3, #1
 800d0cc:	2030      	movs	r0, #48	; 0x30
 800d0ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0d2:	4422      	add	r2, r4
 800d0d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0dc:	3302      	adds	r3, #2
 800d0de:	e7c7      	b.n	800d070 <_printf_common+0x58>
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	4649      	mov	r1, r9
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	47c0      	blx	r8
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	d0e6      	beq.n	800d0bc <_printf_common+0xa4>
 800d0ee:	3601      	adds	r6, #1
 800d0f0:	e7d9      	b.n	800d0a6 <_printf_common+0x8e>
	...

0800d0f4 <_printf_i>:
 800d0f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f8:	7e0f      	ldrb	r7, [r1, #24]
 800d0fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0fc:	2f78      	cmp	r7, #120	; 0x78
 800d0fe:	4691      	mov	r9, r2
 800d100:	4680      	mov	r8, r0
 800d102:	460c      	mov	r4, r1
 800d104:	469a      	mov	sl, r3
 800d106:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d10a:	d807      	bhi.n	800d11c <_printf_i+0x28>
 800d10c:	2f62      	cmp	r7, #98	; 0x62
 800d10e:	d80a      	bhi.n	800d126 <_printf_i+0x32>
 800d110:	2f00      	cmp	r7, #0
 800d112:	f000 80d4 	beq.w	800d2be <_printf_i+0x1ca>
 800d116:	2f58      	cmp	r7, #88	; 0x58
 800d118:	f000 80c0 	beq.w	800d29c <_printf_i+0x1a8>
 800d11c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d124:	e03a      	b.n	800d19c <_printf_i+0xa8>
 800d126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d12a:	2b15      	cmp	r3, #21
 800d12c:	d8f6      	bhi.n	800d11c <_printf_i+0x28>
 800d12e:	a101      	add	r1, pc, #4	; (adr r1, 800d134 <_printf_i+0x40>)
 800d130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d134:	0800d18d 	.word	0x0800d18d
 800d138:	0800d1a1 	.word	0x0800d1a1
 800d13c:	0800d11d 	.word	0x0800d11d
 800d140:	0800d11d 	.word	0x0800d11d
 800d144:	0800d11d 	.word	0x0800d11d
 800d148:	0800d11d 	.word	0x0800d11d
 800d14c:	0800d1a1 	.word	0x0800d1a1
 800d150:	0800d11d 	.word	0x0800d11d
 800d154:	0800d11d 	.word	0x0800d11d
 800d158:	0800d11d 	.word	0x0800d11d
 800d15c:	0800d11d 	.word	0x0800d11d
 800d160:	0800d2a5 	.word	0x0800d2a5
 800d164:	0800d1cd 	.word	0x0800d1cd
 800d168:	0800d25f 	.word	0x0800d25f
 800d16c:	0800d11d 	.word	0x0800d11d
 800d170:	0800d11d 	.word	0x0800d11d
 800d174:	0800d2c7 	.word	0x0800d2c7
 800d178:	0800d11d 	.word	0x0800d11d
 800d17c:	0800d1cd 	.word	0x0800d1cd
 800d180:	0800d11d 	.word	0x0800d11d
 800d184:	0800d11d 	.word	0x0800d11d
 800d188:	0800d267 	.word	0x0800d267
 800d18c:	682b      	ldr	r3, [r5, #0]
 800d18e:	1d1a      	adds	r2, r3, #4
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	602a      	str	r2, [r5, #0]
 800d194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d19c:	2301      	movs	r3, #1
 800d19e:	e09f      	b.n	800d2e0 <_printf_i+0x1ec>
 800d1a0:	6820      	ldr	r0, [r4, #0]
 800d1a2:	682b      	ldr	r3, [r5, #0]
 800d1a4:	0607      	lsls	r7, r0, #24
 800d1a6:	f103 0104 	add.w	r1, r3, #4
 800d1aa:	6029      	str	r1, [r5, #0]
 800d1ac:	d501      	bpl.n	800d1b2 <_printf_i+0xbe>
 800d1ae:	681e      	ldr	r6, [r3, #0]
 800d1b0:	e003      	b.n	800d1ba <_printf_i+0xc6>
 800d1b2:	0646      	lsls	r6, r0, #25
 800d1b4:	d5fb      	bpl.n	800d1ae <_printf_i+0xba>
 800d1b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d1ba:	2e00      	cmp	r6, #0
 800d1bc:	da03      	bge.n	800d1c6 <_printf_i+0xd2>
 800d1be:	232d      	movs	r3, #45	; 0x2d
 800d1c0:	4276      	negs	r6, r6
 800d1c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1c6:	485a      	ldr	r0, [pc, #360]	; (800d330 <_printf_i+0x23c>)
 800d1c8:	230a      	movs	r3, #10
 800d1ca:	e012      	b.n	800d1f2 <_printf_i+0xfe>
 800d1cc:	682b      	ldr	r3, [r5, #0]
 800d1ce:	6820      	ldr	r0, [r4, #0]
 800d1d0:	1d19      	adds	r1, r3, #4
 800d1d2:	6029      	str	r1, [r5, #0]
 800d1d4:	0605      	lsls	r5, r0, #24
 800d1d6:	d501      	bpl.n	800d1dc <_printf_i+0xe8>
 800d1d8:	681e      	ldr	r6, [r3, #0]
 800d1da:	e002      	b.n	800d1e2 <_printf_i+0xee>
 800d1dc:	0641      	lsls	r1, r0, #25
 800d1de:	d5fb      	bpl.n	800d1d8 <_printf_i+0xe4>
 800d1e0:	881e      	ldrh	r6, [r3, #0]
 800d1e2:	4853      	ldr	r0, [pc, #332]	; (800d330 <_printf_i+0x23c>)
 800d1e4:	2f6f      	cmp	r7, #111	; 0x6f
 800d1e6:	bf0c      	ite	eq
 800d1e8:	2308      	moveq	r3, #8
 800d1ea:	230a      	movne	r3, #10
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1f2:	6865      	ldr	r5, [r4, #4]
 800d1f4:	60a5      	str	r5, [r4, #8]
 800d1f6:	2d00      	cmp	r5, #0
 800d1f8:	bfa2      	ittt	ge
 800d1fa:	6821      	ldrge	r1, [r4, #0]
 800d1fc:	f021 0104 	bicge.w	r1, r1, #4
 800d200:	6021      	strge	r1, [r4, #0]
 800d202:	b90e      	cbnz	r6, 800d208 <_printf_i+0x114>
 800d204:	2d00      	cmp	r5, #0
 800d206:	d04b      	beq.n	800d2a0 <_printf_i+0x1ac>
 800d208:	4615      	mov	r5, r2
 800d20a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d20e:	fb03 6711 	mls	r7, r3, r1, r6
 800d212:	5dc7      	ldrb	r7, [r0, r7]
 800d214:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d218:	4637      	mov	r7, r6
 800d21a:	42bb      	cmp	r3, r7
 800d21c:	460e      	mov	r6, r1
 800d21e:	d9f4      	bls.n	800d20a <_printf_i+0x116>
 800d220:	2b08      	cmp	r3, #8
 800d222:	d10b      	bne.n	800d23c <_printf_i+0x148>
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	07de      	lsls	r6, r3, #31
 800d228:	d508      	bpl.n	800d23c <_printf_i+0x148>
 800d22a:	6923      	ldr	r3, [r4, #16]
 800d22c:	6861      	ldr	r1, [r4, #4]
 800d22e:	4299      	cmp	r1, r3
 800d230:	bfde      	ittt	le
 800d232:	2330      	movle	r3, #48	; 0x30
 800d234:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d238:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d23c:	1b52      	subs	r2, r2, r5
 800d23e:	6122      	str	r2, [r4, #16]
 800d240:	f8cd a000 	str.w	sl, [sp]
 800d244:	464b      	mov	r3, r9
 800d246:	aa03      	add	r2, sp, #12
 800d248:	4621      	mov	r1, r4
 800d24a:	4640      	mov	r0, r8
 800d24c:	f7ff fee4 	bl	800d018 <_printf_common>
 800d250:	3001      	adds	r0, #1
 800d252:	d14a      	bne.n	800d2ea <_printf_i+0x1f6>
 800d254:	f04f 30ff 	mov.w	r0, #4294967295
 800d258:	b004      	add	sp, #16
 800d25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d25e:	6823      	ldr	r3, [r4, #0]
 800d260:	f043 0320 	orr.w	r3, r3, #32
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	4833      	ldr	r0, [pc, #204]	; (800d334 <_printf_i+0x240>)
 800d268:	2778      	movs	r7, #120	; 0x78
 800d26a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	6829      	ldr	r1, [r5, #0]
 800d272:	061f      	lsls	r7, r3, #24
 800d274:	f851 6b04 	ldr.w	r6, [r1], #4
 800d278:	d402      	bmi.n	800d280 <_printf_i+0x18c>
 800d27a:	065f      	lsls	r7, r3, #25
 800d27c:	bf48      	it	mi
 800d27e:	b2b6      	uxthmi	r6, r6
 800d280:	07df      	lsls	r7, r3, #31
 800d282:	bf48      	it	mi
 800d284:	f043 0320 	orrmi.w	r3, r3, #32
 800d288:	6029      	str	r1, [r5, #0]
 800d28a:	bf48      	it	mi
 800d28c:	6023      	strmi	r3, [r4, #0]
 800d28e:	b91e      	cbnz	r6, 800d298 <_printf_i+0x1a4>
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	f023 0320 	bic.w	r3, r3, #32
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	2310      	movs	r3, #16
 800d29a:	e7a7      	b.n	800d1ec <_printf_i+0xf8>
 800d29c:	4824      	ldr	r0, [pc, #144]	; (800d330 <_printf_i+0x23c>)
 800d29e:	e7e4      	b.n	800d26a <_printf_i+0x176>
 800d2a0:	4615      	mov	r5, r2
 800d2a2:	e7bd      	b.n	800d220 <_printf_i+0x12c>
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	6826      	ldr	r6, [r4, #0]
 800d2a8:	6961      	ldr	r1, [r4, #20]
 800d2aa:	1d18      	adds	r0, r3, #4
 800d2ac:	6028      	str	r0, [r5, #0]
 800d2ae:	0635      	lsls	r5, r6, #24
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	d501      	bpl.n	800d2b8 <_printf_i+0x1c4>
 800d2b4:	6019      	str	r1, [r3, #0]
 800d2b6:	e002      	b.n	800d2be <_printf_i+0x1ca>
 800d2b8:	0670      	lsls	r0, r6, #25
 800d2ba:	d5fb      	bpl.n	800d2b4 <_printf_i+0x1c0>
 800d2bc:	8019      	strh	r1, [r3, #0]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	6123      	str	r3, [r4, #16]
 800d2c2:	4615      	mov	r5, r2
 800d2c4:	e7bc      	b.n	800d240 <_printf_i+0x14c>
 800d2c6:	682b      	ldr	r3, [r5, #0]
 800d2c8:	1d1a      	adds	r2, r3, #4
 800d2ca:	602a      	str	r2, [r5, #0]
 800d2cc:	681d      	ldr	r5, [r3, #0]
 800d2ce:	6862      	ldr	r2, [r4, #4]
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	f7f2 ff7c 	bl	80001d0 <memchr>
 800d2d8:	b108      	cbz	r0, 800d2de <_printf_i+0x1ea>
 800d2da:	1b40      	subs	r0, r0, r5
 800d2dc:	6060      	str	r0, [r4, #4]
 800d2de:	6863      	ldr	r3, [r4, #4]
 800d2e0:	6123      	str	r3, [r4, #16]
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e8:	e7aa      	b.n	800d240 <_printf_i+0x14c>
 800d2ea:	6923      	ldr	r3, [r4, #16]
 800d2ec:	462a      	mov	r2, r5
 800d2ee:	4649      	mov	r1, r9
 800d2f0:	4640      	mov	r0, r8
 800d2f2:	47d0      	blx	sl
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d0ad      	beq.n	800d254 <_printf_i+0x160>
 800d2f8:	6823      	ldr	r3, [r4, #0]
 800d2fa:	079b      	lsls	r3, r3, #30
 800d2fc:	d413      	bmi.n	800d326 <_printf_i+0x232>
 800d2fe:	68e0      	ldr	r0, [r4, #12]
 800d300:	9b03      	ldr	r3, [sp, #12]
 800d302:	4298      	cmp	r0, r3
 800d304:	bfb8      	it	lt
 800d306:	4618      	movlt	r0, r3
 800d308:	e7a6      	b.n	800d258 <_printf_i+0x164>
 800d30a:	2301      	movs	r3, #1
 800d30c:	4632      	mov	r2, r6
 800d30e:	4649      	mov	r1, r9
 800d310:	4640      	mov	r0, r8
 800d312:	47d0      	blx	sl
 800d314:	3001      	adds	r0, #1
 800d316:	d09d      	beq.n	800d254 <_printf_i+0x160>
 800d318:	3501      	adds	r5, #1
 800d31a:	68e3      	ldr	r3, [r4, #12]
 800d31c:	9903      	ldr	r1, [sp, #12]
 800d31e:	1a5b      	subs	r3, r3, r1
 800d320:	42ab      	cmp	r3, r5
 800d322:	dcf2      	bgt.n	800d30a <_printf_i+0x216>
 800d324:	e7eb      	b.n	800d2fe <_printf_i+0x20a>
 800d326:	2500      	movs	r5, #0
 800d328:	f104 0619 	add.w	r6, r4, #25
 800d32c:	e7f5      	b.n	800d31a <_printf_i+0x226>
 800d32e:	bf00      	nop
 800d330:	08010a33 	.word	0x08010a33
 800d334:	08010a44 	.word	0x08010a44

0800d338 <std>:
 800d338:	2300      	movs	r3, #0
 800d33a:	b510      	push	{r4, lr}
 800d33c:	4604      	mov	r4, r0
 800d33e:	e9c0 3300 	strd	r3, r3, [r0]
 800d342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d346:	6083      	str	r3, [r0, #8]
 800d348:	8181      	strh	r1, [r0, #12]
 800d34a:	6643      	str	r3, [r0, #100]	; 0x64
 800d34c:	81c2      	strh	r2, [r0, #14]
 800d34e:	6183      	str	r3, [r0, #24]
 800d350:	4619      	mov	r1, r3
 800d352:	2208      	movs	r2, #8
 800d354:	305c      	adds	r0, #92	; 0x5c
 800d356:	f000 f9f7 	bl	800d748 <memset>
 800d35a:	4b0d      	ldr	r3, [pc, #52]	; (800d390 <std+0x58>)
 800d35c:	6263      	str	r3, [r4, #36]	; 0x24
 800d35e:	4b0d      	ldr	r3, [pc, #52]	; (800d394 <std+0x5c>)
 800d360:	62a3      	str	r3, [r4, #40]	; 0x28
 800d362:	4b0d      	ldr	r3, [pc, #52]	; (800d398 <std+0x60>)
 800d364:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d366:	4b0d      	ldr	r3, [pc, #52]	; (800d39c <std+0x64>)
 800d368:	6323      	str	r3, [r4, #48]	; 0x30
 800d36a:	4b0d      	ldr	r3, [pc, #52]	; (800d3a0 <std+0x68>)
 800d36c:	6224      	str	r4, [r4, #32]
 800d36e:	429c      	cmp	r4, r3
 800d370:	d006      	beq.n	800d380 <std+0x48>
 800d372:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d376:	4294      	cmp	r4, r2
 800d378:	d002      	beq.n	800d380 <std+0x48>
 800d37a:	33d0      	adds	r3, #208	; 0xd0
 800d37c:	429c      	cmp	r4, r3
 800d37e:	d105      	bne.n	800d38c <std+0x54>
 800d380:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d388:	f000 ba6c 	b.w	800d864 <__retarget_lock_init_recursive>
 800d38c:	bd10      	pop	{r4, pc}
 800d38e:	bf00      	nop
 800d390:	0800d599 	.word	0x0800d599
 800d394:	0800d5bb 	.word	0x0800d5bb
 800d398:	0800d5f3 	.word	0x0800d5f3
 800d39c:	0800d617 	.word	0x0800d617
 800d3a0:	200008d4 	.word	0x200008d4

0800d3a4 <stdio_exit_handler>:
 800d3a4:	4a02      	ldr	r2, [pc, #8]	; (800d3b0 <stdio_exit_handler+0xc>)
 800d3a6:	4903      	ldr	r1, [pc, #12]	; (800d3b4 <stdio_exit_handler+0x10>)
 800d3a8:	4803      	ldr	r0, [pc, #12]	; (800d3b8 <stdio_exit_handler+0x14>)
 800d3aa:	f000 b869 	b.w	800d480 <_fwalk_sglue>
 800d3ae:	bf00      	nop
 800d3b0:	20000030 	.word	0x20000030
 800d3b4:	0800fb79 	.word	0x0800fb79
 800d3b8:	200001a8 	.word	0x200001a8

0800d3bc <cleanup_stdio>:
 800d3bc:	6841      	ldr	r1, [r0, #4]
 800d3be:	4b0c      	ldr	r3, [pc, #48]	; (800d3f0 <cleanup_stdio+0x34>)
 800d3c0:	4299      	cmp	r1, r3
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	d001      	beq.n	800d3cc <cleanup_stdio+0x10>
 800d3c8:	f002 fbd6 	bl	800fb78 <_fflush_r>
 800d3cc:	68a1      	ldr	r1, [r4, #8]
 800d3ce:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <cleanup_stdio+0x38>)
 800d3d0:	4299      	cmp	r1, r3
 800d3d2:	d002      	beq.n	800d3da <cleanup_stdio+0x1e>
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f002 fbcf 	bl	800fb78 <_fflush_r>
 800d3da:	68e1      	ldr	r1, [r4, #12]
 800d3dc:	4b06      	ldr	r3, [pc, #24]	; (800d3f8 <cleanup_stdio+0x3c>)
 800d3de:	4299      	cmp	r1, r3
 800d3e0:	d004      	beq.n	800d3ec <cleanup_stdio+0x30>
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3e8:	f002 bbc6 	b.w	800fb78 <_fflush_r>
 800d3ec:	bd10      	pop	{r4, pc}
 800d3ee:	bf00      	nop
 800d3f0:	200008d4 	.word	0x200008d4
 800d3f4:	2000093c 	.word	0x2000093c
 800d3f8:	200009a4 	.word	0x200009a4

0800d3fc <global_stdio_init.part.0>:
 800d3fc:	b510      	push	{r4, lr}
 800d3fe:	4b0b      	ldr	r3, [pc, #44]	; (800d42c <global_stdio_init.part.0+0x30>)
 800d400:	4c0b      	ldr	r4, [pc, #44]	; (800d430 <global_stdio_init.part.0+0x34>)
 800d402:	4a0c      	ldr	r2, [pc, #48]	; (800d434 <global_stdio_init.part.0+0x38>)
 800d404:	601a      	str	r2, [r3, #0]
 800d406:	4620      	mov	r0, r4
 800d408:	2200      	movs	r2, #0
 800d40a:	2104      	movs	r1, #4
 800d40c:	f7ff ff94 	bl	800d338 <std>
 800d410:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d414:	2201      	movs	r2, #1
 800d416:	2109      	movs	r1, #9
 800d418:	f7ff ff8e 	bl	800d338 <std>
 800d41c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d420:	2202      	movs	r2, #2
 800d422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d426:	2112      	movs	r1, #18
 800d428:	f7ff bf86 	b.w	800d338 <std>
 800d42c:	20000a0c 	.word	0x20000a0c
 800d430:	200008d4 	.word	0x200008d4
 800d434:	0800d3a5 	.word	0x0800d3a5

0800d438 <__sfp_lock_acquire>:
 800d438:	4801      	ldr	r0, [pc, #4]	; (800d440 <__sfp_lock_acquire+0x8>)
 800d43a:	f000 ba14 	b.w	800d866 <__retarget_lock_acquire_recursive>
 800d43e:	bf00      	nop
 800d440:	20000a15 	.word	0x20000a15

0800d444 <__sfp_lock_release>:
 800d444:	4801      	ldr	r0, [pc, #4]	; (800d44c <__sfp_lock_release+0x8>)
 800d446:	f000 ba0f 	b.w	800d868 <__retarget_lock_release_recursive>
 800d44a:	bf00      	nop
 800d44c:	20000a15 	.word	0x20000a15

0800d450 <__sinit>:
 800d450:	b510      	push	{r4, lr}
 800d452:	4604      	mov	r4, r0
 800d454:	f7ff fff0 	bl	800d438 <__sfp_lock_acquire>
 800d458:	6a23      	ldr	r3, [r4, #32]
 800d45a:	b11b      	cbz	r3, 800d464 <__sinit+0x14>
 800d45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d460:	f7ff bff0 	b.w	800d444 <__sfp_lock_release>
 800d464:	4b04      	ldr	r3, [pc, #16]	; (800d478 <__sinit+0x28>)
 800d466:	6223      	str	r3, [r4, #32]
 800d468:	4b04      	ldr	r3, [pc, #16]	; (800d47c <__sinit+0x2c>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1f5      	bne.n	800d45c <__sinit+0xc>
 800d470:	f7ff ffc4 	bl	800d3fc <global_stdio_init.part.0>
 800d474:	e7f2      	b.n	800d45c <__sinit+0xc>
 800d476:	bf00      	nop
 800d478:	0800d3bd 	.word	0x0800d3bd
 800d47c:	20000a0c 	.word	0x20000a0c

0800d480 <_fwalk_sglue>:
 800d480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d484:	4607      	mov	r7, r0
 800d486:	4688      	mov	r8, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	2600      	movs	r6, #0
 800d48c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d490:	f1b9 0901 	subs.w	r9, r9, #1
 800d494:	d505      	bpl.n	800d4a2 <_fwalk_sglue+0x22>
 800d496:	6824      	ldr	r4, [r4, #0]
 800d498:	2c00      	cmp	r4, #0
 800d49a:	d1f7      	bne.n	800d48c <_fwalk_sglue+0xc>
 800d49c:	4630      	mov	r0, r6
 800d49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4a2:	89ab      	ldrh	r3, [r5, #12]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d907      	bls.n	800d4b8 <_fwalk_sglue+0x38>
 800d4a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	d003      	beq.n	800d4b8 <_fwalk_sglue+0x38>
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	47c0      	blx	r8
 800d4b6:	4306      	orrs	r6, r0
 800d4b8:	3568      	adds	r5, #104	; 0x68
 800d4ba:	e7e9      	b.n	800d490 <_fwalk_sglue+0x10>

0800d4bc <iprintf>:
 800d4bc:	b40f      	push	{r0, r1, r2, r3}
 800d4be:	b507      	push	{r0, r1, r2, lr}
 800d4c0:	4906      	ldr	r1, [pc, #24]	; (800d4dc <iprintf+0x20>)
 800d4c2:	ab04      	add	r3, sp, #16
 800d4c4:	6808      	ldr	r0, [r1, #0]
 800d4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ca:	6881      	ldr	r1, [r0, #8]
 800d4cc:	9301      	str	r3, [sp, #4]
 800d4ce:	f002 f9b3 	bl	800f838 <_vfiprintf_r>
 800d4d2:	b003      	add	sp, #12
 800d4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4d8:	b004      	add	sp, #16
 800d4da:	4770      	bx	lr
 800d4dc:	200001f4 	.word	0x200001f4

0800d4e0 <_puts_r>:
 800d4e0:	6a03      	ldr	r3, [r0, #32]
 800d4e2:	b570      	push	{r4, r5, r6, lr}
 800d4e4:	6884      	ldr	r4, [r0, #8]
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	460e      	mov	r6, r1
 800d4ea:	b90b      	cbnz	r3, 800d4f0 <_puts_r+0x10>
 800d4ec:	f7ff ffb0 	bl	800d450 <__sinit>
 800d4f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4f2:	07db      	lsls	r3, r3, #31
 800d4f4:	d405      	bmi.n	800d502 <_puts_r+0x22>
 800d4f6:	89a3      	ldrh	r3, [r4, #12]
 800d4f8:	0598      	lsls	r0, r3, #22
 800d4fa:	d402      	bmi.n	800d502 <_puts_r+0x22>
 800d4fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4fe:	f000 f9b2 	bl	800d866 <__retarget_lock_acquire_recursive>
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	0719      	lsls	r1, r3, #28
 800d506:	d513      	bpl.n	800d530 <_puts_r+0x50>
 800d508:	6923      	ldr	r3, [r4, #16]
 800d50a:	b18b      	cbz	r3, 800d530 <_puts_r+0x50>
 800d50c:	3e01      	subs	r6, #1
 800d50e:	68a3      	ldr	r3, [r4, #8]
 800d510:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d514:	3b01      	subs	r3, #1
 800d516:	60a3      	str	r3, [r4, #8]
 800d518:	b9e9      	cbnz	r1, 800d556 <_puts_r+0x76>
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	da2e      	bge.n	800d57c <_puts_r+0x9c>
 800d51e:	4622      	mov	r2, r4
 800d520:	210a      	movs	r1, #10
 800d522:	4628      	mov	r0, r5
 800d524:	f000 f87b 	bl	800d61e <__swbuf_r>
 800d528:	3001      	adds	r0, #1
 800d52a:	d007      	beq.n	800d53c <_puts_r+0x5c>
 800d52c:	250a      	movs	r5, #10
 800d52e:	e007      	b.n	800d540 <_puts_r+0x60>
 800d530:	4621      	mov	r1, r4
 800d532:	4628      	mov	r0, r5
 800d534:	f000 f8b0 	bl	800d698 <__swsetup_r>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d0e7      	beq.n	800d50c <_puts_r+0x2c>
 800d53c:	f04f 35ff 	mov.w	r5, #4294967295
 800d540:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d542:	07da      	lsls	r2, r3, #31
 800d544:	d405      	bmi.n	800d552 <_puts_r+0x72>
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	059b      	lsls	r3, r3, #22
 800d54a:	d402      	bmi.n	800d552 <_puts_r+0x72>
 800d54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d54e:	f000 f98b 	bl	800d868 <__retarget_lock_release_recursive>
 800d552:	4628      	mov	r0, r5
 800d554:	bd70      	pop	{r4, r5, r6, pc}
 800d556:	2b00      	cmp	r3, #0
 800d558:	da04      	bge.n	800d564 <_puts_r+0x84>
 800d55a:	69a2      	ldr	r2, [r4, #24]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	dc06      	bgt.n	800d56e <_puts_r+0x8e>
 800d560:	290a      	cmp	r1, #10
 800d562:	d004      	beq.n	800d56e <_puts_r+0x8e>
 800d564:	6823      	ldr	r3, [r4, #0]
 800d566:	1c5a      	adds	r2, r3, #1
 800d568:	6022      	str	r2, [r4, #0]
 800d56a:	7019      	strb	r1, [r3, #0]
 800d56c:	e7cf      	b.n	800d50e <_puts_r+0x2e>
 800d56e:	4622      	mov	r2, r4
 800d570:	4628      	mov	r0, r5
 800d572:	f000 f854 	bl	800d61e <__swbuf_r>
 800d576:	3001      	adds	r0, #1
 800d578:	d1c9      	bne.n	800d50e <_puts_r+0x2e>
 800d57a:	e7df      	b.n	800d53c <_puts_r+0x5c>
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	250a      	movs	r5, #10
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	6022      	str	r2, [r4, #0]
 800d584:	701d      	strb	r5, [r3, #0]
 800d586:	e7db      	b.n	800d540 <_puts_r+0x60>

0800d588 <puts>:
 800d588:	4b02      	ldr	r3, [pc, #8]	; (800d594 <puts+0xc>)
 800d58a:	4601      	mov	r1, r0
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	f7ff bfa7 	b.w	800d4e0 <_puts_r>
 800d592:	bf00      	nop
 800d594:	200001f4 	.word	0x200001f4

0800d598 <__sread>:
 800d598:	b510      	push	{r4, lr}
 800d59a:	460c      	mov	r4, r1
 800d59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a0:	f000 f912 	bl	800d7c8 <_read_r>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	bfab      	itete	ge
 800d5a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d5ac:	181b      	addge	r3, r3, r0
 800d5ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5b2:	bfac      	ite	ge
 800d5b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5b6:	81a3      	strhlt	r3, [r4, #12]
 800d5b8:	bd10      	pop	{r4, pc}

0800d5ba <__swrite>:
 800d5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5be:	461f      	mov	r7, r3
 800d5c0:	898b      	ldrh	r3, [r1, #12]
 800d5c2:	05db      	lsls	r3, r3, #23
 800d5c4:	4605      	mov	r5, r0
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	4616      	mov	r6, r2
 800d5ca:	d505      	bpl.n	800d5d8 <__swrite+0x1e>
 800d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d0:	2302      	movs	r3, #2
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f000 f8e6 	bl	800d7a4 <_lseek_r>
 800d5d8:	89a3      	ldrh	r3, [r4, #12]
 800d5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	4632      	mov	r2, r6
 800d5e6:	463b      	mov	r3, r7
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ee:	f000 b8fd 	b.w	800d7ec <_write_r>

0800d5f2 <__sseek>:
 800d5f2:	b510      	push	{r4, lr}
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5fa:	f000 f8d3 	bl	800d7a4 <_lseek_r>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	89a3      	ldrh	r3, [r4, #12]
 800d602:	bf15      	itete	ne
 800d604:	6560      	strne	r0, [r4, #84]	; 0x54
 800d606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d60a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d60e:	81a3      	strheq	r3, [r4, #12]
 800d610:	bf18      	it	ne
 800d612:	81a3      	strhne	r3, [r4, #12]
 800d614:	bd10      	pop	{r4, pc}

0800d616 <__sclose>:
 800d616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d61a:	f000 b8b3 	b.w	800d784 <_close_r>

0800d61e <__swbuf_r>:
 800d61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d620:	460e      	mov	r6, r1
 800d622:	4614      	mov	r4, r2
 800d624:	4605      	mov	r5, r0
 800d626:	b118      	cbz	r0, 800d630 <__swbuf_r+0x12>
 800d628:	6a03      	ldr	r3, [r0, #32]
 800d62a:	b90b      	cbnz	r3, 800d630 <__swbuf_r+0x12>
 800d62c:	f7ff ff10 	bl	800d450 <__sinit>
 800d630:	69a3      	ldr	r3, [r4, #24]
 800d632:	60a3      	str	r3, [r4, #8]
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	071a      	lsls	r2, r3, #28
 800d638:	d525      	bpl.n	800d686 <__swbuf_r+0x68>
 800d63a:	6923      	ldr	r3, [r4, #16]
 800d63c:	b31b      	cbz	r3, 800d686 <__swbuf_r+0x68>
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	6922      	ldr	r2, [r4, #16]
 800d642:	1a98      	subs	r0, r3, r2
 800d644:	6963      	ldr	r3, [r4, #20]
 800d646:	b2f6      	uxtb	r6, r6
 800d648:	4283      	cmp	r3, r0
 800d64a:	4637      	mov	r7, r6
 800d64c:	dc04      	bgt.n	800d658 <__swbuf_r+0x3a>
 800d64e:	4621      	mov	r1, r4
 800d650:	4628      	mov	r0, r5
 800d652:	f002 fa91 	bl	800fb78 <_fflush_r>
 800d656:	b9e0      	cbnz	r0, 800d692 <__swbuf_r+0x74>
 800d658:	68a3      	ldr	r3, [r4, #8]
 800d65a:	3b01      	subs	r3, #1
 800d65c:	60a3      	str	r3, [r4, #8]
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	1c5a      	adds	r2, r3, #1
 800d662:	6022      	str	r2, [r4, #0]
 800d664:	701e      	strb	r6, [r3, #0]
 800d666:	6962      	ldr	r2, [r4, #20]
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d004      	beq.n	800d678 <__swbuf_r+0x5a>
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	07db      	lsls	r3, r3, #31
 800d672:	d506      	bpl.n	800d682 <__swbuf_r+0x64>
 800d674:	2e0a      	cmp	r6, #10
 800d676:	d104      	bne.n	800d682 <__swbuf_r+0x64>
 800d678:	4621      	mov	r1, r4
 800d67a:	4628      	mov	r0, r5
 800d67c:	f002 fa7c 	bl	800fb78 <_fflush_r>
 800d680:	b938      	cbnz	r0, 800d692 <__swbuf_r+0x74>
 800d682:	4638      	mov	r0, r7
 800d684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d686:	4621      	mov	r1, r4
 800d688:	4628      	mov	r0, r5
 800d68a:	f000 f805 	bl	800d698 <__swsetup_r>
 800d68e:	2800      	cmp	r0, #0
 800d690:	d0d5      	beq.n	800d63e <__swbuf_r+0x20>
 800d692:	f04f 37ff 	mov.w	r7, #4294967295
 800d696:	e7f4      	b.n	800d682 <__swbuf_r+0x64>

0800d698 <__swsetup_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4b2a      	ldr	r3, [pc, #168]	; (800d744 <__swsetup_r+0xac>)
 800d69c:	4605      	mov	r5, r0
 800d69e:	6818      	ldr	r0, [r3, #0]
 800d6a0:	460c      	mov	r4, r1
 800d6a2:	b118      	cbz	r0, 800d6ac <__swsetup_r+0x14>
 800d6a4:	6a03      	ldr	r3, [r0, #32]
 800d6a6:	b90b      	cbnz	r3, 800d6ac <__swsetup_r+0x14>
 800d6a8:	f7ff fed2 	bl	800d450 <__sinit>
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6b2:	0718      	lsls	r0, r3, #28
 800d6b4:	d422      	bmi.n	800d6fc <__swsetup_r+0x64>
 800d6b6:	06d9      	lsls	r1, r3, #27
 800d6b8:	d407      	bmi.n	800d6ca <__swsetup_r+0x32>
 800d6ba:	2309      	movs	r3, #9
 800d6bc:	602b      	str	r3, [r5, #0]
 800d6be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6c2:	81a3      	strh	r3, [r4, #12]
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	e034      	b.n	800d734 <__swsetup_r+0x9c>
 800d6ca:	0758      	lsls	r0, r3, #29
 800d6cc:	d512      	bpl.n	800d6f4 <__swsetup_r+0x5c>
 800d6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6d0:	b141      	cbz	r1, 800d6e4 <__swsetup_r+0x4c>
 800d6d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6d6:	4299      	cmp	r1, r3
 800d6d8:	d002      	beq.n	800d6e0 <__swsetup_r+0x48>
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f000 ff5e 	bl	800e59c <_free_r>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	6363      	str	r3, [r4, #52]	; 0x34
 800d6e4:	89a3      	ldrh	r3, [r4, #12]
 800d6e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6ea:	81a3      	strh	r3, [r4, #12]
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	6063      	str	r3, [r4, #4]
 800d6f0:	6923      	ldr	r3, [r4, #16]
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	f043 0308 	orr.w	r3, r3, #8
 800d6fa:	81a3      	strh	r3, [r4, #12]
 800d6fc:	6923      	ldr	r3, [r4, #16]
 800d6fe:	b94b      	cbnz	r3, 800d714 <__swsetup_r+0x7c>
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d70a:	d003      	beq.n	800d714 <__swsetup_r+0x7c>
 800d70c:	4621      	mov	r1, r4
 800d70e:	4628      	mov	r0, r5
 800d710:	f002 fa80 	bl	800fc14 <__smakebuf_r>
 800d714:	89a0      	ldrh	r0, [r4, #12]
 800d716:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d71a:	f010 0301 	ands.w	r3, r0, #1
 800d71e:	d00a      	beq.n	800d736 <__swsetup_r+0x9e>
 800d720:	2300      	movs	r3, #0
 800d722:	60a3      	str	r3, [r4, #8]
 800d724:	6963      	ldr	r3, [r4, #20]
 800d726:	425b      	negs	r3, r3
 800d728:	61a3      	str	r3, [r4, #24]
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	b943      	cbnz	r3, 800d740 <__swsetup_r+0xa8>
 800d72e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d732:	d1c4      	bne.n	800d6be <__swsetup_r+0x26>
 800d734:	bd38      	pop	{r3, r4, r5, pc}
 800d736:	0781      	lsls	r1, r0, #30
 800d738:	bf58      	it	pl
 800d73a:	6963      	ldrpl	r3, [r4, #20]
 800d73c:	60a3      	str	r3, [r4, #8]
 800d73e:	e7f4      	b.n	800d72a <__swsetup_r+0x92>
 800d740:	2000      	movs	r0, #0
 800d742:	e7f7      	b.n	800d734 <__swsetup_r+0x9c>
 800d744:	200001f4 	.word	0x200001f4

0800d748 <memset>:
 800d748:	4402      	add	r2, r0
 800d74a:	4603      	mov	r3, r0
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d100      	bne.n	800d752 <memset+0xa>
 800d750:	4770      	bx	lr
 800d752:	f803 1b01 	strb.w	r1, [r3], #1
 800d756:	e7f9      	b.n	800d74c <memset+0x4>

0800d758 <strncmp>:
 800d758:	b510      	push	{r4, lr}
 800d75a:	b16a      	cbz	r2, 800d778 <strncmp+0x20>
 800d75c:	3901      	subs	r1, #1
 800d75e:	1884      	adds	r4, r0, r2
 800d760:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d764:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d768:	429a      	cmp	r2, r3
 800d76a:	d103      	bne.n	800d774 <strncmp+0x1c>
 800d76c:	42a0      	cmp	r0, r4
 800d76e:	d001      	beq.n	800d774 <strncmp+0x1c>
 800d770:	2a00      	cmp	r2, #0
 800d772:	d1f5      	bne.n	800d760 <strncmp+0x8>
 800d774:	1ad0      	subs	r0, r2, r3
 800d776:	bd10      	pop	{r4, pc}
 800d778:	4610      	mov	r0, r2
 800d77a:	e7fc      	b.n	800d776 <strncmp+0x1e>

0800d77c <_localeconv_r>:
 800d77c:	4800      	ldr	r0, [pc, #0]	; (800d780 <_localeconv_r+0x4>)
 800d77e:	4770      	bx	lr
 800d780:	2000012c 	.word	0x2000012c

0800d784 <_close_r>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	4d06      	ldr	r5, [pc, #24]	; (800d7a0 <_close_r+0x1c>)
 800d788:	2300      	movs	r3, #0
 800d78a:	4604      	mov	r4, r0
 800d78c:	4608      	mov	r0, r1
 800d78e:	602b      	str	r3, [r5, #0]
 800d790:	f7f6 fce3 	bl	800415a <_close>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	d102      	bne.n	800d79e <_close_r+0x1a>
 800d798:	682b      	ldr	r3, [r5, #0]
 800d79a:	b103      	cbz	r3, 800d79e <_close_r+0x1a>
 800d79c:	6023      	str	r3, [r4, #0]
 800d79e:	bd38      	pop	{r3, r4, r5, pc}
 800d7a0:	20000a10 	.word	0x20000a10

0800d7a4 <_lseek_r>:
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	4d07      	ldr	r5, [pc, #28]	; (800d7c4 <_lseek_r+0x20>)
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	4608      	mov	r0, r1
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	602a      	str	r2, [r5, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	f7f6 fcf8 	bl	80041a8 <_lseek>
 800d7b8:	1c43      	adds	r3, r0, #1
 800d7ba:	d102      	bne.n	800d7c2 <_lseek_r+0x1e>
 800d7bc:	682b      	ldr	r3, [r5, #0]
 800d7be:	b103      	cbz	r3, 800d7c2 <_lseek_r+0x1e>
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}
 800d7c4:	20000a10 	.word	0x20000a10

0800d7c8 <_read_r>:
 800d7c8:	b538      	push	{r3, r4, r5, lr}
 800d7ca:	4d07      	ldr	r5, [pc, #28]	; (800d7e8 <_read_r+0x20>)
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	4608      	mov	r0, r1
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	602a      	str	r2, [r5, #0]
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	f7f6 fca2 	bl	8004120 <_read>
 800d7dc:	1c43      	adds	r3, r0, #1
 800d7de:	d102      	bne.n	800d7e6 <_read_r+0x1e>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	b103      	cbz	r3, 800d7e6 <_read_r+0x1e>
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	20000a10 	.word	0x20000a10

0800d7ec <_write_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4d07      	ldr	r5, [pc, #28]	; (800d80c <_write_r+0x20>)
 800d7f0:	4604      	mov	r4, r0
 800d7f2:	4608      	mov	r0, r1
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	602a      	str	r2, [r5, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	f7f4 fb70 	bl	8001ee0 <_write>
 800d800:	1c43      	adds	r3, r0, #1
 800d802:	d102      	bne.n	800d80a <_write_r+0x1e>
 800d804:	682b      	ldr	r3, [r5, #0]
 800d806:	b103      	cbz	r3, 800d80a <_write_r+0x1e>
 800d808:	6023      	str	r3, [r4, #0]
 800d80a:	bd38      	pop	{r3, r4, r5, pc}
 800d80c:	20000a10 	.word	0x20000a10

0800d810 <__errno>:
 800d810:	4b01      	ldr	r3, [pc, #4]	; (800d818 <__errno+0x8>)
 800d812:	6818      	ldr	r0, [r3, #0]
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	200001f4 	.word	0x200001f4

0800d81c <__libc_init_array>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4d0d      	ldr	r5, [pc, #52]	; (800d854 <__libc_init_array+0x38>)
 800d820:	4c0d      	ldr	r4, [pc, #52]	; (800d858 <__libc_init_array+0x3c>)
 800d822:	1b64      	subs	r4, r4, r5
 800d824:	10a4      	asrs	r4, r4, #2
 800d826:	2600      	movs	r6, #0
 800d828:	42a6      	cmp	r6, r4
 800d82a:	d109      	bne.n	800d840 <__libc_init_array+0x24>
 800d82c:	4d0b      	ldr	r5, [pc, #44]	; (800d85c <__libc_init_array+0x40>)
 800d82e:	4c0c      	ldr	r4, [pc, #48]	; (800d860 <__libc_init_array+0x44>)
 800d830:	f002 faf0 	bl	800fe14 <_init>
 800d834:	1b64      	subs	r4, r4, r5
 800d836:	10a4      	asrs	r4, r4, #2
 800d838:	2600      	movs	r6, #0
 800d83a:	42a6      	cmp	r6, r4
 800d83c:	d105      	bne.n	800d84a <__libc_init_array+0x2e>
 800d83e:	bd70      	pop	{r4, r5, r6, pc}
 800d840:	f855 3b04 	ldr.w	r3, [r5], #4
 800d844:	4798      	blx	r3
 800d846:	3601      	adds	r6, #1
 800d848:	e7ee      	b.n	800d828 <__libc_init_array+0xc>
 800d84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d84e:	4798      	blx	r3
 800d850:	3601      	adds	r6, #1
 800d852:	e7f2      	b.n	800d83a <__libc_init_array+0x1e>
 800d854:	08010cfc 	.word	0x08010cfc
 800d858:	08010cfc 	.word	0x08010cfc
 800d85c:	08010cfc 	.word	0x08010cfc
 800d860:	08010d00 	.word	0x08010d00

0800d864 <__retarget_lock_init_recursive>:
 800d864:	4770      	bx	lr

0800d866 <__retarget_lock_acquire_recursive>:
 800d866:	4770      	bx	lr

0800d868 <__retarget_lock_release_recursive>:
 800d868:	4770      	bx	lr

0800d86a <memcpy>:
 800d86a:	440a      	add	r2, r1
 800d86c:	4291      	cmp	r1, r2
 800d86e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d872:	d100      	bne.n	800d876 <memcpy+0xc>
 800d874:	4770      	bx	lr
 800d876:	b510      	push	{r4, lr}
 800d878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d87c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d880:	4291      	cmp	r1, r2
 800d882:	d1f9      	bne.n	800d878 <memcpy+0xe>
 800d884:	bd10      	pop	{r4, pc}
	...

0800d888 <nan>:
 800d888:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d890 <nan+0x8>
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	00000000 	.word	0x00000000
 800d894:	7ff80000 	.word	0x7ff80000

0800d898 <nanf>:
 800d898:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d8a0 <nanf+0x8>
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	7fc00000 	.word	0x7fc00000

0800d8a4 <quorem>:
 800d8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a8:	6903      	ldr	r3, [r0, #16]
 800d8aa:	690c      	ldr	r4, [r1, #16]
 800d8ac:	42a3      	cmp	r3, r4
 800d8ae:	4607      	mov	r7, r0
 800d8b0:	db7e      	blt.n	800d9b0 <quorem+0x10c>
 800d8b2:	3c01      	subs	r4, #1
 800d8b4:	f101 0814 	add.w	r8, r1, #20
 800d8b8:	f100 0514 	add.w	r5, r0, #20
 800d8bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d8d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8da:	d331      	bcc.n	800d940 <quorem+0x9c>
 800d8dc:	f04f 0e00 	mov.w	lr, #0
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	46ac      	mov	ip, r5
 800d8e4:	46f2      	mov	sl, lr
 800d8e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d8ea:	b293      	uxth	r3, r2
 800d8ec:	fb06 e303 	mla	r3, r6, r3, lr
 800d8f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d8f4:	0c1a      	lsrs	r2, r3, #16
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	ebaa 0303 	sub.w	r3, sl, r3
 800d8fc:	f8dc a000 	ldr.w	sl, [ip]
 800d900:	fa13 f38a 	uxtah	r3, r3, sl
 800d904:	fb06 220e 	mla	r2, r6, lr, r2
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	9b00      	ldr	r3, [sp, #0]
 800d90c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d910:	b292      	uxth	r2, r2
 800d912:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d916:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d91a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d91e:	4581      	cmp	r9, r0
 800d920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d924:	f84c 3b04 	str.w	r3, [ip], #4
 800d928:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d92c:	d2db      	bcs.n	800d8e6 <quorem+0x42>
 800d92e:	f855 300b 	ldr.w	r3, [r5, fp]
 800d932:	b92b      	cbnz	r3, 800d940 <quorem+0x9c>
 800d934:	9b01      	ldr	r3, [sp, #4]
 800d936:	3b04      	subs	r3, #4
 800d938:	429d      	cmp	r5, r3
 800d93a:	461a      	mov	r2, r3
 800d93c:	d32c      	bcc.n	800d998 <quorem+0xf4>
 800d93e:	613c      	str	r4, [r7, #16]
 800d940:	4638      	mov	r0, r7
 800d942:	f001 fd5b 	bl	800f3fc <__mcmp>
 800d946:	2800      	cmp	r0, #0
 800d948:	db22      	blt.n	800d990 <quorem+0xec>
 800d94a:	3601      	adds	r6, #1
 800d94c:	4629      	mov	r1, r5
 800d94e:	2000      	movs	r0, #0
 800d950:	f858 2b04 	ldr.w	r2, [r8], #4
 800d954:	f8d1 c000 	ldr.w	ip, [r1]
 800d958:	b293      	uxth	r3, r2
 800d95a:	1ac3      	subs	r3, r0, r3
 800d95c:	0c12      	lsrs	r2, r2, #16
 800d95e:	fa13 f38c 	uxtah	r3, r3, ip
 800d962:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d966:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d970:	45c1      	cmp	r9, r8
 800d972:	f841 3b04 	str.w	r3, [r1], #4
 800d976:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d97a:	d2e9      	bcs.n	800d950 <quorem+0xac>
 800d97c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d980:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d984:	b922      	cbnz	r2, 800d990 <quorem+0xec>
 800d986:	3b04      	subs	r3, #4
 800d988:	429d      	cmp	r5, r3
 800d98a:	461a      	mov	r2, r3
 800d98c:	d30a      	bcc.n	800d9a4 <quorem+0x100>
 800d98e:	613c      	str	r4, [r7, #16]
 800d990:	4630      	mov	r0, r6
 800d992:	b003      	add	sp, #12
 800d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	3b04      	subs	r3, #4
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	d1ce      	bne.n	800d93e <quorem+0x9a>
 800d9a0:	3c01      	subs	r4, #1
 800d9a2:	e7c9      	b.n	800d938 <quorem+0x94>
 800d9a4:	6812      	ldr	r2, [r2, #0]
 800d9a6:	3b04      	subs	r3, #4
 800d9a8:	2a00      	cmp	r2, #0
 800d9aa:	d1f0      	bne.n	800d98e <quorem+0xea>
 800d9ac:	3c01      	subs	r4, #1
 800d9ae:	e7eb      	b.n	800d988 <quorem+0xe4>
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	e7ee      	b.n	800d992 <quorem+0xee>
 800d9b4:	0000      	movs	r0, r0
	...

0800d9b8 <_dtoa_r>:
 800d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9bc:	ed2d 8b04 	vpush	{d8-d9}
 800d9c0:	69c5      	ldr	r5, [r0, #28]
 800d9c2:	b093      	sub	sp, #76	; 0x4c
 800d9c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d9c8:	ec57 6b10 	vmov	r6, r7, d0
 800d9cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d9d0:	9107      	str	r1, [sp, #28]
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	920a      	str	r2, [sp, #40]	; 0x28
 800d9d6:	930d      	str	r3, [sp, #52]	; 0x34
 800d9d8:	b975      	cbnz	r5, 800d9f8 <_dtoa_r+0x40>
 800d9da:	2010      	movs	r0, #16
 800d9dc:	f001 f982 	bl	800ece4 <malloc>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	61e0      	str	r0, [r4, #28]
 800d9e4:	b920      	cbnz	r0, 800d9f0 <_dtoa_r+0x38>
 800d9e6:	4bae      	ldr	r3, [pc, #696]	; (800dca0 <_dtoa_r+0x2e8>)
 800d9e8:	21ef      	movs	r1, #239	; 0xef
 800d9ea:	48ae      	ldr	r0, [pc, #696]	; (800dca4 <_dtoa_r+0x2ec>)
 800d9ec:	f002 f980 	bl	800fcf0 <__assert_func>
 800d9f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d9f4:	6005      	str	r5, [r0, #0]
 800d9f6:	60c5      	str	r5, [r0, #12]
 800d9f8:	69e3      	ldr	r3, [r4, #28]
 800d9fa:	6819      	ldr	r1, [r3, #0]
 800d9fc:	b151      	cbz	r1, 800da14 <_dtoa_r+0x5c>
 800d9fe:	685a      	ldr	r2, [r3, #4]
 800da00:	604a      	str	r2, [r1, #4]
 800da02:	2301      	movs	r3, #1
 800da04:	4093      	lsls	r3, r2
 800da06:	608b      	str	r3, [r1, #8]
 800da08:	4620      	mov	r0, r4
 800da0a:	f001 fa71 	bl	800eef0 <_Bfree>
 800da0e:	69e3      	ldr	r3, [r4, #28]
 800da10:	2200      	movs	r2, #0
 800da12:	601a      	str	r2, [r3, #0]
 800da14:	1e3b      	subs	r3, r7, #0
 800da16:	bfbb      	ittet	lt
 800da18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da1c:	9303      	strlt	r3, [sp, #12]
 800da1e:	2300      	movge	r3, #0
 800da20:	2201      	movlt	r2, #1
 800da22:	bfac      	ite	ge
 800da24:	f8c8 3000 	strge.w	r3, [r8]
 800da28:	f8c8 2000 	strlt.w	r2, [r8]
 800da2c:	4b9e      	ldr	r3, [pc, #632]	; (800dca8 <_dtoa_r+0x2f0>)
 800da2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800da32:	ea33 0308 	bics.w	r3, r3, r8
 800da36:	d11b      	bne.n	800da70 <_dtoa_r+0xb8>
 800da38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da3a:	f242 730f 	movw	r3, #9999	; 0x270f
 800da3e:	6013      	str	r3, [r2, #0]
 800da40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800da44:	4333      	orrs	r3, r6
 800da46:	f000 8593 	beq.w	800e570 <_dtoa_r+0xbb8>
 800da4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da4c:	b963      	cbnz	r3, 800da68 <_dtoa_r+0xb0>
 800da4e:	4b97      	ldr	r3, [pc, #604]	; (800dcac <_dtoa_r+0x2f4>)
 800da50:	e027      	b.n	800daa2 <_dtoa_r+0xea>
 800da52:	4b97      	ldr	r3, [pc, #604]	; (800dcb0 <_dtoa_r+0x2f8>)
 800da54:	9300      	str	r3, [sp, #0]
 800da56:	3308      	adds	r3, #8
 800da58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da5a:	6013      	str	r3, [r2, #0]
 800da5c:	9800      	ldr	r0, [sp, #0]
 800da5e:	b013      	add	sp, #76	; 0x4c
 800da60:	ecbd 8b04 	vpop	{d8-d9}
 800da64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da68:	4b90      	ldr	r3, [pc, #576]	; (800dcac <_dtoa_r+0x2f4>)
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	3303      	adds	r3, #3
 800da6e:	e7f3      	b.n	800da58 <_dtoa_r+0xa0>
 800da70:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da74:	2200      	movs	r2, #0
 800da76:	ec51 0b17 	vmov	r0, r1, d7
 800da7a:	eeb0 8a47 	vmov.f32	s16, s14
 800da7e:	eef0 8a67 	vmov.f32	s17, s15
 800da82:	2300      	movs	r3, #0
 800da84:	f7f3 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 800da88:	4681      	mov	r9, r0
 800da8a:	b160      	cbz	r0, 800daa6 <_dtoa_r+0xee>
 800da8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da8e:	2301      	movs	r3, #1
 800da90:	6013      	str	r3, [r2, #0]
 800da92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da94:	2b00      	cmp	r3, #0
 800da96:	f000 8568 	beq.w	800e56a <_dtoa_r+0xbb2>
 800da9a:	4b86      	ldr	r3, [pc, #536]	; (800dcb4 <_dtoa_r+0x2fc>)
 800da9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	e7da      	b.n	800da5c <_dtoa_r+0xa4>
 800daa6:	aa10      	add	r2, sp, #64	; 0x40
 800daa8:	a911      	add	r1, sp, #68	; 0x44
 800daaa:	4620      	mov	r0, r4
 800daac:	eeb0 0a48 	vmov.f32	s0, s16
 800dab0:	eef0 0a68 	vmov.f32	s1, s17
 800dab4:	f001 fdb8 	bl	800f628 <__d2b>
 800dab8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dabc:	4682      	mov	sl, r0
 800dabe:	2d00      	cmp	r5, #0
 800dac0:	d07f      	beq.n	800dbc2 <_dtoa_r+0x20a>
 800dac2:	ee18 3a90 	vmov	r3, s17
 800dac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800daca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dace:	ec51 0b18 	vmov	r0, r1, d8
 800dad2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dada:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dade:	4619      	mov	r1, r3
 800dae0:	2200      	movs	r2, #0
 800dae2:	4b75      	ldr	r3, [pc, #468]	; (800dcb8 <_dtoa_r+0x300>)
 800dae4:	f7f2 fbd0 	bl	8000288 <__aeabi_dsub>
 800dae8:	a367      	add	r3, pc, #412	; (adr r3, 800dc88 <_dtoa_r+0x2d0>)
 800daea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daee:	f7f2 fd83 	bl	80005f8 <__aeabi_dmul>
 800daf2:	a367      	add	r3, pc, #412	; (adr r3, 800dc90 <_dtoa_r+0x2d8>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	f7f2 fbc8 	bl	800028c <__adddf3>
 800dafc:	4606      	mov	r6, r0
 800dafe:	4628      	mov	r0, r5
 800db00:	460f      	mov	r7, r1
 800db02:	f7f2 fd0f 	bl	8000524 <__aeabi_i2d>
 800db06:	a364      	add	r3, pc, #400	; (adr r3, 800dc98 <_dtoa_r+0x2e0>)
 800db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0c:	f7f2 fd74 	bl	80005f8 <__aeabi_dmul>
 800db10:	4602      	mov	r2, r0
 800db12:	460b      	mov	r3, r1
 800db14:	4630      	mov	r0, r6
 800db16:	4639      	mov	r1, r7
 800db18:	f7f2 fbb8 	bl	800028c <__adddf3>
 800db1c:	4606      	mov	r6, r0
 800db1e:	460f      	mov	r7, r1
 800db20:	f7f3 f81a 	bl	8000b58 <__aeabi_d2iz>
 800db24:	2200      	movs	r2, #0
 800db26:	4683      	mov	fp, r0
 800db28:	2300      	movs	r3, #0
 800db2a:	4630      	mov	r0, r6
 800db2c:	4639      	mov	r1, r7
 800db2e:	f7f2 ffd5 	bl	8000adc <__aeabi_dcmplt>
 800db32:	b148      	cbz	r0, 800db48 <_dtoa_r+0x190>
 800db34:	4658      	mov	r0, fp
 800db36:	f7f2 fcf5 	bl	8000524 <__aeabi_i2d>
 800db3a:	4632      	mov	r2, r6
 800db3c:	463b      	mov	r3, r7
 800db3e:	f7f2 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800db42:	b908      	cbnz	r0, 800db48 <_dtoa_r+0x190>
 800db44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db48:	f1bb 0f16 	cmp.w	fp, #22
 800db4c:	d857      	bhi.n	800dbfe <_dtoa_r+0x246>
 800db4e:	4b5b      	ldr	r3, [pc, #364]	; (800dcbc <_dtoa_r+0x304>)
 800db50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	ec51 0b18 	vmov	r0, r1, d8
 800db5c:	f7f2 ffbe 	bl	8000adc <__aeabi_dcmplt>
 800db60:	2800      	cmp	r0, #0
 800db62:	d04e      	beq.n	800dc02 <_dtoa_r+0x24a>
 800db64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db68:	2300      	movs	r3, #0
 800db6a:	930c      	str	r3, [sp, #48]	; 0x30
 800db6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db6e:	1b5b      	subs	r3, r3, r5
 800db70:	1e5a      	subs	r2, r3, #1
 800db72:	bf45      	ittet	mi
 800db74:	f1c3 0301 	rsbmi	r3, r3, #1
 800db78:	9305      	strmi	r3, [sp, #20]
 800db7a:	2300      	movpl	r3, #0
 800db7c:	2300      	movmi	r3, #0
 800db7e:	9206      	str	r2, [sp, #24]
 800db80:	bf54      	ite	pl
 800db82:	9305      	strpl	r3, [sp, #20]
 800db84:	9306      	strmi	r3, [sp, #24]
 800db86:	f1bb 0f00 	cmp.w	fp, #0
 800db8a:	db3c      	blt.n	800dc06 <_dtoa_r+0x24e>
 800db8c:	9b06      	ldr	r3, [sp, #24]
 800db8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800db92:	445b      	add	r3, fp
 800db94:	9306      	str	r3, [sp, #24]
 800db96:	2300      	movs	r3, #0
 800db98:	9308      	str	r3, [sp, #32]
 800db9a:	9b07      	ldr	r3, [sp, #28]
 800db9c:	2b09      	cmp	r3, #9
 800db9e:	d868      	bhi.n	800dc72 <_dtoa_r+0x2ba>
 800dba0:	2b05      	cmp	r3, #5
 800dba2:	bfc4      	itt	gt
 800dba4:	3b04      	subgt	r3, #4
 800dba6:	9307      	strgt	r3, [sp, #28]
 800dba8:	9b07      	ldr	r3, [sp, #28]
 800dbaa:	f1a3 0302 	sub.w	r3, r3, #2
 800dbae:	bfcc      	ite	gt
 800dbb0:	2500      	movgt	r5, #0
 800dbb2:	2501      	movle	r5, #1
 800dbb4:	2b03      	cmp	r3, #3
 800dbb6:	f200 8085 	bhi.w	800dcc4 <_dtoa_r+0x30c>
 800dbba:	e8df f003 	tbb	[pc, r3]
 800dbbe:	3b2e      	.short	0x3b2e
 800dbc0:	5839      	.short	0x5839
 800dbc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dbc6:	441d      	add	r5, r3
 800dbc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dbcc:	2b20      	cmp	r3, #32
 800dbce:	bfc1      	itttt	gt
 800dbd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dbd4:	fa08 f803 	lslgt.w	r8, r8, r3
 800dbd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800dbdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dbe0:	bfd6      	itet	le
 800dbe2:	f1c3 0320 	rsble	r3, r3, #32
 800dbe6:	ea48 0003 	orrgt.w	r0, r8, r3
 800dbea:	fa06 f003 	lslle.w	r0, r6, r3
 800dbee:	f7f2 fc89 	bl	8000504 <__aeabi_ui2d>
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dbf8:	3d01      	subs	r5, #1
 800dbfa:	920e      	str	r2, [sp, #56]	; 0x38
 800dbfc:	e76f      	b.n	800dade <_dtoa_r+0x126>
 800dbfe:	2301      	movs	r3, #1
 800dc00:	e7b3      	b.n	800db6a <_dtoa_r+0x1b2>
 800dc02:	900c      	str	r0, [sp, #48]	; 0x30
 800dc04:	e7b2      	b.n	800db6c <_dtoa_r+0x1b4>
 800dc06:	9b05      	ldr	r3, [sp, #20]
 800dc08:	eba3 030b 	sub.w	r3, r3, fp
 800dc0c:	9305      	str	r3, [sp, #20]
 800dc0e:	f1cb 0300 	rsb	r3, fp, #0
 800dc12:	9308      	str	r3, [sp, #32]
 800dc14:	2300      	movs	r3, #0
 800dc16:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc18:	e7bf      	b.n	800db9a <_dtoa_r+0x1e2>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dc52      	bgt.n	800dcca <_dtoa_r+0x312>
 800dc24:	2301      	movs	r3, #1
 800dc26:	9301      	str	r3, [sp, #4]
 800dc28:	9304      	str	r3, [sp, #16]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	920a      	str	r2, [sp, #40]	; 0x28
 800dc2e:	e00b      	b.n	800dc48 <_dtoa_r+0x290>
 800dc30:	2301      	movs	r3, #1
 800dc32:	e7f3      	b.n	800dc1c <_dtoa_r+0x264>
 800dc34:	2300      	movs	r3, #0
 800dc36:	9309      	str	r3, [sp, #36]	; 0x24
 800dc38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc3a:	445b      	add	r3, fp
 800dc3c:	9301      	str	r3, [sp, #4]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	9304      	str	r3, [sp, #16]
 800dc44:	bfb8      	it	lt
 800dc46:	2301      	movlt	r3, #1
 800dc48:	69e0      	ldr	r0, [r4, #28]
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	2204      	movs	r2, #4
 800dc4e:	f102 0614 	add.w	r6, r2, #20
 800dc52:	429e      	cmp	r6, r3
 800dc54:	d93d      	bls.n	800dcd2 <_dtoa_r+0x31a>
 800dc56:	6041      	str	r1, [r0, #4]
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f001 f909 	bl	800ee70 <_Balloc>
 800dc5e:	9000      	str	r0, [sp, #0]
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d139      	bne.n	800dcd8 <_dtoa_r+0x320>
 800dc64:	4b16      	ldr	r3, [pc, #88]	; (800dcc0 <_dtoa_r+0x308>)
 800dc66:	4602      	mov	r2, r0
 800dc68:	f240 11af 	movw	r1, #431	; 0x1af
 800dc6c:	e6bd      	b.n	800d9ea <_dtoa_r+0x32>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e7e1      	b.n	800dc36 <_dtoa_r+0x27e>
 800dc72:	2501      	movs	r5, #1
 800dc74:	2300      	movs	r3, #0
 800dc76:	9307      	str	r3, [sp, #28]
 800dc78:	9509      	str	r5, [sp, #36]	; 0x24
 800dc7a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	2200      	movs	r2, #0
 800dc84:	2312      	movs	r3, #18
 800dc86:	e7d1      	b.n	800dc2c <_dtoa_r+0x274>
 800dc88:	636f4361 	.word	0x636f4361
 800dc8c:	3fd287a7 	.word	0x3fd287a7
 800dc90:	8b60c8b3 	.word	0x8b60c8b3
 800dc94:	3fc68a28 	.word	0x3fc68a28
 800dc98:	509f79fb 	.word	0x509f79fb
 800dc9c:	3fd34413 	.word	0x3fd34413
 800dca0:	08010a6a 	.word	0x08010a6a
 800dca4:	08010a81 	.word	0x08010a81
 800dca8:	7ff00000 	.word	0x7ff00000
 800dcac:	08010a66 	.word	0x08010a66
 800dcb0:	08010a5d 	.word	0x08010a5d
 800dcb4:	08010a32 	.word	0x08010a32
 800dcb8:	3ff80000 	.word	0x3ff80000
 800dcbc:	08010bd0 	.word	0x08010bd0
 800dcc0:	08010ad9 	.word	0x08010ad9
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc8:	e7d7      	b.n	800dc7a <_dtoa_r+0x2c2>
 800dcca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	9304      	str	r3, [sp, #16]
 800dcd0:	e7ba      	b.n	800dc48 <_dtoa_r+0x290>
 800dcd2:	3101      	adds	r1, #1
 800dcd4:	0052      	lsls	r2, r2, #1
 800dcd6:	e7ba      	b.n	800dc4e <_dtoa_r+0x296>
 800dcd8:	69e3      	ldr	r3, [r4, #28]
 800dcda:	9a00      	ldr	r2, [sp, #0]
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	9b04      	ldr	r3, [sp, #16]
 800dce0:	2b0e      	cmp	r3, #14
 800dce2:	f200 80a8 	bhi.w	800de36 <_dtoa_r+0x47e>
 800dce6:	2d00      	cmp	r5, #0
 800dce8:	f000 80a5 	beq.w	800de36 <_dtoa_r+0x47e>
 800dcec:	f1bb 0f00 	cmp.w	fp, #0
 800dcf0:	dd38      	ble.n	800dd64 <_dtoa_r+0x3ac>
 800dcf2:	4bc0      	ldr	r3, [pc, #768]	; (800dff4 <_dtoa_r+0x63c>)
 800dcf4:	f00b 020f 	and.w	r2, fp, #15
 800dcf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dd00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800dd04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800dd08:	d019      	beq.n	800dd3e <_dtoa_r+0x386>
 800dd0a:	4bbb      	ldr	r3, [pc, #748]	; (800dff8 <_dtoa_r+0x640>)
 800dd0c:	ec51 0b18 	vmov	r0, r1, d8
 800dd10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd14:	f7f2 fd9a 	bl	800084c <__aeabi_ddiv>
 800dd18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd1c:	f008 080f 	and.w	r8, r8, #15
 800dd20:	2503      	movs	r5, #3
 800dd22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800dff8 <_dtoa_r+0x640>
 800dd26:	f1b8 0f00 	cmp.w	r8, #0
 800dd2a:	d10a      	bne.n	800dd42 <_dtoa_r+0x38a>
 800dd2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd30:	4632      	mov	r2, r6
 800dd32:	463b      	mov	r3, r7
 800dd34:	f7f2 fd8a 	bl	800084c <__aeabi_ddiv>
 800dd38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd3c:	e02b      	b.n	800dd96 <_dtoa_r+0x3de>
 800dd3e:	2502      	movs	r5, #2
 800dd40:	e7ef      	b.n	800dd22 <_dtoa_r+0x36a>
 800dd42:	f018 0f01 	tst.w	r8, #1
 800dd46:	d008      	beq.n	800dd5a <_dtoa_r+0x3a2>
 800dd48:	4630      	mov	r0, r6
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dd50:	f7f2 fc52 	bl	80005f8 <__aeabi_dmul>
 800dd54:	3501      	adds	r5, #1
 800dd56:	4606      	mov	r6, r0
 800dd58:	460f      	mov	r7, r1
 800dd5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dd5e:	f109 0908 	add.w	r9, r9, #8
 800dd62:	e7e0      	b.n	800dd26 <_dtoa_r+0x36e>
 800dd64:	f000 809f 	beq.w	800dea6 <_dtoa_r+0x4ee>
 800dd68:	f1cb 0600 	rsb	r6, fp, #0
 800dd6c:	4ba1      	ldr	r3, [pc, #644]	; (800dff4 <_dtoa_r+0x63c>)
 800dd6e:	4fa2      	ldr	r7, [pc, #648]	; (800dff8 <_dtoa_r+0x640>)
 800dd70:	f006 020f 	and.w	r2, r6, #15
 800dd74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	ec51 0b18 	vmov	r0, r1, d8
 800dd80:	f7f2 fc3a 	bl	80005f8 <__aeabi_dmul>
 800dd84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd88:	1136      	asrs	r6, r6, #4
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	2502      	movs	r5, #2
 800dd8e:	2e00      	cmp	r6, #0
 800dd90:	d17e      	bne.n	800de90 <_dtoa_r+0x4d8>
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1d0      	bne.n	800dd38 <_dtoa_r+0x380>
 800dd96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f000 8084 	beq.w	800deaa <_dtoa_r+0x4f2>
 800dda2:	4b96      	ldr	r3, [pc, #600]	; (800dffc <_dtoa_r+0x644>)
 800dda4:	2200      	movs	r2, #0
 800dda6:	4640      	mov	r0, r8
 800dda8:	4649      	mov	r1, r9
 800ddaa:	f7f2 fe97 	bl	8000adc <__aeabi_dcmplt>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	d07b      	beq.n	800deaa <_dtoa_r+0x4f2>
 800ddb2:	9b04      	ldr	r3, [sp, #16]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d078      	beq.n	800deaa <_dtoa_r+0x4f2>
 800ddb8:	9b01      	ldr	r3, [sp, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	dd39      	ble.n	800de32 <_dtoa_r+0x47a>
 800ddbe:	4b90      	ldr	r3, [pc, #576]	; (800e000 <_dtoa_r+0x648>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	4649      	mov	r1, r9
 800ddc6:	f7f2 fc17 	bl	80005f8 <__aeabi_dmul>
 800ddca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddce:	9e01      	ldr	r6, [sp, #4]
 800ddd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ddd4:	3501      	adds	r5, #1
 800ddd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ddda:	4628      	mov	r0, r5
 800dddc:	f7f2 fba2 	bl	8000524 <__aeabi_i2d>
 800dde0:	4642      	mov	r2, r8
 800dde2:	464b      	mov	r3, r9
 800dde4:	f7f2 fc08 	bl	80005f8 <__aeabi_dmul>
 800dde8:	4b86      	ldr	r3, [pc, #536]	; (800e004 <_dtoa_r+0x64c>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	f7f2 fa4e 	bl	800028c <__adddf3>
 800ddf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ddf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddf8:	9303      	str	r3, [sp, #12]
 800ddfa:	2e00      	cmp	r6, #0
 800ddfc:	d158      	bne.n	800deb0 <_dtoa_r+0x4f8>
 800ddfe:	4b82      	ldr	r3, [pc, #520]	; (800e008 <_dtoa_r+0x650>)
 800de00:	2200      	movs	r2, #0
 800de02:	4640      	mov	r0, r8
 800de04:	4649      	mov	r1, r9
 800de06:	f7f2 fa3f 	bl	8000288 <__aeabi_dsub>
 800de0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de0e:	4680      	mov	r8, r0
 800de10:	4689      	mov	r9, r1
 800de12:	f7f2 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 800de16:	2800      	cmp	r0, #0
 800de18:	f040 8296 	bne.w	800e348 <_dtoa_r+0x990>
 800de1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de20:	4640      	mov	r0, r8
 800de22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de26:	4649      	mov	r1, r9
 800de28:	f7f2 fe58 	bl	8000adc <__aeabi_dcmplt>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	f040 8289 	bne.w	800e344 <_dtoa_r+0x98c>
 800de32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800de36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f2c0 814e 	blt.w	800e0da <_dtoa_r+0x722>
 800de3e:	f1bb 0f0e 	cmp.w	fp, #14
 800de42:	f300 814a 	bgt.w	800e0da <_dtoa_r+0x722>
 800de46:	4b6b      	ldr	r3, [pc, #428]	; (800dff4 <_dtoa_r+0x63c>)
 800de48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de52:	2b00      	cmp	r3, #0
 800de54:	f280 80dc 	bge.w	800e010 <_dtoa_r+0x658>
 800de58:	9b04      	ldr	r3, [sp, #16]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f300 80d8 	bgt.w	800e010 <_dtoa_r+0x658>
 800de60:	f040 826f 	bne.w	800e342 <_dtoa_r+0x98a>
 800de64:	4b68      	ldr	r3, [pc, #416]	; (800e008 <_dtoa_r+0x650>)
 800de66:	2200      	movs	r2, #0
 800de68:	4640      	mov	r0, r8
 800de6a:	4649      	mov	r1, r9
 800de6c:	f7f2 fbc4 	bl	80005f8 <__aeabi_dmul>
 800de70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de74:	f7f2 fe46 	bl	8000b04 <__aeabi_dcmpge>
 800de78:	9e04      	ldr	r6, [sp, #16]
 800de7a:	4637      	mov	r7, r6
 800de7c:	2800      	cmp	r0, #0
 800de7e:	f040 8245 	bne.w	800e30c <_dtoa_r+0x954>
 800de82:	9d00      	ldr	r5, [sp, #0]
 800de84:	2331      	movs	r3, #49	; 0x31
 800de86:	f805 3b01 	strb.w	r3, [r5], #1
 800de8a:	f10b 0b01 	add.w	fp, fp, #1
 800de8e:	e241      	b.n	800e314 <_dtoa_r+0x95c>
 800de90:	07f2      	lsls	r2, r6, #31
 800de92:	d505      	bpl.n	800dea0 <_dtoa_r+0x4e8>
 800de94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de98:	f7f2 fbae 	bl	80005f8 <__aeabi_dmul>
 800de9c:	3501      	adds	r5, #1
 800de9e:	2301      	movs	r3, #1
 800dea0:	1076      	asrs	r6, r6, #1
 800dea2:	3708      	adds	r7, #8
 800dea4:	e773      	b.n	800dd8e <_dtoa_r+0x3d6>
 800dea6:	2502      	movs	r5, #2
 800dea8:	e775      	b.n	800dd96 <_dtoa_r+0x3de>
 800deaa:	9e04      	ldr	r6, [sp, #16]
 800deac:	465f      	mov	r7, fp
 800deae:	e792      	b.n	800ddd6 <_dtoa_r+0x41e>
 800deb0:	9900      	ldr	r1, [sp, #0]
 800deb2:	4b50      	ldr	r3, [pc, #320]	; (800dff4 <_dtoa_r+0x63c>)
 800deb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800deb8:	4431      	add	r1, r6
 800deba:	9102      	str	r1, [sp, #8]
 800debc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800debe:	eeb0 9a47 	vmov.f32	s18, s14
 800dec2:	eef0 9a67 	vmov.f32	s19, s15
 800dec6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800deca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dece:	2900      	cmp	r1, #0
 800ded0:	d044      	beq.n	800df5c <_dtoa_r+0x5a4>
 800ded2:	494e      	ldr	r1, [pc, #312]	; (800e00c <_dtoa_r+0x654>)
 800ded4:	2000      	movs	r0, #0
 800ded6:	f7f2 fcb9 	bl	800084c <__aeabi_ddiv>
 800deda:	ec53 2b19 	vmov	r2, r3, d9
 800dede:	f7f2 f9d3 	bl	8000288 <__aeabi_dsub>
 800dee2:	9d00      	ldr	r5, [sp, #0]
 800dee4:	ec41 0b19 	vmov	d9, r0, r1
 800dee8:	4649      	mov	r1, r9
 800deea:	4640      	mov	r0, r8
 800deec:	f7f2 fe34 	bl	8000b58 <__aeabi_d2iz>
 800def0:	4606      	mov	r6, r0
 800def2:	f7f2 fb17 	bl	8000524 <__aeabi_i2d>
 800def6:	4602      	mov	r2, r0
 800def8:	460b      	mov	r3, r1
 800defa:	4640      	mov	r0, r8
 800defc:	4649      	mov	r1, r9
 800defe:	f7f2 f9c3 	bl	8000288 <__aeabi_dsub>
 800df02:	3630      	adds	r6, #48	; 0x30
 800df04:	f805 6b01 	strb.w	r6, [r5], #1
 800df08:	ec53 2b19 	vmov	r2, r3, d9
 800df0c:	4680      	mov	r8, r0
 800df0e:	4689      	mov	r9, r1
 800df10:	f7f2 fde4 	bl	8000adc <__aeabi_dcmplt>
 800df14:	2800      	cmp	r0, #0
 800df16:	d164      	bne.n	800dfe2 <_dtoa_r+0x62a>
 800df18:	4642      	mov	r2, r8
 800df1a:	464b      	mov	r3, r9
 800df1c:	4937      	ldr	r1, [pc, #220]	; (800dffc <_dtoa_r+0x644>)
 800df1e:	2000      	movs	r0, #0
 800df20:	f7f2 f9b2 	bl	8000288 <__aeabi_dsub>
 800df24:	ec53 2b19 	vmov	r2, r3, d9
 800df28:	f7f2 fdd8 	bl	8000adc <__aeabi_dcmplt>
 800df2c:	2800      	cmp	r0, #0
 800df2e:	f040 80b6 	bne.w	800e09e <_dtoa_r+0x6e6>
 800df32:	9b02      	ldr	r3, [sp, #8]
 800df34:	429d      	cmp	r5, r3
 800df36:	f43f af7c 	beq.w	800de32 <_dtoa_r+0x47a>
 800df3a:	4b31      	ldr	r3, [pc, #196]	; (800e000 <_dtoa_r+0x648>)
 800df3c:	ec51 0b19 	vmov	r0, r1, d9
 800df40:	2200      	movs	r2, #0
 800df42:	f7f2 fb59 	bl	80005f8 <__aeabi_dmul>
 800df46:	4b2e      	ldr	r3, [pc, #184]	; (800e000 <_dtoa_r+0x648>)
 800df48:	ec41 0b19 	vmov	d9, r0, r1
 800df4c:	2200      	movs	r2, #0
 800df4e:	4640      	mov	r0, r8
 800df50:	4649      	mov	r1, r9
 800df52:	f7f2 fb51 	bl	80005f8 <__aeabi_dmul>
 800df56:	4680      	mov	r8, r0
 800df58:	4689      	mov	r9, r1
 800df5a:	e7c5      	b.n	800dee8 <_dtoa_r+0x530>
 800df5c:	ec51 0b17 	vmov	r0, r1, d7
 800df60:	f7f2 fb4a 	bl	80005f8 <__aeabi_dmul>
 800df64:	9b02      	ldr	r3, [sp, #8]
 800df66:	9d00      	ldr	r5, [sp, #0]
 800df68:	930f      	str	r3, [sp, #60]	; 0x3c
 800df6a:	ec41 0b19 	vmov	d9, r0, r1
 800df6e:	4649      	mov	r1, r9
 800df70:	4640      	mov	r0, r8
 800df72:	f7f2 fdf1 	bl	8000b58 <__aeabi_d2iz>
 800df76:	4606      	mov	r6, r0
 800df78:	f7f2 fad4 	bl	8000524 <__aeabi_i2d>
 800df7c:	3630      	adds	r6, #48	; 0x30
 800df7e:	4602      	mov	r2, r0
 800df80:	460b      	mov	r3, r1
 800df82:	4640      	mov	r0, r8
 800df84:	4649      	mov	r1, r9
 800df86:	f7f2 f97f 	bl	8000288 <__aeabi_dsub>
 800df8a:	f805 6b01 	strb.w	r6, [r5], #1
 800df8e:	9b02      	ldr	r3, [sp, #8]
 800df90:	429d      	cmp	r5, r3
 800df92:	4680      	mov	r8, r0
 800df94:	4689      	mov	r9, r1
 800df96:	f04f 0200 	mov.w	r2, #0
 800df9a:	d124      	bne.n	800dfe6 <_dtoa_r+0x62e>
 800df9c:	4b1b      	ldr	r3, [pc, #108]	; (800e00c <_dtoa_r+0x654>)
 800df9e:	ec51 0b19 	vmov	r0, r1, d9
 800dfa2:	f7f2 f973 	bl	800028c <__adddf3>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	4640      	mov	r0, r8
 800dfac:	4649      	mov	r1, r9
 800dfae:	f7f2 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 800dfb2:	2800      	cmp	r0, #0
 800dfb4:	d173      	bne.n	800e09e <_dtoa_r+0x6e6>
 800dfb6:	ec53 2b19 	vmov	r2, r3, d9
 800dfba:	4914      	ldr	r1, [pc, #80]	; (800e00c <_dtoa_r+0x654>)
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	f7f2 f963 	bl	8000288 <__aeabi_dsub>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	4649      	mov	r1, r9
 800dfca:	f7f2 fd87 	bl	8000adc <__aeabi_dcmplt>
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	f43f af2f 	beq.w	800de32 <_dtoa_r+0x47a>
 800dfd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dfd6:	1e6b      	subs	r3, r5, #1
 800dfd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dfde:	2b30      	cmp	r3, #48	; 0x30
 800dfe0:	d0f8      	beq.n	800dfd4 <_dtoa_r+0x61c>
 800dfe2:	46bb      	mov	fp, r7
 800dfe4:	e04a      	b.n	800e07c <_dtoa_r+0x6c4>
 800dfe6:	4b06      	ldr	r3, [pc, #24]	; (800e000 <_dtoa_r+0x648>)
 800dfe8:	f7f2 fb06 	bl	80005f8 <__aeabi_dmul>
 800dfec:	4680      	mov	r8, r0
 800dfee:	4689      	mov	r9, r1
 800dff0:	e7bd      	b.n	800df6e <_dtoa_r+0x5b6>
 800dff2:	bf00      	nop
 800dff4:	08010bd0 	.word	0x08010bd0
 800dff8:	08010ba8 	.word	0x08010ba8
 800dffc:	3ff00000 	.word	0x3ff00000
 800e000:	40240000 	.word	0x40240000
 800e004:	401c0000 	.word	0x401c0000
 800e008:	40140000 	.word	0x40140000
 800e00c:	3fe00000 	.word	0x3fe00000
 800e010:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e014:	9d00      	ldr	r5, [sp, #0]
 800e016:	4642      	mov	r2, r8
 800e018:	464b      	mov	r3, r9
 800e01a:	4630      	mov	r0, r6
 800e01c:	4639      	mov	r1, r7
 800e01e:	f7f2 fc15 	bl	800084c <__aeabi_ddiv>
 800e022:	f7f2 fd99 	bl	8000b58 <__aeabi_d2iz>
 800e026:	9001      	str	r0, [sp, #4]
 800e028:	f7f2 fa7c 	bl	8000524 <__aeabi_i2d>
 800e02c:	4642      	mov	r2, r8
 800e02e:	464b      	mov	r3, r9
 800e030:	f7f2 fae2 	bl	80005f8 <__aeabi_dmul>
 800e034:	4602      	mov	r2, r0
 800e036:	460b      	mov	r3, r1
 800e038:	4630      	mov	r0, r6
 800e03a:	4639      	mov	r1, r7
 800e03c:	f7f2 f924 	bl	8000288 <__aeabi_dsub>
 800e040:	9e01      	ldr	r6, [sp, #4]
 800e042:	9f04      	ldr	r7, [sp, #16]
 800e044:	3630      	adds	r6, #48	; 0x30
 800e046:	f805 6b01 	strb.w	r6, [r5], #1
 800e04a:	9e00      	ldr	r6, [sp, #0]
 800e04c:	1bae      	subs	r6, r5, r6
 800e04e:	42b7      	cmp	r7, r6
 800e050:	4602      	mov	r2, r0
 800e052:	460b      	mov	r3, r1
 800e054:	d134      	bne.n	800e0c0 <_dtoa_r+0x708>
 800e056:	f7f2 f919 	bl	800028c <__adddf3>
 800e05a:	4642      	mov	r2, r8
 800e05c:	464b      	mov	r3, r9
 800e05e:	4606      	mov	r6, r0
 800e060:	460f      	mov	r7, r1
 800e062:	f7f2 fd59 	bl	8000b18 <__aeabi_dcmpgt>
 800e066:	b9c8      	cbnz	r0, 800e09c <_dtoa_r+0x6e4>
 800e068:	4642      	mov	r2, r8
 800e06a:	464b      	mov	r3, r9
 800e06c:	4630      	mov	r0, r6
 800e06e:	4639      	mov	r1, r7
 800e070:	f7f2 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e074:	b110      	cbz	r0, 800e07c <_dtoa_r+0x6c4>
 800e076:	9b01      	ldr	r3, [sp, #4]
 800e078:	07db      	lsls	r3, r3, #31
 800e07a:	d40f      	bmi.n	800e09c <_dtoa_r+0x6e4>
 800e07c:	4651      	mov	r1, sl
 800e07e:	4620      	mov	r0, r4
 800e080:	f000 ff36 	bl	800eef0 <_Bfree>
 800e084:	2300      	movs	r3, #0
 800e086:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e088:	702b      	strb	r3, [r5, #0]
 800e08a:	f10b 0301 	add.w	r3, fp, #1
 800e08e:	6013      	str	r3, [r2, #0]
 800e090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e092:	2b00      	cmp	r3, #0
 800e094:	f43f ace2 	beq.w	800da5c <_dtoa_r+0xa4>
 800e098:	601d      	str	r5, [r3, #0]
 800e09a:	e4df      	b.n	800da5c <_dtoa_r+0xa4>
 800e09c:	465f      	mov	r7, fp
 800e09e:	462b      	mov	r3, r5
 800e0a0:	461d      	mov	r5, r3
 800e0a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0a6:	2a39      	cmp	r2, #57	; 0x39
 800e0a8:	d106      	bne.n	800e0b8 <_dtoa_r+0x700>
 800e0aa:	9a00      	ldr	r2, [sp, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d1f7      	bne.n	800e0a0 <_dtoa_r+0x6e8>
 800e0b0:	9900      	ldr	r1, [sp, #0]
 800e0b2:	2230      	movs	r2, #48	; 0x30
 800e0b4:	3701      	adds	r7, #1
 800e0b6:	700a      	strb	r2, [r1, #0]
 800e0b8:	781a      	ldrb	r2, [r3, #0]
 800e0ba:	3201      	adds	r2, #1
 800e0bc:	701a      	strb	r2, [r3, #0]
 800e0be:	e790      	b.n	800dfe2 <_dtoa_r+0x62a>
 800e0c0:	4ba3      	ldr	r3, [pc, #652]	; (800e350 <_dtoa_r+0x998>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f7f2 fa98 	bl	80005f8 <__aeabi_dmul>
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	4606      	mov	r6, r0
 800e0ce:	460f      	mov	r7, r1
 800e0d0:	f7f2 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	d09e      	beq.n	800e016 <_dtoa_r+0x65e>
 800e0d8:	e7d0      	b.n	800e07c <_dtoa_r+0x6c4>
 800e0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0dc:	2a00      	cmp	r2, #0
 800e0de:	f000 80ca 	beq.w	800e276 <_dtoa_r+0x8be>
 800e0e2:	9a07      	ldr	r2, [sp, #28]
 800e0e4:	2a01      	cmp	r2, #1
 800e0e6:	f300 80ad 	bgt.w	800e244 <_dtoa_r+0x88c>
 800e0ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0ec:	2a00      	cmp	r2, #0
 800e0ee:	f000 80a5 	beq.w	800e23c <_dtoa_r+0x884>
 800e0f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e0f6:	9e08      	ldr	r6, [sp, #32]
 800e0f8:	9d05      	ldr	r5, [sp, #20]
 800e0fa:	9a05      	ldr	r2, [sp, #20]
 800e0fc:	441a      	add	r2, r3
 800e0fe:	9205      	str	r2, [sp, #20]
 800e100:	9a06      	ldr	r2, [sp, #24]
 800e102:	2101      	movs	r1, #1
 800e104:	441a      	add	r2, r3
 800e106:	4620      	mov	r0, r4
 800e108:	9206      	str	r2, [sp, #24]
 800e10a:	f000 fff1 	bl	800f0f0 <__i2b>
 800e10e:	4607      	mov	r7, r0
 800e110:	b165      	cbz	r5, 800e12c <_dtoa_r+0x774>
 800e112:	9b06      	ldr	r3, [sp, #24]
 800e114:	2b00      	cmp	r3, #0
 800e116:	dd09      	ble.n	800e12c <_dtoa_r+0x774>
 800e118:	42ab      	cmp	r3, r5
 800e11a:	9a05      	ldr	r2, [sp, #20]
 800e11c:	bfa8      	it	ge
 800e11e:	462b      	movge	r3, r5
 800e120:	1ad2      	subs	r2, r2, r3
 800e122:	9205      	str	r2, [sp, #20]
 800e124:	9a06      	ldr	r2, [sp, #24]
 800e126:	1aed      	subs	r5, r5, r3
 800e128:	1ad3      	subs	r3, r2, r3
 800e12a:	9306      	str	r3, [sp, #24]
 800e12c:	9b08      	ldr	r3, [sp, #32]
 800e12e:	b1f3      	cbz	r3, 800e16e <_dtoa_r+0x7b6>
 800e130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e132:	2b00      	cmp	r3, #0
 800e134:	f000 80a3 	beq.w	800e27e <_dtoa_r+0x8c6>
 800e138:	2e00      	cmp	r6, #0
 800e13a:	dd10      	ble.n	800e15e <_dtoa_r+0x7a6>
 800e13c:	4639      	mov	r1, r7
 800e13e:	4632      	mov	r2, r6
 800e140:	4620      	mov	r0, r4
 800e142:	f001 f895 	bl	800f270 <__pow5mult>
 800e146:	4652      	mov	r2, sl
 800e148:	4601      	mov	r1, r0
 800e14a:	4607      	mov	r7, r0
 800e14c:	4620      	mov	r0, r4
 800e14e:	f000 ffe5 	bl	800f11c <__multiply>
 800e152:	4651      	mov	r1, sl
 800e154:	4680      	mov	r8, r0
 800e156:	4620      	mov	r0, r4
 800e158:	f000 feca 	bl	800eef0 <_Bfree>
 800e15c:	46c2      	mov	sl, r8
 800e15e:	9b08      	ldr	r3, [sp, #32]
 800e160:	1b9a      	subs	r2, r3, r6
 800e162:	d004      	beq.n	800e16e <_dtoa_r+0x7b6>
 800e164:	4651      	mov	r1, sl
 800e166:	4620      	mov	r0, r4
 800e168:	f001 f882 	bl	800f270 <__pow5mult>
 800e16c:	4682      	mov	sl, r0
 800e16e:	2101      	movs	r1, #1
 800e170:	4620      	mov	r0, r4
 800e172:	f000 ffbd 	bl	800f0f0 <__i2b>
 800e176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e178:	2b00      	cmp	r3, #0
 800e17a:	4606      	mov	r6, r0
 800e17c:	f340 8081 	ble.w	800e282 <_dtoa_r+0x8ca>
 800e180:	461a      	mov	r2, r3
 800e182:	4601      	mov	r1, r0
 800e184:	4620      	mov	r0, r4
 800e186:	f001 f873 	bl	800f270 <__pow5mult>
 800e18a:	9b07      	ldr	r3, [sp, #28]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	4606      	mov	r6, r0
 800e190:	dd7a      	ble.n	800e288 <_dtoa_r+0x8d0>
 800e192:	f04f 0800 	mov.w	r8, #0
 800e196:	6933      	ldr	r3, [r6, #16]
 800e198:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e19c:	6918      	ldr	r0, [r3, #16]
 800e19e:	f000 ff59 	bl	800f054 <__hi0bits>
 800e1a2:	f1c0 0020 	rsb	r0, r0, #32
 800e1a6:	9b06      	ldr	r3, [sp, #24]
 800e1a8:	4418      	add	r0, r3
 800e1aa:	f010 001f 	ands.w	r0, r0, #31
 800e1ae:	f000 8094 	beq.w	800e2da <_dtoa_r+0x922>
 800e1b2:	f1c0 0320 	rsb	r3, r0, #32
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	f340 8085 	ble.w	800e2c6 <_dtoa_r+0x90e>
 800e1bc:	9b05      	ldr	r3, [sp, #20]
 800e1be:	f1c0 001c 	rsb	r0, r0, #28
 800e1c2:	4403      	add	r3, r0
 800e1c4:	9305      	str	r3, [sp, #20]
 800e1c6:	9b06      	ldr	r3, [sp, #24]
 800e1c8:	4403      	add	r3, r0
 800e1ca:	4405      	add	r5, r0
 800e1cc:	9306      	str	r3, [sp, #24]
 800e1ce:	9b05      	ldr	r3, [sp, #20]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	dd05      	ble.n	800e1e0 <_dtoa_r+0x828>
 800e1d4:	4651      	mov	r1, sl
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f001 f8a3 	bl	800f324 <__lshift>
 800e1de:	4682      	mov	sl, r0
 800e1e0:	9b06      	ldr	r3, [sp, #24]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dd05      	ble.n	800e1f2 <_dtoa_r+0x83a>
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f001 f89a 	bl	800f324 <__lshift>
 800e1f0:	4606      	mov	r6, r0
 800e1f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d072      	beq.n	800e2de <_dtoa_r+0x926>
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4650      	mov	r0, sl
 800e1fc:	f001 f8fe 	bl	800f3fc <__mcmp>
 800e200:	2800      	cmp	r0, #0
 800e202:	da6c      	bge.n	800e2de <_dtoa_r+0x926>
 800e204:	2300      	movs	r3, #0
 800e206:	4651      	mov	r1, sl
 800e208:	220a      	movs	r2, #10
 800e20a:	4620      	mov	r0, r4
 800e20c:	f000 fe92 	bl	800ef34 <__multadd>
 800e210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e212:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e216:	4682      	mov	sl, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f000 81b0 	beq.w	800e57e <_dtoa_r+0xbc6>
 800e21e:	2300      	movs	r3, #0
 800e220:	4639      	mov	r1, r7
 800e222:	220a      	movs	r2, #10
 800e224:	4620      	mov	r0, r4
 800e226:	f000 fe85 	bl	800ef34 <__multadd>
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	4607      	mov	r7, r0
 800e230:	f300 8096 	bgt.w	800e360 <_dtoa_r+0x9a8>
 800e234:	9b07      	ldr	r3, [sp, #28]
 800e236:	2b02      	cmp	r3, #2
 800e238:	dc59      	bgt.n	800e2ee <_dtoa_r+0x936>
 800e23a:	e091      	b.n	800e360 <_dtoa_r+0x9a8>
 800e23c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e23e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e242:	e758      	b.n	800e0f6 <_dtoa_r+0x73e>
 800e244:	9b04      	ldr	r3, [sp, #16]
 800e246:	1e5e      	subs	r6, r3, #1
 800e248:	9b08      	ldr	r3, [sp, #32]
 800e24a:	42b3      	cmp	r3, r6
 800e24c:	bfbf      	itttt	lt
 800e24e:	9b08      	ldrlt	r3, [sp, #32]
 800e250:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e252:	9608      	strlt	r6, [sp, #32]
 800e254:	1af3      	sublt	r3, r6, r3
 800e256:	bfb4      	ite	lt
 800e258:	18d2      	addlt	r2, r2, r3
 800e25a:	1b9e      	subge	r6, r3, r6
 800e25c:	9b04      	ldr	r3, [sp, #16]
 800e25e:	bfbc      	itt	lt
 800e260:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e262:	2600      	movlt	r6, #0
 800e264:	2b00      	cmp	r3, #0
 800e266:	bfb7      	itett	lt
 800e268:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e26c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e270:	1a9d      	sublt	r5, r3, r2
 800e272:	2300      	movlt	r3, #0
 800e274:	e741      	b.n	800e0fa <_dtoa_r+0x742>
 800e276:	9e08      	ldr	r6, [sp, #32]
 800e278:	9d05      	ldr	r5, [sp, #20]
 800e27a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e27c:	e748      	b.n	800e110 <_dtoa_r+0x758>
 800e27e:	9a08      	ldr	r2, [sp, #32]
 800e280:	e770      	b.n	800e164 <_dtoa_r+0x7ac>
 800e282:	9b07      	ldr	r3, [sp, #28]
 800e284:	2b01      	cmp	r3, #1
 800e286:	dc19      	bgt.n	800e2bc <_dtoa_r+0x904>
 800e288:	9b02      	ldr	r3, [sp, #8]
 800e28a:	b9bb      	cbnz	r3, 800e2bc <_dtoa_r+0x904>
 800e28c:	9b03      	ldr	r3, [sp, #12]
 800e28e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e292:	b99b      	cbnz	r3, 800e2bc <_dtoa_r+0x904>
 800e294:	9b03      	ldr	r3, [sp, #12]
 800e296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e29a:	0d1b      	lsrs	r3, r3, #20
 800e29c:	051b      	lsls	r3, r3, #20
 800e29e:	b183      	cbz	r3, 800e2c2 <_dtoa_r+0x90a>
 800e2a0:	9b05      	ldr	r3, [sp, #20]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	9305      	str	r3, [sp, #20]
 800e2a6:	9b06      	ldr	r3, [sp, #24]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	9306      	str	r3, [sp, #24]
 800e2ac:	f04f 0801 	mov.w	r8, #1
 800e2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f47f af6f 	bne.w	800e196 <_dtoa_r+0x7de>
 800e2b8:	2001      	movs	r0, #1
 800e2ba:	e774      	b.n	800e1a6 <_dtoa_r+0x7ee>
 800e2bc:	f04f 0800 	mov.w	r8, #0
 800e2c0:	e7f6      	b.n	800e2b0 <_dtoa_r+0x8f8>
 800e2c2:	4698      	mov	r8, r3
 800e2c4:	e7f4      	b.n	800e2b0 <_dtoa_r+0x8f8>
 800e2c6:	d082      	beq.n	800e1ce <_dtoa_r+0x816>
 800e2c8:	9a05      	ldr	r2, [sp, #20]
 800e2ca:	331c      	adds	r3, #28
 800e2cc:	441a      	add	r2, r3
 800e2ce:	9205      	str	r2, [sp, #20]
 800e2d0:	9a06      	ldr	r2, [sp, #24]
 800e2d2:	441a      	add	r2, r3
 800e2d4:	441d      	add	r5, r3
 800e2d6:	9206      	str	r2, [sp, #24]
 800e2d8:	e779      	b.n	800e1ce <_dtoa_r+0x816>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	e7f4      	b.n	800e2c8 <_dtoa_r+0x910>
 800e2de:	9b04      	ldr	r3, [sp, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dc37      	bgt.n	800e354 <_dtoa_r+0x99c>
 800e2e4:	9b07      	ldr	r3, [sp, #28]
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	dd34      	ble.n	800e354 <_dtoa_r+0x99c>
 800e2ea:	9b04      	ldr	r3, [sp, #16]
 800e2ec:	9301      	str	r3, [sp, #4]
 800e2ee:	9b01      	ldr	r3, [sp, #4]
 800e2f0:	b963      	cbnz	r3, 800e30c <_dtoa_r+0x954>
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	2205      	movs	r2, #5
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 fe1c 	bl	800ef34 <__multadd>
 800e2fc:	4601      	mov	r1, r0
 800e2fe:	4606      	mov	r6, r0
 800e300:	4650      	mov	r0, sl
 800e302:	f001 f87b 	bl	800f3fc <__mcmp>
 800e306:	2800      	cmp	r0, #0
 800e308:	f73f adbb 	bgt.w	800de82 <_dtoa_r+0x4ca>
 800e30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e30e:	9d00      	ldr	r5, [sp, #0]
 800e310:	ea6f 0b03 	mvn.w	fp, r3
 800e314:	f04f 0800 	mov.w	r8, #0
 800e318:	4631      	mov	r1, r6
 800e31a:	4620      	mov	r0, r4
 800e31c:	f000 fde8 	bl	800eef0 <_Bfree>
 800e320:	2f00      	cmp	r7, #0
 800e322:	f43f aeab 	beq.w	800e07c <_dtoa_r+0x6c4>
 800e326:	f1b8 0f00 	cmp.w	r8, #0
 800e32a:	d005      	beq.n	800e338 <_dtoa_r+0x980>
 800e32c:	45b8      	cmp	r8, r7
 800e32e:	d003      	beq.n	800e338 <_dtoa_r+0x980>
 800e330:	4641      	mov	r1, r8
 800e332:	4620      	mov	r0, r4
 800e334:	f000 fddc 	bl	800eef0 <_Bfree>
 800e338:	4639      	mov	r1, r7
 800e33a:	4620      	mov	r0, r4
 800e33c:	f000 fdd8 	bl	800eef0 <_Bfree>
 800e340:	e69c      	b.n	800e07c <_dtoa_r+0x6c4>
 800e342:	2600      	movs	r6, #0
 800e344:	4637      	mov	r7, r6
 800e346:	e7e1      	b.n	800e30c <_dtoa_r+0x954>
 800e348:	46bb      	mov	fp, r7
 800e34a:	4637      	mov	r7, r6
 800e34c:	e599      	b.n	800de82 <_dtoa_r+0x4ca>
 800e34e:	bf00      	nop
 800e350:	40240000 	.word	0x40240000
 800e354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e356:	2b00      	cmp	r3, #0
 800e358:	f000 80c8 	beq.w	800e4ec <_dtoa_r+0xb34>
 800e35c:	9b04      	ldr	r3, [sp, #16]
 800e35e:	9301      	str	r3, [sp, #4]
 800e360:	2d00      	cmp	r5, #0
 800e362:	dd05      	ble.n	800e370 <_dtoa_r+0x9b8>
 800e364:	4639      	mov	r1, r7
 800e366:	462a      	mov	r2, r5
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 ffdb 	bl	800f324 <__lshift>
 800e36e:	4607      	mov	r7, r0
 800e370:	f1b8 0f00 	cmp.w	r8, #0
 800e374:	d05b      	beq.n	800e42e <_dtoa_r+0xa76>
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	4620      	mov	r0, r4
 800e37a:	f000 fd79 	bl	800ee70 <_Balloc>
 800e37e:	4605      	mov	r5, r0
 800e380:	b928      	cbnz	r0, 800e38e <_dtoa_r+0x9d6>
 800e382:	4b83      	ldr	r3, [pc, #524]	; (800e590 <_dtoa_r+0xbd8>)
 800e384:	4602      	mov	r2, r0
 800e386:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e38a:	f7ff bb2e 	b.w	800d9ea <_dtoa_r+0x32>
 800e38e:	693a      	ldr	r2, [r7, #16]
 800e390:	3202      	adds	r2, #2
 800e392:	0092      	lsls	r2, r2, #2
 800e394:	f107 010c 	add.w	r1, r7, #12
 800e398:	300c      	adds	r0, #12
 800e39a:	f7ff fa66 	bl	800d86a <memcpy>
 800e39e:	2201      	movs	r2, #1
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f000 ffbe 	bl	800f324 <__lshift>
 800e3a8:	9b00      	ldr	r3, [sp, #0]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	9304      	str	r3, [sp, #16]
 800e3ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	9308      	str	r3, [sp, #32]
 800e3b6:	9b02      	ldr	r3, [sp, #8]
 800e3b8:	f003 0301 	and.w	r3, r3, #1
 800e3bc:	46b8      	mov	r8, r7
 800e3be:	9306      	str	r3, [sp, #24]
 800e3c0:	4607      	mov	r7, r0
 800e3c2:	9b04      	ldr	r3, [sp, #16]
 800e3c4:	4631      	mov	r1, r6
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	4650      	mov	r0, sl
 800e3ca:	9301      	str	r3, [sp, #4]
 800e3cc:	f7ff fa6a 	bl	800d8a4 <quorem>
 800e3d0:	4641      	mov	r1, r8
 800e3d2:	9002      	str	r0, [sp, #8]
 800e3d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e3d8:	4650      	mov	r0, sl
 800e3da:	f001 f80f 	bl	800f3fc <__mcmp>
 800e3de:	463a      	mov	r2, r7
 800e3e0:	9005      	str	r0, [sp, #20]
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f001 f825 	bl	800f434 <__mdiff>
 800e3ea:	68c2      	ldr	r2, [r0, #12]
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	bb02      	cbnz	r2, 800e432 <_dtoa_r+0xa7a>
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	4650      	mov	r0, sl
 800e3f4:	f001 f802 	bl	800f3fc <__mcmp>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	4629      	mov	r1, r5
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e400:	f000 fd76 	bl	800eef0 <_Bfree>
 800e404:	9b07      	ldr	r3, [sp, #28]
 800e406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e408:	9d04      	ldr	r5, [sp, #16]
 800e40a:	ea43 0102 	orr.w	r1, r3, r2
 800e40e:	9b06      	ldr	r3, [sp, #24]
 800e410:	4319      	orrs	r1, r3
 800e412:	d110      	bne.n	800e436 <_dtoa_r+0xa7e>
 800e414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e418:	d029      	beq.n	800e46e <_dtoa_r+0xab6>
 800e41a:	9b05      	ldr	r3, [sp, #20]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dd02      	ble.n	800e426 <_dtoa_r+0xa6e>
 800e420:	9b02      	ldr	r3, [sp, #8]
 800e422:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	f883 9000 	strb.w	r9, [r3]
 800e42c:	e774      	b.n	800e318 <_dtoa_r+0x960>
 800e42e:	4638      	mov	r0, r7
 800e430:	e7ba      	b.n	800e3a8 <_dtoa_r+0x9f0>
 800e432:	2201      	movs	r2, #1
 800e434:	e7e1      	b.n	800e3fa <_dtoa_r+0xa42>
 800e436:	9b05      	ldr	r3, [sp, #20]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	db04      	blt.n	800e446 <_dtoa_r+0xa8e>
 800e43c:	9907      	ldr	r1, [sp, #28]
 800e43e:	430b      	orrs	r3, r1
 800e440:	9906      	ldr	r1, [sp, #24]
 800e442:	430b      	orrs	r3, r1
 800e444:	d120      	bne.n	800e488 <_dtoa_r+0xad0>
 800e446:	2a00      	cmp	r2, #0
 800e448:	dded      	ble.n	800e426 <_dtoa_r+0xa6e>
 800e44a:	4651      	mov	r1, sl
 800e44c:	2201      	movs	r2, #1
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 ff68 	bl	800f324 <__lshift>
 800e454:	4631      	mov	r1, r6
 800e456:	4682      	mov	sl, r0
 800e458:	f000 ffd0 	bl	800f3fc <__mcmp>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	dc03      	bgt.n	800e468 <_dtoa_r+0xab0>
 800e460:	d1e1      	bne.n	800e426 <_dtoa_r+0xa6e>
 800e462:	f019 0f01 	tst.w	r9, #1
 800e466:	d0de      	beq.n	800e426 <_dtoa_r+0xa6e>
 800e468:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e46c:	d1d8      	bne.n	800e420 <_dtoa_r+0xa68>
 800e46e:	9a01      	ldr	r2, [sp, #4]
 800e470:	2339      	movs	r3, #57	; 0x39
 800e472:	7013      	strb	r3, [r2, #0]
 800e474:	462b      	mov	r3, r5
 800e476:	461d      	mov	r5, r3
 800e478:	3b01      	subs	r3, #1
 800e47a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e47e:	2a39      	cmp	r2, #57	; 0x39
 800e480:	d06c      	beq.n	800e55c <_dtoa_r+0xba4>
 800e482:	3201      	adds	r2, #1
 800e484:	701a      	strb	r2, [r3, #0]
 800e486:	e747      	b.n	800e318 <_dtoa_r+0x960>
 800e488:	2a00      	cmp	r2, #0
 800e48a:	dd07      	ble.n	800e49c <_dtoa_r+0xae4>
 800e48c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e490:	d0ed      	beq.n	800e46e <_dtoa_r+0xab6>
 800e492:	9a01      	ldr	r2, [sp, #4]
 800e494:	f109 0301 	add.w	r3, r9, #1
 800e498:	7013      	strb	r3, [r2, #0]
 800e49a:	e73d      	b.n	800e318 <_dtoa_r+0x960>
 800e49c:	9b04      	ldr	r3, [sp, #16]
 800e49e:	9a08      	ldr	r2, [sp, #32]
 800e4a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d043      	beq.n	800e530 <_dtoa_r+0xb78>
 800e4a8:	4651      	mov	r1, sl
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	220a      	movs	r2, #10
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	f000 fd40 	bl	800ef34 <__multadd>
 800e4b4:	45b8      	cmp	r8, r7
 800e4b6:	4682      	mov	sl, r0
 800e4b8:	f04f 0300 	mov.w	r3, #0
 800e4bc:	f04f 020a 	mov.w	r2, #10
 800e4c0:	4641      	mov	r1, r8
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	d107      	bne.n	800e4d6 <_dtoa_r+0xb1e>
 800e4c6:	f000 fd35 	bl	800ef34 <__multadd>
 800e4ca:	4680      	mov	r8, r0
 800e4cc:	4607      	mov	r7, r0
 800e4ce:	9b04      	ldr	r3, [sp, #16]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	9304      	str	r3, [sp, #16]
 800e4d4:	e775      	b.n	800e3c2 <_dtoa_r+0xa0a>
 800e4d6:	f000 fd2d 	bl	800ef34 <__multadd>
 800e4da:	4639      	mov	r1, r7
 800e4dc:	4680      	mov	r8, r0
 800e4de:	2300      	movs	r3, #0
 800e4e0:	220a      	movs	r2, #10
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f000 fd26 	bl	800ef34 <__multadd>
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	e7f0      	b.n	800e4ce <_dtoa_r+0xb16>
 800e4ec:	9b04      	ldr	r3, [sp, #16]
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	9d00      	ldr	r5, [sp, #0]
 800e4f2:	4631      	mov	r1, r6
 800e4f4:	4650      	mov	r0, sl
 800e4f6:	f7ff f9d5 	bl	800d8a4 <quorem>
 800e4fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e4fe:	9b00      	ldr	r3, [sp, #0]
 800e500:	f805 9b01 	strb.w	r9, [r5], #1
 800e504:	1aea      	subs	r2, r5, r3
 800e506:	9b01      	ldr	r3, [sp, #4]
 800e508:	4293      	cmp	r3, r2
 800e50a:	dd07      	ble.n	800e51c <_dtoa_r+0xb64>
 800e50c:	4651      	mov	r1, sl
 800e50e:	2300      	movs	r3, #0
 800e510:	220a      	movs	r2, #10
 800e512:	4620      	mov	r0, r4
 800e514:	f000 fd0e 	bl	800ef34 <__multadd>
 800e518:	4682      	mov	sl, r0
 800e51a:	e7ea      	b.n	800e4f2 <_dtoa_r+0xb3a>
 800e51c:	9b01      	ldr	r3, [sp, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	bfc8      	it	gt
 800e522:	461d      	movgt	r5, r3
 800e524:	9b00      	ldr	r3, [sp, #0]
 800e526:	bfd8      	it	le
 800e528:	2501      	movle	r5, #1
 800e52a:	441d      	add	r5, r3
 800e52c:	f04f 0800 	mov.w	r8, #0
 800e530:	4651      	mov	r1, sl
 800e532:	2201      	movs	r2, #1
 800e534:	4620      	mov	r0, r4
 800e536:	f000 fef5 	bl	800f324 <__lshift>
 800e53a:	4631      	mov	r1, r6
 800e53c:	4682      	mov	sl, r0
 800e53e:	f000 ff5d 	bl	800f3fc <__mcmp>
 800e542:	2800      	cmp	r0, #0
 800e544:	dc96      	bgt.n	800e474 <_dtoa_r+0xabc>
 800e546:	d102      	bne.n	800e54e <_dtoa_r+0xb96>
 800e548:	f019 0f01 	tst.w	r9, #1
 800e54c:	d192      	bne.n	800e474 <_dtoa_r+0xabc>
 800e54e:	462b      	mov	r3, r5
 800e550:	461d      	mov	r5, r3
 800e552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e556:	2a30      	cmp	r2, #48	; 0x30
 800e558:	d0fa      	beq.n	800e550 <_dtoa_r+0xb98>
 800e55a:	e6dd      	b.n	800e318 <_dtoa_r+0x960>
 800e55c:	9a00      	ldr	r2, [sp, #0]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d189      	bne.n	800e476 <_dtoa_r+0xabe>
 800e562:	f10b 0b01 	add.w	fp, fp, #1
 800e566:	2331      	movs	r3, #49	; 0x31
 800e568:	e796      	b.n	800e498 <_dtoa_r+0xae0>
 800e56a:	4b0a      	ldr	r3, [pc, #40]	; (800e594 <_dtoa_r+0xbdc>)
 800e56c:	f7ff ba99 	b.w	800daa2 <_dtoa_r+0xea>
 800e570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e572:	2b00      	cmp	r3, #0
 800e574:	f47f aa6d 	bne.w	800da52 <_dtoa_r+0x9a>
 800e578:	4b07      	ldr	r3, [pc, #28]	; (800e598 <_dtoa_r+0xbe0>)
 800e57a:	f7ff ba92 	b.w	800daa2 <_dtoa_r+0xea>
 800e57e:	9b01      	ldr	r3, [sp, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	dcb5      	bgt.n	800e4f0 <_dtoa_r+0xb38>
 800e584:	9b07      	ldr	r3, [sp, #28]
 800e586:	2b02      	cmp	r3, #2
 800e588:	f73f aeb1 	bgt.w	800e2ee <_dtoa_r+0x936>
 800e58c:	e7b0      	b.n	800e4f0 <_dtoa_r+0xb38>
 800e58e:	bf00      	nop
 800e590:	08010ad9 	.word	0x08010ad9
 800e594:	08010a31 	.word	0x08010a31
 800e598:	08010a5d 	.word	0x08010a5d

0800e59c <_free_r>:
 800e59c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e59e:	2900      	cmp	r1, #0
 800e5a0:	d044      	beq.n	800e62c <_free_r+0x90>
 800e5a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5a6:	9001      	str	r0, [sp, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e5ae:	bfb8      	it	lt
 800e5b0:	18e4      	addlt	r4, r4, r3
 800e5b2:	f000 fc51 	bl	800ee58 <__malloc_lock>
 800e5b6:	4a1e      	ldr	r2, [pc, #120]	; (800e630 <_free_r+0x94>)
 800e5b8:	9801      	ldr	r0, [sp, #4]
 800e5ba:	6813      	ldr	r3, [r2, #0]
 800e5bc:	b933      	cbnz	r3, 800e5cc <_free_r+0x30>
 800e5be:	6063      	str	r3, [r4, #4]
 800e5c0:	6014      	str	r4, [r2, #0]
 800e5c2:	b003      	add	sp, #12
 800e5c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5c8:	f000 bc4c 	b.w	800ee64 <__malloc_unlock>
 800e5cc:	42a3      	cmp	r3, r4
 800e5ce:	d908      	bls.n	800e5e2 <_free_r+0x46>
 800e5d0:	6825      	ldr	r5, [r4, #0]
 800e5d2:	1961      	adds	r1, r4, r5
 800e5d4:	428b      	cmp	r3, r1
 800e5d6:	bf01      	itttt	eq
 800e5d8:	6819      	ldreq	r1, [r3, #0]
 800e5da:	685b      	ldreq	r3, [r3, #4]
 800e5dc:	1949      	addeq	r1, r1, r5
 800e5de:	6021      	streq	r1, [r4, #0]
 800e5e0:	e7ed      	b.n	800e5be <_free_r+0x22>
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	b10b      	cbz	r3, 800e5ec <_free_r+0x50>
 800e5e8:	42a3      	cmp	r3, r4
 800e5ea:	d9fa      	bls.n	800e5e2 <_free_r+0x46>
 800e5ec:	6811      	ldr	r1, [r2, #0]
 800e5ee:	1855      	adds	r5, r2, r1
 800e5f0:	42a5      	cmp	r5, r4
 800e5f2:	d10b      	bne.n	800e60c <_free_r+0x70>
 800e5f4:	6824      	ldr	r4, [r4, #0]
 800e5f6:	4421      	add	r1, r4
 800e5f8:	1854      	adds	r4, r2, r1
 800e5fa:	42a3      	cmp	r3, r4
 800e5fc:	6011      	str	r1, [r2, #0]
 800e5fe:	d1e0      	bne.n	800e5c2 <_free_r+0x26>
 800e600:	681c      	ldr	r4, [r3, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	6053      	str	r3, [r2, #4]
 800e606:	440c      	add	r4, r1
 800e608:	6014      	str	r4, [r2, #0]
 800e60a:	e7da      	b.n	800e5c2 <_free_r+0x26>
 800e60c:	d902      	bls.n	800e614 <_free_r+0x78>
 800e60e:	230c      	movs	r3, #12
 800e610:	6003      	str	r3, [r0, #0]
 800e612:	e7d6      	b.n	800e5c2 <_free_r+0x26>
 800e614:	6825      	ldr	r5, [r4, #0]
 800e616:	1961      	adds	r1, r4, r5
 800e618:	428b      	cmp	r3, r1
 800e61a:	bf04      	itt	eq
 800e61c:	6819      	ldreq	r1, [r3, #0]
 800e61e:	685b      	ldreq	r3, [r3, #4]
 800e620:	6063      	str	r3, [r4, #4]
 800e622:	bf04      	itt	eq
 800e624:	1949      	addeq	r1, r1, r5
 800e626:	6021      	streq	r1, [r4, #0]
 800e628:	6054      	str	r4, [r2, #4]
 800e62a:	e7ca      	b.n	800e5c2 <_free_r+0x26>
 800e62c:	b003      	add	sp, #12
 800e62e:	bd30      	pop	{r4, r5, pc}
 800e630:	20000a18 	.word	0x20000a18

0800e634 <rshift>:
 800e634:	6903      	ldr	r3, [r0, #16]
 800e636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e63a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e63e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e642:	f100 0414 	add.w	r4, r0, #20
 800e646:	dd45      	ble.n	800e6d4 <rshift+0xa0>
 800e648:	f011 011f 	ands.w	r1, r1, #31
 800e64c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e654:	d10c      	bne.n	800e670 <rshift+0x3c>
 800e656:	f100 0710 	add.w	r7, r0, #16
 800e65a:	4629      	mov	r1, r5
 800e65c:	42b1      	cmp	r1, r6
 800e65e:	d334      	bcc.n	800e6ca <rshift+0x96>
 800e660:	1a9b      	subs	r3, r3, r2
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	1eea      	subs	r2, r5, #3
 800e666:	4296      	cmp	r6, r2
 800e668:	bf38      	it	cc
 800e66a:	2300      	movcc	r3, #0
 800e66c:	4423      	add	r3, r4
 800e66e:	e015      	b.n	800e69c <rshift+0x68>
 800e670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e674:	f1c1 0820 	rsb	r8, r1, #32
 800e678:	40cf      	lsrs	r7, r1
 800e67a:	f105 0e04 	add.w	lr, r5, #4
 800e67e:	46a1      	mov	r9, r4
 800e680:	4576      	cmp	r6, lr
 800e682:	46f4      	mov	ip, lr
 800e684:	d815      	bhi.n	800e6b2 <rshift+0x7e>
 800e686:	1a9a      	subs	r2, r3, r2
 800e688:	0092      	lsls	r2, r2, #2
 800e68a:	3a04      	subs	r2, #4
 800e68c:	3501      	adds	r5, #1
 800e68e:	42ae      	cmp	r6, r5
 800e690:	bf38      	it	cc
 800e692:	2200      	movcc	r2, #0
 800e694:	18a3      	adds	r3, r4, r2
 800e696:	50a7      	str	r7, [r4, r2]
 800e698:	b107      	cbz	r7, 800e69c <rshift+0x68>
 800e69a:	3304      	adds	r3, #4
 800e69c:	1b1a      	subs	r2, r3, r4
 800e69e:	42a3      	cmp	r3, r4
 800e6a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e6a4:	bf08      	it	eq
 800e6a6:	2300      	moveq	r3, #0
 800e6a8:	6102      	str	r2, [r0, #16]
 800e6aa:	bf08      	it	eq
 800e6ac:	6143      	streq	r3, [r0, #20]
 800e6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6b2:	f8dc c000 	ldr.w	ip, [ip]
 800e6b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e6ba:	ea4c 0707 	orr.w	r7, ip, r7
 800e6be:	f849 7b04 	str.w	r7, [r9], #4
 800e6c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e6c6:	40cf      	lsrs	r7, r1
 800e6c8:	e7da      	b.n	800e680 <rshift+0x4c>
 800e6ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800e6ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800e6d2:	e7c3      	b.n	800e65c <rshift+0x28>
 800e6d4:	4623      	mov	r3, r4
 800e6d6:	e7e1      	b.n	800e69c <rshift+0x68>

0800e6d8 <__hexdig_fun>:
 800e6d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e6dc:	2b09      	cmp	r3, #9
 800e6de:	d802      	bhi.n	800e6e6 <__hexdig_fun+0xe>
 800e6e0:	3820      	subs	r0, #32
 800e6e2:	b2c0      	uxtb	r0, r0
 800e6e4:	4770      	bx	lr
 800e6e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e6ea:	2b05      	cmp	r3, #5
 800e6ec:	d801      	bhi.n	800e6f2 <__hexdig_fun+0x1a>
 800e6ee:	3847      	subs	r0, #71	; 0x47
 800e6f0:	e7f7      	b.n	800e6e2 <__hexdig_fun+0xa>
 800e6f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e6f6:	2b05      	cmp	r3, #5
 800e6f8:	d801      	bhi.n	800e6fe <__hexdig_fun+0x26>
 800e6fa:	3827      	subs	r0, #39	; 0x27
 800e6fc:	e7f1      	b.n	800e6e2 <__hexdig_fun+0xa>
 800e6fe:	2000      	movs	r0, #0
 800e700:	4770      	bx	lr
	...

0800e704 <__gethex>:
 800e704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e708:	4617      	mov	r7, r2
 800e70a:	680a      	ldr	r2, [r1, #0]
 800e70c:	b085      	sub	sp, #20
 800e70e:	f102 0b02 	add.w	fp, r2, #2
 800e712:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e716:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e71a:	4681      	mov	r9, r0
 800e71c:	468a      	mov	sl, r1
 800e71e:	9302      	str	r3, [sp, #8]
 800e720:	32fe      	adds	r2, #254	; 0xfe
 800e722:	eb02 030b 	add.w	r3, r2, fp
 800e726:	46d8      	mov	r8, fp
 800e728:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	2830      	cmp	r0, #48	; 0x30
 800e730:	d0f7      	beq.n	800e722 <__gethex+0x1e>
 800e732:	f7ff ffd1 	bl	800e6d8 <__hexdig_fun>
 800e736:	4604      	mov	r4, r0
 800e738:	2800      	cmp	r0, #0
 800e73a:	d138      	bne.n	800e7ae <__gethex+0xaa>
 800e73c:	49a7      	ldr	r1, [pc, #668]	; (800e9dc <__gethex+0x2d8>)
 800e73e:	2201      	movs	r2, #1
 800e740:	4640      	mov	r0, r8
 800e742:	f7ff f809 	bl	800d758 <strncmp>
 800e746:	4606      	mov	r6, r0
 800e748:	2800      	cmp	r0, #0
 800e74a:	d169      	bne.n	800e820 <__gethex+0x11c>
 800e74c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e750:	465d      	mov	r5, fp
 800e752:	f7ff ffc1 	bl	800e6d8 <__hexdig_fun>
 800e756:	2800      	cmp	r0, #0
 800e758:	d064      	beq.n	800e824 <__gethex+0x120>
 800e75a:	465a      	mov	r2, fp
 800e75c:	7810      	ldrb	r0, [r2, #0]
 800e75e:	2830      	cmp	r0, #48	; 0x30
 800e760:	4690      	mov	r8, r2
 800e762:	f102 0201 	add.w	r2, r2, #1
 800e766:	d0f9      	beq.n	800e75c <__gethex+0x58>
 800e768:	f7ff ffb6 	bl	800e6d8 <__hexdig_fun>
 800e76c:	2301      	movs	r3, #1
 800e76e:	fab0 f480 	clz	r4, r0
 800e772:	0964      	lsrs	r4, r4, #5
 800e774:	465e      	mov	r6, fp
 800e776:	9301      	str	r3, [sp, #4]
 800e778:	4642      	mov	r2, r8
 800e77a:	4615      	mov	r5, r2
 800e77c:	3201      	adds	r2, #1
 800e77e:	7828      	ldrb	r0, [r5, #0]
 800e780:	f7ff ffaa 	bl	800e6d8 <__hexdig_fun>
 800e784:	2800      	cmp	r0, #0
 800e786:	d1f8      	bne.n	800e77a <__gethex+0x76>
 800e788:	4994      	ldr	r1, [pc, #592]	; (800e9dc <__gethex+0x2d8>)
 800e78a:	2201      	movs	r2, #1
 800e78c:	4628      	mov	r0, r5
 800e78e:	f7fe ffe3 	bl	800d758 <strncmp>
 800e792:	b978      	cbnz	r0, 800e7b4 <__gethex+0xb0>
 800e794:	b946      	cbnz	r6, 800e7a8 <__gethex+0xa4>
 800e796:	1c6e      	adds	r6, r5, #1
 800e798:	4632      	mov	r2, r6
 800e79a:	4615      	mov	r5, r2
 800e79c:	3201      	adds	r2, #1
 800e79e:	7828      	ldrb	r0, [r5, #0]
 800e7a0:	f7ff ff9a 	bl	800e6d8 <__hexdig_fun>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	d1f8      	bne.n	800e79a <__gethex+0x96>
 800e7a8:	1b73      	subs	r3, r6, r5
 800e7aa:	009e      	lsls	r6, r3, #2
 800e7ac:	e004      	b.n	800e7b8 <__gethex+0xb4>
 800e7ae:	2400      	movs	r4, #0
 800e7b0:	4626      	mov	r6, r4
 800e7b2:	e7e1      	b.n	800e778 <__gethex+0x74>
 800e7b4:	2e00      	cmp	r6, #0
 800e7b6:	d1f7      	bne.n	800e7a8 <__gethex+0xa4>
 800e7b8:	782b      	ldrb	r3, [r5, #0]
 800e7ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e7be:	2b50      	cmp	r3, #80	; 0x50
 800e7c0:	d13d      	bne.n	800e83e <__gethex+0x13a>
 800e7c2:	786b      	ldrb	r3, [r5, #1]
 800e7c4:	2b2b      	cmp	r3, #43	; 0x2b
 800e7c6:	d02f      	beq.n	800e828 <__gethex+0x124>
 800e7c8:	2b2d      	cmp	r3, #45	; 0x2d
 800e7ca:	d031      	beq.n	800e830 <__gethex+0x12c>
 800e7cc:	1c69      	adds	r1, r5, #1
 800e7ce:	f04f 0b00 	mov.w	fp, #0
 800e7d2:	7808      	ldrb	r0, [r1, #0]
 800e7d4:	f7ff ff80 	bl	800e6d8 <__hexdig_fun>
 800e7d8:	1e42      	subs	r2, r0, #1
 800e7da:	b2d2      	uxtb	r2, r2
 800e7dc:	2a18      	cmp	r2, #24
 800e7de:	d82e      	bhi.n	800e83e <__gethex+0x13a>
 800e7e0:	f1a0 0210 	sub.w	r2, r0, #16
 800e7e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e7e8:	f7ff ff76 	bl	800e6d8 <__hexdig_fun>
 800e7ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800e7f0:	fa5f fc8c 	uxtb.w	ip, ip
 800e7f4:	f1bc 0f18 	cmp.w	ip, #24
 800e7f8:	d91d      	bls.n	800e836 <__gethex+0x132>
 800e7fa:	f1bb 0f00 	cmp.w	fp, #0
 800e7fe:	d000      	beq.n	800e802 <__gethex+0xfe>
 800e800:	4252      	negs	r2, r2
 800e802:	4416      	add	r6, r2
 800e804:	f8ca 1000 	str.w	r1, [sl]
 800e808:	b1dc      	cbz	r4, 800e842 <__gethex+0x13e>
 800e80a:	9b01      	ldr	r3, [sp, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	bf14      	ite	ne
 800e810:	f04f 0800 	movne.w	r8, #0
 800e814:	f04f 0806 	moveq.w	r8, #6
 800e818:	4640      	mov	r0, r8
 800e81a:	b005      	add	sp, #20
 800e81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e820:	4645      	mov	r5, r8
 800e822:	4626      	mov	r6, r4
 800e824:	2401      	movs	r4, #1
 800e826:	e7c7      	b.n	800e7b8 <__gethex+0xb4>
 800e828:	f04f 0b00 	mov.w	fp, #0
 800e82c:	1ca9      	adds	r1, r5, #2
 800e82e:	e7d0      	b.n	800e7d2 <__gethex+0xce>
 800e830:	f04f 0b01 	mov.w	fp, #1
 800e834:	e7fa      	b.n	800e82c <__gethex+0x128>
 800e836:	230a      	movs	r3, #10
 800e838:	fb03 0002 	mla	r0, r3, r2, r0
 800e83c:	e7d0      	b.n	800e7e0 <__gethex+0xdc>
 800e83e:	4629      	mov	r1, r5
 800e840:	e7e0      	b.n	800e804 <__gethex+0x100>
 800e842:	eba5 0308 	sub.w	r3, r5, r8
 800e846:	3b01      	subs	r3, #1
 800e848:	4621      	mov	r1, r4
 800e84a:	2b07      	cmp	r3, #7
 800e84c:	dc0a      	bgt.n	800e864 <__gethex+0x160>
 800e84e:	4648      	mov	r0, r9
 800e850:	f000 fb0e 	bl	800ee70 <_Balloc>
 800e854:	4604      	mov	r4, r0
 800e856:	b940      	cbnz	r0, 800e86a <__gethex+0x166>
 800e858:	4b61      	ldr	r3, [pc, #388]	; (800e9e0 <__gethex+0x2dc>)
 800e85a:	4602      	mov	r2, r0
 800e85c:	21e4      	movs	r1, #228	; 0xe4
 800e85e:	4861      	ldr	r0, [pc, #388]	; (800e9e4 <__gethex+0x2e0>)
 800e860:	f001 fa46 	bl	800fcf0 <__assert_func>
 800e864:	3101      	adds	r1, #1
 800e866:	105b      	asrs	r3, r3, #1
 800e868:	e7ef      	b.n	800e84a <__gethex+0x146>
 800e86a:	f100 0a14 	add.w	sl, r0, #20
 800e86e:	2300      	movs	r3, #0
 800e870:	495a      	ldr	r1, [pc, #360]	; (800e9dc <__gethex+0x2d8>)
 800e872:	f8cd a004 	str.w	sl, [sp, #4]
 800e876:	469b      	mov	fp, r3
 800e878:	45a8      	cmp	r8, r5
 800e87a:	d342      	bcc.n	800e902 <__gethex+0x1fe>
 800e87c:	9801      	ldr	r0, [sp, #4]
 800e87e:	f840 bb04 	str.w	fp, [r0], #4
 800e882:	eba0 000a 	sub.w	r0, r0, sl
 800e886:	1080      	asrs	r0, r0, #2
 800e888:	6120      	str	r0, [r4, #16]
 800e88a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800e88e:	4658      	mov	r0, fp
 800e890:	f000 fbe0 	bl	800f054 <__hi0bits>
 800e894:	683d      	ldr	r5, [r7, #0]
 800e896:	eba8 0000 	sub.w	r0, r8, r0
 800e89a:	42a8      	cmp	r0, r5
 800e89c:	dd59      	ble.n	800e952 <__gethex+0x24e>
 800e89e:	eba0 0805 	sub.w	r8, r0, r5
 800e8a2:	4641      	mov	r1, r8
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	f000 ff6f 	bl	800f788 <__any_on>
 800e8aa:	4683      	mov	fp, r0
 800e8ac:	b1b8      	cbz	r0, 800e8de <__gethex+0x1da>
 800e8ae:	f108 33ff 	add.w	r3, r8, #4294967295
 800e8b2:	1159      	asrs	r1, r3, #5
 800e8b4:	f003 021f 	and.w	r2, r3, #31
 800e8b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e8bc:	f04f 0b01 	mov.w	fp, #1
 800e8c0:	fa0b f202 	lsl.w	r2, fp, r2
 800e8c4:	420a      	tst	r2, r1
 800e8c6:	d00a      	beq.n	800e8de <__gethex+0x1da>
 800e8c8:	455b      	cmp	r3, fp
 800e8ca:	dd06      	ble.n	800e8da <__gethex+0x1d6>
 800e8cc:	f1a8 0102 	sub.w	r1, r8, #2
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f000 ff59 	bl	800f788 <__any_on>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d138      	bne.n	800e94c <__gethex+0x248>
 800e8da:	f04f 0b02 	mov.w	fp, #2
 800e8de:	4641      	mov	r1, r8
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f7ff fea7 	bl	800e634 <rshift>
 800e8e6:	4446      	add	r6, r8
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	42b3      	cmp	r3, r6
 800e8ec:	da41      	bge.n	800e972 <__gethex+0x26e>
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	4648      	mov	r0, r9
 800e8f2:	f000 fafd 	bl	800eef0 <_Bfree>
 800e8f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e900:	e78a      	b.n	800e818 <__gethex+0x114>
 800e902:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e906:	2a2e      	cmp	r2, #46	; 0x2e
 800e908:	d014      	beq.n	800e934 <__gethex+0x230>
 800e90a:	2b20      	cmp	r3, #32
 800e90c:	d106      	bne.n	800e91c <__gethex+0x218>
 800e90e:	9b01      	ldr	r3, [sp, #4]
 800e910:	f843 bb04 	str.w	fp, [r3], #4
 800e914:	f04f 0b00 	mov.w	fp, #0
 800e918:	9301      	str	r3, [sp, #4]
 800e91a:	465b      	mov	r3, fp
 800e91c:	7828      	ldrb	r0, [r5, #0]
 800e91e:	9303      	str	r3, [sp, #12]
 800e920:	f7ff feda 	bl	800e6d8 <__hexdig_fun>
 800e924:	9b03      	ldr	r3, [sp, #12]
 800e926:	f000 000f 	and.w	r0, r0, #15
 800e92a:	4098      	lsls	r0, r3
 800e92c:	ea4b 0b00 	orr.w	fp, fp, r0
 800e930:	3304      	adds	r3, #4
 800e932:	e7a1      	b.n	800e878 <__gethex+0x174>
 800e934:	45a8      	cmp	r8, r5
 800e936:	d8e8      	bhi.n	800e90a <__gethex+0x206>
 800e938:	2201      	movs	r2, #1
 800e93a:	4628      	mov	r0, r5
 800e93c:	9303      	str	r3, [sp, #12]
 800e93e:	f7fe ff0b 	bl	800d758 <strncmp>
 800e942:	4926      	ldr	r1, [pc, #152]	; (800e9dc <__gethex+0x2d8>)
 800e944:	9b03      	ldr	r3, [sp, #12]
 800e946:	2800      	cmp	r0, #0
 800e948:	d1df      	bne.n	800e90a <__gethex+0x206>
 800e94a:	e795      	b.n	800e878 <__gethex+0x174>
 800e94c:	f04f 0b03 	mov.w	fp, #3
 800e950:	e7c5      	b.n	800e8de <__gethex+0x1da>
 800e952:	da0b      	bge.n	800e96c <__gethex+0x268>
 800e954:	eba5 0800 	sub.w	r8, r5, r0
 800e958:	4621      	mov	r1, r4
 800e95a:	4642      	mov	r2, r8
 800e95c:	4648      	mov	r0, r9
 800e95e:	f000 fce1 	bl	800f324 <__lshift>
 800e962:	eba6 0608 	sub.w	r6, r6, r8
 800e966:	4604      	mov	r4, r0
 800e968:	f100 0a14 	add.w	sl, r0, #20
 800e96c:	f04f 0b00 	mov.w	fp, #0
 800e970:	e7ba      	b.n	800e8e8 <__gethex+0x1e4>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	42b3      	cmp	r3, r6
 800e976:	dd73      	ble.n	800ea60 <__gethex+0x35c>
 800e978:	1b9e      	subs	r6, r3, r6
 800e97a:	42b5      	cmp	r5, r6
 800e97c:	dc34      	bgt.n	800e9e8 <__gethex+0x2e4>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b02      	cmp	r3, #2
 800e982:	d023      	beq.n	800e9cc <__gethex+0x2c8>
 800e984:	2b03      	cmp	r3, #3
 800e986:	d025      	beq.n	800e9d4 <__gethex+0x2d0>
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d115      	bne.n	800e9b8 <__gethex+0x2b4>
 800e98c:	42b5      	cmp	r5, r6
 800e98e:	d113      	bne.n	800e9b8 <__gethex+0x2b4>
 800e990:	2d01      	cmp	r5, #1
 800e992:	d10b      	bne.n	800e9ac <__gethex+0x2a8>
 800e994:	9a02      	ldr	r2, [sp, #8]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6013      	str	r3, [r2, #0]
 800e99a:	2301      	movs	r3, #1
 800e99c:	6123      	str	r3, [r4, #16]
 800e99e:	f8ca 3000 	str.w	r3, [sl]
 800e9a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9a4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e9a8:	601c      	str	r4, [r3, #0]
 800e9aa:	e735      	b.n	800e818 <__gethex+0x114>
 800e9ac:	1e69      	subs	r1, r5, #1
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f000 feea 	bl	800f788 <__any_on>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d1ed      	bne.n	800e994 <__gethex+0x290>
 800e9b8:	4621      	mov	r1, r4
 800e9ba:	4648      	mov	r0, r9
 800e9bc:	f000 fa98 	bl	800eef0 <_Bfree>
 800e9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	6013      	str	r3, [r2, #0]
 800e9c6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e9ca:	e725      	b.n	800e818 <__gethex+0x114>
 800e9cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1f2      	bne.n	800e9b8 <__gethex+0x2b4>
 800e9d2:	e7df      	b.n	800e994 <__gethex+0x290>
 800e9d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1dc      	bne.n	800e994 <__gethex+0x290>
 800e9da:	e7ed      	b.n	800e9b8 <__gethex+0x2b4>
 800e9dc:	080108cc 	.word	0x080108cc
 800e9e0:	08010ad9 	.word	0x08010ad9
 800e9e4:	08010aea 	.word	0x08010aea
 800e9e8:	f106 38ff 	add.w	r8, r6, #4294967295
 800e9ec:	f1bb 0f00 	cmp.w	fp, #0
 800e9f0:	d133      	bne.n	800ea5a <__gethex+0x356>
 800e9f2:	f1b8 0f00 	cmp.w	r8, #0
 800e9f6:	d004      	beq.n	800ea02 <__gethex+0x2fe>
 800e9f8:	4641      	mov	r1, r8
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f000 fec4 	bl	800f788 <__any_on>
 800ea00:	4683      	mov	fp, r0
 800ea02:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ea06:	2301      	movs	r3, #1
 800ea08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ea0c:	f008 081f 	and.w	r8, r8, #31
 800ea10:	fa03 f308 	lsl.w	r3, r3, r8
 800ea14:	4213      	tst	r3, r2
 800ea16:	4631      	mov	r1, r6
 800ea18:	4620      	mov	r0, r4
 800ea1a:	bf18      	it	ne
 800ea1c:	f04b 0b02 	orrne.w	fp, fp, #2
 800ea20:	1bad      	subs	r5, r5, r6
 800ea22:	f7ff fe07 	bl	800e634 <rshift>
 800ea26:	687e      	ldr	r6, [r7, #4]
 800ea28:	f04f 0802 	mov.w	r8, #2
 800ea2c:	f1bb 0f00 	cmp.w	fp, #0
 800ea30:	d04a      	beq.n	800eac8 <__gethex+0x3c4>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	d016      	beq.n	800ea66 <__gethex+0x362>
 800ea38:	2b03      	cmp	r3, #3
 800ea3a:	d018      	beq.n	800ea6e <__gethex+0x36a>
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d109      	bne.n	800ea54 <__gethex+0x350>
 800ea40:	f01b 0f02 	tst.w	fp, #2
 800ea44:	d006      	beq.n	800ea54 <__gethex+0x350>
 800ea46:	f8da 3000 	ldr.w	r3, [sl]
 800ea4a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ea4e:	f01b 0f01 	tst.w	fp, #1
 800ea52:	d10f      	bne.n	800ea74 <__gethex+0x370>
 800ea54:	f048 0810 	orr.w	r8, r8, #16
 800ea58:	e036      	b.n	800eac8 <__gethex+0x3c4>
 800ea5a:	f04f 0b01 	mov.w	fp, #1
 800ea5e:	e7d0      	b.n	800ea02 <__gethex+0x2fe>
 800ea60:	f04f 0801 	mov.w	r8, #1
 800ea64:	e7e2      	b.n	800ea2c <__gethex+0x328>
 800ea66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea68:	f1c3 0301 	rsb	r3, r3, #1
 800ea6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0ef      	beq.n	800ea54 <__gethex+0x350>
 800ea74:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ea78:	f104 0214 	add.w	r2, r4, #20
 800ea7c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ea80:	9301      	str	r3, [sp, #4]
 800ea82:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ea86:	2300      	movs	r3, #0
 800ea88:	4694      	mov	ip, r2
 800ea8a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ea8e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ea92:	d01e      	beq.n	800ead2 <__gethex+0x3ce>
 800ea94:	3101      	adds	r1, #1
 800ea96:	f8cc 1000 	str.w	r1, [ip]
 800ea9a:	f1b8 0f02 	cmp.w	r8, #2
 800ea9e:	f104 0214 	add.w	r2, r4, #20
 800eaa2:	d13d      	bne.n	800eb20 <__gethex+0x41c>
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	42ab      	cmp	r3, r5
 800eaaa:	d10b      	bne.n	800eac4 <__gethex+0x3c0>
 800eaac:	1169      	asrs	r1, r5, #5
 800eaae:	2301      	movs	r3, #1
 800eab0:	f005 051f 	and.w	r5, r5, #31
 800eab4:	fa03 f505 	lsl.w	r5, r3, r5
 800eab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eabc:	421d      	tst	r5, r3
 800eabe:	bf18      	it	ne
 800eac0:	f04f 0801 	movne.w	r8, #1
 800eac4:	f048 0820 	orr.w	r8, r8, #32
 800eac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaca:	601c      	str	r4, [r3, #0]
 800eacc:	9b02      	ldr	r3, [sp, #8]
 800eace:	601e      	str	r6, [r3, #0]
 800ead0:	e6a2      	b.n	800e818 <__gethex+0x114>
 800ead2:	4290      	cmp	r0, r2
 800ead4:	f842 3c04 	str.w	r3, [r2, #-4]
 800ead8:	d8d6      	bhi.n	800ea88 <__gethex+0x384>
 800eada:	68a2      	ldr	r2, [r4, #8]
 800eadc:	4593      	cmp	fp, r2
 800eade:	db17      	blt.n	800eb10 <__gethex+0x40c>
 800eae0:	6861      	ldr	r1, [r4, #4]
 800eae2:	4648      	mov	r0, r9
 800eae4:	3101      	adds	r1, #1
 800eae6:	f000 f9c3 	bl	800ee70 <_Balloc>
 800eaea:	4682      	mov	sl, r0
 800eaec:	b918      	cbnz	r0, 800eaf6 <__gethex+0x3f2>
 800eaee:	4b1b      	ldr	r3, [pc, #108]	; (800eb5c <__gethex+0x458>)
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	2184      	movs	r1, #132	; 0x84
 800eaf4:	e6b3      	b.n	800e85e <__gethex+0x15a>
 800eaf6:	6922      	ldr	r2, [r4, #16]
 800eaf8:	3202      	adds	r2, #2
 800eafa:	f104 010c 	add.w	r1, r4, #12
 800eafe:	0092      	lsls	r2, r2, #2
 800eb00:	300c      	adds	r0, #12
 800eb02:	f7fe feb2 	bl	800d86a <memcpy>
 800eb06:	4621      	mov	r1, r4
 800eb08:	4648      	mov	r0, r9
 800eb0a:	f000 f9f1 	bl	800eef0 <_Bfree>
 800eb0e:	4654      	mov	r4, sl
 800eb10:	6922      	ldr	r2, [r4, #16]
 800eb12:	1c51      	adds	r1, r2, #1
 800eb14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eb18:	6121      	str	r1, [r4, #16]
 800eb1a:	2101      	movs	r1, #1
 800eb1c:	6151      	str	r1, [r2, #20]
 800eb1e:	e7bc      	b.n	800ea9a <__gethex+0x396>
 800eb20:	6921      	ldr	r1, [r4, #16]
 800eb22:	4559      	cmp	r1, fp
 800eb24:	dd0b      	ble.n	800eb3e <__gethex+0x43a>
 800eb26:	2101      	movs	r1, #1
 800eb28:	4620      	mov	r0, r4
 800eb2a:	f7ff fd83 	bl	800e634 <rshift>
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	3601      	adds	r6, #1
 800eb32:	42b3      	cmp	r3, r6
 800eb34:	f6ff aedb 	blt.w	800e8ee <__gethex+0x1ea>
 800eb38:	f04f 0801 	mov.w	r8, #1
 800eb3c:	e7c2      	b.n	800eac4 <__gethex+0x3c0>
 800eb3e:	f015 051f 	ands.w	r5, r5, #31
 800eb42:	d0f9      	beq.n	800eb38 <__gethex+0x434>
 800eb44:	9b01      	ldr	r3, [sp, #4]
 800eb46:	441a      	add	r2, r3
 800eb48:	f1c5 0520 	rsb	r5, r5, #32
 800eb4c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800eb50:	f000 fa80 	bl	800f054 <__hi0bits>
 800eb54:	42a8      	cmp	r0, r5
 800eb56:	dbe6      	blt.n	800eb26 <__gethex+0x422>
 800eb58:	e7ee      	b.n	800eb38 <__gethex+0x434>
 800eb5a:	bf00      	nop
 800eb5c:	08010ad9 	.word	0x08010ad9

0800eb60 <L_shift>:
 800eb60:	f1c2 0208 	rsb	r2, r2, #8
 800eb64:	0092      	lsls	r2, r2, #2
 800eb66:	b570      	push	{r4, r5, r6, lr}
 800eb68:	f1c2 0620 	rsb	r6, r2, #32
 800eb6c:	6843      	ldr	r3, [r0, #4]
 800eb6e:	6804      	ldr	r4, [r0, #0]
 800eb70:	fa03 f506 	lsl.w	r5, r3, r6
 800eb74:	432c      	orrs	r4, r5
 800eb76:	40d3      	lsrs	r3, r2
 800eb78:	6004      	str	r4, [r0, #0]
 800eb7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb7e:	4288      	cmp	r0, r1
 800eb80:	d3f4      	bcc.n	800eb6c <L_shift+0xc>
 800eb82:	bd70      	pop	{r4, r5, r6, pc}

0800eb84 <__match>:
 800eb84:	b530      	push	{r4, r5, lr}
 800eb86:	6803      	ldr	r3, [r0, #0]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb8e:	b914      	cbnz	r4, 800eb96 <__match+0x12>
 800eb90:	6003      	str	r3, [r0, #0]
 800eb92:	2001      	movs	r0, #1
 800eb94:	bd30      	pop	{r4, r5, pc}
 800eb96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eb9e:	2d19      	cmp	r5, #25
 800eba0:	bf98      	it	ls
 800eba2:	3220      	addls	r2, #32
 800eba4:	42a2      	cmp	r2, r4
 800eba6:	d0f0      	beq.n	800eb8a <__match+0x6>
 800eba8:	2000      	movs	r0, #0
 800ebaa:	e7f3      	b.n	800eb94 <__match+0x10>

0800ebac <__hexnan>:
 800ebac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb0:	680b      	ldr	r3, [r1, #0]
 800ebb2:	6801      	ldr	r1, [r0, #0]
 800ebb4:	115e      	asrs	r6, r3, #5
 800ebb6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ebba:	f013 031f 	ands.w	r3, r3, #31
 800ebbe:	b087      	sub	sp, #28
 800ebc0:	bf18      	it	ne
 800ebc2:	3604      	addne	r6, #4
 800ebc4:	2500      	movs	r5, #0
 800ebc6:	1f37      	subs	r7, r6, #4
 800ebc8:	4682      	mov	sl, r0
 800ebca:	4690      	mov	r8, r2
 800ebcc:	9301      	str	r3, [sp, #4]
 800ebce:	f846 5c04 	str.w	r5, [r6, #-4]
 800ebd2:	46b9      	mov	r9, r7
 800ebd4:	463c      	mov	r4, r7
 800ebd6:	9502      	str	r5, [sp, #8]
 800ebd8:	46ab      	mov	fp, r5
 800ebda:	784a      	ldrb	r2, [r1, #1]
 800ebdc:	1c4b      	adds	r3, r1, #1
 800ebde:	9303      	str	r3, [sp, #12]
 800ebe0:	b342      	cbz	r2, 800ec34 <__hexnan+0x88>
 800ebe2:	4610      	mov	r0, r2
 800ebe4:	9105      	str	r1, [sp, #20]
 800ebe6:	9204      	str	r2, [sp, #16]
 800ebe8:	f7ff fd76 	bl	800e6d8 <__hexdig_fun>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d14f      	bne.n	800ec90 <__hexnan+0xe4>
 800ebf0:	9a04      	ldr	r2, [sp, #16]
 800ebf2:	9905      	ldr	r1, [sp, #20]
 800ebf4:	2a20      	cmp	r2, #32
 800ebf6:	d818      	bhi.n	800ec2a <__hexnan+0x7e>
 800ebf8:	9b02      	ldr	r3, [sp, #8]
 800ebfa:	459b      	cmp	fp, r3
 800ebfc:	dd13      	ble.n	800ec26 <__hexnan+0x7a>
 800ebfe:	454c      	cmp	r4, r9
 800ec00:	d206      	bcs.n	800ec10 <__hexnan+0x64>
 800ec02:	2d07      	cmp	r5, #7
 800ec04:	dc04      	bgt.n	800ec10 <__hexnan+0x64>
 800ec06:	462a      	mov	r2, r5
 800ec08:	4649      	mov	r1, r9
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f7ff ffa8 	bl	800eb60 <L_shift>
 800ec10:	4544      	cmp	r4, r8
 800ec12:	d950      	bls.n	800ecb6 <__hexnan+0x10a>
 800ec14:	2300      	movs	r3, #0
 800ec16:	f1a4 0904 	sub.w	r9, r4, #4
 800ec1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec1e:	f8cd b008 	str.w	fp, [sp, #8]
 800ec22:	464c      	mov	r4, r9
 800ec24:	461d      	mov	r5, r3
 800ec26:	9903      	ldr	r1, [sp, #12]
 800ec28:	e7d7      	b.n	800ebda <__hexnan+0x2e>
 800ec2a:	2a29      	cmp	r2, #41	; 0x29
 800ec2c:	d155      	bne.n	800ecda <__hexnan+0x12e>
 800ec2e:	3102      	adds	r1, #2
 800ec30:	f8ca 1000 	str.w	r1, [sl]
 800ec34:	f1bb 0f00 	cmp.w	fp, #0
 800ec38:	d04f      	beq.n	800ecda <__hexnan+0x12e>
 800ec3a:	454c      	cmp	r4, r9
 800ec3c:	d206      	bcs.n	800ec4c <__hexnan+0xa0>
 800ec3e:	2d07      	cmp	r5, #7
 800ec40:	dc04      	bgt.n	800ec4c <__hexnan+0xa0>
 800ec42:	462a      	mov	r2, r5
 800ec44:	4649      	mov	r1, r9
 800ec46:	4620      	mov	r0, r4
 800ec48:	f7ff ff8a 	bl	800eb60 <L_shift>
 800ec4c:	4544      	cmp	r4, r8
 800ec4e:	d934      	bls.n	800ecba <__hexnan+0x10e>
 800ec50:	f1a8 0204 	sub.w	r2, r8, #4
 800ec54:	4623      	mov	r3, r4
 800ec56:	f853 1b04 	ldr.w	r1, [r3], #4
 800ec5a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ec5e:	429f      	cmp	r7, r3
 800ec60:	d2f9      	bcs.n	800ec56 <__hexnan+0xaa>
 800ec62:	1b3b      	subs	r3, r7, r4
 800ec64:	f023 0303 	bic.w	r3, r3, #3
 800ec68:	3304      	adds	r3, #4
 800ec6a:	3e03      	subs	r6, #3
 800ec6c:	3401      	adds	r4, #1
 800ec6e:	42a6      	cmp	r6, r4
 800ec70:	bf38      	it	cc
 800ec72:	2304      	movcc	r3, #4
 800ec74:	4443      	add	r3, r8
 800ec76:	2200      	movs	r2, #0
 800ec78:	f843 2b04 	str.w	r2, [r3], #4
 800ec7c:	429f      	cmp	r7, r3
 800ec7e:	d2fb      	bcs.n	800ec78 <__hexnan+0xcc>
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	b91b      	cbnz	r3, 800ec8c <__hexnan+0xe0>
 800ec84:	4547      	cmp	r7, r8
 800ec86:	d126      	bne.n	800ecd6 <__hexnan+0x12a>
 800ec88:	2301      	movs	r3, #1
 800ec8a:	603b      	str	r3, [r7, #0]
 800ec8c:	2005      	movs	r0, #5
 800ec8e:	e025      	b.n	800ecdc <__hexnan+0x130>
 800ec90:	3501      	adds	r5, #1
 800ec92:	2d08      	cmp	r5, #8
 800ec94:	f10b 0b01 	add.w	fp, fp, #1
 800ec98:	dd06      	ble.n	800eca8 <__hexnan+0xfc>
 800ec9a:	4544      	cmp	r4, r8
 800ec9c:	d9c3      	bls.n	800ec26 <__hexnan+0x7a>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	f844 3c04 	str.w	r3, [r4, #-4]
 800eca4:	2501      	movs	r5, #1
 800eca6:	3c04      	subs	r4, #4
 800eca8:	6822      	ldr	r2, [r4, #0]
 800ecaa:	f000 000f 	and.w	r0, r0, #15
 800ecae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ecb2:	6020      	str	r0, [r4, #0]
 800ecb4:	e7b7      	b.n	800ec26 <__hexnan+0x7a>
 800ecb6:	2508      	movs	r5, #8
 800ecb8:	e7b5      	b.n	800ec26 <__hexnan+0x7a>
 800ecba:	9b01      	ldr	r3, [sp, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d0df      	beq.n	800ec80 <__hexnan+0xd4>
 800ecc0:	f1c3 0320 	rsb	r3, r3, #32
 800ecc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc8:	40da      	lsrs	r2, r3
 800ecca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ecce:	4013      	ands	r3, r2
 800ecd0:	f846 3c04 	str.w	r3, [r6, #-4]
 800ecd4:	e7d4      	b.n	800ec80 <__hexnan+0xd4>
 800ecd6:	3f04      	subs	r7, #4
 800ecd8:	e7d2      	b.n	800ec80 <__hexnan+0xd4>
 800ecda:	2004      	movs	r0, #4
 800ecdc:	b007      	add	sp, #28
 800ecde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ece4 <malloc>:
 800ece4:	4b02      	ldr	r3, [pc, #8]	; (800ecf0 <malloc+0xc>)
 800ece6:	4601      	mov	r1, r0
 800ece8:	6818      	ldr	r0, [r3, #0]
 800ecea:	f000 b823 	b.w	800ed34 <_malloc_r>
 800ecee:	bf00      	nop
 800ecf0:	200001f4 	.word	0x200001f4

0800ecf4 <sbrk_aligned>:
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	4e0e      	ldr	r6, [pc, #56]	; (800ed30 <sbrk_aligned+0x3c>)
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	6831      	ldr	r1, [r6, #0]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	b911      	cbnz	r1, 800ed06 <sbrk_aligned+0x12>
 800ed00:	f000 ffe6 	bl	800fcd0 <_sbrk_r>
 800ed04:	6030      	str	r0, [r6, #0]
 800ed06:	4621      	mov	r1, r4
 800ed08:	4628      	mov	r0, r5
 800ed0a:	f000 ffe1 	bl	800fcd0 <_sbrk_r>
 800ed0e:	1c43      	adds	r3, r0, #1
 800ed10:	d00a      	beq.n	800ed28 <sbrk_aligned+0x34>
 800ed12:	1cc4      	adds	r4, r0, #3
 800ed14:	f024 0403 	bic.w	r4, r4, #3
 800ed18:	42a0      	cmp	r0, r4
 800ed1a:	d007      	beq.n	800ed2c <sbrk_aligned+0x38>
 800ed1c:	1a21      	subs	r1, r4, r0
 800ed1e:	4628      	mov	r0, r5
 800ed20:	f000 ffd6 	bl	800fcd0 <_sbrk_r>
 800ed24:	3001      	adds	r0, #1
 800ed26:	d101      	bne.n	800ed2c <sbrk_aligned+0x38>
 800ed28:	f04f 34ff 	mov.w	r4, #4294967295
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}
 800ed30:	20000a1c 	.word	0x20000a1c

0800ed34 <_malloc_r>:
 800ed34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed38:	1ccd      	adds	r5, r1, #3
 800ed3a:	f025 0503 	bic.w	r5, r5, #3
 800ed3e:	3508      	adds	r5, #8
 800ed40:	2d0c      	cmp	r5, #12
 800ed42:	bf38      	it	cc
 800ed44:	250c      	movcc	r5, #12
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	4607      	mov	r7, r0
 800ed4a:	db01      	blt.n	800ed50 <_malloc_r+0x1c>
 800ed4c:	42a9      	cmp	r1, r5
 800ed4e:	d905      	bls.n	800ed5c <_malloc_r+0x28>
 800ed50:	230c      	movs	r3, #12
 800ed52:	603b      	str	r3, [r7, #0]
 800ed54:	2600      	movs	r6, #0
 800ed56:	4630      	mov	r0, r6
 800ed58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ee30 <_malloc_r+0xfc>
 800ed60:	f000 f87a 	bl	800ee58 <__malloc_lock>
 800ed64:	f8d8 3000 	ldr.w	r3, [r8]
 800ed68:	461c      	mov	r4, r3
 800ed6a:	bb5c      	cbnz	r4, 800edc4 <_malloc_r+0x90>
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	4638      	mov	r0, r7
 800ed70:	f7ff ffc0 	bl	800ecf4 <sbrk_aligned>
 800ed74:	1c43      	adds	r3, r0, #1
 800ed76:	4604      	mov	r4, r0
 800ed78:	d155      	bne.n	800ee26 <_malloc_r+0xf2>
 800ed7a:	f8d8 4000 	ldr.w	r4, [r8]
 800ed7e:	4626      	mov	r6, r4
 800ed80:	2e00      	cmp	r6, #0
 800ed82:	d145      	bne.n	800ee10 <_malloc_r+0xdc>
 800ed84:	2c00      	cmp	r4, #0
 800ed86:	d048      	beq.n	800ee1a <_malloc_r+0xe6>
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	4631      	mov	r1, r6
 800ed8c:	4638      	mov	r0, r7
 800ed8e:	eb04 0903 	add.w	r9, r4, r3
 800ed92:	f000 ff9d 	bl	800fcd0 <_sbrk_r>
 800ed96:	4581      	cmp	r9, r0
 800ed98:	d13f      	bne.n	800ee1a <_malloc_r+0xe6>
 800ed9a:	6821      	ldr	r1, [r4, #0]
 800ed9c:	1a6d      	subs	r5, r5, r1
 800ed9e:	4629      	mov	r1, r5
 800eda0:	4638      	mov	r0, r7
 800eda2:	f7ff ffa7 	bl	800ecf4 <sbrk_aligned>
 800eda6:	3001      	adds	r0, #1
 800eda8:	d037      	beq.n	800ee1a <_malloc_r+0xe6>
 800edaa:	6823      	ldr	r3, [r4, #0]
 800edac:	442b      	add	r3, r5
 800edae:	6023      	str	r3, [r4, #0]
 800edb0:	f8d8 3000 	ldr.w	r3, [r8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d038      	beq.n	800ee2a <_malloc_r+0xf6>
 800edb8:	685a      	ldr	r2, [r3, #4]
 800edba:	42a2      	cmp	r2, r4
 800edbc:	d12b      	bne.n	800ee16 <_malloc_r+0xe2>
 800edbe:	2200      	movs	r2, #0
 800edc0:	605a      	str	r2, [r3, #4]
 800edc2:	e00f      	b.n	800ede4 <_malloc_r+0xb0>
 800edc4:	6822      	ldr	r2, [r4, #0]
 800edc6:	1b52      	subs	r2, r2, r5
 800edc8:	d41f      	bmi.n	800ee0a <_malloc_r+0xd6>
 800edca:	2a0b      	cmp	r2, #11
 800edcc:	d917      	bls.n	800edfe <_malloc_r+0xca>
 800edce:	1961      	adds	r1, r4, r5
 800edd0:	42a3      	cmp	r3, r4
 800edd2:	6025      	str	r5, [r4, #0]
 800edd4:	bf18      	it	ne
 800edd6:	6059      	strne	r1, [r3, #4]
 800edd8:	6863      	ldr	r3, [r4, #4]
 800edda:	bf08      	it	eq
 800eddc:	f8c8 1000 	streq.w	r1, [r8]
 800ede0:	5162      	str	r2, [r4, r5]
 800ede2:	604b      	str	r3, [r1, #4]
 800ede4:	4638      	mov	r0, r7
 800ede6:	f104 060b 	add.w	r6, r4, #11
 800edea:	f000 f83b 	bl	800ee64 <__malloc_unlock>
 800edee:	f026 0607 	bic.w	r6, r6, #7
 800edf2:	1d23      	adds	r3, r4, #4
 800edf4:	1af2      	subs	r2, r6, r3
 800edf6:	d0ae      	beq.n	800ed56 <_malloc_r+0x22>
 800edf8:	1b9b      	subs	r3, r3, r6
 800edfa:	50a3      	str	r3, [r4, r2]
 800edfc:	e7ab      	b.n	800ed56 <_malloc_r+0x22>
 800edfe:	42a3      	cmp	r3, r4
 800ee00:	6862      	ldr	r2, [r4, #4]
 800ee02:	d1dd      	bne.n	800edc0 <_malloc_r+0x8c>
 800ee04:	f8c8 2000 	str.w	r2, [r8]
 800ee08:	e7ec      	b.n	800ede4 <_malloc_r+0xb0>
 800ee0a:	4623      	mov	r3, r4
 800ee0c:	6864      	ldr	r4, [r4, #4]
 800ee0e:	e7ac      	b.n	800ed6a <_malloc_r+0x36>
 800ee10:	4634      	mov	r4, r6
 800ee12:	6876      	ldr	r6, [r6, #4]
 800ee14:	e7b4      	b.n	800ed80 <_malloc_r+0x4c>
 800ee16:	4613      	mov	r3, r2
 800ee18:	e7cc      	b.n	800edb4 <_malloc_r+0x80>
 800ee1a:	230c      	movs	r3, #12
 800ee1c:	603b      	str	r3, [r7, #0]
 800ee1e:	4638      	mov	r0, r7
 800ee20:	f000 f820 	bl	800ee64 <__malloc_unlock>
 800ee24:	e797      	b.n	800ed56 <_malloc_r+0x22>
 800ee26:	6025      	str	r5, [r4, #0]
 800ee28:	e7dc      	b.n	800ede4 <_malloc_r+0xb0>
 800ee2a:	605b      	str	r3, [r3, #4]
 800ee2c:	deff      	udf	#255	; 0xff
 800ee2e:	bf00      	nop
 800ee30:	20000a18 	.word	0x20000a18

0800ee34 <__ascii_mbtowc>:
 800ee34:	b082      	sub	sp, #8
 800ee36:	b901      	cbnz	r1, 800ee3a <__ascii_mbtowc+0x6>
 800ee38:	a901      	add	r1, sp, #4
 800ee3a:	b142      	cbz	r2, 800ee4e <__ascii_mbtowc+0x1a>
 800ee3c:	b14b      	cbz	r3, 800ee52 <__ascii_mbtowc+0x1e>
 800ee3e:	7813      	ldrb	r3, [r2, #0]
 800ee40:	600b      	str	r3, [r1, #0]
 800ee42:	7812      	ldrb	r2, [r2, #0]
 800ee44:	1e10      	subs	r0, r2, #0
 800ee46:	bf18      	it	ne
 800ee48:	2001      	movne	r0, #1
 800ee4a:	b002      	add	sp, #8
 800ee4c:	4770      	bx	lr
 800ee4e:	4610      	mov	r0, r2
 800ee50:	e7fb      	b.n	800ee4a <__ascii_mbtowc+0x16>
 800ee52:	f06f 0001 	mvn.w	r0, #1
 800ee56:	e7f8      	b.n	800ee4a <__ascii_mbtowc+0x16>

0800ee58 <__malloc_lock>:
 800ee58:	4801      	ldr	r0, [pc, #4]	; (800ee60 <__malloc_lock+0x8>)
 800ee5a:	f7fe bd04 	b.w	800d866 <__retarget_lock_acquire_recursive>
 800ee5e:	bf00      	nop
 800ee60:	20000a14 	.word	0x20000a14

0800ee64 <__malloc_unlock>:
 800ee64:	4801      	ldr	r0, [pc, #4]	; (800ee6c <__malloc_unlock+0x8>)
 800ee66:	f7fe bcff 	b.w	800d868 <__retarget_lock_release_recursive>
 800ee6a:	bf00      	nop
 800ee6c:	20000a14 	.word	0x20000a14

0800ee70 <_Balloc>:
 800ee70:	b570      	push	{r4, r5, r6, lr}
 800ee72:	69c6      	ldr	r6, [r0, #28]
 800ee74:	4604      	mov	r4, r0
 800ee76:	460d      	mov	r5, r1
 800ee78:	b976      	cbnz	r6, 800ee98 <_Balloc+0x28>
 800ee7a:	2010      	movs	r0, #16
 800ee7c:	f7ff ff32 	bl	800ece4 <malloc>
 800ee80:	4602      	mov	r2, r0
 800ee82:	61e0      	str	r0, [r4, #28]
 800ee84:	b920      	cbnz	r0, 800ee90 <_Balloc+0x20>
 800ee86:	4b18      	ldr	r3, [pc, #96]	; (800eee8 <_Balloc+0x78>)
 800ee88:	4818      	ldr	r0, [pc, #96]	; (800eeec <_Balloc+0x7c>)
 800ee8a:	216b      	movs	r1, #107	; 0x6b
 800ee8c:	f000 ff30 	bl	800fcf0 <__assert_func>
 800ee90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ee94:	6006      	str	r6, [r0, #0]
 800ee96:	60c6      	str	r6, [r0, #12]
 800ee98:	69e6      	ldr	r6, [r4, #28]
 800ee9a:	68f3      	ldr	r3, [r6, #12]
 800ee9c:	b183      	cbz	r3, 800eec0 <_Balloc+0x50>
 800ee9e:	69e3      	ldr	r3, [r4, #28]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eea6:	b9b8      	cbnz	r0, 800eed8 <_Balloc+0x68>
 800eea8:	2101      	movs	r1, #1
 800eeaa:	fa01 f605 	lsl.w	r6, r1, r5
 800eeae:	1d72      	adds	r2, r6, #5
 800eeb0:	0092      	lsls	r2, r2, #2
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 ff3a 	bl	800fd2c <_calloc_r>
 800eeb8:	b160      	cbz	r0, 800eed4 <_Balloc+0x64>
 800eeba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eebe:	e00e      	b.n	800eede <_Balloc+0x6e>
 800eec0:	2221      	movs	r2, #33	; 0x21
 800eec2:	2104      	movs	r1, #4
 800eec4:	4620      	mov	r0, r4
 800eec6:	f000 ff31 	bl	800fd2c <_calloc_r>
 800eeca:	69e3      	ldr	r3, [r4, #28]
 800eecc:	60f0      	str	r0, [r6, #12]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1e4      	bne.n	800ee9e <_Balloc+0x2e>
 800eed4:	2000      	movs	r0, #0
 800eed6:	bd70      	pop	{r4, r5, r6, pc}
 800eed8:	6802      	ldr	r2, [r0, #0]
 800eeda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eede:	2300      	movs	r3, #0
 800eee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eee4:	e7f7      	b.n	800eed6 <_Balloc+0x66>
 800eee6:	bf00      	nop
 800eee8:	08010a6a 	.word	0x08010a6a
 800eeec:	08010b4a 	.word	0x08010b4a

0800eef0 <_Bfree>:
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	69c6      	ldr	r6, [r0, #28]
 800eef4:	4605      	mov	r5, r0
 800eef6:	460c      	mov	r4, r1
 800eef8:	b976      	cbnz	r6, 800ef18 <_Bfree+0x28>
 800eefa:	2010      	movs	r0, #16
 800eefc:	f7ff fef2 	bl	800ece4 <malloc>
 800ef00:	4602      	mov	r2, r0
 800ef02:	61e8      	str	r0, [r5, #28]
 800ef04:	b920      	cbnz	r0, 800ef10 <_Bfree+0x20>
 800ef06:	4b09      	ldr	r3, [pc, #36]	; (800ef2c <_Bfree+0x3c>)
 800ef08:	4809      	ldr	r0, [pc, #36]	; (800ef30 <_Bfree+0x40>)
 800ef0a:	218f      	movs	r1, #143	; 0x8f
 800ef0c:	f000 fef0 	bl	800fcf0 <__assert_func>
 800ef10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef14:	6006      	str	r6, [r0, #0]
 800ef16:	60c6      	str	r6, [r0, #12]
 800ef18:	b13c      	cbz	r4, 800ef2a <_Bfree+0x3a>
 800ef1a:	69eb      	ldr	r3, [r5, #28]
 800ef1c:	6862      	ldr	r2, [r4, #4]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef24:	6021      	str	r1, [r4, #0]
 800ef26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef2a:	bd70      	pop	{r4, r5, r6, pc}
 800ef2c:	08010a6a 	.word	0x08010a6a
 800ef30:	08010b4a 	.word	0x08010b4a

0800ef34 <__multadd>:
 800ef34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef38:	690d      	ldr	r5, [r1, #16]
 800ef3a:	4607      	mov	r7, r0
 800ef3c:	460c      	mov	r4, r1
 800ef3e:	461e      	mov	r6, r3
 800ef40:	f101 0c14 	add.w	ip, r1, #20
 800ef44:	2000      	movs	r0, #0
 800ef46:	f8dc 3000 	ldr.w	r3, [ip]
 800ef4a:	b299      	uxth	r1, r3
 800ef4c:	fb02 6101 	mla	r1, r2, r1, r6
 800ef50:	0c1e      	lsrs	r6, r3, #16
 800ef52:	0c0b      	lsrs	r3, r1, #16
 800ef54:	fb02 3306 	mla	r3, r2, r6, r3
 800ef58:	b289      	uxth	r1, r1
 800ef5a:	3001      	adds	r0, #1
 800ef5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef60:	4285      	cmp	r5, r0
 800ef62:	f84c 1b04 	str.w	r1, [ip], #4
 800ef66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef6a:	dcec      	bgt.n	800ef46 <__multadd+0x12>
 800ef6c:	b30e      	cbz	r6, 800efb2 <__multadd+0x7e>
 800ef6e:	68a3      	ldr	r3, [r4, #8]
 800ef70:	42ab      	cmp	r3, r5
 800ef72:	dc19      	bgt.n	800efa8 <__multadd+0x74>
 800ef74:	6861      	ldr	r1, [r4, #4]
 800ef76:	4638      	mov	r0, r7
 800ef78:	3101      	adds	r1, #1
 800ef7a:	f7ff ff79 	bl	800ee70 <_Balloc>
 800ef7e:	4680      	mov	r8, r0
 800ef80:	b928      	cbnz	r0, 800ef8e <__multadd+0x5a>
 800ef82:	4602      	mov	r2, r0
 800ef84:	4b0c      	ldr	r3, [pc, #48]	; (800efb8 <__multadd+0x84>)
 800ef86:	480d      	ldr	r0, [pc, #52]	; (800efbc <__multadd+0x88>)
 800ef88:	21ba      	movs	r1, #186	; 0xba
 800ef8a:	f000 feb1 	bl	800fcf0 <__assert_func>
 800ef8e:	6922      	ldr	r2, [r4, #16]
 800ef90:	3202      	adds	r2, #2
 800ef92:	f104 010c 	add.w	r1, r4, #12
 800ef96:	0092      	lsls	r2, r2, #2
 800ef98:	300c      	adds	r0, #12
 800ef9a:	f7fe fc66 	bl	800d86a <memcpy>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4638      	mov	r0, r7
 800efa2:	f7ff ffa5 	bl	800eef0 <_Bfree>
 800efa6:	4644      	mov	r4, r8
 800efa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800efac:	3501      	adds	r5, #1
 800efae:	615e      	str	r6, [r3, #20]
 800efb0:	6125      	str	r5, [r4, #16]
 800efb2:	4620      	mov	r0, r4
 800efb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efb8:	08010ad9 	.word	0x08010ad9
 800efbc:	08010b4a 	.word	0x08010b4a

0800efc0 <__s2b>:
 800efc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efc4:	460c      	mov	r4, r1
 800efc6:	4615      	mov	r5, r2
 800efc8:	461f      	mov	r7, r3
 800efca:	2209      	movs	r2, #9
 800efcc:	3308      	adds	r3, #8
 800efce:	4606      	mov	r6, r0
 800efd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800efd4:	2100      	movs	r1, #0
 800efd6:	2201      	movs	r2, #1
 800efd8:	429a      	cmp	r2, r3
 800efda:	db09      	blt.n	800eff0 <__s2b+0x30>
 800efdc:	4630      	mov	r0, r6
 800efde:	f7ff ff47 	bl	800ee70 <_Balloc>
 800efe2:	b940      	cbnz	r0, 800eff6 <__s2b+0x36>
 800efe4:	4602      	mov	r2, r0
 800efe6:	4b19      	ldr	r3, [pc, #100]	; (800f04c <__s2b+0x8c>)
 800efe8:	4819      	ldr	r0, [pc, #100]	; (800f050 <__s2b+0x90>)
 800efea:	21d3      	movs	r1, #211	; 0xd3
 800efec:	f000 fe80 	bl	800fcf0 <__assert_func>
 800eff0:	0052      	lsls	r2, r2, #1
 800eff2:	3101      	adds	r1, #1
 800eff4:	e7f0      	b.n	800efd8 <__s2b+0x18>
 800eff6:	9b08      	ldr	r3, [sp, #32]
 800eff8:	6143      	str	r3, [r0, #20]
 800effa:	2d09      	cmp	r5, #9
 800effc:	f04f 0301 	mov.w	r3, #1
 800f000:	6103      	str	r3, [r0, #16]
 800f002:	dd16      	ble.n	800f032 <__s2b+0x72>
 800f004:	f104 0909 	add.w	r9, r4, #9
 800f008:	46c8      	mov	r8, r9
 800f00a:	442c      	add	r4, r5
 800f00c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f010:	4601      	mov	r1, r0
 800f012:	3b30      	subs	r3, #48	; 0x30
 800f014:	220a      	movs	r2, #10
 800f016:	4630      	mov	r0, r6
 800f018:	f7ff ff8c 	bl	800ef34 <__multadd>
 800f01c:	45a0      	cmp	r8, r4
 800f01e:	d1f5      	bne.n	800f00c <__s2b+0x4c>
 800f020:	f1a5 0408 	sub.w	r4, r5, #8
 800f024:	444c      	add	r4, r9
 800f026:	1b2d      	subs	r5, r5, r4
 800f028:	1963      	adds	r3, r4, r5
 800f02a:	42bb      	cmp	r3, r7
 800f02c:	db04      	blt.n	800f038 <__s2b+0x78>
 800f02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f032:	340a      	adds	r4, #10
 800f034:	2509      	movs	r5, #9
 800f036:	e7f6      	b.n	800f026 <__s2b+0x66>
 800f038:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f03c:	4601      	mov	r1, r0
 800f03e:	3b30      	subs	r3, #48	; 0x30
 800f040:	220a      	movs	r2, #10
 800f042:	4630      	mov	r0, r6
 800f044:	f7ff ff76 	bl	800ef34 <__multadd>
 800f048:	e7ee      	b.n	800f028 <__s2b+0x68>
 800f04a:	bf00      	nop
 800f04c:	08010ad9 	.word	0x08010ad9
 800f050:	08010b4a 	.word	0x08010b4a

0800f054 <__hi0bits>:
 800f054:	0c03      	lsrs	r3, r0, #16
 800f056:	041b      	lsls	r3, r3, #16
 800f058:	b9d3      	cbnz	r3, 800f090 <__hi0bits+0x3c>
 800f05a:	0400      	lsls	r0, r0, #16
 800f05c:	2310      	movs	r3, #16
 800f05e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f062:	bf04      	itt	eq
 800f064:	0200      	lsleq	r0, r0, #8
 800f066:	3308      	addeq	r3, #8
 800f068:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f06c:	bf04      	itt	eq
 800f06e:	0100      	lsleq	r0, r0, #4
 800f070:	3304      	addeq	r3, #4
 800f072:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f076:	bf04      	itt	eq
 800f078:	0080      	lsleq	r0, r0, #2
 800f07a:	3302      	addeq	r3, #2
 800f07c:	2800      	cmp	r0, #0
 800f07e:	db05      	blt.n	800f08c <__hi0bits+0x38>
 800f080:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f084:	f103 0301 	add.w	r3, r3, #1
 800f088:	bf08      	it	eq
 800f08a:	2320      	moveq	r3, #32
 800f08c:	4618      	mov	r0, r3
 800f08e:	4770      	bx	lr
 800f090:	2300      	movs	r3, #0
 800f092:	e7e4      	b.n	800f05e <__hi0bits+0xa>

0800f094 <__lo0bits>:
 800f094:	6803      	ldr	r3, [r0, #0]
 800f096:	f013 0207 	ands.w	r2, r3, #7
 800f09a:	d00c      	beq.n	800f0b6 <__lo0bits+0x22>
 800f09c:	07d9      	lsls	r1, r3, #31
 800f09e:	d422      	bmi.n	800f0e6 <__lo0bits+0x52>
 800f0a0:	079a      	lsls	r2, r3, #30
 800f0a2:	bf49      	itett	mi
 800f0a4:	085b      	lsrmi	r3, r3, #1
 800f0a6:	089b      	lsrpl	r3, r3, #2
 800f0a8:	6003      	strmi	r3, [r0, #0]
 800f0aa:	2201      	movmi	r2, #1
 800f0ac:	bf5c      	itt	pl
 800f0ae:	6003      	strpl	r3, [r0, #0]
 800f0b0:	2202      	movpl	r2, #2
 800f0b2:	4610      	mov	r0, r2
 800f0b4:	4770      	bx	lr
 800f0b6:	b299      	uxth	r1, r3
 800f0b8:	b909      	cbnz	r1, 800f0be <__lo0bits+0x2a>
 800f0ba:	0c1b      	lsrs	r3, r3, #16
 800f0bc:	2210      	movs	r2, #16
 800f0be:	b2d9      	uxtb	r1, r3
 800f0c0:	b909      	cbnz	r1, 800f0c6 <__lo0bits+0x32>
 800f0c2:	3208      	adds	r2, #8
 800f0c4:	0a1b      	lsrs	r3, r3, #8
 800f0c6:	0719      	lsls	r1, r3, #28
 800f0c8:	bf04      	itt	eq
 800f0ca:	091b      	lsreq	r3, r3, #4
 800f0cc:	3204      	addeq	r2, #4
 800f0ce:	0799      	lsls	r1, r3, #30
 800f0d0:	bf04      	itt	eq
 800f0d2:	089b      	lsreq	r3, r3, #2
 800f0d4:	3202      	addeq	r2, #2
 800f0d6:	07d9      	lsls	r1, r3, #31
 800f0d8:	d403      	bmi.n	800f0e2 <__lo0bits+0x4e>
 800f0da:	085b      	lsrs	r3, r3, #1
 800f0dc:	f102 0201 	add.w	r2, r2, #1
 800f0e0:	d003      	beq.n	800f0ea <__lo0bits+0x56>
 800f0e2:	6003      	str	r3, [r0, #0]
 800f0e4:	e7e5      	b.n	800f0b2 <__lo0bits+0x1e>
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	e7e3      	b.n	800f0b2 <__lo0bits+0x1e>
 800f0ea:	2220      	movs	r2, #32
 800f0ec:	e7e1      	b.n	800f0b2 <__lo0bits+0x1e>
	...

0800f0f0 <__i2b>:
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	f7ff febb 	bl	800ee70 <_Balloc>
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	b928      	cbnz	r0, 800f10a <__i2b+0x1a>
 800f0fe:	4b05      	ldr	r3, [pc, #20]	; (800f114 <__i2b+0x24>)
 800f100:	4805      	ldr	r0, [pc, #20]	; (800f118 <__i2b+0x28>)
 800f102:	f240 1145 	movw	r1, #325	; 0x145
 800f106:	f000 fdf3 	bl	800fcf0 <__assert_func>
 800f10a:	2301      	movs	r3, #1
 800f10c:	6144      	str	r4, [r0, #20]
 800f10e:	6103      	str	r3, [r0, #16]
 800f110:	bd10      	pop	{r4, pc}
 800f112:	bf00      	nop
 800f114:	08010ad9 	.word	0x08010ad9
 800f118:	08010b4a 	.word	0x08010b4a

0800f11c <__multiply>:
 800f11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f120:	4691      	mov	r9, r2
 800f122:	690a      	ldr	r2, [r1, #16]
 800f124:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f128:	429a      	cmp	r2, r3
 800f12a:	bfb8      	it	lt
 800f12c:	460b      	movlt	r3, r1
 800f12e:	460c      	mov	r4, r1
 800f130:	bfbc      	itt	lt
 800f132:	464c      	movlt	r4, r9
 800f134:	4699      	movlt	r9, r3
 800f136:	6927      	ldr	r7, [r4, #16]
 800f138:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f13c:	68a3      	ldr	r3, [r4, #8]
 800f13e:	6861      	ldr	r1, [r4, #4]
 800f140:	eb07 060a 	add.w	r6, r7, sl
 800f144:	42b3      	cmp	r3, r6
 800f146:	b085      	sub	sp, #20
 800f148:	bfb8      	it	lt
 800f14a:	3101      	addlt	r1, #1
 800f14c:	f7ff fe90 	bl	800ee70 <_Balloc>
 800f150:	b930      	cbnz	r0, 800f160 <__multiply+0x44>
 800f152:	4602      	mov	r2, r0
 800f154:	4b44      	ldr	r3, [pc, #272]	; (800f268 <__multiply+0x14c>)
 800f156:	4845      	ldr	r0, [pc, #276]	; (800f26c <__multiply+0x150>)
 800f158:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f15c:	f000 fdc8 	bl	800fcf0 <__assert_func>
 800f160:	f100 0514 	add.w	r5, r0, #20
 800f164:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f168:	462b      	mov	r3, r5
 800f16a:	2200      	movs	r2, #0
 800f16c:	4543      	cmp	r3, r8
 800f16e:	d321      	bcc.n	800f1b4 <__multiply+0x98>
 800f170:	f104 0314 	add.w	r3, r4, #20
 800f174:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f178:	f109 0314 	add.w	r3, r9, #20
 800f17c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f180:	9202      	str	r2, [sp, #8]
 800f182:	1b3a      	subs	r2, r7, r4
 800f184:	3a15      	subs	r2, #21
 800f186:	f022 0203 	bic.w	r2, r2, #3
 800f18a:	3204      	adds	r2, #4
 800f18c:	f104 0115 	add.w	r1, r4, #21
 800f190:	428f      	cmp	r7, r1
 800f192:	bf38      	it	cc
 800f194:	2204      	movcc	r2, #4
 800f196:	9201      	str	r2, [sp, #4]
 800f198:	9a02      	ldr	r2, [sp, #8]
 800f19a:	9303      	str	r3, [sp, #12]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d80c      	bhi.n	800f1ba <__multiply+0x9e>
 800f1a0:	2e00      	cmp	r6, #0
 800f1a2:	dd03      	ble.n	800f1ac <__multiply+0x90>
 800f1a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d05b      	beq.n	800f264 <__multiply+0x148>
 800f1ac:	6106      	str	r6, [r0, #16]
 800f1ae:	b005      	add	sp, #20
 800f1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b4:	f843 2b04 	str.w	r2, [r3], #4
 800f1b8:	e7d8      	b.n	800f16c <__multiply+0x50>
 800f1ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800f1be:	f1ba 0f00 	cmp.w	sl, #0
 800f1c2:	d024      	beq.n	800f20e <__multiply+0xf2>
 800f1c4:	f104 0e14 	add.w	lr, r4, #20
 800f1c8:	46a9      	mov	r9, r5
 800f1ca:	f04f 0c00 	mov.w	ip, #0
 800f1ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f1d2:	f8d9 1000 	ldr.w	r1, [r9]
 800f1d6:	fa1f fb82 	uxth.w	fp, r2
 800f1da:	b289      	uxth	r1, r1
 800f1dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800f1e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f1e4:	f8d9 2000 	ldr.w	r2, [r9]
 800f1e8:	4461      	add	r1, ip
 800f1ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f1ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800f1f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1f6:	b289      	uxth	r1, r1
 800f1f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f1fc:	4577      	cmp	r7, lr
 800f1fe:	f849 1b04 	str.w	r1, [r9], #4
 800f202:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f206:	d8e2      	bhi.n	800f1ce <__multiply+0xb2>
 800f208:	9a01      	ldr	r2, [sp, #4]
 800f20a:	f845 c002 	str.w	ip, [r5, r2]
 800f20e:	9a03      	ldr	r2, [sp, #12]
 800f210:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f214:	3304      	adds	r3, #4
 800f216:	f1b9 0f00 	cmp.w	r9, #0
 800f21a:	d021      	beq.n	800f260 <__multiply+0x144>
 800f21c:	6829      	ldr	r1, [r5, #0]
 800f21e:	f104 0c14 	add.w	ip, r4, #20
 800f222:	46ae      	mov	lr, r5
 800f224:	f04f 0a00 	mov.w	sl, #0
 800f228:	f8bc b000 	ldrh.w	fp, [ip]
 800f22c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f230:	fb09 220b 	mla	r2, r9, fp, r2
 800f234:	4452      	add	r2, sl
 800f236:	b289      	uxth	r1, r1
 800f238:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f23c:	f84e 1b04 	str.w	r1, [lr], #4
 800f240:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f248:	f8be 1000 	ldrh.w	r1, [lr]
 800f24c:	fb09 110a 	mla	r1, r9, sl, r1
 800f250:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f254:	4567      	cmp	r7, ip
 800f256:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f25a:	d8e5      	bhi.n	800f228 <__multiply+0x10c>
 800f25c:	9a01      	ldr	r2, [sp, #4]
 800f25e:	50a9      	str	r1, [r5, r2]
 800f260:	3504      	adds	r5, #4
 800f262:	e799      	b.n	800f198 <__multiply+0x7c>
 800f264:	3e01      	subs	r6, #1
 800f266:	e79b      	b.n	800f1a0 <__multiply+0x84>
 800f268:	08010ad9 	.word	0x08010ad9
 800f26c:	08010b4a 	.word	0x08010b4a

0800f270 <__pow5mult>:
 800f270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f274:	4615      	mov	r5, r2
 800f276:	f012 0203 	ands.w	r2, r2, #3
 800f27a:	4606      	mov	r6, r0
 800f27c:	460f      	mov	r7, r1
 800f27e:	d007      	beq.n	800f290 <__pow5mult+0x20>
 800f280:	4c25      	ldr	r4, [pc, #148]	; (800f318 <__pow5mult+0xa8>)
 800f282:	3a01      	subs	r2, #1
 800f284:	2300      	movs	r3, #0
 800f286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f28a:	f7ff fe53 	bl	800ef34 <__multadd>
 800f28e:	4607      	mov	r7, r0
 800f290:	10ad      	asrs	r5, r5, #2
 800f292:	d03d      	beq.n	800f310 <__pow5mult+0xa0>
 800f294:	69f4      	ldr	r4, [r6, #28]
 800f296:	b97c      	cbnz	r4, 800f2b8 <__pow5mult+0x48>
 800f298:	2010      	movs	r0, #16
 800f29a:	f7ff fd23 	bl	800ece4 <malloc>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	61f0      	str	r0, [r6, #28]
 800f2a2:	b928      	cbnz	r0, 800f2b0 <__pow5mult+0x40>
 800f2a4:	4b1d      	ldr	r3, [pc, #116]	; (800f31c <__pow5mult+0xac>)
 800f2a6:	481e      	ldr	r0, [pc, #120]	; (800f320 <__pow5mult+0xb0>)
 800f2a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f2ac:	f000 fd20 	bl	800fcf0 <__assert_func>
 800f2b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2b4:	6004      	str	r4, [r0, #0]
 800f2b6:	60c4      	str	r4, [r0, #12]
 800f2b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f2bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f2c0:	b94c      	cbnz	r4, 800f2d6 <__pow5mult+0x66>
 800f2c2:	f240 2171 	movw	r1, #625	; 0x271
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f7ff ff12 	bl	800f0f0 <__i2b>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	6003      	str	r3, [r0, #0]
 800f2d6:	f04f 0900 	mov.w	r9, #0
 800f2da:	07eb      	lsls	r3, r5, #31
 800f2dc:	d50a      	bpl.n	800f2f4 <__pow5mult+0x84>
 800f2de:	4639      	mov	r1, r7
 800f2e0:	4622      	mov	r2, r4
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f7ff ff1a 	bl	800f11c <__multiply>
 800f2e8:	4639      	mov	r1, r7
 800f2ea:	4680      	mov	r8, r0
 800f2ec:	4630      	mov	r0, r6
 800f2ee:	f7ff fdff 	bl	800eef0 <_Bfree>
 800f2f2:	4647      	mov	r7, r8
 800f2f4:	106d      	asrs	r5, r5, #1
 800f2f6:	d00b      	beq.n	800f310 <__pow5mult+0xa0>
 800f2f8:	6820      	ldr	r0, [r4, #0]
 800f2fa:	b938      	cbnz	r0, 800f30c <__pow5mult+0x9c>
 800f2fc:	4622      	mov	r2, r4
 800f2fe:	4621      	mov	r1, r4
 800f300:	4630      	mov	r0, r6
 800f302:	f7ff ff0b 	bl	800f11c <__multiply>
 800f306:	6020      	str	r0, [r4, #0]
 800f308:	f8c0 9000 	str.w	r9, [r0]
 800f30c:	4604      	mov	r4, r0
 800f30e:	e7e4      	b.n	800f2da <__pow5mult+0x6a>
 800f310:	4638      	mov	r0, r7
 800f312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f316:	bf00      	nop
 800f318:	08010c98 	.word	0x08010c98
 800f31c:	08010a6a 	.word	0x08010a6a
 800f320:	08010b4a 	.word	0x08010b4a

0800f324 <__lshift>:
 800f324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f328:	460c      	mov	r4, r1
 800f32a:	6849      	ldr	r1, [r1, #4]
 800f32c:	6923      	ldr	r3, [r4, #16]
 800f32e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f332:	68a3      	ldr	r3, [r4, #8]
 800f334:	4607      	mov	r7, r0
 800f336:	4691      	mov	r9, r2
 800f338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f33c:	f108 0601 	add.w	r6, r8, #1
 800f340:	42b3      	cmp	r3, r6
 800f342:	db0b      	blt.n	800f35c <__lshift+0x38>
 800f344:	4638      	mov	r0, r7
 800f346:	f7ff fd93 	bl	800ee70 <_Balloc>
 800f34a:	4605      	mov	r5, r0
 800f34c:	b948      	cbnz	r0, 800f362 <__lshift+0x3e>
 800f34e:	4602      	mov	r2, r0
 800f350:	4b28      	ldr	r3, [pc, #160]	; (800f3f4 <__lshift+0xd0>)
 800f352:	4829      	ldr	r0, [pc, #164]	; (800f3f8 <__lshift+0xd4>)
 800f354:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f358:	f000 fcca 	bl	800fcf0 <__assert_func>
 800f35c:	3101      	adds	r1, #1
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	e7ee      	b.n	800f340 <__lshift+0x1c>
 800f362:	2300      	movs	r3, #0
 800f364:	f100 0114 	add.w	r1, r0, #20
 800f368:	f100 0210 	add.w	r2, r0, #16
 800f36c:	4618      	mov	r0, r3
 800f36e:	4553      	cmp	r3, sl
 800f370:	db33      	blt.n	800f3da <__lshift+0xb6>
 800f372:	6920      	ldr	r0, [r4, #16]
 800f374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f378:	f104 0314 	add.w	r3, r4, #20
 800f37c:	f019 091f 	ands.w	r9, r9, #31
 800f380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f388:	d02b      	beq.n	800f3e2 <__lshift+0xbe>
 800f38a:	f1c9 0e20 	rsb	lr, r9, #32
 800f38e:	468a      	mov	sl, r1
 800f390:	2200      	movs	r2, #0
 800f392:	6818      	ldr	r0, [r3, #0]
 800f394:	fa00 f009 	lsl.w	r0, r0, r9
 800f398:	4310      	orrs	r0, r2
 800f39a:	f84a 0b04 	str.w	r0, [sl], #4
 800f39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3a2:	459c      	cmp	ip, r3
 800f3a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f3a8:	d8f3      	bhi.n	800f392 <__lshift+0x6e>
 800f3aa:	ebac 0304 	sub.w	r3, ip, r4
 800f3ae:	3b15      	subs	r3, #21
 800f3b0:	f023 0303 	bic.w	r3, r3, #3
 800f3b4:	3304      	adds	r3, #4
 800f3b6:	f104 0015 	add.w	r0, r4, #21
 800f3ba:	4584      	cmp	ip, r0
 800f3bc:	bf38      	it	cc
 800f3be:	2304      	movcc	r3, #4
 800f3c0:	50ca      	str	r2, [r1, r3]
 800f3c2:	b10a      	cbz	r2, 800f3c8 <__lshift+0xa4>
 800f3c4:	f108 0602 	add.w	r6, r8, #2
 800f3c8:	3e01      	subs	r6, #1
 800f3ca:	4638      	mov	r0, r7
 800f3cc:	612e      	str	r6, [r5, #16]
 800f3ce:	4621      	mov	r1, r4
 800f3d0:	f7ff fd8e 	bl	800eef0 <_Bfree>
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3da:	f842 0f04 	str.w	r0, [r2, #4]!
 800f3de:	3301      	adds	r3, #1
 800f3e0:	e7c5      	b.n	800f36e <__lshift+0x4a>
 800f3e2:	3904      	subs	r1, #4
 800f3e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f3ec:	459c      	cmp	ip, r3
 800f3ee:	d8f9      	bhi.n	800f3e4 <__lshift+0xc0>
 800f3f0:	e7ea      	b.n	800f3c8 <__lshift+0xa4>
 800f3f2:	bf00      	nop
 800f3f4:	08010ad9 	.word	0x08010ad9
 800f3f8:	08010b4a 	.word	0x08010b4a

0800f3fc <__mcmp>:
 800f3fc:	b530      	push	{r4, r5, lr}
 800f3fe:	6902      	ldr	r2, [r0, #16]
 800f400:	690c      	ldr	r4, [r1, #16]
 800f402:	1b12      	subs	r2, r2, r4
 800f404:	d10e      	bne.n	800f424 <__mcmp+0x28>
 800f406:	f100 0314 	add.w	r3, r0, #20
 800f40a:	3114      	adds	r1, #20
 800f40c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f410:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f414:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f418:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f41c:	42a5      	cmp	r5, r4
 800f41e:	d003      	beq.n	800f428 <__mcmp+0x2c>
 800f420:	d305      	bcc.n	800f42e <__mcmp+0x32>
 800f422:	2201      	movs	r2, #1
 800f424:	4610      	mov	r0, r2
 800f426:	bd30      	pop	{r4, r5, pc}
 800f428:	4283      	cmp	r3, r0
 800f42a:	d3f3      	bcc.n	800f414 <__mcmp+0x18>
 800f42c:	e7fa      	b.n	800f424 <__mcmp+0x28>
 800f42e:	f04f 32ff 	mov.w	r2, #4294967295
 800f432:	e7f7      	b.n	800f424 <__mcmp+0x28>

0800f434 <__mdiff>:
 800f434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f438:	460c      	mov	r4, r1
 800f43a:	4606      	mov	r6, r0
 800f43c:	4611      	mov	r1, r2
 800f43e:	4620      	mov	r0, r4
 800f440:	4690      	mov	r8, r2
 800f442:	f7ff ffdb 	bl	800f3fc <__mcmp>
 800f446:	1e05      	subs	r5, r0, #0
 800f448:	d110      	bne.n	800f46c <__mdiff+0x38>
 800f44a:	4629      	mov	r1, r5
 800f44c:	4630      	mov	r0, r6
 800f44e:	f7ff fd0f 	bl	800ee70 <_Balloc>
 800f452:	b930      	cbnz	r0, 800f462 <__mdiff+0x2e>
 800f454:	4b3a      	ldr	r3, [pc, #232]	; (800f540 <__mdiff+0x10c>)
 800f456:	4602      	mov	r2, r0
 800f458:	f240 2137 	movw	r1, #567	; 0x237
 800f45c:	4839      	ldr	r0, [pc, #228]	; (800f544 <__mdiff+0x110>)
 800f45e:	f000 fc47 	bl	800fcf0 <__assert_func>
 800f462:	2301      	movs	r3, #1
 800f464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46c:	bfa4      	itt	ge
 800f46e:	4643      	movge	r3, r8
 800f470:	46a0      	movge	r8, r4
 800f472:	4630      	mov	r0, r6
 800f474:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f478:	bfa6      	itte	ge
 800f47a:	461c      	movge	r4, r3
 800f47c:	2500      	movge	r5, #0
 800f47e:	2501      	movlt	r5, #1
 800f480:	f7ff fcf6 	bl	800ee70 <_Balloc>
 800f484:	b920      	cbnz	r0, 800f490 <__mdiff+0x5c>
 800f486:	4b2e      	ldr	r3, [pc, #184]	; (800f540 <__mdiff+0x10c>)
 800f488:	4602      	mov	r2, r0
 800f48a:	f240 2145 	movw	r1, #581	; 0x245
 800f48e:	e7e5      	b.n	800f45c <__mdiff+0x28>
 800f490:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f494:	6926      	ldr	r6, [r4, #16]
 800f496:	60c5      	str	r5, [r0, #12]
 800f498:	f104 0914 	add.w	r9, r4, #20
 800f49c:	f108 0514 	add.w	r5, r8, #20
 800f4a0:	f100 0e14 	add.w	lr, r0, #20
 800f4a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f4a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f4ac:	f108 0210 	add.w	r2, r8, #16
 800f4b0:	46f2      	mov	sl, lr
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f4b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f4bc:	fa11 f88b 	uxtah	r8, r1, fp
 800f4c0:	b299      	uxth	r1, r3
 800f4c2:	0c1b      	lsrs	r3, r3, #16
 800f4c4:	eba8 0801 	sub.w	r8, r8, r1
 800f4c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f4cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f4d0:	fa1f f888 	uxth.w	r8, r8
 800f4d4:	1419      	asrs	r1, r3, #16
 800f4d6:	454e      	cmp	r6, r9
 800f4d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f4dc:	f84a 3b04 	str.w	r3, [sl], #4
 800f4e0:	d8e8      	bhi.n	800f4b4 <__mdiff+0x80>
 800f4e2:	1b33      	subs	r3, r6, r4
 800f4e4:	3b15      	subs	r3, #21
 800f4e6:	f023 0303 	bic.w	r3, r3, #3
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	3415      	adds	r4, #21
 800f4ee:	42a6      	cmp	r6, r4
 800f4f0:	bf38      	it	cc
 800f4f2:	2304      	movcc	r3, #4
 800f4f4:	441d      	add	r5, r3
 800f4f6:	4473      	add	r3, lr
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	462e      	mov	r6, r5
 800f4fc:	4566      	cmp	r6, ip
 800f4fe:	d30e      	bcc.n	800f51e <__mdiff+0xea>
 800f500:	f10c 0203 	add.w	r2, ip, #3
 800f504:	1b52      	subs	r2, r2, r5
 800f506:	f022 0203 	bic.w	r2, r2, #3
 800f50a:	3d03      	subs	r5, #3
 800f50c:	45ac      	cmp	ip, r5
 800f50e:	bf38      	it	cc
 800f510:	2200      	movcc	r2, #0
 800f512:	4413      	add	r3, r2
 800f514:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f518:	b17a      	cbz	r2, 800f53a <__mdiff+0x106>
 800f51a:	6107      	str	r7, [r0, #16]
 800f51c:	e7a4      	b.n	800f468 <__mdiff+0x34>
 800f51e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f522:	fa11 f288 	uxtah	r2, r1, r8
 800f526:	1414      	asrs	r4, r2, #16
 800f528:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f52c:	b292      	uxth	r2, r2
 800f52e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f532:	f84e 2b04 	str.w	r2, [lr], #4
 800f536:	1421      	asrs	r1, r4, #16
 800f538:	e7e0      	b.n	800f4fc <__mdiff+0xc8>
 800f53a:	3f01      	subs	r7, #1
 800f53c:	e7ea      	b.n	800f514 <__mdiff+0xe0>
 800f53e:	bf00      	nop
 800f540:	08010ad9 	.word	0x08010ad9
 800f544:	08010b4a 	.word	0x08010b4a

0800f548 <__ulp>:
 800f548:	b082      	sub	sp, #8
 800f54a:	ed8d 0b00 	vstr	d0, [sp]
 800f54e:	9a01      	ldr	r2, [sp, #4]
 800f550:	4b0f      	ldr	r3, [pc, #60]	; (800f590 <__ulp+0x48>)
 800f552:	4013      	ands	r3, r2
 800f554:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f558:	2b00      	cmp	r3, #0
 800f55a:	dc08      	bgt.n	800f56e <__ulp+0x26>
 800f55c:	425b      	negs	r3, r3
 800f55e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f562:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f566:	da04      	bge.n	800f572 <__ulp+0x2a>
 800f568:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f56c:	4113      	asrs	r3, r2
 800f56e:	2200      	movs	r2, #0
 800f570:	e008      	b.n	800f584 <__ulp+0x3c>
 800f572:	f1a2 0314 	sub.w	r3, r2, #20
 800f576:	2b1e      	cmp	r3, #30
 800f578:	bfda      	itte	le
 800f57a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f57e:	40da      	lsrle	r2, r3
 800f580:	2201      	movgt	r2, #1
 800f582:	2300      	movs	r3, #0
 800f584:	4619      	mov	r1, r3
 800f586:	4610      	mov	r0, r2
 800f588:	ec41 0b10 	vmov	d0, r0, r1
 800f58c:	b002      	add	sp, #8
 800f58e:	4770      	bx	lr
 800f590:	7ff00000 	.word	0x7ff00000

0800f594 <__b2d>:
 800f594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f598:	6906      	ldr	r6, [r0, #16]
 800f59a:	f100 0814 	add.w	r8, r0, #20
 800f59e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f5a2:	1f37      	subs	r7, r6, #4
 800f5a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	f7ff fd53 	bl	800f054 <__hi0bits>
 800f5ae:	f1c0 0320 	rsb	r3, r0, #32
 800f5b2:	280a      	cmp	r0, #10
 800f5b4:	600b      	str	r3, [r1, #0]
 800f5b6:	491b      	ldr	r1, [pc, #108]	; (800f624 <__b2d+0x90>)
 800f5b8:	dc15      	bgt.n	800f5e6 <__b2d+0x52>
 800f5ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800f5be:	fa22 f30c 	lsr.w	r3, r2, ip
 800f5c2:	45b8      	cmp	r8, r7
 800f5c4:	ea43 0501 	orr.w	r5, r3, r1
 800f5c8:	bf34      	ite	cc
 800f5ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f5ce:	2300      	movcs	r3, #0
 800f5d0:	3015      	adds	r0, #21
 800f5d2:	fa02 f000 	lsl.w	r0, r2, r0
 800f5d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800f5da:	4303      	orrs	r3, r0
 800f5dc:	461c      	mov	r4, r3
 800f5de:	ec45 4b10 	vmov	d0, r4, r5
 800f5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e6:	45b8      	cmp	r8, r7
 800f5e8:	bf3a      	itte	cc
 800f5ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f5ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800f5f2:	2300      	movcs	r3, #0
 800f5f4:	380b      	subs	r0, #11
 800f5f6:	d012      	beq.n	800f61e <__b2d+0x8a>
 800f5f8:	f1c0 0120 	rsb	r1, r0, #32
 800f5fc:	fa23 f401 	lsr.w	r4, r3, r1
 800f600:	4082      	lsls	r2, r0
 800f602:	4322      	orrs	r2, r4
 800f604:	4547      	cmp	r7, r8
 800f606:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f60a:	bf8c      	ite	hi
 800f60c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f610:	2200      	movls	r2, #0
 800f612:	4083      	lsls	r3, r0
 800f614:	40ca      	lsrs	r2, r1
 800f616:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f61a:	4313      	orrs	r3, r2
 800f61c:	e7de      	b.n	800f5dc <__b2d+0x48>
 800f61e:	ea42 0501 	orr.w	r5, r2, r1
 800f622:	e7db      	b.n	800f5dc <__b2d+0x48>
 800f624:	3ff00000 	.word	0x3ff00000

0800f628 <__d2b>:
 800f628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f62c:	460f      	mov	r7, r1
 800f62e:	2101      	movs	r1, #1
 800f630:	ec59 8b10 	vmov	r8, r9, d0
 800f634:	4616      	mov	r6, r2
 800f636:	f7ff fc1b 	bl	800ee70 <_Balloc>
 800f63a:	4604      	mov	r4, r0
 800f63c:	b930      	cbnz	r0, 800f64c <__d2b+0x24>
 800f63e:	4602      	mov	r2, r0
 800f640:	4b24      	ldr	r3, [pc, #144]	; (800f6d4 <__d2b+0xac>)
 800f642:	4825      	ldr	r0, [pc, #148]	; (800f6d8 <__d2b+0xb0>)
 800f644:	f240 310f 	movw	r1, #783	; 0x30f
 800f648:	f000 fb52 	bl	800fcf0 <__assert_func>
 800f64c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f654:	bb2d      	cbnz	r5, 800f6a2 <__d2b+0x7a>
 800f656:	9301      	str	r3, [sp, #4]
 800f658:	f1b8 0300 	subs.w	r3, r8, #0
 800f65c:	d026      	beq.n	800f6ac <__d2b+0x84>
 800f65e:	4668      	mov	r0, sp
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	f7ff fd17 	bl	800f094 <__lo0bits>
 800f666:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f66a:	b1e8      	cbz	r0, 800f6a8 <__d2b+0x80>
 800f66c:	f1c0 0320 	rsb	r3, r0, #32
 800f670:	fa02 f303 	lsl.w	r3, r2, r3
 800f674:	430b      	orrs	r3, r1
 800f676:	40c2      	lsrs	r2, r0
 800f678:	6163      	str	r3, [r4, #20]
 800f67a:	9201      	str	r2, [sp, #4]
 800f67c:	9b01      	ldr	r3, [sp, #4]
 800f67e:	61a3      	str	r3, [r4, #24]
 800f680:	2b00      	cmp	r3, #0
 800f682:	bf14      	ite	ne
 800f684:	2202      	movne	r2, #2
 800f686:	2201      	moveq	r2, #1
 800f688:	6122      	str	r2, [r4, #16]
 800f68a:	b1bd      	cbz	r5, 800f6bc <__d2b+0x94>
 800f68c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f690:	4405      	add	r5, r0
 800f692:	603d      	str	r5, [r7, #0]
 800f694:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f698:	6030      	str	r0, [r6, #0]
 800f69a:	4620      	mov	r0, r4
 800f69c:	b003      	add	sp, #12
 800f69e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f6a6:	e7d6      	b.n	800f656 <__d2b+0x2e>
 800f6a8:	6161      	str	r1, [r4, #20]
 800f6aa:	e7e7      	b.n	800f67c <__d2b+0x54>
 800f6ac:	a801      	add	r0, sp, #4
 800f6ae:	f7ff fcf1 	bl	800f094 <__lo0bits>
 800f6b2:	9b01      	ldr	r3, [sp, #4]
 800f6b4:	6163      	str	r3, [r4, #20]
 800f6b6:	3020      	adds	r0, #32
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	e7e5      	b.n	800f688 <__d2b+0x60>
 800f6bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f6c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f6c4:	6038      	str	r0, [r7, #0]
 800f6c6:	6918      	ldr	r0, [r3, #16]
 800f6c8:	f7ff fcc4 	bl	800f054 <__hi0bits>
 800f6cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f6d0:	e7e2      	b.n	800f698 <__d2b+0x70>
 800f6d2:	bf00      	nop
 800f6d4:	08010ad9 	.word	0x08010ad9
 800f6d8:	08010b4a 	.word	0x08010b4a

0800f6dc <__ratio>:
 800f6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e0:	4688      	mov	r8, r1
 800f6e2:	4669      	mov	r1, sp
 800f6e4:	4681      	mov	r9, r0
 800f6e6:	f7ff ff55 	bl	800f594 <__b2d>
 800f6ea:	a901      	add	r1, sp, #4
 800f6ec:	4640      	mov	r0, r8
 800f6ee:	ec55 4b10 	vmov	r4, r5, d0
 800f6f2:	f7ff ff4f 	bl	800f594 <__b2d>
 800f6f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f6fe:	eba3 0c02 	sub.w	ip, r3, r2
 800f702:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f706:	1a9b      	subs	r3, r3, r2
 800f708:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f70c:	ec51 0b10 	vmov	r0, r1, d0
 800f710:	2b00      	cmp	r3, #0
 800f712:	bfd6      	itet	le
 800f714:	460a      	movle	r2, r1
 800f716:	462a      	movgt	r2, r5
 800f718:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f71c:	468b      	mov	fp, r1
 800f71e:	462f      	mov	r7, r5
 800f720:	bfd4      	ite	le
 800f722:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f726:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f72a:	4620      	mov	r0, r4
 800f72c:	ee10 2a10 	vmov	r2, s0
 800f730:	465b      	mov	r3, fp
 800f732:	4639      	mov	r1, r7
 800f734:	f7f1 f88a 	bl	800084c <__aeabi_ddiv>
 800f738:	ec41 0b10 	vmov	d0, r0, r1
 800f73c:	b003      	add	sp, #12
 800f73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f742 <__copybits>:
 800f742:	3901      	subs	r1, #1
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	1149      	asrs	r1, r1, #5
 800f748:	6914      	ldr	r4, [r2, #16]
 800f74a:	3101      	adds	r1, #1
 800f74c:	f102 0314 	add.w	r3, r2, #20
 800f750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f754:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f758:	1f05      	subs	r5, r0, #4
 800f75a:	42a3      	cmp	r3, r4
 800f75c:	d30c      	bcc.n	800f778 <__copybits+0x36>
 800f75e:	1aa3      	subs	r3, r4, r2
 800f760:	3b11      	subs	r3, #17
 800f762:	f023 0303 	bic.w	r3, r3, #3
 800f766:	3211      	adds	r2, #17
 800f768:	42a2      	cmp	r2, r4
 800f76a:	bf88      	it	hi
 800f76c:	2300      	movhi	r3, #0
 800f76e:	4418      	add	r0, r3
 800f770:	2300      	movs	r3, #0
 800f772:	4288      	cmp	r0, r1
 800f774:	d305      	bcc.n	800f782 <__copybits+0x40>
 800f776:	bd70      	pop	{r4, r5, r6, pc}
 800f778:	f853 6b04 	ldr.w	r6, [r3], #4
 800f77c:	f845 6f04 	str.w	r6, [r5, #4]!
 800f780:	e7eb      	b.n	800f75a <__copybits+0x18>
 800f782:	f840 3b04 	str.w	r3, [r0], #4
 800f786:	e7f4      	b.n	800f772 <__copybits+0x30>

0800f788 <__any_on>:
 800f788:	f100 0214 	add.w	r2, r0, #20
 800f78c:	6900      	ldr	r0, [r0, #16]
 800f78e:	114b      	asrs	r3, r1, #5
 800f790:	4298      	cmp	r0, r3
 800f792:	b510      	push	{r4, lr}
 800f794:	db11      	blt.n	800f7ba <__any_on+0x32>
 800f796:	dd0a      	ble.n	800f7ae <__any_on+0x26>
 800f798:	f011 011f 	ands.w	r1, r1, #31
 800f79c:	d007      	beq.n	800f7ae <__any_on+0x26>
 800f79e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f7a2:	fa24 f001 	lsr.w	r0, r4, r1
 800f7a6:	fa00 f101 	lsl.w	r1, r0, r1
 800f7aa:	428c      	cmp	r4, r1
 800f7ac:	d10b      	bne.n	800f7c6 <__any_on+0x3e>
 800f7ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d803      	bhi.n	800f7be <__any_on+0x36>
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	bd10      	pop	{r4, pc}
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	e7f7      	b.n	800f7ae <__any_on+0x26>
 800f7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f7c2:	2900      	cmp	r1, #0
 800f7c4:	d0f5      	beq.n	800f7b2 <__any_on+0x2a>
 800f7c6:	2001      	movs	r0, #1
 800f7c8:	e7f6      	b.n	800f7b8 <__any_on+0x30>

0800f7ca <__ascii_wctomb>:
 800f7ca:	b149      	cbz	r1, 800f7e0 <__ascii_wctomb+0x16>
 800f7cc:	2aff      	cmp	r2, #255	; 0xff
 800f7ce:	bf85      	ittet	hi
 800f7d0:	238a      	movhi	r3, #138	; 0x8a
 800f7d2:	6003      	strhi	r3, [r0, #0]
 800f7d4:	700a      	strbls	r2, [r1, #0]
 800f7d6:	f04f 30ff 	movhi.w	r0, #4294967295
 800f7da:	bf98      	it	ls
 800f7dc:	2001      	movls	r0, #1
 800f7de:	4770      	bx	lr
 800f7e0:	4608      	mov	r0, r1
 800f7e2:	4770      	bx	lr

0800f7e4 <__sfputc_r>:
 800f7e4:	6893      	ldr	r3, [r2, #8]
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	b410      	push	{r4}
 800f7ec:	6093      	str	r3, [r2, #8]
 800f7ee:	da08      	bge.n	800f802 <__sfputc_r+0x1e>
 800f7f0:	6994      	ldr	r4, [r2, #24]
 800f7f2:	42a3      	cmp	r3, r4
 800f7f4:	db01      	blt.n	800f7fa <__sfputc_r+0x16>
 800f7f6:	290a      	cmp	r1, #10
 800f7f8:	d103      	bne.n	800f802 <__sfputc_r+0x1e>
 800f7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7fe:	f7fd bf0e 	b.w	800d61e <__swbuf_r>
 800f802:	6813      	ldr	r3, [r2, #0]
 800f804:	1c58      	adds	r0, r3, #1
 800f806:	6010      	str	r0, [r2, #0]
 800f808:	7019      	strb	r1, [r3, #0]
 800f80a:	4608      	mov	r0, r1
 800f80c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f810:	4770      	bx	lr

0800f812 <__sfputs_r>:
 800f812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f814:	4606      	mov	r6, r0
 800f816:	460f      	mov	r7, r1
 800f818:	4614      	mov	r4, r2
 800f81a:	18d5      	adds	r5, r2, r3
 800f81c:	42ac      	cmp	r4, r5
 800f81e:	d101      	bne.n	800f824 <__sfputs_r+0x12>
 800f820:	2000      	movs	r0, #0
 800f822:	e007      	b.n	800f834 <__sfputs_r+0x22>
 800f824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f828:	463a      	mov	r2, r7
 800f82a:	4630      	mov	r0, r6
 800f82c:	f7ff ffda 	bl	800f7e4 <__sfputc_r>
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	d1f3      	bne.n	800f81c <__sfputs_r+0xa>
 800f834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f838 <_vfiprintf_r>:
 800f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83c:	460d      	mov	r5, r1
 800f83e:	b09d      	sub	sp, #116	; 0x74
 800f840:	4614      	mov	r4, r2
 800f842:	4698      	mov	r8, r3
 800f844:	4606      	mov	r6, r0
 800f846:	b118      	cbz	r0, 800f850 <_vfiprintf_r+0x18>
 800f848:	6a03      	ldr	r3, [r0, #32]
 800f84a:	b90b      	cbnz	r3, 800f850 <_vfiprintf_r+0x18>
 800f84c:	f7fd fe00 	bl	800d450 <__sinit>
 800f850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f852:	07d9      	lsls	r1, r3, #31
 800f854:	d405      	bmi.n	800f862 <_vfiprintf_r+0x2a>
 800f856:	89ab      	ldrh	r3, [r5, #12]
 800f858:	059a      	lsls	r2, r3, #22
 800f85a:	d402      	bmi.n	800f862 <_vfiprintf_r+0x2a>
 800f85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f85e:	f7fe f802 	bl	800d866 <__retarget_lock_acquire_recursive>
 800f862:	89ab      	ldrh	r3, [r5, #12]
 800f864:	071b      	lsls	r3, r3, #28
 800f866:	d501      	bpl.n	800f86c <_vfiprintf_r+0x34>
 800f868:	692b      	ldr	r3, [r5, #16]
 800f86a:	b99b      	cbnz	r3, 800f894 <_vfiprintf_r+0x5c>
 800f86c:	4629      	mov	r1, r5
 800f86e:	4630      	mov	r0, r6
 800f870:	f7fd ff12 	bl	800d698 <__swsetup_r>
 800f874:	b170      	cbz	r0, 800f894 <_vfiprintf_r+0x5c>
 800f876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f878:	07dc      	lsls	r4, r3, #31
 800f87a:	d504      	bpl.n	800f886 <_vfiprintf_r+0x4e>
 800f87c:	f04f 30ff 	mov.w	r0, #4294967295
 800f880:	b01d      	add	sp, #116	; 0x74
 800f882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f886:	89ab      	ldrh	r3, [r5, #12]
 800f888:	0598      	lsls	r0, r3, #22
 800f88a:	d4f7      	bmi.n	800f87c <_vfiprintf_r+0x44>
 800f88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f88e:	f7fd ffeb 	bl	800d868 <__retarget_lock_release_recursive>
 800f892:	e7f3      	b.n	800f87c <_vfiprintf_r+0x44>
 800f894:	2300      	movs	r3, #0
 800f896:	9309      	str	r3, [sp, #36]	; 0x24
 800f898:	2320      	movs	r3, #32
 800f89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f89e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8a2:	2330      	movs	r3, #48	; 0x30
 800f8a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fa58 <_vfiprintf_r+0x220>
 800f8a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8ac:	f04f 0901 	mov.w	r9, #1
 800f8b0:	4623      	mov	r3, r4
 800f8b2:	469a      	mov	sl, r3
 800f8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8b8:	b10a      	cbz	r2, 800f8be <_vfiprintf_r+0x86>
 800f8ba:	2a25      	cmp	r2, #37	; 0x25
 800f8bc:	d1f9      	bne.n	800f8b2 <_vfiprintf_r+0x7a>
 800f8be:	ebba 0b04 	subs.w	fp, sl, r4
 800f8c2:	d00b      	beq.n	800f8dc <_vfiprintf_r+0xa4>
 800f8c4:	465b      	mov	r3, fp
 800f8c6:	4622      	mov	r2, r4
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f7ff ffa1 	bl	800f812 <__sfputs_r>
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	f000 80a9 	beq.w	800fa28 <_vfiprintf_r+0x1f0>
 800f8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8d8:	445a      	add	r2, fp
 800f8da:	9209      	str	r2, [sp, #36]	; 0x24
 800f8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 80a1 	beq.w	800fa28 <_vfiprintf_r+0x1f0>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8f0:	f10a 0a01 	add.w	sl, sl, #1
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	9307      	str	r3, [sp, #28]
 800f8f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8fc:	931a      	str	r3, [sp, #104]	; 0x68
 800f8fe:	4654      	mov	r4, sl
 800f900:	2205      	movs	r2, #5
 800f902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f906:	4854      	ldr	r0, [pc, #336]	; (800fa58 <_vfiprintf_r+0x220>)
 800f908:	f7f0 fc62 	bl	80001d0 <memchr>
 800f90c:	9a04      	ldr	r2, [sp, #16]
 800f90e:	b9d8      	cbnz	r0, 800f948 <_vfiprintf_r+0x110>
 800f910:	06d1      	lsls	r1, r2, #27
 800f912:	bf44      	itt	mi
 800f914:	2320      	movmi	r3, #32
 800f916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f91a:	0713      	lsls	r3, r2, #28
 800f91c:	bf44      	itt	mi
 800f91e:	232b      	movmi	r3, #43	; 0x2b
 800f920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f924:	f89a 3000 	ldrb.w	r3, [sl]
 800f928:	2b2a      	cmp	r3, #42	; 0x2a
 800f92a:	d015      	beq.n	800f958 <_vfiprintf_r+0x120>
 800f92c:	9a07      	ldr	r2, [sp, #28]
 800f92e:	4654      	mov	r4, sl
 800f930:	2000      	movs	r0, #0
 800f932:	f04f 0c0a 	mov.w	ip, #10
 800f936:	4621      	mov	r1, r4
 800f938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f93c:	3b30      	subs	r3, #48	; 0x30
 800f93e:	2b09      	cmp	r3, #9
 800f940:	d94d      	bls.n	800f9de <_vfiprintf_r+0x1a6>
 800f942:	b1b0      	cbz	r0, 800f972 <_vfiprintf_r+0x13a>
 800f944:	9207      	str	r2, [sp, #28]
 800f946:	e014      	b.n	800f972 <_vfiprintf_r+0x13a>
 800f948:	eba0 0308 	sub.w	r3, r0, r8
 800f94c:	fa09 f303 	lsl.w	r3, r9, r3
 800f950:	4313      	orrs	r3, r2
 800f952:	9304      	str	r3, [sp, #16]
 800f954:	46a2      	mov	sl, r4
 800f956:	e7d2      	b.n	800f8fe <_vfiprintf_r+0xc6>
 800f958:	9b03      	ldr	r3, [sp, #12]
 800f95a:	1d19      	adds	r1, r3, #4
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	9103      	str	r1, [sp, #12]
 800f960:	2b00      	cmp	r3, #0
 800f962:	bfbb      	ittet	lt
 800f964:	425b      	neglt	r3, r3
 800f966:	f042 0202 	orrlt.w	r2, r2, #2
 800f96a:	9307      	strge	r3, [sp, #28]
 800f96c:	9307      	strlt	r3, [sp, #28]
 800f96e:	bfb8      	it	lt
 800f970:	9204      	strlt	r2, [sp, #16]
 800f972:	7823      	ldrb	r3, [r4, #0]
 800f974:	2b2e      	cmp	r3, #46	; 0x2e
 800f976:	d10c      	bne.n	800f992 <_vfiprintf_r+0x15a>
 800f978:	7863      	ldrb	r3, [r4, #1]
 800f97a:	2b2a      	cmp	r3, #42	; 0x2a
 800f97c:	d134      	bne.n	800f9e8 <_vfiprintf_r+0x1b0>
 800f97e:	9b03      	ldr	r3, [sp, #12]
 800f980:	1d1a      	adds	r2, r3, #4
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	9203      	str	r2, [sp, #12]
 800f986:	2b00      	cmp	r3, #0
 800f988:	bfb8      	it	lt
 800f98a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f98e:	3402      	adds	r4, #2
 800f990:	9305      	str	r3, [sp, #20]
 800f992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fa68 <_vfiprintf_r+0x230>
 800f996:	7821      	ldrb	r1, [r4, #0]
 800f998:	2203      	movs	r2, #3
 800f99a:	4650      	mov	r0, sl
 800f99c:	f7f0 fc18 	bl	80001d0 <memchr>
 800f9a0:	b138      	cbz	r0, 800f9b2 <_vfiprintf_r+0x17a>
 800f9a2:	9b04      	ldr	r3, [sp, #16]
 800f9a4:	eba0 000a 	sub.w	r0, r0, sl
 800f9a8:	2240      	movs	r2, #64	; 0x40
 800f9aa:	4082      	lsls	r2, r0
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	3401      	adds	r4, #1
 800f9b0:	9304      	str	r3, [sp, #16]
 800f9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9b6:	4829      	ldr	r0, [pc, #164]	; (800fa5c <_vfiprintf_r+0x224>)
 800f9b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9bc:	2206      	movs	r2, #6
 800f9be:	f7f0 fc07 	bl	80001d0 <memchr>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d03f      	beq.n	800fa46 <_vfiprintf_r+0x20e>
 800f9c6:	4b26      	ldr	r3, [pc, #152]	; (800fa60 <_vfiprintf_r+0x228>)
 800f9c8:	bb1b      	cbnz	r3, 800fa12 <_vfiprintf_r+0x1da>
 800f9ca:	9b03      	ldr	r3, [sp, #12]
 800f9cc:	3307      	adds	r3, #7
 800f9ce:	f023 0307 	bic.w	r3, r3, #7
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	9303      	str	r3, [sp, #12]
 800f9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9d8:	443b      	add	r3, r7
 800f9da:	9309      	str	r3, [sp, #36]	; 0x24
 800f9dc:	e768      	b.n	800f8b0 <_vfiprintf_r+0x78>
 800f9de:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	2001      	movs	r0, #1
 800f9e6:	e7a6      	b.n	800f936 <_vfiprintf_r+0xfe>
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	3401      	adds	r4, #1
 800f9ec:	9305      	str	r3, [sp, #20]
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	f04f 0c0a 	mov.w	ip, #10
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9fa:	3a30      	subs	r2, #48	; 0x30
 800f9fc:	2a09      	cmp	r2, #9
 800f9fe:	d903      	bls.n	800fa08 <_vfiprintf_r+0x1d0>
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d0c6      	beq.n	800f992 <_vfiprintf_r+0x15a>
 800fa04:	9105      	str	r1, [sp, #20]
 800fa06:	e7c4      	b.n	800f992 <_vfiprintf_r+0x15a>
 800fa08:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e7f0      	b.n	800f9f4 <_vfiprintf_r+0x1bc>
 800fa12:	ab03      	add	r3, sp, #12
 800fa14:	9300      	str	r3, [sp, #0]
 800fa16:	462a      	mov	r2, r5
 800fa18:	4b12      	ldr	r3, [pc, #72]	; (800fa64 <_vfiprintf_r+0x22c>)
 800fa1a:	a904      	add	r1, sp, #16
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f7fd f8c5 	bl	800cbac <_printf_float>
 800fa22:	4607      	mov	r7, r0
 800fa24:	1c78      	adds	r0, r7, #1
 800fa26:	d1d6      	bne.n	800f9d6 <_vfiprintf_r+0x19e>
 800fa28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa2a:	07d9      	lsls	r1, r3, #31
 800fa2c:	d405      	bmi.n	800fa3a <_vfiprintf_r+0x202>
 800fa2e:	89ab      	ldrh	r3, [r5, #12]
 800fa30:	059a      	lsls	r2, r3, #22
 800fa32:	d402      	bmi.n	800fa3a <_vfiprintf_r+0x202>
 800fa34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa36:	f7fd ff17 	bl	800d868 <__retarget_lock_release_recursive>
 800fa3a:	89ab      	ldrh	r3, [r5, #12]
 800fa3c:	065b      	lsls	r3, r3, #25
 800fa3e:	f53f af1d 	bmi.w	800f87c <_vfiprintf_r+0x44>
 800fa42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa44:	e71c      	b.n	800f880 <_vfiprintf_r+0x48>
 800fa46:	ab03      	add	r3, sp, #12
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	462a      	mov	r2, r5
 800fa4c:	4b05      	ldr	r3, [pc, #20]	; (800fa64 <_vfiprintf_r+0x22c>)
 800fa4e:	a904      	add	r1, sp, #16
 800fa50:	4630      	mov	r0, r6
 800fa52:	f7fd fb4f 	bl	800d0f4 <_printf_i>
 800fa56:	e7e4      	b.n	800fa22 <_vfiprintf_r+0x1ea>
 800fa58:	08010ca4 	.word	0x08010ca4
 800fa5c:	08010cae 	.word	0x08010cae
 800fa60:	0800cbad 	.word	0x0800cbad
 800fa64:	0800f813 	.word	0x0800f813
 800fa68:	08010caa 	.word	0x08010caa

0800fa6c <__sflush_r>:
 800fa6c:	898a      	ldrh	r2, [r1, #12]
 800fa6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa72:	4605      	mov	r5, r0
 800fa74:	0710      	lsls	r0, r2, #28
 800fa76:	460c      	mov	r4, r1
 800fa78:	d458      	bmi.n	800fb2c <__sflush_r+0xc0>
 800fa7a:	684b      	ldr	r3, [r1, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	dc05      	bgt.n	800fa8c <__sflush_r+0x20>
 800fa80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	dc02      	bgt.n	800fa8c <__sflush_r+0x20>
 800fa86:	2000      	movs	r0, #0
 800fa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa8e:	2e00      	cmp	r6, #0
 800fa90:	d0f9      	beq.n	800fa86 <__sflush_r+0x1a>
 800fa92:	2300      	movs	r3, #0
 800fa94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa98:	682f      	ldr	r7, [r5, #0]
 800fa9a:	6a21      	ldr	r1, [r4, #32]
 800fa9c:	602b      	str	r3, [r5, #0]
 800fa9e:	d032      	beq.n	800fb06 <__sflush_r+0x9a>
 800faa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800faa2:	89a3      	ldrh	r3, [r4, #12]
 800faa4:	075a      	lsls	r2, r3, #29
 800faa6:	d505      	bpl.n	800fab4 <__sflush_r+0x48>
 800faa8:	6863      	ldr	r3, [r4, #4]
 800faaa:	1ac0      	subs	r0, r0, r3
 800faac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800faae:	b10b      	cbz	r3, 800fab4 <__sflush_r+0x48>
 800fab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fab2:	1ac0      	subs	r0, r0, r3
 800fab4:	2300      	movs	r3, #0
 800fab6:	4602      	mov	r2, r0
 800fab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800faba:	6a21      	ldr	r1, [r4, #32]
 800fabc:	4628      	mov	r0, r5
 800fabe:	47b0      	blx	r6
 800fac0:	1c43      	adds	r3, r0, #1
 800fac2:	89a3      	ldrh	r3, [r4, #12]
 800fac4:	d106      	bne.n	800fad4 <__sflush_r+0x68>
 800fac6:	6829      	ldr	r1, [r5, #0]
 800fac8:	291d      	cmp	r1, #29
 800faca:	d82b      	bhi.n	800fb24 <__sflush_r+0xb8>
 800facc:	4a29      	ldr	r2, [pc, #164]	; (800fb74 <__sflush_r+0x108>)
 800face:	410a      	asrs	r2, r1
 800fad0:	07d6      	lsls	r6, r2, #31
 800fad2:	d427      	bmi.n	800fb24 <__sflush_r+0xb8>
 800fad4:	2200      	movs	r2, #0
 800fad6:	6062      	str	r2, [r4, #4]
 800fad8:	04d9      	lsls	r1, r3, #19
 800fada:	6922      	ldr	r2, [r4, #16]
 800fadc:	6022      	str	r2, [r4, #0]
 800fade:	d504      	bpl.n	800faea <__sflush_r+0x7e>
 800fae0:	1c42      	adds	r2, r0, #1
 800fae2:	d101      	bne.n	800fae8 <__sflush_r+0x7c>
 800fae4:	682b      	ldr	r3, [r5, #0]
 800fae6:	b903      	cbnz	r3, 800faea <__sflush_r+0x7e>
 800fae8:	6560      	str	r0, [r4, #84]	; 0x54
 800faea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faec:	602f      	str	r7, [r5, #0]
 800faee:	2900      	cmp	r1, #0
 800faf0:	d0c9      	beq.n	800fa86 <__sflush_r+0x1a>
 800faf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800faf6:	4299      	cmp	r1, r3
 800faf8:	d002      	beq.n	800fb00 <__sflush_r+0x94>
 800fafa:	4628      	mov	r0, r5
 800fafc:	f7fe fd4e 	bl	800e59c <_free_r>
 800fb00:	2000      	movs	r0, #0
 800fb02:	6360      	str	r0, [r4, #52]	; 0x34
 800fb04:	e7c0      	b.n	800fa88 <__sflush_r+0x1c>
 800fb06:	2301      	movs	r3, #1
 800fb08:	4628      	mov	r0, r5
 800fb0a:	47b0      	blx	r6
 800fb0c:	1c41      	adds	r1, r0, #1
 800fb0e:	d1c8      	bne.n	800faa2 <__sflush_r+0x36>
 800fb10:	682b      	ldr	r3, [r5, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d0c5      	beq.n	800faa2 <__sflush_r+0x36>
 800fb16:	2b1d      	cmp	r3, #29
 800fb18:	d001      	beq.n	800fb1e <__sflush_r+0xb2>
 800fb1a:	2b16      	cmp	r3, #22
 800fb1c:	d101      	bne.n	800fb22 <__sflush_r+0xb6>
 800fb1e:	602f      	str	r7, [r5, #0]
 800fb20:	e7b1      	b.n	800fa86 <__sflush_r+0x1a>
 800fb22:	89a3      	ldrh	r3, [r4, #12]
 800fb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb28:	81a3      	strh	r3, [r4, #12]
 800fb2a:	e7ad      	b.n	800fa88 <__sflush_r+0x1c>
 800fb2c:	690f      	ldr	r7, [r1, #16]
 800fb2e:	2f00      	cmp	r7, #0
 800fb30:	d0a9      	beq.n	800fa86 <__sflush_r+0x1a>
 800fb32:	0793      	lsls	r3, r2, #30
 800fb34:	680e      	ldr	r6, [r1, #0]
 800fb36:	bf08      	it	eq
 800fb38:	694b      	ldreq	r3, [r1, #20]
 800fb3a:	600f      	str	r7, [r1, #0]
 800fb3c:	bf18      	it	ne
 800fb3e:	2300      	movne	r3, #0
 800fb40:	eba6 0807 	sub.w	r8, r6, r7
 800fb44:	608b      	str	r3, [r1, #8]
 800fb46:	f1b8 0f00 	cmp.w	r8, #0
 800fb4a:	dd9c      	ble.n	800fa86 <__sflush_r+0x1a>
 800fb4c:	6a21      	ldr	r1, [r4, #32]
 800fb4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb50:	4643      	mov	r3, r8
 800fb52:	463a      	mov	r2, r7
 800fb54:	4628      	mov	r0, r5
 800fb56:	47b0      	blx	r6
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	dc06      	bgt.n	800fb6a <__sflush_r+0xfe>
 800fb5c:	89a3      	ldrh	r3, [r4, #12]
 800fb5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb62:	81a3      	strh	r3, [r4, #12]
 800fb64:	f04f 30ff 	mov.w	r0, #4294967295
 800fb68:	e78e      	b.n	800fa88 <__sflush_r+0x1c>
 800fb6a:	4407      	add	r7, r0
 800fb6c:	eba8 0800 	sub.w	r8, r8, r0
 800fb70:	e7e9      	b.n	800fb46 <__sflush_r+0xda>
 800fb72:	bf00      	nop
 800fb74:	dfbffffe 	.word	0xdfbffffe

0800fb78 <_fflush_r>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	690b      	ldr	r3, [r1, #16]
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	460c      	mov	r4, r1
 800fb80:	b913      	cbnz	r3, 800fb88 <_fflush_r+0x10>
 800fb82:	2500      	movs	r5, #0
 800fb84:	4628      	mov	r0, r5
 800fb86:	bd38      	pop	{r3, r4, r5, pc}
 800fb88:	b118      	cbz	r0, 800fb92 <_fflush_r+0x1a>
 800fb8a:	6a03      	ldr	r3, [r0, #32]
 800fb8c:	b90b      	cbnz	r3, 800fb92 <_fflush_r+0x1a>
 800fb8e:	f7fd fc5f 	bl	800d450 <__sinit>
 800fb92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d0f3      	beq.n	800fb82 <_fflush_r+0xa>
 800fb9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb9c:	07d0      	lsls	r0, r2, #31
 800fb9e:	d404      	bmi.n	800fbaa <_fflush_r+0x32>
 800fba0:	0599      	lsls	r1, r3, #22
 800fba2:	d402      	bmi.n	800fbaa <_fflush_r+0x32>
 800fba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fba6:	f7fd fe5e 	bl	800d866 <__retarget_lock_acquire_recursive>
 800fbaa:	4628      	mov	r0, r5
 800fbac:	4621      	mov	r1, r4
 800fbae:	f7ff ff5d 	bl	800fa6c <__sflush_r>
 800fbb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbb4:	07da      	lsls	r2, r3, #31
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	d4e4      	bmi.n	800fb84 <_fflush_r+0xc>
 800fbba:	89a3      	ldrh	r3, [r4, #12]
 800fbbc:	059b      	lsls	r3, r3, #22
 800fbbe:	d4e1      	bmi.n	800fb84 <_fflush_r+0xc>
 800fbc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbc2:	f7fd fe51 	bl	800d868 <__retarget_lock_release_recursive>
 800fbc6:	e7dd      	b.n	800fb84 <_fflush_r+0xc>

0800fbc8 <__swhatbuf_r>:
 800fbc8:	b570      	push	{r4, r5, r6, lr}
 800fbca:	460c      	mov	r4, r1
 800fbcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbd0:	2900      	cmp	r1, #0
 800fbd2:	b096      	sub	sp, #88	; 0x58
 800fbd4:	4615      	mov	r5, r2
 800fbd6:	461e      	mov	r6, r3
 800fbd8:	da0d      	bge.n	800fbf6 <__swhatbuf_r+0x2e>
 800fbda:	89a3      	ldrh	r3, [r4, #12]
 800fbdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fbe0:	f04f 0100 	mov.w	r1, #0
 800fbe4:	bf0c      	ite	eq
 800fbe6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fbea:	2340      	movne	r3, #64	; 0x40
 800fbec:	2000      	movs	r0, #0
 800fbee:	6031      	str	r1, [r6, #0]
 800fbf0:	602b      	str	r3, [r5, #0]
 800fbf2:	b016      	add	sp, #88	; 0x58
 800fbf4:	bd70      	pop	{r4, r5, r6, pc}
 800fbf6:	466a      	mov	r2, sp
 800fbf8:	f000 f848 	bl	800fc8c <_fstat_r>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	dbec      	blt.n	800fbda <__swhatbuf_r+0x12>
 800fc00:	9901      	ldr	r1, [sp, #4]
 800fc02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fc06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fc0a:	4259      	negs	r1, r3
 800fc0c:	4159      	adcs	r1, r3
 800fc0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc12:	e7eb      	b.n	800fbec <__swhatbuf_r+0x24>

0800fc14 <__smakebuf_r>:
 800fc14:	898b      	ldrh	r3, [r1, #12]
 800fc16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc18:	079d      	lsls	r5, r3, #30
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	460c      	mov	r4, r1
 800fc1e:	d507      	bpl.n	800fc30 <__smakebuf_r+0x1c>
 800fc20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc24:	6023      	str	r3, [r4, #0]
 800fc26:	6123      	str	r3, [r4, #16]
 800fc28:	2301      	movs	r3, #1
 800fc2a:	6163      	str	r3, [r4, #20]
 800fc2c:	b002      	add	sp, #8
 800fc2e:	bd70      	pop	{r4, r5, r6, pc}
 800fc30:	ab01      	add	r3, sp, #4
 800fc32:	466a      	mov	r2, sp
 800fc34:	f7ff ffc8 	bl	800fbc8 <__swhatbuf_r>
 800fc38:	9900      	ldr	r1, [sp, #0]
 800fc3a:	4605      	mov	r5, r0
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	f7ff f879 	bl	800ed34 <_malloc_r>
 800fc42:	b948      	cbnz	r0, 800fc58 <__smakebuf_r+0x44>
 800fc44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc48:	059a      	lsls	r2, r3, #22
 800fc4a:	d4ef      	bmi.n	800fc2c <__smakebuf_r+0x18>
 800fc4c:	f023 0303 	bic.w	r3, r3, #3
 800fc50:	f043 0302 	orr.w	r3, r3, #2
 800fc54:	81a3      	strh	r3, [r4, #12]
 800fc56:	e7e3      	b.n	800fc20 <__smakebuf_r+0xc>
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	6020      	str	r0, [r4, #0]
 800fc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc60:	81a3      	strh	r3, [r4, #12]
 800fc62:	9b00      	ldr	r3, [sp, #0]
 800fc64:	6163      	str	r3, [r4, #20]
 800fc66:	9b01      	ldr	r3, [sp, #4]
 800fc68:	6120      	str	r0, [r4, #16]
 800fc6a:	b15b      	cbz	r3, 800fc84 <__smakebuf_r+0x70>
 800fc6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc70:	4630      	mov	r0, r6
 800fc72:	f000 f81d 	bl	800fcb0 <_isatty_r>
 800fc76:	b128      	cbz	r0, 800fc84 <__smakebuf_r+0x70>
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	f023 0303 	bic.w	r3, r3, #3
 800fc7e:	f043 0301 	orr.w	r3, r3, #1
 800fc82:	81a3      	strh	r3, [r4, #12]
 800fc84:	89a3      	ldrh	r3, [r4, #12]
 800fc86:	431d      	orrs	r5, r3
 800fc88:	81a5      	strh	r5, [r4, #12]
 800fc8a:	e7cf      	b.n	800fc2c <__smakebuf_r+0x18>

0800fc8c <_fstat_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	4d07      	ldr	r5, [pc, #28]	; (800fcac <_fstat_r+0x20>)
 800fc90:	2300      	movs	r3, #0
 800fc92:	4604      	mov	r4, r0
 800fc94:	4608      	mov	r0, r1
 800fc96:	4611      	mov	r1, r2
 800fc98:	602b      	str	r3, [r5, #0]
 800fc9a:	f7f4 fa6a 	bl	8004172 <_fstat>
 800fc9e:	1c43      	adds	r3, r0, #1
 800fca0:	d102      	bne.n	800fca8 <_fstat_r+0x1c>
 800fca2:	682b      	ldr	r3, [r5, #0]
 800fca4:	b103      	cbz	r3, 800fca8 <_fstat_r+0x1c>
 800fca6:	6023      	str	r3, [r4, #0]
 800fca8:	bd38      	pop	{r3, r4, r5, pc}
 800fcaa:	bf00      	nop
 800fcac:	20000a10 	.word	0x20000a10

0800fcb0 <_isatty_r>:
 800fcb0:	b538      	push	{r3, r4, r5, lr}
 800fcb2:	4d06      	ldr	r5, [pc, #24]	; (800fccc <_isatty_r+0x1c>)
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	4608      	mov	r0, r1
 800fcba:	602b      	str	r3, [r5, #0]
 800fcbc:	f7f4 fa69 	bl	8004192 <_isatty>
 800fcc0:	1c43      	adds	r3, r0, #1
 800fcc2:	d102      	bne.n	800fcca <_isatty_r+0x1a>
 800fcc4:	682b      	ldr	r3, [r5, #0]
 800fcc6:	b103      	cbz	r3, 800fcca <_isatty_r+0x1a>
 800fcc8:	6023      	str	r3, [r4, #0]
 800fcca:	bd38      	pop	{r3, r4, r5, pc}
 800fccc:	20000a10 	.word	0x20000a10

0800fcd0 <_sbrk_r>:
 800fcd0:	b538      	push	{r3, r4, r5, lr}
 800fcd2:	4d06      	ldr	r5, [pc, #24]	; (800fcec <_sbrk_r+0x1c>)
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	4608      	mov	r0, r1
 800fcda:	602b      	str	r3, [r5, #0]
 800fcdc:	f7f4 fa72 	bl	80041c4 <_sbrk>
 800fce0:	1c43      	adds	r3, r0, #1
 800fce2:	d102      	bne.n	800fcea <_sbrk_r+0x1a>
 800fce4:	682b      	ldr	r3, [r5, #0]
 800fce6:	b103      	cbz	r3, 800fcea <_sbrk_r+0x1a>
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
 800fcec:	20000a10 	.word	0x20000a10

0800fcf0 <__assert_func>:
 800fcf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcf2:	4614      	mov	r4, r2
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	4b09      	ldr	r3, [pc, #36]	; (800fd1c <__assert_func+0x2c>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4605      	mov	r5, r0
 800fcfc:	68d8      	ldr	r0, [r3, #12]
 800fcfe:	b14c      	cbz	r4, 800fd14 <__assert_func+0x24>
 800fd00:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <__assert_func+0x30>)
 800fd02:	9100      	str	r1, [sp, #0]
 800fd04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd08:	4906      	ldr	r1, [pc, #24]	; (800fd24 <__assert_func+0x34>)
 800fd0a:	462b      	mov	r3, r5
 800fd0c:	f000 f824 	bl	800fd58 <fiprintf>
 800fd10:	f000 f834 	bl	800fd7c <abort>
 800fd14:	4b04      	ldr	r3, [pc, #16]	; (800fd28 <__assert_func+0x38>)
 800fd16:	461c      	mov	r4, r3
 800fd18:	e7f3      	b.n	800fd02 <__assert_func+0x12>
 800fd1a:	bf00      	nop
 800fd1c:	200001f4 	.word	0x200001f4
 800fd20:	08010cb5 	.word	0x08010cb5
 800fd24:	08010cc2 	.word	0x08010cc2
 800fd28:	08010cf0 	.word	0x08010cf0

0800fd2c <_calloc_r>:
 800fd2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd2e:	fba1 2402 	umull	r2, r4, r1, r2
 800fd32:	b94c      	cbnz	r4, 800fd48 <_calloc_r+0x1c>
 800fd34:	4611      	mov	r1, r2
 800fd36:	9201      	str	r2, [sp, #4]
 800fd38:	f7fe fffc 	bl	800ed34 <_malloc_r>
 800fd3c:	9a01      	ldr	r2, [sp, #4]
 800fd3e:	4605      	mov	r5, r0
 800fd40:	b930      	cbnz	r0, 800fd50 <_calloc_r+0x24>
 800fd42:	4628      	mov	r0, r5
 800fd44:	b003      	add	sp, #12
 800fd46:	bd30      	pop	{r4, r5, pc}
 800fd48:	220c      	movs	r2, #12
 800fd4a:	6002      	str	r2, [r0, #0]
 800fd4c:	2500      	movs	r5, #0
 800fd4e:	e7f8      	b.n	800fd42 <_calloc_r+0x16>
 800fd50:	4621      	mov	r1, r4
 800fd52:	f7fd fcf9 	bl	800d748 <memset>
 800fd56:	e7f4      	b.n	800fd42 <_calloc_r+0x16>

0800fd58 <fiprintf>:
 800fd58:	b40e      	push	{r1, r2, r3}
 800fd5a:	b503      	push	{r0, r1, lr}
 800fd5c:	4601      	mov	r1, r0
 800fd5e:	ab03      	add	r3, sp, #12
 800fd60:	4805      	ldr	r0, [pc, #20]	; (800fd78 <fiprintf+0x20>)
 800fd62:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd66:	6800      	ldr	r0, [r0, #0]
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	f7ff fd65 	bl	800f838 <_vfiprintf_r>
 800fd6e:	b002      	add	sp, #8
 800fd70:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd74:	b003      	add	sp, #12
 800fd76:	4770      	bx	lr
 800fd78:	200001f4 	.word	0x200001f4

0800fd7c <abort>:
 800fd7c:	b508      	push	{r3, lr}
 800fd7e:	2006      	movs	r0, #6
 800fd80:	f000 f82c 	bl	800fddc <raise>
 800fd84:	2001      	movs	r0, #1
 800fd86:	f7f4 f9c1 	bl	800410c <_exit>

0800fd8a <_raise_r>:
 800fd8a:	291f      	cmp	r1, #31
 800fd8c:	b538      	push	{r3, r4, r5, lr}
 800fd8e:	4604      	mov	r4, r0
 800fd90:	460d      	mov	r5, r1
 800fd92:	d904      	bls.n	800fd9e <_raise_r+0x14>
 800fd94:	2316      	movs	r3, #22
 800fd96:	6003      	str	r3, [r0, #0]
 800fd98:	f04f 30ff 	mov.w	r0, #4294967295
 800fd9c:	bd38      	pop	{r3, r4, r5, pc}
 800fd9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fda0:	b112      	cbz	r2, 800fda8 <_raise_r+0x1e>
 800fda2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fda6:	b94b      	cbnz	r3, 800fdbc <_raise_r+0x32>
 800fda8:	4620      	mov	r0, r4
 800fdaa:	f000 f831 	bl	800fe10 <_getpid_r>
 800fdae:	462a      	mov	r2, r5
 800fdb0:	4601      	mov	r1, r0
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdb8:	f000 b818 	b.w	800fdec <_kill_r>
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d00a      	beq.n	800fdd6 <_raise_r+0x4c>
 800fdc0:	1c59      	adds	r1, r3, #1
 800fdc2:	d103      	bne.n	800fdcc <_raise_r+0x42>
 800fdc4:	2316      	movs	r3, #22
 800fdc6:	6003      	str	r3, [r0, #0]
 800fdc8:	2001      	movs	r0, #1
 800fdca:	e7e7      	b.n	800fd9c <_raise_r+0x12>
 800fdcc:	2400      	movs	r4, #0
 800fdce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fdd2:	4628      	mov	r0, r5
 800fdd4:	4798      	blx	r3
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	e7e0      	b.n	800fd9c <_raise_r+0x12>
	...

0800fddc <raise>:
 800fddc:	4b02      	ldr	r3, [pc, #8]	; (800fde8 <raise+0xc>)
 800fdde:	4601      	mov	r1, r0
 800fde0:	6818      	ldr	r0, [r3, #0]
 800fde2:	f7ff bfd2 	b.w	800fd8a <_raise_r>
 800fde6:	bf00      	nop
 800fde8:	200001f4 	.word	0x200001f4

0800fdec <_kill_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4d07      	ldr	r5, [pc, #28]	; (800fe0c <_kill_r+0x20>)
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	4608      	mov	r0, r1
 800fdf6:	4611      	mov	r1, r2
 800fdf8:	602b      	str	r3, [r5, #0]
 800fdfa:	f7f4 f977 	bl	80040ec <_kill>
 800fdfe:	1c43      	adds	r3, r0, #1
 800fe00:	d102      	bne.n	800fe08 <_kill_r+0x1c>
 800fe02:	682b      	ldr	r3, [r5, #0]
 800fe04:	b103      	cbz	r3, 800fe08 <_kill_r+0x1c>
 800fe06:	6023      	str	r3, [r4, #0]
 800fe08:	bd38      	pop	{r3, r4, r5, pc}
 800fe0a:	bf00      	nop
 800fe0c:	20000a10 	.word	0x20000a10

0800fe10 <_getpid_r>:
 800fe10:	f7f4 b964 	b.w	80040dc <_getpid>

0800fe14 <_init>:
 800fe14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe16:	bf00      	nop
 800fe18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe1a:	bc08      	pop	{r3}
 800fe1c:	469e      	mov	lr, r3
 800fe1e:	4770      	bx	lr

0800fe20 <_fini>:
 800fe20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe22:	bf00      	nop
 800fe24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe26:	bc08      	pop	{r3}
 800fe28:	469e      	mov	lr, r3
 800fe2a:	4770      	bx	lr
