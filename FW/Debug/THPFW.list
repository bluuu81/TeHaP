
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001164c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  080117e0  080117e0  000217e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801277c  0801277c  0003020c  2**0
                  CONTENTS
  4 .ARM          00000008  0801277c  0801277c  0002277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012784  08012784  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012784  08012784  00022784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012788  08012788  00022788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0801278c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  2000020c  08012998  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  08012998  00030a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022523  00000000  00000000  0003027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005266  00000000  00000000  000527a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e30  00000000  00000000  00057a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000176a  00000000  00000000  00059838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002865f  00000000  00000000  0005afa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000267b7  00000000  00000000  00083601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e921d  00000000  00000000  000a9db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009388  00000000  00000000  00192fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0019c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080117c4 	.word	0x080117c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	080117c4 	.word	0x080117c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	; 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9f1 	b.w	80012a8 <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f883 	bl	8000fe0 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f876 	bl	8000fe0 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f865 	bl	8000fe0 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f857 	bl	8000fe0 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b9a6 	b.w	80012a8 <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f83c 	bl	8000fe0 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdad 	bl	8000adc <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb23 	bl	80005f8 <__aeabi_dmul>
 8000fb2:	f7ff fdf9 	bl	8000ba8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff faa4 	bl	8000504 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb1a 	bl	80005f8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f95c 	bl	8000288 <__aeabi_dsub>
 8000fd0:	f7ff fdea 	bl	8000ba8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9e08      	ldr	r6, [sp, #32]
 8000fe6:	460d      	mov	r5, r1
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460f      	mov	r7, r1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d14a      	bne.n	8001086 <__udivmoddi4+0xa6>
 8000ff0:	428a      	cmp	r2, r1
 8000ff2:	4694      	mov	ip, r2
 8000ff4:	d965      	bls.n	80010c2 <__udivmoddi4+0xe2>
 8000ff6:	fab2 f382 	clz	r3, r2
 8000ffa:	b143      	cbz	r3, 800100e <__udivmoddi4+0x2e>
 8000ffc:	fa02 fc03 	lsl.w	ip, r2, r3
 8001000:	f1c3 0220 	rsb	r2, r3, #32
 8001004:	409f      	lsls	r7, r3
 8001006:	fa20 f202 	lsr.w	r2, r0, r2
 800100a:	4317      	orrs	r7, r2
 800100c:	409c      	lsls	r4, r3
 800100e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001012:	fa1f f58c 	uxth.w	r5, ip
 8001016:	fbb7 f1fe 	udiv	r1, r7, lr
 800101a:	0c22      	lsrs	r2, r4, #16
 800101c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001020:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001024:	fb01 f005 	mul.w	r0, r1, r5
 8001028:	4290      	cmp	r0, r2
 800102a:	d90a      	bls.n	8001042 <__udivmoddi4+0x62>
 800102c:	eb1c 0202 	adds.w	r2, ip, r2
 8001030:	f101 37ff 	add.w	r7, r1, #4294967295
 8001034:	f080 811c 	bcs.w	8001270 <__udivmoddi4+0x290>
 8001038:	4290      	cmp	r0, r2
 800103a:	f240 8119 	bls.w	8001270 <__udivmoddi4+0x290>
 800103e:	3902      	subs	r1, #2
 8001040:	4462      	add	r2, ip
 8001042:	1a12      	subs	r2, r2, r0
 8001044:	b2a4      	uxth	r4, r4
 8001046:	fbb2 f0fe 	udiv	r0, r2, lr
 800104a:	fb0e 2210 	mls	r2, lr, r0, r2
 800104e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001052:	fb00 f505 	mul.w	r5, r0, r5
 8001056:	42a5      	cmp	r5, r4
 8001058:	d90a      	bls.n	8001070 <__udivmoddi4+0x90>
 800105a:	eb1c 0404 	adds.w	r4, ip, r4
 800105e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001062:	f080 8107 	bcs.w	8001274 <__udivmoddi4+0x294>
 8001066:	42a5      	cmp	r5, r4
 8001068:	f240 8104 	bls.w	8001274 <__udivmoddi4+0x294>
 800106c:	4464      	add	r4, ip
 800106e:	3802      	subs	r0, #2
 8001070:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001074:	1b64      	subs	r4, r4, r5
 8001076:	2100      	movs	r1, #0
 8001078:	b11e      	cbz	r6, 8001082 <__udivmoddi4+0xa2>
 800107a:	40dc      	lsrs	r4, r3
 800107c:	2300      	movs	r3, #0
 800107e:	e9c6 4300 	strd	r4, r3, [r6]
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	428b      	cmp	r3, r1
 8001088:	d908      	bls.n	800109c <__udivmoddi4+0xbc>
 800108a:	2e00      	cmp	r6, #0
 800108c:	f000 80ed 	beq.w	800126a <__udivmoddi4+0x28a>
 8001090:	2100      	movs	r1, #0
 8001092:	e9c6 0500 	strd	r0, r5, [r6]
 8001096:	4608      	mov	r0, r1
 8001098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109c:	fab3 f183 	clz	r1, r3
 80010a0:	2900      	cmp	r1, #0
 80010a2:	d149      	bne.n	8001138 <__udivmoddi4+0x158>
 80010a4:	42ab      	cmp	r3, r5
 80010a6:	d302      	bcc.n	80010ae <__udivmoddi4+0xce>
 80010a8:	4282      	cmp	r2, r0
 80010aa:	f200 80f8 	bhi.w	800129e <__udivmoddi4+0x2be>
 80010ae:	1a84      	subs	r4, r0, r2
 80010b0:	eb65 0203 	sbc.w	r2, r5, r3
 80010b4:	2001      	movs	r0, #1
 80010b6:	4617      	mov	r7, r2
 80010b8:	2e00      	cmp	r6, #0
 80010ba:	d0e2      	beq.n	8001082 <__udivmoddi4+0xa2>
 80010bc:	e9c6 4700 	strd	r4, r7, [r6]
 80010c0:	e7df      	b.n	8001082 <__udivmoddi4+0xa2>
 80010c2:	b902      	cbnz	r2, 80010c6 <__udivmoddi4+0xe6>
 80010c4:	deff      	udf	#255	; 0xff
 80010c6:	fab2 f382 	clz	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 8090 	bne.w	80011f0 <__udivmoddi4+0x210>
 80010d0:	1a8a      	subs	r2, r1, r2
 80010d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d6:	fa1f fe8c 	uxth.w	lr, ip
 80010da:	2101      	movs	r1, #1
 80010dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80010e0:	fb07 2015 	mls	r0, r7, r5, r2
 80010e4:	0c22      	lsrs	r2, r4, #16
 80010e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80010ea:	fb0e f005 	mul.w	r0, lr, r5
 80010ee:	4290      	cmp	r0, r2
 80010f0:	d908      	bls.n	8001104 <__udivmoddi4+0x124>
 80010f2:	eb1c 0202 	adds.w	r2, ip, r2
 80010f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80010fa:	d202      	bcs.n	8001102 <__udivmoddi4+0x122>
 80010fc:	4290      	cmp	r0, r2
 80010fe:	f200 80cb 	bhi.w	8001298 <__udivmoddi4+0x2b8>
 8001102:	4645      	mov	r5, r8
 8001104:	1a12      	subs	r2, r2, r0
 8001106:	b2a4      	uxth	r4, r4
 8001108:	fbb2 f0f7 	udiv	r0, r2, r7
 800110c:	fb07 2210 	mls	r2, r7, r0, r2
 8001110:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001114:	fb0e fe00 	mul.w	lr, lr, r0
 8001118:	45a6      	cmp	lr, r4
 800111a:	d908      	bls.n	800112e <__udivmoddi4+0x14e>
 800111c:	eb1c 0404 	adds.w	r4, ip, r4
 8001120:	f100 32ff 	add.w	r2, r0, #4294967295
 8001124:	d202      	bcs.n	800112c <__udivmoddi4+0x14c>
 8001126:	45a6      	cmp	lr, r4
 8001128:	f200 80bb 	bhi.w	80012a2 <__udivmoddi4+0x2c2>
 800112c:	4610      	mov	r0, r2
 800112e:	eba4 040e 	sub.w	r4, r4, lr
 8001132:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001136:	e79f      	b.n	8001078 <__udivmoddi4+0x98>
 8001138:	f1c1 0720 	rsb	r7, r1, #32
 800113c:	408b      	lsls	r3, r1
 800113e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001142:	ea4c 0c03 	orr.w	ip, ip, r3
 8001146:	fa05 f401 	lsl.w	r4, r5, r1
 800114a:	fa20 f307 	lsr.w	r3, r0, r7
 800114e:	40fd      	lsrs	r5, r7
 8001150:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001154:	4323      	orrs	r3, r4
 8001156:	fbb5 f8f9 	udiv	r8, r5, r9
 800115a:	fa1f fe8c 	uxth.w	lr, ip
 800115e:	fb09 5518 	mls	r5, r9, r8, r5
 8001162:	0c1c      	lsrs	r4, r3, #16
 8001164:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001168:	fb08 f50e 	mul.w	r5, r8, lr
 800116c:	42a5      	cmp	r5, r4
 800116e:	fa02 f201 	lsl.w	r2, r2, r1
 8001172:	fa00 f001 	lsl.w	r0, r0, r1
 8001176:	d90b      	bls.n	8001190 <__udivmoddi4+0x1b0>
 8001178:	eb1c 0404 	adds.w	r4, ip, r4
 800117c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001180:	f080 8088 	bcs.w	8001294 <__udivmoddi4+0x2b4>
 8001184:	42a5      	cmp	r5, r4
 8001186:	f240 8085 	bls.w	8001294 <__udivmoddi4+0x2b4>
 800118a:	f1a8 0802 	sub.w	r8, r8, #2
 800118e:	4464      	add	r4, ip
 8001190:	1b64      	subs	r4, r4, r5
 8001192:	b29d      	uxth	r5, r3
 8001194:	fbb4 f3f9 	udiv	r3, r4, r9
 8001198:	fb09 4413 	mls	r4, r9, r3, r4
 800119c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80011a4:	45a6      	cmp	lr, r4
 80011a6:	d908      	bls.n	80011ba <__udivmoddi4+0x1da>
 80011a8:	eb1c 0404 	adds.w	r4, ip, r4
 80011ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80011b0:	d26c      	bcs.n	800128c <__udivmoddi4+0x2ac>
 80011b2:	45a6      	cmp	lr, r4
 80011b4:	d96a      	bls.n	800128c <__udivmoddi4+0x2ac>
 80011b6:	3b02      	subs	r3, #2
 80011b8:	4464      	add	r4, ip
 80011ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011be:	fba3 9502 	umull	r9, r5, r3, r2
 80011c2:	eba4 040e 	sub.w	r4, r4, lr
 80011c6:	42ac      	cmp	r4, r5
 80011c8:	46c8      	mov	r8, r9
 80011ca:	46ae      	mov	lr, r5
 80011cc:	d356      	bcc.n	800127c <__udivmoddi4+0x29c>
 80011ce:	d053      	beq.n	8001278 <__udivmoddi4+0x298>
 80011d0:	b156      	cbz	r6, 80011e8 <__udivmoddi4+0x208>
 80011d2:	ebb0 0208 	subs.w	r2, r0, r8
 80011d6:	eb64 040e 	sbc.w	r4, r4, lr
 80011da:	fa04 f707 	lsl.w	r7, r4, r7
 80011de:	40ca      	lsrs	r2, r1
 80011e0:	40cc      	lsrs	r4, r1
 80011e2:	4317      	orrs	r7, r2
 80011e4:	e9c6 7400 	strd	r7, r4, [r6]
 80011e8:	4618      	mov	r0, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011f0:	f1c3 0120 	rsb	r1, r3, #32
 80011f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80011f8:	fa20 f201 	lsr.w	r2, r0, r1
 80011fc:	fa25 f101 	lsr.w	r1, r5, r1
 8001200:	409d      	lsls	r5, r3
 8001202:	432a      	orrs	r2, r5
 8001204:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001208:	fa1f fe8c 	uxth.w	lr, ip
 800120c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001210:	fb07 1510 	mls	r5, r7, r0, r1
 8001214:	0c11      	lsrs	r1, r2, #16
 8001216:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800121a:	fb00 f50e 	mul.w	r5, r0, lr
 800121e:	428d      	cmp	r5, r1
 8001220:	fa04 f403 	lsl.w	r4, r4, r3
 8001224:	d908      	bls.n	8001238 <__udivmoddi4+0x258>
 8001226:	eb1c 0101 	adds.w	r1, ip, r1
 800122a:	f100 38ff 	add.w	r8, r0, #4294967295
 800122e:	d22f      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001230:	428d      	cmp	r5, r1
 8001232:	d92d      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001234:	3802      	subs	r0, #2
 8001236:	4461      	add	r1, ip
 8001238:	1b49      	subs	r1, r1, r5
 800123a:	b292      	uxth	r2, r2
 800123c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001240:	fb07 1115 	mls	r1, r7, r5, r1
 8001244:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001248:	fb05 f10e 	mul.w	r1, r5, lr
 800124c:	4291      	cmp	r1, r2
 800124e:	d908      	bls.n	8001262 <__udivmoddi4+0x282>
 8001250:	eb1c 0202 	adds.w	r2, ip, r2
 8001254:	f105 38ff 	add.w	r8, r5, #4294967295
 8001258:	d216      	bcs.n	8001288 <__udivmoddi4+0x2a8>
 800125a:	4291      	cmp	r1, r2
 800125c:	d914      	bls.n	8001288 <__udivmoddi4+0x2a8>
 800125e:	3d02      	subs	r5, #2
 8001260:	4462      	add	r2, ip
 8001262:	1a52      	subs	r2, r2, r1
 8001264:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001268:	e738      	b.n	80010dc <__udivmoddi4+0xfc>
 800126a:	4631      	mov	r1, r6
 800126c:	4630      	mov	r0, r6
 800126e:	e708      	b.n	8001082 <__udivmoddi4+0xa2>
 8001270:	4639      	mov	r1, r7
 8001272:	e6e6      	b.n	8001042 <__udivmoddi4+0x62>
 8001274:	4610      	mov	r0, r2
 8001276:	e6fb      	b.n	8001070 <__udivmoddi4+0x90>
 8001278:	4548      	cmp	r0, r9
 800127a:	d2a9      	bcs.n	80011d0 <__udivmoddi4+0x1f0>
 800127c:	ebb9 0802 	subs.w	r8, r9, r2
 8001280:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001284:	3b01      	subs	r3, #1
 8001286:	e7a3      	b.n	80011d0 <__udivmoddi4+0x1f0>
 8001288:	4645      	mov	r5, r8
 800128a:	e7ea      	b.n	8001262 <__udivmoddi4+0x282>
 800128c:	462b      	mov	r3, r5
 800128e:	e794      	b.n	80011ba <__udivmoddi4+0x1da>
 8001290:	4640      	mov	r0, r8
 8001292:	e7d1      	b.n	8001238 <__udivmoddi4+0x258>
 8001294:	46d0      	mov	r8, sl
 8001296:	e77b      	b.n	8001190 <__udivmoddi4+0x1b0>
 8001298:	3d02      	subs	r5, #2
 800129a:	4462      	add	r2, ip
 800129c:	e732      	b.n	8001104 <__udivmoddi4+0x124>
 800129e:	4608      	mov	r0, r1
 80012a0:	e70a      	b.n	80010b8 <__udivmoddi4+0xd8>
 80012a2:	4464      	add	r4, ip
 80012a4:	3802      	subs	r0, #2
 80012a6:	e742      	b.n	800112e <__udivmoddi4+0x14e>

080012a8 <__aeabi_idiv0>:
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <Crc16_up>:
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "EEPROM.h"

uint16_t Crc16_up(uint16_t crc, uint8_t data)			// liczenie CRC
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	460a      	mov	r2, r1
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	4613      	mov	r3, r2
 80012ba:	717b      	strb	r3, [r7, #5]
	uint8_t x = crc >> 8 ^ data;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	4053      	eors	r3, r2
 80012c8:	73fb      	strb	r3, [r7, #15]
	x ^= x>>4;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	4053      	eors	r3, r2
 80012d4:	73fb      	strb	r3, [r7, #15]
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	031b      	lsls	r3, r3, #12
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4053      	eors	r3, r2
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4053      	eors	r3, r2
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	4053      	eors	r3, r2
 80012fe:	b21b      	sxth	r3, r3
 8001300:	80fb      	strh	r3, [r7, #6]
	return crc;
 8001302:	88fb      	ldrh	r3, [r7, #6]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <Calc_config_crc>:

void Calc_config_crc(void)		// aktualizacja CRC struktury config
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
	config.checksum = 0xFFFF;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <Calc_config_crc+0x58>)
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	uint8_t *p = (uint8_t*)&config;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <Calc_config_crc+0x58>)
 800132a:	60fb      	str	r3, [r7, #12]
	//printf("calc config crc, size of config: %i \r\n",sizeof(config));
	//for(int i=0; i<sizeof(config)-2; i++) config.checksum = Crc16_up(config.checksum, *p++);

	 uint16_t chk = 0xFFFF;
 800132c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001330:	817b      	strh	r3, [r7, #10]
	    for(int i=0; i<sizeof(config)-2; i++) chk = Crc16_up(chk, *p++);
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	e00d      	b.n	8001354 <Calc_config_crc+0x44>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	60fa      	str	r2, [r7, #12]
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ffb1 	bl	80012ac <Crc16_up>
 800134a:	4603      	mov	r3, r0
 800134c:	817b      	strh	r3, [r7, #10]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3301      	adds	r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b37      	cmp	r3, #55	; 0x37
 8001358:	d9ee      	bls.n	8001338 <Calc_config_crc+0x28>
	    //printf("calc config crc: 0x%X \r\n",chk);
	    config.checksum=chk;
 800135a:	4b03      	ldr	r3, [pc, #12]	; (8001368 <Calc_config_crc+0x58>)
 800135c:	897a      	ldrh	r2, [r7, #10]
 800135e:	871a      	strh	r2, [r3, #56]	; 0x38

}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000890 	.word	0x20000890

0800136c <Flash_write_block>:

#define ADDR_FLASH_PAGE_0   ((uint32_t)0x08000000) /* Base @ of Page 0, 2 Kbytes */
#define FLASH_PAGE_ADDRESS 	(ADDR_FLASH_PAGE_0 | (FLASH_PAGE_SIZE * USE_FLASH_PAGE))

uint8_t Flash_write_block(uint32_t blk, uint8_t *buff, uint32_t len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
	//WDR();
	HAL_FLASH_Unlock();
 800137c:	f007 f9d6 	bl	800872c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <Flash_write_block+0xd4>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a2e      	ldr	r2, [pc, #184]	; (8001440 <Flash_write_block+0xd4>)
 8001386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <Flash_write_block+0xd4>)
 800138e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001392:	611a      	str	r2, [r3, #16]
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001394:	2300      	movs	r3, #0
 8001396:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.Banks       = FLASH_BANK_1;
 8001398:	2301      	movs	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Page        = blk;                                  // 2kb page
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbPages     = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 80013a4:	f107 0214 	add.w	r2, r7, #20
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f007 faa2 	bl	80088f8 <HAL_FLASHEx_Erase>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <Flash_write_block+0x60>
	{
		HAL_FLASH_Lock();			// blad kasowania
 80013ba:	f007 f9d9 	bl	8008770 <HAL_FLASH_Lock>
		printf("Erase error at %u\r\n", (int)blk);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4820      	ldr	r0, [pc, #128]	; (8001444 <Flash_write_block+0xd8>)
 80013c4:	f00d fd54 	bl	800ee70 <iprintf>
		return 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e035      	b.n	8001438 <Flash_write_block+0xcc>
	}
    blk *= FLASH_PAGE_SIZE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	02db      	lsls	r3, r3, #11
 80013d0:	60fb      	str	r3, [r7, #12]
    blk += ADDR_FLASH_PAGE_0;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013d8:	60fb      	str	r3, [r7, #12]
	uint64_t data64;
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
 80013de:	e022      	b.n	8001426 <Flash_write_block+0xba>
    {
        data64 = *(uint64_t*)buff;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        buff += 8;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3308      	adds	r3, #8
 80013ee:	60bb      	str	r3, [r7, #8]
        //printf("WRITE FLASH ADDR 0x%X \r\n",blk);
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 80013f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f2:	00da      	lsls	r2, r3, #3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	18d1      	adds	r1, r2, r3
 80013f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013fc:	2000      	movs	r0, #0
 80013fe:	f007 f929 	bl	8008654 <HAL_FLASH_Program>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00b      	beq.n	8001420 <Flash_write_block+0xb4>
        {
            HAL_FLASH_Lock();
 8001408:	f007 f9b2 	bl	8008770 <HAL_FLASH_Lock>
           // HAL_IWDG_Refresh(&hiwdg);
            printf("Programming error at %X\r\n",(unsigned int)(8*i + blk));
 800140c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140e:	00da      	lsls	r2, r3, #3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	4619      	mov	r1, r3
 8001416:	480c      	ldr	r0, [pc, #48]	; (8001448 <Flash_write_block+0xdc>)
 8001418:	f00d fd2a 	bl	800ee70 <iprintf>
            return 1;                               // blad
 800141c:	2301      	movs	r3, #1
 800141e:	e00b      	b.n	8001438 <Flash_write_block+0xcc>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 8001420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001422:	3301      	adds	r3, #1
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	3301      	adds	r3, #1
 800142c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800142e:	429a      	cmp	r2, r3
 8001430:	d3d6      	bcc.n	80013e0 <Flash_write_block+0x74>
        }
    }
	HAL_FLASH_Lock();
 8001432:	f007 f99d 	bl	8008770 <HAL_FLASH_Lock>
	//WDR();
	return 0;										// OK
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3738      	adds	r7, #56	; 0x38
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40022000 	.word	0x40022000
 8001444:	080117e0 	.word	0x080117e0
 8001448:	080117f4 	.word	0x080117f4

0800144c <Flash_read>:

void Flash_read(uint32_t adr, uint8_t *data, uint32_t size)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
    uint8_t *psrc = (uint8_t*)(ADDR_FLASH_PAGE_0 + adr);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800145e:	617b      	str	r3, [r7, #20]
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	e00a      	b.n	800147c <Flash_read+0x30>
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	617a      	str	r2, [r7, #20]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	440a      	add	r2, r1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	7013      	strb	r3, [r2, #0]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	3301      	adds	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	429a      	cmp	r2, r3
 8001482:	d3f0      	bcc.n	8001466 <Flash_read+0x1a>
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <FLASH_write_block>:
////////////////////////////////////////////////////////////////////////////////////////////////////

#define USE_FLASH_PAGE      126

uint8_t FLASH_write_block(uint32_t adr, uint8_t *buff, uint32_t len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
    uint8_t err;
    adr &= 1;                   // adr = 0 -> page 62, adr = 1 -> page 63
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
    adr += USE_FLASH_PAGE;      // adr = page number
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	337e      	adds	r3, #126	; 0x7e
 80014aa:	60fb      	str	r3, [r7, #12]
    for(int i=0; i<4; ++i)
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	e00c      	b.n	80014cc <FLASH_write_block+0x3a>
    {
        err =  Flash_write_block(adr, buff, len);
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff ff58 	bl	800136c <Flash_write_block>
 80014bc:	4603      	mov	r3, r0
 80014be:	75fb      	strb	r3, [r7, #23]
        if(err == 0) break;
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <FLASH_write_block+0x42>
    for(int i=0; i<4; ++i)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	3301      	adds	r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	ddef      	ble.n	80014b2 <FLASH_write_block+0x20>
 80014d2:	e000      	b.n	80014d6 <FLASH_write_block+0x44>
        if(err == 0) break;
 80014d4:	bf00      	nop
    }
    return err;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <FLASH_read_block>:

void FLASH_read_block(uint32_t adr, uint8_t *data, uint32_t size)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
    adr &= 1;                   // adr = 0 -> page 62, adr = 1 -> page 63
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
    adr *= FLASH_PAGE_SIZE;     // adr = page number
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	02db      	lsls	r3, r3, #11
 80014f8:	60fb      	str	r3, [r7, #12]
    adr += (FLASH_PAGE_SIZE * USE_FLASH_PAGE);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f503 337c 	add.w	r3, r3, #258048	; 0x3f000
 8001500:	60fb      	str	r3, [r7, #12]
    //printf("READ FLASH ADDR 0x%X \r\n",adr);
    Flash_read(adr, data, size);
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff ffa0 	bl	800144c <Flash_read>
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <EEPROM_Save_config>:

uint8_t EEPROM_Save_config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
    uint8_t err = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	71fb      	strb	r3, [r7, #7]
    uint16_t oldcrc = config.checksum;
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <EEPROM_Save_config+0x60>)
 8001520:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001524:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	4313      	orrs	r3, r2
 800152c:	80bb      	strh	r3, [r7, #4]
    Calc_config_crc();
 800152e:	f7ff feef 	bl	8001310 <Calc_config_crc>
    if(config.checksum != oldcrc)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <EEPROM_Save_config+0x60>)
 8001534:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001536:	b29b      	uxth	r3, r3
 8001538:	88ba      	ldrh	r2, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	d015      	beq.n	800156a <EEPROM_Save_config+0x56>
    {
        uint8_t *p = (uint8_t*)&config;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <EEPROM_Save_config+0x60>)
 8001540:	603b      	str	r3, [r7, #0]
        err  = FLASH_write_block(0, p, sizeof(config));     // zapisz do 1 kopii
 8001542:	223a      	movs	r2, #58	; 0x3a
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff ffa3 	bl	8001492 <FLASH_write_block>
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
 8001550:	223a      	movs	r2, #58	; 0x3a
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	2001      	movs	r0, #1
 8001556:	f7ff ff9c 	bl	8001492 <FLASH_write_block>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4313      	orrs	r3, r2
 8001562:	71fb      	strb	r3, [r7, #7]
        err++;
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	3301      	adds	r3, #1
 8001568:	71fb      	strb	r3, [r7, #7]
    }
    return err;         // 0=NotNeed, 1=OK, 2=blad
 800156a:	79fb      	ldrb	r3, [r7, #7]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000890 	.word	0x20000890

08001578 <EEPROM_Load_defaults>:

void EEPROM_Load_defaults(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	memset((uint8_t*)&config, 0, sizeof(config));
 800157c:	223a      	movs	r2, #58	; 0x3a
 800157e:	2100      	movs	r1, #0
 8001580:	482b      	ldr	r0, [pc, #172]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 8001582:	f00d fdbb 	bl	800f0fc <memset>

	config.version = CONFIG_VERSION;
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 8001588:	2200      	movs	r2, #0
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
	config.bat_scale = 0.0505f;
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 8001596:	3302      	adds	r3, #2
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <EEPROM_Load_defaults+0xbc>)
 800159a:	601a      	str	r2, [r3, #0]
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	f062 021b 	orn	r2, r2, #27
 80015a4:	719a      	strb	r2, [r3, #6]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f042 020c 	orr.w	r2, r2, #12
 80015ac:	71da      	strb	r2, [r3, #7]
	config.TMP117_t_offset=0;
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
	config.SHT3_t_offset=0;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
	config.SHT3_h_offset=0;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
	config.MS8607_t_offset=0;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
	config.MS8607_h_offset=0;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
	config.MS8607_p_offset=0;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
	config.BME280_t_offset=0;
 80015de:	4b14      	ldr	r3, [pc, #80]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
	config.BME280_h_offset=0;
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
	config.BME280_p_offset=0;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
	config.DPS368_t_offset=0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
	config.DPS368_p_offset=0;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	631a      	str	r2, [r3, #48]	; 0x30

	config.TMP117_config=0;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	config.SHT3_config=0;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	config.DPS368_config=0;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	config.MS8607_config=0;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <EEPROM_Load_defaults+0xb8>)
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37


	Calc_config_crc();
 8001626:	f7ff fe73 	bl	8001310 <Calc_config_crc>

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000890 	.word	0x20000890
 8001634:	3d4ed917 	.word	0x3d4ed917

08001638 <EEPROM_Load_config>:

uint8_t EEPROM_Load_config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
    uint32_t eepok = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
    uint32_t len = sizeof(config);
 8001642:	233a      	movs	r3, #58	; 0x3a
 8001644:	603b      	str	r3, [r7, #0]
    uint8_t *p = (uint8_t*)&config;
 8001646:	4b52      	ldr	r3, [pc, #328]	; (8001790 <EEPROM_Load_config+0x158>)
 8001648:	613b      	str	r3, [r7, #16]
    FLASH_read_block(0, p, len);                                // odczyt pierwszej kopii
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff ff46 	bl	80014e0 <FLASH_read_block>
    //printf("load config crc: size of config: %i",sizeof(config));
    uint16_t chk = 0xFFFF;
 8001654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001658:	81fb      	strh	r3, [r7, #14]
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	e00d      	b.n	800167c <EEPROM_Load_config+0x44>
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	613a      	str	r2, [r7, #16]
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe1d 	bl	80012ac <Crc16_up>
 8001672:	4603      	mov	r3, r0
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	1e9a      	subs	r2, r3, #2
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	429a      	cmp	r2, r3
 8001684:	d8ec      	bhi.n	8001660 <EEPROM_Load_config+0x28>
    //printf("read crc1: 0x%X \r\n",chk);
    if(chk == config.checksum) eepok |= 1;                      // zaznacz ze jest ok
 8001686:	4b42      	ldr	r3, [pc, #264]	; (8001790 <EEPROM_Load_config+0x158>)
 8001688:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800168a:	b29b      	uxth	r3, r3
 800168c:	89fa      	ldrh	r2, [r7, #14]
 800168e:	429a      	cmp	r2, r3
 8001690:	d103      	bne.n	800169a <EEPROM_Load_config+0x62>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	617b      	str	r3, [r7, #20]

    p = (uint8_t*)&config;
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <EEPROM_Load_config+0x158>)
 800169c:	613b      	str	r3, [r7, #16]
    FLASH_read_block(1, p, len);                                // odczyt drugiej kopii
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	6939      	ldr	r1, [r7, #16]
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff ff1c 	bl	80014e0 <FLASH_read_block>
    chk = 0xFFFF;
 80016a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ac:	81fb      	strh	r3, [r7, #14]
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	e00d      	b.n	80016d0 <EEPROM_Load_config+0x98>
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	613a      	str	r2, [r7, #16]
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fdf3 	bl	80012ac <Crc16_up>
 80016c6:	4603      	mov	r3, r0
 80016c8:	81fb      	strh	r3, [r7, #14]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3301      	adds	r3, #1
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	1e9a      	subs	r2, r3, #2
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d8ec      	bhi.n	80016b4 <EEPROM_Load_config+0x7c>
    //printf("read crc2: 0x%X \r\n",chk);
    //printf("curr crc: 0x%X \r\n",config.checksum);
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <EEPROM_Load_config+0x158>)
 80016dc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80016de:	b29b      	uxth	r3, r3
 80016e0:	89fa      	ldrh	r2, [r7, #14]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d103      	bne.n	80016ee <EEPROM_Load_config+0xb6>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	617b      	str	r3, [r7, #20]
    //printf("config chk: %X   eepok:%i \r\n", config.checksum, eepok);
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <EEPROM_Load_config+0x158>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d001      	beq.n	80016fc <EEPROM_Load_config+0xc4>
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]

    p = (uint8_t*)&config;
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <EEPROM_Load_config+0x158>)
 80016fe:	613b      	str	r3, [r7, #16]
    switch(eepok)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d02d      	beq.n	8001762 <EEPROM_Load_config+0x12a>
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d83c      	bhi.n	8001786 <EEPROM_Load_config+0x14e>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <EEPROM_Load_config+0xe2>
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d010      	beq.n	800173a <EEPROM_Load_config+0x102>
 8001718:	e035      	b.n	8001786 <EEPROM_Load_config+0x14e>
    {
        case 0:                                                 // obie kopie zwalone
            EEPROM_Load_defaults();
 800171a:	f7ff ff2d 	bl	8001578 <EEPROM_Load_defaults>
            printf("config error, restoring to defaults \r\n");
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <EEPROM_Load_config+0x15c>)
 8001720:	f00d fc0c 	bl	800ef3c <puts>
            eepok = EEPROM_Save_config();
 8001724:	f7ff fef6 	bl	8001514 <EEPROM_Save_config>
 8001728:	4603      	mov	r3, r0
 800172a:	617b      	str	r3, [r7, #20]

            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d901      	bls.n	8001736 <EEPROM_Load_config+0xfe>
 8001732:	2303      	movs	r3, #3
 8001734:	e028      	b.n	8001788 <EEPROM_Load_config+0x150>
 8001736:	2302      	movs	r3, #2
 8001738:	e026      	b.n	8001788 <EEPROM_Load_config+0x150>
            break;
        case 1:                                                 // 1 ok, 2 zwalona
            FLASH_read_block(0, p, len);
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fece 	bl	80014e0 <FLASH_read_block>
            printf("config bank 2 error,copying bank 1 to bank 2 \r\n");
 8001744:	4814      	ldr	r0, [pc, #80]	; (8001798 <EEPROM_Load_config+0x160>)
 8001746:	f00d fbf9 	bl	800ef3c <puts>
            eepok = FLASH_write_block(1, p, len);               // przepisz do 2 kopii
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	6939      	ldr	r1, [r7, #16]
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff fe9f 	bl	8001492 <FLASH_write_block>
 8001754:	4603      	mov	r3, r0
 8001756:	617b      	str	r3, [r7, #20]
            if(eepok) return 3;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d010      	beq.n	8001780 <EEPROM_Load_config+0x148>
 800175e:	2303      	movs	r3, #3
 8001760:	e012      	b.n	8001788 <EEPROM_Load_config+0x150>
            break;
        case 2:                                                 // 2 ok, 1 zwalona
            eepok = FLASH_write_block(0, p, len);               // przepisz do 1 kopii
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	6939      	ldr	r1, [r7, #16]
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fe93 	bl	8001492 <FLASH_write_block>
 800176c:	4603      	mov	r3, r0
 800176e:	617b      	str	r3, [r7, #20]
            printf("config bank 1 error,copying bank 2 to bank 1 \r\n");
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <EEPROM_Load_config+0x164>)
 8001772:	f00d fbe3 	bl	800ef3c <puts>
            if(eepok) return 3;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <EEPROM_Load_config+0x14c>
 800177c:	2303      	movs	r3, #3
 800177e:	e003      	b.n	8001788 <EEPROM_Load_config+0x150>
            break;
 8001780:	bf00      	nop
 8001782:	e000      	b.n	8001786 <EEPROM_Load_config+0x14e>
            break;
 8001784:	bf00      	nop
    }
    return 0;                                                   // config OK
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000890 	.word	0x20000890
 8001794:	08011810 	.word	0x08011810
 8001798:	08011838 	.word	0x08011838
 800179c:	08011868 	.word	0x08011868

080017a0 <EEPROM_Print_config>:


void EEPROM_Print_config(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	printf("================================= \r\n");
 80017a4:	4858      	ldr	r0, [pc, #352]	; (8001908 <EEPROM_Print_config+0x168>)
 80017a6:	f00d fbc9 	bl	800ef3c <puts>
	printf("Config version: %i \r\n", config.version);
 80017aa:	4b58      	ldr	r3, [pc, #352]	; (800190c <EEPROM_Print_config+0x16c>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4619      	mov	r1, r3
 80017b2:	4857      	ldr	r0, [pc, #348]	; (8001910 <EEPROM_Print_config+0x170>)
 80017b4:	f00d fb5c 	bl	800ee70 <iprintf>
	printf("Battery scale: %f \r\n", config.bat_scale);
 80017b8:	4b54      	ldr	r3, [pc, #336]	; (800190c <EEPROM_Print_config+0x16c>)
 80017ba:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fec2 	bl	8000548 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4852      	ldr	r0, [pc, #328]	; (8001914 <EEPROM_Print_config+0x174>)
 80017ca:	f00d fb51 	bl	800ee70 <iprintf>
	printf("Low Batt alarm: %i \r\n", config.batt_alarm);
 80017ce:	4b4f      	ldr	r3, [pc, #316]	; (800190c <EEPROM_Print_config+0x16c>)
 80017d0:	88db      	ldrh	r3, [r3, #6]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4619      	mov	r1, r3
 80017d6:	4850      	ldr	r0, [pc, #320]	; (8001918 <EEPROM_Print_config+0x178>)
 80017d8:	f00d fb4a 	bl	800ee70 <iprintf>
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);
 80017dc:	4b4b      	ldr	r3, [pc, #300]	; (800190c <EEPROM_Print_config+0x16c>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe feb1 	bl	8000548 <__aeabi_f2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	484c      	ldr	r0, [pc, #304]	; (800191c <EEPROM_Print_config+0x17c>)
 80017ec:	f00d fb40 	bl	800ee70 <iprintf>
	printf("SHT3 temp offset: %f \r\n", config.SHT3_t_offset);
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <EEPROM_Print_config+0x16c>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fea7 	bl	8000548 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4848      	ldr	r0, [pc, #288]	; (8001920 <EEPROM_Print_config+0x180>)
 8001800:	f00d fb36 	bl	800ee70 <iprintf>
	printf("SHT3 hum offset: %f \r\n", config.SHT3_h_offset);
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <EEPROM_Print_config+0x16c>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe9d 	bl	8000548 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4844      	ldr	r0, [pc, #272]	; (8001924 <EEPROM_Print_config+0x184>)
 8001814:	f00d fb2c 	bl	800ee70 <iprintf>
	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <EEPROM_Print_config+0x16c>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe93 	bl	8000548 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4840      	ldr	r0, [pc, #256]	; (8001928 <EEPROM_Print_config+0x188>)
 8001828:	f00d fb22 	bl	800ee70 <iprintf>
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <EEPROM_Print_config+0x16c>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe89 	bl	8000548 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	483c      	ldr	r0, [pc, #240]	; (800192c <EEPROM_Print_config+0x18c>)
 800183c:	f00d fb18 	bl	800ee70 <iprintf>
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <EEPROM_Print_config+0x16c>)
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe7f 	bl	8000548 <__aeabi_f2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4838      	ldr	r0, [pc, #224]	; (8001930 <EEPROM_Print_config+0x190>)
 8001850:	f00d fb0e 	bl	800ee70 <iprintf>
	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <EEPROM_Print_config+0x16c>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe75 	bl	8000548 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4834      	ldr	r0, [pc, #208]	; (8001934 <EEPROM_Print_config+0x194>)
 8001864:	f00d fb04 	bl	800ee70 <iprintf>
	printf("BME280 hum offset: %f \r\n", config.BME280_h_offset);
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <EEPROM_Print_config+0x16c>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe6b 	bl	8000548 <__aeabi_f2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4830      	ldr	r0, [pc, #192]	; (8001938 <EEPROM_Print_config+0x198>)
 8001878:	f00d fafa 	bl	800ee70 <iprintf>
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
 800187c:	4b23      	ldr	r3, [pc, #140]	; (800190c <EEPROM_Print_config+0x16c>)
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe61 	bl	8000548 <__aeabi_f2d>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	482c      	ldr	r0, [pc, #176]	; (800193c <EEPROM_Print_config+0x19c>)
 800188c:	f00d faf0 	bl	800ee70 <iprintf>
	printf("DPS368 temp offset: %f \r\n", config.DPS368_t_offset);
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <EEPROM_Print_config+0x16c>)
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe57 	bl	8000548 <__aeabi_f2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4828      	ldr	r0, [pc, #160]	; (8001940 <EEPROM_Print_config+0x1a0>)
 80018a0:	f00d fae6 	bl	800ee70 <iprintf>
	printf("DPS368 press ofset: %f \r\n \r\n", config.DPS368_p_offset);
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <EEPROM_Print_config+0x16c>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe4d 	bl	8000548 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4824      	ldr	r0, [pc, #144]	; (8001944 <EEPROM_Print_config+0x1a4>)
 80018b4:	f00d fadc 	bl	800ee70 <iprintf>

	printf("TMP117 config data: %i \r\n", 	config.TMP117_config);
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <EEPROM_Print_config+0x16c>)
 80018ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018be:	4619      	mov	r1, r3
 80018c0:	4821      	ldr	r0, [pc, #132]	; (8001948 <EEPROM_Print_config+0x1a8>)
 80018c2:	f00d fad5 	bl	800ee70 <iprintf>
	printf("SHT3 config data: %i \r\n", config.SHT3_config);
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <EEPROM_Print_config+0x16c>)
 80018c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018cc:	4619      	mov	r1, r3
 80018ce:	481f      	ldr	r0, [pc, #124]	; (800194c <EEPROM_Print_config+0x1ac>)
 80018d0:	f00d face 	bl	800ee70 <iprintf>
	printf("DPS368 config data: %i \r\n", config.DPS368_config);
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <EEPROM_Print_config+0x16c>)
 80018d6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80018da:	4619      	mov	r1, r3
 80018dc:	481c      	ldr	r0, [pc, #112]	; (8001950 <EEPROM_Print_config+0x1b0>)
 80018de:	f00d fac7 	bl	800ee70 <iprintf>
	printf("MS8607 config data: %i \r\n", config.MS8607_config);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <EEPROM_Print_config+0x16c>)
 80018e4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80018e8:	4619      	mov	r1, r3
 80018ea:	481a      	ldr	r0, [pc, #104]	; (8001954 <EEPROM_Print_config+0x1b4>)
 80018ec:	f00d fac0 	bl	800ee70 <iprintf>
	printf("CHECKSUM: 0x%4X \r\n", config.checksum);
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <EEPROM_Print_config+0x16c>)
 80018f2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	4817      	ldr	r0, [pc, #92]	; (8001958 <EEPROM_Print_config+0x1b8>)
 80018fa:	f00d fab9 	bl	800ee70 <iprintf>
	printf("================================= \r\n");
 80018fe:	4802      	ldr	r0, [pc, #8]	; (8001908 <EEPROM_Print_config+0x168>)
 8001900:	f00d fb1c 	bl	800ef3c <puts>




}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08011898 	.word	0x08011898
 800190c:	20000890 	.word	0x20000890
 8001910:	080118bc 	.word	0x080118bc
 8001914:	080118d4 	.word	0x080118d4
 8001918:	080118ec 	.word	0x080118ec
 800191c:	08011904 	.word	0x08011904
 8001920:	08011920 	.word	0x08011920
 8001924:	08011938 	.word	0x08011938
 8001928:	08011950 	.word	0x08011950
 800192c:	0801196c 	.word	0x0801196c
 8001930:	08011988 	.word	0x08011988
 8001934:	080119a4 	.word	0x080119a4
 8001938:	080119c0 	.word	0x080119c0
 800193c:	080119dc 	.word	0x080119dc
 8001940:	080119f8 	.word	0x080119f8
 8001944:	08011a14 	.word	0x08011a14
 8001948:	08011a34 	.word	0x08011a34
 800194c:	08011a50 	.word	0x08011a50
 8001950:	08011a68 	.word	0x08011a68
 8001954:	08011a84 	.word	0x08011a84
 8001958:	08011aa0 	.word	0x08011aa0

0800195c <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 8001960:	217f      	movs	r1, #127	; 0x7f
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <ADC_DMA_Start+0x20>)
 8001964:	f006 f88a 	bl	8007a7c <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 8001968:	200a      	movs	r0, #10
 800196a:	f004 ff05 	bl	8006778 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 800196e:	2205      	movs	r2, #5
 8001970:	4903      	ldr	r1, [pc, #12]	; (8001980 <ADC_DMA_Start+0x24>)
 8001972:	4802      	ldr	r0, [pc, #8]	; (800197c <ADC_DMA_Start+0x20>)
 8001974:	f005 fa5a 	bl	8006e2c <HAL_ADC_Start_DMA>
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200004a8 	.word	0x200004a8
 8001980:	20000228 	.word	0x20000228
 8001984:	00000000 	.word	0x00000000

08001988 <GET_MCU_Temp>:

float GET_MCU_Temp()
{
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
	    uint16_t tmp=0;
 800198e:	2300      	movs	r3, #0
 8001990:	81fb      	strh	r3, [r7, #14]
	    float temperature;
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 8001992:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <GET_MCU_Temp+0xd8>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	817b      	strh	r3, [r7, #10]
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <GET_MCU_Temp+0xdc>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	813b      	strh	r3, [r7, #8]

	  	for(uint8_t i=0; i<5;i+=1)
 800199e:	2300      	movs	r3, #0
 80019a0:	737b      	strb	r3, [r7, #13]
 80019a2:	e00a      	b.n	80019ba <GET_MCU_Temp+0x32>
	  	{
	  		tmp+=adc_data[i];
 80019a4:	7b7b      	ldrb	r3, [r7, #13]
 80019a6:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <GET_MCU_Temp+0xe0>)
 80019a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	89fb      	ldrh	r3, [r7, #14]
 80019b0:	4413      	add	r3, r2
 80019b2:	81fb      	strh	r3, [r7, #14]
	  	for(uint8_t i=0; i<5;i+=1)
 80019b4:	7b7b      	ldrb	r3, [r7, #13]
 80019b6:	3301      	adds	r3, #1
 80019b8:	737b      	strb	r3, [r7, #13]
 80019ba:	7b7b      	ldrb	r3, [r7, #13]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d9f1      	bls.n	80019a4 <GET_MCU_Temp+0x1c>
	  	}
	  	tmp*=0.2f;
 80019c0:	89fb      	ldrh	r3, [r7, #14]
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a6c <GET_MCU_Temp+0xe4>
 80019ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d6:	ee17 3a90 	vmov	r3, s15
 80019da:	81fb      	strh	r3, [r7, #14]

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f4:	ee17 0a90 	vmov	r0, s15
 80019f8:	f7fe fda6 	bl	8000548 <__aeabi_f2d>
 80019fc:	a316      	add	r3, pc, #88	; (adr r3, 8001a58 <GET_MCU_Temp+0xd0>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	f7fe fdf9 	bl	80005f8 <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	893b      	ldrh	r3, [r7, #8]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd87 	bl	8000524 <__aeabi_i2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7fe ff15 	bl	800084c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <GET_MCU_Temp+0xe8>)
 8001a30:	f7fe fc2c 	bl	800028c <__adddf3>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f8d4 	bl	8000be8 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	607b      	str	r3, [r7, #4]
	  	return temperature;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	ee07 3a90 	vmov	s15, r3
}
 8001a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bdb0      	pop	{r4, r5, r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	33333333 	.word	0x33333333
 8001a5c:	40113333 	.word	0x40113333
 8001a60:	1fff75a8 	.word	0x1fff75a8
 8001a64:	1fff75ca 	.word	0x1fff75ca
 8001a68:	20000228 	.word	0x20000228
 8001a6c:	3e4ccccd 	.word	0x3e4ccccd
 8001a70:	40390000 	.word	0x40390000

08001a74 <read_register16>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	8af9      	ldrh	r1, [r7, #22]
 8001a94:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f007 fd9f 	bl	80095e8 <HAL_I2C_Mem_Read>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10b      	bne.n	8001ac8 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001ab0:	7d7b      	ldrb	r3, [r7, #21]
 8001ab2:	021b      	lsls	r3, r3, #8
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	7d3b      	ldrb	r3, [r7, #20]
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	4313      	orrs	r3, r2
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	801a      	strh	r2, [r3, #0]
		return true;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <read_register16+0x56>
	} else
		return false;
 8001ac8:	2300      	movs	r3, #0

}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001ad2:	b590      	push	{r4, r7, lr}
 8001ad4:	b08b      	sub	sp, #44	; 0x2c
 8001ad6:	af04      	add	r7, sp, #16
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	461a      	mov	r2, r3
 8001ade:	460b      	mov	r3, r1
 8001ae0:	72fb      	strb	r3, [r7, #11]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001af2:	7afb      	ldrb	r3, [r7, #11]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	7abb      	ldrb	r3, [r7, #10]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	8af9      	ldrh	r1, [r7, #22]
 8001afc:	f241 3488 	movw	r4, #5000	; 0x1388
 8001b00:	9402      	str	r4, [sp, #8]
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2301      	movs	r3, #1
 8001b0a:	f007 fd6d 	bl	80095e8 <HAL_I2C_Mem_Read>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <read_data+0x46>
		return 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <read_data+0x48>
	else
		return 1;
 8001b18:	2301      	movs	r3, #1

}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}

08001b22 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2188      	movs	r1, #136	; 0x88
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff9f 	bl	8001a74 <read_register16>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d06f      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	461a      	mov	r2, r3
 8001b42:	218a      	movs	r1, #138	; 0x8a
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff95 	bl	8001a74 <read_register16>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d065      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	461a      	mov	r2, r3
 8001b56:	218c      	movs	r1, #140	; 0x8c
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff8b 	bl	8001a74 <read_register16>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d05b      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3306      	adds	r3, #6
 8001b68:	461a      	mov	r2, r3
 8001b6a:	218e      	movs	r1, #142	; 0x8e
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff81 	bl	8001a74 <read_register16>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d051      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2190      	movs	r1, #144	; 0x90
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff77 	bl	8001a74 <read_register16>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d047      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	330a      	adds	r3, #10
 8001b90:	461a      	mov	r2, r3
 8001b92:	2192      	movs	r1, #146	; 0x92
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff6d 	bl	8001a74 <read_register16>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d03d      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	330c      	adds	r3, #12
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2194      	movs	r1, #148	; 0x94
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff63 	bl	8001a74 <read_register16>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d033      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	330e      	adds	r3, #14
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2196      	movs	r1, #150	; 0x96
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff59 	bl	8001a74 <read_register16>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d029      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3310      	adds	r3, #16
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2198      	movs	r1, #152	; 0x98
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff4f 	bl	8001a74 <read_register16>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01f      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3312      	adds	r3, #18
 8001be0:	461a      	mov	r2, r3
 8001be2:	219a      	movs	r1, #154	; 0x9a
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff45 	bl	8001a74 <read_register16>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d015      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	219c      	movs	r1, #156	; 0x9c
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff3b 	bl	8001a74 <read_register16>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001c08:	461a      	mov	r2, r3
 8001c0a:	219e      	movs	r1, #158	; 0x9e
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff31 	bl	8001a74 <read_register16>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <read_calibration_data+0xfa>

		return true;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <read_calibration_data+0xfc>
	}

	return false;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f103 0218 	add.w	r2, r3, #24
 8001c34:	2301      	movs	r3, #1
 8001c36:	21a1      	movs	r1, #161	; 0xa1
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff4a 	bl	8001ad2 <read_data>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d14b      	bne.n	8001cdc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	331a      	adds	r3, #26
 8001c48:	461a      	mov	r2, r3
 8001c4a:	21e1      	movs	r1, #225	; 0xe1
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff11 	bl	8001a74 <read_register16>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d041      	beq.n	8001cdc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f103 021c 	add.w	r2, r3, #28
 8001c5e:	2301      	movs	r3, #1
 8001c60:	21e3      	movs	r1, #227	; 0xe3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ff35 	bl	8001ad2 <read_data>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d136      	bne.n	8001cdc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001c6e:	f107 030e 	add.w	r3, r7, #14
 8001c72:	461a      	mov	r2, r3
 8001c74:	21e4      	movs	r1, #228	; 0xe4
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fefc 	bl	8001a74 <read_register16>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d02c      	beq.n	8001cdc <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	461a      	mov	r2, r3
 8001c88:	21e5      	movs	r1, #229	; 0xe5
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fef2 	bl	8001a74 <read_register16>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d022      	beq.n	8001cdc <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	21e7      	movs	r1, #231	; 0xe7
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff16 	bl	8001ad2 <read_data>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d117      	bne.n	8001cdc <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001cac:	89fb      	ldrh	r3, [r7, #14]
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	121b      	asrs	r3, r3, #8
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b21a      	sxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001ccc:	89bb      	ldrh	r3, [r7, #12]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b21a      	sxth	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	841a      	strh	r2, [r3, #32]

		return true;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <read_hum_calibration_data+0xb8>
	}

	return false;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b088      	sub	sp, #32
 8001cea:	af04      	add	r7, sp, #16
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	89f9      	ldrh	r1, [r7, #14]
 8001d08:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d0c:	9302      	str	r3, [sp, #8]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	1cbb      	adds	r3, r7, #2
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2301      	movs	r3, #1
 8001d18:	f007 fb52 	bl	80093c0 <HAL_I2C_Mem_Write>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <write_register8+0x40>
		return false;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <write_register8+0x42>
	else
		return true;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d3e:	2b76      	cmp	r3, #118	; 0x76
 8001d40:	d005      	beq.n	8001d4e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001d46:	2b77      	cmp	r3, #119	; 0x77
 8001d48:	d001      	beq.n	8001d4e <bmp280_init+0x1e>

		return false;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e099      	b.n	8001e82 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d54:	2301      	movs	r3, #1
 8001d56:	21d0      	movs	r1, #208	; 0xd0
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff feba 	bl	8001ad2 <read_data>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <bmp280_init+0x38>
		return false;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e08c      	b.n	8001e82 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d6e:	2b58      	cmp	r3, #88	; 0x58
 8001d70:	d006      	beq.n	8001d80 <bmp280_init+0x50>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001d78:	2b60      	cmp	r3, #96	; 0x60
 8001d7a:	d001      	beq.n	8001d80 <bmp280_init+0x50>

		return false;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e080      	b.n	8001e82 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001d80:	22b6      	movs	r2, #182	; 0xb6
 8001d82:	21e0      	movs	r1, #224	; 0xe0
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ffae 	bl	8001ce6 <write_register8>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <bmp280_init+0x64>
		return false;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e076      	b.n	8001e82 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001d94:	f107 020c 	add.w	r2, r7, #12
 8001d98:	2301      	movs	r3, #1
 8001d9a:	21f3      	movs	r1, #243	; 0xf3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fe98 	bl	8001ad2 <read_data>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f5      	bne.n	8001d94 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001da8:	7b3b      	ldrb	r3, [r7, #12]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff feb5 	bl	8001b22 <read_calibration_data>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d100      	bne.n	8001dc6 <bmp280_init+0x96>
 8001dc4:	e001      	b.n	8001dca <bmp280_init+0x9a>
		return false;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e05b      	b.n	8001e82 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001dd0:	2b60      	cmp	r3, #96	; 0x60
 8001dd2:	d10a      	bne.n	8001dea <bmp280_init+0xba>
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff26 	bl	8001c26 <read_hum_calibration_data>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f083 0301 	eor.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <bmp280_init+0xba>
		return false;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e04b      	b.n	8001e82 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	795b      	ldrb	r3, [r3, #5]
 8001dee:	015b      	lsls	r3, r3, #5
 8001df0:	b25a      	sxtb	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	785b      	ldrb	r3, [r3, #1]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	b25b      	sxtb	r3, r3
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	461a      	mov	r2, r3
 8001e04:	21f5      	movs	r1, #245	; 0xf5
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff6d 	bl	8001ce6 <write_register8>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <bmp280_init+0xe6>
		return false;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e035      	b.n	8001e82 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	78db      	ldrb	r3, [r3, #3]
 8001e28:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001e2a:	b25a      	sxtb	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	789b      	ldrb	r3, [r3, #2]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b25a      	sxtb	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001e42:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001e4a:	2b60      	cmp	r3, #96	; 0x60
 8001e4c:	d10d      	bne.n	8001e6a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	791b      	ldrb	r3, [r3, #4]
 8001e52:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001e54:	7b7b      	ldrb	r3, [r7, #13]
 8001e56:	461a      	mov	r2, r3
 8001e58:	21f2      	movs	r1, #242	; 0xf2
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ff43 	bl	8001ce6 <write_register8>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <bmp280_init+0x13a>
			return false;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e00b      	b.n	8001e82 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	21f4      	movs	r1, #244	; 0xf4
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ff38 	bl	8001ce6 <write_register8>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <bmp280_init+0x150>
		return false;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <bmp280_init+0x152>
	}

	return true;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
 8001e92:	f107 020f 	add.w	r2, r7, #15
 8001e96:	2301      	movs	r3, #1
 8001e98:	21f4      	movs	r1, #244	; 0xf4
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fe19 	bl	8001ad2 <read_data>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <bmp280_force_measurement+0x20>
		return false;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e015      	b.n	8001ed6 <bmp280_force_measurement+0x4c>
	ctrl &= ~0b11;  // clear two lower bits
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f023 0303 	bic.w	r3, r3, #3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73fb      	strb	r3, [r7, #15]
	ctrl |= BMP280_MODE_FORCED;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	21f4      	movs	r1, #244	; 0xf4
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff0e 	bl	8001ce6 <write_register8>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <bmp280_force_measurement+0x4a>
		return false;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <bmp280_force_measurement+0x4c>
	}
	return true;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b084      	sub	sp, #16
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
 8001ee6:	f107 020f 	add.w	r2, r7, #15
 8001eea:	2301      	movs	r3, #1
 8001eec:	21f3      	movs	r1, #243	; 0xf3
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fdef 	bl	8001ad2 <read_data>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <bmp280_is_measuring+0x20>
		return false;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e007      	b.n	8001f0e <bmp280_is_measuring+0x30>
	if (status & (1 << 3)) {
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <bmp280_is_measuring+0x2e>
		return true;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <bmp280_is_measuring+0x30>
	}
	return false;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001f16:	b480      	push	{r7}
 8001f18:	b087      	sub	sp, #28
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	10da      	asrs	r2, r3, #3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001f38:	12db      	asrs	r3, r3, #11
 8001f3a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	111b      	asrs	r3, r3, #4
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	1112      	asrs	r2, r2, #4
 8001f4a:	68f9      	ldr	r1, [r7, #12]
 8001f4c:	8809      	ldrh	r1, [r1, #0]
 8001f4e:	1a52      	subs	r2, r2, r1
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001f5c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001f60:	139b      	asrs	r3, r3, #14
 8001f62:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	3380      	adds	r3, #128	; 0x80
 8001f7a:	121b      	asrs	r3, r3, #8
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f8c:	b0cc      	sub	sp, #304	; 0x130
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001f94:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001f98:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001fa0:	17da      	asrs	r2, r3, #31
 8001fa2:	461c      	mov	r4, r3
 8001fa4:	4615      	mov	r5, r2
 8001fa6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001faa:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001fae:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001fb2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fba:	fb03 f102 	mul.w	r1, r3, r2
 8001fbe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001fc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	18ca      	adds	r2, r1, r3
 8001fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fd0:	fba3 8903 	umull	r8, r9, r3, r3
 8001fd4:	eb02 0309 	add.w	r3, r2, r9
 8001fd8:	4699      	mov	r9, r3
 8001fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fde:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	17da      	asrs	r2, r3, #31
 8001fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fea:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001fee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	fb03 f209 	mul.w	r2, r3, r9
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	fb08 f303 	mul.w	r3, r8, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	4602      	mov	r2, r0
 8002002:	fba8 1202 	umull	r1, r2, r8, r2
 8002006:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800200a:	460a      	mov	r2, r1
 800200c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002010:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002014:	4413      	add	r3, r2
 8002016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800201a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800201e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8002022:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800202a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800202e:	b21b      	sxth	r3, r3
 8002030:	17da      	asrs	r2, r3, #31
 8002032:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002036:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800203a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800203e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8002042:	462a      	mov	r2, r5
 8002044:	fb02 f203 	mul.w	r2, r2, r3
 8002048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800204c:	4621      	mov	r1, r4
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	441a      	add	r2, r3
 8002054:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002058:	4621      	mov	r1, r4
 800205a:	fba3 1301 	umull	r1, r3, r3, r1
 800205e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002062:	460b      	mov	r3, r1
 8002064:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800206c:	18d3      	adds	r3, r2, r3
 800206e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	f04f 0100 	mov.w	r1, #0
 800207a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800207e:	462b      	mov	r3, r5
 8002080:	0459      	lsls	r1, r3, #17
 8002082:	4623      	mov	r3, r4
 8002084:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002088:	4623      	mov	r3, r4
 800208a:	0458      	lsls	r0, r3, #17
 800208c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002090:	1814      	adds	r4, r2, r0
 8002092:	643c      	str	r4, [r7, #64]	; 0x40
 8002094:	414b      	adcs	r3, r1
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800209c:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80020a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	17da      	asrs	r2, r3, #31
 80020ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020b4:	f04f 0000 	mov.w	r0, #0
 80020b8:	f04f 0100 	mov.w	r1, #0
 80020bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020c0:	00d9      	lsls	r1, r3, #3
 80020c2:	2000      	movs	r0, #0
 80020c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80020c8:	1814      	adds	r4, r2, r0
 80020ca:	63bc      	str	r4, [r7, #56]	; 0x38
 80020cc:	414b      	adcs	r3, r1
 80020ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80020d4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80020d8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80020dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020e0:	fb03 f102 	mul.w	r1, r3, r2
 80020e4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80020e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	18ca      	adds	r2, r1, r3
 80020f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80020f6:	fba3 1303 	umull	r1, r3, r3, r3
 80020fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80020fe:	460b      	mov	r3, r1
 8002100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002108:	18d3      	adds	r3, r2, r3
 800210a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800210e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002112:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002116:	b21b      	sxth	r3, r3
 8002118:	17da      	asrs	r2, r3, #31
 800211a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800211e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002122:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8002126:	462b      	mov	r3, r5
 8002128:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800212c:	4642      	mov	r2, r8
 800212e:	fb02 f203 	mul.w	r2, r2, r3
 8002132:	464b      	mov	r3, r9
 8002134:	4621      	mov	r1, r4
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	4622      	mov	r2, r4
 800213e:	4641      	mov	r1, r8
 8002140:	fba2 1201 	umull	r1, r2, r2, r1
 8002144:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002148:	460a      	mov	r2, r1
 800214a:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800214e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002152:	4413      	add	r3, r2
 8002154:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002158:	f04f 0000 	mov.w	r0, #0
 800215c:	f04f 0100 	mov.w	r1, #0
 8002160:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8002164:	4623      	mov	r3, r4
 8002166:	0a18      	lsrs	r0, r3, #8
 8002168:	462b      	mov	r3, r5
 800216a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800216e:	462b      	mov	r3, r5
 8002170:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800217a:	b21b      	sxth	r3, r3
 800217c:	17da      	asrs	r2, r3, #31
 800217e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002182:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002186:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800218a:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800218e:	464a      	mov	r2, r9
 8002190:	fb02 f203 	mul.w	r2, r2, r3
 8002194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002198:	4644      	mov	r4, r8
 800219a:	fb04 f303 	mul.w	r3, r4, r3
 800219e:	441a      	add	r2, r3
 80021a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80021a4:	4644      	mov	r4, r8
 80021a6:	fba3 4304 	umull	r4, r3, r3, r4
 80021aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80021ae:	4623      	mov	r3, r4
 80021b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80021b8:	18d3      	adds	r3, r2, r3
 80021ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80021ca:	464c      	mov	r4, r9
 80021cc:	0323      	lsls	r3, r4, #12
 80021ce:	4644      	mov	r4, r8
 80021d0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80021d4:	4644      	mov	r4, r8
 80021d6:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80021d8:	1884      	adds	r4, r0, r2
 80021da:	633c      	str	r4, [r7, #48]	; 0x30
 80021dc:	eb41 0303 	adc.w	r3, r1, r3
 80021e0:	637b      	str	r3, [r7, #52]	; 0x34
 80021e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80021e6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80021ea:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80021ee:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80021f2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80021f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80021fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021fe:	88db      	ldrh	r3, [r3, #6]
 8002200:	b29b      	uxth	r3, r3
 8002202:	2200      	movs	r2, #0
 8002204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002208:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800220c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002210:	462b      	mov	r3, r5
 8002212:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002216:	4642      	mov	r2, r8
 8002218:	fb02 f203 	mul.w	r2, r2, r3
 800221c:	464b      	mov	r3, r9
 800221e:	4621      	mov	r1, r4
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	4622      	mov	r2, r4
 8002228:	4641      	mov	r1, r8
 800222a:	fba2 1201 	umull	r1, r2, r2, r1
 800222e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002232:	460a      	mov	r2, r1
 8002234:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002238:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800223c:	4413      	add	r3, r2
 800223e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800224e:	4629      	mov	r1, r5
 8002250:	104a      	asrs	r2, r1, #1
 8002252:	4629      	mov	r1, r5
 8002254:	17cb      	asrs	r3, r1, #31
 8002256:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 800225a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800225e:	4313      	orrs	r3, r2
 8002260:	d101      	bne.n	8002266 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8002262:	2300      	movs	r3, #0
 8002264:	e148      	b.n	80024f8 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8002266:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800226a:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800226e:	17da      	asrs	r2, r3, #31
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
 8002272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002274:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002278:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800227c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002280:	105b      	asrs	r3, r3, #1
 8002282:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002286:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800228a:	07db      	lsls	r3, r3, #31
 800228c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002290:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002294:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002298:	4621      	mov	r1, r4
 800229a:	1a89      	subs	r1, r1, r2
 800229c:	67b9      	str	r1, [r7, #120]	; 0x78
 800229e:	4629      	mov	r1, r5
 80022a0:	eb61 0303 	sbc.w	r3, r1, r3
 80022a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	1891      	adds	r1, r2, r2
 80022b0:	6239      	str	r1, [r7, #32]
 80022b2:	415b      	adcs	r3, r3
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022ba:	4621      	mov	r1, r4
 80022bc:	1851      	adds	r1, r2, r1
 80022be:	61b9      	str	r1, [r7, #24]
 80022c0:	4629      	mov	r1, r5
 80022c2:	414b      	adcs	r3, r1
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80022d2:	4649      	mov	r1, r9
 80022d4:	018b      	lsls	r3, r1, #6
 80022d6:	4641      	mov	r1, r8
 80022d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022dc:	4641      	mov	r1, r8
 80022de:	018a      	lsls	r2, r1, #6
 80022e0:	4641      	mov	r1, r8
 80022e2:	1889      	adds	r1, r1, r2
 80022e4:	6139      	str	r1, [r7, #16]
 80022e6:	4649      	mov	r1, r9
 80022e8:	eb43 0101 	adc.w	r1, r3, r1
 80022ec:	6179      	str	r1, [r7, #20]
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80022fa:	4649      	mov	r1, r9
 80022fc:	008b      	lsls	r3, r1, #2
 80022fe:	4641      	mov	r1, r8
 8002300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002304:	4641      	mov	r1, r8
 8002306:	008a      	lsls	r2, r1, #2
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	4603      	mov	r3, r0
 800230e:	4622      	mov	r2, r4
 8002310:	189b      	adds	r3, r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	460b      	mov	r3, r1
 8002316:	462a      	mov	r2, r5
 8002318:	eb42 0303 	adc.w	r3, r2, r3
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800232a:	4649      	mov	r1, r9
 800232c:	008b      	lsls	r3, r1, #2
 800232e:	4641      	mov	r1, r8
 8002330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002334:	4641      	mov	r1, r8
 8002336:	008a      	lsls	r2, r1, #2
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	4603      	mov	r3, r0
 800233e:	4622      	mov	r2, r4
 8002340:	189b      	adds	r3, r3, r2
 8002342:	673b      	str	r3, [r7, #112]	; 0x70
 8002344:	462b      	mov	r3, r5
 8002346:	460a      	mov	r2, r1
 8002348:	eb42 0303 	adc.w	r3, r2, r3
 800234c:	677b      	str	r3, [r7, #116]	; 0x74
 800234e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002352:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002356:	f7fe fda5 	bl	8000ea4 <__aeabi_ldivmod>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002366:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800236a:	b21b      	sxth	r3, r3
 800236c:	17da      	asrs	r2, r3, #31
 800236e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002370:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002372:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	0b50      	lsrs	r0, r2, #13
 8002380:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002384:	1359      	asrs	r1, r3, #13
 8002386:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800238a:	462b      	mov	r3, r5
 800238c:	fb00 f203 	mul.w	r2, r0, r3
 8002390:	4623      	mov	r3, r4
 8002392:	fb03 f301 	mul.w	r3, r3, r1
 8002396:	4413      	add	r3, r2
 8002398:	4622      	mov	r2, r4
 800239a:	fba2 1200 	umull	r1, r2, r2, r0
 800239e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023a2:	460a      	mov	r2, r1
 80023a4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80023a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80023ac:	4413      	add	r3, r2
 80023ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80023b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80023b6:	f04f 0000 	mov.w	r0, #0
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	0b50      	lsrs	r0, r2, #13
 80023c0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80023c4:	1359      	asrs	r1, r3, #13
 80023c6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80023ca:	462b      	mov	r3, r5
 80023cc:	fb00 f203 	mul.w	r2, r0, r3
 80023d0:	4623      	mov	r3, r4
 80023d2:	fb03 f301 	mul.w	r3, r3, r1
 80023d6:	4413      	add	r3, r2
 80023d8:	4622      	mov	r2, r4
 80023da:	fba2 1200 	umull	r1, r2, r2, r0
 80023de:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023e2:	460a      	mov	r2, r1
 80023e4:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80023e8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80023ec:	4413      	add	r3, r2
 80023ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023fe:	4621      	mov	r1, r4
 8002400:	0e4a      	lsrs	r2, r1, #25
 8002402:	4629      	mov	r1, r5
 8002404:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002408:	4629      	mov	r1, r5
 800240a:	164b      	asrs	r3, r1, #25
 800240c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002414:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002418:	b21b      	sxth	r3, r3
 800241a:	17da      	asrs	r2, r3, #31
 800241c:	663b      	str	r3, [r7, #96]	; 0x60
 800241e:	667a      	str	r2, [r7, #100]	; 0x64
 8002420:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002424:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002428:	462a      	mov	r2, r5
 800242a:	fb02 f203 	mul.w	r2, r2, r3
 800242e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002432:	4621      	mov	r1, r4
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800243e:	4621      	mov	r1, r4
 8002440:	fba2 1201 	umull	r1, r2, r2, r1
 8002444:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8002448:	460a      	mov	r2, r1
 800244a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800244e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002452:	4413      	add	r3, r2
 8002454:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8002464:	4621      	mov	r1, r4
 8002466:	0cca      	lsrs	r2, r1, #19
 8002468:	4629      	mov	r1, r5
 800246a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800246e:	4629      	mov	r1, r5
 8002470:	14cb      	asrs	r3, r1, #19
 8002472:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002476:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800247a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800247e:	1884      	adds	r4, r0, r2
 8002480:	65bc      	str	r4, [r7, #88]	; 0x58
 8002482:	eb41 0303 	adc.w	r3, r1, r3
 8002486:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002488:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800248c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002490:	4621      	mov	r1, r4
 8002492:	1889      	adds	r1, r1, r2
 8002494:	6539      	str	r1, [r7, #80]	; 0x50
 8002496:	4629      	mov	r1, r5
 8002498:	eb43 0101 	adc.w	r1, r3, r1
 800249c:	6579      	str	r1, [r7, #84]	; 0x54
 800249e:	f04f 0000 	mov.w	r0, #0
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80024aa:	4623      	mov	r3, r4
 80024ac:	0a18      	lsrs	r0, r3, #8
 80024ae:	462b      	mov	r3, r5
 80024b0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80024b4:	462b      	mov	r3, r5
 80024b6:	1219      	asrs	r1, r3, #8
 80024b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	17da      	asrs	r2, r3, #31
 80024c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80024c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 80024d4:	464c      	mov	r4, r9
 80024d6:	0123      	lsls	r3, r4, #4
 80024d8:	4644      	mov	r4, r8
 80024da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80024de:	4644      	mov	r4, r8
 80024e0:	0122      	lsls	r2, r4, #4
 80024e2:	1884      	adds	r4, r0, r2
 80024e4:	603c      	str	r4, [r7, #0]
 80024e6:	eb41 0303 	adc.w	r3, r1, r3
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80024f0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 80024f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80024fe:	46bd      	mov	sp, r7
 8002500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002504 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002516:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	039a      	lsls	r2, r3, #14
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002522:	051b      	lsls	r3, r3, #20
 8002524:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800252c:	4619      	mov	r1, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800253a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002542:	4611      	mov	r1, r2
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	fb01 f202 	mul.w	r2, r1, r2
 800254a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	7f09      	ldrb	r1, [r1, #28]
 8002550:	4608      	mov	r0, r1
 8002552:	6979      	ldr	r1, [r7, #20]
 8002554:	fb00 f101 	mul.w	r1, r0, r1
 8002558:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800255a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800255e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002562:	1292      	asrs	r2, r2, #10
 8002564:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800256e:	fb01 f202 	mul.w	r2, r1, r2
 8002572:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002576:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	13db      	asrs	r3, r3, #15
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	13d2      	asrs	r2, r2, #15
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	7e12      	ldrb	r2, [r2, #24]
 8002590:	fb02 f303 	mul.w	r3, r2, r3
 8002594:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80025a2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80025aa:	bfa8      	it	ge
 80025ac:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80025b0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	131b      	asrs	r3, r3, #12
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08c      	sub	sp, #48	; 0x30
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80025d6:	2b60      	cmp	r3, #96	; 0x60
 80025d8:	d007      	beq.n	80025ea <bmp280_read_fixed+0x28>
		if (humidity)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <bmp280_read_fixed+0x32>
 80025f0:	2308      	movs	r3, #8
 80025f2:	e000      	b.n	80025f6 <bmp280_read_fixed+0x34>
 80025f4:	2306      	movs	r3, #6
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f107 0218 	add.w	r2, r7, #24
 8002600:	21f7      	movs	r1, #247	; 0xf7
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff fa65 	bl	8001ad2 <read_data>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <bmp280_read_fixed+0x50>
		return false;
 800260e:	2300      	movs	r3, #0
 8002610:	e038      	b.n	8002684 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002612:	7e3b      	ldrb	r3, [r7, #24]
 8002614:	031a      	lsls	r2, r3, #12
 8002616:	7e7b      	ldrb	r3, [r7, #25]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	4313      	orrs	r3, r2
 800261c:	7eba      	ldrb	r2, [r7, #26]
 800261e:	0912      	lsrs	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	4313      	orrs	r3, r2
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002626:	7efb      	ldrb	r3, [r7, #27]
 8002628:	031a      	lsls	r2, r3, #12
 800262a:	7f3b      	ldrb	r3, [r7, #28]
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4313      	orrs	r3, r2
 8002630:	7f7a      	ldrb	r2, [r7, #29]
 8002632:	0912      	lsrs	r2, r2, #4
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	4313      	orrs	r3, r2
 8002638:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	461a      	mov	r2, r3
 8002640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fc67 	bl	8001f16 <compensate_temperature>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	461a      	mov	r2, r3
 8002652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff fc97 	bl	8001f88 <compensate_pressure>
 800265a:	4602      	mov	r2, r0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002666:	7fbb      	ldrb	r3, [r7, #30]
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	7ffa      	ldrb	r2, [r7, #31]
 800266c:	4313      	orrs	r3, r2
 800266e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	461a      	mov	r2, r3
 8002674:	6a39      	ldr	r1, [r7, #32]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff ff44 	bl	8002504 <compensate_humidity>
 800267c:	4602      	mov	r2, r0
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002682:	2301      	movs	r3, #1
}
 8002684:	4618      	mov	r0, r3
 8002686:	3730      	adds	r7, #48	; 0x30
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <bmp280_read_float+0x1a>
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	e000      	b.n	80026a8 <bmp280_read_float+0x1c>
 80026a6:	2300      	movs	r3, #0
 80026a8:	f107 0218 	add.w	r2, r7, #24
 80026ac:	f107 011c 	add.w	r1, r7, #28
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ff86 	bl	80025c2 <bmp280_read_fixed>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d028      	beq.n	800270e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002718 <bmp280_read_float+0x8c>
 80026ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026de:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800271c <bmp280_read_float+0x90>
 80026e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	ee07 3a90 	vmov	s15, r3
 80026f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026fc:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002720 <bmp280_read_float+0x94>
 8002700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <bmp280_read_float+0x84>
	}

	return false;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	42c80000 	.word	0x42c80000
 800271c:	43800000 	.word	0x43800000
 8002720:	44800000 	.word	0x44800000

08002724 <BQ25798_check>:
#define BQ25798_ADDR 0x6B << 1


// Checking
uint8_t BQ25798_check()
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 800272a:	481a      	ldr	r0, [pc, #104]	; (8002794 <BQ25798_check+0x70>)
 800272c:	f00c fba0 	bl	800ee70 <iprintf>
	for (int i = 0; i < 10; i++) {
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	e01f      	b.n	8002776 <BQ25798_check+0x52>
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8002736:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800273a:	2203      	movs	r2, #3
 800273c:	21d6      	movs	r1, #214	; 0xd6
 800273e:	4816      	ldr	r0, [pc, #88]	; (8002798 <BQ25798_check+0x74>)
 8002740:	f007 f86c 	bl	800981c <HAL_I2C_IsDeviceReady>
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(100);
 8002748:	2064      	movs	r0, #100	; 0x64
 800274a:	f004 f815 	bl	8006778 <HAL_Delay>
	    if (status == HAL_OK) {
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <BQ25798_check+0x40>
	    	printf("OK !\r\n");
 8002754:	4811      	ldr	r0, [pc, #68]	; (800279c <BQ25798_check+0x78>)
 8002756:	f00c fbf1 	bl	800ef3c <puts>
	    	BQ25798_set_ADC();
 800275a:	f000 f823 	bl	80027a4 <BQ25798_set_ADC>
	    	res = OK;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
	        break;
 8002762:	e00b      	b.n	800277c <BQ25798_check+0x58>
	    } else {
	    	res = FAULT;
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
	    	HAL_Delay(500);
 8002768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800276c:	f004 f804 	bl	8006778 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	3301      	adds	r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b09      	cmp	r3, #9
 800277a:	dddc      	ble.n	8002736 <BQ25798_check+0x12>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <BQ25798_check+0x64>
 8002782:	4807      	ldr	r0, [pc, #28]	; (80027a0 <BQ25798_check+0x7c>)
 8002784:	f00c fbda 	bl	800ef3c <puts>
	return res;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	08011ab4 	.word	0x08011ab4
 8002798:	20000578 	.word	0x20000578
 800279c:	08011acc 	.word	0x08011acc
 80027a0:	08011ad4 	.word	0x08011ad4

080027a4 <BQ25798_set_ADC>:

void BQ25798_set_ADC()
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
	uint8_t reg;
	reg = 0b10000000;
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	71fb      	strb	r3, [r7, #7]
	i2c_write8(&hi2c1, REG2E_ADC_Control, reg, BQ25798_ADDR);
 80027ae:	79fa      	ldrb	r2, [r7, #7]
 80027b0:	23d6      	movs	r3, #214	; 0xd6
 80027b2:	212e      	movs	r1, #46	; 0x2e
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <BQ25798_set_ADC+0x24>)
 80027b6:	f003 fb03 	bl	8005dc0 <i2c_write8>
	HAL_Delay(1);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f003 ffdc 	bl	8006778 <HAL_Delay>
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000578 	.word	0x20000578

080027cc <BQ25798_Vbat_read>:

uint16_t BQ25798_Vbat_read()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG3B_VBAT_ADC, &value, BQ25798_ADDR);
 80027d2:	1dba      	adds	r2, r7, #6
 80027d4:	23d6      	movs	r3, #214	; 0xd6
 80027d6:	213b      	movs	r1, #59	; 0x3b
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <BQ25798_Vbat_read+0x24>)
 80027da:	f003 facf 	bl	8005d7c <i2c_read16>
    return byteswap16(value);
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f003 fbc5 	bl	8005f70 <byteswap16>
 80027e6:	4603      	mov	r3, r0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000578 	.word	0x20000578

080027f4 <BQ25798_Vsys_read>:

uint16_t BQ25798_Vsys_read()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG3D_VSYS_ADC, &value, BQ25798_ADDR);
 80027fa:	1dba      	adds	r2, r7, #6
 80027fc:	23d6      	movs	r3, #214	; 0xd6
 80027fe:	213d      	movs	r1, #61	; 0x3d
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <BQ25798_Vsys_read+0x24>)
 8002802:	f003 fabb 	bl	8005d7c <i2c_read16>
    return byteswap16(value);
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4618      	mov	r0, r3
 800280a:	f003 fbb1 	bl	8005f70 <byteswap16>
 800280e:	4603      	mov	r3, r0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000578 	.word	0x20000578

0800281c <BQ25798_Vac1_read>:
    i2c_read16(&hi2c1, REG35_VBUS_ADC, &value, BQ25798_ADDR);
    return byteswap16(value);
}

uint16_t BQ25798_Vac1_read()
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG37_VAC1_ADC, &value, BQ25798_ADDR);
 8002822:	1dba      	adds	r2, r7, #6
 8002824:	23d6      	movs	r3, #214	; 0xd6
 8002826:	2137      	movs	r1, #55	; 0x37
 8002828:	4805      	ldr	r0, [pc, #20]	; (8002840 <BQ25798_Vac1_read+0x24>)
 800282a:	f003 faa7 	bl	8005d7c <i2c_read16>
    return byteswap16(value);
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fb9d 	bl	8005f70 <byteswap16>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000578 	.word	0x20000578

08002844 <BQ25798_Vac2_read>:

uint16_t BQ25798_Vac2_read()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG39_VAC2_ADC, &value, BQ25798_ADDR);
 800284a:	1dba      	adds	r2, r7, #6
 800284c:	23d6      	movs	r3, #214	; 0xd6
 800284e:	2139      	movs	r1, #57	; 0x39
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <BQ25798_Vac2_read+0x24>)
 8002852:	f003 fa93 	bl	8005d7c <i2c_read16>
    return byteswap16(value);
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 fb89 	bl	8005f70 <byteswap16>
 800285e:	4603      	mov	r3, r0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000578 	.word	0x20000578

0800286c <BQ25798_Ibus_read>:

uint16_t BQ25798_Ibus_read()
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG31_IBUS_ADC, &value, BQ25798_ADDR);
 8002872:	1dba      	adds	r2, r7, #6
 8002874:	23d6      	movs	r3, #214	; 0xd6
 8002876:	2131      	movs	r1, #49	; 0x31
 8002878:	4805      	ldr	r0, [pc, #20]	; (8002890 <BQ25798_Ibus_read+0x24>)
 800287a:	f003 fa7f 	bl	8005d7c <i2c_read16>
    return byteswap16(value);
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fb75 	bl	8005f70 <byteswap16>
 8002886:	4603      	mov	r3, r0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000578 	.word	0x20000578

08002894 <BQ25798_Ibat_read>:

uint16_t BQ25798_Ibat_read()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	uint16_t value;
    i2c_read16(&hi2c1, REG33_IBAT_ADC, &value, BQ25798_ADDR);
 800289a:	1dba      	adds	r2, r7, #6
 800289c:	23d6      	movs	r3, #214	; 0xd6
 800289e:	2133      	movs	r1, #51	; 0x33
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <BQ25798_Ibat_read+0x24>)
 80028a2:	f003 fa6b 	bl	8005d7c <i2c_read16>
    return byteswap16(value);
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fb61 	bl	8005f70 <byteswap16>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000578 	.word	0x20000578

080028bc <BQ25798_Sys_Min_Voltage_read>:

uint16_t BQ25798_Sys_Min_Voltage_read()
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af04      	add	r7, sp, #16
	uint8_t value;
	uint8_t mask = 0x3F;
 80028c2:	233f      	movs	r3, #63	; 0x3f
 80028c4:	71fb      	strb	r3, [r7, #7]
	uint16_t voltage;
    HAL_I2C_Mem_Read(&hi2c1, BQ25798_ADDR, REG00_Minimal_System_Voltage, I2C_MEMADD_SIZE_8BIT, &value, 1, 500);
 80028c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	2301      	movs	r3, #1
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	1cfb      	adds	r3, r7, #3
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2301      	movs	r3, #1
 80028d6:	2200      	movs	r2, #0
 80028d8:	21d6      	movs	r1, #214	; 0xd6
 80028da:	480c      	ldr	r0, [pc, #48]	; (800290c <BQ25798_Sys_Min_Voltage_read+0x50>)
 80028dc:	f006 fe84 	bl	80095e8 <HAL_I2C_Mem_Read>
    voltage= value & mask;
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	4013      	ands	r3, r2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	80bb      	strh	r3, [r7, #4]
    voltage *= 250;
 80028ea:	88bb      	ldrh	r3, [r7, #4]
 80028ec:	461a      	mov	r2, r3
 80028ee:	0152      	lsls	r2, r2, #5
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	80bb      	strh	r3, [r7, #4]
    voltage += 2500;
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8002900:	80bb      	strh	r3, [r7, #4]
    return voltage;
 8002902:	88bb      	ldrh	r3, [r7, #4]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000578 	.word	0x20000578

08002910 <BQ25798_Chr_Volt_Limit_read>:

uint16_t BQ25798_Chr_Volt_Limit_read()
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
	uint16_t value;
	i2c_read16(&hi2c1, REG01_Charge_Voltage_Limit, &value, BQ25798_ADDR);
 8002916:	1d3a      	adds	r2, r7, #4
 8002918:	23d6      	movs	r3, #214	; 0xd6
 800291a:	2101      	movs	r1, #1
 800291c:	4809      	ldr	r0, [pc, #36]	; (8002944 <BQ25798_Chr_Volt_Limit_read+0x34>)
 800291e:	f003 fa2d 	bl	8005d7c <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8002922:	88bb      	ldrh	r3, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 fb23 	bl	8005f70 <byteswap16>
 800292a:	4603      	mov	r3, r0
 800292c:	80fb      	strh	r3, [r7, #6]
    return swapvalue * 10;
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	461a      	mov	r2, r3
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	b29b      	uxth	r3, r3
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000578 	.word	0x20000578

08002948 <BQ25798_Chr_Curr_Limit_read>:

uint16_t BQ25798_Chr_Curr_Limit_read()
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
	uint16_t value;
	i2c_read16(&hi2c1, REG03_Charge_Current_Limit, &value, BQ25798_ADDR);
 800294e:	1d3a      	adds	r2, r7, #4
 8002950:	23d6      	movs	r3, #214	; 0xd6
 8002952:	2103      	movs	r1, #3
 8002954:	4809      	ldr	r0, [pc, #36]	; (800297c <BQ25798_Chr_Curr_Limit_read+0x34>)
 8002956:	f003 fa11 	bl	8005d7c <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 800295a:	88bb      	ldrh	r3, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f003 fb07 	bl	8005f70 <byteswap16>
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
    return swapvalue * 10;
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	461a      	mov	r2, r3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	b29b      	uxth	r3, r3
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000578 	.word	0x20000578

08002980 <BQ25798_Sys_Min_Voltage_write>:

uint8_t BQ25798_Sys_Min_Voltage_write(uint8_t bits) // 6 bits multiplier (2500mV + 6bits * 250mV) e.g 3000mV = 2500 + 3*250 = 3,25V / bits=3
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
	uint8_t res;
    res = i2c_write8(&hi2c1, REG00_Minimal_System_Voltage, (bits & 0x3F), BQ25798_ADDR);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002990:	b2da      	uxtb	r2, r3
 8002992:	23d6      	movs	r3, #214	; 0xd6
 8002994:	2100      	movs	r1, #0
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <BQ25798_Sys_Min_Voltage_write+0x2c>)
 8002998:	f003 fa12 	bl	8005dc0 <i2c_write8>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
    return res;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000578 	.word	0x20000578

080029b0 <BQ25798_Chr_Volt_Limit_write>:

uint8_t BQ25798_Chr_Volt_Limit_write(uint16_t val)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	80fb      	strh	r3, [r7, #6]
	uint8_t res;
	val /= 10;
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	4a0b      	ldr	r2, [pc, #44]	; (80029ec <BQ25798_Chr_Volt_Limit_write+0x3c>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	80fb      	strh	r3, [r7, #6]
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 fad1 	bl	8005f70 <byteswap16>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	23d6      	movs	r3, #214	; 0xd6
 80029d4:	2101      	movs	r1, #1
 80029d6:	4806      	ldr	r0, [pc, #24]	; (80029f0 <BQ25798_Chr_Volt_Limit_write+0x40>)
 80029d8:	f003 fa16 	bl	8005e08 <i2c_write16>
 80029dc:	4603      	mov	r3, r0
 80029de:	73fb      	strb	r3, [r7, #15]
    return res;
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	cccccccd 	.word	0xcccccccd
 80029f0:	20000578 	.word	0x20000578

080029f4 <BQ25798_Chr_Curr_Limit_write>:

uint8_t BQ25798_Chr_Curr_Limit_write(uint16_t val)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
	uint8_t res;
	val /= 10;
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <BQ25798_Chr_Curr_Limit_write+0x3c>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	80fb      	strh	r3, [r7, #6]
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 faaf 	bl	8005f70 <byteswap16>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	23d6      	movs	r3, #214	; 0xd6
 8002a18:	2103      	movs	r1, #3
 8002a1a:	4806      	ldr	r0, [pc, #24]	; (8002a34 <BQ25798_Chr_Curr_Limit_write+0x40>)
 8002a1c:	f003 f9f4 	bl	8005e08 <i2c_write16>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]
    return res;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	cccccccd 	.word	0xcccccccd
 8002a34:	20000578 	.word	0x20000578

08002a38 <_write>:

static char clibuf[32];
static int cliptr;

int _write(int file, char *ptr, int len)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4804      	ldr	r0, [pc, #16]	; (8002a60 <_write+0x28>)
 8002a50:	f009 fbc2 	bl	800c1d8 <HAL_UART_Transmit>
    return len;
 8002a54:	687b      	ldr	r3, [r7, #4]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200006c0 	.word	0x200006c0

08002a64 <HAL_UART_RxCpltCallback>:
{
    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <HAL_UART_RxCpltCallback+0x38>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d105      	bne.n	8002a80 <HAL_UART_RxCpltCallback+0x1c>
 8002a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a78:	4909      	ldr	r1, [pc, #36]	; (8002aa0 <HAL_UART_RxCpltCallback+0x3c>)
 8002a7a:	4808      	ldr	r0, [pc, #32]	; (8002a9c <HAL_UART_RxCpltCallback+0x38>)
 8002a7c:	f009 fc40 	bl	800c300 <HAL_UART_Receive_IT>
	if(huart == &huart2) HAL_UART_Receive_IT(&huart2, sim_rx_buf, SIM_BUF_SIZE); // Interrupt start Uart2 RX
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <HAL_UART_RxCpltCallback+0x40>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d105      	bne.n	8002a94 <HAL_UART_RxCpltCallback+0x30>
 8002a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a8c:	4906      	ldr	r1, [pc, #24]	; (8002aa8 <HAL_UART_RxCpltCallback+0x44>)
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <HAL_UART_RxCpltCallback+0x40>)
 8002a90:	f009 fc36 	bl	800c300 <HAL_UART_Receive_IT>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200006c0 	.word	0x200006c0
 8002aa0:	20000234 	.word	0x20000234
 8002aa4:	20000744 	.word	0x20000744
 8002aa8:	20000438 	.word	0x20000438

08002aac <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    HAL_UART_RxCpltCallback(huart);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ffd5 	bl	8002a64 <HAL_UART_RxCpltCallback>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <UART_has_char>:

uint16_t UART_has_char()      // Return number of bytes in buffer
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <UART_has_char+0x3c>)
 8002aca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <UART_has_char+0x3c>)
 8002ad2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <UART_has_char+0x40>)
 8002ae0:	8812      	ldrh	r2, [r2, #0]
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	425a      	negs	r2, r3
 8002ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aee:	bf58      	it	pl
 8002af0:	4253      	negpl	r3, r2
 8002af2:	b29b      	uxth	r3, r3
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	200006c0 	.word	0x200006c0
 8002b04:	20000434 	.word	0x20000434

08002b08 <UART_receive>:

uint8_t UART_receive()       // Receive byte from buffer
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <UART_receive+0x38>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	b291      	uxth	r1, r2
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <UART_receive+0x38>)
 8002b18:	8011      	strh	r1, [r2, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <UART_receive+0x3c>)
 8002b1e:	5c9b      	ldrb	r3, [r3, r2]
 8002b20:	71fb      	strb	r3, [r7, #7]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <UART_receive+0x38>)
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2a:	d302      	bcc.n	8002b32 <UART_receive+0x2a>
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <UART_receive+0x38>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	801a      	strh	r2, [r3, #0]
    return tmp;
 8002b32:	79fb      	ldrb	r3, [r7, #7]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	20000434 	.word	0x20000434
 8002b44:	20000234 	.word	0x20000234

08002b48 <find>:

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e031      	b.n	8002bba <find+0x72>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e011      	b.n	8002b84 <find+0x3c>
			if(!arg2[k+1]) return (clibuf+(j+1));
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	3301      	adds	r3, #1
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <find+0x30>
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3301      	adds	r3, #1
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <find+0x8c>)
 8002b74:	4413      	add	r3, r2
 8002b76:	e027      	b.n	8002bc8 <find+0x80>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3301      	adds	r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <find+0x8c>)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	72fb      	strb	r3, [r7, #11]
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	3301      	adds	r3, #1
 8002b92:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <find+0x90>)
 8002b94:	4413      	add	r3, r2
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <find+0x5e>
 8002ba0:	7afb      	ldrb	r3, [r7, #11]
 8002ba2:	3320      	adds	r3, #32
 8002ba4:	e000      	b.n	8002ba8 <find+0x60>
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	440a      	add	r2, r1
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d0d5      	beq.n	8002b60 <find+0x18>
	for(i=0; clibuf[i]; i++)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <find+0x8c>)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1c7      	bne.n	8002b56 <find+0xe>
	return NULL;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	2000045c 	.word	0x2000045c
 8002bd8:	080123a8 	.word	0x080123a8

08002bdc <getval>:

char * getval(char *p, int32_t *val, int32_t min, int32_t max)		// get s32 value from cmdline
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	int32_t tmp = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
	if(*p == ' ') p++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d102      	bne.n	8002bfc <getval+0x20>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
	uint8_t sign = (*p == '-') ? 1:0;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b2d      	cmp	r3, #45	; 0x2d
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	74fb      	strb	r3, [r7, #19]
	while(*p)
 8002c0c:	e016      	b.n	8002c3c <getval+0x60>
	{
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b2f      	cmp	r3, #47	; 0x2f
 8002c14:	d916      	bls.n	8002c44 <getval+0x68>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b39      	cmp	r3, #57	; 0x39
 8002c1c:	d812      	bhi.n	8002c44 <getval+0x68>
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	3b30      	subs	r3, #48	; 0x30
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4413      	add	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
	while(*p)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e4      	bne.n	8002c0e <getval+0x32>
		else break;
	}
	if(sign) tmp = -tmp;
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <getval+0x74>
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	425b      	negs	r3, r3
 8002c4e:	617b      	str	r3, [r7, #20]
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	db07      	blt.n	8002c68 <getval+0x8c>
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	dc03      	bgt.n	8002c68 <getval+0x8c>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e002      	b.n	8002c6e <getval+0x92>
 8002c68:	4803      	ldr	r0, [pc, #12]	; (8002c78 <getval+0x9c>)
 8002c6a:	f00c f967 	bl	800ef3c <puts>
	return p;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	08011ae0 	.word	0x08011ae0

08002c7c <getFloat>:
	}
	printf("%s: %s\r\n", nam, dst);
}

char * getFloat (char *p, float *val, float min, float max)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c8a:	edc7 0a00 	vstr	s1, [r7]
	 char* pend;
	float tmp = 0;
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
		while(*p == ' ') p++;
 8002c94:	e002      	b.n	8002c9c <getFloat+0x20>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d0f8      	beq.n	8002c96 <getFloat+0x1a>
		tmp = strtof(p, &pend);
 8002ca4:	f107 0310 	add.w	r3, r7, #16
 8002ca8:	4619      	mov	r1, r3
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f00b fb64 	bl	800e378 <strtof>
 8002cb0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(tmp >= min && tmp <= max) {*val = tmp; return 1;} else { printf("Bad value\r\n"); return 0;}
 8002cb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	db0d      	blt.n	8002ce2 <getFloat+0x66>
 8002cc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cca:	edd7 7a00 	vldr	s15, [r7]
 8002cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	d804      	bhi.n	8002ce2 <getFloat+0x66>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e003      	b.n	8002cea <getFloat+0x6e>
 8002ce2:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <getFloat+0x78>)
 8002ce4:	f00c f92a 	bl	800ef3c <puts>
 8002ce8:	2300      	movs	r3, #0

}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	08011ae0 	.word	0x08011ae0

08002cf8 <CLI>:
    }
    *val = tmp;
    return p;
}

void CLI() {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
    int len = UART_has_char();
 8002cfe:	f7ff fee1 	bl	8002ac4 <UART_has_char>
 8002d02:	4603      	mov	r3, r0
 8002d04:	603b      	str	r3, [r7, #0]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00f      	beq.n	8002d2c <CLI+0x34>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	e008      	b.n	8002d24 <CLI+0x2c>
 8002d12:	f7ff fef9 	bl	8002b08 <UART_receive>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f80b 	bl	8002d34 <CLI_proc>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3301      	adds	r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dbf2      	blt.n	8002d12 <CLI+0x1a>
}
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <CLI_proc>:

void CLI_proc(char ch)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
	char *p;

	float tempfloat;
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8002d3e:	4b72      	ldr	r3, [pc, #456]	; (8002f08 <CLI_proc+0x1d4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b1f      	cmp	r3, #31
 8002d44:	d807      	bhi.n	8002d56 <CLI_proc+0x22>
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <CLI_proc+0x1d4>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	496e      	ldr	r1, [pc, #440]	; (8002f08 <CLI_proc+0x1d4>)
 8002d4e:	600a      	str	r2, [r1, #0]
 8002d50:	496e      	ldr	r1, [pc, #440]	; (8002f0c <CLI_proc+0x1d8>)
 8002d52:	79fa      	ldrb	r2, [r7, #7]
 8002d54:	54ca      	strb	r2, [r1, r3]
	if(ch == 10)	// LF
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b0a      	cmp	r3, #10
 8002d5a:	f040 80d2 	bne.w	8002f02 <CLI_proc+0x1ce>
	{
	    if(clibuf[cliptr-1] == 13) cliptr--;
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <CLI_proc+0x1d4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	4a69      	ldr	r2, [pc, #420]	; (8002f0c <CLI_proc+0x1d8>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	2b0d      	cmp	r3, #13
 8002d6a:	d104      	bne.n	8002d76 <CLI_proc+0x42>
 8002d6c:	4b66      	ldr	r3, [pc, #408]	; (8002f08 <CLI_proc+0x1d4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	4a65      	ldr	r2, [pc, #404]	; (8002f08 <CLI_proc+0x1d4>)
 8002d74:	6013      	str	r3, [r2, #0]
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 8002d76:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <CLI_proc+0x1d4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <CLI_proc+0x1d8>)
 8002d7e:	4413      	add	r3, r2
 8002d80:	4a61      	ldr	r2, [pc, #388]	; (8002f08 <CLI_proc+0x1d4>)
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f1c2 0220 	rsb	r2, r2, #32
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f00c f9b6 	bl	800f0fc <memset>
		cliptr = 0;
 8002d90:	4b5d      	ldr	r3, [pc, #372]	; (8002f08 <CLI_proc+0x1d4>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
// Main commands ------------------------------------------------------------------------------
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{help(); return;}
 8002d96:	485e      	ldr	r0, [pc, #376]	; (8002f10 <CLI_proc+0x1dc>)
 8002d98:	f7ff fed6 	bl	8002b48 <find>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a5d      	ldr	r2, [pc, #372]	; (8002f14 <CLI_proc+0x1e0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d006      	beq.n	8002db2 <CLI_proc+0x7e>
 8002da4:	485c      	ldr	r0, [pc, #368]	; (8002f18 <CLI_proc+0x1e4>)
 8002da6:	f7ff fecf 	bl	8002b48 <find>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4a5b      	ldr	r2, [pc, #364]	; (8002f1c <CLI_proc+0x1e8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d102      	bne.n	8002db8 <CLI_proc+0x84>
 8002db2:	f000 fc15 	bl	80035e0 <help>
 8002db6:	e0a4      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("cyclic")==clibuf+6) {cyclic = !cyclic; return;}
 8002db8:	4859      	ldr	r0, [pc, #356]	; (8002f20 <CLI_proc+0x1ec>)
 8002dba:	f7ff fec5 	bl	8002b48 <find>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <CLI_proc+0x1f0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10a      	bne.n	8002ddc <CLI_proc+0xa8>
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <CLI_proc+0x1f4>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <CLI_proc+0x1f4>)
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e092      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 8002ddc:	4853      	ldr	r0, [pc, #332]	; (8002f2c <CLI_proc+0x1f8>)
 8002dde:	f7ff feb3 	bl	8002b48 <find>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a52      	ldr	r2, [pc, #328]	; (8002f30 <CLI_proc+0x1fc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d105      	bne.n	8002df6 <CLI_proc+0xc2>
 8002dea:	22a0      	movs	r2, #160	; 0xa0
 8002dec:	2138      	movs	r1, #56	; 0x38
 8002dee:	4851      	ldr	r0, [pc, #324]	; (8002f34 <CLI_proc+0x200>)
 8002df0:	f003 f87e 	bl	8005ef0 <i2c_scan>
 8002df4:	e085      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults"); EEPROM_Load_defaults(); return;}
 8002df6:	4850      	ldr	r0, [pc, #320]	; (8002f38 <CLI_proc+0x204>)
 8002df8:	f7ff fea6 	bl	8002b48 <find>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4a4f      	ldr	r2, [pc, #316]	; (8002f3c <CLI_proc+0x208>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d105      	bne.n	8002e10 <CLI_proc+0xdc>
 8002e04:	484e      	ldr	r0, [pc, #312]	; (8002f40 <CLI_proc+0x20c>)
 8002e06:	f00c f833 	bl	800ee70 <iprintf>
 8002e0a:	f7fe fbb5 	bl	8001578 <EEPROM_Load_defaults>
 8002e0e:	e078      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 8002e10:	484c      	ldr	r0, [pc, #304]	; (8002f44 <CLI_proc+0x210>)
 8002e12:	f7ff fe99 	bl	8002b48 <find>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4a48      	ldr	r2, [pc, #288]	; (8002f3c <CLI_proc+0x208>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d102      	bne.n	8002e24 <CLI_proc+0xf0>
 8002e1e:	f7fe fcbf 	bl	80017a0 <EEPROM_Print_config>
 8002e22:	e06e      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",EEPROM_Load_config()); return;}
 8002e24:	4848      	ldr	r0, [pc, #288]	; (8002f48 <CLI_proc+0x214>)
 8002e26:	f7ff fe8f 	bl	8002b48 <find>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4a47      	ldr	r2, [pc, #284]	; (8002f4c <CLI_proc+0x218>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d107      	bne.n	8002e42 <CLI_proc+0x10e>
 8002e32:	f7fe fc01 	bl	8001638 <EEPROM_Load_config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4845      	ldr	r0, [pc, #276]	; (8002f50 <CLI_proc+0x21c>)
 8002e3c:	f00c f818 	bl	800ee70 <iprintf>
 8002e40:	e05f      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",EEPROM_Save_config()); return;}
 8002e42:	4844      	ldr	r0, [pc, #272]	; (8002f54 <CLI_proc+0x220>)
 8002e44:	f7ff fe80 	bl	8002b48 <find>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4a40      	ldr	r2, [pc, #256]	; (8002f4c <CLI_proc+0x218>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d107      	bne.n	8002e60 <CLI_proc+0x12c>
 8002e50:	f7fe fb60 	bl	8001514 <EEPROM_Save_config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4619      	mov	r1, r3
 8002e58:	483f      	ldr	r0, [pc, #252]	; (8002f58 <CLI_proc+0x224>)
 8002e5a:	f00c f809 	bl	800ee70 <iprintf>
 8002e5e:	e050      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 8002e60:	483e      	ldr	r0, [pc, #248]	; (8002f5c <CLI_proc+0x228>)
 8002e62:	f7ff fe71 	bl	8002b48 <find>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4a3d      	ldr	r2, [pc, #244]	; (8002f60 <CLI_proc+0x22c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d113      	bne.n	8002e96 <CLI_proc+0x162>
 8002e6e:	483d      	ldr	r0, [pc, #244]	; (8002f64 <CLI_proc+0x230>)
 8002e70:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002e74:	2200      	movs	r2, #0
 8002e76:	493c      	ldr	r1, [pc, #240]	; (8002f68 <CLI_proc+0x234>)
 8002e78:	f7ff feb0 	bl	8002bdc <getval>
 8002e7c:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <CLI_proc+0x234>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <CLI_proc+0x238>)
 8002e84:	80da      	strh	r2, [r3, #6]
 8002e86:	4b39      	ldr	r3, [pc, #228]	; (8002f6c <CLI_proc+0x238>)
 8002e88:	88db      	ldrh	r3, [r3, #6]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4838      	ldr	r0, [pc, #224]	; (8002f70 <CLI_proc+0x23c>)
 8002e90:	f00b ffee 	bl	800ee70 <iprintf>
 8002e94:	e035      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 8002e96:	4837      	ldr	r0, [pc, #220]	; (8002f74 <CLI_proc+0x240>)
 8002e98:	f7ff fe56 	bl	8002b48 <find>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <CLI_proc+0x208>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d11a      	bne.n	8002eda <CLI_proc+0x1a6>
 8002ea4:	4a2e      	ldr	r2, [pc, #184]	; (8002f60 <CLI_proc+0x22c>)
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002eae:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	f7ff fee1 	bl	8002c7c <getFloat>
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <CLI_proc+0x238>)
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <CLI_proc+0x238>)
 8002ec4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd fb3d 	bl	8000548 <__aeabi_f2d>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4829      	ldr	r0, [pc, #164]	; (8002f78 <CLI_proc+0x244>)
 8002ed4:	f00b ffcc 	bl	800ee70 <iprintf>
 8002ed8:	e013      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("setoffset")==clibuf+9){setOffset();return;}
 8002eda:	4828      	ldr	r0, [pc, #160]	; (8002f7c <CLI_proc+0x248>)
 8002edc:	f7ff fe34 	bl	8002b48 <find>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4a27      	ldr	r2, [pc, #156]	; (8002f80 <CLI_proc+0x24c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d102      	bne.n	8002eee <CLI_proc+0x1ba>
 8002ee8:	f000 f84e 	bl	8002f88 <setOffset>
 8002eec:	e009      	b.n	8002f02 <CLI_proc+0x1ce>
		if(find("temp2calib")==clibuf+10){temp2calib();return;}
 8002eee:	4825      	ldr	r0, [pc, #148]	; (8002f84 <CLI_proc+0x250>)
 8002ef0:	f7ff fe2a 	bl	8002b48 <find>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <CLI_proc+0x218>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d102      	bne.n	8002f02 <CLI_proc+0x1ce>
 8002efc:	f000 fa1e 	bl	800333c <temp2calib>
 8002f00:	bf00      	nop
//                return;
//            }
//
//        }
	}
}
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	2000047c 	.word	0x2000047c
 8002f0c:	2000045c 	.word	0x2000045c
 8002f10:	08011b04 	.word	0x08011b04
 8002f14:	2000045d 	.word	0x2000045d
 8002f18:	08011b08 	.word	0x08011b08
 8002f1c:	20000460 	.word	0x20000460
 8002f20:	08011b10 	.word	0x08011b10
 8002f24:	20000462 	.word	0x20000462
 8002f28:	200007c9 	.word	0x200007c9
 8002f2c:	08011b18 	.word	0x08011b18
 8002f30:	20000463 	.word	0x20000463
 8002f34:	200005cc 	.word	0x200005cc
 8002f38:	08011b20 	.word	0x08011b20
 8002f3c:	20000467 	.word	0x20000467
 8002f40:	08011b2c 	.word	0x08011b2c
 8002f44:	08011b48 	.word	0x08011b48
 8002f48:	08011b54 	.word	0x08011b54
 8002f4c:	20000466 	.word	0x20000466
 8002f50:	08011b60 	.word	0x08011b60
 8002f54:	08011b88 	.word	0x08011b88
 8002f58:	08011b94 	.word	0x08011b94
 8002f5c:	08011bd4 	.word	0x08011bd4
 8002f60:	20000468 	.word	0x20000468
 8002f64:	20000469 	.word	0x20000469
 8002f68:	20000458 	.word	0x20000458
 8002f6c:	20000890 	.word	0x20000890
 8002f70:	08011be4 	.word	0x08011be4
 8002f74:	08011bf4 	.word	0x08011bf4
 8002f78:	08011c00 	.word	0x08011c00
 8002f7c:	08011c14 	.word	0x08011c14
 8002f80:	20000465 	.word	0x20000465
 8002f84:	08011c20 	.word	0x08011c20

08002f88 <setOffset>:


void setOffset(void)
{ float valtostore;
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0

switch (clibuf[10])
 8002f8e:	4bb4      	ldr	r3, [pc, #720]	; (8003260 <setOffset+0x2d8>)
 8002f90:	7a9b      	ldrb	r3, [r3, #10]
 8002f92:	2b74      	cmp	r3, #116	; 0x74
 8002f94:	f000 80dc 	beq.w	8003150 <setOffset+0x1c8>
 8002f98:	2b74      	cmp	r3, #116	; 0x74
 8002f9a:	f300 81b3 	bgt.w	8003304 <setOffset+0x37c>
 8002f9e:	2b68      	cmp	r3, #104	; 0x68
 8002fa0:	d002      	beq.n	8002fa8 <setOffset+0x20>
 8002fa2:	2b70      	cmp	r3, #112	; 0x70
 8002fa4:	d06a      	beq.n	800307c <setOffset+0xf4>
 8002fa6:	e1ad      	b.n	8003304 <setOffset+0x37c>
{

case 'h':
	if(find("sht3")==clibuf+16)
 8002fa8:	48ae      	ldr	r0, [pc, #696]	; (8003264 <setOffset+0x2dc>)
 8002faa:	f7ff fdcd 	bl	8002b48 <find>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4aad      	ldr	r2, [pc, #692]	; (8003268 <setOffset+0x2e0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d11a      	bne.n	8002fec <setOffset+0x64>
	{
		if (getFloat(clibuf+17, &valtostore, MIN_OFFSET, MAX_OFFSET))
 8002fb6:	4aad      	ldr	r2, [pc, #692]	; (800326c <setOffset+0x2e4>)
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002fbe:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7ff fe59 	bl	8002c7c <getFloat>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <setOffset+0x4e>
		{config.SHT3_h_offset=valtostore;}
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4ba7      	ldr	r3, [pc, #668]	; (8003270 <setOffset+0x2e8>)
 8002fd4:	611a      	str	r2, [r3, #16]
		printf("SHT3 hum offset:%f \r\n",config.SHT3_h_offset);
 8002fd6:	4ba6      	ldr	r3, [pc, #664]	; (8003270 <setOffset+0x2e8>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fab4 	bl	8000548 <__aeabi_f2d>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	48a3      	ldr	r0, [pc, #652]	; (8003274 <setOffset+0x2ec>)
 8002fe6:	f00b ff43 	bl	800ee70 <iprintf>
		return;
 8002fea:	e193      	b.n	8003314 <setOffset+0x38c>
		break;
	}

	if(find("ms8607")==clibuf+18)
 8002fec:	48a2      	ldr	r0, [pc, #648]	; (8003278 <setOffset+0x2f0>)
 8002fee:	f7ff fdab 	bl	8002b48 <find>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4aa1      	ldr	r2, [pc, #644]	; (800327c <setOffset+0x2f4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d11a      	bne.n	8003030 <setOffset+0xa8>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 8002ffa:	4aa1      	ldr	r2, [pc, #644]	; (8003280 <setOffset+0x2f8>)
 8002ffc:	1d3b      	adds	r3, r7, #4
 8002ffe:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003002:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f7ff fe37 	bl	8002c7c <getFloat>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <setOffset+0x92>
		{config.MS8607_h_offset=valtostore;}
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4b96      	ldr	r3, [pc, #600]	; (8003270 <setOffset+0x2e8>)
 8003018:	619a      	str	r2, [r3, #24]
		printf("MS8607 hump offset:%f \r\n",config.MS8607_h_offset);
 800301a:	4b95      	ldr	r3, [pc, #596]	; (8003270 <setOffset+0x2e8>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fa92 	bl	8000548 <__aeabi_f2d>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4896      	ldr	r0, [pc, #600]	; (8003284 <setOffset+0x2fc>)
 800302a:	f00b ff21 	bl	800ee70 <iprintf>
		return;
 800302e:	e171      	b.n	8003314 <setOffset+0x38c>
		break;
	}
	if(find("bme280")==clibuf+18)
 8003030:	4895      	ldr	r0, [pc, #596]	; (8003288 <setOffset+0x300>)
 8003032:	f7ff fd89 	bl	8002b48 <find>
 8003036:	4603      	mov	r3, r0
 8003038:	4a90      	ldr	r2, [pc, #576]	; (800327c <setOffset+0x2f4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11a      	bne.n	8003074 <setOffset+0xec>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 800303e:	4a90      	ldr	r2, [pc, #576]	; (8003280 <setOffset+0x2f8>)
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003046:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f7ff fe15 	bl	8002c7c <getFloat>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <setOffset+0xd6>
		{config.BME280_h_offset=valtostore;}
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4b85      	ldr	r3, [pc, #532]	; (8003270 <setOffset+0x2e8>)
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
		printf("BME280 hum offset:%f \r\n",config.BME280_h_offset);
 800305e:	4b84      	ldr	r3, [pc, #528]	; (8003270 <setOffset+0x2e8>)
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa70 	bl	8000548 <__aeabi_f2d>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4887      	ldr	r0, [pc, #540]	; (800328c <setOffset+0x304>)
 800306e:	f00b feff 	bl	800ee70 <iprintf>
		return;
 8003072:	e14f      	b.n	8003314 <setOffset+0x38c>
		break;
	}

	printf("unknown sensor");
 8003074:	4886      	ldr	r0, [pc, #536]	; (8003290 <setOffset+0x308>)
 8003076:	f00b fefb 	bl	800ee70 <iprintf>
	break;
 800307a:	e147      	b.n	800330c <setOffset+0x384>
case 'p':
	if(find("ms8607")==clibuf+18)
 800307c:	487e      	ldr	r0, [pc, #504]	; (8003278 <setOffset+0x2f0>)
 800307e:	f7ff fd63 	bl	8002b48 <find>
 8003082:	4603      	mov	r3, r0
 8003084:	4a7d      	ldr	r2, [pc, #500]	; (800327c <setOffset+0x2f4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d11a      	bne.n	80030c0 <setOffset+0x138>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 800308a:	4a7d      	ldr	r2, [pc, #500]	; (8003280 <setOffset+0x2f8>)
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003092:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f7ff fdef 	bl	8002c7c <getFloat>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <setOffset+0x122>
		{config.MS8607_p_offset=valtostore;}
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4b72      	ldr	r3, [pc, #456]	; (8003270 <setOffset+0x2e8>)
 80030a8:	61da      	str	r2, [r3, #28]
		printf("MS8607 press offset:%f \r\n",config.MS8607_p_offset);
 80030aa:	4b71      	ldr	r3, [pc, #452]	; (8003270 <setOffset+0x2e8>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa4a 	bl	8000548 <__aeabi_f2d>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4876      	ldr	r0, [pc, #472]	; (8003294 <setOffset+0x30c>)
 80030ba:	f00b fed9 	bl	800ee70 <iprintf>
		return;
 80030be:	e129      	b.n	8003314 <setOffset+0x38c>
		break;
	}
	if(find("bme280")==clibuf+18)
 80030c0:	4871      	ldr	r0, [pc, #452]	; (8003288 <setOffset+0x300>)
 80030c2:	f7ff fd41 	bl	8002b48 <find>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a6c      	ldr	r2, [pc, #432]	; (800327c <setOffset+0x2f4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d11a      	bne.n	8003104 <setOffset+0x17c>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 80030ce:	4a6c      	ldr	r2, [pc, #432]	; (8003280 <setOffset+0x2f8>)
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80030d6:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f7ff fdcd 	bl	8002c7c <getFloat>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <setOffset+0x166>
		{config.BME280_p_offset=valtostore;}
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4b61      	ldr	r3, [pc, #388]	; (8003270 <setOffset+0x2e8>)
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
		printf("BME280 press offset:%f \r\n",config.BME280_p_offset);
 80030ee:	4b60      	ldr	r3, [pc, #384]	; (8003270 <setOffset+0x2e8>)
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fa28 	bl	8000548 <__aeabi_f2d>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4866      	ldr	r0, [pc, #408]	; (8003298 <setOffset+0x310>)
 80030fe:	f00b feb7 	bl	800ee70 <iprintf>
		return;
 8003102:	e107      	b.n	8003314 <setOffset+0x38c>
		break;
	}
	if(find("dps368")==clibuf+18)
 8003104:	4865      	ldr	r0, [pc, #404]	; (800329c <setOffset+0x314>)
 8003106:	f7ff fd1f 	bl	8002b48 <find>
 800310a:	4603      	mov	r3, r0
 800310c:	4a5b      	ldr	r2, [pc, #364]	; (800327c <setOffset+0x2f4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d11a      	bne.n	8003148 <setOffset+0x1c0>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 8003112:	4a5b      	ldr	r2, [pc, #364]	; (8003280 <setOffset+0x2f8>)
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800311a:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f7ff fdab 	bl	8002c7c <getFloat>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <setOffset+0x1aa>
		{config.DPS368_p_offset=valtostore;}
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4b50      	ldr	r3, [pc, #320]	; (8003270 <setOffset+0x2e8>)
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
		printf("DPS368 press offset:%f \r\n",config.DPS368_p_offset);
 8003132:	4b4f      	ldr	r3, [pc, #316]	; (8003270 <setOffset+0x2e8>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fa06 	bl	8000548 <__aeabi_f2d>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4857      	ldr	r0, [pc, #348]	; (80032a0 <setOffset+0x318>)
 8003142:	f00b fe95 	bl	800ee70 <iprintf>
		return;
 8003146:	e0e5      	b.n	8003314 <setOffset+0x38c>
		break;
	}
	printf("unknown sensor");
 8003148:	4851      	ldr	r0, [pc, #324]	; (8003290 <setOffset+0x308>)
 800314a:	f00b fe91 	bl	800ee70 <iprintf>
	break;
 800314e:	e0dd      	b.n	800330c <setOffset+0x384>
case 't':
	if(find("tmp117")==clibuf+18)
 8003150:	4854      	ldr	r0, [pc, #336]	; (80032a4 <setOffset+0x31c>)
 8003152:	f7ff fcf9 	bl	8002b48 <find>
 8003156:	4603      	mov	r3, r0
 8003158:	4a48      	ldr	r2, [pc, #288]	; (800327c <setOffset+0x2f4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d11a      	bne.n	8003194 <setOffset+0x20c>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 800315e:	4a48      	ldr	r2, [pc, #288]	; (8003280 <setOffset+0x2f8>)
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003166:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f7ff fd85 	bl	8002c7c <getFloat>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <setOffset+0x1f6>
		{config.TMP117_t_offset=valtostore;}
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <setOffset+0x2e8>)
 800317c:	609a      	str	r2, [r3, #8]
		printf("TMP117 temp offset:%f \r\n",config.TMP117_t_offset);
 800317e:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <setOffset+0x2e8>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd f9e0 	bl	8000548 <__aeabi_f2d>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4846      	ldr	r0, [pc, #280]	; (80032a8 <setOffset+0x320>)
 800318e:	f00b fe6f 	bl	800ee70 <iprintf>
		return;
 8003192:	e0bf      	b.n	8003314 <setOffset+0x38c>
		break;
	}

	if(find("sht3")==clibuf+16)
 8003194:	4833      	ldr	r0, [pc, #204]	; (8003264 <setOffset+0x2dc>)
 8003196:	f7ff fcd7 	bl	8002b48 <find>
 800319a:	4603      	mov	r3, r0
 800319c:	4a32      	ldr	r2, [pc, #200]	; (8003268 <setOffset+0x2e0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d11a      	bne.n	80031d8 <setOffset+0x250>
	{
		if (getFloat(clibuf+17, &valtostore, MIN_OFFSET, MAX_OFFSET))
 80031a2:	4a32      	ldr	r2, [pc, #200]	; (800326c <setOffset+0x2e4>)
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80031aa:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f7ff fd63 	bl	8002c7c <getFloat>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <setOffset+0x23a>
		{config.SHT3_t_offset=valtostore;}
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <setOffset+0x2e8>)
 80031c0:	60da      	str	r2, [r3, #12]
		printf("SHT3 temp offset:%f \r\n",config.SHT3_t_offset);
 80031c2:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <setOffset+0x2e8>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f9be 	bl	8000548 <__aeabi_f2d>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4836      	ldr	r0, [pc, #216]	; (80032ac <setOffset+0x324>)
 80031d2:	f00b fe4d 	bl	800ee70 <iprintf>
		return;
 80031d6:	e09d      	b.n	8003314 <setOffset+0x38c>
		break;
	}

	if(find("ms8607")==clibuf+18)
 80031d8:	4827      	ldr	r0, [pc, #156]	; (8003278 <setOffset+0x2f0>)
 80031da:	f7ff fcb5 	bl	8002b48 <find>
 80031de:	4603      	mov	r3, r0
 80031e0:	4a26      	ldr	r2, [pc, #152]	; (800327c <setOffset+0x2f4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d11a      	bne.n	800321c <setOffset+0x294>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <setOffset+0x2f8>)
 80031e8:	1d3b      	adds	r3, r7, #4
 80031ea:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80031ee:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7ff fd41 	bl	8002c7c <getFloat>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <setOffset+0x27e>
		{config.MS8607_t_offset=valtostore;}
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <setOffset+0x2e8>)
 8003204:	615a      	str	r2, [r3, #20]
		printf("MS8607 temp offset:%f \r\n",config.MS8607_t_offset);
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <setOffset+0x2e8>)
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd f99c 	bl	8000548 <__aeabi_f2d>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4826      	ldr	r0, [pc, #152]	; (80032b0 <setOffset+0x328>)
 8003216:	f00b fe2b 	bl	800ee70 <iprintf>
		return;
 800321a:	e07b      	b.n	8003314 <setOffset+0x38c>
		break;
	}
	if(find("bme280")==clibuf+18)
 800321c:	481a      	ldr	r0, [pc, #104]	; (8003288 <setOffset+0x300>)
 800321e:	f7ff fc93 	bl	8002b48 <find>
 8003222:	4603      	mov	r3, r0
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <setOffset+0x2f4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d146      	bne.n	80032b8 <setOffset+0x330>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 800322a:	4a15      	ldr	r2, [pc, #84]	; (8003280 <setOffset+0x2f8>)
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003232:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f7ff fd1f 	bl	8002c7c <getFloat>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <setOffset+0x2c2>
		{config.BME280_t_offset=valtostore;}
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <setOffset+0x2e8>)
 8003248:	621a      	str	r2, [r3, #32]
		printf("BME280 temp offset:%f \r\n",config.BME280_t_offset);
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <setOffset+0x2e8>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f97a 	bl	8000548 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4816      	ldr	r0, [pc, #88]	; (80032b4 <setOffset+0x32c>)
 800325a:	f00b fe09 	bl	800ee70 <iprintf>
		return;
 800325e:	e059      	b.n	8003314 <setOffset+0x38c>
 8003260:	2000045c 	.word	0x2000045c
 8003264:	08011c2c 	.word	0x08011c2c
 8003268:	2000046c 	.word	0x2000046c
 800326c:	2000046d 	.word	0x2000046d
 8003270:	20000890 	.word	0x20000890
 8003274:	08011c34 	.word	0x08011c34
 8003278:	08011c4c 	.word	0x08011c4c
 800327c:	2000046e 	.word	0x2000046e
 8003280:	2000046f 	.word	0x2000046f
 8003284:	08011c54 	.word	0x08011c54
 8003288:	08011c70 	.word	0x08011c70
 800328c:	08011c78 	.word	0x08011c78
 8003290:	08011c90 	.word	0x08011c90
 8003294:	08011ca0 	.word	0x08011ca0
 8003298:	08011cbc 	.word	0x08011cbc
 800329c:	08011cd8 	.word	0x08011cd8
 80032a0:	08011ce0 	.word	0x08011ce0
 80032a4:	08011cfc 	.word	0x08011cfc
 80032a8:	08011d04 	.word	0x08011d04
 80032ac:	08011d20 	.word	0x08011d20
 80032b0:	08011d38 	.word	0x08011d38
 80032b4:	08011d54 	.word	0x08011d54
		break;
	}
	if(find("dps368")==clibuf+18)
 80032b8:	4818      	ldr	r0, [pc, #96]	; (800331c <setOffset+0x394>)
 80032ba:	f7ff fc45 	bl	8002b48 <find>
 80032be:	4603      	mov	r3, r0
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <setOffset+0x398>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d11a      	bne.n	80032fc <setOffset+0x374>
	{
		if (getFloat(clibuf+19, &valtostore, MIN_OFFSET, MAX_OFFSET))
 80032c6:	4a17      	ldr	r2, [pc, #92]	; (8003324 <setOffset+0x39c>)
 80032c8:	1d3b      	adds	r3, r7, #4
 80032ca:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80032ce:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7ff fcd1 	bl	8002c7c <getFloat>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <setOffset+0x35e>
		{config.DPS368_t_offset=valtostore;}
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <setOffset+0x3a0>)
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c
		printf("DPS368 temp offset:%f \r\n",config.DPS368_t_offset);
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <setOffset+0x3a0>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f92c 	bl	8000548 <__aeabi_f2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <setOffset+0x3a4>)
 80032f6:	f00b fdbb 	bl	800ee70 <iprintf>
		return;
 80032fa:	e00b      	b.n	8003314 <setOffset+0x38c>
		break;
	}
	printf("unknown sensor");
 80032fc:	480c      	ldr	r0, [pc, #48]	; (8003330 <setOffset+0x3a8>)
 80032fe:	f00b fdb7 	bl	800ee70 <iprintf>
	break;
 8003302:	e003      	b.n	800330c <setOffset+0x384>

default:
	printf( "unknown parameter");
 8003304:	480b      	ldr	r0, [pc, #44]	; (8003334 <setOffset+0x3ac>)
 8003306:	f00b fdb3 	bl	800ee70 <iprintf>
	break;
 800330a:	bf00      	nop
}

printf("bad parameters. usage: setoffset X YYYY ff.fff | x:t/p/h | Y:sensor name | ff.fff: offset\r\n");
 800330c:	480a      	ldr	r0, [pc, #40]	; (8003338 <setOffset+0x3b0>)
 800330e:	f00b fe15 	bl	800ef3c <puts>
return;
 8003312:	bf00      	nop
}
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	08011cd8 	.word	0x08011cd8
 8003320:	2000046e 	.word	0x2000046e
 8003324:	2000046f 	.word	0x2000046f
 8003328:	20000890 	.word	0x20000890
 800332c:	08011d70 	.word	0x08011d70
 8003330:	08011c90 	.word	0x08011c90
 8003334:	08011d8c 	.word	0x08011d8c
 8003338:	08011da0 	.word	0x08011da0

0800333c <temp2calib>:



void temp2calib()
{	uint32_t nexttimestamp,currtimestamp;
 800333c:	b5b0      	push	{r4, r5, r7, lr}
 800333e:	b0a2      	sub	sp, #136	; 0x88
 8003340:	af02      	add	r7, sp, #8
	currtimestamp=HAL_GetTick();
 8003342:	f003 fa0d 	bl	8006760 <HAL_GetTick>
 8003346:	67f8      	str	r0, [r7, #124]	; 0x7c
	nexttimestamp=0;
 8003348:	2300      	movs	r3, #0
 800334a:	66fb      	str	r3, [r7, #108]	; 0x6c

	//float temps[5][255];
	float tempmeas[5];
	int tempptr=0;
 800334c:	2300      	movs	r3, #0
 800334e:	66bb      	str	r3, [r7, #104]	; 0x68
	uint8_t sensors[5];
	char formatstr[10];
	uint32_t interval,counts,format;
	char sensorstring[5][10]={"SHTC3\0","TMP117\0","MS8607\0","BME280\0","DPS368\0"};
 8003350:	4b94      	ldr	r3, [pc, #592]	; (80035a4 <temp2calib+0x268>)
 8003352:	463c      	mov	r4, r7
 8003354:	461d      	mov	r5, r3
 8003356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800335a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800335c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800335e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	8023      	strh	r3, [r4, #0]

	tempptr=getval(clibuf+11, &temp, 0, 10);
 8003366:	4890      	ldr	r0, [pc, #576]	; (80035a8 <temp2calib+0x26c>)
 8003368:	230a      	movs	r3, #10
 800336a:	2200      	movs	r2, #0
 800336c:	498f      	ldr	r1, [pc, #572]	; (80035ac <temp2calib+0x270>)
 800336e:	f7ff fc35 	bl	8002bdc <getval>
 8003372:	4603      	mov	r3, r0
 8003374:	66bb      	str	r3, [r7, #104]	; 0x68
	interval=temp;
 8003376:	4b8d      	ldr	r3, [pc, #564]	; (80035ac <temp2calib+0x270>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	667b      	str	r3, [r7, #100]	; 0x64
	tempptr=getval(tempptr+1, &temp, 1, 255);
 800337c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800337e:	3301      	adds	r3, #1
 8003380:	4618      	mov	r0, r3
 8003382:	23ff      	movs	r3, #255	; 0xff
 8003384:	2201      	movs	r2, #1
 8003386:	4989      	ldr	r1, [pc, #548]	; (80035ac <temp2calib+0x270>)
 8003388:	f7ff fc28 	bl	8002bdc <getval>
 800338c:	4603      	mov	r3, r0
 800338e:	66bb      	str	r3, [r7, #104]	; 0x68
	counts=temp;
 8003390:	4b86      	ldr	r3, [pc, #536]	; (80035ac <temp2calib+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
	tempptr=getval(tempptr+1, &temp, 1, 2);
 8003396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003398:	3301      	adds	r3, #1
 800339a:	4618      	mov	r0, r3
 800339c:	2302      	movs	r3, #2
 800339e:	2201      	movs	r2, #1
 80033a0:	4982      	ldr	r1, [pc, #520]	; (80035ac <temp2calib+0x270>)
 80033a2:	f7ff fc1b 	bl	8002bdc <getval>
 80033a6:	4603      	mov	r3, r0
 80033a8:	66bb      	str	r3, [r7, #104]	; 0x68
	format=temp;
 80033aa:	4b80      	ldr	r3, [pc, #512]	; (80035ac <temp2calib+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	switch (format)
 80033b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d003      	beq.n	80033be <temp2calib+0x82>
 80033b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d005      	beq.n	80033c8 <temp2calib+0x8c>
 80033bc:	e009      	b.n	80033d2 <temp2calib+0x96>
		{
		case 1:
			strcpy(formatstr,"CSV");
 80033be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033c2:	4a7b      	ldr	r2, [pc, #492]	; (80035b0 <temp2calib+0x274>)
 80033c4:	601a      	str	r2, [r3, #0]
			break;
 80033c6:	e009      	b.n	80033dc <temp2calib+0xa0>
		case 2:
			strcpy(formatstr,"TXT");
 80033c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033cc:	4a79      	ldr	r2, [pc, #484]	; (80035b4 <temp2calib+0x278>)
 80033ce:	601a      	str	r2, [r3, #0]
			break;
 80033d0:	e004      	b.n	80033dc <temp2calib+0xa0>
		default:
			strcpy(formatstr,"ERR");
 80033d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033d6:	4a78      	ldr	r2, [pc, #480]	; (80035b8 <temp2calib+0x27c>)
 80033d8:	601a      	str	r2, [r3, #0]
			break;
 80033da:	bf00      	nop

		}
	printf("Temp2calib! Interval: %i s, No. measures: %i, formatval: %i format: %s\r\n",interval, counts, format,  formatstr);
 80033dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80033e8:	4874      	ldr	r0, [pc, #464]	; (80035bc <temp2calib+0x280>)
 80033ea:	f00b fd41 	bl	800ee70 <iprintf>
	sensors[0]= SHTC3_check();
 80033ee:	f002 ff2f 	bl	8006250 <SHTC3_check>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	sensors[1]= TMP117_check();
 80033f8:	f002 fe22 	bl	8006040 <TMP117_check>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	sensors[2]= MS8607_check();
 8003402:	f002 febd 	bl	8006180 <MS8607_check>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	sensors[3]= BME280_check();
 800340c:	f003 f854 	bl	80064b8 <BME280_check>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	sensors[4]= DPS368_check();
 8003416:	f000 f98b 	bl	8003730 <DPS368_check>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

//	sensors[3]=0;


	if (format==1){printf("Meas_id;Timestamp;");}
 8003420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <temp2calib+0xf0>
 8003426:	4866      	ldr	r0, [pc, #408]	; (80035c0 <temp2calib+0x284>)
 8003428:	f00b fd22 	bl	800ee70 <iprintf>
	for (int i=0;i<5;i++)
 800342c:	2300      	movs	r3, #0
 800342e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003430:	e017      	b.n	8003462 <temp2calib+0x126>
		{if (sensors[i]) {
 8003432:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003438:	4413      	add	r3, r2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <temp2calib+0x120>
			if (format==1){printf("%s;",sensorstring[i]);}}}
 8003440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10a      	bne.n	800345c <temp2calib+0x120>
 8003446:	4639      	mov	r1, r7
 8003448:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	440b      	add	r3, r1
 8003454:	4619      	mov	r1, r3
 8003456:	485b      	ldr	r0, [pc, #364]	; (80035c4 <temp2calib+0x288>)
 8003458:	f00b fd0a 	bl	800ee70 <iprintf>
	for (int i=0;i<5;i++)
 800345c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800345e:	3301      	adds	r3, #1
 8003460:	67bb      	str	r3, [r7, #120]	; 0x78
 8003462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003464:	2b04      	cmp	r3, #4
 8003466:	dde4      	ble.n	8003432 <temp2calib+0xf6>
	printf("\r\n");
 8003468:	4857      	ldr	r0, [pc, #348]	; (80035c8 <temp2calib+0x28c>)
 800346a:	f00b fd67 	bl	800ef3c <puts>


	int measurecount=0;
 800346e:	2300      	movs	r3, #0
 8003470:	677b      	str	r3, [r7, #116]	; 0x74

	for (measurecount=0; measurecount<counts; measurecount++)
 8003472:	2300      	movs	r3, #0
 8003474:	677b      	str	r3, [r7, #116]	; 0x74
 8003476:	e089      	b.n	800358c <temp2calib+0x250>
	{	nexttimestamp=currtimestamp+1000*interval;
 8003478:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800347a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003484:	4413      	add	r3, r2
 8003486:	66fb      	str	r3, [r7, #108]	; 0x6c
		do
				{currtimestamp=HAL_GetTick();
 8003488:	f003 f96a 	bl	8006760 <HAL_GetTick>
 800348c:	67f8      	str	r0, [r7, #124]	; 0x7c
				} while(nexttimestamp>currtimestamp);
 800348e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003492:	429a      	cmp	r2, r3
 8003494:	d8f8      	bhi.n	8003488 <temp2calib+0x14c>
		if (format==1){printf("%i;%i;",measurecount+1,currtimestamp);}
 8003496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <temp2calib+0x16e>
 800349c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349e:	3301      	adds	r3, #1
 80034a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034a2:	4619      	mov	r1, r3
 80034a4:	4849      	ldr	r0, [pc, #292]	; (80035cc <temp2calib+0x290>)
 80034a6:	f00b fce3 	bl	800ee70 <iprintf>
		if (format==2){printf("ID:%3i Timestamp; %7i ",measurecount+1,currtimestamp);}
 80034aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d106      	bne.n	80034be <temp2calib+0x182>
 80034b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b2:	3301      	adds	r3, #1
 80034b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80034b6:	4619      	mov	r1, r3
 80034b8:	4845      	ldr	r0, [pc, #276]	; (80035d0 <temp2calib+0x294>)
 80034ba:	f00b fcd9 	bl	800ee70 <iprintf>

		if (sensors[0]==1)
 80034be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d106      	bne.n	80034d4 <temp2calib+0x198>
		{
		//temps[0][measurecount]=SHTC3_get_temp(0);
			tempmeas[0]=SHTC3_get_temp(0);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f002 ff22 	bl	8006310 <SHTC3_get_temp>
 80034cc:	eef0 7a40 	vmov.f32	s15, s0
 80034d0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

		}

		if (sensors[1]==1)
 80034d4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d106      	bne.n	80034ea <temp2calib+0x1ae>
				{
				//temps[1][measurecount]=TMP117_get_temp(avg8);
				tempmeas[1]=TMP117_get_temp(avg8);
 80034dc:	2020      	movs	r0, #32
 80034de:	f002 fdf7 	bl	80060d0 <TMP117_get_temp>
 80034e2:	eef0 7a40 	vmov.f32	s15, s0
 80034e6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				}

	if (sensors[2]==1){
 80034ea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <temp2calib+0x1c2>
	//temps[2][measurecount]=MS8607_get_temp();
	tempmeas[2]=MS8607_get_temp();
 80034f2:	f002 fe5d 	bl	80061b0 <MS8607_get_temp>
 80034f6:	eef0 7a40 	vmov.f32	s15, s0
 80034fa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	 }

	if (sensors[3]==1)
 80034fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <temp2calib+0x1d6>
			{
			//temps[3][measurecount]= BME280_get_temp();
		tempmeas[3]=BME280_get_temp();
 8003506:	f003 f86d 	bl	80065e4 <BME280_get_temp>
 800350a:	eef0 7a40 	vmov.f32	s15, s0
 800350e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

			}

	if (sensors[4]==1)
 8003512:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003516:	2b01      	cmp	r3, #1
 8003518:	d106      	bne.n	8003528 <temp2calib+0x1ec>
				{
		//temps[3][measurecount]= DPS368_get_temp_cmd(0);
		tempmeas[4]=DPS368_get_temp_cmd(0);
 800351a:	2000      	movs	r0, #0
 800351c:	f000 fbd2 	bl	8003cc4 <DPS368_get_temp_cmd>
 8003520:	eef0 7a40 	vmov.f32	s15, s0
 8003524:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

				}

	for (int i=0;i<5;i++)
 8003528:	2300      	movs	r3, #0
 800352a:	673b      	str	r3, [r7, #112]	; 0x70
 800352c:	e025      	b.n	800357a <temp2calib+0x23e>
	{
		if (sensors[i])
 800352e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003534:	4413      	add	r3, r2
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <temp2calib+0x238>
			{
			if (format==2)
 800353c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353e:	2b02      	cmp	r3, #2
 8003540:	d10a      	bne.n	8003558 <temp2calib+0x21c>
			{printf(" %s: ",sensorstring[i] );}
 8003542:	4639      	mov	r1, r7
 8003544:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	440b      	add	r3, r1
 8003550:	4619      	mov	r1, r3
 8003552:	4820      	ldr	r0, [pc, #128]	; (80035d4 <temp2calib+0x298>)
 8003554:	f00b fc8c 	bl	800ee70 <iprintf>
		//printf("%f;",temps[i][measurecount]);}
		printf("%f;",tempmeas[i]);}
 8003558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	3380      	adds	r3, #128	; 0x80
 800355e:	443b      	add	r3, r7
 8003560:	3b38      	subs	r3, #56	; 0x38
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fc ffef 	bl	8000548 <__aeabi_f2d>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	481a      	ldr	r0, [pc, #104]	; (80035d8 <temp2calib+0x29c>)
 8003570:	f00b fc7e 	bl	800ee70 <iprintf>
	for (int i=0;i<5;i++)
 8003574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003576:	3301      	adds	r3, #1
 8003578:	673b      	str	r3, [r7, #112]	; 0x70
 800357a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800357c:	2b04      	cmp	r3, #4
 800357e:	ddd6      	ble.n	800352e <temp2calib+0x1f2>

	}
	printf("\r\n");
 8003580:	4811      	ldr	r0, [pc, #68]	; (80035c8 <temp2calib+0x28c>)
 8003582:	f00b fcdb 	bl	800ef3c <puts>
	for (measurecount=0; measurecount<counts; measurecount++)
 8003586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003588:	3301      	adds	r3, #1
 800358a:	677b      	str	r3, [r7, #116]	; 0x74
 800358c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003590:	429a      	cmp	r2, r3
 8003592:	f63f af71 	bhi.w	8003478 <temp2calib+0x13c>
	}
	printf("finished\r\n");
 8003596:	4811      	ldr	r0, [pc, #68]	; (80035dc <temp2calib+0x2a0>)
 8003598:	f00b fcd0 	bl	800ef3c <puts>
}
 800359c:	bf00      	nop
 800359e:	3780      	adds	r7, #128	; 0x80
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bdb0      	pop	{r4, r5, r7, pc}
 80035a4:	08011e9c 	.word	0x08011e9c
 80035a8:	20000467 	.word	0x20000467
 80035ac:	20000458 	.word	0x20000458
 80035b0:	00565343 	.word	0x00565343
 80035b4:	00545854 	.word	0x00545854
 80035b8:	00525245 	.word	0x00525245
 80035bc:	08011dfc 	.word	0x08011dfc
 80035c0:	08011e48 	.word	0x08011e48
 80035c4:	08011e5c 	.word	0x08011e5c
 80035c8:	08011e60 	.word	0x08011e60
 80035cc:	08011e64 	.word	0x08011e64
 80035d0:	08011e6c 	.word	0x08011e6c
 80035d4:	08011e84 	.word	0x08011e84
 80035d8:	08011e8c 	.word	0x08011e8c
 80035dc:	08011e90 	.word	0x08011e90

080035e0 <help>:



void help()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af02      	add	r7, sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 80035e6:	a350      	add	r3, pc, #320	; (adr r3, 8003728 <help+0x148>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	e9cd 2300 	strd	r2, r3, [sp]
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <help+0x100>)
 80035f6:	483b      	ldr	r0, [pc, #236]	; (80036e4 <help+0x104>)
 80035f8:	f00b fc3a 	bl	800ee70 <iprintf>
	printf("Charger state : ");
 80035fc:	483a      	ldr	r0, [pc, #232]	; (80036e8 <help+0x108>)
 80035fe:	f00b fc37 	bl	800ee70 <iprintf>
	switch (charger_state)
 8003602:	4b3a      	ldr	r3, [pc, #232]	; (80036ec <help+0x10c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d81a      	bhi.n	8003640 <help+0x60>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <help+0x30>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003621 	.word	0x08003621
 8003614:	08003629 	.word	0x08003629
 8003618:	08003631 	.word	0x08003631
 800361c:	08003639 	.word	0x08003639
	{
	case 0:
		printf("FAULT\r\n");
 8003620:	4833      	ldr	r0, [pc, #204]	; (80036f0 <help+0x110>)
 8003622:	f00b fc8b 	bl	800ef3c <puts>
		break;
 8003626:	e00b      	b.n	8003640 <help+0x60>
	case 1:
		printf("OK\r\n");
 8003628:	4832      	ldr	r0, [pc, #200]	; (80036f4 <help+0x114>)
 800362a:	f00b fc87 	bl	800ef3c <puts>
		break;
 800362e:	e007      	b.n	8003640 <help+0x60>
	case 2:
		printf("No charging ...\r\n");
 8003630:	4831      	ldr	r0, [pc, #196]	; (80036f8 <help+0x118>)
 8003632:	f00b fc83 	bl	800ef3c <puts>
		break;
 8003636:	e003      	b.n	8003640 <help+0x60>
	case 3:
		printf("Charging ...\r\n");
 8003638:	4830      	ldr	r0, [pc, #192]	; (80036fc <help+0x11c>)
 800363a:	f00b fc7f 	bl	800ef3c <puts>
		break;
 800363e:	bf00      	nop
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 8003640:	f7fe f9a2 	bl	8001988 <GET_MCU_Temp>
 8003644:	ee10 3a10 	vmov	r3, s0
 8003648:	4618      	mov	r0, r3
 800364a:	f7fc ff7d 	bl	8000548 <__aeabi_f2d>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	482b      	ldr	r0, [pc, #172]	; (8003700 <help+0x120>)
 8003654:	f00b fc0c 	bl	800ee70 <iprintf>
	printf("VBAT: %u [mV]  ", BQ25798_Vbat_read());
 8003658:	f7ff f8b8 	bl	80027cc <BQ25798_Vbat_read>
 800365c:	4603      	mov	r3, r0
 800365e:	4619      	mov	r1, r3
 8003660:	4828      	ldr	r0, [pc, #160]	; (8003704 <help+0x124>)
 8003662:	f00b fc05 	bl	800ee70 <iprintf>
	printf("Vac1: %u [mV]  ", BQ25798_Vac1_read());
 8003666:	f7ff f8d9 	bl	800281c <BQ25798_Vac1_read>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	4826      	ldr	r0, [pc, #152]	; (8003708 <help+0x128>)
 8003670:	f00b fbfe 	bl	800ee70 <iprintf>
	printf("Vac2: %u [mV]  ", BQ25798_Vac2_read());
 8003674:	f7ff f8e6 	bl	8002844 <BQ25798_Vac2_read>
 8003678:	4603      	mov	r3, r0
 800367a:	4619      	mov	r1, r3
 800367c:	4823      	ldr	r0, [pc, #140]	; (800370c <help+0x12c>)
 800367e:	f00b fbf7 	bl	800ee70 <iprintf>
	printf("VSYS: %u [mV]  \r\n", BQ25798_Vsys_read());
 8003682:	f7ff f8b7 	bl	80027f4 <BQ25798_Vsys_read>
 8003686:	4603      	mov	r3, r0
 8003688:	4619      	mov	r1, r3
 800368a:	4821      	ldr	r0, [pc, #132]	; (8003710 <help+0x130>)
 800368c:	f00b fbf0 	bl	800ee70 <iprintf>
	printf("Ibus: %u [mA]  ", BQ25798_Ibus_read());
 8003690:	f7ff f8ec 	bl	800286c <BQ25798_Ibus_read>
 8003694:	4603      	mov	r3, r0
 8003696:	4619      	mov	r1, r3
 8003698:	481e      	ldr	r0, [pc, #120]	; (8003714 <help+0x134>)
 800369a:	f00b fbe9 	bl	800ee70 <iprintf>
	printf("Ibat: %u [mA]  \r\n", BQ25798_Ibat_read());
 800369e:	f7ff f8f9 	bl	8002894 <BQ25798_Ibat_read>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4619      	mov	r1, r3
 80036a6:	481c      	ldr	r0, [pc, #112]	; (8003718 <help+0x138>)
 80036a8:	f00b fbe2 	bl	800ee70 <iprintf>
	printf("Minimal SYS Voltage: %u [mV]  \r\n", BQ25798_Sys_Min_Voltage_read());
 80036ac:	f7ff f906 	bl	80028bc <BQ25798_Sys_Min_Voltage_read>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4619      	mov	r1, r3
 80036b4:	4819      	ldr	r0, [pc, #100]	; (800371c <help+0x13c>)
 80036b6:	f00b fbdb 	bl	800ee70 <iprintf>
	printf("Charge Voltage Limit: %u [mV]  \r\n",BQ25798_Chr_Volt_Limit_read());
 80036ba:	f7ff f929 	bl	8002910 <BQ25798_Chr_Volt_Limit_read>
 80036be:	4603      	mov	r3, r0
 80036c0:	4619      	mov	r1, r3
 80036c2:	4817      	ldr	r0, [pc, #92]	; (8003720 <help+0x140>)
 80036c4:	f00b fbd4 	bl	800ee70 <iprintf>
	printf("Charge Current Limit: %u [mA]  \r\n",BQ25798_Chr_Curr_Limit_read());
 80036c8:	f7ff f93e 	bl	8002948 <BQ25798_Chr_Curr_Limit_read>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4619      	mov	r1, r3
 80036d0:	4814      	ldr	r0, [pc, #80]	; (8003724 <help+0x144>)
 80036d2:	f00b fbcd 	bl	800ee70 <iprintf>

}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	f3af 8000 	nop.w
 80036e0:	3ff00000 	.word	0x3ff00000
 80036e4:	08011ed0 	.word	0x08011ed0
 80036e8:	08011ef4 	.word	0x08011ef4
 80036ec:	200007c8 	.word	0x200007c8
 80036f0:	08011f08 	.word	0x08011f08
 80036f4:	08011f10 	.word	0x08011f10
 80036f8:	08011f14 	.word	0x08011f14
 80036fc:	08011f28 	.word	0x08011f28
 8003700:	08011f38 	.word	0x08011f38
 8003704:	08011f54 	.word	0x08011f54
 8003708:	08011f64 	.word	0x08011f64
 800370c:	08011f74 	.word	0x08011f74
 8003710:	08011f84 	.word	0x08011f84
 8003714:	08011f98 	.word	0x08011f98
 8003718:	08011fa8 	.word	0x08011fa8
 800371c:	08011fbc 	.word	0x08011fbc
 8003720:	08011fe0 	.word	0x08011fe0
 8003724:	08012004 	.word	0x08012004
 8003728:	a0000000 	.word	0xa0000000
 800372c:	3fc99999 	.word	0x3fc99999

08003730 <DPS368_check>:

DPS_coeff_t DPS_coef;
volatile int32_t Kt_coef, Kp_coef;

uint8_t DPS368_check()
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
	uint8_t value;
	TCA9543A_SelectChannel(2);
 8003736:	2002      	movs	r0, #2
 8003738:	f002 fc30 	bl	8005f9c <TCA9543A_SelectChannel>
	HAL_Delay(1);
 800373c:	2001      	movs	r0, #1
 800373e:	f003 f81b 	bl	8006778 <HAL_Delay>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, DPS368_ADDR, 3, 150);
 8003742:	2396      	movs	r3, #150	; 0x96
 8003744:	2203      	movs	r2, #3
 8003746:	21ee      	movs	r1, #238	; 0xee
 8003748:	4814      	ldr	r0, [pc, #80]	; (800379c <DPS368_check+0x6c>)
 800374a:	f006 f867 	bl	800981c <HAL_I2C_IsDeviceReady>
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8003752:	2064      	movs	r0, #100	; 0x64
 8003754:	f003 f810 	bl	8006778 <HAL_Delay>
	if (status == HAL_OK) {
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d115      	bne.n	800378a <DPS368_check+0x5a>
		i2c_read8(&hi2c2, DPS368_REG_ID, &value, DPS368_ADDR);
 800375e:	1dba      	adds	r2, r7, #6
 8003760:	23ee      	movs	r3, #238	; 0xee
 8003762:	210d      	movs	r1, #13
 8003764:	480d      	ldr	r0, [pc, #52]	; (800379c <DPS368_check+0x6c>)
 8003766:	f002 fae7 	bl	8005d38 <i2c_read8>
		TCA9543A_SelectChannel(0);
 800376a:	2000      	movs	r0, #0
 800376c:	f002 fc16 	bl	8005f9c <TCA9543A_SelectChannel>
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8003770:	79bb      	ldrb	r3, [r7, #6]
 8003772:	2b10      	cmp	r3, #16
 8003774:	d104      	bne.n	8003780 <DPS368_check+0x50>
 8003776:	480a      	ldr	r0, [pc, #40]	; (80037a0 <DPS368_check+0x70>)
 8003778:	f00b fbe0 	bl	800ef3c <puts>
 800377c:	2301      	movs	r3, #1
 800377e:	e008      	b.n	8003792 <DPS368_check+0x62>
 8003780:	4808      	ldr	r0, [pc, #32]	; (80037a4 <DPS368_check+0x74>)
 8003782:	f00b fbdb 	bl	800ef3c <puts>
 8003786:	2300      	movs	r3, #0
 8003788:	e003      	b.n	8003792 <DPS368_check+0x62>
	} else {printf("DPS368 FAILED\r\n"); return 0;}
 800378a:	4807      	ldr	r0, [pc, #28]	; (80037a8 <DPS368_check+0x78>)
 800378c:	f00b fbd6 	bl	800ef3c <puts>
 8003790:	2300      	movs	r3, #0
	return 0;
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200005cc 	.word	0x200005cc
 80037a0:	08012028 	.word	0x08012028
 80037a4:	08012034 	.word	0x08012034
 80037a8:	08012040 	.word	0x08012040

080037ac <getTwosComplement>:

void getTwosComplement(int32_t *raw, uint8_t length)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
    if (*raw & ((uint32_t)1 << (length - 1)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <getTwosComplement+0x38>
    {
        *raw -= (uint32_t)1 << length;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4619      	mov	r1, r3
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	2201      	movs	r2, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	1acb      	subs	r3, r1, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
    }
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <DPS368_read_coeff>:


void DPS368_read_coeff()
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	; 0x28
 80037f4:	af04      	add	r7, sp, #16
	uint8_t regs[18];
	SET_DPS368();
 80037f6:	f002 fc15 	bl	8006024 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, regs, 18, 250);
 80037fa:	23fa      	movs	r3, #250	; 0xfa
 80037fc:	9302      	str	r3, [sp, #8]
 80037fe:	2312      	movs	r3, #18
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2301      	movs	r3, #1
 8003808:	2210      	movs	r2, #16
 800380a:	21ee      	movs	r1, #238	; 0xee
 800380c:	4841      	ldr	r0, [pc, #260]	; (8003914 <DPS368_read_coeff+0x124>)
 800380e:	f005 feeb 	bl	80095e8 <HAL_I2C_Mem_Read>
//	for(uint8_t i=0; i<19;i++){
//		printf("Coef %d : %#x\r\n",i,regs[i]);
//	}
	UNSET_BME_DPS();
 8003812:	f002 fc0e 	bl	8006032 <UNSET_BME_DPS>
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 8003816:	793b      	ldrb	r3, [r7, #4]
 8003818:	011a      	lsls	r2, r3, #4
 800381a:	797b      	ldrb	r3, [r7, #5]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	4313      	orrs	r3, r2
 8003826:	461a      	mov	r2, r3
 8003828:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <DPS368_read_coeff+0x128>)
 800382a:	601a      	str	r2, [r3, #0]
    getTwosComplement(&DPS_coef.C0, 12);
 800382c:	210c      	movs	r1, #12
 800382e:	483a      	ldr	r0, [pc, #232]	; (8003918 <DPS368_read_coeff+0x128>)
 8003830:	f7ff ffbc 	bl	80037ac <getTwosComplement>
    // c0 is only used as c0*0.5, so c0_half is calculated immediately
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8003834:	4b38      	ldr	r3, [pc, #224]	; (8003918 <DPS368_read_coeff+0x128>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	085b      	lsrs	r3, r3, #1
 800383a:	461a      	mov	r2, r3
 800383c:	4b36      	ldr	r3, [pc, #216]	; (8003918 <DPS368_read_coeff+0x128>)
 800383e:	601a      	str	r2, [r3, #0]

    // now do the same thing for all other coefficients
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8003840:	797b      	ldrb	r3, [r7, #5]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003848:	79ba      	ldrb	r2, [r7, #6]
 800384a:	4313      	orrs	r3, r2
 800384c:	461a      	mov	r2, r3
 800384e:	4b32      	ldr	r3, [pc, #200]	; (8003918 <DPS368_read_coeff+0x128>)
 8003850:	605a      	str	r2, [r3, #4]
    getTwosComplement(&DPS_coef.C1, 12);
 8003852:	210c      	movs	r1, #12
 8003854:	4831      	ldr	r0, [pc, #196]	; (800391c <DPS368_read_coeff+0x12c>)
 8003856:	f7ff ffa9 	bl	80037ac <getTwosComplement>
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	031a      	lsls	r2, r3, #12
 800385e:	7a3b      	ldrb	r3, [r7, #8]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	431a      	orrs	r2, r3
 8003864:	7a7b      	ldrb	r3, [r7, #9]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	4313      	orrs	r3, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <DPS368_read_coeff+0x128>)
 8003874:	609a      	str	r2, [r3, #8]
    getTwosComplement(&DPS_coef.C00, 20);
 8003876:	2114      	movs	r1, #20
 8003878:	4829      	ldr	r0, [pc, #164]	; (8003920 <DPS368_read_coeff+0x130>)
 800387a:	f7ff ff97 	bl	80037ac <getTwosComplement>
    DPS_coef.C10 = (((uint32_t)regs[5] & 0x0F) << 16) | ((uint32_t)regs[6] << 8) | (uint32_t)regs[7];
 800387e:	7a7b      	ldrb	r3, [r7, #9]
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003886:	7abb      	ldrb	r3, [r7, #10]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	4313      	orrs	r3, r2
 800388c:	7afa      	ldrb	r2, [r7, #11]
 800388e:	4313      	orrs	r3, r2
 8003890:	461a      	mov	r2, r3
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <DPS368_read_coeff+0x128>)
 8003894:	60da      	str	r2, [r3, #12]
    getTwosComplement(&DPS_coef.C10, 20);
 8003896:	2114      	movs	r1, #20
 8003898:	4822      	ldr	r0, [pc, #136]	; (8003924 <DPS368_read_coeff+0x134>)
 800389a:	f7ff ff87 	bl	80037ac <getTwosComplement>

    DPS_coef.C01 = ((uint32_t)regs[8] << 8) | (uint32_t)regs[9];
 800389e:	7b3b      	ldrb	r3, [r7, #12]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	7b7a      	ldrb	r2, [r7, #13]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <DPS368_read_coeff+0x128>)
 80038aa:	611a      	str	r2, [r3, #16]
    getTwosComplement(&DPS_coef.C01, 16);
 80038ac:	2110      	movs	r1, #16
 80038ae:	481e      	ldr	r0, [pc, #120]	; (8003928 <DPS368_read_coeff+0x138>)
 80038b0:	f7ff ff7c 	bl	80037ac <getTwosComplement>

    DPS_coef.C11 = ((uint32_t)regs[10] << 8) | (uint32_t)regs[11];
 80038b4:	7bbb      	ldrb	r3, [r7, #14]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	7bfa      	ldrb	r2, [r7, #15]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	461a      	mov	r2, r3
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <DPS368_read_coeff+0x128>)
 80038c0:	615a      	str	r2, [r3, #20]
    getTwosComplement(&DPS_coef.C11, 16);
 80038c2:	2110      	movs	r1, #16
 80038c4:	4819      	ldr	r0, [pc, #100]	; (800392c <DPS368_read_coeff+0x13c>)
 80038c6:	f7ff ff71 	bl	80037ac <getTwosComplement>
    DPS_coef.C20 = ((uint32_t)regs[12] << 8) | (uint32_t)regs[13];
 80038ca:	7c3b      	ldrb	r3, [r7, #16]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	7c7a      	ldrb	r2, [r7, #17]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <DPS368_read_coeff+0x128>)
 80038d6:	619a      	str	r2, [r3, #24]
    getTwosComplement(&DPS_coef.C20, 16);
 80038d8:	2110      	movs	r1, #16
 80038da:	4815      	ldr	r0, [pc, #84]	; (8003930 <DPS368_read_coeff+0x140>)
 80038dc:	f7ff ff66 	bl	80037ac <getTwosComplement>
    DPS_coef.C21 = ((uint32_t)regs[14] << 8) | (uint32_t)regs[15];
 80038e0:	7cbb      	ldrb	r3, [r7, #18]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	7cfa      	ldrb	r2, [r7, #19]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <DPS368_read_coeff+0x128>)
 80038ec:	61da      	str	r2, [r3, #28]
    getTwosComplement(&DPS_coef.C21, 16);
 80038ee:	2110      	movs	r1, #16
 80038f0:	4810      	ldr	r0, [pc, #64]	; (8003934 <DPS368_read_coeff+0x144>)
 80038f2:	f7ff ff5b 	bl	80037ac <getTwosComplement>
    DPS_coef.C30 = ((uint32_t)regs[16] << 8) | (uint32_t)regs[17];
 80038f6:	7d3b      	ldrb	r3, [r7, #20]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	7d7a      	ldrb	r2, [r7, #21]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	461a      	mov	r2, r3
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <DPS368_read_coeff+0x128>)
 8003902:	621a      	str	r2, [r3, #32]
    getTwosComplement(&DPS_coef.C30, 16);
 8003904:	2110      	movs	r1, #16
 8003906:	480c      	ldr	r0, [pc, #48]	; (8003938 <DPS368_read_coeff+0x148>)
 8003908:	f7ff ff50 	bl	80037ac <getTwosComplement>
//    printf("C0: %ld   C1: %ld\r\n",DPS_coef.C0,DPS_coef.C1);
//    printf("C00: %ld   C01: %ld\r\n",DPS_coef.C00,DPS_coef.C01);
//    printf("C10: %ld   C11: %ld\r\n",DPS_coef.C10,DPS_coef.C11);
//    printf("C20: %ld   C21: %ld\r\n",DPS_coef.C20,DPS_coef.C21);
//    printf("C30: %ld\r\n",DPS_coef.C30);
}
 800390c:	bf00      	nop
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200005cc 	.word	0x200005cc
 8003918:	20000480 	.word	0x20000480
 800391c:	20000484 	.word	0x20000484
 8003920:	20000488 	.word	0x20000488
 8003924:	2000048c 	.word	0x2000048c
 8003928:	20000490 	.word	0x20000490
 800392c:	20000494 	.word	0x20000494
 8003930:	20000498 	.word	0x20000498
 8003934:	2000049c 	.word	0x2000049c
 8003938:	200004a0 	.word	0x200004a0

0800393c <DPS368_fifo>:
	printbinaryMSB(reg);
//	UNSET_BME_DPS();
}

void DPS368_fifo(uint8_t endis)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af04      	add	r7, sp, #16
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	SET_DPS368();
 8003946:	f002 fb6d 	bl	8006024 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 800394a:	23fa      	movs	r3, #250	; 0xfa
 800394c:	9302      	str	r3, [sp, #8]
 800394e:	2301      	movs	r3, #1
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	f107 030f 	add.w	r3, r7, #15
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2301      	movs	r3, #1
 800395a:	2209      	movs	r2, #9
 800395c:	21ee      	movs	r1, #238	; 0xee
 800395e:	4810      	ldr	r0, [pc, #64]	; (80039a0 <DPS368_fifo+0x64>)
 8003960:	f005 fe42 	bl	80095e8 <HAL_I2C_Mem_Read>
//	printf("(fifo) CFG REG READ (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	setBit(&reg,1,endis);
 8003964:	79fa      	ldrb	r2, [r7, #7]
 8003966:	f107 030f 	add.w	r3, r7, #15
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f002 fa6f 	bl	8005e50 <setBit>
//	printf("SET FIFO EN\r\n");
//	printf("(fifo) CFG REG WRITE (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003972:	23fa      	movs	r3, #250	; 0xfa
 8003974:	9302      	str	r3, [sp, #8]
 8003976:	2301      	movs	r3, #1
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	f107 030f 	add.w	r3, r7, #15
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2301      	movs	r3, #1
 8003982:	2209      	movs	r2, #9
 8003984:	21ee      	movs	r1, #238	; 0xee
 8003986:	4806      	ldr	r0, [pc, #24]	; (80039a0 <DPS368_fifo+0x64>)
 8003988:	f005 fd1a 	bl	80093c0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800398c:	2001      	movs	r0, #1
 800398e:	f002 fef3 	bl	8006778 <HAL_Delay>
	UNSET_BME_DPS();
 8003992:	f002 fb4e 	bl	8006032 <UNSET_BME_DPS>
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	200005cc 	.word	0x200005cc

080039a4 <DPS368_conf_int>:

void DPS368_conf_int(uint8_t ints)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af04      	add	r7, sp, #16
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	SET_DPS368();
 80039ae:	f002 fb39 	bl	8006024 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80039b2:	23fa      	movs	r3, #250	; 0xfa
 80039b4:	9302      	str	r3, [sp, #8]
 80039b6:	2301      	movs	r3, #1
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	f107 030f 	add.w	r3, r7, #15
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2301      	movs	r3, #1
 80039c2:	2209      	movs	r2, #9
 80039c4:	21ee      	movs	r1, #238	; 0xee
 80039c6:	4810      	ldr	r0, [pc, #64]	; (8003a08 <DPS368_conf_int+0x64>)
 80039c8:	f005 fe0e 	bl	80095e8 <HAL_I2C_Mem_Read>
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	modifyRegister(&reg, 0xF0, ints);
 80039cc:	79fa      	ldrb	r2, [r7, #7]
 80039ce:	f107 030f 	add.w	r3, r7, #15
 80039d2:	21f0      	movs	r1, #240	; 0xf0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f002 fa6a 	bl	8005eae <modifyRegister>
//	printf("SET INT \r\n");
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80039da:	23fa      	movs	r3, #250	; 0xfa
 80039dc:	9302      	str	r3, [sp, #8]
 80039de:	2301      	movs	r3, #1
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	f107 030f 	add.w	r3, r7, #15
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2301      	movs	r3, #1
 80039ea:	2209      	movs	r2, #9
 80039ec:	21ee      	movs	r1, #238	; 0xee
 80039ee:	4806      	ldr	r0, [pc, #24]	; (8003a08 <DPS368_conf_int+0x64>)
 80039f0:	f005 fce6 	bl	80093c0 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80039f4:	2001      	movs	r0, #1
 80039f6:	f002 febf 	bl	8006778 <HAL_Delay>
	UNSET_BME_DPS();
 80039fa:	f002 fb1a 	bl	8006032 <UNSET_BME_DPS>
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	200005cc 	.word	0x200005cc

08003a0c <DPS368_temp_source>:

void DPS368_temp_source()
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af04      	add	r7, sp, #16
	uint8_t reg, reg_mod;
	SET_DPS368();
 8003a12:	f002 fb07 	bl	8006024 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8003a16:	23fa      	movs	r3, #250	; 0xfa
 8003a18:	9302      	str	r3, [sp, #8]
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	1dbb      	adds	r3, r7, #6
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2301      	movs	r3, #1
 8003a24:	2207      	movs	r2, #7
 8003a26:	21ee      	movs	r1, #238	; 0xee
 8003a28:	4818      	ldr	r0, [pc, #96]	; (8003a8c <DPS368_temp_source+0x80>)
 8003a2a:	f005 fddd 	bl	80095e8 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x07 (hex) (NOMOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x28, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003a2e:	23fa      	movs	r3, #250	; 0xfa
 8003a30:	9302      	str	r3, [sp, #8]
 8003a32:	2301      	movs	r3, #1
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	2228      	movs	r2, #40	; 0x28
 8003a3e:	21ee      	movs	r1, #238	; 0xee
 8003a40:	4812      	ldr	r0, [pc, #72]	; (8003a8c <DPS368_temp_source+0x80>)
 8003a42:	f005 fdd1 	bl	80095e8 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x28 (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	if((reg & 0x80) == 0) {
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	db06      	blt.n	8003a5c <DPS368_temp_source+0x50>
//		printf("Internal Temp\r\n");
		setBit(&reg_mod, 7, 0);
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	2200      	movs	r2, #0
 8003a52:	2107      	movs	r1, #7
 8003a54:	4618      	mov	r0, r3
 8003a56:	f002 f9fb 	bl	8005e50 <setBit>
 8003a5a:	e005      	b.n	8003a68 <DPS368_temp_source+0x5c>
	} else {
//		printf("External Temp\r\n");
		setBit(&reg_mod, 7, 1);
 8003a5c:	1dbb      	adds	r3, r7, #6
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2107      	movs	r1, #7
 8003a62:	4618      	mov	r0, r3
 8003a64:	f002 f9f4 	bl	8005e50 <setBit>
		}
//	printf("CFG TEMP SRC 0x07 (hex) (MOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8003a68:	23fa      	movs	r3, #250	; 0xfa
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	1dbb      	adds	r3, r7, #6
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2301      	movs	r3, #1
 8003a76:	2207      	movs	r2, #7
 8003a78:	21ee      	movs	r1, #238	; 0xee
 8003a7a:	4804      	ldr	r0, [pc, #16]	; (8003a8c <DPS368_temp_source+0x80>)
 8003a7c:	f005 fca0 	bl	80093c0 <HAL_I2C_Mem_Write>
	UNSET_BME_DPS();
 8003a80:	f002 fad7 	bl	8006032 <UNSET_BME_DPS>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200005cc 	.word	0x200005cc

08003a90 <DPS368_conf_temp>:



void DPS368_conf_temp(uint8_t ovr, uint8_t rate)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af04      	add	r7, sp, #16
 8003a96:	4603      	mov	r3, r0
 8003a98:	460a      	mov	r2, r1
 8003a9a:	71fb      	strb	r3, [r7, #7]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71bb      	strb	r3, [r7, #6]
	uint8_t reg;
	SET_DPS368();
 8003aa0:	f002 fac0 	bl	8006024 <SET_DPS368>
	reg = ovr + rate;
 8003aa4:	79fa      	ldrb	r2, [r7, #7]
 8003aa6:	79bb      	ldrb	r3, [r7, #6]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003aae:	23fa      	movs	r3, #250	; 0xfa
 8003ab0:	9302      	str	r3, [sp, #8]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	f107 030f 	add.w	r3, r7, #15
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2301      	movs	r3, #1
 8003abe:	2207      	movs	r2, #7
 8003ac0:	21ee      	movs	r1, #238	; 0xee
 8003ac2:	4835      	ldr	r0, [pc, #212]	; (8003b98 <DPS368_conf_temp+0x108>)
 8003ac4:	f005 fc7c 	bl	80093c0 <HAL_I2C_Mem_Write>
    switch (ovr)
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	2b07      	cmp	r3, #7
 8003acc:	d83a      	bhi.n	8003b44 <DPS368_conf_temp+0xb4>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <DPS368_conf_temp+0x44>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003af5 	.word	0x08003af5
 8003ad8:	08003aff 	.word	0x08003aff
 8003adc:	08003b09 	.word	0x08003b09
 8003ae0:	08003b13 	.word	0x08003b13
 8003ae4:	08003b1d 	.word	0x08003b1d
 8003ae8:	08003b27 	.word	0x08003b27
 8003aec:	08003b31 	.word	0x08003b31
 8003af0:	08003b3b 	.word	0x08003b3b
    {
        case DPS_OVERSAMPLE_1:
            Kt_coef = DPS_OSR_SF_1;
 8003af4:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <DPS368_conf_temp+0x10c>)
 8003af6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003afa:	601a      	str	r2, [r3, #0]
            break;
 8003afc:	e022      	b.n	8003b44 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_2:
        	Kt_coef = DPS_OSR_SF_2;
 8003afe:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <DPS368_conf_temp+0x10c>)
 8003b00:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003b04:	601a      	str	r2, [r3, #0]
            break;
 8003b06:	e01d      	b.n	8003b44 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_4:
        	Kt_coef = DPS_OSR_SF_4;
 8003b08:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <DPS368_conf_temp+0x10c>)
 8003b0a:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8003b0e:	601a      	str	r2, [r3, #0]
            break;
 8003b10:	e018      	b.n	8003b44 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_8:
        	Kt_coef = DPS_OSR_SF_8;
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <DPS368_conf_temp+0x10c>)
 8003b14:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8003b18:	601a      	str	r2, [r3, #0]
            break;
 8003b1a:	e013      	b.n	8003b44 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_16:
        	Kt_coef = DPS_OSR_SF_16;
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <DPS368_conf_temp+0x10c>)
 8003b1e:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8003b22:	601a      	str	r2, [r3, #0]
            break;
 8003b24:	e00e      	b.n	8003b44 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_32:
        	Kt_coef = DPS_OSR_SF_32;
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <DPS368_conf_temp+0x10c>)
 8003b28:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 8003b2c:	601a      	str	r2, [r3, #0]
            break;
 8003b2e:	e009      	b.n	8003b44 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_64:
        	Kt_coef = DPS_OSR_SF_64;
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <DPS368_conf_temp+0x10c>)
 8003b32:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8003b36:	601a      	str	r2, [r3, #0]
            break;
 8003b38:	e004      	b.n	8003b44 <DPS368_conf_temp+0xb4>

        case DPS_OVERSAMPLE_128:
        	Kt_coef = DPS_OSR_SF_128;
 8003b3a:	4b18      	ldr	r3, [pc, #96]	; (8003b9c <DPS368_conf_temp+0x10c>)
 8003b3c:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8003b40:	601a      	str	r2, [r3, #0]
            break;
 8003b42:	bf00      	nop
    }
//    printf("Kt_coef set: %lu\r\n",Kt_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003b44:	23fa      	movs	r3, #250	; 0xfa
 8003b46:	9302      	str	r3, [sp, #8]
 8003b48:	2301      	movs	r3, #1
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	f107 030f 	add.w	r3, r7, #15
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2301      	movs	r3, #1
 8003b54:	2209      	movs	r2, #9
 8003b56:	21ee      	movs	r1, #238	; 0xee
 8003b58:	480f      	ldr	r0, [pc, #60]	; (8003b98 <DPS368_conf_temp+0x108>)
 8003b5a:	f005 fd45 	bl	80095e8 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OSR_SF_8) setBit(&reg, 3, 1);
    else setBit(&reg, 3, 0);
 8003b5e:	f107 030f 	add.w	r3, r7, #15
 8003b62:	2200      	movs	r2, #0
 8003b64:	2103      	movs	r1, #3
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 f972 	bl	8005e50 <setBit>
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003b6c:	23fa      	movs	r3, #250	; 0xfa
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	2301      	movs	r3, #1
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	f107 030f 	add.w	r3, r7, #15
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	2209      	movs	r2, #9
 8003b7e:	21ee      	movs	r1, #238	; 0xee
 8003b80:	4805      	ldr	r0, [pc, #20]	; (8003b98 <DPS368_conf_temp+0x108>)
 8003b82:	f005 fc1d 	bl	80093c0 <HAL_I2C_Mem_Write>

	DPS368_temp_source();
 8003b86:	f7ff ff41 	bl	8003a0c <DPS368_temp_source>
	UNSET_BME_DPS();
 8003b8a:	f002 fa52 	bl	8006032 <UNSET_BME_DPS>
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	200005cc 	.word	0x200005cc
 8003b9c:	200004a4 	.word	0x200004a4

08003ba0 <DPS368_temp_correct>:
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
	UNSET_BME_DPS();
}

void DPS368_temp_correct()
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af04      	add	r7, sp, #16
	SET_DPS368();
 8003ba6:	f002 fa3d 	bl	8006024 <SET_DPS368>
	HAL_StatusTypeDef status;
	uint8_t write_data = 0xA5;
 8003baa:	23a5      	movs	r3, #165	; 0xa5
 8003bac:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003bae:	23fa      	movs	r3, #250	; 0xfa
 8003bb0:	9302      	str	r3, [sp, #8]
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	1dbb      	adds	r3, r7, #6
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	220e      	movs	r2, #14
 8003bbe:	21ee      	movs	r1, #238	; 0xee
 8003bc0:	482e      	ldr	r0, [pc, #184]	; (8003c7c <DPS368_temp_correct+0xdc>)
 8003bc2:	f005 fbfd 	bl	80093c0 <HAL_I2C_Mem_Write>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
	if (status == HAL_OK) {
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10f      	bne.n	8003bf0 <DPS368_temp_correct+0x50>
        write_data = 0x96;
 8003bd0:	2396      	movs	r3, #150	; 0x96
 8003bd2:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003bd4:	23fa      	movs	r3, #250	; 0xfa
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	2301      	movs	r3, #1
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	1dbb      	adds	r3, r7, #6
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2301      	movs	r3, #1
 8003be2:	220f      	movs	r2, #15
 8003be4:	21ee      	movs	r1, #238	; 0xee
 8003be6:	4825      	ldr	r0, [pc, #148]	; (8003c7c <DPS368_temp_correct+0xdc>)
 8003be8:	f005 fbea 	bl	80093c0 <HAL_I2C_Mem_Write>
 8003bec:	4603      	mov	r3, r0
 8003bee:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <DPS368_temp_correct+0x76>
        write_data = 0x02;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x62, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003bfa:	23fa      	movs	r3, #250	; 0xfa
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	2301      	movs	r3, #1
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	1dbb      	adds	r3, r7, #6
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2301      	movs	r3, #1
 8003c08:	2262      	movs	r2, #98	; 0x62
 8003c0a:	21ee      	movs	r1, #238	; 0xee
 8003c0c:	481b      	ldr	r0, [pc, #108]	; (8003c7c <DPS368_temp_correct+0xdc>)
 8003c0e:	f005 fbd7 	bl	80093c0 <HAL_I2C_Mem_Write>
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <DPS368_temp_correct+0x9c>
        write_data = 0x00;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003c20:	23fa      	movs	r3, #250	; 0xfa
 8003c22:	9302      	str	r3, [sp, #8]
 8003c24:	2301      	movs	r3, #1
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	1dbb      	adds	r3, r7, #6
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	220e      	movs	r2, #14
 8003c30:	21ee      	movs	r1, #238	; 0xee
 8003c32:	4812      	ldr	r0, [pc, #72]	; (8003c7c <DPS368_temp_correct+0xdc>)
 8003c34:	f005 fbc4 	bl	80093c0 <HAL_I2C_Mem_Write>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	71fb      	strb	r3, [r7, #7]
	}
	if (status == HAL_OK) {
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <DPS368_temp_correct+0xc2>
        write_data = 0x00;
 8003c42:	2300      	movs	r3, #0
 8003c44:	71bb      	strb	r3, [r7, #6]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003c46:	23fa      	movs	r3, #250	; 0xfa
 8003c48:	9302      	str	r3, [sp, #8]
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	9301      	str	r3, [sp, #4]
 8003c4e:	1dbb      	adds	r3, r7, #6
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2301      	movs	r3, #1
 8003c54:	220f      	movs	r2, #15
 8003c56:	21ee      	movs	r1, #238	; 0xee
 8003c58:	4808      	ldr	r0, [pc, #32]	; (8003c7c <DPS368_temp_correct+0xdc>)
 8003c5a:	f005 fbb1 	bl	80093c0 <HAL_I2C_Mem_Write>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
	}
	DPS368_conf_temp(DPS_OVERSAMPLE_1, DPS_RATE_1);
 8003c62:	2100      	movs	r1, #0
 8003c64:	2000      	movs	r0, #0
 8003c66:	f7ff ff13 	bl	8003a90 <DPS368_conf_temp>
	DPS368_run_mode(MODE_CMD_TEMP);
 8003c6a:	2002      	movs	r0, #2
 8003c6c:	f000 f808 	bl	8003c80 <DPS368_run_mode>
	UNSET_BME_DPS();
 8003c70:	f002 f9df 	bl	8006032 <UNSET_BME_DPS>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200005cc 	.word	0x200005cc

08003c80 <DPS368_run_mode>:


void DPS368_run_mode(uint8_t mode)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af04      	add	r7, sp, #16
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
	SET_DPS368();
 8003c8a:	f002 f9cb 	bl	8006024 <SET_DPS368>
	uint8_t reg;
//	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
//	reg = (reg & 0x0E) | mode;
	reg = mode;
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003c92:	23fa      	movs	r3, #250	; 0xfa
 8003c94:	9302      	str	r3, [sp, #8]
 8003c96:	2301      	movs	r3, #1
 8003c98:	9301      	str	r3, [sp, #4]
 8003c9a:	f107 030f 	add.w	r3, r7, #15
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	21ee      	movs	r1, #238	; 0xee
 8003ca6:	4806      	ldr	r0, [pc, #24]	; (8003cc0 <DPS368_run_mode+0x40>)
 8003ca8:	f005 fb8a 	bl	80093c0 <HAL_I2C_Mem_Write>
	HAL_Delay(2);
 8003cac:	2002      	movs	r0, #2
 8003cae:	f002 fd63 	bl	8006778 <HAL_Delay>
	UNSET_BME_DPS();
 8003cb2:	f002 f9be 	bl	8006032 <UNSET_BME_DPS>
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	200005cc 	.word	0x200005cc

08003cc4 <DPS368_get_temp_cmd>:
	UNSET_BME_DPS();
	return ((reg & 0x10) >> 4);
}

float DPS368_get_temp_cmd(uint8_t ovr)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	; 0x30
 8003cc8:	af04      	add	r7, sp, #16
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
	DPS368_conf_temp(ovr, 0U);
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fedc 	bl	8003a90 <DPS368_conf_temp>
	DPS368_run_mode(MODE_CMD_TEMP);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f7ff ffd1 	bl	8003c80 <DPS368_run_mode>
	HAL_Delay(calcBusyTime(ovr));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f861 	bl	8003da8 <calcBusyTime>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f002 fd45 	bl	8006778 <HAL_Delay>
	HAL_Delay(1);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f002 fd42 	bl	8006778 <HAL_Delay>
	SET_DPS368();
 8003cf4:	f002 f996 	bl	8006024 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_temp;
	float temp_scaled, temperature;
//	dumpCFGreg();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8003cf8:	23fa      	movs	r3, #250	; 0xfa
 8003cfa:	9302      	str	r3, [sp, #8]
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	f107 0310 	add.w	r3, r7, #16
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	2301      	movs	r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	21ee      	movs	r1, #238	; 0xee
 8003d0c:	4823      	ldr	r0, [pc, #140]	; (8003d9c <DPS368_get_temp_cmd+0xd8>)
 8003d0e:	f005 fc6b 	bl	80095e8 <HAL_I2C_Mem_Read>
	UNSET_BME_DPS();
 8003d12:	f002 f98e 	bl	8006032 <UNSET_BME_DPS>
	raw_temp = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8003d16:	7cbb      	ldrb	r3, [r7, #18]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	7c7b      	ldrb	r3, [r7, #17]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	441a      	add	r2, r3
 8003d20:	7c3b      	ldrb	r3, [r7, #16]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	4413      	add	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
	getTwosComplement(&raw_temp, 24);
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	2118      	movs	r1, #24
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fd3c 	bl	80037ac <getTwosComplement>
	const float scaling = 1.0f/Kt_coef;
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <DPS368_get_temp_cmd+0xdc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	ee07 3a90 	vmov	s15, r3
 8003d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d48:	edc7 7a07 	vstr	s15, [r7, #28]
	//printf("DPS RAW VALUE: %ld\r\n", raw_temp);
//	printf("DPS SCALING VALUE: %.12f\r\n", scaling);
	temp_scaled = (float)raw_temp * scaling;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d56:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a06 	vstr	s15, [r7, #24]
//	printf("DPS TEMP SCALED VALUE: %.3f\r\n", temp_scaled);
	temperature = DPS_coef.C0 + DPS_coef.C1 * temp_scaled;
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <DPS368_get_temp_cmd+0xe0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <DPS368_get_temp_cmd+0xe0>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003d7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d86:	edc7 7a05 	vstr	s15, [r7, #20]
	return temperature;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	ee07 3a90 	vmov	s15, r3
}
 8003d90:	eeb0 0a67 	vmov.f32	s0, s15
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200005cc 	.word	0x200005cc
 8003da0:	200004a4 	.word	0x200004a4
 8003da4:	20000480 	.word	0x20000480

08003da8 <calcBusyTime>:
}



uint32_t calcBusyTime(uint8_t osr)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
    // formula from datasheet (optimized)
    return (((uint32_t)20U) + ((uint32_t)16U << ((uint16_t)osr)));
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	2210      	movs	r2, #16
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	3314      	adds	r3, #20
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <DPS368_init>:

void DPS368_init(uint8_t fifo, uint8_t int_m)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	71fb      	strb	r3, [r7, #7]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71bb      	strb	r3, [r7, #6]
	DPS368_read_coeff();
 8003dd8:	f7ff fd0a 	bl	80037f0 <DPS368_read_coeff>
	DPS368_conf_int(int_m);
 8003ddc:	79bb      	ldrb	r3, [r7, #6]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fde0 	bl	80039a4 <DPS368_conf_int>
	DPS368_fifo(fifo);
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fda8 	bl	800393c <DPS368_fifo>
	DPS368_run_mode(MODE_IDLE);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f7ff ff47 	bl	8003c80 <DPS368_run_mode>
	DPS368_temp_correct();
 8003df2:	f7ff fed5 	bl	8003ba0 <DPS368_temp_correct>
}
 8003df6:	bf00      	nop
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e06:	f002 fc42 	bl	800668e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e0a:	f000 f9dd 	bl	80041c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e0e:	f000 fc91 	bl	8004734 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e12:	f000 fc71 	bl	80046f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8003e16:	f000 fa3b 	bl	8004290 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003e1a:	f000 fad5 	bl	80043c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003e1e:	f000 fb13 	bl	8004448 <MX_I2C2_Init>
  MX_I2C3_Init();
 8003e22:	f000 fb51 	bl	80044c8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8003e26:	f000 fc07 	bl	8004638 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003e2a:	f000 fc35 	bl	8004698 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8003e2e:	f000 fa9f 	bl	8004370 <MX_CRC_Init>
  MX_TIM16_Init();
 8003e32:	f000 fb89 	bl	8004548 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003e36:	f000 fa16 	bl	8004266 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);	// LED2 na PWM
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	48c7      	ldr	r0, [pc, #796]	; (800415c <main+0x35c>)
 8003e3e:	f007 fc0b 	bl	800b658 <HAL_TIM_PWM_Start>
  HAL_UART_RxCpltCallback(&huart1); //CLI
 8003e42:	48c7      	ldr	r0, [pc, #796]	; (8004160 <main+0x360>)
 8003e44:	f7fe fe0e 	bl	8002a64 <HAL_UART_RxCpltCallback>
  HAL_UART_RxCpltCallback(&huart2); //SIM
 8003e48:	48c6      	ldr	r0, [pc, #792]	; (8004164 <main+0x364>)
 8003e4a:	f7fe fe0b 	bl	8002a64 <HAL_UART_RxCpltCallback>
  check_powerOn();
 8003e4e:	f001 fed7 	bl	8005c00 <check_powerOn>
  printf("\r\n\r\n\r\nInitializing ...\r\n");
 8003e52:	48c5      	ldr	r0, [pc, #788]	; (8004168 <main+0x368>)
 8003e54:	f00b f872 	bl	800ef3c <puts>
  if (EEPROM_Load_config()==0) {printf("Config loaded OK \r\n");};
 8003e58:	f7fd fbee 	bl	8001638 <EEPROM_Load_config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <main+0x68>
 8003e62:	48c2      	ldr	r0, [pc, #776]	; (800416c <main+0x36c>)
 8003e64:	f00b f86a 	bl	800ef3c <puts>
  charger_state = BQ25798_check();
 8003e68:	f7fe fc5c 	bl	8002724 <BQ25798_check>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4bbf      	ldr	r3, [pc, #764]	; (8004170 <main+0x370>)
 8003e72:	701a      	strb	r2, [r3, #0]
  if (charger_state) {
 8003e74:	4bbe      	ldr	r3, [pc, #760]	; (8004170 <main+0x370>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <main+0x9a>
	  printf("Configure charger \r\n");
 8003e7e:	48bd      	ldr	r0, [pc, #756]	; (8004174 <main+0x374>)
 8003e80:	f00b f85c 	bl	800ef3c <puts>
	  BQ25798_Sys_Min_Voltage_write(3); 	// 3250mV
 8003e84:	2003      	movs	r0, #3
 8003e86:	f7fe fd7b 	bl	8002980 <BQ25798_Sys_Min_Voltage_write>
	  BQ25798_Chr_Volt_Limit_write(4200); 	// 4200mV
 8003e8a:	f241 0068 	movw	r0, #4200	; 0x1068
 8003e8e:	f7fe fd8f 	bl	80029b0 <BQ25798_Chr_Volt_Limit_write>
	  BQ25798_Chr_Curr_Limit_write(2000); 	// 2000mA
 8003e92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e96:	f7fe fdad 	bl	80029f4 <BQ25798_Chr_Curr_Limit_write>
  }
  LED1_ON();
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2120      	movs	r1, #32
 8003e9e:	48b6      	ldr	r0, [pc, #728]	; (8004178 <main+0x378>)
 8003ea0:	f004 ffe2 	bl	8008e68 <HAL_GPIO_WritePin>
  LED2_OFF();
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f001 fe99 	bl	8005bdc <setLed2>
  ADC_DMA_Start();
 8003eaa:	f7fd fd57 	bl	800195c <ADC_DMA_Start>
  uint32_t ticks1s = HAL_GetTick();
 8003eae:	f002 fc57 	bl	8006760 <HAL_GetTick>
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t ticks30ms = HAL_GetTick();
 8003eb4:	f002 fc54 	bl	8006760 <HAL_GetTick>
 8003eb8:	6038      	str	r0, [r7, #0]
  I2C2TCA_RST();
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ec4:	f004 ffd0 	bl	8008e68 <HAL_GPIO_WritePin>
  TMP117_temp_sensor.sensor_present = TMP117_check();
 8003ec8:	f002 f8ba 	bl	8006040 <TMP117_check>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	b2d9      	uxtb	r1, r3
 8003ed4:	4aa9      	ldr	r2, [pc, #676]	; (800417c <main+0x37c>)
 8003ed6:	7813      	ldrb	r3, [r2, #0]
 8003ed8:	f361 0300 	bfi	r3, r1, #0, #1
 8003edc:	7013      	strb	r3, [r2, #0]
  MS8607_temp_sensor.sensor_present = MS8607_check();
 8003ede:	f002 f94f 	bl	8006180 <MS8607_check>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	b2d9      	uxtb	r1, r3
 8003eea:	4aa5      	ldr	r2, [pc, #660]	; (8004180 <main+0x380>)
 8003eec:	7813      	ldrb	r3, [r2, #0]
 8003eee:	f361 0300 	bfi	r3, r1, #0, #1
 8003ef2:	7013      	strb	r3, [r2, #0]
  if(MS8607_temp_sensor.sensor_present) {
 8003ef4:	4ba2      	ldr	r3, [pc, #648]	; (8004180 <main+0x380>)
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <main+0x118>
	  MS8607_press_sensor.sensor_present = 1;
 8003f02:	4aa0      	ldr	r2, [pc, #640]	; (8004184 <main+0x384>)
 8003f04:	7813      	ldrb	r3, [r2, #0]
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	7013      	strb	r3, [r2, #0]
	  MS8607_hum_sensor.sensor_present = 1;
 8003f0c:	4a9e      	ldr	r2, [pc, #632]	; (8004188 <main+0x388>)
 8003f0e:	7813      	ldrb	r3, [r2, #0]
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	7013      	strb	r3, [r2, #0]
 8003f16:	e009      	b.n	8003f2c <main+0x12c>
  } else {
	  MS8607_press_sensor.sensor_present = 0;
 8003f18:	4a9a      	ldr	r2, [pc, #616]	; (8004184 <main+0x384>)
 8003f1a:	7813      	ldrb	r3, [r2, #0]
 8003f1c:	f36f 0300 	bfc	r3, #0, #1
 8003f20:	7013      	strb	r3, [r2, #0]
	  MS8607_hum_sensor.sensor_present = 0;
 8003f22:	4a99      	ldr	r2, [pc, #612]	; (8004188 <main+0x388>)
 8003f24:	7813      	ldrb	r3, [r2, #0]
 8003f26:	f36f 0300 	bfc	r3, #0, #1
 8003f2a:	7013      	strb	r3, [r2, #0]
  }
  SHTC3_temp_sensor.sensor_present = SHTC3_check();
 8003f2c:	f002 f990 	bl	8006250 <SHTC3_check>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	b2d9      	uxtb	r1, r3
 8003f38:	4a94      	ldr	r2, [pc, #592]	; (800418c <main+0x38c>)
 8003f3a:	7813      	ldrb	r3, [r2, #0]
 8003f3c:	f361 0300 	bfi	r3, r1, #0, #1
 8003f40:	7013      	strb	r3, [r2, #0]
  if(SHTC3_temp_sensor.sensor_present) SHTC3_hum_sensor.sensor_present = 1; else SHTC3_hum_sensor.sensor_present = 0;
 8003f42:	4b92      	ldr	r3, [pc, #584]	; (800418c <main+0x38c>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <main+0x15c>
 8003f50:	4a8f      	ldr	r2, [pc, #572]	; (8004190 <main+0x390>)
 8003f52:	7813      	ldrb	r3, [r2, #0]
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	7013      	strb	r3, [r2, #0]
 8003f5a:	e004      	b.n	8003f66 <main+0x166>
 8003f5c:	4a8c      	ldr	r2, [pc, #560]	; (8004190 <main+0x390>)
 8003f5e:	7813      	ldrb	r3, [r2, #0]
 8003f60:	f36f 0300 	bfc	r3, #0, #1
 8003f64:	7013      	strb	r3, [r2, #0]

  BME280_temp_sensor.sensor_present = BME280_check();
 8003f66:	f002 faa7 	bl	80064b8 <BME280_check>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	b2d9      	uxtb	r1, r3
 8003f72:	4a88      	ldr	r2, [pc, #544]	; (8004194 <main+0x394>)
 8003f74:	7813      	ldrb	r3, [r2, #0]
 8003f76:	f361 0300 	bfi	r3, r1, #0, #1
 8003f7a:	7013      	strb	r3, [r2, #0]
  if(BME280_temp_sensor.sensor_present) {
 8003f7c:	4b85      	ldr	r3, [pc, #532]	; (8004194 <main+0x394>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <main+0x1a0>
	  BME280_press_sensor.sensor_present = 1;
 8003f8a:	4a83      	ldr	r2, [pc, #524]	; (8004198 <main+0x398>)
 8003f8c:	7813      	ldrb	r3, [r2, #0]
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	7013      	strb	r3, [r2, #0]
	  BME280_hum_sensor.sensor_present = 1;
 8003f94:	4a81      	ldr	r2, [pc, #516]	; (800419c <main+0x39c>)
 8003f96:	7813      	ldrb	r3, [r2, #0]
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	7013      	strb	r3, [r2, #0]
 8003f9e:	e009      	b.n	8003fb4 <main+0x1b4>
  } else {
	  BME280_press_sensor.sensor_present = 0;
 8003fa0:	4a7d      	ldr	r2, [pc, #500]	; (8004198 <main+0x398>)
 8003fa2:	7813      	ldrb	r3, [r2, #0]
 8003fa4:	f36f 0300 	bfc	r3, #0, #1
 8003fa8:	7013      	strb	r3, [r2, #0]
	  BME280_hum_sensor.sensor_present = 0;
 8003faa:	4a7c      	ldr	r2, [pc, #496]	; (800419c <main+0x39c>)
 8003fac:	7813      	ldrb	r3, [r2, #0]
 8003fae:	f36f 0300 	bfc	r3, #0, #1
 8003fb2:	7013      	strb	r3, [r2, #0]
  }

  DPS368_temp_sensor.sensor_present = DPS368_check();
 8003fb4:	f7ff fbbc 	bl	8003730 <DPS368_check>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	b2d9      	uxtb	r1, r3
 8003fc0:	4a77      	ldr	r2, [pc, #476]	; (80041a0 <main+0x3a0>)
 8003fc2:	7813      	ldrb	r3, [r2, #0]
 8003fc4:	f361 0300 	bfi	r3, r1, #0, #1
 8003fc8:	7013      	strb	r3, [r2, #0]
  if(DPS368_temp_sensor.sensor_present) {
 8003fca:	4b75      	ldr	r3, [pc, #468]	; (80041a0 <main+0x3a0>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <main+0x1ee>
	  DPS368_press_sensor.sensor_present = 1;
 8003fd8:	4a72      	ldr	r2, [pc, #456]	; (80041a4 <main+0x3a4>)
 8003fda:	7813      	ldrb	r3, [r2, #0]
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	7013      	strb	r3, [r2, #0]
	  DPS368_hum_sensor.sensor_present = 1;
 8003fe2:	4a71      	ldr	r2, [pc, #452]	; (80041a8 <main+0x3a8>)
 8003fe4:	7813      	ldrb	r3, [r2, #0]
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	7013      	strb	r3, [r2, #0]
 8003fec:	e009      	b.n	8004002 <main+0x202>
  } else {
	  DPS368_press_sensor.sensor_present = 0;
 8003fee:	4a6d      	ldr	r2, [pc, #436]	; (80041a4 <main+0x3a4>)
 8003ff0:	7813      	ldrb	r3, [r2, #0]
 8003ff2:	f36f 0300 	bfc	r3, #0, #1
 8003ff6:	7013      	strb	r3, [r2, #0]
	  DPS368_hum_sensor.sensor_present = 0;
 8003ff8:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <main+0x3a8>)
 8003ffa:	7813      	ldrb	r3, [r2, #0]
 8003ffc:	f36f 0300 	bfc	r3, #0, #1
 8004000:	7013      	strb	r3, [r2, #0]
  }

  BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_OFF);
 8004002:	2300      	movs	r3, #0
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2303      	movs	r3, #3
 8004008:	2203      	movs	r2, #3
 800400a:	2103      	movs	r1, #3
 800400c:	2001      	movs	r0, #1
 800400e:	f002 fa91 	bl	8006534 <BME280_init_config>

  DPS368_init(FIFO_DIS, INT_NONE);
 8004012:	2100      	movs	r1, #0
 8004014:	2000      	movs	r0, #0
 8004016:	f7ff fed7 	bl	8003dc8 <DPS368_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  thp_loop();
 800401a:	f001 fe67 	bl	8005cec <thp_loop>
	  if(HAL_GetTick()-ticks1s >= 10000)
 800401e:	f002 fb9f 	bl	8006760 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f242 720f 	movw	r2, #9999	; 0x270f
 800402c:	4293      	cmp	r3, r2
 800402e:	f240 8082 	bls.w	8004136 <main+0x336>
	  {
		  if(cyclic) {
 8004032:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <main+0x3ac>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d07c      	beq.n	8004136 <main+0x336>
			  ticks1s = HAL_GetTick();
 800403c:	f002 fb90 	bl	8006760 <HAL_GetTick>
 8004040:	6078      	str	r0, [r7, #4]
//			  TMP117_temp_sensor.temperature=TMP117_get_temp(avg8);
//			  MS8607_temp_sensor.temperature=MS8607_get_temp();
//			  MS8607_press_sensor.pressure=MS8607_get_press();
			  SHTC3_temp_sensor.temperature=SHTC3_get_temp(0);
 8004042:	2000      	movs	r0, #0
 8004044:	f002 f964 	bl	8006310 <SHTC3_get_temp>
 8004048:	eef0 7a40 	vmov.f32	s15, s0
 800404c:	4b4f      	ldr	r3, [pc, #316]	; (800418c <main+0x38c>)
 800404e:	ee17 2a90 	vmov	r2, s15
 8004052:	f8c3 2001 	str.w	r2, [r3, #1]
			  SHTC3_hum_sensor.humidity=SHTC3_get_hum(0);
 8004056:	2000      	movs	r0, #0
 8004058:	f002 f9c6 	bl	80063e8 <SHTC3_get_hum>
 800405c:	eef0 7a40 	vmov.f32	s15, s0
 8004060:	4b4b      	ldr	r3, [pc, #300]	; (8004190 <main+0x390>)
 8004062:	ee17 2a90 	vmov	r2, s15
 8004066:	f8c3 2001 	str.w	r2, [r3, #1]
			  BME280_temp_sensor.temperature = BME280_get_temp();
 800406a:	f002 fabb 	bl	80065e4 <BME280_get_temp>
 800406e:	eef0 7a40 	vmov.f32	s15, s0
 8004072:	4b48      	ldr	r3, [pc, #288]	; (8004194 <main+0x394>)
 8004074:	ee17 2a90 	vmov	r2, s15
 8004078:	f8c3 2001 	str.w	r2, [r3, #1]
//			  BME280_press_sensor.pressure = BME280_get_press();
//			  printf("Start TEMP DPS\r\n");
//			  DPS368_temp_sensor.temperature = DPS368_get_temp_cmd(DPS_OVERSAMPLE_8);
//			  DPS368_press_sensor.pressure = DPS368_get_press_cmd(DPS_OVERSAMPLE_8);
			  printf("SHTC3 Normal\r\n");
 800407c:	484c      	ldr	r0, [pc, #304]	; (80041b0 <main+0x3b0>)
 800407e:	f00a ff5d 	bl	800ef3c <puts>
			  printf("SHTC3: %.3f", SHTC3_temp_sensor.temperature);
 8004082:	4b42      	ldr	r3, [pc, #264]	; (800418c <main+0x38c>)
 8004084:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fa5d 	bl	8000548 <__aeabi_f2d>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4848      	ldr	r0, [pc, #288]	; (80041b4 <main+0x3b4>)
 8004094:	f00a feec 	bl	800ee70 <iprintf>
			  printf("      ");
 8004098:	4847      	ldr	r0, [pc, #284]	; (80041b8 <main+0x3b8>)
 800409a:	f00a fee9 	bl	800ee70 <iprintf>
			  printf("SHTC3: %.3f", SHTC3_hum_sensor.humidity);
 800409e:	4b3c      	ldr	r3, [pc, #240]	; (8004190 <main+0x390>)
 80040a0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fc fa4f 	bl	8000548 <__aeabi_f2d>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4841      	ldr	r0, [pc, #260]	; (80041b4 <main+0x3b4>)
 80040b0:	f00a fede 	bl	800ee70 <iprintf>
			  printf("\r\n");
 80040b4:	4841      	ldr	r0, [pc, #260]	; (80041bc <main+0x3bc>)
 80040b6:	f00a ff41 	bl	800ef3c <puts>



			  SHTC3_temp_sensor.temperature=SHTC3_get_temp(1);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f002 f928 	bl	8006310 <SHTC3_get_temp>
 80040c0:	eef0 7a40 	vmov.f32	s15, s0
 80040c4:	4b31      	ldr	r3, [pc, #196]	; (800418c <main+0x38c>)
 80040c6:	ee17 2a90 	vmov	r2, s15
 80040ca:	f8c3 2001 	str.w	r2, [r3, #1]
			  SHTC3_hum_sensor.humidity=SHTC3_get_hum(1);
 80040ce:	2001      	movs	r0, #1
 80040d0:	f002 f98a 	bl	80063e8 <SHTC3_get_hum>
 80040d4:	eef0 7a40 	vmov.f32	s15, s0
 80040d8:	4b2d      	ldr	r3, [pc, #180]	; (8004190 <main+0x390>)
 80040da:	ee17 2a90 	vmov	r2, s15
 80040de:	f8c3 2001 	str.w	r2, [r3, #1]

			  printf("SHTC3 LP\r\n");
 80040e2:	4837      	ldr	r0, [pc, #220]	; (80041c0 <main+0x3c0>)
 80040e4:	f00a ff2a 	bl	800ef3c <puts>
			  printf("SHTC3: %.3f", SHTC3_temp_sensor.temperature);
 80040e8:	4b28      	ldr	r3, [pc, #160]	; (800418c <main+0x38c>)
 80040ea:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fc fa2a 	bl	8000548 <__aeabi_f2d>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	482e      	ldr	r0, [pc, #184]	; (80041b4 <main+0x3b4>)
 80040fa:	f00a feb9 	bl	800ee70 <iprintf>
			  printf("      ");
 80040fe:	482e      	ldr	r0, [pc, #184]	; (80041b8 <main+0x3b8>)
 8004100:	f00a feb6 	bl	800ee70 <iprintf>
			  printf("SHTC3: %.3f", SHTC3_hum_sensor.humidity);
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <main+0x390>)
 8004106:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc fa1c 	bl	8000548 <__aeabi_f2d>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4827      	ldr	r0, [pc, #156]	; (80041b4 <main+0x3b4>)
 8004116:	f00a feab 	bl	800ee70 <iprintf>
			  printf("\r\n");
 800411a:	4828      	ldr	r0, [pc, #160]	; (80041bc <main+0x3bc>)
 800411c:	f00a ff0e 	bl	800ef3c <puts>
			  printf("BME280: %.3f", BME280_temp_sensor.temperature);
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <main+0x394>)
 8004122:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fc fa0e 	bl	8000548 <__aeabi_f2d>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4824      	ldr	r0, [pc, #144]	; (80041c4 <main+0x3c4>)
 8004132:	f00a fe9d 	bl	800ee70 <iprintf>
//			  printf("BME280: %d %d %d \r\n",BME280_temp_sensor.sensor_present, BME280_press_sensor.sensor_present, BME280_hum_sensor.sensor_present);
//			  printf("DPS368: %d %d %d \r\n",DPS368_temp_sensor.sensor_present, DPS368_press_sensor.sensor_present, DPS368_hum_sensor.sensor_present);

		  }
	  }
	  if(HAL_GetTick()-ticks30ms >= 30)
 8004136:	f002 fb13 	bl	8006760 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b1d      	cmp	r3, #29
 8004142:	f67f af6a 	bls.w	800401a <main+0x21a>
	  {
	  	    ticks30ms = HAL_GetTick();
 8004146:	f002 fb0b 	bl	8006760 <HAL_GetTick>
 800414a:	6038      	str	r0, [r7, #0]
	  	    LED1_TOGGLE();
 800414c:	2120      	movs	r1, #32
 800414e:	480a      	ldr	r0, [pc, #40]	; (8004178 <main+0x378>)
 8004150:	f004 fea2 	bl	8008e98 <HAL_GPIO_TogglePin>
	  	    check_powerOff();
 8004154:	f001 fd8e 	bl	8005c74 <check_powerOff>
	  thp_loop();
 8004158:	e75f      	b.n	800401a <main+0x21a>
 800415a:	bf00      	nop
 800415c:	20000674 	.word	0x20000674
 8004160:	200006c0 	.word	0x200006c0
 8004164:	20000744 	.word	0x20000744
 8004168:	0801212c 	.word	0x0801212c
 800416c:	08012144 	.word	0x08012144
 8004170:	200007c8 	.word	0x200007c8
 8004174:	08012158 	.word	0x08012158
 8004178:	48000400 	.word	0x48000400
 800417c:	200007cc 	.word	0x200007cc
 8004180:	200007d8 	.word	0x200007d8
 8004184:	20000808 	.word	0x20000808
 8004188:	2000082c 	.word	0x2000082c
 800418c:	200007e4 	.word	0x200007e4
 8004190:	20000838 	.word	0x20000838
 8004194:	200007f0 	.word	0x200007f0
 8004198:	20000814 	.word	0x20000814
 800419c:	20000844 	.word	0x20000844
 80041a0:	200007fc 	.word	0x200007fc
 80041a4:	20000820 	.word	0x20000820
 80041a8:	20000850 	.word	0x20000850
 80041ac:	200007c9 	.word	0x200007c9
 80041b0:	0801216c 	.word	0x0801216c
 80041b4:	0801217c 	.word	0x0801217c
 80041b8:	08012188 	.word	0x08012188
 80041bc:	08012190 	.word	0x08012190
 80041c0:	08012194 	.word	0x08012194
 80041c4:	080121a0 	.word	0x080121a0

080041c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b096      	sub	sp, #88	; 0x58
 80041cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ce:	f107 0314 	add.w	r3, r7, #20
 80041d2:	2244      	movs	r2, #68	; 0x44
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f00a ff90 	bl	800f0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041dc:	463b      	mov	r3, r7
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	60da      	str	r2, [r3, #12]
 80041e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80041ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80041ee:	f005 ffe3 	bl	800a1b8 <HAL_PWREx_ControlVoltageScaling>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80041f8:	f000 fb8a 	bl	8004910 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041fc:	2301      	movs	r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004206:	2302      	movs	r3, #2
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800420a:	2303      	movs	r3, #3
 800420c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004212:	230a      	movs	r3, #10
 8004214:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004216:	2307      	movs	r3, #7
 8004218:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800421a:	2302      	movs	r3, #2
 800421c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800421e:	2302      	movs	r3, #2
 8004220:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	4618      	mov	r0, r3
 8004228:	f006 f81c 	bl	800a264 <HAL_RCC_OscConfig>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004232:	f000 fb6d 	bl	8004910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004236:	230f      	movs	r3, #15
 8004238:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800423a:	2303      	movs	r3, #3
 800423c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004246:	2300      	movs	r3, #0
 8004248:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800424a:	463b      	mov	r3, r7
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f006 fc1c 	bl	800aa8c <HAL_RCC_ClockConfig>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800425a:	f000 fb59 	bl	8004910 <Error_Handler>
  }
}
 800425e:	bf00      	nop
 8004260:	3758      	adds	r7, #88	; 0x58
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2100      	movs	r1, #0
 800426e:	2025      	movs	r0, #37	; 0x25
 8004270:	f003 fd3f 	bl	8007cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004274:	2025      	movs	r0, #37	; 0x25
 8004276:	f003 fd58 	bl	8007d2a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800427a:	2200      	movs	r2, #0
 800427c:	2100      	movs	r1, #0
 800427e:	2026      	movs	r0, #38	; 0x26
 8004280:	f003 fd37 	bl	8007cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004284:	2026      	movs	r0, #38	; 0x26
 8004286:	f003 fd50 	bl	8007d2a <HAL_NVIC_EnableIRQ>
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004296:	463b      	mov	r3, r7
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	60da      	str	r2, [r3, #12]
 80042a2:	611a      	str	r2, [r3, #16]
 80042a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80042a6:	4b2f      	ldr	r3, [pc, #188]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042a8:	4a2f      	ldr	r2, [pc, #188]	; (8004368 <MX_ADC1_Init+0xd8>)
 80042aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80042ac:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80042b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80042b4:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042ba:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042bc:	2200      	movs	r2, #0
 80042be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80042c0:	4b28      	ldr	r3, [pc, #160]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042c6:	4b27      	ldr	r3, [pc, #156]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042c8:	2204      	movs	r2, #4
 80042ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80042d2:	4b24      	ldr	r3, [pc, #144]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80042d8:	4b22      	ldr	r3, [pc, #136]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042da:	2201      	movs	r2, #1
 80042dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042ec:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80042f2:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80042fa:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <MX_ADC1_Init+0xd4>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8004300:	4b18      	ldr	r3, [pc, #96]	; (8004364 <MX_ADC1_Init+0xd4>)
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8004308:	4b16      	ldr	r3, [pc, #88]	; (8004364 <MX_ADC1_Init+0xd4>)
 800430a:	220c      	movs	r2, #12
 800430c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <MX_ADC1_Init+0xd4>)
 8004310:	2200      	movs	r2, #0
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <MX_ADC1_Init+0xd4>)
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <MX_ADC1_Init+0xd4>)
 800431c:	2201      	movs	r2, #1
 800431e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004320:	4810      	ldr	r0, [pc, #64]	; (8004364 <MX_ADC1_Init+0xd4>)
 8004322:	f002 fc3b 	bl	8006b9c <HAL_ADC_Init>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800432c:	f000 faf0 	bl	8004910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <MX_ADC1_Init+0xdc>)
 8004332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004334:	2306      	movs	r3, #6
 8004336:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004338:	2307      	movs	r3, #7
 800433a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800433c:	237f      	movs	r3, #127	; 0x7f
 800433e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004340:	2304      	movs	r3, #4
 8004342:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004348:	463b      	mov	r3, r7
 800434a:	4619      	mov	r1, r3
 800434c:	4805      	ldr	r0, [pc, #20]	; (8004364 <MX_ADC1_Init+0xd4>)
 800434e:	f002 fe0f 	bl	8006f70 <HAL_ADC_ConfigChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004358:	f000 fada 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800435c:	bf00      	nop
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	200004a8 	.word	0x200004a8
 8004368:	50040000 	.word	0x50040000
 800436c:	c7520000 	.word	0xc7520000

08004370 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004374:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <MX_CRC_Init+0x50>)
 8004376:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <MX_CRC_Init+0x54>)
 8004378:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800437a:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <MX_CRC_Init+0x50>)
 800437c:	2201      	movs	r2, #1
 800437e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8004380:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <MX_CRC_Init+0x50>)
 8004382:	2201      	movs	r2, #1
 8004384:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x31;
 8004386:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <MX_CRC_Init+0x50>)
 8004388:	2231      	movs	r2, #49	; 0x31
 800438a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 800438c:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <MX_CRC_Init+0x50>)
 800438e:	2210      	movs	r2, #16
 8004390:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFF;
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <MX_CRC_Init+0x50>)
 8004394:	22ff      	movs	r2, #255	; 0xff
 8004396:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <MX_CRC_Init+0x50>)
 800439a:	2200      	movs	r2, #0
 800439c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800439e:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <MX_CRC_Init+0x50>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <MX_CRC_Init+0x50>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80043aa:	4805      	ldr	r0, [pc, #20]	; (80043c0 <MX_CRC_Init+0x50>)
 80043ac:	f003 fcde 	bl	8007d6c <HAL_CRC_Init>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80043b6:	f000 faab 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000554 	.word	0x20000554
 80043c4:	40023000 	.word	0x40023000

080043c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80043cc:	4b1b      	ldr	r3, [pc, #108]	; (800443c <MX_I2C1_Init+0x74>)
 80043ce:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <MX_I2C1_Init+0x78>)
 80043d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <MX_I2C1_Init+0x74>)
 80043d4:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <MX_I2C1_Init+0x7c>)
 80043d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80043d8:	4b18      	ldr	r3, [pc, #96]	; (800443c <MX_I2C1_Init+0x74>)
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <MX_I2C1_Init+0x74>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043e4:	4b15      	ldr	r3, [pc, #84]	; (800443c <MX_I2C1_Init+0x74>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <MX_I2C1_Init+0x74>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <MX_I2C1_Init+0x74>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043f6:	4b11      	ldr	r3, [pc, #68]	; (800443c <MX_I2C1_Init+0x74>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <MX_I2C1_Init+0x74>)
 80043fe:	2200      	movs	r2, #0
 8004400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004402:	480e      	ldr	r0, [pc, #56]	; (800443c <MX_I2C1_Init+0x74>)
 8004404:	f004 fd62 	bl	8008ecc <HAL_I2C_Init>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800440e:	f000 fa7f 	bl	8004910 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004412:	2100      	movs	r1, #0
 8004414:	4809      	ldr	r0, [pc, #36]	; (800443c <MX_I2C1_Init+0x74>)
 8004416:	f005 fe29 	bl	800a06c <HAL_I2CEx_ConfigAnalogFilter>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004420:	f000 fa76 	bl	8004910 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004424:	2100      	movs	r1, #0
 8004426:	4805      	ldr	r0, [pc, #20]	; (800443c <MX_I2C1_Init+0x74>)
 8004428:	f005 fe6b 	bl	800a102 <HAL_I2CEx_ConfigDigitalFilter>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004432:	f000 fa6d 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000578 	.word	0x20000578
 8004440:	40005400 	.word	0x40005400
 8004444:	00301347 	.word	0x00301347

08004448 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <MX_I2C2_Init+0x74>)
 800444e:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <MX_I2C2_Init+0x78>)
 8004450:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 8004452:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <MX_I2C2_Init+0x74>)
 8004454:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <MX_I2C2_Init+0x7c>)
 8004456:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <MX_I2C2_Init+0x74>)
 800445a:	2200      	movs	r2, #0
 800445c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <MX_I2C2_Init+0x74>)
 8004460:	2201      	movs	r2, #1
 8004462:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <MX_I2C2_Init+0x74>)
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <MX_I2C2_Init+0x74>)
 800446c:	2200      	movs	r2, #0
 800446e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <MX_I2C2_Init+0x74>)
 8004472:	2200      	movs	r2, #0
 8004474:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <MX_I2C2_Init+0x74>)
 8004478:	2200      	movs	r2, #0
 800447a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800447c:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <MX_I2C2_Init+0x74>)
 800447e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004482:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004484:	480d      	ldr	r0, [pc, #52]	; (80044bc <MX_I2C2_Init+0x74>)
 8004486:	f004 fd21 	bl	8008ecc <HAL_I2C_Init>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004490:	f000 fa3e 	bl	8004910 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004494:	2100      	movs	r1, #0
 8004496:	4809      	ldr	r0, [pc, #36]	; (80044bc <MX_I2C2_Init+0x74>)
 8004498:	f005 fde8 	bl	800a06c <HAL_I2CEx_ConfigAnalogFilter>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80044a2:	f000 fa35 	bl	8004910 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80044a6:	2100      	movs	r1, #0
 80044a8:	4804      	ldr	r0, [pc, #16]	; (80044bc <MX_I2C2_Init+0x74>)
 80044aa:	f005 fe2a 	bl	800a102 <HAL_I2CEx_ConfigDigitalFilter>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80044b4:	f000 fa2c 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200005cc 	.word	0x200005cc
 80044c0:	40005800 	.word	0x40005800
 80044c4:	00301347 	.word	0x00301347

080044c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <MX_I2C3_Init+0x74>)
 80044ce:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <MX_I2C3_Init+0x78>)
 80044d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00301347;
 80044d2:	4b1a      	ldr	r3, [pc, #104]	; (800453c <MX_I2C3_Init+0x74>)
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <MX_I2C3_Init+0x7c>)
 80044d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80044d8:	4b18      	ldr	r3, [pc, #96]	; (800453c <MX_I2C3_Init+0x74>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044de:	4b17      	ldr	r3, [pc, #92]	; (800453c <MX_I2C3_Init+0x74>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <MX_I2C3_Init+0x74>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80044ea:	4b14      	ldr	r3, [pc, #80]	; (800453c <MX_I2C3_Init+0x74>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <MX_I2C3_Init+0x74>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <MX_I2C3_Init+0x74>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <MX_I2C3_Init+0x74>)
 80044fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004504:	480d      	ldr	r0, [pc, #52]	; (800453c <MX_I2C3_Init+0x74>)
 8004506:	f004 fce1 	bl	8008ecc <HAL_I2C_Init>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004510:	f000 f9fe 	bl	8004910 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004514:	2100      	movs	r1, #0
 8004516:	4809      	ldr	r0, [pc, #36]	; (800453c <MX_I2C3_Init+0x74>)
 8004518:	f005 fda8 	bl	800a06c <HAL_I2CEx_ConfigAnalogFilter>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8004522:	f000 f9f5 	bl	8004910 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004526:	2100      	movs	r1, #0
 8004528:	4804      	ldr	r0, [pc, #16]	; (800453c <MX_I2C3_Init+0x74>)
 800452a:	f005 fdea 	bl	800a102 <HAL_I2CEx_ConfigDigitalFilter>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8004534:	f000 f9ec 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000620 	.word	0x20000620
 8004540:	40005c00 	.word	0x40005c00
 8004544:	00301347 	.word	0x00301347

08004548 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b092      	sub	sp, #72	; 0x48
 800454c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800454e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	605a      	str	r2, [r3, #4]
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	611a      	str	r2, [r3, #16]
 800455e:	615a      	str	r2, [r3, #20]
 8004560:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004562:	463b      	mov	r3, r7
 8004564:	222c      	movs	r2, #44	; 0x2c
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f00a fdc7 	bl	800f0fc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <MX_TIM16_Init+0xe8>)
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <MX_TIM16_Init+0xec>)
 8004572:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 312;
 8004574:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <MX_TIM16_Init+0xe8>)
 8004576:	f44f 729c 	mov.w	r2, #312	; 0x138
 800457a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800457c:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <MX_TIM16_Init+0xe8>)
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256;
 8004582:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <MX_TIM16_Init+0xe8>)
 8004584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004588:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800458a:	4b29      	ldr	r3, [pc, #164]	; (8004630 <MX_TIM16_Init+0xe8>)
 800458c:	2200      	movs	r2, #0
 800458e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004590:	4b27      	ldr	r3, [pc, #156]	; (8004630 <MX_TIM16_Init+0xe8>)
 8004592:	2200      	movs	r2, #0
 8004594:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <MX_TIM16_Init+0xe8>)
 8004598:	2200      	movs	r2, #0
 800459a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800459c:	4824      	ldr	r0, [pc, #144]	; (8004630 <MX_TIM16_Init+0xe8>)
 800459e:	f006 ffa3 	bl	800b4e8 <HAL_TIM_Base_Init>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80045a8:	f000 f9b2 	bl	8004910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80045ac:	4820      	ldr	r0, [pc, #128]	; (8004630 <MX_TIM16_Init+0xe8>)
 80045ae:	f006 fff2 	bl	800b596 <HAL_TIM_PWM_Init>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80045b8:	f000 f9aa 	bl	8004910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045bc:	2360      	movs	r3, #96	; 0x60
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80045c4:	2302      	movs	r3, #2
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80045c8:	2300      	movs	r3, #0
 80045ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80045cc:	2304      	movs	r3, #4
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80045d0:	2300      	movs	r3, #0
 80045d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80045d4:	2300      	movs	r3, #0
 80045d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045dc:	2200      	movs	r2, #0
 80045de:	4619      	mov	r1, r3
 80045e0:	4813      	ldr	r0, [pc, #76]	; (8004630 <MX_TIM16_Init+0xe8>)
 80045e2:	f007 f917 	bl	800b814 <HAL_TIM_PWM_ConfigChannel>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80045ec:	f000 f990 	bl	8004910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004608:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800460e:	463b      	mov	r3, r7
 8004610:	4619      	mov	r1, r3
 8004612:	4807      	ldr	r0, [pc, #28]	; (8004630 <MX_TIM16_Init+0xe8>)
 8004614:	f007 fd1a 	bl	800c04c <HAL_TIMEx_ConfigBreakDeadTime>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800461e:	f000 f977 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004622:	4803      	ldr	r0, [pc, #12]	; (8004630 <MX_TIM16_Init+0xe8>)
 8004624:	f001 f886 	bl	8005734 <HAL_TIM_MspPostInit>

}
 8004628:	bf00      	nop
 800462a:	3748      	adds	r7, #72	; 0x48
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000674 	.word	0x20000674
 8004634:	40014400 	.word	0x40014400

08004638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <MX_USART1_UART_Init+0x58>)
 800463e:	4a15      	ldr	r2, [pc, #84]	; (8004694 <MX_USART1_UART_Init+0x5c>)
 8004640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004642:	4b13      	ldr	r3, [pc, #76]	; (8004690 <MX_USART1_UART_Init+0x58>)
 8004644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800464a:	4b11      	ldr	r3, [pc, #68]	; (8004690 <MX_USART1_UART_Init+0x58>)
 800464c:	2200      	movs	r2, #0
 800464e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <MX_USART1_UART_Init+0x58>)
 8004652:	2200      	movs	r2, #0
 8004654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004656:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <MX_USART1_UART_Init+0x58>)
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <MX_USART1_UART_Init+0x58>)
 800465e:	220c      	movs	r2, #12
 8004660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <MX_USART1_UART_Init+0x58>)
 8004664:	2200      	movs	r2, #0
 8004666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <MX_USART1_UART_Init+0x58>)
 800466a:	2200      	movs	r2, #0
 800466c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <MX_USART1_UART_Init+0x58>)
 8004670:	2200      	movs	r2, #0
 8004672:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <MX_USART1_UART_Init+0x58>)
 8004676:	2200      	movs	r2, #0
 8004678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800467a:	4805      	ldr	r0, [pc, #20]	; (8004690 <MX_USART1_UART_Init+0x58>)
 800467c:	f007 fd5e 	bl	800c13c <HAL_UART_Init>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004686:	f000 f943 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200006c0 	.word	0x200006c0
 8004694:	40013800 	.word	0x40013800

08004698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800469c:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 800469e:	4a15      	ldr	r2, [pc, #84]	; (80046f4 <MX_USART2_UART_Init+0x5c>)
 80046a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046be:	220c      	movs	r2, #12
 80046c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046c8:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046da:	4805      	ldr	r0, [pc, #20]	; (80046f0 <MX_USART2_UART_Init+0x58>)
 80046dc:	f007 fd2e 	bl	800c13c <HAL_UART_Init>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80046e6:	f000 f913 	bl	8004910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000744 	.word	0x20000744
 80046f4:	40004400 	.word	0x40004400

080046f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <MX_DMA_Init+0x38>)
 8004700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004702:	4a0b      	ldr	r2, [pc, #44]	; (8004730 <MX_DMA_Init+0x38>)
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	6493      	str	r3, [r2, #72]	; 0x48
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <MX_DMA_Init+0x38>)
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	607b      	str	r3, [r7, #4]
 8004714:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	200b      	movs	r0, #11
 800471c:	f003 fae9 	bl	8007cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004720:	200b      	movs	r0, #11
 8004722:	f003 fb02 	bl	8007d2a <HAL_NVIC_EnableIRQ>

}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40021000 	.word	0x40021000

08004734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	60da      	str	r2, [r3, #12]
 8004748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <MX_GPIO_Init+0x1cc>)
 800474c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474e:	4a6c      	ldr	r2, [pc, #432]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004750:	f043 0304 	orr.w	r3, r3, #4
 8004754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004756:	4b6a      	ldr	r3, [pc, #424]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004762:	4b67      	ldr	r3, [pc, #412]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004766:	4a66      	ldr	r2, [pc, #408]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800476e:	4b64      	ldr	r3, [pc, #400]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800477a:	4b61      	ldr	r3, [pc, #388]	; (8004900 <MX_GPIO_Init+0x1cc>)
 800477c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477e:	4a60      	ldr	r2, [pc, #384]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004780:	f043 0301 	orr.w	r3, r3, #1
 8004784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004786:	4b5e      	ldr	r3, [pc, #376]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004792:	4b5b      	ldr	r3, [pc, #364]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004796:	4a5a      	ldr	r2, [pc, #360]	; (8004900 <MX_GPIO_Init+0x1cc>)
 8004798:	f043 0302 	orr.w	r3, r3, #2
 800479c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800479e:	4b58      	ldr	r3, [pc, #352]	; (8004900 <MX_GPIO_Init+0x1cc>)
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	607b      	str	r3, [r7, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 80047aa:	2200      	movs	r2, #0
 80047ac:	f44f 51cb 	mov.w	r1, #6496	; 0x1960
 80047b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047b4:	f004 fb58 	bl	8008e68 <HAL_GPIO_WritePin>
                          |BQ_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 80047b8:	2200      	movs	r2, #0
 80047ba:	f248 2121 	movw	r1, #33313	; 0x8221
 80047be:	4851      	ldr	r0, [pc, #324]	; (8004904 <MX_GPIO_Init+0x1d0>)
 80047c0:	f004 fb52 	bl	8008e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : But_ONOFF_Pin */
  GPIO_InitStruct.Pin = But_ONOFF_Pin;
 80047c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 80047d2:	f107 0314 	add.w	r3, r7, #20
 80047d6:	4619      	mov	r1, r3
 80047d8:	484b      	ldr	r0, [pc, #300]	; (8004908 <MX_GPIO_Init+0x1d4>)
 80047da:	f004 f9b3 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80047de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80047e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047e4:	2303      	movs	r3, #3
 80047e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ec:	f107 0314 	add.w	r3, r7, #20
 80047f0:	4619      	mov	r1, r3
 80047f2:	4845      	ldr	r0, [pc, #276]	; (8004908 <MX_GPIO_Init+0x1d4>)
 80047f4:	f004 f9a6 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80047f8:	f248 0302 	movw	r3, #32770	; 0x8002
 80047fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047fe:	2303      	movs	r3, #3
 8004800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	4619      	mov	r1, r3
 800480c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004810:	f004 f998 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_UART_RI_Pin */
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 8004814:	2310      	movs	r3, #16
 8004816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	4619      	mov	r1, r3
 8004826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800482a:	f004 f98b 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_UART_DTR_Pin SIM_GPS_Pin BQ_QON_Pin BQ_CE_Pin */
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|SIM_GPS_Pin|BQ_QON_Pin|BQ_CE_Pin;
 800482e:	f44f 53c3 	mov.w	r3, #6240	; 0x1860
 8004832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004834:	2301      	movs	r3, #1
 8004836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483c:	2300      	movs	r3, #0
 800483e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	4619      	mov	r1, r3
 8004846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800484a:	f004 f97b 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_PWR_Pin LED1_Pin Main_SW_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin|LED1_Pin|Main_SW_Pin;
 800484e:	f240 2321 	movw	r3, #545	; 0x221
 8004852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004854:	2301      	movs	r3, #1
 8004856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485c:	2300      	movs	r3, #0
 800485e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	4619      	mov	r1, r3
 8004866:	4827      	ldr	r0, [pc, #156]	; (8004904 <MX_GPIO_Init+0x1d0>)
 8004868:	f004 f96c 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_WDT_Pin BQ_INT_Pin */
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 800486c:	f241 0302 	movw	r3, #4098	; 0x1002
 8004870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	4820      	ldr	r0, [pc, #128]	; (8004904 <MX_GPIO_Init+0x1d0>)
 8004882:	f004 f95f 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP7_Pin TP8_Pin PB11 PB3 */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8004886:	f640 430c 	movw	r3, #3084	; 0xc0c
 800488a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800488c:	2303      	movs	r3, #3
 800488e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004894:	f107 0314 	add.w	r3, r7, #20
 8004898:	4619      	mov	r1, r3
 800489a:	481a      	ldr	r0, [pc, #104]	; (8004904 <MX_GPIO_Init+0x1d0>)
 800489c:	f004 f952 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST3_Pin */
  GPIO_InitStruct.Pin = RST3_Pin;
 80048a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048a6:	2301      	movs	r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST3_GPIO_Port, &GPIO_InitStruct);
 80048b2:	f107 0314 	add.w	r3, r7, #20
 80048b6:	4619      	mov	r1, r3
 80048b8:	4812      	ldr	r0, [pc, #72]	; (8004904 <MX_GPIO_Init+0x1d0>)
 80048ba:	f004 f943 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST2_Pin */
  GPIO_InitStruct.Pin = RST2_Pin;
 80048be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c4:	2301      	movs	r3, #1
 80048c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048c8:	2301      	movs	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048cc:	2300      	movs	r3, #0
 80048ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 80048d0:	f107 0314 	add.w	r3, r7, #20
 80048d4:	4619      	mov	r1, r3
 80048d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048da:	f004 f933 	bl	8008b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048de:	2308      	movs	r3, #8
 80048e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048e2:	2303      	movs	r3, #3
 80048e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80048ea:	f107 0314 	add.w	r3, r7, #20
 80048ee:	4619      	mov	r1, r3
 80048f0:	4806      	ldr	r0, [pc, #24]	; (800490c <MX_GPIO_Init+0x1d8>)
 80048f2:	f004 f927 	bl	8008b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80048f6:	bf00      	nop
 80048f8:	3728      	adds	r7, #40	; 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000
 8004904:	48000400 	.word	0x48000400
 8004908:	48000800 	.word	0x48000800
 800490c:	48001c00 	.word	0x48001c00

08004910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004914:	b672      	cpsid	i
}
 8004916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LED1_OFF();
 8004918:	2201      	movs	r2, #1
 800491a:	2120      	movs	r1, #32
 800491c:	4803      	ldr	r0, [pc, #12]	; (800492c <Error_Handler+0x1c>)
 800491e:	f004 faa3 	bl	8008e68 <HAL_GPIO_WritePin>
  LED2_ON();
 8004922:	201f      	movs	r0, #31
 8004924:	f001 f95a 	bl	8005bdc <setLed2>
  while (1)
 8004928:	e7fe      	b.n	8004928 <Error_Handler+0x18>
 800492a:	bf00      	nop
 800492c:	48000400 	.word	0x48000400

08004930 <ms8607_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the ms8607 device.
 */
void ms8607_init(void)
{	
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
	hsensor_i2c_master_mode = ms8607_i2c_no_hold;
 8004934:	4b04      	ldr	r3, [pc, #16]	; (8004948 <ms8607_init+0x18>)
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 800493a:	4b04      	ldr	r3, [pc, #16]	; (800494c <ms8607_init+0x1c>)
 800493c:	2205      	movs	r2, #5
 800493e:	701a      	strb	r2, [r3, #0]
	
	/* Initialize and enable device with config. */
	i2c_master_init();
 8004940:	f000 fcdd 	bl	80052fe <i2c_master_init>
}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200008ca 	.word	0x200008ca
 800494c:	200008cb 	.word	0x200008cb

08004950 <ms8607_is_connected>:
 * \return bool : status of MS8607
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool ms8607_is_connected(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	return (hsensor_is_connected() && psensor_is_connected());
 8004954:	f000 f823 	bl	800499e <hsensor_is_connected>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d006      	beq.n	800496c <ms8607_is_connected+0x1c>
 800495e:	f000 f837 	bl	80049d0 <psensor_is_connected>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <ms8607_is_connected+0x1c>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <ms8607_is_connected+0x1e>
 800496c:	2300      	movs	r3, #0
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	b2db      	uxtb	r3, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}

08004978 <ms8607_read_temperature>:

	return ms8607_status_ok;
}

enum ms8607_status ms8607_read_temperature( float *t)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	enum ms8607_status status;

	status = psensor_read_temperature(t);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f93f 	bl	8004c04 <psensor_read_temperature>
 8004986:	4603      	mov	r3, r0
 8004988:	73fb      	strb	r3, [r7, #15]
	if(status != ms8607_status_ok)
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <ms8607_read_temperature+0x1c>
		return status;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	e000      	b.n	8004996 <ms8607_read_temperature+0x1e>

	return ms8607_status_ok;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <hsensor_is_connected>:
 * \return bool : status of humidity sensor
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool hsensor_is_connected(void)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
	enum status_code i2c_status;
	
	struct i2c_master_packet transfer = {
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	80bb      	strh	r3, [r7, #4]
 80049a8:	2300      	movs	r3, #0
 80049aa:	80fb      	strh	r3, [r7, #6]
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
		.address     = HSENSOR_ADDR,
		.data_length = 0,
		.data        = NULL,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80049b0:	1d3b      	adds	r3, r7, #4
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fcc2 	bl	800533c <i2c_master_write_packet_wait>
 80049b8:	4603      	mov	r3, r0
 80049ba:	73fb      	strb	r3, [r7, #15]
	if( i2c_status != STATUS_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <hsensor_is_connected+0x28>
		return false;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <hsensor_is_connected+0x2a>
	
	return true;
 80049c6:	2301      	movs	r3, #1
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <psensor_is_connected>:
 * \return bool : status of Pressure sensor
 *       - true : Device is present
 *       - false : Device is not acknowledging I2C address
  */
bool psensor_is_connected(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
	enum status_code i2c_status;
	
	struct i2c_master_packet transfer = {
 80049d6:	23ec      	movs	r3, #236	; 0xec
 80049d8:	80bb      	strh	r3, [r7, #4]
 80049da:	2300      	movs	r3, #0
 80049dc:	80fb      	strh	r3, [r7, #6]
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
		.address     = PSENSOR_ADDR,
		.data_length = 0,
		.data        = NULL,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80049e2:	1d3b      	adds	r3, r7, #4
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fca9 	bl	800533c <i2c_master_write_packet_wait>
 80049ea:	4603      	mov	r3, r0
 80049ec:	73fb      	strb	r3, [r7, #15]
	if( i2c_status != STATUS_OK)
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <psensor_is_connected+0x28>
		return false;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <psensor_is_connected+0x2a>
	
	return true;
 80049f8:	2301      	movs	r3, #1
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <psensor_write_command>:
 *       - ms8607_status_ok : I2C transfer completed successfully
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 */
enum ms8607_status psensor_write_command( uint8_t cmd)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	4603      	mov	r3, r0
 8004a0a:	71fb      	strb	r3, [r7, #7]
	enum status_code i2c_status;
	uint8_t data[1];
		
	data[0] = cmd;
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	753b      	strb	r3, [r7, #20]
		
	struct i2c_master_packet transfer = {
 8004a10:	23ec      	movs	r3, #236	; 0xec
 8004a12:	81bb      	strh	r3, [r7, #12]
 8004a14:	2301      	movs	r3, #1
 8004a16:	81fb      	strh	r3, [r7, #14]
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	613b      	str	r3, [r7, #16]
		.address     = PSENSOR_ADDR,
		.data_length = 1,
		.data        = data,
	};
	/* Do the transfer */
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8004a1e:	f107 030c 	add.w	r3, r7, #12
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fc8a 	bl	800533c <i2c_master_write_packet_wait>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	75fb      	strb	r3, [r7, #23]
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <psensor_write_command+0x34>
		return ms8607_status_no_i2c_acknowledge;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e005      	b.n	8004a42 <psensor_write_command+0x40>
	if( i2c_status != STATUS_OK)
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <psensor_write_command+0x3e>
		return ms8607_status_i2c_transfer_error;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e000      	b.n	8004a42 <psensor_write_command+0x40>
	
	return ms8607_status_ok;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <psensor_read_eeprom_coeff>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error on the coefficients
 */
enum ms8607_status psensor_read_eeprom_coeff(uint8_t command, uint16_t *coeff)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	4603      	mov	r3, r0
 8004a52:	6039      	str	r1, [r7, #0]
 8004a54:	71fb      	strb	r3, [r7, #7]
	enum ms8607_status status;
	enum status_code i2c_status;
	uint8_t buffer[2];
	
	buffer[0] = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	753b      	strb	r3, [r7, #20]
	buffer[1] = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	757b      	strb	r3, [r7, #21]

	/* Read data */
	struct i2c_master_packet read_transfer = {
 8004a5e:	23ec      	movs	r3, #236	; 0xec
 8004a60:	81bb      	strh	r3, [r7, #12]
 8004a62:	2302      	movs	r3, #2
 8004a64:	81fb      	strh	r3, [r7, #14]
 8004a66:	f107 0314 	add.w	r3, r7, #20
 8004a6a:	613b      	str	r3, [r7, #16]
		.data_length = 2,
		.data        = buffer,
	};
	
	// Send the conversion command
	status = psensor_write_command(command);
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ffc7 	bl	8004a02 <psensor_write_command>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]
	if(status != ms8607_status_ok)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <psensor_read_eeprom_coeff+0x38>
		return status;
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	e021      	b.n	8004ac6 <psensor_read_eeprom_coeff+0x7c>
	
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8004a82:	f107 030c 	add.w	r3, r7, #12
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fc40 	bl	800530c <i2c_master_read_packet_wait>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	75bb      	strb	r3, [r7, #22]
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004a90:	7dbb      	ldrb	r3, [r7, #22]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <psensor_read_eeprom_coeff+0x50>
		return ms8607_status_no_i2c_acknowledge;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e015      	b.n	8004ac6 <psensor_read_eeprom_coeff+0x7c>
	if( i2c_status != STATUS_OK)
 8004a9a:	7dbb      	ldrb	r3, [r7, #22]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <psensor_read_eeprom_coeff+0x5a>
		return ms8607_status_i2c_transfer_error;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e010      	b.n	8004ac6 <psensor_read_eeprom_coeff+0x7c>
		
	*coeff = (buffer[0] << 8) | buffer[1];
 8004aa4:	7d3b      	ldrb	r3, [r7, #20]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	b21a      	sxth	r2, r3
 8004aaa:	7d7b      	ldrb	r3, [r7, #21]
 8004aac:	b21b      	sxth	r3, r3
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	b21b      	sxth	r3, r3
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	801a      	strh	r2, [r3, #0]
    
    if (*coeff == 0)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <psensor_read_eeprom_coeff+0x7a>
        return ms8607_status_i2c_transfer_error;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e000      	b.n	8004ac6 <psensor_read_eeprom_coeff+0x7c>
	
	return ms8607_status_ok;	
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <psensor_read_eeprom>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error on the coefficients
 */
enum ms8607_status psensor_read_eeprom(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
	enum ms8607_status status;
	uint8_t i;
	
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	71fb      	strb	r3, [r7, #7]
 8004ada:	e016      	b.n	8004b0a <psensor_read_eeprom+0x3a>
	{
		status = psensor_read_eeprom_coeff( PROM_ADDRESS_READ_ADDRESS_0 + i*2, eeprom_coeff+i);
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	3350      	adds	r3, #80	; 0x50
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4916      	ldr	r1, [pc, #88]	; (8004b44 <psensor_read_eeprom+0x74>)
 8004aec:	440b      	add	r3, r1
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7ff ffaa 	bl	8004a4a <psensor_read_eeprom_coeff>
 8004af6:	4603      	mov	r3, r0
 8004af8:	71bb      	strb	r3, [r7, #6]
		if(status != ms8607_status_ok)
 8004afa:	79bb      	ldrb	r3, [r7, #6]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <psensor_read_eeprom+0x34>
			return status;
 8004b00:	79bb      	ldrb	r3, [r7, #6]
 8004b02:	e01a      	b.n	8004b3a <psensor_read_eeprom+0x6a>
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	3301      	adds	r3, #1
 8004b08:	71fb      	strb	r3, [r7, #7]
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	2b06      	cmp	r3, #6
 8004b0e:	d9e5      	bls.n	8004adc <psensor_read_eeprom+0xc>
	}
	
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <psensor_read_eeprom+0x74>)
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	0b1b      	lsrs	r3, r3, #12
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4809      	ldr	r0, [pc, #36]	; (8004b44 <psensor_read_eeprom+0x74>)
 8004b1e:	f000 fb81 	bl	8005224 <psensor_crc_check>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f083 0301 	eor.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <psensor_read_eeprom+0x62>
		return ms8607_status_crc_error;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e003      	b.n	8004b3a <psensor_read_eeprom+0x6a>
	
	psensor_coeff_read = true;
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <psensor_read_eeprom+0x78>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]
	
  	return ms8607_status_ok;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	200008d0 	.word	0x200008d0
 8004b48:	200008cc 	.word	0x200008cc

08004b4c <psensor_conversion_and_read_adc>:
 *       - ms8607_status_ok : I2C transfer completed successfully
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 */
static enum ms8607_status psensor_conversion_and_read_adc(uint8_t cmd, uint32_t *adc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	71fb      	strb	r3, [r7, #7]
	enum ms8607_status status;
	enum status_code i2c_status;
	uint8_t buffer[3];
	
	buffer[0] = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	743b      	strb	r3, [r7, #16]
	buffer[1] = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	747b      	strb	r3, [r7, #17]
	buffer[2] = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	74bb      	strb	r3, [r7, #18]

	/* Read data */
    struct i2c_master_packet read_transfer = {
 8004b64:	23ec      	movs	r3, #236	; 0xec
 8004b66:	813b      	strh	r3, [r7, #8]
 8004b68:	2303      	movs	r3, #3
 8004b6a:	817b      	strh	r3, [r7, #10]
 8004b6c:	f107 0310 	add.w	r3, r7, #16
 8004b70:	60fb      	str	r3, [r7, #12]
		.address     = PSENSOR_ADDR,
		.data_length = 3,
		.data        = buffer,
	};

	status = psensor_write_command(cmd);
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff44 	bl	8004a02 <psensor_write_command>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	75fb      	strb	r3, [r7, #23]
	// 20ms wait for conversion
	HAL_Delay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	0fda      	lsrs	r2, r3, #31
 8004b86:	4413      	add	r3, r2
 8004b88:	105b      	asrs	r3, r3, #1
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <psensor_conversion_and_read_adc+0xb0>)
 8004b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <psensor_conversion_and_read_adc+0xb4>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	099b      	lsrs	r3, r3, #6
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f001 fdec 	bl	8006778 <HAL_Delay>
	if( status != ms8607_status_ok)
 8004ba0:	7dfb      	ldrb	r3, [r7, #23]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <psensor_conversion_and_read_adc+0x5e>
		return status;
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	e024      	b.n	8004bf4 <psensor_conversion_and_read_adc+0xa8>

	// Send the read command
	status = psensor_write_command(PSENSOR_READ_ADC);
 8004baa:	2000      	movs	r0, #0
 8004bac:	f7ff ff29 	bl	8004a02 <psensor_write_command>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	75fb      	strb	r3, [r7, #23]
	if( status != ms8607_status_ok)
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <psensor_conversion_and_read_adc+0x72>
		return status;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	e01a      	b.n	8004bf4 <psensor_conversion_and_read_adc+0xa8>
	
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8004bbe:	f107 0308 	add.w	r3, r7, #8
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fba2 	bl	800530c <i2c_master_read_packet_wait>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	75bb      	strb	r3, [r7, #22]
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004bcc:	7dbb      	ldrb	r3, [r7, #22]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <psensor_conversion_and_read_adc+0x8a>
		return ms8607_status_no_i2c_acknowledge;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e00e      	b.n	8004bf4 <psensor_conversion_and_read_adc+0xa8>
	if( i2c_status != STATUS_OK)
 8004bd6:	7dbb      	ldrb	r3, [r7, #22]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <psensor_conversion_and_read_adc+0x94>
		return ms8607_status_i2c_transfer_error;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e009      	b.n	8004bf4 <psensor_conversion_and_read_adc+0xa8>

	*adc = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8004be0:	7c3b      	ldrb	r3, [r7, #16]
 8004be2:	041a      	lsls	r2, r3, #16
 8004be4:	7c7b      	ldrb	r3, [r7, #17]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	4313      	orrs	r3, r2
 8004bea:	7cba      	ldrb	r2, [r7, #18]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	601a      	str	r2, [r3, #0]
	
	return status;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	10624dd3 	.word	0x10624dd3

08004c04 <psensor_read_temperature>:
	
	return status;
}

enum ms8607_status psensor_read_temperature( float *temperature)
{
 8004c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c08:	ed2d 8b02 	vpush	{d8}
 8004c0c:	b0de      	sub	sp, #376	; 0x178
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	enum ms8607_status status = ms8607_status_ok;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	int32_t dT, TEMP;
	int64_t T2, OFF2, SENS2;
	uint8_t cmd;

	// If first time adc is requested, get EEPROM coefficients
	if( psensor_coeff_read == false )
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <psensor_read_temperature+0x84>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	f083 0301 	eor.w	r3, r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <psensor_read_temperature+0x2e>
		status = psensor_read_eeprom();
 8004c28:	f7ff ff52 	bl	8004ad0 <psensor_read_eeprom>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	if( status != ms8607_status_ok)
 8004c32:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <psensor_read_temperature+0x3c>
		return status;
 8004c3a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004c3e:	e2e9      	b.n	8005214 <psensor_read_temperature+0x610>

	// First read temperature
	cmd = psensor_resolution_osr*2;
 8004c40:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <psensor_read_temperature+0x88>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	cmd |= PSENSOR_START_TEMPERATURE_ADC_CONVERSION;
 8004c4a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8004c4e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004c52:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8004c56:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8004c5a:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 8004c5e:	4611      	mov	r1, r2
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff73 	bl	8004b4c <psensor_conversion_and_read_adc>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	if( status != ms8607_status_ok)
 8004c6c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <psensor_read_temperature+0x76>
		return status;
 8004c74:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004c78:	e2cc      	b.n	8005214 <psensor_read_temperature+0x610>

    if (adc_temperature == 0)
 8004c7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <psensor_read_temperature+0x8c>
        return ms8607_status_i2c_transfer_error;
 8004c82:	2302      	movs	r3, #2
 8004c84:	e2c6      	b.n	8005214 <psensor_read_temperature+0x610>
 8004c86:	bf00      	nop
 8004c88:	200008cc 	.word	0x200008cc
 8004c8c:	200008cb 	.word	0x200008cb

	// Difference between actual and reference temperature = D2 - Tref
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8004c90:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c94:	461a      	mov	r2, r3
 8004c96:	4bcb      	ldr	r3, [pc, #812]	; (8004fc4 <psensor_read_temperature+0x3c0>)
 8004c98:	895b      	ldrh	r3, [r3, #10]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	// Actual temperature = 2000 + dT * TEMPSENS
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8004ca2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004ca6:	17da      	asrs	r2, r3, #31
 8004ca8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004cac:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8004cb0:	4bc4      	ldr	r3, [pc, #784]	; (8004fc4 <psensor_read_temperature+0x3c0>)
 8004cb2:	899b      	ldrh	r3, [r3, #12]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cbc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004cc0:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004cca:	fb02 f203 	mul.w	r2, r2, r3
 8004cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd2:	e9c7 014c 	strd	r0, r1, [r7, #304]	; 0x130
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8004ce2:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8004ce6:	fba2 8901 	umull	r8, r9, r2, r1
 8004cea:	444b      	add	r3, r9
 8004cec:	4699      	mov	r9, r3
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	ea4f 52d8 	mov.w	r2, r8, lsr #23
 8004cfa:	ea42 2249 	orr.w	r2, r2, r9, lsl #9
 8004cfe:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8004d02:	4613      	mov	r3, r2
 8004d04:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004d08:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

	// Second order temperature compensation
	if( TEMP < 2000 )
 8004d0c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004d10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d14:	f280 8221 	bge.w	800515a <psensor_read_temperature+0x556>
	{
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 8004d18:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004d1c:	17da      	asrs	r2, r3, #31
 8004d1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d22:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004d26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004d2a:	17da      	asrs	r2, r3, #31
 8004d2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d30:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004d34:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8004d38:	462b      	mov	r3, r5
 8004d3a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004d3e:	4642      	mov	r2, r8
 8004d40:	fb02 f203 	mul.w	r2, r2, r3
 8004d44:	464b      	mov	r3, r9
 8004d46:	4621      	mov	r1, r4
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	4622      	mov	r2, r4
 8004d50:	4641      	mov	r1, r8
 8004d52:	fba2 1201 	umull	r1, r2, r2, r1
 8004d56:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8004d60:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004d64:	4413      	add	r3, r2
 8004d66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d6a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	1891      	adds	r1, r2, r2
 8004d74:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d76:	415b      	adcs	r3, r3
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d7e:	4621      	mov	r1, r4
 8004d80:	1851      	adds	r1, r2, r1
 8004d82:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8004d86:	4629      	mov	r1, r5
 8004d88:	eb43 0101 	adc.w	r1, r3, r1
 8004d8c:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	104a      	asrs	r2, r1, #1
 8004da0:	4629      	mov	r1, r5
 8004da2:	17cb      	asrs	r3, r1, #31
 8004da4:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004da8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004dac:	17da      	asrs	r2, r3, #31
 8004dae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004db2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8004db6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004dce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004dd2:	17da      	asrs	r2, r3, #31
 8004dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ddc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004de0:	460b      	mov	r3, r1
 8004de2:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dea:	4613      	mov	r3, r2
 8004dec:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004df0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004df4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004df8:	462b      	mov	r3, r5
 8004dfa:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004dfe:	4642      	mov	r2, r8
 8004e00:	fb02 f203 	mul.w	r2, r2, r3
 8004e04:	464b      	mov	r3, r9
 8004e06:	4621      	mov	r1, r4
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	4622      	mov	r2, r4
 8004e10:	4641      	mov	r1, r8
 8004e12:	fba2 1201 	umull	r1, r2, r2, r1
 8004e16:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004e1a:	460a      	mov	r2, r1
 8004e1c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004e20:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004e24:	4413      	add	r3, r2
 8004e26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e2a:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8004e2e:	4622      	mov	r2, r4
 8004e30:	462b      	mov	r3, r5
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	0119      	lsls	r1, r3, #4
 8004e3c:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8004e40:	0110      	lsls	r0, r2, #4
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4621      	mov	r1, r4
 8004e48:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8004e5e:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8004e62:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8004e66:	4692      	mov	sl, r2
 8004e68:	469b      	mov	fp, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	eb1a 0303 	adds.w	r3, sl, r3
 8004e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e74:	462b      	mov	r3, r5
 8004e76:	eb4b 0303 	adc.w	r3, fp, r3
 8004e7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e7e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da07      	bge.n	8004e96 <psensor_read_temperature+0x292>
 8004e86:	f112 010f 	adds.w	r1, r2, #15
 8004e8a:	6239      	str	r1, [r7, #32]
 8004e8c:	f143 0300 	adc.w	r3, r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e96:	f04f 0000 	mov.w	r0, #0
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	0910      	lsrs	r0, r2, #4
 8004ea0:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8004ea4:	1119      	asrs	r1, r3, #4
 8004ea6:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004eaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004eae:	17da      	asrs	r2, r3, #31
 8004eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004eb8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ed0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ed4:	17da      	asrs	r2, r3, #31
 8004ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004eda:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ede:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	f5b3 63fa 	subs.w	r3, r3, #2000	; 0x7d0
 8004ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eec:	4613      	mov	r3, r2
 8004eee:	f143 33ff 	adc.w	r3, r3, #4294967295
 8004ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ef6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8004efa:	462b      	mov	r3, r5
 8004efc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f00:	4642      	mov	r2, r8
 8004f02:	fb02 f203 	mul.w	r2, r2, r3
 8004f06:	464b      	mov	r3, r9
 8004f08:	4621      	mov	r1, r4
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	4622      	mov	r2, r4
 8004f12:	4641      	mov	r1, r8
 8004f14:	fba2 1201 	umull	r1, r2, r2, r1
 8004f18:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8004f1c:	460a      	mov	r2, r1
 8004f1e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004f22:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f26:	4413      	add	r3, r2
 8004f28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f2c:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8004f30:	4622      	mov	r2, r4
 8004f32:	462b      	mov	r3, r5
 8004f34:	f04f 0000 	mov.w	r0, #0
 8004f38:	f04f 0100 	mov.w	r1, #0
 8004f3c:	00d9      	lsls	r1, r3, #3
 8004f3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f42:	00d0      	lsls	r0, r2, #3
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4621      	mov	r1, r4
 8004f4a:	1a51      	subs	r1, r2, r1
 8004f4c:	61b9      	str	r1, [r7, #24]
 8004f4e:	4629      	mov	r1, r5
 8004f50:	eb63 0301 	sbc.w	r3, r3, r1
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004f62:	4649      	mov	r1, r9
 8004f64:	008b      	lsls	r3, r1, #2
 8004f66:	4641      	mov	r1, r8
 8004f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	008a      	lsls	r2, r1, #2
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	4603      	mov	r3, r0
 8004f76:	4622      	mov	r2, r4
 8004f78:	189b      	adds	r3, r3, r2
 8004f7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f7e:	462b      	mov	r3, r5
 8004f80:	460a      	mov	r2, r1
 8004f82:	eb42 0303 	adc.w	r3, r2, r3
 8004f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f8a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da07      	bge.n	8004fa2 <psensor_read_temperature+0x39e>
 8004f92:	f112 010f 	adds.w	r1, r2, #15
 8004f96:	6139      	str	r1, [r7, #16]
 8004f98:	f143 0300 	adc.w	r3, r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	0910      	lsrs	r0, r2, #4
 8004fac:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8004fb0:	1119      	asrs	r1, r3, #4
 8004fb2:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148

		if( TEMP < -1500 )
 8004fb6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8004fba:	4b03      	ldr	r3, [pc, #12]	; (8004fc8 <psensor_read_temperature+0x3c4>)
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	f280 8111 	bge.w	80051e4 <psensor_read_temperature+0x5e0>
 8004fc2:	e005      	b.n	8004fd0 <psensor_read_temperature+0x3cc>
 8004fc4:	200008d0 	.word	0x200008d0
 8004fc8:	fffffa24 	.word	0xfffffa24
 8004fcc:	42c80000 	.word	0x42c80000
		{
			OFF2 += 17 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8004fd0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004fd4:	17da      	asrs	r2, r3, #31
 8004fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fde:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004fe2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	18d3      	adds	r3, r2, r3
 8004fea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fee:	460b      	mov	r3, r1
 8004ff0:	f143 0300 	adc.w	r3, r3, #0
 8004ff4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004ff8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004ffc:	17da      	asrs	r2, r3, #31
 8004ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005002:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005006:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800500a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800500e:	4602      	mov	r2, r0
 8005010:	18d3      	adds	r3, r2, r3
 8005012:	67bb      	str	r3, [r7, #120]	; 0x78
 8005014:	460b      	mov	r3, r1
 8005016:	f143 0300 	adc.w	r3, r3, #0
 800501a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800501c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8005020:	462b      	mov	r3, r5
 8005022:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005026:	4642      	mov	r2, r8
 8005028:	fb02 f203 	mul.w	r2, r2, r3
 800502c:	464b      	mov	r3, r9
 800502e:	4621      	mov	r1, r4
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	4413      	add	r3, r2
 8005036:	4622      	mov	r2, r4
 8005038:	4641      	mov	r1, r8
 800503a:	fba2 1201 	umull	r1, r2, r2, r1
 800503e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005042:	460a      	mov	r2, r1
 8005044:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8005048:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800504c:	4413      	add	r3, r2
 800504e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005052:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005056:	4622      	mov	r2, r4
 8005058:	462b      	mov	r3, r5
 800505a:	f04f 0000 	mov.w	r0, #0
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	0119      	lsls	r1, r3, #4
 8005064:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8005068:	0110      	lsls	r0, r2, #4
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4621      	mov	r1, r4
 8005070:	1851      	adds	r1, r2, r1
 8005072:	6739      	str	r1, [r7, #112]	; 0x70
 8005074:	4629      	mov	r1, r5
 8005076:	eb43 0101 	adc.w	r1, r3, r1
 800507a:	6779      	str	r1, [r7, #116]	; 0x74
 800507c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8005080:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8005084:	4621      	mov	r1, r4
 8005086:	1851      	adds	r1, r2, r1
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	4629      	mov	r1, r5
 800508c:	eb43 0101 	adc.w	r1, r3, r1
 8005090:	60f9      	str	r1, [r7, #12]
 8005092:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005096:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
			SENS2 += 9 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 800509a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800509e:	17da      	asrs	r2, r3, #31
 80050a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050a4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80050a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050ac:	4602      	mov	r2, r0
 80050ae:	18d3      	adds	r3, r2, r3
 80050b0:	663b      	str	r3, [r7, #96]	; 0x60
 80050b2:	460b      	mov	r3, r1
 80050b4:	f143 0300 	adc.w	r3, r3, #0
 80050b8:	667b      	str	r3, [r7, #100]	; 0x64
 80050ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80050be:	17da      	asrs	r2, r3, #31
 80050c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80050c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80050c8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050cc:	4602      	mov	r2, r0
 80050ce:	18d3      	adds	r3, r2, r3
 80050d0:	653b      	str	r3, [r7, #80]	; 0x50
 80050d2:	460b      	mov	r3, r1
 80050d4:	f143 0300 	adc.w	r3, r3, #0
 80050d8:	657b      	str	r3, [r7, #84]	; 0x54
 80050da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80050de:	462b      	mov	r3, r5
 80050e0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80050e4:	4642      	mov	r2, r8
 80050e6:	fb02 f203 	mul.w	r2, r2, r3
 80050ea:	464b      	mov	r3, r9
 80050ec:	4621      	mov	r1, r4
 80050ee:	fb01 f303 	mul.w	r3, r1, r3
 80050f2:	4413      	add	r3, r2
 80050f4:	4622      	mov	r2, r4
 80050f6:	4641      	mov	r1, r8
 80050f8:	fba2 1201 	umull	r1, r2, r2, r1
 80050fc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005100:	460a      	mov	r2, r1
 8005102:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8005106:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800510a:	4413      	add	r3, r2
 800510c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005110:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8005114:	4622      	mov	r2, r4
 8005116:	462b      	mov	r3, r5
 8005118:	f04f 0000 	mov.w	r0, #0
 800511c:	f04f 0100 	mov.w	r1, #0
 8005120:	00d9      	lsls	r1, r3, #3
 8005122:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005126:	00d0      	lsls	r0, r2, #3
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4621      	mov	r1, r4
 800512e:	1851      	adds	r1, r2, r1
 8005130:	64b9      	str	r1, [r7, #72]	; 0x48
 8005132:	4629      	mov	r1, r5
 8005134:	eb43 0101 	adc.w	r1, r3, r1
 8005138:	64f9      	str	r1, [r7, #76]	; 0x4c
 800513a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800513e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005142:	4621      	mov	r1, r4
 8005144:	1851      	adds	r1, r2, r1
 8005146:	6039      	str	r1, [r7, #0]
 8005148:	4629      	mov	r1, r5
 800514a:	eb43 0101 	adc.w	r1, r3, r1
 800514e:	6079      	str	r1, [r7, #4]
 8005150:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005154:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8005158:	e044      	b.n	80051e4 <psensor_read_temperature+0x5e0>
		}
	}
	else
	{
		T2 = ( 5 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 38;
 800515a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800515e:	17da      	asrs	r2, r3, #31
 8005160:	643b      	str	r3, [r7, #64]	; 0x40
 8005162:	647a      	str	r2, [r7, #68]	; 0x44
 8005164:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005168:	17da      	asrs	r2, r3, #31
 800516a:	63bb      	str	r3, [r7, #56]	; 0x38
 800516c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800516e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005172:	464b      	mov	r3, r9
 8005174:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8005178:	4652      	mov	r2, sl
 800517a:	fb02 f203 	mul.w	r2, r2, r3
 800517e:	465b      	mov	r3, fp
 8005180:	4641      	mov	r1, r8
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	4642      	mov	r2, r8
 800518a:	4651      	mov	r1, sl
 800518c:	fba2 4501 	umull	r4, r5, r2, r1
 8005190:	442b      	add	r3, r5
 8005192:	461d      	mov	r5, r3
 8005194:	4622      	mov	r2, r4
 8005196:	462b      	mov	r3, r5
 8005198:	f04f 0000 	mov.w	r0, #0
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	0099      	lsls	r1, r3, #2
 80051a2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80051a6:	0090      	lsls	r0, r2, #2
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	1911      	adds	r1, r2, r4
 80051ae:	6339      	str	r1, [r7, #48]	; 0x30
 80051b0:	416b      	adcs	r3, r5
 80051b2:	637b      	str	r3, [r7, #52]	; 0x34
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051c0:	4629      	mov	r1, r5
 80051c2:	118a      	asrs	r2, r1, #6
 80051c4:	4629      	mov	r1, r5
 80051c6:	17cb      	asrs	r3, r1, #31
 80051c8:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
		OFF2 = 0 ;
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
		SENS2 = 0 ;
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	}

	*temperature = ( (float)TEMP - T2 ) / 100;
 80051e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80051f0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80051f4:	f7fb fe18 	bl	8000e28 <__aeabi_l2f>
 80051f8:	ee07 0a90 	vmov	s15, r0
 80051fc:	ee38 7a67 	vsub.f32	s14, s16, s15
 8005200:	ed5f 6a8e 	vldr	s13, [pc, #-568]	; 8004fcc <psensor_read_temperature+0x3c8>
 8005204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005208:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800520c:	edc3 7a00 	vstr	s15, [r3]

	return status;
 8005210:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
}
 8005214:	4618      	mov	r0, r3
 8005216:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800521a:	46bd      	mov	sp, r7
 800521c:	ecbd 8b02 	vpop	{d8}
 8005220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005224 <psensor_crc_check>:
 * \param[in] uint8_t : crc to compare
 *
 * \return bool : TRUE if CRC is OK, FALSE if KO
 */
bool psensor_crc_check (uint16_t *n_prom, uint8_t crc)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
	uint8_t cnt, n_bit;
	uint16_t n_rem, crc_read;
	
	n_rem = 0x00;
 8005230:	2300      	movs	r3, #0
 8005232:	81bb      	strh	r3, [r7, #12]
	crc_read = n_prom[0];
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	817b      	strh	r3, [r7, #10]
	n_prom[COEFFICIENT_NUMBERS] = 0;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	330e      	adds	r3, #14
 800523e:	2200      	movs	r2, #0
 8005240:	801a      	strh	r2, [r3, #0]
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	801a      	strh	r2, [r3, #0]

	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
 8005254:	e03c      	b.n	80052d0 <psensor_crc_check+0xac>

		// Get next byte
		if (cnt%2 == 1)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00f      	beq.n	8005282 <psensor_crc_check+0x5e>
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b21b      	sxth	r3, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	b21a      	sxth	r2, r3
 8005276:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800527a:	4053      	eors	r3, r2
 800527c:	b21b      	sxth	r3, r3
 800527e:	81bb      	strh	r3, [r7, #12]
 8005280:	e00b      	b.n	800529a <psensor_crc_check+0x76>
		else
			n_rem ^=  n_prom[cnt>>1]>>8 ;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	b2db      	uxtb	r3, r3
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	0a1b      	lsrs	r3, r3, #8
 8005292:	b29a      	uxth	r2, r3
 8005294:	89bb      	ldrh	r3, [r7, #12]
 8005296:	4053      	eors	r3, r2
 8005298:	81bb      	strh	r3, [r7, #12]

		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 800529a:	2308      	movs	r3, #8
 800529c:	73bb      	strb	r3, [r7, #14]
 800529e:	e011      	b.n	80052c4 <psensor_crc_check+0xa0>

			if( n_rem & 0x8000 )
 80052a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	da07      	bge.n	80052b8 <psensor_crc_check+0x94>
				n_rem = (n_rem << 1) ^ 0x3000;
 80052a8:	89bb      	ldrh	r3, [r7, #12]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	b21b      	sxth	r3, r3
 80052ae:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80052b2:	b21b      	sxth	r3, r3
 80052b4:	81bb      	strh	r3, [r7, #12]
 80052b6:	e002      	b.n	80052be <psensor_crc_check+0x9a>
			else
				n_rem <<= 1;
 80052b8:	89bb      	ldrh	r3, [r7, #12]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	81bb      	strh	r3, [r7, #12]
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	73bb      	strb	r3, [r7, #14]
 80052c4:	7bbb      	ldrb	r3, [r7, #14]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ea      	bne.n	80052a0 <psensor_crc_check+0x7c>
	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	3301      	adds	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b0f      	cmp	r3, #15
 80052d4:	d9bf      	bls.n	8005256 <psensor_crc_check+0x32>
		}
	}
	n_rem >>= 12;
 80052d6:	89bb      	ldrh	r3, [r7, #12]
 80052d8:	0b1b      	lsrs	r3, r3, #12
 80052da:	81bb      	strh	r3, [r7, #12]
	n_prom[0] = crc_read;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	897a      	ldrh	r2, [r7, #10]
 80052e0:	801a      	strh	r2, [r3, #0]
	
	return  ( n_rem == crc );
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	89ba      	ldrh	r2, [r7, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <i2c_master_init>:

#include "ms8607.h"
#include "ms8607_i2c.h"

void i2c_master_init(void)
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <i2c_master_read_packet_wait>:

enum status_code i2c_master_read_packet_wait(struct i2c_master_packet *const packet)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	6078      	str	r0, [r7, #4]
    uint8_t res = HAL_I2C_Master_Receive(&hi2c2, packet->address, packet->data, packet->data_length, 20);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8819      	ldrh	r1, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	885b      	ldrh	r3, [r3, #2]
 8005320:	2014      	movs	r0, #20
 8005322:	9000      	str	r0, [sp, #0]
 8005324:	4804      	ldr	r0, [pc, #16]	; (8005338 <i2c_master_read_packet_wait+0x2c>)
 8005326:	f003 ff55 	bl	80091d4 <HAL_I2C_Master_Receive>
 800532a:	4603      	mov	r3, r0
 800532c:	73fb      	strb	r3, [r7, #15]
    return (enum status_code)res;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	200005cc 	.word	0x200005cc

0800533c <i2c_master_write_packet_wait>:


enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *const packet)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af02      	add	r7, sp, #8
 8005342:	6078      	str	r0, [r7, #4]
    uint8_t res = HAL_I2C_Master_Transmit(&hi2c2, packet->address, packet->data, packet->data_length, 20);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8819      	ldrh	r1, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	885b      	ldrh	r3, [r3, #2]
 8005350:	2014      	movs	r0, #20
 8005352:	9000      	str	r0, [sp, #0]
 8005354:	4804      	ldr	r0, [pc, #16]	; (8005368 <i2c_master_write_packet_wait+0x2c>)
 8005356:	f003 fe49 	bl	8008fec <HAL_I2C_Master_Transmit>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]
    return (enum status_code)res;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	200005cc 	.word	0x200005cc

0800536c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <HAL_MspInit+0x48>)
 8005374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005376:	4a0f      	ldr	r2, [pc, #60]	; (80053b4 <HAL_MspInit+0x48>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6613      	str	r3, [r2, #96]	; 0x60
 800537e:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <HAL_MspInit+0x48>)
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <HAL_MspInit+0x48>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <HAL_MspInit+0x48>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6593      	str	r3, [r2, #88]	; 0x58
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <HAL_MspInit+0x48>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2100      	movs	r1, #0
 80053a6:	2005      	movs	r0, #5
 80053a8:	f002 fca3 	bl	8007cf2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40021000 	.word	0x40021000

080053b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b09a      	sub	sp, #104	; 0x68
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053c0:	f107 030c 	add.w	r3, r7, #12
 80053c4:	225c      	movs	r2, #92	; 0x5c
 80053c6:	2100      	movs	r1, #0
 80053c8:	4618      	mov	r0, r3
 80053ca:	f009 fe97 	bl	800f0fc <memset>
  if(hadc->Instance==ADC1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2e      	ldr	r2, [pc, #184]	; (800548c <HAL_ADC_MspInit+0xd4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d155      	bne.n	8005484 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80053d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80053de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80053e4:	2303      	movs	r3, #3
 80053e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80053e8:	2301      	movs	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80053ec:	2308      	movs	r3, #8
 80053ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80053f0:	2307      	movs	r3, #7
 80053f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80053f4:	2302      	movs	r3, #2
 80053f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80053f8:	2302      	movs	r3, #2
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80053fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005402:	f107 030c 	add.w	r3, r7, #12
 8005406:	4618      	mov	r0, r3
 8005408:	f005 fd64 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8005412:	f7ff fa7d 	bl	8004910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005416:	4b1e      	ldr	r3, [pc, #120]	; (8005490 <HAL_ADC_MspInit+0xd8>)
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	4a1d      	ldr	r2, [pc, #116]	; (8005490 <HAL_ADC_MspInit+0xd8>)
 800541c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005422:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_ADC_MspInit+0xd8>)
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800542e:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 8005430:	4a19      	ldr	r2, [pc, #100]	; (8005498 <HAL_ADC_MspInit+0xe0>)
 8005432:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8005434:	4b17      	ldr	r3, [pc, #92]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 8005436:	2200      	movs	r2, #0
 8005438:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800543a:	4b16      	ldr	r3, [pc, #88]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 800543c:	2200      	movs	r2, #0
 800543e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005440:	4b14      	ldr	r3, [pc, #80]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 8005442:	2200      	movs	r2, #0
 8005444:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 8005448:	2280      	movs	r2, #128	; 0x80
 800544a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800544c:	4b11      	ldr	r3, [pc, #68]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 800544e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005452:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005454:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 8005456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800545a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800545c:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 800545e:	2220      	movs	r2, #32
 8005460:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 8005464:	2200      	movs	r2, #0
 8005466:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005468:	480a      	ldr	r0, [pc, #40]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 800546a:	f002 fe7d 	bl	8008168 <HAL_DMA_Init>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8005474:	f7ff fa4c 	bl	8004910 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a06      	ldr	r2, [pc, #24]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 800547c:	64da      	str	r2, [r3, #76]	; 0x4c
 800547e:	4a05      	ldr	r2, [pc, #20]	; (8005494 <HAL_ADC_MspInit+0xdc>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005484:	bf00      	nop
 8005486:	3768      	adds	r7, #104	; 0x68
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	50040000 	.word	0x50040000
 8005490:	40021000 	.word	0x40021000
 8005494:	2000050c 	.word	0x2000050c
 8005498:	40020008 	.word	0x40020008

0800549c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <HAL_CRC_MspInit+0x38>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d10b      	bne.n	80054c6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <HAL_CRC_MspInit+0x3c>)
 80054b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b2:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <HAL_CRC_MspInit+0x3c>)
 80054b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054b8:	6493      	str	r3, [r2, #72]	; 0x48
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <HAL_CRC_MspInit+0x3c>)
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40023000 	.word	0x40023000
 80054d8:	40021000 	.word	0x40021000

080054dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b0a6      	sub	sp, #152	; 0x98
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	60da      	str	r2, [r3, #12]
 80054f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f8:	225c      	movs	r2, #92	; 0x5c
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f009 fdfd 	bl	800f0fc <memset>
  if(hi2c->Instance==I2C1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a76      	ldr	r2, [pc, #472]	; (80056e0 <HAL_I2C_MspInit+0x204>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d13e      	bne.n	800558a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8005510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005514:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800551a:	4618      	mov	r0, r3
 800551c:	f005 fcda 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005526:	f7ff f9f3 	bl	8004910 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800552a:	4b6e      	ldr	r3, [pc, #440]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 800552c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800552e:	4a6d      	ldr	r2, [pc, #436]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005536:	4b6b      	ldr	r3, [pc, #428]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005542:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005546:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800554a:	2312      	movs	r3, #18
 800554c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005556:	2303      	movs	r3, #3
 8005558:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800555c:	2304      	movs	r3, #4
 800555e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005562:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005566:	4619      	mov	r1, r3
 8005568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800556c:	f003 faea 	bl	8008b44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005570:	4b5c      	ldr	r3, [pc, #368]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005574:	4a5b      	ldr	r2, [pc, #364]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800557a:	6593      	str	r3, [r2, #88]	; 0x58
 800557c:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 800557e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005584:	623b      	str	r3, [r7, #32]
 8005586:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005588:	e0a6      	b.n	80056d8 <HAL_I2C_MspInit+0x1fc>
  else if(hi2c->Instance==I2C2)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a56      	ldr	r2, [pc, #344]	; (80056e8 <HAL_I2C_MspInit+0x20c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d13d      	bne.n	8005610 <HAL_I2C_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8005598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800559c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800559e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a2:	4618      	mov	r0, r3
 80055a4:	f005 fc96 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80055ae:	f7ff f9af 	bl	8004910 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b2:	4b4c      	ldr	r3, [pc, #304]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	4a4b      	ldr	r2, [pc, #300]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 80055b8:	f043 0302 	orr.w	r3, r3, #2
 80055bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055be:	4b49      	ldr	r3, [pc, #292]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80055ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80055ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055d2:	2312      	movs	r3, #18
 80055d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055de:	2303      	movs	r3, #3
 80055e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80055e4:	2304      	movs	r3, #4
 80055e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80055ee:	4619      	mov	r1, r3
 80055f0:	483e      	ldr	r0, [pc, #248]	; (80056ec <HAL_I2C_MspInit+0x210>)
 80055f2:	f003 faa7 	bl	8008b44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055f6:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	4a3a      	ldr	r2, [pc, #232]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 80055fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005600:	6593      	str	r3, [r2, #88]	; 0x58
 8005602:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	69bb      	ldr	r3, [r7, #24]
}
 800560e:	e063      	b.n	80056d8 <HAL_I2C_MspInit+0x1fc>
  else if(hi2c->Instance==I2C3)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a36      	ldr	r2, [pc, #216]	; (80056f0 <HAL_I2C_MspInit+0x214>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d15e      	bne.n	80056d8 <HAL_I2C_MspInit+0x1fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800561a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8005620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005624:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800562a:	4618      	mov	r0, r3
 800562c:	f005 fc52 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_I2C_MspInit+0x15e>
      Error_Handler();
 8005636:	f7ff f96b 	bl	8004910 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800563a:	4b2a      	ldr	r3, [pc, #168]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 800563c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563e:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005646:	4b27      	ldr	r3, [pc, #156]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005652:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	4a23      	ldr	r2, [pc, #140]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 8005660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005670:	2312      	movs	r3, #18
 8005672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800567c:	2303      	movs	r3, #3
 800567e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005682:	2304      	movs	r3, #4
 8005684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005688:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800568c:	4619      	mov	r1, r3
 800568e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005692:	f003 fa57 	bl	8008b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005696:	2310      	movs	r3, #16
 8005698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800569c:	2312      	movs	r3, #18
 800569e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056a8:	2303      	movs	r3, #3
 80056aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80056ae:	2304      	movs	r3, #4
 80056b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80056b8:	4619      	mov	r1, r3
 80056ba:	480c      	ldr	r0, [pc, #48]	; (80056ec <HAL_I2C_MspInit+0x210>)
 80056bc:	f003 fa42 	bl	8008b44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80056c0:	4b08      	ldr	r3, [pc, #32]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 80056c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c4:	4a07      	ldr	r2, [pc, #28]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 80056c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056ca:	6593      	str	r3, [r2, #88]	; 0x58
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_I2C_MspInit+0x208>)
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
}
 80056d8:	bf00      	nop
 80056da:	3798      	adds	r7, #152	; 0x98
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40005400 	.word	0x40005400
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40005800 	.word	0x40005800
 80056ec:	48000400 	.word	0x48000400
 80056f0:	40005c00 	.word	0x40005c00

080056f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a0a      	ldr	r2, [pc, #40]	; (800572c <HAL_TIM_Base_MspInit+0x38>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d10b      	bne.n	800571e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005706:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <HAL_TIM_Base_MspInit+0x3c>)
 8005708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570a:	4a09      	ldr	r2, [pc, #36]	; (8005730 <HAL_TIM_Base_MspInit+0x3c>)
 800570c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005710:	6613      	str	r3, [r2, #96]	; 0x60
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <HAL_TIM_Base_MspInit+0x3c>)
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40014400 	.word	0x40014400
 8005730:	40021000 	.word	0x40021000

08005734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800573c:	f107 030c 	add.w	r3, r7, #12
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	60da      	str	r2, [r3, #12]
 800574a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a11      	ldr	r2, [pc, #68]	; (8005798 <HAL_TIM_MspPostInit+0x64>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d11c      	bne.n	8005790 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005756:	4b11      	ldr	r3, [pc, #68]	; (800579c <HAL_TIM_MspPostInit+0x68>)
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	4a10      	ldr	r2, [pc, #64]	; (800579c <HAL_TIM_MspPostInit+0x68>)
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005762:	4b0e      	ldr	r3, [pc, #56]	; (800579c <HAL_TIM_MspPostInit+0x68>)
 8005764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 800576e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005772:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005774:	2302      	movs	r3, #2
 8005776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577c:	2300      	movs	r3, #0
 800577e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8005780:	230e      	movs	r3, #14
 8005782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8005784:	f107 030c 	add.w	r3, r7, #12
 8005788:	4619      	mov	r1, r3
 800578a:	4805      	ldr	r0, [pc, #20]	; (80057a0 <HAL_TIM_MspPostInit+0x6c>)
 800578c:	f003 f9da 	bl	8008b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8005790:	bf00      	nop
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40014400 	.word	0x40014400
 800579c:	40021000 	.word	0x40021000
 80057a0:	48000400 	.word	0x48000400

080057a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b0a2      	sub	sp, #136	; 0x88
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	609a      	str	r2, [r3, #8]
 80057b8:	60da      	str	r2, [r3, #12]
 80057ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057bc:	f107 0318 	add.w	r3, r7, #24
 80057c0:	225c      	movs	r2, #92	; 0x5c
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f009 fc99 	bl	800f0fc <memset>
  if(huart->Instance==USART1)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3f      	ldr	r2, [pc, #252]	; (80058cc <HAL_UART_MspInit+0x128>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d138      	bne.n	8005846 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80057d4:	2301      	movs	r3, #1
 80057d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80057d8:	2301      	movs	r3, #1
 80057da:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057dc:	f107 0318 	add.w	r3, r7, #24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f005 fb77 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80057ec:	f7ff f890 	bl	8004910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057f0:	4b37      	ldr	r3, [pc, #220]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 80057f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f4:	4a36      	ldr	r2, [pc, #216]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 80057f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057fa:	6613      	str	r3, [r2, #96]	; 0x60
 80057fc:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 80057fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005808:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 800580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580c:	4a30      	ldr	r2, [pc, #192]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 800580e:	f043 0302 	orr.w	r3, r3, #2
 8005812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005814:	4b2e      	ldr	r3, [pc, #184]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 8005816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005820:	23c0      	movs	r3, #192	; 0xc0
 8005822:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005824:	2302      	movs	r3, #2
 8005826:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005828:	2300      	movs	r3, #0
 800582a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800582c:	2303      	movs	r3, #3
 800582e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005832:	2307      	movs	r3, #7
 8005834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005838:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800583c:	4619      	mov	r1, r3
 800583e:	4825      	ldr	r0, [pc, #148]	; (80058d4 <HAL_UART_MspInit+0x130>)
 8005840:	f003 f980 	bl	8008b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005844:	e03d      	b.n	80058c2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART2)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a23      	ldr	r2, [pc, #140]	; (80058d8 <HAL_UART_MspInit+0x134>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d138      	bne.n	80058c2 <HAL_UART_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005850:	2302      	movs	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8005854:	2304      	movs	r3, #4
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005858:	f107 0318 	add.w	r3, r7, #24
 800585c:	4618      	mov	r0, r3
 800585e:	f005 fb39 	bl	800aed4 <HAL_RCCEx_PeriphCLKConfig>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8005868:	f7ff f852 	bl	8004910 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800586c:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 8005872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005876:	6593      	str	r3, [r2, #88]	; 0x58
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 800587a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005884:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 8005886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005888:	4a11      	ldr	r2, [pc, #68]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005890:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <HAL_UART_MspInit+0x12c>)
 8005892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin|SIM_UART_RX_Pin;
 800589c:	230c      	movs	r3, #12
 800589e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a0:	2302      	movs	r3, #2
 80058a2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058a8:	2303      	movs	r3, #3
 80058aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80058ae:	2307      	movs	r3, #7
 80058b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80058b8:	4619      	mov	r1, r3
 80058ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058be:	f003 f941 	bl	8008b44 <HAL_GPIO_Init>
}
 80058c2:	bf00      	nop
 80058c4:	3788      	adds	r7, #136	; 0x88
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40013800 	.word	0x40013800
 80058d0:	40021000 	.word	0x40021000
 80058d4:	48000400 	.word	0x48000400
 80058d8:	40004400 	.word	0x40004400

080058dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058e0:	e7fe      	b.n	80058e0 <NMI_Handler+0x4>

080058e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058e2:	b480      	push	{r7}
 80058e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058e6:	e7fe      	b.n	80058e6 <HardFault_Handler+0x4>

080058e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058ec:	e7fe      	b.n	80058ec <MemManage_Handler+0x4>

080058ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058f2:	e7fe      	b.n	80058f2 <BusFault_Handler+0x4>

080058f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058f4:	b480      	push	{r7}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058f8:	e7fe      	b.n	80058f8 <UsageFault_Handler+0x4>

080058fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058fe:	bf00      	nop
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005928:	f000 ff06 	bl	8006738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800592c:	f002 fa17 	bl	8007d5e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8005930:	bf00      	nop
 8005932:	bd80      	pop	{r7, pc}

08005934 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005938:	4802      	ldr	r0, [pc, #8]	; (8005944 <DMA1_Channel1_IRQHandler+0x10>)
 800593a:	f002 fdac 	bl	8008496 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800593e:	bf00      	nop
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	2000050c 	.word	0x2000050c

08005948 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800594c:	4802      	ldr	r0, [pc, #8]	; (8005958 <USART1_IRQHandler+0x10>)
 800594e:	f006 fd2d 	bl	800c3ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	200006c0 	.word	0x200006c0

0800595c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005960:	4802      	ldr	r0, [pc, #8]	; (800596c <USART2_IRQHandler+0x10>)
 8005962:	f006 fd23 	bl	800c3ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000744 	.word	0x20000744

08005970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
  return 1;
 8005974:	2301      	movs	r3, #1
}
 8005976:	4618      	mov	r0, r3
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <_kill>:

int _kill(int pid, int sig)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800598a:	f009 fc1b 	bl	800f1c4 <__errno>
 800598e:	4603      	mov	r3, r0
 8005990:	2216      	movs	r2, #22
 8005992:	601a      	str	r2, [r3, #0]
  return -1;
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <_exit>:

void _exit (int status)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80059a8:	f04f 31ff 	mov.w	r1, #4294967295
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ffe7 	bl	8005980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80059b2:	e7fe      	b.n	80059b2 <_exit+0x12>

080059b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e00a      	b.n	80059dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059c6:	f3af 8000 	nop.w
 80059ca:	4601      	mov	r1, r0
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	60ba      	str	r2, [r7, #8]
 80059d2:	b2ca      	uxtb	r2, r1
 80059d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	3301      	adds	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	dbf0      	blt.n	80059c6 <_read+0x12>
  }

  return len;
 80059e4:	687b      	ldr	r3, [r7, #4]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a16:	605a      	str	r2, [r3, #4]
  return 0;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <_isatty>:

int _isatty(int file)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a2e:	2301      	movs	r3, #1
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a60:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <_sbrk+0x5c>)
 8005a62:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <_sbrk+0x60>)
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a6c:	4b13      	ldr	r3, [pc, #76]	; (8005abc <_sbrk+0x64>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a74:	4b11      	ldr	r3, [pc, #68]	; (8005abc <_sbrk+0x64>)
 8005a76:	4a12      	ldr	r2, [pc, #72]	; (8005ac0 <_sbrk+0x68>)
 8005a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <_sbrk+0x64>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d207      	bcs.n	8005a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a88:	f009 fb9c 	bl	800f1c4 <__errno>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	220c      	movs	r2, #12
 8005a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	e009      	b.n	8005aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a98:	4b08      	ldr	r3, [pc, #32]	; (8005abc <_sbrk+0x64>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a9e:	4b07      	ldr	r3, [pc, #28]	; (8005abc <_sbrk+0x64>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	4a05      	ldr	r2, [pc, #20]	; (8005abc <_sbrk+0x64>)
 8005aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20010000 	.word	0x20010000
 8005ab8:	00000400 	.word	0x00000400
 8005abc:	200008e0 	.word	0x200008e0
 8005ac0:	20000a48 	.word	0x20000a48

08005ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005ac8:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <SystemInit+0x20>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	4a05      	ldr	r2, [pc, #20]	; (8005ae4 <SystemInit+0x20>)
 8005ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005ad8:	bf00      	nop
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <HAL_SYSTICK_Callback>:
volatile uint8_t device_state = 0;
volatile uint32_t offTim;


void HAL_SYSTICK_Callback(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
	static uint32_t led2swp, led2lev;

    if(led2_tim && ++led2swp >= led2_tim)
 8005aec:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <HAL_SYSTICK_Callback+0xc0>)
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d04b      	beq.n	8005b8c <HAL_SYSTICK_Callback+0xa4>
 8005af4:	4b2d      	ldr	r3, [pc, #180]	; (8005bac <HAL_SYSTICK_Callback+0xc4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3301      	adds	r3, #1
 8005afa:	4a2c      	ldr	r2, [pc, #176]	; (8005bac <HAL_SYSTICK_Callback+0xc4>)
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <HAL_SYSTICK_Callback+0xc4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_SYSTICK_Callback+0xc0>)
 8005b04:	8812      	ldrh	r2, [r2, #0]
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d340      	bcc.n	8005b8c <HAL_SYSTICK_Callback+0xa4>
    {
        led2swp = 0;
 8005b0a:	4b28      	ldr	r3, [pc, #160]	; (8005bac <HAL_SYSTICK_Callback+0xc4>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
        if(++led2lev >= 64 + (led2_cycles>>16))
 8005b10:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3301      	adds	r3, #1
 8005b16:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	4b25      	ldr	r3, [pc, #148]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <HAL_SYSTICK_Callback+0xcc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	3340      	adds	r3, #64	; 0x40
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d316      	bcc.n	8005b58 <HAL_SYSTICK_Callback+0x70>
        {
            led2lev = 0;
 8005b2a:	4b21      	ldr	r3, [pc, #132]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
            if((led2_cycles & 0xFFFF) != 0xFFFF) led2_cycles--;
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <HAL_SYSTICK_Callback+0xcc>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_SYSTICK_Callback+0x60>
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_SYSTICK_Callback+0xcc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	4a1b      	ldr	r2, [pc, #108]	; (8005bb4 <HAL_SYSTICK_Callback+0xcc>)
 8005b46:	6013      	str	r3, [r2, #0]
            if((led2_cycles & 0xFFFF) == 0) led2_tim = 0;
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_SYSTICK_Callback+0xcc>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d102      	bne.n	8005b58 <HAL_SYSTICK_Callback+0x70>
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <HAL_SYSTICK_Callback+0xc0>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	801a      	strh	r2, [r3, #0]
        }
        if(led2lev>=64) setLed2(0); else setLed2((led2lev<32) ? led2lev : 63-led2lev);
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b3f      	cmp	r3, #63	; 0x3f
 8005b5e:	d903      	bls.n	8005b68 <HAL_SYSTICK_Callback+0x80>
 8005b60:	2000      	movs	r0, #0
 8005b62:	f000 f83b 	bl	8005bdc <setLed2>
 8005b66:	e01c      	b.n	8005ba2 <HAL_SYSTICK_Callback+0xba>
 8005b68:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b1f      	cmp	r3, #31
 8005b6e:	d906      	bls.n	8005b7e <HAL_SYSTICK_Callback+0x96>
 8005b70:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	e002      	b.n	8005b84 <HAL_SYSTICK_Callback+0x9c>
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 f829 	bl	8005bdc <setLed2>
 8005b8a:	e00a      	b.n	8005ba2 <HAL_SYSTICK_Callback+0xba>
     } else if(led2_tim == 0) {led2swp=0; led2lev=0;}
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_SYSTICK_Callback+0xc0>)
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <HAL_SYSTICK_Callback+0xba>
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <HAL_SYSTICK_Callback+0xc4>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_SYSTICK_Callback+0xc8>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]

}
 8005ba0:	e7ff      	b.n	8005ba2 <HAL_SYSTICK_Callback+0xba>
 8005ba2:	bf00      	nop
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200008e4 	.word	0x200008e4
 8005bac:	200008f0 	.word	0x200008f0
 8005bb0:	200008f4 	.word	0x200008f4
 8005bb4:	200008e8 	.word	0x200008e8

08005bb8 <setPwmLed>:


void setPwmLed(uint8_t pwm)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, pwm);
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <setPwmLed+0x20>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	79fa      	ldrb	r2, [r7, #7]
 8005bc8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20000674 	.word	0x20000674

08005bdc <setLed2>:

void setLed2(uint8_t bri)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	71fb      	strb	r3, [r7, #7]
    setPwmLed(bri_corr[bri]);
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	4a04      	ldr	r2, [pc, #16]	; (8005bfc <setLed2+0x20>)
 8005bea:	5cd3      	ldrb	r3, [r2, r3]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff ffe3 	bl	8005bb8 <setPwmLed>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	08012334 	.word	0x08012334

08005c00 <check_powerOn>:
    led2_tim = spd;
    led2_cycles = cnt | (wait<<16);
}

void check_powerOn()
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
	  POWER_OFF();
 8005c06:	2200      	movs	r2, #0
 8005c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c0c:	4815      	ldr	r0, [pc, #84]	; (8005c64 <check_powerOn+0x64>)
 8005c0e:	f003 f92b 	bl	8008e68 <HAL_GPIO_WritePin>
	  printf("1. Check Power ON\r\n");
 8005c12:	4815      	ldr	r0, [pc, #84]	; (8005c68 <check_powerOn+0x68>)
 8005c14:	f009 f992 	bl	800ef3c <puts>
	  uint32_t timon = HAL_GetTick();
 8005c18:	f000 fda2 	bl	8006760 <HAL_GetTick>
 8005c1c:	6078      	str	r0, [r7, #4]
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8005c1e:	e014      	b.n	8005c4a <check_powerOn+0x4a>
	  {
//		  printf("2. Check Power BUT\r\n");
	    if(HAL_GetTick() - timon > 1000)     // 1 sec pushing
 8005c20:	f000 fd9e 	bl	8006760 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c2e:	d90c      	bls.n	8005c4a <check_powerOn+0x4a>
	    {
	    	timon = HAL_GetTick();
 8005c30:	f000 fd96 	bl	8006760 <HAL_GetTick>
 8005c34:	6078      	str	r0, [r7, #4]
	        POWER_ON();    // pull-up power supply
 8005c36:	2201      	movs	r2, #1
 8005c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c3c:	4809      	ldr	r0, [pc, #36]	; (8005c64 <check_powerOn+0x64>)
 8005c3e:	f003 f913 	bl	8008e68 <HAL_GPIO_WritePin>
	    	printf("Power ON\r\n");
 8005c42:	480a      	ldr	r0, [pc, #40]	; (8005c6c <check_powerOn+0x6c>)
 8005c44:	f009 f97a 	bl	800ef3c <puts>
	        break;                // break while loop
 8005c48:	e008      	b.n	8005c5c <check_powerOn+0x5c>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8005c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c4e:	4808      	ldr	r0, [pc, #32]	; (8005c70 <check_powerOn+0x70>)
 8005c50:	f003 f8f2 	bl	8008e38 <HAL_GPIO_ReadPin>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d0e2      	beq.n	8005c20 <check_powerOn+0x20>
	    }
	  }
}
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	48000400 	.word	0x48000400
 8005c68:	080121b0 	.word	0x080121b0
 8005c6c:	080121c4 	.word	0x080121c4
 8005c70:	48000800 	.word	0x48000800

08005c74 <check_powerOff>:

void check_powerOff()
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  if(Power_SW_READ()) //power button pressed
 8005c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c7c:	4817      	ldr	r0, [pc, #92]	; (8005cdc <check_powerOff+0x68>)
 8005c7e:	f003 f8db 	bl	8008e38 <HAL_GPIO_ReadPin>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d022      	beq.n	8005cce <check_powerOff+0x5a>
  {
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <check_powerOff+0x6c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d023      	beq.n	8005cd8 <check_powerOff+0x64>
 8005c90:	f000 fd66 	bl	8006760 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <check_powerOff+0x6c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005ca0:	d91a      	bls.n	8005cd8 <check_powerOff+0x64>
     {
    	 printf("Power off\r\n");
 8005ca2:	4810      	ldr	r0, [pc, #64]	; (8005ce4 <check_powerOff+0x70>)
 8005ca4:	f009 f94a 	bl	800ef3c <puts>
    	 POWER_OFF();
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cae:	480e      	ldr	r0, [pc, #56]	; (8005ce8 <check_powerOff+0x74>)
 8005cb0:	f003 f8da 	bl	8008e68 <HAL_GPIO_WritePin>
    	 HAL_Delay(3000);
 8005cb4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005cb8:	f000 fd5e 	bl	8006778 <HAL_Delay>
    	 LED1_OFF();
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	2120      	movs	r1, #32
 8005cc0:	4809      	ldr	r0, [pc, #36]	; (8005ce8 <check_powerOff+0x74>)
 8005cc2:	f003 f8d1 	bl	8008e68 <HAL_GPIO_WritePin>
    	 LED2_OFF();
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7ff ff88 	bl	8005bdc <setLed2>
     }
  } else offTim = HAL_GetTick();   // button released, update offTim

}
 8005ccc:	e004      	b.n	8005cd8 <check_powerOff+0x64>
  } else offTim = HAL_GetTick();   // button released, update offTim
 8005cce:	f000 fd47 	bl	8006760 <HAL_GetTick>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	4a02      	ldr	r2, [pc, #8]	; (8005ce0 <check_powerOff+0x6c>)
 8005cd6:	6013      	str	r3, [r2, #0]
}
 8005cd8:	bf00      	nop
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	48000800 	.word	0x48000800
 8005ce0:	200008ec 	.word	0x200008ec
 8005ce4:	080121d0 	.word	0x080121d0
 8005ce8:	48000400 	.word	0x48000400

08005cec <thp_loop>:
    POWER_OFF();
    HAL_PWR_EnterSTANDBYMode();
}

void thp_loop()
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
	CLI();
 8005cf0:	f7fd f802 	bl	8002cf8 <CLI>
}
 8005cf4:	bf00      	nop
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HALcalculateCRC>:

uint8_t HALcalculateCRC(uint8_t* data, uint8_t len)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
    HAL_CRC_Init(&hcrc);
 8005d04:	480b      	ldr	r0, [pc, #44]	; (8005d34 <HALcalculateCRC+0x3c>)
 8005d06:	f002 f831 	bl	8007d6c <HAL_CRC_Init>
    __HAL_CRC_DR_RESET(&hcrc);
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <HALcalculateCRC+0x3c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <HALcalculateCRC+0x3c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	609a      	str	r2, [r3, #8]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4804      	ldr	r0, [pc, #16]	; (8005d34 <HALcalculateCRC+0x3c>)
 8005d22:	f002 f887 	bl	8007e34 <HAL_CRC_Calculate>
 8005d26:	60f8      	str	r0, [r7, #12]
    return (uint8_t)(crc & 0xFF);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	b2db      	uxtb	r3, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000554 	.word	0x20000554

08005d38 <i2c_read8>:
#include <math.h>



uint8_t i2c_read8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t *value, uint8_t addr)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08a      	sub	sp, #40	; 0x28
 8005d3c:	af04      	add	r7, sp, #16
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	461a      	mov	r2, r3
 8005d44:	460b      	mov	r3, r1
 8005d46:	817b      	strh	r3, [r7, #10]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	727b      	strb	r3, [r7, #9]
	uint8_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8005d4c:	7a7b      	ldrb	r3, [r7, #9]
 8005d4e:	b299      	uxth	r1, r3
 8005d50:	897a      	ldrh	r2, [r7, #10]
 8005d52:	2308      	movs	r3, #8
 8005d54:	9302      	str	r3, [sp, #8]
 8005d56:	2301      	movs	r3, #1
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	f107 0316 	add.w	r3, r7, #22
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	2301      	movs	r3, #1
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f003 fc40 	bl	80095e8 <HAL_I2C_Mem_Read>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	75fb      	strb	r3, [r7, #23]
    *value = tmp;
 8005d6c:	7dba      	ldrb	r2, [r7, #22]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	701a      	strb	r2, [r3, #0]
    return res;
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <i2c_read16>:

uint8_t i2c_read16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t *value, uint8_t addr)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af04      	add	r7, sp, #16
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	461a      	mov	r2, r3
 8005d88:	460b      	mov	r3, r1
 8005d8a:	817b      	strh	r3, [r7, #10]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	727b      	strb	r3, [r7, #9]
	uint16_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8005d90:	7a7b      	ldrb	r3, [r7, #9]
 8005d92:	b299      	uxth	r1, r3
 8005d94:	897a      	ldrh	r2, [r7, #10]
 8005d96:	2308      	movs	r3, #8
 8005d98:	9302      	str	r3, [sp, #8]
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	f107 0314 	add.w	r3, r7, #20
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	2301      	movs	r3, #1
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f003 fc1e 	bl	80095e8 <HAL_I2C_Mem_Read>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]
    *value = tmp;
 8005db0:	8aba      	ldrh	r2, [r7, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	801a      	strh	r2, [r3, #0]
    return res;
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <i2c_write8>:
    *value = tmp;
    return res;
}

uint8_t i2c_write8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t value, uint8_t addr)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af04      	add	r7, sp, #16
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	807b      	strh	r3, [r7, #2]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	707b      	strb	r3, [r7, #1]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	703b      	strb	r3, [r7, #0]
	uint8_t tmp = value;
 8005dda:	787b      	ldrb	r3, [r7, #1]
 8005ddc:	73bb      	strb	r3, [r7, #14]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8005dde:	783b      	ldrb	r3, [r7, #0]
 8005de0:	b299      	uxth	r1, r3
 8005de2:	887a      	ldrh	r2, [r7, #2]
 8005de4:	2308      	movs	r3, #8
 8005de6:	9302      	str	r3, [sp, #8]
 8005de8:	2301      	movs	r3, #1
 8005dea:	9301      	str	r3, [sp, #4]
 8005dec:	f107 030e 	add.w	r3, r7, #14
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	2301      	movs	r3, #1
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f003 fae3 	bl	80093c0 <HAL_I2C_Mem_Write>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	73fb      	strb	r3, [r7, #15]
    return res;
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <i2c_write16>:

uint8_t i2c_write16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t value, uint8_t addr)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af04      	add	r7, sp, #16
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	4608      	mov	r0, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	817b      	strh	r3, [r7, #10]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	813b      	strh	r3, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp = value;
 8005e22:	893b      	ldrh	r3, [r7, #8]
 8005e24:	82bb      	strh	r3, [r7, #20]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	b299      	uxth	r1, r3
 8005e2a:	897a      	ldrh	r2, [r7, #10]
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	9302      	str	r3, [sp, #8]
 8005e30:	2302      	movs	r3, #2
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	f107 0314 	add.w	r3, r7, #20
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f003 fabf 	bl	80093c0 <HAL_I2C_Mem_Write>
 8005e42:	4603      	mov	r3, r0
 8005e44:	75fb      	strb	r3, [r7, #23]
    return res;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <setBit>:
    i2c_read16(i2c, sub_address, &old_word, addr);
    old_word |= new_word;
    i2c_write16(i2c, sub_address, old_word, addr);
}

void setBit(unsigned char* reg, int bitNumber, int value) {
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
    if (value == 0) {
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10f      	bne.n	8005e82 <setBit+0x32>
        *reg &= ~(1 << bitNumber);  // Ustawienie bitu na 0
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b25a      	sxtb	r2, r3
 8005e68:	2101      	movs	r1, #1
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	b25b      	sxtb	r3, r3
 8005e76:	4013      	ands	r3, r2
 8005e78:	b25b      	sxtb	r3, r3
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	701a      	strb	r2, [r3, #0]
    } else if (value == 1) {
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
    }
}
 8005e80:	e00f      	b.n	8005ea2 <setBit+0x52>
    } else if (value == 1) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10c      	bne.n	8005ea2 <setBit+0x52>
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	b25a      	sxtb	r2, r3
 8005e8e:	2101      	movs	r1, #1
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	fa01 f303 	lsl.w	r3, r1, r3
 8005e96:	b25b      	sxtb	r3, r3
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	b25b      	sxtb	r3, r3
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	701a      	strb	r2, [r3, #0]
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <modifyRegister>:

void modifyRegister(unsigned char* reg, unsigned char mask, unsigned char value) {
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	70bb      	strb	r3, [r7, #2]
    *reg = (*reg & ~mask) | (value & mask);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b25a      	sxtb	r2, r3
 8005ec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	b25b      	sxtb	r3, r3
 8005ecc:	4013      	ands	r3, r2
 8005ece:	b25a      	sxtb	r2, r3
 8005ed0:	78b9      	ldrb	r1, [r7, #2]
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	400b      	ands	r3, r1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	b25b      	sxtb	r3, r3
 8005eda:	4313      	orrs	r3, r2
 8005edc:	b25b      	sxtb	r3, r3
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	701a      	strb	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <i2c_scan>:

void i2c_scan(I2C_HandleTypeDef * i2c, uint8_t addr_min, uint8_t addr_max)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
 8005efc:	4613      	mov	r3, r2
 8005efe:	70bb      	strb	r3, [r7, #2]
	printf("Scanning I2C devices ...\r\n");
 8005f00:	4818      	ldr	r0, [pc, #96]	; (8005f64 <i2c_scan+0x74>)
 8005f02:	f009 f81b 	bl	800ef3c <puts>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8005f06:	78fb      	ldrb	r3, [r7, #3]
 8005f08:	73fb      	strb	r3, [r7, #15]
 8005f0a:	e022      	b.n	8005f52 <i2c_scan+0x62>
	{
		HAL_StatusTypeDef status;
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	b299      	uxth	r1, r3
 8005f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005f18:	2203      	movs	r2, #3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f003 fc7e 	bl	800981c <HAL_I2C_IsDeviceReady>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73bb      	strb	r3, [r7, #14]
		HAL_Delay(100);
 8005f24:	2064      	movs	r0, #100	; 0x64
 8005f26:	f000 fc27 	bl	8006778 <HAL_Delay>
		if (status == HAL_OK) {
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <i2c_scan+0x4c>
			    	printf("Device found on %#x \r\n", addr);
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	4619      	mov	r1, r3
 8005f34:	480c      	ldr	r0, [pc, #48]	; (8005f68 <i2c_scan+0x78>)
 8005f36:	f008 ff9b 	bl	800ee70 <iprintf>
 8005f3a:	e007      	b.n	8005f4c <i2c_scan+0x5c>
			    } else {
			    	printf("Device NOTfound on %#x \r\n", addr);
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	480a      	ldr	r0, [pc, #40]	; (8005f6c <i2c_scan+0x7c>)
 8005f42:	f008 ff95 	bl	800ee70 <iprintf>
			    	HAL_Delay(100);
 8005f46:	2064      	movs	r0, #100	; 0x64
 8005f48:	f000 fc16 	bl	8006778 <HAL_Delay>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]
 8005f52:	7bfa      	ldrb	r2, [r7, #15]
 8005f54:	78bb      	ldrb	r3, [r7, #2]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d9d8      	bls.n	8005f0c <i2c_scan+0x1c>
			    }
	}
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	080121e4 	.word	0x080121e4
 8005f68:	08012200 	.word	0x08012200
 8005f6c:	08012218 	.word	0x08012218

08005f70 <byteswap16>:

uint16_t byteswap16 (uint16_t bytes)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	80fb      	strh	r3, [r7, #6]
	return ((bytes & 0xFF) << 8) | ((bytes >> 8) & 0xFF);
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	b21a      	sxth	r2, r3
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	0a1b      	lsrs	r3, r3, #8
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	b21b      	sxth	r3, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b21b      	sxth	r3, r3
 8005f8c:	b29b      	uxth	r3, r3
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <TCA9543A_SelectChannel>:
  }
  printf("\r\n");
}

void TCA9543A_SelectChannel(uint8_t channel)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	71fb      	strb	r3, [r7, #7]
	if (channel == 1 || channel == 2) {
 8005fa6:	79fb      	ldrb	r3, [r7, #7]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d002      	beq.n	8005fb2 <TCA9543A_SelectChannel+0x16>
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d11f      	bne.n	8005ff2 <TCA9543A_SelectChannel+0x56>
			I2C2TCA_NRST();
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fbc:	f002 ff54 	bl	8008e68 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f000 fbd9 	bl	8006778 <HAL_Delay>
		    uint8_t data = (1 << (channel - 1));
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	2201      	movs	r2, #1
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	73fb      	strb	r3, [r7, #15]
		    HAL_I2C_Master_Transmit(&hi2c2, TCA9543A_ADDRESS, &data, sizeof(data), HAL_MAX_DELAY);
 8005fd4:	f107 020f 	add.w	r2, r7, #15
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	2301      	movs	r3, #1
 8005fe0:	21e4      	movs	r1, #228	; 0xe4
 8005fe2:	480e      	ldr	r0, [pc, #56]	; (800601c <TCA9543A_SelectChannel+0x80>)
 8005fe4:	f003 f802 	bl	8008fec <HAL_I2C_Master_Transmit>
		    HAL_Delay(1);
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f000 fbc5 	bl	8006778 <HAL_Delay>
	if (channel == 1 || channel == 2) {
 8005fee:	bf00      	nop
	} else if (channel == 0) {I2C2TCA_RST(); HAL_Delay(1);}
	else printf("Wrong parameter\r\n");
}
 8005ff0:	e010      	b.n	8006014 <TCA9543A_SelectChannel+0x78>
	} else if (channel == 0) {I2C2TCA_RST(); HAL_Delay(1);}
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <TCA9543A_SelectChannel+0x72>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006002:	f002 ff31 	bl	8008e68 <HAL_GPIO_WritePin>
 8006006:	2001      	movs	r0, #1
 8006008:	f000 fbb6 	bl	8006778 <HAL_Delay>
}
 800600c:	e002      	b.n	8006014 <TCA9543A_SelectChannel+0x78>
	else printf("Wrong parameter\r\n");
 800600e:	4804      	ldr	r0, [pc, #16]	; (8006020 <TCA9543A_SelectChannel+0x84>)
 8006010:	f008 ff94 	bl	800ef3c <puts>
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	200005cc 	.word	0x200005cc
 8006020:	08012238 	.word	0x08012238

08006024 <SET_DPS368>:
{
	TCA9543A_SelectChannel(1);
}

void SET_DPS368()
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(2);
 8006028:	2002      	movs	r0, #2
 800602a:	f7ff ffb7 	bl	8005f9c <TCA9543A_SelectChannel>
}
 800602e:	bf00      	nop
 8006030:	bd80      	pop	{r7, pc}

08006032 <UNSET_BME_DPS>:

void UNSET_BME_DPS()
{
 8006032:	b580      	push	{r7, lr}
 8006034:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(0);
 8006036:	2000      	movs	r0, #0
 8006038:	f7ff ffb0 	bl	8005f9c <TCA9543A_SelectChannel>
}
 800603c:	bf00      	nop
 800603e:	bd80      	pop	{r7, pc}

08006040 <TMP117_check>:


uint8_t TMP117_check()
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 8006046:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800604a:	2203      	movs	r2, #3
 800604c:	2192      	movs	r1, #146	; 0x92
 800604e:	4814      	ldr	r0, [pc, #80]	; (80060a0 <TMP117_check+0x60>)
 8006050:	f003 fbe4 	bl	800981c <HAL_I2C_IsDeviceReady>
 8006054:	4603      	mov	r3, r0
 8006056:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 8006058:	2064      	movs	r0, #100	; 0x64
 800605a:	f000 fb8d 	bl	8006778 <HAL_Delay>
	if (status == HAL_OK) {
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d114      	bne.n	800608e <TMP117_check+0x4e>
		uint16_t value;
		i2c_read16(&hi2c2, TMP117_ID_REG, &value, TMP117_ADDR << 1);
 8006064:	1d3a      	adds	r2, r7, #4
 8006066:	2392      	movs	r3, #146	; 0x92
 8006068:	210f      	movs	r1, #15
 800606a:	480d      	ldr	r0, [pc, #52]	; (80060a0 <TMP117_check+0x60>)
 800606c:	f7ff fe86 	bl	8005d7c <i2c_read16>
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 8006070:	88bb      	ldrh	r3, [r7, #4]
 8006072:	f241 7201 	movw	r2, #5889	; 0x1701
 8006076:	4293      	cmp	r3, r2
 8006078:	d104      	bne.n	8006084 <TMP117_check+0x44>
 800607a:	480a      	ldr	r0, [pc, #40]	; (80060a4 <TMP117_check+0x64>)
 800607c:	f008 ff5e 	bl	800ef3c <puts>
 8006080:	2301      	movs	r3, #1
 8006082:	e008      	b.n	8006096 <TMP117_check+0x56>
 8006084:	4808      	ldr	r0, [pc, #32]	; (80060a8 <TMP117_check+0x68>)
 8006086:	f008 ff59 	bl	800ef3c <puts>
 800608a:	2300      	movs	r3, #0
 800608c:	e003      	b.n	8006096 <TMP117_check+0x56>
	} else {printf("TMP117 FAILED\r\n"); return 0;}
 800608e:	4807      	ldr	r0, [pc, #28]	; (80060ac <TMP117_check+0x6c>)
 8006090:	f008 ff54 	bl	800ef3c <puts>
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	200005cc 	.word	0x200005cc
 80060a4:	0801224c 	.word	0x0801224c
 80060a8:	08012258 	.word	0x08012258
 80060ac:	08012264 	.word	0x08012264

080060b0 <TMP117_RST_Conf_Reg>:

void TMP117_RST_Conf_Reg()
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
//	printf("TMP117 RESET REG\r\n");
	i2c_write16(&hi2c2, TMP117_CONF_REG, TMP117_RESET_CONF, TMP117_ADDR << 1);
 80060b4:	2392      	movs	r3, #146	; 0x92
 80060b6:	f44f 7208 	mov.w	r2, #544	; 0x220
 80060ba:	2101      	movs	r1, #1
 80060bc:	4803      	ldr	r0, [pc, #12]	; (80060cc <TMP117_RST_Conf_Reg+0x1c>)
 80060be:	f7ff fea3 	bl	8005e08 <i2c_write16>
	HAL_Delay(1);
 80060c2:	2001      	movs	r0, #1
 80060c4:	f000 fb58 	bl	8006778 <HAL_Delay>

}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	200005cc 	.word	0x200005cc

080060d0 <TMP117_get_temp>:

float TMP117_get_temp(uint8_t avg_mode)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
	uint16_t config, swapconfig;
	TMP117_RST_Conf_Reg();
 80060da:	f7ff ffe9 	bl	80060b0 <TMP117_RST_Conf_Reg>
	i2c_read16(&hi2c2, TMP117_CONF_REG, &config, TMP117_ADDR << 1);
 80060de:	f107 020c 	add.w	r2, r7, #12
 80060e2:	2392      	movs	r3, #146	; 0x92
 80060e4:	2101      	movs	r1, #1
 80060e6:	4824      	ldr	r0, [pc, #144]	; (8006178 <TMP117_get_temp+0xa8>)
 80060e8:	f7ff fe48 	bl	8005d7c <i2c_read16>
	swapconfig = byteswap16(config);
 80060ec:	89bb      	ldrh	r3, [r7, #12]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff ff3e 	bl	8005f70 <byteswap16>
 80060f4:	4603      	mov	r3, r0
 80060f6:	81fb      	strh	r3, [r7, #14]
//	printf("REG in TMP (hex): %x \r\n", swapconfig);
	swapconfig |= avg_mode;
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	89fb      	ldrh	r3, [r7, #14]
 80060fe:	4313      	orrs	r3, r2
 8006100:	81fb      	strh	r3, [r7, #14]
	swapconfig |= one_shot;
 8006102:	89fb      	ldrh	r3, [r7, #14]
 8006104:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8006108:	81fb      	strh	r3, [r7, #14]
	config = byteswap16(swapconfig);
 800610a:	89fb      	ldrh	r3, [r7, #14]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff2f 	bl	8005f70 <byteswap16>
 8006112:	4603      	mov	r3, r0
 8006114:	81bb      	strh	r3, [r7, #12]
	i2c_write16(&hi2c2, TMP117_CONF_REG, config, TMP117_ADDR << 1);
 8006116:	89ba      	ldrh	r2, [r7, #12]
 8006118:	2392      	movs	r3, #146	; 0x92
 800611a:	2101      	movs	r1, #1
 800611c:	4816      	ldr	r0, [pc, #88]	; (8006178 <TMP117_get_temp+0xa8>)
 800611e:	f7ff fe73 	bl	8005e08 <i2c_write16>
	HAL_Delay(2);
 8006122:	2002      	movs	r0, #2
 8006124:	f000 fb28 	bl	8006778 <HAL_Delay>
	if((avg_mode == no_avg) || (avg_mode == avg8)) {HAL_Delay(200);} else {HAL_Delay(1200);}
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <TMP117_get_temp+0x64>
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	2b20      	cmp	r3, #32
 8006132:	d103      	bne.n	800613c <TMP117_get_temp+0x6c>
 8006134:	20c8      	movs	r0, #200	; 0xc8
 8006136:	f000 fb1f 	bl	8006778 <HAL_Delay>
 800613a:	e003      	b.n	8006144 <TMP117_get_temp+0x74>
 800613c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006140:	f000 fb1a 	bl	8006778 <HAL_Delay>
	uint16_t value;
    i2c_read16(&hi2c2, TMP117_TEMP_REG, &value, TMP117_ADDR << 1);
 8006144:	f107 020a 	add.w	r2, r7, #10
 8006148:	2392      	movs	r3, #146	; 0x92
 800614a:	2100      	movs	r1, #0
 800614c:	480a      	ldr	r0, [pc, #40]	; (8006178 <TMP117_get_temp+0xa8>)
 800614e:	f7ff fe15 	bl	8005d7c <i2c_read16>
    return (float)byteswap16(value) * TMP117_RESOLUTION;
 8006152:	897b      	ldrh	r3, [r7, #10]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff ff0b 	bl	8005f70 <byteswap16>
 800615a:	4603      	mov	r3, r0
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006164:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800617c <TMP117_get_temp+0xac>
 8006168:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800616c:	eeb0 0a67 	vmov.f32	s0, s15
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	200005cc 	.word	0x200005cc
 800617c:	3c000000 	.word	0x3c000000

08006180 <MS8607_check>:


uint8_t MS8607_check()
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
	ms8607_init();
 8006184:	f7fe fbd4 	bl	8004930 <ms8607_init>
	if(ms8607_is_connected()) {printf("MS8607 OK\r\n"); return 1;
 8006188:	f7fe fbe2 	bl	8004950 <ms8607_is_connected>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <MS8607_check+0x1c>
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <MS8607_check+0x28>)
 8006194:	f008 fed2 	bl	800ef3c <puts>
 8006198:	2301      	movs	r3, #1
 800619a:	e003      	b.n	80061a4 <MS8607_check+0x24>
	} else {printf("MS8607 FAIL\r\n"); return 0;};
 800619c:	4803      	ldr	r0, [pc, #12]	; (80061ac <MS8607_check+0x2c>)
 800619e:	f008 fecd 	bl	800ef3c <puts>
 80061a2:	2300      	movs	r3, #0
	ms8607_reset();
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	08012274 	.word	0x08012274
 80061ac:	08012280 	.word	0x08012280

080061b0 <MS8607_get_temp>:

float MS8607_get_temp()
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
	float temp;
	ms8607_read_temperature(&temp);
 80061b6:	1d3b      	adds	r3, r7, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fbdd 	bl	8004978 <ms8607_read_temperature>
//	printf("MS Temp: %f\r\n",temp);
	return temp;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	ee07 3a90 	vmov	s15, r3
}
 80061c4:	eeb0 0a67 	vmov.f32	s0, s15
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <SHTC3_wakeup>:
//	printf("MS Hum: %f\r\n",hum);
	return hum;
}

uint8_t SHTC3_wakeup()
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	uint16_t command = SHTC3_CMD_WAKEUP;
 80061d6:	f241 7335 	movw	r3, #5941	; 0x1735
 80061da:	80bb      	strh	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 3, 150);
 80061dc:	1d3a      	adds	r2, r7, #4
 80061de:	2396      	movs	r3, #150	; 0x96
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	2303      	movs	r3, #3
 80061e4:	21e0      	movs	r1, #224	; 0xe0
 80061e6:	4809      	ldr	r0, [pc, #36]	; (800620c <SHTC3_wakeup+0x3c>)
 80061e8:	f002 ff00 	bl	8008fec <HAL_I2C_Master_Transmit>
 80061ec:	4603      	mov	r3, r0
 80061ee:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(13);
 80061f0:	200d      	movs	r0, #13
 80061f2:	f000 fac1 	bl	8006778 <HAL_Delay>
	if(status == HAL_OK) return 1;
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <SHTC3_wakeup+0x30>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <SHTC3_wakeup+0x32>
	else return 0;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	200005cc 	.word	0x200005cc

08006210 <SHTC3_sleep>:

uint8_t SHTC3_sleep()
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status;
	uint16_t command = SHTC3_CMD_SLEEP;
 8006216:	f649 03b0 	movw	r3, #39088	; 0x98b0
 800621a:	80bb      	strh	r3, [r7, #4]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 3, 150);
 800621c:	1d3a      	adds	r2, r7, #4
 800621e:	2396      	movs	r3, #150	; 0x96
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2303      	movs	r3, #3
 8006224:	21e0      	movs	r1, #224	; 0xe0
 8006226:	4809      	ldr	r0, [pc, #36]	; (800624c <SHTC3_sleep+0x3c>)
 8006228:	f002 fee0 	bl	8008fec <HAL_I2C_Master_Transmit>
 800622c:	4603      	mov	r3, r0
 800622e:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(2);
 8006230:	2002      	movs	r0, #2
 8006232:	f000 faa1 	bl	8006778 <HAL_Delay>
	if(status == HAL_OK) return 1;
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <SHTC3_sleep+0x30>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <SHTC3_sleep+0x32>
	else return 0;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	200005cc 	.word	0x200005cc

08006250 <SHTC3_check>:


uint8_t SHTC3_check()
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status, status2;
	uint8_t data[2];
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 8006256:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800625a:	2203      	movs	r2, #3
 800625c:	21e0      	movs	r1, #224	; 0xe0
 800625e:	4828      	ldr	r0, [pc, #160]	; (8006300 <SHTC3_check+0xb0>)
 8006260:	f003 fadc 	bl	800981c <HAL_I2C_IsDeviceReady>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(2);
 8006268:	2002      	movs	r0, #2
 800626a:	f000 fa85 	bl	8006778 <HAL_Delay>
	if (status == HAL_OK) {
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d13b      	bne.n	80062ec <SHTC3_check+0x9c>
		SHTC3_wakeup();
 8006274:	f7ff ffac 	bl	80061d0 <SHTC3_wakeup>
		uint16_t command = SHTC3_CMD_READ_ID;
 8006278:	f64c 03ef 	movw	r3, #51439	; 0xc8ef
 800627c:	80fb      	strh	r3, [r7, #6]
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800627e:	1dba      	adds	r2, r7, #6
 8006280:	2396      	movs	r3, #150	; 0x96
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2302      	movs	r3, #2
 8006286:	21e0      	movs	r1, #224	; 0xe0
 8006288:	481d      	ldr	r0, [pc, #116]	; (8006300 <SHTC3_check+0xb0>)
 800628a:	f002 feaf 	bl	8008fec <HAL_I2C_Master_Transmit>
 800628e:	4603      	mov	r3, r0
 8006290:	73bb      	strb	r3, [r7, #14]
		status2 = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 2, 150);
 8006292:	f107 0208 	add.w	r2, r7, #8
 8006296:	2396      	movs	r3, #150	; 0x96
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	2302      	movs	r3, #2
 800629c:	21e1      	movs	r1, #225	; 0xe1
 800629e:	4818      	ldr	r0, [pc, #96]	; (8006300 <SHTC3_check+0xb0>)
 80062a0:	f002 ff98 	bl	80091d4 <HAL_I2C_Master_Receive>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73bb      	strb	r3, [r7, #14]
		  if (status2 == HAL_OK) {
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d119      	bne.n	80062e2 <SHTC3_check+0x92>
			  uint16_t id = data[0] << 8 | data[1];
 80062ae:	7a3b      	ldrb	r3, [r7, #8]
 80062b0:	021b      	lsls	r3, r3, #8
 80062b2:	b21a      	sxth	r2, r3
 80062b4:	7a7b      	ldrb	r3, [r7, #9]
 80062b6:	b21b      	sxth	r3, r3
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b21b      	sxth	r3, r3
 80062bc:	81bb      	strh	r3, [r7, #12]
			  uint16_t code = id & SHTC3_PRODUCT_CODE_MASK;
 80062be:	89bb      	ldrh	r3, [r7, #12]
 80062c0:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80062c4:	051b      	lsls	r3, r3, #20
 80062c6:	0d1b      	lsrs	r3, r3, #20
 80062c8:	817b      	strh	r3, [r7, #10]
			  if (code == 0x807) {
 80062ca:	897b      	ldrh	r3, [r7, #10]
 80062cc:	f640 0207 	movw	r2, #2055	; 0x807
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d110      	bne.n	80062f6 <SHTC3_check+0xa6>
				  printf("SHTC3 OK\r\n");
 80062d4:	480b      	ldr	r0, [pc, #44]	; (8006304 <SHTC3_check+0xb4>)
 80062d6:	f008 fe31 	bl	800ef3c <puts>
				  SHTC3_sleep();
 80062da:	f7ff ff99 	bl	8006210 <SHTC3_sleep>
				  return 1;
 80062de:	2301      	movs	r3, #1
 80062e0:	e00a      	b.n	80062f8 <SHTC3_check+0xa8>
			  }
		  } else {printf("NO SHTC3\r\n"); return 0;}
 80062e2:	4809      	ldr	r0, [pc, #36]	; (8006308 <SHTC3_check+0xb8>)
 80062e4:	f008 fe2a 	bl	800ef3c <puts>
 80062e8:	2300      	movs	r3, #0
 80062ea:	e005      	b.n	80062f8 <SHTC3_check+0xa8>
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 80062ec:	4807      	ldr	r0, [pc, #28]	; (800630c <SHTC3_check+0xbc>)
 80062ee:	f008 fe25 	bl	800ef3c <puts>
 80062f2:	2300      	movs	r3, #0
 80062f4:	e000      	b.n	80062f8 <SHTC3_check+0xa8>
	return 0;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	200005cc 	.word	0x200005cc
 8006304:	08012290 	.word	0x08012290
 8006308:	0801229c 	.word	0x0801229c
 800630c:	080122a8 	.word	0x080122a8

08006310 <SHTC3_get_temp>:

float SHTC3_get_temp(uint8_t mode)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af02      	add	r7, sp, #8
 8006316:	4603      	mov	r3, r0
 8006318:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint16_t command;
		SHTC3_wakeup();
 800631a:	f7ff ff59 	bl	80061d0 <SHTC3_wakeup>
		if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d103      	bne.n	800632c <SHTC3_get_temp+0x1c>
 8006324:	f24a 237c 	movw	r3, #41596	; 0xa27c
 8006328:	81fb      	strh	r3, [r7, #14]
 800632a:	e002      	b.n	8006332 <SHTC3_get_temp+0x22>
		else command = SHTC3_CMD_TEMP_HUM_LP;
 800632c:	f645 0364 	movw	r3, #22628	; 0x5864
 8006330:	81fb      	strh	r3, [r7, #14]
		status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8006332:	f107 020e 	add.w	r2, r7, #14
 8006336:	2396      	movs	r3, #150	; 0x96
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	2302      	movs	r3, #2
 800633c:	21e0      	movs	r1, #224	; 0xe0
 800633e:	4824      	ldr	r0, [pc, #144]	; (80063d0 <SHTC3_get_temp+0xc0>)
 8006340:	f002 fe54 	bl	8008fec <HAL_I2C_Master_Transmit>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(20);
 8006348:	2014      	movs	r0, #20
 800634a:	f000 fa15 	bl	8006778 <HAL_Delay>
		status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 3, 150);
 800634e:	f107 0210 	add.w	r2, r7, #16
 8006352:	2396      	movs	r3, #150	; 0x96
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	2303      	movs	r3, #3
 8006358:	21e1      	movs	r1, #225	; 0xe1
 800635a:	481d      	ldr	r0, [pc, #116]	; (80063d0 <SHTC3_get_temp+0xc0>)
 800635c:	f002 ff3a 	bl	80091d4 <HAL_I2C_Master_Receive>
 8006360:	4603      	mov	r3, r0
 8006362:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d127      	bne.n	80063ba <SHTC3_get_temp+0xaa>
		uint16_t raw_temp = data[0] << 8 | data[1];
 800636a:	7c3b      	ldrb	r3, [r7, #16]
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	b21a      	sxth	r2, r3
 8006370:	7c7b      	ldrb	r3, [r7, #17]
 8006372:	b21b      	sxth	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b21b      	sxth	r3, r3
 8006378:	82bb      	strh	r3, [r7, #20]
		uint8_t crc_hal = HALcalculateCRC(data,2);
 800637a:	f107 0310 	add.w	r3, r7, #16
 800637e:	2102      	movs	r1, #2
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fcb9 	bl	8005cf8 <HALcalculateCRC>
 8006386:	4603      	mov	r3, r0
 8006388:	74fb      	strb	r3, [r7, #19]
		if(data[2] == crc_hal) {
 800638a:	7cbb      	ldrb	r3, [r7, #18]
 800638c:	7cfa      	ldrb	r2, [r7, #19]
 800638e:	429a      	cmp	r2, r3
 8006390:	d116      	bne.n	80063c0 <SHTC3_get_temp+0xb0>
			SHTC3_sleep();
 8006392:	f7ff ff3d 	bl	8006210 <SHTC3_sleep>
			return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
 8006396:	8abb      	ldrh	r3, [r7, #20]
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80063d4 <SHTC3_get_temp+0xc4>
 80063a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063a8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80063d8 <SHTC3_get_temp+0xc8>
 80063ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063b0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80063dc <SHTC3_get_temp+0xcc>
 80063b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063b8:	e004      	b.n	80063c4 <SHTC3_get_temp+0xb4>
		}
	} else {printf("SHTC3 Busy\r\n");};
 80063ba:	4809      	ldr	r0, [pc, #36]	; (80063e0 <SHTC3_get_temp+0xd0>)
 80063bc:	f008 fdbe 	bl	800ef3c <puts>
	return -1000.0;
 80063c0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80063e4 <SHTC3_get_temp+0xd4>
}
 80063c4:	eeb0 0a67 	vmov.f32	s0, s15
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	200005cc 	.word	0x200005cc
 80063d4:	432f0000 	.word	0x432f0000
 80063d8:	477fff00 	.word	0x477fff00
 80063dc:	42340000 	.word	0x42340000
 80063e0:	080122b8 	.word	0x080122b8
 80063e4:	c47a0000 	.word	0xc47a0000

080063e8 <SHTC3_get_hum>:

float SHTC3_get_hum(uint8_t mode)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	4603      	mov	r3, r0
 80063f0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;
	uint8_t data[3];
	uint16_t command;
	SHTC3_wakeup();
 80063f2:	f7ff feed 	bl	80061d0 <SHTC3_wakeup>
	if(mode == 0) command = SHTC3_CMD_HUM_TEMP;
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d103      	bne.n	8006404 <SHTC3_get_hum+0x1c>
 80063fc:	f242 435c 	movw	r3, #9308	; 0x245c
 8006400:	81fb      	strh	r3, [r7, #14]
 8006402:	e002      	b.n	800640a <SHTC3_get_hum+0x22>
	else command = SHTC3_CMD_HUM_TEMP_LP;
 8006404:	f64d 6344 	movw	r3, #56900	; 0xde44
 8006408:	81fb      	strh	r3, [r7, #14]
		status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800640a:	f107 020e 	add.w	r2, r7, #14
 800640e:	2396      	movs	r3, #150	; 0x96
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	2302      	movs	r3, #2
 8006414:	21e0      	movs	r1, #224	; 0xe0
 8006416:	4823      	ldr	r0, [pc, #140]	; (80064a4 <SHTC3_get_hum+0xbc>)
 8006418:	f002 fde8 	bl	8008fec <HAL_I2C_Master_Transmit>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]
		HAL_Delay(20);
 8006420:	2014      	movs	r0, #20
 8006422:	f000 f9a9 	bl	8006778 <HAL_Delay>
		status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 3, 150);
 8006426:	f107 0210 	add.w	r2, r7, #16
 800642a:	2396      	movs	r3, #150	; 0x96
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	2303      	movs	r3, #3
 8006430:	21e1      	movs	r1, #225	; 0xe1
 8006432:	481c      	ldr	r0, [pc, #112]	; (80064a4 <SHTC3_get_hum+0xbc>)
 8006434:	f002 fece 	bl	80091d4 <HAL_I2C_Master_Receive>
 8006438:	4603      	mov	r3, r0
 800643a:	75fb      	strb	r3, [r7, #23]
		if (status == HAL_OK) {
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d123      	bne.n	800648a <SHTC3_get_hum+0xa2>
		uint16_t raw_hum = data[0] << 8 | data[1];
 8006442:	7c3b      	ldrb	r3, [r7, #16]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	b21a      	sxth	r2, r3
 8006448:	7c7b      	ldrb	r3, [r7, #17]
 800644a:	b21b      	sxth	r3, r3
 800644c:	4313      	orrs	r3, r2
 800644e:	b21b      	sxth	r3, r3
 8006450:	82bb      	strh	r3, [r7, #20]
		uint8_t crc_hal = HALcalculateCRC(data,2);
 8006452:	f107 0310 	add.w	r3, r7, #16
 8006456:	2102      	movs	r1, #2
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fc4d 	bl	8005cf8 <HALcalculateCRC>
 800645e:	4603      	mov	r3, r0
 8006460:	74fb      	strb	r3, [r7, #19]

		if(data[2] == crc_hal) {
 8006462:	7cbb      	ldrb	r3, [r7, #18]
 8006464:	7cfa      	ldrb	r2, [r7, #19]
 8006466:	429a      	cmp	r2, r3
 8006468:	d112      	bne.n	8006490 <SHTC3_get_hum+0xa8>
			SHTC3_sleep();
 800646a:	f7ff fed1 	bl	8006210 <SHTC3_sleep>
			return (float)((raw_hum * 100.0f) / 65535.0f);
 800646e:	8abb      	ldrh	r3, [r7, #20]
 8006470:	ee07 3a90 	vmov	s15, r3
 8006474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006478:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80064a8 <SHTC3_get_hum+0xc0>
 800647c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006480:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80064ac <SHTC3_get_hum+0xc4>
 8006484:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006488:	e004      	b.n	8006494 <SHTC3_get_hum+0xac>
		}
	} else {printf("SHTC3 Busy\r\n");};
 800648a:	4809      	ldr	r0, [pc, #36]	; (80064b0 <SHTC3_get_hum+0xc8>)
 800648c:	f008 fd56 	bl	800ef3c <puts>
	return -1000.0;
 8006490:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80064b4 <SHTC3_get_hum+0xcc>
}
 8006494:	eef0 7a47 	vmov.f32	s15, s14
 8006498:	eeb0 0a67 	vmov.f32	s0, s15
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	200005cc 	.word	0x200005cc
 80064a8:	42c80000 	.word	0x42c80000
 80064ac:	477fff00 	.word	0x477fff00
 80064b0:	080122b8 	.word	0x080122b8
 80064b4:	c47a0000 	.word	0xc47a0000

080064b8 <BME280_check>:

uint8_t BME280_check()
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
	uint8_t value;
	TCA9543A_SelectChannel(1);
 80064be:	2001      	movs	r0, #1
 80064c0:	f7ff fd6c 	bl	8005f9c <TCA9543A_SelectChannel>
	HAL_Delay(1);
 80064c4:	2001      	movs	r0, #1
 80064c6:	f000 f957 	bl	8006778 <HAL_Delay>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, BMP280_I2C_ADDRESS_1 << 1, 3, 150);
 80064ca:	2396      	movs	r3, #150	; 0x96
 80064cc:	2203      	movs	r2, #3
 80064ce:	21ee      	movs	r1, #238	; 0xee
 80064d0:	4814      	ldr	r0, [pc, #80]	; (8006524 <BME280_check+0x6c>)
 80064d2:	f003 f9a3 	bl	800981c <HAL_I2C_IsDeviceReady>
 80064d6:	4603      	mov	r3, r0
 80064d8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80064da:	2064      	movs	r0, #100	; 0x64
 80064dc:	f000 f94c 	bl	8006778 <HAL_Delay>
	if (status == HAL_OK) {
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d115      	bne.n	8006512 <BME280_check+0x5a>
		i2c_read8(&hi2c2, BMP280_REG_ID, &value, BMP280_I2C_ADDRESS_1 << 1);
 80064e6:	1dba      	adds	r2, r7, #6
 80064e8:	23ee      	movs	r3, #238	; 0xee
 80064ea:	21d0      	movs	r1, #208	; 0xd0
 80064ec:	480d      	ldr	r0, [pc, #52]	; (8006524 <BME280_check+0x6c>)
 80064ee:	f7ff fc23 	bl	8005d38 <i2c_read8>
		TCA9543A_SelectChannel(0);
 80064f2:	2000      	movs	r0, #0
 80064f4:	f7ff fd52 	bl	8005f9c <TCA9543A_SelectChannel>
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 80064f8:	79bb      	ldrb	r3, [r7, #6]
 80064fa:	2b60      	cmp	r3, #96	; 0x60
 80064fc:	d104      	bne.n	8006508 <BME280_check+0x50>
 80064fe:	480a      	ldr	r0, [pc, #40]	; (8006528 <BME280_check+0x70>)
 8006500:	f008 fd1c 	bl	800ef3c <puts>
 8006504:	2301      	movs	r3, #1
 8006506:	e008      	b.n	800651a <BME280_check+0x62>
 8006508:	4808      	ldr	r0, [pc, #32]	; (800652c <BME280_check+0x74>)
 800650a:	f008 fd17 	bl	800ef3c <puts>
 800650e:	2300      	movs	r3, #0
 8006510:	e003      	b.n	800651a <BME280_check+0x62>
	} else {printf("BME280 FAILED\r\n"); return 0;}
 8006512:	4807      	ldr	r0, [pc, #28]	; (8006530 <BME280_check+0x78>)
 8006514:	f008 fd12 	bl	800ef3c <puts>
 8006518:	2300      	movs	r3, #0
	return 0;

}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200005cc 	.word	0x200005cc
 8006528:	080122c4 	.word	0x080122c4
 800652c:	080122d0 	.word	0x080122d0
 8006530:	080122dc 	.word	0x080122dc

08006534 <BME280_init_config>:

void BME280_init_config(uint8_t conf_mode, uint8_t ovr_temp, uint8_t ovr_press, uint8_t ovr_hum, uint8_t coeff)
{
 8006534:	b590      	push	{r4, r7, lr}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	4611      	mov	r1, r2
 8006540:	461a      	mov	r2, r3
 8006542:	4623      	mov	r3, r4
 8006544:	71fb      	strb	r3, [r7, #7]
 8006546:	4603      	mov	r3, r0
 8006548:	71bb      	strb	r3, [r7, #6]
 800654a:	460b      	mov	r3, r1
 800654c:	717b      	strb	r3, [r7, #5]
 800654e:	4613      	mov	r3, r2
 8006550:	713b      	strb	r3, [r7, #4]
	TCA9543A_SelectChannel(1);
 8006552:	2001      	movs	r0, #1
 8006554:	f7ff fd22 	bl	8005f9c <TCA9543A_SelectChannel>
	HAL_Delay(1);
 8006558:	2001      	movs	r0, #1
 800655a:	f000 f90d 	bl	8006778 <HAL_Delay>
//	bmp280_init_default_params(&bmp280.params);

	bmp280.params.filter = coeff;
 800655e:	4a1e      	ldr	r2, [pc, #120]	; (80065d8 <BME280_init_config+0xa4>)
 8006560:	7e3b      	ldrb	r3, [r7, #24]
 8006562:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
	bmp280.params.oversampling_pressure = ovr_press;
 8006566:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <BME280_init_config+0xa4>)
 8006568:	797b      	ldrb	r3, [r7, #5]
 800656a:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
	bmp280.params.oversampling_temperature = ovr_temp;
 800656e:	4a1a      	ldr	r2, [pc, #104]	; (80065d8 <BME280_init_config+0xa4>)
 8006570:	79bb      	ldrb	r3, [r7, #6]
 8006572:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	bmp280.params.oversampling_humidity = ovr_hum;
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <BME280_init_config+0xa4>)
 8006578:	793b      	ldrb	r3, [r7, #4]
 800657a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	bmp280.params.standby = BMP280_STANDBY_250;
 800657e:	4b16      	ldr	r3, [pc, #88]	; (80065d8 <BME280_init_config+0xa4>)
 8006580:	2203      	movs	r2, #3
 8006582:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8006586:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <BME280_init_config+0xa4>)
 8006588:	2277      	movs	r2, #119	; 0x77
 800658a:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 800658c:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <BME280_init_config+0xa4>)
 800658e:	4a13      	ldr	r2, [pc, #76]	; (80065dc <BME280_init_config+0xa8>)
 8006590:	629a      	str	r2, [r3, #40]	; 0x28

	switch (conf_mode)
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d002      	beq.n	800659e <BME280_init_config+0x6a>
 8006598:	2b02      	cmp	r3, #2
 800659a:	d005      	beq.n	80065a8 <BME280_init_config+0x74>
 800659c:	e009      	b.n	80065b2 <BME280_init_config+0x7e>
	{
	case 1:
		bmp280.params.mode = BMP280_MODE_FORCED;
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <BME280_init_config+0xa4>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 80065a6:	e008      	b.n	80065ba <BME280_init_config+0x86>
	case 2:
		bmp280.params.mode = BMP280_MODE_NORMAL;
 80065a8:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <BME280_init_config+0xa4>)
 80065aa:	2203      	movs	r2, #3
 80065ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		break;
 80065b0:	e003      	b.n	80065ba <BME280_init_config+0x86>
	default:
		bmp280.params.mode = BMP280_MODE_NORMAL;
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <BME280_init_config+0xa4>)
 80065b4:	2203      	movs	r2, #3
 80065b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	  }
	bmp280_init(&bmp280, &bmp280.params);
 80065ba:	4909      	ldr	r1, [pc, #36]	; (80065e0 <BME280_init_config+0xac>)
 80065bc:	4806      	ldr	r0, [pc, #24]	; (80065d8 <BME280_init_config+0xa4>)
 80065be:	f7fb fbb7 	bl	8001d30 <bmp280_init>
	HAL_Delay(1);
 80065c2:	2001      	movs	r0, #1
 80065c4:	f000 f8d8 	bl	8006778 <HAL_Delay>
	TCA9543A_SelectChannel(0);
 80065c8:	2000      	movs	r0, #0
 80065ca:	f7ff fce7 	bl	8005f9c <TCA9543A_SelectChannel>
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd90      	pop	{r4, r7, pc}
 80065d6:	bf00      	nop
 80065d8:	2000085c 	.word	0x2000085c
 80065dc:	200005cc 	.word	0x200005cc
 80065e0:	20000888 	.word	0x20000888

080065e4 <BME280_get_temp>:

float BME280_get_temp()
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
	TCA9543A_SelectChannel(1);
 80065ea:	2001      	movs	r0, #1
 80065ec:	f7ff fcd6 	bl	8005f9c <TCA9543A_SelectChannel>
	HAL_Delay(1);
 80065f0:	2001      	movs	r0, #1
 80065f2:	f000 f8c1 	bl	8006778 <HAL_Delay>
	float temp, press, hum;
	bmp280_force_measurement(&bmp280);
 80065f6:	4810      	ldr	r0, [pc, #64]	; (8006638 <BME280_get_temp+0x54>)
 80065f8:	f7fb fc47 	bl	8001e8a <bmp280_force_measurement>
	while(bmp280_is_measuring(&bmp280));
 80065fc:	bf00      	nop
 80065fe:	480e      	ldr	r0, [pc, #56]	; (8006638 <BME280_get_temp+0x54>)
 8006600:	f7fb fc6d 	bl	8001ede <bmp280_is_measuring>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f9      	bne.n	80065fe <BME280_get_temp+0x1a>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 800660a:	1d3b      	adds	r3, r7, #4
 800660c:	f107 0208 	add.w	r2, r7, #8
 8006610:	f107 010c 	add.w	r1, r7, #12
 8006614:	4808      	ldr	r0, [pc, #32]	; (8006638 <BME280_get_temp+0x54>)
 8006616:	f7fc f839 	bl	800268c <bmp280_read_float>
	HAL_Delay(1);
 800661a:	2001      	movs	r0, #1
 800661c:	f000 f8ac 	bl	8006778 <HAL_Delay>
	TCA9543A_SelectChannel(0);
 8006620:	2000      	movs	r0, #0
 8006622:	f7ff fcbb 	bl	8005f9c <TCA9543A_SelectChannel>
	return temp;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	ee07 3a90 	vmov	s15, r3
}
 800662c:	eeb0 0a67 	vmov.f32	s0, s15
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	2000085c 	.word	0x2000085c

0800663c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800663c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006674 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006640:	f7ff fa40 	bl	8005ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006644:	480c      	ldr	r0, [pc, #48]	; (8006678 <LoopForever+0x6>)
  ldr r1, =_edata
 8006646:	490d      	ldr	r1, [pc, #52]	; (800667c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006648:	4a0d      	ldr	r2, [pc, #52]	; (8006680 <LoopForever+0xe>)
  movs r3, #0
 800664a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800664c:	e002      	b.n	8006654 <LoopCopyDataInit>

0800664e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800664e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006652:	3304      	adds	r3, #4

08006654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006658:	d3f9      	bcc.n	800664e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800665a:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <LoopForever+0x12>)
  ldr r4, =_ebss
 800665c:	4c0a      	ldr	r4, [pc, #40]	; (8006688 <LoopForever+0x16>)
  movs r3, #0
 800665e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006660:	e001      	b.n	8006666 <LoopFillZerobss>

08006662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006664:	3204      	adds	r2, #4

08006666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006668:	d3fb      	bcc.n	8006662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800666a:	f008 fdb1 	bl	800f1d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800666e:	f7fd fbc7 	bl	8003e00 <main>

08006672 <LoopForever>:

LoopForever:
    b LoopForever
 8006672:	e7fe      	b.n	8006672 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006674:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800667c:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8006680:	0801278c 	.word	0x0801278c
  ldr r2, =_sbss
 8006684:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8006688:	20000a48 	.word	0x20000a48

0800668c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800668c:	e7fe      	b.n	800668c <ADC1_IRQHandler>

0800668e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006698:	2003      	movs	r0, #3
 800669a:	f001 fb1f 	bl	8007cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800669e:	200f      	movs	r0, #15
 80066a0:	f000 f80e 	bl	80066c0 <HAL_InitTick>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	71fb      	strb	r3, [r7, #7]
 80066ae:	e001      	b.n	80066b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80066b0:	f7fe fe5c 	bl	800536c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80066b4:	79fb      	ldrb	r3, [r7, #7]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80066cc:	4b17      	ldr	r3, [pc, #92]	; (800672c <HAL_InitTick+0x6c>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d023      	beq.n	800671c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80066d4:	4b16      	ldr	r3, [pc, #88]	; (8006730 <HAL_InitTick+0x70>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4b14      	ldr	r3, [pc, #80]	; (800672c <HAL_InitTick+0x6c>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	4619      	mov	r1, r3
 80066de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80066e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 fb2b 	bl	8007d46 <HAL_SYSTICK_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10f      	bne.n	8006716 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b0f      	cmp	r3, #15
 80066fa:	d809      	bhi.n	8006710 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066fc:	2200      	movs	r2, #0
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	f04f 30ff 	mov.w	r0, #4294967295
 8006704:	f001 faf5 	bl	8007cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006708:	4a0a      	ldr	r2, [pc, #40]	; (8006734 <HAL_InitTick+0x74>)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	e007      	b.n	8006720 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
 8006714:	e004      	b.n	8006720 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	73fb      	strb	r3, [r7, #15]
 800671a:	e001      	b.n	8006720 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000020 	.word	0x20000020
 8006730:	20000018 	.word	0x20000018
 8006734:	2000001c 	.word	0x2000001c

08006738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <HAL_IncTick+0x20>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <HAL_IncTick+0x24>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4413      	add	r3, r2
 8006748:	4a04      	ldr	r2, [pc, #16]	; (800675c <HAL_IncTick+0x24>)
 800674a:	6013      	str	r3, [r2, #0]
}
 800674c:	bf00      	nop
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20000020 	.word	0x20000020
 800675c:	200008f8 	.word	0x200008f8

08006760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return uwTick;
 8006764:	4b03      	ldr	r3, [pc, #12]	; (8006774 <HAL_GetTick+0x14>)
 8006766:	681b      	ldr	r3, [r3, #0]
}
 8006768:	4618      	mov	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	200008f8 	.word	0x200008f8

08006778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006780:	f7ff ffee 	bl	8006760 <HAL_GetTick>
 8006784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d005      	beq.n	800679e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006792:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <HAL_Delay+0x44>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800679e:	bf00      	nop
 80067a0:	f7ff ffde 	bl	8006760 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d8f7      	bhi.n	80067a0 <HAL_Delay+0x28>
  {
  }
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20000020 	.word	0x20000020

080067c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	609a      	str	r2, [r3, #8]
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3360      	adds	r3, #96	; 0x60
 800683a:	461a      	mov	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4b08      	ldr	r3, [pc, #32]	; (800686c <LL_ADC_SetOffset+0x44>)
 800684a:	4013      	ands	r3, r2
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	4313      	orrs	r3, r2
 8006858:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006860:	bf00      	nop
 8006862:	371c      	adds	r7, #28
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	03fff000 	.word	0x03fff000

08006870 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	3360      	adds	r3, #96	; 0x60
 800687e:	461a      	mov	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3360      	adds	r3, #96	; 0x60
 80068ac:	461a      	mov	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3330      	adds	r3, #48	; 0x30
 8006908:	461a      	mov	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	0a1b      	lsrs	r3, r3, #8
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	f003 030c 	and.w	r3, r3, #12
 8006914:	4413      	add	r3, r2
 8006916:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	211f      	movs	r1, #31
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	43db      	mvns	r3, r3
 800692a:	401a      	ands	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0e9b      	lsrs	r3, r3, #26
 8006930:	f003 011f 	and.w	r1, r3, #31
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	fa01 f303 	lsl.w	r3, r1, r3
 800693e:	431a      	orrs	r2, r3
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006944:	bf00      	nop
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3314      	adds	r3, #20
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	0e5b      	lsrs	r3, r3, #25
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	4413      	add	r3, r2
 800696e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	0d1b      	lsrs	r3, r3, #20
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	2107      	movs	r1, #7
 800697e:	fa01 f303 	lsl.w	r3, r1, r3
 8006982:	43db      	mvns	r3, r3
 8006984:	401a      	ands	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	0d1b      	lsrs	r3, r3, #20
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	431a      	orrs	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
	...

080069a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c0:	43db      	mvns	r3, r3
 80069c2:	401a      	ands	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f003 0318 	and.w	r3, r3, #24
 80069ca:	4908      	ldr	r1, [pc, #32]	; (80069ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80069cc:	40d9      	lsrs	r1, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	400b      	ands	r3, r1
 80069d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069d6:	431a      	orrs	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	0007ffff 	.word	0x0007ffff

080069f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006a00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6093      	str	r3, [r2, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a28:	d101      	bne.n	8006a2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e000      	b.n	8006a30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006a4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a78:	d101      	bne.n	8006a7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006aa0:	f043 0201 	orr.w	r2, r3, #1
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ac8:	f043 0202 	orr.w	r2, r3, #2
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <LL_ADC_IsEnabled+0x18>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <LL_ADC_IsEnabled+0x1a>
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d101      	bne.n	8006b1a <LL_ADC_IsDisableOngoing+0x18>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <LL_ADC_IsDisableOngoing+0x1a>
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b3c:	f043 0204 	orr.w	r2, r3, #4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d101      	bne.n	8006b68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d101      	bne.n	8006b8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e12c      	b.n	8006e10 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fe fbf7 	bl	80053b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ff19 	bl	8006a14 <LL_ADC_IsDeepPowerDownEnabled>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff feff 	bl	80069f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff ff34 	bl	8006a64 <LL_ADC_IsInternalRegulatorEnabled>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d115      	bne.n	8006c2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff ff18 	bl	8006a3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c0c:	4b82      	ldr	r3, [pc, #520]	; (8006e18 <HAL_ADC_Init+0x27c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	099b      	lsrs	r3, r3, #6
 8006c12:	4a82      	ldr	r2, [pc, #520]	; (8006e1c <HAL_ADC_Init+0x280>)
 8006c14:	fba2 2303 	umull	r2, r3, r2, r3
 8006c18:	099b      	lsrs	r3, r3, #6
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c20:	e002      	b.n	8006c28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f9      	bne.n	8006c22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7ff ff16 	bl	8006a64 <LL_ADC_IsInternalRegulatorEnabled>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10d      	bne.n	8006c5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c42:	f043 0210 	orr.w	r2, r3, #16
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4e:	f043 0201 	orr.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff ff76 	bl	8006b50 <LL_ADC_REG_IsConversionOngoing>
 8006c64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f040 80c5 	bne.w	8006dfe <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f040 80c1 	bne.w	8006dfe <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006c84:	f043 0202 	orr.w	r2, r3, #2
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff ff23 	bl	8006adc <LL_ADC_IsEnabled>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10b      	bne.n	8006cb4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c9c:	4860      	ldr	r0, [pc, #384]	; (8006e20 <HAL_ADC_Init+0x284>)
 8006c9e:	f7ff ff1d 	bl	8006adc <LL_ADC_IsEnabled>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	4619      	mov	r1, r3
 8006cae:	485d      	ldr	r0, [pc, #372]	; (8006e24 <HAL_ADC_Init+0x288>)
 8006cb0:	f7ff fd86 	bl	80067c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	7e5b      	ldrb	r3, [r3, #25]
 8006cb8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006cbe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006cc4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006cca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cd2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d106      	bne.n	8006cf0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	045b      	lsls	r3, r3, #17
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d009      	beq.n	8006d0c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d04:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	4b45      	ldr	r3, [pc, #276]	; (8006e28 <HAL_ADC_Init+0x28c>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	69b9      	ldr	r1, [r7, #24]
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff ff13 	bl	8006b50 <LL_ADC_REG_IsConversionOngoing>
 8006d2a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff ff20 	bl	8006b76 <LL_ADC_INJ_IsConversionOngoing>
 8006d36:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d13d      	bne.n	8006dba <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d13a      	bne.n	8006dba <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006d48:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d50:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006d52:	4313      	orrs	r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d60:	f023 0302 	bic.w	r3, r3, #2
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	69b9      	ldr	r1, [r7, #24]
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d118      	bne.n	8006daa <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d82:	f023 0304 	bic.w	r3, r3, #4
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d8e:	4311      	orrs	r1, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006d94:	4311      	orrs	r1, r2
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	611a      	str	r2, [r3, #16]
 8006da8:	e007      	b.n	8006dba <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d10c      	bne.n	8006ddc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc8:	f023 010f 	bic.w	r1, r3, #15
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	1e5a      	subs	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8006dda:	e007      	b.n	8006dec <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 020f 	bic.w	r2, r2, #15
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	f023 0303 	bic.w	r3, r3, #3
 8006df4:	f043 0201 	orr.w	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	655a      	str	r2, [r3, #84]	; 0x54
 8006dfc:	e007      	b.n	8006e0e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	f043 0210 	orr.w	r2, r3, #16
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20000018 	.word	0x20000018
 8006e1c:	053e2d63 	.word	0x053e2d63
 8006e20:	50040000 	.word	0x50040000
 8006e24:	50040300 	.word	0x50040300
 8006e28:	fff0c007 	.word	0xfff0c007

08006e2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fe87 	bl	8006b50 <LL_ADC_REG_IsConversionOngoing>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d167      	bne.n	8006f18 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_ADC_Start_DMA+0x2a>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e063      	b.n	8006f1e <HAL_ADC_Start_DMA+0xf2>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fc66 	bl	8007730 <ADC_Enable>
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d14f      	bne.n	8006f0e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e76:	f023 0301 	bic.w	r3, r3, #1
 8006e7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d006      	beq.n	8006e9c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e92:	f023 0206 	bic.w	r2, r3, #6
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	659a      	str	r2, [r3, #88]	; 0x58
 8006e9a:	e002      	b.n	8006ea2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea6:	4a20      	ldr	r2, [pc, #128]	; (8006f28 <HAL_ADC_Start_DMA+0xfc>)
 8006ea8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eae:	4a1f      	ldr	r2, [pc, #124]	; (8006f2c <HAL_ADC_Start_DMA+0x100>)
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <HAL_ADC_Start_DMA+0x104>)
 8006eb8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	221c      	movs	r2, #28
 8006ec0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0210 	orr.w	r2, r2, #16
 8006ed8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0201 	orr.w	r2, r2, #1
 8006ee8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3340      	adds	r3, #64	; 0x40
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f001 f9ed 	bl	80082d8 <HAL_DMA_Start_IT>
 8006efe:	4603      	mov	r3, r0
 8006f00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff fe0e 	bl	8006b28 <LL_ADC_REG_StartConversion>
 8006f0c:	e006      	b.n	8006f1c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006f16:	e001      	b.n	8006f1c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	080078fb 	.word	0x080078fb
 8006f2c:	080079d3 	.word	0x080079d3
 8006f30:	080079ef 	.word	0x080079ef

08006f34 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b0b6      	sub	sp, #216	; 0xd8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_ADC_ConfigChannel+0x22>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e3b9      	b.n	8007706 <HAL_ADC_ConfigChannel+0x796>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fdd6 	bl	8006b50 <LL_ADC_REG_IsConversionOngoing>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f040 839e 	bne.w	80076e8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b05      	cmp	r3, #5
 8006fb2:	d824      	bhi.n	8006ffe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	3b02      	subs	r3, #2
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d81b      	bhi.n	8006ff6 <HAL_ADC_ConfigChannel+0x86>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <HAL_ADC_ConfigChannel+0x54>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fd5 	.word	0x08006fd5
 8006fc8:	08006fdd 	.word	0x08006fdd
 8006fcc:	08006fe5 	.word	0x08006fe5
 8006fd0:	08006fed 	.word	0x08006fed
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	220c      	movs	r2, #12
 8006fd8:	605a      	str	r2, [r3, #4]
          break;
 8006fda:	e010      	b.n	8006ffe <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2212      	movs	r2, #18
 8006fe0:	605a      	str	r2, [r3, #4]
          break;
 8006fe2:	e00c      	b.n	8006ffe <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2218      	movs	r2, #24
 8006fe8:	605a      	str	r2, [r3, #4]
          break;
 8006fea:	e008      	b.n	8006ffe <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ff2:	605a      	str	r2, [r3, #4]
          break;
 8006ff4:	e003      	b.n	8006ffe <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2206      	movs	r2, #6
 8006ffa:	605a      	str	r2, [r3, #4]
          break;
 8006ffc:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6859      	ldr	r1, [r3, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	f7ff fc74 	bl	80068f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fd9b 	bl	8006b50 <LL_ADC_REG_IsConversionOngoing>
 800701a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff fda7 	bl	8006b76 <LL_ADC_INJ_IsConversionOngoing>
 8007028:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800702c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007030:	2b00      	cmp	r3, #0
 8007032:	f040 81a6 	bne.w	8007382 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800703a:	2b00      	cmp	r3, #0
 800703c:	f040 81a1 	bne.w	8007382 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	6819      	ldr	r1, [r3, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	461a      	mov	r2, r3
 800704e:	f7ff fc7f 	bl	8006950 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	695a      	ldr	r2, [r3, #20]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b04      	cmp	r3, #4
 8007072:	d00a      	beq.n	800708a <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	6919      	ldr	r1, [r3, #16]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007084:	f7ff fbd0 	bl	8006828 <LL_ADC_SetOffset>
 8007088:	e17b      	b.n	8007382 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2100      	movs	r1, #0
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fbed 	bl	8006870 <LL_ADC_GetOffsetChannel>
 8007096:	4603      	mov	r3, r0
 8007098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10a      	bne.n	80070b6 <HAL_ADC_ConfigChannel+0x146>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2100      	movs	r1, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff fbe2 	bl	8006870 <LL_ADC_GetOffsetChannel>
 80070ac:	4603      	mov	r3, r0
 80070ae:	0e9b      	lsrs	r3, r3, #26
 80070b0:	f003 021f 	and.w	r2, r3, #31
 80070b4:	e01e      	b.n	80070f4 <HAL_ADC_ConfigChannel+0x184>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2100      	movs	r1, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	f7ff fbd7 	bl	8006870 <LL_ADC_GetOffsetChannel>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070cc:	fa93 f3a3 	rbit	r3, r3
 80070d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80070d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80070dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 80070e4:	2320      	movs	r3, #32
 80070e6:	e004      	b.n	80070f2 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 80070e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070ec:	fab3 f383 	clz	r3, r3
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d105      	bne.n	800710c <HAL_ADC_ConfigChannel+0x19c>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	0e9b      	lsrs	r3, r3, #26
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	e018      	b.n	800713e <HAL_ADC_ConfigChannel+0x1ce>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007114:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007118:	fa93 f3a3 	rbit	r3, r3
 800711c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8007120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8007130:	2320      	movs	r3, #32
 8007132:	e004      	b.n	800713e <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8007134:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007138:	fab3 f383 	clz	r3, r3
 800713c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800713e:	429a      	cmp	r2, r3
 8007140:	d106      	bne.n	8007150 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff fba6 	bl	800689c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2101      	movs	r1, #1
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fb8a 	bl	8006870 <LL_ADC_GetOffsetChannel>
 800715c:	4603      	mov	r3, r0
 800715e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <HAL_ADC_ConfigChannel+0x20c>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2101      	movs	r1, #1
 800716c:	4618      	mov	r0, r3
 800716e:	f7ff fb7f 	bl	8006870 <LL_ADC_GetOffsetChannel>
 8007172:	4603      	mov	r3, r0
 8007174:	0e9b      	lsrs	r3, r3, #26
 8007176:	f003 021f 	and.w	r2, r3, #31
 800717a:	e01e      	b.n	80071ba <HAL_ADC_ConfigChannel+0x24a>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2101      	movs	r1, #1
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff fb74 	bl	8006870 <LL_ADC_GetOffsetChannel>
 8007188:	4603      	mov	r3, r0
 800718a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007192:	fa93 f3a3 	rbit	r3, r3
 8007196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800719a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800719e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80071a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 80071aa:	2320      	movs	r3, #32
 80071ac:	e004      	b.n	80071b8 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 80071ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80071b2:	fab3 f383 	clz	r3, r3
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d105      	bne.n	80071d2 <HAL_ADC_ConfigChannel+0x262>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	0e9b      	lsrs	r3, r3, #26
 80071cc:	f003 031f 	and.w	r3, r3, #31
 80071d0:	e018      	b.n	8007204 <HAL_ADC_ConfigChannel+0x294>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071de:	fa93 f3a3 	rbit	r3, r3
 80071e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80071e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80071ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 80071f6:	2320      	movs	r3, #32
 80071f8:	e004      	b.n	8007204 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80071fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071fe:	fab3 f383 	clz	r3, r3
 8007202:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007204:	429a      	cmp	r2, r3
 8007206:	d106      	bne.n	8007216 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2200      	movs	r2, #0
 800720e:	2101      	movs	r1, #1
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fb43 	bl	800689c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2102      	movs	r1, #2
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fb27 	bl	8006870 <LL_ADC_GetOffsetChannel>
 8007222:	4603      	mov	r3, r0
 8007224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <HAL_ADC_ConfigChannel+0x2d2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2102      	movs	r1, #2
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fb1c 	bl	8006870 <LL_ADC_GetOffsetChannel>
 8007238:	4603      	mov	r3, r0
 800723a:	0e9b      	lsrs	r3, r3, #26
 800723c:	f003 021f 	and.w	r2, r3, #31
 8007240:	e01e      	b.n	8007280 <HAL_ADC_ConfigChannel+0x310>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2102      	movs	r1, #2
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fb11 	bl	8006870 <LL_ADC_GetOffsetChannel>
 800724e:	4603      	mov	r3, r0
 8007250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007258:	fa93 f3a3 	rbit	r3, r3
 800725c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8007260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8007270:	2320      	movs	r3, #32
 8007272:	e004      	b.n	800727e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8007274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007278:	fab3 f383 	clz	r3, r3
 800727c:	b2db      	uxtb	r3, r3
 800727e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <HAL_ADC_ConfigChannel+0x328>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	0e9b      	lsrs	r3, r3, #26
 8007292:	f003 031f 	and.w	r3, r3, #31
 8007296:	e016      	b.n	80072c6 <HAL_ADC_ConfigChannel+0x356>
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072a4:	fa93 f3a3 	rbit	r3, r3
 80072a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80072aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80072b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 80072b8:	2320      	movs	r3, #32
 80072ba:	e004      	b.n	80072c6 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 80072bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072c0:	fab3 f383 	clz	r3, r3
 80072c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d106      	bne.n	80072d8 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2102      	movs	r1, #2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7ff fae2 	bl	800689c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2103      	movs	r1, #3
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff fac6 	bl	8006870 <LL_ADC_GetOffsetChannel>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10a      	bne.n	8007304 <HAL_ADC_ConfigChannel+0x394>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2103      	movs	r1, #3
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fabb 	bl	8006870 <LL_ADC_GetOffsetChannel>
 80072fa:	4603      	mov	r3, r0
 80072fc:	0e9b      	lsrs	r3, r3, #26
 80072fe:	f003 021f 	and.w	r2, r3, #31
 8007302:	e017      	b.n	8007334 <HAL_ADC_ConfigChannel+0x3c4>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2103      	movs	r1, #3
 800730a:	4618      	mov	r0, r3
 800730c:	f7ff fab0 	bl	8006870 <LL_ADC_GetOffsetChannel>
 8007310:	4603      	mov	r3, r0
 8007312:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007316:	fa93 f3a3 	rbit	r3, r3
 800731a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800731c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800731e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8007326:	2320      	movs	r3, #32
 8007328:	e003      	b.n	8007332 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 800732a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800732c:	fab3 f383 	clz	r3, r3
 8007330:	b2db      	uxtb	r3, r3
 8007332:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733c:	2b00      	cmp	r3, #0
 800733e:	d105      	bne.n	800734c <HAL_ADC_ConfigChannel+0x3dc>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	0e9b      	lsrs	r3, r3, #26
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	e011      	b.n	8007370 <HAL_ADC_ConfigChannel+0x400>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007354:	fa93 f3a3 	rbit	r3, r3
 8007358:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800735a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800735c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8007364:	2320      	movs	r3, #32
 8007366:	e003      	b.n	8007370 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8007368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800736a:	fab3 f383 	clz	r3, r3
 800736e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007370:	429a      	cmp	r2, r3
 8007372:	d106      	bne.n	8007382 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2200      	movs	r2, #0
 800737a:	2103      	movs	r1, #3
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fa8d 	bl	800689c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff fba8 	bl	8006adc <LL_ADC_IsEnabled>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	f040 8140 	bne.w	8007614 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	6819      	ldr	r1, [r3, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f7ff fb01 	bl	80069a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	4a8f      	ldr	r2, [pc, #572]	; (80075e8 <HAL_ADC_ConfigChannel+0x678>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	f040 8131 	bne.w	8007614 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <HAL_ADC_ConfigChannel+0x46a>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	0e9b      	lsrs	r3, r3, #26
 80073c8:	3301      	adds	r3, #1
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	bf94      	ite	ls
 80073d2:	2301      	movls	r3, #1
 80073d4:	2300      	movhi	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	e019      	b.n	800740e <HAL_ADC_ConfigChannel+0x49e>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e2:	fa93 f3a3 	rbit	r3, r3
 80073e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80073e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80073ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 80073f2:	2320      	movs	r3, #32
 80073f4:	e003      	b.n	80073fe <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80073f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f8:	fab3 f383 	clz	r3, r3
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	3301      	adds	r3, #1
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	2b09      	cmp	r3, #9
 8007406:	bf94      	ite	ls
 8007408:	2301      	movls	r3, #1
 800740a:	2300      	movhi	r3, #0
 800740c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800740e:	2b00      	cmp	r3, #0
 8007410:	d079      	beq.n	8007506 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800741a:	2b00      	cmp	r3, #0
 800741c:	d107      	bne.n	800742e <HAL_ADC_ConfigChannel+0x4be>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	0e9b      	lsrs	r3, r3, #26
 8007424:	3301      	adds	r3, #1
 8007426:	069b      	lsls	r3, r3, #26
 8007428:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800742c:	e015      	b.n	800745a <HAL_ADC_ConfigChannel+0x4ea>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007436:	fa93 f3a3 	rbit	r3, r3
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800743c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800743e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8007446:	2320      	movs	r3, #32
 8007448:	e003      	b.n	8007452 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800744a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800744c:	fab3 f383 	clz	r3, r3
 8007450:	b2db      	uxtb	r3, r3
 8007452:	3301      	adds	r3, #1
 8007454:	069b      	lsls	r3, r3, #26
 8007456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <HAL_ADC_ConfigChannel+0x50a>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	0e9b      	lsrs	r3, r3, #26
 800746c:	3301      	adds	r3, #1
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2101      	movs	r1, #1
 8007474:	fa01 f303 	lsl.w	r3, r1, r3
 8007478:	e017      	b.n	80074aa <HAL_ADC_ConfigChannel+0x53a>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007482:	fa93 f3a3 	rbit	r3, r3
 8007486:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800748c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8007492:	2320      	movs	r3, #32
 8007494:	e003      	b.n	800749e <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8007496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007498:	fab3 f383 	clz	r3, r3
 800749c:	b2db      	uxtb	r3, r3
 800749e:	3301      	adds	r3, #1
 80074a0:	f003 031f 	and.w	r3, r3, #31
 80074a4:	2101      	movs	r1, #1
 80074a6:	fa01 f303 	lsl.w	r3, r1, r3
 80074aa:	ea42 0103 	orr.w	r1, r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x560>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	0e9b      	lsrs	r3, r3, #26
 80074c0:	3301      	adds	r3, #1
 80074c2:	f003 021f 	and.w	r2, r3, #31
 80074c6:	4613      	mov	r3, r2
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	4413      	add	r3, r2
 80074cc:	051b      	lsls	r3, r3, #20
 80074ce:	e018      	b.n	8007502 <HAL_ADC_ConfigChannel+0x592>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	fa93 f3a3 	rbit	r3, r3
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80074e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80074e8:	2320      	movs	r3, #32
 80074ea:	e003      	b.n	80074f4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80074ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ee:	fab3 f383 	clz	r3, r3
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	3301      	adds	r3, #1
 80074f6:	f003 021f 	and.w	r2, r3, #31
 80074fa:	4613      	mov	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007502:	430b      	orrs	r3, r1
 8007504:	e081      	b.n	800760a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800750e:	2b00      	cmp	r3, #0
 8007510:	d107      	bne.n	8007522 <HAL_ADC_ConfigChannel+0x5b2>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	0e9b      	lsrs	r3, r3, #26
 8007518:	3301      	adds	r3, #1
 800751a:	069b      	lsls	r3, r3, #26
 800751c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007520:	e015      	b.n	800754e <HAL_ADC_ConfigChannel+0x5de>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	fa93 f3a3 	rbit	r3, r3
 800752e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 800753a:	2320      	movs	r3, #32
 800753c:	e003      	b.n	8007546 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	fab3 f383 	clz	r3, r3
 8007544:	b2db      	uxtb	r3, r3
 8007546:	3301      	adds	r3, #1
 8007548:	069b      	lsls	r3, r3, #26
 800754a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <HAL_ADC_ConfigChannel+0x5fe>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	0e9b      	lsrs	r3, r3, #26
 8007560:	3301      	adds	r3, #1
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2101      	movs	r1, #1
 8007568:	fa01 f303 	lsl.w	r3, r1, r3
 800756c:	e017      	b.n	800759e <HAL_ADC_ConfigChannel+0x62e>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	fa93 f3a3 	rbit	r3, r3
 800757a:	61fb      	str	r3, [r7, #28]
  return result;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8007586:	2320      	movs	r3, #32
 8007588:	e003      	b.n	8007592 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	fab3 f383 	clz	r3, r3
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3301      	adds	r3, #1
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	2101      	movs	r1, #1
 800759a:	fa01 f303 	lsl.w	r3, r1, r3
 800759e:	ea42 0103 	orr.w	r1, r2, r3
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <HAL_ADC_ConfigChannel+0x65a>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	0e9b      	lsrs	r3, r3, #26
 80075b4:	3301      	adds	r3, #1
 80075b6:	f003 021f 	and.w	r2, r3, #31
 80075ba:	4613      	mov	r3, r2
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	4413      	add	r3, r2
 80075c0:	3b1e      	subs	r3, #30
 80075c2:	051b      	lsls	r3, r3, #20
 80075c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075c8:	e01e      	b.n	8007608 <HAL_ADC_ConfigChannel+0x698>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	fa93 f3a3 	rbit	r3, r3
 80075d6:	613b      	str	r3, [r7, #16]
  return result;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d104      	bne.n	80075ec <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80075e2:	2320      	movs	r3, #32
 80075e4:	e006      	b.n	80075f4 <HAL_ADC_ConfigChannel+0x684>
 80075e6:	bf00      	nop
 80075e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	fab3 f383 	clz	r3, r3
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	3301      	adds	r3, #1
 80075f6:	f003 021f 	and.w	r2, r3, #31
 80075fa:	4613      	mov	r3, r2
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4413      	add	r3, r2
 8007600:	3b1e      	subs	r3, #30
 8007602:	051b      	lsls	r3, r3, #20
 8007604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007608:	430b      	orrs	r3, r1
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	6892      	ldr	r2, [r2, #8]
 800760e:	4619      	mov	r1, r3
 8007610:	f7ff f99e 	bl	8006950 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	4b3d      	ldr	r3, [pc, #244]	; (8007710 <HAL_ADC_ConfigChannel+0x7a0>)
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d06c      	beq.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007620:	483c      	ldr	r0, [pc, #240]	; (8007714 <HAL_ADC_ConfigChannel+0x7a4>)
 8007622:	f7ff f8f3 	bl	800680c <LL_ADC_GetCommonPathInternalCh>
 8007626:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3a      	ldr	r2, [pc, #232]	; (8007718 <HAL_ADC_ConfigChannel+0x7a8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d127      	bne.n	8007684 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d121      	bne.n	8007684 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a35      	ldr	r2, [pc, #212]	; (800771c <HAL_ADC_ConfigChannel+0x7ac>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d157      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800764a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800764e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007652:	4619      	mov	r1, r3
 8007654:	482f      	ldr	r0, [pc, #188]	; (8007714 <HAL_ADC_ConfigChannel+0x7a4>)
 8007656:	f7ff f8c6 	bl	80067e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800765a:	4b31      	ldr	r3, [pc, #196]	; (8007720 <HAL_ADC_ConfigChannel+0x7b0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	099b      	lsrs	r3, r3, #6
 8007660:	4a30      	ldr	r2, [pc, #192]	; (8007724 <HAL_ADC_ConfigChannel+0x7b4>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	099b      	lsrs	r3, r3, #6
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	4613      	mov	r3, r2
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007674:	e002      	b.n	800767c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3b01      	subs	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f9      	bne.n	8007676 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007682:	e03a      	b.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a27      	ldr	r2, [pc, #156]	; (8007728 <HAL_ADC_ConfigChannel+0x7b8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d113      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x746>
 800768e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10d      	bne.n	80076b6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1f      	ldr	r2, [pc, #124]	; (800771c <HAL_ADC_ConfigChannel+0x7ac>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d12a      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076ac:	4619      	mov	r1, r3
 80076ae:	4819      	ldr	r0, [pc, #100]	; (8007714 <HAL_ADC_ConfigChannel+0x7a4>)
 80076b0:	f7ff f899 	bl	80067e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076b4:	e021      	b.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a1c      	ldr	r2, [pc, #112]	; (800772c <HAL_ADC_ConfigChannel+0x7bc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d11c      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d116      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a12      	ldr	r2, [pc, #72]	; (800771c <HAL_ADC_ConfigChannel+0x7ac>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d111      	bne.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80076da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076de:	4619      	mov	r1, r3
 80076e0:	480c      	ldr	r0, [pc, #48]	; (8007714 <HAL_ADC_ConfigChannel+0x7a4>)
 80076e2:	f7ff f880 	bl	80067e6 <LL_ADC_SetCommonPathInternalCh>
 80076e6:	e008      	b.n	80076fa <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007702:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8007706:	4618      	mov	r0, r3
 8007708:	37d8      	adds	r7, #216	; 0xd8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	80080000 	.word	0x80080000
 8007714:	50040300 	.word	0x50040300
 8007718:	c7520000 	.word	0xc7520000
 800771c:	50040000 	.word	0x50040000
 8007720:	20000018 	.word	0x20000018
 8007724:	053e2d63 	.word	0x053e2d63
 8007728:	cb840000 	.word	0xcb840000
 800772c:	80000001 	.word	0x80000001

08007730 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007738:	2300      	movs	r3, #0
 800773a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff f9cb 	bl	8006adc <LL_ADC_IsEnabled>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d169      	bne.n	8007820 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4b36      	ldr	r3, [pc, #216]	; (800782c <ADC_Enable+0xfc>)
 8007754:	4013      	ands	r3, r2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00d      	beq.n	8007776 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f043 0210 	orr.w	r2, r3, #16
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776a:	f043 0201 	orr.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e055      	b.n	8007822 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff f986 	bl	8006a8c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007780:	482b      	ldr	r0, [pc, #172]	; (8007830 <ADC_Enable+0x100>)
 8007782:	f7ff f843 	bl	800680c <LL_ADC_GetCommonPathInternalCh>
 8007786:	4603      	mov	r3, r0
 8007788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d013      	beq.n	80077b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007790:	4b28      	ldr	r3, [pc, #160]	; (8007834 <ADC_Enable+0x104>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	099b      	lsrs	r3, r3, #6
 8007796:	4a28      	ldr	r2, [pc, #160]	; (8007838 <ADC_Enable+0x108>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	099b      	lsrs	r3, r3, #6
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	4613      	mov	r3, r2
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80077aa:	e002      	b.n	80077b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1f9      	bne.n	80077ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80077b8:	f7fe ffd2 	bl	8006760 <HAL_GetTick>
 80077bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077be:	e028      	b.n	8007812 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff f989 	bl	8006adc <LL_ADC_IsEnabled>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d104      	bne.n	80077da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff f959 	bl	8006a8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80077da:	f7fe ffc1 	bl	8006760 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d914      	bls.n	8007812 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d00d      	beq.n	8007812 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	f043 0210 	orr.w	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007806:	f043 0201 	orr.w	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e007      	b.n	8007822 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b01      	cmp	r3, #1
 800781e:	d1cf      	bne.n	80077c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	8000003f 	.word	0x8000003f
 8007830:	50040300 	.word	0x50040300
 8007834:	20000018 	.word	0x20000018
 8007838:	053e2d63 	.word	0x053e2d63

0800783c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff f95a 	bl	8006b02 <LL_ADC_IsDisableOngoing>
 800784e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff f941 	bl	8006adc <LL_ADC_IsEnabled>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d047      	beq.n	80078f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d144      	bne.n	80078f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 030d 	and.w	r3, r3, #13
 8007870:	2b01      	cmp	r3, #1
 8007872:	d10c      	bne.n	800788e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff f91b 	bl	8006ab4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2203      	movs	r2, #3
 8007884:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007886:	f7fe ff6b 	bl	8006760 <HAL_GetTick>
 800788a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800788c:	e029      	b.n	80078e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	f043 0210 	orr.w	r2, r3, #16
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789e:	f043 0201 	orr.w	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e023      	b.n	80078f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80078aa:	f7fe ff59 	bl	8006760 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d914      	bls.n	80078e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00d      	beq.n	80078e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ca:	f043 0210 	orr.w	r2, r3, #16
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d6:	f043 0201 	orr.w	r2, r3, #1
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e007      	b.n	80078f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1dc      	bne.n	80078aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007910:	2b00      	cmp	r3, #0
 8007912:	d14b      	bne.n	80079ac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d021      	beq.n	8007972 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe ffcd 	bl	80068d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d032      	beq.n	80079a4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d12b      	bne.n	80079a4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d11f      	bne.n	80079a4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007968:	f043 0201 	orr.w	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	655a      	str	r2, [r3, #84]	; 0x54
 8007970:	e018      	b.n	80079a4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d111      	bne.n	80079a4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007984:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d105      	bne.n	80079a4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799c:	f043 0201 	orr.w	r2, r3, #1
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff fac5 	bl	8006f34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80079aa:	e00e      	b.n	80079ca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	f003 0310 	and.w	r3, r3, #16
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f7ff facf 	bl	8006f5c <HAL_ADC_ErrorCallback>
}
 80079be:	e004      	b.n	80079ca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
}
 80079ca:	bf00      	nop
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7ff fab1 	bl	8006f48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80079e6:	bf00      	nop
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0c:	f043 0204 	orr.w	r2, r3, #4
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7ff faa1 	bl	8006f5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <LL_ADC_StartCalibration>:
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007a34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	609a      	str	r2, [r3, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <LL_ADC_IsCalibrationOnGoing>:
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a68:	d101      	bne.n	8007a6e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <HAL_ADCEx_Calibration_Start+0x1c>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e04d      	b.n	8007b34 <HAL_ADCEx_Calibration_Start+0xb8>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7ff fecb 	bl	800783c <ADC_Disable>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d136      	bne.n	8007b1e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007ab8:	f023 0302 	bic.w	r3, r3, #2
 8007abc:	f043 0202 	orr.w	r2, r3, #2
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7ff ffa9 	bl	8007a22 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007ad0:	e014      	b.n	8007afc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8007ade:	d30d      	bcc.n	8007afc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae4:	f023 0312 	bic.w	r3, r3, #18
 8007ae8:	f043 0210 	orr.w	r2, r3, #16
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e01b      	b.n	8007b34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff ffa7 	bl	8007a54 <LL_ADC_IsCalibrationOnGoing>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e2      	bne.n	8007ad2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b10:	f023 0303 	bic.w	r3, r3, #3
 8007b14:	f043 0201 	orr.w	r2, r3, #1
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	655a      	str	r2, [r3, #84]	; 0x54
 8007b1c:	e005      	b.n	8007b2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	f043 0210 	orr.w	r2, r3, #16
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b4c:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <__NVIC_SetPriorityGrouping+0x44>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b58:	4013      	ands	r3, r2
 8007b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b6e:	4a04      	ldr	r2, [pc, #16]	; (8007b80 <__NVIC_SetPriorityGrouping+0x44>)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	60d3      	str	r3, [r2, #12]
}
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	e000ed00 	.word	0xe000ed00

08007b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <__NVIC_GetPriorityGrouping+0x18>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	0a1b      	lsrs	r3, r3, #8
 8007b8e:	f003 0307 	and.w	r3, r3, #7
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	e000ed00 	.word	0xe000ed00

08007ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	db0b      	blt.n	8007bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	f003 021f 	and.w	r2, r3, #31
 8007bb8:	4907      	ldr	r1, [pc, #28]	; (8007bd8 <__NVIC_EnableIRQ+0x38>)
 8007bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8007bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	e000e100 	.word	0xe000e100

08007bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db0a      	blt.n	8007c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	490c      	ldr	r1, [pc, #48]	; (8007c28 <__NVIC_SetPriority+0x4c>)
 8007bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfa:	0112      	lsls	r2, r2, #4
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	440b      	add	r3, r1
 8007c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c04:	e00a      	b.n	8007c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	4908      	ldr	r1, [pc, #32]	; (8007c2c <__NVIC_SetPriority+0x50>)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	3b04      	subs	r3, #4
 8007c14:	0112      	lsls	r2, r2, #4
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	440b      	add	r3, r1
 8007c1a:	761a      	strb	r2, [r3, #24]
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	e000e100 	.word	0xe000e100
 8007c2c:	e000ed00 	.word	0xe000ed00

08007c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b089      	sub	sp, #36	; 0x24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f1c3 0307 	rsb	r3, r3, #7
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	bf28      	it	cs
 8007c4e:	2304      	movcs	r3, #4
 8007c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	3304      	adds	r3, #4
 8007c56:	2b06      	cmp	r3, #6
 8007c58:	d902      	bls.n	8007c60 <NVIC_EncodePriority+0x30>
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3b03      	subs	r3, #3
 8007c5e:	e000      	b.n	8007c62 <NVIC_EncodePriority+0x32>
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	43da      	mvns	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	401a      	ands	r2, r3
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c78:	f04f 31ff 	mov.w	r1, #4294967295
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	43d9      	mvns	r1, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c88:	4313      	orrs	r3, r2
         );
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3724      	adds	r7, #36	; 0x24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ca8:	d301      	bcc.n	8007cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007caa:	2301      	movs	r3, #1
 8007cac:	e00f      	b.n	8007cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cae:	4a0a      	ldr	r2, [pc, #40]	; (8007cd8 <SysTick_Config+0x40>)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cb6:	210f      	movs	r1, #15
 8007cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbc:	f7ff ff8e 	bl	8007bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <SysTick_Config+0x40>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cc6:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <SysTick_Config+0x40>)
 8007cc8:	2207      	movs	r2, #7
 8007cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	e000e010 	.word	0xe000e010

08007cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff ff29 	bl	8007b3c <__NVIC_SetPriorityGrouping>
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b086      	sub	sp, #24
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
 8007cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007d00:	2300      	movs	r3, #0
 8007d02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d04:	f7ff ff3e 	bl	8007b84 <__NVIC_GetPriorityGrouping>
 8007d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	68b9      	ldr	r1, [r7, #8]
 8007d0e:	6978      	ldr	r0, [r7, #20]
 8007d10:	f7ff ff8e 	bl	8007c30 <NVIC_EncodePriority>
 8007d14:	4602      	mov	r2, r0
 8007d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff ff5d 	bl	8007bdc <__NVIC_SetPriority>
}
 8007d22:	bf00      	nop
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	4603      	mov	r3, r0
 8007d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff ff31 	bl	8007ba0 <__NVIC_EnableIRQ>
}
 8007d3e:	bf00      	nop
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff ffa2 	bl	8007c98 <SysTick_Config>
 8007d54:	4603      	mov	r3, r0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007d62:	f7fd fec1 	bl	8005ae8 <HAL_SYSTICK_Callback>
}
 8007d66:	bf00      	nop
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e054      	b.n	8007e28 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	7f5b      	ldrb	r3, [r3, #29]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7fd fb84 	bl	800549c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	791b      	ldrb	r3, [r3, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10c      	bne.n	8007dbc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a22      	ldr	r2, [pc, #136]	; (8007e30 <HAL_CRC_Init+0xc4>)
 8007da8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0218 	bic.w	r2, r2, #24
 8007db8:	609a      	str	r2, [r3, #8]
 8007dba:	e00c      	b.n	8007dd6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6899      	ldr	r1, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f948 	bl	800805c <HAL_CRCEx_Polynomial_Set>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e028      	b.n	8007e28 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	795b      	ldrb	r3, [r3, #5]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d105      	bne.n	8007dea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f04f 32ff 	mov.w	r2, #4294967295
 8007de6:	611a      	str	r2, [r3, #16]
 8007de8:	e004      	b.n	8007df4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6912      	ldr	r2, [r2, #16]
 8007df2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695a      	ldr	r2, [r3, #20]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	699a      	ldr	r2, [r3, #24]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	04c11db7 	.word	0x04c11db7

08007e34 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007e40:	2300      	movs	r3, #0
 8007e42:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2202      	movs	r2, #2
 8007e48:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f042 0201 	orr.w	r2, r2, #1
 8007e58:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d006      	beq.n	8007e70 <HAL_CRC_Calculate+0x3c>
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d829      	bhi.n	8007eba <HAL_CRC_Calculate+0x86>
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d019      	beq.n	8007e9e <HAL_CRC_Calculate+0x6a>
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d01e      	beq.n	8007eac <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8007e6e:	e024      	b.n	8007eba <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e00a      	b.n	8007e8c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	441a      	add	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d3f0      	bcc.n	8007e76 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	613b      	str	r3, [r7, #16]
      break;
 8007e9c:	e00e      	b.n	8007ebc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 f812 	bl	8007ecc <CRC_Handle_8>
 8007ea8:	6138      	str	r0, [r7, #16]
      break;
 8007eaa:	e007      	b.n	8007ebc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	68b9      	ldr	r1, [r7, #8]
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f000 f899 	bl	8007fe8 <CRC_Handle_16>
 8007eb6:	6138      	str	r0, [r7, #16]
      break;
 8007eb8:	e000      	b.n	8007ebc <HAL_CRC_Calculate+0x88>
      break;
 8007eba:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007ec2:	693b      	ldr	r3, [r7, #16]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b089      	sub	sp, #36	; 0x24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e023      	b.n	8007f26 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	68ba      	ldr	r2, [r7, #8]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	3301      	adds	r3, #1
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	440b      	add	r3, r1
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007ef8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	3302      	adds	r3, #2
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	440b      	add	r3, r1
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007f08:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	3303      	adds	r3, #3
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	440b      	add	r3, r1
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007f1c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	3301      	adds	r3, #1
 8007f24:	61fb      	str	r3, [r7, #28]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	089b      	lsrs	r3, r3, #2
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d3d6      	bcc.n	8007ede <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d04d      	beq.n	8007fd6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f003 0303 	and.w	r3, r3, #3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d107      	bne.n	8007f54 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d116      	bne.n	8007f8c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	4413      	add	r3, r2
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	b21a      	sxth	r2, r3
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	3301      	adds	r3, #1
 8007f72:	68b9      	ldr	r1, [r7, #8]
 8007f74:	440b      	add	r3, r1
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	b21b      	sxth	r3, r3
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	b21b      	sxth	r3, r3
 8007f7e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	8b7a      	ldrh	r2, [r7, #26]
 8007f8a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d11f      	bne.n	8007fd6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	b21a      	sxth	r2, r3
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	3301      	adds	r3, #1
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	440b      	add	r3, r1
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b21b      	sxth	r3, r3
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b21b      	sxth	r3, r3
 8007fb6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	8b7a      	ldrh	r2, [r7, #26]
 8007fc2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	3302      	adds	r3, #2
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	4413      	add	r3, r2
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3724      	adds	r7, #36	; 0x24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	e013      	b.n	8008022 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	041a      	lsls	r2, r3, #16
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	3302      	adds	r3, #2
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	440b      	add	r3, r1
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	4619      	mov	r1, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3301      	adds	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	085b      	lsrs	r3, r3, #1
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	429a      	cmp	r2, r3
 800802a:	d3e6      	bcc.n	8007ffa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	4413      	add	r3, r2
 8008044:	881a      	ldrh	r2, [r3, #0]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
}
 8008050:	4618      	mov	r0, r3
 8008052:	371c      	adds	r7, #28
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800806c:	231f      	movs	r3, #31
 800806e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008070:	bf00      	nop
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	613a      	str	r2, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <HAL_CRCEx_Polynomial_Set+0x34>
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d0f0      	beq.n	8008072 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b18      	cmp	r3, #24
 8008094:	d846      	bhi.n	8008124 <HAL_CRCEx_Polynomial_Set+0xc8>
 8008096:	a201      	add	r2, pc, #4	; (adr r2, 800809c <HAL_CRCEx_Polynomial_Set+0x40>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	0800812b 	.word	0x0800812b
 80080a0:	08008125 	.word	0x08008125
 80080a4:	08008125 	.word	0x08008125
 80080a8:	08008125 	.word	0x08008125
 80080ac:	08008125 	.word	0x08008125
 80080b0:	08008125 	.word	0x08008125
 80080b4:	08008125 	.word	0x08008125
 80080b8:	08008125 	.word	0x08008125
 80080bc:	08008119 	.word	0x08008119
 80080c0:	08008125 	.word	0x08008125
 80080c4:	08008125 	.word	0x08008125
 80080c8:	08008125 	.word	0x08008125
 80080cc:	08008125 	.word	0x08008125
 80080d0:	08008125 	.word	0x08008125
 80080d4:	08008125 	.word	0x08008125
 80080d8:	08008125 	.word	0x08008125
 80080dc:	0800810d 	.word	0x0800810d
 80080e0:	08008125 	.word	0x08008125
 80080e4:	08008125 	.word	0x08008125
 80080e8:	08008125 	.word	0x08008125
 80080ec:	08008125 	.word	0x08008125
 80080f0:	08008125 	.word	0x08008125
 80080f4:	08008125 	.word	0x08008125
 80080f8:	08008125 	.word	0x08008125
 80080fc:	08008101 	.word	0x08008101
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	2b06      	cmp	r3, #6
 8008104:	d913      	bls.n	800812e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800810a:	e010      	b.n	800812e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	2b07      	cmp	r3, #7
 8008110:	d90f      	bls.n	8008132 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008116:	e00c      	b.n	8008132 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	2b0f      	cmp	r3, #15
 800811c:	d90b      	bls.n	8008136 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008122:	e008      	b.n	8008136 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	75fb      	strb	r3, [r7, #23]
      break;
 8008128:	e006      	b.n	8008138 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800812a:	bf00      	nop
 800812c:	e004      	b.n	8008138 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800812e:	bf00      	nop
 8008130:	e002      	b.n	8008138 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008132:	bf00      	nop
 8008134:	e000      	b.n	8008138 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008136:	bf00      	nop
  }
  if (status == HAL_OK)
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10d      	bne.n	800815a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f023 0118 	bic.w	r1, r3, #24
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	430a      	orrs	r2, r1
 8008158:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
}
 800815c:	4618      	mov	r0, r3
 800815e:	371c      	adds	r7, #28
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e098      	b.n	80082ac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	4b4d      	ldr	r3, [pc, #308]	; (80082b8 <HAL_DMA_Init+0x150>)
 8008182:	429a      	cmp	r2, r3
 8008184:	d80f      	bhi.n	80081a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	4b4b      	ldr	r3, [pc, #300]	; (80082bc <HAL_DMA_Init+0x154>)
 800818e:	4413      	add	r3, r2
 8008190:	4a4b      	ldr	r2, [pc, #300]	; (80082c0 <HAL_DMA_Init+0x158>)
 8008192:	fba2 2303 	umull	r2, r3, r2, r3
 8008196:	091b      	lsrs	r3, r3, #4
 8008198:	009a      	lsls	r2, r3, #2
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a48      	ldr	r2, [pc, #288]	; (80082c4 <HAL_DMA_Init+0x15c>)
 80081a2:	641a      	str	r2, [r3, #64]	; 0x40
 80081a4:	e00e      	b.n	80081c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	4b46      	ldr	r3, [pc, #280]	; (80082c8 <HAL_DMA_Init+0x160>)
 80081ae:	4413      	add	r3, r2
 80081b0:	4a43      	ldr	r2, [pc, #268]	; (80082c0 <HAL_DMA_Init+0x158>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	009a      	lsls	r2, r3, #2
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a42      	ldr	r2, [pc, #264]	; (80082cc <HAL_DMA_Init+0x164>)
 80081c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2202      	movs	r2, #2
 80081c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80081da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80081e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80081f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800821e:	d039      	beq.n	8008294 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	4a27      	ldr	r2, [pc, #156]	; (80082c4 <HAL_DMA_Init+0x15c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d11a      	bne.n	8008260 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800822a:	4b29      	ldr	r3, [pc, #164]	; (80082d0 <HAL_DMA_Init+0x168>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008232:	f003 031c 	and.w	r3, r3, #28
 8008236:	210f      	movs	r1, #15
 8008238:	fa01 f303 	lsl.w	r3, r1, r3
 800823c:	43db      	mvns	r3, r3
 800823e:	4924      	ldr	r1, [pc, #144]	; (80082d0 <HAL_DMA_Init+0x168>)
 8008240:	4013      	ands	r3, r2
 8008242:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008244:	4b22      	ldr	r3, [pc, #136]	; (80082d0 <HAL_DMA_Init+0x168>)
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6859      	ldr	r1, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008250:	f003 031c 	and.w	r3, r3, #28
 8008254:	fa01 f303 	lsl.w	r3, r1, r3
 8008258:	491d      	ldr	r1, [pc, #116]	; (80082d0 <HAL_DMA_Init+0x168>)
 800825a:	4313      	orrs	r3, r2
 800825c:	600b      	str	r3, [r1, #0]
 800825e:	e019      	b.n	8008294 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008260:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <HAL_DMA_Init+0x16c>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	f003 031c 	and.w	r3, r3, #28
 800826c:	210f      	movs	r1, #15
 800826e:	fa01 f303 	lsl.w	r3, r1, r3
 8008272:	43db      	mvns	r3, r3
 8008274:	4917      	ldr	r1, [pc, #92]	; (80082d4 <HAL_DMA_Init+0x16c>)
 8008276:	4013      	ands	r3, r2
 8008278:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <HAL_DMA_Init+0x16c>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6859      	ldr	r1, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008286:	f003 031c 	and.w	r3, r3, #28
 800828a:	fa01 f303 	lsl.w	r3, r1, r3
 800828e:	4911      	ldr	r1, [pc, #68]	; (80082d4 <HAL_DMA_Init+0x16c>)
 8008290:	4313      	orrs	r3, r2
 8008292:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	40020407 	.word	0x40020407
 80082bc:	bffdfff8 	.word	0xbffdfff8
 80082c0:	cccccccd 	.word	0xcccccccd
 80082c4:	40020000 	.word	0x40020000
 80082c8:	bffdfbf8 	.word	0xbffdfbf8
 80082cc:	40020400 	.word	0x40020400
 80082d0:	400200a8 	.word	0x400200a8
 80082d4:	400204a8 	.word	0x400204a8

080082d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
 80082e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d101      	bne.n	80082f8 <HAL_DMA_Start_IT+0x20>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e04b      	b.n	8008390 <HAL_DMA_Start_IT+0xb8>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b01      	cmp	r3, #1
 800830a:	d13a      	bne.n	8008382 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	68b9      	ldr	r1, [r7, #8]
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f95f 	bl	80085f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833a:	2b00      	cmp	r3, #0
 800833c:	d008      	beq.n	8008350 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f042 020e 	orr.w	r2, r2, #14
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e00f      	b.n	8008370 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0204 	bic.w	r2, r2, #4
 800835e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 020a 	orr.w	r2, r2, #10
 800836e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0201 	orr.w	r2, r2, #1
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e005      	b.n	800838e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800838a:	2302      	movs	r3, #2
 800838c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d008      	beq.n	80083c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2204      	movs	r2, #4
 80083b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e022      	b.n	8008408 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 020e 	bic.w	r2, r2, #14
 80083d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0201 	bic.w	r2, r2, #1
 80083e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e6:	f003 021c 	and.w	r2, r3, #28
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	2101      	movs	r1, #1
 80083f0:	fa01 f202 	lsl.w	r2, r1, r2
 80083f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d005      	beq.n	8008438 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2204      	movs	r2, #4
 8008430:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	73fb      	strb	r3, [r7, #15]
 8008436:	e029      	b.n	800848c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 020e 	bic.w	r2, r2, #14
 8008446:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0201 	bic.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845c:	f003 021c 	and.w	r2, r3, #28
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008464:	2101      	movs	r1, #1
 8008466:	fa01 f202 	lsl.w	r2, r1, r2
 800846a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	4798      	blx	r3
    }
  }
  return status;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b2:	f003 031c 	and.w	r3, r3, #28
 80084b6:	2204      	movs	r2, #4
 80084b8:	409a      	lsls	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4013      	ands	r3, r2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d026      	beq.n	8008510 <HAL_DMA_IRQHandler+0x7a>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d021      	beq.n	8008510 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d107      	bne.n	80084ea <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0204 	bic.w	r2, r2, #4
 80084e8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ee:	f003 021c 	and.w	r2, r3, #28
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	2104      	movs	r1, #4
 80084f8:	fa01 f202 	lsl.w	r2, r1, r2
 80084fc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	d071      	beq.n	80085ea <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800850e:	e06c      	b.n	80085ea <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008514:	f003 031c 	and.w	r3, r3, #28
 8008518:	2202      	movs	r2, #2
 800851a:	409a      	lsls	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4013      	ands	r3, r2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d02e      	beq.n	8008582 <HAL_DMA_IRQHandler+0xec>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d029      	beq.n	8008582 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10b      	bne.n	8008554 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 020a 	bic.w	r2, r2, #10
 800854a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008558:	f003 021c 	and.w	r2, r3, #28
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	2102      	movs	r1, #2
 8008562:	fa01 f202 	lsl.w	r2, r1, r2
 8008566:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d038      	beq.n	80085ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008580:	e033      	b.n	80085ea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	f003 031c 	and.w	r3, r3, #28
 800858a:	2208      	movs	r2, #8
 800858c:	409a      	lsls	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4013      	ands	r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d02a      	beq.n	80085ec <HAL_DMA_IRQHandler+0x156>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d025      	beq.n	80085ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 020e 	bic.w	r2, r2, #14
 80085ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b4:	f003 021c 	and.w	r2, r3, #28
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085bc:	2101      	movs	r1, #1
 80085be:	fa01 f202 	lsl.w	r2, r1, r2
 80085c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d004      	beq.n	80085ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
}
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
 8008600:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008606:	f003 021c 	and.w	r2, r3, #28
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	2101      	movs	r1, #1
 8008610:	fa01 f202 	lsl.w	r2, r1, r2
 8008614:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	2b10      	cmp	r3, #16
 8008624:	d108      	bne.n	8008638 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008636:	e007      	b.n	8008648 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	60da      	str	r2, [r3, #12]
}
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8008662:	2300      	movs	r3, #0
 8008664:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008666:	4b2f      	ldr	r3, [pc, #188]	; (8008724 <HAL_FLASH_Program+0xd0>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <HAL_FLASH_Program+0x1e>
 800866e:	2302      	movs	r3, #2
 8008670:	e053      	b.n	800871a <HAL_FLASH_Program+0xc6>
 8008672:	4b2c      	ldr	r3, [pc, #176]	; (8008724 <HAL_FLASH_Program+0xd0>)
 8008674:	2201      	movs	r2, #1
 8008676:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008678:	f24c 3050 	movw	r0, #50000	; 0xc350
 800867c:	f000 f888 	bl	8008790 <FLASH_WaitForLastOperation>
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d143      	bne.n	8008712 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800868a:	4b26      	ldr	r3, [pc, #152]	; (8008724 <HAL_FLASH_Program+0xd0>)
 800868c:	2200      	movs	r2, #0
 800868e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008690:	4b25      	ldr	r3, [pc, #148]	; (8008728 <HAL_FLASH_Program+0xd4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008698:	2b00      	cmp	r3, #0
 800869a:	d009      	beq.n	80086b0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800869c:	4b22      	ldr	r3, [pc, #136]	; (8008728 <HAL_FLASH_Program+0xd4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a21      	ldr	r2, [pc, #132]	; (8008728 <HAL_FLASH_Program+0xd4>)
 80086a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086a6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80086a8:	4b1e      	ldr	r3, [pc, #120]	; (8008724 <HAL_FLASH_Program+0xd0>)
 80086aa:	2202      	movs	r2, #2
 80086ac:	771a      	strb	r2, [r3, #28]
 80086ae:	e002      	b.n	80086b6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80086b0:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <HAL_FLASH_Program+0xd0>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d107      	bne.n	80086cc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80086bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c0:	68b8      	ldr	r0, [r7, #8]
 80086c2:	f000 f8bd 	bl	8008840 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80086c6:	2301      	movs	r3, #1
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	e010      	b.n	80086ee <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d002      	beq.n	80086d8 <HAL_FLASH_Program+0x84>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d10a      	bne.n	80086ee <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	4619      	mov	r1, r3
 80086dc:	68b8      	ldr	r0, [r7, #8]
 80086de:	f000 f8d5 	bl	800888c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d102      	bne.n	80086ee <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80086e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80086ec:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80086ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80086f2:	f000 f84d 	bl	8008790 <FLASH_WaitForLastOperation>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d006      	beq.n	800870e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008700:	4b09      	ldr	r3, [pc, #36]	; (8008728 <HAL_FLASH_Program+0xd4>)
 8008702:	695a      	ldr	r2, [r3, #20]
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	43db      	mvns	r3, r3
 8008708:	4907      	ldr	r1, [pc, #28]	; (8008728 <HAL_FLASH_Program+0xd4>)
 800870a:	4013      	ands	r3, r2
 800870c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800870e:	f000 f9cf 	bl	8008ab0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008712:	4b04      	ldr	r3, [pc, #16]	; (8008724 <HAL_FLASH_Program+0xd0>)
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]

  return status;
 8008718:	7dfb      	ldrb	r3, [r7, #23]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000024 	.word	0x20000024
 8008728:	40022000 	.word	0x40022000

0800872c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008736:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <HAL_FLASH_Unlock+0x38>)
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	da0b      	bge.n	8008756 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800873e:	4b09      	ldr	r3, [pc, #36]	; (8008764 <HAL_FLASH_Unlock+0x38>)
 8008740:	4a09      	ldr	r2, [pc, #36]	; (8008768 <HAL_FLASH_Unlock+0x3c>)
 8008742:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008744:	4b07      	ldr	r3, [pc, #28]	; (8008764 <HAL_FLASH_Unlock+0x38>)
 8008746:	4a09      	ldr	r2, [pc, #36]	; (800876c <HAL_FLASH_Unlock+0x40>)
 8008748:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800874a:	4b06      	ldr	r3, [pc, #24]	; (8008764 <HAL_FLASH_Unlock+0x38>)
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	2b00      	cmp	r3, #0
 8008750:	da01      	bge.n	8008756 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008756:	79fb      	ldrb	r3, [r7, #7]
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	40022000 	.word	0x40022000
 8008768:	45670123 	.word	0x45670123
 800876c:	cdef89ab 	.word	0xcdef89ab

08008770 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <HAL_FLASH_Lock+0x1c>)
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	4a04      	ldr	r2, [pc, #16]	; (800878c <HAL_FLASH_Lock+0x1c>)
 800877a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	40022000 	.word	0x40022000

08008790 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8008798:	f7fd ffe2 	bl	8006760 <HAL_GetTick>
 800879c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800879e:	e00d      	b.n	80087bc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a6:	d009      	beq.n	80087bc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80087a8:	f7fd ffda 	bl	8006760 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d801      	bhi.n	80087bc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e036      	b.n	800882a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80087bc:	4b1d      	ldr	r3, [pc, #116]	; (8008834 <FLASH_WaitForLastOperation+0xa4>)
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1eb      	bne.n	80087a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80087c8:	4b1a      	ldr	r3, [pc, #104]	; (8008834 <FLASH_WaitForLastOperation+0xa4>)
 80087ca:	691a      	ldr	r2, [r3, #16]
 80087cc:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <FLASH_WaitForLastOperation+0xa8>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01e      	beq.n	8008816 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80087d8:	4b18      	ldr	r3, [pc, #96]	; (800883c <FLASH_WaitForLastOperation+0xac>)
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	4313      	orrs	r3, r2
 80087e0:	4a16      	ldr	r2, [pc, #88]	; (800883c <FLASH_WaitForLastOperation+0xac>)
 80087e2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <FLASH_WaitForLastOperation+0x6e>
 80087ee:	4b11      	ldr	r3, [pc, #68]	; (8008834 <FLASH_WaitForLastOperation+0xa4>)
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80087f8:	490e      	ldr	r1, [pc, #56]	; (8008834 <FLASH_WaitForLastOperation+0xa4>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	618b      	str	r3, [r1, #24]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d004      	beq.n	8008812 <FLASH_WaitForLastOperation+0x82>
 8008808:	4a0a      	ldr	r2, [pc, #40]	; (8008834 <FLASH_WaitForLastOperation+0xa4>)
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008810:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e009      	b.n	800882a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008816:	4b07      	ldr	r3, [pc, #28]	; (8008834 <FLASH_WaitForLastOperation+0xa4>)
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008822:	4b04      	ldr	r3, [pc, #16]	; (8008834 <FLASH_WaitForLastOperation+0xa4>)
 8008824:	2201      	movs	r2, #1
 8008826:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	40022000 	.word	0x40022000
 8008838:	0002c3fa 	.word	0x0002c3fa
 800883c:	20000024 	.word	0x20000024

08008840 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800884c:	4b0e      	ldr	r3, [pc, #56]	; (8008888 <FLASH_Program_DoubleWord+0x48>)
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	4a0d      	ldr	r2, [pc, #52]	; (8008888 <FLASH_Program_DoubleWord+0x48>)
 8008852:	f043 0301 	orr.w	r3, r3, #1
 8008856:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800885e:	f3bf 8f6f 	isb	sy
}
 8008862:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8008864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	000a      	movs	r2, r1
 8008872:	2300      	movs	r3, #0
 8008874:	68f9      	ldr	r1, [r7, #12]
 8008876:	3104      	adds	r1, #4
 8008878:	4613      	mov	r3, r2
 800887a:	600b      	str	r3, [r1, #0]
}
 800887c:	bf00      	nop
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	40022000 	.word	0x40022000

0800888c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800888c:	b480      	push	{r7}
 800888e:	b089      	sub	sp, #36	; 0x24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8008896:	2340      	movs	r3, #64	; 0x40
 8008898:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80088a2:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <FLASH_Program_Fast+0x68>)
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	4a13      	ldr	r2, [pc, #76]	; (80088f4 <FLASH_Program_Fast+0x68>)
 80088a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088ae:	f3ef 8310 	mrs	r3, PRIMASK
 80088b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80088b4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80088b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80088b8:	b672      	cpsid	i
}
 80088ba:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	3304      	adds	r3, #4
 80088c8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	3304      	adds	r3, #4
 80088ce:	617b      	str	r3, [r7, #20]
    row_index--;
 80088d0:	7ffb      	ldrb	r3, [r7, #31]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80088d6:	7ffb      	ldrb	r3, [r7, #31]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1ef      	bne.n	80088bc <FLASH_Program_Fast+0x30>
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f383 8810 	msr	PRIMASK, r3
}
 80088e6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80088e8:	bf00      	nop
 80088ea:	3724      	adds	r7, #36	; 0x24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	40022000 	.word	0x40022000

080088f8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008902:	4b48      	ldr	r3, [pc, #288]	; (8008a24 <HAL_FLASHEx_Erase+0x12c>)
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d101      	bne.n	800890e <HAL_FLASHEx_Erase+0x16>
 800890a:	2302      	movs	r3, #2
 800890c:	e085      	b.n	8008a1a <HAL_FLASHEx_Erase+0x122>
 800890e:	4b45      	ldr	r3, [pc, #276]	; (8008a24 <HAL_FLASHEx_Erase+0x12c>)
 8008910:	2201      	movs	r2, #1
 8008912:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008914:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008918:	f7ff ff3a 	bl	8008790 <FLASH_WaitForLastOperation>
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d175      	bne.n	8008a12 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008926:	4b3f      	ldr	r3, [pc, #252]	; (8008a24 <HAL_FLASHEx_Erase+0x12c>)
 8008928:	2200      	movs	r2, #0
 800892a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800892c:	4b3e      	ldr	r3, [pc, #248]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008934:	2b00      	cmp	r3, #0
 8008936:	d013      	beq.n	8008960 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008938:	4b3b      	ldr	r3, [pc, #236]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008940:	2b00      	cmp	r3, #0
 8008942:	d009      	beq.n	8008958 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008944:	4b38      	ldr	r3, [pc, #224]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a37      	ldr	r2, [pc, #220]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 800894a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800894e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008950:	4b34      	ldr	r3, [pc, #208]	; (8008a24 <HAL_FLASHEx_Erase+0x12c>)
 8008952:	2203      	movs	r2, #3
 8008954:	771a      	strb	r2, [r3, #28]
 8008956:	e016      	b.n	8008986 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008958:	4b32      	ldr	r3, [pc, #200]	; (8008a24 <HAL_FLASHEx_Erase+0x12c>)
 800895a:	2201      	movs	r2, #1
 800895c:	771a      	strb	r2, [r3, #28]
 800895e:	e012      	b.n	8008986 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8008960:	4b31      	ldr	r3, [pc, #196]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008968:	2b00      	cmp	r3, #0
 800896a:	d009      	beq.n	8008980 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800896c:	4b2e      	ldr	r3, [pc, #184]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a2d      	ldr	r2, [pc, #180]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 8008972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008976:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008978:	4b2a      	ldr	r3, [pc, #168]	; (8008a24 <HAL_FLASHEx_Erase+0x12c>)
 800897a:	2202      	movs	r2, #2
 800897c:	771a      	strb	r2, [r3, #28]
 800897e:	e002      	b.n	8008986 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008980:	4b28      	ldr	r3, [pc, #160]	; (8008a24 <HAL_FLASHEx_Erase+0x12c>)
 8008982:	2200      	movs	r2, #0
 8008984:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d111      	bne.n	80089b2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 f84a 	bl	8008a2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008998:	f24c 3050 	movw	r0, #50000	; 0xc350
 800899c:	f7ff fef8 	bl	8008790 <FLASH_WaitForLastOperation>
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80089a4:	4b20      	ldr	r3, [pc, #128]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 80089aa:	f023 0304 	bic.w	r3, r3, #4
 80089ae:	6153      	str	r3, [r2, #20]
 80089b0:	e02d      	b.n	8008a0e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	f04f 32ff 	mov.w	r2, #4294967295
 80089b8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	60bb      	str	r3, [r7, #8]
 80089c0:	e01d      	b.n	80089fe <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	4619      	mov	r1, r3
 80089c8:	68b8      	ldr	r0, [r7, #8]
 80089ca:	f000 f84d 	bl	8008a68 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80089ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80089d2:	f7ff fedd 	bl	8008790 <FLASH_WaitForLastOperation>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80089da:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <HAL_FLASHEx_Erase+0x130>)
 80089e0:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80089e4:	f023 0302 	bic.w	r3, r3, #2
 80089e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d003      	beq.n	80089f8 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	601a      	str	r2, [r3, #0]
          break;
 80089f6:	e00a      	b.n	8008a0e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60bb      	str	r3, [r7, #8]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d3d9      	bcc.n	80089c2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008a0e:	f000 f84f 	bl	8008ab0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008a12:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <HAL_FLASHEx_Erase+0x12c>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	701a      	strb	r2, [r3, #0]

  return status;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000024 	.word	0x20000024
 8008a28:	40022000 	.word	0x40022000

08008a2c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008a3e:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <FLASH_MassErase+0x38>)
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	4a08      	ldr	r2, [pc, #32]	; (8008a64 <FLASH_MassErase+0x38>)
 8008a44:	f043 0304 	orr.w	r3, r3, #4
 8008a48:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008a4a:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <FLASH_MassErase+0x38>)
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	4a05      	ldr	r2, [pc, #20]	; (8008a64 <FLASH_MassErase+0x38>)
 8008a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a54:	6153      	str	r3, [r2, #20]
}
 8008a56:	bf00      	nop
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	40022000 	.word	0x40022000

08008a68 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8008a72:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <FLASH_PageErase+0x44>)
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8008a82:	490a      	ldr	r1, [pc, #40]	; (8008aac <FLASH_PageErase+0x44>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008a88:	4b08      	ldr	r3, [pc, #32]	; (8008aac <FLASH_PageErase+0x44>)
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	4a07      	ldr	r2, [pc, #28]	; (8008aac <FLASH_PageErase+0x44>)
 8008a8e:	f043 0302 	orr.w	r3, r3, #2
 8008a92:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008a94:	4b05      	ldr	r3, [pc, #20]	; (8008aac <FLASH_PageErase+0x44>)
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	4a04      	ldr	r2, [pc, #16]	; (8008aac <FLASH_PageErase+0x44>)
 8008a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a9e:	6153      	str	r3, [r2, #20]
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	40022000 	.word	0x40022000

08008ab0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <FLASH_FlushCaches+0x8c>)
 8008ab8:	7f1b      	ldrb	r3, [r3, #28]
 8008aba:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d002      	beq.n	8008ac8 <FLASH_FlushCaches+0x18>
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d117      	bne.n	8008af8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008ac8:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008ace:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ad2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008ad4:	4b1a      	ldr	r3, [pc, #104]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008ada:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008aec:	4b14      	ldr	r3, [pc, #80]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a13      	ldr	r2, [pc, #76]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008af6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d002      	beq.n	8008b04 <FLASH_FlushCaches+0x54>
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d111      	bne.n	8008b28 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008b04:	4b0e      	ldr	r3, [pc, #56]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a0d      	ldr	r2, [pc, #52]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008b0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a0a      	ldr	r2, [pc, #40]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b1c:	4b08      	ldr	r3, [pc, #32]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a07      	ldr	r2, [pc, #28]	; (8008b40 <FLASH_FlushCaches+0x90>)
 8008b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b26:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008b28:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <FLASH_FlushCaches+0x8c>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	771a      	strb	r2, [r3, #28]
}
 8008b2e:	bf00      	nop
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20000024 	.word	0x20000024
 8008b40:	40022000 	.word	0x40022000

08008b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b52:	e154      	b.n	8008dfe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	2101      	movs	r1, #1
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b60:	4013      	ands	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f000 8146 	beq.w	8008df8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d005      	beq.n	8008b84 <HAL_GPIO_Init+0x40>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f003 0303 	and.w	r3, r3, #3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d130      	bne.n	8008be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	2203      	movs	r2, #3
 8008b90:	fa02 f303 	lsl.w	r3, r2, r3
 8008b94:	43db      	mvns	r3, r3
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	005b      	lsls	r3, r3, #1
 8008ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bba:	2201      	movs	r2, #1
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	091b      	lsrs	r3, r3, #4
 8008bd0:	f003 0201 	and.w	r2, r3, #1
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d017      	beq.n	8008c22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43db      	mvns	r3, r3
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4013      	ands	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d123      	bne.n	8008c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	08da      	lsrs	r2, r3, #3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3208      	adds	r2, #8
 8008c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f003 0307 	and.w	r3, r3, #7
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	220f      	movs	r2, #15
 8008c46:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	08da      	lsrs	r2, r3, #3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3208      	adds	r2, #8
 8008c70:	6939      	ldr	r1, [r7, #16]
 8008c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	2203      	movs	r2, #3
 8008c82:	fa02 f303 	lsl.w	r3, r2, r3
 8008c86:	43db      	mvns	r3, r3
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f003 0203 	and.w	r2, r3, #3
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 80a0 	beq.w	8008df8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cb8:	4b58      	ldr	r3, [pc, #352]	; (8008e1c <HAL_GPIO_Init+0x2d8>)
 8008cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cbc:	4a57      	ldr	r2, [pc, #348]	; (8008e1c <HAL_GPIO_Init+0x2d8>)
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	6613      	str	r3, [r2, #96]	; 0x60
 8008cc4:	4b55      	ldr	r3, [pc, #340]	; (8008e1c <HAL_GPIO_Init+0x2d8>)
 8008cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	60bb      	str	r3, [r7, #8]
 8008cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008cd0:	4a53      	ldr	r2, [pc, #332]	; (8008e20 <HAL_GPIO_Init+0x2dc>)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	089b      	lsrs	r3, r3, #2
 8008cd6:	3302      	adds	r3, #2
 8008cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	220f      	movs	r2, #15
 8008ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cec:	43db      	mvns	r3, r3
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008cfa:	d019      	beq.n	8008d30 <HAL_GPIO_Init+0x1ec>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a49      	ldr	r2, [pc, #292]	; (8008e24 <HAL_GPIO_Init+0x2e0>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d013      	beq.n	8008d2c <HAL_GPIO_Init+0x1e8>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a48      	ldr	r2, [pc, #288]	; (8008e28 <HAL_GPIO_Init+0x2e4>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00d      	beq.n	8008d28 <HAL_GPIO_Init+0x1e4>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a47      	ldr	r2, [pc, #284]	; (8008e2c <HAL_GPIO_Init+0x2e8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d007      	beq.n	8008d24 <HAL_GPIO_Init+0x1e0>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a46      	ldr	r2, [pc, #280]	; (8008e30 <HAL_GPIO_Init+0x2ec>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d101      	bne.n	8008d20 <HAL_GPIO_Init+0x1dc>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	e008      	b.n	8008d32 <HAL_GPIO_Init+0x1ee>
 8008d20:	2307      	movs	r3, #7
 8008d22:	e006      	b.n	8008d32 <HAL_GPIO_Init+0x1ee>
 8008d24:	2303      	movs	r3, #3
 8008d26:	e004      	b.n	8008d32 <HAL_GPIO_Init+0x1ee>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e002      	b.n	8008d32 <HAL_GPIO_Init+0x1ee>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e000      	b.n	8008d32 <HAL_GPIO_Init+0x1ee>
 8008d30:	2300      	movs	r3, #0
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	f002 0203 	and.w	r2, r2, #3
 8008d38:	0092      	lsls	r2, r2, #2
 8008d3a:	4093      	lsls	r3, r2
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d42:	4937      	ldr	r1, [pc, #220]	; (8008e20 <HAL_GPIO_Init+0x2dc>)
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	089b      	lsrs	r3, r3, #2
 8008d48:	3302      	adds	r3, #2
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d50:	4b38      	ldr	r3, [pc, #224]	; (8008e34 <HAL_GPIO_Init+0x2f0>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	43db      	mvns	r3, r3
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d74:	4a2f      	ldr	r2, [pc, #188]	; (8008e34 <HAL_GPIO_Init+0x2f0>)
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008d7a:	4b2e      	ldr	r3, [pc, #184]	; (8008e34 <HAL_GPIO_Init+0x2f0>)
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	43db      	mvns	r3, r3
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	4013      	ands	r3, r2
 8008d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008d9e:	4a25      	ldr	r2, [pc, #148]	; (8008e34 <HAL_GPIO_Init+0x2f0>)
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008da4:	4b23      	ldr	r3, [pc, #140]	; (8008e34 <HAL_GPIO_Init+0x2f0>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	43db      	mvns	r3, r3
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4013      	ands	r3, r2
 8008db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008dc8:	4a1a      	ldr	r2, [pc, #104]	; (8008e34 <HAL_GPIO_Init+0x2f0>)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008dce:	4b19      	ldr	r3, [pc, #100]	; (8008e34 <HAL_GPIO_Init+0x2f0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	43db      	mvns	r3, r3
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008df2:	4a10      	ldr	r2, [pc, #64]	; (8008e34 <HAL_GPIO_Init+0x2f0>)
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	fa22 f303 	lsr.w	r3, r2, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f47f aea3 	bne.w	8008b54 <HAL_GPIO_Init+0x10>
  }
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	371c      	adds	r7, #28
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	40021000 	.word	0x40021000
 8008e20:	40010000 	.word	0x40010000
 8008e24:	48000400 	.word	0x48000400
 8008e28:	48000800 	.word	0x48000800
 8008e2c:	48000c00 	.word	0x48000c00
 8008e30:	48001000 	.word	0x48001000
 8008e34:	40010400 	.word	0x40010400

08008e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	887b      	ldrh	r3, [r7, #2]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e50:	2301      	movs	r3, #1
 8008e52:	73fb      	strb	r3, [r7, #15]
 8008e54:	e001      	b.n	8008e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	807b      	strh	r3, [r7, #2]
 8008e74:	4613      	mov	r3, r2
 8008e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e78:	787b      	ldrb	r3, [r7, #1]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e7e:	887a      	ldrh	r2, [r7, #2]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e84:	e002      	b.n	8008e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e86:	887a      	ldrh	r2, [r7, #2]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008eaa:	887a      	ldrh	r2, [r7, #2]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	041a      	lsls	r2, r3, #16
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	43d9      	mvns	r1, r3
 8008eb6:	887b      	ldrh	r3, [r7, #2]
 8008eb8:	400b      	ands	r3, r1
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	619a      	str	r2, [r3, #24]
}
 8008ec0:	bf00      	nop
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e081      	b.n	8008fe2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fc faf2 	bl	80054dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2224      	movs	r2, #36	; 0x24
 8008efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d107      	bne.n	8008f46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f42:	609a      	str	r2, [r3, #8]
 8008f44:	e006      	b.n	8008f54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689a      	ldr	r2, [r3, #8]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008f52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d104      	bne.n	8008f66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6812      	ldr	r2, [r2, #0]
 8008f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691a      	ldr	r2, [r3, #16]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	69d9      	ldr	r1, [r3, #28]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a1a      	ldr	r2, [r3, #32]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	607a      	str	r2, [r7, #4]
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	817b      	strh	r3, [r7, #10]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b20      	cmp	r3, #32
 800900a:	f040 80da 	bne.w	80091c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009014:	2b01      	cmp	r3, #1
 8009016:	d101      	bne.n	800901c <HAL_I2C_Master_Transmit+0x30>
 8009018:	2302      	movs	r3, #2
 800901a:	e0d3      	b.n	80091c4 <HAL_I2C_Master_Transmit+0x1d8>
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009024:	f7fd fb9c 	bl	8006760 <HAL_GetTick>
 8009028:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	2319      	movs	r3, #25
 8009030:	2201      	movs	r2, #1
 8009032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 fdc4 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e0be      	b.n	80091c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2221      	movs	r2, #33	; 0x21
 800904a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2210      	movs	r2, #16
 8009052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	893a      	ldrh	r2, [r7, #8]
 8009066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009072:	b29b      	uxth	r3, r3
 8009074:	2bff      	cmp	r3, #255	; 0xff
 8009076:	d90e      	bls.n	8009096 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	22ff      	movs	r2, #255	; 0xff
 800907c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009082:	b2da      	uxtb	r2, r3
 8009084:	8979      	ldrh	r1, [r7, #10]
 8009086:	4b51      	ldr	r3, [pc, #324]	; (80091cc <HAL_I2C_Master_Transmit+0x1e0>)
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 ffba 	bl	800a008 <I2C_TransferConfig>
 8009094:	e06c      	b.n	8009170 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909a:	b29a      	uxth	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	8979      	ldrh	r1, [r7, #10]
 80090a8:	4b48      	ldr	r3, [pc, #288]	; (80091cc <HAL_I2C_Master_Transmit+0x1e0>)
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 ffa9 	bl	800a008 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80090b6:	e05b      	b.n	8009170 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	6a39      	ldr	r1, [r7, #32]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 fdc1 	bl	8009c44 <I2C_WaitOnTXISFlagUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e07b      	b.n	80091c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	781a      	ldrb	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	3b01      	subs	r3, #1
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d034      	beq.n	8009170 <HAL_I2C_Master_Transmit+0x184>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d130      	bne.n	8009170 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	2200      	movs	r2, #0
 8009116:	2180      	movs	r1, #128	; 0x80
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 fd53 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e04d      	b.n	80091c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912c:	b29b      	uxth	r3, r3
 800912e:	2bff      	cmp	r3, #255	; 0xff
 8009130:	d90e      	bls.n	8009150 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	22ff      	movs	r2, #255	; 0xff
 8009136:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913c:	b2da      	uxtb	r2, r3
 800913e:	8979      	ldrh	r1, [r7, #10]
 8009140:	2300      	movs	r3, #0
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 ff5d 	bl	800a008 <I2C_TransferConfig>
 800914e:	e00f      	b.n	8009170 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009154:	b29a      	uxth	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800915e:	b2da      	uxtb	r2, r3
 8009160:	8979      	ldrh	r1, [r7, #10]
 8009162:	2300      	movs	r3, #0
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 ff4c 	bl	800a008 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009174:	b29b      	uxth	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d19e      	bne.n	80090b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	6a39      	ldr	r1, [r7, #32]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 fda0 	bl	8009cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e01a      	b.n	80091c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2220      	movs	r2, #32
 8009194:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6859      	ldr	r1, [r3, #4]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80091a2:	400b      	ands	r3, r1
 80091a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2220      	movs	r2, #32
 80091aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	e000      	b.n	80091c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80091c2:	2302      	movs	r3, #2
  }
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	80002000 	.word	0x80002000
 80091d0:	fe00e800 	.word	0xfe00e800

080091d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af02      	add	r7, sp, #8
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	461a      	mov	r2, r3
 80091e0:	460b      	mov	r3, r1
 80091e2:	817b      	strh	r3, [r7, #10]
 80091e4:	4613      	mov	r3, r2
 80091e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	f040 80db 	bne.w	80093ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d101      	bne.n	8009204 <HAL_I2C_Master_Receive+0x30>
 8009200:	2302      	movs	r3, #2
 8009202:	e0d4      	b.n	80093ae <HAL_I2C_Master_Receive+0x1da>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800920c:	f7fd faa8 	bl	8006760 <HAL_GetTick>
 8009210:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	2319      	movs	r3, #25
 8009218:	2201      	movs	r2, #1
 800921a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fcd0 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e0bf      	b.n	80093ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2222      	movs	r2, #34	; 0x22
 8009232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2210      	movs	r2, #16
 800923a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	893a      	ldrh	r2, [r7, #8]
 800924e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800925a:	b29b      	uxth	r3, r3
 800925c:	2bff      	cmp	r3, #255	; 0xff
 800925e:	d90e      	bls.n	800927e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	22ff      	movs	r2, #255	; 0xff
 8009264:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800926a:	b2da      	uxtb	r2, r3
 800926c:	8979      	ldrh	r1, [r7, #10]
 800926e:	4b52      	ldr	r3, [pc, #328]	; (80093b8 <HAL_I2C_Master_Receive+0x1e4>)
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fec6 	bl	800a008 <I2C_TransferConfig>
 800927c:	e06d      	b.n	800935a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009282:	b29a      	uxth	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800928c:	b2da      	uxtb	r2, r3
 800928e:	8979      	ldrh	r1, [r7, #10]
 8009290:	4b49      	ldr	r3, [pc, #292]	; (80093b8 <HAL_I2C_Master_Receive+0x1e4>)
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 feb5 	bl	800a008 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800929e:	e05c      	b.n	800935a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	6a39      	ldr	r1, [r7, #32]
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 fd49 	bl	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e07c      	b.n	80093ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092be:	b2d2      	uxtb	r2, r2
 80092c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	1c5a      	adds	r2, r3, #1
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d0:	3b01      	subs	r3, #1
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092dc:	b29b      	uxth	r3, r3
 80092de:	3b01      	subs	r3, #1
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d034      	beq.n	800935a <HAL_I2C_Master_Receive+0x186>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d130      	bne.n	800935a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	2200      	movs	r2, #0
 8009300:	2180      	movs	r1, #128	; 0x80
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 fc5e 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d001      	beq.n	8009312 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e04d      	b.n	80093ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009316:	b29b      	uxth	r3, r3
 8009318:	2bff      	cmp	r3, #255	; 0xff
 800931a:	d90e      	bls.n	800933a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	22ff      	movs	r2, #255	; 0xff
 8009320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009326:	b2da      	uxtb	r2, r3
 8009328:	8979      	ldrh	r1, [r7, #10]
 800932a:	2300      	movs	r3, #0
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 fe68 	bl	800a008 <I2C_TransferConfig>
 8009338:	e00f      	b.n	800935a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009348:	b2da      	uxtb	r2, r3
 800934a:	8979      	ldrh	r1, [r7, #10]
 800934c:	2300      	movs	r3, #0
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 fe57 	bl	800a008 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d19d      	bne.n	80092a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	6a39      	ldr	r1, [r7, #32]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 fcab 	bl	8009cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e01a      	b.n	80093ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2220      	movs	r2, #32
 800937e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6859      	ldr	r1, [r3, #4]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <HAL_I2C_Master_Receive+0x1e8>)
 800938c:	400b      	ands	r3, r1
 800938e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	e000      	b.n	80093ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80093ac:	2302      	movs	r3, #2
  }
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	80002400 	.word	0x80002400
 80093bc:	fe00e800 	.word	0xfe00e800

080093c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	4608      	mov	r0, r1
 80093ca:	4611      	mov	r1, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	817b      	strh	r3, [r7, #10]
 80093d2:	460b      	mov	r3, r1
 80093d4:	813b      	strh	r3, [r7, #8]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b20      	cmp	r3, #32
 80093e4:	f040 80f9 	bne.w	80095da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <HAL_I2C_Mem_Write+0x34>
 80093ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e0ed      	b.n	80095dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_I2C_Mem_Write+0x4e>
 800940a:	2302      	movs	r3, #2
 800940c:	e0e6      	b.n	80095dc <HAL_I2C_Mem_Write+0x21c>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009416:	f7fd f9a3 	bl	8006760 <HAL_GetTick>
 800941a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	2319      	movs	r3, #25
 8009422:	2201      	movs	r2, #1
 8009424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 fbcb 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e0d1      	b.n	80095dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2221      	movs	r2, #33	; 0x21
 800943c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2240      	movs	r2, #64	; 0x40
 8009444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a3a      	ldr	r2, [r7, #32]
 8009452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009460:	88f8      	ldrh	r0, [r7, #6]
 8009462:	893a      	ldrh	r2, [r7, #8]
 8009464:	8979      	ldrh	r1, [r7, #10]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	4603      	mov	r3, r0
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fadb 	bl	8009a2c <I2C_RequestMemoryWrite>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e0a9      	b.n	80095dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948c:	b29b      	uxth	r3, r3
 800948e:	2bff      	cmp	r3, #255	; 0xff
 8009490:	d90e      	bls.n	80094b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	22ff      	movs	r2, #255	; 0xff
 8009496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949c:	b2da      	uxtb	r2, r3
 800949e:	8979      	ldrh	r1, [r7, #10]
 80094a0:	2300      	movs	r3, #0
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 fdad 	bl	800a008 <I2C_TransferConfig>
 80094ae:	e00f      	b.n	80094d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	8979      	ldrh	r1, [r7, #10]
 80094c2:	2300      	movs	r3, #0
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 fd9c 	bl	800a008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094d0:	697a      	ldr	r2, [r7, #20]
 80094d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 fbb5 	bl	8009c44 <I2C_WaitOnTXISFlagUntilTimeout>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e07b      	b.n	80095dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	781a      	ldrb	r2, [r3, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fe:	b29b      	uxth	r3, r3
 8009500:	3b01      	subs	r3, #1
 8009502:	b29a      	uxth	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	3b01      	subs	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009518:	b29b      	uxth	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d034      	beq.n	8009588 <HAL_I2C_Mem_Write+0x1c8>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009522:	2b00      	cmp	r3, #0
 8009524:	d130      	bne.n	8009588 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	2200      	movs	r2, #0
 800952e:	2180      	movs	r1, #128	; 0x80
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 fb47 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e04d      	b.n	80095dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009544:	b29b      	uxth	r3, r3
 8009546:	2bff      	cmp	r3, #255	; 0xff
 8009548:	d90e      	bls.n	8009568 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009554:	b2da      	uxtb	r2, r3
 8009556:	8979      	ldrh	r1, [r7, #10]
 8009558:	2300      	movs	r3, #0
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fd51 	bl	800a008 <I2C_TransferConfig>
 8009566:	e00f      	b.n	8009588 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956c:	b29a      	uxth	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009576:	b2da      	uxtb	r2, r3
 8009578:	8979      	ldrh	r1, [r7, #10]
 800957a:	2300      	movs	r3, #0
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 fd40 	bl	800a008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958c:	b29b      	uxth	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d19e      	bne.n	80094d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fb94 	bl	8009cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e01a      	b.n	80095dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2220      	movs	r2, #32
 80095ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6859      	ldr	r1, [r3, #4]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	4b0a      	ldr	r3, [pc, #40]	; (80095e4 <HAL_I2C_Mem_Write+0x224>)
 80095ba:	400b      	ands	r3, r1
 80095bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	e000      	b.n	80095dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80095da:	2302      	movs	r3, #2
  }
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	fe00e800 	.word	0xfe00e800

080095e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af02      	add	r7, sp, #8
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	4608      	mov	r0, r1
 80095f2:	4611      	mov	r1, r2
 80095f4:	461a      	mov	r2, r3
 80095f6:	4603      	mov	r3, r0
 80095f8:	817b      	strh	r3, [r7, #10]
 80095fa:	460b      	mov	r3, r1
 80095fc:	813b      	strh	r3, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b20      	cmp	r3, #32
 800960c:	f040 80fd 	bne.w	800980a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009610:	6a3b      	ldr	r3, [r7, #32]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <HAL_I2C_Mem_Read+0x34>
 8009616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d105      	bne.n	8009628 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009622:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e0f1      	b.n	800980c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800962e:	2b01      	cmp	r3, #1
 8009630:	d101      	bne.n	8009636 <HAL_I2C_Mem_Read+0x4e>
 8009632:	2302      	movs	r3, #2
 8009634:	e0ea      	b.n	800980c <HAL_I2C_Mem_Read+0x224>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800963e:	f7fd f88f 	bl	8006760 <HAL_GetTick>
 8009642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	2319      	movs	r3, #25
 800964a:	2201      	movs	r2, #1
 800964c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 fab7 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e0d5      	b.n	800980c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2222      	movs	r2, #34	; 0x22
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2240      	movs	r2, #64	; 0x40
 800966c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a3a      	ldr	r2, [r7, #32]
 800967a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009688:	88f8      	ldrh	r0, [r7, #6]
 800968a:	893a      	ldrh	r2, [r7, #8]
 800968c:	8979      	ldrh	r1, [r7, #10]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	4603      	mov	r3, r0
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fa1b 	bl	8009ad4 <I2C_RequestMemoryRead>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e0ad      	b.n	800980c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2bff      	cmp	r3, #255	; 0xff
 80096b8:	d90e      	bls.n	80096d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	22ff      	movs	r2, #255	; 0xff
 80096be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	8979      	ldrh	r1, [r7, #10]
 80096c8:	4b52      	ldr	r3, [pc, #328]	; (8009814 <HAL_I2C_Mem_Read+0x22c>)
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f000 fc99 	bl	800a008 <I2C_TransferConfig>
 80096d6:	e00f      	b.n	80096f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e6:	b2da      	uxtb	r2, r3
 80096e8:	8979      	ldrh	r1, [r7, #10]
 80096ea:	4b4a      	ldr	r3, [pc, #296]	; (8009814 <HAL_I2C_Mem_Read+0x22c>)
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 fc88 	bl	800a008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	2200      	movs	r2, #0
 8009700:	2104      	movs	r1, #4
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fa5e 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e07c      	b.n	800980c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	b2d2      	uxtb	r2, r2
 800971e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800972e:	3b01      	subs	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009748:	b29b      	uxth	r3, r3
 800974a:	2b00      	cmp	r3, #0
 800974c:	d034      	beq.n	80097b8 <HAL_I2C_Mem_Read+0x1d0>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009752:	2b00      	cmp	r3, #0
 8009754:	d130      	bne.n	80097b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	2200      	movs	r2, #0
 800975e:	2180      	movs	r1, #128	; 0x80
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 fa2f 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e04d      	b.n	800980c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009774:	b29b      	uxth	r3, r3
 8009776:	2bff      	cmp	r3, #255	; 0xff
 8009778:	d90e      	bls.n	8009798 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	22ff      	movs	r2, #255	; 0xff
 800977e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009784:	b2da      	uxtb	r2, r3
 8009786:	8979      	ldrh	r1, [r7, #10]
 8009788:	2300      	movs	r3, #0
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 fc39 	bl	800a008 <I2C_TransferConfig>
 8009796:	e00f      	b.n	80097b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	8979      	ldrh	r1, [r7, #10]
 80097aa:	2300      	movs	r3, #0
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fc28 	bl	800a008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d19a      	bne.n	80096f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 fa7c 	bl	8009cc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e01a      	b.n	800980c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2220      	movs	r2, #32
 80097dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6859      	ldr	r1, [r3, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	4b0b      	ldr	r3, [pc, #44]	; (8009818 <HAL_I2C_Mem_Read+0x230>)
 80097ea:	400b      	ands	r3, r1
 80097ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	e000      	b.n	800980c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800980a:	2302      	movs	r3, #2
  }
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	80002400 	.word	0x80002400
 8009818:	fe00e800 	.word	0xfe00e800

0800981c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	; 0x28
 8009820:	af02      	add	r7, sp, #8
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	460b      	mov	r3, r1
 800982a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800982c:	2300      	movs	r3, #0
 800982e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b20      	cmp	r3, #32
 800983a:	f040 80f1 	bne.w	8009a20 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800984c:	d101      	bne.n	8009852 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800984e:	2302      	movs	r3, #2
 8009850:	e0e7      	b.n	8009a22 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009858:	2b01      	cmp	r3, #1
 800985a:	d101      	bne.n	8009860 <HAL_I2C_IsDeviceReady+0x44>
 800985c:	2302      	movs	r3, #2
 800985e:	e0e0      	b.n	8009a22 <HAL_I2C_IsDeviceReady+0x206>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2224      	movs	r2, #36	; 0x24
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d107      	bne.n	800988e <HAL_I2C_IsDeviceReady+0x72>
 800987e:	897b      	ldrh	r3, [r7, #10]
 8009880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009888:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800988c:	e004      	b.n	8009898 <HAL_I2C_IsDeviceReady+0x7c>
 800988e:	897b      	ldrh	r3, [r7, #10]
 8009890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009894:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	6812      	ldr	r2, [r2, #0]
 800989c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800989e:	f7fc ff5f 	bl	8006760 <HAL_GetTick>
 80098a2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	f003 0320 	and.w	r3, r3, #32
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	bf0c      	ite	eq
 80098b2:	2301      	moveq	r3, #1
 80098b4:	2300      	movne	r3, #0
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	f003 0310 	and.w	r3, r3, #16
 80098c4:	2b10      	cmp	r3, #16
 80098c6:	bf0c      	ite	eq
 80098c8:	2301      	moveq	r3, #1
 80098ca:	2300      	movne	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80098d0:	e034      	b.n	800993c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d8:	d01a      	beq.n	8009910 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80098da:	f7fc ff41 	bl	8006760 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d302      	bcc.n	80098f0 <HAL_I2C_IsDeviceReady+0xd4>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10f      	bne.n	8009910 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2220      	movs	r2, #32
 80098f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fc:	f043 0220 	orr.w	r2, r3, #32
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e088      	b.n	8009a22 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	2b20      	cmp	r3, #32
 800991c:	bf0c      	ite	eq
 800991e:	2301      	moveq	r3, #1
 8009920:	2300      	movne	r3, #0
 8009922:	b2db      	uxtb	r3, r3
 8009924:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	f003 0310 	and.w	r3, r3, #16
 8009930:	2b10      	cmp	r3, #16
 8009932:	bf0c      	ite	eq
 8009934:	2301      	moveq	r3, #1
 8009936:	2300      	movne	r3, #0
 8009938:	b2db      	uxtb	r3, r3
 800993a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800993c:	7ffb      	ldrb	r3, [r7, #31]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <HAL_I2C_IsDeviceReady+0x12c>
 8009942:	7fbb      	ldrb	r3, [r7, #30]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d0c4      	beq.n	80098d2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	f003 0310 	and.w	r3, r3, #16
 8009952:	2b10      	cmp	r3, #16
 8009954:	d01a      	beq.n	800998c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2200      	movs	r2, #0
 800995e:	2120      	movs	r1, #32
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f92f 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e058      	b.n	8009a22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2220      	movs	r2, #32
 8009976:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2220      	movs	r2, #32
 800997c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8009988:	2300      	movs	r3, #0
 800998a:	e04a      	b.n	8009a22 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2200      	movs	r2, #0
 8009994:	2120      	movs	r1, #32
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 f914 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e03d      	b.n	8009a22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2210      	movs	r2, #16
 80099ac:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2220      	movs	r2, #32
 80099b4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d118      	bne.n	80099f0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	685a      	ldr	r2, [r3, #4]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099cc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2200      	movs	r2, #0
 80099d6:	2120      	movs	r1, #32
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 f8f3 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d001      	beq.n	80099e8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e01c      	b.n	8009a22 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2220      	movs	r2, #32
 80099ee:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	3301      	adds	r3, #1
 80099f4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	f63f af3b 	bhi.w	8009876 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2220      	movs	r2, #32
 8009a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0c:	f043 0220 	orr.w	r2, r3, #32
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e000      	b.n	8009a22 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8009a20:	2302      	movs	r3, #2
  }
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3720      	adds	r7, #32
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
	...

08009a2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af02      	add	r7, sp, #8
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	4608      	mov	r0, r1
 8009a36:	4611      	mov	r1, r2
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	817b      	strh	r3, [r7, #10]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	813b      	strh	r3, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	8979      	ldrh	r1, [r7, #10]
 8009a4c:	4b20      	ldr	r3, [pc, #128]	; (8009ad0 <I2C_RequestMemoryWrite+0xa4>)
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 fad7 	bl	800a008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	69b9      	ldr	r1, [r7, #24]
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f000 f8f0 	bl	8009c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e02c      	b.n	8009ac8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a6e:	88fb      	ldrh	r3, [r7, #6]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d105      	bne.n	8009a80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009a74:	893b      	ldrh	r3, [r7, #8]
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	629a      	str	r2, [r3, #40]	; 0x28
 8009a7e:	e015      	b.n	8009aac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009a80:	893b      	ldrh	r3, [r7, #8]
 8009a82:	0a1b      	lsrs	r3, r3, #8
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	69b9      	ldr	r1, [r7, #24]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f8d6 	bl	8009c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e012      	b.n	8009ac8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009aa2:	893b      	ldrh	r3, [r7, #8]
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2180      	movs	r1, #128	; 0x80
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 f884 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	80002000 	.word	0x80002000

08009ad4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af02      	add	r7, sp, #8
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	4608      	mov	r0, r1
 8009ade:	4611      	mov	r1, r2
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	817b      	strh	r3, [r7, #10]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	813b      	strh	r3, [r7, #8]
 8009aea:	4613      	mov	r3, r2
 8009aec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	8979      	ldrh	r1, [r7, #10]
 8009af4:	4b20      	ldr	r3, [pc, #128]	; (8009b78 <I2C_RequestMemoryRead+0xa4>)
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	2300      	movs	r3, #0
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fa84 	bl	800a008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b00:	69fa      	ldr	r2, [r7, #28]
 8009b02:	69b9      	ldr	r1, [r7, #24]
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f89d 	bl	8009c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e02c      	b.n	8009b6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d105      	bne.n	8009b26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b1a:	893b      	ldrh	r3, [r7, #8]
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	629a      	str	r2, [r3, #40]	; 0x28
 8009b24:	e015      	b.n	8009b52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009b26:	893b      	ldrh	r3, [r7, #8]
 8009b28:	0a1b      	lsrs	r3, r3, #8
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b34:	69fa      	ldr	r2, [r7, #28]
 8009b36:	69b9      	ldr	r1, [r7, #24]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 f883 	bl	8009c44 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e012      	b.n	8009b6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009b48:	893b      	ldrh	r3, [r7, #8]
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2140      	movs	r1, #64	; 0x40
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 f831 	bl	8009bc4 <I2C_WaitOnFlagUntilTimeout>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e000      	b.n	8009b6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	80002000 	.word	0x80002000

08009b7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d103      	bne.n	8009b9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d007      	beq.n	8009bb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699a      	ldr	r2, [r3, #24]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	619a      	str	r2, [r3, #24]
  }
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bd4:	e022      	b.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bdc:	d01e      	beq.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bde:	f7fc fdbf 	bl	8006760 <HAL_GetTick>
 8009be2:	4602      	mov	r2, r0
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d302      	bcc.n	8009bf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d113      	bne.n	8009c1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf8:	f043 0220 	orr.w	r2, r3, #32
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e00f      	b.n	8009c3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	699a      	ldr	r2, [r3, #24]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	4013      	ands	r3, r2
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	bf0c      	ite	eq
 8009c2c:	2301      	moveq	r3, #1
 8009c2e:	2300      	movne	r3, #0
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	461a      	mov	r2, r3
 8009c34:	79fb      	ldrb	r3, [r7, #7]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d0cd      	beq.n	8009bd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009c50:	e02c      	b.n	8009cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	68b9      	ldr	r1, [r7, #8]
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 f8ea 	bl	8009e30 <I2C_IsErrorOccurred>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e02a      	b.n	8009cbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6c:	d01e      	beq.n	8009cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c6e:	f7fc fd77 	bl	8006760 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d302      	bcc.n	8009c84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d113      	bne.n	8009cac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c88:	f043 0220 	orr.w	r2, r3, #32
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2220      	movs	r2, #32
 8009c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e007      	b.n	8009cbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d1cb      	bne.n	8009c52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cd0:	e028      	b.n	8009d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	68b9      	ldr	r1, [r7, #8]
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f000 f8aa 	bl	8009e30 <I2C_IsErrorOccurred>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e026      	b.n	8009d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ce6:	f7fc fd3b 	bl	8006760 <HAL_GetTick>
 8009cea:	4602      	mov	r2, r0
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d302      	bcc.n	8009cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d113      	bne.n	8009d24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d00:	f043 0220 	orr.w	r2, r3, #32
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e007      	b.n	8009d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b20      	cmp	r3, #32
 8009d30:	d1cf      	bne.n	8009cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d48:	e064      	b.n	8009e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 f86e 	bl	8009e30 <I2C_IsErrorOccurred>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e062      	b.n	8009e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	f003 0320 	and.w	r3, r3, #32
 8009d68:	2b20      	cmp	r3, #32
 8009d6a:	d138      	bne.n	8009dde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	f003 0304 	and.w	r3, r3, #4
 8009d76:	2b04      	cmp	r3, #4
 8009d78:	d105      	bne.n	8009d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e04e      	b.n	8009e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	f003 0310 	and.w	r3, r3, #16
 8009d90:	2b10      	cmp	r3, #16
 8009d92:	d107      	bne.n	8009da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2210      	movs	r2, #16
 8009d9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2204      	movs	r2, #4
 8009da0:	645a      	str	r2, [r3, #68]	; 0x44
 8009da2:	e002      	b.n	8009daa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2200      	movs	r2, #0
 8009da8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2220      	movs	r2, #32
 8009db0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6859      	ldr	r1, [r3, #4]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	4b1b      	ldr	r3, [pc, #108]	; (8009e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8009dbe:	400b      	ands	r3, r1
 8009dc0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e022      	b.n	8009e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dde:	f7fc fcbf 	bl	8006760 <HAL_GetTick>
 8009de2:	4602      	mov	r2, r0
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d302      	bcc.n	8009df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10f      	bne.n	8009e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df8:	f043 0220 	orr.w	r2, r3, #32
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2220      	movs	r2, #32
 8009e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e007      	b.n	8009e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d193      	bne.n	8009d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	fe00e800 	.word	0xfe00e800

08009e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08a      	sub	sp, #40	; 0x28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f003 0310 	and.w	r3, r3, #16
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d075      	beq.n	8009f48 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2210      	movs	r2, #16
 8009e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e64:	e056      	b.n	8009f14 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6c:	d052      	beq.n	8009f14 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e6e:	f7fc fc77 	bl	8006760 <HAL_GetTick>
 8009e72:	4602      	mov	r2, r0
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d302      	bcc.n	8009e84 <I2C_IsErrorOccurred+0x54>
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d147      	bne.n	8009f14 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ea6:	d12e      	bne.n	8009f06 <I2C_IsErrorOccurred+0xd6>
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009eae:	d02a      	beq.n	8009f06 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009eb0:	7cfb      	ldrb	r3, [r7, #19]
 8009eb2:	2b20      	cmp	r3, #32
 8009eb4:	d027      	beq.n	8009f06 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ec4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ec6:	f7fc fc4b 	bl	8006760 <HAL_GetTick>
 8009eca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ecc:	e01b      	b.n	8009f06 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009ece:	f7fc fc47 	bl	8006760 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b19      	cmp	r3, #25
 8009eda:	d914      	bls.n	8009f06 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ee0:	f043 0220 	orr.w	r2, r3, #32
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d1dc      	bne.n	8009ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	f003 0320 	and.w	r3, r3, #32
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d003      	beq.n	8009f2a <I2C_IsErrorOccurred+0xfa>
 8009f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d09d      	beq.n	8009e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2220      	movs	r2, #32
 8009f38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	f043 0304 	orr.w	r3, r3, #4
 8009f40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00b      	beq.n	8009f72 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	f043 0301 	orr.w	r3, r3, #1
 8009f60:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	f043 0308 	orr.w	r3, r3, #8
 8009f82:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00b      	beq.n	8009fb6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	f043 0302 	orr.w	r3, r3, #2
 8009fa4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d01c      	beq.n	8009ff8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f7ff fddc 	bl	8009b7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6859      	ldr	r1, [r3, #4]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <I2C_IsErrorOccurred+0x1d4>)
 8009fd0:	400b      	ands	r3, r1
 8009fd2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	431a      	orrs	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3728      	adds	r7, #40	; 0x28
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	fe00e800 	.word	0xfe00e800

0800a008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	607b      	str	r3, [r7, #4]
 800a012:	460b      	mov	r3, r1
 800a014:	817b      	strh	r3, [r7, #10]
 800a016:	4613      	mov	r3, r2
 800a018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a01a:	897b      	ldrh	r3, [r7, #10]
 800a01c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a020:	7a7b      	ldrb	r3, [r7, #9]
 800a022:	041b      	lsls	r3, r3, #16
 800a024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a028:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	4313      	orrs	r3, r2
 800a032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a036:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685a      	ldr	r2, [r3, #4]
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	0d5b      	lsrs	r3, r3, #21
 800a042:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a046:	4b08      	ldr	r3, [pc, #32]	; (800a068 <I2C_TransferConfig+0x60>)
 800a048:	430b      	orrs	r3, r1
 800a04a:	43db      	mvns	r3, r3
 800a04c:	ea02 0103 	and.w	r1, r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	430a      	orrs	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	03ff63ff 	.word	0x03ff63ff

0800a06c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b20      	cmp	r3, #32
 800a080:	d138      	bne.n	800a0f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d101      	bne.n	800a090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a08c:	2302      	movs	r3, #2
 800a08e:	e032      	b.n	800a0f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2224      	movs	r2, #36	; 0x24
 800a09c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f022 0201 	bic.w	r2, r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a0be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6819      	ldr	r1, [r3, #0]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0201 	orr.w	r2, r2, #1
 800a0de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2220      	movs	r2, #32
 800a0e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	e000      	b.n	800a0f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a0f4:	2302      	movs	r3, #2
  }
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b20      	cmp	r3, #32
 800a116:	d139      	bne.n	800a18c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d101      	bne.n	800a126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a122:	2302      	movs	r3, #2
 800a124:	e033      	b.n	800a18e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2224      	movs	r2, #36	; 0x24
 800a132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f022 0201 	bic.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0201 	orr.w	r2, r2, #1
 800a176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	e000      	b.n	800a18e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a18c:	2302      	movs	r3, #2
  }
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
	...

0800a19c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a1a0:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <HAL_PWREx_GetVoltageRange+0x18>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	40007000 	.word	0x40007000

0800a1b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1c6:	d130      	bne.n	800a22a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a1c8:	4b23      	ldr	r3, [pc, #140]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d4:	d038      	beq.n	800a248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a1d6:	4b20      	ldr	r3, [pc, #128]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a1de:	4a1e      	ldr	r2, [pc, #120]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a1e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a1e6:	4b1d      	ldr	r3, [pc, #116]	; (800a25c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2232      	movs	r2, #50	; 0x32
 800a1ec:	fb02 f303 	mul.w	r3, r2, r3
 800a1f0:	4a1b      	ldr	r2, [pc, #108]	; (800a260 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	0c9b      	lsrs	r3, r3, #18
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a1fc:	e002      	b.n	800a204 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3b01      	subs	r3, #1
 800a202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a204:	4b14      	ldr	r3, [pc, #80]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a20c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a210:	d102      	bne.n	800a218 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1f2      	bne.n	800a1fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a218:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a224:	d110      	bne.n	800a248 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e00f      	b.n	800a24a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a22a:	4b0b      	ldr	r3, [pc, #44]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a236:	d007      	beq.n	800a248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a240:	4a05      	ldr	r2, [pc, #20]	; (800a258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a246:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40007000 	.word	0x40007000
 800a25c:	20000018 	.word	0x20000018
 800a260:	431bde83 	.word	0x431bde83

0800a264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d102      	bne.n	800a278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	f000 bc02 	b.w	800aa7c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a278:	4b96      	ldr	r3, [pc, #600]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f003 030c 	and.w	r3, r3, #12
 800a280:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a282:	4b94      	ldr	r3, [pc, #592]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f003 0303 	and.w	r3, r3, #3
 800a28a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0310 	and.w	r3, r3, #16
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 80e4 	beq.w	800a462 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d007      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x4c>
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	2b0c      	cmp	r3, #12
 800a2a4:	f040 808b 	bne.w	800a3be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	f040 8087 	bne.w	800a3be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a2b0:	4b88      	ldr	r3, [pc, #544]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d005      	beq.n	800a2c8 <HAL_RCC_OscConfig+0x64>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e3d9      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a1a      	ldr	r2, [r3, #32]
 800a2cc:	4b81      	ldr	r3, [pc, #516]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0308 	and.w	r3, r3, #8
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d004      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x7e>
 800a2d8:	4b7e      	ldr	r3, [pc, #504]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2e0:	e005      	b.n	800a2ee <HAL_RCC_OscConfig+0x8a>
 800a2e2:	4b7c      	ldr	r3, [pc, #496]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a2e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2e8:	091b      	lsrs	r3, r3, #4
 800a2ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d223      	bcs.n	800a33a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 fd8c 	bl	800ae14 <RCC_SetFlashLatencyFromMSIRange>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d001      	beq.n	800a306 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e3ba      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a306:	4b73      	ldr	r3, [pc, #460]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a72      	ldr	r2, [pc, #456]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a30c:	f043 0308 	orr.w	r3, r3, #8
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	4b70      	ldr	r3, [pc, #448]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	496d      	ldr	r1, [pc, #436]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a320:	4313      	orrs	r3, r2
 800a322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a324:	4b6b      	ldr	r3, [pc, #428]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	021b      	lsls	r3, r3, #8
 800a332:	4968      	ldr	r1, [pc, #416]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a334:	4313      	orrs	r3, r2
 800a336:	604b      	str	r3, [r1, #4]
 800a338:	e025      	b.n	800a386 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a33a:	4b66      	ldr	r3, [pc, #408]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a65      	ldr	r2, [pc, #404]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a340:	f043 0308 	orr.w	r3, r3, #8
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	4b63      	ldr	r3, [pc, #396]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	4960      	ldr	r1, [pc, #384]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a354:	4313      	orrs	r3, r2
 800a356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a358:	4b5e      	ldr	r3, [pc, #376]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	69db      	ldr	r3, [r3, #28]
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	495b      	ldr	r1, [pc, #364]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a368:	4313      	orrs	r3, r2
 800a36a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d109      	bne.n	800a386 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fd4c 	bl	800ae14 <RCC_SetFlashLatencyFromMSIRange>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e37a      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a386:	f000 fc81 	bl	800ac8c <HAL_RCC_GetSysClockFreq>
 800a38a:	4602      	mov	r2, r0
 800a38c:	4b51      	ldr	r3, [pc, #324]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	091b      	lsrs	r3, r3, #4
 800a392:	f003 030f 	and.w	r3, r3, #15
 800a396:	4950      	ldr	r1, [pc, #320]	; (800a4d8 <HAL_RCC_OscConfig+0x274>)
 800a398:	5ccb      	ldrb	r3, [r1, r3]
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a2:	4a4e      	ldr	r2, [pc, #312]	; (800a4dc <HAL_RCC_OscConfig+0x278>)
 800a3a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a3a6:	4b4e      	ldr	r3, [pc, #312]	; (800a4e0 <HAL_RCC_OscConfig+0x27c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fc f988 	bl	80066c0 <HAL_InitTick>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d052      	beq.n	800a460 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
 800a3bc:	e35e      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d032      	beq.n	800a42c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a3c6:	4b43      	ldr	r3, [pc, #268]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a42      	ldr	r2, [pc, #264]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a3cc:	f043 0301 	orr.w	r3, r3, #1
 800a3d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a3d2:	f7fc f9c5 	bl	8006760 <HAL_GetTick>
 800a3d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a3d8:	e008      	b.n	800a3ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a3da:	f7fc f9c1 	bl	8006760 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d901      	bls.n	800a3ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e347      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a3ec:	4b39      	ldr	r3, [pc, #228]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0f0      	beq.n	800a3da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a3f8:	4b36      	ldr	r3, [pc, #216]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a35      	ldr	r2, [pc, #212]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a3fe:	f043 0308 	orr.w	r3, r3, #8
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	4b33      	ldr	r3, [pc, #204]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	4930      	ldr	r1, [pc, #192]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a412:	4313      	orrs	r3, r2
 800a414:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a416:	4b2f      	ldr	r3, [pc, #188]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	492b      	ldr	r1, [pc, #172]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a426:	4313      	orrs	r3, r2
 800a428:	604b      	str	r3, [r1, #4]
 800a42a:	e01a      	b.n	800a462 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a42c:	4b29      	ldr	r3, [pc, #164]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a28      	ldr	r2, [pc, #160]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a432:	f023 0301 	bic.w	r3, r3, #1
 800a436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a438:	f7fc f992 	bl	8006760 <HAL_GetTick>
 800a43c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a43e:	e008      	b.n	800a452 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a440:	f7fc f98e 	bl	8006760 <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e314      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a452:	4b20      	ldr	r3, [pc, #128]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 0302 	and.w	r3, r3, #2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1f0      	bne.n	800a440 <HAL_RCC_OscConfig+0x1dc>
 800a45e:	e000      	b.n	800a462 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a460:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 0301 	and.w	r3, r3, #1
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d073      	beq.n	800a556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2b08      	cmp	r3, #8
 800a472:	d005      	beq.n	800a480 <HAL_RCC_OscConfig+0x21c>
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	2b0c      	cmp	r3, #12
 800a478:	d10e      	bne.n	800a498 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d10b      	bne.n	800a498 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a480:	4b14      	ldr	r3, [pc, #80]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d063      	beq.n	800a554 <HAL_RCC_OscConfig+0x2f0>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d15f      	bne.n	800a554 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e2f1      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a0:	d106      	bne.n	800a4b0 <HAL_RCC_OscConfig+0x24c>
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a0b      	ldr	r2, [pc, #44]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a4a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4ac:	6013      	str	r3, [r2, #0]
 800a4ae:	e025      	b.n	800a4fc <HAL_RCC_OscConfig+0x298>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4b8:	d114      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x280>
 800a4ba:	4b06      	ldr	r3, [pc, #24]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a05      	ldr	r2, [pc, #20]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a4c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	4b03      	ldr	r3, [pc, #12]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a02      	ldr	r2, [pc, #8]	; (800a4d4 <HAL_RCC_OscConfig+0x270>)
 800a4cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e013      	b.n	800a4fc <HAL_RCC_OscConfig+0x298>
 800a4d4:	40021000 	.word	0x40021000
 800a4d8:	080122ec 	.word	0x080122ec
 800a4dc:	20000018 	.word	0x20000018
 800a4e0:	2000001c 	.word	0x2000001c
 800a4e4:	4ba0      	ldr	r3, [pc, #640]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a9f      	ldr	r2, [pc, #636]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a4ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	4b9d      	ldr	r3, [pc, #628]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a9c      	ldr	r2, [pc, #624]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a4f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d013      	beq.n	800a52c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a504:	f7fc f92c 	bl	8006760 <HAL_GetTick>
 800a508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a50a:	e008      	b.n	800a51e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a50c:	f7fc f928 	bl	8006760 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b64      	cmp	r3, #100	; 0x64
 800a518:	d901      	bls.n	800a51e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e2ae      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a51e:	4b92      	ldr	r3, [pc, #584]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0f0      	beq.n	800a50c <HAL_RCC_OscConfig+0x2a8>
 800a52a:	e014      	b.n	800a556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a52c:	f7fc f918 	bl	8006760 <HAL_GetTick>
 800a530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a532:	e008      	b.n	800a546 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a534:	f7fc f914 	bl	8006760 <HAL_GetTick>
 800a538:	4602      	mov	r2, r0
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	2b64      	cmp	r3, #100	; 0x64
 800a540:	d901      	bls.n	800a546 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e29a      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a546:	4b88      	ldr	r3, [pc, #544]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1f0      	bne.n	800a534 <HAL_RCC_OscConfig+0x2d0>
 800a552:	e000      	b.n	800a556 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 0302 	and.w	r3, r3, #2
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d060      	beq.n	800a624 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2b04      	cmp	r3, #4
 800a566:	d005      	beq.n	800a574 <HAL_RCC_OscConfig+0x310>
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	2b0c      	cmp	r3, #12
 800a56c:	d119      	bne.n	800a5a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d116      	bne.n	800a5a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a574:	4b7c      	ldr	r3, [pc, #496]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_RCC_OscConfig+0x328>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	e277      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a58c:	4b76      	ldr	r3, [pc, #472]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	061b      	lsls	r3, r3, #24
 800a59a:	4973      	ldr	r1, [pc, #460]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5a0:	e040      	b.n	800a624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d023      	beq.n	800a5f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5aa:	4b6f      	ldr	r3, [pc, #444]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a6e      	ldr	r2, [pc, #440]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a5b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5b6:	f7fc f8d3 	bl	8006760 <HAL_GetTick>
 800a5ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5bc:	e008      	b.n	800a5d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5be:	f7fc f8cf 	bl	8006760 <HAL_GetTick>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d901      	bls.n	800a5d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	e255      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5d0:	4b65      	ldr	r3, [pc, #404]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d0f0      	beq.n	800a5be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5dc:	4b62      	ldr	r3, [pc, #392]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	061b      	lsls	r3, r3, #24
 800a5ea:	495f      	ldr	r1, [pc, #380]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	604b      	str	r3, [r1, #4]
 800a5f0:	e018      	b.n	800a624 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5f2:	4b5d      	ldr	r3, [pc, #372]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a5c      	ldr	r2, [pc, #368]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a5f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5fe:	f7fc f8af 	bl	8006760 <HAL_GetTick>
 800a602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a604:	e008      	b.n	800a618 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a606:	f7fc f8ab 	bl	8006760 <HAL_GetTick>
 800a60a:	4602      	mov	r2, r0
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	1ad3      	subs	r3, r2, r3
 800a610:	2b02      	cmp	r3, #2
 800a612:	d901      	bls.n	800a618 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a614:	2303      	movs	r3, #3
 800a616:	e231      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a618:	4b53      	ldr	r3, [pc, #332]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1f0      	bne.n	800a606 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d03c      	beq.n	800a6aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	695b      	ldr	r3, [r3, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01c      	beq.n	800a672 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a638:	4b4b      	ldr	r3, [pc, #300]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a63a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a63e:	4a4a      	ldr	r2, [pc, #296]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a640:	f043 0301 	orr.w	r3, r3, #1
 800a644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a648:	f7fc f88a 	bl	8006760 <HAL_GetTick>
 800a64c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a64e:	e008      	b.n	800a662 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a650:	f7fc f886 	bl	8006760 <HAL_GetTick>
 800a654:	4602      	mov	r2, r0
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d901      	bls.n	800a662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e20c      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a662:	4b41      	ldr	r3, [pc, #260]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d0ef      	beq.n	800a650 <HAL_RCC_OscConfig+0x3ec>
 800a670:	e01b      	b.n	800a6aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a672:	4b3d      	ldr	r3, [pc, #244]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a678:	4a3b      	ldr	r2, [pc, #236]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a67a:	f023 0301 	bic.w	r3, r3, #1
 800a67e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a682:	f7fc f86d 	bl	8006760 <HAL_GetTick>
 800a686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a688:	e008      	b.n	800a69c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a68a:	f7fc f869 	bl	8006760 <HAL_GetTick>
 800a68e:	4602      	mov	r2, r0
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	2b02      	cmp	r3, #2
 800a696:	d901      	bls.n	800a69c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a698:	2303      	movs	r3, #3
 800a69a:	e1ef      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a69c:	4b32      	ldr	r3, [pc, #200]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a69e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1ef      	bne.n	800a68a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 80a6 	beq.w	800a804 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a6bc:	4b2a      	ldr	r3, [pc, #168]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a6be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10d      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6c8:	4b27      	ldr	r3, [pc, #156]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6cc:	4a26      	ldr	r2, [pc, #152]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a6ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d2:	6593      	str	r3, [r2, #88]	; 0x58
 800a6d4:	4b24      	ldr	r3, [pc, #144]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a6d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6dc:	60bb      	str	r3, [r7, #8]
 800a6de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6e4:	4b21      	ldr	r3, [pc, #132]	; (800a76c <HAL_RCC_OscConfig+0x508>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d118      	bne.n	800a722 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a6f0:	4b1e      	ldr	r3, [pc, #120]	; (800a76c <HAL_RCC_OscConfig+0x508>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a1d      	ldr	r2, [pc, #116]	; (800a76c <HAL_RCC_OscConfig+0x508>)
 800a6f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6fc:	f7fc f830 	bl	8006760 <HAL_GetTick>
 800a700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a702:	e008      	b.n	800a716 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a704:	f7fc f82c 	bl	8006760 <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d901      	bls.n	800a716 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e1b2      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a716:	4b15      	ldr	r3, [pc, #84]	; (800a76c <HAL_RCC_OscConfig+0x508>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d0f0      	beq.n	800a704 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d108      	bne.n	800a73c <HAL_RCC_OscConfig+0x4d8>
 800a72a:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a730:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a732:	f043 0301 	orr.w	r3, r3, #1
 800a736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a73a:	e029      	b.n	800a790 <HAL_RCC_OscConfig+0x52c>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	2b05      	cmp	r3, #5
 800a742:	d115      	bne.n	800a770 <HAL_RCC_OscConfig+0x50c>
 800a744:	4b08      	ldr	r3, [pc, #32]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74a:	4a07      	ldr	r2, [pc, #28]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a74c:	f043 0304 	orr.w	r3, r3, #4
 800a750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a75a:	4a03      	ldr	r2, [pc, #12]	; (800a768 <HAL_RCC_OscConfig+0x504>)
 800a75c:	f043 0301 	orr.w	r3, r3, #1
 800a760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a764:	e014      	b.n	800a790 <HAL_RCC_OscConfig+0x52c>
 800a766:	bf00      	nop
 800a768:	40021000 	.word	0x40021000
 800a76c:	40007000 	.word	0x40007000
 800a770:	4b9a      	ldr	r3, [pc, #616]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a776:	4a99      	ldr	r2, [pc, #612]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a778:	f023 0301 	bic.w	r3, r3, #1
 800a77c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a780:	4b96      	ldr	r3, [pc, #600]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a786:	4a95      	ldr	r2, [pc, #596]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a788:	f023 0304 	bic.w	r3, r3, #4
 800a78c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d016      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a798:	f7fb ffe2 	bl	8006760 <HAL_GetTick>
 800a79c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a79e:	e00a      	b.n	800a7b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7a0:	f7fb ffde 	bl	8006760 <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d901      	bls.n	800a7b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e162      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7b6:	4b89      	ldr	r3, [pc, #548]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7bc:	f003 0302 	and.w	r3, r3, #2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0ed      	beq.n	800a7a0 <HAL_RCC_OscConfig+0x53c>
 800a7c4:	e015      	b.n	800a7f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7c6:	f7fb ffcb 	bl	8006760 <HAL_GetTick>
 800a7ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7cc:	e00a      	b.n	800a7e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7ce:	f7fb ffc7 	bl	8006760 <HAL_GetTick>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d901      	bls.n	800a7e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e14b      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7e4:	4b7d      	ldr	r3, [pc, #500]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ea:	f003 0302 	and.w	r3, r3, #2
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1ed      	bne.n	800a7ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a7f2:	7ffb      	ldrb	r3, [r7, #31]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d105      	bne.n	800a804 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7f8:	4b78      	ldr	r3, [pc, #480]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a7fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7fc:	4a77      	ldr	r2, [pc, #476]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a7fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0320 	and.w	r3, r3, #32
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d03c      	beq.n	800a88a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	d01c      	beq.n	800a852 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a818:	4b70      	ldr	r3, [pc, #448]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a81a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a81e:	4a6f      	ldr	r2, [pc, #444]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a820:	f043 0301 	orr.w	r3, r3, #1
 800a824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a828:	f7fb ff9a 	bl	8006760 <HAL_GetTick>
 800a82c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a82e:	e008      	b.n	800a842 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a830:	f7fb ff96 	bl	8006760 <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d901      	bls.n	800a842 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a83e:	2303      	movs	r3, #3
 800a840:	e11c      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a842:	4b66      	ldr	r3, [pc, #408]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0ef      	beq.n	800a830 <HAL_RCC_OscConfig+0x5cc>
 800a850:	e01b      	b.n	800a88a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a852:	4b62      	ldr	r3, [pc, #392]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a858:	4a60      	ldr	r2, [pc, #384]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a85a:	f023 0301 	bic.w	r3, r3, #1
 800a85e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a862:	f7fb ff7d 	bl	8006760 <HAL_GetTick>
 800a866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a868:	e008      	b.n	800a87c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a86a:	f7fb ff79 	bl	8006760 <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d901      	bls.n	800a87c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e0ff      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a87c:	4b57      	ldr	r3, [pc, #348]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a87e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1ef      	bne.n	800a86a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 80f3 	beq.w	800aa7a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a898:	2b02      	cmp	r3, #2
 800a89a:	f040 80c9 	bne.w	800aa30 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a89e:	4b4f      	ldr	r3, [pc, #316]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f003 0203 	and.w	r2, r3, #3
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d12c      	bne.n	800a90c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	3b01      	subs	r3, #1
 800a8be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d123      	bne.n	800a90c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d11b      	bne.n	800a90c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d113      	bne.n	800a90c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ee:	085b      	lsrs	r3, r3, #1
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d109      	bne.n	800a90c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	085b      	lsrs	r3, r3, #1
 800a904:	3b01      	subs	r3, #1
 800a906:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a908:	429a      	cmp	r2, r3
 800a90a:	d06b      	beq.n	800a9e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	2b0c      	cmp	r3, #12
 800a910:	d062      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a912:	4b32      	ldr	r3, [pc, #200]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e0ac      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a922:	4b2e      	ldr	r3, [pc, #184]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a2d      	ldr	r2, [pc, #180]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a92c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a92e:	f7fb ff17 	bl	8006760 <HAL_GetTick>
 800a932:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a934:	e008      	b.n	800a948 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a936:	f7fb ff13 	bl	8006760 <HAL_GetTick>
 800a93a:	4602      	mov	r2, r0
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	2b02      	cmp	r3, #2
 800a942:	d901      	bls.n	800a948 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e099      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a948:	4b24      	ldr	r3, [pc, #144]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1f0      	bne.n	800a936 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a954:	4b21      	ldr	r3, [pc, #132]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	4b21      	ldr	r3, [pc, #132]	; (800a9e0 <HAL_RCC_OscConfig+0x77c>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a964:	3a01      	subs	r2, #1
 800a966:	0112      	lsls	r2, r2, #4
 800a968:	4311      	orrs	r1, r2
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a96e:	0212      	lsls	r2, r2, #8
 800a970:	4311      	orrs	r1, r2
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a976:	0852      	lsrs	r2, r2, #1
 800a978:	3a01      	subs	r2, #1
 800a97a:	0552      	lsls	r2, r2, #21
 800a97c:	4311      	orrs	r1, r2
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a982:	0852      	lsrs	r2, r2, #1
 800a984:	3a01      	subs	r2, #1
 800a986:	0652      	lsls	r2, r2, #25
 800a988:	4311      	orrs	r1, r2
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a98e:	06d2      	lsls	r2, r2, #27
 800a990:	430a      	orrs	r2, r1
 800a992:	4912      	ldr	r1, [pc, #72]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a994:	4313      	orrs	r3, r2
 800a996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a998:	4b10      	ldr	r3, [pc, #64]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a0f      	ldr	r2, [pc, #60]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a99e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a9a4:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	4a0c      	ldr	r2, [pc, #48]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a9aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a9b0:	f7fb fed6 	bl	8006760 <HAL_GetTick>
 800a9b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9b8:	f7fb fed2 	bl	8006760 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e058      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9ca:	4b04      	ldr	r3, [pc, #16]	; (800a9dc <HAL_RCC_OscConfig+0x778>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0f0      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a9d6:	e050      	b.n	800aa7a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e04f      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
 800a9dc:	40021000 	.word	0x40021000
 800a9e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9e4:	4b27      	ldr	r3, [pc, #156]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d144      	bne.n	800aa7a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a9f0:	4b24      	ldr	r3, [pc, #144]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a23      	ldr	r2, [pc, #140]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800a9f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a9fc:	4b21      	ldr	r3, [pc, #132]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	4a20      	ldr	r2, [pc, #128]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800aa02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa08:	f7fb feaa 	bl	8006760 <HAL_GetTick>
 800aa0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa0e:	e008      	b.n	800aa22 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa10:	f7fb fea6 	bl	8006760 <HAL_GetTick>
 800aa14:	4602      	mov	r2, r0
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d901      	bls.n	800aa22 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e02c      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aa22:	4b18      	ldr	r3, [pc, #96]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0f0      	beq.n	800aa10 <HAL_RCC_OscConfig+0x7ac>
 800aa2e:	e024      	b.n	800aa7a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	2b0c      	cmp	r3, #12
 800aa34:	d01f      	beq.n	800aa76 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa36:	4b13      	ldr	r3, [pc, #76]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a12      	ldr	r2, [pc, #72]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800aa3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa42:	f7fb fe8d 	bl	8006760 <HAL_GetTick>
 800aa46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa48:	e008      	b.n	800aa5c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa4a:	f7fb fe89 	bl	8006760 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d901      	bls.n	800aa5c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e00f      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1f0      	bne.n	800aa4a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800aa68:	4b06      	ldr	r3, [pc, #24]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800aa6a:	68da      	ldr	r2, [r3, #12]
 800aa6c:	4905      	ldr	r1, [pc, #20]	; (800aa84 <HAL_RCC_OscConfig+0x820>)
 800aa6e:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <HAL_RCC_OscConfig+0x824>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	60cb      	str	r3, [r1, #12]
 800aa74:	e001      	b.n	800aa7a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e000      	b.n	800aa7c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3720      	adds	r7, #32
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	40021000 	.word	0x40021000
 800aa88:	feeefffc 	.word	0xfeeefffc

0800aa8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e0e7      	b.n	800ac70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aaa0:	4b75      	ldr	r3, [pc, #468]	; (800ac78 <HAL_RCC_ClockConfig+0x1ec>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0307 	and.w	r3, r3, #7
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d910      	bls.n	800aad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaae:	4b72      	ldr	r3, [pc, #456]	; (800ac78 <HAL_RCC_ClockConfig+0x1ec>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f023 0207 	bic.w	r2, r3, #7
 800aab6:	4970      	ldr	r1, [pc, #448]	; (800ac78 <HAL_RCC_ClockConfig+0x1ec>)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aabe:	4b6e      	ldr	r3, [pc, #440]	; (800ac78 <HAL_RCC_ClockConfig+0x1ec>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0307 	and.w	r3, r3, #7
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d001      	beq.n	800aad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e0cf      	b.n	800ac70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d010      	beq.n	800aafe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	689a      	ldr	r2, [r3, #8]
 800aae0:	4b66      	ldr	r3, [pc, #408]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d908      	bls.n	800aafe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aaec:	4b63      	ldr	r3, [pc, #396]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	4960      	ldr	r1, [pc, #384]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d04c      	beq.n	800aba4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d107      	bne.n	800ab22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ab12:	4b5a      	ldr	r3, [pc, #360]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d121      	bne.n	800ab62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e0a6      	b.n	800ac70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d107      	bne.n	800ab3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab2a:	4b54      	ldr	r3, [pc, #336]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d115      	bne.n	800ab62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e09a      	b.n	800ac70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d107      	bne.n	800ab52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab42:	4b4e      	ldr	r3, [pc, #312]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 0302 	and.w	r3, r3, #2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e08e      	b.n	800ac70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab52:	4b4a      	ldr	r3, [pc, #296]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e086      	b.n	800ac70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab62:	4b46      	ldr	r3, [pc, #280]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f023 0203 	bic.w	r2, r3, #3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	4943      	ldr	r1, [pc, #268]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab74:	f7fb fdf4 	bl	8006760 <HAL_GetTick>
 800ab78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab7a:	e00a      	b.n	800ab92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab7c:	f7fb fdf0 	bl	8006760 <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d901      	bls.n	800ab92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e06e      	b.n	800ac70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab92:	4b3a      	ldr	r3, [pc, #232]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f003 020c 	and.w	r2, r3, #12
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d1eb      	bne.n	800ab7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d010      	beq.n	800abd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	4b31      	ldr	r3, [pc, #196]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d208      	bcs.n	800abd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abc0:	4b2e      	ldr	r3, [pc, #184]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	492b      	ldr	r1, [pc, #172]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800abd2:	4b29      	ldr	r3, [pc, #164]	; (800ac78 <HAL_RCC_ClockConfig+0x1ec>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 0307 	and.w	r3, r3, #7
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d210      	bcs.n	800ac02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abe0:	4b25      	ldr	r3, [pc, #148]	; (800ac78 <HAL_RCC_ClockConfig+0x1ec>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f023 0207 	bic.w	r2, r3, #7
 800abe8:	4923      	ldr	r1, [pc, #140]	; (800ac78 <HAL_RCC_ClockConfig+0x1ec>)
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	4313      	orrs	r3, r2
 800abee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800abf0:	4b21      	ldr	r3, [pc, #132]	; (800ac78 <HAL_RCC_ClockConfig+0x1ec>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0307 	and.w	r3, r3, #7
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d001      	beq.n	800ac02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e036      	b.n	800ac70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d008      	beq.n	800ac20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac0e:	4b1b      	ldr	r3, [pc, #108]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	4918      	ldr	r1, [pc, #96]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0308 	and.w	r3, r3, #8
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d009      	beq.n	800ac40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ac2c:	4b13      	ldr	r3, [pc, #76]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	4910      	ldr	r1, [pc, #64]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ac40:	f000 f824 	bl	800ac8c <HAL_RCC_GetSysClockFreq>
 800ac44:	4602      	mov	r2, r0
 800ac46:	4b0d      	ldr	r3, [pc, #52]	; (800ac7c <HAL_RCC_ClockConfig+0x1f0>)
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	091b      	lsrs	r3, r3, #4
 800ac4c:	f003 030f 	and.w	r3, r3, #15
 800ac50:	490b      	ldr	r1, [pc, #44]	; (800ac80 <HAL_RCC_ClockConfig+0x1f4>)
 800ac52:	5ccb      	ldrb	r3, [r1, r3]
 800ac54:	f003 031f 	and.w	r3, r3, #31
 800ac58:	fa22 f303 	lsr.w	r3, r2, r3
 800ac5c:	4a09      	ldr	r2, [pc, #36]	; (800ac84 <HAL_RCC_ClockConfig+0x1f8>)
 800ac5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ac60:	4b09      	ldr	r3, [pc, #36]	; (800ac88 <HAL_RCC_ClockConfig+0x1fc>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fb fd2b 	bl	80066c0 <HAL_InitTick>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	72fb      	strb	r3, [r7, #11]

  return status;
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	40022000 	.word	0x40022000
 800ac7c:	40021000 	.word	0x40021000
 800ac80:	080122ec 	.word	0x080122ec
 800ac84:	20000018 	.word	0x20000018
 800ac88:	2000001c 	.word	0x2000001c

0800ac8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b089      	sub	sp, #36	; 0x24
 800ac90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	61fb      	str	r3, [r7, #28]
 800ac96:	2300      	movs	r3, #0
 800ac98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac9a:	4b3e      	ldr	r3, [pc, #248]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f003 030c 	and.w	r3, r3, #12
 800aca2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aca4:	4b3b      	ldr	r3, [pc, #236]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d005      	beq.n	800acc0 <HAL_RCC_GetSysClockFreq+0x34>
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	2b0c      	cmp	r3, #12
 800acb8:	d121      	bne.n	800acfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d11e      	bne.n	800acfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800acc0:	4b34      	ldr	r3, [pc, #208]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0308 	and.w	r3, r3, #8
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d107      	bne.n	800acdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800accc:	4b31      	ldr	r3, [pc, #196]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800acce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	61fb      	str	r3, [r7, #28]
 800acda:	e005      	b.n	800ace8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800acdc:	4b2d      	ldr	r3, [pc, #180]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	091b      	lsrs	r3, r3, #4
 800ace2:	f003 030f 	and.w	r3, r3, #15
 800ace6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ace8:	4a2b      	ldr	r2, [pc, #172]	; (800ad98 <HAL_RCC_GetSysClockFreq+0x10c>)
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10d      	bne.n	800ad14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800acfc:	e00a      	b.n	800ad14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	2b04      	cmp	r3, #4
 800ad02:	d102      	bne.n	800ad0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ad04:	4b25      	ldr	r3, [pc, #148]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x110>)
 800ad06:	61bb      	str	r3, [r7, #24]
 800ad08:	e004      	b.n	800ad14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	2b08      	cmp	r3, #8
 800ad0e:	d101      	bne.n	800ad14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ad10:	4b23      	ldr	r3, [pc, #140]	; (800ada0 <HAL_RCC_GetSysClockFreq+0x114>)
 800ad12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2b0c      	cmp	r3, #12
 800ad18:	d134      	bne.n	800ad84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ad1a:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	f003 0303 	and.w	r3, r3, #3
 800ad22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	d003      	beq.n	800ad32 <HAL_RCC_GetSysClockFreq+0xa6>
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d003      	beq.n	800ad38 <HAL_RCC_GetSysClockFreq+0xac>
 800ad30:	e005      	b.n	800ad3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ad32:	4b1a      	ldr	r3, [pc, #104]	; (800ad9c <HAL_RCC_GetSysClockFreq+0x110>)
 800ad34:	617b      	str	r3, [r7, #20]
      break;
 800ad36:	e005      	b.n	800ad44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ad38:	4b19      	ldr	r3, [pc, #100]	; (800ada0 <HAL_RCC_GetSysClockFreq+0x114>)
 800ad3a:	617b      	str	r3, [r7, #20]
      break;
 800ad3c:	e002      	b.n	800ad44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	617b      	str	r3, [r7, #20]
      break;
 800ad42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad44:	4b13      	ldr	r3, [pc, #76]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	091b      	lsrs	r3, r3, #4
 800ad4a:	f003 0307 	and.w	r3, r3, #7
 800ad4e:	3301      	adds	r3, #1
 800ad50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ad52:	4b10      	ldr	r3, [pc, #64]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	0a1b      	lsrs	r3, r3, #8
 800ad58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	fb03 f202 	mul.w	r2, r3, r2
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad6a:	4b0a      	ldr	r3, [pc, #40]	; (800ad94 <HAL_RCC_GetSysClockFreq+0x108>)
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	0e5b      	lsrs	r3, r3, #25
 800ad70:	f003 0303 	and.w	r3, r3, #3
 800ad74:	3301      	adds	r3, #1
 800ad76:	005b      	lsls	r3, r3, #1
 800ad78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800ad84:	69bb      	ldr	r3, [r7, #24]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3724      	adds	r7, #36	; 0x24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	40021000 	.word	0x40021000
 800ad98:	08012304 	.word	0x08012304
 800ad9c:	00f42400 	.word	0x00f42400
 800ada0:	007a1200 	.word	0x007a1200

0800ada4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ada4:	b480      	push	{r7}
 800ada6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ada8:	4b03      	ldr	r3, [pc, #12]	; (800adb8 <HAL_RCC_GetHCLKFreq+0x14>)
 800adaa:	681b      	ldr	r3, [r3, #0]
}
 800adac:	4618      	mov	r0, r3
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	20000018 	.word	0x20000018

0800adbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800adc0:	f7ff fff0 	bl	800ada4 <HAL_RCC_GetHCLKFreq>
 800adc4:	4602      	mov	r2, r0
 800adc6:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	0a1b      	lsrs	r3, r3, #8
 800adcc:	f003 0307 	and.w	r3, r3, #7
 800add0:	4904      	ldr	r1, [pc, #16]	; (800ade4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800add2:	5ccb      	ldrb	r3, [r1, r3]
 800add4:	f003 031f 	and.w	r3, r3, #31
 800add8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800addc:	4618      	mov	r0, r3
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	40021000 	.word	0x40021000
 800ade4:	080122fc 	.word	0x080122fc

0800ade8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800adec:	f7ff ffda 	bl	800ada4 <HAL_RCC_GetHCLKFreq>
 800adf0:	4602      	mov	r2, r0
 800adf2:	4b06      	ldr	r3, [pc, #24]	; (800ae0c <HAL_RCC_GetPCLK2Freq+0x24>)
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	0adb      	lsrs	r3, r3, #11
 800adf8:	f003 0307 	and.w	r3, r3, #7
 800adfc:	4904      	ldr	r1, [pc, #16]	; (800ae10 <HAL_RCC_GetPCLK2Freq+0x28>)
 800adfe:	5ccb      	ldrb	r3, [r1, r3]
 800ae00:	f003 031f 	and.w	r3, r3, #31
 800ae04:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	40021000 	.word	0x40021000
 800ae10:	080122fc 	.word	0x080122fc

0800ae14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ae20:	4b2a      	ldr	r3, [pc, #168]	; (800aecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ae22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ae2c:	f7ff f9b6 	bl	800a19c <HAL_PWREx_GetVoltageRange>
 800ae30:	6178      	str	r0, [r7, #20]
 800ae32:	e014      	b.n	800ae5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ae34:	4b25      	ldr	r3, [pc, #148]	; (800aecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ae36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae38:	4a24      	ldr	r2, [pc, #144]	; (800aecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ae3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae3e:	6593      	str	r3, [r2, #88]	; 0x58
 800ae40:	4b22      	ldr	r3, [pc, #136]	; (800aecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ae42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800ae4c:	f7ff f9a6 	bl	800a19c <HAL_PWREx_GetVoltageRange>
 800ae50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ae52:	4b1e      	ldr	r3, [pc, #120]	; (800aecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ae54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae56:	4a1d      	ldr	r2, [pc, #116]	; (800aecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ae58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae64:	d10b      	bne.n	800ae7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b80      	cmp	r3, #128	; 0x80
 800ae6a:	d919      	bls.n	800aea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2ba0      	cmp	r3, #160	; 0xa0
 800ae70:	d902      	bls.n	800ae78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ae72:	2302      	movs	r3, #2
 800ae74:	613b      	str	r3, [r7, #16]
 800ae76:	e013      	b.n	800aea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ae78:	2301      	movs	r3, #1
 800ae7a:	613b      	str	r3, [r7, #16]
 800ae7c:	e010      	b.n	800aea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b80      	cmp	r3, #128	; 0x80
 800ae82:	d902      	bls.n	800ae8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800ae84:	2303      	movs	r3, #3
 800ae86:	613b      	str	r3, [r7, #16]
 800ae88:	e00a      	b.n	800aea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2b80      	cmp	r3, #128	; 0x80
 800ae8e:	d102      	bne.n	800ae96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ae90:	2302      	movs	r3, #2
 800ae92:	613b      	str	r3, [r7, #16]
 800ae94:	e004      	b.n	800aea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b70      	cmp	r3, #112	; 0x70
 800ae9a:	d101      	bne.n	800aea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800aea0:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f023 0207 	bic.w	r2, r3, #7
 800aea8:	4909      	ldr	r1, [pc, #36]	; (800aed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800aeb0:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d001      	beq.n	800aec2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	40021000 	.word	0x40021000
 800aed0:	40022000 	.word	0x40022000

0800aed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aedc:	2300      	movs	r3, #0
 800aede:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aee0:	2300      	movs	r3, #0
 800aee2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d031      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800aef8:	d01a      	beq.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800aefa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800aefe:	d814      	bhi.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d009      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800af04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af08:	d10f      	bne.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800af0a:	4b5d      	ldr	r3, [pc, #372]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af0c:	68db      	ldr	r3, [r3, #12]
 800af0e:	4a5c      	ldr	r2, [pc, #368]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800af16:	e00c      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3304      	adds	r3, #4
 800af1c:	2100      	movs	r1, #0
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 f9f0 	bl	800b304 <RCCEx_PLLSAI1_Config>
 800af24:	4603      	mov	r3, r0
 800af26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800af28:	e003      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	74fb      	strb	r3, [r7, #19]
      break;
 800af2e:	e000      	b.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800af30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af32:	7cfb      	ldrb	r3, [r7, #19]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10b      	bne.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af38:	4b51      	ldr	r3, [pc, #324]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af46:	494e      	ldr	r1, [pc, #312]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800af4e:	e001      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af50:	7cfb      	ldrb	r3, [r7, #19]
 800af52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 809e 	beq.w	800b09e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af62:	2300      	movs	r3, #0
 800af64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800af66:	4b46      	ldr	r3, [pc, #280]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800af76:	2300      	movs	r3, #0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00d      	beq.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af7c:	4b40      	ldr	r3, [pc, #256]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af80:	4a3f      	ldr	r2, [pc, #252]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af86:	6593      	str	r3, [r2, #88]	; 0x58
 800af88:	4b3d      	ldr	r3, [pc, #244]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800af8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af90:	60bb      	str	r3, [r7, #8]
 800af92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af94:	2301      	movs	r3, #1
 800af96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af98:	4b3a      	ldr	r3, [pc, #232]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a39      	ldr	r2, [pc, #228]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800af9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afa4:	f7fb fbdc 	bl	8006760 <HAL_GetTick>
 800afa8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800afaa:	e009      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afac:	f7fb fbd8 	bl	8006760 <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d902      	bls.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	74fb      	strb	r3, [r7, #19]
        break;
 800afbe:	e005      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800afc0:	4b30      	ldr	r3, [pc, #192]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d0ef      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800afcc:	7cfb      	ldrb	r3, [r7, #19]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d15a      	bne.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800afd2:	4b2b      	ldr	r3, [pc, #172]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800afd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d01e      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	429a      	cmp	r2, r3
 800afec:	d019      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800afee:	4b24      	ldr	r3, [pc, #144]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aff8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800affa:	4b21      	ldr	r3, [pc, #132]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800affc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b000:	4a1f      	ldr	r2, [pc, #124]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b00a:	4b1d      	ldr	r3, [pc, #116]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b00c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b010:	4a1b      	ldr	r2, [pc, #108]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b01a:	4a19      	ldr	r2, [pc, #100]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d016      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b02c:	f7fb fb98 	bl	8006760 <HAL_GetTick>
 800b030:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b032:	e00b      	b.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b034:	f7fb fb94 	bl	8006760 <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b042:	4293      	cmp	r3, r2
 800b044:	d902      	bls.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800b046:	2303      	movs	r3, #3
 800b048:	74fb      	strb	r3, [r7, #19]
            break;
 800b04a:	e006      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b04c:	4b0c      	ldr	r3, [pc, #48]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b052:	f003 0302 	and.w	r3, r3, #2
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0ec      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800b05a:	7cfb      	ldrb	r3, [r7, #19]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10b      	bne.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b066:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b06e:	4904      	ldr	r1, [pc, #16]	; (800b080 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b070:	4313      	orrs	r3, r2
 800b072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b076:	e009      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b078:	7cfb      	ldrb	r3, [r7, #19]
 800b07a:	74bb      	strb	r3, [r7, #18]
 800b07c:	e006      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800b07e:	bf00      	nop
 800b080:	40021000 	.word	0x40021000
 800b084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b088:	7cfb      	ldrb	r3, [r7, #19]
 800b08a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b08c:	7c7b      	ldrb	r3, [r7, #17]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d105      	bne.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b092:	4b9b      	ldr	r3, [pc, #620]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b096:	4a9a      	ldr	r2, [pc, #616]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b09c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0301 	and.w	r3, r3, #1
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b0aa:	4b95      	ldr	r3, [pc, #596]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0b0:	f023 0203 	bic.w	r2, r3, #3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a1b      	ldr	r3, [r3, #32]
 800b0b8:	4991      	ldr	r1, [pc, #580]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00a      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b0cc:	4b8c      	ldr	r3, [pc, #560]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d2:	f023 020c 	bic.w	r2, r3, #12
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	4989      	ldr	r1, [pc, #548]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0304 	and.w	r3, r3, #4
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00a      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b0ee:	4b84      	ldr	r3, [pc, #528]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0fc:	4980      	ldr	r1, [pc, #512]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00a      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b110:	4b7b      	ldr	r3, [pc, #492]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b116:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11e:	4978      	ldr	r1, [pc, #480]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b120:	4313      	orrs	r3, r2
 800b122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00a      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b132:	4b73      	ldr	r3, [pc, #460]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b138:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b140:	496f      	ldr	r1, [pc, #444]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b142:	4313      	orrs	r3, r2
 800b144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00a      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b154:	4b6a      	ldr	r3, [pc, #424]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b15a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	4967      	ldr	r1, [pc, #412]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b164:	4313      	orrs	r3, r2
 800b166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00a      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b176:	4b62      	ldr	r3, [pc, #392]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b184:	495e      	ldr	r1, [pc, #376]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b186:	4313      	orrs	r3, r2
 800b188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00a      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b198:	4b59      	ldr	r3, [pc, #356]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a6:	4956      	ldr	r1, [pc, #344]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00a      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b1ba:	4b51      	ldr	r3, [pc, #324]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c8:	494d      	ldr	r1, [pc, #308]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d028      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b1dc:	4b48      	ldr	r3, [pc, #288]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ea:	4945      	ldr	r1, [pc, #276]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1fa:	d106      	bne.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1fc:	4b40      	ldr	r3, [pc, #256]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	4a3f      	ldr	r2, [pc, #252]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b206:	60d3      	str	r3, [r2, #12]
 800b208:	e011      	b.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b20e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b212:	d10c      	bne.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3304      	adds	r3, #4
 800b218:	2101      	movs	r1, #1
 800b21a:	4618      	mov	r0, r3
 800b21c:	f000 f872 	bl	800b304 <RCCEx_PLLSAI1_Config>
 800b220:	4603      	mov	r3, r0
 800b222:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b224:	7cfb      	ldrb	r3, [r7, #19]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800b22a:	7cfb      	ldrb	r3, [r7, #19]
 800b22c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d028      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b23a:	4b31      	ldr	r3, [pc, #196]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b240:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b248:	492d      	ldr	r1, [pc, #180]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b258:	d106      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b25a:	4b29      	ldr	r3, [pc, #164]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b25c:	68db      	ldr	r3, [r3, #12]
 800b25e:	4a28      	ldr	r2, [pc, #160]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b264:	60d3      	str	r3, [r2, #12]
 800b266:	e011      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b270:	d10c      	bne.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3304      	adds	r3, #4
 800b276:	2101      	movs	r1, #1
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 f843 	bl	800b304 <RCCEx_PLLSAI1_Config>
 800b27e:	4603      	mov	r3, r0
 800b280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b282:	7cfb      	ldrb	r3, [r7, #19]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800b288:	7cfb      	ldrb	r3, [r7, #19]
 800b28a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d01c      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b298:	4b19      	ldr	r3, [pc, #100]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b29e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a6:	4916      	ldr	r1, [pc, #88]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2b6:	d10c      	bne.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3304      	adds	r3, #4
 800b2bc:	2102      	movs	r1, #2
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 f820 	bl	800b304 <RCCEx_PLLSAI1_Config>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b2c8:	7cfb      	ldrb	r3, [r7, #19]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800b2ce:	7cfb      	ldrb	r3, [r7, #19]
 800b2d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00a      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b2de:	4b08      	ldr	r3, [pc, #32]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ec:	4904      	ldr	r1, [pc, #16]	; (800b300 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b2f4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	40021000 	.word	0x40021000

0800b304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b312:	4b74      	ldr	r3, [pc, #464]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	f003 0303 	and.w	r3, r3, #3
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d018      	beq.n	800b350 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b31e:	4b71      	ldr	r3, [pc, #452]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f003 0203 	and.w	r2, r3, #3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d10d      	bne.n	800b34a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
       ||
 800b332:	2b00      	cmp	r3, #0
 800b334:	d009      	beq.n	800b34a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b336:	4b6b      	ldr	r3, [pc, #428]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	091b      	lsrs	r3, r3, #4
 800b33c:	f003 0307 	and.w	r3, r3, #7
 800b340:	1c5a      	adds	r2, r3, #1
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	685b      	ldr	r3, [r3, #4]
       ||
 800b346:	429a      	cmp	r2, r3
 800b348:	d047      	beq.n	800b3da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	73fb      	strb	r3, [r7, #15]
 800b34e:	e044      	b.n	800b3da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b03      	cmp	r3, #3
 800b356:	d018      	beq.n	800b38a <RCCEx_PLLSAI1_Config+0x86>
 800b358:	2b03      	cmp	r3, #3
 800b35a:	d825      	bhi.n	800b3a8 <RCCEx_PLLSAI1_Config+0xa4>
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d002      	beq.n	800b366 <RCCEx_PLLSAI1_Config+0x62>
 800b360:	2b02      	cmp	r3, #2
 800b362:	d009      	beq.n	800b378 <RCCEx_PLLSAI1_Config+0x74>
 800b364:	e020      	b.n	800b3a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b366:	4b5f      	ldr	r3, [pc, #380]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d11d      	bne.n	800b3ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b376:	e01a      	b.n	800b3ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b378:	4b5a      	ldr	r3, [pc, #360]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b380:	2b00      	cmp	r3, #0
 800b382:	d116      	bne.n	800b3b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b388:	e013      	b.n	800b3b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b38a:	4b56      	ldr	r3, [pc, #344]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10f      	bne.n	800b3b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b396:	4b53      	ldr	r3, [pc, #332]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d109      	bne.n	800b3b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b3a6:	e006      	b.n	800b3b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ac:	e004      	b.n	800b3b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b3ae:	bf00      	nop
 800b3b0:	e002      	b.n	800b3b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b3b2:	bf00      	nop
 800b3b4:	e000      	b.n	800b3b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b3b6:	bf00      	nop
    }

    if(status == HAL_OK)
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10d      	bne.n	800b3da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b3be:	4b49      	ldr	r3, [pc, #292]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6819      	ldr	r1, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	011b      	lsls	r3, r3, #4
 800b3d2:	430b      	orrs	r3, r1
 800b3d4:	4943      	ldr	r1, [pc, #268]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d17c      	bne.n	800b4da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b3e0:	4b40      	ldr	r3, [pc, #256]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a3f      	ldr	r2, [pc, #252]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b3e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b3ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3ec:	f7fb f9b8 	bl	8006760 <HAL_GetTick>
 800b3f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b3f2:	e009      	b.n	800b408 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b3f4:	f7fb f9b4 	bl	8006760 <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d902      	bls.n	800b408 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	73fb      	strb	r3, [r7, #15]
        break;
 800b406:	e005      	b.n	800b414 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b408:	4b36      	ldr	r3, [pc, #216]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1ef      	bne.n	800b3f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d15f      	bne.n	800b4da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d110      	bne.n	800b442 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b420:	4b30      	ldr	r3, [pc, #192]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b428:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6892      	ldr	r2, [r2, #8]
 800b430:	0211      	lsls	r1, r2, #8
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	68d2      	ldr	r2, [r2, #12]
 800b436:	06d2      	lsls	r2, r2, #27
 800b438:	430a      	orrs	r2, r1
 800b43a:	492a      	ldr	r1, [pc, #168]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b43c:	4313      	orrs	r3, r2
 800b43e:	610b      	str	r3, [r1, #16]
 800b440:	e027      	b.n	800b492 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d112      	bne.n	800b46e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b448:	4b26      	ldr	r3, [pc, #152]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	6892      	ldr	r2, [r2, #8]
 800b458:	0211      	lsls	r1, r2, #8
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	6912      	ldr	r2, [r2, #16]
 800b45e:	0852      	lsrs	r2, r2, #1
 800b460:	3a01      	subs	r2, #1
 800b462:	0552      	lsls	r2, r2, #21
 800b464:	430a      	orrs	r2, r1
 800b466:	491f      	ldr	r1, [pc, #124]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b468:	4313      	orrs	r3, r2
 800b46a:	610b      	str	r3, [r1, #16]
 800b46c:	e011      	b.n	800b492 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b46e:	4b1d      	ldr	r3, [pc, #116]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b476:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	6892      	ldr	r2, [r2, #8]
 800b47e:	0211      	lsls	r1, r2, #8
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6952      	ldr	r2, [r2, #20]
 800b484:	0852      	lsrs	r2, r2, #1
 800b486:	3a01      	subs	r2, #1
 800b488:	0652      	lsls	r2, r2, #25
 800b48a:	430a      	orrs	r2, r1
 800b48c:	4915      	ldr	r1, [pc, #84]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b492:	4b14      	ldr	r3, [pc, #80]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a13      	ldr	r2, [pc, #76]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b49c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b49e:	f7fb f95f 	bl	8006760 <HAL_GetTick>
 800b4a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b4a4:	e009      	b.n	800b4ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b4a6:	f7fb f95b 	bl	8006760 <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d902      	bls.n	800b4ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	73fb      	strb	r3, [r7, #15]
          break;
 800b4b8:	e005      	b.n	800b4c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b4ba:	4b0a      	ldr	r3, [pc, #40]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d0ef      	beq.n	800b4a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d106      	bne.n	800b4da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b4cc:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4ce:	691a      	ldr	r2, [r3, #16]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	4903      	ldr	r1, [pc, #12]	; (800b4e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	40021000 	.word	0x40021000

0800b4e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e049      	b.n	800b58e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7fa f8f0 	bl	80056f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2202      	movs	r2, #2
 800b518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	3304      	adds	r3, #4
 800b524:	4619      	mov	r1, r3
 800b526:	4610      	mov	r0, r2
 800b528:	f000 fa88 	bl	800ba3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2201      	movs	r2, #1
 800b568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2201      	movs	r2, #1
 800b578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b082      	sub	sp, #8
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d101      	bne.n	800b5a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e049      	b.n	800b63c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d106      	bne.n	800b5c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f841 	bl	800b644 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2202      	movs	r2, #2
 800b5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4610      	mov	r0, r2
 800b5d6:	f000 fa31 	bl	800ba3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d109      	bne.n	800b67c <HAL_TIM_PWM_Start+0x24>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b01      	cmp	r3, #1
 800b672:	bf14      	ite	ne
 800b674:	2301      	movne	r3, #1
 800b676:	2300      	moveq	r3, #0
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	e03c      	b.n	800b6f6 <HAL_TIM_PWM_Start+0x9e>
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	2b04      	cmp	r3, #4
 800b680:	d109      	bne.n	800b696 <HAL_TIM_PWM_Start+0x3e>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	bf14      	ite	ne
 800b68e:	2301      	movne	r3, #1
 800b690:	2300      	moveq	r3, #0
 800b692:	b2db      	uxtb	r3, r3
 800b694:	e02f      	b.n	800b6f6 <HAL_TIM_PWM_Start+0x9e>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	2b08      	cmp	r3, #8
 800b69a:	d109      	bne.n	800b6b0 <HAL_TIM_PWM_Start+0x58>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	bf14      	ite	ne
 800b6a8:	2301      	movne	r3, #1
 800b6aa:	2300      	moveq	r3, #0
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	e022      	b.n	800b6f6 <HAL_TIM_PWM_Start+0x9e>
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2b0c      	cmp	r3, #12
 800b6b4:	d109      	bne.n	800b6ca <HAL_TIM_PWM_Start+0x72>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	bf14      	ite	ne
 800b6c2:	2301      	movne	r3, #1
 800b6c4:	2300      	moveq	r3, #0
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	e015      	b.n	800b6f6 <HAL_TIM_PWM_Start+0x9e>
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b10      	cmp	r3, #16
 800b6ce:	d109      	bne.n	800b6e4 <HAL_TIM_PWM_Start+0x8c>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	bf14      	ite	ne
 800b6dc:	2301      	movne	r3, #1
 800b6de:	2300      	moveq	r3, #0
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	e008      	b.n	800b6f6 <HAL_TIM_PWM_Start+0x9e>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	bf14      	ite	ne
 800b6f0:	2301      	movne	r3, #1
 800b6f2:	2300      	moveq	r3, #0
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d001      	beq.n	800b6fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e07e      	b.n	800b7fc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d104      	bne.n	800b70e <HAL_TIM_PWM_Start+0xb6>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2202      	movs	r2, #2
 800b708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b70c:	e023      	b.n	800b756 <HAL_TIM_PWM_Start+0xfe>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b04      	cmp	r3, #4
 800b712:	d104      	bne.n	800b71e <HAL_TIM_PWM_Start+0xc6>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b71c:	e01b      	b.n	800b756 <HAL_TIM_PWM_Start+0xfe>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b08      	cmp	r3, #8
 800b722:	d104      	bne.n	800b72e <HAL_TIM_PWM_Start+0xd6>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b72c:	e013      	b.n	800b756 <HAL_TIM_PWM_Start+0xfe>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b0c      	cmp	r3, #12
 800b732:	d104      	bne.n	800b73e <HAL_TIM_PWM_Start+0xe6>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b73c:	e00b      	b.n	800b756 <HAL_TIM_PWM_Start+0xfe>
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b10      	cmp	r3, #16
 800b742:	d104      	bne.n	800b74e <HAL_TIM_PWM_Start+0xf6>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2202      	movs	r2, #2
 800b748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b74c:	e003      	b.n	800b756 <HAL_TIM_PWM_Start+0xfe>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2202      	movs	r2, #2
 800b752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2201      	movs	r2, #1
 800b75c:	6839      	ldr	r1, [r7, #0]
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 fc4e 	bl	800c000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a26      	ldr	r2, [pc, #152]	; (800b804 <HAL_TIM_PWM_Start+0x1ac>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d009      	beq.n	800b782 <HAL_TIM_PWM_Start+0x12a>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a25      	ldr	r2, [pc, #148]	; (800b808 <HAL_TIM_PWM_Start+0x1b0>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d004      	beq.n	800b782 <HAL_TIM_PWM_Start+0x12a>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a23      	ldr	r2, [pc, #140]	; (800b80c <HAL_TIM_PWM_Start+0x1b4>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d101      	bne.n	800b786 <HAL_TIM_PWM_Start+0x12e>
 800b782:	2301      	movs	r3, #1
 800b784:	e000      	b.n	800b788 <HAL_TIM_PWM_Start+0x130>
 800b786:	2300      	movs	r3, #0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d007      	beq.n	800b79c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b79a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a18      	ldr	r2, [pc, #96]	; (800b804 <HAL_TIM_PWM_Start+0x1ac>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d009      	beq.n	800b7ba <HAL_TIM_PWM_Start+0x162>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ae:	d004      	beq.n	800b7ba <HAL_TIM_PWM_Start+0x162>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a14      	ldr	r2, [pc, #80]	; (800b808 <HAL_TIM_PWM_Start+0x1b0>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d115      	bne.n	800b7e6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	689a      	ldr	r2, [r3, #8]
 800b7c0:	4b13      	ldr	r3, [pc, #76]	; (800b810 <HAL_TIM_PWM_Start+0x1b8>)
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b06      	cmp	r3, #6
 800b7ca:	d015      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a0>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d2:	d011      	beq.n	800b7f8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f042 0201 	orr.w	r2, r2, #1
 800b7e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7e4:	e008      	b.n	800b7f8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f042 0201 	orr.w	r2, r2, #1
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	e000      	b.n	800b7fa <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3710      	adds	r7, #16
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	40012c00 	.word	0x40012c00
 800b808:	40014000 	.word	0x40014000
 800b80c:	40014400 	.word	0x40014400
 800b810:	00010007 	.word	0x00010007

0800b814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d101      	bne.n	800b832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b82e:	2302      	movs	r3, #2
 800b830:	e0ff      	b.n	800ba32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2201      	movs	r2, #1
 800b836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b14      	cmp	r3, #20
 800b83e:	f200 80f0 	bhi.w	800ba22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b842:	a201      	add	r2, pc, #4	; (adr r2, 800b848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b848:	0800b89d 	.word	0x0800b89d
 800b84c:	0800ba23 	.word	0x0800ba23
 800b850:	0800ba23 	.word	0x0800ba23
 800b854:	0800ba23 	.word	0x0800ba23
 800b858:	0800b8dd 	.word	0x0800b8dd
 800b85c:	0800ba23 	.word	0x0800ba23
 800b860:	0800ba23 	.word	0x0800ba23
 800b864:	0800ba23 	.word	0x0800ba23
 800b868:	0800b91f 	.word	0x0800b91f
 800b86c:	0800ba23 	.word	0x0800ba23
 800b870:	0800ba23 	.word	0x0800ba23
 800b874:	0800ba23 	.word	0x0800ba23
 800b878:	0800b95f 	.word	0x0800b95f
 800b87c:	0800ba23 	.word	0x0800ba23
 800b880:	0800ba23 	.word	0x0800ba23
 800b884:	0800ba23 	.word	0x0800ba23
 800b888:	0800b9a1 	.word	0x0800b9a1
 800b88c:	0800ba23 	.word	0x0800ba23
 800b890:	0800ba23 	.word	0x0800ba23
 800b894:	0800ba23 	.word	0x0800ba23
 800b898:	0800b9e1 	.word	0x0800b9e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68b9      	ldr	r1, [r7, #8]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f000 f92e 	bl	800bb04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	699a      	ldr	r2, [r3, #24]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f042 0208 	orr.w	r2, r2, #8
 800b8b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	699a      	ldr	r2, [r3, #24]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f022 0204 	bic.w	r2, r2, #4
 800b8c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6999      	ldr	r1, [r3, #24]
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	691a      	ldr	r2, [r3, #16]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	430a      	orrs	r2, r1
 800b8d8:	619a      	str	r2, [r3, #24]
      break;
 800b8da:	e0a5      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68b9      	ldr	r1, [r7, #8]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 f98a 	bl	800bbfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	699a      	ldr	r2, [r3, #24]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	699a      	ldr	r2, [r3, #24]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6999      	ldr	r1, [r3, #24]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	021a      	lsls	r2, r3, #8
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	619a      	str	r2, [r3, #24]
      break;
 800b91c:	e084      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68b9      	ldr	r1, [r7, #8]
 800b924:	4618      	mov	r0, r3
 800b926:	f000 f9e3 	bl	800bcf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69da      	ldr	r2, [r3, #28]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f042 0208 	orr.w	r2, r2, #8
 800b938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69da      	ldr	r2, [r3, #28]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f022 0204 	bic.w	r2, r2, #4
 800b948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69d9      	ldr	r1, [r3, #28]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	691a      	ldr	r2, [r3, #16]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	61da      	str	r2, [r3, #28]
      break;
 800b95c:	e064      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	4618      	mov	r0, r3
 800b966:	f000 fa3b 	bl	800bde0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	69da      	ldr	r2, [r3, #28]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	69da      	ldr	r2, [r3, #28]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	69d9      	ldr	r1, [r3, #28]
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	021a      	lsls	r2, r3, #8
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	430a      	orrs	r2, r1
 800b99c:	61da      	str	r2, [r3, #28]
      break;
 800b99e:	e043      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68b9      	ldr	r1, [r7, #8]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 fa78 	bl	800be9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f042 0208 	orr.w	r2, r2, #8
 800b9ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f022 0204 	bic.w	r2, r2, #4
 800b9ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	691a      	ldr	r2, [r3, #16]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9de:	e023      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68b9      	ldr	r1, [r7, #8]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f000 fab0 	bl	800bf4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	691b      	ldr	r3, [r3, #16]
 800ba16:	021a      	lsls	r2, r3, #8
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba20:	e002      	b.n	800ba28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	75fb      	strb	r3, [r7, #23]
      break;
 800ba26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3718      	adds	r7, #24
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop

0800ba3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a2a      	ldr	r2, [pc, #168]	; (800baf8 <TIM_Base_SetConfig+0xbc>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d003      	beq.n	800ba5c <TIM_Base_SetConfig+0x20>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba5a:	d108      	bne.n	800ba6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a21      	ldr	r2, [pc, #132]	; (800baf8 <TIM_Base_SetConfig+0xbc>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d00b      	beq.n	800ba8e <TIM_Base_SetConfig+0x52>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba7c:	d007      	beq.n	800ba8e <TIM_Base_SetConfig+0x52>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a1e      	ldr	r2, [pc, #120]	; (800bafc <TIM_Base_SetConfig+0xc0>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d003      	beq.n	800ba8e <TIM_Base_SetConfig+0x52>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4a1d      	ldr	r2, [pc, #116]	; (800bb00 <TIM_Base_SetConfig+0xc4>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d108      	bne.n	800baa0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	4313      	orrs	r3, r2
 800baac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	689a      	ldr	r2, [r3, #8]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a0c      	ldr	r2, [pc, #48]	; (800baf8 <TIM_Base_SetConfig+0xbc>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d007      	beq.n	800badc <TIM_Base_SetConfig+0xa0>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a0b      	ldr	r2, [pc, #44]	; (800bafc <TIM_Base_SetConfig+0xc0>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d003      	beq.n	800badc <TIM_Base_SetConfig+0xa0>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	4a0a      	ldr	r2, [pc, #40]	; (800bb00 <TIM_Base_SetConfig+0xc4>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d103      	bne.n	800bae4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	691a      	ldr	r2, [r3, #16]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	615a      	str	r2, [r3, #20]
}
 800baea:	bf00      	nop
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	40012c00 	.word	0x40012c00
 800bafc:	40014000 	.word	0x40014000
 800bb00:	40014400 	.word	0x40014400

0800bb04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	f023 0201 	bic.w	r2, r3, #1
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f023 0303 	bic.w	r3, r3, #3
 800bb3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f023 0302 	bic.w	r3, r3, #2
 800bb50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a24      	ldr	r2, [pc, #144]	; (800bbf0 <TIM_OC1_SetConfig+0xec>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d007      	beq.n	800bb74 <TIM_OC1_SetConfig+0x70>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a23      	ldr	r2, [pc, #140]	; (800bbf4 <TIM_OC1_SetConfig+0xf0>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d003      	beq.n	800bb74 <TIM_OC1_SetConfig+0x70>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a22      	ldr	r2, [pc, #136]	; (800bbf8 <TIM_OC1_SetConfig+0xf4>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d10c      	bne.n	800bb8e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	f023 0308 	bic.w	r3, r3, #8
 800bb7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f023 0304 	bic.w	r3, r3, #4
 800bb8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a17      	ldr	r2, [pc, #92]	; (800bbf0 <TIM_OC1_SetConfig+0xec>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d007      	beq.n	800bba6 <TIM_OC1_SetConfig+0xa2>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a16      	ldr	r2, [pc, #88]	; (800bbf4 <TIM_OC1_SetConfig+0xf0>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d003      	beq.n	800bba6 <TIM_OC1_SetConfig+0xa2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4a15      	ldr	r2, [pc, #84]	; (800bbf8 <TIM_OC1_SetConfig+0xf4>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d111      	bne.n	800bbca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	685a      	ldr	r2, [r3, #4]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	697a      	ldr	r2, [r7, #20]
 800bbe2:	621a      	str	r2, [r3, #32]
}
 800bbe4:	bf00      	nop
 800bbe6:	371c      	adds	r7, #28
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	40012c00 	.word	0x40012c00
 800bbf4:	40014000 	.word	0x40014000
 800bbf8:	40014400 	.word	0x40014400

0800bbfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b087      	sub	sp, #28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	f023 0210 	bic.w	r2, r3, #16
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	699b      	ldr	r3, [r3, #24]
 800bc22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	021b      	lsls	r3, r3, #8
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	f023 0320 	bic.w	r3, r3, #32
 800bc4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	011b      	lsls	r3, r3, #4
 800bc52:	697a      	ldr	r2, [r7, #20]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a22      	ldr	r2, [pc, #136]	; (800bce4 <TIM_OC2_SetConfig+0xe8>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d10d      	bne.n	800bc7c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	011b      	lsls	r3, r3, #4
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a19      	ldr	r2, [pc, #100]	; (800bce4 <TIM_OC2_SetConfig+0xe8>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d007      	beq.n	800bc94 <TIM_OC2_SetConfig+0x98>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a18      	ldr	r2, [pc, #96]	; (800bce8 <TIM_OC2_SetConfig+0xec>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d003      	beq.n	800bc94 <TIM_OC2_SetConfig+0x98>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a17      	ldr	r2, [pc, #92]	; (800bcec <TIM_OC2_SetConfig+0xf0>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d113      	bne.n	800bcbc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	695b      	ldr	r3, [r3, #20]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	693a      	ldr	r2, [r7, #16]
 800bcac:	4313      	orrs	r3, r2
 800bcae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	621a      	str	r2, [r3, #32]
}
 800bcd6:	bf00      	nop
 800bcd8:	371c      	adds	r7, #28
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	40012c00 	.word	0x40012c00
 800bce8:	40014000 	.word	0x40014000
 800bcec:	40014400 	.word	0x40014400

0800bcf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a1b      	ldr	r3, [r3, #32]
 800bcfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f023 0303 	bic.w	r3, r3, #3
 800bd2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	021b      	lsls	r3, r3, #8
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a21      	ldr	r2, [pc, #132]	; (800bdd4 <TIM_OC3_SetConfig+0xe4>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d10d      	bne.n	800bd6e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	021b      	lsls	r3, r3, #8
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bd6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a18      	ldr	r2, [pc, #96]	; (800bdd4 <TIM_OC3_SetConfig+0xe4>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d007      	beq.n	800bd86 <TIM_OC3_SetConfig+0x96>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a17      	ldr	r2, [pc, #92]	; (800bdd8 <TIM_OC3_SetConfig+0xe8>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d003      	beq.n	800bd86 <TIM_OC3_SetConfig+0x96>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a16      	ldr	r2, [pc, #88]	; (800bddc <TIM_OC3_SetConfig+0xec>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d113      	bne.n	800bdae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	011b      	lsls	r3, r3, #4
 800bd9c:	693a      	ldr	r2, [r7, #16]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	011b      	lsls	r3, r3, #4
 800bda8:	693a      	ldr	r2, [r7, #16]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	685a      	ldr	r2, [r3, #4]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	621a      	str	r2, [r3, #32]
}
 800bdc8:	bf00      	nop
 800bdca:	371c      	adds	r7, #28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	40012c00 	.word	0x40012c00
 800bdd8:	40014000 	.word	0x40014000
 800bddc:	40014400 	.word	0x40014400

0800bde0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	021b      	lsls	r3, r3, #8
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4313      	orrs	r3, r2
 800be26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	031b      	lsls	r3, r3, #12
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	4313      	orrs	r3, r2
 800be3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a14      	ldr	r2, [pc, #80]	; (800be90 <TIM_OC4_SetConfig+0xb0>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d007      	beq.n	800be54 <TIM_OC4_SetConfig+0x74>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a13      	ldr	r2, [pc, #76]	; (800be94 <TIM_OC4_SetConfig+0xb4>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d003      	beq.n	800be54 <TIM_OC4_SetConfig+0x74>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a12      	ldr	r2, [pc, #72]	; (800be98 <TIM_OC4_SetConfig+0xb8>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d109      	bne.n	800be68 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	019b      	lsls	r3, r3, #6
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	4313      	orrs	r3, r2
 800be66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	621a      	str	r2, [r3, #32]
}
 800be82:	bf00      	nop
 800be84:	371c      	adds	r7, #28
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	40012c00 	.word	0x40012c00
 800be94:	40014000 	.word	0x40014000
 800be98:	40014400 	.word	0x40014400

0800be9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800beca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bee0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	041b      	lsls	r3, r3, #16
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	4313      	orrs	r3, r2
 800beec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a13      	ldr	r2, [pc, #76]	; (800bf40 <TIM_OC5_SetConfig+0xa4>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d007      	beq.n	800bf06 <TIM_OC5_SetConfig+0x6a>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a12      	ldr	r2, [pc, #72]	; (800bf44 <TIM_OC5_SetConfig+0xa8>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d003      	beq.n	800bf06 <TIM_OC5_SetConfig+0x6a>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a11      	ldr	r2, [pc, #68]	; (800bf48 <TIM_OC5_SetConfig+0xac>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d109      	bne.n	800bf1a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	021b      	lsls	r3, r3, #8
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	621a      	str	r2, [r3, #32]
}
 800bf34:	bf00      	nop
 800bf36:	371c      	adds	r7, #28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	40012c00 	.word	0x40012c00
 800bf44:	40014000 	.word	0x40014000
 800bf48:	40014400 	.word	0x40014400

0800bf4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	021b      	lsls	r3, r3, #8
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	051b      	lsls	r3, r3, #20
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a14      	ldr	r2, [pc, #80]	; (800bff4 <TIM_OC6_SetConfig+0xa8>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d007      	beq.n	800bfb8 <TIM_OC6_SetConfig+0x6c>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4a13      	ldr	r2, [pc, #76]	; (800bff8 <TIM_OC6_SetConfig+0xac>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d003      	beq.n	800bfb8 <TIM_OC6_SetConfig+0x6c>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a12      	ldr	r2, [pc, #72]	; (800bffc <TIM_OC6_SetConfig+0xb0>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d109      	bne.n	800bfcc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bfbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	029b      	lsls	r3, r3, #10
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	697a      	ldr	r2, [r7, #20]
 800bfd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	621a      	str	r2, [r3, #32]
}
 800bfe6:	bf00      	nop
 800bfe8:	371c      	adds	r7, #28
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	40012c00 	.word	0x40012c00
 800bff8:	40014000 	.word	0x40014000
 800bffc:	40014400 	.word	0x40014400

0800c000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c000:	b480      	push	{r7}
 800c002:	b087      	sub	sp, #28
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f003 031f 	and.w	r3, r3, #31
 800c012:	2201      	movs	r2, #1
 800c014:	fa02 f303 	lsl.w	r3, r2, r3
 800c018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6a1a      	ldr	r2, [r3, #32]
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	43db      	mvns	r3, r3
 800c022:	401a      	ands	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6a1a      	ldr	r2, [r3, #32]
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	f003 031f 	and.w	r3, r3, #31
 800c032:	6879      	ldr	r1, [r7, #4]
 800c034:	fa01 f303 	lsl.w	r3, r1, r3
 800c038:	431a      	orrs	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	621a      	str	r2, [r3, #32]
}
 800c03e:	bf00      	nop
 800c040:	371c      	adds	r7, #28
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
	...

0800c04c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c060:	2b01      	cmp	r3, #1
 800c062:	d101      	bne.n	800c068 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c064:	2302      	movs	r3, #2
 800c066:	e060      	b.n	800c12a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	4313      	orrs	r3, r2
 800c08a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	4313      	orrs	r3, r2
 800c098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	695b      	ldr	r3, [r3, #20]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	041b      	lsls	r3, r3, #16
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a14      	ldr	r2, [pc, #80]	; (800c138 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d115      	bne.n	800c118 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f6:	051b      	lsls	r3, r3, #20
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	4313      	orrs	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	4313      	orrs	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3714      	adds	r7, #20
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	40012c00 	.word	0x40012c00

0800c13c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e040      	b.n	800c1d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c152:	2b00      	cmp	r3, #0
 800c154:	d106      	bne.n	800c164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7f9 fb20 	bl	80057a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2224      	movs	r2, #36	; 0x24
 800c168:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f022 0201 	bic.w	r2, r2, #1
 800c178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fc0e 	bl	800c99c <UART_SetConfig>
 800c180:	4603      	mov	r3, r0
 800c182:	2b01      	cmp	r3, #1
 800c184:	d101      	bne.n	800c18a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c186:	2301      	movs	r3, #1
 800c188:	e022      	b.n	800c1d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fe5c 	bl	800ce50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c1a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	689a      	ldr	r2, [r3, #8]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c1b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f042 0201 	orr.w	r2, r2, #1
 800c1c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fee3 	bl	800cf94 <UART_CheckIdleState>
 800c1ce:	4603      	mov	r3, r0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08a      	sub	sp, #40	; 0x28
 800c1dc:	af02      	add	r7, sp, #8
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1ec:	2b20      	cmp	r3, #32
 800c1ee:	f040 8082 	bne.w	800c2f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <HAL_UART_Transmit+0x26>
 800c1f8:	88fb      	ldrh	r3, [r7, #6]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e07a      	b.n	800c2f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d101      	bne.n	800c210 <HAL_UART_Transmit+0x38>
 800c20c:	2302      	movs	r3, #2
 800c20e:	e073      	b.n	800c2f8 <HAL_UART_Transmit+0x120>
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2221      	movs	r2, #33	; 0x21
 800c224:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c226:	f7fa fa9b 	bl	8006760 <HAL_GetTick>
 800c22a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	88fa      	ldrh	r2, [r7, #6]
 800c230:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	88fa      	ldrh	r2, [r7, #6]
 800c238:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c244:	d108      	bne.n	800c258 <HAL_UART_Transmit+0x80>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d104      	bne.n	800c258 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c24e:	2300      	movs	r3, #0
 800c250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	61bb      	str	r3, [r7, #24]
 800c256:	e003      	b.n	800c260 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c268:	e02d      	b.n	800c2c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	2200      	movs	r2, #0
 800c272:	2180      	movs	r1, #128	; 0x80
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f000 fed6 	bl	800d026 <UART_WaitOnFlagUntilTimeout>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d001      	beq.n	800c284 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c280:	2303      	movs	r3, #3
 800c282:	e039      	b.n	800c2f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10b      	bne.n	800c2a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	881a      	ldrh	r2, [r3, #0]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c296:	b292      	uxth	r2, r2
 800c298:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	3302      	adds	r3, #2
 800c29e:	61bb      	str	r3, [r7, #24]
 800c2a0:	e008      	b.n	800c2b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c2a2:	69fb      	ldr	r3, [r7, #28]
 800c2a4:	781a      	ldrb	r2, [r3, #0]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	b292      	uxth	r2, r2
 800c2ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1cb      	bne.n	800c26a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2140      	movs	r1, #64	; 0x40
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f000 fea2 	bl	800d026 <UART_WaitOnFlagUntilTimeout>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d001      	beq.n	800c2ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	e005      	b.n	800c2f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2220      	movs	r2, #32
 800c2f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e000      	b.n	800c2f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800c2f6:	2302      	movs	r3, #2
  }
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3720      	adds	r7, #32
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08a      	sub	sp, #40	; 0x28
 800c304:	af00      	add	r7, sp, #0
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	4613      	mov	r3, r2
 800c30c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c312:	2b20      	cmp	r3, #32
 800c314:	d142      	bne.n	800c39c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <HAL_UART_Receive_IT+0x22>
 800c31c:	88fb      	ldrh	r3, [r7, #6]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e03b      	b.n	800c39e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d101      	bne.n	800c334 <HAL_UART_Receive_IT+0x34>
 800c330:	2302      	movs	r3, #2
 800c332:	e034      	b.n	800c39e <HAL_UART_Receive_IT+0x9e>
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a18      	ldr	r2, [pc, #96]	; (800c3a8 <HAL_UART_Receive_IT+0xa8>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d01f      	beq.n	800c38c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c356:	2b00      	cmp	r3, #0
 800c358:	d018      	beq.n	800c38c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	e853 3f00 	ldrex	r3, [r3]
 800c366:	613b      	str	r3, [r7, #16]
   return(result);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c36e:	627b      	str	r3, [r7, #36]	; 0x24
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	461a      	mov	r2, r3
 800c376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c378:	623b      	str	r3, [r7, #32]
 800c37a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37c:	69f9      	ldr	r1, [r7, #28]
 800c37e:	6a3a      	ldr	r2, [r7, #32]
 800c380:	e841 2300 	strex	r3, r2, [r1]
 800c384:	61bb      	str	r3, [r7, #24]
   return(result);
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1e6      	bne.n	800c35a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c38c:	88fb      	ldrh	r3, [r7, #6]
 800c38e:	461a      	mov	r2, r3
 800c390:	68b9      	ldr	r1, [r7, #8]
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f000 ff0c 	bl	800d1b0 <UART_Start_Receive_IT>
 800c398:	4603      	mov	r3, r0
 800c39a:	e000      	b.n	800c39e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c39c:	2302      	movs	r3, #2
  }
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3728      	adds	r7, #40	; 0x28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	40008000 	.word	0x40008000

0800c3ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b0ba      	sub	sp, #232	; 0xe8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	69db      	ldr	r3, [r3, #28]
 800c3ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	689b      	ldr	r3, [r3, #8]
 800c3ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c3d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c3d6:	f640 030f 	movw	r3, #2063	; 0x80f
 800c3da:	4013      	ands	r3, r2
 800c3dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c3e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d115      	bne.n	800c414 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ec:	f003 0320 	and.w	r3, r3, #32
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00f      	beq.n	800c414 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3f8:	f003 0320 	and.w	r3, r3, #32
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d009      	beq.n	800c414 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 82a6 	beq.w	800c956 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	4798      	blx	r3
      }
      return;
 800c412:	e2a0      	b.n	800c956 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 8117 	beq.w	800c64c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c41e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	d106      	bne.n	800c438 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c42a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c42e:	4b85      	ldr	r3, [pc, #532]	; (800c644 <HAL_UART_IRQHandler+0x298>)
 800c430:	4013      	ands	r3, r2
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 810a 	beq.w	800c64c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c43c:	f003 0301 	and.w	r3, r3, #1
 800c440:	2b00      	cmp	r3, #0
 800c442:	d011      	beq.n	800c468 <HAL_UART_IRQHandler+0xbc>
 800c444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00b      	beq.n	800c468 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2201      	movs	r2, #1
 800c456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c45e:	f043 0201 	orr.w	r2, r3, #1
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c46c:	f003 0302 	and.w	r3, r3, #2
 800c470:	2b00      	cmp	r3, #0
 800c472:	d011      	beq.n	800c498 <HAL_UART_IRQHandler+0xec>
 800c474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c478:	f003 0301 	and.w	r3, r3, #1
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2202      	movs	r2, #2
 800c486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c48e:	f043 0204 	orr.w	r2, r3, #4
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d011      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x11c>
 800c4a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4a8:	f003 0301 	and.w	r3, r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00b      	beq.n	800c4c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2204      	movs	r2, #4
 800c4b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4be:	f043 0202 	orr.w	r2, r3, #2
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4cc:	f003 0308 	and.w	r3, r3, #8
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d017      	beq.n	800c504 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4d8:	f003 0320 	and.w	r3, r3, #32
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d105      	bne.n	800c4ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00b      	beq.n	800c504 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4fa:	f043 0208 	orr.w	r2, r3, #8
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d012      	beq.n	800c536 <HAL_UART_IRQHandler+0x18a>
 800c510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00c      	beq.n	800c536 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c52c:	f043 0220 	orr.w	r2, r3, #32
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 820c 	beq.w	800c95a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c546:	f003 0320 	and.w	r3, r3, #32
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00d      	beq.n	800c56a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c54e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c552:	f003 0320 	and.w	r3, r3, #32
 800c556:	2b00      	cmp	r3, #0
 800c558:	d007      	beq.n	800c56a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c570:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c57e:	2b40      	cmp	r3, #64	; 0x40
 800c580:	d005      	beq.n	800c58e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c586:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d04f      	beq.n	800c62e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fed8 	bl	800d344 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c59e:	2b40      	cmp	r3, #64	; 0x40
 800c5a0:	d141      	bne.n	800c626 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c5b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c5ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c5d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c5da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c5e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1d9      	bne.n	800c5a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d013      	beq.n	800c61e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fa:	4a13      	ldr	r2, [pc, #76]	; (800c648 <HAL_UART_IRQHandler+0x29c>)
 800c5fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c602:	4618      	mov	r0, r3
 800c604:	f7fb ff06 	bl	8008414 <HAL_DMA_Abort_IT>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d017      	beq.n	800c63e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c61c:	e00f      	b.n	800c63e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7f6 fa44 	bl	8002aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c624:	e00b      	b.n	800c63e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7f6 fa40 	bl	8002aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c62c:	e007      	b.n	800c63e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7f6 fa3c 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c63c:	e18d      	b.n	800c95a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c63e:	bf00      	nop
    return;
 800c640:	e18b      	b.n	800c95a <HAL_UART_IRQHandler+0x5ae>
 800c642:	bf00      	nop
 800c644:	04000120 	.word	0x04000120
 800c648:	0800d40b 	.word	0x0800d40b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c650:	2b01      	cmp	r3, #1
 800c652:	f040 8146 	bne.w	800c8e2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c65a:	f003 0310 	and.w	r3, r3, #16
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 813f 	beq.w	800c8e2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c668:	f003 0310 	and.w	r3, r3, #16
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 8138 	beq.w	800c8e2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2210      	movs	r2, #16
 800c678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c684:	2b40      	cmp	r3, #64	; 0x40
 800c686:	f040 80b4 	bne.w	800c7f2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c696:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f000 815f 	beq.w	800c95e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	f080 8157 	bcs.w	800c95e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c6b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 0320 	and.w	r3, r3, #32
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f040 8085 	bne.w	800c7d6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c6d8:	e853 3f00 	ldrex	r3, [r3]
 800c6dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c6e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c6e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c6f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c706:	e841 2300 	strex	r3, r2, [r1]
 800c70a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c70e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1da      	bne.n	800c6cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3308      	adds	r3, #8
 800c71c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c720:	e853 3f00 	ldrex	r3, [r3]
 800c724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c728:	f023 0301 	bic.w	r3, r3, #1
 800c72c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	3308      	adds	r3, #8
 800c736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c73a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c73e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c746:	e841 2300 	strex	r3, r2, [r1]
 800c74a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c74c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1e1      	bne.n	800c716 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3308      	adds	r3, #8
 800c758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c75c:	e853 3f00 	ldrex	r3, [r3]
 800c760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3308      	adds	r3, #8
 800c772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c776:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c77c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e3      	bne.n	800c752 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2220      	movs	r2, #32
 800c78e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c79e:	e853 3f00 	ldrex	r3, [r3]
 800c7a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7a6:	f023 0310 	bic.w	r3, r3, #16
 800c7aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c7b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7ba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7c0:	e841 2300 	strex	r3, r2, [r1]
 800c7c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1e4      	bne.n	800c796 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fb fde1 	bl	8008398 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f8ca 	bl	800c984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c7f0:	e0b5      	b.n	800c95e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 80a7 	beq.w	800c962 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 80a2 	beq.w	800c962 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c82e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	461a      	mov	r2, r3
 800c83c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c840:	647b      	str	r3, [r7, #68]	; 0x44
 800c842:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c848:	e841 2300 	strex	r3, r2, [r1]
 800c84c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c850:	2b00      	cmp	r3, #0
 800c852:	d1e4      	bne.n	800c81e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	3308      	adds	r3, #8
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	e853 3f00 	ldrex	r3, [r3]
 800c862:	623b      	str	r3, [r7, #32]
   return(result);
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	f023 0301 	bic.w	r3, r3, #1
 800c86a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3308      	adds	r3, #8
 800c874:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c878:	633a      	str	r2, [r7, #48]	; 0x30
 800c87a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c87e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c880:	e841 2300 	strex	r3, r2, [r1]
 800c884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1e3      	bne.n	800c854 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2220      	movs	r2, #32
 800c890:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	e853 3f00 	ldrex	r3, [r3]
 800c8aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f023 0310 	bic.w	r3, r3, #16
 800c8b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c8c0:	61fb      	str	r3, [r7, #28]
 800c8c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c4:	69b9      	ldr	r1, [r7, #24]
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	e841 2300 	strex	r3, r2, [r1]
 800c8cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1e4      	bne.n	800c89e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c8d8:	4619      	mov	r1, r3
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f852 	bl	800c984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8e0:	e03f      	b.n	800c962 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00e      	beq.n	800c90c <HAL_UART_IRQHandler+0x560>
 800c8ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d008      	beq.n	800c90c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c902:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 ff20 	bl	800d74a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c90a:	e02d      	b.n	800c968 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00e      	beq.n	800c936 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c91c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c920:	2b00      	cmp	r3, #0
 800c922:	d008      	beq.n	800c936 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d01c      	beq.n	800c966 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	4798      	blx	r3
    }
    return;
 800c934:	e017      	b.n	800c966 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d012      	beq.n	800c968 <HAL_UART_IRQHandler+0x5bc>
 800c942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00c      	beq.n	800c968 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fd71 	bl	800d436 <UART_EndTransmit_IT>
    return;
 800c954:	e008      	b.n	800c968 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c956:	bf00      	nop
 800c958:	e006      	b.n	800c968 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c95a:	bf00      	nop
 800c95c:	e004      	b.n	800c968 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c95e:	bf00      	nop
 800c960:	e002      	b.n	800c968 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c962:	bf00      	nop
 800c964:	e000      	b.n	800c968 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c966:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c968:	37e8      	adds	r7, #232	; 0xe8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop

0800c970 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c978:	bf00      	nop
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c984:	b480      	push	{r7}
 800c986:	b083      	sub	sp, #12
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c99c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9a0:	b08a      	sub	sp, #40	; 0x28
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	689a      	ldr	r2, [r3, #8]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	4b9e      	ldr	r3, [pc, #632]	; (800cc44 <UART_SetConfig+0x2a8>)
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	6812      	ldr	r2, [r2, #0]
 800c9d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9d4:	430b      	orrs	r3, r1
 800c9d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	68da      	ldr	r2, [r3, #12]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	699b      	ldr	r3, [r3, #24]
 800c9f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a93      	ldr	r2, [pc, #588]	; (800cc48 <UART_SetConfig+0x2ac>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d004      	beq.n	800ca08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca04:	4313      	orrs	r3, r2
 800ca06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a8a      	ldr	r2, [pc, #552]	; (800cc4c <UART_SetConfig+0x2b0>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d126      	bne.n	800ca74 <UART_SetConfig+0xd8>
 800ca26:	4b8a      	ldr	r3, [pc, #552]	; (800cc50 <UART_SetConfig+0x2b4>)
 800ca28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca2c:	f003 0303 	and.w	r3, r3, #3
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	d81b      	bhi.n	800ca6c <UART_SetConfig+0xd0>
 800ca34:	a201      	add	r2, pc, #4	; (adr r2, 800ca3c <UART_SetConfig+0xa0>)
 800ca36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3a:	bf00      	nop
 800ca3c:	0800ca4d 	.word	0x0800ca4d
 800ca40:	0800ca5d 	.word	0x0800ca5d
 800ca44:	0800ca55 	.word	0x0800ca55
 800ca48:	0800ca65 	.word	0x0800ca65
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca52:	e0ab      	b.n	800cbac <UART_SetConfig+0x210>
 800ca54:	2302      	movs	r3, #2
 800ca56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca5a:	e0a7      	b.n	800cbac <UART_SetConfig+0x210>
 800ca5c:	2304      	movs	r3, #4
 800ca5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca62:	e0a3      	b.n	800cbac <UART_SetConfig+0x210>
 800ca64:	2308      	movs	r3, #8
 800ca66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca6a:	e09f      	b.n	800cbac <UART_SetConfig+0x210>
 800ca6c:	2310      	movs	r3, #16
 800ca6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ca72:	e09b      	b.n	800cbac <UART_SetConfig+0x210>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a76      	ldr	r2, [pc, #472]	; (800cc54 <UART_SetConfig+0x2b8>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d138      	bne.n	800caf0 <UART_SetConfig+0x154>
 800ca7e:	4b74      	ldr	r3, [pc, #464]	; (800cc50 <UART_SetConfig+0x2b4>)
 800ca80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca84:	f003 030c 	and.w	r3, r3, #12
 800ca88:	2b0c      	cmp	r3, #12
 800ca8a:	d82d      	bhi.n	800cae8 <UART_SetConfig+0x14c>
 800ca8c:	a201      	add	r2, pc, #4	; (adr r2, 800ca94 <UART_SetConfig+0xf8>)
 800ca8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca92:	bf00      	nop
 800ca94:	0800cac9 	.word	0x0800cac9
 800ca98:	0800cae9 	.word	0x0800cae9
 800ca9c:	0800cae9 	.word	0x0800cae9
 800caa0:	0800cae9 	.word	0x0800cae9
 800caa4:	0800cad9 	.word	0x0800cad9
 800caa8:	0800cae9 	.word	0x0800cae9
 800caac:	0800cae9 	.word	0x0800cae9
 800cab0:	0800cae9 	.word	0x0800cae9
 800cab4:	0800cad1 	.word	0x0800cad1
 800cab8:	0800cae9 	.word	0x0800cae9
 800cabc:	0800cae9 	.word	0x0800cae9
 800cac0:	0800cae9 	.word	0x0800cae9
 800cac4:	0800cae1 	.word	0x0800cae1
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cace:	e06d      	b.n	800cbac <UART_SetConfig+0x210>
 800cad0:	2302      	movs	r3, #2
 800cad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cad6:	e069      	b.n	800cbac <UART_SetConfig+0x210>
 800cad8:	2304      	movs	r3, #4
 800cada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cade:	e065      	b.n	800cbac <UART_SetConfig+0x210>
 800cae0:	2308      	movs	r3, #8
 800cae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cae6:	e061      	b.n	800cbac <UART_SetConfig+0x210>
 800cae8:	2310      	movs	r3, #16
 800caea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800caee:	e05d      	b.n	800cbac <UART_SetConfig+0x210>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a58      	ldr	r2, [pc, #352]	; (800cc58 <UART_SetConfig+0x2bc>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d125      	bne.n	800cb46 <UART_SetConfig+0x1aa>
 800cafa:	4b55      	ldr	r3, [pc, #340]	; (800cc50 <UART_SetConfig+0x2b4>)
 800cafc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cb04:	2b30      	cmp	r3, #48	; 0x30
 800cb06:	d016      	beq.n	800cb36 <UART_SetConfig+0x19a>
 800cb08:	2b30      	cmp	r3, #48	; 0x30
 800cb0a:	d818      	bhi.n	800cb3e <UART_SetConfig+0x1a2>
 800cb0c:	2b20      	cmp	r3, #32
 800cb0e:	d00a      	beq.n	800cb26 <UART_SetConfig+0x18a>
 800cb10:	2b20      	cmp	r3, #32
 800cb12:	d814      	bhi.n	800cb3e <UART_SetConfig+0x1a2>
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <UART_SetConfig+0x182>
 800cb18:	2b10      	cmp	r3, #16
 800cb1a:	d008      	beq.n	800cb2e <UART_SetConfig+0x192>
 800cb1c:	e00f      	b.n	800cb3e <UART_SetConfig+0x1a2>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb24:	e042      	b.n	800cbac <UART_SetConfig+0x210>
 800cb26:	2302      	movs	r3, #2
 800cb28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb2c:	e03e      	b.n	800cbac <UART_SetConfig+0x210>
 800cb2e:	2304      	movs	r3, #4
 800cb30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb34:	e03a      	b.n	800cbac <UART_SetConfig+0x210>
 800cb36:	2308      	movs	r3, #8
 800cb38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb3c:	e036      	b.n	800cbac <UART_SetConfig+0x210>
 800cb3e:	2310      	movs	r3, #16
 800cb40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb44:	e032      	b.n	800cbac <UART_SetConfig+0x210>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a3f      	ldr	r2, [pc, #252]	; (800cc48 <UART_SetConfig+0x2ac>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d12a      	bne.n	800cba6 <UART_SetConfig+0x20a>
 800cb50:	4b3f      	ldr	r3, [pc, #252]	; (800cc50 <UART_SetConfig+0x2b4>)
 800cb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb56:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cb5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb5e:	d01a      	beq.n	800cb96 <UART_SetConfig+0x1fa>
 800cb60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb64:	d81b      	bhi.n	800cb9e <UART_SetConfig+0x202>
 800cb66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb6a:	d00c      	beq.n	800cb86 <UART_SetConfig+0x1ea>
 800cb6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb70:	d815      	bhi.n	800cb9e <UART_SetConfig+0x202>
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <UART_SetConfig+0x1e2>
 800cb76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb7a:	d008      	beq.n	800cb8e <UART_SetConfig+0x1f2>
 800cb7c:	e00f      	b.n	800cb9e <UART_SetConfig+0x202>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb84:	e012      	b.n	800cbac <UART_SetConfig+0x210>
 800cb86:	2302      	movs	r3, #2
 800cb88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb8c:	e00e      	b.n	800cbac <UART_SetConfig+0x210>
 800cb8e:	2304      	movs	r3, #4
 800cb90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb94:	e00a      	b.n	800cbac <UART_SetConfig+0x210>
 800cb96:	2308      	movs	r3, #8
 800cb98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cb9c:	e006      	b.n	800cbac <UART_SetConfig+0x210>
 800cb9e:	2310      	movs	r3, #16
 800cba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800cba4:	e002      	b.n	800cbac <UART_SetConfig+0x210>
 800cba6:	2310      	movs	r3, #16
 800cba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a25      	ldr	r2, [pc, #148]	; (800cc48 <UART_SetConfig+0x2ac>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	f040 808a 	bne.w	800cccc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cbb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cbbc:	2b08      	cmp	r3, #8
 800cbbe:	d824      	bhi.n	800cc0a <UART_SetConfig+0x26e>
 800cbc0:	a201      	add	r2, pc, #4	; (adr r2, 800cbc8 <UART_SetConfig+0x22c>)
 800cbc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc6:	bf00      	nop
 800cbc8:	0800cbed 	.word	0x0800cbed
 800cbcc:	0800cc0b 	.word	0x0800cc0b
 800cbd0:	0800cbf5 	.word	0x0800cbf5
 800cbd4:	0800cc0b 	.word	0x0800cc0b
 800cbd8:	0800cbfb 	.word	0x0800cbfb
 800cbdc:	0800cc0b 	.word	0x0800cc0b
 800cbe0:	0800cc0b 	.word	0x0800cc0b
 800cbe4:	0800cc0b 	.word	0x0800cc0b
 800cbe8:	0800cc03 	.word	0x0800cc03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbec:	f7fe f8e6 	bl	800adbc <HAL_RCC_GetPCLK1Freq>
 800cbf0:	61f8      	str	r0, [r7, #28]
        break;
 800cbf2:	e010      	b.n	800cc16 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbf4:	4b19      	ldr	r3, [pc, #100]	; (800cc5c <UART_SetConfig+0x2c0>)
 800cbf6:	61fb      	str	r3, [r7, #28]
        break;
 800cbf8:	e00d      	b.n	800cc16 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbfa:	f7fe f847 	bl	800ac8c <HAL_RCC_GetSysClockFreq>
 800cbfe:	61f8      	str	r0, [r7, #28]
        break;
 800cc00:	e009      	b.n	800cc16 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc06:	61fb      	str	r3, [r7, #28]
        break;
 800cc08:	e005      	b.n	800cc16 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cc14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f000 8109 	beq.w	800ce30 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	4613      	mov	r3, r2
 800cc24:	005b      	lsls	r3, r3, #1
 800cc26:	4413      	add	r3, r2
 800cc28:	69fa      	ldr	r2, [r7, #28]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d305      	bcc.n	800cc3a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800cc34:	69fa      	ldr	r2, [r7, #28]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d912      	bls.n	800cc60 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cc40:	e0f6      	b.n	800ce30 <UART_SetConfig+0x494>
 800cc42:	bf00      	nop
 800cc44:	efff69f3 	.word	0xefff69f3
 800cc48:	40008000 	.word	0x40008000
 800cc4c:	40013800 	.word	0x40013800
 800cc50:	40021000 	.word	0x40021000
 800cc54:	40004400 	.word	0x40004400
 800cc58:	40004800 	.word	0x40004800
 800cc5c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	2200      	movs	r2, #0
 800cc64:	461c      	mov	r4, r3
 800cc66:	4615      	mov	r5, r2
 800cc68:	f04f 0200 	mov.w	r2, #0
 800cc6c:	f04f 0300 	mov.w	r3, #0
 800cc70:	022b      	lsls	r3, r5, #8
 800cc72:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800cc76:	0222      	lsls	r2, r4, #8
 800cc78:	68f9      	ldr	r1, [r7, #12]
 800cc7a:	6849      	ldr	r1, [r1, #4]
 800cc7c:	0849      	lsrs	r1, r1, #1
 800cc7e:	2000      	movs	r0, #0
 800cc80:	4688      	mov	r8, r1
 800cc82:	4681      	mov	r9, r0
 800cc84:	eb12 0a08 	adds.w	sl, r2, r8
 800cc88:	eb43 0b09 	adc.w	fp, r3, r9
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	603b      	str	r3, [r7, #0]
 800cc94:	607a      	str	r2, [r7, #4]
 800cc96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc9a:	4650      	mov	r0, sl
 800cc9c:	4659      	mov	r1, fp
 800cc9e:	f7f4 f951 	bl	8000f44 <__aeabi_uldivmod>
 800cca2:	4602      	mov	r2, r0
 800cca4:	460b      	mov	r3, r1
 800cca6:	4613      	mov	r3, r2
 800cca8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccb0:	d308      	bcc.n	800ccc4 <UART_SetConfig+0x328>
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccb8:	d204      	bcs.n	800ccc4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	69ba      	ldr	r2, [r7, #24]
 800ccc0:	60da      	str	r2, [r3, #12]
 800ccc2:	e0b5      	b.n	800ce30 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ccca:	e0b1      	b.n	800ce30 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	69db      	ldr	r3, [r3, #28]
 800ccd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccd4:	d15d      	bne.n	800cd92 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800ccd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ccda:	2b08      	cmp	r3, #8
 800ccdc:	d827      	bhi.n	800cd2e <UART_SetConfig+0x392>
 800ccde:	a201      	add	r2, pc, #4	; (adr r2, 800cce4 <UART_SetConfig+0x348>)
 800cce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce4:	0800cd09 	.word	0x0800cd09
 800cce8:	0800cd11 	.word	0x0800cd11
 800ccec:	0800cd19 	.word	0x0800cd19
 800ccf0:	0800cd2f 	.word	0x0800cd2f
 800ccf4:	0800cd1f 	.word	0x0800cd1f
 800ccf8:	0800cd2f 	.word	0x0800cd2f
 800ccfc:	0800cd2f 	.word	0x0800cd2f
 800cd00:	0800cd2f 	.word	0x0800cd2f
 800cd04:	0800cd27 	.word	0x0800cd27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd08:	f7fe f858 	bl	800adbc <HAL_RCC_GetPCLK1Freq>
 800cd0c:	61f8      	str	r0, [r7, #28]
        break;
 800cd0e:	e014      	b.n	800cd3a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd10:	f7fe f86a 	bl	800ade8 <HAL_RCC_GetPCLK2Freq>
 800cd14:	61f8      	str	r0, [r7, #28]
        break;
 800cd16:	e010      	b.n	800cd3a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd18:	4b4c      	ldr	r3, [pc, #304]	; (800ce4c <UART_SetConfig+0x4b0>)
 800cd1a:	61fb      	str	r3, [r7, #28]
        break;
 800cd1c:	e00d      	b.n	800cd3a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd1e:	f7fd ffb5 	bl	800ac8c <HAL_RCC_GetSysClockFreq>
 800cd22:	61f8      	str	r0, [r7, #28]
        break;
 800cd24:	e009      	b.n	800cd3a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd2a:	61fb      	str	r3, [r7, #28]
        break;
 800cd2c:	e005      	b.n	800cd3a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cd32:	2301      	movs	r3, #1
 800cd34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cd38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d077      	beq.n	800ce30 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	005a      	lsls	r2, r3, #1
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	085b      	lsrs	r3, r3, #1
 800cd4a:	441a      	add	r2, r3
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	2b0f      	cmp	r3, #15
 800cd5a:	d916      	bls.n	800cd8a <UART_SetConfig+0x3ee>
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd62:	d212      	bcs.n	800cd8a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	b29b      	uxth	r3, r3
 800cd68:	f023 030f 	bic.w	r3, r3, #15
 800cd6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	085b      	lsrs	r3, r3, #1
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	f003 0307 	and.w	r3, r3, #7
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	8afb      	ldrh	r3, [r7, #22]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	8afa      	ldrh	r2, [r7, #22]
 800cd86:	60da      	str	r2, [r3, #12]
 800cd88:	e052      	b.n	800ce30 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cd90:	e04e      	b.n	800ce30 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cd96:	2b08      	cmp	r3, #8
 800cd98:	d827      	bhi.n	800cdea <UART_SetConfig+0x44e>
 800cd9a:	a201      	add	r2, pc, #4	; (adr r2, 800cda0 <UART_SetConfig+0x404>)
 800cd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda0:	0800cdc5 	.word	0x0800cdc5
 800cda4:	0800cdcd 	.word	0x0800cdcd
 800cda8:	0800cdd5 	.word	0x0800cdd5
 800cdac:	0800cdeb 	.word	0x0800cdeb
 800cdb0:	0800cddb 	.word	0x0800cddb
 800cdb4:	0800cdeb 	.word	0x0800cdeb
 800cdb8:	0800cdeb 	.word	0x0800cdeb
 800cdbc:	0800cdeb 	.word	0x0800cdeb
 800cdc0:	0800cde3 	.word	0x0800cde3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdc4:	f7fd fffa 	bl	800adbc <HAL_RCC_GetPCLK1Freq>
 800cdc8:	61f8      	str	r0, [r7, #28]
        break;
 800cdca:	e014      	b.n	800cdf6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdcc:	f7fe f80c 	bl	800ade8 <HAL_RCC_GetPCLK2Freq>
 800cdd0:	61f8      	str	r0, [r7, #28]
        break;
 800cdd2:	e010      	b.n	800cdf6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cdd4:	4b1d      	ldr	r3, [pc, #116]	; (800ce4c <UART_SetConfig+0x4b0>)
 800cdd6:	61fb      	str	r3, [r7, #28]
        break;
 800cdd8:	e00d      	b.n	800cdf6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cdda:	f7fd ff57 	bl	800ac8c <HAL_RCC_GetSysClockFreq>
 800cdde:	61f8      	str	r0, [r7, #28]
        break;
 800cde0:	e009      	b.n	800cdf6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cde2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cde6:	61fb      	str	r3, [r7, #28]
        break;
 800cde8:	e005      	b.n	800cdf6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cdf4:	bf00      	nop
    }

    if (pclk != 0U)
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d019      	beq.n	800ce30 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	085a      	lsrs	r2, r3, #1
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	441a      	add	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	2b0f      	cmp	r3, #15
 800ce14:	d909      	bls.n	800ce2a <UART_SetConfig+0x48e>
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce1c:	d205      	bcs.n	800ce2a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	60da      	str	r2, [r3, #12]
 800ce28:	e002      	b.n	800ce30 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ce3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3728      	adds	r7, #40	; 0x28
 800ce44:	46bd      	mov	sp, r7
 800ce46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce4a:	bf00      	nop
 800ce4c:	00f42400 	.word	0x00f42400

0800ce50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00a      	beq.n	800ce7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce7e:	f003 0302 	and.w	r3, r3, #2
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00a      	beq.n	800ce9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	430a      	orrs	r2, r1
 800ce9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea0:	f003 0304 	and.w	r3, r3, #4
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00a      	beq.n	800cebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	430a      	orrs	r2, r1
 800cebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec2:	f003 0308 	and.w	r3, r3, #8
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d00a      	beq.n	800cee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	430a      	orrs	r2, r1
 800cede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee4:	f003 0310 	and.w	r3, r3, #16
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00a      	beq.n	800cf02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	430a      	orrs	r2, r1
 800cf00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf06:	f003 0320 	and.w	r3, r3, #32
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	430a      	orrs	r2, r1
 800cf22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01a      	beq.n	800cf66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	430a      	orrs	r2, r1
 800cf44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf4e:	d10a      	bne.n	800cf66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	430a      	orrs	r2, r1
 800cf64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	605a      	str	r2, [r3, #4]
  }
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af02      	add	r7, sp, #8
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfa4:	f7f9 fbdc 	bl	8006760 <HAL_GetTick>
 800cfa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 0308 	and.w	r3, r3, #8
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d10e      	bne.n	800cfd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f82d 	bl	800d026 <UART_WaitOnFlagUntilTimeout>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d001      	beq.n	800cfd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cfd2:	2303      	movs	r3, #3
 800cfd4:	e023      	b.n	800d01e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 0304 	and.w	r3, r3, #4
 800cfe0:	2b04      	cmp	r3, #4
 800cfe2:	d10e      	bne.n	800d002 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f817 	bl	800d026 <UART_WaitOnFlagUntilTimeout>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cffe:	2303      	movs	r3, #3
 800d000:	e00d      	b.n	800d01e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2220      	movs	r2, #32
 800d006:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2220      	movs	r2, #32
 800d00c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b09c      	sub	sp, #112	; 0x70
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	60f8      	str	r0, [r7, #12]
 800d02e:	60b9      	str	r1, [r7, #8]
 800d030:	603b      	str	r3, [r7, #0]
 800d032:	4613      	mov	r3, r2
 800d034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d036:	e0a5      	b.n	800d184 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03e:	f000 80a1 	beq.w	800d184 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d042:	f7f9 fb8d 	bl	8006760 <HAL_GetTick>
 800d046:	4602      	mov	r2, r0
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d04e:	429a      	cmp	r2, r3
 800d050:	d302      	bcc.n	800d058 <UART_WaitOnFlagUntilTimeout+0x32>
 800d052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d054:	2b00      	cmp	r3, #0
 800d056:	d13e      	bne.n	800d0d6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d05e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d060:	e853 3f00 	ldrex	r3, [r3]
 800d064:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d06c:	667b      	str	r3, [r7, #100]	; 0x64
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	461a      	mov	r2, r3
 800d074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d076:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d078:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d07c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d07e:	e841 2300 	strex	r3, r2, [r1]
 800d082:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1e6      	bne.n	800d058 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	3308      	adds	r3, #8
 800d090:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d094:	e853 3f00 	ldrex	r3, [r3]
 800d098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	f023 0301 	bic.w	r3, r3, #1
 800d0a0:	663b      	str	r3, [r7, #96]	; 0x60
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	3308      	adds	r3, #8
 800d0a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d0aa:	64ba      	str	r2, [r7, #72]	; 0x48
 800d0ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d0b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0b2:	e841 2300 	strex	r3, r2, [r1]
 800d0b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d1e5      	bne.n	800d08a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2220      	movs	r2, #32
 800d0c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2220      	movs	r2, #32
 800d0c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d0d2:	2303      	movs	r3, #3
 800d0d4:	e067      	b.n	800d1a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 0304 	and.w	r3, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d04f      	beq.n	800d184 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d0ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d0f2:	d147      	bne.n	800d184 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0fc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	e853 3f00 	ldrex	r3, [r3]
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d112:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
 800d11e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d124:	e841 2300 	strex	r3, r2, [r1]
 800d128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1e6      	bne.n	800d0fe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	3308      	adds	r3, #8
 800d136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	e853 3f00 	ldrex	r3, [r3]
 800d13e:	613b      	str	r3, [r7, #16]
   return(result);
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	f023 0301 	bic.w	r3, r3, #1
 800d146:	66bb      	str	r3, [r7, #104]	; 0x68
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3308      	adds	r3, #8
 800d14e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d150:	623a      	str	r2, [r7, #32]
 800d152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d154:	69f9      	ldr	r1, [r7, #28]
 800d156:	6a3a      	ldr	r2, [r7, #32]
 800d158:	e841 2300 	strex	r3, r2, [r1]
 800d15c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d15e:	69bb      	ldr	r3, [r7, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d1e5      	bne.n	800d130 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2220      	movs	r2, #32
 800d168:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2220      	movs	r2, #32
 800d16e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2220      	movs	r2, #32
 800d174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d180:	2303      	movs	r3, #3
 800d182:	e010      	b.n	800d1a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	69da      	ldr	r2, [r3, #28]
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	4013      	ands	r3, r2
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	429a      	cmp	r2, r3
 800d192:	bf0c      	ite	eq
 800d194:	2301      	moveq	r3, #1
 800d196:	2300      	movne	r3, #0
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	461a      	mov	r2, r3
 800d19c:	79fb      	ldrb	r3, [r7, #7]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	f43f af4a 	beq.w	800d038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3770      	adds	r7, #112	; 0x70
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b097      	sub	sp, #92	; 0x5c
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	68ba      	ldr	r2, [r7, #8]
 800d1c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	88fa      	ldrh	r2, [r7, #6]
 800d1c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	88fa      	ldrh	r2, [r7, #6]
 800d1d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1e2:	d10e      	bne.n	800d202 <UART_Start_Receive_IT+0x52>
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d105      	bne.n	800d1f8 <UART_Start_Receive_IT+0x48>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d1f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d1f6:	e02d      	b.n	800d254 <UART_Start_Receive_IT+0xa4>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	22ff      	movs	r2, #255	; 0xff
 800d1fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d200:	e028      	b.n	800d254 <UART_Start_Receive_IT+0xa4>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10d      	bne.n	800d226 <UART_Start_Receive_IT+0x76>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d104      	bne.n	800d21c <UART_Start_Receive_IT+0x6c>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	22ff      	movs	r2, #255	; 0xff
 800d216:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d21a:	e01b      	b.n	800d254 <UART_Start_Receive_IT+0xa4>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	227f      	movs	r2, #127	; 0x7f
 800d220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d224:	e016      	b.n	800d254 <UART_Start_Receive_IT+0xa4>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d22e:	d10d      	bne.n	800d24c <UART_Start_Receive_IT+0x9c>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d104      	bne.n	800d242 <UART_Start_Receive_IT+0x92>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	227f      	movs	r2, #127	; 0x7f
 800d23c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d240:	e008      	b.n	800d254 <UART_Start_Receive_IT+0xa4>
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	223f      	movs	r2, #63	; 0x3f
 800d246:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d24a:	e003      	b.n	800d254 <UART_Start_Receive_IT+0xa4>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2222      	movs	r2, #34	; 0x22
 800d260:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d26c:	e853 3f00 	ldrex	r3, [r3]
 800d270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	f043 0301 	orr.w	r3, r3, #1
 800d278:	657b      	str	r3, [r7, #84]	; 0x54
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3308      	adds	r3, #8
 800d280:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d282:	64ba      	str	r2, [r7, #72]	; 0x48
 800d284:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d28a:	e841 2300 	strex	r3, r2, [r1]
 800d28e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1e5      	bne.n	800d262 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d29e:	d107      	bne.n	800d2b0 <UART_Start_Receive_IT+0x100>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d103      	bne.n	800d2b0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	4a24      	ldr	r2, [pc, #144]	; (800d33c <UART_Start_Receive_IT+0x18c>)
 800d2ac:	665a      	str	r2, [r3, #100]	; 0x64
 800d2ae:	e002      	b.n	800d2b6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	4a23      	ldr	r2, [pc, #140]	; (800d340 <UART_Start_Receive_IT+0x190>)
 800d2b4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d019      	beq.n	800d2fa <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ce:	e853 3f00 	ldrex	r3, [r3]
 800d2d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d2da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e4:	637b      	str	r3, [r7, #52]	; 0x34
 800d2e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2ec:	e841 2300 	strex	r3, r2, [r1]
 800d2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1e6      	bne.n	800d2c6 <UART_Start_Receive_IT+0x116>
 800d2f8:	e018      	b.n	800d32c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	e853 3f00 	ldrex	r3, [r3]
 800d306:	613b      	str	r3, [r7, #16]
   return(result);
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	f043 0320 	orr.w	r3, r3, #32
 800d30e:	653b      	str	r3, [r7, #80]	; 0x50
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	461a      	mov	r2, r3
 800d316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d318:	623b      	str	r3, [r7, #32]
 800d31a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31c:	69f9      	ldr	r1, [r7, #28]
 800d31e:	6a3a      	ldr	r2, [r7, #32]
 800d320:	e841 2300 	strex	r3, r2, [r1]
 800d324:	61bb      	str	r3, [r7, #24]
   return(result);
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1e6      	bne.n	800d2fa <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800d32c:	2300      	movs	r3, #0
}
 800d32e:	4618      	mov	r0, r3
 800d330:	375c      	adds	r7, #92	; 0x5c
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	0800d5eb 	.word	0x0800d5eb
 800d340:	0800d48b 	.word	0x0800d48b

0800d344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d344:	b480      	push	{r7}
 800d346:	b095      	sub	sp, #84	; 0x54
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d354:	e853 3f00 	ldrex	r3, [r3]
 800d358:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d360:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d36a:	643b      	str	r3, [r7, #64]	; 0x40
 800d36c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d372:	e841 2300 	strex	r3, r2, [r1]
 800d376:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1e6      	bne.n	800d34c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3308      	adds	r3, #8
 800d384:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d386:	6a3b      	ldr	r3, [r7, #32]
 800d388:	e853 3f00 	ldrex	r3, [r3]
 800d38c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	f023 0301 	bic.w	r3, r3, #1
 800d394:	64bb      	str	r3, [r7, #72]	; 0x48
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3308      	adds	r3, #8
 800d39c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d39e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3a6:	e841 2300 	strex	r3, r2, [r1]
 800d3aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1e5      	bne.n	800d37e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d118      	bne.n	800d3ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	e853 3f00 	ldrex	r3, [r3]
 800d3c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	f023 0310 	bic.w	r3, r3, #16
 800d3ce:	647b      	str	r3, [r7, #68]	; 0x44
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3d8:	61bb      	str	r3, [r7, #24]
 800d3da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3dc:	6979      	ldr	r1, [r7, #20]
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	e841 2300 	strex	r3, r2, [r1]
 800d3e4:	613b      	str	r3, [r7, #16]
   return(result);
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1e6      	bne.n	800d3ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2220      	movs	r2, #32
 800d3f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d3fe:	bf00      	nop
 800d400:	3754      	adds	r7, #84	; 0x54
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b084      	sub	sp, #16
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2200      	movs	r2, #0
 800d41c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	f7f5 fb3f 	bl	8002aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d42e:	bf00      	nop
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b088      	sub	sp, #32
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	e853 3f00 	ldrex	r3, [r3]
 800d44a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d452:	61fb      	str	r3, [r7, #28]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	461a      	mov	r2, r3
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	61bb      	str	r3, [r7, #24]
 800d45e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d460:	6979      	ldr	r1, [r7, #20]
 800d462:	69ba      	ldr	r2, [r7, #24]
 800d464:	e841 2300 	strex	r3, r2, [r1]
 800d468:	613b      	str	r3, [r7, #16]
   return(result);
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d1e6      	bne.n	800d43e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2220      	movs	r2, #32
 800d474:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7ff fa77 	bl	800c970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d482:	bf00      	nop
 800d484:	3720      	adds	r7, #32
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b096      	sub	sp, #88	; 0x58
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d498:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4a0:	2b22      	cmp	r3, #34	; 0x22
 800d4a2:	f040 8094 	bne.w	800d5ce <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d4b0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d4b4:	b2d9      	uxtb	r1, r3
 800d4b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4c0:	400a      	ands	r2, r1
 800d4c2:	b2d2      	uxtb	r2, r2
 800d4c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d179      	bne.n	800d5e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f6:	e853 3f00 	ldrex	r3, [r3]
 800d4fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d502:	653b      	str	r3, [r7, #80]	; 0x50
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	461a      	mov	r2, r3
 800d50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d50c:	647b      	str	r3, [r7, #68]	; 0x44
 800d50e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d510:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d514:	e841 2300 	strex	r3, r2, [r1]
 800d518:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d1e6      	bne.n	800d4ee <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3308      	adds	r3, #8
 800d526:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52a:	e853 3f00 	ldrex	r3, [r3]
 800d52e:	623b      	str	r3, [r7, #32]
   return(result);
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	f023 0301 	bic.w	r3, r3, #1
 800d536:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3308      	adds	r3, #8
 800d53e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d540:	633a      	str	r2, [r7, #48]	; 0x30
 800d542:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d548:	e841 2300 	strex	r3, r2, [r1]
 800d54c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d550:	2b00      	cmp	r3, #0
 800d552:	d1e5      	bne.n	800d520 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2220      	movs	r2, #32
 800d558:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d564:	2b01      	cmp	r3, #1
 800d566:	d12e      	bne.n	800d5c6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	e853 3f00 	ldrex	r3, [r3]
 800d57a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f023 0310 	bic.w	r3, r3, #16
 800d582:	64bb      	str	r3, [r7, #72]	; 0x48
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	461a      	mov	r2, r3
 800d58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d58c:	61fb      	str	r3, [r7, #28]
 800d58e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d590:	69b9      	ldr	r1, [r7, #24]
 800d592:	69fa      	ldr	r2, [r7, #28]
 800d594:	e841 2300 	strex	r3, r2, [r1]
 800d598:	617b      	str	r3, [r7, #20]
   return(result);
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1e6      	bne.n	800d56e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	f003 0310 	and.w	r3, r3, #16
 800d5aa:	2b10      	cmp	r3, #16
 800d5ac:	d103      	bne.n	800d5b6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2210      	movs	r2, #16
 800d5b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff f9e0 	bl	800c984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d5c4:	e00d      	b.n	800d5e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7f5 fa4c 	bl	8002a64 <HAL_UART_RxCpltCallback>
}
 800d5cc:	e009      	b.n	800d5e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	8b1b      	ldrh	r3, [r3, #24]
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f042 0208 	orr.w	r2, r2, #8
 800d5de:	b292      	uxth	r2, r2
 800d5e0:	831a      	strh	r2, [r3, #24]
}
 800d5e2:	bf00      	nop
 800d5e4:	3758      	adds	r7, #88	; 0x58
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b096      	sub	sp, #88	; 0x58
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d600:	2b22      	cmp	r3, #34	; 0x22
 800d602:	f040 8094 	bne.w	800d72e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d60c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d614:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d616:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d61a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d61e:	4013      	ands	r3, r2
 800d620:	b29a      	uxth	r2, r3
 800d622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d624:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d62a:	1c9a      	adds	r2, r3, #2
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d636:	b29b      	uxth	r3, r3
 800d638:	3b01      	subs	r3, #1
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d648:	b29b      	uxth	r3, r3
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d179      	bne.n	800d742 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d656:	e853 3f00 	ldrex	r3, [r3]
 800d65a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d662:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	461a      	mov	r2, r3
 800d66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d66c:	643b      	str	r3, [r7, #64]	; 0x40
 800d66e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d672:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e6      	bne.n	800d64e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	3308      	adds	r3, #8
 800d686:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	e853 3f00 	ldrex	r3, [r3]
 800d68e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	f023 0301 	bic.w	r3, r3, #1
 800d696:	64bb      	str	r3, [r7, #72]	; 0x48
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	3308      	adds	r3, #8
 800d69e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d6a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6a8:	e841 2300 	strex	r3, r2, [r1]
 800d6ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1e5      	bne.n	800d680 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d12e      	bne.n	800d726 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	e853 3f00 	ldrex	r3, [r3]
 800d6da:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	f023 0310 	bic.w	r3, r3, #16
 800d6e2:	647b      	str	r3, [r7, #68]	; 0x44
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ec:	61bb      	str	r3, [r7, #24]
 800d6ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	6979      	ldr	r1, [r7, #20]
 800d6f2:	69ba      	ldr	r2, [r7, #24]
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	613b      	str	r3, [r7, #16]
   return(result);
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e6      	bne.n	800d6ce <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	69db      	ldr	r3, [r3, #28]
 800d706:	f003 0310 	and.w	r3, r3, #16
 800d70a:	2b10      	cmp	r3, #16
 800d70c:	d103      	bne.n	800d716 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2210      	movs	r2, #16
 800d714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d71c:	4619      	mov	r1, r3
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7ff f930 	bl	800c984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d724:	e00d      	b.n	800d742 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7f5 f99c 	bl	8002a64 <HAL_UART_RxCpltCallback>
}
 800d72c:	e009      	b.n	800d742 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	8b1b      	ldrh	r3, [r3, #24]
 800d734:	b29a      	uxth	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f042 0208 	orr.w	r2, r2, #8
 800d73e:	b292      	uxth	r2, r2
 800d740:	831a      	strh	r2, [r3, #24]
}
 800d742:	bf00      	nop
 800d744:	3758      	adds	r7, #88	; 0x58
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d74a:	b480      	push	{r7}
 800d74c:	b083      	sub	sp, #12
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d752:	bf00      	nop
 800d754:	370c      	adds	r7, #12
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <sulp>:
 800d75e:	b570      	push	{r4, r5, r6, lr}
 800d760:	4604      	mov	r4, r0
 800d762:	460d      	mov	r5, r1
 800d764:	ec45 4b10 	vmov	d0, r4, r5
 800d768:	4616      	mov	r6, r2
 800d76a:	f003 fbc5 	bl	8010ef8 <__ulp>
 800d76e:	ec51 0b10 	vmov	r0, r1, d0
 800d772:	b17e      	cbz	r6, 800d794 <sulp+0x36>
 800d774:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d778:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd09      	ble.n	800d794 <sulp+0x36>
 800d780:	051b      	lsls	r3, r3, #20
 800d782:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d786:	2400      	movs	r4, #0
 800d788:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d78c:	4622      	mov	r2, r4
 800d78e:	462b      	mov	r3, r5
 800d790:	f7f2 ff32 	bl	80005f8 <__aeabi_dmul>
 800d794:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d798 <_strtod_l>:
 800d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d79c:	ed2d 8b02 	vpush	{d8}
 800d7a0:	b09b      	sub	sp, #108	; 0x6c
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	9213      	str	r2, [sp, #76]	; 0x4c
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	9216      	str	r2, [sp, #88]	; 0x58
 800d7aa:	460d      	mov	r5, r1
 800d7ac:	f04f 0800 	mov.w	r8, #0
 800d7b0:	f04f 0900 	mov.w	r9, #0
 800d7b4:	460a      	mov	r2, r1
 800d7b6:	9215      	str	r2, [sp, #84]	; 0x54
 800d7b8:	7811      	ldrb	r1, [r2, #0]
 800d7ba:	292b      	cmp	r1, #43	; 0x2b
 800d7bc:	d04c      	beq.n	800d858 <_strtod_l+0xc0>
 800d7be:	d83a      	bhi.n	800d836 <_strtod_l+0x9e>
 800d7c0:	290d      	cmp	r1, #13
 800d7c2:	d834      	bhi.n	800d82e <_strtod_l+0x96>
 800d7c4:	2908      	cmp	r1, #8
 800d7c6:	d834      	bhi.n	800d832 <_strtod_l+0x9a>
 800d7c8:	2900      	cmp	r1, #0
 800d7ca:	d03d      	beq.n	800d848 <_strtod_l+0xb0>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	920a      	str	r2, [sp, #40]	; 0x28
 800d7d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d7d2:	7832      	ldrb	r2, [r6, #0]
 800d7d4:	2a30      	cmp	r2, #48	; 0x30
 800d7d6:	f040 80b4 	bne.w	800d942 <_strtod_l+0x1aa>
 800d7da:	7872      	ldrb	r2, [r6, #1]
 800d7dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d7e0:	2a58      	cmp	r2, #88	; 0x58
 800d7e2:	d170      	bne.n	800d8c6 <_strtod_l+0x12e>
 800d7e4:	9302      	str	r3, [sp, #8]
 800d7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	ab16      	add	r3, sp, #88	; 0x58
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	4a8e      	ldr	r2, [pc, #568]	; (800da28 <_strtod_l+0x290>)
 800d7f0:	ab17      	add	r3, sp, #92	; 0x5c
 800d7f2:	a915      	add	r1, sp, #84	; 0x54
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f002 fc5d 	bl	80100b4 <__gethex>
 800d7fa:	f010 070f 	ands.w	r7, r0, #15
 800d7fe:	4605      	mov	r5, r0
 800d800:	d005      	beq.n	800d80e <_strtod_l+0x76>
 800d802:	2f06      	cmp	r7, #6
 800d804:	d12a      	bne.n	800d85c <_strtod_l+0xc4>
 800d806:	3601      	adds	r6, #1
 800d808:	2300      	movs	r3, #0
 800d80a:	9615      	str	r6, [sp, #84]	; 0x54
 800d80c:	930a      	str	r3, [sp, #40]	; 0x28
 800d80e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d810:	2b00      	cmp	r3, #0
 800d812:	f040 857f 	bne.w	800e314 <_strtod_l+0xb7c>
 800d816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d818:	b1db      	cbz	r3, 800d852 <_strtod_l+0xba>
 800d81a:	4642      	mov	r2, r8
 800d81c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d820:	ec43 2b10 	vmov	d0, r2, r3
 800d824:	b01b      	add	sp, #108	; 0x6c
 800d826:	ecbd 8b02 	vpop	{d8}
 800d82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82e:	2920      	cmp	r1, #32
 800d830:	d1cc      	bne.n	800d7cc <_strtod_l+0x34>
 800d832:	3201      	adds	r2, #1
 800d834:	e7bf      	b.n	800d7b6 <_strtod_l+0x1e>
 800d836:	292d      	cmp	r1, #45	; 0x2d
 800d838:	d1c8      	bne.n	800d7cc <_strtod_l+0x34>
 800d83a:	2101      	movs	r1, #1
 800d83c:	910a      	str	r1, [sp, #40]	; 0x28
 800d83e:	1c51      	adds	r1, r2, #1
 800d840:	9115      	str	r1, [sp, #84]	; 0x54
 800d842:	7852      	ldrb	r2, [r2, #1]
 800d844:	2a00      	cmp	r2, #0
 800d846:	d1c3      	bne.n	800d7d0 <_strtod_l+0x38>
 800d848:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d84a:	9515      	str	r5, [sp, #84]	; 0x54
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f040 855f 	bne.w	800e310 <_strtod_l+0xb78>
 800d852:	4642      	mov	r2, r8
 800d854:	464b      	mov	r3, r9
 800d856:	e7e3      	b.n	800d820 <_strtod_l+0x88>
 800d858:	2100      	movs	r1, #0
 800d85a:	e7ef      	b.n	800d83c <_strtod_l+0xa4>
 800d85c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d85e:	b13a      	cbz	r2, 800d870 <_strtod_l+0xd8>
 800d860:	2135      	movs	r1, #53	; 0x35
 800d862:	a818      	add	r0, sp, #96	; 0x60
 800d864:	f003 fc45 	bl	80110f2 <__copybits>
 800d868:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d86a:	4620      	mov	r0, r4
 800d86c:	f003 f818 	bl	80108a0 <_Bfree>
 800d870:	3f01      	subs	r7, #1
 800d872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d874:	2f04      	cmp	r7, #4
 800d876:	d806      	bhi.n	800d886 <_strtod_l+0xee>
 800d878:	e8df f007 	tbb	[pc, r7]
 800d87c:	201d0314 	.word	0x201d0314
 800d880:	14          	.byte	0x14
 800d881:	00          	.byte	0x00
 800d882:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800d886:	05e9      	lsls	r1, r5, #23
 800d888:	bf48      	it	mi
 800d88a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800d88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d892:	0d1b      	lsrs	r3, r3, #20
 800d894:	051b      	lsls	r3, r3, #20
 800d896:	2b00      	cmp	r3, #0
 800d898:	d1b9      	bne.n	800d80e <_strtod_l+0x76>
 800d89a:	f001 fc93 	bl	800f1c4 <__errno>
 800d89e:	2322      	movs	r3, #34	; 0x22
 800d8a0:	6003      	str	r3, [r0, #0]
 800d8a2:	e7b4      	b.n	800d80e <_strtod_l+0x76>
 800d8a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800d8a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d8ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d8b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d8b4:	e7e7      	b.n	800d886 <_strtod_l+0xee>
 800d8b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800da30 <_strtod_l+0x298>
 800d8ba:	e7e4      	b.n	800d886 <_strtod_l+0xee>
 800d8bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d8c0:	f04f 38ff 	mov.w	r8, #4294967295
 800d8c4:	e7df      	b.n	800d886 <_strtod_l+0xee>
 800d8c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8c8:	1c5a      	adds	r2, r3, #1
 800d8ca:	9215      	str	r2, [sp, #84]	; 0x54
 800d8cc:	785b      	ldrb	r3, [r3, #1]
 800d8ce:	2b30      	cmp	r3, #48	; 0x30
 800d8d0:	d0f9      	beq.n	800d8c6 <_strtod_l+0x12e>
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d09b      	beq.n	800d80e <_strtod_l+0x76>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	f04f 0a00 	mov.w	sl, #0
 800d8dc:	9304      	str	r3, [sp, #16]
 800d8de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d8e6:	46d3      	mov	fp, sl
 800d8e8:	220a      	movs	r2, #10
 800d8ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d8ec:	7806      	ldrb	r6, [r0, #0]
 800d8ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d8f2:	b2d9      	uxtb	r1, r3
 800d8f4:	2909      	cmp	r1, #9
 800d8f6:	d926      	bls.n	800d946 <_strtod_l+0x1ae>
 800d8f8:	494c      	ldr	r1, [pc, #304]	; (800da2c <_strtod_l+0x294>)
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	f001 fc06 	bl	800f10c <strncmp>
 800d900:	2800      	cmp	r0, #0
 800d902:	d030      	beq.n	800d966 <_strtod_l+0x1ce>
 800d904:	2000      	movs	r0, #0
 800d906:	4632      	mov	r2, r6
 800d908:	9005      	str	r0, [sp, #20]
 800d90a:	465e      	mov	r6, fp
 800d90c:	4603      	mov	r3, r0
 800d90e:	2a65      	cmp	r2, #101	; 0x65
 800d910:	d001      	beq.n	800d916 <_strtod_l+0x17e>
 800d912:	2a45      	cmp	r2, #69	; 0x45
 800d914:	d113      	bne.n	800d93e <_strtod_l+0x1a6>
 800d916:	b91e      	cbnz	r6, 800d920 <_strtod_l+0x188>
 800d918:	9a04      	ldr	r2, [sp, #16]
 800d91a:	4302      	orrs	r2, r0
 800d91c:	d094      	beq.n	800d848 <_strtod_l+0xb0>
 800d91e:	2600      	movs	r6, #0
 800d920:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d922:	1c6a      	adds	r2, r5, #1
 800d924:	9215      	str	r2, [sp, #84]	; 0x54
 800d926:	786a      	ldrb	r2, [r5, #1]
 800d928:	2a2b      	cmp	r2, #43	; 0x2b
 800d92a:	d074      	beq.n	800da16 <_strtod_l+0x27e>
 800d92c:	2a2d      	cmp	r2, #45	; 0x2d
 800d92e:	d078      	beq.n	800da22 <_strtod_l+0x28a>
 800d930:	f04f 0c00 	mov.w	ip, #0
 800d934:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d938:	2909      	cmp	r1, #9
 800d93a:	d97f      	bls.n	800da3c <_strtod_l+0x2a4>
 800d93c:	9515      	str	r5, [sp, #84]	; 0x54
 800d93e:	2700      	movs	r7, #0
 800d940:	e09e      	b.n	800da80 <_strtod_l+0x2e8>
 800d942:	2300      	movs	r3, #0
 800d944:	e7c8      	b.n	800d8d8 <_strtod_l+0x140>
 800d946:	f1bb 0f08 	cmp.w	fp, #8
 800d94a:	bfd8      	it	le
 800d94c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d94e:	f100 0001 	add.w	r0, r0, #1
 800d952:	bfda      	itte	le
 800d954:	fb02 3301 	mlale	r3, r2, r1, r3
 800d958:	9309      	strle	r3, [sp, #36]	; 0x24
 800d95a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d95e:	f10b 0b01 	add.w	fp, fp, #1
 800d962:	9015      	str	r0, [sp, #84]	; 0x54
 800d964:	e7c1      	b.n	800d8ea <_strtod_l+0x152>
 800d966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d968:	1c5a      	adds	r2, r3, #1
 800d96a:	9215      	str	r2, [sp, #84]	; 0x54
 800d96c:	785a      	ldrb	r2, [r3, #1]
 800d96e:	f1bb 0f00 	cmp.w	fp, #0
 800d972:	d037      	beq.n	800d9e4 <_strtod_l+0x24c>
 800d974:	9005      	str	r0, [sp, #20]
 800d976:	465e      	mov	r6, fp
 800d978:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d97c:	2b09      	cmp	r3, #9
 800d97e:	d912      	bls.n	800d9a6 <_strtod_l+0x20e>
 800d980:	2301      	movs	r3, #1
 800d982:	e7c4      	b.n	800d90e <_strtod_l+0x176>
 800d984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d986:	1c5a      	adds	r2, r3, #1
 800d988:	9215      	str	r2, [sp, #84]	; 0x54
 800d98a:	785a      	ldrb	r2, [r3, #1]
 800d98c:	3001      	adds	r0, #1
 800d98e:	2a30      	cmp	r2, #48	; 0x30
 800d990:	d0f8      	beq.n	800d984 <_strtod_l+0x1ec>
 800d992:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d996:	2b08      	cmp	r3, #8
 800d998:	f200 84c1 	bhi.w	800e31e <_strtod_l+0xb86>
 800d99c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d99e:	9005      	str	r0, [sp, #20]
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	3a30      	subs	r2, #48	; 0x30
 800d9a8:	f100 0301 	add.w	r3, r0, #1
 800d9ac:	d014      	beq.n	800d9d8 <_strtod_l+0x240>
 800d9ae:	9905      	ldr	r1, [sp, #20]
 800d9b0:	4419      	add	r1, r3
 800d9b2:	9105      	str	r1, [sp, #20]
 800d9b4:	4633      	mov	r3, r6
 800d9b6:	eb00 0c06 	add.w	ip, r0, r6
 800d9ba:	210a      	movs	r1, #10
 800d9bc:	4563      	cmp	r3, ip
 800d9be:	d113      	bne.n	800d9e8 <_strtod_l+0x250>
 800d9c0:	1833      	adds	r3, r6, r0
 800d9c2:	2b08      	cmp	r3, #8
 800d9c4:	f106 0601 	add.w	r6, r6, #1
 800d9c8:	4406      	add	r6, r0
 800d9ca:	dc1a      	bgt.n	800da02 <_strtod_l+0x26a>
 800d9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9ce:	230a      	movs	r3, #10
 800d9d0:	fb03 2301 	mla	r3, r3, r1, r2
 800d9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d9da:	1c51      	adds	r1, r2, #1
 800d9dc:	9115      	str	r1, [sp, #84]	; 0x54
 800d9de:	7852      	ldrb	r2, [r2, #1]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	e7c9      	b.n	800d978 <_strtod_l+0x1e0>
 800d9e4:	4658      	mov	r0, fp
 800d9e6:	e7d2      	b.n	800d98e <_strtod_l+0x1f6>
 800d9e8:	2b08      	cmp	r3, #8
 800d9ea:	f103 0301 	add.w	r3, r3, #1
 800d9ee:	dc03      	bgt.n	800d9f8 <_strtod_l+0x260>
 800d9f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d9f2:	434f      	muls	r7, r1
 800d9f4:	9709      	str	r7, [sp, #36]	; 0x24
 800d9f6:	e7e1      	b.n	800d9bc <_strtod_l+0x224>
 800d9f8:	2b10      	cmp	r3, #16
 800d9fa:	bfd8      	it	le
 800d9fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800da00:	e7dc      	b.n	800d9bc <_strtod_l+0x224>
 800da02:	2e10      	cmp	r6, #16
 800da04:	bfdc      	itt	le
 800da06:	230a      	movle	r3, #10
 800da08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800da0c:	e7e3      	b.n	800d9d6 <_strtod_l+0x23e>
 800da0e:	2300      	movs	r3, #0
 800da10:	9305      	str	r3, [sp, #20]
 800da12:	2301      	movs	r3, #1
 800da14:	e780      	b.n	800d918 <_strtod_l+0x180>
 800da16:	f04f 0c00 	mov.w	ip, #0
 800da1a:	1caa      	adds	r2, r5, #2
 800da1c:	9215      	str	r2, [sp, #84]	; 0x54
 800da1e:	78aa      	ldrb	r2, [r5, #2]
 800da20:	e788      	b.n	800d934 <_strtod_l+0x19c>
 800da22:	f04f 0c01 	mov.w	ip, #1
 800da26:	e7f8      	b.n	800da1a <_strtod_l+0x282>
 800da28:	08012358 	.word	0x08012358
 800da2c:	08012354 	.word	0x08012354
 800da30:	7ff00000 	.word	0x7ff00000
 800da34:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da36:	1c51      	adds	r1, r2, #1
 800da38:	9115      	str	r1, [sp, #84]	; 0x54
 800da3a:	7852      	ldrb	r2, [r2, #1]
 800da3c:	2a30      	cmp	r2, #48	; 0x30
 800da3e:	d0f9      	beq.n	800da34 <_strtod_l+0x29c>
 800da40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800da44:	2908      	cmp	r1, #8
 800da46:	f63f af7a 	bhi.w	800d93e <_strtod_l+0x1a6>
 800da4a:	3a30      	subs	r2, #48	; 0x30
 800da4c:	9208      	str	r2, [sp, #32]
 800da4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da50:	920c      	str	r2, [sp, #48]	; 0x30
 800da52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da54:	1c57      	adds	r7, r2, #1
 800da56:	9715      	str	r7, [sp, #84]	; 0x54
 800da58:	7852      	ldrb	r2, [r2, #1]
 800da5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800da5e:	f1be 0f09 	cmp.w	lr, #9
 800da62:	d938      	bls.n	800dad6 <_strtod_l+0x33e>
 800da64:	990c      	ldr	r1, [sp, #48]	; 0x30
 800da66:	1a7f      	subs	r7, r7, r1
 800da68:	2f08      	cmp	r7, #8
 800da6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800da6e:	dc03      	bgt.n	800da78 <_strtod_l+0x2e0>
 800da70:	9908      	ldr	r1, [sp, #32]
 800da72:	428f      	cmp	r7, r1
 800da74:	bfa8      	it	ge
 800da76:	460f      	movge	r7, r1
 800da78:	f1bc 0f00 	cmp.w	ip, #0
 800da7c:	d000      	beq.n	800da80 <_strtod_l+0x2e8>
 800da7e:	427f      	negs	r7, r7
 800da80:	2e00      	cmp	r6, #0
 800da82:	d14f      	bne.n	800db24 <_strtod_l+0x38c>
 800da84:	9904      	ldr	r1, [sp, #16]
 800da86:	4301      	orrs	r1, r0
 800da88:	f47f aec1 	bne.w	800d80e <_strtod_l+0x76>
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f47f aedb 	bne.w	800d848 <_strtod_l+0xb0>
 800da92:	2a69      	cmp	r2, #105	; 0x69
 800da94:	d029      	beq.n	800daea <_strtod_l+0x352>
 800da96:	dc26      	bgt.n	800dae6 <_strtod_l+0x34e>
 800da98:	2a49      	cmp	r2, #73	; 0x49
 800da9a:	d026      	beq.n	800daea <_strtod_l+0x352>
 800da9c:	2a4e      	cmp	r2, #78	; 0x4e
 800da9e:	f47f aed3 	bne.w	800d848 <_strtod_l+0xb0>
 800daa2:	499b      	ldr	r1, [pc, #620]	; (800dd10 <_strtod_l+0x578>)
 800daa4:	a815      	add	r0, sp, #84	; 0x54
 800daa6:	f002 fd45 	bl	8010534 <__match>
 800daaa:	2800      	cmp	r0, #0
 800daac:	f43f aecc 	beq.w	800d848 <_strtod_l+0xb0>
 800dab0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	2b28      	cmp	r3, #40	; 0x28
 800dab6:	d12f      	bne.n	800db18 <_strtod_l+0x380>
 800dab8:	4996      	ldr	r1, [pc, #600]	; (800dd14 <_strtod_l+0x57c>)
 800daba:	aa18      	add	r2, sp, #96	; 0x60
 800dabc:	a815      	add	r0, sp, #84	; 0x54
 800dabe:	f002 fd4d 	bl	801055c <__hexnan>
 800dac2:	2805      	cmp	r0, #5
 800dac4:	d128      	bne.n	800db18 <_strtod_l+0x380>
 800dac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dac8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dacc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800dad0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dad4:	e69b      	b.n	800d80e <_strtod_l+0x76>
 800dad6:	9f08      	ldr	r7, [sp, #32]
 800dad8:	210a      	movs	r1, #10
 800dada:	fb01 2107 	mla	r1, r1, r7, r2
 800dade:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800dae2:	9208      	str	r2, [sp, #32]
 800dae4:	e7b5      	b.n	800da52 <_strtod_l+0x2ba>
 800dae6:	2a6e      	cmp	r2, #110	; 0x6e
 800dae8:	e7d9      	b.n	800da9e <_strtod_l+0x306>
 800daea:	498b      	ldr	r1, [pc, #556]	; (800dd18 <_strtod_l+0x580>)
 800daec:	a815      	add	r0, sp, #84	; 0x54
 800daee:	f002 fd21 	bl	8010534 <__match>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	f43f aea8 	beq.w	800d848 <_strtod_l+0xb0>
 800daf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dafa:	4988      	ldr	r1, [pc, #544]	; (800dd1c <_strtod_l+0x584>)
 800dafc:	3b01      	subs	r3, #1
 800dafe:	a815      	add	r0, sp, #84	; 0x54
 800db00:	9315      	str	r3, [sp, #84]	; 0x54
 800db02:	f002 fd17 	bl	8010534 <__match>
 800db06:	b910      	cbnz	r0, 800db0e <_strtod_l+0x376>
 800db08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db0a:	3301      	adds	r3, #1
 800db0c:	9315      	str	r3, [sp, #84]	; 0x54
 800db0e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800dd2c <_strtod_l+0x594>
 800db12:	f04f 0800 	mov.w	r8, #0
 800db16:	e67a      	b.n	800d80e <_strtod_l+0x76>
 800db18:	4881      	ldr	r0, [pc, #516]	; (800dd20 <_strtod_l+0x588>)
 800db1a:	f001 fb8d 	bl	800f238 <nan>
 800db1e:	ec59 8b10 	vmov	r8, r9, d0
 800db22:	e674      	b.n	800d80e <_strtod_l+0x76>
 800db24:	9b05      	ldr	r3, [sp, #20]
 800db26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db28:	1afb      	subs	r3, r7, r3
 800db2a:	f1bb 0f00 	cmp.w	fp, #0
 800db2e:	bf08      	it	eq
 800db30:	46b3      	moveq	fp, r6
 800db32:	2e10      	cmp	r6, #16
 800db34:	9308      	str	r3, [sp, #32]
 800db36:	4635      	mov	r5, r6
 800db38:	bfa8      	it	ge
 800db3a:	2510      	movge	r5, #16
 800db3c:	f7f2 fce2 	bl	8000504 <__aeabi_ui2d>
 800db40:	2e09      	cmp	r6, #9
 800db42:	4680      	mov	r8, r0
 800db44:	4689      	mov	r9, r1
 800db46:	dd13      	ble.n	800db70 <_strtod_l+0x3d8>
 800db48:	4b76      	ldr	r3, [pc, #472]	; (800dd24 <_strtod_l+0x58c>)
 800db4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800db4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800db52:	f7f2 fd51 	bl	80005f8 <__aeabi_dmul>
 800db56:	4680      	mov	r8, r0
 800db58:	4650      	mov	r0, sl
 800db5a:	4689      	mov	r9, r1
 800db5c:	f7f2 fcd2 	bl	8000504 <__aeabi_ui2d>
 800db60:	4602      	mov	r2, r0
 800db62:	460b      	mov	r3, r1
 800db64:	4640      	mov	r0, r8
 800db66:	4649      	mov	r1, r9
 800db68:	f7f2 fb90 	bl	800028c <__adddf3>
 800db6c:	4680      	mov	r8, r0
 800db6e:	4689      	mov	r9, r1
 800db70:	2e0f      	cmp	r6, #15
 800db72:	dc38      	bgt.n	800dbe6 <_strtod_l+0x44e>
 800db74:	9b08      	ldr	r3, [sp, #32]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f43f ae49 	beq.w	800d80e <_strtod_l+0x76>
 800db7c:	dd24      	ble.n	800dbc8 <_strtod_l+0x430>
 800db7e:	2b16      	cmp	r3, #22
 800db80:	dc0b      	bgt.n	800db9a <_strtod_l+0x402>
 800db82:	4968      	ldr	r1, [pc, #416]	; (800dd24 <_strtod_l+0x58c>)
 800db84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db8c:	4642      	mov	r2, r8
 800db8e:	464b      	mov	r3, r9
 800db90:	f7f2 fd32 	bl	80005f8 <__aeabi_dmul>
 800db94:	4680      	mov	r8, r0
 800db96:	4689      	mov	r9, r1
 800db98:	e639      	b.n	800d80e <_strtod_l+0x76>
 800db9a:	9a08      	ldr	r2, [sp, #32]
 800db9c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800dba0:	4293      	cmp	r3, r2
 800dba2:	db20      	blt.n	800dbe6 <_strtod_l+0x44e>
 800dba4:	4c5f      	ldr	r4, [pc, #380]	; (800dd24 <_strtod_l+0x58c>)
 800dba6:	f1c6 060f 	rsb	r6, r6, #15
 800dbaa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800dbae:	4642      	mov	r2, r8
 800dbb0:	464b      	mov	r3, r9
 800dbb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbb6:	f7f2 fd1f 	bl	80005f8 <__aeabi_dmul>
 800dbba:	9b08      	ldr	r3, [sp, #32]
 800dbbc:	1b9e      	subs	r6, r3, r6
 800dbbe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800dbc2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dbc6:	e7e3      	b.n	800db90 <_strtod_l+0x3f8>
 800dbc8:	9b08      	ldr	r3, [sp, #32]
 800dbca:	3316      	adds	r3, #22
 800dbcc:	db0b      	blt.n	800dbe6 <_strtod_l+0x44e>
 800dbce:	9b05      	ldr	r3, [sp, #20]
 800dbd0:	1bdf      	subs	r7, r3, r7
 800dbd2:	4b54      	ldr	r3, [pc, #336]	; (800dd24 <_strtod_l+0x58c>)
 800dbd4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dbd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbdc:	4640      	mov	r0, r8
 800dbde:	4649      	mov	r1, r9
 800dbe0:	f7f2 fe34 	bl	800084c <__aeabi_ddiv>
 800dbe4:	e7d6      	b.n	800db94 <_strtod_l+0x3fc>
 800dbe6:	9b08      	ldr	r3, [sp, #32]
 800dbe8:	1b75      	subs	r5, r6, r5
 800dbea:	441d      	add	r5, r3
 800dbec:	2d00      	cmp	r5, #0
 800dbee:	dd70      	ble.n	800dcd2 <_strtod_l+0x53a>
 800dbf0:	f015 030f 	ands.w	r3, r5, #15
 800dbf4:	d00a      	beq.n	800dc0c <_strtod_l+0x474>
 800dbf6:	494b      	ldr	r1, [pc, #300]	; (800dd24 <_strtod_l+0x58c>)
 800dbf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dbfc:	4642      	mov	r2, r8
 800dbfe:	464b      	mov	r3, r9
 800dc00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc04:	f7f2 fcf8 	bl	80005f8 <__aeabi_dmul>
 800dc08:	4680      	mov	r8, r0
 800dc0a:	4689      	mov	r9, r1
 800dc0c:	f035 050f 	bics.w	r5, r5, #15
 800dc10:	d04d      	beq.n	800dcae <_strtod_l+0x516>
 800dc12:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800dc16:	dd22      	ble.n	800dc5e <_strtod_l+0x4c6>
 800dc18:	2500      	movs	r5, #0
 800dc1a:	46ab      	mov	fp, r5
 800dc1c:	9509      	str	r5, [sp, #36]	; 0x24
 800dc1e:	9505      	str	r5, [sp, #20]
 800dc20:	2322      	movs	r3, #34	; 0x22
 800dc22:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800dd2c <_strtod_l+0x594>
 800dc26:	6023      	str	r3, [r4, #0]
 800dc28:	f04f 0800 	mov.w	r8, #0
 800dc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f43f aded 	beq.w	800d80e <_strtod_l+0x76>
 800dc34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dc36:	4620      	mov	r0, r4
 800dc38:	f002 fe32 	bl	80108a0 <_Bfree>
 800dc3c:	9905      	ldr	r1, [sp, #20]
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f002 fe2e 	bl	80108a0 <_Bfree>
 800dc44:	4659      	mov	r1, fp
 800dc46:	4620      	mov	r0, r4
 800dc48:	f002 fe2a 	bl	80108a0 <_Bfree>
 800dc4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc4e:	4620      	mov	r0, r4
 800dc50:	f002 fe26 	bl	80108a0 <_Bfree>
 800dc54:	4629      	mov	r1, r5
 800dc56:	4620      	mov	r0, r4
 800dc58:	f002 fe22 	bl	80108a0 <_Bfree>
 800dc5c:	e5d7      	b.n	800d80e <_strtod_l+0x76>
 800dc5e:	4b32      	ldr	r3, [pc, #200]	; (800dd28 <_strtod_l+0x590>)
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	2300      	movs	r3, #0
 800dc64:	112d      	asrs	r5, r5, #4
 800dc66:	4640      	mov	r0, r8
 800dc68:	4649      	mov	r1, r9
 800dc6a:	469a      	mov	sl, r3
 800dc6c:	2d01      	cmp	r5, #1
 800dc6e:	dc21      	bgt.n	800dcb4 <_strtod_l+0x51c>
 800dc70:	b10b      	cbz	r3, 800dc76 <_strtod_l+0x4de>
 800dc72:	4680      	mov	r8, r0
 800dc74:	4689      	mov	r9, r1
 800dc76:	492c      	ldr	r1, [pc, #176]	; (800dd28 <_strtod_l+0x590>)
 800dc78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800dc7c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800dc80:	4642      	mov	r2, r8
 800dc82:	464b      	mov	r3, r9
 800dc84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc88:	f7f2 fcb6 	bl	80005f8 <__aeabi_dmul>
 800dc8c:	4b27      	ldr	r3, [pc, #156]	; (800dd2c <_strtod_l+0x594>)
 800dc8e:	460a      	mov	r2, r1
 800dc90:	400b      	ands	r3, r1
 800dc92:	4927      	ldr	r1, [pc, #156]	; (800dd30 <_strtod_l+0x598>)
 800dc94:	428b      	cmp	r3, r1
 800dc96:	4680      	mov	r8, r0
 800dc98:	d8be      	bhi.n	800dc18 <_strtod_l+0x480>
 800dc9a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dc9e:	428b      	cmp	r3, r1
 800dca0:	bf86      	itte	hi
 800dca2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800dd34 <_strtod_l+0x59c>
 800dca6:	f04f 38ff 	movhi.w	r8, #4294967295
 800dcaa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800dcae:	2300      	movs	r3, #0
 800dcb0:	9304      	str	r3, [sp, #16]
 800dcb2:	e07b      	b.n	800ddac <_strtod_l+0x614>
 800dcb4:	07ea      	lsls	r2, r5, #31
 800dcb6:	d505      	bpl.n	800dcc4 <_strtod_l+0x52c>
 800dcb8:	9b04      	ldr	r3, [sp, #16]
 800dcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbe:	f7f2 fc9b 	bl	80005f8 <__aeabi_dmul>
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	9a04      	ldr	r2, [sp, #16]
 800dcc6:	3208      	adds	r2, #8
 800dcc8:	f10a 0a01 	add.w	sl, sl, #1
 800dccc:	106d      	asrs	r5, r5, #1
 800dcce:	9204      	str	r2, [sp, #16]
 800dcd0:	e7cc      	b.n	800dc6c <_strtod_l+0x4d4>
 800dcd2:	d0ec      	beq.n	800dcae <_strtod_l+0x516>
 800dcd4:	426d      	negs	r5, r5
 800dcd6:	f015 020f 	ands.w	r2, r5, #15
 800dcda:	d00a      	beq.n	800dcf2 <_strtod_l+0x55a>
 800dcdc:	4b11      	ldr	r3, [pc, #68]	; (800dd24 <_strtod_l+0x58c>)
 800dcde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dce2:	4640      	mov	r0, r8
 800dce4:	4649      	mov	r1, r9
 800dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcea:	f7f2 fdaf 	bl	800084c <__aeabi_ddiv>
 800dcee:	4680      	mov	r8, r0
 800dcf0:	4689      	mov	r9, r1
 800dcf2:	112d      	asrs	r5, r5, #4
 800dcf4:	d0db      	beq.n	800dcae <_strtod_l+0x516>
 800dcf6:	2d1f      	cmp	r5, #31
 800dcf8:	dd1e      	ble.n	800dd38 <_strtod_l+0x5a0>
 800dcfa:	2500      	movs	r5, #0
 800dcfc:	46ab      	mov	fp, r5
 800dcfe:	9509      	str	r5, [sp, #36]	; 0x24
 800dd00:	9505      	str	r5, [sp, #20]
 800dd02:	2322      	movs	r3, #34	; 0x22
 800dd04:	f04f 0800 	mov.w	r8, #0
 800dd08:	f04f 0900 	mov.w	r9, #0
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	e78d      	b.n	800dc2c <_strtod_l+0x494>
 800dd10:	080124b6 	.word	0x080124b6
 800dd14:	0801236c 	.word	0x0801236c
 800dd18:	080124ae 	.word	0x080124ae
 800dd1c:	080124e8 	.word	0x080124e8
 800dd20:	08012778 	.word	0x08012778
 800dd24:	08012658 	.word	0x08012658
 800dd28:	08012630 	.word	0x08012630
 800dd2c:	7ff00000 	.word	0x7ff00000
 800dd30:	7ca00000 	.word	0x7ca00000
 800dd34:	7fefffff 	.word	0x7fefffff
 800dd38:	f015 0310 	ands.w	r3, r5, #16
 800dd3c:	bf18      	it	ne
 800dd3e:	236a      	movne	r3, #106	; 0x6a
 800dd40:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e0e4 <_strtod_l+0x94c>
 800dd44:	9304      	str	r3, [sp, #16]
 800dd46:	4640      	mov	r0, r8
 800dd48:	4649      	mov	r1, r9
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	07ea      	lsls	r2, r5, #31
 800dd4e:	d504      	bpl.n	800dd5a <_strtod_l+0x5c2>
 800dd50:	e9da 2300 	ldrd	r2, r3, [sl]
 800dd54:	f7f2 fc50 	bl	80005f8 <__aeabi_dmul>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	106d      	asrs	r5, r5, #1
 800dd5c:	f10a 0a08 	add.w	sl, sl, #8
 800dd60:	d1f4      	bne.n	800dd4c <_strtod_l+0x5b4>
 800dd62:	b10b      	cbz	r3, 800dd68 <_strtod_l+0x5d0>
 800dd64:	4680      	mov	r8, r0
 800dd66:	4689      	mov	r9, r1
 800dd68:	9b04      	ldr	r3, [sp, #16]
 800dd6a:	b1bb      	cbz	r3, 800dd9c <_strtod_l+0x604>
 800dd6c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800dd70:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	4649      	mov	r1, r9
 800dd78:	dd10      	ble.n	800dd9c <_strtod_l+0x604>
 800dd7a:	2b1f      	cmp	r3, #31
 800dd7c:	f340 811e 	ble.w	800dfbc <_strtod_l+0x824>
 800dd80:	2b34      	cmp	r3, #52	; 0x34
 800dd82:	bfde      	ittt	le
 800dd84:	f04f 33ff 	movle.w	r3, #4294967295
 800dd88:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800dd8c:	4093      	lslle	r3, r2
 800dd8e:	f04f 0800 	mov.w	r8, #0
 800dd92:	bfcc      	ite	gt
 800dd94:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800dd98:	ea03 0901 	andle.w	r9, r3, r1
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	2300      	movs	r3, #0
 800dda0:	4640      	mov	r0, r8
 800dda2:	4649      	mov	r1, r9
 800dda4:	f7f2 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	d1a6      	bne.n	800dcfa <_strtod_l+0x562>
 800ddac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddae:	9300      	str	r3, [sp, #0]
 800ddb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddb2:	4633      	mov	r3, r6
 800ddb4:	465a      	mov	r2, fp
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f002 fdda 	bl	8010970 <__s2b>
 800ddbc:	9009      	str	r0, [sp, #36]	; 0x24
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	f43f af2a 	beq.w	800dc18 <_strtod_l+0x480>
 800ddc4:	9a08      	ldr	r2, [sp, #32]
 800ddc6:	9b05      	ldr	r3, [sp, #20]
 800ddc8:	2a00      	cmp	r2, #0
 800ddca:	eba3 0307 	sub.w	r3, r3, r7
 800ddce:	bfa8      	it	ge
 800ddd0:	2300      	movge	r3, #0
 800ddd2:	930c      	str	r3, [sp, #48]	; 0x30
 800ddd4:	2500      	movs	r5, #0
 800ddd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ddda:	9312      	str	r3, [sp, #72]	; 0x48
 800dddc:	46ab      	mov	fp, r5
 800ddde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde0:	4620      	mov	r0, r4
 800dde2:	6859      	ldr	r1, [r3, #4]
 800dde4:	f002 fd1c 	bl	8010820 <_Balloc>
 800dde8:	9005      	str	r0, [sp, #20]
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f43f af18 	beq.w	800dc20 <_strtod_l+0x488>
 800ddf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf2:	691a      	ldr	r2, [r3, #16]
 800ddf4:	3202      	adds	r2, #2
 800ddf6:	f103 010c 	add.w	r1, r3, #12
 800ddfa:	0092      	lsls	r2, r2, #2
 800ddfc:	300c      	adds	r0, #12
 800ddfe:	f001 fa0d 	bl	800f21c <memcpy>
 800de02:	ec49 8b10 	vmov	d0, r8, r9
 800de06:	aa18      	add	r2, sp, #96	; 0x60
 800de08:	a917      	add	r1, sp, #92	; 0x5c
 800de0a:	4620      	mov	r0, r4
 800de0c:	f003 f8e4 	bl	8010fd8 <__d2b>
 800de10:	ec49 8b18 	vmov	d8, r8, r9
 800de14:	9016      	str	r0, [sp, #88]	; 0x58
 800de16:	2800      	cmp	r0, #0
 800de18:	f43f af02 	beq.w	800dc20 <_strtod_l+0x488>
 800de1c:	2101      	movs	r1, #1
 800de1e:	4620      	mov	r0, r4
 800de20:	f002 fe3e 	bl	8010aa0 <__i2b>
 800de24:	4683      	mov	fp, r0
 800de26:	2800      	cmp	r0, #0
 800de28:	f43f aefa 	beq.w	800dc20 <_strtod_l+0x488>
 800de2c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800de2e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800de30:	2e00      	cmp	r6, #0
 800de32:	bfab      	itete	ge
 800de34:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800de36:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800de38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800de3a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800de3e:	bfac      	ite	ge
 800de40:	eb06 0a03 	addge.w	sl, r6, r3
 800de44:	1b9f      	sublt	r7, r3, r6
 800de46:	9b04      	ldr	r3, [sp, #16]
 800de48:	1af6      	subs	r6, r6, r3
 800de4a:	4416      	add	r6, r2
 800de4c:	4ba0      	ldr	r3, [pc, #640]	; (800e0d0 <_strtod_l+0x938>)
 800de4e:	3e01      	subs	r6, #1
 800de50:	429e      	cmp	r6, r3
 800de52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800de56:	f280 80c4 	bge.w	800dfe2 <_strtod_l+0x84a>
 800de5a:	1b9b      	subs	r3, r3, r6
 800de5c:	2b1f      	cmp	r3, #31
 800de5e:	eba2 0203 	sub.w	r2, r2, r3
 800de62:	f04f 0101 	mov.w	r1, #1
 800de66:	f300 80b0 	bgt.w	800dfca <_strtod_l+0x832>
 800de6a:	fa01 f303 	lsl.w	r3, r1, r3
 800de6e:	930e      	str	r3, [sp, #56]	; 0x38
 800de70:	2300      	movs	r3, #0
 800de72:	930d      	str	r3, [sp, #52]	; 0x34
 800de74:	eb0a 0602 	add.w	r6, sl, r2
 800de78:	9b04      	ldr	r3, [sp, #16]
 800de7a:	45b2      	cmp	sl, r6
 800de7c:	4417      	add	r7, r2
 800de7e:	441f      	add	r7, r3
 800de80:	4653      	mov	r3, sl
 800de82:	bfa8      	it	ge
 800de84:	4633      	movge	r3, r6
 800de86:	42bb      	cmp	r3, r7
 800de88:	bfa8      	it	ge
 800de8a:	463b      	movge	r3, r7
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	bfc2      	ittt	gt
 800de90:	1af6      	subgt	r6, r6, r3
 800de92:	1aff      	subgt	r7, r7, r3
 800de94:	ebaa 0a03 	subgt.w	sl, sl, r3
 800de98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	dd17      	ble.n	800dece <_strtod_l+0x736>
 800de9e:	4659      	mov	r1, fp
 800dea0:	461a      	mov	r2, r3
 800dea2:	4620      	mov	r0, r4
 800dea4:	f002 febc 	bl	8010c20 <__pow5mult>
 800dea8:	4683      	mov	fp, r0
 800deaa:	2800      	cmp	r0, #0
 800deac:	f43f aeb8 	beq.w	800dc20 <_strtod_l+0x488>
 800deb0:	4601      	mov	r1, r0
 800deb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800deb4:	4620      	mov	r0, r4
 800deb6:	f002 fe09 	bl	8010acc <__multiply>
 800deba:	900b      	str	r0, [sp, #44]	; 0x2c
 800debc:	2800      	cmp	r0, #0
 800debe:	f43f aeaf 	beq.w	800dc20 <_strtod_l+0x488>
 800dec2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dec4:	4620      	mov	r0, r4
 800dec6:	f002 fceb 	bl	80108a0 <_Bfree>
 800deca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800decc:	9316      	str	r3, [sp, #88]	; 0x58
 800dece:	2e00      	cmp	r6, #0
 800ded0:	f300 808c 	bgt.w	800dfec <_strtod_l+0x854>
 800ded4:	9b08      	ldr	r3, [sp, #32]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	dd08      	ble.n	800deec <_strtod_l+0x754>
 800deda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dedc:	9905      	ldr	r1, [sp, #20]
 800dede:	4620      	mov	r0, r4
 800dee0:	f002 fe9e 	bl	8010c20 <__pow5mult>
 800dee4:	9005      	str	r0, [sp, #20]
 800dee6:	2800      	cmp	r0, #0
 800dee8:	f43f ae9a 	beq.w	800dc20 <_strtod_l+0x488>
 800deec:	2f00      	cmp	r7, #0
 800deee:	dd08      	ble.n	800df02 <_strtod_l+0x76a>
 800def0:	9905      	ldr	r1, [sp, #20]
 800def2:	463a      	mov	r2, r7
 800def4:	4620      	mov	r0, r4
 800def6:	f002 feed 	bl	8010cd4 <__lshift>
 800defa:	9005      	str	r0, [sp, #20]
 800defc:	2800      	cmp	r0, #0
 800defe:	f43f ae8f 	beq.w	800dc20 <_strtod_l+0x488>
 800df02:	f1ba 0f00 	cmp.w	sl, #0
 800df06:	dd08      	ble.n	800df1a <_strtod_l+0x782>
 800df08:	4659      	mov	r1, fp
 800df0a:	4652      	mov	r2, sl
 800df0c:	4620      	mov	r0, r4
 800df0e:	f002 fee1 	bl	8010cd4 <__lshift>
 800df12:	4683      	mov	fp, r0
 800df14:	2800      	cmp	r0, #0
 800df16:	f43f ae83 	beq.w	800dc20 <_strtod_l+0x488>
 800df1a:	9a05      	ldr	r2, [sp, #20]
 800df1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800df1e:	4620      	mov	r0, r4
 800df20:	f002 ff60 	bl	8010de4 <__mdiff>
 800df24:	4605      	mov	r5, r0
 800df26:	2800      	cmp	r0, #0
 800df28:	f43f ae7a 	beq.w	800dc20 <_strtod_l+0x488>
 800df2c:	68c3      	ldr	r3, [r0, #12]
 800df2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800df30:	2300      	movs	r3, #0
 800df32:	60c3      	str	r3, [r0, #12]
 800df34:	4659      	mov	r1, fp
 800df36:	f002 ff39 	bl	8010dac <__mcmp>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	da60      	bge.n	800e000 <_strtod_l+0x868>
 800df3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df40:	ea53 0308 	orrs.w	r3, r3, r8
 800df44:	f040 8084 	bne.w	800e050 <_strtod_l+0x8b8>
 800df48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d17f      	bne.n	800e050 <_strtod_l+0x8b8>
 800df50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800df54:	0d1b      	lsrs	r3, r3, #20
 800df56:	051b      	lsls	r3, r3, #20
 800df58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800df5c:	d978      	bls.n	800e050 <_strtod_l+0x8b8>
 800df5e:	696b      	ldr	r3, [r5, #20]
 800df60:	b913      	cbnz	r3, 800df68 <_strtod_l+0x7d0>
 800df62:	692b      	ldr	r3, [r5, #16]
 800df64:	2b01      	cmp	r3, #1
 800df66:	dd73      	ble.n	800e050 <_strtod_l+0x8b8>
 800df68:	4629      	mov	r1, r5
 800df6a:	2201      	movs	r2, #1
 800df6c:	4620      	mov	r0, r4
 800df6e:	f002 feb1 	bl	8010cd4 <__lshift>
 800df72:	4659      	mov	r1, fp
 800df74:	4605      	mov	r5, r0
 800df76:	f002 ff19 	bl	8010dac <__mcmp>
 800df7a:	2800      	cmp	r0, #0
 800df7c:	dd68      	ble.n	800e050 <_strtod_l+0x8b8>
 800df7e:	9904      	ldr	r1, [sp, #16]
 800df80:	4a54      	ldr	r2, [pc, #336]	; (800e0d4 <_strtod_l+0x93c>)
 800df82:	464b      	mov	r3, r9
 800df84:	2900      	cmp	r1, #0
 800df86:	f000 8084 	beq.w	800e092 <_strtod_l+0x8fa>
 800df8a:	ea02 0109 	and.w	r1, r2, r9
 800df8e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800df92:	dc7e      	bgt.n	800e092 <_strtod_l+0x8fa>
 800df94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800df98:	f77f aeb3 	ble.w	800dd02 <_strtod_l+0x56a>
 800df9c:	4b4e      	ldr	r3, [pc, #312]	; (800e0d8 <_strtod_l+0x940>)
 800df9e:	4640      	mov	r0, r8
 800dfa0:	4649      	mov	r1, r9
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f7f2 fb28 	bl	80005f8 <__aeabi_dmul>
 800dfa8:	4b4a      	ldr	r3, [pc, #296]	; (800e0d4 <_strtod_l+0x93c>)
 800dfaa:	400b      	ands	r3, r1
 800dfac:	4680      	mov	r8, r0
 800dfae:	4689      	mov	r9, r1
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f47f ae3f 	bne.w	800dc34 <_strtod_l+0x49c>
 800dfb6:	2322      	movs	r3, #34	; 0x22
 800dfb8:	6023      	str	r3, [r4, #0]
 800dfba:	e63b      	b.n	800dc34 <_strtod_l+0x49c>
 800dfbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc0:	fa02 f303 	lsl.w	r3, r2, r3
 800dfc4:	ea03 0808 	and.w	r8, r3, r8
 800dfc8:	e6e8      	b.n	800dd9c <_strtod_l+0x604>
 800dfca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800dfce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800dfd2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800dfd6:	36e2      	adds	r6, #226	; 0xe2
 800dfd8:	fa01 f306 	lsl.w	r3, r1, r6
 800dfdc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800dfe0:	e748      	b.n	800de74 <_strtod_l+0x6dc>
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800dfea:	e743      	b.n	800de74 <_strtod_l+0x6dc>
 800dfec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800dfee:	4632      	mov	r2, r6
 800dff0:	4620      	mov	r0, r4
 800dff2:	f002 fe6f 	bl	8010cd4 <__lshift>
 800dff6:	9016      	str	r0, [sp, #88]	; 0x58
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f47f af6b 	bne.w	800ded4 <_strtod_l+0x73c>
 800dffe:	e60f      	b.n	800dc20 <_strtod_l+0x488>
 800e000:	46ca      	mov	sl, r9
 800e002:	d171      	bne.n	800e0e8 <_strtod_l+0x950>
 800e004:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e006:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e00a:	b352      	cbz	r2, 800e062 <_strtod_l+0x8ca>
 800e00c:	4a33      	ldr	r2, [pc, #204]	; (800e0dc <_strtod_l+0x944>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d12a      	bne.n	800e068 <_strtod_l+0x8d0>
 800e012:	9b04      	ldr	r3, [sp, #16]
 800e014:	4641      	mov	r1, r8
 800e016:	b1fb      	cbz	r3, 800e058 <_strtod_l+0x8c0>
 800e018:	4b2e      	ldr	r3, [pc, #184]	; (800e0d4 <_strtod_l+0x93c>)
 800e01a:	ea09 0303 	and.w	r3, r9, r3
 800e01e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e022:	f04f 32ff 	mov.w	r2, #4294967295
 800e026:	d81a      	bhi.n	800e05e <_strtod_l+0x8c6>
 800e028:	0d1b      	lsrs	r3, r3, #20
 800e02a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e02e:	fa02 f303 	lsl.w	r3, r2, r3
 800e032:	4299      	cmp	r1, r3
 800e034:	d118      	bne.n	800e068 <_strtod_l+0x8d0>
 800e036:	4b2a      	ldr	r3, [pc, #168]	; (800e0e0 <_strtod_l+0x948>)
 800e038:	459a      	cmp	sl, r3
 800e03a:	d102      	bne.n	800e042 <_strtod_l+0x8aa>
 800e03c:	3101      	adds	r1, #1
 800e03e:	f43f adef 	beq.w	800dc20 <_strtod_l+0x488>
 800e042:	4b24      	ldr	r3, [pc, #144]	; (800e0d4 <_strtod_l+0x93c>)
 800e044:	ea0a 0303 	and.w	r3, sl, r3
 800e048:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e04c:	f04f 0800 	mov.w	r8, #0
 800e050:	9b04      	ldr	r3, [sp, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1a2      	bne.n	800df9c <_strtod_l+0x804>
 800e056:	e5ed      	b.n	800dc34 <_strtod_l+0x49c>
 800e058:	f04f 33ff 	mov.w	r3, #4294967295
 800e05c:	e7e9      	b.n	800e032 <_strtod_l+0x89a>
 800e05e:	4613      	mov	r3, r2
 800e060:	e7e7      	b.n	800e032 <_strtod_l+0x89a>
 800e062:	ea53 0308 	orrs.w	r3, r3, r8
 800e066:	d08a      	beq.n	800df7e <_strtod_l+0x7e6>
 800e068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e06a:	b1e3      	cbz	r3, 800e0a6 <_strtod_l+0x90e>
 800e06c:	ea13 0f0a 	tst.w	r3, sl
 800e070:	d0ee      	beq.n	800e050 <_strtod_l+0x8b8>
 800e072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e074:	9a04      	ldr	r2, [sp, #16]
 800e076:	4640      	mov	r0, r8
 800e078:	4649      	mov	r1, r9
 800e07a:	b1c3      	cbz	r3, 800e0ae <_strtod_l+0x916>
 800e07c:	f7ff fb6f 	bl	800d75e <sulp>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	ec51 0b18 	vmov	r0, r1, d8
 800e088:	f7f2 f900 	bl	800028c <__adddf3>
 800e08c:	4680      	mov	r8, r0
 800e08e:	4689      	mov	r9, r1
 800e090:	e7de      	b.n	800e050 <_strtod_l+0x8b8>
 800e092:	4013      	ands	r3, r2
 800e094:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e098:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e09c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e0a0:	f04f 38ff 	mov.w	r8, #4294967295
 800e0a4:	e7d4      	b.n	800e050 <_strtod_l+0x8b8>
 800e0a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0a8:	ea13 0f08 	tst.w	r3, r8
 800e0ac:	e7e0      	b.n	800e070 <_strtod_l+0x8d8>
 800e0ae:	f7ff fb56 	bl	800d75e <sulp>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	ec51 0b18 	vmov	r0, r1, d8
 800e0ba:	f7f2 f8e5 	bl	8000288 <__aeabi_dsub>
 800e0be:	2200      	movs	r2, #0
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	4680      	mov	r8, r0
 800e0c4:	4689      	mov	r9, r1
 800e0c6:	f7f2 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d0c0      	beq.n	800e050 <_strtod_l+0x8b8>
 800e0ce:	e618      	b.n	800dd02 <_strtod_l+0x56a>
 800e0d0:	fffffc02 	.word	0xfffffc02
 800e0d4:	7ff00000 	.word	0x7ff00000
 800e0d8:	39500000 	.word	0x39500000
 800e0dc:	000fffff 	.word	0x000fffff
 800e0e0:	7fefffff 	.word	0x7fefffff
 800e0e4:	08012380 	.word	0x08012380
 800e0e8:	4659      	mov	r1, fp
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f002 ffce 	bl	801108c <__ratio>
 800e0f0:	ec57 6b10 	vmov	r6, r7, d0
 800e0f4:	ee10 0a10 	vmov	r0, s0
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e0fe:	4639      	mov	r1, r7
 800e100:	f7f2 fcf6 	bl	8000af0 <__aeabi_dcmple>
 800e104:	2800      	cmp	r0, #0
 800e106:	d071      	beq.n	800e1ec <_strtod_l+0xa54>
 800e108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d17c      	bne.n	800e208 <_strtod_l+0xa70>
 800e10e:	f1b8 0f00 	cmp.w	r8, #0
 800e112:	d15a      	bne.n	800e1ca <_strtod_l+0xa32>
 800e114:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d15d      	bne.n	800e1d8 <_strtod_l+0xa40>
 800e11c:	4b90      	ldr	r3, [pc, #576]	; (800e360 <_strtod_l+0xbc8>)
 800e11e:	2200      	movs	r2, #0
 800e120:	4630      	mov	r0, r6
 800e122:	4639      	mov	r1, r7
 800e124:	f7f2 fcda 	bl	8000adc <__aeabi_dcmplt>
 800e128:	2800      	cmp	r0, #0
 800e12a:	d15c      	bne.n	800e1e6 <_strtod_l+0xa4e>
 800e12c:	4630      	mov	r0, r6
 800e12e:	4639      	mov	r1, r7
 800e130:	4b8c      	ldr	r3, [pc, #560]	; (800e364 <_strtod_l+0xbcc>)
 800e132:	2200      	movs	r2, #0
 800e134:	f7f2 fa60 	bl	80005f8 <__aeabi_dmul>
 800e138:	4606      	mov	r6, r0
 800e13a:	460f      	mov	r7, r1
 800e13c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e140:	9606      	str	r6, [sp, #24]
 800e142:	9307      	str	r3, [sp, #28]
 800e144:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e148:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e14c:	4b86      	ldr	r3, [pc, #536]	; (800e368 <_strtod_l+0xbd0>)
 800e14e:	ea0a 0303 	and.w	r3, sl, r3
 800e152:	930d      	str	r3, [sp, #52]	; 0x34
 800e154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e156:	4b85      	ldr	r3, [pc, #532]	; (800e36c <_strtod_l+0xbd4>)
 800e158:	429a      	cmp	r2, r3
 800e15a:	f040 8090 	bne.w	800e27e <_strtod_l+0xae6>
 800e15e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e162:	ec49 8b10 	vmov	d0, r8, r9
 800e166:	f002 fec7 	bl	8010ef8 <__ulp>
 800e16a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e16e:	ec51 0b10 	vmov	r0, r1, d0
 800e172:	f7f2 fa41 	bl	80005f8 <__aeabi_dmul>
 800e176:	4642      	mov	r2, r8
 800e178:	464b      	mov	r3, r9
 800e17a:	f7f2 f887 	bl	800028c <__adddf3>
 800e17e:	460b      	mov	r3, r1
 800e180:	4979      	ldr	r1, [pc, #484]	; (800e368 <_strtod_l+0xbd0>)
 800e182:	4a7b      	ldr	r2, [pc, #492]	; (800e370 <_strtod_l+0xbd8>)
 800e184:	4019      	ands	r1, r3
 800e186:	4291      	cmp	r1, r2
 800e188:	4680      	mov	r8, r0
 800e18a:	d944      	bls.n	800e216 <_strtod_l+0xa7e>
 800e18c:	ee18 2a90 	vmov	r2, s17
 800e190:	4b78      	ldr	r3, [pc, #480]	; (800e374 <_strtod_l+0xbdc>)
 800e192:	429a      	cmp	r2, r3
 800e194:	d104      	bne.n	800e1a0 <_strtod_l+0xa08>
 800e196:	ee18 3a10 	vmov	r3, s16
 800e19a:	3301      	adds	r3, #1
 800e19c:	f43f ad40 	beq.w	800dc20 <_strtod_l+0x488>
 800e1a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e374 <_strtod_l+0xbdc>
 800e1a4:	f04f 38ff 	mov.w	r8, #4294967295
 800e1a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f002 fb78 	bl	80108a0 <_Bfree>
 800e1b0:	9905      	ldr	r1, [sp, #20]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f002 fb74 	bl	80108a0 <_Bfree>
 800e1b8:	4659      	mov	r1, fp
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f002 fb70 	bl	80108a0 <_Bfree>
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f002 fb6c 	bl	80108a0 <_Bfree>
 800e1c8:	e609      	b.n	800ddde <_strtod_l+0x646>
 800e1ca:	f1b8 0f01 	cmp.w	r8, #1
 800e1ce:	d103      	bne.n	800e1d8 <_strtod_l+0xa40>
 800e1d0:	f1b9 0f00 	cmp.w	r9, #0
 800e1d4:	f43f ad95 	beq.w	800dd02 <_strtod_l+0x56a>
 800e1d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e330 <_strtod_l+0xb98>
 800e1dc:	4f60      	ldr	r7, [pc, #384]	; (800e360 <_strtod_l+0xbc8>)
 800e1de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e1e2:	2600      	movs	r6, #0
 800e1e4:	e7ae      	b.n	800e144 <_strtod_l+0x9ac>
 800e1e6:	4f5f      	ldr	r7, [pc, #380]	; (800e364 <_strtod_l+0xbcc>)
 800e1e8:	2600      	movs	r6, #0
 800e1ea:	e7a7      	b.n	800e13c <_strtod_l+0x9a4>
 800e1ec:	4b5d      	ldr	r3, [pc, #372]	; (800e364 <_strtod_l+0xbcc>)
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	4639      	mov	r1, r7
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f7f2 fa00 	bl	80005f8 <__aeabi_dmul>
 800e1f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	460f      	mov	r7, r1
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d09c      	beq.n	800e13c <_strtod_l+0x9a4>
 800e202:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e206:	e79d      	b.n	800e144 <_strtod_l+0x9ac>
 800e208:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e338 <_strtod_l+0xba0>
 800e20c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e210:	ec57 6b17 	vmov	r6, r7, d7
 800e214:	e796      	b.n	800e144 <_strtod_l+0x9ac>
 800e216:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e21a:	9b04      	ldr	r3, [sp, #16]
 800e21c:	46ca      	mov	sl, r9
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1c2      	bne.n	800e1a8 <_strtod_l+0xa10>
 800e222:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e228:	0d1b      	lsrs	r3, r3, #20
 800e22a:	051b      	lsls	r3, r3, #20
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d1bb      	bne.n	800e1a8 <_strtod_l+0xa10>
 800e230:	4630      	mov	r0, r6
 800e232:	4639      	mov	r1, r7
 800e234:	f7f2 fe9e 	bl	8000f74 <__aeabi_d2lz>
 800e238:	f7f2 f9b0 	bl	800059c <__aeabi_l2d>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	4630      	mov	r0, r6
 800e242:	4639      	mov	r1, r7
 800e244:	f7f2 f820 	bl	8000288 <__aeabi_dsub>
 800e248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e24a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e24e:	ea43 0308 	orr.w	r3, r3, r8
 800e252:	4313      	orrs	r3, r2
 800e254:	4606      	mov	r6, r0
 800e256:	460f      	mov	r7, r1
 800e258:	d054      	beq.n	800e304 <_strtod_l+0xb6c>
 800e25a:	a339      	add	r3, pc, #228	; (adr r3, 800e340 <_strtod_l+0xba8>)
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f7f2 fc3c 	bl	8000adc <__aeabi_dcmplt>
 800e264:	2800      	cmp	r0, #0
 800e266:	f47f ace5 	bne.w	800dc34 <_strtod_l+0x49c>
 800e26a:	a337      	add	r3, pc, #220	; (adr r3, 800e348 <_strtod_l+0xbb0>)
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	4630      	mov	r0, r6
 800e272:	4639      	mov	r1, r7
 800e274:	f7f2 fc50 	bl	8000b18 <__aeabi_dcmpgt>
 800e278:	2800      	cmp	r0, #0
 800e27a:	d095      	beq.n	800e1a8 <_strtod_l+0xa10>
 800e27c:	e4da      	b.n	800dc34 <_strtod_l+0x49c>
 800e27e:	9b04      	ldr	r3, [sp, #16]
 800e280:	b333      	cbz	r3, 800e2d0 <_strtod_l+0xb38>
 800e282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e284:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e288:	d822      	bhi.n	800e2d0 <_strtod_l+0xb38>
 800e28a:	a331      	add	r3, pc, #196	; (adr r3, 800e350 <_strtod_l+0xbb8>)
 800e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e290:	4630      	mov	r0, r6
 800e292:	4639      	mov	r1, r7
 800e294:	f7f2 fc2c 	bl	8000af0 <__aeabi_dcmple>
 800e298:	b1a0      	cbz	r0, 800e2c4 <_strtod_l+0xb2c>
 800e29a:	4639      	mov	r1, r7
 800e29c:	4630      	mov	r0, r6
 800e29e:	f7f2 fc83 	bl	8000ba8 <__aeabi_d2uiz>
 800e2a2:	2801      	cmp	r0, #1
 800e2a4:	bf38      	it	cc
 800e2a6:	2001      	movcc	r0, #1
 800e2a8:	f7f2 f92c 	bl	8000504 <__aeabi_ui2d>
 800e2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	460f      	mov	r7, r1
 800e2b2:	bb23      	cbnz	r3, 800e2fe <_strtod_l+0xb66>
 800e2b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2b8:	9010      	str	r0, [sp, #64]	; 0x40
 800e2ba:	9311      	str	r3, [sp, #68]	; 0x44
 800e2bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e2c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e2c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e2cc:	1a9b      	subs	r3, r3, r2
 800e2ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e2d4:	eeb0 0a48 	vmov.f32	s0, s16
 800e2d8:	eef0 0a68 	vmov.f32	s1, s17
 800e2dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e2e0:	f002 fe0a 	bl	8010ef8 <__ulp>
 800e2e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e2e8:	ec53 2b10 	vmov	r2, r3, d0
 800e2ec:	f7f2 f984 	bl	80005f8 <__aeabi_dmul>
 800e2f0:	ec53 2b18 	vmov	r2, r3, d8
 800e2f4:	f7f1 ffca 	bl	800028c <__adddf3>
 800e2f8:	4680      	mov	r8, r0
 800e2fa:	4689      	mov	r9, r1
 800e2fc:	e78d      	b.n	800e21a <_strtod_l+0xa82>
 800e2fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e302:	e7db      	b.n	800e2bc <_strtod_l+0xb24>
 800e304:	a314      	add	r3, pc, #80	; (adr r3, 800e358 <_strtod_l+0xbc0>)
 800e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e30a:	f7f2 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800e30e:	e7b3      	b.n	800e278 <_strtod_l+0xae0>
 800e310:	2300      	movs	r3, #0
 800e312:	930a      	str	r3, [sp, #40]	; 0x28
 800e314:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e318:	6013      	str	r3, [r2, #0]
 800e31a:	f7ff ba7c 	b.w	800d816 <_strtod_l+0x7e>
 800e31e:	2a65      	cmp	r2, #101	; 0x65
 800e320:	f43f ab75 	beq.w	800da0e <_strtod_l+0x276>
 800e324:	2a45      	cmp	r2, #69	; 0x45
 800e326:	f43f ab72 	beq.w	800da0e <_strtod_l+0x276>
 800e32a:	2301      	movs	r3, #1
 800e32c:	f7ff bbaa 	b.w	800da84 <_strtod_l+0x2ec>
 800e330:	00000000 	.word	0x00000000
 800e334:	bff00000 	.word	0xbff00000
 800e338:	00000000 	.word	0x00000000
 800e33c:	3ff00000 	.word	0x3ff00000
 800e340:	94a03595 	.word	0x94a03595
 800e344:	3fdfffff 	.word	0x3fdfffff
 800e348:	35afe535 	.word	0x35afe535
 800e34c:	3fe00000 	.word	0x3fe00000
 800e350:	ffc00000 	.word	0xffc00000
 800e354:	41dfffff 	.word	0x41dfffff
 800e358:	94a03595 	.word	0x94a03595
 800e35c:	3fcfffff 	.word	0x3fcfffff
 800e360:	3ff00000 	.word	0x3ff00000
 800e364:	3fe00000 	.word	0x3fe00000
 800e368:	7ff00000 	.word	0x7ff00000
 800e36c:	7fe00000 	.word	0x7fe00000
 800e370:	7c9fffff 	.word	0x7c9fffff
 800e374:	7fefffff 	.word	0x7fefffff

0800e378 <strtof>:
 800e378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e37c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800e440 <strtof+0xc8>
 800e380:	4b2a      	ldr	r3, [pc, #168]	; (800e42c <strtof+0xb4>)
 800e382:	460a      	mov	r2, r1
 800e384:	ed2d 8b02 	vpush	{d8}
 800e388:	4601      	mov	r1, r0
 800e38a:	f8d8 0000 	ldr.w	r0, [r8]
 800e38e:	f7ff fa03 	bl	800d798 <_strtod_l>
 800e392:	ec55 4b10 	vmov	r4, r5, d0
 800e396:	ee10 2a10 	vmov	r2, s0
 800e39a:	ee10 0a10 	vmov	r0, s0
 800e39e:	462b      	mov	r3, r5
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	f7f2 fbc3 	bl	8000b2c <__aeabi_dcmpun>
 800e3a6:	b190      	cbz	r0, 800e3ce <strtof+0x56>
 800e3a8:	2d00      	cmp	r5, #0
 800e3aa:	4821      	ldr	r0, [pc, #132]	; (800e430 <strtof+0xb8>)
 800e3ac:	da09      	bge.n	800e3c2 <strtof+0x4a>
 800e3ae:	f000 ff4b 	bl	800f248 <nanf>
 800e3b2:	eeb1 8a40 	vneg.f32	s16, s0
 800e3b6:	eeb0 0a48 	vmov.f32	s0, s16
 800e3ba:	ecbd 8b02 	vpop	{d8}
 800e3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c2:	ecbd 8b02 	vpop	{d8}
 800e3c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ca:	f000 bf3d 	b.w	800f248 <nanf>
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	4629      	mov	r1, r5
 800e3d2:	f7f2 fc09 	bl	8000be8 <__aeabi_d2f>
 800e3d6:	ee08 0a10 	vmov	s16, r0
 800e3da:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e434 <strtof+0xbc>
 800e3de:	eeb0 7ac8 	vabs.f32	s14, s16
 800e3e2:	eeb4 7a67 	vcmp.f32	s14, s15
 800e3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ea:	dd11      	ble.n	800e410 <strtof+0x98>
 800e3ec:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800e3f0:	4b11      	ldr	r3, [pc, #68]	; (800e438 <strtof+0xc0>)
 800e3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	4639      	mov	r1, r7
 800e3fa:	f7f2 fb97 	bl	8000b2c <__aeabi_dcmpun>
 800e3fe:	b980      	cbnz	r0, 800e422 <strtof+0xaa>
 800e400:	4b0d      	ldr	r3, [pc, #52]	; (800e438 <strtof+0xc0>)
 800e402:	f04f 32ff 	mov.w	r2, #4294967295
 800e406:	4620      	mov	r0, r4
 800e408:	4639      	mov	r1, r7
 800e40a:	f7f2 fb71 	bl	8000af0 <__aeabi_dcmple>
 800e40e:	b940      	cbnz	r0, 800e422 <strtof+0xaa>
 800e410:	ee18 3a10 	vmov	r3, s16
 800e414:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e418:	d1cd      	bne.n	800e3b6 <strtof+0x3e>
 800e41a:	4b08      	ldr	r3, [pc, #32]	; (800e43c <strtof+0xc4>)
 800e41c:	402b      	ands	r3, r5
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0c9      	beq.n	800e3b6 <strtof+0x3e>
 800e422:	f8d8 3000 	ldr.w	r3, [r8]
 800e426:	2222      	movs	r2, #34	; 0x22
 800e428:	601a      	str	r2, [r3, #0]
 800e42a:	e7c4      	b.n	800e3b6 <strtof+0x3e>
 800e42c:	20000050 	.word	0x20000050
 800e430:	08012778 	.word	0x08012778
 800e434:	7f7fffff 	.word	0x7f7fffff
 800e438:	7fefffff 	.word	0x7fefffff
 800e43c:	7ff00000 	.word	0x7ff00000
 800e440:	20000208 	.word	0x20000208

0800e444 <__cvt>:
 800e444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e448:	ec55 4b10 	vmov	r4, r5, d0
 800e44c:	2d00      	cmp	r5, #0
 800e44e:	460e      	mov	r6, r1
 800e450:	4619      	mov	r1, r3
 800e452:	462b      	mov	r3, r5
 800e454:	bfbb      	ittet	lt
 800e456:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e45a:	461d      	movlt	r5, r3
 800e45c:	2300      	movge	r3, #0
 800e45e:	232d      	movlt	r3, #45	; 0x2d
 800e460:	700b      	strb	r3, [r1, #0]
 800e462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e464:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e468:	4691      	mov	r9, r2
 800e46a:	f023 0820 	bic.w	r8, r3, #32
 800e46e:	bfbc      	itt	lt
 800e470:	4622      	movlt	r2, r4
 800e472:	4614      	movlt	r4, r2
 800e474:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e478:	d005      	beq.n	800e486 <__cvt+0x42>
 800e47a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e47e:	d100      	bne.n	800e482 <__cvt+0x3e>
 800e480:	3601      	adds	r6, #1
 800e482:	2102      	movs	r1, #2
 800e484:	e000      	b.n	800e488 <__cvt+0x44>
 800e486:	2103      	movs	r1, #3
 800e488:	ab03      	add	r3, sp, #12
 800e48a:	9301      	str	r3, [sp, #4]
 800e48c:	ab02      	add	r3, sp, #8
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	ec45 4b10 	vmov	d0, r4, r5
 800e494:	4653      	mov	r3, sl
 800e496:	4632      	mov	r2, r6
 800e498:	f000 ff66 	bl	800f368 <_dtoa_r>
 800e49c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	d102      	bne.n	800e4aa <__cvt+0x66>
 800e4a4:	f019 0f01 	tst.w	r9, #1
 800e4a8:	d022      	beq.n	800e4f0 <__cvt+0xac>
 800e4aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4ae:	eb07 0906 	add.w	r9, r7, r6
 800e4b2:	d110      	bne.n	800e4d6 <__cvt+0x92>
 800e4b4:	783b      	ldrb	r3, [r7, #0]
 800e4b6:	2b30      	cmp	r3, #48	; 0x30
 800e4b8:	d10a      	bne.n	800e4d0 <__cvt+0x8c>
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4620      	mov	r0, r4
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	f7f2 fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4c6:	b918      	cbnz	r0, 800e4d0 <__cvt+0x8c>
 800e4c8:	f1c6 0601 	rsb	r6, r6, #1
 800e4cc:	f8ca 6000 	str.w	r6, [sl]
 800e4d0:	f8da 3000 	ldr.w	r3, [sl]
 800e4d4:	4499      	add	r9, r3
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	2300      	movs	r3, #0
 800e4da:	4620      	mov	r0, r4
 800e4dc:	4629      	mov	r1, r5
 800e4de:	f7f2 faf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4e2:	b108      	cbz	r0, 800e4e8 <__cvt+0xa4>
 800e4e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e4e8:	2230      	movs	r2, #48	; 0x30
 800e4ea:	9b03      	ldr	r3, [sp, #12]
 800e4ec:	454b      	cmp	r3, r9
 800e4ee:	d307      	bcc.n	800e500 <__cvt+0xbc>
 800e4f0:	9b03      	ldr	r3, [sp, #12]
 800e4f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4f4:	1bdb      	subs	r3, r3, r7
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	b004      	add	sp, #16
 800e4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e500:	1c59      	adds	r1, r3, #1
 800e502:	9103      	str	r1, [sp, #12]
 800e504:	701a      	strb	r2, [r3, #0]
 800e506:	e7f0      	b.n	800e4ea <__cvt+0xa6>

0800e508 <__exponent>:
 800e508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e50a:	4603      	mov	r3, r0
 800e50c:	2900      	cmp	r1, #0
 800e50e:	bfb8      	it	lt
 800e510:	4249      	neglt	r1, r1
 800e512:	f803 2b02 	strb.w	r2, [r3], #2
 800e516:	bfb4      	ite	lt
 800e518:	222d      	movlt	r2, #45	; 0x2d
 800e51a:	222b      	movge	r2, #43	; 0x2b
 800e51c:	2909      	cmp	r1, #9
 800e51e:	7042      	strb	r2, [r0, #1]
 800e520:	dd2a      	ble.n	800e578 <__exponent+0x70>
 800e522:	f10d 0207 	add.w	r2, sp, #7
 800e526:	4617      	mov	r7, r2
 800e528:	260a      	movs	r6, #10
 800e52a:	4694      	mov	ip, r2
 800e52c:	fb91 f5f6 	sdiv	r5, r1, r6
 800e530:	fb06 1415 	mls	r4, r6, r5, r1
 800e534:	3430      	adds	r4, #48	; 0x30
 800e536:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e53a:	460c      	mov	r4, r1
 800e53c:	2c63      	cmp	r4, #99	; 0x63
 800e53e:	f102 32ff 	add.w	r2, r2, #4294967295
 800e542:	4629      	mov	r1, r5
 800e544:	dcf1      	bgt.n	800e52a <__exponent+0x22>
 800e546:	3130      	adds	r1, #48	; 0x30
 800e548:	f1ac 0402 	sub.w	r4, ip, #2
 800e54c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e550:	1c41      	adds	r1, r0, #1
 800e552:	4622      	mov	r2, r4
 800e554:	42ba      	cmp	r2, r7
 800e556:	d30a      	bcc.n	800e56e <__exponent+0x66>
 800e558:	f10d 0209 	add.w	r2, sp, #9
 800e55c:	eba2 020c 	sub.w	r2, r2, ip
 800e560:	42bc      	cmp	r4, r7
 800e562:	bf88      	it	hi
 800e564:	2200      	movhi	r2, #0
 800e566:	4413      	add	r3, r2
 800e568:	1a18      	subs	r0, r3, r0
 800e56a:	b003      	add	sp, #12
 800e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e56e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e572:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e576:	e7ed      	b.n	800e554 <__exponent+0x4c>
 800e578:	2330      	movs	r3, #48	; 0x30
 800e57a:	3130      	adds	r1, #48	; 0x30
 800e57c:	7083      	strb	r3, [r0, #2]
 800e57e:	70c1      	strb	r1, [r0, #3]
 800e580:	1d03      	adds	r3, r0, #4
 800e582:	e7f1      	b.n	800e568 <__exponent+0x60>

0800e584 <_printf_float>:
 800e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e588:	ed2d 8b02 	vpush	{d8}
 800e58c:	b08d      	sub	sp, #52	; 0x34
 800e58e:	460c      	mov	r4, r1
 800e590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e594:	4616      	mov	r6, r2
 800e596:	461f      	mov	r7, r3
 800e598:	4605      	mov	r5, r0
 800e59a:	f000 fdc9 	bl	800f130 <_localeconv_r>
 800e59e:	f8d0 a000 	ldr.w	sl, [r0]
 800e5a2:	4650      	mov	r0, sl
 800e5a4:	f7f1 fe64 	bl	8000270 <strlen>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	9305      	str	r3, [sp, #20]
 800e5b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e5b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e5b8:	3307      	adds	r3, #7
 800e5ba:	f023 0307 	bic.w	r3, r3, #7
 800e5be:	f103 0208 	add.w	r2, r3, #8
 800e5c2:	f8c8 2000 	str.w	r2, [r8]
 800e5c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e5ce:	9307      	str	r3, [sp, #28]
 800e5d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800e5d4:	ee08 0a10 	vmov	s16, r0
 800e5d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e5dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5e0:	4b9e      	ldr	r3, [pc, #632]	; (800e85c <_printf_float+0x2d8>)
 800e5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e6:	f7f2 faa1 	bl	8000b2c <__aeabi_dcmpun>
 800e5ea:	bb88      	cbnz	r0, 800e650 <_printf_float+0xcc>
 800e5ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5f0:	4b9a      	ldr	r3, [pc, #616]	; (800e85c <_printf_float+0x2d8>)
 800e5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f6:	f7f2 fa7b 	bl	8000af0 <__aeabi_dcmple>
 800e5fa:	bb48      	cbnz	r0, 800e650 <_printf_float+0xcc>
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	2300      	movs	r3, #0
 800e600:	4640      	mov	r0, r8
 800e602:	4649      	mov	r1, r9
 800e604:	f7f2 fa6a 	bl	8000adc <__aeabi_dcmplt>
 800e608:	b110      	cbz	r0, 800e610 <_printf_float+0x8c>
 800e60a:	232d      	movs	r3, #45	; 0x2d
 800e60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e610:	4a93      	ldr	r2, [pc, #588]	; (800e860 <_printf_float+0x2dc>)
 800e612:	4b94      	ldr	r3, [pc, #592]	; (800e864 <_printf_float+0x2e0>)
 800e614:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e618:	bf94      	ite	ls
 800e61a:	4690      	movls	r8, r2
 800e61c:	4698      	movhi	r8, r3
 800e61e:	2303      	movs	r3, #3
 800e620:	6123      	str	r3, [r4, #16]
 800e622:	9b05      	ldr	r3, [sp, #20]
 800e624:	f023 0304 	bic.w	r3, r3, #4
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	f04f 0900 	mov.w	r9, #0
 800e62e:	9700      	str	r7, [sp, #0]
 800e630:	4633      	mov	r3, r6
 800e632:	aa0b      	add	r2, sp, #44	; 0x2c
 800e634:	4621      	mov	r1, r4
 800e636:	4628      	mov	r0, r5
 800e638:	f000 f9da 	bl	800e9f0 <_printf_common>
 800e63c:	3001      	adds	r0, #1
 800e63e:	f040 8090 	bne.w	800e762 <_printf_float+0x1de>
 800e642:	f04f 30ff 	mov.w	r0, #4294967295
 800e646:	b00d      	add	sp, #52	; 0x34
 800e648:	ecbd 8b02 	vpop	{d8}
 800e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e650:	4642      	mov	r2, r8
 800e652:	464b      	mov	r3, r9
 800e654:	4640      	mov	r0, r8
 800e656:	4649      	mov	r1, r9
 800e658:	f7f2 fa68 	bl	8000b2c <__aeabi_dcmpun>
 800e65c:	b140      	cbz	r0, 800e670 <_printf_float+0xec>
 800e65e:	464b      	mov	r3, r9
 800e660:	2b00      	cmp	r3, #0
 800e662:	bfbc      	itt	lt
 800e664:	232d      	movlt	r3, #45	; 0x2d
 800e666:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e66a:	4a7f      	ldr	r2, [pc, #508]	; (800e868 <_printf_float+0x2e4>)
 800e66c:	4b7f      	ldr	r3, [pc, #508]	; (800e86c <_printf_float+0x2e8>)
 800e66e:	e7d1      	b.n	800e614 <_printf_float+0x90>
 800e670:	6863      	ldr	r3, [r4, #4]
 800e672:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e676:	9206      	str	r2, [sp, #24]
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	d13f      	bne.n	800e6fc <_printf_float+0x178>
 800e67c:	2306      	movs	r3, #6
 800e67e:	6063      	str	r3, [r4, #4]
 800e680:	9b05      	ldr	r3, [sp, #20]
 800e682:	6861      	ldr	r1, [r4, #4]
 800e684:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e688:	2300      	movs	r3, #0
 800e68a:	9303      	str	r3, [sp, #12]
 800e68c:	ab0a      	add	r3, sp, #40	; 0x28
 800e68e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e692:	ab09      	add	r3, sp, #36	; 0x24
 800e694:	ec49 8b10 	vmov	d0, r8, r9
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	6022      	str	r2, [r4, #0]
 800e69c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	f7ff fecf 	bl	800e444 <__cvt>
 800e6a6:	9b06      	ldr	r3, [sp, #24]
 800e6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6aa:	2b47      	cmp	r3, #71	; 0x47
 800e6ac:	4680      	mov	r8, r0
 800e6ae:	d108      	bne.n	800e6c2 <_printf_float+0x13e>
 800e6b0:	1cc8      	adds	r0, r1, #3
 800e6b2:	db02      	blt.n	800e6ba <_printf_float+0x136>
 800e6b4:	6863      	ldr	r3, [r4, #4]
 800e6b6:	4299      	cmp	r1, r3
 800e6b8:	dd41      	ble.n	800e73e <_printf_float+0x1ba>
 800e6ba:	f1ab 0302 	sub.w	r3, fp, #2
 800e6be:	fa5f fb83 	uxtb.w	fp, r3
 800e6c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e6c6:	d820      	bhi.n	800e70a <_printf_float+0x186>
 800e6c8:	3901      	subs	r1, #1
 800e6ca:	465a      	mov	r2, fp
 800e6cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e6d0:	9109      	str	r1, [sp, #36]	; 0x24
 800e6d2:	f7ff ff19 	bl	800e508 <__exponent>
 800e6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e6d8:	1813      	adds	r3, r2, r0
 800e6da:	2a01      	cmp	r2, #1
 800e6dc:	4681      	mov	r9, r0
 800e6de:	6123      	str	r3, [r4, #16]
 800e6e0:	dc02      	bgt.n	800e6e8 <_printf_float+0x164>
 800e6e2:	6822      	ldr	r2, [r4, #0]
 800e6e4:	07d2      	lsls	r2, r2, #31
 800e6e6:	d501      	bpl.n	800e6ec <_printf_float+0x168>
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	6123      	str	r3, [r4, #16]
 800e6ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d09c      	beq.n	800e62e <_printf_float+0xaa>
 800e6f4:	232d      	movs	r3, #45	; 0x2d
 800e6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6fa:	e798      	b.n	800e62e <_printf_float+0xaa>
 800e6fc:	9a06      	ldr	r2, [sp, #24]
 800e6fe:	2a47      	cmp	r2, #71	; 0x47
 800e700:	d1be      	bne.n	800e680 <_printf_float+0xfc>
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1bc      	bne.n	800e680 <_printf_float+0xfc>
 800e706:	2301      	movs	r3, #1
 800e708:	e7b9      	b.n	800e67e <_printf_float+0xfa>
 800e70a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e70e:	d118      	bne.n	800e742 <_printf_float+0x1be>
 800e710:	2900      	cmp	r1, #0
 800e712:	6863      	ldr	r3, [r4, #4]
 800e714:	dd0b      	ble.n	800e72e <_printf_float+0x1aa>
 800e716:	6121      	str	r1, [r4, #16]
 800e718:	b913      	cbnz	r3, 800e720 <_printf_float+0x19c>
 800e71a:	6822      	ldr	r2, [r4, #0]
 800e71c:	07d0      	lsls	r0, r2, #31
 800e71e:	d502      	bpl.n	800e726 <_printf_float+0x1a2>
 800e720:	3301      	adds	r3, #1
 800e722:	440b      	add	r3, r1
 800e724:	6123      	str	r3, [r4, #16]
 800e726:	65a1      	str	r1, [r4, #88]	; 0x58
 800e728:	f04f 0900 	mov.w	r9, #0
 800e72c:	e7de      	b.n	800e6ec <_printf_float+0x168>
 800e72e:	b913      	cbnz	r3, 800e736 <_printf_float+0x1b2>
 800e730:	6822      	ldr	r2, [r4, #0]
 800e732:	07d2      	lsls	r2, r2, #31
 800e734:	d501      	bpl.n	800e73a <_printf_float+0x1b6>
 800e736:	3302      	adds	r3, #2
 800e738:	e7f4      	b.n	800e724 <_printf_float+0x1a0>
 800e73a:	2301      	movs	r3, #1
 800e73c:	e7f2      	b.n	800e724 <_printf_float+0x1a0>
 800e73e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e744:	4299      	cmp	r1, r3
 800e746:	db05      	blt.n	800e754 <_printf_float+0x1d0>
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	6121      	str	r1, [r4, #16]
 800e74c:	07d8      	lsls	r0, r3, #31
 800e74e:	d5ea      	bpl.n	800e726 <_printf_float+0x1a2>
 800e750:	1c4b      	adds	r3, r1, #1
 800e752:	e7e7      	b.n	800e724 <_printf_float+0x1a0>
 800e754:	2900      	cmp	r1, #0
 800e756:	bfd4      	ite	le
 800e758:	f1c1 0202 	rsble	r2, r1, #2
 800e75c:	2201      	movgt	r2, #1
 800e75e:	4413      	add	r3, r2
 800e760:	e7e0      	b.n	800e724 <_printf_float+0x1a0>
 800e762:	6823      	ldr	r3, [r4, #0]
 800e764:	055a      	lsls	r2, r3, #21
 800e766:	d407      	bmi.n	800e778 <_printf_float+0x1f4>
 800e768:	6923      	ldr	r3, [r4, #16]
 800e76a:	4642      	mov	r2, r8
 800e76c:	4631      	mov	r1, r6
 800e76e:	4628      	mov	r0, r5
 800e770:	47b8      	blx	r7
 800e772:	3001      	adds	r0, #1
 800e774:	d12c      	bne.n	800e7d0 <_printf_float+0x24c>
 800e776:	e764      	b.n	800e642 <_printf_float+0xbe>
 800e778:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e77c:	f240 80e0 	bls.w	800e940 <_printf_float+0x3bc>
 800e780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e784:	2200      	movs	r2, #0
 800e786:	2300      	movs	r3, #0
 800e788:	f7f2 f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d034      	beq.n	800e7fa <_printf_float+0x276>
 800e790:	4a37      	ldr	r2, [pc, #220]	; (800e870 <_printf_float+0x2ec>)
 800e792:	2301      	movs	r3, #1
 800e794:	4631      	mov	r1, r6
 800e796:	4628      	mov	r0, r5
 800e798:	47b8      	blx	r7
 800e79a:	3001      	adds	r0, #1
 800e79c:	f43f af51 	beq.w	800e642 <_printf_float+0xbe>
 800e7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	db02      	blt.n	800e7ae <_printf_float+0x22a>
 800e7a8:	6823      	ldr	r3, [r4, #0]
 800e7aa:	07d8      	lsls	r0, r3, #31
 800e7ac:	d510      	bpl.n	800e7d0 <_printf_float+0x24c>
 800e7ae:	ee18 3a10 	vmov	r3, s16
 800e7b2:	4652      	mov	r2, sl
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b8      	blx	r7
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	f43f af41 	beq.w	800e642 <_printf_float+0xbe>
 800e7c0:	f04f 0800 	mov.w	r8, #0
 800e7c4:	f104 091a 	add.w	r9, r4, #26
 800e7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	4543      	cmp	r3, r8
 800e7ce:	dc09      	bgt.n	800e7e4 <_printf_float+0x260>
 800e7d0:	6823      	ldr	r3, [r4, #0]
 800e7d2:	079b      	lsls	r3, r3, #30
 800e7d4:	f100 8107 	bmi.w	800e9e6 <_printf_float+0x462>
 800e7d8:	68e0      	ldr	r0, [r4, #12]
 800e7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7dc:	4298      	cmp	r0, r3
 800e7de:	bfb8      	it	lt
 800e7e0:	4618      	movlt	r0, r3
 800e7e2:	e730      	b.n	800e646 <_printf_float+0xc2>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	464a      	mov	r2, r9
 800e7e8:	4631      	mov	r1, r6
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	47b8      	blx	r7
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	f43f af27 	beq.w	800e642 <_printf_float+0xbe>
 800e7f4:	f108 0801 	add.w	r8, r8, #1
 800e7f8:	e7e6      	b.n	800e7c8 <_printf_float+0x244>
 800e7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dc39      	bgt.n	800e874 <_printf_float+0x2f0>
 800e800:	4a1b      	ldr	r2, [pc, #108]	; (800e870 <_printf_float+0x2ec>)
 800e802:	2301      	movs	r3, #1
 800e804:	4631      	mov	r1, r6
 800e806:	4628      	mov	r0, r5
 800e808:	47b8      	blx	r7
 800e80a:	3001      	adds	r0, #1
 800e80c:	f43f af19 	beq.w	800e642 <_printf_float+0xbe>
 800e810:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e814:	4313      	orrs	r3, r2
 800e816:	d102      	bne.n	800e81e <_printf_float+0x29a>
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	07d9      	lsls	r1, r3, #31
 800e81c:	d5d8      	bpl.n	800e7d0 <_printf_float+0x24c>
 800e81e:	ee18 3a10 	vmov	r3, s16
 800e822:	4652      	mov	r2, sl
 800e824:	4631      	mov	r1, r6
 800e826:	4628      	mov	r0, r5
 800e828:	47b8      	blx	r7
 800e82a:	3001      	adds	r0, #1
 800e82c:	f43f af09 	beq.w	800e642 <_printf_float+0xbe>
 800e830:	f04f 0900 	mov.w	r9, #0
 800e834:	f104 0a1a 	add.w	sl, r4, #26
 800e838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e83a:	425b      	negs	r3, r3
 800e83c:	454b      	cmp	r3, r9
 800e83e:	dc01      	bgt.n	800e844 <_printf_float+0x2c0>
 800e840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e842:	e792      	b.n	800e76a <_printf_float+0x1e6>
 800e844:	2301      	movs	r3, #1
 800e846:	4652      	mov	r2, sl
 800e848:	4631      	mov	r1, r6
 800e84a:	4628      	mov	r0, r5
 800e84c:	47b8      	blx	r7
 800e84e:	3001      	adds	r0, #1
 800e850:	f43f aef7 	beq.w	800e642 <_printf_float+0xbe>
 800e854:	f109 0901 	add.w	r9, r9, #1
 800e858:	e7ee      	b.n	800e838 <_printf_float+0x2b4>
 800e85a:	bf00      	nop
 800e85c:	7fefffff 	.word	0x7fefffff
 800e860:	080124a9 	.word	0x080124a9
 800e864:	080124ad 	.word	0x080124ad
 800e868:	080124b1 	.word	0x080124b1
 800e86c:	080124b5 	.word	0x080124b5
 800e870:	080124b9 	.word	0x080124b9
 800e874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e876:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e878:	429a      	cmp	r2, r3
 800e87a:	bfa8      	it	ge
 800e87c:	461a      	movge	r2, r3
 800e87e:	2a00      	cmp	r2, #0
 800e880:	4691      	mov	r9, r2
 800e882:	dc37      	bgt.n	800e8f4 <_printf_float+0x370>
 800e884:	f04f 0b00 	mov.w	fp, #0
 800e888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e88c:	f104 021a 	add.w	r2, r4, #26
 800e890:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e892:	9305      	str	r3, [sp, #20]
 800e894:	eba3 0309 	sub.w	r3, r3, r9
 800e898:	455b      	cmp	r3, fp
 800e89a:	dc33      	bgt.n	800e904 <_printf_float+0x380>
 800e89c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	db3b      	blt.n	800e91c <_printf_float+0x398>
 800e8a4:	6823      	ldr	r3, [r4, #0]
 800e8a6:	07da      	lsls	r2, r3, #31
 800e8a8:	d438      	bmi.n	800e91c <_printf_float+0x398>
 800e8aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e8ae:	eba2 0903 	sub.w	r9, r2, r3
 800e8b2:	9b05      	ldr	r3, [sp, #20]
 800e8b4:	1ad2      	subs	r2, r2, r3
 800e8b6:	4591      	cmp	r9, r2
 800e8b8:	bfa8      	it	ge
 800e8ba:	4691      	movge	r9, r2
 800e8bc:	f1b9 0f00 	cmp.w	r9, #0
 800e8c0:	dc35      	bgt.n	800e92e <_printf_float+0x3aa>
 800e8c2:	f04f 0800 	mov.w	r8, #0
 800e8c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8ca:	f104 0a1a 	add.w	sl, r4, #26
 800e8ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8d2:	1a9b      	subs	r3, r3, r2
 800e8d4:	eba3 0309 	sub.w	r3, r3, r9
 800e8d8:	4543      	cmp	r3, r8
 800e8da:	f77f af79 	ble.w	800e7d0 <_printf_float+0x24c>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	4652      	mov	r2, sl
 800e8e2:	4631      	mov	r1, r6
 800e8e4:	4628      	mov	r0, r5
 800e8e6:	47b8      	blx	r7
 800e8e8:	3001      	adds	r0, #1
 800e8ea:	f43f aeaa 	beq.w	800e642 <_printf_float+0xbe>
 800e8ee:	f108 0801 	add.w	r8, r8, #1
 800e8f2:	e7ec      	b.n	800e8ce <_printf_float+0x34a>
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	4631      	mov	r1, r6
 800e8f8:	4642      	mov	r2, r8
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	47b8      	blx	r7
 800e8fe:	3001      	adds	r0, #1
 800e900:	d1c0      	bne.n	800e884 <_printf_float+0x300>
 800e902:	e69e      	b.n	800e642 <_printf_float+0xbe>
 800e904:	2301      	movs	r3, #1
 800e906:	4631      	mov	r1, r6
 800e908:	4628      	mov	r0, r5
 800e90a:	9205      	str	r2, [sp, #20]
 800e90c:	47b8      	blx	r7
 800e90e:	3001      	adds	r0, #1
 800e910:	f43f ae97 	beq.w	800e642 <_printf_float+0xbe>
 800e914:	9a05      	ldr	r2, [sp, #20]
 800e916:	f10b 0b01 	add.w	fp, fp, #1
 800e91a:	e7b9      	b.n	800e890 <_printf_float+0x30c>
 800e91c:	ee18 3a10 	vmov	r3, s16
 800e920:	4652      	mov	r2, sl
 800e922:	4631      	mov	r1, r6
 800e924:	4628      	mov	r0, r5
 800e926:	47b8      	blx	r7
 800e928:	3001      	adds	r0, #1
 800e92a:	d1be      	bne.n	800e8aa <_printf_float+0x326>
 800e92c:	e689      	b.n	800e642 <_printf_float+0xbe>
 800e92e:	9a05      	ldr	r2, [sp, #20]
 800e930:	464b      	mov	r3, r9
 800e932:	4442      	add	r2, r8
 800e934:	4631      	mov	r1, r6
 800e936:	4628      	mov	r0, r5
 800e938:	47b8      	blx	r7
 800e93a:	3001      	adds	r0, #1
 800e93c:	d1c1      	bne.n	800e8c2 <_printf_float+0x33e>
 800e93e:	e680      	b.n	800e642 <_printf_float+0xbe>
 800e940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e942:	2a01      	cmp	r2, #1
 800e944:	dc01      	bgt.n	800e94a <_printf_float+0x3c6>
 800e946:	07db      	lsls	r3, r3, #31
 800e948:	d53a      	bpl.n	800e9c0 <_printf_float+0x43c>
 800e94a:	2301      	movs	r3, #1
 800e94c:	4642      	mov	r2, r8
 800e94e:	4631      	mov	r1, r6
 800e950:	4628      	mov	r0, r5
 800e952:	47b8      	blx	r7
 800e954:	3001      	adds	r0, #1
 800e956:	f43f ae74 	beq.w	800e642 <_printf_float+0xbe>
 800e95a:	ee18 3a10 	vmov	r3, s16
 800e95e:	4652      	mov	r2, sl
 800e960:	4631      	mov	r1, r6
 800e962:	4628      	mov	r0, r5
 800e964:	47b8      	blx	r7
 800e966:	3001      	adds	r0, #1
 800e968:	f43f ae6b 	beq.w	800e642 <_printf_float+0xbe>
 800e96c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e970:	2200      	movs	r2, #0
 800e972:	2300      	movs	r3, #0
 800e974:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e978:	f7f2 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e97c:	b9d8      	cbnz	r0, 800e9b6 <_printf_float+0x432>
 800e97e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e982:	f108 0201 	add.w	r2, r8, #1
 800e986:	4631      	mov	r1, r6
 800e988:	4628      	mov	r0, r5
 800e98a:	47b8      	blx	r7
 800e98c:	3001      	adds	r0, #1
 800e98e:	d10e      	bne.n	800e9ae <_printf_float+0x42a>
 800e990:	e657      	b.n	800e642 <_printf_float+0xbe>
 800e992:	2301      	movs	r3, #1
 800e994:	4652      	mov	r2, sl
 800e996:	4631      	mov	r1, r6
 800e998:	4628      	mov	r0, r5
 800e99a:	47b8      	blx	r7
 800e99c:	3001      	adds	r0, #1
 800e99e:	f43f ae50 	beq.w	800e642 <_printf_float+0xbe>
 800e9a2:	f108 0801 	add.w	r8, r8, #1
 800e9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	4543      	cmp	r3, r8
 800e9ac:	dcf1      	bgt.n	800e992 <_printf_float+0x40e>
 800e9ae:	464b      	mov	r3, r9
 800e9b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e9b4:	e6da      	b.n	800e76c <_printf_float+0x1e8>
 800e9b6:	f04f 0800 	mov.w	r8, #0
 800e9ba:	f104 0a1a 	add.w	sl, r4, #26
 800e9be:	e7f2      	b.n	800e9a6 <_printf_float+0x422>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	4642      	mov	r2, r8
 800e9c4:	e7df      	b.n	800e986 <_printf_float+0x402>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	464a      	mov	r2, r9
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	47b8      	blx	r7
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	f43f ae36 	beq.w	800e642 <_printf_float+0xbe>
 800e9d6:	f108 0801 	add.w	r8, r8, #1
 800e9da:	68e3      	ldr	r3, [r4, #12]
 800e9dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e9de:	1a5b      	subs	r3, r3, r1
 800e9e0:	4543      	cmp	r3, r8
 800e9e2:	dcf0      	bgt.n	800e9c6 <_printf_float+0x442>
 800e9e4:	e6f8      	b.n	800e7d8 <_printf_float+0x254>
 800e9e6:	f04f 0800 	mov.w	r8, #0
 800e9ea:	f104 0919 	add.w	r9, r4, #25
 800e9ee:	e7f4      	b.n	800e9da <_printf_float+0x456>

0800e9f0 <_printf_common>:
 800e9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9f4:	4616      	mov	r6, r2
 800e9f6:	4699      	mov	r9, r3
 800e9f8:	688a      	ldr	r2, [r1, #8]
 800e9fa:	690b      	ldr	r3, [r1, #16]
 800e9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea00:	4293      	cmp	r3, r2
 800ea02:	bfb8      	it	lt
 800ea04:	4613      	movlt	r3, r2
 800ea06:	6033      	str	r3, [r6, #0]
 800ea08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea0c:	4607      	mov	r7, r0
 800ea0e:	460c      	mov	r4, r1
 800ea10:	b10a      	cbz	r2, 800ea16 <_printf_common+0x26>
 800ea12:	3301      	adds	r3, #1
 800ea14:	6033      	str	r3, [r6, #0]
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	0699      	lsls	r1, r3, #26
 800ea1a:	bf42      	ittt	mi
 800ea1c:	6833      	ldrmi	r3, [r6, #0]
 800ea1e:	3302      	addmi	r3, #2
 800ea20:	6033      	strmi	r3, [r6, #0]
 800ea22:	6825      	ldr	r5, [r4, #0]
 800ea24:	f015 0506 	ands.w	r5, r5, #6
 800ea28:	d106      	bne.n	800ea38 <_printf_common+0x48>
 800ea2a:	f104 0a19 	add.w	sl, r4, #25
 800ea2e:	68e3      	ldr	r3, [r4, #12]
 800ea30:	6832      	ldr	r2, [r6, #0]
 800ea32:	1a9b      	subs	r3, r3, r2
 800ea34:	42ab      	cmp	r3, r5
 800ea36:	dc26      	bgt.n	800ea86 <_printf_common+0x96>
 800ea38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea3c:	1e13      	subs	r3, r2, #0
 800ea3e:	6822      	ldr	r2, [r4, #0]
 800ea40:	bf18      	it	ne
 800ea42:	2301      	movne	r3, #1
 800ea44:	0692      	lsls	r2, r2, #26
 800ea46:	d42b      	bmi.n	800eaa0 <_printf_common+0xb0>
 800ea48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea4c:	4649      	mov	r1, r9
 800ea4e:	4638      	mov	r0, r7
 800ea50:	47c0      	blx	r8
 800ea52:	3001      	adds	r0, #1
 800ea54:	d01e      	beq.n	800ea94 <_printf_common+0xa4>
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	6922      	ldr	r2, [r4, #16]
 800ea5a:	f003 0306 	and.w	r3, r3, #6
 800ea5e:	2b04      	cmp	r3, #4
 800ea60:	bf02      	ittt	eq
 800ea62:	68e5      	ldreq	r5, [r4, #12]
 800ea64:	6833      	ldreq	r3, [r6, #0]
 800ea66:	1aed      	subeq	r5, r5, r3
 800ea68:	68a3      	ldr	r3, [r4, #8]
 800ea6a:	bf0c      	ite	eq
 800ea6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea70:	2500      	movne	r5, #0
 800ea72:	4293      	cmp	r3, r2
 800ea74:	bfc4      	itt	gt
 800ea76:	1a9b      	subgt	r3, r3, r2
 800ea78:	18ed      	addgt	r5, r5, r3
 800ea7a:	2600      	movs	r6, #0
 800ea7c:	341a      	adds	r4, #26
 800ea7e:	42b5      	cmp	r5, r6
 800ea80:	d11a      	bne.n	800eab8 <_printf_common+0xc8>
 800ea82:	2000      	movs	r0, #0
 800ea84:	e008      	b.n	800ea98 <_printf_common+0xa8>
 800ea86:	2301      	movs	r3, #1
 800ea88:	4652      	mov	r2, sl
 800ea8a:	4649      	mov	r1, r9
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	47c0      	blx	r8
 800ea90:	3001      	adds	r0, #1
 800ea92:	d103      	bne.n	800ea9c <_printf_common+0xac>
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295
 800ea98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea9c:	3501      	adds	r5, #1
 800ea9e:	e7c6      	b.n	800ea2e <_printf_common+0x3e>
 800eaa0:	18e1      	adds	r1, r4, r3
 800eaa2:	1c5a      	adds	r2, r3, #1
 800eaa4:	2030      	movs	r0, #48	; 0x30
 800eaa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eaaa:	4422      	add	r2, r4
 800eaac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eab4:	3302      	adds	r3, #2
 800eab6:	e7c7      	b.n	800ea48 <_printf_common+0x58>
 800eab8:	2301      	movs	r3, #1
 800eaba:	4622      	mov	r2, r4
 800eabc:	4649      	mov	r1, r9
 800eabe:	4638      	mov	r0, r7
 800eac0:	47c0      	blx	r8
 800eac2:	3001      	adds	r0, #1
 800eac4:	d0e6      	beq.n	800ea94 <_printf_common+0xa4>
 800eac6:	3601      	adds	r6, #1
 800eac8:	e7d9      	b.n	800ea7e <_printf_common+0x8e>
	...

0800eacc <_printf_i>:
 800eacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ead0:	7e0f      	ldrb	r7, [r1, #24]
 800ead2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ead4:	2f78      	cmp	r7, #120	; 0x78
 800ead6:	4691      	mov	r9, r2
 800ead8:	4680      	mov	r8, r0
 800eada:	460c      	mov	r4, r1
 800eadc:	469a      	mov	sl, r3
 800eade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eae2:	d807      	bhi.n	800eaf4 <_printf_i+0x28>
 800eae4:	2f62      	cmp	r7, #98	; 0x62
 800eae6:	d80a      	bhi.n	800eafe <_printf_i+0x32>
 800eae8:	2f00      	cmp	r7, #0
 800eaea:	f000 80d4 	beq.w	800ec96 <_printf_i+0x1ca>
 800eaee:	2f58      	cmp	r7, #88	; 0x58
 800eaf0:	f000 80c0 	beq.w	800ec74 <_printf_i+0x1a8>
 800eaf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eaf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eafc:	e03a      	b.n	800eb74 <_printf_i+0xa8>
 800eafe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb02:	2b15      	cmp	r3, #21
 800eb04:	d8f6      	bhi.n	800eaf4 <_printf_i+0x28>
 800eb06:	a101      	add	r1, pc, #4	; (adr r1, 800eb0c <_printf_i+0x40>)
 800eb08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb0c:	0800eb65 	.word	0x0800eb65
 800eb10:	0800eb79 	.word	0x0800eb79
 800eb14:	0800eaf5 	.word	0x0800eaf5
 800eb18:	0800eaf5 	.word	0x0800eaf5
 800eb1c:	0800eaf5 	.word	0x0800eaf5
 800eb20:	0800eaf5 	.word	0x0800eaf5
 800eb24:	0800eb79 	.word	0x0800eb79
 800eb28:	0800eaf5 	.word	0x0800eaf5
 800eb2c:	0800eaf5 	.word	0x0800eaf5
 800eb30:	0800eaf5 	.word	0x0800eaf5
 800eb34:	0800eaf5 	.word	0x0800eaf5
 800eb38:	0800ec7d 	.word	0x0800ec7d
 800eb3c:	0800eba5 	.word	0x0800eba5
 800eb40:	0800ec37 	.word	0x0800ec37
 800eb44:	0800eaf5 	.word	0x0800eaf5
 800eb48:	0800eaf5 	.word	0x0800eaf5
 800eb4c:	0800ec9f 	.word	0x0800ec9f
 800eb50:	0800eaf5 	.word	0x0800eaf5
 800eb54:	0800eba5 	.word	0x0800eba5
 800eb58:	0800eaf5 	.word	0x0800eaf5
 800eb5c:	0800eaf5 	.word	0x0800eaf5
 800eb60:	0800ec3f 	.word	0x0800ec3f
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	1d1a      	adds	r2, r3, #4
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	602a      	str	r2, [r5, #0]
 800eb6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb74:	2301      	movs	r3, #1
 800eb76:	e09f      	b.n	800ecb8 <_printf_i+0x1ec>
 800eb78:	6820      	ldr	r0, [r4, #0]
 800eb7a:	682b      	ldr	r3, [r5, #0]
 800eb7c:	0607      	lsls	r7, r0, #24
 800eb7e:	f103 0104 	add.w	r1, r3, #4
 800eb82:	6029      	str	r1, [r5, #0]
 800eb84:	d501      	bpl.n	800eb8a <_printf_i+0xbe>
 800eb86:	681e      	ldr	r6, [r3, #0]
 800eb88:	e003      	b.n	800eb92 <_printf_i+0xc6>
 800eb8a:	0646      	lsls	r6, r0, #25
 800eb8c:	d5fb      	bpl.n	800eb86 <_printf_i+0xba>
 800eb8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eb92:	2e00      	cmp	r6, #0
 800eb94:	da03      	bge.n	800eb9e <_printf_i+0xd2>
 800eb96:	232d      	movs	r3, #45	; 0x2d
 800eb98:	4276      	negs	r6, r6
 800eb9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb9e:	485a      	ldr	r0, [pc, #360]	; (800ed08 <_printf_i+0x23c>)
 800eba0:	230a      	movs	r3, #10
 800eba2:	e012      	b.n	800ebca <_printf_i+0xfe>
 800eba4:	682b      	ldr	r3, [r5, #0]
 800eba6:	6820      	ldr	r0, [r4, #0]
 800eba8:	1d19      	adds	r1, r3, #4
 800ebaa:	6029      	str	r1, [r5, #0]
 800ebac:	0605      	lsls	r5, r0, #24
 800ebae:	d501      	bpl.n	800ebb4 <_printf_i+0xe8>
 800ebb0:	681e      	ldr	r6, [r3, #0]
 800ebb2:	e002      	b.n	800ebba <_printf_i+0xee>
 800ebb4:	0641      	lsls	r1, r0, #25
 800ebb6:	d5fb      	bpl.n	800ebb0 <_printf_i+0xe4>
 800ebb8:	881e      	ldrh	r6, [r3, #0]
 800ebba:	4853      	ldr	r0, [pc, #332]	; (800ed08 <_printf_i+0x23c>)
 800ebbc:	2f6f      	cmp	r7, #111	; 0x6f
 800ebbe:	bf0c      	ite	eq
 800ebc0:	2308      	moveq	r3, #8
 800ebc2:	230a      	movne	r3, #10
 800ebc4:	2100      	movs	r1, #0
 800ebc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ebca:	6865      	ldr	r5, [r4, #4]
 800ebcc:	60a5      	str	r5, [r4, #8]
 800ebce:	2d00      	cmp	r5, #0
 800ebd0:	bfa2      	ittt	ge
 800ebd2:	6821      	ldrge	r1, [r4, #0]
 800ebd4:	f021 0104 	bicge.w	r1, r1, #4
 800ebd8:	6021      	strge	r1, [r4, #0]
 800ebda:	b90e      	cbnz	r6, 800ebe0 <_printf_i+0x114>
 800ebdc:	2d00      	cmp	r5, #0
 800ebde:	d04b      	beq.n	800ec78 <_printf_i+0x1ac>
 800ebe0:	4615      	mov	r5, r2
 800ebe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800ebe6:	fb03 6711 	mls	r7, r3, r1, r6
 800ebea:	5dc7      	ldrb	r7, [r0, r7]
 800ebec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ebf0:	4637      	mov	r7, r6
 800ebf2:	42bb      	cmp	r3, r7
 800ebf4:	460e      	mov	r6, r1
 800ebf6:	d9f4      	bls.n	800ebe2 <_printf_i+0x116>
 800ebf8:	2b08      	cmp	r3, #8
 800ebfa:	d10b      	bne.n	800ec14 <_printf_i+0x148>
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	07de      	lsls	r6, r3, #31
 800ec00:	d508      	bpl.n	800ec14 <_printf_i+0x148>
 800ec02:	6923      	ldr	r3, [r4, #16]
 800ec04:	6861      	ldr	r1, [r4, #4]
 800ec06:	4299      	cmp	r1, r3
 800ec08:	bfde      	ittt	le
 800ec0a:	2330      	movle	r3, #48	; 0x30
 800ec0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ec14:	1b52      	subs	r2, r2, r5
 800ec16:	6122      	str	r2, [r4, #16]
 800ec18:	f8cd a000 	str.w	sl, [sp]
 800ec1c:	464b      	mov	r3, r9
 800ec1e:	aa03      	add	r2, sp, #12
 800ec20:	4621      	mov	r1, r4
 800ec22:	4640      	mov	r0, r8
 800ec24:	f7ff fee4 	bl	800e9f0 <_printf_common>
 800ec28:	3001      	adds	r0, #1
 800ec2a:	d14a      	bne.n	800ecc2 <_printf_i+0x1f6>
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec30:	b004      	add	sp, #16
 800ec32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec36:	6823      	ldr	r3, [r4, #0]
 800ec38:	f043 0320 	orr.w	r3, r3, #32
 800ec3c:	6023      	str	r3, [r4, #0]
 800ec3e:	4833      	ldr	r0, [pc, #204]	; (800ed0c <_printf_i+0x240>)
 800ec40:	2778      	movs	r7, #120	; 0x78
 800ec42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	6829      	ldr	r1, [r5, #0]
 800ec4a:	061f      	lsls	r7, r3, #24
 800ec4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec50:	d402      	bmi.n	800ec58 <_printf_i+0x18c>
 800ec52:	065f      	lsls	r7, r3, #25
 800ec54:	bf48      	it	mi
 800ec56:	b2b6      	uxthmi	r6, r6
 800ec58:	07df      	lsls	r7, r3, #31
 800ec5a:	bf48      	it	mi
 800ec5c:	f043 0320 	orrmi.w	r3, r3, #32
 800ec60:	6029      	str	r1, [r5, #0]
 800ec62:	bf48      	it	mi
 800ec64:	6023      	strmi	r3, [r4, #0]
 800ec66:	b91e      	cbnz	r6, 800ec70 <_printf_i+0x1a4>
 800ec68:	6823      	ldr	r3, [r4, #0]
 800ec6a:	f023 0320 	bic.w	r3, r3, #32
 800ec6e:	6023      	str	r3, [r4, #0]
 800ec70:	2310      	movs	r3, #16
 800ec72:	e7a7      	b.n	800ebc4 <_printf_i+0xf8>
 800ec74:	4824      	ldr	r0, [pc, #144]	; (800ed08 <_printf_i+0x23c>)
 800ec76:	e7e4      	b.n	800ec42 <_printf_i+0x176>
 800ec78:	4615      	mov	r5, r2
 800ec7a:	e7bd      	b.n	800ebf8 <_printf_i+0x12c>
 800ec7c:	682b      	ldr	r3, [r5, #0]
 800ec7e:	6826      	ldr	r6, [r4, #0]
 800ec80:	6961      	ldr	r1, [r4, #20]
 800ec82:	1d18      	adds	r0, r3, #4
 800ec84:	6028      	str	r0, [r5, #0]
 800ec86:	0635      	lsls	r5, r6, #24
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	d501      	bpl.n	800ec90 <_printf_i+0x1c4>
 800ec8c:	6019      	str	r1, [r3, #0]
 800ec8e:	e002      	b.n	800ec96 <_printf_i+0x1ca>
 800ec90:	0670      	lsls	r0, r6, #25
 800ec92:	d5fb      	bpl.n	800ec8c <_printf_i+0x1c0>
 800ec94:	8019      	strh	r1, [r3, #0]
 800ec96:	2300      	movs	r3, #0
 800ec98:	6123      	str	r3, [r4, #16]
 800ec9a:	4615      	mov	r5, r2
 800ec9c:	e7bc      	b.n	800ec18 <_printf_i+0x14c>
 800ec9e:	682b      	ldr	r3, [r5, #0]
 800eca0:	1d1a      	adds	r2, r3, #4
 800eca2:	602a      	str	r2, [r5, #0]
 800eca4:	681d      	ldr	r5, [r3, #0]
 800eca6:	6862      	ldr	r2, [r4, #4]
 800eca8:	2100      	movs	r1, #0
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f7f1 fa90 	bl	80001d0 <memchr>
 800ecb0:	b108      	cbz	r0, 800ecb6 <_printf_i+0x1ea>
 800ecb2:	1b40      	subs	r0, r0, r5
 800ecb4:	6060      	str	r0, [r4, #4]
 800ecb6:	6863      	ldr	r3, [r4, #4]
 800ecb8:	6123      	str	r3, [r4, #16]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecc0:	e7aa      	b.n	800ec18 <_printf_i+0x14c>
 800ecc2:	6923      	ldr	r3, [r4, #16]
 800ecc4:	462a      	mov	r2, r5
 800ecc6:	4649      	mov	r1, r9
 800ecc8:	4640      	mov	r0, r8
 800ecca:	47d0      	blx	sl
 800eccc:	3001      	adds	r0, #1
 800ecce:	d0ad      	beq.n	800ec2c <_printf_i+0x160>
 800ecd0:	6823      	ldr	r3, [r4, #0]
 800ecd2:	079b      	lsls	r3, r3, #30
 800ecd4:	d413      	bmi.n	800ecfe <_printf_i+0x232>
 800ecd6:	68e0      	ldr	r0, [r4, #12]
 800ecd8:	9b03      	ldr	r3, [sp, #12]
 800ecda:	4298      	cmp	r0, r3
 800ecdc:	bfb8      	it	lt
 800ecde:	4618      	movlt	r0, r3
 800ece0:	e7a6      	b.n	800ec30 <_printf_i+0x164>
 800ece2:	2301      	movs	r3, #1
 800ece4:	4632      	mov	r2, r6
 800ece6:	4649      	mov	r1, r9
 800ece8:	4640      	mov	r0, r8
 800ecea:	47d0      	blx	sl
 800ecec:	3001      	adds	r0, #1
 800ecee:	d09d      	beq.n	800ec2c <_printf_i+0x160>
 800ecf0:	3501      	adds	r5, #1
 800ecf2:	68e3      	ldr	r3, [r4, #12]
 800ecf4:	9903      	ldr	r1, [sp, #12]
 800ecf6:	1a5b      	subs	r3, r3, r1
 800ecf8:	42ab      	cmp	r3, r5
 800ecfa:	dcf2      	bgt.n	800ece2 <_printf_i+0x216>
 800ecfc:	e7eb      	b.n	800ecd6 <_printf_i+0x20a>
 800ecfe:	2500      	movs	r5, #0
 800ed00:	f104 0619 	add.w	r6, r4, #25
 800ed04:	e7f5      	b.n	800ecf2 <_printf_i+0x226>
 800ed06:	bf00      	nop
 800ed08:	080124bb 	.word	0x080124bb
 800ed0c:	080124cc 	.word	0x080124cc

0800ed10 <std>:
 800ed10:	2300      	movs	r3, #0
 800ed12:	b510      	push	{r4, lr}
 800ed14:	4604      	mov	r4, r0
 800ed16:	e9c0 3300 	strd	r3, r3, [r0]
 800ed1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed1e:	6083      	str	r3, [r0, #8]
 800ed20:	8181      	strh	r1, [r0, #12]
 800ed22:	6643      	str	r3, [r0, #100]	; 0x64
 800ed24:	81c2      	strh	r2, [r0, #14]
 800ed26:	6183      	str	r3, [r0, #24]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	2208      	movs	r2, #8
 800ed2c:	305c      	adds	r0, #92	; 0x5c
 800ed2e:	f000 f9e5 	bl	800f0fc <memset>
 800ed32:	4b05      	ldr	r3, [pc, #20]	; (800ed48 <std+0x38>)
 800ed34:	6263      	str	r3, [r4, #36]	; 0x24
 800ed36:	4b05      	ldr	r3, [pc, #20]	; (800ed4c <std+0x3c>)
 800ed38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed3a:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <std+0x40>)
 800ed3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <std+0x44>)
 800ed40:	6224      	str	r4, [r4, #32]
 800ed42:	6323      	str	r3, [r4, #48]	; 0x30
 800ed44:	bd10      	pop	{r4, pc}
 800ed46:	bf00      	nop
 800ed48:	0800ef4d 	.word	0x0800ef4d
 800ed4c:	0800ef6f 	.word	0x0800ef6f
 800ed50:	0800efa7 	.word	0x0800efa7
 800ed54:	0800efcb 	.word	0x0800efcb

0800ed58 <stdio_exit_handler>:
 800ed58:	4a02      	ldr	r2, [pc, #8]	; (800ed64 <stdio_exit_handler+0xc>)
 800ed5a:	4903      	ldr	r1, [pc, #12]	; (800ed68 <stdio_exit_handler+0x10>)
 800ed5c:	4803      	ldr	r0, [pc, #12]	; (800ed6c <stdio_exit_handler+0x14>)
 800ed5e:	f000 b869 	b.w	800ee34 <_fwalk_sglue>
 800ed62:	bf00      	nop
 800ed64:	20000044 	.word	0x20000044
 800ed68:	08011529 	.word	0x08011529
 800ed6c:	200001bc 	.word	0x200001bc

0800ed70 <cleanup_stdio>:
 800ed70:	6841      	ldr	r1, [r0, #4]
 800ed72:	4b0c      	ldr	r3, [pc, #48]	; (800eda4 <cleanup_stdio+0x34>)
 800ed74:	4299      	cmp	r1, r3
 800ed76:	b510      	push	{r4, lr}
 800ed78:	4604      	mov	r4, r0
 800ed7a:	d001      	beq.n	800ed80 <cleanup_stdio+0x10>
 800ed7c:	f002 fbd4 	bl	8011528 <_fflush_r>
 800ed80:	68a1      	ldr	r1, [r4, #8]
 800ed82:	4b09      	ldr	r3, [pc, #36]	; (800eda8 <cleanup_stdio+0x38>)
 800ed84:	4299      	cmp	r1, r3
 800ed86:	d002      	beq.n	800ed8e <cleanup_stdio+0x1e>
 800ed88:	4620      	mov	r0, r4
 800ed8a:	f002 fbcd 	bl	8011528 <_fflush_r>
 800ed8e:	68e1      	ldr	r1, [r4, #12]
 800ed90:	4b06      	ldr	r3, [pc, #24]	; (800edac <cleanup_stdio+0x3c>)
 800ed92:	4299      	cmp	r1, r3
 800ed94:	d004      	beq.n	800eda0 <cleanup_stdio+0x30>
 800ed96:	4620      	mov	r0, r4
 800ed98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed9c:	f002 bbc4 	b.w	8011528 <_fflush_r>
 800eda0:	bd10      	pop	{r4, pc}
 800eda2:	bf00      	nop
 800eda4:	200008fc 	.word	0x200008fc
 800eda8:	20000964 	.word	0x20000964
 800edac:	200009cc 	.word	0x200009cc

0800edb0 <global_stdio_init.part.0>:
 800edb0:	b510      	push	{r4, lr}
 800edb2:	4b0b      	ldr	r3, [pc, #44]	; (800ede0 <global_stdio_init.part.0+0x30>)
 800edb4:	4c0b      	ldr	r4, [pc, #44]	; (800ede4 <global_stdio_init.part.0+0x34>)
 800edb6:	4a0c      	ldr	r2, [pc, #48]	; (800ede8 <global_stdio_init.part.0+0x38>)
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	4620      	mov	r0, r4
 800edbc:	2200      	movs	r2, #0
 800edbe:	2104      	movs	r1, #4
 800edc0:	f7ff ffa6 	bl	800ed10 <std>
 800edc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800edc8:	2201      	movs	r2, #1
 800edca:	2109      	movs	r1, #9
 800edcc:	f7ff ffa0 	bl	800ed10 <std>
 800edd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800edd4:	2202      	movs	r2, #2
 800edd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edda:	2112      	movs	r1, #18
 800eddc:	f7ff bf98 	b.w	800ed10 <std>
 800ede0:	20000a34 	.word	0x20000a34
 800ede4:	200008fc 	.word	0x200008fc
 800ede8:	0800ed59 	.word	0x0800ed59

0800edec <__sfp_lock_acquire>:
 800edec:	4801      	ldr	r0, [pc, #4]	; (800edf4 <__sfp_lock_acquire+0x8>)
 800edee:	f000 ba13 	b.w	800f218 <__retarget_lock_acquire_recursive>
 800edf2:	bf00      	nop
 800edf4:	20000a3d 	.word	0x20000a3d

0800edf8 <__sfp_lock_release>:
 800edf8:	4801      	ldr	r0, [pc, #4]	; (800ee00 <__sfp_lock_release+0x8>)
 800edfa:	f000 ba0e 	b.w	800f21a <__retarget_lock_release_recursive>
 800edfe:	bf00      	nop
 800ee00:	20000a3d 	.word	0x20000a3d

0800ee04 <__sinit>:
 800ee04:	b510      	push	{r4, lr}
 800ee06:	4604      	mov	r4, r0
 800ee08:	f7ff fff0 	bl	800edec <__sfp_lock_acquire>
 800ee0c:	6a23      	ldr	r3, [r4, #32]
 800ee0e:	b11b      	cbz	r3, 800ee18 <__sinit+0x14>
 800ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee14:	f7ff bff0 	b.w	800edf8 <__sfp_lock_release>
 800ee18:	4b04      	ldr	r3, [pc, #16]	; (800ee2c <__sinit+0x28>)
 800ee1a:	6223      	str	r3, [r4, #32]
 800ee1c:	4b04      	ldr	r3, [pc, #16]	; (800ee30 <__sinit+0x2c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1f5      	bne.n	800ee10 <__sinit+0xc>
 800ee24:	f7ff ffc4 	bl	800edb0 <global_stdio_init.part.0>
 800ee28:	e7f2      	b.n	800ee10 <__sinit+0xc>
 800ee2a:	bf00      	nop
 800ee2c:	0800ed71 	.word	0x0800ed71
 800ee30:	20000a34 	.word	0x20000a34

0800ee34 <_fwalk_sglue>:
 800ee34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee38:	4607      	mov	r7, r0
 800ee3a:	4688      	mov	r8, r1
 800ee3c:	4614      	mov	r4, r2
 800ee3e:	2600      	movs	r6, #0
 800ee40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee44:	f1b9 0901 	subs.w	r9, r9, #1
 800ee48:	d505      	bpl.n	800ee56 <_fwalk_sglue+0x22>
 800ee4a:	6824      	ldr	r4, [r4, #0]
 800ee4c:	2c00      	cmp	r4, #0
 800ee4e:	d1f7      	bne.n	800ee40 <_fwalk_sglue+0xc>
 800ee50:	4630      	mov	r0, r6
 800ee52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee56:	89ab      	ldrh	r3, [r5, #12]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d907      	bls.n	800ee6c <_fwalk_sglue+0x38>
 800ee5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee60:	3301      	adds	r3, #1
 800ee62:	d003      	beq.n	800ee6c <_fwalk_sglue+0x38>
 800ee64:	4629      	mov	r1, r5
 800ee66:	4638      	mov	r0, r7
 800ee68:	47c0      	blx	r8
 800ee6a:	4306      	orrs	r6, r0
 800ee6c:	3568      	adds	r5, #104	; 0x68
 800ee6e:	e7e9      	b.n	800ee44 <_fwalk_sglue+0x10>

0800ee70 <iprintf>:
 800ee70:	b40f      	push	{r0, r1, r2, r3}
 800ee72:	b507      	push	{r0, r1, r2, lr}
 800ee74:	4906      	ldr	r1, [pc, #24]	; (800ee90 <iprintf+0x20>)
 800ee76:	ab04      	add	r3, sp, #16
 800ee78:	6808      	ldr	r0, [r1, #0]
 800ee7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee7e:	6881      	ldr	r1, [r0, #8]
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	f002 f9b1 	bl	80111e8 <_vfiprintf_r>
 800ee86:	b003      	add	sp, #12
 800ee88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee8c:	b004      	add	sp, #16
 800ee8e:	4770      	bx	lr
 800ee90:	20000208 	.word	0x20000208

0800ee94 <_puts_r>:
 800ee94:	6a03      	ldr	r3, [r0, #32]
 800ee96:	b570      	push	{r4, r5, r6, lr}
 800ee98:	6884      	ldr	r4, [r0, #8]
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	460e      	mov	r6, r1
 800ee9e:	b90b      	cbnz	r3, 800eea4 <_puts_r+0x10>
 800eea0:	f7ff ffb0 	bl	800ee04 <__sinit>
 800eea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eea6:	07db      	lsls	r3, r3, #31
 800eea8:	d405      	bmi.n	800eeb6 <_puts_r+0x22>
 800eeaa:	89a3      	ldrh	r3, [r4, #12]
 800eeac:	0598      	lsls	r0, r3, #22
 800eeae:	d402      	bmi.n	800eeb6 <_puts_r+0x22>
 800eeb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeb2:	f000 f9b1 	bl	800f218 <__retarget_lock_acquire_recursive>
 800eeb6:	89a3      	ldrh	r3, [r4, #12]
 800eeb8:	0719      	lsls	r1, r3, #28
 800eeba:	d513      	bpl.n	800eee4 <_puts_r+0x50>
 800eebc:	6923      	ldr	r3, [r4, #16]
 800eebe:	b18b      	cbz	r3, 800eee4 <_puts_r+0x50>
 800eec0:	3e01      	subs	r6, #1
 800eec2:	68a3      	ldr	r3, [r4, #8]
 800eec4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eec8:	3b01      	subs	r3, #1
 800eeca:	60a3      	str	r3, [r4, #8]
 800eecc:	b9e9      	cbnz	r1, 800ef0a <_puts_r+0x76>
 800eece:	2b00      	cmp	r3, #0
 800eed0:	da2e      	bge.n	800ef30 <_puts_r+0x9c>
 800eed2:	4622      	mov	r2, r4
 800eed4:	210a      	movs	r1, #10
 800eed6:	4628      	mov	r0, r5
 800eed8:	f000 f87b 	bl	800efd2 <__swbuf_r>
 800eedc:	3001      	adds	r0, #1
 800eede:	d007      	beq.n	800eef0 <_puts_r+0x5c>
 800eee0:	250a      	movs	r5, #10
 800eee2:	e007      	b.n	800eef4 <_puts_r+0x60>
 800eee4:	4621      	mov	r1, r4
 800eee6:	4628      	mov	r0, r5
 800eee8:	f000 f8b0 	bl	800f04c <__swsetup_r>
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d0e7      	beq.n	800eec0 <_puts_r+0x2c>
 800eef0:	f04f 35ff 	mov.w	r5, #4294967295
 800eef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eef6:	07da      	lsls	r2, r3, #31
 800eef8:	d405      	bmi.n	800ef06 <_puts_r+0x72>
 800eefa:	89a3      	ldrh	r3, [r4, #12]
 800eefc:	059b      	lsls	r3, r3, #22
 800eefe:	d402      	bmi.n	800ef06 <_puts_r+0x72>
 800ef00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef02:	f000 f98a 	bl	800f21a <__retarget_lock_release_recursive>
 800ef06:	4628      	mov	r0, r5
 800ef08:	bd70      	pop	{r4, r5, r6, pc}
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	da04      	bge.n	800ef18 <_puts_r+0x84>
 800ef0e:	69a2      	ldr	r2, [r4, #24]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	dc06      	bgt.n	800ef22 <_puts_r+0x8e>
 800ef14:	290a      	cmp	r1, #10
 800ef16:	d004      	beq.n	800ef22 <_puts_r+0x8e>
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	1c5a      	adds	r2, r3, #1
 800ef1c:	6022      	str	r2, [r4, #0]
 800ef1e:	7019      	strb	r1, [r3, #0]
 800ef20:	e7cf      	b.n	800eec2 <_puts_r+0x2e>
 800ef22:	4622      	mov	r2, r4
 800ef24:	4628      	mov	r0, r5
 800ef26:	f000 f854 	bl	800efd2 <__swbuf_r>
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	d1c9      	bne.n	800eec2 <_puts_r+0x2e>
 800ef2e:	e7df      	b.n	800eef0 <_puts_r+0x5c>
 800ef30:	6823      	ldr	r3, [r4, #0]
 800ef32:	250a      	movs	r5, #10
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	6022      	str	r2, [r4, #0]
 800ef38:	701d      	strb	r5, [r3, #0]
 800ef3a:	e7db      	b.n	800eef4 <_puts_r+0x60>

0800ef3c <puts>:
 800ef3c:	4b02      	ldr	r3, [pc, #8]	; (800ef48 <puts+0xc>)
 800ef3e:	4601      	mov	r1, r0
 800ef40:	6818      	ldr	r0, [r3, #0]
 800ef42:	f7ff bfa7 	b.w	800ee94 <_puts_r>
 800ef46:	bf00      	nop
 800ef48:	20000208 	.word	0x20000208

0800ef4c <__sread>:
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	460c      	mov	r4, r1
 800ef50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef54:	f000 f912 	bl	800f17c <_read_r>
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	bfab      	itete	ge
 800ef5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ef60:	181b      	addge	r3, r3, r0
 800ef62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef66:	bfac      	ite	ge
 800ef68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef6a:	81a3      	strhlt	r3, [r4, #12]
 800ef6c:	bd10      	pop	{r4, pc}

0800ef6e <__swrite>:
 800ef6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	461f      	mov	r7, r3
 800ef74:	898b      	ldrh	r3, [r1, #12]
 800ef76:	05db      	lsls	r3, r3, #23
 800ef78:	4605      	mov	r5, r0
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	4616      	mov	r6, r2
 800ef7e:	d505      	bpl.n	800ef8c <__swrite+0x1e>
 800ef80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef84:	2302      	movs	r3, #2
 800ef86:	2200      	movs	r2, #0
 800ef88:	f000 f8e6 	bl	800f158 <_lseek_r>
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef96:	81a3      	strh	r3, [r4, #12]
 800ef98:	4632      	mov	r2, r6
 800ef9a:	463b      	mov	r3, r7
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efa2:	f000 b8fd 	b.w	800f1a0 <_write_r>

0800efa6 <__sseek>:
 800efa6:	b510      	push	{r4, lr}
 800efa8:	460c      	mov	r4, r1
 800efaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efae:	f000 f8d3 	bl	800f158 <_lseek_r>
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	bf15      	itete	ne
 800efb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800efba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efc2:	81a3      	strheq	r3, [r4, #12]
 800efc4:	bf18      	it	ne
 800efc6:	81a3      	strhne	r3, [r4, #12]
 800efc8:	bd10      	pop	{r4, pc}

0800efca <__sclose>:
 800efca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efce:	f000 b8b3 	b.w	800f138 <_close_r>

0800efd2 <__swbuf_r>:
 800efd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd4:	460e      	mov	r6, r1
 800efd6:	4614      	mov	r4, r2
 800efd8:	4605      	mov	r5, r0
 800efda:	b118      	cbz	r0, 800efe4 <__swbuf_r+0x12>
 800efdc:	6a03      	ldr	r3, [r0, #32]
 800efde:	b90b      	cbnz	r3, 800efe4 <__swbuf_r+0x12>
 800efe0:	f7ff ff10 	bl	800ee04 <__sinit>
 800efe4:	69a3      	ldr	r3, [r4, #24]
 800efe6:	60a3      	str	r3, [r4, #8]
 800efe8:	89a3      	ldrh	r3, [r4, #12]
 800efea:	071a      	lsls	r2, r3, #28
 800efec:	d525      	bpl.n	800f03a <__swbuf_r+0x68>
 800efee:	6923      	ldr	r3, [r4, #16]
 800eff0:	b31b      	cbz	r3, 800f03a <__swbuf_r+0x68>
 800eff2:	6823      	ldr	r3, [r4, #0]
 800eff4:	6922      	ldr	r2, [r4, #16]
 800eff6:	1a98      	subs	r0, r3, r2
 800eff8:	6963      	ldr	r3, [r4, #20]
 800effa:	b2f6      	uxtb	r6, r6
 800effc:	4283      	cmp	r3, r0
 800effe:	4637      	mov	r7, r6
 800f000:	dc04      	bgt.n	800f00c <__swbuf_r+0x3a>
 800f002:	4621      	mov	r1, r4
 800f004:	4628      	mov	r0, r5
 800f006:	f002 fa8f 	bl	8011528 <_fflush_r>
 800f00a:	b9e0      	cbnz	r0, 800f046 <__swbuf_r+0x74>
 800f00c:	68a3      	ldr	r3, [r4, #8]
 800f00e:	3b01      	subs	r3, #1
 800f010:	60a3      	str	r3, [r4, #8]
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	1c5a      	adds	r2, r3, #1
 800f016:	6022      	str	r2, [r4, #0]
 800f018:	701e      	strb	r6, [r3, #0]
 800f01a:	6962      	ldr	r2, [r4, #20]
 800f01c:	1c43      	adds	r3, r0, #1
 800f01e:	429a      	cmp	r2, r3
 800f020:	d004      	beq.n	800f02c <__swbuf_r+0x5a>
 800f022:	89a3      	ldrh	r3, [r4, #12]
 800f024:	07db      	lsls	r3, r3, #31
 800f026:	d506      	bpl.n	800f036 <__swbuf_r+0x64>
 800f028:	2e0a      	cmp	r6, #10
 800f02a:	d104      	bne.n	800f036 <__swbuf_r+0x64>
 800f02c:	4621      	mov	r1, r4
 800f02e:	4628      	mov	r0, r5
 800f030:	f002 fa7a 	bl	8011528 <_fflush_r>
 800f034:	b938      	cbnz	r0, 800f046 <__swbuf_r+0x74>
 800f036:	4638      	mov	r0, r7
 800f038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f03a:	4621      	mov	r1, r4
 800f03c:	4628      	mov	r0, r5
 800f03e:	f000 f805 	bl	800f04c <__swsetup_r>
 800f042:	2800      	cmp	r0, #0
 800f044:	d0d5      	beq.n	800eff2 <__swbuf_r+0x20>
 800f046:	f04f 37ff 	mov.w	r7, #4294967295
 800f04a:	e7f4      	b.n	800f036 <__swbuf_r+0x64>

0800f04c <__swsetup_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	4b2a      	ldr	r3, [pc, #168]	; (800f0f8 <__swsetup_r+0xac>)
 800f050:	4605      	mov	r5, r0
 800f052:	6818      	ldr	r0, [r3, #0]
 800f054:	460c      	mov	r4, r1
 800f056:	b118      	cbz	r0, 800f060 <__swsetup_r+0x14>
 800f058:	6a03      	ldr	r3, [r0, #32]
 800f05a:	b90b      	cbnz	r3, 800f060 <__swsetup_r+0x14>
 800f05c:	f7ff fed2 	bl	800ee04 <__sinit>
 800f060:	89a3      	ldrh	r3, [r4, #12]
 800f062:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f066:	0718      	lsls	r0, r3, #28
 800f068:	d422      	bmi.n	800f0b0 <__swsetup_r+0x64>
 800f06a:	06d9      	lsls	r1, r3, #27
 800f06c:	d407      	bmi.n	800f07e <__swsetup_r+0x32>
 800f06e:	2309      	movs	r3, #9
 800f070:	602b      	str	r3, [r5, #0]
 800f072:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f076:	81a3      	strh	r3, [r4, #12]
 800f078:	f04f 30ff 	mov.w	r0, #4294967295
 800f07c:	e034      	b.n	800f0e8 <__swsetup_r+0x9c>
 800f07e:	0758      	lsls	r0, r3, #29
 800f080:	d512      	bpl.n	800f0a8 <__swsetup_r+0x5c>
 800f082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f084:	b141      	cbz	r1, 800f098 <__swsetup_r+0x4c>
 800f086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f08a:	4299      	cmp	r1, r3
 800f08c:	d002      	beq.n	800f094 <__swsetup_r+0x48>
 800f08e:	4628      	mov	r0, r5
 800f090:	f000 ff5c 	bl	800ff4c <_free_r>
 800f094:	2300      	movs	r3, #0
 800f096:	6363      	str	r3, [r4, #52]	; 0x34
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f09e:	81a3      	strh	r3, [r4, #12]
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	6063      	str	r3, [r4, #4]
 800f0a4:	6923      	ldr	r3, [r4, #16]
 800f0a6:	6023      	str	r3, [r4, #0]
 800f0a8:	89a3      	ldrh	r3, [r4, #12]
 800f0aa:	f043 0308 	orr.w	r3, r3, #8
 800f0ae:	81a3      	strh	r3, [r4, #12]
 800f0b0:	6923      	ldr	r3, [r4, #16]
 800f0b2:	b94b      	cbnz	r3, 800f0c8 <__swsetup_r+0x7c>
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0be:	d003      	beq.n	800f0c8 <__swsetup_r+0x7c>
 800f0c0:	4621      	mov	r1, r4
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f002 fa7e 	bl	80115c4 <__smakebuf_r>
 800f0c8:	89a0      	ldrh	r0, [r4, #12]
 800f0ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0ce:	f010 0301 	ands.w	r3, r0, #1
 800f0d2:	d00a      	beq.n	800f0ea <__swsetup_r+0x9e>
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	60a3      	str	r3, [r4, #8]
 800f0d8:	6963      	ldr	r3, [r4, #20]
 800f0da:	425b      	negs	r3, r3
 800f0dc:	61a3      	str	r3, [r4, #24]
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	b943      	cbnz	r3, 800f0f4 <__swsetup_r+0xa8>
 800f0e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0e6:	d1c4      	bne.n	800f072 <__swsetup_r+0x26>
 800f0e8:	bd38      	pop	{r3, r4, r5, pc}
 800f0ea:	0781      	lsls	r1, r0, #30
 800f0ec:	bf58      	it	pl
 800f0ee:	6963      	ldrpl	r3, [r4, #20]
 800f0f0:	60a3      	str	r3, [r4, #8]
 800f0f2:	e7f4      	b.n	800f0de <__swsetup_r+0x92>
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	e7f7      	b.n	800f0e8 <__swsetup_r+0x9c>
 800f0f8:	20000208 	.word	0x20000208

0800f0fc <memset>:
 800f0fc:	4402      	add	r2, r0
 800f0fe:	4603      	mov	r3, r0
 800f100:	4293      	cmp	r3, r2
 800f102:	d100      	bne.n	800f106 <memset+0xa>
 800f104:	4770      	bx	lr
 800f106:	f803 1b01 	strb.w	r1, [r3], #1
 800f10a:	e7f9      	b.n	800f100 <memset+0x4>

0800f10c <strncmp>:
 800f10c:	b510      	push	{r4, lr}
 800f10e:	b16a      	cbz	r2, 800f12c <strncmp+0x20>
 800f110:	3901      	subs	r1, #1
 800f112:	1884      	adds	r4, r0, r2
 800f114:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f118:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d103      	bne.n	800f128 <strncmp+0x1c>
 800f120:	42a0      	cmp	r0, r4
 800f122:	d001      	beq.n	800f128 <strncmp+0x1c>
 800f124:	2a00      	cmp	r2, #0
 800f126:	d1f5      	bne.n	800f114 <strncmp+0x8>
 800f128:	1ad0      	subs	r0, r2, r3
 800f12a:	bd10      	pop	{r4, pc}
 800f12c:	4610      	mov	r0, r2
 800f12e:	e7fc      	b.n	800f12a <strncmp+0x1e>

0800f130 <_localeconv_r>:
 800f130:	4800      	ldr	r0, [pc, #0]	; (800f134 <_localeconv_r+0x4>)
 800f132:	4770      	bx	lr
 800f134:	20000140 	.word	0x20000140

0800f138 <_close_r>:
 800f138:	b538      	push	{r3, r4, r5, lr}
 800f13a:	4d06      	ldr	r5, [pc, #24]	; (800f154 <_close_r+0x1c>)
 800f13c:	2300      	movs	r3, #0
 800f13e:	4604      	mov	r4, r0
 800f140:	4608      	mov	r0, r1
 800f142:	602b      	str	r3, [r5, #0]
 800f144:	f7f6 fc53 	bl	80059ee <_close>
 800f148:	1c43      	adds	r3, r0, #1
 800f14a:	d102      	bne.n	800f152 <_close_r+0x1a>
 800f14c:	682b      	ldr	r3, [r5, #0]
 800f14e:	b103      	cbz	r3, 800f152 <_close_r+0x1a>
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	bd38      	pop	{r3, r4, r5, pc}
 800f154:	20000a38 	.word	0x20000a38

0800f158 <_lseek_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4d07      	ldr	r5, [pc, #28]	; (800f178 <_lseek_r+0x20>)
 800f15c:	4604      	mov	r4, r0
 800f15e:	4608      	mov	r0, r1
 800f160:	4611      	mov	r1, r2
 800f162:	2200      	movs	r2, #0
 800f164:	602a      	str	r2, [r5, #0]
 800f166:	461a      	mov	r2, r3
 800f168:	f7f6 fc68 	bl	8005a3c <_lseek>
 800f16c:	1c43      	adds	r3, r0, #1
 800f16e:	d102      	bne.n	800f176 <_lseek_r+0x1e>
 800f170:	682b      	ldr	r3, [r5, #0]
 800f172:	b103      	cbz	r3, 800f176 <_lseek_r+0x1e>
 800f174:	6023      	str	r3, [r4, #0]
 800f176:	bd38      	pop	{r3, r4, r5, pc}
 800f178:	20000a38 	.word	0x20000a38

0800f17c <_read_r>:
 800f17c:	b538      	push	{r3, r4, r5, lr}
 800f17e:	4d07      	ldr	r5, [pc, #28]	; (800f19c <_read_r+0x20>)
 800f180:	4604      	mov	r4, r0
 800f182:	4608      	mov	r0, r1
 800f184:	4611      	mov	r1, r2
 800f186:	2200      	movs	r2, #0
 800f188:	602a      	str	r2, [r5, #0]
 800f18a:	461a      	mov	r2, r3
 800f18c:	f7f6 fc12 	bl	80059b4 <_read>
 800f190:	1c43      	adds	r3, r0, #1
 800f192:	d102      	bne.n	800f19a <_read_r+0x1e>
 800f194:	682b      	ldr	r3, [r5, #0]
 800f196:	b103      	cbz	r3, 800f19a <_read_r+0x1e>
 800f198:	6023      	str	r3, [r4, #0]
 800f19a:	bd38      	pop	{r3, r4, r5, pc}
 800f19c:	20000a38 	.word	0x20000a38

0800f1a0 <_write_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d07      	ldr	r5, [pc, #28]	; (800f1c0 <_write_r+0x20>)
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	4608      	mov	r0, r1
 800f1a8:	4611      	mov	r1, r2
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	602a      	str	r2, [r5, #0]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	f7f3 fc42 	bl	8002a38 <_write>
 800f1b4:	1c43      	adds	r3, r0, #1
 800f1b6:	d102      	bne.n	800f1be <_write_r+0x1e>
 800f1b8:	682b      	ldr	r3, [r5, #0]
 800f1ba:	b103      	cbz	r3, 800f1be <_write_r+0x1e>
 800f1bc:	6023      	str	r3, [r4, #0]
 800f1be:	bd38      	pop	{r3, r4, r5, pc}
 800f1c0:	20000a38 	.word	0x20000a38

0800f1c4 <__errno>:
 800f1c4:	4b01      	ldr	r3, [pc, #4]	; (800f1cc <__errno+0x8>)
 800f1c6:	6818      	ldr	r0, [r3, #0]
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	20000208 	.word	0x20000208

0800f1d0 <__libc_init_array>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	4d0d      	ldr	r5, [pc, #52]	; (800f208 <__libc_init_array+0x38>)
 800f1d4:	4c0d      	ldr	r4, [pc, #52]	; (800f20c <__libc_init_array+0x3c>)
 800f1d6:	1b64      	subs	r4, r4, r5
 800f1d8:	10a4      	asrs	r4, r4, #2
 800f1da:	2600      	movs	r6, #0
 800f1dc:	42a6      	cmp	r6, r4
 800f1de:	d109      	bne.n	800f1f4 <__libc_init_array+0x24>
 800f1e0:	4d0b      	ldr	r5, [pc, #44]	; (800f210 <__libc_init_array+0x40>)
 800f1e2:	4c0c      	ldr	r4, [pc, #48]	; (800f214 <__libc_init_array+0x44>)
 800f1e4:	f002 faee 	bl	80117c4 <_init>
 800f1e8:	1b64      	subs	r4, r4, r5
 800f1ea:	10a4      	asrs	r4, r4, #2
 800f1ec:	2600      	movs	r6, #0
 800f1ee:	42a6      	cmp	r6, r4
 800f1f0:	d105      	bne.n	800f1fe <__libc_init_array+0x2e>
 800f1f2:	bd70      	pop	{r4, r5, r6, pc}
 800f1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1f8:	4798      	blx	r3
 800f1fa:	3601      	adds	r6, #1
 800f1fc:	e7ee      	b.n	800f1dc <__libc_init_array+0xc>
 800f1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f202:	4798      	blx	r3
 800f204:	3601      	adds	r6, #1
 800f206:	e7f2      	b.n	800f1ee <__libc_init_array+0x1e>
 800f208:	08012784 	.word	0x08012784
 800f20c:	08012784 	.word	0x08012784
 800f210:	08012784 	.word	0x08012784
 800f214:	08012788 	.word	0x08012788

0800f218 <__retarget_lock_acquire_recursive>:
 800f218:	4770      	bx	lr

0800f21a <__retarget_lock_release_recursive>:
 800f21a:	4770      	bx	lr

0800f21c <memcpy>:
 800f21c:	440a      	add	r2, r1
 800f21e:	4291      	cmp	r1, r2
 800f220:	f100 33ff 	add.w	r3, r0, #4294967295
 800f224:	d100      	bne.n	800f228 <memcpy+0xc>
 800f226:	4770      	bx	lr
 800f228:	b510      	push	{r4, lr}
 800f22a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f22e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f232:	4291      	cmp	r1, r2
 800f234:	d1f9      	bne.n	800f22a <memcpy+0xe>
 800f236:	bd10      	pop	{r4, pc}

0800f238 <nan>:
 800f238:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f240 <nan+0x8>
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	00000000 	.word	0x00000000
 800f244:	7ff80000 	.word	0x7ff80000

0800f248 <nanf>:
 800f248:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f250 <nanf+0x8>
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop
 800f250:	7fc00000 	.word	0x7fc00000

0800f254 <quorem>:
 800f254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f258:	6903      	ldr	r3, [r0, #16]
 800f25a:	690c      	ldr	r4, [r1, #16]
 800f25c:	42a3      	cmp	r3, r4
 800f25e:	4607      	mov	r7, r0
 800f260:	db7e      	blt.n	800f360 <quorem+0x10c>
 800f262:	3c01      	subs	r4, #1
 800f264:	f101 0814 	add.w	r8, r1, #20
 800f268:	f100 0514 	add.w	r5, r0, #20
 800f26c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f270:	9301      	str	r3, [sp, #4]
 800f272:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f27a:	3301      	adds	r3, #1
 800f27c:	429a      	cmp	r2, r3
 800f27e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f282:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f286:	fbb2 f6f3 	udiv	r6, r2, r3
 800f28a:	d331      	bcc.n	800f2f0 <quorem+0x9c>
 800f28c:	f04f 0e00 	mov.w	lr, #0
 800f290:	4640      	mov	r0, r8
 800f292:	46ac      	mov	ip, r5
 800f294:	46f2      	mov	sl, lr
 800f296:	f850 2b04 	ldr.w	r2, [r0], #4
 800f29a:	b293      	uxth	r3, r2
 800f29c:	fb06 e303 	mla	r3, r6, r3, lr
 800f2a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f2a4:	0c1a      	lsrs	r2, r3, #16
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	ebaa 0303 	sub.w	r3, sl, r3
 800f2ac:	f8dc a000 	ldr.w	sl, [ip]
 800f2b0:	fa13 f38a 	uxtah	r3, r3, sl
 800f2b4:	fb06 220e 	mla	r2, r6, lr, r2
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	9b00      	ldr	r3, [sp, #0]
 800f2bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f2c0:	b292      	uxth	r2, r2
 800f2c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f2c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2ca:	f8bd 3000 	ldrh.w	r3, [sp]
 800f2ce:	4581      	cmp	r9, r0
 800f2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2d4:	f84c 3b04 	str.w	r3, [ip], #4
 800f2d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f2dc:	d2db      	bcs.n	800f296 <quorem+0x42>
 800f2de:	f855 300b 	ldr.w	r3, [r5, fp]
 800f2e2:	b92b      	cbnz	r3, 800f2f0 <quorem+0x9c>
 800f2e4:	9b01      	ldr	r3, [sp, #4]
 800f2e6:	3b04      	subs	r3, #4
 800f2e8:	429d      	cmp	r5, r3
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	d32c      	bcc.n	800f348 <quorem+0xf4>
 800f2ee:	613c      	str	r4, [r7, #16]
 800f2f0:	4638      	mov	r0, r7
 800f2f2:	f001 fd5b 	bl	8010dac <__mcmp>
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	db22      	blt.n	800f340 <quorem+0xec>
 800f2fa:	3601      	adds	r6, #1
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	2000      	movs	r0, #0
 800f300:	f858 2b04 	ldr.w	r2, [r8], #4
 800f304:	f8d1 c000 	ldr.w	ip, [r1]
 800f308:	b293      	uxth	r3, r2
 800f30a:	1ac3      	subs	r3, r0, r3
 800f30c:	0c12      	lsrs	r2, r2, #16
 800f30e:	fa13 f38c 	uxtah	r3, r3, ip
 800f312:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f316:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f320:	45c1      	cmp	r9, r8
 800f322:	f841 3b04 	str.w	r3, [r1], #4
 800f326:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f32a:	d2e9      	bcs.n	800f300 <quorem+0xac>
 800f32c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f330:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f334:	b922      	cbnz	r2, 800f340 <quorem+0xec>
 800f336:	3b04      	subs	r3, #4
 800f338:	429d      	cmp	r5, r3
 800f33a:	461a      	mov	r2, r3
 800f33c:	d30a      	bcc.n	800f354 <quorem+0x100>
 800f33e:	613c      	str	r4, [r7, #16]
 800f340:	4630      	mov	r0, r6
 800f342:	b003      	add	sp, #12
 800f344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f348:	6812      	ldr	r2, [r2, #0]
 800f34a:	3b04      	subs	r3, #4
 800f34c:	2a00      	cmp	r2, #0
 800f34e:	d1ce      	bne.n	800f2ee <quorem+0x9a>
 800f350:	3c01      	subs	r4, #1
 800f352:	e7c9      	b.n	800f2e8 <quorem+0x94>
 800f354:	6812      	ldr	r2, [r2, #0]
 800f356:	3b04      	subs	r3, #4
 800f358:	2a00      	cmp	r2, #0
 800f35a:	d1f0      	bne.n	800f33e <quorem+0xea>
 800f35c:	3c01      	subs	r4, #1
 800f35e:	e7eb      	b.n	800f338 <quorem+0xe4>
 800f360:	2000      	movs	r0, #0
 800f362:	e7ee      	b.n	800f342 <quorem+0xee>
 800f364:	0000      	movs	r0, r0
	...

0800f368 <_dtoa_r>:
 800f368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f36c:	ed2d 8b04 	vpush	{d8-d9}
 800f370:	69c5      	ldr	r5, [r0, #28]
 800f372:	b093      	sub	sp, #76	; 0x4c
 800f374:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f378:	ec57 6b10 	vmov	r6, r7, d0
 800f37c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f380:	9107      	str	r1, [sp, #28]
 800f382:	4604      	mov	r4, r0
 800f384:	920a      	str	r2, [sp, #40]	; 0x28
 800f386:	930d      	str	r3, [sp, #52]	; 0x34
 800f388:	b975      	cbnz	r5, 800f3a8 <_dtoa_r+0x40>
 800f38a:	2010      	movs	r0, #16
 800f38c:	f001 f982 	bl	8010694 <malloc>
 800f390:	4602      	mov	r2, r0
 800f392:	61e0      	str	r0, [r4, #28]
 800f394:	b920      	cbnz	r0, 800f3a0 <_dtoa_r+0x38>
 800f396:	4bae      	ldr	r3, [pc, #696]	; (800f650 <_dtoa_r+0x2e8>)
 800f398:	21ef      	movs	r1, #239	; 0xef
 800f39a:	48ae      	ldr	r0, [pc, #696]	; (800f654 <_dtoa_r+0x2ec>)
 800f39c:	f002 f980 	bl	80116a0 <__assert_func>
 800f3a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f3a4:	6005      	str	r5, [r0, #0]
 800f3a6:	60c5      	str	r5, [r0, #12]
 800f3a8:	69e3      	ldr	r3, [r4, #28]
 800f3aa:	6819      	ldr	r1, [r3, #0]
 800f3ac:	b151      	cbz	r1, 800f3c4 <_dtoa_r+0x5c>
 800f3ae:	685a      	ldr	r2, [r3, #4]
 800f3b0:	604a      	str	r2, [r1, #4]
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	4093      	lsls	r3, r2
 800f3b6:	608b      	str	r3, [r1, #8]
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f001 fa71 	bl	80108a0 <_Bfree>
 800f3be:	69e3      	ldr	r3, [r4, #28]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	601a      	str	r2, [r3, #0]
 800f3c4:	1e3b      	subs	r3, r7, #0
 800f3c6:	bfbb      	ittet	lt
 800f3c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f3cc:	9303      	strlt	r3, [sp, #12]
 800f3ce:	2300      	movge	r3, #0
 800f3d0:	2201      	movlt	r2, #1
 800f3d2:	bfac      	ite	ge
 800f3d4:	f8c8 3000 	strge.w	r3, [r8]
 800f3d8:	f8c8 2000 	strlt.w	r2, [r8]
 800f3dc:	4b9e      	ldr	r3, [pc, #632]	; (800f658 <_dtoa_r+0x2f0>)
 800f3de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f3e2:	ea33 0308 	bics.w	r3, r3, r8
 800f3e6:	d11b      	bne.n	800f420 <_dtoa_r+0xb8>
 800f3e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f3ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800f3ee:	6013      	str	r3, [r2, #0]
 800f3f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f3f4:	4333      	orrs	r3, r6
 800f3f6:	f000 8593 	beq.w	800ff20 <_dtoa_r+0xbb8>
 800f3fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3fc:	b963      	cbnz	r3, 800f418 <_dtoa_r+0xb0>
 800f3fe:	4b97      	ldr	r3, [pc, #604]	; (800f65c <_dtoa_r+0x2f4>)
 800f400:	e027      	b.n	800f452 <_dtoa_r+0xea>
 800f402:	4b97      	ldr	r3, [pc, #604]	; (800f660 <_dtoa_r+0x2f8>)
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	3308      	adds	r3, #8
 800f408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f40a:	6013      	str	r3, [r2, #0]
 800f40c:	9800      	ldr	r0, [sp, #0]
 800f40e:	b013      	add	sp, #76	; 0x4c
 800f410:	ecbd 8b04 	vpop	{d8-d9}
 800f414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f418:	4b90      	ldr	r3, [pc, #576]	; (800f65c <_dtoa_r+0x2f4>)
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	3303      	adds	r3, #3
 800f41e:	e7f3      	b.n	800f408 <_dtoa_r+0xa0>
 800f420:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f424:	2200      	movs	r2, #0
 800f426:	ec51 0b17 	vmov	r0, r1, d7
 800f42a:	eeb0 8a47 	vmov.f32	s16, s14
 800f42e:	eef0 8a67 	vmov.f32	s17, s15
 800f432:	2300      	movs	r3, #0
 800f434:	f7f1 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 800f438:	4681      	mov	r9, r0
 800f43a:	b160      	cbz	r0, 800f456 <_dtoa_r+0xee>
 800f43c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f43e:	2301      	movs	r3, #1
 800f440:	6013      	str	r3, [r2, #0]
 800f442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f444:	2b00      	cmp	r3, #0
 800f446:	f000 8568 	beq.w	800ff1a <_dtoa_r+0xbb2>
 800f44a:	4b86      	ldr	r3, [pc, #536]	; (800f664 <_dtoa_r+0x2fc>)
 800f44c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f44e:	6013      	str	r3, [r2, #0]
 800f450:	3b01      	subs	r3, #1
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	e7da      	b.n	800f40c <_dtoa_r+0xa4>
 800f456:	aa10      	add	r2, sp, #64	; 0x40
 800f458:	a911      	add	r1, sp, #68	; 0x44
 800f45a:	4620      	mov	r0, r4
 800f45c:	eeb0 0a48 	vmov.f32	s0, s16
 800f460:	eef0 0a68 	vmov.f32	s1, s17
 800f464:	f001 fdb8 	bl	8010fd8 <__d2b>
 800f468:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f46c:	4682      	mov	sl, r0
 800f46e:	2d00      	cmp	r5, #0
 800f470:	d07f      	beq.n	800f572 <_dtoa_r+0x20a>
 800f472:	ee18 3a90 	vmov	r3, s17
 800f476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f47a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f47e:	ec51 0b18 	vmov	r0, r1, d8
 800f482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f48a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f48e:	4619      	mov	r1, r3
 800f490:	2200      	movs	r2, #0
 800f492:	4b75      	ldr	r3, [pc, #468]	; (800f668 <_dtoa_r+0x300>)
 800f494:	f7f0 fef8 	bl	8000288 <__aeabi_dsub>
 800f498:	a367      	add	r3, pc, #412	; (adr r3, 800f638 <_dtoa_r+0x2d0>)
 800f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49e:	f7f1 f8ab 	bl	80005f8 <__aeabi_dmul>
 800f4a2:	a367      	add	r3, pc, #412	; (adr r3, 800f640 <_dtoa_r+0x2d8>)
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f7f0 fef0 	bl	800028c <__adddf3>
 800f4ac:	4606      	mov	r6, r0
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	460f      	mov	r7, r1
 800f4b2:	f7f1 f837 	bl	8000524 <__aeabi_i2d>
 800f4b6:	a364      	add	r3, pc, #400	; (adr r3, 800f648 <_dtoa_r+0x2e0>)
 800f4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4bc:	f7f1 f89c 	bl	80005f8 <__aeabi_dmul>
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	4639      	mov	r1, r7
 800f4c8:	f7f0 fee0 	bl	800028c <__adddf3>
 800f4cc:	4606      	mov	r6, r0
 800f4ce:	460f      	mov	r7, r1
 800f4d0:	f7f1 fb42 	bl	8000b58 <__aeabi_d2iz>
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	4683      	mov	fp, r0
 800f4d8:	2300      	movs	r3, #0
 800f4da:	4630      	mov	r0, r6
 800f4dc:	4639      	mov	r1, r7
 800f4de:	f7f1 fafd 	bl	8000adc <__aeabi_dcmplt>
 800f4e2:	b148      	cbz	r0, 800f4f8 <_dtoa_r+0x190>
 800f4e4:	4658      	mov	r0, fp
 800f4e6:	f7f1 f81d 	bl	8000524 <__aeabi_i2d>
 800f4ea:	4632      	mov	r2, r6
 800f4ec:	463b      	mov	r3, r7
 800f4ee:	f7f1 faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4f2:	b908      	cbnz	r0, 800f4f8 <_dtoa_r+0x190>
 800f4f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4f8:	f1bb 0f16 	cmp.w	fp, #22
 800f4fc:	d857      	bhi.n	800f5ae <_dtoa_r+0x246>
 800f4fe:	4b5b      	ldr	r3, [pc, #364]	; (800f66c <_dtoa_r+0x304>)
 800f500:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	ec51 0b18 	vmov	r0, r1, d8
 800f50c:	f7f1 fae6 	bl	8000adc <__aeabi_dcmplt>
 800f510:	2800      	cmp	r0, #0
 800f512:	d04e      	beq.n	800f5b2 <_dtoa_r+0x24a>
 800f514:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f518:	2300      	movs	r3, #0
 800f51a:	930c      	str	r3, [sp, #48]	; 0x30
 800f51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f51e:	1b5b      	subs	r3, r3, r5
 800f520:	1e5a      	subs	r2, r3, #1
 800f522:	bf45      	ittet	mi
 800f524:	f1c3 0301 	rsbmi	r3, r3, #1
 800f528:	9305      	strmi	r3, [sp, #20]
 800f52a:	2300      	movpl	r3, #0
 800f52c:	2300      	movmi	r3, #0
 800f52e:	9206      	str	r2, [sp, #24]
 800f530:	bf54      	ite	pl
 800f532:	9305      	strpl	r3, [sp, #20]
 800f534:	9306      	strmi	r3, [sp, #24]
 800f536:	f1bb 0f00 	cmp.w	fp, #0
 800f53a:	db3c      	blt.n	800f5b6 <_dtoa_r+0x24e>
 800f53c:	9b06      	ldr	r3, [sp, #24]
 800f53e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f542:	445b      	add	r3, fp
 800f544:	9306      	str	r3, [sp, #24]
 800f546:	2300      	movs	r3, #0
 800f548:	9308      	str	r3, [sp, #32]
 800f54a:	9b07      	ldr	r3, [sp, #28]
 800f54c:	2b09      	cmp	r3, #9
 800f54e:	d868      	bhi.n	800f622 <_dtoa_r+0x2ba>
 800f550:	2b05      	cmp	r3, #5
 800f552:	bfc4      	itt	gt
 800f554:	3b04      	subgt	r3, #4
 800f556:	9307      	strgt	r3, [sp, #28]
 800f558:	9b07      	ldr	r3, [sp, #28]
 800f55a:	f1a3 0302 	sub.w	r3, r3, #2
 800f55e:	bfcc      	ite	gt
 800f560:	2500      	movgt	r5, #0
 800f562:	2501      	movle	r5, #1
 800f564:	2b03      	cmp	r3, #3
 800f566:	f200 8085 	bhi.w	800f674 <_dtoa_r+0x30c>
 800f56a:	e8df f003 	tbb	[pc, r3]
 800f56e:	3b2e      	.short	0x3b2e
 800f570:	5839      	.short	0x5839
 800f572:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f576:	441d      	add	r5, r3
 800f578:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f57c:	2b20      	cmp	r3, #32
 800f57e:	bfc1      	itttt	gt
 800f580:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f584:	fa08 f803 	lslgt.w	r8, r8, r3
 800f588:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f58c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f590:	bfd6      	itet	le
 800f592:	f1c3 0320 	rsble	r3, r3, #32
 800f596:	ea48 0003 	orrgt.w	r0, r8, r3
 800f59a:	fa06 f003 	lslle.w	r0, r6, r3
 800f59e:	f7f0 ffb1 	bl	8000504 <__aeabi_ui2d>
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f5a8:	3d01      	subs	r5, #1
 800f5aa:	920e      	str	r2, [sp, #56]	; 0x38
 800f5ac:	e76f      	b.n	800f48e <_dtoa_r+0x126>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e7b3      	b.n	800f51a <_dtoa_r+0x1b2>
 800f5b2:	900c      	str	r0, [sp, #48]	; 0x30
 800f5b4:	e7b2      	b.n	800f51c <_dtoa_r+0x1b4>
 800f5b6:	9b05      	ldr	r3, [sp, #20]
 800f5b8:	eba3 030b 	sub.w	r3, r3, fp
 800f5bc:	9305      	str	r3, [sp, #20]
 800f5be:	f1cb 0300 	rsb	r3, fp, #0
 800f5c2:	9308      	str	r3, [sp, #32]
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5c8:	e7bf      	b.n	800f54a <_dtoa_r+0x1e2>
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800f5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	dc52      	bgt.n	800f67a <_dtoa_r+0x312>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	9304      	str	r3, [sp, #16]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	920a      	str	r2, [sp, #40]	; 0x28
 800f5de:	e00b      	b.n	800f5f8 <_dtoa_r+0x290>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e7f3      	b.n	800f5cc <_dtoa_r+0x264>
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5ea:	445b      	add	r3, fp
 800f5ec:	9301      	str	r3, [sp, #4]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	2b01      	cmp	r3, #1
 800f5f2:	9304      	str	r3, [sp, #16]
 800f5f4:	bfb8      	it	lt
 800f5f6:	2301      	movlt	r3, #1
 800f5f8:	69e0      	ldr	r0, [r4, #28]
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	2204      	movs	r2, #4
 800f5fe:	f102 0614 	add.w	r6, r2, #20
 800f602:	429e      	cmp	r6, r3
 800f604:	d93d      	bls.n	800f682 <_dtoa_r+0x31a>
 800f606:	6041      	str	r1, [r0, #4]
 800f608:	4620      	mov	r0, r4
 800f60a:	f001 f909 	bl	8010820 <_Balloc>
 800f60e:	9000      	str	r0, [sp, #0]
 800f610:	2800      	cmp	r0, #0
 800f612:	d139      	bne.n	800f688 <_dtoa_r+0x320>
 800f614:	4b16      	ldr	r3, [pc, #88]	; (800f670 <_dtoa_r+0x308>)
 800f616:	4602      	mov	r2, r0
 800f618:	f240 11af 	movw	r1, #431	; 0x1af
 800f61c:	e6bd      	b.n	800f39a <_dtoa_r+0x32>
 800f61e:	2301      	movs	r3, #1
 800f620:	e7e1      	b.n	800f5e6 <_dtoa_r+0x27e>
 800f622:	2501      	movs	r5, #1
 800f624:	2300      	movs	r3, #0
 800f626:	9307      	str	r3, [sp, #28]
 800f628:	9509      	str	r5, [sp, #36]	; 0x24
 800f62a:	f04f 33ff 	mov.w	r3, #4294967295
 800f62e:	9301      	str	r3, [sp, #4]
 800f630:	9304      	str	r3, [sp, #16]
 800f632:	2200      	movs	r2, #0
 800f634:	2312      	movs	r3, #18
 800f636:	e7d1      	b.n	800f5dc <_dtoa_r+0x274>
 800f638:	636f4361 	.word	0x636f4361
 800f63c:	3fd287a7 	.word	0x3fd287a7
 800f640:	8b60c8b3 	.word	0x8b60c8b3
 800f644:	3fc68a28 	.word	0x3fc68a28
 800f648:	509f79fb 	.word	0x509f79fb
 800f64c:	3fd34413 	.word	0x3fd34413
 800f650:	080124f2 	.word	0x080124f2
 800f654:	08012509 	.word	0x08012509
 800f658:	7ff00000 	.word	0x7ff00000
 800f65c:	080124ee 	.word	0x080124ee
 800f660:	080124e5 	.word	0x080124e5
 800f664:	080124ba 	.word	0x080124ba
 800f668:	3ff80000 	.word	0x3ff80000
 800f66c:	08012658 	.word	0x08012658
 800f670:	08012561 	.word	0x08012561
 800f674:	2301      	movs	r3, #1
 800f676:	9309      	str	r3, [sp, #36]	; 0x24
 800f678:	e7d7      	b.n	800f62a <_dtoa_r+0x2c2>
 800f67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f67c:	9301      	str	r3, [sp, #4]
 800f67e:	9304      	str	r3, [sp, #16]
 800f680:	e7ba      	b.n	800f5f8 <_dtoa_r+0x290>
 800f682:	3101      	adds	r1, #1
 800f684:	0052      	lsls	r2, r2, #1
 800f686:	e7ba      	b.n	800f5fe <_dtoa_r+0x296>
 800f688:	69e3      	ldr	r3, [r4, #28]
 800f68a:	9a00      	ldr	r2, [sp, #0]
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	9b04      	ldr	r3, [sp, #16]
 800f690:	2b0e      	cmp	r3, #14
 800f692:	f200 80a8 	bhi.w	800f7e6 <_dtoa_r+0x47e>
 800f696:	2d00      	cmp	r5, #0
 800f698:	f000 80a5 	beq.w	800f7e6 <_dtoa_r+0x47e>
 800f69c:	f1bb 0f00 	cmp.w	fp, #0
 800f6a0:	dd38      	ble.n	800f714 <_dtoa_r+0x3ac>
 800f6a2:	4bc0      	ldr	r3, [pc, #768]	; (800f9a4 <_dtoa_r+0x63c>)
 800f6a4:	f00b 020f 	and.w	r2, fp, #15
 800f6a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f6b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f6b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f6b8:	d019      	beq.n	800f6ee <_dtoa_r+0x386>
 800f6ba:	4bbb      	ldr	r3, [pc, #748]	; (800f9a8 <_dtoa_r+0x640>)
 800f6bc:	ec51 0b18 	vmov	r0, r1, d8
 800f6c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f6c4:	f7f1 f8c2 	bl	800084c <__aeabi_ddiv>
 800f6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6cc:	f008 080f 	and.w	r8, r8, #15
 800f6d0:	2503      	movs	r5, #3
 800f6d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f9a8 <_dtoa_r+0x640>
 800f6d6:	f1b8 0f00 	cmp.w	r8, #0
 800f6da:	d10a      	bne.n	800f6f2 <_dtoa_r+0x38a>
 800f6dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6e0:	4632      	mov	r2, r6
 800f6e2:	463b      	mov	r3, r7
 800f6e4:	f7f1 f8b2 	bl	800084c <__aeabi_ddiv>
 800f6e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6ec:	e02b      	b.n	800f746 <_dtoa_r+0x3de>
 800f6ee:	2502      	movs	r5, #2
 800f6f0:	e7ef      	b.n	800f6d2 <_dtoa_r+0x36a>
 800f6f2:	f018 0f01 	tst.w	r8, #1
 800f6f6:	d008      	beq.n	800f70a <_dtoa_r+0x3a2>
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	4639      	mov	r1, r7
 800f6fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f700:	f7f0 ff7a 	bl	80005f8 <__aeabi_dmul>
 800f704:	3501      	adds	r5, #1
 800f706:	4606      	mov	r6, r0
 800f708:	460f      	mov	r7, r1
 800f70a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f70e:	f109 0908 	add.w	r9, r9, #8
 800f712:	e7e0      	b.n	800f6d6 <_dtoa_r+0x36e>
 800f714:	f000 809f 	beq.w	800f856 <_dtoa_r+0x4ee>
 800f718:	f1cb 0600 	rsb	r6, fp, #0
 800f71c:	4ba1      	ldr	r3, [pc, #644]	; (800f9a4 <_dtoa_r+0x63c>)
 800f71e:	4fa2      	ldr	r7, [pc, #648]	; (800f9a8 <_dtoa_r+0x640>)
 800f720:	f006 020f 	and.w	r2, r6, #15
 800f724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	ec51 0b18 	vmov	r0, r1, d8
 800f730:	f7f0 ff62 	bl	80005f8 <__aeabi_dmul>
 800f734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f738:	1136      	asrs	r6, r6, #4
 800f73a:	2300      	movs	r3, #0
 800f73c:	2502      	movs	r5, #2
 800f73e:	2e00      	cmp	r6, #0
 800f740:	d17e      	bne.n	800f840 <_dtoa_r+0x4d8>
 800f742:	2b00      	cmp	r3, #0
 800f744:	d1d0      	bne.n	800f6e8 <_dtoa_r+0x380>
 800f746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f748:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f000 8084 	beq.w	800f85a <_dtoa_r+0x4f2>
 800f752:	4b96      	ldr	r3, [pc, #600]	; (800f9ac <_dtoa_r+0x644>)
 800f754:	2200      	movs	r2, #0
 800f756:	4640      	mov	r0, r8
 800f758:	4649      	mov	r1, r9
 800f75a:	f7f1 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d07b      	beq.n	800f85a <_dtoa_r+0x4f2>
 800f762:	9b04      	ldr	r3, [sp, #16]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d078      	beq.n	800f85a <_dtoa_r+0x4f2>
 800f768:	9b01      	ldr	r3, [sp, #4]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	dd39      	ble.n	800f7e2 <_dtoa_r+0x47a>
 800f76e:	4b90      	ldr	r3, [pc, #576]	; (800f9b0 <_dtoa_r+0x648>)
 800f770:	2200      	movs	r2, #0
 800f772:	4640      	mov	r0, r8
 800f774:	4649      	mov	r1, r9
 800f776:	f7f0 ff3f 	bl	80005f8 <__aeabi_dmul>
 800f77a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f77e:	9e01      	ldr	r6, [sp, #4]
 800f780:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f784:	3501      	adds	r5, #1
 800f786:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f78a:	4628      	mov	r0, r5
 800f78c:	f7f0 feca 	bl	8000524 <__aeabi_i2d>
 800f790:	4642      	mov	r2, r8
 800f792:	464b      	mov	r3, r9
 800f794:	f7f0 ff30 	bl	80005f8 <__aeabi_dmul>
 800f798:	4b86      	ldr	r3, [pc, #536]	; (800f9b4 <_dtoa_r+0x64c>)
 800f79a:	2200      	movs	r2, #0
 800f79c:	f7f0 fd76 	bl	800028c <__adddf3>
 800f7a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7a8:	9303      	str	r3, [sp, #12]
 800f7aa:	2e00      	cmp	r6, #0
 800f7ac:	d158      	bne.n	800f860 <_dtoa_r+0x4f8>
 800f7ae:	4b82      	ldr	r3, [pc, #520]	; (800f9b8 <_dtoa_r+0x650>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	4649      	mov	r1, r9
 800f7b6:	f7f0 fd67 	bl	8000288 <__aeabi_dsub>
 800f7ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7be:	4680      	mov	r8, r0
 800f7c0:	4689      	mov	r9, r1
 800f7c2:	f7f1 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	f040 8296 	bne.w	800fcf8 <_dtoa_r+0x990>
 800f7cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f7d0:	4640      	mov	r0, r8
 800f7d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f7d6:	4649      	mov	r1, r9
 800f7d8:	f7f1 f980 	bl	8000adc <__aeabi_dcmplt>
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	f040 8289 	bne.w	800fcf4 <_dtoa_r+0x98c>
 800f7e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f7e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f2c0 814e 	blt.w	800fa8a <_dtoa_r+0x722>
 800f7ee:	f1bb 0f0e 	cmp.w	fp, #14
 800f7f2:	f300 814a 	bgt.w	800fa8a <_dtoa_r+0x722>
 800f7f6:	4b6b      	ldr	r3, [pc, #428]	; (800f9a4 <_dtoa_r+0x63c>)
 800f7f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f7fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f802:	2b00      	cmp	r3, #0
 800f804:	f280 80dc 	bge.w	800f9c0 <_dtoa_r+0x658>
 800f808:	9b04      	ldr	r3, [sp, #16]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f300 80d8 	bgt.w	800f9c0 <_dtoa_r+0x658>
 800f810:	f040 826f 	bne.w	800fcf2 <_dtoa_r+0x98a>
 800f814:	4b68      	ldr	r3, [pc, #416]	; (800f9b8 <_dtoa_r+0x650>)
 800f816:	2200      	movs	r2, #0
 800f818:	4640      	mov	r0, r8
 800f81a:	4649      	mov	r1, r9
 800f81c:	f7f0 feec 	bl	80005f8 <__aeabi_dmul>
 800f820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f824:	f7f1 f96e 	bl	8000b04 <__aeabi_dcmpge>
 800f828:	9e04      	ldr	r6, [sp, #16]
 800f82a:	4637      	mov	r7, r6
 800f82c:	2800      	cmp	r0, #0
 800f82e:	f040 8245 	bne.w	800fcbc <_dtoa_r+0x954>
 800f832:	9d00      	ldr	r5, [sp, #0]
 800f834:	2331      	movs	r3, #49	; 0x31
 800f836:	f805 3b01 	strb.w	r3, [r5], #1
 800f83a:	f10b 0b01 	add.w	fp, fp, #1
 800f83e:	e241      	b.n	800fcc4 <_dtoa_r+0x95c>
 800f840:	07f2      	lsls	r2, r6, #31
 800f842:	d505      	bpl.n	800f850 <_dtoa_r+0x4e8>
 800f844:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f848:	f7f0 fed6 	bl	80005f8 <__aeabi_dmul>
 800f84c:	3501      	adds	r5, #1
 800f84e:	2301      	movs	r3, #1
 800f850:	1076      	asrs	r6, r6, #1
 800f852:	3708      	adds	r7, #8
 800f854:	e773      	b.n	800f73e <_dtoa_r+0x3d6>
 800f856:	2502      	movs	r5, #2
 800f858:	e775      	b.n	800f746 <_dtoa_r+0x3de>
 800f85a:	9e04      	ldr	r6, [sp, #16]
 800f85c:	465f      	mov	r7, fp
 800f85e:	e792      	b.n	800f786 <_dtoa_r+0x41e>
 800f860:	9900      	ldr	r1, [sp, #0]
 800f862:	4b50      	ldr	r3, [pc, #320]	; (800f9a4 <_dtoa_r+0x63c>)
 800f864:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f868:	4431      	add	r1, r6
 800f86a:	9102      	str	r1, [sp, #8]
 800f86c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f86e:	eeb0 9a47 	vmov.f32	s18, s14
 800f872:	eef0 9a67 	vmov.f32	s19, s15
 800f876:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f87a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f87e:	2900      	cmp	r1, #0
 800f880:	d044      	beq.n	800f90c <_dtoa_r+0x5a4>
 800f882:	494e      	ldr	r1, [pc, #312]	; (800f9bc <_dtoa_r+0x654>)
 800f884:	2000      	movs	r0, #0
 800f886:	f7f0 ffe1 	bl	800084c <__aeabi_ddiv>
 800f88a:	ec53 2b19 	vmov	r2, r3, d9
 800f88e:	f7f0 fcfb 	bl	8000288 <__aeabi_dsub>
 800f892:	9d00      	ldr	r5, [sp, #0]
 800f894:	ec41 0b19 	vmov	d9, r0, r1
 800f898:	4649      	mov	r1, r9
 800f89a:	4640      	mov	r0, r8
 800f89c:	f7f1 f95c 	bl	8000b58 <__aeabi_d2iz>
 800f8a0:	4606      	mov	r6, r0
 800f8a2:	f7f0 fe3f 	bl	8000524 <__aeabi_i2d>
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	4640      	mov	r0, r8
 800f8ac:	4649      	mov	r1, r9
 800f8ae:	f7f0 fceb 	bl	8000288 <__aeabi_dsub>
 800f8b2:	3630      	adds	r6, #48	; 0x30
 800f8b4:	f805 6b01 	strb.w	r6, [r5], #1
 800f8b8:	ec53 2b19 	vmov	r2, r3, d9
 800f8bc:	4680      	mov	r8, r0
 800f8be:	4689      	mov	r9, r1
 800f8c0:	f7f1 f90c 	bl	8000adc <__aeabi_dcmplt>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d164      	bne.n	800f992 <_dtoa_r+0x62a>
 800f8c8:	4642      	mov	r2, r8
 800f8ca:	464b      	mov	r3, r9
 800f8cc:	4937      	ldr	r1, [pc, #220]	; (800f9ac <_dtoa_r+0x644>)
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	f7f0 fcda 	bl	8000288 <__aeabi_dsub>
 800f8d4:	ec53 2b19 	vmov	r2, r3, d9
 800f8d8:	f7f1 f900 	bl	8000adc <__aeabi_dcmplt>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	f040 80b6 	bne.w	800fa4e <_dtoa_r+0x6e6>
 800f8e2:	9b02      	ldr	r3, [sp, #8]
 800f8e4:	429d      	cmp	r5, r3
 800f8e6:	f43f af7c 	beq.w	800f7e2 <_dtoa_r+0x47a>
 800f8ea:	4b31      	ldr	r3, [pc, #196]	; (800f9b0 <_dtoa_r+0x648>)
 800f8ec:	ec51 0b19 	vmov	r0, r1, d9
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f7f0 fe81 	bl	80005f8 <__aeabi_dmul>
 800f8f6:	4b2e      	ldr	r3, [pc, #184]	; (800f9b0 <_dtoa_r+0x648>)
 800f8f8:	ec41 0b19 	vmov	d9, r0, r1
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	4640      	mov	r0, r8
 800f900:	4649      	mov	r1, r9
 800f902:	f7f0 fe79 	bl	80005f8 <__aeabi_dmul>
 800f906:	4680      	mov	r8, r0
 800f908:	4689      	mov	r9, r1
 800f90a:	e7c5      	b.n	800f898 <_dtoa_r+0x530>
 800f90c:	ec51 0b17 	vmov	r0, r1, d7
 800f910:	f7f0 fe72 	bl	80005f8 <__aeabi_dmul>
 800f914:	9b02      	ldr	r3, [sp, #8]
 800f916:	9d00      	ldr	r5, [sp, #0]
 800f918:	930f      	str	r3, [sp, #60]	; 0x3c
 800f91a:	ec41 0b19 	vmov	d9, r0, r1
 800f91e:	4649      	mov	r1, r9
 800f920:	4640      	mov	r0, r8
 800f922:	f7f1 f919 	bl	8000b58 <__aeabi_d2iz>
 800f926:	4606      	mov	r6, r0
 800f928:	f7f0 fdfc 	bl	8000524 <__aeabi_i2d>
 800f92c:	3630      	adds	r6, #48	; 0x30
 800f92e:	4602      	mov	r2, r0
 800f930:	460b      	mov	r3, r1
 800f932:	4640      	mov	r0, r8
 800f934:	4649      	mov	r1, r9
 800f936:	f7f0 fca7 	bl	8000288 <__aeabi_dsub>
 800f93a:	f805 6b01 	strb.w	r6, [r5], #1
 800f93e:	9b02      	ldr	r3, [sp, #8]
 800f940:	429d      	cmp	r5, r3
 800f942:	4680      	mov	r8, r0
 800f944:	4689      	mov	r9, r1
 800f946:	f04f 0200 	mov.w	r2, #0
 800f94a:	d124      	bne.n	800f996 <_dtoa_r+0x62e>
 800f94c:	4b1b      	ldr	r3, [pc, #108]	; (800f9bc <_dtoa_r+0x654>)
 800f94e:	ec51 0b19 	vmov	r0, r1, d9
 800f952:	f7f0 fc9b 	bl	800028c <__adddf3>
 800f956:	4602      	mov	r2, r0
 800f958:	460b      	mov	r3, r1
 800f95a:	4640      	mov	r0, r8
 800f95c:	4649      	mov	r1, r9
 800f95e:	f7f1 f8db 	bl	8000b18 <__aeabi_dcmpgt>
 800f962:	2800      	cmp	r0, #0
 800f964:	d173      	bne.n	800fa4e <_dtoa_r+0x6e6>
 800f966:	ec53 2b19 	vmov	r2, r3, d9
 800f96a:	4914      	ldr	r1, [pc, #80]	; (800f9bc <_dtoa_r+0x654>)
 800f96c:	2000      	movs	r0, #0
 800f96e:	f7f0 fc8b 	bl	8000288 <__aeabi_dsub>
 800f972:	4602      	mov	r2, r0
 800f974:	460b      	mov	r3, r1
 800f976:	4640      	mov	r0, r8
 800f978:	4649      	mov	r1, r9
 800f97a:	f7f1 f8af 	bl	8000adc <__aeabi_dcmplt>
 800f97e:	2800      	cmp	r0, #0
 800f980:	f43f af2f 	beq.w	800f7e2 <_dtoa_r+0x47a>
 800f984:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f986:	1e6b      	subs	r3, r5, #1
 800f988:	930f      	str	r3, [sp, #60]	; 0x3c
 800f98a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f98e:	2b30      	cmp	r3, #48	; 0x30
 800f990:	d0f8      	beq.n	800f984 <_dtoa_r+0x61c>
 800f992:	46bb      	mov	fp, r7
 800f994:	e04a      	b.n	800fa2c <_dtoa_r+0x6c4>
 800f996:	4b06      	ldr	r3, [pc, #24]	; (800f9b0 <_dtoa_r+0x648>)
 800f998:	f7f0 fe2e 	bl	80005f8 <__aeabi_dmul>
 800f99c:	4680      	mov	r8, r0
 800f99e:	4689      	mov	r9, r1
 800f9a0:	e7bd      	b.n	800f91e <_dtoa_r+0x5b6>
 800f9a2:	bf00      	nop
 800f9a4:	08012658 	.word	0x08012658
 800f9a8:	08012630 	.word	0x08012630
 800f9ac:	3ff00000 	.word	0x3ff00000
 800f9b0:	40240000 	.word	0x40240000
 800f9b4:	401c0000 	.word	0x401c0000
 800f9b8:	40140000 	.word	0x40140000
 800f9bc:	3fe00000 	.word	0x3fe00000
 800f9c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f9c4:	9d00      	ldr	r5, [sp, #0]
 800f9c6:	4642      	mov	r2, r8
 800f9c8:	464b      	mov	r3, r9
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	4639      	mov	r1, r7
 800f9ce:	f7f0 ff3d 	bl	800084c <__aeabi_ddiv>
 800f9d2:	f7f1 f8c1 	bl	8000b58 <__aeabi_d2iz>
 800f9d6:	9001      	str	r0, [sp, #4]
 800f9d8:	f7f0 fda4 	bl	8000524 <__aeabi_i2d>
 800f9dc:	4642      	mov	r2, r8
 800f9de:	464b      	mov	r3, r9
 800f9e0:	f7f0 fe0a 	bl	80005f8 <__aeabi_dmul>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	f7f0 fc4c 	bl	8000288 <__aeabi_dsub>
 800f9f0:	9e01      	ldr	r6, [sp, #4]
 800f9f2:	9f04      	ldr	r7, [sp, #16]
 800f9f4:	3630      	adds	r6, #48	; 0x30
 800f9f6:	f805 6b01 	strb.w	r6, [r5], #1
 800f9fa:	9e00      	ldr	r6, [sp, #0]
 800f9fc:	1bae      	subs	r6, r5, r6
 800f9fe:	42b7      	cmp	r7, r6
 800fa00:	4602      	mov	r2, r0
 800fa02:	460b      	mov	r3, r1
 800fa04:	d134      	bne.n	800fa70 <_dtoa_r+0x708>
 800fa06:	f7f0 fc41 	bl	800028c <__adddf3>
 800fa0a:	4642      	mov	r2, r8
 800fa0c:	464b      	mov	r3, r9
 800fa0e:	4606      	mov	r6, r0
 800fa10:	460f      	mov	r7, r1
 800fa12:	f7f1 f881 	bl	8000b18 <__aeabi_dcmpgt>
 800fa16:	b9c8      	cbnz	r0, 800fa4c <_dtoa_r+0x6e4>
 800fa18:	4642      	mov	r2, r8
 800fa1a:	464b      	mov	r3, r9
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	4639      	mov	r1, r7
 800fa20:	f7f1 f852 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa24:	b110      	cbz	r0, 800fa2c <_dtoa_r+0x6c4>
 800fa26:	9b01      	ldr	r3, [sp, #4]
 800fa28:	07db      	lsls	r3, r3, #31
 800fa2a:	d40f      	bmi.n	800fa4c <_dtoa_r+0x6e4>
 800fa2c:	4651      	mov	r1, sl
 800fa2e:	4620      	mov	r0, r4
 800fa30:	f000 ff36 	bl	80108a0 <_Bfree>
 800fa34:	2300      	movs	r3, #0
 800fa36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa38:	702b      	strb	r3, [r5, #0]
 800fa3a:	f10b 0301 	add.w	r3, fp, #1
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f43f ace2 	beq.w	800f40c <_dtoa_r+0xa4>
 800fa48:	601d      	str	r5, [r3, #0]
 800fa4a:	e4df      	b.n	800f40c <_dtoa_r+0xa4>
 800fa4c:	465f      	mov	r7, fp
 800fa4e:	462b      	mov	r3, r5
 800fa50:	461d      	mov	r5, r3
 800fa52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa56:	2a39      	cmp	r2, #57	; 0x39
 800fa58:	d106      	bne.n	800fa68 <_dtoa_r+0x700>
 800fa5a:	9a00      	ldr	r2, [sp, #0]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d1f7      	bne.n	800fa50 <_dtoa_r+0x6e8>
 800fa60:	9900      	ldr	r1, [sp, #0]
 800fa62:	2230      	movs	r2, #48	; 0x30
 800fa64:	3701      	adds	r7, #1
 800fa66:	700a      	strb	r2, [r1, #0]
 800fa68:	781a      	ldrb	r2, [r3, #0]
 800fa6a:	3201      	adds	r2, #1
 800fa6c:	701a      	strb	r2, [r3, #0]
 800fa6e:	e790      	b.n	800f992 <_dtoa_r+0x62a>
 800fa70:	4ba3      	ldr	r3, [pc, #652]	; (800fd00 <_dtoa_r+0x998>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	f7f0 fdc0 	bl	80005f8 <__aeabi_dmul>
 800fa78:	2200      	movs	r2, #0
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	4606      	mov	r6, r0
 800fa7e:	460f      	mov	r7, r1
 800fa80:	f7f1 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa84:	2800      	cmp	r0, #0
 800fa86:	d09e      	beq.n	800f9c6 <_dtoa_r+0x65e>
 800fa88:	e7d0      	b.n	800fa2c <_dtoa_r+0x6c4>
 800fa8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa8c:	2a00      	cmp	r2, #0
 800fa8e:	f000 80ca 	beq.w	800fc26 <_dtoa_r+0x8be>
 800fa92:	9a07      	ldr	r2, [sp, #28]
 800fa94:	2a01      	cmp	r2, #1
 800fa96:	f300 80ad 	bgt.w	800fbf4 <_dtoa_r+0x88c>
 800fa9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa9c:	2a00      	cmp	r2, #0
 800fa9e:	f000 80a5 	beq.w	800fbec <_dtoa_r+0x884>
 800faa2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800faa6:	9e08      	ldr	r6, [sp, #32]
 800faa8:	9d05      	ldr	r5, [sp, #20]
 800faaa:	9a05      	ldr	r2, [sp, #20]
 800faac:	441a      	add	r2, r3
 800faae:	9205      	str	r2, [sp, #20]
 800fab0:	9a06      	ldr	r2, [sp, #24]
 800fab2:	2101      	movs	r1, #1
 800fab4:	441a      	add	r2, r3
 800fab6:	4620      	mov	r0, r4
 800fab8:	9206      	str	r2, [sp, #24]
 800faba:	f000 fff1 	bl	8010aa0 <__i2b>
 800fabe:	4607      	mov	r7, r0
 800fac0:	b165      	cbz	r5, 800fadc <_dtoa_r+0x774>
 800fac2:	9b06      	ldr	r3, [sp, #24]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	dd09      	ble.n	800fadc <_dtoa_r+0x774>
 800fac8:	42ab      	cmp	r3, r5
 800faca:	9a05      	ldr	r2, [sp, #20]
 800facc:	bfa8      	it	ge
 800face:	462b      	movge	r3, r5
 800fad0:	1ad2      	subs	r2, r2, r3
 800fad2:	9205      	str	r2, [sp, #20]
 800fad4:	9a06      	ldr	r2, [sp, #24]
 800fad6:	1aed      	subs	r5, r5, r3
 800fad8:	1ad3      	subs	r3, r2, r3
 800fada:	9306      	str	r3, [sp, #24]
 800fadc:	9b08      	ldr	r3, [sp, #32]
 800fade:	b1f3      	cbz	r3, 800fb1e <_dtoa_r+0x7b6>
 800fae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f000 80a3 	beq.w	800fc2e <_dtoa_r+0x8c6>
 800fae8:	2e00      	cmp	r6, #0
 800faea:	dd10      	ble.n	800fb0e <_dtoa_r+0x7a6>
 800faec:	4639      	mov	r1, r7
 800faee:	4632      	mov	r2, r6
 800faf0:	4620      	mov	r0, r4
 800faf2:	f001 f895 	bl	8010c20 <__pow5mult>
 800faf6:	4652      	mov	r2, sl
 800faf8:	4601      	mov	r1, r0
 800fafa:	4607      	mov	r7, r0
 800fafc:	4620      	mov	r0, r4
 800fafe:	f000 ffe5 	bl	8010acc <__multiply>
 800fb02:	4651      	mov	r1, sl
 800fb04:	4680      	mov	r8, r0
 800fb06:	4620      	mov	r0, r4
 800fb08:	f000 feca 	bl	80108a0 <_Bfree>
 800fb0c:	46c2      	mov	sl, r8
 800fb0e:	9b08      	ldr	r3, [sp, #32]
 800fb10:	1b9a      	subs	r2, r3, r6
 800fb12:	d004      	beq.n	800fb1e <_dtoa_r+0x7b6>
 800fb14:	4651      	mov	r1, sl
 800fb16:	4620      	mov	r0, r4
 800fb18:	f001 f882 	bl	8010c20 <__pow5mult>
 800fb1c:	4682      	mov	sl, r0
 800fb1e:	2101      	movs	r1, #1
 800fb20:	4620      	mov	r0, r4
 800fb22:	f000 ffbd 	bl	8010aa0 <__i2b>
 800fb26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	f340 8081 	ble.w	800fc32 <_dtoa_r+0x8ca>
 800fb30:	461a      	mov	r2, r3
 800fb32:	4601      	mov	r1, r0
 800fb34:	4620      	mov	r0, r4
 800fb36:	f001 f873 	bl	8010c20 <__pow5mult>
 800fb3a:	9b07      	ldr	r3, [sp, #28]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	4606      	mov	r6, r0
 800fb40:	dd7a      	ble.n	800fc38 <_dtoa_r+0x8d0>
 800fb42:	f04f 0800 	mov.w	r8, #0
 800fb46:	6933      	ldr	r3, [r6, #16]
 800fb48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fb4c:	6918      	ldr	r0, [r3, #16]
 800fb4e:	f000 ff59 	bl	8010a04 <__hi0bits>
 800fb52:	f1c0 0020 	rsb	r0, r0, #32
 800fb56:	9b06      	ldr	r3, [sp, #24]
 800fb58:	4418      	add	r0, r3
 800fb5a:	f010 001f 	ands.w	r0, r0, #31
 800fb5e:	f000 8094 	beq.w	800fc8a <_dtoa_r+0x922>
 800fb62:	f1c0 0320 	rsb	r3, r0, #32
 800fb66:	2b04      	cmp	r3, #4
 800fb68:	f340 8085 	ble.w	800fc76 <_dtoa_r+0x90e>
 800fb6c:	9b05      	ldr	r3, [sp, #20]
 800fb6e:	f1c0 001c 	rsb	r0, r0, #28
 800fb72:	4403      	add	r3, r0
 800fb74:	9305      	str	r3, [sp, #20]
 800fb76:	9b06      	ldr	r3, [sp, #24]
 800fb78:	4403      	add	r3, r0
 800fb7a:	4405      	add	r5, r0
 800fb7c:	9306      	str	r3, [sp, #24]
 800fb7e:	9b05      	ldr	r3, [sp, #20]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	dd05      	ble.n	800fb90 <_dtoa_r+0x828>
 800fb84:	4651      	mov	r1, sl
 800fb86:	461a      	mov	r2, r3
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f001 f8a3 	bl	8010cd4 <__lshift>
 800fb8e:	4682      	mov	sl, r0
 800fb90:	9b06      	ldr	r3, [sp, #24]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	dd05      	ble.n	800fba2 <_dtoa_r+0x83a>
 800fb96:	4631      	mov	r1, r6
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f001 f89a 	bl	8010cd4 <__lshift>
 800fba0:	4606      	mov	r6, r0
 800fba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d072      	beq.n	800fc8e <_dtoa_r+0x926>
 800fba8:	4631      	mov	r1, r6
 800fbaa:	4650      	mov	r0, sl
 800fbac:	f001 f8fe 	bl	8010dac <__mcmp>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	da6c      	bge.n	800fc8e <_dtoa_r+0x926>
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	4651      	mov	r1, sl
 800fbb8:	220a      	movs	r2, #10
 800fbba:	4620      	mov	r0, r4
 800fbbc:	f000 fe92 	bl	80108e4 <__multadd>
 800fbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fbc6:	4682      	mov	sl, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f000 81b0 	beq.w	800ff2e <_dtoa_r+0xbc6>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	4639      	mov	r1, r7
 800fbd2:	220a      	movs	r2, #10
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f000 fe85 	bl	80108e4 <__multadd>
 800fbda:	9b01      	ldr	r3, [sp, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	4607      	mov	r7, r0
 800fbe0:	f300 8096 	bgt.w	800fd10 <_dtoa_r+0x9a8>
 800fbe4:	9b07      	ldr	r3, [sp, #28]
 800fbe6:	2b02      	cmp	r3, #2
 800fbe8:	dc59      	bgt.n	800fc9e <_dtoa_r+0x936>
 800fbea:	e091      	b.n	800fd10 <_dtoa_r+0x9a8>
 800fbec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fbee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fbf2:	e758      	b.n	800faa6 <_dtoa_r+0x73e>
 800fbf4:	9b04      	ldr	r3, [sp, #16]
 800fbf6:	1e5e      	subs	r6, r3, #1
 800fbf8:	9b08      	ldr	r3, [sp, #32]
 800fbfa:	42b3      	cmp	r3, r6
 800fbfc:	bfbf      	itttt	lt
 800fbfe:	9b08      	ldrlt	r3, [sp, #32]
 800fc00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fc02:	9608      	strlt	r6, [sp, #32]
 800fc04:	1af3      	sublt	r3, r6, r3
 800fc06:	bfb4      	ite	lt
 800fc08:	18d2      	addlt	r2, r2, r3
 800fc0a:	1b9e      	subge	r6, r3, r6
 800fc0c:	9b04      	ldr	r3, [sp, #16]
 800fc0e:	bfbc      	itt	lt
 800fc10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fc12:	2600      	movlt	r6, #0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	bfb7      	itett	lt
 800fc18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fc1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fc20:	1a9d      	sublt	r5, r3, r2
 800fc22:	2300      	movlt	r3, #0
 800fc24:	e741      	b.n	800faaa <_dtoa_r+0x742>
 800fc26:	9e08      	ldr	r6, [sp, #32]
 800fc28:	9d05      	ldr	r5, [sp, #20]
 800fc2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fc2c:	e748      	b.n	800fac0 <_dtoa_r+0x758>
 800fc2e:	9a08      	ldr	r2, [sp, #32]
 800fc30:	e770      	b.n	800fb14 <_dtoa_r+0x7ac>
 800fc32:	9b07      	ldr	r3, [sp, #28]
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	dc19      	bgt.n	800fc6c <_dtoa_r+0x904>
 800fc38:	9b02      	ldr	r3, [sp, #8]
 800fc3a:	b9bb      	cbnz	r3, 800fc6c <_dtoa_r+0x904>
 800fc3c:	9b03      	ldr	r3, [sp, #12]
 800fc3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc42:	b99b      	cbnz	r3, 800fc6c <_dtoa_r+0x904>
 800fc44:	9b03      	ldr	r3, [sp, #12]
 800fc46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc4a:	0d1b      	lsrs	r3, r3, #20
 800fc4c:	051b      	lsls	r3, r3, #20
 800fc4e:	b183      	cbz	r3, 800fc72 <_dtoa_r+0x90a>
 800fc50:	9b05      	ldr	r3, [sp, #20]
 800fc52:	3301      	adds	r3, #1
 800fc54:	9305      	str	r3, [sp, #20]
 800fc56:	9b06      	ldr	r3, [sp, #24]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	9306      	str	r3, [sp, #24]
 800fc5c:	f04f 0801 	mov.w	r8, #1
 800fc60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f47f af6f 	bne.w	800fb46 <_dtoa_r+0x7de>
 800fc68:	2001      	movs	r0, #1
 800fc6a:	e774      	b.n	800fb56 <_dtoa_r+0x7ee>
 800fc6c:	f04f 0800 	mov.w	r8, #0
 800fc70:	e7f6      	b.n	800fc60 <_dtoa_r+0x8f8>
 800fc72:	4698      	mov	r8, r3
 800fc74:	e7f4      	b.n	800fc60 <_dtoa_r+0x8f8>
 800fc76:	d082      	beq.n	800fb7e <_dtoa_r+0x816>
 800fc78:	9a05      	ldr	r2, [sp, #20]
 800fc7a:	331c      	adds	r3, #28
 800fc7c:	441a      	add	r2, r3
 800fc7e:	9205      	str	r2, [sp, #20]
 800fc80:	9a06      	ldr	r2, [sp, #24]
 800fc82:	441a      	add	r2, r3
 800fc84:	441d      	add	r5, r3
 800fc86:	9206      	str	r2, [sp, #24]
 800fc88:	e779      	b.n	800fb7e <_dtoa_r+0x816>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	e7f4      	b.n	800fc78 <_dtoa_r+0x910>
 800fc8e:	9b04      	ldr	r3, [sp, #16]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	dc37      	bgt.n	800fd04 <_dtoa_r+0x99c>
 800fc94:	9b07      	ldr	r3, [sp, #28]
 800fc96:	2b02      	cmp	r3, #2
 800fc98:	dd34      	ble.n	800fd04 <_dtoa_r+0x99c>
 800fc9a:	9b04      	ldr	r3, [sp, #16]
 800fc9c:	9301      	str	r3, [sp, #4]
 800fc9e:	9b01      	ldr	r3, [sp, #4]
 800fca0:	b963      	cbnz	r3, 800fcbc <_dtoa_r+0x954>
 800fca2:	4631      	mov	r1, r6
 800fca4:	2205      	movs	r2, #5
 800fca6:	4620      	mov	r0, r4
 800fca8:	f000 fe1c 	bl	80108e4 <__multadd>
 800fcac:	4601      	mov	r1, r0
 800fcae:	4606      	mov	r6, r0
 800fcb0:	4650      	mov	r0, sl
 800fcb2:	f001 f87b 	bl	8010dac <__mcmp>
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	f73f adbb 	bgt.w	800f832 <_dtoa_r+0x4ca>
 800fcbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcbe:	9d00      	ldr	r5, [sp, #0]
 800fcc0:	ea6f 0b03 	mvn.w	fp, r3
 800fcc4:	f04f 0800 	mov.w	r8, #0
 800fcc8:	4631      	mov	r1, r6
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 fde8 	bl	80108a0 <_Bfree>
 800fcd0:	2f00      	cmp	r7, #0
 800fcd2:	f43f aeab 	beq.w	800fa2c <_dtoa_r+0x6c4>
 800fcd6:	f1b8 0f00 	cmp.w	r8, #0
 800fcda:	d005      	beq.n	800fce8 <_dtoa_r+0x980>
 800fcdc:	45b8      	cmp	r8, r7
 800fcde:	d003      	beq.n	800fce8 <_dtoa_r+0x980>
 800fce0:	4641      	mov	r1, r8
 800fce2:	4620      	mov	r0, r4
 800fce4:	f000 fddc 	bl	80108a0 <_Bfree>
 800fce8:	4639      	mov	r1, r7
 800fcea:	4620      	mov	r0, r4
 800fcec:	f000 fdd8 	bl	80108a0 <_Bfree>
 800fcf0:	e69c      	b.n	800fa2c <_dtoa_r+0x6c4>
 800fcf2:	2600      	movs	r6, #0
 800fcf4:	4637      	mov	r7, r6
 800fcf6:	e7e1      	b.n	800fcbc <_dtoa_r+0x954>
 800fcf8:	46bb      	mov	fp, r7
 800fcfa:	4637      	mov	r7, r6
 800fcfc:	e599      	b.n	800f832 <_dtoa_r+0x4ca>
 800fcfe:	bf00      	nop
 800fd00:	40240000 	.word	0x40240000
 800fd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f000 80c8 	beq.w	800fe9c <_dtoa_r+0xb34>
 800fd0c:	9b04      	ldr	r3, [sp, #16]
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	dd05      	ble.n	800fd20 <_dtoa_r+0x9b8>
 800fd14:	4639      	mov	r1, r7
 800fd16:	462a      	mov	r2, r5
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f000 ffdb 	bl	8010cd4 <__lshift>
 800fd1e:	4607      	mov	r7, r0
 800fd20:	f1b8 0f00 	cmp.w	r8, #0
 800fd24:	d05b      	beq.n	800fdde <_dtoa_r+0xa76>
 800fd26:	6879      	ldr	r1, [r7, #4]
 800fd28:	4620      	mov	r0, r4
 800fd2a:	f000 fd79 	bl	8010820 <_Balloc>
 800fd2e:	4605      	mov	r5, r0
 800fd30:	b928      	cbnz	r0, 800fd3e <_dtoa_r+0x9d6>
 800fd32:	4b83      	ldr	r3, [pc, #524]	; (800ff40 <_dtoa_r+0xbd8>)
 800fd34:	4602      	mov	r2, r0
 800fd36:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fd3a:	f7ff bb2e 	b.w	800f39a <_dtoa_r+0x32>
 800fd3e:	693a      	ldr	r2, [r7, #16]
 800fd40:	3202      	adds	r2, #2
 800fd42:	0092      	lsls	r2, r2, #2
 800fd44:	f107 010c 	add.w	r1, r7, #12
 800fd48:	300c      	adds	r0, #12
 800fd4a:	f7ff fa67 	bl	800f21c <memcpy>
 800fd4e:	2201      	movs	r2, #1
 800fd50:	4629      	mov	r1, r5
 800fd52:	4620      	mov	r0, r4
 800fd54:	f000 ffbe 	bl	8010cd4 <__lshift>
 800fd58:	9b00      	ldr	r3, [sp, #0]
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	9304      	str	r3, [sp, #16]
 800fd5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd62:	4413      	add	r3, r2
 800fd64:	9308      	str	r3, [sp, #32]
 800fd66:	9b02      	ldr	r3, [sp, #8]
 800fd68:	f003 0301 	and.w	r3, r3, #1
 800fd6c:	46b8      	mov	r8, r7
 800fd6e:	9306      	str	r3, [sp, #24]
 800fd70:	4607      	mov	r7, r0
 800fd72:	9b04      	ldr	r3, [sp, #16]
 800fd74:	4631      	mov	r1, r6
 800fd76:	3b01      	subs	r3, #1
 800fd78:	4650      	mov	r0, sl
 800fd7a:	9301      	str	r3, [sp, #4]
 800fd7c:	f7ff fa6a 	bl	800f254 <quorem>
 800fd80:	4641      	mov	r1, r8
 800fd82:	9002      	str	r0, [sp, #8]
 800fd84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fd88:	4650      	mov	r0, sl
 800fd8a:	f001 f80f 	bl	8010dac <__mcmp>
 800fd8e:	463a      	mov	r2, r7
 800fd90:	9005      	str	r0, [sp, #20]
 800fd92:	4631      	mov	r1, r6
 800fd94:	4620      	mov	r0, r4
 800fd96:	f001 f825 	bl	8010de4 <__mdiff>
 800fd9a:	68c2      	ldr	r2, [r0, #12]
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	bb02      	cbnz	r2, 800fde2 <_dtoa_r+0xa7a>
 800fda0:	4601      	mov	r1, r0
 800fda2:	4650      	mov	r0, sl
 800fda4:	f001 f802 	bl	8010dac <__mcmp>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	4629      	mov	r1, r5
 800fdac:	4620      	mov	r0, r4
 800fdae:	9209      	str	r2, [sp, #36]	; 0x24
 800fdb0:	f000 fd76 	bl	80108a0 <_Bfree>
 800fdb4:	9b07      	ldr	r3, [sp, #28]
 800fdb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdb8:	9d04      	ldr	r5, [sp, #16]
 800fdba:	ea43 0102 	orr.w	r1, r3, r2
 800fdbe:	9b06      	ldr	r3, [sp, #24]
 800fdc0:	4319      	orrs	r1, r3
 800fdc2:	d110      	bne.n	800fde6 <_dtoa_r+0xa7e>
 800fdc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fdc8:	d029      	beq.n	800fe1e <_dtoa_r+0xab6>
 800fdca:	9b05      	ldr	r3, [sp, #20]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	dd02      	ble.n	800fdd6 <_dtoa_r+0xa6e>
 800fdd0:	9b02      	ldr	r3, [sp, #8]
 800fdd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fdd6:	9b01      	ldr	r3, [sp, #4]
 800fdd8:	f883 9000 	strb.w	r9, [r3]
 800fddc:	e774      	b.n	800fcc8 <_dtoa_r+0x960>
 800fdde:	4638      	mov	r0, r7
 800fde0:	e7ba      	b.n	800fd58 <_dtoa_r+0x9f0>
 800fde2:	2201      	movs	r2, #1
 800fde4:	e7e1      	b.n	800fdaa <_dtoa_r+0xa42>
 800fde6:	9b05      	ldr	r3, [sp, #20]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	db04      	blt.n	800fdf6 <_dtoa_r+0xa8e>
 800fdec:	9907      	ldr	r1, [sp, #28]
 800fdee:	430b      	orrs	r3, r1
 800fdf0:	9906      	ldr	r1, [sp, #24]
 800fdf2:	430b      	orrs	r3, r1
 800fdf4:	d120      	bne.n	800fe38 <_dtoa_r+0xad0>
 800fdf6:	2a00      	cmp	r2, #0
 800fdf8:	dded      	ble.n	800fdd6 <_dtoa_r+0xa6e>
 800fdfa:	4651      	mov	r1, sl
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f000 ff68 	bl	8010cd4 <__lshift>
 800fe04:	4631      	mov	r1, r6
 800fe06:	4682      	mov	sl, r0
 800fe08:	f000 ffd0 	bl	8010dac <__mcmp>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	dc03      	bgt.n	800fe18 <_dtoa_r+0xab0>
 800fe10:	d1e1      	bne.n	800fdd6 <_dtoa_r+0xa6e>
 800fe12:	f019 0f01 	tst.w	r9, #1
 800fe16:	d0de      	beq.n	800fdd6 <_dtoa_r+0xa6e>
 800fe18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fe1c:	d1d8      	bne.n	800fdd0 <_dtoa_r+0xa68>
 800fe1e:	9a01      	ldr	r2, [sp, #4]
 800fe20:	2339      	movs	r3, #57	; 0x39
 800fe22:	7013      	strb	r3, [r2, #0]
 800fe24:	462b      	mov	r3, r5
 800fe26:	461d      	mov	r5, r3
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fe2e:	2a39      	cmp	r2, #57	; 0x39
 800fe30:	d06c      	beq.n	800ff0c <_dtoa_r+0xba4>
 800fe32:	3201      	adds	r2, #1
 800fe34:	701a      	strb	r2, [r3, #0]
 800fe36:	e747      	b.n	800fcc8 <_dtoa_r+0x960>
 800fe38:	2a00      	cmp	r2, #0
 800fe3a:	dd07      	ble.n	800fe4c <_dtoa_r+0xae4>
 800fe3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fe40:	d0ed      	beq.n	800fe1e <_dtoa_r+0xab6>
 800fe42:	9a01      	ldr	r2, [sp, #4]
 800fe44:	f109 0301 	add.w	r3, r9, #1
 800fe48:	7013      	strb	r3, [r2, #0]
 800fe4a:	e73d      	b.n	800fcc8 <_dtoa_r+0x960>
 800fe4c:	9b04      	ldr	r3, [sp, #16]
 800fe4e:	9a08      	ldr	r2, [sp, #32]
 800fe50:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d043      	beq.n	800fee0 <_dtoa_r+0xb78>
 800fe58:	4651      	mov	r1, sl
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	220a      	movs	r2, #10
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f000 fd40 	bl	80108e4 <__multadd>
 800fe64:	45b8      	cmp	r8, r7
 800fe66:	4682      	mov	sl, r0
 800fe68:	f04f 0300 	mov.w	r3, #0
 800fe6c:	f04f 020a 	mov.w	r2, #10
 800fe70:	4641      	mov	r1, r8
 800fe72:	4620      	mov	r0, r4
 800fe74:	d107      	bne.n	800fe86 <_dtoa_r+0xb1e>
 800fe76:	f000 fd35 	bl	80108e4 <__multadd>
 800fe7a:	4680      	mov	r8, r0
 800fe7c:	4607      	mov	r7, r0
 800fe7e:	9b04      	ldr	r3, [sp, #16]
 800fe80:	3301      	adds	r3, #1
 800fe82:	9304      	str	r3, [sp, #16]
 800fe84:	e775      	b.n	800fd72 <_dtoa_r+0xa0a>
 800fe86:	f000 fd2d 	bl	80108e4 <__multadd>
 800fe8a:	4639      	mov	r1, r7
 800fe8c:	4680      	mov	r8, r0
 800fe8e:	2300      	movs	r3, #0
 800fe90:	220a      	movs	r2, #10
 800fe92:	4620      	mov	r0, r4
 800fe94:	f000 fd26 	bl	80108e4 <__multadd>
 800fe98:	4607      	mov	r7, r0
 800fe9a:	e7f0      	b.n	800fe7e <_dtoa_r+0xb16>
 800fe9c:	9b04      	ldr	r3, [sp, #16]
 800fe9e:	9301      	str	r3, [sp, #4]
 800fea0:	9d00      	ldr	r5, [sp, #0]
 800fea2:	4631      	mov	r1, r6
 800fea4:	4650      	mov	r0, sl
 800fea6:	f7ff f9d5 	bl	800f254 <quorem>
 800feaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800feae:	9b00      	ldr	r3, [sp, #0]
 800feb0:	f805 9b01 	strb.w	r9, [r5], #1
 800feb4:	1aea      	subs	r2, r5, r3
 800feb6:	9b01      	ldr	r3, [sp, #4]
 800feb8:	4293      	cmp	r3, r2
 800feba:	dd07      	ble.n	800fecc <_dtoa_r+0xb64>
 800febc:	4651      	mov	r1, sl
 800febe:	2300      	movs	r3, #0
 800fec0:	220a      	movs	r2, #10
 800fec2:	4620      	mov	r0, r4
 800fec4:	f000 fd0e 	bl	80108e4 <__multadd>
 800fec8:	4682      	mov	sl, r0
 800feca:	e7ea      	b.n	800fea2 <_dtoa_r+0xb3a>
 800fecc:	9b01      	ldr	r3, [sp, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	bfc8      	it	gt
 800fed2:	461d      	movgt	r5, r3
 800fed4:	9b00      	ldr	r3, [sp, #0]
 800fed6:	bfd8      	it	le
 800fed8:	2501      	movle	r5, #1
 800feda:	441d      	add	r5, r3
 800fedc:	f04f 0800 	mov.w	r8, #0
 800fee0:	4651      	mov	r1, sl
 800fee2:	2201      	movs	r2, #1
 800fee4:	4620      	mov	r0, r4
 800fee6:	f000 fef5 	bl	8010cd4 <__lshift>
 800feea:	4631      	mov	r1, r6
 800feec:	4682      	mov	sl, r0
 800feee:	f000 ff5d 	bl	8010dac <__mcmp>
 800fef2:	2800      	cmp	r0, #0
 800fef4:	dc96      	bgt.n	800fe24 <_dtoa_r+0xabc>
 800fef6:	d102      	bne.n	800fefe <_dtoa_r+0xb96>
 800fef8:	f019 0f01 	tst.w	r9, #1
 800fefc:	d192      	bne.n	800fe24 <_dtoa_r+0xabc>
 800fefe:	462b      	mov	r3, r5
 800ff00:	461d      	mov	r5, r3
 800ff02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff06:	2a30      	cmp	r2, #48	; 0x30
 800ff08:	d0fa      	beq.n	800ff00 <_dtoa_r+0xb98>
 800ff0a:	e6dd      	b.n	800fcc8 <_dtoa_r+0x960>
 800ff0c:	9a00      	ldr	r2, [sp, #0]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d189      	bne.n	800fe26 <_dtoa_r+0xabe>
 800ff12:	f10b 0b01 	add.w	fp, fp, #1
 800ff16:	2331      	movs	r3, #49	; 0x31
 800ff18:	e796      	b.n	800fe48 <_dtoa_r+0xae0>
 800ff1a:	4b0a      	ldr	r3, [pc, #40]	; (800ff44 <_dtoa_r+0xbdc>)
 800ff1c:	f7ff ba99 	b.w	800f452 <_dtoa_r+0xea>
 800ff20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f47f aa6d 	bne.w	800f402 <_dtoa_r+0x9a>
 800ff28:	4b07      	ldr	r3, [pc, #28]	; (800ff48 <_dtoa_r+0xbe0>)
 800ff2a:	f7ff ba92 	b.w	800f452 <_dtoa_r+0xea>
 800ff2e:	9b01      	ldr	r3, [sp, #4]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	dcb5      	bgt.n	800fea0 <_dtoa_r+0xb38>
 800ff34:	9b07      	ldr	r3, [sp, #28]
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	f73f aeb1 	bgt.w	800fc9e <_dtoa_r+0x936>
 800ff3c:	e7b0      	b.n	800fea0 <_dtoa_r+0xb38>
 800ff3e:	bf00      	nop
 800ff40:	08012561 	.word	0x08012561
 800ff44:	080124b9 	.word	0x080124b9
 800ff48:	080124e5 	.word	0x080124e5

0800ff4c <_free_r>:
 800ff4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff4e:	2900      	cmp	r1, #0
 800ff50:	d044      	beq.n	800ffdc <_free_r+0x90>
 800ff52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff56:	9001      	str	r0, [sp, #4]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ff5e:	bfb8      	it	lt
 800ff60:	18e4      	addlt	r4, r4, r3
 800ff62:	f000 fc51 	bl	8010808 <__malloc_lock>
 800ff66:	4a1e      	ldr	r2, [pc, #120]	; (800ffe0 <_free_r+0x94>)
 800ff68:	9801      	ldr	r0, [sp, #4]
 800ff6a:	6813      	ldr	r3, [r2, #0]
 800ff6c:	b933      	cbnz	r3, 800ff7c <_free_r+0x30>
 800ff6e:	6063      	str	r3, [r4, #4]
 800ff70:	6014      	str	r4, [r2, #0]
 800ff72:	b003      	add	sp, #12
 800ff74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff78:	f000 bc4c 	b.w	8010814 <__malloc_unlock>
 800ff7c:	42a3      	cmp	r3, r4
 800ff7e:	d908      	bls.n	800ff92 <_free_r+0x46>
 800ff80:	6825      	ldr	r5, [r4, #0]
 800ff82:	1961      	adds	r1, r4, r5
 800ff84:	428b      	cmp	r3, r1
 800ff86:	bf01      	itttt	eq
 800ff88:	6819      	ldreq	r1, [r3, #0]
 800ff8a:	685b      	ldreq	r3, [r3, #4]
 800ff8c:	1949      	addeq	r1, r1, r5
 800ff8e:	6021      	streq	r1, [r4, #0]
 800ff90:	e7ed      	b.n	800ff6e <_free_r+0x22>
 800ff92:	461a      	mov	r2, r3
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	b10b      	cbz	r3, 800ff9c <_free_r+0x50>
 800ff98:	42a3      	cmp	r3, r4
 800ff9a:	d9fa      	bls.n	800ff92 <_free_r+0x46>
 800ff9c:	6811      	ldr	r1, [r2, #0]
 800ff9e:	1855      	adds	r5, r2, r1
 800ffa0:	42a5      	cmp	r5, r4
 800ffa2:	d10b      	bne.n	800ffbc <_free_r+0x70>
 800ffa4:	6824      	ldr	r4, [r4, #0]
 800ffa6:	4421      	add	r1, r4
 800ffa8:	1854      	adds	r4, r2, r1
 800ffaa:	42a3      	cmp	r3, r4
 800ffac:	6011      	str	r1, [r2, #0]
 800ffae:	d1e0      	bne.n	800ff72 <_free_r+0x26>
 800ffb0:	681c      	ldr	r4, [r3, #0]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	6053      	str	r3, [r2, #4]
 800ffb6:	440c      	add	r4, r1
 800ffb8:	6014      	str	r4, [r2, #0]
 800ffba:	e7da      	b.n	800ff72 <_free_r+0x26>
 800ffbc:	d902      	bls.n	800ffc4 <_free_r+0x78>
 800ffbe:	230c      	movs	r3, #12
 800ffc0:	6003      	str	r3, [r0, #0]
 800ffc2:	e7d6      	b.n	800ff72 <_free_r+0x26>
 800ffc4:	6825      	ldr	r5, [r4, #0]
 800ffc6:	1961      	adds	r1, r4, r5
 800ffc8:	428b      	cmp	r3, r1
 800ffca:	bf04      	itt	eq
 800ffcc:	6819      	ldreq	r1, [r3, #0]
 800ffce:	685b      	ldreq	r3, [r3, #4]
 800ffd0:	6063      	str	r3, [r4, #4]
 800ffd2:	bf04      	itt	eq
 800ffd4:	1949      	addeq	r1, r1, r5
 800ffd6:	6021      	streq	r1, [r4, #0]
 800ffd8:	6054      	str	r4, [r2, #4]
 800ffda:	e7ca      	b.n	800ff72 <_free_r+0x26>
 800ffdc:	b003      	add	sp, #12
 800ffde:	bd30      	pop	{r4, r5, pc}
 800ffe0:	20000a40 	.word	0x20000a40

0800ffe4 <rshift>:
 800ffe4:	6903      	ldr	r3, [r0, #16]
 800ffe6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ffea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fff2:	f100 0414 	add.w	r4, r0, #20
 800fff6:	dd45      	ble.n	8010084 <rshift+0xa0>
 800fff8:	f011 011f 	ands.w	r1, r1, #31
 800fffc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010000:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010004:	d10c      	bne.n	8010020 <rshift+0x3c>
 8010006:	f100 0710 	add.w	r7, r0, #16
 801000a:	4629      	mov	r1, r5
 801000c:	42b1      	cmp	r1, r6
 801000e:	d334      	bcc.n	801007a <rshift+0x96>
 8010010:	1a9b      	subs	r3, r3, r2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	1eea      	subs	r2, r5, #3
 8010016:	4296      	cmp	r6, r2
 8010018:	bf38      	it	cc
 801001a:	2300      	movcc	r3, #0
 801001c:	4423      	add	r3, r4
 801001e:	e015      	b.n	801004c <rshift+0x68>
 8010020:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010024:	f1c1 0820 	rsb	r8, r1, #32
 8010028:	40cf      	lsrs	r7, r1
 801002a:	f105 0e04 	add.w	lr, r5, #4
 801002e:	46a1      	mov	r9, r4
 8010030:	4576      	cmp	r6, lr
 8010032:	46f4      	mov	ip, lr
 8010034:	d815      	bhi.n	8010062 <rshift+0x7e>
 8010036:	1a9a      	subs	r2, r3, r2
 8010038:	0092      	lsls	r2, r2, #2
 801003a:	3a04      	subs	r2, #4
 801003c:	3501      	adds	r5, #1
 801003e:	42ae      	cmp	r6, r5
 8010040:	bf38      	it	cc
 8010042:	2200      	movcc	r2, #0
 8010044:	18a3      	adds	r3, r4, r2
 8010046:	50a7      	str	r7, [r4, r2]
 8010048:	b107      	cbz	r7, 801004c <rshift+0x68>
 801004a:	3304      	adds	r3, #4
 801004c:	1b1a      	subs	r2, r3, r4
 801004e:	42a3      	cmp	r3, r4
 8010050:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010054:	bf08      	it	eq
 8010056:	2300      	moveq	r3, #0
 8010058:	6102      	str	r2, [r0, #16]
 801005a:	bf08      	it	eq
 801005c:	6143      	streq	r3, [r0, #20]
 801005e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010062:	f8dc c000 	ldr.w	ip, [ip]
 8010066:	fa0c fc08 	lsl.w	ip, ip, r8
 801006a:	ea4c 0707 	orr.w	r7, ip, r7
 801006e:	f849 7b04 	str.w	r7, [r9], #4
 8010072:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010076:	40cf      	lsrs	r7, r1
 8010078:	e7da      	b.n	8010030 <rshift+0x4c>
 801007a:	f851 cb04 	ldr.w	ip, [r1], #4
 801007e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010082:	e7c3      	b.n	801000c <rshift+0x28>
 8010084:	4623      	mov	r3, r4
 8010086:	e7e1      	b.n	801004c <rshift+0x68>

08010088 <__hexdig_fun>:
 8010088:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801008c:	2b09      	cmp	r3, #9
 801008e:	d802      	bhi.n	8010096 <__hexdig_fun+0xe>
 8010090:	3820      	subs	r0, #32
 8010092:	b2c0      	uxtb	r0, r0
 8010094:	4770      	bx	lr
 8010096:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801009a:	2b05      	cmp	r3, #5
 801009c:	d801      	bhi.n	80100a2 <__hexdig_fun+0x1a>
 801009e:	3847      	subs	r0, #71	; 0x47
 80100a0:	e7f7      	b.n	8010092 <__hexdig_fun+0xa>
 80100a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80100a6:	2b05      	cmp	r3, #5
 80100a8:	d801      	bhi.n	80100ae <__hexdig_fun+0x26>
 80100aa:	3827      	subs	r0, #39	; 0x27
 80100ac:	e7f1      	b.n	8010092 <__hexdig_fun+0xa>
 80100ae:	2000      	movs	r0, #0
 80100b0:	4770      	bx	lr
	...

080100b4 <__gethex>:
 80100b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b8:	4617      	mov	r7, r2
 80100ba:	680a      	ldr	r2, [r1, #0]
 80100bc:	b085      	sub	sp, #20
 80100be:	f102 0b02 	add.w	fp, r2, #2
 80100c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80100c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80100ca:	4681      	mov	r9, r0
 80100cc:	468a      	mov	sl, r1
 80100ce:	9302      	str	r3, [sp, #8]
 80100d0:	32fe      	adds	r2, #254	; 0xfe
 80100d2:	eb02 030b 	add.w	r3, r2, fp
 80100d6:	46d8      	mov	r8, fp
 80100d8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	2830      	cmp	r0, #48	; 0x30
 80100e0:	d0f7      	beq.n	80100d2 <__gethex+0x1e>
 80100e2:	f7ff ffd1 	bl	8010088 <__hexdig_fun>
 80100e6:	4604      	mov	r4, r0
 80100e8:	2800      	cmp	r0, #0
 80100ea:	d138      	bne.n	801015e <__gethex+0xaa>
 80100ec:	49a7      	ldr	r1, [pc, #668]	; (801038c <__gethex+0x2d8>)
 80100ee:	2201      	movs	r2, #1
 80100f0:	4640      	mov	r0, r8
 80100f2:	f7ff f80b 	bl	800f10c <strncmp>
 80100f6:	4606      	mov	r6, r0
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d169      	bne.n	80101d0 <__gethex+0x11c>
 80100fc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010100:	465d      	mov	r5, fp
 8010102:	f7ff ffc1 	bl	8010088 <__hexdig_fun>
 8010106:	2800      	cmp	r0, #0
 8010108:	d064      	beq.n	80101d4 <__gethex+0x120>
 801010a:	465a      	mov	r2, fp
 801010c:	7810      	ldrb	r0, [r2, #0]
 801010e:	2830      	cmp	r0, #48	; 0x30
 8010110:	4690      	mov	r8, r2
 8010112:	f102 0201 	add.w	r2, r2, #1
 8010116:	d0f9      	beq.n	801010c <__gethex+0x58>
 8010118:	f7ff ffb6 	bl	8010088 <__hexdig_fun>
 801011c:	2301      	movs	r3, #1
 801011e:	fab0 f480 	clz	r4, r0
 8010122:	0964      	lsrs	r4, r4, #5
 8010124:	465e      	mov	r6, fp
 8010126:	9301      	str	r3, [sp, #4]
 8010128:	4642      	mov	r2, r8
 801012a:	4615      	mov	r5, r2
 801012c:	3201      	adds	r2, #1
 801012e:	7828      	ldrb	r0, [r5, #0]
 8010130:	f7ff ffaa 	bl	8010088 <__hexdig_fun>
 8010134:	2800      	cmp	r0, #0
 8010136:	d1f8      	bne.n	801012a <__gethex+0x76>
 8010138:	4994      	ldr	r1, [pc, #592]	; (801038c <__gethex+0x2d8>)
 801013a:	2201      	movs	r2, #1
 801013c:	4628      	mov	r0, r5
 801013e:	f7fe ffe5 	bl	800f10c <strncmp>
 8010142:	b978      	cbnz	r0, 8010164 <__gethex+0xb0>
 8010144:	b946      	cbnz	r6, 8010158 <__gethex+0xa4>
 8010146:	1c6e      	adds	r6, r5, #1
 8010148:	4632      	mov	r2, r6
 801014a:	4615      	mov	r5, r2
 801014c:	3201      	adds	r2, #1
 801014e:	7828      	ldrb	r0, [r5, #0]
 8010150:	f7ff ff9a 	bl	8010088 <__hexdig_fun>
 8010154:	2800      	cmp	r0, #0
 8010156:	d1f8      	bne.n	801014a <__gethex+0x96>
 8010158:	1b73      	subs	r3, r6, r5
 801015a:	009e      	lsls	r6, r3, #2
 801015c:	e004      	b.n	8010168 <__gethex+0xb4>
 801015e:	2400      	movs	r4, #0
 8010160:	4626      	mov	r6, r4
 8010162:	e7e1      	b.n	8010128 <__gethex+0x74>
 8010164:	2e00      	cmp	r6, #0
 8010166:	d1f7      	bne.n	8010158 <__gethex+0xa4>
 8010168:	782b      	ldrb	r3, [r5, #0]
 801016a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801016e:	2b50      	cmp	r3, #80	; 0x50
 8010170:	d13d      	bne.n	80101ee <__gethex+0x13a>
 8010172:	786b      	ldrb	r3, [r5, #1]
 8010174:	2b2b      	cmp	r3, #43	; 0x2b
 8010176:	d02f      	beq.n	80101d8 <__gethex+0x124>
 8010178:	2b2d      	cmp	r3, #45	; 0x2d
 801017a:	d031      	beq.n	80101e0 <__gethex+0x12c>
 801017c:	1c69      	adds	r1, r5, #1
 801017e:	f04f 0b00 	mov.w	fp, #0
 8010182:	7808      	ldrb	r0, [r1, #0]
 8010184:	f7ff ff80 	bl	8010088 <__hexdig_fun>
 8010188:	1e42      	subs	r2, r0, #1
 801018a:	b2d2      	uxtb	r2, r2
 801018c:	2a18      	cmp	r2, #24
 801018e:	d82e      	bhi.n	80101ee <__gethex+0x13a>
 8010190:	f1a0 0210 	sub.w	r2, r0, #16
 8010194:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010198:	f7ff ff76 	bl	8010088 <__hexdig_fun>
 801019c:	f100 3cff 	add.w	ip, r0, #4294967295
 80101a0:	fa5f fc8c 	uxtb.w	ip, ip
 80101a4:	f1bc 0f18 	cmp.w	ip, #24
 80101a8:	d91d      	bls.n	80101e6 <__gethex+0x132>
 80101aa:	f1bb 0f00 	cmp.w	fp, #0
 80101ae:	d000      	beq.n	80101b2 <__gethex+0xfe>
 80101b0:	4252      	negs	r2, r2
 80101b2:	4416      	add	r6, r2
 80101b4:	f8ca 1000 	str.w	r1, [sl]
 80101b8:	b1dc      	cbz	r4, 80101f2 <__gethex+0x13e>
 80101ba:	9b01      	ldr	r3, [sp, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	bf14      	ite	ne
 80101c0:	f04f 0800 	movne.w	r8, #0
 80101c4:	f04f 0806 	moveq.w	r8, #6
 80101c8:	4640      	mov	r0, r8
 80101ca:	b005      	add	sp, #20
 80101cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d0:	4645      	mov	r5, r8
 80101d2:	4626      	mov	r6, r4
 80101d4:	2401      	movs	r4, #1
 80101d6:	e7c7      	b.n	8010168 <__gethex+0xb4>
 80101d8:	f04f 0b00 	mov.w	fp, #0
 80101dc:	1ca9      	adds	r1, r5, #2
 80101de:	e7d0      	b.n	8010182 <__gethex+0xce>
 80101e0:	f04f 0b01 	mov.w	fp, #1
 80101e4:	e7fa      	b.n	80101dc <__gethex+0x128>
 80101e6:	230a      	movs	r3, #10
 80101e8:	fb03 0002 	mla	r0, r3, r2, r0
 80101ec:	e7d0      	b.n	8010190 <__gethex+0xdc>
 80101ee:	4629      	mov	r1, r5
 80101f0:	e7e0      	b.n	80101b4 <__gethex+0x100>
 80101f2:	eba5 0308 	sub.w	r3, r5, r8
 80101f6:	3b01      	subs	r3, #1
 80101f8:	4621      	mov	r1, r4
 80101fa:	2b07      	cmp	r3, #7
 80101fc:	dc0a      	bgt.n	8010214 <__gethex+0x160>
 80101fe:	4648      	mov	r0, r9
 8010200:	f000 fb0e 	bl	8010820 <_Balloc>
 8010204:	4604      	mov	r4, r0
 8010206:	b940      	cbnz	r0, 801021a <__gethex+0x166>
 8010208:	4b61      	ldr	r3, [pc, #388]	; (8010390 <__gethex+0x2dc>)
 801020a:	4602      	mov	r2, r0
 801020c:	21e4      	movs	r1, #228	; 0xe4
 801020e:	4861      	ldr	r0, [pc, #388]	; (8010394 <__gethex+0x2e0>)
 8010210:	f001 fa46 	bl	80116a0 <__assert_func>
 8010214:	3101      	adds	r1, #1
 8010216:	105b      	asrs	r3, r3, #1
 8010218:	e7ef      	b.n	80101fa <__gethex+0x146>
 801021a:	f100 0a14 	add.w	sl, r0, #20
 801021e:	2300      	movs	r3, #0
 8010220:	495a      	ldr	r1, [pc, #360]	; (801038c <__gethex+0x2d8>)
 8010222:	f8cd a004 	str.w	sl, [sp, #4]
 8010226:	469b      	mov	fp, r3
 8010228:	45a8      	cmp	r8, r5
 801022a:	d342      	bcc.n	80102b2 <__gethex+0x1fe>
 801022c:	9801      	ldr	r0, [sp, #4]
 801022e:	f840 bb04 	str.w	fp, [r0], #4
 8010232:	eba0 000a 	sub.w	r0, r0, sl
 8010236:	1080      	asrs	r0, r0, #2
 8010238:	6120      	str	r0, [r4, #16]
 801023a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801023e:	4658      	mov	r0, fp
 8010240:	f000 fbe0 	bl	8010a04 <__hi0bits>
 8010244:	683d      	ldr	r5, [r7, #0]
 8010246:	eba8 0000 	sub.w	r0, r8, r0
 801024a:	42a8      	cmp	r0, r5
 801024c:	dd59      	ble.n	8010302 <__gethex+0x24e>
 801024e:	eba0 0805 	sub.w	r8, r0, r5
 8010252:	4641      	mov	r1, r8
 8010254:	4620      	mov	r0, r4
 8010256:	f000 ff6f 	bl	8011138 <__any_on>
 801025a:	4683      	mov	fp, r0
 801025c:	b1b8      	cbz	r0, 801028e <__gethex+0x1da>
 801025e:	f108 33ff 	add.w	r3, r8, #4294967295
 8010262:	1159      	asrs	r1, r3, #5
 8010264:	f003 021f 	and.w	r2, r3, #31
 8010268:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801026c:	f04f 0b01 	mov.w	fp, #1
 8010270:	fa0b f202 	lsl.w	r2, fp, r2
 8010274:	420a      	tst	r2, r1
 8010276:	d00a      	beq.n	801028e <__gethex+0x1da>
 8010278:	455b      	cmp	r3, fp
 801027a:	dd06      	ble.n	801028a <__gethex+0x1d6>
 801027c:	f1a8 0102 	sub.w	r1, r8, #2
 8010280:	4620      	mov	r0, r4
 8010282:	f000 ff59 	bl	8011138 <__any_on>
 8010286:	2800      	cmp	r0, #0
 8010288:	d138      	bne.n	80102fc <__gethex+0x248>
 801028a:	f04f 0b02 	mov.w	fp, #2
 801028e:	4641      	mov	r1, r8
 8010290:	4620      	mov	r0, r4
 8010292:	f7ff fea7 	bl	800ffe4 <rshift>
 8010296:	4446      	add	r6, r8
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	42b3      	cmp	r3, r6
 801029c:	da41      	bge.n	8010322 <__gethex+0x26e>
 801029e:	4621      	mov	r1, r4
 80102a0:	4648      	mov	r0, r9
 80102a2:	f000 fafd 	bl	80108a0 <_Bfree>
 80102a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80102a8:	2300      	movs	r3, #0
 80102aa:	6013      	str	r3, [r2, #0]
 80102ac:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80102b0:	e78a      	b.n	80101c8 <__gethex+0x114>
 80102b2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80102b6:	2a2e      	cmp	r2, #46	; 0x2e
 80102b8:	d014      	beq.n	80102e4 <__gethex+0x230>
 80102ba:	2b20      	cmp	r3, #32
 80102bc:	d106      	bne.n	80102cc <__gethex+0x218>
 80102be:	9b01      	ldr	r3, [sp, #4]
 80102c0:	f843 bb04 	str.w	fp, [r3], #4
 80102c4:	f04f 0b00 	mov.w	fp, #0
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	465b      	mov	r3, fp
 80102cc:	7828      	ldrb	r0, [r5, #0]
 80102ce:	9303      	str	r3, [sp, #12]
 80102d0:	f7ff feda 	bl	8010088 <__hexdig_fun>
 80102d4:	9b03      	ldr	r3, [sp, #12]
 80102d6:	f000 000f 	and.w	r0, r0, #15
 80102da:	4098      	lsls	r0, r3
 80102dc:	ea4b 0b00 	orr.w	fp, fp, r0
 80102e0:	3304      	adds	r3, #4
 80102e2:	e7a1      	b.n	8010228 <__gethex+0x174>
 80102e4:	45a8      	cmp	r8, r5
 80102e6:	d8e8      	bhi.n	80102ba <__gethex+0x206>
 80102e8:	2201      	movs	r2, #1
 80102ea:	4628      	mov	r0, r5
 80102ec:	9303      	str	r3, [sp, #12]
 80102ee:	f7fe ff0d 	bl	800f10c <strncmp>
 80102f2:	4926      	ldr	r1, [pc, #152]	; (801038c <__gethex+0x2d8>)
 80102f4:	9b03      	ldr	r3, [sp, #12]
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d1df      	bne.n	80102ba <__gethex+0x206>
 80102fa:	e795      	b.n	8010228 <__gethex+0x174>
 80102fc:	f04f 0b03 	mov.w	fp, #3
 8010300:	e7c5      	b.n	801028e <__gethex+0x1da>
 8010302:	da0b      	bge.n	801031c <__gethex+0x268>
 8010304:	eba5 0800 	sub.w	r8, r5, r0
 8010308:	4621      	mov	r1, r4
 801030a:	4642      	mov	r2, r8
 801030c:	4648      	mov	r0, r9
 801030e:	f000 fce1 	bl	8010cd4 <__lshift>
 8010312:	eba6 0608 	sub.w	r6, r6, r8
 8010316:	4604      	mov	r4, r0
 8010318:	f100 0a14 	add.w	sl, r0, #20
 801031c:	f04f 0b00 	mov.w	fp, #0
 8010320:	e7ba      	b.n	8010298 <__gethex+0x1e4>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	42b3      	cmp	r3, r6
 8010326:	dd73      	ble.n	8010410 <__gethex+0x35c>
 8010328:	1b9e      	subs	r6, r3, r6
 801032a:	42b5      	cmp	r5, r6
 801032c:	dc34      	bgt.n	8010398 <__gethex+0x2e4>
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b02      	cmp	r3, #2
 8010332:	d023      	beq.n	801037c <__gethex+0x2c8>
 8010334:	2b03      	cmp	r3, #3
 8010336:	d025      	beq.n	8010384 <__gethex+0x2d0>
 8010338:	2b01      	cmp	r3, #1
 801033a:	d115      	bne.n	8010368 <__gethex+0x2b4>
 801033c:	42b5      	cmp	r5, r6
 801033e:	d113      	bne.n	8010368 <__gethex+0x2b4>
 8010340:	2d01      	cmp	r5, #1
 8010342:	d10b      	bne.n	801035c <__gethex+0x2a8>
 8010344:	9a02      	ldr	r2, [sp, #8]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6013      	str	r3, [r2, #0]
 801034a:	2301      	movs	r3, #1
 801034c:	6123      	str	r3, [r4, #16]
 801034e:	f8ca 3000 	str.w	r3, [sl]
 8010352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010354:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010358:	601c      	str	r4, [r3, #0]
 801035a:	e735      	b.n	80101c8 <__gethex+0x114>
 801035c:	1e69      	subs	r1, r5, #1
 801035e:	4620      	mov	r0, r4
 8010360:	f000 feea 	bl	8011138 <__any_on>
 8010364:	2800      	cmp	r0, #0
 8010366:	d1ed      	bne.n	8010344 <__gethex+0x290>
 8010368:	4621      	mov	r1, r4
 801036a:	4648      	mov	r0, r9
 801036c:	f000 fa98 	bl	80108a0 <_Bfree>
 8010370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010372:	2300      	movs	r3, #0
 8010374:	6013      	str	r3, [r2, #0]
 8010376:	f04f 0850 	mov.w	r8, #80	; 0x50
 801037a:	e725      	b.n	80101c8 <__gethex+0x114>
 801037c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801037e:	2b00      	cmp	r3, #0
 8010380:	d1f2      	bne.n	8010368 <__gethex+0x2b4>
 8010382:	e7df      	b.n	8010344 <__gethex+0x290>
 8010384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010386:	2b00      	cmp	r3, #0
 8010388:	d1dc      	bne.n	8010344 <__gethex+0x290>
 801038a:	e7ed      	b.n	8010368 <__gethex+0x2b4>
 801038c:	08012354 	.word	0x08012354
 8010390:	08012561 	.word	0x08012561
 8010394:	08012572 	.word	0x08012572
 8010398:	f106 38ff 	add.w	r8, r6, #4294967295
 801039c:	f1bb 0f00 	cmp.w	fp, #0
 80103a0:	d133      	bne.n	801040a <__gethex+0x356>
 80103a2:	f1b8 0f00 	cmp.w	r8, #0
 80103a6:	d004      	beq.n	80103b2 <__gethex+0x2fe>
 80103a8:	4641      	mov	r1, r8
 80103aa:	4620      	mov	r0, r4
 80103ac:	f000 fec4 	bl	8011138 <__any_on>
 80103b0:	4683      	mov	fp, r0
 80103b2:	ea4f 1268 	mov.w	r2, r8, asr #5
 80103b6:	2301      	movs	r3, #1
 80103b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80103bc:	f008 081f 	and.w	r8, r8, #31
 80103c0:	fa03 f308 	lsl.w	r3, r3, r8
 80103c4:	4213      	tst	r3, r2
 80103c6:	4631      	mov	r1, r6
 80103c8:	4620      	mov	r0, r4
 80103ca:	bf18      	it	ne
 80103cc:	f04b 0b02 	orrne.w	fp, fp, #2
 80103d0:	1bad      	subs	r5, r5, r6
 80103d2:	f7ff fe07 	bl	800ffe4 <rshift>
 80103d6:	687e      	ldr	r6, [r7, #4]
 80103d8:	f04f 0802 	mov.w	r8, #2
 80103dc:	f1bb 0f00 	cmp.w	fp, #0
 80103e0:	d04a      	beq.n	8010478 <__gethex+0x3c4>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	d016      	beq.n	8010416 <__gethex+0x362>
 80103e8:	2b03      	cmp	r3, #3
 80103ea:	d018      	beq.n	801041e <__gethex+0x36a>
 80103ec:	2b01      	cmp	r3, #1
 80103ee:	d109      	bne.n	8010404 <__gethex+0x350>
 80103f0:	f01b 0f02 	tst.w	fp, #2
 80103f4:	d006      	beq.n	8010404 <__gethex+0x350>
 80103f6:	f8da 3000 	ldr.w	r3, [sl]
 80103fa:	ea4b 0b03 	orr.w	fp, fp, r3
 80103fe:	f01b 0f01 	tst.w	fp, #1
 8010402:	d10f      	bne.n	8010424 <__gethex+0x370>
 8010404:	f048 0810 	orr.w	r8, r8, #16
 8010408:	e036      	b.n	8010478 <__gethex+0x3c4>
 801040a:	f04f 0b01 	mov.w	fp, #1
 801040e:	e7d0      	b.n	80103b2 <__gethex+0x2fe>
 8010410:	f04f 0801 	mov.w	r8, #1
 8010414:	e7e2      	b.n	80103dc <__gethex+0x328>
 8010416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010418:	f1c3 0301 	rsb	r3, r3, #1
 801041c:	930f      	str	r3, [sp, #60]	; 0x3c
 801041e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010420:	2b00      	cmp	r3, #0
 8010422:	d0ef      	beq.n	8010404 <__gethex+0x350>
 8010424:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010428:	f104 0214 	add.w	r2, r4, #20
 801042c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010430:	9301      	str	r3, [sp, #4]
 8010432:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010436:	2300      	movs	r3, #0
 8010438:	4694      	mov	ip, r2
 801043a:	f852 1b04 	ldr.w	r1, [r2], #4
 801043e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8010442:	d01e      	beq.n	8010482 <__gethex+0x3ce>
 8010444:	3101      	adds	r1, #1
 8010446:	f8cc 1000 	str.w	r1, [ip]
 801044a:	f1b8 0f02 	cmp.w	r8, #2
 801044e:	f104 0214 	add.w	r2, r4, #20
 8010452:	d13d      	bne.n	80104d0 <__gethex+0x41c>
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	3b01      	subs	r3, #1
 8010458:	42ab      	cmp	r3, r5
 801045a:	d10b      	bne.n	8010474 <__gethex+0x3c0>
 801045c:	1169      	asrs	r1, r5, #5
 801045e:	2301      	movs	r3, #1
 8010460:	f005 051f 	and.w	r5, r5, #31
 8010464:	fa03 f505 	lsl.w	r5, r3, r5
 8010468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801046c:	421d      	tst	r5, r3
 801046e:	bf18      	it	ne
 8010470:	f04f 0801 	movne.w	r8, #1
 8010474:	f048 0820 	orr.w	r8, r8, #32
 8010478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801047a:	601c      	str	r4, [r3, #0]
 801047c:	9b02      	ldr	r3, [sp, #8]
 801047e:	601e      	str	r6, [r3, #0]
 8010480:	e6a2      	b.n	80101c8 <__gethex+0x114>
 8010482:	4290      	cmp	r0, r2
 8010484:	f842 3c04 	str.w	r3, [r2, #-4]
 8010488:	d8d6      	bhi.n	8010438 <__gethex+0x384>
 801048a:	68a2      	ldr	r2, [r4, #8]
 801048c:	4593      	cmp	fp, r2
 801048e:	db17      	blt.n	80104c0 <__gethex+0x40c>
 8010490:	6861      	ldr	r1, [r4, #4]
 8010492:	4648      	mov	r0, r9
 8010494:	3101      	adds	r1, #1
 8010496:	f000 f9c3 	bl	8010820 <_Balloc>
 801049a:	4682      	mov	sl, r0
 801049c:	b918      	cbnz	r0, 80104a6 <__gethex+0x3f2>
 801049e:	4b1b      	ldr	r3, [pc, #108]	; (801050c <__gethex+0x458>)
 80104a0:	4602      	mov	r2, r0
 80104a2:	2184      	movs	r1, #132	; 0x84
 80104a4:	e6b3      	b.n	801020e <__gethex+0x15a>
 80104a6:	6922      	ldr	r2, [r4, #16]
 80104a8:	3202      	adds	r2, #2
 80104aa:	f104 010c 	add.w	r1, r4, #12
 80104ae:	0092      	lsls	r2, r2, #2
 80104b0:	300c      	adds	r0, #12
 80104b2:	f7fe feb3 	bl	800f21c <memcpy>
 80104b6:	4621      	mov	r1, r4
 80104b8:	4648      	mov	r0, r9
 80104ba:	f000 f9f1 	bl	80108a0 <_Bfree>
 80104be:	4654      	mov	r4, sl
 80104c0:	6922      	ldr	r2, [r4, #16]
 80104c2:	1c51      	adds	r1, r2, #1
 80104c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80104c8:	6121      	str	r1, [r4, #16]
 80104ca:	2101      	movs	r1, #1
 80104cc:	6151      	str	r1, [r2, #20]
 80104ce:	e7bc      	b.n	801044a <__gethex+0x396>
 80104d0:	6921      	ldr	r1, [r4, #16]
 80104d2:	4559      	cmp	r1, fp
 80104d4:	dd0b      	ble.n	80104ee <__gethex+0x43a>
 80104d6:	2101      	movs	r1, #1
 80104d8:	4620      	mov	r0, r4
 80104da:	f7ff fd83 	bl	800ffe4 <rshift>
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	3601      	adds	r6, #1
 80104e2:	42b3      	cmp	r3, r6
 80104e4:	f6ff aedb 	blt.w	801029e <__gethex+0x1ea>
 80104e8:	f04f 0801 	mov.w	r8, #1
 80104ec:	e7c2      	b.n	8010474 <__gethex+0x3c0>
 80104ee:	f015 051f 	ands.w	r5, r5, #31
 80104f2:	d0f9      	beq.n	80104e8 <__gethex+0x434>
 80104f4:	9b01      	ldr	r3, [sp, #4]
 80104f6:	441a      	add	r2, r3
 80104f8:	f1c5 0520 	rsb	r5, r5, #32
 80104fc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010500:	f000 fa80 	bl	8010a04 <__hi0bits>
 8010504:	42a8      	cmp	r0, r5
 8010506:	dbe6      	blt.n	80104d6 <__gethex+0x422>
 8010508:	e7ee      	b.n	80104e8 <__gethex+0x434>
 801050a:	bf00      	nop
 801050c:	08012561 	.word	0x08012561

08010510 <L_shift>:
 8010510:	f1c2 0208 	rsb	r2, r2, #8
 8010514:	0092      	lsls	r2, r2, #2
 8010516:	b570      	push	{r4, r5, r6, lr}
 8010518:	f1c2 0620 	rsb	r6, r2, #32
 801051c:	6843      	ldr	r3, [r0, #4]
 801051e:	6804      	ldr	r4, [r0, #0]
 8010520:	fa03 f506 	lsl.w	r5, r3, r6
 8010524:	432c      	orrs	r4, r5
 8010526:	40d3      	lsrs	r3, r2
 8010528:	6004      	str	r4, [r0, #0]
 801052a:	f840 3f04 	str.w	r3, [r0, #4]!
 801052e:	4288      	cmp	r0, r1
 8010530:	d3f4      	bcc.n	801051c <L_shift+0xc>
 8010532:	bd70      	pop	{r4, r5, r6, pc}

08010534 <__match>:
 8010534:	b530      	push	{r4, r5, lr}
 8010536:	6803      	ldr	r3, [r0, #0]
 8010538:	3301      	adds	r3, #1
 801053a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801053e:	b914      	cbnz	r4, 8010546 <__match+0x12>
 8010540:	6003      	str	r3, [r0, #0]
 8010542:	2001      	movs	r0, #1
 8010544:	bd30      	pop	{r4, r5, pc}
 8010546:	f813 2b01 	ldrb.w	r2, [r3], #1
 801054a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801054e:	2d19      	cmp	r5, #25
 8010550:	bf98      	it	ls
 8010552:	3220      	addls	r2, #32
 8010554:	42a2      	cmp	r2, r4
 8010556:	d0f0      	beq.n	801053a <__match+0x6>
 8010558:	2000      	movs	r0, #0
 801055a:	e7f3      	b.n	8010544 <__match+0x10>

0801055c <__hexnan>:
 801055c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010560:	680b      	ldr	r3, [r1, #0]
 8010562:	6801      	ldr	r1, [r0, #0]
 8010564:	115e      	asrs	r6, r3, #5
 8010566:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801056a:	f013 031f 	ands.w	r3, r3, #31
 801056e:	b087      	sub	sp, #28
 8010570:	bf18      	it	ne
 8010572:	3604      	addne	r6, #4
 8010574:	2500      	movs	r5, #0
 8010576:	1f37      	subs	r7, r6, #4
 8010578:	4682      	mov	sl, r0
 801057a:	4690      	mov	r8, r2
 801057c:	9301      	str	r3, [sp, #4]
 801057e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010582:	46b9      	mov	r9, r7
 8010584:	463c      	mov	r4, r7
 8010586:	9502      	str	r5, [sp, #8]
 8010588:	46ab      	mov	fp, r5
 801058a:	784a      	ldrb	r2, [r1, #1]
 801058c:	1c4b      	adds	r3, r1, #1
 801058e:	9303      	str	r3, [sp, #12]
 8010590:	b342      	cbz	r2, 80105e4 <__hexnan+0x88>
 8010592:	4610      	mov	r0, r2
 8010594:	9105      	str	r1, [sp, #20]
 8010596:	9204      	str	r2, [sp, #16]
 8010598:	f7ff fd76 	bl	8010088 <__hexdig_fun>
 801059c:	2800      	cmp	r0, #0
 801059e:	d14f      	bne.n	8010640 <__hexnan+0xe4>
 80105a0:	9a04      	ldr	r2, [sp, #16]
 80105a2:	9905      	ldr	r1, [sp, #20]
 80105a4:	2a20      	cmp	r2, #32
 80105a6:	d818      	bhi.n	80105da <__hexnan+0x7e>
 80105a8:	9b02      	ldr	r3, [sp, #8]
 80105aa:	459b      	cmp	fp, r3
 80105ac:	dd13      	ble.n	80105d6 <__hexnan+0x7a>
 80105ae:	454c      	cmp	r4, r9
 80105b0:	d206      	bcs.n	80105c0 <__hexnan+0x64>
 80105b2:	2d07      	cmp	r5, #7
 80105b4:	dc04      	bgt.n	80105c0 <__hexnan+0x64>
 80105b6:	462a      	mov	r2, r5
 80105b8:	4649      	mov	r1, r9
 80105ba:	4620      	mov	r0, r4
 80105bc:	f7ff ffa8 	bl	8010510 <L_shift>
 80105c0:	4544      	cmp	r4, r8
 80105c2:	d950      	bls.n	8010666 <__hexnan+0x10a>
 80105c4:	2300      	movs	r3, #0
 80105c6:	f1a4 0904 	sub.w	r9, r4, #4
 80105ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80105ce:	f8cd b008 	str.w	fp, [sp, #8]
 80105d2:	464c      	mov	r4, r9
 80105d4:	461d      	mov	r5, r3
 80105d6:	9903      	ldr	r1, [sp, #12]
 80105d8:	e7d7      	b.n	801058a <__hexnan+0x2e>
 80105da:	2a29      	cmp	r2, #41	; 0x29
 80105dc:	d155      	bne.n	801068a <__hexnan+0x12e>
 80105de:	3102      	adds	r1, #2
 80105e0:	f8ca 1000 	str.w	r1, [sl]
 80105e4:	f1bb 0f00 	cmp.w	fp, #0
 80105e8:	d04f      	beq.n	801068a <__hexnan+0x12e>
 80105ea:	454c      	cmp	r4, r9
 80105ec:	d206      	bcs.n	80105fc <__hexnan+0xa0>
 80105ee:	2d07      	cmp	r5, #7
 80105f0:	dc04      	bgt.n	80105fc <__hexnan+0xa0>
 80105f2:	462a      	mov	r2, r5
 80105f4:	4649      	mov	r1, r9
 80105f6:	4620      	mov	r0, r4
 80105f8:	f7ff ff8a 	bl	8010510 <L_shift>
 80105fc:	4544      	cmp	r4, r8
 80105fe:	d934      	bls.n	801066a <__hexnan+0x10e>
 8010600:	f1a8 0204 	sub.w	r2, r8, #4
 8010604:	4623      	mov	r3, r4
 8010606:	f853 1b04 	ldr.w	r1, [r3], #4
 801060a:	f842 1f04 	str.w	r1, [r2, #4]!
 801060e:	429f      	cmp	r7, r3
 8010610:	d2f9      	bcs.n	8010606 <__hexnan+0xaa>
 8010612:	1b3b      	subs	r3, r7, r4
 8010614:	f023 0303 	bic.w	r3, r3, #3
 8010618:	3304      	adds	r3, #4
 801061a:	3e03      	subs	r6, #3
 801061c:	3401      	adds	r4, #1
 801061e:	42a6      	cmp	r6, r4
 8010620:	bf38      	it	cc
 8010622:	2304      	movcc	r3, #4
 8010624:	4443      	add	r3, r8
 8010626:	2200      	movs	r2, #0
 8010628:	f843 2b04 	str.w	r2, [r3], #4
 801062c:	429f      	cmp	r7, r3
 801062e:	d2fb      	bcs.n	8010628 <__hexnan+0xcc>
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	b91b      	cbnz	r3, 801063c <__hexnan+0xe0>
 8010634:	4547      	cmp	r7, r8
 8010636:	d126      	bne.n	8010686 <__hexnan+0x12a>
 8010638:	2301      	movs	r3, #1
 801063a:	603b      	str	r3, [r7, #0]
 801063c:	2005      	movs	r0, #5
 801063e:	e025      	b.n	801068c <__hexnan+0x130>
 8010640:	3501      	adds	r5, #1
 8010642:	2d08      	cmp	r5, #8
 8010644:	f10b 0b01 	add.w	fp, fp, #1
 8010648:	dd06      	ble.n	8010658 <__hexnan+0xfc>
 801064a:	4544      	cmp	r4, r8
 801064c:	d9c3      	bls.n	80105d6 <__hexnan+0x7a>
 801064e:	2300      	movs	r3, #0
 8010650:	f844 3c04 	str.w	r3, [r4, #-4]
 8010654:	2501      	movs	r5, #1
 8010656:	3c04      	subs	r4, #4
 8010658:	6822      	ldr	r2, [r4, #0]
 801065a:	f000 000f 	and.w	r0, r0, #15
 801065e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010662:	6020      	str	r0, [r4, #0]
 8010664:	e7b7      	b.n	80105d6 <__hexnan+0x7a>
 8010666:	2508      	movs	r5, #8
 8010668:	e7b5      	b.n	80105d6 <__hexnan+0x7a>
 801066a:	9b01      	ldr	r3, [sp, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d0df      	beq.n	8010630 <__hexnan+0xd4>
 8010670:	f1c3 0320 	rsb	r3, r3, #32
 8010674:	f04f 32ff 	mov.w	r2, #4294967295
 8010678:	40da      	lsrs	r2, r3
 801067a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801067e:	4013      	ands	r3, r2
 8010680:	f846 3c04 	str.w	r3, [r6, #-4]
 8010684:	e7d4      	b.n	8010630 <__hexnan+0xd4>
 8010686:	3f04      	subs	r7, #4
 8010688:	e7d2      	b.n	8010630 <__hexnan+0xd4>
 801068a:	2004      	movs	r0, #4
 801068c:	b007      	add	sp, #28
 801068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010694 <malloc>:
 8010694:	4b02      	ldr	r3, [pc, #8]	; (80106a0 <malloc+0xc>)
 8010696:	4601      	mov	r1, r0
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	f000 b823 	b.w	80106e4 <_malloc_r>
 801069e:	bf00      	nop
 80106a0:	20000208 	.word	0x20000208

080106a4 <sbrk_aligned>:
 80106a4:	b570      	push	{r4, r5, r6, lr}
 80106a6:	4e0e      	ldr	r6, [pc, #56]	; (80106e0 <sbrk_aligned+0x3c>)
 80106a8:	460c      	mov	r4, r1
 80106aa:	6831      	ldr	r1, [r6, #0]
 80106ac:	4605      	mov	r5, r0
 80106ae:	b911      	cbnz	r1, 80106b6 <sbrk_aligned+0x12>
 80106b0:	f000 ffe6 	bl	8011680 <_sbrk_r>
 80106b4:	6030      	str	r0, [r6, #0]
 80106b6:	4621      	mov	r1, r4
 80106b8:	4628      	mov	r0, r5
 80106ba:	f000 ffe1 	bl	8011680 <_sbrk_r>
 80106be:	1c43      	adds	r3, r0, #1
 80106c0:	d00a      	beq.n	80106d8 <sbrk_aligned+0x34>
 80106c2:	1cc4      	adds	r4, r0, #3
 80106c4:	f024 0403 	bic.w	r4, r4, #3
 80106c8:	42a0      	cmp	r0, r4
 80106ca:	d007      	beq.n	80106dc <sbrk_aligned+0x38>
 80106cc:	1a21      	subs	r1, r4, r0
 80106ce:	4628      	mov	r0, r5
 80106d0:	f000 ffd6 	bl	8011680 <_sbrk_r>
 80106d4:	3001      	adds	r0, #1
 80106d6:	d101      	bne.n	80106dc <sbrk_aligned+0x38>
 80106d8:	f04f 34ff 	mov.w	r4, #4294967295
 80106dc:	4620      	mov	r0, r4
 80106de:	bd70      	pop	{r4, r5, r6, pc}
 80106e0:	20000a44 	.word	0x20000a44

080106e4 <_malloc_r>:
 80106e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e8:	1ccd      	adds	r5, r1, #3
 80106ea:	f025 0503 	bic.w	r5, r5, #3
 80106ee:	3508      	adds	r5, #8
 80106f0:	2d0c      	cmp	r5, #12
 80106f2:	bf38      	it	cc
 80106f4:	250c      	movcc	r5, #12
 80106f6:	2d00      	cmp	r5, #0
 80106f8:	4607      	mov	r7, r0
 80106fa:	db01      	blt.n	8010700 <_malloc_r+0x1c>
 80106fc:	42a9      	cmp	r1, r5
 80106fe:	d905      	bls.n	801070c <_malloc_r+0x28>
 8010700:	230c      	movs	r3, #12
 8010702:	603b      	str	r3, [r7, #0]
 8010704:	2600      	movs	r6, #0
 8010706:	4630      	mov	r0, r6
 8010708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801070c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80107e0 <_malloc_r+0xfc>
 8010710:	f000 f87a 	bl	8010808 <__malloc_lock>
 8010714:	f8d8 3000 	ldr.w	r3, [r8]
 8010718:	461c      	mov	r4, r3
 801071a:	bb5c      	cbnz	r4, 8010774 <_malloc_r+0x90>
 801071c:	4629      	mov	r1, r5
 801071e:	4638      	mov	r0, r7
 8010720:	f7ff ffc0 	bl	80106a4 <sbrk_aligned>
 8010724:	1c43      	adds	r3, r0, #1
 8010726:	4604      	mov	r4, r0
 8010728:	d155      	bne.n	80107d6 <_malloc_r+0xf2>
 801072a:	f8d8 4000 	ldr.w	r4, [r8]
 801072e:	4626      	mov	r6, r4
 8010730:	2e00      	cmp	r6, #0
 8010732:	d145      	bne.n	80107c0 <_malloc_r+0xdc>
 8010734:	2c00      	cmp	r4, #0
 8010736:	d048      	beq.n	80107ca <_malloc_r+0xe6>
 8010738:	6823      	ldr	r3, [r4, #0]
 801073a:	4631      	mov	r1, r6
 801073c:	4638      	mov	r0, r7
 801073e:	eb04 0903 	add.w	r9, r4, r3
 8010742:	f000 ff9d 	bl	8011680 <_sbrk_r>
 8010746:	4581      	cmp	r9, r0
 8010748:	d13f      	bne.n	80107ca <_malloc_r+0xe6>
 801074a:	6821      	ldr	r1, [r4, #0]
 801074c:	1a6d      	subs	r5, r5, r1
 801074e:	4629      	mov	r1, r5
 8010750:	4638      	mov	r0, r7
 8010752:	f7ff ffa7 	bl	80106a4 <sbrk_aligned>
 8010756:	3001      	adds	r0, #1
 8010758:	d037      	beq.n	80107ca <_malloc_r+0xe6>
 801075a:	6823      	ldr	r3, [r4, #0]
 801075c:	442b      	add	r3, r5
 801075e:	6023      	str	r3, [r4, #0]
 8010760:	f8d8 3000 	ldr.w	r3, [r8]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d038      	beq.n	80107da <_malloc_r+0xf6>
 8010768:	685a      	ldr	r2, [r3, #4]
 801076a:	42a2      	cmp	r2, r4
 801076c:	d12b      	bne.n	80107c6 <_malloc_r+0xe2>
 801076e:	2200      	movs	r2, #0
 8010770:	605a      	str	r2, [r3, #4]
 8010772:	e00f      	b.n	8010794 <_malloc_r+0xb0>
 8010774:	6822      	ldr	r2, [r4, #0]
 8010776:	1b52      	subs	r2, r2, r5
 8010778:	d41f      	bmi.n	80107ba <_malloc_r+0xd6>
 801077a:	2a0b      	cmp	r2, #11
 801077c:	d917      	bls.n	80107ae <_malloc_r+0xca>
 801077e:	1961      	adds	r1, r4, r5
 8010780:	42a3      	cmp	r3, r4
 8010782:	6025      	str	r5, [r4, #0]
 8010784:	bf18      	it	ne
 8010786:	6059      	strne	r1, [r3, #4]
 8010788:	6863      	ldr	r3, [r4, #4]
 801078a:	bf08      	it	eq
 801078c:	f8c8 1000 	streq.w	r1, [r8]
 8010790:	5162      	str	r2, [r4, r5]
 8010792:	604b      	str	r3, [r1, #4]
 8010794:	4638      	mov	r0, r7
 8010796:	f104 060b 	add.w	r6, r4, #11
 801079a:	f000 f83b 	bl	8010814 <__malloc_unlock>
 801079e:	f026 0607 	bic.w	r6, r6, #7
 80107a2:	1d23      	adds	r3, r4, #4
 80107a4:	1af2      	subs	r2, r6, r3
 80107a6:	d0ae      	beq.n	8010706 <_malloc_r+0x22>
 80107a8:	1b9b      	subs	r3, r3, r6
 80107aa:	50a3      	str	r3, [r4, r2]
 80107ac:	e7ab      	b.n	8010706 <_malloc_r+0x22>
 80107ae:	42a3      	cmp	r3, r4
 80107b0:	6862      	ldr	r2, [r4, #4]
 80107b2:	d1dd      	bne.n	8010770 <_malloc_r+0x8c>
 80107b4:	f8c8 2000 	str.w	r2, [r8]
 80107b8:	e7ec      	b.n	8010794 <_malloc_r+0xb0>
 80107ba:	4623      	mov	r3, r4
 80107bc:	6864      	ldr	r4, [r4, #4]
 80107be:	e7ac      	b.n	801071a <_malloc_r+0x36>
 80107c0:	4634      	mov	r4, r6
 80107c2:	6876      	ldr	r6, [r6, #4]
 80107c4:	e7b4      	b.n	8010730 <_malloc_r+0x4c>
 80107c6:	4613      	mov	r3, r2
 80107c8:	e7cc      	b.n	8010764 <_malloc_r+0x80>
 80107ca:	230c      	movs	r3, #12
 80107cc:	603b      	str	r3, [r7, #0]
 80107ce:	4638      	mov	r0, r7
 80107d0:	f000 f820 	bl	8010814 <__malloc_unlock>
 80107d4:	e797      	b.n	8010706 <_malloc_r+0x22>
 80107d6:	6025      	str	r5, [r4, #0]
 80107d8:	e7dc      	b.n	8010794 <_malloc_r+0xb0>
 80107da:	605b      	str	r3, [r3, #4]
 80107dc:	deff      	udf	#255	; 0xff
 80107de:	bf00      	nop
 80107e0:	20000a40 	.word	0x20000a40

080107e4 <__ascii_mbtowc>:
 80107e4:	b082      	sub	sp, #8
 80107e6:	b901      	cbnz	r1, 80107ea <__ascii_mbtowc+0x6>
 80107e8:	a901      	add	r1, sp, #4
 80107ea:	b142      	cbz	r2, 80107fe <__ascii_mbtowc+0x1a>
 80107ec:	b14b      	cbz	r3, 8010802 <__ascii_mbtowc+0x1e>
 80107ee:	7813      	ldrb	r3, [r2, #0]
 80107f0:	600b      	str	r3, [r1, #0]
 80107f2:	7812      	ldrb	r2, [r2, #0]
 80107f4:	1e10      	subs	r0, r2, #0
 80107f6:	bf18      	it	ne
 80107f8:	2001      	movne	r0, #1
 80107fa:	b002      	add	sp, #8
 80107fc:	4770      	bx	lr
 80107fe:	4610      	mov	r0, r2
 8010800:	e7fb      	b.n	80107fa <__ascii_mbtowc+0x16>
 8010802:	f06f 0001 	mvn.w	r0, #1
 8010806:	e7f8      	b.n	80107fa <__ascii_mbtowc+0x16>

08010808 <__malloc_lock>:
 8010808:	4801      	ldr	r0, [pc, #4]	; (8010810 <__malloc_lock+0x8>)
 801080a:	f7fe bd05 	b.w	800f218 <__retarget_lock_acquire_recursive>
 801080e:	bf00      	nop
 8010810:	20000a3c 	.word	0x20000a3c

08010814 <__malloc_unlock>:
 8010814:	4801      	ldr	r0, [pc, #4]	; (801081c <__malloc_unlock+0x8>)
 8010816:	f7fe bd00 	b.w	800f21a <__retarget_lock_release_recursive>
 801081a:	bf00      	nop
 801081c:	20000a3c 	.word	0x20000a3c

08010820 <_Balloc>:
 8010820:	b570      	push	{r4, r5, r6, lr}
 8010822:	69c6      	ldr	r6, [r0, #28]
 8010824:	4604      	mov	r4, r0
 8010826:	460d      	mov	r5, r1
 8010828:	b976      	cbnz	r6, 8010848 <_Balloc+0x28>
 801082a:	2010      	movs	r0, #16
 801082c:	f7ff ff32 	bl	8010694 <malloc>
 8010830:	4602      	mov	r2, r0
 8010832:	61e0      	str	r0, [r4, #28]
 8010834:	b920      	cbnz	r0, 8010840 <_Balloc+0x20>
 8010836:	4b18      	ldr	r3, [pc, #96]	; (8010898 <_Balloc+0x78>)
 8010838:	4818      	ldr	r0, [pc, #96]	; (801089c <_Balloc+0x7c>)
 801083a:	216b      	movs	r1, #107	; 0x6b
 801083c:	f000 ff30 	bl	80116a0 <__assert_func>
 8010840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010844:	6006      	str	r6, [r0, #0]
 8010846:	60c6      	str	r6, [r0, #12]
 8010848:	69e6      	ldr	r6, [r4, #28]
 801084a:	68f3      	ldr	r3, [r6, #12]
 801084c:	b183      	cbz	r3, 8010870 <_Balloc+0x50>
 801084e:	69e3      	ldr	r3, [r4, #28]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010856:	b9b8      	cbnz	r0, 8010888 <_Balloc+0x68>
 8010858:	2101      	movs	r1, #1
 801085a:	fa01 f605 	lsl.w	r6, r1, r5
 801085e:	1d72      	adds	r2, r6, #5
 8010860:	0092      	lsls	r2, r2, #2
 8010862:	4620      	mov	r0, r4
 8010864:	f000 ff3a 	bl	80116dc <_calloc_r>
 8010868:	b160      	cbz	r0, 8010884 <_Balloc+0x64>
 801086a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801086e:	e00e      	b.n	801088e <_Balloc+0x6e>
 8010870:	2221      	movs	r2, #33	; 0x21
 8010872:	2104      	movs	r1, #4
 8010874:	4620      	mov	r0, r4
 8010876:	f000 ff31 	bl	80116dc <_calloc_r>
 801087a:	69e3      	ldr	r3, [r4, #28]
 801087c:	60f0      	str	r0, [r6, #12]
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1e4      	bne.n	801084e <_Balloc+0x2e>
 8010884:	2000      	movs	r0, #0
 8010886:	bd70      	pop	{r4, r5, r6, pc}
 8010888:	6802      	ldr	r2, [r0, #0]
 801088a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801088e:	2300      	movs	r3, #0
 8010890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010894:	e7f7      	b.n	8010886 <_Balloc+0x66>
 8010896:	bf00      	nop
 8010898:	080124f2 	.word	0x080124f2
 801089c:	080125d2 	.word	0x080125d2

080108a0 <_Bfree>:
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	69c6      	ldr	r6, [r0, #28]
 80108a4:	4605      	mov	r5, r0
 80108a6:	460c      	mov	r4, r1
 80108a8:	b976      	cbnz	r6, 80108c8 <_Bfree+0x28>
 80108aa:	2010      	movs	r0, #16
 80108ac:	f7ff fef2 	bl	8010694 <malloc>
 80108b0:	4602      	mov	r2, r0
 80108b2:	61e8      	str	r0, [r5, #28]
 80108b4:	b920      	cbnz	r0, 80108c0 <_Bfree+0x20>
 80108b6:	4b09      	ldr	r3, [pc, #36]	; (80108dc <_Bfree+0x3c>)
 80108b8:	4809      	ldr	r0, [pc, #36]	; (80108e0 <_Bfree+0x40>)
 80108ba:	218f      	movs	r1, #143	; 0x8f
 80108bc:	f000 fef0 	bl	80116a0 <__assert_func>
 80108c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80108c4:	6006      	str	r6, [r0, #0]
 80108c6:	60c6      	str	r6, [r0, #12]
 80108c8:	b13c      	cbz	r4, 80108da <_Bfree+0x3a>
 80108ca:	69eb      	ldr	r3, [r5, #28]
 80108cc:	6862      	ldr	r2, [r4, #4]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80108d4:	6021      	str	r1, [r4, #0]
 80108d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80108da:	bd70      	pop	{r4, r5, r6, pc}
 80108dc:	080124f2 	.word	0x080124f2
 80108e0:	080125d2 	.word	0x080125d2

080108e4 <__multadd>:
 80108e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e8:	690d      	ldr	r5, [r1, #16]
 80108ea:	4607      	mov	r7, r0
 80108ec:	460c      	mov	r4, r1
 80108ee:	461e      	mov	r6, r3
 80108f0:	f101 0c14 	add.w	ip, r1, #20
 80108f4:	2000      	movs	r0, #0
 80108f6:	f8dc 3000 	ldr.w	r3, [ip]
 80108fa:	b299      	uxth	r1, r3
 80108fc:	fb02 6101 	mla	r1, r2, r1, r6
 8010900:	0c1e      	lsrs	r6, r3, #16
 8010902:	0c0b      	lsrs	r3, r1, #16
 8010904:	fb02 3306 	mla	r3, r2, r6, r3
 8010908:	b289      	uxth	r1, r1
 801090a:	3001      	adds	r0, #1
 801090c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010910:	4285      	cmp	r5, r0
 8010912:	f84c 1b04 	str.w	r1, [ip], #4
 8010916:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801091a:	dcec      	bgt.n	80108f6 <__multadd+0x12>
 801091c:	b30e      	cbz	r6, 8010962 <__multadd+0x7e>
 801091e:	68a3      	ldr	r3, [r4, #8]
 8010920:	42ab      	cmp	r3, r5
 8010922:	dc19      	bgt.n	8010958 <__multadd+0x74>
 8010924:	6861      	ldr	r1, [r4, #4]
 8010926:	4638      	mov	r0, r7
 8010928:	3101      	adds	r1, #1
 801092a:	f7ff ff79 	bl	8010820 <_Balloc>
 801092e:	4680      	mov	r8, r0
 8010930:	b928      	cbnz	r0, 801093e <__multadd+0x5a>
 8010932:	4602      	mov	r2, r0
 8010934:	4b0c      	ldr	r3, [pc, #48]	; (8010968 <__multadd+0x84>)
 8010936:	480d      	ldr	r0, [pc, #52]	; (801096c <__multadd+0x88>)
 8010938:	21ba      	movs	r1, #186	; 0xba
 801093a:	f000 feb1 	bl	80116a0 <__assert_func>
 801093e:	6922      	ldr	r2, [r4, #16]
 8010940:	3202      	adds	r2, #2
 8010942:	f104 010c 	add.w	r1, r4, #12
 8010946:	0092      	lsls	r2, r2, #2
 8010948:	300c      	adds	r0, #12
 801094a:	f7fe fc67 	bl	800f21c <memcpy>
 801094e:	4621      	mov	r1, r4
 8010950:	4638      	mov	r0, r7
 8010952:	f7ff ffa5 	bl	80108a0 <_Bfree>
 8010956:	4644      	mov	r4, r8
 8010958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801095c:	3501      	adds	r5, #1
 801095e:	615e      	str	r6, [r3, #20]
 8010960:	6125      	str	r5, [r4, #16]
 8010962:	4620      	mov	r0, r4
 8010964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010968:	08012561 	.word	0x08012561
 801096c:	080125d2 	.word	0x080125d2

08010970 <__s2b>:
 8010970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010974:	460c      	mov	r4, r1
 8010976:	4615      	mov	r5, r2
 8010978:	461f      	mov	r7, r3
 801097a:	2209      	movs	r2, #9
 801097c:	3308      	adds	r3, #8
 801097e:	4606      	mov	r6, r0
 8010980:	fb93 f3f2 	sdiv	r3, r3, r2
 8010984:	2100      	movs	r1, #0
 8010986:	2201      	movs	r2, #1
 8010988:	429a      	cmp	r2, r3
 801098a:	db09      	blt.n	80109a0 <__s2b+0x30>
 801098c:	4630      	mov	r0, r6
 801098e:	f7ff ff47 	bl	8010820 <_Balloc>
 8010992:	b940      	cbnz	r0, 80109a6 <__s2b+0x36>
 8010994:	4602      	mov	r2, r0
 8010996:	4b19      	ldr	r3, [pc, #100]	; (80109fc <__s2b+0x8c>)
 8010998:	4819      	ldr	r0, [pc, #100]	; (8010a00 <__s2b+0x90>)
 801099a:	21d3      	movs	r1, #211	; 0xd3
 801099c:	f000 fe80 	bl	80116a0 <__assert_func>
 80109a0:	0052      	lsls	r2, r2, #1
 80109a2:	3101      	adds	r1, #1
 80109a4:	e7f0      	b.n	8010988 <__s2b+0x18>
 80109a6:	9b08      	ldr	r3, [sp, #32]
 80109a8:	6143      	str	r3, [r0, #20]
 80109aa:	2d09      	cmp	r5, #9
 80109ac:	f04f 0301 	mov.w	r3, #1
 80109b0:	6103      	str	r3, [r0, #16]
 80109b2:	dd16      	ble.n	80109e2 <__s2b+0x72>
 80109b4:	f104 0909 	add.w	r9, r4, #9
 80109b8:	46c8      	mov	r8, r9
 80109ba:	442c      	add	r4, r5
 80109bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80109c0:	4601      	mov	r1, r0
 80109c2:	3b30      	subs	r3, #48	; 0x30
 80109c4:	220a      	movs	r2, #10
 80109c6:	4630      	mov	r0, r6
 80109c8:	f7ff ff8c 	bl	80108e4 <__multadd>
 80109cc:	45a0      	cmp	r8, r4
 80109ce:	d1f5      	bne.n	80109bc <__s2b+0x4c>
 80109d0:	f1a5 0408 	sub.w	r4, r5, #8
 80109d4:	444c      	add	r4, r9
 80109d6:	1b2d      	subs	r5, r5, r4
 80109d8:	1963      	adds	r3, r4, r5
 80109da:	42bb      	cmp	r3, r7
 80109dc:	db04      	blt.n	80109e8 <__s2b+0x78>
 80109de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109e2:	340a      	adds	r4, #10
 80109e4:	2509      	movs	r5, #9
 80109e6:	e7f6      	b.n	80109d6 <__s2b+0x66>
 80109e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109ec:	4601      	mov	r1, r0
 80109ee:	3b30      	subs	r3, #48	; 0x30
 80109f0:	220a      	movs	r2, #10
 80109f2:	4630      	mov	r0, r6
 80109f4:	f7ff ff76 	bl	80108e4 <__multadd>
 80109f8:	e7ee      	b.n	80109d8 <__s2b+0x68>
 80109fa:	bf00      	nop
 80109fc:	08012561 	.word	0x08012561
 8010a00:	080125d2 	.word	0x080125d2

08010a04 <__hi0bits>:
 8010a04:	0c03      	lsrs	r3, r0, #16
 8010a06:	041b      	lsls	r3, r3, #16
 8010a08:	b9d3      	cbnz	r3, 8010a40 <__hi0bits+0x3c>
 8010a0a:	0400      	lsls	r0, r0, #16
 8010a0c:	2310      	movs	r3, #16
 8010a0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010a12:	bf04      	itt	eq
 8010a14:	0200      	lsleq	r0, r0, #8
 8010a16:	3308      	addeq	r3, #8
 8010a18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010a1c:	bf04      	itt	eq
 8010a1e:	0100      	lsleq	r0, r0, #4
 8010a20:	3304      	addeq	r3, #4
 8010a22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a26:	bf04      	itt	eq
 8010a28:	0080      	lsleq	r0, r0, #2
 8010a2a:	3302      	addeq	r3, #2
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	db05      	blt.n	8010a3c <__hi0bits+0x38>
 8010a30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010a34:	f103 0301 	add.w	r3, r3, #1
 8010a38:	bf08      	it	eq
 8010a3a:	2320      	moveq	r3, #32
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	4770      	bx	lr
 8010a40:	2300      	movs	r3, #0
 8010a42:	e7e4      	b.n	8010a0e <__hi0bits+0xa>

08010a44 <__lo0bits>:
 8010a44:	6803      	ldr	r3, [r0, #0]
 8010a46:	f013 0207 	ands.w	r2, r3, #7
 8010a4a:	d00c      	beq.n	8010a66 <__lo0bits+0x22>
 8010a4c:	07d9      	lsls	r1, r3, #31
 8010a4e:	d422      	bmi.n	8010a96 <__lo0bits+0x52>
 8010a50:	079a      	lsls	r2, r3, #30
 8010a52:	bf49      	itett	mi
 8010a54:	085b      	lsrmi	r3, r3, #1
 8010a56:	089b      	lsrpl	r3, r3, #2
 8010a58:	6003      	strmi	r3, [r0, #0]
 8010a5a:	2201      	movmi	r2, #1
 8010a5c:	bf5c      	itt	pl
 8010a5e:	6003      	strpl	r3, [r0, #0]
 8010a60:	2202      	movpl	r2, #2
 8010a62:	4610      	mov	r0, r2
 8010a64:	4770      	bx	lr
 8010a66:	b299      	uxth	r1, r3
 8010a68:	b909      	cbnz	r1, 8010a6e <__lo0bits+0x2a>
 8010a6a:	0c1b      	lsrs	r3, r3, #16
 8010a6c:	2210      	movs	r2, #16
 8010a6e:	b2d9      	uxtb	r1, r3
 8010a70:	b909      	cbnz	r1, 8010a76 <__lo0bits+0x32>
 8010a72:	3208      	adds	r2, #8
 8010a74:	0a1b      	lsrs	r3, r3, #8
 8010a76:	0719      	lsls	r1, r3, #28
 8010a78:	bf04      	itt	eq
 8010a7a:	091b      	lsreq	r3, r3, #4
 8010a7c:	3204      	addeq	r2, #4
 8010a7e:	0799      	lsls	r1, r3, #30
 8010a80:	bf04      	itt	eq
 8010a82:	089b      	lsreq	r3, r3, #2
 8010a84:	3202      	addeq	r2, #2
 8010a86:	07d9      	lsls	r1, r3, #31
 8010a88:	d403      	bmi.n	8010a92 <__lo0bits+0x4e>
 8010a8a:	085b      	lsrs	r3, r3, #1
 8010a8c:	f102 0201 	add.w	r2, r2, #1
 8010a90:	d003      	beq.n	8010a9a <__lo0bits+0x56>
 8010a92:	6003      	str	r3, [r0, #0]
 8010a94:	e7e5      	b.n	8010a62 <__lo0bits+0x1e>
 8010a96:	2200      	movs	r2, #0
 8010a98:	e7e3      	b.n	8010a62 <__lo0bits+0x1e>
 8010a9a:	2220      	movs	r2, #32
 8010a9c:	e7e1      	b.n	8010a62 <__lo0bits+0x1e>
	...

08010aa0 <__i2b>:
 8010aa0:	b510      	push	{r4, lr}
 8010aa2:	460c      	mov	r4, r1
 8010aa4:	2101      	movs	r1, #1
 8010aa6:	f7ff febb 	bl	8010820 <_Balloc>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	b928      	cbnz	r0, 8010aba <__i2b+0x1a>
 8010aae:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <__i2b+0x24>)
 8010ab0:	4805      	ldr	r0, [pc, #20]	; (8010ac8 <__i2b+0x28>)
 8010ab2:	f240 1145 	movw	r1, #325	; 0x145
 8010ab6:	f000 fdf3 	bl	80116a0 <__assert_func>
 8010aba:	2301      	movs	r3, #1
 8010abc:	6144      	str	r4, [r0, #20]
 8010abe:	6103      	str	r3, [r0, #16]
 8010ac0:	bd10      	pop	{r4, pc}
 8010ac2:	bf00      	nop
 8010ac4:	08012561 	.word	0x08012561
 8010ac8:	080125d2 	.word	0x080125d2

08010acc <__multiply>:
 8010acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad0:	4691      	mov	r9, r2
 8010ad2:	690a      	ldr	r2, [r1, #16]
 8010ad4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	bfb8      	it	lt
 8010adc:	460b      	movlt	r3, r1
 8010ade:	460c      	mov	r4, r1
 8010ae0:	bfbc      	itt	lt
 8010ae2:	464c      	movlt	r4, r9
 8010ae4:	4699      	movlt	r9, r3
 8010ae6:	6927      	ldr	r7, [r4, #16]
 8010ae8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010aec:	68a3      	ldr	r3, [r4, #8]
 8010aee:	6861      	ldr	r1, [r4, #4]
 8010af0:	eb07 060a 	add.w	r6, r7, sl
 8010af4:	42b3      	cmp	r3, r6
 8010af6:	b085      	sub	sp, #20
 8010af8:	bfb8      	it	lt
 8010afa:	3101      	addlt	r1, #1
 8010afc:	f7ff fe90 	bl	8010820 <_Balloc>
 8010b00:	b930      	cbnz	r0, 8010b10 <__multiply+0x44>
 8010b02:	4602      	mov	r2, r0
 8010b04:	4b44      	ldr	r3, [pc, #272]	; (8010c18 <__multiply+0x14c>)
 8010b06:	4845      	ldr	r0, [pc, #276]	; (8010c1c <__multiply+0x150>)
 8010b08:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010b0c:	f000 fdc8 	bl	80116a0 <__assert_func>
 8010b10:	f100 0514 	add.w	r5, r0, #20
 8010b14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b18:	462b      	mov	r3, r5
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	4543      	cmp	r3, r8
 8010b1e:	d321      	bcc.n	8010b64 <__multiply+0x98>
 8010b20:	f104 0314 	add.w	r3, r4, #20
 8010b24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010b28:	f109 0314 	add.w	r3, r9, #20
 8010b2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010b30:	9202      	str	r2, [sp, #8]
 8010b32:	1b3a      	subs	r2, r7, r4
 8010b34:	3a15      	subs	r2, #21
 8010b36:	f022 0203 	bic.w	r2, r2, #3
 8010b3a:	3204      	adds	r2, #4
 8010b3c:	f104 0115 	add.w	r1, r4, #21
 8010b40:	428f      	cmp	r7, r1
 8010b42:	bf38      	it	cc
 8010b44:	2204      	movcc	r2, #4
 8010b46:	9201      	str	r2, [sp, #4]
 8010b48:	9a02      	ldr	r2, [sp, #8]
 8010b4a:	9303      	str	r3, [sp, #12]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d80c      	bhi.n	8010b6a <__multiply+0x9e>
 8010b50:	2e00      	cmp	r6, #0
 8010b52:	dd03      	ble.n	8010b5c <__multiply+0x90>
 8010b54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d05b      	beq.n	8010c14 <__multiply+0x148>
 8010b5c:	6106      	str	r6, [r0, #16]
 8010b5e:	b005      	add	sp, #20
 8010b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b64:	f843 2b04 	str.w	r2, [r3], #4
 8010b68:	e7d8      	b.n	8010b1c <__multiply+0x50>
 8010b6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010b6e:	f1ba 0f00 	cmp.w	sl, #0
 8010b72:	d024      	beq.n	8010bbe <__multiply+0xf2>
 8010b74:	f104 0e14 	add.w	lr, r4, #20
 8010b78:	46a9      	mov	r9, r5
 8010b7a:	f04f 0c00 	mov.w	ip, #0
 8010b7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010b82:	f8d9 1000 	ldr.w	r1, [r9]
 8010b86:	fa1f fb82 	uxth.w	fp, r2
 8010b8a:	b289      	uxth	r1, r1
 8010b8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010b90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010b94:	f8d9 2000 	ldr.w	r2, [r9]
 8010b98:	4461      	add	r1, ip
 8010b9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010b9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010ba2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010ba6:	b289      	uxth	r1, r1
 8010ba8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010bac:	4577      	cmp	r7, lr
 8010bae:	f849 1b04 	str.w	r1, [r9], #4
 8010bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010bb6:	d8e2      	bhi.n	8010b7e <__multiply+0xb2>
 8010bb8:	9a01      	ldr	r2, [sp, #4]
 8010bba:	f845 c002 	str.w	ip, [r5, r2]
 8010bbe:	9a03      	ldr	r2, [sp, #12]
 8010bc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010bc4:	3304      	adds	r3, #4
 8010bc6:	f1b9 0f00 	cmp.w	r9, #0
 8010bca:	d021      	beq.n	8010c10 <__multiply+0x144>
 8010bcc:	6829      	ldr	r1, [r5, #0]
 8010bce:	f104 0c14 	add.w	ip, r4, #20
 8010bd2:	46ae      	mov	lr, r5
 8010bd4:	f04f 0a00 	mov.w	sl, #0
 8010bd8:	f8bc b000 	ldrh.w	fp, [ip]
 8010bdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010be0:	fb09 220b 	mla	r2, r9, fp, r2
 8010be4:	4452      	add	r2, sl
 8010be6:	b289      	uxth	r1, r1
 8010be8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010bec:	f84e 1b04 	str.w	r1, [lr], #4
 8010bf0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010bf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010bf8:	f8be 1000 	ldrh.w	r1, [lr]
 8010bfc:	fb09 110a 	mla	r1, r9, sl, r1
 8010c00:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010c04:	4567      	cmp	r7, ip
 8010c06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c0a:	d8e5      	bhi.n	8010bd8 <__multiply+0x10c>
 8010c0c:	9a01      	ldr	r2, [sp, #4]
 8010c0e:	50a9      	str	r1, [r5, r2]
 8010c10:	3504      	adds	r5, #4
 8010c12:	e799      	b.n	8010b48 <__multiply+0x7c>
 8010c14:	3e01      	subs	r6, #1
 8010c16:	e79b      	b.n	8010b50 <__multiply+0x84>
 8010c18:	08012561 	.word	0x08012561
 8010c1c:	080125d2 	.word	0x080125d2

08010c20 <__pow5mult>:
 8010c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c24:	4615      	mov	r5, r2
 8010c26:	f012 0203 	ands.w	r2, r2, #3
 8010c2a:	4606      	mov	r6, r0
 8010c2c:	460f      	mov	r7, r1
 8010c2e:	d007      	beq.n	8010c40 <__pow5mult+0x20>
 8010c30:	4c25      	ldr	r4, [pc, #148]	; (8010cc8 <__pow5mult+0xa8>)
 8010c32:	3a01      	subs	r2, #1
 8010c34:	2300      	movs	r3, #0
 8010c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010c3a:	f7ff fe53 	bl	80108e4 <__multadd>
 8010c3e:	4607      	mov	r7, r0
 8010c40:	10ad      	asrs	r5, r5, #2
 8010c42:	d03d      	beq.n	8010cc0 <__pow5mult+0xa0>
 8010c44:	69f4      	ldr	r4, [r6, #28]
 8010c46:	b97c      	cbnz	r4, 8010c68 <__pow5mult+0x48>
 8010c48:	2010      	movs	r0, #16
 8010c4a:	f7ff fd23 	bl	8010694 <malloc>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	61f0      	str	r0, [r6, #28]
 8010c52:	b928      	cbnz	r0, 8010c60 <__pow5mult+0x40>
 8010c54:	4b1d      	ldr	r3, [pc, #116]	; (8010ccc <__pow5mult+0xac>)
 8010c56:	481e      	ldr	r0, [pc, #120]	; (8010cd0 <__pow5mult+0xb0>)
 8010c58:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010c5c:	f000 fd20 	bl	80116a0 <__assert_func>
 8010c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c64:	6004      	str	r4, [r0, #0]
 8010c66:	60c4      	str	r4, [r0, #12]
 8010c68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c70:	b94c      	cbnz	r4, 8010c86 <__pow5mult+0x66>
 8010c72:	f240 2171 	movw	r1, #625	; 0x271
 8010c76:	4630      	mov	r0, r6
 8010c78:	f7ff ff12 	bl	8010aa0 <__i2b>
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c82:	4604      	mov	r4, r0
 8010c84:	6003      	str	r3, [r0, #0]
 8010c86:	f04f 0900 	mov.w	r9, #0
 8010c8a:	07eb      	lsls	r3, r5, #31
 8010c8c:	d50a      	bpl.n	8010ca4 <__pow5mult+0x84>
 8010c8e:	4639      	mov	r1, r7
 8010c90:	4622      	mov	r2, r4
 8010c92:	4630      	mov	r0, r6
 8010c94:	f7ff ff1a 	bl	8010acc <__multiply>
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4680      	mov	r8, r0
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f7ff fdff 	bl	80108a0 <_Bfree>
 8010ca2:	4647      	mov	r7, r8
 8010ca4:	106d      	asrs	r5, r5, #1
 8010ca6:	d00b      	beq.n	8010cc0 <__pow5mult+0xa0>
 8010ca8:	6820      	ldr	r0, [r4, #0]
 8010caa:	b938      	cbnz	r0, 8010cbc <__pow5mult+0x9c>
 8010cac:	4622      	mov	r2, r4
 8010cae:	4621      	mov	r1, r4
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f7ff ff0b 	bl	8010acc <__multiply>
 8010cb6:	6020      	str	r0, [r4, #0]
 8010cb8:	f8c0 9000 	str.w	r9, [r0]
 8010cbc:	4604      	mov	r4, r0
 8010cbe:	e7e4      	b.n	8010c8a <__pow5mult+0x6a>
 8010cc0:	4638      	mov	r0, r7
 8010cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cc6:	bf00      	nop
 8010cc8:	08012720 	.word	0x08012720
 8010ccc:	080124f2 	.word	0x080124f2
 8010cd0:	080125d2 	.word	0x080125d2

08010cd4 <__lshift>:
 8010cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd8:	460c      	mov	r4, r1
 8010cda:	6849      	ldr	r1, [r1, #4]
 8010cdc:	6923      	ldr	r3, [r4, #16]
 8010cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ce2:	68a3      	ldr	r3, [r4, #8]
 8010ce4:	4607      	mov	r7, r0
 8010ce6:	4691      	mov	r9, r2
 8010ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010cec:	f108 0601 	add.w	r6, r8, #1
 8010cf0:	42b3      	cmp	r3, r6
 8010cf2:	db0b      	blt.n	8010d0c <__lshift+0x38>
 8010cf4:	4638      	mov	r0, r7
 8010cf6:	f7ff fd93 	bl	8010820 <_Balloc>
 8010cfa:	4605      	mov	r5, r0
 8010cfc:	b948      	cbnz	r0, 8010d12 <__lshift+0x3e>
 8010cfe:	4602      	mov	r2, r0
 8010d00:	4b28      	ldr	r3, [pc, #160]	; (8010da4 <__lshift+0xd0>)
 8010d02:	4829      	ldr	r0, [pc, #164]	; (8010da8 <__lshift+0xd4>)
 8010d04:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010d08:	f000 fcca 	bl	80116a0 <__assert_func>
 8010d0c:	3101      	adds	r1, #1
 8010d0e:	005b      	lsls	r3, r3, #1
 8010d10:	e7ee      	b.n	8010cf0 <__lshift+0x1c>
 8010d12:	2300      	movs	r3, #0
 8010d14:	f100 0114 	add.w	r1, r0, #20
 8010d18:	f100 0210 	add.w	r2, r0, #16
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	4553      	cmp	r3, sl
 8010d20:	db33      	blt.n	8010d8a <__lshift+0xb6>
 8010d22:	6920      	ldr	r0, [r4, #16]
 8010d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010d28:	f104 0314 	add.w	r3, r4, #20
 8010d2c:	f019 091f 	ands.w	r9, r9, #31
 8010d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010d38:	d02b      	beq.n	8010d92 <__lshift+0xbe>
 8010d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8010d3e:	468a      	mov	sl, r1
 8010d40:	2200      	movs	r2, #0
 8010d42:	6818      	ldr	r0, [r3, #0]
 8010d44:	fa00 f009 	lsl.w	r0, r0, r9
 8010d48:	4310      	orrs	r0, r2
 8010d4a:	f84a 0b04 	str.w	r0, [sl], #4
 8010d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d52:	459c      	cmp	ip, r3
 8010d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d58:	d8f3      	bhi.n	8010d42 <__lshift+0x6e>
 8010d5a:	ebac 0304 	sub.w	r3, ip, r4
 8010d5e:	3b15      	subs	r3, #21
 8010d60:	f023 0303 	bic.w	r3, r3, #3
 8010d64:	3304      	adds	r3, #4
 8010d66:	f104 0015 	add.w	r0, r4, #21
 8010d6a:	4584      	cmp	ip, r0
 8010d6c:	bf38      	it	cc
 8010d6e:	2304      	movcc	r3, #4
 8010d70:	50ca      	str	r2, [r1, r3]
 8010d72:	b10a      	cbz	r2, 8010d78 <__lshift+0xa4>
 8010d74:	f108 0602 	add.w	r6, r8, #2
 8010d78:	3e01      	subs	r6, #1
 8010d7a:	4638      	mov	r0, r7
 8010d7c:	612e      	str	r6, [r5, #16]
 8010d7e:	4621      	mov	r1, r4
 8010d80:	f7ff fd8e 	bl	80108a0 <_Bfree>
 8010d84:	4628      	mov	r0, r5
 8010d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d8e:	3301      	adds	r3, #1
 8010d90:	e7c5      	b.n	8010d1e <__lshift+0x4a>
 8010d92:	3904      	subs	r1, #4
 8010d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d9c:	459c      	cmp	ip, r3
 8010d9e:	d8f9      	bhi.n	8010d94 <__lshift+0xc0>
 8010da0:	e7ea      	b.n	8010d78 <__lshift+0xa4>
 8010da2:	bf00      	nop
 8010da4:	08012561 	.word	0x08012561
 8010da8:	080125d2 	.word	0x080125d2

08010dac <__mcmp>:
 8010dac:	b530      	push	{r4, r5, lr}
 8010dae:	6902      	ldr	r2, [r0, #16]
 8010db0:	690c      	ldr	r4, [r1, #16]
 8010db2:	1b12      	subs	r2, r2, r4
 8010db4:	d10e      	bne.n	8010dd4 <__mcmp+0x28>
 8010db6:	f100 0314 	add.w	r3, r0, #20
 8010dba:	3114      	adds	r1, #20
 8010dbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010dc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010dc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010dc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010dcc:	42a5      	cmp	r5, r4
 8010dce:	d003      	beq.n	8010dd8 <__mcmp+0x2c>
 8010dd0:	d305      	bcc.n	8010dde <__mcmp+0x32>
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	bd30      	pop	{r4, r5, pc}
 8010dd8:	4283      	cmp	r3, r0
 8010dda:	d3f3      	bcc.n	8010dc4 <__mcmp+0x18>
 8010ddc:	e7fa      	b.n	8010dd4 <__mcmp+0x28>
 8010dde:	f04f 32ff 	mov.w	r2, #4294967295
 8010de2:	e7f7      	b.n	8010dd4 <__mcmp+0x28>

08010de4 <__mdiff>:
 8010de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	460c      	mov	r4, r1
 8010dea:	4606      	mov	r6, r0
 8010dec:	4611      	mov	r1, r2
 8010dee:	4620      	mov	r0, r4
 8010df0:	4690      	mov	r8, r2
 8010df2:	f7ff ffdb 	bl	8010dac <__mcmp>
 8010df6:	1e05      	subs	r5, r0, #0
 8010df8:	d110      	bne.n	8010e1c <__mdiff+0x38>
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	f7ff fd0f 	bl	8010820 <_Balloc>
 8010e02:	b930      	cbnz	r0, 8010e12 <__mdiff+0x2e>
 8010e04:	4b3a      	ldr	r3, [pc, #232]	; (8010ef0 <__mdiff+0x10c>)
 8010e06:	4602      	mov	r2, r0
 8010e08:	f240 2137 	movw	r1, #567	; 0x237
 8010e0c:	4839      	ldr	r0, [pc, #228]	; (8010ef4 <__mdiff+0x110>)
 8010e0e:	f000 fc47 	bl	80116a0 <__assert_func>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1c:	bfa4      	itt	ge
 8010e1e:	4643      	movge	r3, r8
 8010e20:	46a0      	movge	r8, r4
 8010e22:	4630      	mov	r0, r6
 8010e24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e28:	bfa6      	itte	ge
 8010e2a:	461c      	movge	r4, r3
 8010e2c:	2500      	movge	r5, #0
 8010e2e:	2501      	movlt	r5, #1
 8010e30:	f7ff fcf6 	bl	8010820 <_Balloc>
 8010e34:	b920      	cbnz	r0, 8010e40 <__mdiff+0x5c>
 8010e36:	4b2e      	ldr	r3, [pc, #184]	; (8010ef0 <__mdiff+0x10c>)
 8010e38:	4602      	mov	r2, r0
 8010e3a:	f240 2145 	movw	r1, #581	; 0x245
 8010e3e:	e7e5      	b.n	8010e0c <__mdiff+0x28>
 8010e40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e44:	6926      	ldr	r6, [r4, #16]
 8010e46:	60c5      	str	r5, [r0, #12]
 8010e48:	f104 0914 	add.w	r9, r4, #20
 8010e4c:	f108 0514 	add.w	r5, r8, #20
 8010e50:	f100 0e14 	add.w	lr, r0, #20
 8010e54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010e58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010e5c:	f108 0210 	add.w	r2, r8, #16
 8010e60:	46f2      	mov	sl, lr
 8010e62:	2100      	movs	r1, #0
 8010e64:	f859 3b04 	ldr.w	r3, [r9], #4
 8010e68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010e6c:	fa11 f88b 	uxtah	r8, r1, fp
 8010e70:	b299      	uxth	r1, r3
 8010e72:	0c1b      	lsrs	r3, r3, #16
 8010e74:	eba8 0801 	sub.w	r8, r8, r1
 8010e78:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010e7c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010e80:	fa1f f888 	uxth.w	r8, r8
 8010e84:	1419      	asrs	r1, r3, #16
 8010e86:	454e      	cmp	r6, r9
 8010e88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010e8c:	f84a 3b04 	str.w	r3, [sl], #4
 8010e90:	d8e8      	bhi.n	8010e64 <__mdiff+0x80>
 8010e92:	1b33      	subs	r3, r6, r4
 8010e94:	3b15      	subs	r3, #21
 8010e96:	f023 0303 	bic.w	r3, r3, #3
 8010e9a:	3304      	adds	r3, #4
 8010e9c:	3415      	adds	r4, #21
 8010e9e:	42a6      	cmp	r6, r4
 8010ea0:	bf38      	it	cc
 8010ea2:	2304      	movcc	r3, #4
 8010ea4:	441d      	add	r5, r3
 8010ea6:	4473      	add	r3, lr
 8010ea8:	469e      	mov	lr, r3
 8010eaa:	462e      	mov	r6, r5
 8010eac:	4566      	cmp	r6, ip
 8010eae:	d30e      	bcc.n	8010ece <__mdiff+0xea>
 8010eb0:	f10c 0203 	add.w	r2, ip, #3
 8010eb4:	1b52      	subs	r2, r2, r5
 8010eb6:	f022 0203 	bic.w	r2, r2, #3
 8010eba:	3d03      	subs	r5, #3
 8010ebc:	45ac      	cmp	ip, r5
 8010ebe:	bf38      	it	cc
 8010ec0:	2200      	movcc	r2, #0
 8010ec2:	4413      	add	r3, r2
 8010ec4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ec8:	b17a      	cbz	r2, 8010eea <__mdiff+0x106>
 8010eca:	6107      	str	r7, [r0, #16]
 8010ecc:	e7a4      	b.n	8010e18 <__mdiff+0x34>
 8010ece:	f856 8b04 	ldr.w	r8, [r6], #4
 8010ed2:	fa11 f288 	uxtah	r2, r1, r8
 8010ed6:	1414      	asrs	r4, r2, #16
 8010ed8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010edc:	b292      	uxth	r2, r2
 8010ede:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010ee2:	f84e 2b04 	str.w	r2, [lr], #4
 8010ee6:	1421      	asrs	r1, r4, #16
 8010ee8:	e7e0      	b.n	8010eac <__mdiff+0xc8>
 8010eea:	3f01      	subs	r7, #1
 8010eec:	e7ea      	b.n	8010ec4 <__mdiff+0xe0>
 8010eee:	bf00      	nop
 8010ef0:	08012561 	.word	0x08012561
 8010ef4:	080125d2 	.word	0x080125d2

08010ef8 <__ulp>:
 8010ef8:	b082      	sub	sp, #8
 8010efa:	ed8d 0b00 	vstr	d0, [sp]
 8010efe:	9a01      	ldr	r2, [sp, #4]
 8010f00:	4b0f      	ldr	r3, [pc, #60]	; (8010f40 <__ulp+0x48>)
 8010f02:	4013      	ands	r3, r2
 8010f04:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	dc08      	bgt.n	8010f1e <__ulp+0x26>
 8010f0c:	425b      	negs	r3, r3
 8010f0e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010f12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010f16:	da04      	bge.n	8010f22 <__ulp+0x2a>
 8010f18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010f1c:	4113      	asrs	r3, r2
 8010f1e:	2200      	movs	r2, #0
 8010f20:	e008      	b.n	8010f34 <__ulp+0x3c>
 8010f22:	f1a2 0314 	sub.w	r3, r2, #20
 8010f26:	2b1e      	cmp	r3, #30
 8010f28:	bfda      	itte	le
 8010f2a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010f2e:	40da      	lsrle	r2, r3
 8010f30:	2201      	movgt	r2, #1
 8010f32:	2300      	movs	r3, #0
 8010f34:	4619      	mov	r1, r3
 8010f36:	4610      	mov	r0, r2
 8010f38:	ec41 0b10 	vmov	d0, r0, r1
 8010f3c:	b002      	add	sp, #8
 8010f3e:	4770      	bx	lr
 8010f40:	7ff00000 	.word	0x7ff00000

08010f44 <__b2d>:
 8010f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f48:	6906      	ldr	r6, [r0, #16]
 8010f4a:	f100 0814 	add.w	r8, r0, #20
 8010f4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010f52:	1f37      	subs	r7, r6, #4
 8010f54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010f58:	4610      	mov	r0, r2
 8010f5a:	f7ff fd53 	bl	8010a04 <__hi0bits>
 8010f5e:	f1c0 0320 	rsb	r3, r0, #32
 8010f62:	280a      	cmp	r0, #10
 8010f64:	600b      	str	r3, [r1, #0]
 8010f66:	491b      	ldr	r1, [pc, #108]	; (8010fd4 <__b2d+0x90>)
 8010f68:	dc15      	bgt.n	8010f96 <__b2d+0x52>
 8010f6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8010f6e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010f72:	45b8      	cmp	r8, r7
 8010f74:	ea43 0501 	orr.w	r5, r3, r1
 8010f78:	bf34      	ite	cc
 8010f7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010f7e:	2300      	movcs	r3, #0
 8010f80:	3015      	adds	r0, #21
 8010f82:	fa02 f000 	lsl.w	r0, r2, r0
 8010f86:	fa23 f30c 	lsr.w	r3, r3, ip
 8010f8a:	4303      	orrs	r3, r0
 8010f8c:	461c      	mov	r4, r3
 8010f8e:	ec45 4b10 	vmov	d0, r4, r5
 8010f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f96:	45b8      	cmp	r8, r7
 8010f98:	bf3a      	itte	cc
 8010f9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010f9e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010fa2:	2300      	movcs	r3, #0
 8010fa4:	380b      	subs	r0, #11
 8010fa6:	d012      	beq.n	8010fce <__b2d+0x8a>
 8010fa8:	f1c0 0120 	rsb	r1, r0, #32
 8010fac:	fa23 f401 	lsr.w	r4, r3, r1
 8010fb0:	4082      	lsls	r2, r0
 8010fb2:	4322      	orrs	r2, r4
 8010fb4:	4547      	cmp	r7, r8
 8010fb6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010fba:	bf8c      	ite	hi
 8010fbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010fc0:	2200      	movls	r2, #0
 8010fc2:	4083      	lsls	r3, r0
 8010fc4:	40ca      	lsrs	r2, r1
 8010fc6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	e7de      	b.n	8010f8c <__b2d+0x48>
 8010fce:	ea42 0501 	orr.w	r5, r2, r1
 8010fd2:	e7db      	b.n	8010f8c <__b2d+0x48>
 8010fd4:	3ff00000 	.word	0x3ff00000

08010fd8 <__d2b>:
 8010fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010fdc:	460f      	mov	r7, r1
 8010fde:	2101      	movs	r1, #1
 8010fe0:	ec59 8b10 	vmov	r8, r9, d0
 8010fe4:	4616      	mov	r6, r2
 8010fe6:	f7ff fc1b 	bl	8010820 <_Balloc>
 8010fea:	4604      	mov	r4, r0
 8010fec:	b930      	cbnz	r0, 8010ffc <__d2b+0x24>
 8010fee:	4602      	mov	r2, r0
 8010ff0:	4b24      	ldr	r3, [pc, #144]	; (8011084 <__d2b+0xac>)
 8010ff2:	4825      	ldr	r0, [pc, #148]	; (8011088 <__d2b+0xb0>)
 8010ff4:	f240 310f 	movw	r1, #783	; 0x30f
 8010ff8:	f000 fb52 	bl	80116a0 <__assert_func>
 8010ffc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011000:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011004:	bb2d      	cbnz	r5, 8011052 <__d2b+0x7a>
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	f1b8 0300 	subs.w	r3, r8, #0
 801100c:	d026      	beq.n	801105c <__d2b+0x84>
 801100e:	4668      	mov	r0, sp
 8011010:	9300      	str	r3, [sp, #0]
 8011012:	f7ff fd17 	bl	8010a44 <__lo0bits>
 8011016:	e9dd 1200 	ldrd	r1, r2, [sp]
 801101a:	b1e8      	cbz	r0, 8011058 <__d2b+0x80>
 801101c:	f1c0 0320 	rsb	r3, r0, #32
 8011020:	fa02 f303 	lsl.w	r3, r2, r3
 8011024:	430b      	orrs	r3, r1
 8011026:	40c2      	lsrs	r2, r0
 8011028:	6163      	str	r3, [r4, #20]
 801102a:	9201      	str	r2, [sp, #4]
 801102c:	9b01      	ldr	r3, [sp, #4]
 801102e:	61a3      	str	r3, [r4, #24]
 8011030:	2b00      	cmp	r3, #0
 8011032:	bf14      	ite	ne
 8011034:	2202      	movne	r2, #2
 8011036:	2201      	moveq	r2, #1
 8011038:	6122      	str	r2, [r4, #16]
 801103a:	b1bd      	cbz	r5, 801106c <__d2b+0x94>
 801103c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011040:	4405      	add	r5, r0
 8011042:	603d      	str	r5, [r7, #0]
 8011044:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011048:	6030      	str	r0, [r6, #0]
 801104a:	4620      	mov	r0, r4
 801104c:	b003      	add	sp, #12
 801104e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011056:	e7d6      	b.n	8011006 <__d2b+0x2e>
 8011058:	6161      	str	r1, [r4, #20]
 801105a:	e7e7      	b.n	801102c <__d2b+0x54>
 801105c:	a801      	add	r0, sp, #4
 801105e:	f7ff fcf1 	bl	8010a44 <__lo0bits>
 8011062:	9b01      	ldr	r3, [sp, #4]
 8011064:	6163      	str	r3, [r4, #20]
 8011066:	3020      	adds	r0, #32
 8011068:	2201      	movs	r2, #1
 801106a:	e7e5      	b.n	8011038 <__d2b+0x60>
 801106c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011070:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011074:	6038      	str	r0, [r7, #0]
 8011076:	6918      	ldr	r0, [r3, #16]
 8011078:	f7ff fcc4 	bl	8010a04 <__hi0bits>
 801107c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011080:	e7e2      	b.n	8011048 <__d2b+0x70>
 8011082:	bf00      	nop
 8011084:	08012561 	.word	0x08012561
 8011088:	080125d2 	.word	0x080125d2

0801108c <__ratio>:
 801108c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011090:	4688      	mov	r8, r1
 8011092:	4669      	mov	r1, sp
 8011094:	4681      	mov	r9, r0
 8011096:	f7ff ff55 	bl	8010f44 <__b2d>
 801109a:	a901      	add	r1, sp, #4
 801109c:	4640      	mov	r0, r8
 801109e:	ec55 4b10 	vmov	r4, r5, d0
 80110a2:	f7ff ff4f 	bl	8010f44 <__b2d>
 80110a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80110aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80110ae:	eba3 0c02 	sub.w	ip, r3, r2
 80110b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80110b6:	1a9b      	subs	r3, r3, r2
 80110b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80110bc:	ec51 0b10 	vmov	r0, r1, d0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	bfd6      	itet	le
 80110c4:	460a      	movle	r2, r1
 80110c6:	462a      	movgt	r2, r5
 80110c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80110cc:	468b      	mov	fp, r1
 80110ce:	462f      	mov	r7, r5
 80110d0:	bfd4      	ite	le
 80110d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80110d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80110da:	4620      	mov	r0, r4
 80110dc:	ee10 2a10 	vmov	r2, s0
 80110e0:	465b      	mov	r3, fp
 80110e2:	4639      	mov	r1, r7
 80110e4:	f7ef fbb2 	bl	800084c <__aeabi_ddiv>
 80110e8:	ec41 0b10 	vmov	d0, r0, r1
 80110ec:	b003      	add	sp, #12
 80110ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110f2 <__copybits>:
 80110f2:	3901      	subs	r1, #1
 80110f4:	b570      	push	{r4, r5, r6, lr}
 80110f6:	1149      	asrs	r1, r1, #5
 80110f8:	6914      	ldr	r4, [r2, #16]
 80110fa:	3101      	adds	r1, #1
 80110fc:	f102 0314 	add.w	r3, r2, #20
 8011100:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011104:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011108:	1f05      	subs	r5, r0, #4
 801110a:	42a3      	cmp	r3, r4
 801110c:	d30c      	bcc.n	8011128 <__copybits+0x36>
 801110e:	1aa3      	subs	r3, r4, r2
 8011110:	3b11      	subs	r3, #17
 8011112:	f023 0303 	bic.w	r3, r3, #3
 8011116:	3211      	adds	r2, #17
 8011118:	42a2      	cmp	r2, r4
 801111a:	bf88      	it	hi
 801111c:	2300      	movhi	r3, #0
 801111e:	4418      	add	r0, r3
 8011120:	2300      	movs	r3, #0
 8011122:	4288      	cmp	r0, r1
 8011124:	d305      	bcc.n	8011132 <__copybits+0x40>
 8011126:	bd70      	pop	{r4, r5, r6, pc}
 8011128:	f853 6b04 	ldr.w	r6, [r3], #4
 801112c:	f845 6f04 	str.w	r6, [r5, #4]!
 8011130:	e7eb      	b.n	801110a <__copybits+0x18>
 8011132:	f840 3b04 	str.w	r3, [r0], #4
 8011136:	e7f4      	b.n	8011122 <__copybits+0x30>

08011138 <__any_on>:
 8011138:	f100 0214 	add.w	r2, r0, #20
 801113c:	6900      	ldr	r0, [r0, #16]
 801113e:	114b      	asrs	r3, r1, #5
 8011140:	4298      	cmp	r0, r3
 8011142:	b510      	push	{r4, lr}
 8011144:	db11      	blt.n	801116a <__any_on+0x32>
 8011146:	dd0a      	ble.n	801115e <__any_on+0x26>
 8011148:	f011 011f 	ands.w	r1, r1, #31
 801114c:	d007      	beq.n	801115e <__any_on+0x26>
 801114e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011152:	fa24 f001 	lsr.w	r0, r4, r1
 8011156:	fa00 f101 	lsl.w	r1, r0, r1
 801115a:	428c      	cmp	r4, r1
 801115c:	d10b      	bne.n	8011176 <__any_on+0x3e>
 801115e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011162:	4293      	cmp	r3, r2
 8011164:	d803      	bhi.n	801116e <__any_on+0x36>
 8011166:	2000      	movs	r0, #0
 8011168:	bd10      	pop	{r4, pc}
 801116a:	4603      	mov	r3, r0
 801116c:	e7f7      	b.n	801115e <__any_on+0x26>
 801116e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011172:	2900      	cmp	r1, #0
 8011174:	d0f5      	beq.n	8011162 <__any_on+0x2a>
 8011176:	2001      	movs	r0, #1
 8011178:	e7f6      	b.n	8011168 <__any_on+0x30>

0801117a <__ascii_wctomb>:
 801117a:	b149      	cbz	r1, 8011190 <__ascii_wctomb+0x16>
 801117c:	2aff      	cmp	r2, #255	; 0xff
 801117e:	bf85      	ittet	hi
 8011180:	238a      	movhi	r3, #138	; 0x8a
 8011182:	6003      	strhi	r3, [r0, #0]
 8011184:	700a      	strbls	r2, [r1, #0]
 8011186:	f04f 30ff 	movhi.w	r0, #4294967295
 801118a:	bf98      	it	ls
 801118c:	2001      	movls	r0, #1
 801118e:	4770      	bx	lr
 8011190:	4608      	mov	r0, r1
 8011192:	4770      	bx	lr

08011194 <__sfputc_r>:
 8011194:	6893      	ldr	r3, [r2, #8]
 8011196:	3b01      	subs	r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	b410      	push	{r4}
 801119c:	6093      	str	r3, [r2, #8]
 801119e:	da08      	bge.n	80111b2 <__sfputc_r+0x1e>
 80111a0:	6994      	ldr	r4, [r2, #24]
 80111a2:	42a3      	cmp	r3, r4
 80111a4:	db01      	blt.n	80111aa <__sfputc_r+0x16>
 80111a6:	290a      	cmp	r1, #10
 80111a8:	d103      	bne.n	80111b2 <__sfputc_r+0x1e>
 80111aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111ae:	f7fd bf10 	b.w	800efd2 <__swbuf_r>
 80111b2:	6813      	ldr	r3, [r2, #0]
 80111b4:	1c58      	adds	r0, r3, #1
 80111b6:	6010      	str	r0, [r2, #0]
 80111b8:	7019      	strb	r1, [r3, #0]
 80111ba:	4608      	mov	r0, r1
 80111bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111c0:	4770      	bx	lr

080111c2 <__sfputs_r>:
 80111c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c4:	4606      	mov	r6, r0
 80111c6:	460f      	mov	r7, r1
 80111c8:	4614      	mov	r4, r2
 80111ca:	18d5      	adds	r5, r2, r3
 80111cc:	42ac      	cmp	r4, r5
 80111ce:	d101      	bne.n	80111d4 <__sfputs_r+0x12>
 80111d0:	2000      	movs	r0, #0
 80111d2:	e007      	b.n	80111e4 <__sfputs_r+0x22>
 80111d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d8:	463a      	mov	r2, r7
 80111da:	4630      	mov	r0, r6
 80111dc:	f7ff ffda 	bl	8011194 <__sfputc_r>
 80111e0:	1c43      	adds	r3, r0, #1
 80111e2:	d1f3      	bne.n	80111cc <__sfputs_r+0xa>
 80111e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111e8 <_vfiprintf_r>:
 80111e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	460d      	mov	r5, r1
 80111ee:	b09d      	sub	sp, #116	; 0x74
 80111f0:	4614      	mov	r4, r2
 80111f2:	4698      	mov	r8, r3
 80111f4:	4606      	mov	r6, r0
 80111f6:	b118      	cbz	r0, 8011200 <_vfiprintf_r+0x18>
 80111f8:	6a03      	ldr	r3, [r0, #32]
 80111fa:	b90b      	cbnz	r3, 8011200 <_vfiprintf_r+0x18>
 80111fc:	f7fd fe02 	bl	800ee04 <__sinit>
 8011200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011202:	07d9      	lsls	r1, r3, #31
 8011204:	d405      	bmi.n	8011212 <_vfiprintf_r+0x2a>
 8011206:	89ab      	ldrh	r3, [r5, #12]
 8011208:	059a      	lsls	r2, r3, #22
 801120a:	d402      	bmi.n	8011212 <_vfiprintf_r+0x2a>
 801120c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801120e:	f7fe f803 	bl	800f218 <__retarget_lock_acquire_recursive>
 8011212:	89ab      	ldrh	r3, [r5, #12]
 8011214:	071b      	lsls	r3, r3, #28
 8011216:	d501      	bpl.n	801121c <_vfiprintf_r+0x34>
 8011218:	692b      	ldr	r3, [r5, #16]
 801121a:	b99b      	cbnz	r3, 8011244 <_vfiprintf_r+0x5c>
 801121c:	4629      	mov	r1, r5
 801121e:	4630      	mov	r0, r6
 8011220:	f7fd ff14 	bl	800f04c <__swsetup_r>
 8011224:	b170      	cbz	r0, 8011244 <_vfiprintf_r+0x5c>
 8011226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011228:	07dc      	lsls	r4, r3, #31
 801122a:	d504      	bpl.n	8011236 <_vfiprintf_r+0x4e>
 801122c:	f04f 30ff 	mov.w	r0, #4294967295
 8011230:	b01d      	add	sp, #116	; 0x74
 8011232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011236:	89ab      	ldrh	r3, [r5, #12]
 8011238:	0598      	lsls	r0, r3, #22
 801123a:	d4f7      	bmi.n	801122c <_vfiprintf_r+0x44>
 801123c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801123e:	f7fd ffec 	bl	800f21a <__retarget_lock_release_recursive>
 8011242:	e7f3      	b.n	801122c <_vfiprintf_r+0x44>
 8011244:	2300      	movs	r3, #0
 8011246:	9309      	str	r3, [sp, #36]	; 0x24
 8011248:	2320      	movs	r3, #32
 801124a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801124e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011252:	2330      	movs	r3, #48	; 0x30
 8011254:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011408 <_vfiprintf_r+0x220>
 8011258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801125c:	f04f 0901 	mov.w	r9, #1
 8011260:	4623      	mov	r3, r4
 8011262:	469a      	mov	sl, r3
 8011264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011268:	b10a      	cbz	r2, 801126e <_vfiprintf_r+0x86>
 801126a:	2a25      	cmp	r2, #37	; 0x25
 801126c:	d1f9      	bne.n	8011262 <_vfiprintf_r+0x7a>
 801126e:	ebba 0b04 	subs.w	fp, sl, r4
 8011272:	d00b      	beq.n	801128c <_vfiprintf_r+0xa4>
 8011274:	465b      	mov	r3, fp
 8011276:	4622      	mov	r2, r4
 8011278:	4629      	mov	r1, r5
 801127a:	4630      	mov	r0, r6
 801127c:	f7ff ffa1 	bl	80111c2 <__sfputs_r>
 8011280:	3001      	adds	r0, #1
 8011282:	f000 80a9 	beq.w	80113d8 <_vfiprintf_r+0x1f0>
 8011286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011288:	445a      	add	r2, fp
 801128a:	9209      	str	r2, [sp, #36]	; 0x24
 801128c:	f89a 3000 	ldrb.w	r3, [sl]
 8011290:	2b00      	cmp	r3, #0
 8011292:	f000 80a1 	beq.w	80113d8 <_vfiprintf_r+0x1f0>
 8011296:	2300      	movs	r3, #0
 8011298:	f04f 32ff 	mov.w	r2, #4294967295
 801129c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112a0:	f10a 0a01 	add.w	sl, sl, #1
 80112a4:	9304      	str	r3, [sp, #16]
 80112a6:	9307      	str	r3, [sp, #28]
 80112a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112ac:	931a      	str	r3, [sp, #104]	; 0x68
 80112ae:	4654      	mov	r4, sl
 80112b0:	2205      	movs	r2, #5
 80112b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112b6:	4854      	ldr	r0, [pc, #336]	; (8011408 <_vfiprintf_r+0x220>)
 80112b8:	f7ee ff8a 	bl	80001d0 <memchr>
 80112bc:	9a04      	ldr	r2, [sp, #16]
 80112be:	b9d8      	cbnz	r0, 80112f8 <_vfiprintf_r+0x110>
 80112c0:	06d1      	lsls	r1, r2, #27
 80112c2:	bf44      	itt	mi
 80112c4:	2320      	movmi	r3, #32
 80112c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112ca:	0713      	lsls	r3, r2, #28
 80112cc:	bf44      	itt	mi
 80112ce:	232b      	movmi	r3, #43	; 0x2b
 80112d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112d4:	f89a 3000 	ldrb.w	r3, [sl]
 80112d8:	2b2a      	cmp	r3, #42	; 0x2a
 80112da:	d015      	beq.n	8011308 <_vfiprintf_r+0x120>
 80112dc:	9a07      	ldr	r2, [sp, #28]
 80112de:	4654      	mov	r4, sl
 80112e0:	2000      	movs	r0, #0
 80112e2:	f04f 0c0a 	mov.w	ip, #10
 80112e6:	4621      	mov	r1, r4
 80112e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112ec:	3b30      	subs	r3, #48	; 0x30
 80112ee:	2b09      	cmp	r3, #9
 80112f0:	d94d      	bls.n	801138e <_vfiprintf_r+0x1a6>
 80112f2:	b1b0      	cbz	r0, 8011322 <_vfiprintf_r+0x13a>
 80112f4:	9207      	str	r2, [sp, #28]
 80112f6:	e014      	b.n	8011322 <_vfiprintf_r+0x13a>
 80112f8:	eba0 0308 	sub.w	r3, r0, r8
 80112fc:	fa09 f303 	lsl.w	r3, r9, r3
 8011300:	4313      	orrs	r3, r2
 8011302:	9304      	str	r3, [sp, #16]
 8011304:	46a2      	mov	sl, r4
 8011306:	e7d2      	b.n	80112ae <_vfiprintf_r+0xc6>
 8011308:	9b03      	ldr	r3, [sp, #12]
 801130a:	1d19      	adds	r1, r3, #4
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	9103      	str	r1, [sp, #12]
 8011310:	2b00      	cmp	r3, #0
 8011312:	bfbb      	ittet	lt
 8011314:	425b      	neglt	r3, r3
 8011316:	f042 0202 	orrlt.w	r2, r2, #2
 801131a:	9307      	strge	r3, [sp, #28]
 801131c:	9307      	strlt	r3, [sp, #28]
 801131e:	bfb8      	it	lt
 8011320:	9204      	strlt	r2, [sp, #16]
 8011322:	7823      	ldrb	r3, [r4, #0]
 8011324:	2b2e      	cmp	r3, #46	; 0x2e
 8011326:	d10c      	bne.n	8011342 <_vfiprintf_r+0x15a>
 8011328:	7863      	ldrb	r3, [r4, #1]
 801132a:	2b2a      	cmp	r3, #42	; 0x2a
 801132c:	d134      	bne.n	8011398 <_vfiprintf_r+0x1b0>
 801132e:	9b03      	ldr	r3, [sp, #12]
 8011330:	1d1a      	adds	r2, r3, #4
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	9203      	str	r2, [sp, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	bfb8      	it	lt
 801133a:	f04f 33ff 	movlt.w	r3, #4294967295
 801133e:	3402      	adds	r4, #2
 8011340:	9305      	str	r3, [sp, #20]
 8011342:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011418 <_vfiprintf_r+0x230>
 8011346:	7821      	ldrb	r1, [r4, #0]
 8011348:	2203      	movs	r2, #3
 801134a:	4650      	mov	r0, sl
 801134c:	f7ee ff40 	bl	80001d0 <memchr>
 8011350:	b138      	cbz	r0, 8011362 <_vfiprintf_r+0x17a>
 8011352:	9b04      	ldr	r3, [sp, #16]
 8011354:	eba0 000a 	sub.w	r0, r0, sl
 8011358:	2240      	movs	r2, #64	; 0x40
 801135a:	4082      	lsls	r2, r0
 801135c:	4313      	orrs	r3, r2
 801135e:	3401      	adds	r4, #1
 8011360:	9304      	str	r3, [sp, #16]
 8011362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011366:	4829      	ldr	r0, [pc, #164]	; (801140c <_vfiprintf_r+0x224>)
 8011368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801136c:	2206      	movs	r2, #6
 801136e:	f7ee ff2f 	bl	80001d0 <memchr>
 8011372:	2800      	cmp	r0, #0
 8011374:	d03f      	beq.n	80113f6 <_vfiprintf_r+0x20e>
 8011376:	4b26      	ldr	r3, [pc, #152]	; (8011410 <_vfiprintf_r+0x228>)
 8011378:	bb1b      	cbnz	r3, 80113c2 <_vfiprintf_r+0x1da>
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	3307      	adds	r3, #7
 801137e:	f023 0307 	bic.w	r3, r3, #7
 8011382:	3308      	adds	r3, #8
 8011384:	9303      	str	r3, [sp, #12]
 8011386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011388:	443b      	add	r3, r7
 801138a:	9309      	str	r3, [sp, #36]	; 0x24
 801138c:	e768      	b.n	8011260 <_vfiprintf_r+0x78>
 801138e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011392:	460c      	mov	r4, r1
 8011394:	2001      	movs	r0, #1
 8011396:	e7a6      	b.n	80112e6 <_vfiprintf_r+0xfe>
 8011398:	2300      	movs	r3, #0
 801139a:	3401      	adds	r4, #1
 801139c:	9305      	str	r3, [sp, #20]
 801139e:	4619      	mov	r1, r3
 80113a0:	f04f 0c0a 	mov.w	ip, #10
 80113a4:	4620      	mov	r0, r4
 80113a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113aa:	3a30      	subs	r2, #48	; 0x30
 80113ac:	2a09      	cmp	r2, #9
 80113ae:	d903      	bls.n	80113b8 <_vfiprintf_r+0x1d0>
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d0c6      	beq.n	8011342 <_vfiprintf_r+0x15a>
 80113b4:	9105      	str	r1, [sp, #20]
 80113b6:	e7c4      	b.n	8011342 <_vfiprintf_r+0x15a>
 80113b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80113bc:	4604      	mov	r4, r0
 80113be:	2301      	movs	r3, #1
 80113c0:	e7f0      	b.n	80113a4 <_vfiprintf_r+0x1bc>
 80113c2:	ab03      	add	r3, sp, #12
 80113c4:	9300      	str	r3, [sp, #0]
 80113c6:	462a      	mov	r2, r5
 80113c8:	4b12      	ldr	r3, [pc, #72]	; (8011414 <_vfiprintf_r+0x22c>)
 80113ca:	a904      	add	r1, sp, #16
 80113cc:	4630      	mov	r0, r6
 80113ce:	f7fd f8d9 	bl	800e584 <_printf_float>
 80113d2:	4607      	mov	r7, r0
 80113d4:	1c78      	adds	r0, r7, #1
 80113d6:	d1d6      	bne.n	8011386 <_vfiprintf_r+0x19e>
 80113d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113da:	07d9      	lsls	r1, r3, #31
 80113dc:	d405      	bmi.n	80113ea <_vfiprintf_r+0x202>
 80113de:	89ab      	ldrh	r3, [r5, #12]
 80113e0:	059a      	lsls	r2, r3, #22
 80113e2:	d402      	bmi.n	80113ea <_vfiprintf_r+0x202>
 80113e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113e6:	f7fd ff18 	bl	800f21a <__retarget_lock_release_recursive>
 80113ea:	89ab      	ldrh	r3, [r5, #12]
 80113ec:	065b      	lsls	r3, r3, #25
 80113ee:	f53f af1d 	bmi.w	801122c <_vfiprintf_r+0x44>
 80113f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113f4:	e71c      	b.n	8011230 <_vfiprintf_r+0x48>
 80113f6:	ab03      	add	r3, sp, #12
 80113f8:	9300      	str	r3, [sp, #0]
 80113fa:	462a      	mov	r2, r5
 80113fc:	4b05      	ldr	r3, [pc, #20]	; (8011414 <_vfiprintf_r+0x22c>)
 80113fe:	a904      	add	r1, sp, #16
 8011400:	4630      	mov	r0, r6
 8011402:	f7fd fb63 	bl	800eacc <_printf_i>
 8011406:	e7e4      	b.n	80113d2 <_vfiprintf_r+0x1ea>
 8011408:	0801272c 	.word	0x0801272c
 801140c:	08012736 	.word	0x08012736
 8011410:	0800e585 	.word	0x0800e585
 8011414:	080111c3 	.word	0x080111c3
 8011418:	08012732 	.word	0x08012732

0801141c <__sflush_r>:
 801141c:	898a      	ldrh	r2, [r1, #12]
 801141e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011422:	4605      	mov	r5, r0
 8011424:	0710      	lsls	r0, r2, #28
 8011426:	460c      	mov	r4, r1
 8011428:	d458      	bmi.n	80114dc <__sflush_r+0xc0>
 801142a:	684b      	ldr	r3, [r1, #4]
 801142c:	2b00      	cmp	r3, #0
 801142e:	dc05      	bgt.n	801143c <__sflush_r+0x20>
 8011430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011432:	2b00      	cmp	r3, #0
 8011434:	dc02      	bgt.n	801143c <__sflush_r+0x20>
 8011436:	2000      	movs	r0, #0
 8011438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801143c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801143e:	2e00      	cmp	r6, #0
 8011440:	d0f9      	beq.n	8011436 <__sflush_r+0x1a>
 8011442:	2300      	movs	r3, #0
 8011444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011448:	682f      	ldr	r7, [r5, #0]
 801144a:	6a21      	ldr	r1, [r4, #32]
 801144c:	602b      	str	r3, [r5, #0]
 801144e:	d032      	beq.n	80114b6 <__sflush_r+0x9a>
 8011450:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011452:	89a3      	ldrh	r3, [r4, #12]
 8011454:	075a      	lsls	r2, r3, #29
 8011456:	d505      	bpl.n	8011464 <__sflush_r+0x48>
 8011458:	6863      	ldr	r3, [r4, #4]
 801145a:	1ac0      	subs	r0, r0, r3
 801145c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801145e:	b10b      	cbz	r3, 8011464 <__sflush_r+0x48>
 8011460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011462:	1ac0      	subs	r0, r0, r3
 8011464:	2300      	movs	r3, #0
 8011466:	4602      	mov	r2, r0
 8011468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801146a:	6a21      	ldr	r1, [r4, #32]
 801146c:	4628      	mov	r0, r5
 801146e:	47b0      	blx	r6
 8011470:	1c43      	adds	r3, r0, #1
 8011472:	89a3      	ldrh	r3, [r4, #12]
 8011474:	d106      	bne.n	8011484 <__sflush_r+0x68>
 8011476:	6829      	ldr	r1, [r5, #0]
 8011478:	291d      	cmp	r1, #29
 801147a:	d82b      	bhi.n	80114d4 <__sflush_r+0xb8>
 801147c:	4a29      	ldr	r2, [pc, #164]	; (8011524 <__sflush_r+0x108>)
 801147e:	410a      	asrs	r2, r1
 8011480:	07d6      	lsls	r6, r2, #31
 8011482:	d427      	bmi.n	80114d4 <__sflush_r+0xb8>
 8011484:	2200      	movs	r2, #0
 8011486:	6062      	str	r2, [r4, #4]
 8011488:	04d9      	lsls	r1, r3, #19
 801148a:	6922      	ldr	r2, [r4, #16]
 801148c:	6022      	str	r2, [r4, #0]
 801148e:	d504      	bpl.n	801149a <__sflush_r+0x7e>
 8011490:	1c42      	adds	r2, r0, #1
 8011492:	d101      	bne.n	8011498 <__sflush_r+0x7c>
 8011494:	682b      	ldr	r3, [r5, #0]
 8011496:	b903      	cbnz	r3, 801149a <__sflush_r+0x7e>
 8011498:	6560      	str	r0, [r4, #84]	; 0x54
 801149a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801149c:	602f      	str	r7, [r5, #0]
 801149e:	2900      	cmp	r1, #0
 80114a0:	d0c9      	beq.n	8011436 <__sflush_r+0x1a>
 80114a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114a6:	4299      	cmp	r1, r3
 80114a8:	d002      	beq.n	80114b0 <__sflush_r+0x94>
 80114aa:	4628      	mov	r0, r5
 80114ac:	f7fe fd4e 	bl	800ff4c <_free_r>
 80114b0:	2000      	movs	r0, #0
 80114b2:	6360      	str	r0, [r4, #52]	; 0x34
 80114b4:	e7c0      	b.n	8011438 <__sflush_r+0x1c>
 80114b6:	2301      	movs	r3, #1
 80114b8:	4628      	mov	r0, r5
 80114ba:	47b0      	blx	r6
 80114bc:	1c41      	adds	r1, r0, #1
 80114be:	d1c8      	bne.n	8011452 <__sflush_r+0x36>
 80114c0:	682b      	ldr	r3, [r5, #0]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d0c5      	beq.n	8011452 <__sflush_r+0x36>
 80114c6:	2b1d      	cmp	r3, #29
 80114c8:	d001      	beq.n	80114ce <__sflush_r+0xb2>
 80114ca:	2b16      	cmp	r3, #22
 80114cc:	d101      	bne.n	80114d2 <__sflush_r+0xb6>
 80114ce:	602f      	str	r7, [r5, #0]
 80114d0:	e7b1      	b.n	8011436 <__sflush_r+0x1a>
 80114d2:	89a3      	ldrh	r3, [r4, #12]
 80114d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114d8:	81a3      	strh	r3, [r4, #12]
 80114da:	e7ad      	b.n	8011438 <__sflush_r+0x1c>
 80114dc:	690f      	ldr	r7, [r1, #16]
 80114de:	2f00      	cmp	r7, #0
 80114e0:	d0a9      	beq.n	8011436 <__sflush_r+0x1a>
 80114e2:	0793      	lsls	r3, r2, #30
 80114e4:	680e      	ldr	r6, [r1, #0]
 80114e6:	bf08      	it	eq
 80114e8:	694b      	ldreq	r3, [r1, #20]
 80114ea:	600f      	str	r7, [r1, #0]
 80114ec:	bf18      	it	ne
 80114ee:	2300      	movne	r3, #0
 80114f0:	eba6 0807 	sub.w	r8, r6, r7
 80114f4:	608b      	str	r3, [r1, #8]
 80114f6:	f1b8 0f00 	cmp.w	r8, #0
 80114fa:	dd9c      	ble.n	8011436 <__sflush_r+0x1a>
 80114fc:	6a21      	ldr	r1, [r4, #32]
 80114fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011500:	4643      	mov	r3, r8
 8011502:	463a      	mov	r2, r7
 8011504:	4628      	mov	r0, r5
 8011506:	47b0      	blx	r6
 8011508:	2800      	cmp	r0, #0
 801150a:	dc06      	bgt.n	801151a <__sflush_r+0xfe>
 801150c:	89a3      	ldrh	r3, [r4, #12]
 801150e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011512:	81a3      	strh	r3, [r4, #12]
 8011514:	f04f 30ff 	mov.w	r0, #4294967295
 8011518:	e78e      	b.n	8011438 <__sflush_r+0x1c>
 801151a:	4407      	add	r7, r0
 801151c:	eba8 0800 	sub.w	r8, r8, r0
 8011520:	e7e9      	b.n	80114f6 <__sflush_r+0xda>
 8011522:	bf00      	nop
 8011524:	dfbffffe 	.word	0xdfbffffe

08011528 <_fflush_r>:
 8011528:	b538      	push	{r3, r4, r5, lr}
 801152a:	690b      	ldr	r3, [r1, #16]
 801152c:	4605      	mov	r5, r0
 801152e:	460c      	mov	r4, r1
 8011530:	b913      	cbnz	r3, 8011538 <_fflush_r+0x10>
 8011532:	2500      	movs	r5, #0
 8011534:	4628      	mov	r0, r5
 8011536:	bd38      	pop	{r3, r4, r5, pc}
 8011538:	b118      	cbz	r0, 8011542 <_fflush_r+0x1a>
 801153a:	6a03      	ldr	r3, [r0, #32]
 801153c:	b90b      	cbnz	r3, 8011542 <_fflush_r+0x1a>
 801153e:	f7fd fc61 	bl	800ee04 <__sinit>
 8011542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d0f3      	beq.n	8011532 <_fflush_r+0xa>
 801154a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801154c:	07d0      	lsls	r0, r2, #31
 801154e:	d404      	bmi.n	801155a <_fflush_r+0x32>
 8011550:	0599      	lsls	r1, r3, #22
 8011552:	d402      	bmi.n	801155a <_fflush_r+0x32>
 8011554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011556:	f7fd fe5f 	bl	800f218 <__retarget_lock_acquire_recursive>
 801155a:	4628      	mov	r0, r5
 801155c:	4621      	mov	r1, r4
 801155e:	f7ff ff5d 	bl	801141c <__sflush_r>
 8011562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011564:	07da      	lsls	r2, r3, #31
 8011566:	4605      	mov	r5, r0
 8011568:	d4e4      	bmi.n	8011534 <_fflush_r+0xc>
 801156a:	89a3      	ldrh	r3, [r4, #12]
 801156c:	059b      	lsls	r3, r3, #22
 801156e:	d4e1      	bmi.n	8011534 <_fflush_r+0xc>
 8011570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011572:	f7fd fe52 	bl	800f21a <__retarget_lock_release_recursive>
 8011576:	e7dd      	b.n	8011534 <_fflush_r+0xc>

08011578 <__swhatbuf_r>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	460c      	mov	r4, r1
 801157c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011580:	2900      	cmp	r1, #0
 8011582:	b096      	sub	sp, #88	; 0x58
 8011584:	4615      	mov	r5, r2
 8011586:	461e      	mov	r6, r3
 8011588:	da0d      	bge.n	80115a6 <__swhatbuf_r+0x2e>
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011590:	f04f 0100 	mov.w	r1, #0
 8011594:	bf0c      	ite	eq
 8011596:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801159a:	2340      	movne	r3, #64	; 0x40
 801159c:	2000      	movs	r0, #0
 801159e:	6031      	str	r1, [r6, #0]
 80115a0:	602b      	str	r3, [r5, #0]
 80115a2:	b016      	add	sp, #88	; 0x58
 80115a4:	bd70      	pop	{r4, r5, r6, pc}
 80115a6:	466a      	mov	r2, sp
 80115a8:	f000 f848 	bl	801163c <_fstat_r>
 80115ac:	2800      	cmp	r0, #0
 80115ae:	dbec      	blt.n	801158a <__swhatbuf_r+0x12>
 80115b0:	9901      	ldr	r1, [sp, #4]
 80115b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80115b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80115ba:	4259      	negs	r1, r3
 80115bc:	4159      	adcs	r1, r3
 80115be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115c2:	e7eb      	b.n	801159c <__swhatbuf_r+0x24>

080115c4 <__smakebuf_r>:
 80115c4:	898b      	ldrh	r3, [r1, #12]
 80115c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80115c8:	079d      	lsls	r5, r3, #30
 80115ca:	4606      	mov	r6, r0
 80115cc:	460c      	mov	r4, r1
 80115ce:	d507      	bpl.n	80115e0 <__smakebuf_r+0x1c>
 80115d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80115d4:	6023      	str	r3, [r4, #0]
 80115d6:	6123      	str	r3, [r4, #16]
 80115d8:	2301      	movs	r3, #1
 80115da:	6163      	str	r3, [r4, #20]
 80115dc:	b002      	add	sp, #8
 80115de:	bd70      	pop	{r4, r5, r6, pc}
 80115e0:	ab01      	add	r3, sp, #4
 80115e2:	466a      	mov	r2, sp
 80115e4:	f7ff ffc8 	bl	8011578 <__swhatbuf_r>
 80115e8:	9900      	ldr	r1, [sp, #0]
 80115ea:	4605      	mov	r5, r0
 80115ec:	4630      	mov	r0, r6
 80115ee:	f7ff f879 	bl	80106e4 <_malloc_r>
 80115f2:	b948      	cbnz	r0, 8011608 <__smakebuf_r+0x44>
 80115f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115f8:	059a      	lsls	r2, r3, #22
 80115fa:	d4ef      	bmi.n	80115dc <__smakebuf_r+0x18>
 80115fc:	f023 0303 	bic.w	r3, r3, #3
 8011600:	f043 0302 	orr.w	r3, r3, #2
 8011604:	81a3      	strh	r3, [r4, #12]
 8011606:	e7e3      	b.n	80115d0 <__smakebuf_r+0xc>
 8011608:	89a3      	ldrh	r3, [r4, #12]
 801160a:	6020      	str	r0, [r4, #0]
 801160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011610:	81a3      	strh	r3, [r4, #12]
 8011612:	9b00      	ldr	r3, [sp, #0]
 8011614:	6163      	str	r3, [r4, #20]
 8011616:	9b01      	ldr	r3, [sp, #4]
 8011618:	6120      	str	r0, [r4, #16]
 801161a:	b15b      	cbz	r3, 8011634 <__smakebuf_r+0x70>
 801161c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011620:	4630      	mov	r0, r6
 8011622:	f000 f81d 	bl	8011660 <_isatty_r>
 8011626:	b128      	cbz	r0, 8011634 <__smakebuf_r+0x70>
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	f023 0303 	bic.w	r3, r3, #3
 801162e:	f043 0301 	orr.w	r3, r3, #1
 8011632:	81a3      	strh	r3, [r4, #12]
 8011634:	89a3      	ldrh	r3, [r4, #12]
 8011636:	431d      	orrs	r5, r3
 8011638:	81a5      	strh	r5, [r4, #12]
 801163a:	e7cf      	b.n	80115dc <__smakebuf_r+0x18>

0801163c <_fstat_r>:
 801163c:	b538      	push	{r3, r4, r5, lr}
 801163e:	4d07      	ldr	r5, [pc, #28]	; (801165c <_fstat_r+0x20>)
 8011640:	2300      	movs	r3, #0
 8011642:	4604      	mov	r4, r0
 8011644:	4608      	mov	r0, r1
 8011646:	4611      	mov	r1, r2
 8011648:	602b      	str	r3, [r5, #0]
 801164a:	f7f4 f9dc 	bl	8005a06 <_fstat>
 801164e:	1c43      	adds	r3, r0, #1
 8011650:	d102      	bne.n	8011658 <_fstat_r+0x1c>
 8011652:	682b      	ldr	r3, [r5, #0]
 8011654:	b103      	cbz	r3, 8011658 <_fstat_r+0x1c>
 8011656:	6023      	str	r3, [r4, #0]
 8011658:	bd38      	pop	{r3, r4, r5, pc}
 801165a:	bf00      	nop
 801165c:	20000a38 	.word	0x20000a38

08011660 <_isatty_r>:
 8011660:	b538      	push	{r3, r4, r5, lr}
 8011662:	4d06      	ldr	r5, [pc, #24]	; (801167c <_isatty_r+0x1c>)
 8011664:	2300      	movs	r3, #0
 8011666:	4604      	mov	r4, r0
 8011668:	4608      	mov	r0, r1
 801166a:	602b      	str	r3, [r5, #0]
 801166c:	f7f4 f9db 	bl	8005a26 <_isatty>
 8011670:	1c43      	adds	r3, r0, #1
 8011672:	d102      	bne.n	801167a <_isatty_r+0x1a>
 8011674:	682b      	ldr	r3, [r5, #0]
 8011676:	b103      	cbz	r3, 801167a <_isatty_r+0x1a>
 8011678:	6023      	str	r3, [r4, #0]
 801167a:	bd38      	pop	{r3, r4, r5, pc}
 801167c:	20000a38 	.word	0x20000a38

08011680 <_sbrk_r>:
 8011680:	b538      	push	{r3, r4, r5, lr}
 8011682:	4d06      	ldr	r5, [pc, #24]	; (801169c <_sbrk_r+0x1c>)
 8011684:	2300      	movs	r3, #0
 8011686:	4604      	mov	r4, r0
 8011688:	4608      	mov	r0, r1
 801168a:	602b      	str	r3, [r5, #0]
 801168c:	f7f4 f9e4 	bl	8005a58 <_sbrk>
 8011690:	1c43      	adds	r3, r0, #1
 8011692:	d102      	bne.n	801169a <_sbrk_r+0x1a>
 8011694:	682b      	ldr	r3, [r5, #0]
 8011696:	b103      	cbz	r3, 801169a <_sbrk_r+0x1a>
 8011698:	6023      	str	r3, [r4, #0]
 801169a:	bd38      	pop	{r3, r4, r5, pc}
 801169c:	20000a38 	.word	0x20000a38

080116a0 <__assert_func>:
 80116a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116a2:	4614      	mov	r4, r2
 80116a4:	461a      	mov	r2, r3
 80116a6:	4b09      	ldr	r3, [pc, #36]	; (80116cc <__assert_func+0x2c>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	4605      	mov	r5, r0
 80116ac:	68d8      	ldr	r0, [r3, #12]
 80116ae:	b14c      	cbz	r4, 80116c4 <__assert_func+0x24>
 80116b0:	4b07      	ldr	r3, [pc, #28]	; (80116d0 <__assert_func+0x30>)
 80116b2:	9100      	str	r1, [sp, #0]
 80116b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116b8:	4906      	ldr	r1, [pc, #24]	; (80116d4 <__assert_func+0x34>)
 80116ba:	462b      	mov	r3, r5
 80116bc:	f000 f824 	bl	8011708 <fiprintf>
 80116c0:	f000 f834 	bl	801172c <abort>
 80116c4:	4b04      	ldr	r3, [pc, #16]	; (80116d8 <__assert_func+0x38>)
 80116c6:	461c      	mov	r4, r3
 80116c8:	e7f3      	b.n	80116b2 <__assert_func+0x12>
 80116ca:	bf00      	nop
 80116cc:	20000208 	.word	0x20000208
 80116d0:	0801273d 	.word	0x0801273d
 80116d4:	0801274a 	.word	0x0801274a
 80116d8:	08012778 	.word	0x08012778

080116dc <_calloc_r>:
 80116dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116de:	fba1 2402 	umull	r2, r4, r1, r2
 80116e2:	b94c      	cbnz	r4, 80116f8 <_calloc_r+0x1c>
 80116e4:	4611      	mov	r1, r2
 80116e6:	9201      	str	r2, [sp, #4]
 80116e8:	f7fe fffc 	bl	80106e4 <_malloc_r>
 80116ec:	9a01      	ldr	r2, [sp, #4]
 80116ee:	4605      	mov	r5, r0
 80116f0:	b930      	cbnz	r0, 8011700 <_calloc_r+0x24>
 80116f2:	4628      	mov	r0, r5
 80116f4:	b003      	add	sp, #12
 80116f6:	bd30      	pop	{r4, r5, pc}
 80116f8:	220c      	movs	r2, #12
 80116fa:	6002      	str	r2, [r0, #0]
 80116fc:	2500      	movs	r5, #0
 80116fe:	e7f8      	b.n	80116f2 <_calloc_r+0x16>
 8011700:	4621      	mov	r1, r4
 8011702:	f7fd fcfb 	bl	800f0fc <memset>
 8011706:	e7f4      	b.n	80116f2 <_calloc_r+0x16>

08011708 <fiprintf>:
 8011708:	b40e      	push	{r1, r2, r3}
 801170a:	b503      	push	{r0, r1, lr}
 801170c:	4601      	mov	r1, r0
 801170e:	ab03      	add	r3, sp, #12
 8011710:	4805      	ldr	r0, [pc, #20]	; (8011728 <fiprintf+0x20>)
 8011712:	f853 2b04 	ldr.w	r2, [r3], #4
 8011716:	6800      	ldr	r0, [r0, #0]
 8011718:	9301      	str	r3, [sp, #4]
 801171a:	f7ff fd65 	bl	80111e8 <_vfiprintf_r>
 801171e:	b002      	add	sp, #8
 8011720:	f85d eb04 	ldr.w	lr, [sp], #4
 8011724:	b003      	add	sp, #12
 8011726:	4770      	bx	lr
 8011728:	20000208 	.word	0x20000208

0801172c <abort>:
 801172c:	b508      	push	{r3, lr}
 801172e:	2006      	movs	r0, #6
 8011730:	f000 f82c 	bl	801178c <raise>
 8011734:	2001      	movs	r0, #1
 8011736:	f7f4 f933 	bl	80059a0 <_exit>

0801173a <_raise_r>:
 801173a:	291f      	cmp	r1, #31
 801173c:	b538      	push	{r3, r4, r5, lr}
 801173e:	4604      	mov	r4, r0
 8011740:	460d      	mov	r5, r1
 8011742:	d904      	bls.n	801174e <_raise_r+0x14>
 8011744:	2316      	movs	r3, #22
 8011746:	6003      	str	r3, [r0, #0]
 8011748:	f04f 30ff 	mov.w	r0, #4294967295
 801174c:	bd38      	pop	{r3, r4, r5, pc}
 801174e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011750:	b112      	cbz	r2, 8011758 <_raise_r+0x1e>
 8011752:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011756:	b94b      	cbnz	r3, 801176c <_raise_r+0x32>
 8011758:	4620      	mov	r0, r4
 801175a:	f000 f831 	bl	80117c0 <_getpid_r>
 801175e:	462a      	mov	r2, r5
 8011760:	4601      	mov	r1, r0
 8011762:	4620      	mov	r0, r4
 8011764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011768:	f000 b818 	b.w	801179c <_kill_r>
 801176c:	2b01      	cmp	r3, #1
 801176e:	d00a      	beq.n	8011786 <_raise_r+0x4c>
 8011770:	1c59      	adds	r1, r3, #1
 8011772:	d103      	bne.n	801177c <_raise_r+0x42>
 8011774:	2316      	movs	r3, #22
 8011776:	6003      	str	r3, [r0, #0]
 8011778:	2001      	movs	r0, #1
 801177a:	e7e7      	b.n	801174c <_raise_r+0x12>
 801177c:	2400      	movs	r4, #0
 801177e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011782:	4628      	mov	r0, r5
 8011784:	4798      	blx	r3
 8011786:	2000      	movs	r0, #0
 8011788:	e7e0      	b.n	801174c <_raise_r+0x12>
	...

0801178c <raise>:
 801178c:	4b02      	ldr	r3, [pc, #8]	; (8011798 <raise+0xc>)
 801178e:	4601      	mov	r1, r0
 8011790:	6818      	ldr	r0, [r3, #0]
 8011792:	f7ff bfd2 	b.w	801173a <_raise_r>
 8011796:	bf00      	nop
 8011798:	20000208 	.word	0x20000208

0801179c <_kill_r>:
 801179c:	b538      	push	{r3, r4, r5, lr}
 801179e:	4d07      	ldr	r5, [pc, #28]	; (80117bc <_kill_r+0x20>)
 80117a0:	2300      	movs	r3, #0
 80117a2:	4604      	mov	r4, r0
 80117a4:	4608      	mov	r0, r1
 80117a6:	4611      	mov	r1, r2
 80117a8:	602b      	str	r3, [r5, #0]
 80117aa:	f7f4 f8e9 	bl	8005980 <_kill>
 80117ae:	1c43      	adds	r3, r0, #1
 80117b0:	d102      	bne.n	80117b8 <_kill_r+0x1c>
 80117b2:	682b      	ldr	r3, [r5, #0]
 80117b4:	b103      	cbz	r3, 80117b8 <_kill_r+0x1c>
 80117b6:	6023      	str	r3, [r4, #0]
 80117b8:	bd38      	pop	{r3, r4, r5, pc}
 80117ba:	bf00      	nop
 80117bc:	20000a38 	.word	0x20000a38

080117c0 <_getpid_r>:
 80117c0:	f7f4 b8d6 	b.w	8005970 <_getpid>

080117c4 <_init>:
 80117c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117c6:	bf00      	nop
 80117c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117ca:	bc08      	pop	{r3}
 80117cc:	469e      	mov	lr, r3
 80117ce:	4770      	bx	lr

080117d0 <_fini>:
 80117d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117d2:	bf00      	nop
 80117d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117d6:	bc08      	pop	{r3}
 80117d8:	469e      	mov	lr, r3
 80117da:	4770      	bx	lr
