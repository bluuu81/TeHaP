
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800abd0  0800abd0  0001abd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b10c  0800b10c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b10c  0800b10c  0001b10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b114  0800b114  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b114  0800b114  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b118  0800b118  0001b118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b11c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  200001dc  0800b2f8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0800b2f8  00020798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c58f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a7a  00000000  00000000  0003c79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00040218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e0  00000000  00000000  00041a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a1b  00000000  00000000  00043148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3a4  00000000  00000000  00069b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5eb7  00000000  00000000  00087f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ddbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007828  00000000  00000000  0016de10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abb4 	.word	0x0800abb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800abb4 	.word	0x0800abb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 8000f50:	217f      	movs	r1, #127	; 0x7f
 8000f52:	4806      	ldr	r0, [pc, #24]	; (8000f6c <ADC_DMA_Start+0x20>)
 8000f54:	f002 fca0 	bl	8003898 <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 8000f58:	200a      	movs	r0, #10
 8000f5a:	f001 fb1b 	bl	8002594 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 8000f5e:	2205      	movs	r2, #5
 8000f60:	4903      	ldr	r1, [pc, #12]	; (8000f70 <ADC_DMA_Start+0x24>)
 8000f62:	4802      	ldr	r0, [pc, #8]	; (8000f6c <ADC_DMA_Start+0x20>)
 8000f64:	f001 fe70 	bl	8002c48 <HAL_ADC_Start_DMA>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000044c 	.word	0x2000044c
 8000f70:	200001f8 	.word	0x200001f8
 8000f74:	00000000 	.word	0x00000000

08000f78 <GET_MCU_Temp>:

float GET_MCU_Temp()
{
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	    uint16_t tmp=0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	81fb      	strh	r3, [r7, #14]
	    float temperature;
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <GET_MCU_Temp+0xd8>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	817b      	strh	r3, [r7, #10]
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));
 8000f88:	4b32      	ldr	r3, [pc, #200]	; (8001054 <GET_MCU_Temp+0xdc>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	813b      	strh	r3, [r7, #8]

	  	for(uint8_t i=0; i<5;i+=1)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	737b      	strb	r3, [r7, #13]
 8000f92:	e00a      	b.n	8000faa <GET_MCU_Temp+0x32>
	  	{
	  		tmp+=adc_data[i];
 8000f94:	7b7b      	ldrb	r3, [r7, #13]
 8000f96:	4a30      	ldr	r2, [pc, #192]	; (8001058 <GET_MCU_Temp+0xe0>)
 8000f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	81fb      	strh	r3, [r7, #14]
	  	for(uint8_t i=0; i<5;i+=1)
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	737b      	strb	r3, [r7, #13]
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d9f1      	bls.n	8000f94 <GET_MCU_Temp+0x1c>
	  	}
	  	tmp*=0.2f;
 8000fb0:	89fb      	ldrh	r3, [r7, #14]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800105c <GET_MCU_Temp+0xe4>
 8000fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc6:	ee17 3a90 	vmov	r3, s15
 8000fca:	81fb      	strh	r3, [r7, #14]

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 8000fcc:	897b      	ldrh	r3, [r7, #10]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	ee17 0a90 	vmov	r0, s15
 8000fe8:	f7ff faae 	bl	8000548 <__aeabi_f2d>
 8000fec:	a316      	add	r3, pc, #88	; (adr r3, 8001048 <GET_MCU_Temp+0xd0>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fb01 	bl	80005f8 <__aeabi_dmul>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4614      	mov	r4, r2
 8000ffc:	461d      	mov	r5, r3
 8000ffe:	893b      	ldrh	r3, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa8f 	bl	8000524 <__aeabi_i2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4620      	mov	r0, r4
 800100c:	4629      	mov	r1, r5
 800100e:	f7ff fc1d 	bl	800084c <__aeabi_ddiv>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <GET_MCU_Temp+0xe8>)
 8001020:	f7ff f934 	bl	800028c <__adddf3>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4610      	mov	r0, r2
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fdbc 	bl	8000ba8 <__aeabi_d2f>
 8001030:	4603      	mov	r3, r0
 8001032:	607b      	str	r3, [r7, #4]
	  	return temperature;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	ee07 3a90 	vmov	s15, r3
}
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bdb0      	pop	{r4, r5, r7, pc}
 8001044:	f3af 8000 	nop.w
 8001048:	33333333 	.word	0x33333333
 800104c:	40113333 	.word	0x40113333
 8001050:	1fff75a8 	.word	0x1fff75a8
 8001054:	1fff75ca 	.word	0x1fff75ca
 8001058:	200001f8 	.word	0x200001f8
 800105c:	3e4ccccd 	.word	0x3e4ccccd
 8001060:	40390000 	.word	0x40390000

08001064 <BQ25798_check>:
#define BQ25798_ADDR 0x6B


// Checking
uint8_t BQ25798_check()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 800106a:	4819      	ldr	r0, [pc, #100]	; (80010d0 <BQ25798_check+0x6c>)
 800106c:	f007 fc6a 	bl	8008944 <iprintf>
	for (int i = 0; i < 10; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	e01d      	b.n	80010b2 <BQ25798_check+0x4e>
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 8001076:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800107a:	2203      	movs	r2, #3
 800107c:	216b      	movs	r1, #107	; 0x6b
 800107e:	4815      	ldr	r0, [pc, #84]	; (80010d4 <BQ25798_check+0x70>)
 8001080:	f003 fb03 	bl	800468a <HAL_I2C_IsDeviceReady>
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(100);
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f001 fa83 	bl	8002594 <HAL_Delay>
	    if (status == HAL_OK) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <BQ25798_check+0x3c>
	    	printf("OK !\r\n");
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <BQ25798_check+0x74>)
 8001096:	f007 fcdb 	bl	8008a50 <puts>
	    	res = OK;
 800109a:	2301      	movs	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
	        break;
 800109e:	e00b      	b.n	80010b8 <BQ25798_check+0x54>
	    } else {
	    	res = FAULT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]
	    	HAL_Delay(500);
 80010a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a8:	f001 fa74 	bl	8002594 <HAL_Delay>
	for (int i = 0; i < 10; i++) {
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3301      	adds	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	ddde      	ble.n	8001076 <BQ25798_check+0x12>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <BQ25798_check+0x60>
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <BQ25798_check+0x78>)
 80010c0:	f007 fcc6 	bl	8008a50 <puts>
	return res;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0800abd0 	.word	0x0800abd0
 80010d4:	2000051c 	.word	0x2000051c
 80010d8:	0800abe8 	.word	0x0800abe8
 80010dc:	0800abf0 	.word	0x0800abf0

080010e0 <_write>:

static char clibuf[32];
static int cliptr;

int _write(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <_write+0x28>)
 80010f8:	f005 fcc4 	bl	8006a84 <HAL_UART_Transmit>
    return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000664 	.word	0x20000664

0800110c <HAL_UART_RxCpltCallback>:
{
    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <HAL_UART_RxCpltCallback+0x38>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d105      	bne.n	8001128 <HAL_UART_RxCpltCallback+0x1c>
 800111c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001120:	4909      	ldr	r1, [pc, #36]	; (8001148 <HAL_UART_RxCpltCallback+0x3c>)
 8001122:	4808      	ldr	r0, [pc, #32]	; (8001144 <HAL_UART_RxCpltCallback+0x38>)
 8001124:	f005 fd42 	bl	8006bac <HAL_UART_Receive_IT>
	if(huart == &huart2) HAL_UART_Receive_IT(&huart2, sim_rx_buf, SIM_BUF_SIZE); // Interrupt start Uart2 RX
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_UART_RxCpltCallback+0x40>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d105      	bne.n	800113c <HAL_UART_RxCpltCallback+0x30>
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	4906      	ldr	r1, [pc, #24]	; (8001150 <HAL_UART_RxCpltCallback+0x44>)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_UART_RxCpltCallback+0x40>)
 8001138:	f005 fd38 	bl	8006bac <HAL_UART_Receive_IT>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000664 	.word	0x20000664
 8001148:	20000204 	.word	0x20000204
 800114c:	200006e8 	.word	0x200006e8
 8001150:	20000408 	.word	0x20000408

08001154 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    HAL_UART_RxCpltCallback(huart);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ffd5 	bl	800110c <HAL_UART_RxCpltCallback>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <UART_has_char>:

uint16_t UART_has_char()      // Return number of bytes in buffer
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <UART_has_char+0x3c>)
 8001172:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8001176:	461a      	mov	r2, r3
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <UART_has_char+0x3c>)
 800117a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800117e:	b29b      	uxth	r3, r3
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <UART_has_char+0x40>)
 8001188:	8812      	ldrh	r2, [r2, #0]
 800118a:	1a9b      	subs	r3, r3, r2
 800118c:	425a      	negs	r2, r3
 800118e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001196:	bf58      	it	pl
 8001198:	4253      	negpl	r3, r2
 800119a:	b29b      	uxth	r3, r3
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000664 	.word	0x20000664
 80011ac:	20000404 	.word	0x20000404

080011b0 <UART_receive>:

uint8_t UART_receive()       // Receive byte from buffer
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <UART_receive+0x38>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	b291      	uxth	r1, r2
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <UART_receive+0x38>)
 80011c0:	8011      	strh	r1, [r2, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <UART_receive+0x3c>)
 80011c6:	5c9b      	ldrb	r3, [r3, r2]
 80011c8:	71fb      	strb	r3, [r7, #7]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <UART_receive+0x38>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d2:	d302      	bcc.n	80011da <UART_receive+0x2a>
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <UART_receive+0x38>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]
    return tmp;
 80011da:	79fb      	ldrb	r3, [r7, #7]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000404 	.word	0x20000404
 80011ec:	20000204 	.word	0x20000204

080011f0 <find>:

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e031      	b.n	8001262 <find+0x72>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e011      	b.n	800122c <find+0x3c>
			if(!arg2[k+1]) return (clibuf+(j+1));
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d104      	bne.n	8001220 <find+0x30>
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <find+0x8c>)
 800121c:	4413      	add	r3, r2
 800121e:	e027      	b.n	8001270 <find+0x80>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	3301      	adds	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <find+0x8c>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	72fb      	strb	r3, [r7, #11]
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	3301      	adds	r3, #1
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <find+0x90>)
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d102      	bne.n	800124e <find+0x5e>
 8001248:	7afb      	ldrb	r3, [r7, #11]
 800124a:	3320      	adds	r3, #32
 800124c:	e000      	b.n	8001250 <find+0x60>
 800124e:	7afb      	ldrb	r3, [r7, #11]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	440a      	add	r2, r1
 8001256:	7812      	ldrb	r2, [r2, #0]
 8001258:	4293      	cmp	r3, r2
 800125a:	d0d5      	beq.n	8001208 <find+0x18>
	for(i=0; clibuf[i]; i++)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	4a06      	ldr	r2, [pc, #24]	; (800127c <find+0x8c>)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1c7      	bne.n	80011fe <find+0xe>
	return NULL;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000428 	.word	0x20000428
 8001280:	0800ad2c 	.word	0x0800ad2c

08001284 <CLI>:
    }
    *val = tmp;
    return p;
}

void CLI() {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
    int len = UART_has_char();
 800128a:	f7ff ff6f 	bl	800116c <UART_has_char>
 800128e:	4603      	mov	r3, r0
 8001290:	603b      	str	r3, [r7, #0]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00f      	beq.n	80012b8 <CLI+0x34>
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	e008      	b.n	80012b0 <CLI+0x2c>
 800129e:	f7ff ff87 	bl	80011b0 <UART_receive>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f80b 	bl	80012c0 <CLI_proc>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3301      	adds	r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf2      	blt.n	800129e <CLI+0x1a>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <CLI_proc>:

void CLI_proc(char ch)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	char *p;
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 80012ca:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <CLI_proc+0x88>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b1f      	cmp	r3, #31
 80012d0:	d807      	bhi.n	80012e2 <CLI_proc+0x22>
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <CLI_proc+0x88>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	491b      	ldr	r1, [pc, #108]	; (8001348 <CLI_proc+0x88>)
 80012da:	600a      	str	r2, [r1, #0]
 80012dc:	491b      	ldr	r1, [pc, #108]	; (800134c <CLI_proc+0x8c>)
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	54ca      	strb	r2, [r1, r3]
	if(ch == 10)	// LF
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b0a      	cmp	r3, #10
 80012e6:	d12c      	bne.n	8001342 <CLI_proc+0x82>
	{
	    if(clibuf[cliptr-1] == 13) cliptr--;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <CLI_proc+0x88>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <CLI_proc+0x8c>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	2b0d      	cmp	r3, #13
 80012f4:	d104      	bne.n	8001300 <CLI_proc+0x40>
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <CLI_proc+0x88>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <CLI_proc+0x88>)
 80012fe:	6013      	str	r3, [r2, #0]
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <CLI_proc+0x88>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <CLI_proc+0x8c>)
 8001308:	4413      	add	r3, r2
 800130a:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <CLI_proc+0x88>)
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	f1c2 0220 	rsb	r2, r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f006 fea3 	bl	8008060 <memset>
		cliptr = 0;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <CLI_proc+0x88>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
// Main commands ------------------------------------------------------------------------------
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{help(); return;}
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <CLI_proc+0x90>)
 8001322:	f7ff ff65 	bl	80011f0 <find>
 8001326:	4603      	mov	r3, r0
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <CLI_proc+0x94>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d006      	beq.n	800133c <CLI_proc+0x7c>
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <CLI_proc+0x98>)
 8001330:	f7ff ff5e 	bl	80011f0 <find>
 8001334:	4603      	mov	r3, r0
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <CLI_proc+0x9c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d102      	bne.n	8001342 <CLI_proc+0x82>
 800133c:	f000 f810 	bl	8001360 <help>
 8001340:	bf00      	nop
//                return;
//            }
//
//        }
//	}
}
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000448 	.word	0x20000448
 800134c:	20000428 	.word	0x20000428
 8001350:	0800ac20 	.word	0x0800ac20
 8001354:	20000429 	.word	0x20000429
 8001358:	0800ac24 	.word	0x0800ac24
 800135c:	2000042c 	.word	0x2000042c

08001360 <help>:

void help()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af02      	add	r7, sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8001366:	a327      	add	r3, pc, #156	; (adr r3, 8001404 <help+0xa4>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	e9cd 2300 	strd	r2, r3, [sp]
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <help+0x80>)
 8001376:	481b      	ldr	r0, [pc, #108]	; (80013e4 <help+0x84>)
 8001378:	f007 fae4 	bl	8008944 <iprintf>
	printf("Charger state : ");
 800137c:	481a      	ldr	r0, [pc, #104]	; (80013e8 <help+0x88>)
 800137e:	f007 fae1 	bl	8008944 <iprintf>
	switch (charger_state)
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <help+0x8c>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d81a      	bhi.n	80013c0 <help+0x60>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <help+0x30>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013a9 	.word	0x080013a9
 8001398:	080013b1 	.word	0x080013b1
 800139c:	080013b9 	.word	0x080013b9
	{
	case 0:
		printf("FAULT\r\n");
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <help+0x90>)
 80013a2:	f007 fb55 	bl	8008a50 <puts>
		break;
 80013a6:	e00b      	b.n	80013c0 <help+0x60>
	case 1:
		printf("OK\r\n");
 80013a8:	4812      	ldr	r0, [pc, #72]	; (80013f4 <help+0x94>)
 80013aa:	f007 fb51 	bl	8008a50 <puts>
		break;
 80013ae:	e007      	b.n	80013c0 <help+0x60>
	case 2:
		printf("No charging ...\r\n");
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <help+0x98>)
 80013b2:	f007 fb4d 	bl	8008a50 <puts>
		break;
 80013b6:	e003      	b.n	80013c0 <help+0x60>
	case 3:
		printf("Charging ...\r\n");
 80013b8:	4810      	ldr	r0, [pc, #64]	; (80013fc <help+0x9c>)
 80013ba:	f007 fb49 	bl	8008a50 <puts>
		break;
 80013be:	bf00      	nop
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 80013c0:	f7ff fdda 	bl	8000f78 <GET_MCU_Temp>
 80013c4:	ee10 3a10 	vmov	r3, s0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8bd 	bl	8000548 <__aeabi_f2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <help+0xa0>)
 80013d4:	f007 fab6 	bl	8008944 <iprintf>
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	3ff00000 	.word	0x3ff00000
 80013e4:	0800ac2c 	.word	0x0800ac2c
 80013e8:	0800ac50 	.word	0x0800ac50
 80013ec:	2000076c 	.word	0x2000076c
 80013f0:	0800ac64 	.word	0x0800ac64
 80013f4:	0800ac6c 	.word	0x0800ac6c
 80013f8:	0800ac70 	.word	0x0800ac70
 80013fc:	0800ac84 	.word	0x0800ac84
 8001400:	0800ac94 	.word	0x0800ac94
 8001404:	a0000000 	.word	0xa0000000
 8001408:	3fc99999 	.word	0x3fc99999

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001412:	f001 f84a 	bl	80024aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001416:	f000 f85d 	bl	80014d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141a:	f000 fb07 	bl	8001a2c <MX_GPIO_Init>
  MX_DMA_Init();
 800141e:	f000 fae7 	bl	80019f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001422:	f000 f8bb 	bl	800159c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001426:	f000 f94b 	bl	80016c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800142a:	f000 f989 	bl	8001740 <MX_I2C2_Init>
  MX_I2C3_Init();
 800142e:	f000 f9c7 	bl	80017c0 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001432:	f000 fa7d 	bl	8001930 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001436:	f000 faab 	bl	8001990 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800143a:	f000 f91f 	bl	800167c <MX_CRC_Init>
  MX_TIM16_Init();
 800143e:	f000 f9ff 	bl	8001840 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001442:	f000 f896 	bl	8001572 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);	// LED2 na PWM
 8001446:	2100      	movs	r1, #0
 8001448:	481c      	ldr	r0, [pc, #112]	; (80014bc <main+0xb0>)
 800144a:	f004 fd5b 	bl	8005f04 <HAL_TIM_PWM_Start>
  HAL_UART_RxCpltCallback(&huart1); //CLI
 800144e:	481c      	ldr	r0, [pc, #112]	; (80014c0 <main+0xb4>)
 8001450:	f7ff fe5c 	bl	800110c <HAL_UART_RxCpltCallback>
  HAL_UART_RxCpltCallback(&huart2); //SIM
 8001454:	481b      	ldr	r0, [pc, #108]	; (80014c4 <main+0xb8>)
 8001456:	f7ff fe59 	bl	800110c <HAL_UART_RxCpltCallback>
  printf("Initializing ...\r\n");
 800145a:	481b      	ldr	r0, [pc, #108]	; (80014c8 <main+0xbc>)
 800145c:	f007 faf8 	bl	8008a50 <puts>
//  check_powerOn();
  charger_state = BQ25798_check();
 8001460:	f7ff fe00 	bl	8001064 <BQ25798_check>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <main+0xc0>)
 800146a:	701a      	strb	r2, [r3, #0]
  LED1_ON();
 800146c:	2200      	movs	r2, #0
 800146e:	2120      	movs	r1, #32
 8001470:	4817      	ldr	r0, [pc, #92]	; (80014d0 <main+0xc4>)
 8001472:	f003 f863 	bl	800453c <HAL_GPIO_WritePin>
  LED2_OFF();
 8001476:	2000      	movs	r0, #0
 8001478:	f000 ffd6 	bl	8002428 <setLed2>
  ADC_DMA_Start();
 800147c:	f7ff fd66 	bl	8000f4c <ADC_DMA_Start>
  uint32_t ticks1s = HAL_GetTick();
 8001480:	f001 f87c 	bl	800257c <HAL_GetTick>
 8001484:	6078      	str	r0, [r7, #4]
  uint32_t ticks30ms = HAL_GetTick();
 8001486:	f001 f879 	bl	800257c <HAL_GetTick>
 800148a:	6038      	str	r0, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  thp_loop();
 800148c:	f000 ffde 	bl	800244c <thp_loop>
	  if(HAL_GetTick()-ticks1s >= 1000)
 8001490:	f001 f874 	bl	800257c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800149e:	d302      	bcc.n	80014a6 <main+0x9a>
	  {
	  	    ticks1s = HAL_GetTick();
 80014a0:	f001 f86c 	bl	800257c <HAL_GetTick>
 80014a4:	6078      	str	r0, [r7, #4]
	  	//    ADC_Print();
	  }
	  if(HAL_GetTick()-ticks30ms >= 30)
 80014a6:	f001 f869 	bl	800257c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b1d      	cmp	r3, #29
 80014b2:	d9eb      	bls.n	800148c <main+0x80>
	  {
	  	    ticks30ms = HAL_GetTick();
 80014b4:	f001 f862 	bl	800257c <HAL_GetTick>
 80014b8:	6038      	str	r0, [r7, #0]
	  thp_loop();
 80014ba:	e7e7      	b.n	800148c <main+0x80>
 80014bc:	20000618 	.word	0x20000618
 80014c0:	20000664 	.word	0x20000664
 80014c4:	200006e8 	.word	0x200006e8
 80014c8:	0800acb0 	.word	0x0800acb0
 80014cc:	2000076c 	.word	0x2000076c
 80014d0:	48000400 	.word	0x48000400

080014d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b096      	sub	sp, #88	; 0x58
 80014d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	2244      	movs	r2, #68	; 0x44
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f006 fdbc 	bl	8008060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014fa:	f003 fab3 	bl	8004a64 <HAL_PWREx_ControlVoltageScaling>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001504:	f000 fb54 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001508:	2301      	movs	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001510:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	2303      	movs	r3, #3
 8001518:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800151e:	230a      	movs	r3, #10
 8001520:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001522:	2307      	movs	r3, #7
 8001524:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800152a:	2302      	movs	r3, #2
 800152c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4618      	mov	r0, r3
 8001534:	f003 faec 	bl	8004b10 <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800153e:	f000 fb37 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	2303      	movs	r3, #3
 8001548:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	2102      	movs	r1, #2
 800155a:	4618      	mov	r0, r3
 800155c:	f003 feec 	bl	8005338 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001566:	f000 fb23 	bl	8001bb0 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3758      	adds	r7, #88	; 0x58
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2025      	movs	r0, #37	; 0x25
 800157c:	f002 fac7 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001580:	2025      	movs	r0, #37	; 0x25
 8001582:	f002 fae0 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2026      	movs	r0, #38	; 0x26
 800158c:	f002 fabf 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001590:	2026      	movs	r0, #38	; 0x26
 8001592:	f002 fad8 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015b4:	4a2f      	ldr	r2, [pc, #188]	; (8001674 <MX_ADC1_Init+0xd8>)
 80015b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015d4:	2204      	movs	r2, #4
 80015d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_ADC1_Init+0xd4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_ADC1_Init+0xd4>)
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_ADC1_Init+0xd4>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_ADC1_Init+0xd4>)
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_ADC1_Init+0xd4>)
 8001616:	220c      	movs	r2, #12
 8001618:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_ADC1_Init+0xd4>)
 800161c:	2200      	movs	r2, #0
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <MX_ADC1_Init+0xd4>)
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_ADC1_Init+0xd4>)
 8001628:	2201      	movs	r2, #1
 800162a:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800162c:	4810      	ldr	r0, [pc, #64]	; (8001670 <MX_ADC1_Init+0xd4>)
 800162e:	f001 f9c3 	bl	80029b8 <HAL_ADC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001638:	f000 faba 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_ADC1_Init+0xdc>)
 800163e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001640:	2306      	movs	r3, #6
 8001642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001644:	2307      	movs	r3, #7
 8001646:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001648:	237f      	movs	r3, #127	; 0x7f
 800164a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800164c:	2304      	movs	r3, #4
 800164e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_ADC1_Init+0xd4>)
 800165a:	f001 fb97 	bl	8002d8c <HAL_ADC_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001664:	f000 faa4 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2000044c 	.word	0x2000044c
 8001674:	50040000 	.word	0x50040000
 8001678:	c7520000 	.word	0xc7520000

0800167c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_CRC_Init+0x3c>)
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <MX_CRC_Init+0x40>)
 8001684:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_CRC_Init+0x3c>)
 8001688:	2200      	movs	r2, #0
 800168a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_CRC_Init+0x3c>)
 800168e:	2200      	movs	r2, #0
 8001690:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_CRC_Init+0x3c>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_CRC_Init+0x3c>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_CRC_Init+0x3c>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_CRC_Init+0x3c>)
 80016a6:	f002 fa6f 	bl	8003b88 <HAL_CRC_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80016b0:	f000 fa7e 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200004f8 	.word	0x200004f8
 80016bc:	40023000 	.word	0x40023000

080016c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_I2C1_Init+0x74>)
 80016c6:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <MX_I2C1_Init+0x78>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_I2C1_Init+0x74>)
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <MX_I2C1_Init+0x7c>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_I2C1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <MX_I2C1_Init+0x74>)
 80016d8:	2201      	movs	r2, #1
 80016da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_I2C1_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_I2C1_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_I2C1_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_I2C1_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_I2C1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <MX_I2C1_Init+0x74>)
 80016fc:	f002 ff36 	bl	800456c <HAL_I2C_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001706:	f000 fa53 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <MX_I2C1_Init+0x74>)
 800170e:	f003 f903 	bl	8004918 <HAL_I2CEx_ConfigAnalogFilter>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001718:	f000 fa4a 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800171c:	2100      	movs	r1, #0
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_I2C1_Init+0x74>)
 8001720:	f003 f945 	bl	80049ae <HAL_I2CEx_ConfigDigitalFilter>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800172a:	f000 fa41 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000051c 	.word	0x2000051c
 8001738:	40005400 	.word	0x40005400
 800173c:	00301347 	.word	0x00301347

08001740 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001746:	4a1c      	ldr	r2, [pc, #112]	; (80017b8 <MX_I2C2_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_I2C2_Init+0x74>)
 800174c:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <MX_I2C2_Init+0x7c>)
 800174e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001758:	2201      	movs	r2, #1
 800175a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_I2C2_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_I2C2_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_I2C2_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <MX_I2C2_Init+0x74>)
 800177c:	f002 fef6 	bl	800456c <HAL_I2C_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001786:	f000 fa13 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	4809      	ldr	r0, [pc, #36]	; (80017b4 <MX_I2C2_Init+0x74>)
 800178e:	f003 f8c3 	bl	8004918 <HAL_I2CEx_ConfigAnalogFilter>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001798:	f000 fa0a 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800179c:	2100      	movs	r1, #0
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_I2C2_Init+0x74>)
 80017a0:	f003 f905 	bl	80049ae <HAL_I2CEx_ConfigDigitalFilter>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017aa:	f000 fa01 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000570 	.word	0x20000570
 80017b8:	40005800 	.word	0x40005800
 80017bc:	00301347 	.word	0x00301347

080017c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_I2C3_Init+0x74>)
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <MX_I2C3_Init+0x78>)
 80017c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00301347;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_I2C3_Init+0x74>)
 80017cc:	4a1b      	ldr	r2, [pc, #108]	; (800183c <MX_I2C3_Init+0x7c>)
 80017ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_I2C3_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_I2C3_Init+0x74>)
 80017d8:	2201      	movs	r2, #1
 80017da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_I2C3_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_I2C3_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C3_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_I2C3_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C3_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <MX_I2C3_Init+0x74>)
 80017fc:	f002 feb6 	bl	800456c <HAL_I2C_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001806:	f000 f9d3 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	4809      	ldr	r0, [pc, #36]	; (8001834 <MX_I2C3_Init+0x74>)
 800180e:	f003 f883 	bl	8004918 <HAL_I2CEx_ConfigAnalogFilter>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001818:	f000 f9ca 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800181c:	2100      	movs	r1, #0
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_I2C3_Init+0x74>)
 8001820:	f003 f8c5 	bl	80049ae <HAL_I2CEx_ConfigDigitalFilter>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800182a:	f000 f9c1 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200005c4 	.word	0x200005c4
 8001838:	40005c00 	.word	0x40005c00
 800183c:	00301347 	.word	0x00301347

08001840 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b092      	sub	sp, #72	; 0x48
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	222c      	movs	r2, #44	; 0x2c
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f006 fbfd 	bl	8008060 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <MX_TIM16_Init+0xe8>)
 8001868:	4a30      	ldr	r2, [pc, #192]	; (800192c <MX_TIM16_Init+0xec>)
 800186a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 312;
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <MX_TIM16_Init+0xe8>)
 800186e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001872:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <MX_TIM16_Init+0xe8>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256;
 800187a:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <MX_TIM16_Init+0xe8>)
 800187c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001880:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <MX_TIM16_Init+0xe8>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <MX_TIM16_Init+0xe8>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <MX_TIM16_Init+0xe8>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001894:	4824      	ldr	r0, [pc, #144]	; (8001928 <MX_TIM16_Init+0xe8>)
 8001896:	f004 fa7d 	bl	8005d94 <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80018a0:	f000 f986 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018a4:	4820      	ldr	r0, [pc, #128]	; (8001928 <MX_TIM16_Init+0xe8>)
 80018a6:	f004 facc 	bl	8005e42 <HAL_TIM_PWM_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80018b0:	f000 f97e 	bl	8001bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b4:	2360      	movs	r3, #96	; 0x60
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80018bc:	2302      	movs	r3, #2
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c0:	2300      	movs	r3, #0
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80018c4:	2304      	movs	r3, #4
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	4813      	ldr	r0, [pc, #76]	; (8001928 <MX_TIM16_Init+0xe8>)
 80018da:	f004 fbf1 	bl	80060c0 <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80018e4:	f000 f964 	bl	8001bb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001906:	463b      	mov	r3, r7
 8001908:	4619      	mov	r1, r3
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <MX_TIM16_Init+0xe8>)
 800190c:	f004 fff4 	bl	80068f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8001916:	f000 f94b 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800191a:	4803      	ldr	r0, [pc, #12]	; (8001928 <MX_TIM16_Init+0xe8>)
 800191c:	f000 fb30 	bl	8001f80 <HAL_TIM_MspPostInit>

}
 8001920:	bf00      	nop
 8001922:	3748      	adds	r7, #72	; 0x48
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000618 	.word	0x20000618
 800192c:	40014400 	.word	0x40014400

08001930 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <MX_USART1_UART_Init+0x5c>)
 8001938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_USART1_UART_Init+0x58>)
 800193c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_USART1_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART1_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART1_UART_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART1_UART_Init+0x58>)
 8001974:	f005 f838 	bl	80069e8 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800197e:	f000 f917 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000664 	.word	0x20000664
 800198c:	40013800 	.word	0x40013800

08001990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <MX_USART2_UART_Init+0x5c>)
 8001998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USART2_UART_Init+0x58>)
 80019d4:	f005 f808 	bl	80069e8 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019de:	f000 f8e7 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200006e8 	.word	0x200006e8
 80019ec:	40004400 	.word	0x40004400

080019f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_DMA_Init+0x38>)
 80019f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <MX_DMA_Init+0x38>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6493      	str	r3, [r2, #72]	; 0x48
 8001a02:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_DMA_Init+0x38>)
 8001a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	200b      	movs	r0, #11
 8001a14:	f002 f87b 	bl	8003b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a18:	200b      	movs	r0, #11
 8001a1a:	f002 f894 	bl	8003b46 <HAL_NVIC_EnableIRQ>

}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a56      	ldr	r2, [pc, #344]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b54      	ldr	r3, [pc, #336]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5a:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	4a50      	ldr	r2, [pc, #320]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a66:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	4b4b      	ldr	r3, [pc, #300]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	4a4a      	ldr	r2, [pc, #296]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	4a44      	ldr	r2, [pc, #272]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a96:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <MX_GPIO_Init+0x174>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 51cb 	mov.w	r1, #6496	; 0x1960
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f002 fd46 	bl	800453c <HAL_GPIO_WritePin>
                          |BQ_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f248 2121 	movw	r1, #33313	; 0x8221
 8001ab6:	483b      	ldr	r0, [pc, #236]	; (8001ba4 <MX_GPIO_Init+0x178>)
 8001ab8:	f002 fd40 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001abc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4835      	ldr	r0, [pc, #212]	; (8001ba8 <MX_GPIO_Init+0x17c>)
 8001ad2:	f002 fbb9 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001ad6:	f248 0302 	movw	r3, #32770	; 0x8002
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001adc:	2303      	movs	r3, #3
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aee:	f002 fbab 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_UART_RI_Pin */
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 8001af2:	2310      	movs	r3, #16
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b08:	f002 fb9e 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_UART_DTR_Pin SIM_GPS_Pin RST2_Pin BQ_QON_Pin
                           BQ_CE_Pin */
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8001b0c:	f44f 53cb 	mov.w	r3, #6496	; 0x1960
 8001b10:	617b      	str	r3, [r7, #20]
                          |BQ_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b28:	f002 fb8e 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_PWR_Pin RST3_Pin LED1_Pin Main_SW_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin;
 8001b2c:	f248 2321 	movw	r3, #33313	; 0x8221
 8001b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <MX_GPIO_Init+0x178>)
 8001b46:	f002 fb7f 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_WDT_Pin BQ_INT_Pin */
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8001b4a:	f241 0302 	movw	r3, #4098	; 0x1002
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4811      	ldr	r0, [pc, #68]	; (8001ba4 <MX_GPIO_Init+0x178>)
 8001b60:	f002 fb72 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP7_Pin TP8_Pin PB11 PB3 */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8001b64:	f640 430c 	movw	r3, #3084	; 0xc0c
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <MX_GPIO_Init+0x178>)
 8001b7a:	f002 fb65 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b82:	2303      	movs	r3, #3
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <MX_GPIO_Init+0x180>)
 8001b92:	f002 fb59 	bl	8004248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	48000400 	.word	0x48000400
 8001ba8:	48000800 	.word	0x48000800
 8001bac:	48001c00 	.word	0x48001c00

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <Error_Handler+0x8>
	...

08001bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_MspInit+0x48>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <HAL_MspInit+0x48>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_MspInit+0x48>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_MspInit+0x48>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	4a09      	ldr	r2, [pc, #36]	; (8001c04 <HAL_MspInit+0x48>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6593      	str	r3, [r2, #88]	; 0x58
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <HAL_MspInit+0x48>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	603b      	str	r3, [r7, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2005      	movs	r0, #5
 8001bf8:	f001 ff89 	bl	8003b0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000

08001c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b09a      	sub	sp, #104	; 0x68
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	225c      	movs	r2, #92	; 0x5c
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f006 fa21 	bl	8008060 <memset>
  if(hadc->Instance==ADC1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2e      	ldr	r2, [pc, #184]	; (8001cdc <HAL_ADC_MspInit+0xd4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d155      	bne.n	8001cd4 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c2c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c32:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001c34:	2303      	movs	r3, #3
 8001c36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c40:	2307      	movs	r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fd92 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8001c62:	f7ff ffa5 	bl	8001bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_ADC_MspInit+0xd8>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <HAL_ADC_MspInit+0xd8>)
 8001c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_ADC_MspInit+0xd8>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001c80:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_ADC_MspInit+0xe0>)
 8001c82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001caa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001cae:	2220      	movs	r2, #32
 8001cb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cb8:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001cba:	f002 f84f 	bl	8003d5c <HAL_DMA_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001cc4:	f7ff ff74 	bl	8001bb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001ccc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <HAL_ADC_MspInit+0xdc>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cd4:	bf00      	nop
 8001cd6:	3768      	adds	r7, #104	; 0x68
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	50040000 	.word	0x50040000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	200004b0 	.word	0x200004b0
 8001ce8:	40020008 	.word	0x40020008

08001cec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_CRC_MspInit+0x38>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10b      	bne.n	8001d16 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_CRC_MspInit+0x3c>)
 8001d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_CRC_MspInit+0x3c>)
 8001d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d08:	6493      	str	r3, [r2, #72]	; 0x48
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_CRC_MspInit+0x3c>)
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023000 	.word	0x40023000
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0a6      	sub	sp, #152	; 0x98
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d48:	225c      	movs	r2, #92	; 0x5c
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f006 f987 	bl	8008060 <memset>
  if(hi2c->Instance==I2C1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a75      	ldr	r2, [pc, #468]	; (8001f2c <HAL_I2C_MspInit+0x200>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d13d      	bne.n	8001dd8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d5c:	2340      	movs	r3, #64	; 0x40
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 fd09 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d74:	f7ff ff1c 	bl	8001bb0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	4a6c      	ldr	r2, [pc, #432]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d84:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d98:	2312      	movs	r3, #18
 8001d9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001daa:	2304      	movs	r3, #4
 8001dac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001db4:	4619      	mov	r1, r3
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dba:	f002 fa45 	bl	8004248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dca:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd2:	623b      	str	r3, [r7, #32]
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001dd6:	e0a4      	b.n	8001f22 <HAL_I2C_MspInit+0x1f6>
  else if(hi2c->Instance==I2C2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a55      	ldr	r2, [pc, #340]	; (8001f34 <HAL_I2C_MspInit+0x208>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d13c      	bne.n	8001e5c <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fcc6 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8001dfa:	f7ff fed9 	bl	8001bb0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a4b      	ldr	r2, [pc, #300]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001e16:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	483e      	ldr	r0, [pc, #248]	; (8001f38 <HAL_I2C_MspInit+0x20c>)
 8001e3e:	f002 fa03 	bl	8004248 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]
}
 8001e5a:	e062      	b.n	8001f22 <HAL_I2C_MspInit+0x1f6>
  else if(hi2c->Instance==I2C3)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a36      	ldr	r2, [pc, #216]	; (8001f3c <HAL_I2C_MspInit+0x210>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d15d      	bne.n	8001f22 <HAL_I2C_MspInit+0x1f6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fc83 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_I2C_MspInit+0x158>
      Error_Handler();
 8001e80:	f7ff fe96 	bl	8001bb0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001edc:	f002 f9b4 	bl	8004248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee6:	2312      	movs	r3, #18
 8001ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <HAL_I2C_MspInit+0x20c>)
 8001f06:	f002 f99f 	bl	8004248 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f14:	6593      	str	r3, [r2, #88]	; 0x58
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_I2C_MspInit+0x204>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	bf00      	nop
 8001f24:	3798      	adds	r7, #152	; 0x98
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40005800 	.word	0x40005800
 8001f38:	48000400 	.word	0x48000400
 8001f3c:	40005c00 	.word	0x40005c00

08001f40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_TIM_Base_MspInit+0x38>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10b      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_TIM_Base_MspInit+0x3c>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_TIM_Base_MspInit+0x3c>)
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_TIM_Base_MspInit+0x3c>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40014400 	.word	0x40014400
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a11      	ldr	r2, [pc, #68]	; (8001fe4 <HAL_TIM_MspPostInit+0x64>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d11c      	bne.n	8001fdc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_TIM_MspPostInit+0x68>)
 8001fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_TIM_MspPostInit+0x68>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_TIM_MspPostInit+0x68>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 8001fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001fcc:	230e      	movs	r3, #14
 8001fce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_TIM_MspPostInit+0x6c>)
 8001fd8:	f002 f936 	bl	8004248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40014400 	.word	0x40014400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	48000400 	.word	0x48000400

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0a2      	sub	sp, #136	; 0x88
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002008:	f107 0318 	add.w	r3, r7, #24
 800200c:	225c      	movs	r2, #92	; 0x5c
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f006 f825 	bl	8008060 <memset>
  if(huart->Instance==USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a3f      	ldr	r2, [pc, #252]	; (8002118 <HAL_UART_MspInit+0x128>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d138      	bne.n	8002092 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002020:	2301      	movs	r3, #1
 8002022:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002024:	2301      	movs	r3, #1
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002028:	f107 0318 	add.w	r3, r7, #24
 800202c:	4618      	mov	r0, r3
 800202e:	f003 fba7 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002038:	f7ff fdba 	bl	8001bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800203c:	4b37      	ldr	r3, [pc, #220]	; (800211c <HAL_UART_MspInit+0x12c>)
 800203e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002040:	4a36      	ldr	r2, [pc, #216]	; (800211c <HAL_UART_MspInit+0x12c>)
 8002042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002046:	6613      	str	r3, [r2, #96]	; 0x60
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <HAL_UART_MspInit+0x12c>)
 800204a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_UART_MspInit+0x12c>)
 8002056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002058:	4a30      	ldr	r2, [pc, #192]	; (800211c <HAL_UART_MspInit+0x12c>)
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002060:	4b2e      	ldr	r3, [pc, #184]	; (800211c <HAL_UART_MspInit+0x12c>)
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800206c:	23c0      	movs	r3, #192	; 0xc0
 800206e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800207e:	2307      	movs	r3, #7
 8002080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002088:	4619      	mov	r1, r3
 800208a:	4825      	ldr	r0, [pc, #148]	; (8002120 <HAL_UART_MspInit+0x130>)
 800208c:	f002 f8dc 	bl	8004248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002090:	e03d      	b.n	800210e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_UART_MspInit+0x134>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d138      	bne.n	800210e <HAL_UART_MspInit+0x11e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800209c:	2302      	movs	r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80020a0:	2304      	movs	r3, #4
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a4:	f107 0318 	add.w	r3, r7, #24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f003 fb69 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80020b4:	f7ff fd7c 	bl	8001bb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_UART_MspInit+0x12c>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_UART_MspInit+0x12c>)
 80020be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c2:	6593      	str	r3, [r2, #88]	; 0x58
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_UART_MspInit+0x12c>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_UART_MspInit+0x12c>)
 80020d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_UART_MspInit+0x12c>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_UART_MspInit+0x12c>)
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin|SIM_UART_RX_Pin;
 80020e8:	230c      	movs	r3, #12
 80020ea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020fa:	2307      	movs	r3, #7
 80020fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002104:	4619      	mov	r1, r3
 8002106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800210a:	f002 f89d 	bl	8004248 <HAL_GPIO_Init>
}
 800210e:	bf00      	nop
 8002110:	3788      	adds	r7, #136	; 0x88
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40013800 	.word	0x40013800
 800211c:	40021000 	.word	0x40021000
 8002120:	48000400 	.word	0x48000400
 8002124:	40004400 	.word	0x40004400

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800212c:	e7fe      	b.n	800212c <NMI_Handler+0x4>

0800212e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <MemManage_Handler+0x4>

0800213a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <UsageFault_Handler+0x4>

08002146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f000 f9ee 	bl	8002554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002178:	f001 fcff 	bl	8003b7a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <DMA1_Channel1_IRQHandler+0x10>)
 8002186:	f001 ff80 	bl	800408a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200004b0 	.word	0x200004b0

08002194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <USART1_IRQHandler+0x10>)
 800219a:	f004 fd5d 	bl	8006c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000664 	.word	0x20000664

080021a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <USART2_IRQHandler+0x10>)
 80021ae:	f004 fd53 	bl	8006c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200006e8 	.word	0x200006e8

080021bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return 1;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_kill>:

int _kill(int pid, int sig)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021d6:	f005 ff19 	bl	800800c <__errno>
 80021da:	4603      	mov	r3, r0
 80021dc:	2216      	movs	r2, #22
 80021de:	601a      	str	r2, [r3, #0]
  return -1;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_exit>:

void _exit (int status)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ffe7 	bl	80021cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80021fe:	e7fe      	b.n	80021fe <_exit+0x12>

08002200 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e00a      	b.n	8002228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002212:	f3af 8000 	nop.w
 8002216:	4601      	mov	r1, r0
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	60ba      	str	r2, [r7, #8]
 800221e:	b2ca      	uxtb	r2, r1
 8002220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	dbf0      	blt.n	8002212 <_read+0x12>
  }

  return len;
 8002230:	687b      	ldr	r3, [r7, #4]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_close>:
  }
  return len;
}

int _close(int file)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002262:	605a      	str	r2, [r3, #4]
  return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_isatty>:

int _isatty(int file)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f005 fe9a 	bl	800800c <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20010000 	.word	0x20010000
 8002304:	00000400 	.word	0x00000400
 8002308:	20000770 	.word	0x20000770
 800230c:	20000798 	.word	0x20000798

08002310 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <SystemInit+0x20>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <SystemInit+0x20>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <HAL_SYSTICK_Callback>:
volatile uint8_t device_state = 0;
volatile uint32_t offTim;


void HAL_SYSTICK_Callback(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	static uint32_t led2swp, led2lev;

    if(led2_tim && ++led2swp >= led2_tim)
 8002338:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <HAL_SYSTICK_Callback+0xc0>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d04b      	beq.n	80023d8 <HAL_SYSTICK_Callback+0xa4>
 8002340:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_SYSTICK_Callback+0xc4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	4a2c      	ldr	r2, [pc, #176]	; (80023f8 <HAL_SYSTICK_Callback+0xc4>)
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_SYSTICK_Callback+0xc4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <HAL_SYSTICK_Callback+0xc0>)
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	4293      	cmp	r3, r2
 8002354:	d340      	bcc.n	80023d8 <HAL_SYSTICK_Callback+0xa4>
    {
        led2swp = 0;
 8002356:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_SYSTICK_Callback+0xc4>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
        if(++led2lev >= 64 + (led2_cycles>>16))
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	4a26      	ldr	r2, [pc, #152]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_SYSTICK_Callback+0xcc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	3340      	adds	r3, #64	; 0x40
 8002372:	429a      	cmp	r2, r3
 8002374:	d316      	bcc.n	80023a4 <HAL_SYSTICK_Callback+0x70>
        {
            led2lev = 0;
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
            if((led2_cycles & 0xFFFF) != 0xFFFF) led2_cycles--;
 800237c:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_SYSTICK_Callback+0xcc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_SYSTICK_Callback+0x60>
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_SYSTICK_Callback+0xcc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3b01      	subs	r3, #1
 8002390:	4a1b      	ldr	r2, [pc, #108]	; (8002400 <HAL_SYSTICK_Callback+0xcc>)
 8002392:	6013      	str	r3, [r2, #0]
            if((led2_cycles & 0xFFFF) == 0) led2_tim = 0;
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <HAL_SYSTICK_Callback+0xcc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_SYSTICK_Callback+0x70>
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_SYSTICK_Callback+0xc0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	801a      	strh	r2, [r3, #0]
        }
        if(led2lev>=64) setLed2(0); else setLed2((led2lev<32) ? led2lev : 63-led2lev);
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b3f      	cmp	r3, #63	; 0x3f
 80023aa:	d903      	bls.n	80023b4 <HAL_SYSTICK_Callback+0x80>
 80023ac:	2000      	movs	r0, #0
 80023ae:	f000 f83b 	bl	8002428 <setLed2>
 80023b2:	e01c      	b.n	80023ee <HAL_SYSTICK_Callback+0xba>
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b1f      	cmp	r3, #31
 80023ba:	d906      	bls.n	80023ca <HAL_SYSTICK_Callback+0x96>
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	e002      	b.n	80023d0 <HAL_SYSTICK_Callback+0x9c>
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f829 	bl	8002428 <setLed2>
 80023d6:	e00a      	b.n	80023ee <HAL_SYSTICK_Callback+0xba>
     } else if(led2_tim == 0) {led2swp=0; led2lev=0;}
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_SYSTICK_Callback+0xc0>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <HAL_SYSTICK_Callback+0xba>
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_SYSTICK_Callback+0xc4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_SYSTICK_Callback+0xc8>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

}
 80023ec:	e7ff      	b.n	80023ee <HAL_SYSTICK_Callback+0xba>
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000774 	.word	0x20000774
 80023f8:	2000077c 	.word	0x2000077c
 80023fc:	20000780 	.word	0x20000780
 8002400:	20000778 	.word	0x20000778

08002404 <setPwmLed>:


void setPwmLed(uint8_t pwm)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, pwm);
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <setPwmLed+0x20>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	79fa      	ldrb	r2, [r7, #7]
 8002414:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20000618 	.word	0x20000618

08002428 <setLed2>:

void setLed2(uint8_t bri)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
    setPwmLed(bri_corr[bri]);
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <setLed2+0x20>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ffe3 	bl	8002404 <setPwmLed>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	0800ad0c 	.word	0x0800ad0c

0800244c <thp_loop>:
    POWER_OFF();
    HAL_PWR_EnterSTANDBYMode();
}

void thp_loop()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	CLI();
 8002450:	f7fe ff18 	bl	8001284 <CLI>
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}

08002458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002490 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800245c:	f7ff ff58 	bl	8002310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <LoopForever+0x6>)
  ldr r1, =_edata
 8002462:	490d      	ldr	r1, [pc, #52]	; (8002498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <LoopForever+0xe>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002478:	4c0a      	ldr	r4, [pc, #40]	; (80024a4 <LoopForever+0x16>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002486:	f005 fdc7 	bl	8008018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800248a:	f7fe ffbf 	bl	800140c <main>

0800248e <LoopForever>:

LoopForever:
    b LoopForever
 800248e:	e7fe      	b.n	800248e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002490:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800249c:	0800b11c 	.word	0x0800b11c
  ldr r2, =_sbss
 80024a0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024a4:	20000798 	.word	0x20000798

080024a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_IRQHandler>

080024aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f001 fb1f 	bl	8003af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ba:	200f      	movs	r0, #15
 80024bc:	f000 f80e 	bl	80024dc <HAL_InitTick>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	71fb      	strb	r3, [r7, #7]
 80024ca:	e001      	b.n	80024d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024cc:	f7ff fb76 	bl	8001bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024d0:	79fb      	ldrb	r3, [r7, #7]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_InitTick+0x6c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d023      	beq.n	8002538 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <HAL_InitTick+0x70>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <HAL_InitTick+0x6c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002502:	fbb2 f3f3 	udiv	r3, r2, r3
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fb2b 	bl	8003b62 <HAL_SYSTICK_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d809      	bhi.n	800252c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002518:	2200      	movs	r2, #0
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f001 faf5 	bl	8003b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002524:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <HAL_InitTick+0x74>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e007      	b.n	800253c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e004      	b.n	800253c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e001      	b.n	800253c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000008 	.word	0x20000008
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_IncTick+0x20>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_IncTick+0x24>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4413      	add	r3, r2
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_IncTick+0x24>)
 8002566:	6013      	str	r3, [r2, #0]
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000008 	.word	0x20000008
 8002578:	20000784 	.word	0x20000784

0800257c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return uwTick;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_GetTick+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000784 	.word	0x20000784

08002594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff ffee 	bl	800257c <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ac:	d005      	beq.n	80025ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_Delay+0x44>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ba:	bf00      	nop
 80025bc:	f7ff ffde 	bl	800257c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d8f7      	bhi.n	80025bc <HAL_Delay+0x28>
  {
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000008 	.word	0x20000008

080025dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	609a      	str	r2, [r3, #8]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3360      	adds	r3, #96	; 0x60
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b08      	ldr	r3, [pc, #32]	; (8002688 <LL_ADC_SetOffset+0x44>)
 8002666:	4013      	ands	r3, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	4313      	orrs	r3, r2
 8002674:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	03fff000 	.word	0x03fff000

0800268c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3360      	adds	r3, #96	; 0x60
 800269a:	461a      	mov	r2, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	3360      	adds	r3, #96	; 0x60
 80026c8:	461a      	mov	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3330      	adds	r3, #48	; 0x30
 8002724:	461a      	mov	r2, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	4413      	add	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	211f      	movs	r1, #31
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	401a      	ands	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	f003 011f 	and.w	r1, r3, #31
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	431a      	orrs	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002760:	bf00      	nop
 8002762:	371c      	adds	r7, #28
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3314      	adds	r3, #20
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	0e5b      	lsrs	r3, r3, #25
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	4413      	add	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0d1b      	lsrs	r3, r3, #20
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	2107      	movs	r1, #7
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	401a      	ands	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	0d1b      	lsrs	r3, r3, #20
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	431a      	orrs	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	43db      	mvns	r3, r3
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0318 	and.w	r3, r3, #24
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027e8:	40d9      	lsrs	r1, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	400b      	ands	r3, r1
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	0007ffff 	.word	0x0007ffff

0800280c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800281c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6093      	str	r3, [r2, #8]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002844:	d101      	bne.n	800284a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800286c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002894:	d101      	bne.n	800289a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028e4:	f043 0202 	orr.w	r2, r3, #2
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <LL_ADC_IsEnabled+0x18>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <LL_ADC_IsEnabled+0x1a>
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	d101      	bne.n	8002936 <LL_ADC_IsDisableOngoing+0x18>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <LL_ADC_IsDisableOngoing+0x1a>
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002954:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002958:	f043 0204 	orr.w	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b04      	cmp	r3, #4
 800297e:	d101      	bne.n	8002984 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d101      	bne.n	80029aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e12c      	b.n	8002c2c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff f911 	bl	8001c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff19 	bl	8002830 <LL_ADC_IsDeepPowerDownEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff feff 	bl	800280c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff34 	bl	8002880 <LL_ADC_IsInternalRegulatorEnabled>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d115      	bne.n	8002a4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff18 	bl	8002858 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a28:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_ADC_Init+0x27c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	4a82      	ldr	r2, [pc, #520]	; (8002c38 <HAL_ADC_Init+0x280>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a3c:	e002      	b.n	8002a44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f9      	bne.n	8002a3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff16 	bl	8002880 <LL_ADC_IsInternalRegulatorEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10d      	bne.n	8002a76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f043 0210 	orr.w	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ff76 	bl	800296c <LL_ADC_REG_IsConversionOngoing>
 8002a80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 80c5 	bne.w	8002c1a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 80c1 	bne.w	8002c1a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002aa0:	f043 0202 	orr.w	r2, r3, #2
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff23 	bl	80028f8 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab8:	4860      	ldr	r0, [pc, #384]	; (8002c3c <HAL_ADC_Init+0x284>)
 8002aba:	f7ff ff1d 	bl	80028f8 <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	485d      	ldr	r0, [pc, #372]	; (8002c40 <HAL_ADC_Init+0x288>)
 8002acc:	f7ff fd86 	bl	80025dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7e5b      	ldrb	r3, [r3, #25]
 8002ad4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ada:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ae0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ae6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d106      	bne.n	8002b0c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	3b01      	subs	r3, #1
 8002b04:	045b      	lsls	r3, r3, #17
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	4b45      	ldr	r3, [pc, #276]	; (8002c44 <HAL_ADC_Init+0x28c>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff13 	bl	800296c <LL_ADC_REG_IsConversionOngoing>
 8002b46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff20 	bl	8002992 <LL_ADC_INJ_IsConversionOngoing>
 8002b52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d13d      	bne.n	8002bd6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d13a      	bne.n	8002bd6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7c:	f023 0302 	bic.w	r3, r3, #2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	69b9      	ldr	r1, [r7, #24]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d118      	bne.n	8002bc6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	611a      	str	r2, [r3, #16]
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f023 010f 	bic.w	r1, r3, #15
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf6:	e007      	b.n	8002c08 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 020f 	bic.w	r2, r2, #15
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f023 0303 	bic.w	r3, r3, #3
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
 8002c18:	e007      	b.n	8002c2a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000000 	.word	0x20000000
 8002c38:	053e2d63 	.word	0x053e2d63
 8002c3c:	50040000 	.word	0x50040000
 8002c40:	50040300 	.word	0x50040300
 8002c44:	fff0c007 	.word	0xfff0c007

08002c48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fe87 	bl	800296c <LL_ADC_REG_IsConversionOngoing>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d167      	bne.n	8002d34 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_Start_DMA+0x2a>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e063      	b.n	8002d3a <HAL_ADC_Start_DMA+0xf2>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fc66 	bl	800354c <ADC_Enable>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d14f      	bne.n	8002d2a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d006      	beq.n	8002cb8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	f023 0206 	bic.w	r2, r3, #6
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb6:	e002      	b.n	8002cbe <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	4a20      	ldr	r2, [pc, #128]	; (8002d44 <HAL_ADC_Start_DMA+0xfc>)
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <HAL_ADC_Start_DMA+0x100>)
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_ADC_Start_DMA+0x104>)
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	221c      	movs	r2, #28
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0210 	orr.w	r2, r2, #16
 8002cf4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3340      	adds	r3, #64	; 0x40
 8002d10:	4619      	mov	r1, r3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f001 f8d9 	bl	8003ecc <HAL_DMA_Start_IT>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fe0e 	bl	8002944 <LL_ADC_REG_StartConversion>
 8002d28:	e006      	b.n	8002d38 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002d32:	e001      	b.n	8002d38 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	08003717 	.word	0x08003717
 8002d48:	080037ef 	.word	0x080037ef
 8002d4c:	0800380b 	.word	0x0800380b

08002d50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b0b6      	sub	sp, #216	; 0xd8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x22>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e3b9      	b.n	8003522 <HAL_ADC_ConfigChannel+0x796>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fdd6 	bl	800296c <LL_ADC_REG_IsConversionOngoing>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 839e 	bne.w	8003504 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b05      	cmp	r3, #5
 8002dce:	d824      	bhi.n	8002e1a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	3b02      	subs	r3, #2
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d81b      	bhi.n	8002e12 <HAL_ADC_ConfigChannel+0x86>
 8002dda:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <HAL_ADC_ConfigChannel+0x54>)
 8002ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002df9 	.word	0x08002df9
 8002de8:	08002e01 	.word	0x08002e01
 8002dec:	08002e09 	.word	0x08002e09
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	220c      	movs	r2, #12
 8002df4:	605a      	str	r2, [r3, #4]
          break;
 8002df6:	e011      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2212      	movs	r2, #18
 8002dfc:	605a      	str	r2, [r3, #4]
          break;
 8002dfe:	e00d      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2218      	movs	r2, #24
 8002e04:	605a      	str	r2, [r3, #4]
          break;
 8002e06:	e009      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0e:	605a      	str	r2, [r3, #4]
          break;
 8002e10:	e004      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2206      	movs	r2, #6
 8002e16:	605a      	str	r2, [r3, #4]
          break;
 8002e18:	e000      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002e1a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f7ff fc73 	bl	8002714 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fd9a 	bl	800296c <LL_ADC_REG_IsConversionOngoing>
 8002e38:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fda6 	bl	8002992 <LL_ADC_INJ_IsConversionOngoing>
 8002e46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 81a6 	bne.w	80031a0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 81a1 	bne.w	80031a0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f7ff fc7e 	bl	800276c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	08db      	lsrs	r3, r3, #3
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d00a      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6919      	ldr	r1, [r3, #16]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ea2:	f7ff fbcf 	bl	8002644 <LL_ADC_SetOffset>
 8002ea6:	e17b      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fbec 	bl	800268c <LL_ADC_GetOffsetChannel>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x148>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fbe1 	bl	800268c <LL_ADC_GetOffsetChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	0e9b      	lsrs	r3, r3, #26
 8002ece:	f003 021f 	and.w	r2, r3, #31
 8002ed2:	e01e      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x186>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fbd6 	bl	800268c <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002eea:	fa93 f3a3 	rbit	r3, r3
 8002eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ef2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002efa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002f02:	2320      	movs	r3, #32
 8002f04:	e004      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x19e>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	0e9b      	lsrs	r3, r3, #26
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	e018      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1d0>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	e004      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d106      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fba5 	bl	80026b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fb89 	bl	800268c <LL_ADC_GetOffsetChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x20e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fb7e 	bl	800268c <LL_ADC_GetOffsetChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	0e9b      	lsrs	r3, r3, #26
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	e01e      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x24c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fb73 	bl	800268c <LL_ADC_GetOffsetChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002fb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002fc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e004      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d105      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x264>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	e018      	b.n	8003022 <HAL_ADC_ConfigChannel+0x296>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003004:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003008:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800300c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e004      	b.n	8003022 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003022:	429a      	cmp	r2, r3
 8003024:	d106      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2200      	movs	r2, #0
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fb42 	bl	80026b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2102      	movs	r1, #2
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fb26 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x2d4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2102      	movs	r1, #2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fb1b 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	0e9b      	lsrs	r3, r3, #26
 800305a:	f003 021f 	and.w	r2, r3, #31
 800305e:	e01e      	b.n	800309e <HAL_ADC_ConfigChannel+0x312>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2102      	movs	r1, #2
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fb10 	bl	800268c <LL_ADC_GetOffsetChannel>
 800306c:	4603      	mov	r3, r0
 800306e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800307e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e004      	b.n	800309c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003092:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x32a>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	e016      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x358>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80030c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80030ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80030d6:	2320      	movs	r3, #32
 80030d8:	e004      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80030da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d106      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2200      	movs	r2, #0
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fae1 	bl	80026b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2103      	movs	r1, #3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fac5 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10a      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x396>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2103      	movs	r1, #3
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff faba 	bl	800268c <LL_ADC_GetOffsetChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	0e9b      	lsrs	r3, r3, #26
 800311c:	f003 021f 	and.w	r2, r3, #31
 8003120:	e017      	b.n	8003152 <HAL_ADC_ConfigChannel+0x3c6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2103      	movs	r1, #3
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff faaf 	bl	800268c <LL_ADC_GetOffsetChannel>
 800312e:	4603      	mov	r3, r0
 8003130:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800313a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800313c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800313e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	e003      	b.n	8003150 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_ConfigChannel+0x3de>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	e011      	b.n	800318e <HAL_ADC_ConfigChannel+0x402>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800317a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800317c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e003      	b.n	800318e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800318e:	429a      	cmp	r2, r3
 8003190:	d106      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2200      	movs	r2, #0
 8003198:	2103      	movs	r1, #3
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fa8c 	bl	80026b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fba7 	bl	80028f8 <LL_ADC_IsEnabled>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f040 813f 	bne.w	8003430 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	461a      	mov	r2, r3
 80031c0:	f7ff fb00 	bl	80027c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	4a8e      	ldr	r2, [pc, #568]	; (8003404 <HAL_ADC_ConfigChannel+0x678>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	f040 8130 	bne.w	8003430 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x46c>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	3301      	adds	r3, #1
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	bf94      	ite	ls
 80031f0:	2301      	movls	r3, #1
 80031f2:	2300      	movhi	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e019      	b.n	800322c <HAL_ADC_ConfigChannel+0x4a0>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003208:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800320a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2b09      	cmp	r3, #9
 8003224:	bf94      	ite	ls
 8003226:	2301      	movls	r3, #1
 8003228:	2300      	movhi	r3, #0
 800322a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322c:	2b00      	cmp	r3, #0
 800322e:	d079      	beq.n	8003324 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003238:	2b00      	cmp	r3, #0
 800323a:	d107      	bne.n	800324c <HAL_ADC_ConfigChannel+0x4c0>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	0e9b      	lsrs	r3, r3, #26
 8003242:	3301      	adds	r3, #1
 8003244:	069b      	lsls	r3, r3, #26
 8003246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800324a:	e015      	b.n	8003278 <HAL_ADC_ConfigChannel+0x4ec>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800325a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003264:	2320      	movs	r3, #32
 8003266:	e003      	b.n	8003270 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800326a:	fab3 f383 	clz	r3, r3
 800326e:	b2db      	uxtb	r3, r3
 8003270:	3301      	adds	r3, #1
 8003272:	069b      	lsls	r3, r3, #26
 8003274:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x50c>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	0e9b      	lsrs	r3, r3, #26
 800328a:	3301      	adds	r3, #1
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2101      	movs	r1, #1
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	e017      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x53c>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80032a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80032aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80032b0:	2320      	movs	r3, #32
 80032b2:	e003      	b.n	80032bc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	ea42 0103 	orr.w	r1, r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x562>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	3301      	adds	r3, #1
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	051b      	lsls	r3, r3, #20
 80032ec:	e018      	b.n	8003320 <HAL_ADC_ConfigChannel+0x594>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003306:	2320      	movs	r3, #32
 8003308:	e003      	b.n	8003312 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f003 021f 	and.w	r2, r3, #31
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003320:	430b      	orrs	r3, r1
 8003322:	e080      	b.n	8003426 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x5b4>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	3301      	adds	r3, #1
 8003338:	069b      	lsls	r3, r3, #26
 800333a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800333e:	e015      	b.n	800336c <HAL_ADC_ConfigChannel+0x5e0>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	069b      	lsls	r3, r3, #26
 8003368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_ADC_ConfigChannel+0x600>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	3301      	adds	r3, #1
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	e017      	b.n	80033bc <HAL_ADC_ConfigChannel+0x630>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	61fb      	str	r3, [r7, #28]
  return result;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e003      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2101      	movs	r1, #1
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	ea42 0103 	orr.w	r1, r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x65c>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	3301      	adds	r3, #1
 80033d4:	f003 021f 	and.w	r2, r3, #31
 80033d8:	4613      	mov	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4413      	add	r3, r2
 80033de:	3b1e      	subs	r3, #30
 80033e0:	051b      	lsls	r3, r3, #20
 80033e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e6:	e01d      	b.n	8003424 <HAL_ADC_ConfigChannel+0x698>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	613b      	str	r3, [r7, #16]
  return result;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e005      	b.n	8003410 <HAL_ADC_ConfigChannel+0x684>
 8003404:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	3b1e      	subs	r3, #30
 800341e:	051b      	lsls	r3, r3, #20
 8003420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003424:	430b      	orrs	r3, r1
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	6892      	ldr	r2, [r2, #8]
 800342a:	4619      	mov	r1, r3
 800342c:	f7ff f99e 	bl	800276c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_ADC_ConfigChannel+0x7a0>)
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d06c      	beq.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800343c:	483c      	ldr	r0, [pc, #240]	; (8003530 <HAL_ADC_ConfigChannel+0x7a4>)
 800343e:	f7ff f8f3 	bl	8002628 <LL_ADC_GetCommonPathInternalCh>
 8003442:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a3a      	ldr	r2, [pc, #232]	; (8003534 <HAL_ADC_ConfigChannel+0x7a8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d127      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d121      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a35      	ldr	r2, [pc, #212]	; (8003538 <HAL_ADC_ConfigChannel+0x7ac>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d157      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800346a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800346e:	4619      	mov	r1, r3
 8003470:	482f      	ldr	r0, [pc, #188]	; (8003530 <HAL_ADC_ConfigChannel+0x7a4>)
 8003472:	f7ff f8c6 	bl	8002602 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003476:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_ADC_ConfigChannel+0x7b0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	4a30      	ldr	r2, [pc, #192]	; (8003540 <HAL_ADC_ConfigChannel+0x7b4>)
 800347e:	fba2 2303 	umull	r2, r3, r2, r3
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003490:	e002      	b.n	8003498 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3b01      	subs	r3, #1
 8003496:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f9      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800349e:	e03a      	b.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a27      	ldr	r2, [pc, #156]	; (8003544 <HAL_ADC_ConfigChannel+0x7b8>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d113      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x746>
 80034aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10d      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1f      	ldr	r2, [pc, #124]	; (8003538 <HAL_ADC_ConfigChannel+0x7ac>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d12a      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c8:	4619      	mov	r1, r3
 80034ca:	4819      	ldr	r0, [pc, #100]	; (8003530 <HAL_ADC_ConfigChannel+0x7a4>)
 80034cc:	f7ff f899 	bl	8002602 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d0:	e021      	b.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_ADC_ConfigChannel+0x7bc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d11c      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d116      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a12      	ldr	r2, [pc, #72]	; (8003538 <HAL_ADC_ConfigChannel+0x7ac>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d111      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034fa:	4619      	mov	r1, r3
 80034fc:	480c      	ldr	r0, [pc, #48]	; (8003530 <HAL_ADC_ConfigChannel+0x7a4>)
 80034fe:	f7ff f880 	bl	8002602 <LL_ADC_SetCommonPathInternalCh>
 8003502:	e008      	b.n	8003516 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800351e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003522:	4618      	mov	r0, r3
 8003524:	37d8      	adds	r7, #216	; 0xd8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	80080000 	.word	0x80080000
 8003530:	50040300 	.word	0x50040300
 8003534:	c7520000 	.word	0xc7520000
 8003538:	50040000 	.word	0x50040000
 800353c:	20000000 	.word	0x20000000
 8003540:	053e2d63 	.word	0x053e2d63
 8003544:	cb840000 	.word	0xcb840000
 8003548:	80000001 	.word	0x80000001

0800354c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff f9cb 	bl	80028f8 <LL_ADC_IsEnabled>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d169      	bne.n	800363c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	4b36      	ldr	r3, [pc, #216]	; (8003648 <ADC_Enable+0xfc>)
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f043 0210 	orr.w	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e055      	b.n	800363e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff f986 	bl	80028a8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800359c:	482b      	ldr	r0, [pc, #172]	; (800364c <ADC_Enable+0x100>)
 800359e:	f7ff f843 	bl	8002628 <LL_ADC_GetCommonPathInternalCh>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ac:	4b28      	ldr	r3, [pc, #160]	; (8003650 <ADC_Enable+0x104>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	099b      	lsrs	r3, r3, #6
 80035b2:	4a28      	ldr	r2, [pc, #160]	; (8003654 <ADC_Enable+0x108>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80035c6:	e002      	b.n	80035ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f9      	bne.n	80035c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035d4:	f7fe ffd2 	bl	800257c <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035da:	e028      	b.n	800362e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff f989 	bl	80028f8 <LL_ADC_IsEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d104      	bne.n	80035f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f959 	bl	80028a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f6:	f7fe ffc1 	bl	800257c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d914      	bls.n	800362e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b01      	cmp	r3, #1
 8003610:	d00d      	beq.n	800362e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	f043 0210 	orr.w	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e007      	b.n	800363e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d1cf      	bne.n	80035dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	8000003f 	.word	0x8000003f
 800364c:	50040300 	.word	0x50040300
 8003650:	20000000 	.word	0x20000000
 8003654:	053e2d63 	.word	0x053e2d63

08003658 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff f95a 	bl	800291e <LL_ADC_IsDisableOngoing>
 800366a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f941 	bl	80028f8 <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d047      	beq.n	800370c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d144      	bne.n	800370c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030d 	and.w	r3, r3, #13
 800368c:	2b01      	cmp	r3, #1
 800368e:	d10c      	bne.n	80036aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff f91b 	bl	80028d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2203      	movs	r2, #3
 80036a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036a2:	f7fe ff6b 	bl	800257c <HAL_GetTick>
 80036a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036a8:	e029      	b.n	80036fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0210 	orr.w	r2, r3, #16
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e023      	b.n	800370e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036c6:	f7fe ff59 	bl	800257c <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d914      	bls.n	80036fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e6:	f043 0210 	orr.w	r2, r3, #16
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	f043 0201 	orr.w	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e007      	b.n	800370e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1dc      	bne.n	80036c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800372c:	2b00      	cmp	r3, #0
 800372e:	d14b      	bne.n	80037c8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d021      	beq.n	800378e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe ffcd 	bl	80026ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d032      	beq.n	80037c0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d12b      	bne.n	80037c0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11f      	bne.n	80037c0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
 800378c:	e018      	b.n	80037c0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d111      	bne.n	80037c0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff fac5 	bl	8002d50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037c6:	e00e      	b.n	80037e6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff facf 	bl	8002d78 <HAL_ADC_ErrorCallback>
}
 80037da:	e004      	b.n	80037e6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff fab1 	bl	8002d64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	f043 0204 	orr.w	r2, r3, #4
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f7ff faa1 	bl	8002d78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <LL_ADC_StartCalibration>:
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800385a:	4313      	orrs	r3, r2
 800385c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_IsCalibrationOnGoing>:
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003884:	d101      	bne.n	800388a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e04d      	b.n	8003950 <HAL_ADCEx_Calibration_Start+0xb8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fecb 	bl	8003658 <ADC_Disable>
 80038c2:	4603      	mov	r3, r0
 80038c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d136      	bne.n	800393a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038d4:	f023 0302 	bic.w	r3, r3, #2
 80038d8:	f043 0202 	orr.w	r2, r3, #2
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ffa9 	bl	800383e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038ec:	e014      	b.n	8003918 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	3301      	adds	r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80038fa:	d30d      	bcc.n	8003918 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	f023 0312 	bic.w	r3, r3, #18
 8003904:	f043 0210 	orr.w	r2, r3, #16
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e01b      	b.n	8003950 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ffa7 	bl	8003870 <LL_ADC_IsCalibrationOnGoing>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e2      	bne.n	80038ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f023 0303 	bic.w	r3, r3, #3
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54
 8003938:	e005      	b.n	8003946 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398a:	4a04      	ldr	r2, [pc, #16]	; (800399c <__NVIC_SetPriorityGrouping+0x44>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	60d3      	str	r3, [r2, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a4:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <__NVIC_GetPriorityGrouping+0x18>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	0a1b      	lsrs	r3, r3, #8
 80039aa:	f003 0307 	and.w	r3, r3, #7
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db0b      	blt.n	80039e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	f003 021f 	and.w	r2, r3, #31
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <__NVIC_EnableIRQ+0x38>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	2001      	movs	r0, #1
 80039de:	fa00 f202 	lsl.w	r2, r0, r2
 80039e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000e100 	.word	0xe000e100

080039f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	db0a      	blt.n	8003a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	490c      	ldr	r1, [pc, #48]	; (8003a44 <__NVIC_SetPriority+0x4c>)
 8003a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a16:	0112      	lsls	r2, r2, #4
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a20:	e00a      	b.n	8003a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4908      	ldr	r1, [pc, #32]	; (8003a48 <__NVIC_SetPriority+0x50>)
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	3b04      	subs	r3, #4
 8003a30:	0112      	lsls	r2, r2, #4
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	440b      	add	r3, r1
 8003a36:	761a      	strb	r2, [r3, #24]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000e100 	.word	0xe000e100
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	; 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f1c3 0307 	rsb	r3, r3, #7
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf28      	it	cs
 8003a6a:	2304      	movcs	r3, #4
 8003a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	3304      	adds	r3, #4
 8003a72:	2b06      	cmp	r3, #6
 8003a74:	d902      	bls.n	8003a7c <NVIC_EncodePriority+0x30>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3b03      	subs	r3, #3
 8003a7a:	e000      	b.n	8003a7e <NVIC_EncodePriority+0x32>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	401a      	ands	r2, r3
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43d9      	mvns	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	4313      	orrs	r3, r2
         );
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac4:	d301      	bcc.n	8003aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00f      	b.n	8003aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <SysTick_Config+0x40>)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad2:	210f      	movs	r1, #15
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f7ff ff8e 	bl	80039f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <SysTick_Config+0x40>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae2:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <SysTick_Config+0x40>)
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	e000e010 	.word	0xe000e010

08003af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff ff29 	bl	8003958 <__NVIC_SetPriorityGrouping>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b20:	f7ff ff3e 	bl	80039a0 <__NVIC_GetPriorityGrouping>
 8003b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff8e 	bl	8003a4c <NVIC_EncodePriority>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff5d 	bl	80039f8 <__NVIC_SetPriority>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff31 	bl	80039bc <__NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ffa2 	bl	8003ab4 <SysTick_Config>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003b7e:	f7fe fbd9 	bl	8002334 <HAL_SYSTICK_Callback>
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e054      	b.n	8003c44 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7f5b      	ldrb	r3, [r3, #29]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe f89e 	bl	8001cec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	791b      	ldrb	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <HAL_CRC_Init+0xc4>)
 8003bc4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0218 	bic.w	r2, r2, #24
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	e00c      	b.n	8003bf2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6899      	ldr	r1, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	461a      	mov	r2, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f834 	bl	8003c50 <HAL_CRCEx_Polynomial_Set>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e028      	b.n	8003c44 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	795b      	ldrb	r3, [r3, #5]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003c02:	611a      	str	r2, [r3, #16]
 8003c04:	e004      	b.n	8003c10 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6912      	ldr	r2, [r2, #16]
 8003c0e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	04c11db7 	.word	0x04c11db7

08003c50 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003c60:	231f      	movs	r3, #31
 8003c62:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003c64:	bf00      	nop
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1e5a      	subs	r2, r3, #1
 8003c6a:	613a      	str	r2, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_CRCEx_Polynomial_Set+0x34>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b18      	cmp	r3, #24
 8003c88:	d846      	bhi.n	8003d18 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003d1f 	.word	0x08003d1f
 8003c94:	08003d19 	.word	0x08003d19
 8003c98:	08003d19 	.word	0x08003d19
 8003c9c:	08003d19 	.word	0x08003d19
 8003ca0:	08003d19 	.word	0x08003d19
 8003ca4:	08003d19 	.word	0x08003d19
 8003ca8:	08003d19 	.word	0x08003d19
 8003cac:	08003d19 	.word	0x08003d19
 8003cb0:	08003d0d 	.word	0x08003d0d
 8003cb4:	08003d19 	.word	0x08003d19
 8003cb8:	08003d19 	.word	0x08003d19
 8003cbc:	08003d19 	.word	0x08003d19
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d19 	.word	0x08003d19
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003d19 	.word	0x08003d19
 8003cd0:	08003d01 	.word	0x08003d01
 8003cd4:	08003d19 	.word	0x08003d19
 8003cd8:	08003d19 	.word	0x08003d19
 8003cdc:	08003d19 	.word	0x08003d19
 8003ce0:	08003d19 	.word	0x08003d19
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d19 	.word	0x08003d19
 8003cf0:	08003cf5 	.word	0x08003cf5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d913      	bls.n	8003d22 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003cfe:	e010      	b.n	8003d22 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b07      	cmp	r3, #7
 8003d04:	d90f      	bls.n	8003d26 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d0a:	e00c      	b.n	8003d26 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b0f      	cmp	r3, #15
 8003d10:	d90b      	bls.n	8003d2a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003d16:	e008      	b.n	8003d2a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1c:	e006      	b.n	8003d2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e004      	b.n	8003d2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d22:	bf00      	nop
 8003d24:	e002      	b.n	8003d2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003d2a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 0118 	bic.w	r1, r3, #24
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e098      	b.n	8003ea0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b4d      	ldr	r3, [pc, #308]	; (8003eac <HAL_DMA_Init+0x150>)
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d80f      	bhi.n	8003d9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <HAL_DMA_Init+0x154>)
 8003d82:	4413      	add	r3, r2
 8003d84:	4a4b      	ldr	r2, [pc, #300]	; (8003eb4 <HAL_DMA_Init+0x158>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	009a      	lsls	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a48      	ldr	r2, [pc, #288]	; (8003eb8 <HAL_DMA_Init+0x15c>)
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
 8003d98:	e00e      	b.n	8003db8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_DMA_Init+0x160>)
 8003da2:	4413      	add	r3, r2
 8003da4:	4a43      	ldr	r2, [pc, #268]	; (8003eb4 <HAL_DMA_Init+0x158>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	009a      	lsls	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <HAL_DMA_Init+0x164>)
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e12:	d039      	beq.n	8003e88 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	4a27      	ldr	r2, [pc, #156]	; (8003eb8 <HAL_DMA_Init+0x15c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d11a      	bne.n	8003e54 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e1e:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <HAL_DMA_Init+0x168>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f003 031c 	and.w	r3, r3, #28
 8003e2a:	210f      	movs	r1, #15
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	4924      	ldr	r1, [pc, #144]	; (8003ec4 <HAL_DMA_Init+0x168>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e38:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <HAL_DMA_Init+0x168>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	f003 031c 	and.w	r3, r3, #28
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	491d      	ldr	r1, [pc, #116]	; (8003ec4 <HAL_DMA_Init+0x168>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
 8003e52:	e019      	b.n	8003e88 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003e54:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <HAL_DMA_Init+0x16c>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	f003 031c 	and.w	r3, r3, #28
 8003e60:	210f      	movs	r1, #15
 8003e62:	fa01 f303 	lsl.w	r3, r1, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	4917      	ldr	r1, [pc, #92]	; (8003ec8 <HAL_DMA_Init+0x16c>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003e6e:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <HAL_DMA_Init+0x16c>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f003 031c 	and.w	r3, r3, #28
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	4911      	ldr	r1, [pc, #68]	; (8003ec8 <HAL_DMA_Init+0x16c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40020407 	.word	0x40020407
 8003eb0:	bffdfff8 	.word	0xbffdfff8
 8003eb4:	cccccccd 	.word	0xcccccccd
 8003eb8:	40020000 	.word	0x40020000
 8003ebc:	bffdfbf8 	.word	0xbffdfbf8
 8003ec0:	40020400 	.word	0x40020400
 8003ec4:	400200a8 	.word	0x400200a8
 8003ec8:	400204a8 	.word	0x400204a8

08003ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_DMA_Start_IT+0x20>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e04b      	b.n	8003f84 <HAL_DMA_Start_IT+0xb8>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d13a      	bne.n	8003f76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f95f 	bl	80041e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 020e 	orr.w	r2, r2, #14
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e00f      	b.n	8003f64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 020a 	orr.w	r2, r2, #10
 8003f62:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	e005      	b.n	8003f82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d008      	beq.n	8003fb6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e022      	b.n	8003ffc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 020e 	bic.w	r2, r2, #14
 8003fc4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f003 021c 	and.w	r2, r3, #28
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d005      	beq.n	800402c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e029      	b.n	8004080 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 020e 	bic.w	r2, r2, #14
 800403a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	f003 021c 	and.w	r2, r3, #28
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f202 	lsl.w	r2, r1, r2
 800405e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
    }
  }
  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	f003 031c 	and.w	r3, r3, #28
 80040aa:	2204      	movs	r2, #4
 80040ac:	409a      	lsls	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4013      	ands	r3, r2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d026      	beq.n	8004104 <HAL_DMA_IRQHandler+0x7a>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d021      	beq.n	8004104 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d107      	bne.n	80040de <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0204 	bic.w	r2, r2, #4
 80040dc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f003 021c 	and.w	r2, r3, #28
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	2104      	movs	r1, #4
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d071      	beq.n	80041de <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004102:	e06c      	b.n	80041de <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004108:	f003 031c 	and.w	r3, r3, #28
 800410c:	2202      	movs	r2, #2
 800410e:	409a      	lsls	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4013      	ands	r3, r2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d02e      	beq.n	8004176 <HAL_DMA_IRQHandler+0xec>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d029      	beq.n	8004176 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 020a 	bic.w	r2, r2, #10
 800413e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f003 021c 	and.w	r2, r3, #28
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	2102      	movs	r1, #2
 8004156:	fa01 f202 	lsl.w	r2, r1, r2
 800415a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d038      	beq.n	80041de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004174:	e033      	b.n	80041de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f003 031c 	and.w	r3, r3, #28
 800417e:	2208      	movs	r2, #8
 8004180:	409a      	lsls	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d02a      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x156>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d025      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 020e 	bic.w	r2, r2, #14
 80041a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	f003 021c 	and.w	r2, r3, #28
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f202 	lsl.w	r2, r1, r2
 80041b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
}
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	f003 021c 	and.w	r2, r3, #28
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b10      	cmp	r3, #16
 8004218:	d108      	bne.n	800422c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800422a:	e007      	b.n	800423c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004256:	e154      	b.n	8004502 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2101      	movs	r1, #1
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	4013      	ands	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8146 	beq.w	80044fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d005      	beq.n	8004288 <HAL_GPIO_Init+0x40>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d130      	bne.n	80042ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042be:	2201      	movs	r2, #1
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	f003 0201 	and.w	r2, r3, #1
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d017      	beq.n	8004326 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	2203      	movs	r2, #3
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d123      	bne.n	800437a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	08da      	lsrs	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3208      	adds	r2, #8
 800433a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	220f      	movs	r2, #15
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	08da      	lsrs	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3208      	adds	r2, #8
 8004374:	6939      	ldr	r1, [r7, #16]
 8004376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	2203      	movs	r2, #3
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4013      	ands	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0203 	and.w	r2, r3, #3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80a0 	beq.w	80044fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043bc:	4b58      	ldr	r3, [pc, #352]	; (8004520 <HAL_GPIO_Init+0x2d8>)
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	4a57      	ldr	r2, [pc, #348]	; (8004520 <HAL_GPIO_Init+0x2d8>)
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	6613      	str	r3, [r2, #96]	; 0x60
 80043c8:	4b55      	ldr	r3, [pc, #340]	; (8004520 <HAL_GPIO_Init+0x2d8>)
 80043ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043d4:	4a53      	ldr	r2, [pc, #332]	; (8004524 <HAL_GPIO_Init+0x2dc>)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	089b      	lsrs	r3, r3, #2
 80043da:	3302      	adds	r3, #2
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	220f      	movs	r2, #15
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043fe:	d019      	beq.n	8004434 <HAL_GPIO_Init+0x1ec>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a49      	ldr	r2, [pc, #292]	; (8004528 <HAL_GPIO_Init+0x2e0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d013      	beq.n	8004430 <HAL_GPIO_Init+0x1e8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a48      	ldr	r2, [pc, #288]	; (800452c <HAL_GPIO_Init+0x2e4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00d      	beq.n	800442c <HAL_GPIO_Init+0x1e4>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a47      	ldr	r2, [pc, #284]	; (8004530 <HAL_GPIO_Init+0x2e8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <HAL_GPIO_Init+0x1e0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a46      	ldr	r2, [pc, #280]	; (8004534 <HAL_GPIO_Init+0x2ec>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <HAL_GPIO_Init+0x1dc>
 8004420:	2304      	movs	r3, #4
 8004422:	e008      	b.n	8004436 <HAL_GPIO_Init+0x1ee>
 8004424:	2307      	movs	r3, #7
 8004426:	e006      	b.n	8004436 <HAL_GPIO_Init+0x1ee>
 8004428:	2303      	movs	r3, #3
 800442a:	e004      	b.n	8004436 <HAL_GPIO_Init+0x1ee>
 800442c:	2302      	movs	r3, #2
 800442e:	e002      	b.n	8004436 <HAL_GPIO_Init+0x1ee>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_GPIO_Init+0x1ee>
 8004434:	2300      	movs	r3, #0
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	f002 0203 	and.w	r2, r2, #3
 800443c:	0092      	lsls	r2, r2, #2
 800443e:	4093      	lsls	r3, r2
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004446:	4937      	ldr	r1, [pc, #220]	; (8004524 <HAL_GPIO_Init+0x2dc>)
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	089b      	lsrs	r3, r3, #2
 800444c:	3302      	adds	r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004454:	4b38      	ldr	r3, [pc, #224]	; (8004538 <HAL_GPIO_Init+0x2f0>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	43db      	mvns	r3, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4013      	ands	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004478:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <HAL_GPIO_Init+0x2f0>)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800447e:	4b2e      	ldr	r3, [pc, #184]	; (8004538 <HAL_GPIO_Init+0x2f0>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	43db      	mvns	r3, r3
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4013      	ands	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044a2:	4a25      	ldr	r2, [pc, #148]	; (8004538 <HAL_GPIO_Init+0x2f0>)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044a8:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_GPIO_Init+0x2f0>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044cc:	4a1a      	ldr	r2, [pc, #104]	; (8004538 <HAL_GPIO_Init+0x2f0>)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80044d2:	4b19      	ldr	r3, [pc, #100]	; (8004538 <HAL_GPIO_Init+0x2f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044f6:	4a10      	ldr	r2, [pc, #64]	; (8004538 <HAL_GPIO_Init+0x2f0>)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3301      	adds	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f aea3 	bne.w	8004258 <HAL_GPIO_Init+0x10>
  }
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	371c      	adds	r7, #28
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40021000 	.word	0x40021000
 8004524:	40010000 	.word	0x40010000
 8004528:	48000400 	.word	0x48000400
 800452c:	48000800 	.word	0x48000800
 8004530:	48000c00 	.word	0x48000c00
 8004534:	48001000 	.word	0x48001000
 8004538:	40010400 	.word	0x40010400

0800453c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
 8004548:	4613      	mov	r3, r2
 800454a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800454c:	787b      	ldrb	r3, [r7, #1]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004552:	887a      	ldrh	r2, [r7, #2]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004558:	e002      	b.n	8004560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e081      	b.n	8004682 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd fbca 	bl	8001d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2224      	movs	r2, #36	; 0x24
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d107      	bne.n	80045e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	e006      	b.n	80045f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d104      	bne.n	8004606 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004604:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69d9      	ldr	r1, [r3, #28]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1a      	ldr	r2, [r3, #32]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b08a      	sub	sp, #40	; 0x28
 800468e:	af02      	add	r7, sp, #8
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	460b      	mov	r3, r1
 8004698:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	f040 80f1 	bne.w	800488e <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ba:	d101      	bne.n	80046c0 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
 80046be:	e0e7      	b.n	8004890 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_I2C_IsDeviceReady+0x44>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0e0      	b.n	8004890 <HAL_I2C_IsDeviceReady+0x206>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2224      	movs	r2, #36	; 0x24
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_I2C_IsDeviceReady+0x72>
 80046ec:	897b      	ldrh	r3, [r7, #10]
 80046ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046fa:	e004      	b.n	8004706 <HAL_I2C_IsDeviceReady+0x7c>
 80046fc:	897b      	ldrh	r3, [r7, #10]
 80046fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004702:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800470c:	f7fd ff36 	bl	800257c <HAL_GetTick>
 8004710:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b20      	cmp	r3, #32
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b10      	cmp	r3, #16
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800473e:	e034      	b.n	80047aa <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d01a      	beq.n	800477e <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004748:	f7fd ff18 	bl	800257c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d302      	bcc.n	800475e <HAL_I2C_IsDeviceReady+0xd4>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e088      	b.n	8004890 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b20      	cmp	r3, #32
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b10      	cmp	r3, #16
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <HAL_I2C_IsDeviceReady+0x12c>
 80047b0:	7fbb      	ldrb	r3, [r7, #30]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0c4      	beq.n	8004740 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d01a      	beq.n	80047fa <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2200      	movs	r2, #0
 80047cc:	2120      	movs	r1, #32
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f862 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e058      	b.n	8004890 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2220      	movs	r2, #32
 80047e4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e04a      	b.n	8004890 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	2120      	movs	r1, #32
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f847 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e03d      	b.n	8004890 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2210      	movs	r2, #16
 800481a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2220      	movs	r2, #32
 8004822:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	d118      	bne.n	800485e <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800483a:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	2120      	movs	r1, #32
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f826 	bl	8004898 <I2C_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e01c      	b.n	8004890 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2220      	movs	r2, #32
 800485c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	3301      	adds	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	f63f af3b 	bhi.w	80046e4 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	f043 0220 	orr.w	r2, r3, #32
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	4618      	mov	r0, r3
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a8:	e022      	b.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b0:	d01e      	beq.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fd fe63 	bl	800257c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d113      	bne.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e00f      	b.n	8004910 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	429a      	cmp	r2, r3
 800490c:	d0cd      	beq.n	80048aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b20      	cmp	r3, #32
 800492c:	d138      	bne.n	80049a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004934:	2b01      	cmp	r3, #1
 8004936:	d101      	bne.n	800493c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004938:	2302      	movs	r3, #2
 800493a:	e032      	b.n	80049a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2224      	movs	r2, #36	; 0x24
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800496a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6819      	ldr	r1, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d139      	bne.n	8004a38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e033      	b.n	8004a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2224      	movs	r2, #36	; 0x24
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e000      	b.n	8004a3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40007000 	.word	0x40007000

08004a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a72:	d130      	bne.n	8004ad6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a74:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a80:	d038      	beq.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a82:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a92:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2232      	movs	r2, #50	; 0x32
 8004a98:	fb02 f303 	mul.w	r3, r2, r3
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	0c9b      	lsrs	r3, r3, #18
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aa8:	e002      	b.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ab0:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004abc:	d102      	bne.n	8004ac4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f2      	bne.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ac4:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad0:	d110      	bne.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e00f      	b.n	8004af6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae2:	d007      	beq.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ae4:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aec:	4a05      	ldr	r2, [pc, #20]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004af2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40007000 	.word	0x40007000
 8004b08:	20000000 	.word	0x20000000
 8004b0c:	431bde83 	.word	0x431bde83

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f000 bc02 	b.w	8005328 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b24:	4b96      	ldr	r3, [pc, #600]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b2e:	4b94      	ldr	r3, [pc, #592]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80e4 	beq.w	8004d0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <HAL_RCC_OscConfig+0x4c>
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	f040 808b 	bne.w	8004c6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	f040 8087 	bne.w	8004c6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b5c:	4b88      	ldr	r3, [pc, #544]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_RCC_OscConfig+0x64>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e3d9      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1a      	ldr	r2, [r3, #32]
 8004b78:	4b81      	ldr	r3, [pc, #516]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_RCC_OscConfig+0x7e>
 8004b84:	4b7e      	ldr	r3, [pc, #504]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b8c:	e005      	b.n	8004b9a <HAL_RCC_OscConfig+0x8a>
 8004b8e:	4b7c      	ldr	r3, [pc, #496]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d223      	bcs.n	8004be6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fd8c 	bl	80056c0 <RCC_SetFlashLatencyFromMSIRange>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e3ba      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bb2:	4b73      	ldr	r3, [pc, #460]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a72      	ldr	r2, [pc, #456]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004bb8:	f043 0308 	orr.w	r3, r3, #8
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b70      	ldr	r3, [pc, #448]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	496d      	ldr	r1, [pc, #436]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bd0:	4b6b      	ldr	r3, [pc, #428]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	4968      	ldr	r1, [pc, #416]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
 8004be4:	e025      	b.n	8004c32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004be6:	4b66      	ldr	r3, [pc, #408]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a65      	ldr	r2, [pc, #404]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004bec:	f043 0308 	orr.w	r3, r3, #8
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	4b63      	ldr	r3, [pc, #396]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	4960      	ldr	r1, [pc, #384]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c04:	4b5e      	ldr	r3, [pc, #376]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	495b      	ldr	r1, [pc, #364]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fd4c 	bl	80056c0 <RCC_SetFlashLatencyFromMSIRange>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e37a      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c32:	f000 fc81 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 8004c36:	4602      	mov	r2, r0
 8004c38:	4b51      	ldr	r3, [pc, #324]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	091b      	lsrs	r3, r3, #4
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	4950      	ldr	r1, [pc, #320]	; (8004d84 <HAL_RCC_OscConfig+0x274>)
 8004c44:	5ccb      	ldrb	r3, [r1, r3]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	4a4e      	ldr	r2, [pc, #312]	; (8004d88 <HAL_RCC_OscConfig+0x278>)
 8004c50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c52:	4b4e      	ldr	r3, [pc, #312]	; (8004d8c <HAL_RCC_OscConfig+0x27c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fd fc40 	bl	80024dc <HAL_InitTick>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d052      	beq.n	8004d0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	e35e      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d032      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c72:	4b43      	ldr	r3, [pc, #268]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a42      	ldr	r2, [pc, #264]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c7e:	f7fd fc7d 	bl	800257c <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c86:	f7fd fc79 	bl	800257c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e347      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c98:	4b39      	ldr	r3, [pc, #228]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ca4:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a35      	ldr	r2, [pc, #212]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004caa:	f043 0308 	orr.w	r3, r3, #8
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	4930      	ldr	r1, [pc, #192]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cc2:	4b2f      	ldr	r3, [pc, #188]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	492b      	ldr	r1, [pc, #172]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	604b      	str	r3, [r1, #4]
 8004cd6:	e01a      	b.n	8004d0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cd8:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a28      	ldr	r2, [pc, #160]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ce4:	f7fd fc4a 	bl	800257c <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cec:	f7fd fc46 	bl	800257c <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e314      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cfe:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f0      	bne.n	8004cec <HAL_RCC_OscConfig+0x1dc>
 8004d0a:	e000      	b.n	8004d0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d073      	beq.n	8004e02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_OscConfig+0x21c>
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b0c      	cmp	r3, #12
 8004d24:	d10e      	bne.n	8004d44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d10b      	bne.n	8004d44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	4b14      	ldr	r3, [pc, #80]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d063      	beq.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d15f      	bne.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e2f1      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d106      	bne.n	8004d5c <HAL_RCC_OscConfig+0x24c>
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e025      	b.n	8004da8 <HAL_RCC_OscConfig+0x298>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d64:	d114      	bne.n	8004d90 <HAL_RCC_OscConfig+0x280>
 8004d66:	4b06      	ldr	r3, [pc, #24]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a05      	ldr	r2, [pc, #20]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a02      	ldr	r2, [pc, #8]	; (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e013      	b.n	8004da8 <HAL_RCC_OscConfig+0x298>
 8004d80:	40021000 	.word	0x40021000
 8004d84:	0800acc4 	.word	0x0800acc4
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	20000004 	.word	0x20000004
 8004d90:	4ba0      	ldr	r3, [pc, #640]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a9f      	ldr	r2, [pc, #636]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b9d      	ldr	r3, [pc, #628]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a9c      	ldr	r2, [pc, #624]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fd fbe4 	bl	800257c <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fd fbe0 	bl	800257c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	; 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e2ae      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dca:	4b92      	ldr	r3, [pc, #584]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x2a8>
 8004dd6:	e014      	b.n	8004e02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fd fbd0 	bl	800257c <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de0:	f7fd fbcc 	bl	800257c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b64      	cmp	r3, #100	; 0x64
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e29a      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004df2:	4b88      	ldr	r3, [pc, #544]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x2d0>
 8004dfe:	e000      	b.n	8004e02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d060      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d005      	beq.n	8004e20 <HAL_RCC_OscConfig+0x310>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	2b0c      	cmp	r3, #12
 8004e18:	d119      	bne.n	8004e4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d116      	bne.n	8004e4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e20:	4b7c      	ldr	r3, [pc, #496]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_OscConfig+0x328>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e277      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b76      	ldr	r3, [pc, #472]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	061b      	lsls	r3, r3, #24
 8004e46:	4973      	ldr	r1, [pc, #460]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e4c:	e040      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d023      	beq.n	8004e9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e56:	4b6f      	ldr	r3, [pc, #444]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a6e      	ldr	r2, [pc, #440]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e62:	f7fd fb8b 	bl	800257c <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e6a:	f7fd fb87 	bl	800257c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e255      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e7c:	4b65      	ldr	r3, [pc, #404]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e88:	4b62      	ldr	r3, [pc, #392]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	495f      	ldr	r1, [pc, #380]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
 8004e9c:	e018      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9e:	4b5d      	ldr	r3, [pc, #372]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a5c      	ldr	r2, [pc, #368]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eaa:	f7fd fb67 	bl	800257c <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eb2:	f7fd fb63 	bl	800257c <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e231      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d03c      	beq.n	8004f56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01c      	beq.n	8004f1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee4:	4b4b      	ldr	r3, [pc, #300]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eea:	4a4a      	ldr	r2, [pc, #296]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fd fb42 	bl	800257c <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004efc:	f7fd fb3e 	bl	800257c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e20c      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f0e:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0ef      	beq.n	8004efc <HAL_RCC_OscConfig+0x3ec>
 8004f1c:	e01b      	b.n	8004f56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f24:	4a3b      	ldr	r2, [pc, #236]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2e:	f7fd fb25 	bl	800257c <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f36:	f7fd fb21 	bl	800257c <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1ef      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f48:	4b32      	ldr	r3, [pc, #200]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1ef      	bne.n	8004f36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80a6 	beq.w	80050b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f64:	2300      	movs	r3, #0
 8004f66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10d      	bne.n	8004f90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f74:	4b27      	ldr	r3, [pc, #156]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	4a26      	ldr	r2, [pc, #152]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f80:	4b24      	ldr	r3, [pc, #144]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f90:	4b21      	ldr	r3, [pc, #132]	; (8005018 <HAL_RCC_OscConfig+0x508>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d118      	bne.n	8004fce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <HAL_RCC_OscConfig+0x508>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <HAL_RCC_OscConfig+0x508>)
 8004fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa8:	f7fd fae8 	bl	800257c <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb0:	f7fd fae4 	bl	800257c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e1b2      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <HAL_RCC_OscConfig+0x508>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d108      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x4d8>
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fe6:	e029      	b.n	800503c <HAL_RCC_OscConfig+0x52c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b05      	cmp	r3, #5
 8004fee:	d115      	bne.n	800501c <HAL_RCC_OscConfig+0x50c>
 8004ff0:	4b08      	ldr	r3, [pc, #32]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8004ff8:	f043 0304 	orr.w	r3, r3, #4
 8004ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	4a03      	ldr	r2, [pc, #12]	; (8005014 <HAL_RCC_OscConfig+0x504>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005010:	e014      	b.n	800503c <HAL_RCC_OscConfig+0x52c>
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000
 8005018:	40007000 	.word	0x40007000
 800501c:	4b9a      	ldr	r3, [pc, #616]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	4a99      	ldr	r2, [pc, #612]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800502c:	4b96      	ldr	r3, [pc, #600]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	4a95      	ldr	r2, [pc, #596]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005034:	f023 0304 	bic.w	r3, r3, #4
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d016      	beq.n	8005072 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fd fa9a 	bl	800257c <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504a:	e00a      	b.n	8005062 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504c:	f7fd fa96 	bl	800257c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	f241 3288 	movw	r2, #5000	; 0x1388
 800505a:	4293      	cmp	r3, r2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e162      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005062:	4b89      	ldr	r3, [pc, #548]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0ed      	beq.n	800504c <HAL_RCC_OscConfig+0x53c>
 8005070:	e015      	b.n	800509e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005072:	f7fd fa83 	bl	800257c <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005078:	e00a      	b.n	8005090 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fd fa7f 	bl	800257c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e14b      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005090:	4b7d      	ldr	r3, [pc, #500]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1ed      	bne.n	800507a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800509e:	7ffb      	ldrb	r3, [r7, #31]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d105      	bne.n	80050b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a4:	4b78      	ldr	r3, [pc, #480]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	4a77      	ldr	r2, [pc, #476]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80050aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d03c      	beq.n	8005136 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01c      	beq.n	80050fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050c4:	4b70      	ldr	r3, [pc, #448]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80050c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ca:	4a6f      	ldr	r2, [pc, #444]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fd fa52 	bl	800257c <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050dc:	f7fd fa4e 	bl	800257c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e11c      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050ee:	4b66      	ldr	r3, [pc, #408]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80050f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0ef      	beq.n	80050dc <HAL_RCC_OscConfig+0x5cc>
 80050fc:	e01b      	b.n	8005136 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050fe:	4b62      	ldr	r3, [pc, #392]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005104:	4a60      	ldr	r2, [pc, #384]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510e:	f7fd fa35 	bl	800257c <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005116:	f7fd fa31 	bl	800257c <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e0ff      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005128:	4b57      	ldr	r3, [pc, #348]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 800512a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1ef      	bne.n	8005116 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80f3 	beq.w	8005326 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	2b02      	cmp	r3, #2
 8005146:	f040 80c9 	bne.w	80052dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800514a:	4b4f      	ldr	r3, [pc, #316]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 0203 	and.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	429a      	cmp	r2, r3
 800515c:	d12c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	3b01      	subs	r3, #1
 800516a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d123      	bne.n	80051b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d11b      	bne.n	80051b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d113      	bne.n	80051b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	3b01      	subs	r3, #1
 800519e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d109      	bne.n	80051b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	3b01      	subs	r3, #1
 80051b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d06b      	beq.n	8005290 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d062      	beq.n	8005284 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051be:	4b32      	ldr	r3, [pc, #200]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e0ac      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051ce:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2d      	ldr	r2, [pc, #180]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80051d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051da:	f7fd f9cf 	bl	800257c <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e2:	f7fd f9cb 	bl	800257c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e099      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f4:	4b24      	ldr	r3, [pc, #144]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f0      	bne.n	80051e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005200:	4b21      	ldr	r3, [pc, #132]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	4b21      	ldr	r3, [pc, #132]	; (800528c <HAL_RCC_OscConfig+0x77c>)
 8005206:	4013      	ands	r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005210:	3a01      	subs	r2, #1
 8005212:	0112      	lsls	r2, r2, #4
 8005214:	4311      	orrs	r1, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800521a:	0212      	lsls	r2, r2, #8
 800521c:	4311      	orrs	r1, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005222:	0852      	lsrs	r2, r2, #1
 8005224:	3a01      	subs	r2, #1
 8005226:	0552      	lsls	r2, r2, #21
 8005228:	4311      	orrs	r1, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800522e:	0852      	lsrs	r2, r2, #1
 8005230:	3a01      	subs	r2, #1
 8005232:	0652      	lsls	r2, r2, #25
 8005234:	4311      	orrs	r1, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800523a:	06d2      	lsls	r2, r2, #27
 800523c:	430a      	orrs	r2, r1
 800523e:	4912      	ldr	r1, [pc, #72]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005240:	4313      	orrs	r3, r2
 8005242:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005244:	4b10      	ldr	r3, [pc, #64]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a0f      	ldr	r2, [pc, #60]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 800524a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800524e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005250:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800525c:	f7fd f98e 	bl	800257c <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005264:	f7fd f98a 	bl	800257c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e058      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005276:	4b04      	ldr	r3, [pc, #16]	; (8005288 <HAL_RCC_OscConfig+0x778>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005282:	e050      	b.n	8005326 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e04f      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
 8005288:	40021000 	.word	0x40021000
 800528c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005290:	4b27      	ldr	r3, [pc, #156]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d144      	bne.n	8005326 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800529c:	4b24      	ldr	r3, [pc, #144]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a23      	ldr	r2, [pc, #140]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 80052a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052a8:	4b21      	ldr	r3, [pc, #132]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	4a20      	ldr	r2, [pc, #128]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 80052ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052b4:	f7fd f962 	bl	800257c <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052bc:	f7fd f95e 	bl	800257c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e02c      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ce:	4b18      	ldr	r3, [pc, #96]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x7ac>
 80052da:	e024      	b.n	8005326 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b0c      	cmp	r3, #12
 80052e0:	d01f      	beq.n	8005322 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a12      	ldr	r2, [pc, #72]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 80052e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ee:	f7fd f945 	bl	800257c <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fd f941 	bl	800257c <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e00f      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005314:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	4905      	ldr	r1, [pc, #20]	; (8005330 <HAL_RCC_OscConfig+0x820>)
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <HAL_RCC_OscConfig+0x824>)
 800531c:	4013      	ands	r3, r2
 800531e:	60cb      	str	r3, [r1, #12]
 8005320:	e001      	b.n	8005326 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40021000 	.word	0x40021000
 8005334:	feeefffc 	.word	0xfeeefffc

08005338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0e7      	b.n	800551c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800534c:	4b75      	ldr	r3, [pc, #468]	; (8005524 <HAL_RCC_ClockConfig+0x1ec>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d910      	bls.n	800537c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b72      	ldr	r3, [pc, #456]	; (8005524 <HAL_RCC_ClockConfig+0x1ec>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f023 0207 	bic.w	r2, r3, #7
 8005362:	4970      	ldr	r1, [pc, #448]	; (8005524 <HAL_RCC_ClockConfig+0x1ec>)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536a:	4b6e      	ldr	r3, [pc, #440]	; (8005524 <HAL_RCC_ClockConfig+0x1ec>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d001      	beq.n	800537c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0cf      	b.n	800551c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d010      	beq.n	80053aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	4b66      	ldr	r3, [pc, #408]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005394:	429a      	cmp	r2, r3
 8005396:	d908      	bls.n	80053aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	4b63      	ldr	r3, [pc, #396]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4960      	ldr	r1, [pc, #384]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04c      	beq.n	8005450 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053be:	4b5a      	ldr	r3, [pc, #360]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d121      	bne.n	800540e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e0a6      	b.n	800551c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d6:	4b54      	ldr	r3, [pc, #336]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d115      	bne.n	800540e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e09a      	b.n	800551c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053ee:	4b4e      	ldr	r3, [pc, #312]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e08e      	b.n	800551c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fe:	4b4a      	ldr	r3, [pc, #296]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e086      	b.n	800551c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800540e:	4b46      	ldr	r3, [pc, #280]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 0203 	bic.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4943      	ldr	r1, [pc, #268]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 800541c:	4313      	orrs	r3, r2
 800541e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005420:	f7fd f8ac 	bl	800257c <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fd f8a8 	bl	800257c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e06e      	b.n	800551c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 020c 	and.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	429a      	cmp	r2, r3
 800544e:	d1eb      	bne.n	8005428 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d010      	beq.n	800547e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	4b31      	ldr	r3, [pc, #196]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005468:	429a      	cmp	r2, r3
 800546a:	d208      	bcs.n	800547e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546c:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	492b      	ldr	r1, [pc, #172]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <HAL_RCC_ClockConfig+0x1ec>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d210      	bcs.n	80054ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548c:	4b25      	ldr	r3, [pc, #148]	; (8005524 <HAL_RCC_ClockConfig+0x1ec>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f023 0207 	bic.w	r2, r3, #7
 8005494:	4923      	ldr	r1, [pc, #140]	; (8005524 <HAL_RCC_ClockConfig+0x1ec>)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	4313      	orrs	r3, r2
 800549a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549c:	4b21      	ldr	r3, [pc, #132]	; (8005524 <HAL_RCC_ClockConfig+0x1ec>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d001      	beq.n	80054ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e036      	b.n	800551c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	4918      	ldr	r1, [pc, #96]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054d8:	4b13      	ldr	r3, [pc, #76]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	4910      	ldr	r1, [pc, #64]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ec:	f000 f824 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b0d      	ldr	r3, [pc, #52]	; (8005528 <HAL_RCC_ClockConfig+0x1f0>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	490b      	ldr	r1, [pc, #44]	; (800552c <HAL_RCC_ClockConfig+0x1f4>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
 8005508:	4a09      	ldr	r2, [pc, #36]	; (8005530 <HAL_RCC_ClockConfig+0x1f8>)
 800550a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <HAL_RCC_ClockConfig+0x1fc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f7fc ffe3 	bl	80024dc <HAL_InitTick>
 8005516:	4603      	mov	r3, r0
 8005518:	72fb      	strb	r3, [r7, #11]

  return status;
 800551a:	7afb      	ldrb	r3, [r7, #11]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40022000 	.word	0x40022000
 8005528:	40021000 	.word	0x40021000
 800552c:	0800acc4 	.word	0x0800acc4
 8005530:	20000000 	.word	0x20000000
 8005534:	20000004 	.word	0x20000004

08005538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005538:	b480      	push	{r7}
 800553a:	b089      	sub	sp, #36	; 0x24
 800553c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005546:	4b3e      	ldr	r3, [pc, #248]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005550:	4b3b      	ldr	r3, [pc, #236]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x34>
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b0c      	cmp	r3, #12
 8005564:	d121      	bne.n	80055aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d11e      	bne.n	80055aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800556c:	4b34      	ldr	r3, [pc, #208]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d107      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005578:	4b31      	ldr	r3, [pc, #196]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 800557a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e005      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005588:	4b2d      	ldr	r3, [pc, #180]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005594:	4a2b      	ldr	r2, [pc, #172]	; (8005644 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800559c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10d      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055a8:	e00a      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d102      	bne.n	80055b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055b0:	4b25      	ldr	r3, [pc, #148]	; (8005648 <HAL_RCC_GetSysClockFreq+0x110>)
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	e004      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d101      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055bc:	4b23      	ldr	r3, [pc, #140]	; (800564c <HAL_RCC_GetSysClockFreq+0x114>)
 80055be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	2b0c      	cmp	r3, #12
 80055c4:	d134      	bne.n	8005630 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055c6:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d003      	beq.n	80055de <HAL_RCC_GetSysClockFreq+0xa6>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d003      	beq.n	80055e4 <HAL_RCC_GetSysClockFreq+0xac>
 80055dc:	e005      	b.n	80055ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055de:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <HAL_RCC_GetSysClockFreq+0x110>)
 80055e0:	617b      	str	r3, [r7, #20]
      break;
 80055e2:	e005      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055e4:	4b19      	ldr	r3, [pc, #100]	; (800564c <HAL_RCC_GetSysClockFreq+0x114>)
 80055e6:	617b      	str	r3, [r7, #20]
      break;
 80055e8:	e002      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	617b      	str	r3, [r7, #20]
      break;
 80055ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f0:	4b13      	ldr	r3, [pc, #76]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	3301      	adds	r3, #1
 80055fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	fb03 f202 	mul.w	r2, r3, r2
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <HAL_RCC_GetSysClockFreq+0x108>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	0e5b      	lsrs	r3, r3, #25
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	3301      	adds	r3, #1
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005630:	69bb      	ldr	r3, [r7, #24]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3724      	adds	r7, #36	; 0x24
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000
 8005644:	0800acdc 	.word	0x0800acdc
 8005648:	00f42400 	.word	0x00f42400
 800564c:	007a1200 	.word	0x007a1200

08005650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005654:	4b03      	ldr	r3, [pc, #12]	; (8005664 <HAL_RCC_GetHCLKFreq+0x14>)
 8005656:	681b      	ldr	r3, [r3, #0]
}
 8005658:	4618      	mov	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000000 	.word	0x20000000

08005668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800566c:	f7ff fff0 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 8005670:	4602      	mov	r2, r0
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	4904      	ldr	r1, [pc, #16]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800567e:	5ccb      	ldrb	r3, [r1, r3]
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005688:	4618      	mov	r0, r3
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000
 8005690:	0800acd4 	.word	0x0800acd4

08005694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005698:	f7ff ffda 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 800569c:	4602      	mov	r2, r0
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	0adb      	lsrs	r3, r3, #11
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	4904      	ldr	r1, [pc, #16]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056aa:	5ccb      	ldrb	r3, [r1, r3]
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000
 80056bc:	0800acd4 	.word	0x0800acd4

080056c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056cc:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056d8:	f7ff f9b6 	bl	8004a48 <HAL_PWREx_GetVoltageRange>
 80056dc:	6178      	str	r0, [r7, #20]
 80056de:	e014      	b.n	800570a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	4a24      	ldr	r2, [pc, #144]	; (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ea:	6593      	str	r3, [r2, #88]	; 0x58
 80056ec:	4b22      	ldr	r3, [pc, #136]	; (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056f8:	f7ff f9a6 	bl	8004a48 <HAL_PWREx_GetVoltageRange>
 80056fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056fe:	4b1e      	ldr	r3, [pc, #120]	; (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005708:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005710:	d10b      	bne.n	800572a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b80      	cmp	r3, #128	; 0x80
 8005716:	d919      	bls.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2ba0      	cmp	r3, #160	; 0xa0
 800571c:	d902      	bls.n	8005724 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800571e:	2302      	movs	r3, #2
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	e013      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005724:	2301      	movs	r3, #1
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	e010      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d902      	bls.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005730:	2303      	movs	r3, #3
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e00a      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b80      	cmp	r3, #128	; 0x80
 800573a:	d102      	bne.n	8005742 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800573c:	2302      	movs	r3, #2
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	e004      	b.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b70      	cmp	r3, #112	; 0x70
 8005746:	d101      	bne.n	800574c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005748:	2301      	movs	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f023 0207 	bic.w	r2, r3, #7
 8005754:	4909      	ldr	r1, [pc, #36]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800575c:	4b07      	ldr	r3, [pc, #28]	; (800577c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d001      	beq.n	800576e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e000      	b.n	8005770 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000
 800577c:	40022000 	.word	0x40022000

08005780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005788:	2300      	movs	r3, #0
 800578a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800578c:	2300      	movs	r3, #0
 800578e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005798:	2b00      	cmp	r3, #0
 800579a:	d031      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057a4:	d01a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80057a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057aa:	d814      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d009      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057b4:	d10f      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80057b6:	4b5d      	ldr	r3, [pc, #372]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	4a5c      	ldr	r2, [pc, #368]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057c2:	e00c      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f9f0 	bl	8005bb0 <RCCEx_PLLSAI1_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	74fb      	strb	r3, [r7, #19]
      break;
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80057dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057de:	7cfb      	ldrb	r3, [r7, #19]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057e4:	4b51      	ldr	r3, [pc, #324]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	494e      	ldr	r1, [pc, #312]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057fa:	e001      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 809e 	beq.w	800594a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800580e:	2300      	movs	r3, #0
 8005810:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005812:	4b46      	ldr	r3, [pc, #280]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800581e:	2301      	movs	r3, #1
 8005820:	e000      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005822:	2300      	movs	r3, #0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00d      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005828:	4b40      	ldr	r3, [pc, #256]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	4a3f      	ldr	r2, [pc, #252]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800582e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005832:	6593      	str	r3, [r2, #88]	; 0x58
 8005834:	4b3d      	ldr	r3, [pc, #244]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005840:	2301      	movs	r3, #1
 8005842:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005844:	4b3a      	ldr	r3, [pc, #232]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a39      	ldr	r2, [pc, #228]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800584a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005850:	f7fc fe94 	bl	800257c <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005856:	e009      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005858:	f7fc fe90 	bl	800257c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d902      	bls.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	74fb      	strb	r3, [r7, #19]
        break;
 800586a:	e005      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800586c:	4b30      	ldr	r3, [pc, #192]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0ef      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005878:	7cfb      	ldrb	r3, [r7, #19]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d15a      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005888:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01e      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	429a      	cmp	r2, r3
 8005898:	d019      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800589a:	4b24      	ldr	r3, [pc, #144]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058a6:	4b21      	ldr	r3, [pc, #132]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058bc:	4a1b      	ldr	r2, [pc, #108]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058c6:	4a19      	ldr	r2, [pc, #100]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d016      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fc fe50 	bl	800257c <HAL_GetTick>
 80058dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058de:	e00b      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e0:	f7fc fe4c 	bl	800257c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d902      	bls.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	74fb      	strb	r3, [r7, #19]
            break;
 80058f6:	e006      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0ec      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005906:	7cfb      	ldrb	r3, [r7, #19]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800590c:	4b07      	ldr	r3, [pc, #28]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591a:	4904      	ldr	r1, [pc, #16]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005922:	e009      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	74bb      	strb	r3, [r7, #18]
 8005928:	e006      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800592a:	bf00      	nop
 800592c:	40021000 	.word	0x40021000
 8005930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005938:	7c7b      	ldrb	r3, [r7, #17]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593e:	4b9b      	ldr	r3, [pc, #620]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	4a9a      	ldr	r2, [pc, #616]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005948:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005956:	4b95      	ldr	r3, [pc, #596]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f023 0203 	bic.w	r2, r3, #3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	4991      	ldr	r1, [pc, #580]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005978:	4b8c      	ldr	r3, [pc, #560]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f023 020c 	bic.w	r2, r3, #12
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	4989      	ldr	r1, [pc, #548]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800599a:	4b84      	ldr	r3, [pc, #528]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	4980      	ldr	r1, [pc, #512]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059bc:	4b7b      	ldr	r3, [pc, #492]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	4978      	ldr	r1, [pc, #480]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059de:	4b73      	ldr	r3, [pc, #460]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ec:	496f      	ldr	r1, [pc, #444]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a00:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	4967      	ldr	r1, [pc, #412]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a22:	4b62      	ldr	r3, [pc, #392]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a30:	495e      	ldr	r1, [pc, #376]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a44:	4b59      	ldr	r3, [pc, #356]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a52:	4956      	ldr	r1, [pc, #344]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a66:	4b51      	ldr	r3, [pc, #324]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	494d      	ldr	r1, [pc, #308]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d028      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a88:	4b48      	ldr	r3, [pc, #288]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a96:	4945      	ldr	r1, [pc, #276]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa8:	4b40      	ldr	r3, [pc, #256]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a3f      	ldr	r2, [pc, #252]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab2:	60d3      	str	r3, [r2, #12]
 8005ab4:	e011      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005abe:	d10c      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f872 	bl	8005bb0 <RCCEx_PLLSAI1_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005ad6:	7cfb      	ldrb	r3, [r7, #19]
 8005ad8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d028      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ae6:	4b31      	ldr	r3, [pc, #196]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af4:	492d      	ldr	r1, [pc, #180]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b04:	d106      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b06:	4b29      	ldr	r3, [pc, #164]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	4a28      	ldr	r2, [pc, #160]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b10:	60d3      	str	r3, [r2, #12]
 8005b12:	e011      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2101      	movs	r1, #1
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f843 	bl	8005bb0 <RCCEx_PLLSAI1_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b2e:	7cfb      	ldrb	r3, [r7, #19]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01c      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b44:	4b19      	ldr	r3, [pc, #100]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b52:	4916      	ldr	r1, [pc, #88]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b62:	d10c      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	2102      	movs	r1, #2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f820 	bl	8005bb0 <RCCEx_PLLSAI1_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005b7a:	7cfb      	ldrb	r3, [r7, #19]
 8005b7c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b8a:	4b08      	ldr	r3, [pc, #32]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	4904      	ldr	r1, [pc, #16]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ba0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000

08005bb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bbe:	4b74      	ldr	r3, [pc, #464]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d018      	beq.n	8005bfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bca:	4b71      	ldr	r3, [pc, #452]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0203 	and.w	r2, r3, #3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d10d      	bne.n	8005bf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d009      	beq.n	8005bf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005be2:	4b6b      	ldr	r3, [pc, #428]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d047      	beq.n	8005c86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]
 8005bfa:	e044      	b.n	8005c86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d018      	beq.n	8005c36 <RCCEx_PLLSAI1_Config+0x86>
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d825      	bhi.n	8005c54 <RCCEx_PLLSAI1_Config+0xa4>
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d002      	beq.n	8005c12 <RCCEx_PLLSAI1_Config+0x62>
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d009      	beq.n	8005c24 <RCCEx_PLLSAI1_Config+0x74>
 8005c10:	e020      	b.n	8005c54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c12:	4b5f      	ldr	r3, [pc, #380]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11d      	bne.n	8005c5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c22:	e01a      	b.n	8005c5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c24:	4b5a      	ldr	r3, [pc, #360]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d116      	bne.n	8005c5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c34:	e013      	b.n	8005c5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c36:	4b56      	ldr	r3, [pc, #344]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10f      	bne.n	8005c62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c42:	4b53      	ldr	r3, [pc, #332]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c52:	e006      	b.n	8005c62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	73fb      	strb	r3, [r7, #15]
      break;
 8005c58:	e004      	b.n	8005c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e002      	b.n	8005c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e000      	b.n	8005c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10d      	bne.n	8005c86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c6a:	4b49      	ldr	r3, [pc, #292]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6819      	ldr	r1, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	4943      	ldr	r1, [pc, #268]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d17c      	bne.n	8005d86 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c8c:	4b40      	ldr	r3, [pc, #256]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a3f      	ldr	r2, [pc, #252]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c98:	f7fc fc70 	bl	800257c <HAL_GetTick>
 8005c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c9e:	e009      	b.n	8005cb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ca0:	f7fc fc6c 	bl	800257c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d902      	bls.n	8005cb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8005cb2:	e005      	b.n	8005cc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cb4:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ef      	bne.n	8005ca0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d15f      	bne.n	8005d86 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d110      	bne.n	8005cee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ccc:	4b30      	ldr	r3, [pc, #192]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005cd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6892      	ldr	r2, [r2, #8]
 8005cdc:	0211      	lsls	r1, r2, #8
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68d2      	ldr	r2, [r2, #12]
 8005ce2:	06d2      	lsls	r2, r2, #27
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	492a      	ldr	r1, [pc, #168]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	610b      	str	r3, [r1, #16]
 8005cec:	e027      	b.n	8005d3e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d112      	bne.n	8005d1a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cf4:	4b26      	ldr	r3, [pc, #152]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005cfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
 8005d04:	0211      	lsls	r1, r2, #8
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6912      	ldr	r2, [r2, #16]
 8005d0a:	0852      	lsrs	r2, r2, #1
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	0552      	lsls	r2, r2, #21
 8005d10:	430a      	orrs	r2, r1
 8005d12:	491f      	ldr	r1, [pc, #124]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	610b      	str	r3, [r1, #16]
 8005d18:	e011      	b.n	8005d3e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d22:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6892      	ldr	r2, [r2, #8]
 8005d2a:	0211      	lsls	r1, r2, #8
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6952      	ldr	r2, [r2, #20]
 8005d30:	0852      	lsrs	r2, r2, #1
 8005d32:	3a01      	subs	r2, #1
 8005d34:	0652      	lsls	r2, r2, #25
 8005d36:	430a      	orrs	r2, r1
 8005d38:	4915      	ldr	r1, [pc, #84]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d3e:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d48:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fc fc17 	bl	800257c <HAL_GetTick>
 8005d4e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d50:	e009      	b.n	8005d66 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d52:	f7fc fc13 	bl	800257c <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d902      	bls.n	8005d66 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	73fb      	strb	r3, [r7, #15]
          break;
 8005d64:	e005      	b.n	8005d72 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0ef      	beq.n	8005d52 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d106      	bne.n	8005d86 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	4903      	ldr	r1, [pc, #12]	; (8005d90 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000

08005d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e049      	b.n	8005e3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc f8c0 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	3304      	adds	r3, #4
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f000 fa88 	bl	80062e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e049      	b.n	8005ee8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f841 	bl	8005ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f000 fa31 	bl	80062e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x24>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	e03c      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d109      	bne.n	8005f42 <HAL_TIM_PWM_Start+0x3e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	bf14      	ite	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	2300      	moveq	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	e02f      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d109      	bne.n	8005f5c <HAL_TIM_PWM_Start+0x58>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	e022      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b0c      	cmp	r3, #12
 8005f60:	d109      	bne.n	8005f76 <HAL_TIM_PWM_Start+0x72>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	bf14      	ite	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	2300      	moveq	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	e015      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d109      	bne.n	8005f90 <HAL_TIM_PWM_Start+0x8c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	e008      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x9e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	bf14      	ite	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	2300      	moveq	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e07e      	b.n	80060a8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <HAL_TIM_PWM_Start+0xb6>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb8:	e023      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d104      	bne.n	8005fca <HAL_TIM_PWM_Start+0xc6>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc8:	e01b      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_PWM_Start+0xd6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd8:	e013      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b0c      	cmp	r3, #12
 8005fde:	d104      	bne.n	8005fea <HAL_TIM_PWM_Start+0xe6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fe8:	e00b      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Start+0xf6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff8:	e003      	b.n	8006002 <HAL_TIM_PWM_Start+0xfe>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2201      	movs	r2, #1
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fc4e 	bl	80068ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a26      	ldr	r2, [pc, #152]	; (80060b0 <HAL_TIM_PWM_Start+0x1ac>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_TIM_PWM_Start+0x12a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <HAL_TIM_PWM_Start+0x1b0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <HAL_TIM_PWM_Start+0x12a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a23      	ldr	r2, [pc, #140]	; (80060b8 <HAL_TIM_PWM_Start+0x1b4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <HAL_TIM_PWM_Start+0x12e>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <HAL_TIM_PWM_Start+0x130>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006046:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <HAL_TIM_PWM_Start+0x1ac>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIM_PWM_Start+0x162>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d004      	beq.n	8006066 <HAL_TIM_PWM_Start+0x162>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <HAL_TIM_PWM_Start+0x1b0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d115      	bne.n	8006092 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	4b13      	ldr	r3, [pc, #76]	; (80060bc <HAL_TIM_PWM_Start+0x1b8>)
 800606e:	4013      	ands	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d015      	beq.n	80060a4 <HAL_TIM_PWM_Start+0x1a0>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607e:	d011      	beq.n	80060a4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	e008      	b.n	80060a4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0201 	orr.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e000      	b.n	80060a6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400
 80060bc:	00010007 	.word	0x00010007

080060c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060da:	2302      	movs	r3, #2
 80060dc:	e0ff      	b.n	80062de <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b14      	cmp	r3, #20
 80060ea:	f200 80f0 	bhi.w	80062ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006149 	.word	0x08006149
 80060f8:	080062cf 	.word	0x080062cf
 80060fc:	080062cf 	.word	0x080062cf
 8006100:	080062cf 	.word	0x080062cf
 8006104:	08006189 	.word	0x08006189
 8006108:	080062cf 	.word	0x080062cf
 800610c:	080062cf 	.word	0x080062cf
 8006110:	080062cf 	.word	0x080062cf
 8006114:	080061cb 	.word	0x080061cb
 8006118:	080062cf 	.word	0x080062cf
 800611c:	080062cf 	.word	0x080062cf
 8006120:	080062cf 	.word	0x080062cf
 8006124:	0800620b 	.word	0x0800620b
 8006128:	080062cf 	.word	0x080062cf
 800612c:	080062cf 	.word	0x080062cf
 8006130:	080062cf 	.word	0x080062cf
 8006134:	0800624d 	.word	0x0800624d
 8006138:	080062cf 	.word	0x080062cf
 800613c:	080062cf 	.word	0x080062cf
 8006140:	080062cf 	.word	0x080062cf
 8006144:	0800628d 	.word	0x0800628d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f92e 	bl	80063b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0208 	orr.w	r2, r2, #8
 8006162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0204 	bic.w	r2, r2, #4
 8006172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6999      	ldr	r1, [r3, #24]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	619a      	str	r2, [r3, #24]
      break;
 8006186:	e0a5      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f000 f98a 	bl	80064a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6999      	ldr	r1, [r3, #24]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	021a      	lsls	r2, r3, #8
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	619a      	str	r2, [r3, #24]
      break;
 80061c8:	e084      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 f9e3 	bl	800659c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0208 	orr.w	r2, r2, #8
 80061e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0204 	bic.w	r2, r2, #4
 80061f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69d9      	ldr	r1, [r3, #28]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	61da      	str	r2, [r3, #28]
      break;
 8006208:	e064      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fa3b 	bl	800668c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69d9      	ldr	r1, [r3, #28]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	021a      	lsls	r2, r3, #8
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	61da      	str	r2, [r3, #28]
      break;
 800624a:	e043      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fa78 	bl	8006748 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0208 	orr.w	r2, r2, #8
 8006266:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0204 	bic.w	r2, r2, #4
 8006276:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800628a:	e023      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fab0 	bl	80067f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	021a      	lsls	r2, r3, #8
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062cc:	e002      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
      break;
 80062d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop

080062e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <TIM_Base_SetConfig+0xbc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_Base_SetConfig+0x20>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006306:	d108      	bne.n	800631a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <TIM_Base_SetConfig+0xbc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00b      	beq.n	800633a <TIM_Base_SetConfig+0x52>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006328:	d007      	beq.n	800633a <TIM_Base_SetConfig+0x52>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1e      	ldr	r2, [pc, #120]	; (80063a8 <TIM_Base_SetConfig+0xc0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_Base_SetConfig+0x52>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <TIM_Base_SetConfig+0xc4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d108      	bne.n	800634c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a0c      	ldr	r2, [pc, #48]	; (80063a4 <TIM_Base_SetConfig+0xbc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d007      	beq.n	8006388 <TIM_Base_SetConfig+0xa0>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <TIM_Base_SetConfig+0xc0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_Base_SetConfig+0xa0>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <TIM_Base_SetConfig+0xc4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d103      	bne.n	8006390 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	615a      	str	r2, [r3, #20]
}
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40012c00 	.word	0x40012c00
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40014400 	.word	0x40014400

080063b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	f023 0201 	bic.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 0302 	bic.w	r3, r3, #2
 80063fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a24      	ldr	r2, [pc, #144]	; (800649c <TIM_OC1_SetConfig+0xec>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d007      	beq.n	8006420 <TIM_OC1_SetConfig+0x70>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a23      	ldr	r2, [pc, #140]	; (80064a0 <TIM_OC1_SetConfig+0xf0>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC1_SetConfig+0x70>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <TIM_OC1_SetConfig+0xf4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10c      	bne.n	800643a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0308 	bic.w	r3, r3, #8
 8006426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a17      	ldr	r2, [pc, #92]	; (800649c <TIM_OC1_SetConfig+0xec>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_OC1_SetConfig+0xa2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <TIM_OC1_SetConfig+0xf0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_OC1_SetConfig+0xa2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a15      	ldr	r2, [pc, #84]	; (80064a4 <TIM_OC1_SetConfig+0xf4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d111      	bne.n	8006476 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	621a      	str	r2, [r3, #32]
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40014400 	.word	0x40014400

080064a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0210 	bic.w	r2, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0320 	bic.w	r3, r3, #32
 80064f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a22      	ldr	r2, [pc, #136]	; (8006590 <TIM_OC2_SetConfig+0xe8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10d      	bne.n	8006528 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006526:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a19      	ldr	r2, [pc, #100]	; (8006590 <TIM_OC2_SetConfig+0xe8>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <TIM_OC2_SetConfig+0x98>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a18      	ldr	r2, [pc, #96]	; (8006594 <TIM_OC2_SetConfig+0xec>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_OC2_SetConfig+0x98>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a17      	ldr	r2, [pc, #92]	; (8006598 <TIM_OC2_SetConfig+0xf0>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d113      	bne.n	8006568 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800654e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	621a      	str	r2, [r3, #32]
}
 8006582:	bf00      	nop
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40012c00 	.word	0x40012c00
 8006594:	40014000 	.word	0x40014000
 8006598:	40014400 	.word	0x40014400

0800659c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a21      	ldr	r2, [pc, #132]	; (8006680 <TIM_OC3_SetConfig+0xe4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d10d      	bne.n	800661a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a18      	ldr	r2, [pc, #96]	; (8006680 <TIM_OC3_SetConfig+0xe4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d007      	beq.n	8006632 <TIM_OC3_SetConfig+0x96>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a17      	ldr	r2, [pc, #92]	; (8006684 <TIM_OC3_SetConfig+0xe8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d003      	beq.n	8006632 <TIM_OC3_SetConfig+0x96>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a16      	ldr	r2, [pc, #88]	; (8006688 <TIM_OC3_SetConfig+0xec>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d113      	bne.n	800665a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40014000 	.word	0x40014000
 8006688:	40014400 	.word	0x40014400

0800668c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	031b      	lsls	r3, r3, #12
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a14      	ldr	r2, [pc, #80]	; (800673c <TIM_OC4_SetConfig+0xb0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d007      	beq.n	8006700 <TIM_OC4_SetConfig+0x74>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a13      	ldr	r2, [pc, #76]	; (8006740 <TIM_OC4_SetConfig+0xb4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d003      	beq.n	8006700 <TIM_OC4_SetConfig+0x74>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a12      	ldr	r2, [pc, #72]	; (8006744 <TIM_OC4_SetConfig+0xb8>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d109      	bne.n	8006714 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	019b      	lsls	r3, r3, #6
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40012c00 	.word	0x40012c00
 8006740:	40014000 	.word	0x40014000
 8006744:	40014400 	.word	0x40014400

08006748 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800678c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	041b      	lsls	r3, r3, #16
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a13      	ldr	r2, [pc, #76]	; (80067ec <TIM_OC5_SetConfig+0xa4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_OC5_SetConfig+0x6a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a12      	ldr	r2, [pc, #72]	; (80067f0 <TIM_OC5_SetConfig+0xa8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC5_SetConfig+0x6a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a11      	ldr	r2, [pc, #68]	; (80067f4 <TIM_OC5_SetConfig+0xac>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d109      	bne.n	80067c6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	621a      	str	r2, [r3, #32]
}
 80067e0:	bf00      	nop
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400

080067f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800683e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	051b      	lsls	r3, r3, #20
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a14      	ldr	r2, [pc, #80]	; (80068a0 <TIM_OC6_SetConfig+0xa8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d007      	beq.n	8006864 <TIM_OC6_SetConfig+0x6c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a13      	ldr	r2, [pc, #76]	; (80068a4 <TIM_OC6_SetConfig+0xac>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_OC6_SetConfig+0x6c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a12      	ldr	r2, [pc, #72]	; (80068a8 <TIM_OC6_SetConfig+0xb0>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d109      	bne.n	8006878 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800686a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	029b      	lsls	r3, r3, #10
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	621a      	str	r2, [r3, #32]
}
 8006892:	bf00      	nop
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400

080068ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2201      	movs	r2, #1
 80068c0:	fa02 f303 	lsl.w	r3, r2, r3
 80068c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1a      	ldr	r2, [r3, #32]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	43db      	mvns	r3, r3
 80068ce:	401a      	ands	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1a      	ldr	r2, [r3, #32]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 031f 	and.w	r3, r3, #31
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	431a      	orrs	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006910:	2302      	movs	r3, #2
 8006912:	e060      	b.n	80069d6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a14      	ldr	r2, [pc, #80]	; (80069e4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d115      	bne.n	80069c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	051b      	lsls	r3, r3, #20
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40012c00 	.word	0x40012c00

080069e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e040      	b.n	8006a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fb faf0 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2224      	movs	r2, #36	; 0x24
 8006a14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fc0e 	bl	8007248 <UART_SetConfig>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e022      	b.n	8006a7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fe5c 	bl	80076fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fee3 	bl	8007840 <UART_CheckIdleState>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a98:	2b20      	cmp	r3, #32
 8006a9a:	f040 8082 	bne.w	8006ba2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <HAL_UART_Transmit+0x26>
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d101      	bne.n	8006aae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e07a      	b.n	8006ba4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_Transmit+0x38>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e073      	b.n	8006ba4 <HAL_UART_Transmit+0x120>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2221      	movs	r2, #33	; 0x21
 8006ad0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ad2:	f7fb fd53 	bl	800257c <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af0:	d108      	bne.n	8006b04 <HAL_UART_Transmit+0x80>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e003      	b.n	8006b0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b14:	e02d      	b.n	8006b72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fed6 	bl	80078d2 <UART_WaitOnFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e039      	b.n	8006ba4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	881a      	ldrh	r2, [r3, #0]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b42:	b292      	uxth	r2, r2
 8006b44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	3302      	adds	r3, #2
 8006b4a:	61bb      	str	r3, [r7, #24]
 8006b4c:	e008      	b.n	8006b60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	781a      	ldrb	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	b292      	uxth	r2, r2
 8006b58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1cb      	bne.n	8006b16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2200      	movs	r2, #0
 8006b86:	2140      	movs	r1, #64	; 0x40
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fea2 	bl	80078d2 <UART_WaitOnFlagUntilTimeout>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e005      	b.n	8006ba4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e000      	b.n	8006ba4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006ba2:	2302      	movs	r3, #2
  }
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	d142      	bne.n	8006c48 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HAL_UART_Receive_IT+0x22>
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e03b      	b.n	8006c4a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_UART_Receive_IT+0x34>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e034      	b.n	8006c4a <HAL_UART_Receive_IT+0x9e>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <HAL_UART_Receive_IT+0xa8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d01f      	beq.n	8006c38 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d018      	beq.n	8006c38 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	613b      	str	r3, [r7, #16]
   return(result);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 ff0c 	bl	8007a5c <UART_Start_Receive_IT>
 8006c44:	4603      	mov	r3, r0
 8006c46:	e000      	b.n	8006c4a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3728      	adds	r7, #40	; 0x28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40008000 	.word	0x40008000

08006c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b0ba      	sub	sp, #232	; 0xe8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c86:	4013      	ands	r3, r2
 8006c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d115      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 82a6 	beq.w	8007202 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
      }
      return;
 8006cbe:	e2a0      	b.n	8007202 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8117 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cda:	4b85      	ldr	r3, [pc, #532]	; (8006ef0 <HAL_UART_IRQHandler+0x298>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 810a 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d011      	beq.n	8006d14 <HAL_UART_IRQHandler+0xbc>
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2201      	movs	r2, #1
 8006d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d0a:	f043 0201 	orr.w	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d011      	beq.n	8006d44 <HAL_UART_IRQHandler+0xec>
 8006d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2202      	movs	r2, #2
 8006d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3a:	f043 0204 	orr.w	r2, r3, #4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d011      	beq.n	8006d74 <HAL_UART_IRQHandler+0x11c>
 8006d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2204      	movs	r2, #4
 8006d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6a:	f043 0202 	orr.w	r2, r3, #2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d017      	beq.n	8006db0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da6:	f043 0208 	orr.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d012      	beq.n	8006de2 <HAL_UART_IRQHandler+0x18a>
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00c      	beq.n	8006de2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 820c 	beq.w	8007206 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d005      	beq.n	8006e3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04f      	beq.n	8006eda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fed8 	bl	8007bf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d141      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3308      	adds	r3, #8
 8006e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1d9      	bne.n	8006e4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d013      	beq.n	8006eca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <HAL_UART_IRQHandler+0x29c>)
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fd f8aa 	bl	8004008 <HAL_DMA_Abort_IT>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	e00f      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fa f942 	bl	8001154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed0:	e00b      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fa f93e 	bl	8001154 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	e007      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7fa f93a 	bl	8001154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006ee8:	e18d      	b.n	8007206 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eea:	bf00      	nop
    return;
 8006eec:	e18b      	b.n	8007206 <HAL_UART_IRQHandler+0x5ae>
 8006eee:	bf00      	nop
 8006ef0:	04000120 	.word	0x04000120
 8006ef4:	08007cb7 	.word	0x08007cb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 8146 	bne.w	800718e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 813f 	beq.w	800718e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8138 	beq.w	800718e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2210      	movs	r2, #16
 8006f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	f040 80b4 	bne.w	800709e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 815f 	beq.w	800720a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f080 8157 	bcs.w	800720a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f040 8085 	bne.w	8007082 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fa6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1da      	bne.n	8006f78 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fe6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e1      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800700e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007024:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e3      	bne.n	8006ffe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007052:	f023 0310 	bic.w	r3, r3, #16
 8007056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007064:	65bb      	str	r3, [r7, #88]	; 0x58
 8007066:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800706a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e4      	bne.n	8007042 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707c:	4618      	mov	r0, r3
 800707e:	f7fc ff85 	bl	8003f8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800708e:	b29b      	uxth	r3, r3
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8ca 	bl	8007230 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800709c:	e0b5      	b.n	800720a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80a7 	beq.w	800720e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80070c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80a2 	beq.w	800720e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ec:	647b      	str	r3, [r7, #68]	; 0x44
 80070ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e4      	bne.n	80070ca <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3308      	adds	r3, #8
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	623b      	str	r3, [r7, #32]
   return(result);
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	f023 0301 	bic.w	r3, r3, #1
 8007116:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007124:	633a      	str	r2, [r7, #48]	; 0x30
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800712a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e3      	bne.n	8007100 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60fb      	str	r3, [r7, #12]
   return(result);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800716c:	61fb      	str	r3, [r7, #28]
 800716e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	617b      	str	r3, [r7, #20]
   return(result);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e4      	bne.n	800714a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f852 	bl	8007230 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800718c:	e03f      	b.n	800720e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <HAL_UART_IRQHandler+0x560>
 800719a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800719e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 ff20 	bl	8007ff6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071b6:	e02d      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01c      	beq.n	8007212 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
    }
    return;
 80071e0:	e017      	b.n	8007212 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d012      	beq.n	8007214 <HAL_UART_IRQHandler+0x5bc>
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fd71 	bl	8007ce2 <UART_EndTransmit_IT>
    return;
 8007200:	e008      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007202:	bf00      	nop
 8007204:	e006      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007206:	bf00      	nop
 8007208:	e004      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
      return;
 800720a:	bf00      	nop
 800720c:	e002      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
      return;
 800720e:	bf00      	nop
 8007210:	e000      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007212:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007214:	37e8      	adds	r7, #232	; 0xe8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop

0800721c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800724c:	b08a      	sub	sp, #40	; 0x28
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	431a      	orrs	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	431a      	orrs	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	4313      	orrs	r3, r2
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4b9e      	ldr	r3, [pc, #632]	; (80074f0 <UART_SetConfig+0x2a8>)
 8007278:	4013      	ands	r3, r2
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007280:	430b      	orrs	r3, r1
 8007282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a93      	ldr	r2, [pc, #588]	; (80074f4 <UART_SetConfig+0x2ac>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072b0:	4313      	orrs	r3, r2
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072c4:	430a      	orrs	r2, r1
 80072c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a8a      	ldr	r2, [pc, #552]	; (80074f8 <UART_SetConfig+0x2b0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d126      	bne.n	8007320 <UART_SetConfig+0xd8>
 80072d2:	4b8a      	ldr	r3, [pc, #552]	; (80074fc <UART_SetConfig+0x2b4>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d81b      	bhi.n	8007318 <UART_SetConfig+0xd0>
 80072e0:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <UART_SetConfig+0xa0>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	080072f9 	.word	0x080072f9
 80072ec:	08007309 	.word	0x08007309
 80072f0:	08007301 	.word	0x08007301
 80072f4:	08007311 	.word	0x08007311
 80072f8:	2301      	movs	r3, #1
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072fe:	e0ab      	b.n	8007458 <UART_SetConfig+0x210>
 8007300:	2302      	movs	r3, #2
 8007302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007306:	e0a7      	b.n	8007458 <UART_SetConfig+0x210>
 8007308:	2304      	movs	r3, #4
 800730a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800730e:	e0a3      	b.n	8007458 <UART_SetConfig+0x210>
 8007310:	2308      	movs	r3, #8
 8007312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007316:	e09f      	b.n	8007458 <UART_SetConfig+0x210>
 8007318:	2310      	movs	r3, #16
 800731a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800731e:	e09b      	b.n	8007458 <UART_SetConfig+0x210>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a76      	ldr	r2, [pc, #472]	; (8007500 <UART_SetConfig+0x2b8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d138      	bne.n	800739c <UART_SetConfig+0x154>
 800732a:	4b74      	ldr	r3, [pc, #464]	; (80074fc <UART_SetConfig+0x2b4>)
 800732c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007330:	f003 030c 	and.w	r3, r3, #12
 8007334:	2b0c      	cmp	r3, #12
 8007336:	d82d      	bhi.n	8007394 <UART_SetConfig+0x14c>
 8007338:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <UART_SetConfig+0xf8>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	08007375 	.word	0x08007375
 8007344:	08007395 	.word	0x08007395
 8007348:	08007395 	.word	0x08007395
 800734c:	08007395 	.word	0x08007395
 8007350:	08007385 	.word	0x08007385
 8007354:	08007395 	.word	0x08007395
 8007358:	08007395 	.word	0x08007395
 800735c:	08007395 	.word	0x08007395
 8007360:	0800737d 	.word	0x0800737d
 8007364:	08007395 	.word	0x08007395
 8007368:	08007395 	.word	0x08007395
 800736c:	08007395 	.word	0x08007395
 8007370:	0800738d 	.word	0x0800738d
 8007374:	2300      	movs	r3, #0
 8007376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737a:	e06d      	b.n	8007458 <UART_SetConfig+0x210>
 800737c:	2302      	movs	r3, #2
 800737e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007382:	e069      	b.n	8007458 <UART_SetConfig+0x210>
 8007384:	2304      	movs	r3, #4
 8007386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738a:	e065      	b.n	8007458 <UART_SetConfig+0x210>
 800738c:	2308      	movs	r3, #8
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007392:	e061      	b.n	8007458 <UART_SetConfig+0x210>
 8007394:	2310      	movs	r3, #16
 8007396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739a:	e05d      	b.n	8007458 <UART_SetConfig+0x210>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a58      	ldr	r2, [pc, #352]	; (8007504 <UART_SetConfig+0x2bc>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d125      	bne.n	80073f2 <UART_SetConfig+0x1aa>
 80073a6:	4b55      	ldr	r3, [pc, #340]	; (80074fc <UART_SetConfig+0x2b4>)
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073b0:	2b30      	cmp	r3, #48	; 0x30
 80073b2:	d016      	beq.n	80073e2 <UART_SetConfig+0x19a>
 80073b4:	2b30      	cmp	r3, #48	; 0x30
 80073b6:	d818      	bhi.n	80073ea <UART_SetConfig+0x1a2>
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d00a      	beq.n	80073d2 <UART_SetConfig+0x18a>
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d814      	bhi.n	80073ea <UART_SetConfig+0x1a2>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <UART_SetConfig+0x182>
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d008      	beq.n	80073da <UART_SetConfig+0x192>
 80073c8:	e00f      	b.n	80073ea <UART_SetConfig+0x1a2>
 80073ca:	2300      	movs	r3, #0
 80073cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d0:	e042      	b.n	8007458 <UART_SetConfig+0x210>
 80073d2:	2302      	movs	r3, #2
 80073d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d8:	e03e      	b.n	8007458 <UART_SetConfig+0x210>
 80073da:	2304      	movs	r3, #4
 80073dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073e0:	e03a      	b.n	8007458 <UART_SetConfig+0x210>
 80073e2:	2308      	movs	r3, #8
 80073e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073e8:	e036      	b.n	8007458 <UART_SetConfig+0x210>
 80073ea:	2310      	movs	r3, #16
 80073ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073f0:	e032      	b.n	8007458 <UART_SetConfig+0x210>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a3f      	ldr	r2, [pc, #252]	; (80074f4 <UART_SetConfig+0x2ac>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d12a      	bne.n	8007452 <UART_SetConfig+0x20a>
 80073fc:	4b3f      	ldr	r3, [pc, #252]	; (80074fc <UART_SetConfig+0x2b4>)
 80073fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007402:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800740a:	d01a      	beq.n	8007442 <UART_SetConfig+0x1fa>
 800740c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007410:	d81b      	bhi.n	800744a <UART_SetConfig+0x202>
 8007412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007416:	d00c      	beq.n	8007432 <UART_SetConfig+0x1ea>
 8007418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741c:	d815      	bhi.n	800744a <UART_SetConfig+0x202>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <UART_SetConfig+0x1e2>
 8007422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007426:	d008      	beq.n	800743a <UART_SetConfig+0x1f2>
 8007428:	e00f      	b.n	800744a <UART_SetConfig+0x202>
 800742a:	2300      	movs	r3, #0
 800742c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007430:	e012      	b.n	8007458 <UART_SetConfig+0x210>
 8007432:	2302      	movs	r3, #2
 8007434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007438:	e00e      	b.n	8007458 <UART_SetConfig+0x210>
 800743a:	2304      	movs	r3, #4
 800743c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007440:	e00a      	b.n	8007458 <UART_SetConfig+0x210>
 8007442:	2308      	movs	r3, #8
 8007444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007448:	e006      	b.n	8007458 <UART_SetConfig+0x210>
 800744a:	2310      	movs	r3, #16
 800744c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007450:	e002      	b.n	8007458 <UART_SetConfig+0x210>
 8007452:	2310      	movs	r3, #16
 8007454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a25      	ldr	r2, [pc, #148]	; (80074f4 <UART_SetConfig+0x2ac>)
 800745e:	4293      	cmp	r3, r2
 8007460:	f040 808a 	bne.w	8007578 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007468:	2b08      	cmp	r3, #8
 800746a:	d824      	bhi.n	80074b6 <UART_SetConfig+0x26e>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <UART_SetConfig+0x22c>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	08007499 	.word	0x08007499
 8007478:	080074b7 	.word	0x080074b7
 800747c:	080074a1 	.word	0x080074a1
 8007480:	080074b7 	.word	0x080074b7
 8007484:	080074a7 	.word	0x080074a7
 8007488:	080074b7 	.word	0x080074b7
 800748c:	080074b7 	.word	0x080074b7
 8007490:	080074b7 	.word	0x080074b7
 8007494:	080074af 	.word	0x080074af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007498:	f7fe f8e6 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
 800749c:	61f8      	str	r0, [r7, #28]
        break;
 800749e:	e010      	b.n	80074c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074a0:	4b19      	ldr	r3, [pc, #100]	; (8007508 <UART_SetConfig+0x2c0>)
 80074a2:	61fb      	str	r3, [r7, #28]
        break;
 80074a4:	e00d      	b.n	80074c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074a6:	f7fe f847 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80074aa:	61f8      	str	r0, [r7, #28]
        break;
 80074ac:	e009      	b.n	80074c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074b2:	61fb      	str	r3, [r7, #28]
        break;
 80074b4:	e005      	b.n	80074c2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80074c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8109 	beq.w	80076dc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	4613      	mov	r3, r2
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	4413      	add	r3, r2
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d305      	bcc.n	80074e6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d912      	bls.n	800750c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80074ec:	e0f6      	b.n	80076dc <UART_SetConfig+0x494>
 80074ee:	bf00      	nop
 80074f0:	efff69f3 	.word	0xefff69f3
 80074f4:	40008000 	.word	0x40008000
 80074f8:	40013800 	.word	0x40013800
 80074fc:	40021000 	.word	0x40021000
 8007500:	40004400 	.word	0x40004400
 8007504:	40004800 	.word	0x40004800
 8007508:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	2200      	movs	r2, #0
 8007510:	461c      	mov	r4, r3
 8007512:	4615      	mov	r5, r2
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	022b      	lsls	r3, r5, #8
 800751e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007522:	0222      	lsls	r2, r4, #8
 8007524:	68f9      	ldr	r1, [r7, #12]
 8007526:	6849      	ldr	r1, [r1, #4]
 8007528:	0849      	lsrs	r1, r1, #1
 800752a:	2000      	movs	r0, #0
 800752c:	4688      	mov	r8, r1
 800752e:	4681      	mov	r9, r0
 8007530:	eb12 0a08 	adds.w	sl, r2, r8
 8007534:	eb43 0b09 	adc.w	fp, r3, r9
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	607a      	str	r2, [r7, #4]
 8007542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007546:	4650      	mov	r0, sl
 8007548:	4659      	mov	r1, fp
 800754a:	f7f9 fb7d 	bl	8000c48 <__aeabi_uldivmod>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4613      	mov	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755c:	d308      	bcc.n	8007570 <UART_SetConfig+0x328>
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007564:	d204      	bcs.n	8007570 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	60da      	str	r2, [r3, #12]
 800756e:	e0b5      	b.n	80076dc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007576:	e0b1      	b.n	80076dc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007580:	d15d      	bne.n	800763e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007586:	2b08      	cmp	r3, #8
 8007588:	d827      	bhi.n	80075da <UART_SetConfig+0x392>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <UART_SetConfig+0x348>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075b5 	.word	0x080075b5
 8007594:	080075bd 	.word	0x080075bd
 8007598:	080075c5 	.word	0x080075c5
 800759c:	080075db 	.word	0x080075db
 80075a0:	080075cb 	.word	0x080075cb
 80075a4:	080075db 	.word	0x080075db
 80075a8:	080075db 	.word	0x080075db
 80075ac:	080075db 	.word	0x080075db
 80075b0:	080075d3 	.word	0x080075d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075b4:	f7fe f858 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
 80075b8:	61f8      	str	r0, [r7, #28]
        break;
 80075ba:	e014      	b.n	80075e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075bc:	f7fe f86a 	bl	8005694 <HAL_RCC_GetPCLK2Freq>
 80075c0:	61f8      	str	r0, [r7, #28]
        break;
 80075c2:	e010      	b.n	80075e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075c4:	4b4c      	ldr	r3, [pc, #304]	; (80076f8 <UART_SetConfig+0x4b0>)
 80075c6:	61fb      	str	r3, [r7, #28]
        break;
 80075c8:	e00d      	b.n	80075e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ca:	f7fd ffb5 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80075ce:	61f8      	str	r0, [r7, #28]
        break;
 80075d0:	e009      	b.n	80075e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075d6:	61fb      	str	r3, [r7, #28]
        break;
 80075d8:	e005      	b.n	80075e6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80075e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d077      	beq.n	80076dc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	005a      	lsls	r2, r3, #1
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	085b      	lsrs	r3, r3, #1
 80075f6:	441a      	add	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007600:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b0f      	cmp	r3, #15
 8007606:	d916      	bls.n	8007636 <UART_SetConfig+0x3ee>
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800760e:	d212      	bcs.n	8007636 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f023 030f 	bic.w	r3, r3, #15
 8007618:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	085b      	lsrs	r3, r3, #1
 800761e:	b29b      	uxth	r3, r3
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	b29a      	uxth	r2, r3
 8007626:	8afb      	ldrh	r3, [r7, #22]
 8007628:	4313      	orrs	r3, r2
 800762a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	8afa      	ldrh	r2, [r7, #22]
 8007632:	60da      	str	r2, [r3, #12]
 8007634:	e052      	b.n	80076dc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800763c:	e04e      	b.n	80076dc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800763e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007642:	2b08      	cmp	r3, #8
 8007644:	d827      	bhi.n	8007696 <UART_SetConfig+0x44e>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <UART_SetConfig+0x404>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	08007671 	.word	0x08007671
 8007650:	08007679 	.word	0x08007679
 8007654:	08007681 	.word	0x08007681
 8007658:	08007697 	.word	0x08007697
 800765c:	08007687 	.word	0x08007687
 8007660:	08007697 	.word	0x08007697
 8007664:	08007697 	.word	0x08007697
 8007668:	08007697 	.word	0x08007697
 800766c:	0800768f 	.word	0x0800768f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007670:	f7fd fffa 	bl	8005668 <HAL_RCC_GetPCLK1Freq>
 8007674:	61f8      	str	r0, [r7, #28]
        break;
 8007676:	e014      	b.n	80076a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007678:	f7fe f80c 	bl	8005694 <HAL_RCC_GetPCLK2Freq>
 800767c:	61f8      	str	r0, [r7, #28]
        break;
 800767e:	e010      	b.n	80076a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007680:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <UART_SetConfig+0x4b0>)
 8007682:	61fb      	str	r3, [r7, #28]
        break;
 8007684:	e00d      	b.n	80076a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007686:	f7fd ff57 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 800768a:	61f8      	str	r0, [r7, #28]
        break;
 800768c:	e009      	b.n	80076a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800768e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007692:	61fb      	str	r3, [r7, #28]
        break;
 8007694:	e005      	b.n	80076a2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076a0:	bf00      	nop
    }

    if (pclk != 0U)
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d019      	beq.n	80076dc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	085a      	lsrs	r2, r3, #1
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b0f      	cmp	r3, #15
 80076c0:	d909      	bls.n	80076d6 <UART_SetConfig+0x48e>
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c8:	d205      	bcs.n	80076d6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60da      	str	r2, [r3, #12]
 80076d4:	e002      	b.n	80076dc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3728      	adds	r7, #40	; 0x28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076f6:	bf00      	nop
 80076f8:	00f42400 	.word	0x00f42400

080076fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	f003 0308 	and.w	r3, r3, #8
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00a      	beq.n	80077ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01a      	beq.n	8007812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077fa:	d10a      	bne.n	8007812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af02      	add	r7, sp, #8
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007850:	f7fa fe94 	bl	800257c <HAL_GetTick>
 8007854:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b08      	cmp	r3, #8
 8007862:	d10e      	bne.n	8007882 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f82d 	bl	80078d2 <UART_WaitOnFlagUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e023      	b.n	80078ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b04      	cmp	r3, #4
 800788e:	d10e      	bne.n	80078ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f817 	bl	80078d2 <UART_WaitOnFlagUntilTimeout>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e00d      	b.n	80078ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b09c      	sub	sp, #112	; 0x70
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e2:	e0a5      	b.n	8007a30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	f000 80a1 	beq.w	8007a30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ee:	f7fa fe45 	bl	800257c <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d302      	bcc.n	8007904 <UART_WaitOnFlagUntilTimeout+0x32>
 80078fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007900:	2b00      	cmp	r3, #0
 8007902:	d13e      	bne.n	8007982 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007918:	667b      	str	r3, [r7, #100]	; 0x64
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007924:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007928:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e6      	bne.n	8007904 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	663b      	str	r3, [r7, #96]	; 0x60
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007956:	64ba      	str	r2, [r7, #72]	; 0x48
 8007958:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800795c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2220      	movs	r2, #32
 8007974:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e067      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0304 	and.w	r3, r3, #4
 800798c:	2b00      	cmp	r3, #0
 800798e:	d04f      	beq.n	8007a30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800799a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799e:	d147      	bne.n	8007a30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e6      	bne.n	80079aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	613b      	str	r3, [r7, #16]
   return(result);
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3308      	adds	r3, #8
 80079fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079fc:	623a      	str	r2, [r7, #32]
 80079fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	69f9      	ldr	r1, [r7, #28]
 8007a02:	6a3a      	ldr	r2, [r7, #32]
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e5      	bne.n	80079dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2220      	movs	r2, #32
 8007a14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e010      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69da      	ldr	r2, [r3, #28]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	bf0c      	ite	eq
 8007a40:	2301      	moveq	r3, #1
 8007a42:	2300      	movne	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	f43f af4a 	beq.w	80078e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3770      	adds	r7, #112	; 0x70
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b097      	sub	sp, #92	; 0x5c
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	88fa      	ldrh	r2, [r7, #6]
 8007a74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	88fa      	ldrh	r2, [r7, #6]
 8007a7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a8e:	d10e      	bne.n	8007aae <UART_Start_Receive_IT+0x52>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d105      	bne.n	8007aa4 <UART_Start_Receive_IT+0x48>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aa2:	e02d      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	22ff      	movs	r2, #255	; 0xff
 8007aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aac:	e028      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10d      	bne.n	8007ad2 <UART_Start_Receive_IT+0x76>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <UART_Start_Receive_IT+0x6c>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	22ff      	movs	r2, #255	; 0xff
 8007ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ac6:	e01b      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	227f      	movs	r2, #127	; 0x7f
 8007acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ad0:	e016      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ada:	d10d      	bne.n	8007af8 <UART_Start_Receive_IT+0x9c>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d104      	bne.n	8007aee <UART_Start_Receive_IT+0x92>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	227f      	movs	r2, #127	; 0x7f
 8007ae8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007aec:	e008      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	223f      	movs	r2, #63	; 0x3f
 8007af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007af6:	e003      	b.n	8007b00 <UART_Start_Receive_IT+0xa4>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2222      	movs	r2, #34	; 0x22
 8007b0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b20:	f043 0301 	orr.w	r3, r3, #1
 8007b24:	657b      	str	r3, [r7, #84]	; 0x54
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e5      	bne.n	8007b0e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4a:	d107      	bne.n	8007b5c <UART_Start_Receive_IT+0x100>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4a24      	ldr	r2, [pc, #144]	; (8007be8 <UART_Start_Receive_IT+0x18c>)
 8007b58:	665a      	str	r2, [r3, #100]	; 0x64
 8007b5a:	e002      	b.n	8007b62 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a23      	ldr	r2, [pc, #140]	; (8007bec <UART_Start_Receive_IT+0x190>)
 8007b60:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d019      	beq.n	8007ba6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	e853 3f00 	ldrex	r3, [r3]
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
 8007b92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b98:	e841 2300 	strex	r3, r2, [r1]
 8007b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1e6      	bne.n	8007b72 <UART_Start_Receive_IT+0x116>
 8007ba4:	e018      	b.n	8007bd8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f043 0320 	orr.w	r3, r3, #32
 8007bba:	653b      	str	r3, [r7, #80]	; 0x50
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	69f9      	ldr	r1, [r7, #28]
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	375c      	adds	r7, #92	; 0x5c
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	08007e97 	.word	0x08007e97
 8007bec:	08007d37 	.word	0x08007d37

08007bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b095      	sub	sp, #84	; 0x54
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c16:	643b      	str	r3, [r7, #64]	; 0x40
 8007c18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e6      	bne.n	8007bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	f023 0301 	bic.w	r3, r3, #1
 8007c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3308      	adds	r3, #8
 8007c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1e5      	bne.n	8007c2a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d118      	bne.n	8007c98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f023 0310 	bic.w	r3, r3, #16
 8007c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c88:	6979      	ldr	r1, [r7, #20]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	e841 2300 	strex	r3, r2, [r1]
 8007c90:	613b      	str	r3, [r7, #16]
   return(result);
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e6      	bne.n	8007c66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007caa:	bf00      	nop
 8007cac:	3754      	adds	r7, #84	; 0x54
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7f9 fa3d 	bl	8001154 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b088      	sub	sp, #32
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	61bb      	str	r3, [r7, #24]
 8007d0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6979      	ldr	r1, [r7, #20]
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	613b      	str	r3, [r7, #16]
   return(result);
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e6      	bne.n	8007cea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fa77 	bl	800721c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d2e:	bf00      	nop
 8007d30:	3720      	adds	r7, #32
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b096      	sub	sp, #88	; 0x58
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4c:	2b22      	cmp	r3, #34	; 0x22
 8007d4e:	f040 8094 	bne.w	8007e7a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d58:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007d60:	b2d9      	uxtb	r1, r3
 8007d62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6c:	400a      	ands	r2, r1
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d179      	bne.n	8007e8e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007daa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dae:	653b      	str	r3, [r7, #80]	; 0x50
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e6      	bne.n	8007d9a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	623b      	str	r3, [r7, #32]
   return(result);
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f023 0301 	bic.w	r3, r3, #1
 8007de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dec:	633a      	str	r2, [r7, #48]	; 0x30
 8007dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e5      	bne.n	8007dcc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d12e      	bne.n	8007e72 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	e853 3f00 	ldrex	r3, [r3]
 8007e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0310 	bic.w	r3, r3, #16
 8007e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	69b9      	ldr	r1, [r7, #24]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	617b      	str	r3, [r7, #20]
   return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e6      	bne.n	8007e1a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	f003 0310 	and.w	r3, r3, #16
 8007e56:	2b10      	cmp	r3, #16
 8007e58:	d103      	bne.n	8007e62 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2210      	movs	r2, #16
 8007e60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff f9e0 	bl	8007230 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e70:	e00d      	b.n	8007e8e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7f9 f94a 	bl	800110c <HAL_UART_RxCpltCallback>
}
 8007e78:	e009      	b.n	8007e8e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	8b1b      	ldrh	r3, [r3, #24]
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0208 	orr.w	r2, r2, #8
 8007e8a:	b292      	uxth	r2, r2
 8007e8c:	831a      	strh	r2, [r3, #24]
}
 8007e8e:	bf00      	nop
 8007e90:	3758      	adds	r7, #88	; 0x58
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b096      	sub	sp, #88	; 0x58
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ea4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eac:	2b22      	cmp	r3, #34	; 0x22
 8007eae:	f040 8094 	bne.w	8007fda <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007eb8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ec2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007ec6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007eca:	4013      	ands	r3, r2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed6:	1c9a      	adds	r2, r3, #2
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d179      	bne.n	8007fee <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f18:	643b      	str	r3, [r7, #64]	; 0x40
 8007f1a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e6      	bne.n	8007efa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d12e      	bne.n	8007fd2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	e853 3f00 	ldrex	r3, [r3]
 8007f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f023 0310 	bic.w	r3, r3, #16
 8007f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	461a      	mov	r2, r3
 8007f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f98:	61bb      	str	r3, [r7, #24]
 8007f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6979      	ldr	r1, [r7, #20]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e6      	bne.n	8007f7a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d103      	bne.n	8007fc2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff f930 	bl	8007230 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fd0:	e00d      	b.n	8007fee <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7f9 f89a 	bl	800110c <HAL_UART_RxCpltCallback>
}
 8007fd8:	e009      	b.n	8007fee <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	8b1b      	ldrh	r3, [r3, #24]
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0208 	orr.w	r2, r2, #8
 8007fea:	b292      	uxth	r2, r2
 8007fec:	831a      	strh	r2, [r3, #24]
}
 8007fee:	bf00      	nop
 8007ff0:	3758      	adds	r7, #88	; 0x58
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
	...

0800800c <__errno>:
 800800c:	4b01      	ldr	r3, [pc, #4]	; (8008014 <__errno+0x8>)
 800800e:	6818      	ldr	r0, [r3, #0]
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	2000000c 	.word	0x2000000c

08008018 <__libc_init_array>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	4d0d      	ldr	r5, [pc, #52]	; (8008050 <__libc_init_array+0x38>)
 800801c:	4c0d      	ldr	r4, [pc, #52]	; (8008054 <__libc_init_array+0x3c>)
 800801e:	1b64      	subs	r4, r4, r5
 8008020:	10a4      	asrs	r4, r4, #2
 8008022:	2600      	movs	r6, #0
 8008024:	42a6      	cmp	r6, r4
 8008026:	d109      	bne.n	800803c <__libc_init_array+0x24>
 8008028:	4d0b      	ldr	r5, [pc, #44]	; (8008058 <__libc_init_array+0x40>)
 800802a:	4c0c      	ldr	r4, [pc, #48]	; (800805c <__libc_init_array+0x44>)
 800802c:	f002 fdc2 	bl	800abb4 <_init>
 8008030:	1b64      	subs	r4, r4, r5
 8008032:	10a4      	asrs	r4, r4, #2
 8008034:	2600      	movs	r6, #0
 8008036:	42a6      	cmp	r6, r4
 8008038:	d105      	bne.n	8008046 <__libc_init_array+0x2e>
 800803a:	bd70      	pop	{r4, r5, r6, pc}
 800803c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008040:	4798      	blx	r3
 8008042:	3601      	adds	r6, #1
 8008044:	e7ee      	b.n	8008024 <__libc_init_array+0xc>
 8008046:	f855 3b04 	ldr.w	r3, [r5], #4
 800804a:	4798      	blx	r3
 800804c:	3601      	adds	r6, #1
 800804e:	e7f2      	b.n	8008036 <__libc_init_array+0x1e>
 8008050:	0800b114 	.word	0x0800b114
 8008054:	0800b114 	.word	0x0800b114
 8008058:	0800b114 	.word	0x0800b114
 800805c:	0800b118 	.word	0x0800b118

08008060 <memset>:
 8008060:	4402      	add	r2, r0
 8008062:	4603      	mov	r3, r0
 8008064:	4293      	cmp	r3, r2
 8008066:	d100      	bne.n	800806a <memset+0xa>
 8008068:	4770      	bx	lr
 800806a:	f803 1b01 	strb.w	r1, [r3], #1
 800806e:	e7f9      	b.n	8008064 <memset+0x4>

08008070 <__cvt>:
 8008070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	ec55 4b10 	vmov	r4, r5, d0
 8008078:	2d00      	cmp	r5, #0
 800807a:	460e      	mov	r6, r1
 800807c:	4619      	mov	r1, r3
 800807e:	462b      	mov	r3, r5
 8008080:	bfbb      	ittet	lt
 8008082:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008086:	461d      	movlt	r5, r3
 8008088:	2300      	movge	r3, #0
 800808a:	232d      	movlt	r3, #45	; 0x2d
 800808c:	700b      	strb	r3, [r1, #0]
 800808e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008090:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008094:	4691      	mov	r9, r2
 8008096:	f023 0820 	bic.w	r8, r3, #32
 800809a:	bfbc      	itt	lt
 800809c:	4622      	movlt	r2, r4
 800809e:	4614      	movlt	r4, r2
 80080a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080a4:	d005      	beq.n	80080b2 <__cvt+0x42>
 80080a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080aa:	d100      	bne.n	80080ae <__cvt+0x3e>
 80080ac:	3601      	adds	r6, #1
 80080ae:	2102      	movs	r1, #2
 80080b0:	e000      	b.n	80080b4 <__cvt+0x44>
 80080b2:	2103      	movs	r1, #3
 80080b4:	ab03      	add	r3, sp, #12
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	ab02      	add	r3, sp, #8
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	ec45 4b10 	vmov	d0, r4, r5
 80080c0:	4653      	mov	r3, sl
 80080c2:	4632      	mov	r2, r6
 80080c4:	f000 fe18 	bl	8008cf8 <_dtoa_r>
 80080c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080cc:	4607      	mov	r7, r0
 80080ce:	d102      	bne.n	80080d6 <__cvt+0x66>
 80080d0:	f019 0f01 	tst.w	r9, #1
 80080d4:	d022      	beq.n	800811c <__cvt+0xac>
 80080d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080da:	eb07 0906 	add.w	r9, r7, r6
 80080de:	d110      	bne.n	8008102 <__cvt+0x92>
 80080e0:	783b      	ldrb	r3, [r7, #0]
 80080e2:	2b30      	cmp	r3, #48	; 0x30
 80080e4:	d10a      	bne.n	80080fc <__cvt+0x8c>
 80080e6:	2200      	movs	r2, #0
 80080e8:	2300      	movs	r3, #0
 80080ea:	4620      	mov	r0, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7f8 fceb 	bl	8000ac8 <__aeabi_dcmpeq>
 80080f2:	b918      	cbnz	r0, 80080fc <__cvt+0x8c>
 80080f4:	f1c6 0601 	rsb	r6, r6, #1
 80080f8:	f8ca 6000 	str.w	r6, [sl]
 80080fc:	f8da 3000 	ldr.w	r3, [sl]
 8008100:	4499      	add	r9, r3
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	4620      	mov	r0, r4
 8008108:	4629      	mov	r1, r5
 800810a:	f7f8 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800810e:	b108      	cbz	r0, 8008114 <__cvt+0xa4>
 8008110:	f8cd 900c 	str.w	r9, [sp, #12]
 8008114:	2230      	movs	r2, #48	; 0x30
 8008116:	9b03      	ldr	r3, [sp, #12]
 8008118:	454b      	cmp	r3, r9
 800811a:	d307      	bcc.n	800812c <__cvt+0xbc>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008120:	1bdb      	subs	r3, r3, r7
 8008122:	4638      	mov	r0, r7
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	b004      	add	sp, #16
 8008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812c:	1c59      	adds	r1, r3, #1
 800812e:	9103      	str	r1, [sp, #12]
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e7f0      	b.n	8008116 <__cvt+0xa6>

08008134 <__exponent>:
 8008134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008136:	4603      	mov	r3, r0
 8008138:	2900      	cmp	r1, #0
 800813a:	bfb8      	it	lt
 800813c:	4249      	neglt	r1, r1
 800813e:	f803 2b02 	strb.w	r2, [r3], #2
 8008142:	bfb4      	ite	lt
 8008144:	222d      	movlt	r2, #45	; 0x2d
 8008146:	222b      	movge	r2, #43	; 0x2b
 8008148:	2909      	cmp	r1, #9
 800814a:	7042      	strb	r2, [r0, #1]
 800814c:	dd2a      	ble.n	80081a4 <__exponent+0x70>
 800814e:	f10d 0407 	add.w	r4, sp, #7
 8008152:	46a4      	mov	ip, r4
 8008154:	270a      	movs	r7, #10
 8008156:	46a6      	mov	lr, r4
 8008158:	460a      	mov	r2, r1
 800815a:	fb91 f6f7 	sdiv	r6, r1, r7
 800815e:	fb07 1516 	mls	r5, r7, r6, r1
 8008162:	3530      	adds	r5, #48	; 0x30
 8008164:	2a63      	cmp	r2, #99	; 0x63
 8008166:	f104 34ff 	add.w	r4, r4, #4294967295
 800816a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800816e:	4631      	mov	r1, r6
 8008170:	dcf1      	bgt.n	8008156 <__exponent+0x22>
 8008172:	3130      	adds	r1, #48	; 0x30
 8008174:	f1ae 0502 	sub.w	r5, lr, #2
 8008178:	f804 1c01 	strb.w	r1, [r4, #-1]
 800817c:	1c44      	adds	r4, r0, #1
 800817e:	4629      	mov	r1, r5
 8008180:	4561      	cmp	r1, ip
 8008182:	d30a      	bcc.n	800819a <__exponent+0x66>
 8008184:	f10d 0209 	add.w	r2, sp, #9
 8008188:	eba2 020e 	sub.w	r2, r2, lr
 800818c:	4565      	cmp	r5, ip
 800818e:	bf88      	it	hi
 8008190:	2200      	movhi	r2, #0
 8008192:	4413      	add	r3, r2
 8008194:	1a18      	subs	r0, r3, r0
 8008196:	b003      	add	sp, #12
 8008198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081a2:	e7ed      	b.n	8008180 <__exponent+0x4c>
 80081a4:	2330      	movs	r3, #48	; 0x30
 80081a6:	3130      	adds	r1, #48	; 0x30
 80081a8:	7083      	strb	r3, [r0, #2]
 80081aa:	70c1      	strb	r1, [r0, #3]
 80081ac:	1d03      	adds	r3, r0, #4
 80081ae:	e7f1      	b.n	8008194 <__exponent+0x60>

080081b0 <_printf_float>:
 80081b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b4:	ed2d 8b02 	vpush	{d8}
 80081b8:	b08d      	sub	sp, #52	; 0x34
 80081ba:	460c      	mov	r4, r1
 80081bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081c0:	4616      	mov	r6, r2
 80081c2:	461f      	mov	r7, r3
 80081c4:	4605      	mov	r5, r0
 80081c6:	f001 fd3d 	bl	8009c44 <_localeconv_r>
 80081ca:	f8d0 a000 	ldr.w	sl, [r0]
 80081ce:	4650      	mov	r0, sl
 80081d0:	f7f7 fffe 	bl	80001d0 <strlen>
 80081d4:	2300      	movs	r3, #0
 80081d6:	930a      	str	r3, [sp, #40]	; 0x28
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	9305      	str	r3, [sp, #20]
 80081dc:	f8d8 3000 	ldr.w	r3, [r8]
 80081e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081e4:	3307      	adds	r3, #7
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	f103 0208 	add.w	r2, r3, #8
 80081ee:	f8c8 2000 	str.w	r2, [r8]
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008202:	9307      	str	r3, [sp, #28]
 8008204:	f8cd 8018 	str.w	r8, [sp, #24]
 8008208:	ee08 0a10 	vmov	s16, r0
 800820c:	4b9f      	ldr	r3, [pc, #636]	; (800848c <_printf_float+0x2dc>)
 800820e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008212:	f04f 32ff 	mov.w	r2, #4294967295
 8008216:	f7f8 fc89 	bl	8000b2c <__aeabi_dcmpun>
 800821a:	bb88      	cbnz	r0, 8008280 <_printf_float+0xd0>
 800821c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008220:	4b9a      	ldr	r3, [pc, #616]	; (800848c <_printf_float+0x2dc>)
 8008222:	f04f 32ff 	mov.w	r2, #4294967295
 8008226:	f7f8 fc63 	bl	8000af0 <__aeabi_dcmple>
 800822a:	bb48      	cbnz	r0, 8008280 <_printf_float+0xd0>
 800822c:	2200      	movs	r2, #0
 800822e:	2300      	movs	r3, #0
 8008230:	4640      	mov	r0, r8
 8008232:	4649      	mov	r1, r9
 8008234:	f7f8 fc52 	bl	8000adc <__aeabi_dcmplt>
 8008238:	b110      	cbz	r0, 8008240 <_printf_float+0x90>
 800823a:	232d      	movs	r3, #45	; 0x2d
 800823c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008240:	4b93      	ldr	r3, [pc, #588]	; (8008490 <_printf_float+0x2e0>)
 8008242:	4894      	ldr	r0, [pc, #592]	; (8008494 <_printf_float+0x2e4>)
 8008244:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008248:	bf94      	ite	ls
 800824a:	4698      	movls	r8, r3
 800824c:	4680      	movhi	r8, r0
 800824e:	2303      	movs	r3, #3
 8008250:	6123      	str	r3, [r4, #16]
 8008252:	9b05      	ldr	r3, [sp, #20]
 8008254:	f023 0204 	bic.w	r2, r3, #4
 8008258:	6022      	str	r2, [r4, #0]
 800825a:	f04f 0900 	mov.w	r9, #0
 800825e:	9700      	str	r7, [sp, #0]
 8008260:	4633      	mov	r3, r6
 8008262:	aa0b      	add	r2, sp, #44	; 0x2c
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f000 f9d8 	bl	800861c <_printf_common>
 800826c:	3001      	adds	r0, #1
 800826e:	f040 8090 	bne.w	8008392 <_printf_float+0x1e2>
 8008272:	f04f 30ff 	mov.w	r0, #4294967295
 8008276:	b00d      	add	sp, #52	; 0x34
 8008278:	ecbd 8b02 	vpop	{d8}
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	4642      	mov	r2, r8
 8008282:	464b      	mov	r3, r9
 8008284:	4640      	mov	r0, r8
 8008286:	4649      	mov	r1, r9
 8008288:	f7f8 fc50 	bl	8000b2c <__aeabi_dcmpun>
 800828c:	b140      	cbz	r0, 80082a0 <_printf_float+0xf0>
 800828e:	464b      	mov	r3, r9
 8008290:	2b00      	cmp	r3, #0
 8008292:	bfbc      	itt	lt
 8008294:	232d      	movlt	r3, #45	; 0x2d
 8008296:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800829a:	487f      	ldr	r0, [pc, #508]	; (8008498 <_printf_float+0x2e8>)
 800829c:	4b7f      	ldr	r3, [pc, #508]	; (800849c <_printf_float+0x2ec>)
 800829e:	e7d1      	b.n	8008244 <_printf_float+0x94>
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082a6:	9206      	str	r2, [sp, #24]
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	d13f      	bne.n	800832c <_printf_float+0x17c>
 80082ac:	2306      	movs	r3, #6
 80082ae:	6063      	str	r3, [r4, #4]
 80082b0:	9b05      	ldr	r3, [sp, #20]
 80082b2:	6861      	ldr	r1, [r4, #4]
 80082b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082b8:	2300      	movs	r3, #0
 80082ba:	9303      	str	r3, [sp, #12]
 80082bc:	ab0a      	add	r3, sp, #40	; 0x28
 80082be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082c2:	ab09      	add	r3, sp, #36	; 0x24
 80082c4:	ec49 8b10 	vmov	d0, r8, r9
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	6022      	str	r2, [r4, #0]
 80082cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082d0:	4628      	mov	r0, r5
 80082d2:	f7ff fecd 	bl	8008070 <__cvt>
 80082d6:	9b06      	ldr	r3, [sp, #24]
 80082d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082da:	2b47      	cmp	r3, #71	; 0x47
 80082dc:	4680      	mov	r8, r0
 80082de:	d108      	bne.n	80082f2 <_printf_float+0x142>
 80082e0:	1cc8      	adds	r0, r1, #3
 80082e2:	db02      	blt.n	80082ea <_printf_float+0x13a>
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	4299      	cmp	r1, r3
 80082e8:	dd41      	ble.n	800836e <_printf_float+0x1be>
 80082ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80082ee:	fa5f fb8b 	uxtb.w	fp, fp
 80082f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082f6:	d820      	bhi.n	800833a <_printf_float+0x18a>
 80082f8:	3901      	subs	r1, #1
 80082fa:	465a      	mov	r2, fp
 80082fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008300:	9109      	str	r1, [sp, #36]	; 0x24
 8008302:	f7ff ff17 	bl	8008134 <__exponent>
 8008306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008308:	1813      	adds	r3, r2, r0
 800830a:	2a01      	cmp	r2, #1
 800830c:	4681      	mov	r9, r0
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	dc02      	bgt.n	8008318 <_printf_float+0x168>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	07d2      	lsls	r2, r2, #31
 8008316:	d501      	bpl.n	800831c <_printf_float+0x16c>
 8008318:	3301      	adds	r3, #1
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008320:	2b00      	cmp	r3, #0
 8008322:	d09c      	beq.n	800825e <_printf_float+0xae>
 8008324:	232d      	movs	r3, #45	; 0x2d
 8008326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832a:	e798      	b.n	800825e <_printf_float+0xae>
 800832c:	9a06      	ldr	r2, [sp, #24]
 800832e:	2a47      	cmp	r2, #71	; 0x47
 8008330:	d1be      	bne.n	80082b0 <_printf_float+0x100>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1bc      	bne.n	80082b0 <_printf_float+0x100>
 8008336:	2301      	movs	r3, #1
 8008338:	e7b9      	b.n	80082ae <_printf_float+0xfe>
 800833a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800833e:	d118      	bne.n	8008372 <_printf_float+0x1c2>
 8008340:	2900      	cmp	r1, #0
 8008342:	6863      	ldr	r3, [r4, #4]
 8008344:	dd0b      	ble.n	800835e <_printf_float+0x1ae>
 8008346:	6121      	str	r1, [r4, #16]
 8008348:	b913      	cbnz	r3, 8008350 <_printf_float+0x1a0>
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	07d0      	lsls	r0, r2, #31
 800834e:	d502      	bpl.n	8008356 <_printf_float+0x1a6>
 8008350:	3301      	adds	r3, #1
 8008352:	440b      	add	r3, r1
 8008354:	6123      	str	r3, [r4, #16]
 8008356:	65a1      	str	r1, [r4, #88]	; 0x58
 8008358:	f04f 0900 	mov.w	r9, #0
 800835c:	e7de      	b.n	800831c <_printf_float+0x16c>
 800835e:	b913      	cbnz	r3, 8008366 <_printf_float+0x1b6>
 8008360:	6822      	ldr	r2, [r4, #0]
 8008362:	07d2      	lsls	r2, r2, #31
 8008364:	d501      	bpl.n	800836a <_printf_float+0x1ba>
 8008366:	3302      	adds	r3, #2
 8008368:	e7f4      	b.n	8008354 <_printf_float+0x1a4>
 800836a:	2301      	movs	r3, #1
 800836c:	e7f2      	b.n	8008354 <_printf_float+0x1a4>
 800836e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008374:	4299      	cmp	r1, r3
 8008376:	db05      	blt.n	8008384 <_printf_float+0x1d4>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	6121      	str	r1, [r4, #16]
 800837c:	07d8      	lsls	r0, r3, #31
 800837e:	d5ea      	bpl.n	8008356 <_printf_float+0x1a6>
 8008380:	1c4b      	adds	r3, r1, #1
 8008382:	e7e7      	b.n	8008354 <_printf_float+0x1a4>
 8008384:	2900      	cmp	r1, #0
 8008386:	bfd4      	ite	le
 8008388:	f1c1 0202 	rsble	r2, r1, #2
 800838c:	2201      	movgt	r2, #1
 800838e:	4413      	add	r3, r2
 8008390:	e7e0      	b.n	8008354 <_printf_float+0x1a4>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	055a      	lsls	r2, r3, #21
 8008396:	d407      	bmi.n	80083a8 <_printf_float+0x1f8>
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	4642      	mov	r2, r8
 800839c:	4631      	mov	r1, r6
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	d12c      	bne.n	8008400 <_printf_float+0x250>
 80083a6:	e764      	b.n	8008272 <_printf_float+0xc2>
 80083a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083ac:	f240 80e0 	bls.w	8008570 <_printf_float+0x3c0>
 80083b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	f7f8 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d034      	beq.n	800842a <_printf_float+0x27a>
 80083c0:	4a37      	ldr	r2, [pc, #220]	; (80084a0 <_printf_float+0x2f0>)
 80083c2:	2301      	movs	r3, #1
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	f43f af51 	beq.w	8008272 <_printf_float+0xc2>
 80083d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083d4:	429a      	cmp	r2, r3
 80083d6:	db02      	blt.n	80083de <_printf_float+0x22e>
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	07d8      	lsls	r0, r3, #31
 80083dc:	d510      	bpl.n	8008400 <_printf_float+0x250>
 80083de:	ee18 3a10 	vmov	r3, s16
 80083e2:	4652      	mov	r2, sl
 80083e4:	4631      	mov	r1, r6
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b8      	blx	r7
 80083ea:	3001      	adds	r0, #1
 80083ec:	f43f af41 	beq.w	8008272 <_printf_float+0xc2>
 80083f0:	f04f 0800 	mov.w	r8, #0
 80083f4:	f104 091a 	add.w	r9, r4, #26
 80083f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083fa:	3b01      	subs	r3, #1
 80083fc:	4543      	cmp	r3, r8
 80083fe:	dc09      	bgt.n	8008414 <_printf_float+0x264>
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	079b      	lsls	r3, r3, #30
 8008404:	f100 8105 	bmi.w	8008612 <_printf_float+0x462>
 8008408:	68e0      	ldr	r0, [r4, #12]
 800840a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840c:	4298      	cmp	r0, r3
 800840e:	bfb8      	it	lt
 8008410:	4618      	movlt	r0, r3
 8008412:	e730      	b.n	8008276 <_printf_float+0xc6>
 8008414:	2301      	movs	r3, #1
 8008416:	464a      	mov	r2, r9
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f af27 	beq.w	8008272 <_printf_float+0xc2>
 8008424:	f108 0801 	add.w	r8, r8, #1
 8008428:	e7e6      	b.n	80083f8 <_printf_float+0x248>
 800842a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	dc39      	bgt.n	80084a4 <_printf_float+0x2f4>
 8008430:	4a1b      	ldr	r2, [pc, #108]	; (80084a0 <_printf_float+0x2f0>)
 8008432:	2301      	movs	r3, #1
 8008434:	4631      	mov	r1, r6
 8008436:	4628      	mov	r0, r5
 8008438:	47b8      	blx	r7
 800843a:	3001      	adds	r0, #1
 800843c:	f43f af19 	beq.w	8008272 <_printf_float+0xc2>
 8008440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008444:	4313      	orrs	r3, r2
 8008446:	d102      	bne.n	800844e <_printf_float+0x29e>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	07d9      	lsls	r1, r3, #31
 800844c:	d5d8      	bpl.n	8008400 <_printf_float+0x250>
 800844e:	ee18 3a10 	vmov	r3, s16
 8008452:	4652      	mov	r2, sl
 8008454:	4631      	mov	r1, r6
 8008456:	4628      	mov	r0, r5
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	f43f af09 	beq.w	8008272 <_printf_float+0xc2>
 8008460:	f04f 0900 	mov.w	r9, #0
 8008464:	f104 0a1a 	add.w	sl, r4, #26
 8008468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846a:	425b      	negs	r3, r3
 800846c:	454b      	cmp	r3, r9
 800846e:	dc01      	bgt.n	8008474 <_printf_float+0x2c4>
 8008470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008472:	e792      	b.n	800839a <_printf_float+0x1ea>
 8008474:	2301      	movs	r3, #1
 8008476:	4652      	mov	r2, sl
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f aef7 	beq.w	8008272 <_printf_float+0xc2>
 8008484:	f109 0901 	add.w	r9, r9, #1
 8008488:	e7ee      	b.n	8008468 <_printf_float+0x2b8>
 800848a:	bf00      	nop
 800848c:	7fefffff 	.word	0x7fefffff
 8008490:	0800ae34 	.word	0x0800ae34
 8008494:	0800ae38 	.word	0x0800ae38
 8008498:	0800ae40 	.word	0x0800ae40
 800849c:	0800ae3c 	.word	0x0800ae3c
 80084a0:	0800ae44 	.word	0x0800ae44
 80084a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084a8:	429a      	cmp	r2, r3
 80084aa:	bfa8      	it	ge
 80084ac:	461a      	movge	r2, r3
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	4691      	mov	r9, r2
 80084b2:	dc37      	bgt.n	8008524 <_printf_float+0x374>
 80084b4:	f04f 0b00 	mov.w	fp, #0
 80084b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084bc:	f104 021a 	add.w	r2, r4, #26
 80084c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084c2:	9305      	str	r3, [sp, #20]
 80084c4:	eba3 0309 	sub.w	r3, r3, r9
 80084c8:	455b      	cmp	r3, fp
 80084ca:	dc33      	bgt.n	8008534 <_printf_float+0x384>
 80084cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d0:	429a      	cmp	r2, r3
 80084d2:	db3b      	blt.n	800854c <_printf_float+0x39c>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	07da      	lsls	r2, r3, #31
 80084d8:	d438      	bmi.n	800854c <_printf_float+0x39c>
 80084da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084dc:	9a05      	ldr	r2, [sp, #20]
 80084de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084e0:	1a9a      	subs	r2, r3, r2
 80084e2:	eba3 0901 	sub.w	r9, r3, r1
 80084e6:	4591      	cmp	r9, r2
 80084e8:	bfa8      	it	ge
 80084ea:	4691      	movge	r9, r2
 80084ec:	f1b9 0f00 	cmp.w	r9, #0
 80084f0:	dc35      	bgt.n	800855e <_printf_float+0x3ae>
 80084f2:	f04f 0800 	mov.w	r8, #0
 80084f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084fa:	f104 0a1a 	add.w	sl, r4, #26
 80084fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008502:	1a9b      	subs	r3, r3, r2
 8008504:	eba3 0309 	sub.w	r3, r3, r9
 8008508:	4543      	cmp	r3, r8
 800850a:	f77f af79 	ble.w	8008400 <_printf_float+0x250>
 800850e:	2301      	movs	r3, #1
 8008510:	4652      	mov	r2, sl
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	47b8      	blx	r7
 8008518:	3001      	adds	r0, #1
 800851a:	f43f aeaa 	beq.w	8008272 <_printf_float+0xc2>
 800851e:	f108 0801 	add.w	r8, r8, #1
 8008522:	e7ec      	b.n	80084fe <_printf_float+0x34e>
 8008524:	4613      	mov	r3, r2
 8008526:	4631      	mov	r1, r6
 8008528:	4642      	mov	r2, r8
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	d1c0      	bne.n	80084b4 <_printf_float+0x304>
 8008532:	e69e      	b.n	8008272 <_printf_float+0xc2>
 8008534:	2301      	movs	r3, #1
 8008536:	4631      	mov	r1, r6
 8008538:	4628      	mov	r0, r5
 800853a:	9205      	str	r2, [sp, #20]
 800853c:	47b8      	blx	r7
 800853e:	3001      	adds	r0, #1
 8008540:	f43f ae97 	beq.w	8008272 <_printf_float+0xc2>
 8008544:	9a05      	ldr	r2, [sp, #20]
 8008546:	f10b 0b01 	add.w	fp, fp, #1
 800854a:	e7b9      	b.n	80084c0 <_printf_float+0x310>
 800854c:	ee18 3a10 	vmov	r3, s16
 8008550:	4652      	mov	r2, sl
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	d1be      	bne.n	80084da <_printf_float+0x32a>
 800855c:	e689      	b.n	8008272 <_printf_float+0xc2>
 800855e:	9a05      	ldr	r2, [sp, #20]
 8008560:	464b      	mov	r3, r9
 8008562:	4442      	add	r2, r8
 8008564:	4631      	mov	r1, r6
 8008566:	4628      	mov	r0, r5
 8008568:	47b8      	blx	r7
 800856a:	3001      	adds	r0, #1
 800856c:	d1c1      	bne.n	80084f2 <_printf_float+0x342>
 800856e:	e680      	b.n	8008272 <_printf_float+0xc2>
 8008570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008572:	2a01      	cmp	r2, #1
 8008574:	dc01      	bgt.n	800857a <_printf_float+0x3ca>
 8008576:	07db      	lsls	r3, r3, #31
 8008578:	d538      	bpl.n	80085ec <_printf_float+0x43c>
 800857a:	2301      	movs	r3, #1
 800857c:	4642      	mov	r2, r8
 800857e:	4631      	mov	r1, r6
 8008580:	4628      	mov	r0, r5
 8008582:	47b8      	blx	r7
 8008584:	3001      	adds	r0, #1
 8008586:	f43f ae74 	beq.w	8008272 <_printf_float+0xc2>
 800858a:	ee18 3a10 	vmov	r3, s16
 800858e:	4652      	mov	r2, sl
 8008590:	4631      	mov	r1, r6
 8008592:	4628      	mov	r0, r5
 8008594:	47b8      	blx	r7
 8008596:	3001      	adds	r0, #1
 8008598:	f43f ae6b 	beq.w	8008272 <_printf_float+0xc2>
 800859c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085a0:	2200      	movs	r2, #0
 80085a2:	2300      	movs	r3, #0
 80085a4:	f7f8 fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 80085a8:	b9d8      	cbnz	r0, 80085e2 <_printf_float+0x432>
 80085aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ac:	f108 0201 	add.w	r2, r8, #1
 80085b0:	3b01      	subs	r3, #1
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	d10e      	bne.n	80085da <_printf_float+0x42a>
 80085bc:	e659      	b.n	8008272 <_printf_float+0xc2>
 80085be:	2301      	movs	r3, #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae52 	beq.w	8008272 <_printf_float+0xc2>
 80085ce:	f108 0801 	add.w	r8, r8, #1
 80085d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d4:	3b01      	subs	r3, #1
 80085d6:	4543      	cmp	r3, r8
 80085d8:	dcf1      	bgt.n	80085be <_printf_float+0x40e>
 80085da:	464b      	mov	r3, r9
 80085dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085e0:	e6dc      	b.n	800839c <_printf_float+0x1ec>
 80085e2:	f04f 0800 	mov.w	r8, #0
 80085e6:	f104 0a1a 	add.w	sl, r4, #26
 80085ea:	e7f2      	b.n	80085d2 <_printf_float+0x422>
 80085ec:	2301      	movs	r3, #1
 80085ee:	4642      	mov	r2, r8
 80085f0:	e7df      	b.n	80085b2 <_printf_float+0x402>
 80085f2:	2301      	movs	r3, #1
 80085f4:	464a      	mov	r2, r9
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	f43f ae38 	beq.w	8008272 <_printf_float+0xc2>
 8008602:	f108 0801 	add.w	r8, r8, #1
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800860a:	1a5b      	subs	r3, r3, r1
 800860c:	4543      	cmp	r3, r8
 800860e:	dcf0      	bgt.n	80085f2 <_printf_float+0x442>
 8008610:	e6fa      	b.n	8008408 <_printf_float+0x258>
 8008612:	f04f 0800 	mov.w	r8, #0
 8008616:	f104 0919 	add.w	r9, r4, #25
 800861a:	e7f4      	b.n	8008606 <_printf_float+0x456>

0800861c <_printf_common>:
 800861c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008620:	4616      	mov	r6, r2
 8008622:	4699      	mov	r9, r3
 8008624:	688a      	ldr	r2, [r1, #8]
 8008626:	690b      	ldr	r3, [r1, #16]
 8008628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800862c:	4293      	cmp	r3, r2
 800862e:	bfb8      	it	lt
 8008630:	4613      	movlt	r3, r2
 8008632:	6033      	str	r3, [r6, #0]
 8008634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008638:	4607      	mov	r7, r0
 800863a:	460c      	mov	r4, r1
 800863c:	b10a      	cbz	r2, 8008642 <_printf_common+0x26>
 800863e:	3301      	adds	r3, #1
 8008640:	6033      	str	r3, [r6, #0]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	0699      	lsls	r1, r3, #26
 8008646:	bf42      	ittt	mi
 8008648:	6833      	ldrmi	r3, [r6, #0]
 800864a:	3302      	addmi	r3, #2
 800864c:	6033      	strmi	r3, [r6, #0]
 800864e:	6825      	ldr	r5, [r4, #0]
 8008650:	f015 0506 	ands.w	r5, r5, #6
 8008654:	d106      	bne.n	8008664 <_printf_common+0x48>
 8008656:	f104 0a19 	add.w	sl, r4, #25
 800865a:	68e3      	ldr	r3, [r4, #12]
 800865c:	6832      	ldr	r2, [r6, #0]
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	42ab      	cmp	r3, r5
 8008662:	dc26      	bgt.n	80086b2 <_printf_common+0x96>
 8008664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008668:	1e13      	subs	r3, r2, #0
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	bf18      	it	ne
 800866e:	2301      	movne	r3, #1
 8008670:	0692      	lsls	r2, r2, #26
 8008672:	d42b      	bmi.n	80086cc <_printf_common+0xb0>
 8008674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008678:	4649      	mov	r1, r9
 800867a:	4638      	mov	r0, r7
 800867c:	47c0      	blx	r8
 800867e:	3001      	adds	r0, #1
 8008680:	d01e      	beq.n	80086c0 <_printf_common+0xa4>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	68e5      	ldr	r5, [r4, #12]
 8008686:	6832      	ldr	r2, [r6, #0]
 8008688:	f003 0306 	and.w	r3, r3, #6
 800868c:	2b04      	cmp	r3, #4
 800868e:	bf08      	it	eq
 8008690:	1aad      	subeq	r5, r5, r2
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	6922      	ldr	r2, [r4, #16]
 8008696:	bf0c      	ite	eq
 8008698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800869c:	2500      	movne	r5, #0
 800869e:	4293      	cmp	r3, r2
 80086a0:	bfc4      	itt	gt
 80086a2:	1a9b      	subgt	r3, r3, r2
 80086a4:	18ed      	addgt	r5, r5, r3
 80086a6:	2600      	movs	r6, #0
 80086a8:	341a      	adds	r4, #26
 80086aa:	42b5      	cmp	r5, r6
 80086ac:	d11a      	bne.n	80086e4 <_printf_common+0xc8>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e008      	b.n	80086c4 <_printf_common+0xa8>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4652      	mov	r2, sl
 80086b6:	4649      	mov	r1, r9
 80086b8:	4638      	mov	r0, r7
 80086ba:	47c0      	blx	r8
 80086bc:	3001      	adds	r0, #1
 80086be:	d103      	bne.n	80086c8 <_printf_common+0xac>
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c8:	3501      	adds	r5, #1
 80086ca:	e7c6      	b.n	800865a <_printf_common+0x3e>
 80086cc:	18e1      	adds	r1, r4, r3
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	2030      	movs	r0, #48	; 0x30
 80086d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086d6:	4422      	add	r2, r4
 80086d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086e0:	3302      	adds	r3, #2
 80086e2:	e7c7      	b.n	8008674 <_printf_common+0x58>
 80086e4:	2301      	movs	r3, #1
 80086e6:	4622      	mov	r2, r4
 80086e8:	4649      	mov	r1, r9
 80086ea:	4638      	mov	r0, r7
 80086ec:	47c0      	blx	r8
 80086ee:	3001      	adds	r0, #1
 80086f0:	d0e6      	beq.n	80086c0 <_printf_common+0xa4>
 80086f2:	3601      	adds	r6, #1
 80086f4:	e7d9      	b.n	80086aa <_printf_common+0x8e>
	...

080086f8 <_printf_i>:
 80086f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086fc:	7e0f      	ldrb	r7, [r1, #24]
 80086fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008700:	2f78      	cmp	r7, #120	; 0x78
 8008702:	4691      	mov	r9, r2
 8008704:	4680      	mov	r8, r0
 8008706:	460c      	mov	r4, r1
 8008708:	469a      	mov	sl, r3
 800870a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800870e:	d807      	bhi.n	8008720 <_printf_i+0x28>
 8008710:	2f62      	cmp	r7, #98	; 0x62
 8008712:	d80a      	bhi.n	800872a <_printf_i+0x32>
 8008714:	2f00      	cmp	r7, #0
 8008716:	f000 80d8 	beq.w	80088ca <_printf_i+0x1d2>
 800871a:	2f58      	cmp	r7, #88	; 0x58
 800871c:	f000 80a3 	beq.w	8008866 <_printf_i+0x16e>
 8008720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008728:	e03a      	b.n	80087a0 <_printf_i+0xa8>
 800872a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800872e:	2b15      	cmp	r3, #21
 8008730:	d8f6      	bhi.n	8008720 <_printf_i+0x28>
 8008732:	a101      	add	r1, pc, #4	; (adr r1, 8008738 <_printf_i+0x40>)
 8008734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008738:	08008791 	.word	0x08008791
 800873c:	080087a5 	.word	0x080087a5
 8008740:	08008721 	.word	0x08008721
 8008744:	08008721 	.word	0x08008721
 8008748:	08008721 	.word	0x08008721
 800874c:	08008721 	.word	0x08008721
 8008750:	080087a5 	.word	0x080087a5
 8008754:	08008721 	.word	0x08008721
 8008758:	08008721 	.word	0x08008721
 800875c:	08008721 	.word	0x08008721
 8008760:	08008721 	.word	0x08008721
 8008764:	080088b1 	.word	0x080088b1
 8008768:	080087d5 	.word	0x080087d5
 800876c:	08008893 	.word	0x08008893
 8008770:	08008721 	.word	0x08008721
 8008774:	08008721 	.word	0x08008721
 8008778:	080088d3 	.word	0x080088d3
 800877c:	08008721 	.word	0x08008721
 8008780:	080087d5 	.word	0x080087d5
 8008784:	08008721 	.word	0x08008721
 8008788:	08008721 	.word	0x08008721
 800878c:	0800889b 	.word	0x0800889b
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	602a      	str	r2, [r5, #0]
 8008798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800879c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087a0:	2301      	movs	r3, #1
 80087a2:	e0a3      	b.n	80088ec <_printf_i+0x1f4>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	6829      	ldr	r1, [r5, #0]
 80087a8:	0606      	lsls	r6, r0, #24
 80087aa:	f101 0304 	add.w	r3, r1, #4
 80087ae:	d50a      	bpl.n	80087c6 <_printf_i+0xce>
 80087b0:	680e      	ldr	r6, [r1, #0]
 80087b2:	602b      	str	r3, [r5, #0]
 80087b4:	2e00      	cmp	r6, #0
 80087b6:	da03      	bge.n	80087c0 <_printf_i+0xc8>
 80087b8:	232d      	movs	r3, #45	; 0x2d
 80087ba:	4276      	negs	r6, r6
 80087bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c0:	485e      	ldr	r0, [pc, #376]	; (800893c <_printf_i+0x244>)
 80087c2:	230a      	movs	r3, #10
 80087c4:	e019      	b.n	80087fa <_printf_i+0x102>
 80087c6:	680e      	ldr	r6, [r1, #0]
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087ce:	bf18      	it	ne
 80087d0:	b236      	sxthne	r6, r6
 80087d2:	e7ef      	b.n	80087b4 <_printf_i+0xbc>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	6820      	ldr	r0, [r4, #0]
 80087d8:	1d19      	adds	r1, r3, #4
 80087da:	6029      	str	r1, [r5, #0]
 80087dc:	0601      	lsls	r1, r0, #24
 80087de:	d501      	bpl.n	80087e4 <_printf_i+0xec>
 80087e0:	681e      	ldr	r6, [r3, #0]
 80087e2:	e002      	b.n	80087ea <_printf_i+0xf2>
 80087e4:	0646      	lsls	r6, r0, #25
 80087e6:	d5fb      	bpl.n	80087e0 <_printf_i+0xe8>
 80087e8:	881e      	ldrh	r6, [r3, #0]
 80087ea:	4854      	ldr	r0, [pc, #336]	; (800893c <_printf_i+0x244>)
 80087ec:	2f6f      	cmp	r7, #111	; 0x6f
 80087ee:	bf0c      	ite	eq
 80087f0:	2308      	moveq	r3, #8
 80087f2:	230a      	movne	r3, #10
 80087f4:	2100      	movs	r1, #0
 80087f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087fa:	6865      	ldr	r5, [r4, #4]
 80087fc:	60a5      	str	r5, [r4, #8]
 80087fe:	2d00      	cmp	r5, #0
 8008800:	bfa2      	ittt	ge
 8008802:	6821      	ldrge	r1, [r4, #0]
 8008804:	f021 0104 	bicge.w	r1, r1, #4
 8008808:	6021      	strge	r1, [r4, #0]
 800880a:	b90e      	cbnz	r6, 8008810 <_printf_i+0x118>
 800880c:	2d00      	cmp	r5, #0
 800880e:	d04d      	beq.n	80088ac <_printf_i+0x1b4>
 8008810:	4615      	mov	r5, r2
 8008812:	fbb6 f1f3 	udiv	r1, r6, r3
 8008816:	fb03 6711 	mls	r7, r3, r1, r6
 800881a:	5dc7      	ldrb	r7, [r0, r7]
 800881c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008820:	4637      	mov	r7, r6
 8008822:	42bb      	cmp	r3, r7
 8008824:	460e      	mov	r6, r1
 8008826:	d9f4      	bls.n	8008812 <_printf_i+0x11a>
 8008828:	2b08      	cmp	r3, #8
 800882a:	d10b      	bne.n	8008844 <_printf_i+0x14c>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	07de      	lsls	r6, r3, #31
 8008830:	d508      	bpl.n	8008844 <_printf_i+0x14c>
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	6861      	ldr	r1, [r4, #4]
 8008836:	4299      	cmp	r1, r3
 8008838:	bfde      	ittt	le
 800883a:	2330      	movle	r3, #48	; 0x30
 800883c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008840:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008844:	1b52      	subs	r2, r2, r5
 8008846:	6122      	str	r2, [r4, #16]
 8008848:	f8cd a000 	str.w	sl, [sp]
 800884c:	464b      	mov	r3, r9
 800884e:	aa03      	add	r2, sp, #12
 8008850:	4621      	mov	r1, r4
 8008852:	4640      	mov	r0, r8
 8008854:	f7ff fee2 	bl	800861c <_printf_common>
 8008858:	3001      	adds	r0, #1
 800885a:	d14c      	bne.n	80088f6 <_printf_i+0x1fe>
 800885c:	f04f 30ff 	mov.w	r0, #4294967295
 8008860:	b004      	add	sp, #16
 8008862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008866:	4835      	ldr	r0, [pc, #212]	; (800893c <_printf_i+0x244>)
 8008868:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800886c:	6829      	ldr	r1, [r5, #0]
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	f851 6b04 	ldr.w	r6, [r1], #4
 8008874:	6029      	str	r1, [r5, #0]
 8008876:	061d      	lsls	r5, r3, #24
 8008878:	d514      	bpl.n	80088a4 <_printf_i+0x1ac>
 800887a:	07df      	lsls	r7, r3, #31
 800887c:	bf44      	itt	mi
 800887e:	f043 0320 	orrmi.w	r3, r3, #32
 8008882:	6023      	strmi	r3, [r4, #0]
 8008884:	b91e      	cbnz	r6, 800888e <_printf_i+0x196>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	f023 0320 	bic.w	r3, r3, #32
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	2310      	movs	r3, #16
 8008890:	e7b0      	b.n	80087f4 <_printf_i+0xfc>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	f043 0320 	orr.w	r3, r3, #32
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	2378      	movs	r3, #120	; 0x78
 800889c:	4828      	ldr	r0, [pc, #160]	; (8008940 <_printf_i+0x248>)
 800889e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088a2:	e7e3      	b.n	800886c <_printf_i+0x174>
 80088a4:	0659      	lsls	r1, r3, #25
 80088a6:	bf48      	it	mi
 80088a8:	b2b6      	uxthmi	r6, r6
 80088aa:	e7e6      	b.n	800887a <_printf_i+0x182>
 80088ac:	4615      	mov	r5, r2
 80088ae:	e7bb      	b.n	8008828 <_printf_i+0x130>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	6826      	ldr	r6, [r4, #0]
 80088b4:	6961      	ldr	r1, [r4, #20]
 80088b6:	1d18      	adds	r0, r3, #4
 80088b8:	6028      	str	r0, [r5, #0]
 80088ba:	0635      	lsls	r5, r6, #24
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	d501      	bpl.n	80088c4 <_printf_i+0x1cc>
 80088c0:	6019      	str	r1, [r3, #0]
 80088c2:	e002      	b.n	80088ca <_printf_i+0x1d2>
 80088c4:	0670      	lsls	r0, r6, #25
 80088c6:	d5fb      	bpl.n	80088c0 <_printf_i+0x1c8>
 80088c8:	8019      	strh	r1, [r3, #0]
 80088ca:	2300      	movs	r3, #0
 80088cc:	6123      	str	r3, [r4, #16]
 80088ce:	4615      	mov	r5, r2
 80088d0:	e7ba      	b.n	8008848 <_printf_i+0x150>
 80088d2:	682b      	ldr	r3, [r5, #0]
 80088d4:	1d1a      	adds	r2, r3, #4
 80088d6:	602a      	str	r2, [r5, #0]
 80088d8:	681d      	ldr	r5, [r3, #0]
 80088da:	6862      	ldr	r2, [r4, #4]
 80088dc:	2100      	movs	r1, #0
 80088de:	4628      	mov	r0, r5
 80088e0:	f7f7 fc7e 	bl	80001e0 <memchr>
 80088e4:	b108      	cbz	r0, 80088ea <_printf_i+0x1f2>
 80088e6:	1b40      	subs	r0, r0, r5
 80088e8:	6060      	str	r0, [r4, #4]
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	2300      	movs	r3, #0
 80088f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088f4:	e7a8      	b.n	8008848 <_printf_i+0x150>
 80088f6:	6923      	ldr	r3, [r4, #16]
 80088f8:	462a      	mov	r2, r5
 80088fa:	4649      	mov	r1, r9
 80088fc:	4640      	mov	r0, r8
 80088fe:	47d0      	blx	sl
 8008900:	3001      	adds	r0, #1
 8008902:	d0ab      	beq.n	800885c <_printf_i+0x164>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	079b      	lsls	r3, r3, #30
 8008908:	d413      	bmi.n	8008932 <_printf_i+0x23a>
 800890a:	68e0      	ldr	r0, [r4, #12]
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	4298      	cmp	r0, r3
 8008910:	bfb8      	it	lt
 8008912:	4618      	movlt	r0, r3
 8008914:	e7a4      	b.n	8008860 <_printf_i+0x168>
 8008916:	2301      	movs	r3, #1
 8008918:	4632      	mov	r2, r6
 800891a:	4649      	mov	r1, r9
 800891c:	4640      	mov	r0, r8
 800891e:	47d0      	blx	sl
 8008920:	3001      	adds	r0, #1
 8008922:	d09b      	beq.n	800885c <_printf_i+0x164>
 8008924:	3501      	adds	r5, #1
 8008926:	68e3      	ldr	r3, [r4, #12]
 8008928:	9903      	ldr	r1, [sp, #12]
 800892a:	1a5b      	subs	r3, r3, r1
 800892c:	42ab      	cmp	r3, r5
 800892e:	dcf2      	bgt.n	8008916 <_printf_i+0x21e>
 8008930:	e7eb      	b.n	800890a <_printf_i+0x212>
 8008932:	2500      	movs	r5, #0
 8008934:	f104 0619 	add.w	r6, r4, #25
 8008938:	e7f5      	b.n	8008926 <_printf_i+0x22e>
 800893a:	bf00      	nop
 800893c:	0800ae46 	.word	0x0800ae46
 8008940:	0800ae57 	.word	0x0800ae57

08008944 <iprintf>:
 8008944:	b40f      	push	{r0, r1, r2, r3}
 8008946:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <iprintf+0x2c>)
 8008948:	b513      	push	{r0, r1, r4, lr}
 800894a:	681c      	ldr	r4, [r3, #0]
 800894c:	b124      	cbz	r4, 8008958 <iprintf+0x14>
 800894e:	69a3      	ldr	r3, [r4, #24]
 8008950:	b913      	cbnz	r3, 8008958 <iprintf+0x14>
 8008952:	4620      	mov	r0, r4
 8008954:	f001 f8d8 	bl	8009b08 <__sinit>
 8008958:	ab05      	add	r3, sp, #20
 800895a:	9a04      	ldr	r2, [sp, #16]
 800895c:	68a1      	ldr	r1, [r4, #8]
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	4620      	mov	r0, r4
 8008962:	f001 fe95 	bl	800a690 <_vfiprintf_r>
 8008966:	b002      	add	sp, #8
 8008968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800896c:	b004      	add	sp, #16
 800896e:	4770      	bx	lr
 8008970:	2000000c 	.word	0x2000000c

08008974 <_puts_r>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	460e      	mov	r6, r1
 8008978:	4605      	mov	r5, r0
 800897a:	b118      	cbz	r0, 8008984 <_puts_r+0x10>
 800897c:	6983      	ldr	r3, [r0, #24]
 800897e:	b90b      	cbnz	r3, 8008984 <_puts_r+0x10>
 8008980:	f001 f8c2 	bl	8009b08 <__sinit>
 8008984:	69ab      	ldr	r3, [r5, #24]
 8008986:	68ac      	ldr	r4, [r5, #8]
 8008988:	b913      	cbnz	r3, 8008990 <_puts_r+0x1c>
 800898a:	4628      	mov	r0, r5
 800898c:	f001 f8bc 	bl	8009b08 <__sinit>
 8008990:	4b2c      	ldr	r3, [pc, #176]	; (8008a44 <_puts_r+0xd0>)
 8008992:	429c      	cmp	r4, r3
 8008994:	d120      	bne.n	80089d8 <_puts_r+0x64>
 8008996:	686c      	ldr	r4, [r5, #4]
 8008998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800899a:	07db      	lsls	r3, r3, #31
 800899c:	d405      	bmi.n	80089aa <_puts_r+0x36>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	0598      	lsls	r0, r3, #22
 80089a2:	d402      	bmi.n	80089aa <_puts_r+0x36>
 80089a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a6:	f001 f952 	bl	8009c4e <__retarget_lock_acquire_recursive>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	0719      	lsls	r1, r3, #28
 80089ae:	d51d      	bpl.n	80089ec <_puts_r+0x78>
 80089b0:	6923      	ldr	r3, [r4, #16]
 80089b2:	b1db      	cbz	r3, 80089ec <_puts_r+0x78>
 80089b4:	3e01      	subs	r6, #1
 80089b6:	68a3      	ldr	r3, [r4, #8]
 80089b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089bc:	3b01      	subs	r3, #1
 80089be:	60a3      	str	r3, [r4, #8]
 80089c0:	bb39      	cbnz	r1, 8008a12 <_puts_r+0x9e>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	da38      	bge.n	8008a38 <_puts_r+0xc4>
 80089c6:	4622      	mov	r2, r4
 80089c8:	210a      	movs	r1, #10
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 f848 	bl	8008a60 <__swbuf_r>
 80089d0:	3001      	adds	r0, #1
 80089d2:	d011      	beq.n	80089f8 <_puts_r+0x84>
 80089d4:	250a      	movs	r5, #10
 80089d6:	e011      	b.n	80089fc <_puts_r+0x88>
 80089d8:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <_puts_r+0xd4>)
 80089da:	429c      	cmp	r4, r3
 80089dc:	d101      	bne.n	80089e2 <_puts_r+0x6e>
 80089de:	68ac      	ldr	r4, [r5, #8]
 80089e0:	e7da      	b.n	8008998 <_puts_r+0x24>
 80089e2:	4b1a      	ldr	r3, [pc, #104]	; (8008a4c <_puts_r+0xd8>)
 80089e4:	429c      	cmp	r4, r3
 80089e6:	bf08      	it	eq
 80089e8:	68ec      	ldreq	r4, [r5, #12]
 80089ea:	e7d5      	b.n	8008998 <_puts_r+0x24>
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	f000 f888 	bl	8008b04 <__swsetup_r>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d0dd      	beq.n	80089b4 <_puts_r+0x40>
 80089f8:	f04f 35ff 	mov.w	r5, #4294967295
 80089fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089fe:	07da      	lsls	r2, r3, #31
 8008a00:	d405      	bmi.n	8008a0e <_puts_r+0x9a>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	059b      	lsls	r3, r3, #22
 8008a06:	d402      	bmi.n	8008a0e <_puts_r+0x9a>
 8008a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a0a:	f001 f921 	bl	8009c50 <__retarget_lock_release_recursive>
 8008a0e:	4628      	mov	r0, r5
 8008a10:	bd70      	pop	{r4, r5, r6, pc}
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da04      	bge.n	8008a20 <_puts_r+0xac>
 8008a16:	69a2      	ldr	r2, [r4, #24]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	dc06      	bgt.n	8008a2a <_puts_r+0xb6>
 8008a1c:	290a      	cmp	r1, #10
 8008a1e:	d004      	beq.n	8008a2a <_puts_r+0xb6>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	6022      	str	r2, [r4, #0]
 8008a26:	7019      	strb	r1, [r3, #0]
 8008a28:	e7c5      	b.n	80089b6 <_puts_r+0x42>
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f000 f817 	bl	8008a60 <__swbuf_r>
 8008a32:	3001      	adds	r0, #1
 8008a34:	d1bf      	bne.n	80089b6 <_puts_r+0x42>
 8008a36:	e7df      	b.n	80089f8 <_puts_r+0x84>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	250a      	movs	r5, #10
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	701d      	strb	r5, [r3, #0]
 8008a42:	e7db      	b.n	80089fc <_puts_r+0x88>
 8008a44:	0800af18 	.word	0x0800af18
 8008a48:	0800af38 	.word	0x0800af38
 8008a4c:	0800aef8 	.word	0x0800aef8

08008a50 <puts>:
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <puts+0xc>)
 8008a52:	4601      	mov	r1, r0
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	f7ff bf8d 	b.w	8008974 <_puts_r>
 8008a5a:	bf00      	nop
 8008a5c:	2000000c 	.word	0x2000000c

08008a60 <__swbuf_r>:
 8008a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a62:	460e      	mov	r6, r1
 8008a64:	4614      	mov	r4, r2
 8008a66:	4605      	mov	r5, r0
 8008a68:	b118      	cbz	r0, 8008a72 <__swbuf_r+0x12>
 8008a6a:	6983      	ldr	r3, [r0, #24]
 8008a6c:	b90b      	cbnz	r3, 8008a72 <__swbuf_r+0x12>
 8008a6e:	f001 f84b 	bl	8009b08 <__sinit>
 8008a72:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <__swbuf_r+0x98>)
 8008a74:	429c      	cmp	r4, r3
 8008a76:	d12b      	bne.n	8008ad0 <__swbuf_r+0x70>
 8008a78:	686c      	ldr	r4, [r5, #4]
 8008a7a:	69a3      	ldr	r3, [r4, #24]
 8008a7c:	60a3      	str	r3, [r4, #8]
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	071a      	lsls	r2, r3, #28
 8008a82:	d52f      	bpl.n	8008ae4 <__swbuf_r+0x84>
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	b36b      	cbz	r3, 8008ae4 <__swbuf_r+0x84>
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	6820      	ldr	r0, [r4, #0]
 8008a8c:	1ac0      	subs	r0, r0, r3
 8008a8e:	6963      	ldr	r3, [r4, #20]
 8008a90:	b2f6      	uxtb	r6, r6
 8008a92:	4283      	cmp	r3, r0
 8008a94:	4637      	mov	r7, r6
 8008a96:	dc04      	bgt.n	8008aa2 <__swbuf_r+0x42>
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f000 ffa0 	bl	80099e0 <_fflush_r>
 8008aa0:	bb30      	cbnz	r0, 8008af0 <__swbuf_r+0x90>
 8008aa2:	68a3      	ldr	r3, [r4, #8]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	60a3      	str	r3, [r4, #8]
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	6022      	str	r2, [r4, #0]
 8008aae:	701e      	strb	r6, [r3, #0]
 8008ab0:	6963      	ldr	r3, [r4, #20]
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	4283      	cmp	r3, r0
 8008ab6:	d004      	beq.n	8008ac2 <__swbuf_r+0x62>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	07db      	lsls	r3, r3, #31
 8008abc:	d506      	bpl.n	8008acc <__swbuf_r+0x6c>
 8008abe:	2e0a      	cmp	r6, #10
 8008ac0:	d104      	bne.n	8008acc <__swbuf_r+0x6c>
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 ff8b 	bl	80099e0 <_fflush_r>
 8008aca:	b988      	cbnz	r0, 8008af0 <__swbuf_r+0x90>
 8008acc:	4638      	mov	r0, r7
 8008ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	; (8008afc <__swbuf_r+0x9c>)
 8008ad2:	429c      	cmp	r4, r3
 8008ad4:	d101      	bne.n	8008ada <__swbuf_r+0x7a>
 8008ad6:	68ac      	ldr	r4, [r5, #8]
 8008ad8:	e7cf      	b.n	8008a7a <__swbuf_r+0x1a>
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <__swbuf_r+0xa0>)
 8008adc:	429c      	cmp	r4, r3
 8008ade:	bf08      	it	eq
 8008ae0:	68ec      	ldreq	r4, [r5, #12]
 8008ae2:	e7ca      	b.n	8008a7a <__swbuf_r+0x1a>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f80c 	bl	8008b04 <__swsetup_r>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d0cb      	beq.n	8008a88 <__swbuf_r+0x28>
 8008af0:	f04f 37ff 	mov.w	r7, #4294967295
 8008af4:	e7ea      	b.n	8008acc <__swbuf_r+0x6c>
 8008af6:	bf00      	nop
 8008af8:	0800af18 	.word	0x0800af18
 8008afc:	0800af38 	.word	0x0800af38
 8008b00:	0800aef8 	.word	0x0800aef8

08008b04 <__swsetup_r>:
 8008b04:	4b32      	ldr	r3, [pc, #200]	; (8008bd0 <__swsetup_r+0xcc>)
 8008b06:	b570      	push	{r4, r5, r6, lr}
 8008b08:	681d      	ldr	r5, [r3, #0]
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	b125      	cbz	r5, 8008b1a <__swsetup_r+0x16>
 8008b10:	69ab      	ldr	r3, [r5, #24]
 8008b12:	b913      	cbnz	r3, 8008b1a <__swsetup_r+0x16>
 8008b14:	4628      	mov	r0, r5
 8008b16:	f000 fff7 	bl	8009b08 <__sinit>
 8008b1a:	4b2e      	ldr	r3, [pc, #184]	; (8008bd4 <__swsetup_r+0xd0>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	d10f      	bne.n	8008b40 <__swsetup_r+0x3c>
 8008b20:	686c      	ldr	r4, [r5, #4]
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b28:	0719      	lsls	r1, r3, #28
 8008b2a:	d42c      	bmi.n	8008b86 <__swsetup_r+0x82>
 8008b2c:	06dd      	lsls	r5, r3, #27
 8008b2e:	d411      	bmi.n	8008b54 <__swsetup_r+0x50>
 8008b30:	2309      	movs	r3, #9
 8008b32:	6033      	str	r3, [r6, #0]
 8008b34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3e:	e03e      	b.n	8008bbe <__swsetup_r+0xba>
 8008b40:	4b25      	ldr	r3, [pc, #148]	; (8008bd8 <__swsetup_r+0xd4>)
 8008b42:	429c      	cmp	r4, r3
 8008b44:	d101      	bne.n	8008b4a <__swsetup_r+0x46>
 8008b46:	68ac      	ldr	r4, [r5, #8]
 8008b48:	e7eb      	b.n	8008b22 <__swsetup_r+0x1e>
 8008b4a:	4b24      	ldr	r3, [pc, #144]	; (8008bdc <__swsetup_r+0xd8>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	bf08      	it	eq
 8008b50:	68ec      	ldreq	r4, [r5, #12]
 8008b52:	e7e6      	b.n	8008b22 <__swsetup_r+0x1e>
 8008b54:	0758      	lsls	r0, r3, #29
 8008b56:	d512      	bpl.n	8008b7e <__swsetup_r+0x7a>
 8008b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b5a:	b141      	cbz	r1, 8008b6e <__swsetup_r+0x6a>
 8008b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b60:	4299      	cmp	r1, r3
 8008b62:	d002      	beq.n	8008b6a <__swsetup_r+0x66>
 8008b64:	4630      	mov	r0, r6
 8008b66:	f001 fc89 	bl	800a47c <_free_r>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b74:	81a3      	strh	r3, [r4, #12]
 8008b76:	2300      	movs	r3, #0
 8008b78:	6063      	str	r3, [r4, #4]
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	f043 0308 	orr.w	r3, r3, #8
 8008b84:	81a3      	strh	r3, [r4, #12]
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	b94b      	cbnz	r3, 8008b9e <__swsetup_r+0x9a>
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b94:	d003      	beq.n	8008b9e <__swsetup_r+0x9a>
 8008b96:	4621      	mov	r1, r4
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f001 f87f 	bl	8009c9c <__smakebuf_r>
 8008b9e:	89a0      	ldrh	r0, [r4, #12]
 8008ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ba4:	f010 0301 	ands.w	r3, r0, #1
 8008ba8:	d00a      	beq.n	8008bc0 <__swsetup_r+0xbc>
 8008baa:	2300      	movs	r3, #0
 8008bac:	60a3      	str	r3, [r4, #8]
 8008bae:	6963      	ldr	r3, [r4, #20]
 8008bb0:	425b      	negs	r3, r3
 8008bb2:	61a3      	str	r3, [r4, #24]
 8008bb4:	6923      	ldr	r3, [r4, #16]
 8008bb6:	b943      	cbnz	r3, 8008bca <__swsetup_r+0xc6>
 8008bb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bbc:	d1ba      	bne.n	8008b34 <__swsetup_r+0x30>
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	0781      	lsls	r1, r0, #30
 8008bc2:	bf58      	it	pl
 8008bc4:	6963      	ldrpl	r3, [r4, #20]
 8008bc6:	60a3      	str	r3, [r4, #8]
 8008bc8:	e7f4      	b.n	8008bb4 <__swsetup_r+0xb0>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e7f7      	b.n	8008bbe <__swsetup_r+0xba>
 8008bce:	bf00      	nop
 8008bd0:	2000000c 	.word	0x2000000c
 8008bd4:	0800af18 	.word	0x0800af18
 8008bd8:	0800af38 	.word	0x0800af38
 8008bdc:	0800aef8 	.word	0x0800aef8

08008be0 <quorem>:
 8008be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	6903      	ldr	r3, [r0, #16]
 8008be6:	690c      	ldr	r4, [r1, #16]
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	4607      	mov	r7, r0
 8008bec:	f2c0 8081 	blt.w	8008cf2 <quorem+0x112>
 8008bf0:	3c01      	subs	r4, #1
 8008bf2:	f101 0814 	add.w	r8, r1, #20
 8008bf6:	f100 0514 	add.w	r5, r0, #20
 8008bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c14:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c18:	d331      	bcc.n	8008c7e <quorem+0x9e>
 8008c1a:	f04f 0e00 	mov.w	lr, #0
 8008c1e:	4640      	mov	r0, r8
 8008c20:	46ac      	mov	ip, r5
 8008c22:	46f2      	mov	sl, lr
 8008c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c28:	b293      	uxth	r3, r2
 8008c2a:	fb06 e303 	mla	r3, r6, r3, lr
 8008c2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	ebaa 0303 	sub.w	r3, sl, r3
 8008c38:	f8dc a000 	ldr.w	sl, [ip]
 8008c3c:	0c12      	lsrs	r2, r2, #16
 8008c3e:	fa13 f38a 	uxtah	r3, r3, sl
 8008c42:	fb06 e202 	mla	r2, r6, r2, lr
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	9b00      	ldr	r3, [sp, #0]
 8008c4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c4e:	b292      	uxth	r2, r2
 8008c50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c58:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c5c:	4581      	cmp	r9, r0
 8008c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c62:	f84c 3b04 	str.w	r3, [ip], #4
 8008c66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c6a:	d2db      	bcs.n	8008c24 <quorem+0x44>
 8008c6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c70:	b92b      	cbnz	r3, 8008c7e <quorem+0x9e>
 8008c72:	9b01      	ldr	r3, [sp, #4]
 8008c74:	3b04      	subs	r3, #4
 8008c76:	429d      	cmp	r5, r3
 8008c78:	461a      	mov	r2, r3
 8008c7a:	d32e      	bcc.n	8008cda <quorem+0xfa>
 8008c7c:	613c      	str	r4, [r7, #16]
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f001 fae4 	bl	800a24c <__mcmp>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	db24      	blt.n	8008cd2 <quorem+0xf2>
 8008c88:	3601      	adds	r6, #1
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f04f 0c00 	mov.w	ip, #0
 8008c90:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c94:	f8d0 e000 	ldr.w	lr, [r0]
 8008c98:	b293      	uxth	r3, r2
 8008c9a:	ebac 0303 	sub.w	r3, ip, r3
 8008c9e:	0c12      	lsrs	r2, r2, #16
 8008ca0:	fa13 f38e 	uxtah	r3, r3, lr
 8008ca4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cb2:	45c1      	cmp	r9, r8
 8008cb4:	f840 3b04 	str.w	r3, [r0], #4
 8008cb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008cbc:	d2e8      	bcs.n	8008c90 <quorem+0xb0>
 8008cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cc6:	b922      	cbnz	r2, 8008cd2 <quorem+0xf2>
 8008cc8:	3b04      	subs	r3, #4
 8008cca:	429d      	cmp	r5, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	d30a      	bcc.n	8008ce6 <quorem+0x106>
 8008cd0:	613c      	str	r4, [r7, #16]
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	b003      	add	sp, #12
 8008cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cda:	6812      	ldr	r2, [r2, #0]
 8008cdc:	3b04      	subs	r3, #4
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	d1cc      	bne.n	8008c7c <quorem+0x9c>
 8008ce2:	3c01      	subs	r4, #1
 8008ce4:	e7c7      	b.n	8008c76 <quorem+0x96>
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	3b04      	subs	r3, #4
 8008cea:	2a00      	cmp	r2, #0
 8008cec:	d1f0      	bne.n	8008cd0 <quorem+0xf0>
 8008cee:	3c01      	subs	r4, #1
 8008cf0:	e7eb      	b.n	8008cca <quorem+0xea>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	e7ee      	b.n	8008cd4 <quorem+0xf4>
	...

08008cf8 <_dtoa_r>:
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	ed2d 8b04 	vpush	{d8-d9}
 8008d00:	ec57 6b10 	vmov	r6, r7, d0
 8008d04:	b093      	sub	sp, #76	; 0x4c
 8008d06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d0c:	9106      	str	r1, [sp, #24]
 8008d0e:	ee10 aa10 	vmov	sl, s0
 8008d12:	4604      	mov	r4, r0
 8008d14:	9209      	str	r2, [sp, #36]	; 0x24
 8008d16:	930c      	str	r3, [sp, #48]	; 0x30
 8008d18:	46bb      	mov	fp, r7
 8008d1a:	b975      	cbnz	r5, 8008d3a <_dtoa_r+0x42>
 8008d1c:	2010      	movs	r0, #16
 8008d1e:	f000 fffd 	bl	8009d1c <malloc>
 8008d22:	4602      	mov	r2, r0
 8008d24:	6260      	str	r0, [r4, #36]	; 0x24
 8008d26:	b920      	cbnz	r0, 8008d32 <_dtoa_r+0x3a>
 8008d28:	4ba7      	ldr	r3, [pc, #668]	; (8008fc8 <_dtoa_r+0x2d0>)
 8008d2a:	21ea      	movs	r1, #234	; 0xea
 8008d2c:	48a7      	ldr	r0, [pc, #668]	; (8008fcc <_dtoa_r+0x2d4>)
 8008d2e:	f001 fe45 	bl	800a9bc <__assert_func>
 8008d32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d36:	6005      	str	r5, [r0, #0]
 8008d38:	60c5      	str	r5, [r0, #12]
 8008d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d3c:	6819      	ldr	r1, [r3, #0]
 8008d3e:	b151      	cbz	r1, 8008d56 <_dtoa_r+0x5e>
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	604a      	str	r2, [r1, #4]
 8008d44:	2301      	movs	r3, #1
 8008d46:	4093      	lsls	r3, r2
 8008d48:	608b      	str	r3, [r1, #8]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f001 f83c 	bl	8009dc8 <_Bfree>
 8008d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	1e3b      	subs	r3, r7, #0
 8008d58:	bfaa      	itet	ge
 8008d5a:	2300      	movge	r3, #0
 8008d5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d60:	f8c8 3000 	strge.w	r3, [r8]
 8008d64:	4b9a      	ldr	r3, [pc, #616]	; (8008fd0 <_dtoa_r+0x2d8>)
 8008d66:	bfbc      	itt	lt
 8008d68:	2201      	movlt	r2, #1
 8008d6a:	f8c8 2000 	strlt.w	r2, [r8]
 8008d6e:	ea33 030b 	bics.w	r3, r3, fp
 8008d72:	d11b      	bne.n	8008dac <_dtoa_r+0xb4>
 8008d74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d76:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d80:	4333      	orrs	r3, r6
 8008d82:	f000 8592 	beq.w	80098aa <_dtoa_r+0xbb2>
 8008d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d88:	b963      	cbnz	r3, 8008da4 <_dtoa_r+0xac>
 8008d8a:	4b92      	ldr	r3, [pc, #584]	; (8008fd4 <_dtoa_r+0x2dc>)
 8008d8c:	e022      	b.n	8008dd4 <_dtoa_r+0xdc>
 8008d8e:	4b92      	ldr	r3, [pc, #584]	; (8008fd8 <_dtoa_r+0x2e0>)
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	3308      	adds	r3, #8
 8008d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d96:	6013      	str	r3, [r2, #0]
 8008d98:	9801      	ldr	r0, [sp, #4]
 8008d9a:	b013      	add	sp, #76	; 0x4c
 8008d9c:	ecbd 8b04 	vpop	{d8-d9}
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da4:	4b8b      	ldr	r3, [pc, #556]	; (8008fd4 <_dtoa_r+0x2dc>)
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	3303      	adds	r3, #3
 8008daa:	e7f3      	b.n	8008d94 <_dtoa_r+0x9c>
 8008dac:	2200      	movs	r2, #0
 8008dae:	2300      	movs	r3, #0
 8008db0:	4650      	mov	r0, sl
 8008db2:	4659      	mov	r1, fp
 8008db4:	f7f7 fe88 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db8:	ec4b ab19 	vmov	d9, sl, fp
 8008dbc:	4680      	mov	r8, r0
 8008dbe:	b158      	cbz	r0, 8008dd8 <_dtoa_r+0xe0>
 8008dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 856b 	beq.w	80098a4 <_dtoa_r+0xbac>
 8008dce:	4883      	ldr	r0, [pc, #524]	; (8008fdc <_dtoa_r+0x2e4>)
 8008dd0:	6018      	str	r0, [r3, #0]
 8008dd2:	1e43      	subs	r3, r0, #1
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	e7df      	b.n	8008d98 <_dtoa_r+0xa0>
 8008dd8:	ec4b ab10 	vmov	d0, sl, fp
 8008ddc:	aa10      	add	r2, sp, #64	; 0x40
 8008dde:	a911      	add	r1, sp, #68	; 0x44
 8008de0:	4620      	mov	r0, r4
 8008de2:	f001 fad9 	bl	800a398 <__d2b>
 8008de6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008dea:	ee08 0a10 	vmov	s16, r0
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	f000 8084 	beq.w	8008efc <_dtoa_r+0x204>
 8008df4:	ee19 3a90 	vmov	r3, s19
 8008df8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dfc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e00:	4656      	mov	r6, sl
 8008e02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008e0e:	4b74      	ldr	r3, [pc, #464]	; (8008fe0 <_dtoa_r+0x2e8>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	4630      	mov	r0, r6
 8008e14:	4639      	mov	r1, r7
 8008e16:	f7f7 fa37 	bl	8000288 <__aeabi_dsub>
 8008e1a:	a365      	add	r3, pc, #404	; (adr r3, 8008fb0 <_dtoa_r+0x2b8>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 fbea 	bl	80005f8 <__aeabi_dmul>
 8008e24:	a364      	add	r3, pc, #400	; (adr r3, 8008fb8 <_dtoa_r+0x2c0>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 fa2f 	bl	800028c <__adddf3>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	4628      	mov	r0, r5
 8008e32:	460f      	mov	r7, r1
 8008e34:	f7f7 fb76 	bl	8000524 <__aeabi_i2d>
 8008e38:	a361      	add	r3, pc, #388	; (adr r3, 8008fc0 <_dtoa_r+0x2c8>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f7f7 fbdb 	bl	80005f8 <__aeabi_dmul>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4630      	mov	r0, r6
 8008e48:	4639      	mov	r1, r7
 8008e4a:	f7f7 fa1f 	bl	800028c <__adddf3>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	f7f7 fe81 	bl	8000b58 <__aeabi_d2iz>
 8008e56:	2200      	movs	r2, #0
 8008e58:	9000      	str	r0, [sp, #0]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	f7f7 fe3c 	bl	8000adc <__aeabi_dcmplt>
 8008e64:	b150      	cbz	r0, 8008e7c <_dtoa_r+0x184>
 8008e66:	9800      	ldr	r0, [sp, #0]
 8008e68:	f7f7 fb5c 	bl	8000524 <__aeabi_i2d>
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	463b      	mov	r3, r7
 8008e70:	f7f7 fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e74:	b910      	cbnz	r0, 8008e7c <_dtoa_r+0x184>
 8008e76:	9b00      	ldr	r3, [sp, #0]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	2b16      	cmp	r3, #22
 8008e80:	d85a      	bhi.n	8008f38 <_dtoa_r+0x240>
 8008e82:	9a00      	ldr	r2, [sp, #0]
 8008e84:	4b57      	ldr	r3, [pc, #348]	; (8008fe4 <_dtoa_r+0x2ec>)
 8008e86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	ec51 0b19 	vmov	r0, r1, d9
 8008e92:	f7f7 fe23 	bl	8000adc <__aeabi_dcmplt>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d050      	beq.n	8008f3c <_dtoa_r+0x244>
 8008e9a:	9b00      	ldr	r3, [sp, #0]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ea6:	1b5d      	subs	r5, r3, r5
 8008ea8:	1e6b      	subs	r3, r5, #1
 8008eaa:	9305      	str	r3, [sp, #20]
 8008eac:	bf45      	ittet	mi
 8008eae:	f1c5 0301 	rsbmi	r3, r5, #1
 8008eb2:	9304      	strmi	r3, [sp, #16]
 8008eb4:	2300      	movpl	r3, #0
 8008eb6:	2300      	movmi	r3, #0
 8008eb8:	bf4c      	ite	mi
 8008eba:	9305      	strmi	r3, [sp, #20]
 8008ebc:	9304      	strpl	r3, [sp, #16]
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	db3d      	blt.n	8008f40 <_dtoa_r+0x248>
 8008ec4:	9b05      	ldr	r3, [sp, #20]
 8008ec6:	9a00      	ldr	r2, [sp, #0]
 8008ec8:	920a      	str	r2, [sp, #40]	; 0x28
 8008eca:	4413      	add	r3, r2
 8008ecc:	9305      	str	r3, [sp, #20]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	9307      	str	r3, [sp, #28]
 8008ed2:	9b06      	ldr	r3, [sp, #24]
 8008ed4:	2b09      	cmp	r3, #9
 8008ed6:	f200 8089 	bhi.w	8008fec <_dtoa_r+0x2f4>
 8008eda:	2b05      	cmp	r3, #5
 8008edc:	bfc4      	itt	gt
 8008ede:	3b04      	subgt	r3, #4
 8008ee0:	9306      	strgt	r3, [sp, #24]
 8008ee2:	9b06      	ldr	r3, [sp, #24]
 8008ee4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ee8:	bfcc      	ite	gt
 8008eea:	2500      	movgt	r5, #0
 8008eec:	2501      	movle	r5, #1
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	f200 8087 	bhi.w	8009002 <_dtoa_r+0x30a>
 8008ef4:	e8df f003 	tbb	[pc, r3]
 8008ef8:	59383a2d 	.word	0x59383a2d
 8008efc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f00:	441d      	add	r5, r3
 8008f02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	bfc1      	itttt	gt
 8008f0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f12:	fa0b f303 	lslgt.w	r3, fp, r3
 8008f16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f1a:	bfda      	itte	le
 8008f1c:	f1c3 0320 	rsble	r3, r3, #32
 8008f20:	fa06 f003 	lslle.w	r0, r6, r3
 8008f24:	4318      	orrgt	r0, r3
 8008f26:	f7f7 faed 	bl	8000504 <__aeabi_ui2d>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f32:	3d01      	subs	r5, #1
 8008f34:	930e      	str	r3, [sp, #56]	; 0x38
 8008f36:	e76a      	b.n	8008e0e <_dtoa_r+0x116>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e7b2      	b.n	8008ea2 <_dtoa_r+0x1aa>
 8008f3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f3e:	e7b1      	b.n	8008ea4 <_dtoa_r+0x1ac>
 8008f40:	9b04      	ldr	r3, [sp, #16]
 8008f42:	9a00      	ldr	r2, [sp, #0]
 8008f44:	1a9b      	subs	r3, r3, r2
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	4253      	negs	r3, r2
 8008f4a:	9307      	str	r3, [sp, #28]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f50:	e7bf      	b.n	8008ed2 <_dtoa_r+0x1da>
 8008f52:	2300      	movs	r3, #0
 8008f54:	9308      	str	r3, [sp, #32]
 8008f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	dc55      	bgt.n	8009008 <_dtoa_r+0x310>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f62:	461a      	mov	r2, r3
 8008f64:	9209      	str	r2, [sp, #36]	; 0x24
 8008f66:	e00c      	b.n	8008f82 <_dtoa_r+0x28a>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e7f3      	b.n	8008f54 <_dtoa_r+0x25c>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f70:	9308      	str	r3, [sp, #32]
 8008f72:	9b00      	ldr	r3, [sp, #0]
 8008f74:	4413      	add	r3, r2
 8008f76:	9302      	str	r3, [sp, #8]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	9303      	str	r3, [sp, #12]
 8008f7e:	bfb8      	it	lt
 8008f80:	2301      	movlt	r3, #1
 8008f82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f84:	2200      	movs	r2, #0
 8008f86:	6042      	str	r2, [r0, #4]
 8008f88:	2204      	movs	r2, #4
 8008f8a:	f102 0614 	add.w	r6, r2, #20
 8008f8e:	429e      	cmp	r6, r3
 8008f90:	6841      	ldr	r1, [r0, #4]
 8008f92:	d93d      	bls.n	8009010 <_dtoa_r+0x318>
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fed7 	bl	8009d48 <_Balloc>
 8008f9a:	9001      	str	r0, [sp, #4]
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d13b      	bne.n	8009018 <_dtoa_r+0x320>
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <_dtoa_r+0x2f0>)
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008fa8:	e6c0      	b.n	8008d2c <_dtoa_r+0x34>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e7df      	b.n	8008f6e <_dtoa_r+0x276>
 8008fae:	bf00      	nop
 8008fb0:	636f4361 	.word	0x636f4361
 8008fb4:	3fd287a7 	.word	0x3fd287a7
 8008fb8:	8b60c8b3 	.word	0x8b60c8b3
 8008fbc:	3fc68a28 	.word	0x3fc68a28
 8008fc0:	509f79fb 	.word	0x509f79fb
 8008fc4:	3fd34413 	.word	0x3fd34413
 8008fc8:	0800ae75 	.word	0x0800ae75
 8008fcc:	0800ae8c 	.word	0x0800ae8c
 8008fd0:	7ff00000 	.word	0x7ff00000
 8008fd4:	0800ae71 	.word	0x0800ae71
 8008fd8:	0800ae68 	.word	0x0800ae68
 8008fdc:	0800ae45 	.word	0x0800ae45
 8008fe0:	3ff80000 	.word	0x3ff80000
 8008fe4:	0800afe0 	.word	0x0800afe0
 8008fe8:	0800aee7 	.word	0x0800aee7
 8008fec:	2501      	movs	r5, #1
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9306      	str	r3, [sp, #24]
 8008ff2:	9508      	str	r5, [sp, #32]
 8008ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2312      	movs	r3, #18
 8009000:	e7b0      	b.n	8008f64 <_dtoa_r+0x26c>
 8009002:	2301      	movs	r3, #1
 8009004:	9308      	str	r3, [sp, #32]
 8009006:	e7f5      	b.n	8008ff4 <_dtoa_r+0x2fc>
 8009008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800900e:	e7b8      	b.n	8008f82 <_dtoa_r+0x28a>
 8009010:	3101      	adds	r1, #1
 8009012:	6041      	str	r1, [r0, #4]
 8009014:	0052      	lsls	r2, r2, #1
 8009016:	e7b8      	b.n	8008f8a <_dtoa_r+0x292>
 8009018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800901a:	9a01      	ldr	r2, [sp, #4]
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	9b03      	ldr	r3, [sp, #12]
 8009020:	2b0e      	cmp	r3, #14
 8009022:	f200 809d 	bhi.w	8009160 <_dtoa_r+0x468>
 8009026:	2d00      	cmp	r5, #0
 8009028:	f000 809a 	beq.w	8009160 <_dtoa_r+0x468>
 800902c:	9b00      	ldr	r3, [sp, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	dd32      	ble.n	8009098 <_dtoa_r+0x3a0>
 8009032:	4ab7      	ldr	r2, [pc, #732]	; (8009310 <_dtoa_r+0x618>)
 8009034:	f003 030f 	and.w	r3, r3, #15
 8009038:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800903c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009040:	9b00      	ldr	r3, [sp, #0]
 8009042:	05d8      	lsls	r0, r3, #23
 8009044:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009048:	d516      	bpl.n	8009078 <_dtoa_r+0x380>
 800904a:	4bb2      	ldr	r3, [pc, #712]	; (8009314 <_dtoa_r+0x61c>)
 800904c:	ec51 0b19 	vmov	r0, r1, d9
 8009050:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009054:	f7f7 fbfa 	bl	800084c <__aeabi_ddiv>
 8009058:	f007 070f 	and.w	r7, r7, #15
 800905c:	4682      	mov	sl, r0
 800905e:	468b      	mov	fp, r1
 8009060:	2503      	movs	r5, #3
 8009062:	4eac      	ldr	r6, [pc, #688]	; (8009314 <_dtoa_r+0x61c>)
 8009064:	b957      	cbnz	r7, 800907c <_dtoa_r+0x384>
 8009066:	4642      	mov	r2, r8
 8009068:	464b      	mov	r3, r9
 800906a:	4650      	mov	r0, sl
 800906c:	4659      	mov	r1, fp
 800906e:	f7f7 fbed 	bl	800084c <__aeabi_ddiv>
 8009072:	4682      	mov	sl, r0
 8009074:	468b      	mov	fp, r1
 8009076:	e028      	b.n	80090ca <_dtoa_r+0x3d2>
 8009078:	2502      	movs	r5, #2
 800907a:	e7f2      	b.n	8009062 <_dtoa_r+0x36a>
 800907c:	07f9      	lsls	r1, r7, #31
 800907e:	d508      	bpl.n	8009092 <_dtoa_r+0x39a>
 8009080:	4640      	mov	r0, r8
 8009082:	4649      	mov	r1, r9
 8009084:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009088:	f7f7 fab6 	bl	80005f8 <__aeabi_dmul>
 800908c:	3501      	adds	r5, #1
 800908e:	4680      	mov	r8, r0
 8009090:	4689      	mov	r9, r1
 8009092:	107f      	asrs	r7, r7, #1
 8009094:	3608      	adds	r6, #8
 8009096:	e7e5      	b.n	8009064 <_dtoa_r+0x36c>
 8009098:	f000 809b 	beq.w	80091d2 <_dtoa_r+0x4da>
 800909c:	9b00      	ldr	r3, [sp, #0]
 800909e:	4f9d      	ldr	r7, [pc, #628]	; (8009314 <_dtoa_r+0x61c>)
 80090a0:	425e      	negs	r6, r3
 80090a2:	4b9b      	ldr	r3, [pc, #620]	; (8009310 <_dtoa_r+0x618>)
 80090a4:	f006 020f 	and.w	r2, r6, #15
 80090a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	ec51 0b19 	vmov	r0, r1, d9
 80090b4:	f7f7 faa0 	bl	80005f8 <__aeabi_dmul>
 80090b8:	1136      	asrs	r6, r6, #4
 80090ba:	4682      	mov	sl, r0
 80090bc:	468b      	mov	fp, r1
 80090be:	2300      	movs	r3, #0
 80090c0:	2502      	movs	r5, #2
 80090c2:	2e00      	cmp	r6, #0
 80090c4:	d17a      	bne.n	80091bc <_dtoa_r+0x4c4>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1d3      	bne.n	8009072 <_dtoa_r+0x37a>
 80090ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8082 	beq.w	80091d6 <_dtoa_r+0x4de>
 80090d2:	4b91      	ldr	r3, [pc, #580]	; (8009318 <_dtoa_r+0x620>)
 80090d4:	2200      	movs	r2, #0
 80090d6:	4650      	mov	r0, sl
 80090d8:	4659      	mov	r1, fp
 80090da:	f7f7 fcff 	bl	8000adc <__aeabi_dcmplt>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d079      	beq.n	80091d6 <_dtoa_r+0x4de>
 80090e2:	9b03      	ldr	r3, [sp, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d076      	beq.n	80091d6 <_dtoa_r+0x4de>
 80090e8:	9b02      	ldr	r3, [sp, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	dd36      	ble.n	800915c <_dtoa_r+0x464>
 80090ee:	9b00      	ldr	r3, [sp, #0]
 80090f0:	4650      	mov	r0, sl
 80090f2:	4659      	mov	r1, fp
 80090f4:	1e5f      	subs	r7, r3, #1
 80090f6:	2200      	movs	r2, #0
 80090f8:	4b88      	ldr	r3, [pc, #544]	; (800931c <_dtoa_r+0x624>)
 80090fa:	f7f7 fa7d 	bl	80005f8 <__aeabi_dmul>
 80090fe:	9e02      	ldr	r6, [sp, #8]
 8009100:	4682      	mov	sl, r0
 8009102:	468b      	mov	fp, r1
 8009104:	3501      	adds	r5, #1
 8009106:	4628      	mov	r0, r5
 8009108:	f7f7 fa0c 	bl	8000524 <__aeabi_i2d>
 800910c:	4652      	mov	r2, sl
 800910e:	465b      	mov	r3, fp
 8009110:	f7f7 fa72 	bl	80005f8 <__aeabi_dmul>
 8009114:	4b82      	ldr	r3, [pc, #520]	; (8009320 <_dtoa_r+0x628>)
 8009116:	2200      	movs	r2, #0
 8009118:	f7f7 f8b8 	bl	800028c <__adddf3>
 800911c:	46d0      	mov	r8, sl
 800911e:	46d9      	mov	r9, fp
 8009120:	4682      	mov	sl, r0
 8009122:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009126:	2e00      	cmp	r6, #0
 8009128:	d158      	bne.n	80091dc <_dtoa_r+0x4e4>
 800912a:	4b7e      	ldr	r3, [pc, #504]	; (8009324 <_dtoa_r+0x62c>)
 800912c:	2200      	movs	r2, #0
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 f8a9 	bl	8000288 <__aeabi_dsub>
 8009136:	4652      	mov	r2, sl
 8009138:	465b      	mov	r3, fp
 800913a:	4680      	mov	r8, r0
 800913c:	4689      	mov	r9, r1
 800913e:	f7f7 fceb 	bl	8000b18 <__aeabi_dcmpgt>
 8009142:	2800      	cmp	r0, #0
 8009144:	f040 8295 	bne.w	8009672 <_dtoa_r+0x97a>
 8009148:	4652      	mov	r2, sl
 800914a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800914e:	4640      	mov	r0, r8
 8009150:	4649      	mov	r1, r9
 8009152:	f7f7 fcc3 	bl	8000adc <__aeabi_dcmplt>
 8009156:	2800      	cmp	r0, #0
 8009158:	f040 8289 	bne.w	800966e <_dtoa_r+0x976>
 800915c:	ec5b ab19 	vmov	sl, fp, d9
 8009160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009162:	2b00      	cmp	r3, #0
 8009164:	f2c0 8148 	blt.w	80093f8 <_dtoa_r+0x700>
 8009168:	9a00      	ldr	r2, [sp, #0]
 800916a:	2a0e      	cmp	r2, #14
 800916c:	f300 8144 	bgt.w	80093f8 <_dtoa_r+0x700>
 8009170:	4b67      	ldr	r3, [pc, #412]	; (8009310 <_dtoa_r+0x618>)
 8009172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009176:	e9d3 8900 	ldrd	r8, r9, [r3]
 800917a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	f280 80d5 	bge.w	800932c <_dtoa_r+0x634>
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f300 80d1 	bgt.w	800932c <_dtoa_r+0x634>
 800918a:	f040 826f 	bne.w	800966c <_dtoa_r+0x974>
 800918e:	4b65      	ldr	r3, [pc, #404]	; (8009324 <_dtoa_r+0x62c>)
 8009190:	2200      	movs	r2, #0
 8009192:	4640      	mov	r0, r8
 8009194:	4649      	mov	r1, r9
 8009196:	f7f7 fa2f 	bl	80005f8 <__aeabi_dmul>
 800919a:	4652      	mov	r2, sl
 800919c:	465b      	mov	r3, fp
 800919e:	f7f7 fcb1 	bl	8000b04 <__aeabi_dcmpge>
 80091a2:	9e03      	ldr	r6, [sp, #12]
 80091a4:	4637      	mov	r7, r6
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f040 8245 	bne.w	8009636 <_dtoa_r+0x93e>
 80091ac:	9d01      	ldr	r5, [sp, #4]
 80091ae:	2331      	movs	r3, #49	; 0x31
 80091b0:	f805 3b01 	strb.w	r3, [r5], #1
 80091b4:	9b00      	ldr	r3, [sp, #0]
 80091b6:	3301      	adds	r3, #1
 80091b8:	9300      	str	r3, [sp, #0]
 80091ba:	e240      	b.n	800963e <_dtoa_r+0x946>
 80091bc:	07f2      	lsls	r2, r6, #31
 80091be:	d505      	bpl.n	80091cc <_dtoa_r+0x4d4>
 80091c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091c4:	f7f7 fa18 	bl	80005f8 <__aeabi_dmul>
 80091c8:	3501      	adds	r5, #1
 80091ca:	2301      	movs	r3, #1
 80091cc:	1076      	asrs	r6, r6, #1
 80091ce:	3708      	adds	r7, #8
 80091d0:	e777      	b.n	80090c2 <_dtoa_r+0x3ca>
 80091d2:	2502      	movs	r5, #2
 80091d4:	e779      	b.n	80090ca <_dtoa_r+0x3d2>
 80091d6:	9f00      	ldr	r7, [sp, #0]
 80091d8:	9e03      	ldr	r6, [sp, #12]
 80091da:	e794      	b.n	8009106 <_dtoa_r+0x40e>
 80091dc:	9901      	ldr	r1, [sp, #4]
 80091de:	4b4c      	ldr	r3, [pc, #304]	; (8009310 <_dtoa_r+0x618>)
 80091e0:	4431      	add	r1, r6
 80091e2:	910d      	str	r1, [sp, #52]	; 0x34
 80091e4:	9908      	ldr	r1, [sp, #32]
 80091e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091ee:	2900      	cmp	r1, #0
 80091f0:	d043      	beq.n	800927a <_dtoa_r+0x582>
 80091f2:	494d      	ldr	r1, [pc, #308]	; (8009328 <_dtoa_r+0x630>)
 80091f4:	2000      	movs	r0, #0
 80091f6:	f7f7 fb29 	bl	800084c <__aeabi_ddiv>
 80091fa:	4652      	mov	r2, sl
 80091fc:	465b      	mov	r3, fp
 80091fe:	f7f7 f843 	bl	8000288 <__aeabi_dsub>
 8009202:	9d01      	ldr	r5, [sp, #4]
 8009204:	4682      	mov	sl, r0
 8009206:	468b      	mov	fp, r1
 8009208:	4649      	mov	r1, r9
 800920a:	4640      	mov	r0, r8
 800920c:	f7f7 fca4 	bl	8000b58 <__aeabi_d2iz>
 8009210:	4606      	mov	r6, r0
 8009212:	f7f7 f987 	bl	8000524 <__aeabi_i2d>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4640      	mov	r0, r8
 800921c:	4649      	mov	r1, r9
 800921e:	f7f7 f833 	bl	8000288 <__aeabi_dsub>
 8009222:	3630      	adds	r6, #48	; 0x30
 8009224:	f805 6b01 	strb.w	r6, [r5], #1
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	4680      	mov	r8, r0
 800922e:	4689      	mov	r9, r1
 8009230:	f7f7 fc54 	bl	8000adc <__aeabi_dcmplt>
 8009234:	2800      	cmp	r0, #0
 8009236:	d163      	bne.n	8009300 <_dtoa_r+0x608>
 8009238:	4642      	mov	r2, r8
 800923a:	464b      	mov	r3, r9
 800923c:	4936      	ldr	r1, [pc, #216]	; (8009318 <_dtoa_r+0x620>)
 800923e:	2000      	movs	r0, #0
 8009240:	f7f7 f822 	bl	8000288 <__aeabi_dsub>
 8009244:	4652      	mov	r2, sl
 8009246:	465b      	mov	r3, fp
 8009248:	f7f7 fc48 	bl	8000adc <__aeabi_dcmplt>
 800924c:	2800      	cmp	r0, #0
 800924e:	f040 80b5 	bne.w	80093bc <_dtoa_r+0x6c4>
 8009252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009254:	429d      	cmp	r5, r3
 8009256:	d081      	beq.n	800915c <_dtoa_r+0x464>
 8009258:	4b30      	ldr	r3, [pc, #192]	; (800931c <_dtoa_r+0x624>)
 800925a:	2200      	movs	r2, #0
 800925c:	4650      	mov	r0, sl
 800925e:	4659      	mov	r1, fp
 8009260:	f7f7 f9ca 	bl	80005f8 <__aeabi_dmul>
 8009264:	4b2d      	ldr	r3, [pc, #180]	; (800931c <_dtoa_r+0x624>)
 8009266:	4682      	mov	sl, r0
 8009268:	468b      	mov	fp, r1
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	2200      	movs	r2, #0
 8009270:	f7f7 f9c2 	bl	80005f8 <__aeabi_dmul>
 8009274:	4680      	mov	r8, r0
 8009276:	4689      	mov	r9, r1
 8009278:	e7c6      	b.n	8009208 <_dtoa_r+0x510>
 800927a:	4650      	mov	r0, sl
 800927c:	4659      	mov	r1, fp
 800927e:	f7f7 f9bb 	bl	80005f8 <__aeabi_dmul>
 8009282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009284:	9d01      	ldr	r5, [sp, #4]
 8009286:	930f      	str	r3, [sp, #60]	; 0x3c
 8009288:	4682      	mov	sl, r0
 800928a:	468b      	mov	fp, r1
 800928c:	4649      	mov	r1, r9
 800928e:	4640      	mov	r0, r8
 8009290:	f7f7 fc62 	bl	8000b58 <__aeabi_d2iz>
 8009294:	4606      	mov	r6, r0
 8009296:	f7f7 f945 	bl	8000524 <__aeabi_i2d>
 800929a:	3630      	adds	r6, #48	; 0x30
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4640      	mov	r0, r8
 80092a2:	4649      	mov	r1, r9
 80092a4:	f7f6 fff0 	bl	8000288 <__aeabi_dsub>
 80092a8:	f805 6b01 	strb.w	r6, [r5], #1
 80092ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ae:	429d      	cmp	r5, r3
 80092b0:	4680      	mov	r8, r0
 80092b2:	4689      	mov	r9, r1
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	d124      	bne.n	8009304 <_dtoa_r+0x60c>
 80092ba:	4b1b      	ldr	r3, [pc, #108]	; (8009328 <_dtoa_r+0x630>)
 80092bc:	4650      	mov	r0, sl
 80092be:	4659      	mov	r1, fp
 80092c0:	f7f6 ffe4 	bl	800028c <__adddf3>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f7 fc24 	bl	8000b18 <__aeabi_dcmpgt>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d173      	bne.n	80093bc <_dtoa_r+0x6c4>
 80092d4:	4652      	mov	r2, sl
 80092d6:	465b      	mov	r3, fp
 80092d8:	4913      	ldr	r1, [pc, #76]	; (8009328 <_dtoa_r+0x630>)
 80092da:	2000      	movs	r0, #0
 80092dc:	f7f6 ffd4 	bl	8000288 <__aeabi_dsub>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f7 fbf8 	bl	8000adc <__aeabi_dcmplt>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f43f af35 	beq.w	800915c <_dtoa_r+0x464>
 80092f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092f4:	1e6b      	subs	r3, r5, #1
 80092f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092fc:	2b30      	cmp	r3, #48	; 0x30
 80092fe:	d0f8      	beq.n	80092f2 <_dtoa_r+0x5fa>
 8009300:	9700      	str	r7, [sp, #0]
 8009302:	e049      	b.n	8009398 <_dtoa_r+0x6a0>
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <_dtoa_r+0x624>)
 8009306:	f7f7 f977 	bl	80005f8 <__aeabi_dmul>
 800930a:	4680      	mov	r8, r0
 800930c:	4689      	mov	r9, r1
 800930e:	e7bd      	b.n	800928c <_dtoa_r+0x594>
 8009310:	0800afe0 	.word	0x0800afe0
 8009314:	0800afb8 	.word	0x0800afb8
 8009318:	3ff00000 	.word	0x3ff00000
 800931c:	40240000 	.word	0x40240000
 8009320:	401c0000 	.word	0x401c0000
 8009324:	40140000 	.word	0x40140000
 8009328:	3fe00000 	.word	0x3fe00000
 800932c:	9d01      	ldr	r5, [sp, #4]
 800932e:	4656      	mov	r6, sl
 8009330:	465f      	mov	r7, fp
 8009332:	4642      	mov	r2, r8
 8009334:	464b      	mov	r3, r9
 8009336:	4630      	mov	r0, r6
 8009338:	4639      	mov	r1, r7
 800933a:	f7f7 fa87 	bl	800084c <__aeabi_ddiv>
 800933e:	f7f7 fc0b 	bl	8000b58 <__aeabi_d2iz>
 8009342:	4682      	mov	sl, r0
 8009344:	f7f7 f8ee 	bl	8000524 <__aeabi_i2d>
 8009348:	4642      	mov	r2, r8
 800934a:	464b      	mov	r3, r9
 800934c:	f7f7 f954 	bl	80005f8 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800935c:	f7f6 ff94 	bl	8000288 <__aeabi_dsub>
 8009360:	f805 6b01 	strb.w	r6, [r5], #1
 8009364:	9e01      	ldr	r6, [sp, #4]
 8009366:	9f03      	ldr	r7, [sp, #12]
 8009368:	1bae      	subs	r6, r5, r6
 800936a:	42b7      	cmp	r7, r6
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	d135      	bne.n	80093de <_dtoa_r+0x6e6>
 8009372:	f7f6 ff8b 	bl	800028c <__adddf3>
 8009376:	4642      	mov	r2, r8
 8009378:	464b      	mov	r3, r9
 800937a:	4606      	mov	r6, r0
 800937c:	460f      	mov	r7, r1
 800937e:	f7f7 fbcb 	bl	8000b18 <__aeabi_dcmpgt>
 8009382:	b9d0      	cbnz	r0, 80093ba <_dtoa_r+0x6c2>
 8009384:	4642      	mov	r2, r8
 8009386:	464b      	mov	r3, r9
 8009388:	4630      	mov	r0, r6
 800938a:	4639      	mov	r1, r7
 800938c:	f7f7 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009390:	b110      	cbz	r0, 8009398 <_dtoa_r+0x6a0>
 8009392:	f01a 0f01 	tst.w	sl, #1
 8009396:	d110      	bne.n	80093ba <_dtoa_r+0x6c2>
 8009398:	4620      	mov	r0, r4
 800939a:	ee18 1a10 	vmov	r1, s16
 800939e:	f000 fd13 	bl	8009dc8 <_Bfree>
 80093a2:	2300      	movs	r3, #0
 80093a4:	9800      	ldr	r0, [sp, #0]
 80093a6:	702b      	strb	r3, [r5, #0]
 80093a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093aa:	3001      	adds	r0, #1
 80093ac:	6018      	str	r0, [r3, #0]
 80093ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f43f acf1 	beq.w	8008d98 <_dtoa_r+0xa0>
 80093b6:	601d      	str	r5, [r3, #0]
 80093b8:	e4ee      	b.n	8008d98 <_dtoa_r+0xa0>
 80093ba:	9f00      	ldr	r7, [sp, #0]
 80093bc:	462b      	mov	r3, r5
 80093be:	461d      	mov	r5, r3
 80093c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093c4:	2a39      	cmp	r2, #57	; 0x39
 80093c6:	d106      	bne.n	80093d6 <_dtoa_r+0x6de>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d1f7      	bne.n	80093be <_dtoa_r+0x6c6>
 80093ce:	9901      	ldr	r1, [sp, #4]
 80093d0:	2230      	movs	r2, #48	; 0x30
 80093d2:	3701      	adds	r7, #1
 80093d4:	700a      	strb	r2, [r1, #0]
 80093d6:	781a      	ldrb	r2, [r3, #0]
 80093d8:	3201      	adds	r2, #1
 80093da:	701a      	strb	r2, [r3, #0]
 80093dc:	e790      	b.n	8009300 <_dtoa_r+0x608>
 80093de:	4ba6      	ldr	r3, [pc, #664]	; (8009678 <_dtoa_r+0x980>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	f7f7 f909 	bl	80005f8 <__aeabi_dmul>
 80093e6:	2200      	movs	r2, #0
 80093e8:	2300      	movs	r3, #0
 80093ea:	4606      	mov	r6, r0
 80093ec:	460f      	mov	r7, r1
 80093ee:	f7f7 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d09d      	beq.n	8009332 <_dtoa_r+0x63a>
 80093f6:	e7cf      	b.n	8009398 <_dtoa_r+0x6a0>
 80093f8:	9a08      	ldr	r2, [sp, #32]
 80093fa:	2a00      	cmp	r2, #0
 80093fc:	f000 80d7 	beq.w	80095ae <_dtoa_r+0x8b6>
 8009400:	9a06      	ldr	r2, [sp, #24]
 8009402:	2a01      	cmp	r2, #1
 8009404:	f300 80ba 	bgt.w	800957c <_dtoa_r+0x884>
 8009408:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800940a:	2a00      	cmp	r2, #0
 800940c:	f000 80b2 	beq.w	8009574 <_dtoa_r+0x87c>
 8009410:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009414:	9e07      	ldr	r6, [sp, #28]
 8009416:	9d04      	ldr	r5, [sp, #16]
 8009418:	9a04      	ldr	r2, [sp, #16]
 800941a:	441a      	add	r2, r3
 800941c:	9204      	str	r2, [sp, #16]
 800941e:	9a05      	ldr	r2, [sp, #20]
 8009420:	2101      	movs	r1, #1
 8009422:	441a      	add	r2, r3
 8009424:	4620      	mov	r0, r4
 8009426:	9205      	str	r2, [sp, #20]
 8009428:	f000 fd86 	bl	8009f38 <__i2b>
 800942c:	4607      	mov	r7, r0
 800942e:	2d00      	cmp	r5, #0
 8009430:	dd0c      	ble.n	800944c <_dtoa_r+0x754>
 8009432:	9b05      	ldr	r3, [sp, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	dd09      	ble.n	800944c <_dtoa_r+0x754>
 8009438:	42ab      	cmp	r3, r5
 800943a:	9a04      	ldr	r2, [sp, #16]
 800943c:	bfa8      	it	ge
 800943e:	462b      	movge	r3, r5
 8009440:	1ad2      	subs	r2, r2, r3
 8009442:	9204      	str	r2, [sp, #16]
 8009444:	9a05      	ldr	r2, [sp, #20]
 8009446:	1aed      	subs	r5, r5, r3
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	9305      	str	r3, [sp, #20]
 800944c:	9b07      	ldr	r3, [sp, #28]
 800944e:	b31b      	cbz	r3, 8009498 <_dtoa_r+0x7a0>
 8009450:	9b08      	ldr	r3, [sp, #32]
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 80af 	beq.w	80095b6 <_dtoa_r+0x8be>
 8009458:	2e00      	cmp	r6, #0
 800945a:	dd13      	ble.n	8009484 <_dtoa_r+0x78c>
 800945c:	4639      	mov	r1, r7
 800945e:	4632      	mov	r2, r6
 8009460:	4620      	mov	r0, r4
 8009462:	f000 fe29 	bl	800a0b8 <__pow5mult>
 8009466:	ee18 2a10 	vmov	r2, s16
 800946a:	4601      	mov	r1, r0
 800946c:	4607      	mov	r7, r0
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fd78 	bl	8009f64 <__multiply>
 8009474:	ee18 1a10 	vmov	r1, s16
 8009478:	4680      	mov	r8, r0
 800947a:	4620      	mov	r0, r4
 800947c:	f000 fca4 	bl	8009dc8 <_Bfree>
 8009480:	ee08 8a10 	vmov	s16, r8
 8009484:	9b07      	ldr	r3, [sp, #28]
 8009486:	1b9a      	subs	r2, r3, r6
 8009488:	d006      	beq.n	8009498 <_dtoa_r+0x7a0>
 800948a:	ee18 1a10 	vmov	r1, s16
 800948e:	4620      	mov	r0, r4
 8009490:	f000 fe12 	bl	800a0b8 <__pow5mult>
 8009494:	ee08 0a10 	vmov	s16, r0
 8009498:	2101      	movs	r1, #1
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fd4c 	bl	8009f38 <__i2b>
 80094a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	4606      	mov	r6, r0
 80094a6:	f340 8088 	ble.w	80095ba <_dtoa_r+0x8c2>
 80094aa:	461a      	mov	r2, r3
 80094ac:	4601      	mov	r1, r0
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 fe02 	bl	800a0b8 <__pow5mult>
 80094b4:	9b06      	ldr	r3, [sp, #24]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	4606      	mov	r6, r0
 80094ba:	f340 8081 	ble.w	80095c0 <_dtoa_r+0x8c8>
 80094be:	f04f 0800 	mov.w	r8, #0
 80094c2:	6933      	ldr	r3, [r6, #16]
 80094c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094c8:	6918      	ldr	r0, [r3, #16]
 80094ca:	f000 fce5 	bl	8009e98 <__hi0bits>
 80094ce:	f1c0 0020 	rsb	r0, r0, #32
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	4418      	add	r0, r3
 80094d6:	f010 001f 	ands.w	r0, r0, #31
 80094da:	f000 8092 	beq.w	8009602 <_dtoa_r+0x90a>
 80094de:	f1c0 0320 	rsb	r3, r0, #32
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	f340 808a 	ble.w	80095fc <_dtoa_r+0x904>
 80094e8:	f1c0 001c 	rsb	r0, r0, #28
 80094ec:	9b04      	ldr	r3, [sp, #16]
 80094ee:	4403      	add	r3, r0
 80094f0:	9304      	str	r3, [sp, #16]
 80094f2:	9b05      	ldr	r3, [sp, #20]
 80094f4:	4403      	add	r3, r0
 80094f6:	4405      	add	r5, r0
 80094f8:	9305      	str	r3, [sp, #20]
 80094fa:	9b04      	ldr	r3, [sp, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	dd07      	ble.n	8009510 <_dtoa_r+0x818>
 8009500:	ee18 1a10 	vmov	r1, s16
 8009504:	461a      	mov	r2, r3
 8009506:	4620      	mov	r0, r4
 8009508:	f000 fe30 	bl	800a16c <__lshift>
 800950c:	ee08 0a10 	vmov	s16, r0
 8009510:	9b05      	ldr	r3, [sp, #20]
 8009512:	2b00      	cmp	r3, #0
 8009514:	dd05      	ble.n	8009522 <_dtoa_r+0x82a>
 8009516:	4631      	mov	r1, r6
 8009518:	461a      	mov	r2, r3
 800951a:	4620      	mov	r0, r4
 800951c:	f000 fe26 	bl	800a16c <__lshift>
 8009520:	4606      	mov	r6, r0
 8009522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d06e      	beq.n	8009606 <_dtoa_r+0x90e>
 8009528:	ee18 0a10 	vmov	r0, s16
 800952c:	4631      	mov	r1, r6
 800952e:	f000 fe8d 	bl	800a24c <__mcmp>
 8009532:	2800      	cmp	r0, #0
 8009534:	da67      	bge.n	8009606 <_dtoa_r+0x90e>
 8009536:	9b00      	ldr	r3, [sp, #0]
 8009538:	3b01      	subs	r3, #1
 800953a:	ee18 1a10 	vmov	r1, s16
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	220a      	movs	r2, #10
 8009542:	2300      	movs	r3, #0
 8009544:	4620      	mov	r0, r4
 8009546:	f000 fc61 	bl	8009e0c <__multadd>
 800954a:	9b08      	ldr	r3, [sp, #32]
 800954c:	ee08 0a10 	vmov	s16, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 81b1 	beq.w	80098b8 <_dtoa_r+0xbc0>
 8009556:	2300      	movs	r3, #0
 8009558:	4639      	mov	r1, r7
 800955a:	220a      	movs	r2, #10
 800955c:	4620      	mov	r0, r4
 800955e:	f000 fc55 	bl	8009e0c <__multadd>
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	4607      	mov	r7, r0
 8009568:	f300 808e 	bgt.w	8009688 <_dtoa_r+0x990>
 800956c:	9b06      	ldr	r3, [sp, #24]
 800956e:	2b02      	cmp	r3, #2
 8009570:	dc51      	bgt.n	8009616 <_dtoa_r+0x91e>
 8009572:	e089      	b.n	8009688 <_dtoa_r+0x990>
 8009574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009576:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800957a:	e74b      	b.n	8009414 <_dtoa_r+0x71c>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	1e5e      	subs	r6, r3, #1
 8009580:	9b07      	ldr	r3, [sp, #28]
 8009582:	42b3      	cmp	r3, r6
 8009584:	bfbf      	itttt	lt
 8009586:	9b07      	ldrlt	r3, [sp, #28]
 8009588:	9607      	strlt	r6, [sp, #28]
 800958a:	1af2      	sublt	r2, r6, r3
 800958c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800958e:	bfb6      	itet	lt
 8009590:	189b      	addlt	r3, r3, r2
 8009592:	1b9e      	subge	r6, r3, r6
 8009594:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	bfb8      	it	lt
 800959a:	2600      	movlt	r6, #0
 800959c:	2b00      	cmp	r3, #0
 800959e:	bfb7      	itett	lt
 80095a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80095a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80095a8:	1a9d      	sublt	r5, r3, r2
 80095aa:	2300      	movlt	r3, #0
 80095ac:	e734      	b.n	8009418 <_dtoa_r+0x720>
 80095ae:	9e07      	ldr	r6, [sp, #28]
 80095b0:	9d04      	ldr	r5, [sp, #16]
 80095b2:	9f08      	ldr	r7, [sp, #32]
 80095b4:	e73b      	b.n	800942e <_dtoa_r+0x736>
 80095b6:	9a07      	ldr	r2, [sp, #28]
 80095b8:	e767      	b.n	800948a <_dtoa_r+0x792>
 80095ba:	9b06      	ldr	r3, [sp, #24]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	dc18      	bgt.n	80095f2 <_dtoa_r+0x8fa>
 80095c0:	f1ba 0f00 	cmp.w	sl, #0
 80095c4:	d115      	bne.n	80095f2 <_dtoa_r+0x8fa>
 80095c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095ca:	b993      	cbnz	r3, 80095f2 <_dtoa_r+0x8fa>
 80095cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095d0:	0d1b      	lsrs	r3, r3, #20
 80095d2:	051b      	lsls	r3, r3, #20
 80095d4:	b183      	cbz	r3, 80095f8 <_dtoa_r+0x900>
 80095d6:	9b04      	ldr	r3, [sp, #16]
 80095d8:	3301      	adds	r3, #1
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	9b05      	ldr	r3, [sp, #20]
 80095de:	3301      	adds	r3, #1
 80095e0:	9305      	str	r3, [sp, #20]
 80095e2:	f04f 0801 	mov.w	r8, #1
 80095e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f47f af6a 	bne.w	80094c2 <_dtoa_r+0x7ca>
 80095ee:	2001      	movs	r0, #1
 80095f0:	e76f      	b.n	80094d2 <_dtoa_r+0x7da>
 80095f2:	f04f 0800 	mov.w	r8, #0
 80095f6:	e7f6      	b.n	80095e6 <_dtoa_r+0x8ee>
 80095f8:	4698      	mov	r8, r3
 80095fa:	e7f4      	b.n	80095e6 <_dtoa_r+0x8ee>
 80095fc:	f43f af7d 	beq.w	80094fa <_dtoa_r+0x802>
 8009600:	4618      	mov	r0, r3
 8009602:	301c      	adds	r0, #28
 8009604:	e772      	b.n	80094ec <_dtoa_r+0x7f4>
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	dc37      	bgt.n	800967c <_dtoa_r+0x984>
 800960c:	9b06      	ldr	r3, [sp, #24]
 800960e:	2b02      	cmp	r3, #2
 8009610:	dd34      	ble.n	800967c <_dtoa_r+0x984>
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	9302      	str	r3, [sp, #8]
 8009616:	9b02      	ldr	r3, [sp, #8]
 8009618:	b96b      	cbnz	r3, 8009636 <_dtoa_r+0x93e>
 800961a:	4631      	mov	r1, r6
 800961c:	2205      	movs	r2, #5
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fbf4 	bl	8009e0c <__multadd>
 8009624:	4601      	mov	r1, r0
 8009626:	4606      	mov	r6, r0
 8009628:	ee18 0a10 	vmov	r0, s16
 800962c:	f000 fe0e 	bl	800a24c <__mcmp>
 8009630:	2800      	cmp	r0, #0
 8009632:	f73f adbb 	bgt.w	80091ac <_dtoa_r+0x4b4>
 8009636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009638:	9d01      	ldr	r5, [sp, #4]
 800963a:	43db      	mvns	r3, r3
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	f04f 0800 	mov.w	r8, #0
 8009642:	4631      	mov	r1, r6
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fbbf 	bl	8009dc8 <_Bfree>
 800964a:	2f00      	cmp	r7, #0
 800964c:	f43f aea4 	beq.w	8009398 <_dtoa_r+0x6a0>
 8009650:	f1b8 0f00 	cmp.w	r8, #0
 8009654:	d005      	beq.n	8009662 <_dtoa_r+0x96a>
 8009656:	45b8      	cmp	r8, r7
 8009658:	d003      	beq.n	8009662 <_dtoa_r+0x96a>
 800965a:	4641      	mov	r1, r8
 800965c:	4620      	mov	r0, r4
 800965e:	f000 fbb3 	bl	8009dc8 <_Bfree>
 8009662:	4639      	mov	r1, r7
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fbaf 	bl	8009dc8 <_Bfree>
 800966a:	e695      	b.n	8009398 <_dtoa_r+0x6a0>
 800966c:	2600      	movs	r6, #0
 800966e:	4637      	mov	r7, r6
 8009670:	e7e1      	b.n	8009636 <_dtoa_r+0x93e>
 8009672:	9700      	str	r7, [sp, #0]
 8009674:	4637      	mov	r7, r6
 8009676:	e599      	b.n	80091ac <_dtoa_r+0x4b4>
 8009678:	40240000 	.word	0x40240000
 800967c:	9b08      	ldr	r3, [sp, #32]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 80ca 	beq.w	8009818 <_dtoa_r+0xb20>
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	9302      	str	r3, [sp, #8]
 8009688:	2d00      	cmp	r5, #0
 800968a:	dd05      	ble.n	8009698 <_dtoa_r+0x9a0>
 800968c:	4639      	mov	r1, r7
 800968e:	462a      	mov	r2, r5
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fd6b 	bl	800a16c <__lshift>
 8009696:	4607      	mov	r7, r0
 8009698:	f1b8 0f00 	cmp.w	r8, #0
 800969c:	d05b      	beq.n	8009756 <_dtoa_r+0xa5e>
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fb51 	bl	8009d48 <_Balloc>
 80096a6:	4605      	mov	r5, r0
 80096a8:	b928      	cbnz	r0, 80096b6 <_dtoa_r+0x9be>
 80096aa:	4b87      	ldr	r3, [pc, #540]	; (80098c8 <_dtoa_r+0xbd0>)
 80096ac:	4602      	mov	r2, r0
 80096ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80096b2:	f7ff bb3b 	b.w	8008d2c <_dtoa_r+0x34>
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	3202      	adds	r2, #2
 80096ba:	0092      	lsls	r2, r2, #2
 80096bc:	f107 010c 	add.w	r1, r7, #12
 80096c0:	300c      	adds	r0, #12
 80096c2:	f000 fb33 	bl	8009d2c <memcpy>
 80096c6:	2201      	movs	r2, #1
 80096c8:	4629      	mov	r1, r5
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fd4e 	bl	800a16c <__lshift>
 80096d0:	9b01      	ldr	r3, [sp, #4]
 80096d2:	f103 0901 	add.w	r9, r3, #1
 80096d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80096da:	4413      	add	r3, r2
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	f00a 0301 	and.w	r3, sl, #1
 80096e2:	46b8      	mov	r8, r7
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	4607      	mov	r7, r0
 80096e8:	4631      	mov	r1, r6
 80096ea:	ee18 0a10 	vmov	r0, s16
 80096ee:	f7ff fa77 	bl	8008be0 <quorem>
 80096f2:	4641      	mov	r1, r8
 80096f4:	9002      	str	r0, [sp, #8]
 80096f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096fa:	ee18 0a10 	vmov	r0, s16
 80096fe:	f000 fda5 	bl	800a24c <__mcmp>
 8009702:	463a      	mov	r2, r7
 8009704:	9003      	str	r0, [sp, #12]
 8009706:	4631      	mov	r1, r6
 8009708:	4620      	mov	r0, r4
 800970a:	f000 fdbb 	bl	800a284 <__mdiff>
 800970e:	68c2      	ldr	r2, [r0, #12]
 8009710:	f109 3bff 	add.w	fp, r9, #4294967295
 8009714:	4605      	mov	r5, r0
 8009716:	bb02      	cbnz	r2, 800975a <_dtoa_r+0xa62>
 8009718:	4601      	mov	r1, r0
 800971a:	ee18 0a10 	vmov	r0, s16
 800971e:	f000 fd95 	bl	800a24c <__mcmp>
 8009722:	4602      	mov	r2, r0
 8009724:	4629      	mov	r1, r5
 8009726:	4620      	mov	r0, r4
 8009728:	9207      	str	r2, [sp, #28]
 800972a:	f000 fb4d 	bl	8009dc8 <_Bfree>
 800972e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009732:	ea43 0102 	orr.w	r1, r3, r2
 8009736:	9b04      	ldr	r3, [sp, #16]
 8009738:	430b      	orrs	r3, r1
 800973a:	464d      	mov	r5, r9
 800973c:	d10f      	bne.n	800975e <_dtoa_r+0xa66>
 800973e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009742:	d02a      	beq.n	800979a <_dtoa_r+0xaa2>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	dd02      	ble.n	8009750 <_dtoa_r+0xa58>
 800974a:	9b02      	ldr	r3, [sp, #8]
 800974c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009750:	f88b a000 	strb.w	sl, [fp]
 8009754:	e775      	b.n	8009642 <_dtoa_r+0x94a>
 8009756:	4638      	mov	r0, r7
 8009758:	e7ba      	b.n	80096d0 <_dtoa_r+0x9d8>
 800975a:	2201      	movs	r2, #1
 800975c:	e7e2      	b.n	8009724 <_dtoa_r+0xa2c>
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	db04      	blt.n	800976e <_dtoa_r+0xa76>
 8009764:	9906      	ldr	r1, [sp, #24]
 8009766:	430b      	orrs	r3, r1
 8009768:	9904      	ldr	r1, [sp, #16]
 800976a:	430b      	orrs	r3, r1
 800976c:	d122      	bne.n	80097b4 <_dtoa_r+0xabc>
 800976e:	2a00      	cmp	r2, #0
 8009770:	ddee      	ble.n	8009750 <_dtoa_r+0xa58>
 8009772:	ee18 1a10 	vmov	r1, s16
 8009776:	2201      	movs	r2, #1
 8009778:	4620      	mov	r0, r4
 800977a:	f000 fcf7 	bl	800a16c <__lshift>
 800977e:	4631      	mov	r1, r6
 8009780:	ee08 0a10 	vmov	s16, r0
 8009784:	f000 fd62 	bl	800a24c <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	dc03      	bgt.n	8009794 <_dtoa_r+0xa9c>
 800978c:	d1e0      	bne.n	8009750 <_dtoa_r+0xa58>
 800978e:	f01a 0f01 	tst.w	sl, #1
 8009792:	d0dd      	beq.n	8009750 <_dtoa_r+0xa58>
 8009794:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009798:	d1d7      	bne.n	800974a <_dtoa_r+0xa52>
 800979a:	2339      	movs	r3, #57	; 0x39
 800979c:	f88b 3000 	strb.w	r3, [fp]
 80097a0:	462b      	mov	r3, r5
 80097a2:	461d      	mov	r5, r3
 80097a4:	3b01      	subs	r3, #1
 80097a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097aa:	2a39      	cmp	r2, #57	; 0x39
 80097ac:	d071      	beq.n	8009892 <_dtoa_r+0xb9a>
 80097ae:	3201      	adds	r2, #1
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	e746      	b.n	8009642 <_dtoa_r+0x94a>
 80097b4:	2a00      	cmp	r2, #0
 80097b6:	dd07      	ble.n	80097c8 <_dtoa_r+0xad0>
 80097b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097bc:	d0ed      	beq.n	800979a <_dtoa_r+0xaa2>
 80097be:	f10a 0301 	add.w	r3, sl, #1
 80097c2:	f88b 3000 	strb.w	r3, [fp]
 80097c6:	e73c      	b.n	8009642 <_dtoa_r+0x94a>
 80097c8:	9b05      	ldr	r3, [sp, #20]
 80097ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80097ce:	4599      	cmp	r9, r3
 80097d0:	d047      	beq.n	8009862 <_dtoa_r+0xb6a>
 80097d2:	ee18 1a10 	vmov	r1, s16
 80097d6:	2300      	movs	r3, #0
 80097d8:	220a      	movs	r2, #10
 80097da:	4620      	mov	r0, r4
 80097dc:	f000 fb16 	bl	8009e0c <__multadd>
 80097e0:	45b8      	cmp	r8, r7
 80097e2:	ee08 0a10 	vmov	s16, r0
 80097e6:	f04f 0300 	mov.w	r3, #0
 80097ea:	f04f 020a 	mov.w	r2, #10
 80097ee:	4641      	mov	r1, r8
 80097f0:	4620      	mov	r0, r4
 80097f2:	d106      	bne.n	8009802 <_dtoa_r+0xb0a>
 80097f4:	f000 fb0a 	bl	8009e0c <__multadd>
 80097f8:	4680      	mov	r8, r0
 80097fa:	4607      	mov	r7, r0
 80097fc:	f109 0901 	add.w	r9, r9, #1
 8009800:	e772      	b.n	80096e8 <_dtoa_r+0x9f0>
 8009802:	f000 fb03 	bl	8009e0c <__multadd>
 8009806:	4639      	mov	r1, r7
 8009808:	4680      	mov	r8, r0
 800980a:	2300      	movs	r3, #0
 800980c:	220a      	movs	r2, #10
 800980e:	4620      	mov	r0, r4
 8009810:	f000 fafc 	bl	8009e0c <__multadd>
 8009814:	4607      	mov	r7, r0
 8009816:	e7f1      	b.n	80097fc <_dtoa_r+0xb04>
 8009818:	9b03      	ldr	r3, [sp, #12]
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	9d01      	ldr	r5, [sp, #4]
 800981e:	ee18 0a10 	vmov	r0, s16
 8009822:	4631      	mov	r1, r6
 8009824:	f7ff f9dc 	bl	8008be0 <quorem>
 8009828:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	f805 ab01 	strb.w	sl, [r5], #1
 8009832:	1aea      	subs	r2, r5, r3
 8009834:	9b02      	ldr	r3, [sp, #8]
 8009836:	4293      	cmp	r3, r2
 8009838:	dd09      	ble.n	800984e <_dtoa_r+0xb56>
 800983a:	ee18 1a10 	vmov	r1, s16
 800983e:	2300      	movs	r3, #0
 8009840:	220a      	movs	r2, #10
 8009842:	4620      	mov	r0, r4
 8009844:	f000 fae2 	bl	8009e0c <__multadd>
 8009848:	ee08 0a10 	vmov	s16, r0
 800984c:	e7e7      	b.n	800981e <_dtoa_r+0xb26>
 800984e:	9b02      	ldr	r3, [sp, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	bfc8      	it	gt
 8009854:	461d      	movgt	r5, r3
 8009856:	9b01      	ldr	r3, [sp, #4]
 8009858:	bfd8      	it	le
 800985a:	2501      	movle	r5, #1
 800985c:	441d      	add	r5, r3
 800985e:	f04f 0800 	mov.w	r8, #0
 8009862:	ee18 1a10 	vmov	r1, s16
 8009866:	2201      	movs	r2, #1
 8009868:	4620      	mov	r0, r4
 800986a:	f000 fc7f 	bl	800a16c <__lshift>
 800986e:	4631      	mov	r1, r6
 8009870:	ee08 0a10 	vmov	s16, r0
 8009874:	f000 fcea 	bl	800a24c <__mcmp>
 8009878:	2800      	cmp	r0, #0
 800987a:	dc91      	bgt.n	80097a0 <_dtoa_r+0xaa8>
 800987c:	d102      	bne.n	8009884 <_dtoa_r+0xb8c>
 800987e:	f01a 0f01 	tst.w	sl, #1
 8009882:	d18d      	bne.n	80097a0 <_dtoa_r+0xaa8>
 8009884:	462b      	mov	r3, r5
 8009886:	461d      	mov	r5, r3
 8009888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800988c:	2a30      	cmp	r2, #48	; 0x30
 800988e:	d0fa      	beq.n	8009886 <_dtoa_r+0xb8e>
 8009890:	e6d7      	b.n	8009642 <_dtoa_r+0x94a>
 8009892:	9a01      	ldr	r2, [sp, #4]
 8009894:	429a      	cmp	r2, r3
 8009896:	d184      	bne.n	80097a2 <_dtoa_r+0xaaa>
 8009898:	9b00      	ldr	r3, [sp, #0]
 800989a:	3301      	adds	r3, #1
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	2331      	movs	r3, #49	; 0x31
 80098a0:	7013      	strb	r3, [r2, #0]
 80098a2:	e6ce      	b.n	8009642 <_dtoa_r+0x94a>
 80098a4:	4b09      	ldr	r3, [pc, #36]	; (80098cc <_dtoa_r+0xbd4>)
 80098a6:	f7ff ba95 	b.w	8008dd4 <_dtoa_r+0xdc>
 80098aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f47f aa6e 	bne.w	8008d8e <_dtoa_r+0x96>
 80098b2:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <_dtoa_r+0xbd8>)
 80098b4:	f7ff ba8e 	b.w	8008dd4 <_dtoa_r+0xdc>
 80098b8:	9b02      	ldr	r3, [sp, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dcae      	bgt.n	800981c <_dtoa_r+0xb24>
 80098be:	9b06      	ldr	r3, [sp, #24]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	f73f aea8 	bgt.w	8009616 <_dtoa_r+0x91e>
 80098c6:	e7a9      	b.n	800981c <_dtoa_r+0xb24>
 80098c8:	0800aee7 	.word	0x0800aee7
 80098cc:	0800ae44 	.word	0x0800ae44
 80098d0:	0800ae68 	.word	0x0800ae68

080098d4 <__sflush_r>:
 80098d4:	898a      	ldrh	r2, [r1, #12]
 80098d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098da:	4605      	mov	r5, r0
 80098dc:	0710      	lsls	r0, r2, #28
 80098de:	460c      	mov	r4, r1
 80098e0:	d458      	bmi.n	8009994 <__sflush_r+0xc0>
 80098e2:	684b      	ldr	r3, [r1, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	dc05      	bgt.n	80098f4 <__sflush_r+0x20>
 80098e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dc02      	bgt.n	80098f4 <__sflush_r+0x20>
 80098ee:	2000      	movs	r0, #0
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098f6:	2e00      	cmp	r6, #0
 80098f8:	d0f9      	beq.n	80098ee <__sflush_r+0x1a>
 80098fa:	2300      	movs	r3, #0
 80098fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009900:	682f      	ldr	r7, [r5, #0]
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	d032      	beq.n	800996c <__sflush_r+0x98>
 8009906:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	075a      	lsls	r2, r3, #29
 800990c:	d505      	bpl.n	800991a <__sflush_r+0x46>
 800990e:	6863      	ldr	r3, [r4, #4]
 8009910:	1ac0      	subs	r0, r0, r3
 8009912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009914:	b10b      	cbz	r3, 800991a <__sflush_r+0x46>
 8009916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009918:	1ac0      	subs	r0, r0, r3
 800991a:	2300      	movs	r3, #0
 800991c:	4602      	mov	r2, r0
 800991e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009920:	6a21      	ldr	r1, [r4, #32]
 8009922:	4628      	mov	r0, r5
 8009924:	47b0      	blx	r6
 8009926:	1c43      	adds	r3, r0, #1
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	d106      	bne.n	800993a <__sflush_r+0x66>
 800992c:	6829      	ldr	r1, [r5, #0]
 800992e:	291d      	cmp	r1, #29
 8009930:	d82c      	bhi.n	800998c <__sflush_r+0xb8>
 8009932:	4a2a      	ldr	r2, [pc, #168]	; (80099dc <__sflush_r+0x108>)
 8009934:	40ca      	lsrs	r2, r1
 8009936:	07d6      	lsls	r6, r2, #31
 8009938:	d528      	bpl.n	800998c <__sflush_r+0xb8>
 800993a:	2200      	movs	r2, #0
 800993c:	6062      	str	r2, [r4, #4]
 800993e:	04d9      	lsls	r1, r3, #19
 8009940:	6922      	ldr	r2, [r4, #16]
 8009942:	6022      	str	r2, [r4, #0]
 8009944:	d504      	bpl.n	8009950 <__sflush_r+0x7c>
 8009946:	1c42      	adds	r2, r0, #1
 8009948:	d101      	bne.n	800994e <__sflush_r+0x7a>
 800994a:	682b      	ldr	r3, [r5, #0]
 800994c:	b903      	cbnz	r3, 8009950 <__sflush_r+0x7c>
 800994e:	6560      	str	r0, [r4, #84]	; 0x54
 8009950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009952:	602f      	str	r7, [r5, #0]
 8009954:	2900      	cmp	r1, #0
 8009956:	d0ca      	beq.n	80098ee <__sflush_r+0x1a>
 8009958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800995c:	4299      	cmp	r1, r3
 800995e:	d002      	beq.n	8009966 <__sflush_r+0x92>
 8009960:	4628      	mov	r0, r5
 8009962:	f000 fd8b 	bl	800a47c <_free_r>
 8009966:	2000      	movs	r0, #0
 8009968:	6360      	str	r0, [r4, #52]	; 0x34
 800996a:	e7c1      	b.n	80098f0 <__sflush_r+0x1c>
 800996c:	6a21      	ldr	r1, [r4, #32]
 800996e:	2301      	movs	r3, #1
 8009970:	4628      	mov	r0, r5
 8009972:	47b0      	blx	r6
 8009974:	1c41      	adds	r1, r0, #1
 8009976:	d1c7      	bne.n	8009908 <__sflush_r+0x34>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c4      	beq.n	8009908 <__sflush_r+0x34>
 800997e:	2b1d      	cmp	r3, #29
 8009980:	d001      	beq.n	8009986 <__sflush_r+0xb2>
 8009982:	2b16      	cmp	r3, #22
 8009984:	d101      	bne.n	800998a <__sflush_r+0xb6>
 8009986:	602f      	str	r7, [r5, #0]
 8009988:	e7b1      	b.n	80098ee <__sflush_r+0x1a>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	e7ad      	b.n	80098f0 <__sflush_r+0x1c>
 8009994:	690f      	ldr	r7, [r1, #16]
 8009996:	2f00      	cmp	r7, #0
 8009998:	d0a9      	beq.n	80098ee <__sflush_r+0x1a>
 800999a:	0793      	lsls	r3, r2, #30
 800999c:	680e      	ldr	r6, [r1, #0]
 800999e:	bf08      	it	eq
 80099a0:	694b      	ldreq	r3, [r1, #20]
 80099a2:	600f      	str	r7, [r1, #0]
 80099a4:	bf18      	it	ne
 80099a6:	2300      	movne	r3, #0
 80099a8:	eba6 0807 	sub.w	r8, r6, r7
 80099ac:	608b      	str	r3, [r1, #8]
 80099ae:	f1b8 0f00 	cmp.w	r8, #0
 80099b2:	dd9c      	ble.n	80098ee <__sflush_r+0x1a>
 80099b4:	6a21      	ldr	r1, [r4, #32]
 80099b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099b8:	4643      	mov	r3, r8
 80099ba:	463a      	mov	r2, r7
 80099bc:	4628      	mov	r0, r5
 80099be:	47b0      	blx	r6
 80099c0:	2800      	cmp	r0, #0
 80099c2:	dc06      	bgt.n	80099d2 <__sflush_r+0xfe>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	e78e      	b.n	80098f0 <__sflush_r+0x1c>
 80099d2:	4407      	add	r7, r0
 80099d4:	eba8 0800 	sub.w	r8, r8, r0
 80099d8:	e7e9      	b.n	80099ae <__sflush_r+0xda>
 80099da:	bf00      	nop
 80099dc:	20400001 	.word	0x20400001

080099e0 <_fflush_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	690b      	ldr	r3, [r1, #16]
 80099e4:	4605      	mov	r5, r0
 80099e6:	460c      	mov	r4, r1
 80099e8:	b913      	cbnz	r3, 80099f0 <_fflush_r+0x10>
 80099ea:	2500      	movs	r5, #0
 80099ec:	4628      	mov	r0, r5
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	b118      	cbz	r0, 80099fa <_fflush_r+0x1a>
 80099f2:	6983      	ldr	r3, [r0, #24]
 80099f4:	b90b      	cbnz	r3, 80099fa <_fflush_r+0x1a>
 80099f6:	f000 f887 	bl	8009b08 <__sinit>
 80099fa:	4b14      	ldr	r3, [pc, #80]	; (8009a4c <_fflush_r+0x6c>)
 80099fc:	429c      	cmp	r4, r3
 80099fe:	d11b      	bne.n	8009a38 <_fflush_r+0x58>
 8009a00:	686c      	ldr	r4, [r5, #4]
 8009a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0ef      	beq.n	80099ea <_fflush_r+0xa>
 8009a0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a0c:	07d0      	lsls	r0, r2, #31
 8009a0e:	d404      	bmi.n	8009a1a <_fflush_r+0x3a>
 8009a10:	0599      	lsls	r1, r3, #22
 8009a12:	d402      	bmi.n	8009a1a <_fflush_r+0x3a>
 8009a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a16:	f000 f91a 	bl	8009c4e <__retarget_lock_acquire_recursive>
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	f7ff ff59 	bl	80098d4 <__sflush_r>
 8009a22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a24:	07da      	lsls	r2, r3, #31
 8009a26:	4605      	mov	r5, r0
 8009a28:	d4e0      	bmi.n	80099ec <_fflush_r+0xc>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	059b      	lsls	r3, r3, #22
 8009a2e:	d4dd      	bmi.n	80099ec <_fflush_r+0xc>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f000 f90d 	bl	8009c50 <__retarget_lock_release_recursive>
 8009a36:	e7d9      	b.n	80099ec <_fflush_r+0xc>
 8009a38:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <_fflush_r+0x70>)
 8009a3a:	429c      	cmp	r4, r3
 8009a3c:	d101      	bne.n	8009a42 <_fflush_r+0x62>
 8009a3e:	68ac      	ldr	r4, [r5, #8]
 8009a40:	e7df      	b.n	8009a02 <_fflush_r+0x22>
 8009a42:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <_fflush_r+0x74>)
 8009a44:	429c      	cmp	r4, r3
 8009a46:	bf08      	it	eq
 8009a48:	68ec      	ldreq	r4, [r5, #12]
 8009a4a:	e7da      	b.n	8009a02 <_fflush_r+0x22>
 8009a4c:	0800af18 	.word	0x0800af18
 8009a50:	0800af38 	.word	0x0800af38
 8009a54:	0800aef8 	.word	0x0800aef8

08009a58 <std>:
 8009a58:	2300      	movs	r3, #0
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a66:	6083      	str	r3, [r0, #8]
 8009a68:	8181      	strh	r1, [r0, #12]
 8009a6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a6c:	81c2      	strh	r2, [r0, #14]
 8009a6e:	6183      	str	r3, [r0, #24]
 8009a70:	4619      	mov	r1, r3
 8009a72:	2208      	movs	r2, #8
 8009a74:	305c      	adds	r0, #92	; 0x5c
 8009a76:	f7fe faf3 	bl	8008060 <memset>
 8009a7a:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <std+0x38>)
 8009a7c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a7e:	4b05      	ldr	r3, [pc, #20]	; (8009a94 <std+0x3c>)
 8009a80:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a82:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <std+0x40>)
 8009a84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <std+0x44>)
 8009a88:	6224      	str	r4, [r4, #32]
 8009a8a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a8c:	bd10      	pop	{r4, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800a911 	.word	0x0800a911
 8009a94:	0800a933 	.word	0x0800a933
 8009a98:	0800a96b 	.word	0x0800a96b
 8009a9c:	0800a98f 	.word	0x0800a98f

08009aa0 <_cleanup_r>:
 8009aa0:	4901      	ldr	r1, [pc, #4]	; (8009aa8 <_cleanup_r+0x8>)
 8009aa2:	f000 b8af 	b.w	8009c04 <_fwalk_reent>
 8009aa6:	bf00      	nop
 8009aa8:	080099e1 	.word	0x080099e1

08009aac <__sfmoreglue>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	2268      	movs	r2, #104	; 0x68
 8009ab0:	1e4d      	subs	r5, r1, #1
 8009ab2:	4355      	muls	r5, r2
 8009ab4:	460e      	mov	r6, r1
 8009ab6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009aba:	f000 fd4b 	bl	800a554 <_malloc_r>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	b140      	cbz	r0, 8009ad4 <__sfmoreglue+0x28>
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ac8:	300c      	adds	r0, #12
 8009aca:	60a0      	str	r0, [r4, #8]
 8009acc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ad0:	f7fe fac6 	bl	8008060 <memset>
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	bd70      	pop	{r4, r5, r6, pc}

08009ad8 <__sfp_lock_acquire>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	; (8009ae0 <__sfp_lock_acquire+0x8>)
 8009ada:	f000 b8b8 	b.w	8009c4e <__retarget_lock_acquire_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20000789 	.word	0x20000789

08009ae4 <__sfp_lock_release>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	; (8009aec <__sfp_lock_release+0x8>)
 8009ae6:	f000 b8b3 	b.w	8009c50 <__retarget_lock_release_recursive>
 8009aea:	bf00      	nop
 8009aec:	20000789 	.word	0x20000789

08009af0 <__sinit_lock_acquire>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__sinit_lock_acquire+0x8>)
 8009af2:	f000 b8ac 	b.w	8009c4e <__retarget_lock_acquire_recursive>
 8009af6:	bf00      	nop
 8009af8:	2000078a 	.word	0x2000078a

08009afc <__sinit_lock_release>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__sinit_lock_release+0x8>)
 8009afe:	f000 b8a7 	b.w	8009c50 <__retarget_lock_release_recursive>
 8009b02:	bf00      	nop
 8009b04:	2000078a 	.word	0x2000078a

08009b08 <__sinit>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	f7ff fff0 	bl	8009af0 <__sinit_lock_acquire>
 8009b10:	69a3      	ldr	r3, [r4, #24]
 8009b12:	b11b      	cbz	r3, 8009b1c <__sinit+0x14>
 8009b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b18:	f7ff bff0 	b.w	8009afc <__sinit_lock_release>
 8009b1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b20:	6523      	str	r3, [r4, #80]	; 0x50
 8009b22:	4b13      	ldr	r3, [pc, #76]	; (8009b70 <__sinit+0x68>)
 8009b24:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <__sinit+0x6c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	bf04      	itt	eq
 8009b2e:	2301      	moveq	r3, #1
 8009b30:	61a3      	streq	r3, [r4, #24]
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f820 	bl	8009b78 <__sfp>
 8009b38:	6060      	str	r0, [r4, #4]
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 f81c 	bl	8009b78 <__sfp>
 8009b40:	60a0      	str	r0, [r4, #8]
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f818 	bl	8009b78 <__sfp>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	60e0      	str	r0, [r4, #12]
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	6860      	ldr	r0, [r4, #4]
 8009b50:	f7ff ff82 	bl	8009a58 <std>
 8009b54:	68a0      	ldr	r0, [r4, #8]
 8009b56:	2201      	movs	r2, #1
 8009b58:	2109      	movs	r1, #9
 8009b5a:	f7ff ff7d 	bl	8009a58 <std>
 8009b5e:	68e0      	ldr	r0, [r4, #12]
 8009b60:	2202      	movs	r2, #2
 8009b62:	2112      	movs	r1, #18
 8009b64:	f7ff ff78 	bl	8009a58 <std>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	61a3      	str	r3, [r4, #24]
 8009b6c:	e7d2      	b.n	8009b14 <__sinit+0xc>
 8009b6e:	bf00      	nop
 8009b70:	0800ae30 	.word	0x0800ae30
 8009b74:	08009aa1 	.word	0x08009aa1

08009b78 <__sfp>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	4607      	mov	r7, r0
 8009b7c:	f7ff ffac 	bl	8009ad8 <__sfp_lock_acquire>
 8009b80:	4b1e      	ldr	r3, [pc, #120]	; (8009bfc <__sfp+0x84>)
 8009b82:	681e      	ldr	r6, [r3, #0]
 8009b84:	69b3      	ldr	r3, [r6, #24]
 8009b86:	b913      	cbnz	r3, 8009b8e <__sfp+0x16>
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f7ff ffbd 	bl	8009b08 <__sinit>
 8009b8e:	3648      	adds	r6, #72	; 0x48
 8009b90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b94:	3b01      	subs	r3, #1
 8009b96:	d503      	bpl.n	8009ba0 <__sfp+0x28>
 8009b98:	6833      	ldr	r3, [r6, #0]
 8009b9a:	b30b      	cbz	r3, 8009be0 <__sfp+0x68>
 8009b9c:	6836      	ldr	r6, [r6, #0]
 8009b9e:	e7f7      	b.n	8009b90 <__sfp+0x18>
 8009ba0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ba4:	b9d5      	cbnz	r5, 8009bdc <__sfp+0x64>
 8009ba6:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <__sfp+0x88>)
 8009ba8:	60e3      	str	r3, [r4, #12]
 8009baa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bae:	6665      	str	r5, [r4, #100]	; 0x64
 8009bb0:	f000 f84c 	bl	8009c4c <__retarget_lock_init_recursive>
 8009bb4:	f7ff ff96 	bl	8009ae4 <__sfp_lock_release>
 8009bb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bc0:	6025      	str	r5, [r4, #0]
 8009bc2:	61a5      	str	r5, [r4, #24]
 8009bc4:	2208      	movs	r2, #8
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bcc:	f7fe fa48 	bl	8008060 <memset>
 8009bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bd8:	4620      	mov	r0, r4
 8009bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bdc:	3468      	adds	r4, #104	; 0x68
 8009bde:	e7d9      	b.n	8009b94 <__sfp+0x1c>
 8009be0:	2104      	movs	r1, #4
 8009be2:	4638      	mov	r0, r7
 8009be4:	f7ff ff62 	bl	8009aac <__sfmoreglue>
 8009be8:	4604      	mov	r4, r0
 8009bea:	6030      	str	r0, [r6, #0]
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d1d5      	bne.n	8009b9c <__sfp+0x24>
 8009bf0:	f7ff ff78 	bl	8009ae4 <__sfp_lock_release>
 8009bf4:	230c      	movs	r3, #12
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	e7ee      	b.n	8009bd8 <__sfp+0x60>
 8009bfa:	bf00      	nop
 8009bfc:	0800ae30 	.word	0x0800ae30
 8009c00:	ffff0001 	.word	0xffff0001

08009c04 <_fwalk_reent>:
 8009c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c08:	4606      	mov	r6, r0
 8009c0a:	4688      	mov	r8, r1
 8009c0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c10:	2700      	movs	r7, #0
 8009c12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c16:	f1b9 0901 	subs.w	r9, r9, #1
 8009c1a:	d505      	bpl.n	8009c28 <_fwalk_reent+0x24>
 8009c1c:	6824      	ldr	r4, [r4, #0]
 8009c1e:	2c00      	cmp	r4, #0
 8009c20:	d1f7      	bne.n	8009c12 <_fwalk_reent+0xe>
 8009c22:	4638      	mov	r0, r7
 8009c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c28:	89ab      	ldrh	r3, [r5, #12]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d907      	bls.n	8009c3e <_fwalk_reent+0x3a>
 8009c2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c32:	3301      	adds	r3, #1
 8009c34:	d003      	beq.n	8009c3e <_fwalk_reent+0x3a>
 8009c36:	4629      	mov	r1, r5
 8009c38:	4630      	mov	r0, r6
 8009c3a:	47c0      	blx	r8
 8009c3c:	4307      	orrs	r7, r0
 8009c3e:	3568      	adds	r5, #104	; 0x68
 8009c40:	e7e9      	b.n	8009c16 <_fwalk_reent+0x12>
	...

08009c44 <_localeconv_r>:
 8009c44:	4800      	ldr	r0, [pc, #0]	; (8009c48 <_localeconv_r+0x4>)
 8009c46:	4770      	bx	lr
 8009c48:	20000160 	.word	0x20000160

08009c4c <__retarget_lock_init_recursive>:
 8009c4c:	4770      	bx	lr

08009c4e <__retarget_lock_acquire_recursive>:
 8009c4e:	4770      	bx	lr

08009c50 <__retarget_lock_release_recursive>:
 8009c50:	4770      	bx	lr

08009c52 <__swhatbuf_r>:
 8009c52:	b570      	push	{r4, r5, r6, lr}
 8009c54:	460e      	mov	r6, r1
 8009c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c5a:	2900      	cmp	r1, #0
 8009c5c:	b096      	sub	sp, #88	; 0x58
 8009c5e:	4614      	mov	r4, r2
 8009c60:	461d      	mov	r5, r3
 8009c62:	da08      	bge.n	8009c76 <__swhatbuf_r+0x24>
 8009c64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	602a      	str	r2, [r5, #0]
 8009c6c:	061a      	lsls	r2, r3, #24
 8009c6e:	d410      	bmi.n	8009c92 <__swhatbuf_r+0x40>
 8009c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c74:	e00e      	b.n	8009c94 <__swhatbuf_r+0x42>
 8009c76:	466a      	mov	r2, sp
 8009c78:	f000 fee0 	bl	800aa3c <_fstat_r>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	dbf1      	blt.n	8009c64 <__swhatbuf_r+0x12>
 8009c80:	9a01      	ldr	r2, [sp, #4]
 8009c82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c8a:	425a      	negs	r2, r3
 8009c8c:	415a      	adcs	r2, r3
 8009c8e:	602a      	str	r2, [r5, #0]
 8009c90:	e7ee      	b.n	8009c70 <__swhatbuf_r+0x1e>
 8009c92:	2340      	movs	r3, #64	; 0x40
 8009c94:	2000      	movs	r0, #0
 8009c96:	6023      	str	r3, [r4, #0]
 8009c98:	b016      	add	sp, #88	; 0x58
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}

08009c9c <__smakebuf_r>:
 8009c9c:	898b      	ldrh	r3, [r1, #12]
 8009c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ca0:	079d      	lsls	r5, r3, #30
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	d507      	bpl.n	8009cb8 <__smakebuf_r+0x1c>
 8009ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	6123      	str	r3, [r4, #16]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	6163      	str	r3, [r4, #20]
 8009cb4:	b002      	add	sp, #8
 8009cb6:	bd70      	pop	{r4, r5, r6, pc}
 8009cb8:	ab01      	add	r3, sp, #4
 8009cba:	466a      	mov	r2, sp
 8009cbc:	f7ff ffc9 	bl	8009c52 <__swhatbuf_r>
 8009cc0:	9900      	ldr	r1, [sp, #0]
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	f000 fc45 	bl	800a554 <_malloc_r>
 8009cca:	b948      	cbnz	r0, 8009ce0 <__smakebuf_r+0x44>
 8009ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd0:	059a      	lsls	r2, r3, #22
 8009cd2:	d4ef      	bmi.n	8009cb4 <__smakebuf_r+0x18>
 8009cd4:	f023 0303 	bic.w	r3, r3, #3
 8009cd8:	f043 0302 	orr.w	r3, r3, #2
 8009cdc:	81a3      	strh	r3, [r4, #12]
 8009cde:	e7e3      	b.n	8009ca8 <__smakebuf_r+0xc>
 8009ce0:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <__smakebuf_r+0x7c>)
 8009ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	6020      	str	r0, [r4, #0]
 8009ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	9b00      	ldr	r3, [sp, #0]
 8009cf0:	6163      	str	r3, [r4, #20]
 8009cf2:	9b01      	ldr	r3, [sp, #4]
 8009cf4:	6120      	str	r0, [r4, #16]
 8009cf6:	b15b      	cbz	r3, 8009d10 <__smakebuf_r+0x74>
 8009cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f000 feaf 	bl	800aa60 <_isatty_r>
 8009d02:	b128      	cbz	r0, 8009d10 <__smakebuf_r+0x74>
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	f023 0303 	bic.w	r3, r3, #3
 8009d0a:	f043 0301 	orr.w	r3, r3, #1
 8009d0e:	81a3      	strh	r3, [r4, #12]
 8009d10:	89a0      	ldrh	r0, [r4, #12]
 8009d12:	4305      	orrs	r5, r0
 8009d14:	81a5      	strh	r5, [r4, #12]
 8009d16:	e7cd      	b.n	8009cb4 <__smakebuf_r+0x18>
 8009d18:	08009aa1 	.word	0x08009aa1

08009d1c <malloc>:
 8009d1c:	4b02      	ldr	r3, [pc, #8]	; (8009d28 <malloc+0xc>)
 8009d1e:	4601      	mov	r1, r0
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	f000 bc17 	b.w	800a554 <_malloc_r>
 8009d26:	bf00      	nop
 8009d28:	2000000c 	.word	0x2000000c

08009d2c <memcpy>:
 8009d2c:	440a      	add	r2, r1
 8009d2e:	4291      	cmp	r1, r2
 8009d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d34:	d100      	bne.n	8009d38 <memcpy+0xc>
 8009d36:	4770      	bx	lr
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d42:	4291      	cmp	r1, r2
 8009d44:	d1f9      	bne.n	8009d3a <memcpy+0xe>
 8009d46:	bd10      	pop	{r4, pc}

08009d48 <_Balloc>:
 8009d48:	b570      	push	{r4, r5, r6, lr}
 8009d4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	460d      	mov	r5, r1
 8009d50:	b976      	cbnz	r6, 8009d70 <_Balloc+0x28>
 8009d52:	2010      	movs	r0, #16
 8009d54:	f7ff ffe2 	bl	8009d1c <malloc>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	6260      	str	r0, [r4, #36]	; 0x24
 8009d5c:	b920      	cbnz	r0, 8009d68 <_Balloc+0x20>
 8009d5e:	4b18      	ldr	r3, [pc, #96]	; (8009dc0 <_Balloc+0x78>)
 8009d60:	4818      	ldr	r0, [pc, #96]	; (8009dc4 <_Balloc+0x7c>)
 8009d62:	2166      	movs	r1, #102	; 0x66
 8009d64:	f000 fe2a 	bl	800a9bc <__assert_func>
 8009d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d6c:	6006      	str	r6, [r0, #0]
 8009d6e:	60c6      	str	r6, [r0, #12]
 8009d70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d72:	68f3      	ldr	r3, [r6, #12]
 8009d74:	b183      	cbz	r3, 8009d98 <_Balloc+0x50>
 8009d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d78:	68db      	ldr	r3, [r3, #12]
 8009d7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d7e:	b9b8      	cbnz	r0, 8009db0 <_Balloc+0x68>
 8009d80:	2101      	movs	r1, #1
 8009d82:	fa01 f605 	lsl.w	r6, r1, r5
 8009d86:	1d72      	adds	r2, r6, #5
 8009d88:	0092      	lsls	r2, r2, #2
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f000 fb60 	bl	800a450 <_calloc_r>
 8009d90:	b160      	cbz	r0, 8009dac <_Balloc+0x64>
 8009d92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d96:	e00e      	b.n	8009db6 <_Balloc+0x6e>
 8009d98:	2221      	movs	r2, #33	; 0x21
 8009d9a:	2104      	movs	r1, #4
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fb57 	bl	800a450 <_calloc_r>
 8009da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da4:	60f0      	str	r0, [r6, #12]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1e4      	bne.n	8009d76 <_Balloc+0x2e>
 8009dac:	2000      	movs	r0, #0
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	6802      	ldr	r2, [r0, #0]
 8009db2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009db6:	2300      	movs	r3, #0
 8009db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dbc:	e7f7      	b.n	8009dae <_Balloc+0x66>
 8009dbe:	bf00      	nop
 8009dc0:	0800ae75 	.word	0x0800ae75
 8009dc4:	0800af58 	.word	0x0800af58

08009dc8 <_Bfree>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009dcc:	4605      	mov	r5, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	b976      	cbnz	r6, 8009df0 <_Bfree+0x28>
 8009dd2:	2010      	movs	r0, #16
 8009dd4:	f7ff ffa2 	bl	8009d1c <malloc>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	6268      	str	r0, [r5, #36]	; 0x24
 8009ddc:	b920      	cbnz	r0, 8009de8 <_Bfree+0x20>
 8009dde:	4b09      	ldr	r3, [pc, #36]	; (8009e04 <_Bfree+0x3c>)
 8009de0:	4809      	ldr	r0, [pc, #36]	; (8009e08 <_Bfree+0x40>)
 8009de2:	218a      	movs	r1, #138	; 0x8a
 8009de4:	f000 fdea 	bl	800a9bc <__assert_func>
 8009de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dec:	6006      	str	r6, [r0, #0]
 8009dee:	60c6      	str	r6, [r0, #12]
 8009df0:	b13c      	cbz	r4, 8009e02 <_Bfree+0x3a>
 8009df2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009df4:	6862      	ldr	r2, [r4, #4]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dfc:	6021      	str	r1, [r4, #0]
 8009dfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e02:	bd70      	pop	{r4, r5, r6, pc}
 8009e04:	0800ae75 	.word	0x0800ae75
 8009e08:	0800af58 	.word	0x0800af58

08009e0c <__multadd>:
 8009e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e10:	690d      	ldr	r5, [r1, #16]
 8009e12:	4607      	mov	r7, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	461e      	mov	r6, r3
 8009e18:	f101 0c14 	add.w	ip, r1, #20
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	f8dc 3000 	ldr.w	r3, [ip]
 8009e22:	b299      	uxth	r1, r3
 8009e24:	fb02 6101 	mla	r1, r2, r1, r6
 8009e28:	0c1e      	lsrs	r6, r3, #16
 8009e2a:	0c0b      	lsrs	r3, r1, #16
 8009e2c:	fb02 3306 	mla	r3, r2, r6, r3
 8009e30:	b289      	uxth	r1, r1
 8009e32:	3001      	adds	r0, #1
 8009e34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e38:	4285      	cmp	r5, r0
 8009e3a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e42:	dcec      	bgt.n	8009e1e <__multadd+0x12>
 8009e44:	b30e      	cbz	r6, 8009e8a <__multadd+0x7e>
 8009e46:	68a3      	ldr	r3, [r4, #8]
 8009e48:	42ab      	cmp	r3, r5
 8009e4a:	dc19      	bgt.n	8009e80 <__multadd+0x74>
 8009e4c:	6861      	ldr	r1, [r4, #4]
 8009e4e:	4638      	mov	r0, r7
 8009e50:	3101      	adds	r1, #1
 8009e52:	f7ff ff79 	bl	8009d48 <_Balloc>
 8009e56:	4680      	mov	r8, r0
 8009e58:	b928      	cbnz	r0, 8009e66 <__multadd+0x5a>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <__multadd+0x84>)
 8009e5e:	480d      	ldr	r0, [pc, #52]	; (8009e94 <__multadd+0x88>)
 8009e60:	21b5      	movs	r1, #181	; 0xb5
 8009e62:	f000 fdab 	bl	800a9bc <__assert_func>
 8009e66:	6922      	ldr	r2, [r4, #16]
 8009e68:	3202      	adds	r2, #2
 8009e6a:	f104 010c 	add.w	r1, r4, #12
 8009e6e:	0092      	lsls	r2, r2, #2
 8009e70:	300c      	adds	r0, #12
 8009e72:	f7ff ff5b 	bl	8009d2c <memcpy>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7ff ffa5 	bl	8009dc8 <_Bfree>
 8009e7e:	4644      	mov	r4, r8
 8009e80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e84:	3501      	adds	r5, #1
 8009e86:	615e      	str	r6, [r3, #20]
 8009e88:	6125      	str	r5, [r4, #16]
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	0800aee7 	.word	0x0800aee7
 8009e94:	0800af58 	.word	0x0800af58

08009e98 <__hi0bits>:
 8009e98:	0c03      	lsrs	r3, r0, #16
 8009e9a:	041b      	lsls	r3, r3, #16
 8009e9c:	b9d3      	cbnz	r3, 8009ed4 <__hi0bits+0x3c>
 8009e9e:	0400      	lsls	r0, r0, #16
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ea6:	bf04      	itt	eq
 8009ea8:	0200      	lsleq	r0, r0, #8
 8009eaa:	3308      	addeq	r3, #8
 8009eac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009eb0:	bf04      	itt	eq
 8009eb2:	0100      	lsleq	r0, r0, #4
 8009eb4:	3304      	addeq	r3, #4
 8009eb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009eba:	bf04      	itt	eq
 8009ebc:	0080      	lsleq	r0, r0, #2
 8009ebe:	3302      	addeq	r3, #2
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	db05      	blt.n	8009ed0 <__hi0bits+0x38>
 8009ec4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ec8:	f103 0301 	add.w	r3, r3, #1
 8009ecc:	bf08      	it	eq
 8009ece:	2320      	moveq	r3, #32
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	4770      	bx	lr
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e7e4      	b.n	8009ea2 <__hi0bits+0xa>

08009ed8 <__lo0bits>:
 8009ed8:	6803      	ldr	r3, [r0, #0]
 8009eda:	f013 0207 	ands.w	r2, r3, #7
 8009ede:	4601      	mov	r1, r0
 8009ee0:	d00b      	beq.n	8009efa <__lo0bits+0x22>
 8009ee2:	07da      	lsls	r2, r3, #31
 8009ee4:	d423      	bmi.n	8009f2e <__lo0bits+0x56>
 8009ee6:	0798      	lsls	r0, r3, #30
 8009ee8:	bf49      	itett	mi
 8009eea:	085b      	lsrmi	r3, r3, #1
 8009eec:	089b      	lsrpl	r3, r3, #2
 8009eee:	2001      	movmi	r0, #1
 8009ef0:	600b      	strmi	r3, [r1, #0]
 8009ef2:	bf5c      	itt	pl
 8009ef4:	600b      	strpl	r3, [r1, #0]
 8009ef6:	2002      	movpl	r0, #2
 8009ef8:	4770      	bx	lr
 8009efa:	b298      	uxth	r0, r3
 8009efc:	b9a8      	cbnz	r0, 8009f2a <__lo0bits+0x52>
 8009efe:	0c1b      	lsrs	r3, r3, #16
 8009f00:	2010      	movs	r0, #16
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	b90a      	cbnz	r2, 8009f0a <__lo0bits+0x32>
 8009f06:	3008      	adds	r0, #8
 8009f08:	0a1b      	lsrs	r3, r3, #8
 8009f0a:	071a      	lsls	r2, r3, #28
 8009f0c:	bf04      	itt	eq
 8009f0e:	091b      	lsreq	r3, r3, #4
 8009f10:	3004      	addeq	r0, #4
 8009f12:	079a      	lsls	r2, r3, #30
 8009f14:	bf04      	itt	eq
 8009f16:	089b      	lsreq	r3, r3, #2
 8009f18:	3002      	addeq	r0, #2
 8009f1a:	07da      	lsls	r2, r3, #31
 8009f1c:	d403      	bmi.n	8009f26 <__lo0bits+0x4e>
 8009f1e:	085b      	lsrs	r3, r3, #1
 8009f20:	f100 0001 	add.w	r0, r0, #1
 8009f24:	d005      	beq.n	8009f32 <__lo0bits+0x5a>
 8009f26:	600b      	str	r3, [r1, #0]
 8009f28:	4770      	bx	lr
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	e7e9      	b.n	8009f02 <__lo0bits+0x2a>
 8009f2e:	2000      	movs	r0, #0
 8009f30:	4770      	bx	lr
 8009f32:	2020      	movs	r0, #32
 8009f34:	4770      	bx	lr
	...

08009f38 <__i2b>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	f7ff ff03 	bl	8009d48 <_Balloc>
 8009f42:	4602      	mov	r2, r0
 8009f44:	b928      	cbnz	r0, 8009f52 <__i2b+0x1a>
 8009f46:	4b05      	ldr	r3, [pc, #20]	; (8009f5c <__i2b+0x24>)
 8009f48:	4805      	ldr	r0, [pc, #20]	; (8009f60 <__i2b+0x28>)
 8009f4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f4e:	f000 fd35 	bl	800a9bc <__assert_func>
 8009f52:	2301      	movs	r3, #1
 8009f54:	6144      	str	r4, [r0, #20]
 8009f56:	6103      	str	r3, [r0, #16]
 8009f58:	bd10      	pop	{r4, pc}
 8009f5a:	bf00      	nop
 8009f5c:	0800aee7 	.word	0x0800aee7
 8009f60:	0800af58 	.word	0x0800af58

08009f64 <__multiply>:
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	4691      	mov	r9, r2
 8009f6a:	690a      	ldr	r2, [r1, #16]
 8009f6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	bfb8      	it	lt
 8009f74:	460b      	movlt	r3, r1
 8009f76:	460c      	mov	r4, r1
 8009f78:	bfbc      	itt	lt
 8009f7a:	464c      	movlt	r4, r9
 8009f7c:	4699      	movlt	r9, r3
 8009f7e:	6927      	ldr	r7, [r4, #16]
 8009f80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f84:	68a3      	ldr	r3, [r4, #8]
 8009f86:	6861      	ldr	r1, [r4, #4]
 8009f88:	eb07 060a 	add.w	r6, r7, sl
 8009f8c:	42b3      	cmp	r3, r6
 8009f8e:	b085      	sub	sp, #20
 8009f90:	bfb8      	it	lt
 8009f92:	3101      	addlt	r1, #1
 8009f94:	f7ff fed8 	bl	8009d48 <_Balloc>
 8009f98:	b930      	cbnz	r0, 8009fa8 <__multiply+0x44>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	4b44      	ldr	r3, [pc, #272]	; (800a0b0 <__multiply+0x14c>)
 8009f9e:	4845      	ldr	r0, [pc, #276]	; (800a0b4 <__multiply+0x150>)
 8009fa0:	f240 115d 	movw	r1, #349	; 0x15d
 8009fa4:	f000 fd0a 	bl	800a9bc <__assert_func>
 8009fa8:	f100 0514 	add.w	r5, r0, #20
 8009fac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fb0:	462b      	mov	r3, r5
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4543      	cmp	r3, r8
 8009fb6:	d321      	bcc.n	8009ffc <__multiply+0x98>
 8009fb8:	f104 0314 	add.w	r3, r4, #20
 8009fbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fc0:	f109 0314 	add.w	r3, r9, #20
 8009fc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fc8:	9202      	str	r2, [sp, #8]
 8009fca:	1b3a      	subs	r2, r7, r4
 8009fcc:	3a15      	subs	r2, #21
 8009fce:	f022 0203 	bic.w	r2, r2, #3
 8009fd2:	3204      	adds	r2, #4
 8009fd4:	f104 0115 	add.w	r1, r4, #21
 8009fd8:	428f      	cmp	r7, r1
 8009fda:	bf38      	it	cc
 8009fdc:	2204      	movcc	r2, #4
 8009fde:	9201      	str	r2, [sp, #4]
 8009fe0:	9a02      	ldr	r2, [sp, #8]
 8009fe2:	9303      	str	r3, [sp, #12]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d80c      	bhi.n	800a002 <__multiply+0x9e>
 8009fe8:	2e00      	cmp	r6, #0
 8009fea:	dd03      	ble.n	8009ff4 <__multiply+0x90>
 8009fec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d05a      	beq.n	800a0aa <__multiply+0x146>
 8009ff4:	6106      	str	r6, [r0, #16]
 8009ff6:	b005      	add	sp, #20
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffc:	f843 2b04 	str.w	r2, [r3], #4
 800a000:	e7d8      	b.n	8009fb4 <__multiply+0x50>
 800a002:	f8b3 a000 	ldrh.w	sl, [r3]
 800a006:	f1ba 0f00 	cmp.w	sl, #0
 800a00a:	d024      	beq.n	800a056 <__multiply+0xf2>
 800a00c:	f104 0e14 	add.w	lr, r4, #20
 800a010:	46a9      	mov	r9, r5
 800a012:	f04f 0c00 	mov.w	ip, #0
 800a016:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a01a:	f8d9 1000 	ldr.w	r1, [r9]
 800a01e:	fa1f fb82 	uxth.w	fp, r2
 800a022:	b289      	uxth	r1, r1
 800a024:	fb0a 110b 	mla	r1, sl, fp, r1
 800a028:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a02c:	f8d9 2000 	ldr.w	r2, [r9]
 800a030:	4461      	add	r1, ip
 800a032:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a036:	fb0a c20b 	mla	r2, sl, fp, ip
 800a03a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a03e:	b289      	uxth	r1, r1
 800a040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a044:	4577      	cmp	r7, lr
 800a046:	f849 1b04 	str.w	r1, [r9], #4
 800a04a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a04e:	d8e2      	bhi.n	800a016 <__multiply+0xb2>
 800a050:	9a01      	ldr	r2, [sp, #4]
 800a052:	f845 c002 	str.w	ip, [r5, r2]
 800a056:	9a03      	ldr	r2, [sp, #12]
 800a058:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a05c:	3304      	adds	r3, #4
 800a05e:	f1b9 0f00 	cmp.w	r9, #0
 800a062:	d020      	beq.n	800a0a6 <__multiply+0x142>
 800a064:	6829      	ldr	r1, [r5, #0]
 800a066:	f104 0c14 	add.w	ip, r4, #20
 800a06a:	46ae      	mov	lr, r5
 800a06c:	f04f 0a00 	mov.w	sl, #0
 800a070:	f8bc b000 	ldrh.w	fp, [ip]
 800a074:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a078:	fb09 220b 	mla	r2, r9, fp, r2
 800a07c:	4492      	add	sl, r2
 800a07e:	b289      	uxth	r1, r1
 800a080:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a084:	f84e 1b04 	str.w	r1, [lr], #4
 800a088:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a08c:	f8be 1000 	ldrh.w	r1, [lr]
 800a090:	0c12      	lsrs	r2, r2, #16
 800a092:	fb09 1102 	mla	r1, r9, r2, r1
 800a096:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a09a:	4567      	cmp	r7, ip
 800a09c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0a0:	d8e6      	bhi.n	800a070 <__multiply+0x10c>
 800a0a2:	9a01      	ldr	r2, [sp, #4]
 800a0a4:	50a9      	str	r1, [r5, r2]
 800a0a6:	3504      	adds	r5, #4
 800a0a8:	e79a      	b.n	8009fe0 <__multiply+0x7c>
 800a0aa:	3e01      	subs	r6, #1
 800a0ac:	e79c      	b.n	8009fe8 <__multiply+0x84>
 800a0ae:	bf00      	nop
 800a0b0:	0800aee7 	.word	0x0800aee7
 800a0b4:	0800af58 	.word	0x0800af58

0800a0b8 <__pow5mult>:
 800a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0bc:	4615      	mov	r5, r2
 800a0be:	f012 0203 	ands.w	r2, r2, #3
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460f      	mov	r7, r1
 800a0c6:	d007      	beq.n	800a0d8 <__pow5mult+0x20>
 800a0c8:	4c25      	ldr	r4, [pc, #148]	; (800a160 <__pow5mult+0xa8>)
 800a0ca:	3a01      	subs	r2, #1
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0d2:	f7ff fe9b 	bl	8009e0c <__multadd>
 800a0d6:	4607      	mov	r7, r0
 800a0d8:	10ad      	asrs	r5, r5, #2
 800a0da:	d03d      	beq.n	800a158 <__pow5mult+0xa0>
 800a0dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a0de:	b97c      	cbnz	r4, 800a100 <__pow5mult+0x48>
 800a0e0:	2010      	movs	r0, #16
 800a0e2:	f7ff fe1b 	bl	8009d1c <malloc>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	6270      	str	r0, [r6, #36]	; 0x24
 800a0ea:	b928      	cbnz	r0, 800a0f8 <__pow5mult+0x40>
 800a0ec:	4b1d      	ldr	r3, [pc, #116]	; (800a164 <__pow5mult+0xac>)
 800a0ee:	481e      	ldr	r0, [pc, #120]	; (800a168 <__pow5mult+0xb0>)
 800a0f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a0f4:	f000 fc62 	bl	800a9bc <__assert_func>
 800a0f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0fc:	6004      	str	r4, [r0, #0]
 800a0fe:	60c4      	str	r4, [r0, #12]
 800a100:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a108:	b94c      	cbnz	r4, 800a11e <__pow5mult+0x66>
 800a10a:	f240 2171 	movw	r1, #625	; 0x271
 800a10e:	4630      	mov	r0, r6
 800a110:	f7ff ff12 	bl	8009f38 <__i2b>
 800a114:	2300      	movs	r3, #0
 800a116:	f8c8 0008 	str.w	r0, [r8, #8]
 800a11a:	4604      	mov	r4, r0
 800a11c:	6003      	str	r3, [r0, #0]
 800a11e:	f04f 0900 	mov.w	r9, #0
 800a122:	07eb      	lsls	r3, r5, #31
 800a124:	d50a      	bpl.n	800a13c <__pow5mult+0x84>
 800a126:	4639      	mov	r1, r7
 800a128:	4622      	mov	r2, r4
 800a12a:	4630      	mov	r0, r6
 800a12c:	f7ff ff1a 	bl	8009f64 <__multiply>
 800a130:	4639      	mov	r1, r7
 800a132:	4680      	mov	r8, r0
 800a134:	4630      	mov	r0, r6
 800a136:	f7ff fe47 	bl	8009dc8 <_Bfree>
 800a13a:	4647      	mov	r7, r8
 800a13c:	106d      	asrs	r5, r5, #1
 800a13e:	d00b      	beq.n	800a158 <__pow5mult+0xa0>
 800a140:	6820      	ldr	r0, [r4, #0]
 800a142:	b938      	cbnz	r0, 800a154 <__pow5mult+0x9c>
 800a144:	4622      	mov	r2, r4
 800a146:	4621      	mov	r1, r4
 800a148:	4630      	mov	r0, r6
 800a14a:	f7ff ff0b 	bl	8009f64 <__multiply>
 800a14e:	6020      	str	r0, [r4, #0]
 800a150:	f8c0 9000 	str.w	r9, [r0]
 800a154:	4604      	mov	r4, r0
 800a156:	e7e4      	b.n	800a122 <__pow5mult+0x6a>
 800a158:	4638      	mov	r0, r7
 800a15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15e:	bf00      	nop
 800a160:	0800b0a8 	.word	0x0800b0a8
 800a164:	0800ae75 	.word	0x0800ae75
 800a168:	0800af58 	.word	0x0800af58

0800a16c <__lshift>:
 800a16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a170:	460c      	mov	r4, r1
 800a172:	6849      	ldr	r1, [r1, #4]
 800a174:	6923      	ldr	r3, [r4, #16]
 800a176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a17a:	68a3      	ldr	r3, [r4, #8]
 800a17c:	4607      	mov	r7, r0
 800a17e:	4691      	mov	r9, r2
 800a180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a184:	f108 0601 	add.w	r6, r8, #1
 800a188:	42b3      	cmp	r3, r6
 800a18a:	db0b      	blt.n	800a1a4 <__lshift+0x38>
 800a18c:	4638      	mov	r0, r7
 800a18e:	f7ff fddb 	bl	8009d48 <_Balloc>
 800a192:	4605      	mov	r5, r0
 800a194:	b948      	cbnz	r0, 800a1aa <__lshift+0x3e>
 800a196:	4602      	mov	r2, r0
 800a198:	4b2a      	ldr	r3, [pc, #168]	; (800a244 <__lshift+0xd8>)
 800a19a:	482b      	ldr	r0, [pc, #172]	; (800a248 <__lshift+0xdc>)
 800a19c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1a0:	f000 fc0c 	bl	800a9bc <__assert_func>
 800a1a4:	3101      	adds	r1, #1
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	e7ee      	b.n	800a188 <__lshift+0x1c>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f100 0114 	add.w	r1, r0, #20
 800a1b0:	f100 0210 	add.w	r2, r0, #16
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	4553      	cmp	r3, sl
 800a1b8:	db37      	blt.n	800a22a <__lshift+0xbe>
 800a1ba:	6920      	ldr	r0, [r4, #16]
 800a1bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1c0:	f104 0314 	add.w	r3, r4, #20
 800a1c4:	f019 091f 	ands.w	r9, r9, #31
 800a1c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1d0:	d02f      	beq.n	800a232 <__lshift+0xc6>
 800a1d2:	f1c9 0e20 	rsb	lr, r9, #32
 800a1d6:	468a      	mov	sl, r1
 800a1d8:	f04f 0c00 	mov.w	ip, #0
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	fa02 f209 	lsl.w	r2, r2, r9
 800a1e2:	ea42 020c 	orr.w	r2, r2, ip
 800a1e6:	f84a 2b04 	str.w	r2, [sl], #4
 800a1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ee:	4298      	cmp	r0, r3
 800a1f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a1f4:	d8f2      	bhi.n	800a1dc <__lshift+0x70>
 800a1f6:	1b03      	subs	r3, r0, r4
 800a1f8:	3b15      	subs	r3, #21
 800a1fa:	f023 0303 	bic.w	r3, r3, #3
 800a1fe:	3304      	adds	r3, #4
 800a200:	f104 0215 	add.w	r2, r4, #21
 800a204:	4290      	cmp	r0, r2
 800a206:	bf38      	it	cc
 800a208:	2304      	movcc	r3, #4
 800a20a:	f841 c003 	str.w	ip, [r1, r3]
 800a20e:	f1bc 0f00 	cmp.w	ip, #0
 800a212:	d001      	beq.n	800a218 <__lshift+0xac>
 800a214:	f108 0602 	add.w	r6, r8, #2
 800a218:	3e01      	subs	r6, #1
 800a21a:	4638      	mov	r0, r7
 800a21c:	612e      	str	r6, [r5, #16]
 800a21e:	4621      	mov	r1, r4
 800a220:	f7ff fdd2 	bl	8009dc8 <_Bfree>
 800a224:	4628      	mov	r0, r5
 800a226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a22e:	3301      	adds	r3, #1
 800a230:	e7c1      	b.n	800a1b6 <__lshift+0x4a>
 800a232:	3904      	subs	r1, #4
 800a234:	f853 2b04 	ldr.w	r2, [r3], #4
 800a238:	f841 2f04 	str.w	r2, [r1, #4]!
 800a23c:	4298      	cmp	r0, r3
 800a23e:	d8f9      	bhi.n	800a234 <__lshift+0xc8>
 800a240:	e7ea      	b.n	800a218 <__lshift+0xac>
 800a242:	bf00      	nop
 800a244:	0800aee7 	.word	0x0800aee7
 800a248:	0800af58 	.word	0x0800af58

0800a24c <__mcmp>:
 800a24c:	b530      	push	{r4, r5, lr}
 800a24e:	6902      	ldr	r2, [r0, #16]
 800a250:	690c      	ldr	r4, [r1, #16]
 800a252:	1b12      	subs	r2, r2, r4
 800a254:	d10e      	bne.n	800a274 <__mcmp+0x28>
 800a256:	f100 0314 	add.w	r3, r0, #20
 800a25a:	3114      	adds	r1, #20
 800a25c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a260:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a264:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a268:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a26c:	42a5      	cmp	r5, r4
 800a26e:	d003      	beq.n	800a278 <__mcmp+0x2c>
 800a270:	d305      	bcc.n	800a27e <__mcmp+0x32>
 800a272:	2201      	movs	r2, #1
 800a274:	4610      	mov	r0, r2
 800a276:	bd30      	pop	{r4, r5, pc}
 800a278:	4283      	cmp	r3, r0
 800a27a:	d3f3      	bcc.n	800a264 <__mcmp+0x18>
 800a27c:	e7fa      	b.n	800a274 <__mcmp+0x28>
 800a27e:	f04f 32ff 	mov.w	r2, #4294967295
 800a282:	e7f7      	b.n	800a274 <__mcmp+0x28>

0800a284 <__mdiff>:
 800a284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a288:	460c      	mov	r4, r1
 800a28a:	4606      	mov	r6, r0
 800a28c:	4611      	mov	r1, r2
 800a28e:	4620      	mov	r0, r4
 800a290:	4690      	mov	r8, r2
 800a292:	f7ff ffdb 	bl	800a24c <__mcmp>
 800a296:	1e05      	subs	r5, r0, #0
 800a298:	d110      	bne.n	800a2bc <__mdiff+0x38>
 800a29a:	4629      	mov	r1, r5
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff fd53 	bl	8009d48 <_Balloc>
 800a2a2:	b930      	cbnz	r0, 800a2b2 <__mdiff+0x2e>
 800a2a4:	4b3a      	ldr	r3, [pc, #232]	; (800a390 <__mdiff+0x10c>)
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	f240 2132 	movw	r1, #562	; 0x232
 800a2ac:	4839      	ldr	r0, [pc, #228]	; (800a394 <__mdiff+0x110>)
 800a2ae:	f000 fb85 	bl	800a9bc <__assert_func>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2bc:	bfa4      	itt	ge
 800a2be:	4643      	movge	r3, r8
 800a2c0:	46a0      	movge	r8, r4
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2c8:	bfa6      	itte	ge
 800a2ca:	461c      	movge	r4, r3
 800a2cc:	2500      	movge	r5, #0
 800a2ce:	2501      	movlt	r5, #1
 800a2d0:	f7ff fd3a 	bl	8009d48 <_Balloc>
 800a2d4:	b920      	cbnz	r0, 800a2e0 <__mdiff+0x5c>
 800a2d6:	4b2e      	ldr	r3, [pc, #184]	; (800a390 <__mdiff+0x10c>)
 800a2d8:	4602      	mov	r2, r0
 800a2da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a2de:	e7e5      	b.n	800a2ac <__mdiff+0x28>
 800a2e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2e4:	6926      	ldr	r6, [r4, #16]
 800a2e6:	60c5      	str	r5, [r0, #12]
 800a2e8:	f104 0914 	add.w	r9, r4, #20
 800a2ec:	f108 0514 	add.w	r5, r8, #20
 800a2f0:	f100 0e14 	add.w	lr, r0, #20
 800a2f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2fc:	f108 0210 	add.w	r2, r8, #16
 800a300:	46f2      	mov	sl, lr
 800a302:	2100      	movs	r1, #0
 800a304:	f859 3b04 	ldr.w	r3, [r9], #4
 800a308:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a30c:	fa1f f883 	uxth.w	r8, r3
 800a310:	fa11 f18b 	uxtah	r1, r1, fp
 800a314:	0c1b      	lsrs	r3, r3, #16
 800a316:	eba1 0808 	sub.w	r8, r1, r8
 800a31a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a31e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a322:	fa1f f888 	uxth.w	r8, r8
 800a326:	1419      	asrs	r1, r3, #16
 800a328:	454e      	cmp	r6, r9
 800a32a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a32e:	f84a 3b04 	str.w	r3, [sl], #4
 800a332:	d8e7      	bhi.n	800a304 <__mdiff+0x80>
 800a334:	1b33      	subs	r3, r6, r4
 800a336:	3b15      	subs	r3, #21
 800a338:	f023 0303 	bic.w	r3, r3, #3
 800a33c:	3304      	adds	r3, #4
 800a33e:	3415      	adds	r4, #21
 800a340:	42a6      	cmp	r6, r4
 800a342:	bf38      	it	cc
 800a344:	2304      	movcc	r3, #4
 800a346:	441d      	add	r5, r3
 800a348:	4473      	add	r3, lr
 800a34a:	469e      	mov	lr, r3
 800a34c:	462e      	mov	r6, r5
 800a34e:	4566      	cmp	r6, ip
 800a350:	d30e      	bcc.n	800a370 <__mdiff+0xec>
 800a352:	f10c 0203 	add.w	r2, ip, #3
 800a356:	1b52      	subs	r2, r2, r5
 800a358:	f022 0203 	bic.w	r2, r2, #3
 800a35c:	3d03      	subs	r5, #3
 800a35e:	45ac      	cmp	ip, r5
 800a360:	bf38      	it	cc
 800a362:	2200      	movcc	r2, #0
 800a364:	441a      	add	r2, r3
 800a366:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a36a:	b17b      	cbz	r3, 800a38c <__mdiff+0x108>
 800a36c:	6107      	str	r7, [r0, #16]
 800a36e:	e7a3      	b.n	800a2b8 <__mdiff+0x34>
 800a370:	f856 8b04 	ldr.w	r8, [r6], #4
 800a374:	fa11 f288 	uxtah	r2, r1, r8
 800a378:	1414      	asrs	r4, r2, #16
 800a37a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a37e:	b292      	uxth	r2, r2
 800a380:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a384:	f84e 2b04 	str.w	r2, [lr], #4
 800a388:	1421      	asrs	r1, r4, #16
 800a38a:	e7e0      	b.n	800a34e <__mdiff+0xca>
 800a38c:	3f01      	subs	r7, #1
 800a38e:	e7ea      	b.n	800a366 <__mdiff+0xe2>
 800a390:	0800aee7 	.word	0x0800aee7
 800a394:	0800af58 	.word	0x0800af58

0800a398 <__d2b>:
 800a398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	4689      	mov	r9, r1
 800a39e:	2101      	movs	r1, #1
 800a3a0:	ec57 6b10 	vmov	r6, r7, d0
 800a3a4:	4690      	mov	r8, r2
 800a3a6:	f7ff fccf 	bl	8009d48 <_Balloc>
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	b930      	cbnz	r0, 800a3bc <__d2b+0x24>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	4b25      	ldr	r3, [pc, #148]	; (800a448 <__d2b+0xb0>)
 800a3b2:	4826      	ldr	r0, [pc, #152]	; (800a44c <__d2b+0xb4>)
 800a3b4:	f240 310a 	movw	r1, #778	; 0x30a
 800a3b8:	f000 fb00 	bl	800a9bc <__assert_func>
 800a3bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3c4:	bb35      	cbnz	r5, 800a414 <__d2b+0x7c>
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	d028      	beq.n	800a41e <__d2b+0x86>
 800a3cc:	4668      	mov	r0, sp
 800a3ce:	9600      	str	r6, [sp, #0]
 800a3d0:	f7ff fd82 	bl	8009ed8 <__lo0bits>
 800a3d4:	9900      	ldr	r1, [sp, #0]
 800a3d6:	b300      	cbz	r0, 800a41a <__d2b+0x82>
 800a3d8:	9a01      	ldr	r2, [sp, #4]
 800a3da:	f1c0 0320 	rsb	r3, r0, #32
 800a3de:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	40c2      	lsrs	r2, r0
 800a3e6:	6163      	str	r3, [r4, #20]
 800a3e8:	9201      	str	r2, [sp, #4]
 800a3ea:	9b01      	ldr	r3, [sp, #4]
 800a3ec:	61a3      	str	r3, [r4, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	bf14      	ite	ne
 800a3f2:	2202      	movne	r2, #2
 800a3f4:	2201      	moveq	r2, #1
 800a3f6:	6122      	str	r2, [r4, #16]
 800a3f8:	b1d5      	cbz	r5, 800a430 <__d2b+0x98>
 800a3fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3fe:	4405      	add	r5, r0
 800a400:	f8c9 5000 	str.w	r5, [r9]
 800a404:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a408:	f8c8 0000 	str.w	r0, [r8]
 800a40c:	4620      	mov	r0, r4
 800a40e:	b003      	add	sp, #12
 800a410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a418:	e7d5      	b.n	800a3c6 <__d2b+0x2e>
 800a41a:	6161      	str	r1, [r4, #20]
 800a41c:	e7e5      	b.n	800a3ea <__d2b+0x52>
 800a41e:	a801      	add	r0, sp, #4
 800a420:	f7ff fd5a 	bl	8009ed8 <__lo0bits>
 800a424:	9b01      	ldr	r3, [sp, #4]
 800a426:	6163      	str	r3, [r4, #20]
 800a428:	2201      	movs	r2, #1
 800a42a:	6122      	str	r2, [r4, #16]
 800a42c:	3020      	adds	r0, #32
 800a42e:	e7e3      	b.n	800a3f8 <__d2b+0x60>
 800a430:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a438:	f8c9 0000 	str.w	r0, [r9]
 800a43c:	6918      	ldr	r0, [r3, #16]
 800a43e:	f7ff fd2b 	bl	8009e98 <__hi0bits>
 800a442:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a446:	e7df      	b.n	800a408 <__d2b+0x70>
 800a448:	0800aee7 	.word	0x0800aee7
 800a44c:	0800af58 	.word	0x0800af58

0800a450 <_calloc_r>:
 800a450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a452:	fba1 2402 	umull	r2, r4, r1, r2
 800a456:	b94c      	cbnz	r4, 800a46c <_calloc_r+0x1c>
 800a458:	4611      	mov	r1, r2
 800a45a:	9201      	str	r2, [sp, #4]
 800a45c:	f000 f87a 	bl	800a554 <_malloc_r>
 800a460:	9a01      	ldr	r2, [sp, #4]
 800a462:	4605      	mov	r5, r0
 800a464:	b930      	cbnz	r0, 800a474 <_calloc_r+0x24>
 800a466:	4628      	mov	r0, r5
 800a468:	b003      	add	sp, #12
 800a46a:	bd30      	pop	{r4, r5, pc}
 800a46c:	220c      	movs	r2, #12
 800a46e:	6002      	str	r2, [r0, #0]
 800a470:	2500      	movs	r5, #0
 800a472:	e7f8      	b.n	800a466 <_calloc_r+0x16>
 800a474:	4621      	mov	r1, r4
 800a476:	f7fd fdf3 	bl	8008060 <memset>
 800a47a:	e7f4      	b.n	800a466 <_calloc_r+0x16>

0800a47c <_free_r>:
 800a47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a47e:	2900      	cmp	r1, #0
 800a480:	d044      	beq.n	800a50c <_free_r+0x90>
 800a482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a486:	9001      	str	r0, [sp, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f1a1 0404 	sub.w	r4, r1, #4
 800a48e:	bfb8      	it	lt
 800a490:	18e4      	addlt	r4, r4, r3
 800a492:	f000 fb19 	bl	800aac8 <__malloc_lock>
 800a496:	4a1e      	ldr	r2, [pc, #120]	; (800a510 <_free_r+0x94>)
 800a498:	9801      	ldr	r0, [sp, #4]
 800a49a:	6813      	ldr	r3, [r2, #0]
 800a49c:	b933      	cbnz	r3, 800a4ac <_free_r+0x30>
 800a49e:	6063      	str	r3, [r4, #4]
 800a4a0:	6014      	str	r4, [r2, #0]
 800a4a2:	b003      	add	sp, #12
 800a4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4a8:	f000 bb14 	b.w	800aad4 <__malloc_unlock>
 800a4ac:	42a3      	cmp	r3, r4
 800a4ae:	d908      	bls.n	800a4c2 <_free_r+0x46>
 800a4b0:	6825      	ldr	r5, [r4, #0]
 800a4b2:	1961      	adds	r1, r4, r5
 800a4b4:	428b      	cmp	r3, r1
 800a4b6:	bf01      	itttt	eq
 800a4b8:	6819      	ldreq	r1, [r3, #0]
 800a4ba:	685b      	ldreq	r3, [r3, #4]
 800a4bc:	1949      	addeq	r1, r1, r5
 800a4be:	6021      	streq	r1, [r4, #0]
 800a4c0:	e7ed      	b.n	800a49e <_free_r+0x22>
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	b10b      	cbz	r3, 800a4cc <_free_r+0x50>
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	d9fa      	bls.n	800a4c2 <_free_r+0x46>
 800a4cc:	6811      	ldr	r1, [r2, #0]
 800a4ce:	1855      	adds	r5, r2, r1
 800a4d0:	42a5      	cmp	r5, r4
 800a4d2:	d10b      	bne.n	800a4ec <_free_r+0x70>
 800a4d4:	6824      	ldr	r4, [r4, #0]
 800a4d6:	4421      	add	r1, r4
 800a4d8:	1854      	adds	r4, r2, r1
 800a4da:	42a3      	cmp	r3, r4
 800a4dc:	6011      	str	r1, [r2, #0]
 800a4de:	d1e0      	bne.n	800a4a2 <_free_r+0x26>
 800a4e0:	681c      	ldr	r4, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	6053      	str	r3, [r2, #4]
 800a4e6:	4421      	add	r1, r4
 800a4e8:	6011      	str	r1, [r2, #0]
 800a4ea:	e7da      	b.n	800a4a2 <_free_r+0x26>
 800a4ec:	d902      	bls.n	800a4f4 <_free_r+0x78>
 800a4ee:	230c      	movs	r3, #12
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	e7d6      	b.n	800a4a2 <_free_r+0x26>
 800a4f4:	6825      	ldr	r5, [r4, #0]
 800a4f6:	1961      	adds	r1, r4, r5
 800a4f8:	428b      	cmp	r3, r1
 800a4fa:	bf04      	itt	eq
 800a4fc:	6819      	ldreq	r1, [r3, #0]
 800a4fe:	685b      	ldreq	r3, [r3, #4]
 800a500:	6063      	str	r3, [r4, #4]
 800a502:	bf04      	itt	eq
 800a504:	1949      	addeq	r1, r1, r5
 800a506:	6021      	streq	r1, [r4, #0]
 800a508:	6054      	str	r4, [r2, #4]
 800a50a:	e7ca      	b.n	800a4a2 <_free_r+0x26>
 800a50c:	b003      	add	sp, #12
 800a50e:	bd30      	pop	{r4, r5, pc}
 800a510:	2000078c 	.word	0x2000078c

0800a514 <sbrk_aligned>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	4e0e      	ldr	r6, [pc, #56]	; (800a550 <sbrk_aligned+0x3c>)
 800a518:	460c      	mov	r4, r1
 800a51a:	6831      	ldr	r1, [r6, #0]
 800a51c:	4605      	mov	r5, r0
 800a51e:	b911      	cbnz	r1, 800a526 <sbrk_aligned+0x12>
 800a520:	f000 f9e6 	bl	800a8f0 <_sbrk_r>
 800a524:	6030      	str	r0, [r6, #0]
 800a526:	4621      	mov	r1, r4
 800a528:	4628      	mov	r0, r5
 800a52a:	f000 f9e1 	bl	800a8f0 <_sbrk_r>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	d00a      	beq.n	800a548 <sbrk_aligned+0x34>
 800a532:	1cc4      	adds	r4, r0, #3
 800a534:	f024 0403 	bic.w	r4, r4, #3
 800a538:	42a0      	cmp	r0, r4
 800a53a:	d007      	beq.n	800a54c <sbrk_aligned+0x38>
 800a53c:	1a21      	subs	r1, r4, r0
 800a53e:	4628      	mov	r0, r5
 800a540:	f000 f9d6 	bl	800a8f0 <_sbrk_r>
 800a544:	3001      	adds	r0, #1
 800a546:	d101      	bne.n	800a54c <sbrk_aligned+0x38>
 800a548:	f04f 34ff 	mov.w	r4, #4294967295
 800a54c:	4620      	mov	r0, r4
 800a54e:	bd70      	pop	{r4, r5, r6, pc}
 800a550:	20000790 	.word	0x20000790

0800a554 <_malloc_r>:
 800a554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a558:	1ccd      	adds	r5, r1, #3
 800a55a:	f025 0503 	bic.w	r5, r5, #3
 800a55e:	3508      	adds	r5, #8
 800a560:	2d0c      	cmp	r5, #12
 800a562:	bf38      	it	cc
 800a564:	250c      	movcc	r5, #12
 800a566:	2d00      	cmp	r5, #0
 800a568:	4607      	mov	r7, r0
 800a56a:	db01      	blt.n	800a570 <_malloc_r+0x1c>
 800a56c:	42a9      	cmp	r1, r5
 800a56e:	d905      	bls.n	800a57c <_malloc_r+0x28>
 800a570:	230c      	movs	r3, #12
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	2600      	movs	r6, #0
 800a576:	4630      	mov	r0, r6
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	4e2e      	ldr	r6, [pc, #184]	; (800a638 <_malloc_r+0xe4>)
 800a57e:	f000 faa3 	bl	800aac8 <__malloc_lock>
 800a582:	6833      	ldr	r3, [r6, #0]
 800a584:	461c      	mov	r4, r3
 800a586:	bb34      	cbnz	r4, 800a5d6 <_malloc_r+0x82>
 800a588:	4629      	mov	r1, r5
 800a58a:	4638      	mov	r0, r7
 800a58c:	f7ff ffc2 	bl	800a514 <sbrk_aligned>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	4604      	mov	r4, r0
 800a594:	d14d      	bne.n	800a632 <_malloc_r+0xde>
 800a596:	6834      	ldr	r4, [r6, #0]
 800a598:	4626      	mov	r6, r4
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	d140      	bne.n	800a620 <_malloc_r+0xcc>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	eb04 0803 	add.w	r8, r4, r3
 800a5a8:	f000 f9a2 	bl	800a8f0 <_sbrk_r>
 800a5ac:	4580      	cmp	r8, r0
 800a5ae:	d13a      	bne.n	800a626 <_malloc_r+0xd2>
 800a5b0:	6821      	ldr	r1, [r4, #0]
 800a5b2:	3503      	adds	r5, #3
 800a5b4:	1a6d      	subs	r5, r5, r1
 800a5b6:	f025 0503 	bic.w	r5, r5, #3
 800a5ba:	3508      	adds	r5, #8
 800a5bc:	2d0c      	cmp	r5, #12
 800a5be:	bf38      	it	cc
 800a5c0:	250c      	movcc	r5, #12
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	f7ff ffa5 	bl	800a514 <sbrk_aligned>
 800a5ca:	3001      	adds	r0, #1
 800a5cc:	d02b      	beq.n	800a626 <_malloc_r+0xd2>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	442b      	add	r3, r5
 800a5d2:	6023      	str	r3, [r4, #0]
 800a5d4:	e00e      	b.n	800a5f4 <_malloc_r+0xa0>
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	1b52      	subs	r2, r2, r5
 800a5da:	d41e      	bmi.n	800a61a <_malloc_r+0xc6>
 800a5dc:	2a0b      	cmp	r2, #11
 800a5de:	d916      	bls.n	800a60e <_malloc_r+0xba>
 800a5e0:	1961      	adds	r1, r4, r5
 800a5e2:	42a3      	cmp	r3, r4
 800a5e4:	6025      	str	r5, [r4, #0]
 800a5e6:	bf18      	it	ne
 800a5e8:	6059      	strne	r1, [r3, #4]
 800a5ea:	6863      	ldr	r3, [r4, #4]
 800a5ec:	bf08      	it	eq
 800a5ee:	6031      	streq	r1, [r6, #0]
 800a5f0:	5162      	str	r2, [r4, r5]
 800a5f2:	604b      	str	r3, [r1, #4]
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f104 060b 	add.w	r6, r4, #11
 800a5fa:	f000 fa6b 	bl	800aad4 <__malloc_unlock>
 800a5fe:	f026 0607 	bic.w	r6, r6, #7
 800a602:	1d23      	adds	r3, r4, #4
 800a604:	1af2      	subs	r2, r6, r3
 800a606:	d0b6      	beq.n	800a576 <_malloc_r+0x22>
 800a608:	1b9b      	subs	r3, r3, r6
 800a60a:	50a3      	str	r3, [r4, r2]
 800a60c:	e7b3      	b.n	800a576 <_malloc_r+0x22>
 800a60e:	6862      	ldr	r2, [r4, #4]
 800a610:	42a3      	cmp	r3, r4
 800a612:	bf0c      	ite	eq
 800a614:	6032      	streq	r2, [r6, #0]
 800a616:	605a      	strne	r2, [r3, #4]
 800a618:	e7ec      	b.n	800a5f4 <_malloc_r+0xa0>
 800a61a:	4623      	mov	r3, r4
 800a61c:	6864      	ldr	r4, [r4, #4]
 800a61e:	e7b2      	b.n	800a586 <_malloc_r+0x32>
 800a620:	4634      	mov	r4, r6
 800a622:	6876      	ldr	r6, [r6, #4]
 800a624:	e7b9      	b.n	800a59a <_malloc_r+0x46>
 800a626:	230c      	movs	r3, #12
 800a628:	603b      	str	r3, [r7, #0]
 800a62a:	4638      	mov	r0, r7
 800a62c:	f000 fa52 	bl	800aad4 <__malloc_unlock>
 800a630:	e7a1      	b.n	800a576 <_malloc_r+0x22>
 800a632:	6025      	str	r5, [r4, #0]
 800a634:	e7de      	b.n	800a5f4 <_malloc_r+0xa0>
 800a636:	bf00      	nop
 800a638:	2000078c 	.word	0x2000078c

0800a63c <__sfputc_r>:
 800a63c:	6893      	ldr	r3, [r2, #8]
 800a63e:	3b01      	subs	r3, #1
 800a640:	2b00      	cmp	r3, #0
 800a642:	b410      	push	{r4}
 800a644:	6093      	str	r3, [r2, #8]
 800a646:	da08      	bge.n	800a65a <__sfputc_r+0x1e>
 800a648:	6994      	ldr	r4, [r2, #24]
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	db01      	blt.n	800a652 <__sfputc_r+0x16>
 800a64e:	290a      	cmp	r1, #10
 800a650:	d103      	bne.n	800a65a <__sfputc_r+0x1e>
 800a652:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a656:	f7fe ba03 	b.w	8008a60 <__swbuf_r>
 800a65a:	6813      	ldr	r3, [r2, #0]
 800a65c:	1c58      	adds	r0, r3, #1
 800a65e:	6010      	str	r0, [r2, #0]
 800a660:	7019      	strb	r1, [r3, #0]
 800a662:	4608      	mov	r0, r1
 800a664:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <__sfputs_r>:
 800a66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66c:	4606      	mov	r6, r0
 800a66e:	460f      	mov	r7, r1
 800a670:	4614      	mov	r4, r2
 800a672:	18d5      	adds	r5, r2, r3
 800a674:	42ac      	cmp	r4, r5
 800a676:	d101      	bne.n	800a67c <__sfputs_r+0x12>
 800a678:	2000      	movs	r0, #0
 800a67a:	e007      	b.n	800a68c <__sfputs_r+0x22>
 800a67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a680:	463a      	mov	r2, r7
 800a682:	4630      	mov	r0, r6
 800a684:	f7ff ffda 	bl	800a63c <__sfputc_r>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d1f3      	bne.n	800a674 <__sfputs_r+0xa>
 800a68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a690 <_vfiprintf_r>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	460d      	mov	r5, r1
 800a696:	b09d      	sub	sp, #116	; 0x74
 800a698:	4614      	mov	r4, r2
 800a69a:	4698      	mov	r8, r3
 800a69c:	4606      	mov	r6, r0
 800a69e:	b118      	cbz	r0, 800a6a8 <_vfiprintf_r+0x18>
 800a6a0:	6983      	ldr	r3, [r0, #24]
 800a6a2:	b90b      	cbnz	r3, 800a6a8 <_vfiprintf_r+0x18>
 800a6a4:	f7ff fa30 	bl	8009b08 <__sinit>
 800a6a8:	4b89      	ldr	r3, [pc, #548]	; (800a8d0 <_vfiprintf_r+0x240>)
 800a6aa:	429d      	cmp	r5, r3
 800a6ac:	d11b      	bne.n	800a6e6 <_vfiprintf_r+0x56>
 800a6ae:	6875      	ldr	r5, [r6, #4]
 800a6b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6b2:	07d9      	lsls	r1, r3, #31
 800a6b4:	d405      	bmi.n	800a6c2 <_vfiprintf_r+0x32>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	059a      	lsls	r2, r3, #22
 800a6ba:	d402      	bmi.n	800a6c2 <_vfiprintf_r+0x32>
 800a6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6be:	f7ff fac6 	bl	8009c4e <__retarget_lock_acquire_recursive>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	071b      	lsls	r3, r3, #28
 800a6c6:	d501      	bpl.n	800a6cc <_vfiprintf_r+0x3c>
 800a6c8:	692b      	ldr	r3, [r5, #16]
 800a6ca:	b9eb      	cbnz	r3, 800a708 <_vfiprintf_r+0x78>
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f7fe fa18 	bl	8008b04 <__swsetup_r>
 800a6d4:	b1c0      	cbz	r0, 800a708 <_vfiprintf_r+0x78>
 800a6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6d8:	07dc      	lsls	r4, r3, #31
 800a6da:	d50e      	bpl.n	800a6fa <_vfiprintf_r+0x6a>
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	b01d      	add	sp, #116	; 0x74
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	4b7b      	ldr	r3, [pc, #492]	; (800a8d4 <_vfiprintf_r+0x244>)
 800a6e8:	429d      	cmp	r5, r3
 800a6ea:	d101      	bne.n	800a6f0 <_vfiprintf_r+0x60>
 800a6ec:	68b5      	ldr	r5, [r6, #8]
 800a6ee:	e7df      	b.n	800a6b0 <_vfiprintf_r+0x20>
 800a6f0:	4b79      	ldr	r3, [pc, #484]	; (800a8d8 <_vfiprintf_r+0x248>)
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	bf08      	it	eq
 800a6f6:	68f5      	ldreq	r5, [r6, #12]
 800a6f8:	e7da      	b.n	800a6b0 <_vfiprintf_r+0x20>
 800a6fa:	89ab      	ldrh	r3, [r5, #12]
 800a6fc:	0598      	lsls	r0, r3, #22
 800a6fe:	d4ed      	bmi.n	800a6dc <_vfiprintf_r+0x4c>
 800a700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a702:	f7ff faa5 	bl	8009c50 <__retarget_lock_release_recursive>
 800a706:	e7e9      	b.n	800a6dc <_vfiprintf_r+0x4c>
 800a708:	2300      	movs	r3, #0
 800a70a:	9309      	str	r3, [sp, #36]	; 0x24
 800a70c:	2320      	movs	r3, #32
 800a70e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a712:	f8cd 800c 	str.w	r8, [sp, #12]
 800a716:	2330      	movs	r3, #48	; 0x30
 800a718:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8dc <_vfiprintf_r+0x24c>
 800a71c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a720:	f04f 0901 	mov.w	r9, #1
 800a724:	4623      	mov	r3, r4
 800a726:	469a      	mov	sl, r3
 800a728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a72c:	b10a      	cbz	r2, 800a732 <_vfiprintf_r+0xa2>
 800a72e:	2a25      	cmp	r2, #37	; 0x25
 800a730:	d1f9      	bne.n	800a726 <_vfiprintf_r+0x96>
 800a732:	ebba 0b04 	subs.w	fp, sl, r4
 800a736:	d00b      	beq.n	800a750 <_vfiprintf_r+0xc0>
 800a738:	465b      	mov	r3, fp
 800a73a:	4622      	mov	r2, r4
 800a73c:	4629      	mov	r1, r5
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ff93 	bl	800a66a <__sfputs_r>
 800a744:	3001      	adds	r0, #1
 800a746:	f000 80aa 	beq.w	800a89e <_vfiprintf_r+0x20e>
 800a74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a74c:	445a      	add	r2, fp
 800a74e:	9209      	str	r2, [sp, #36]	; 0x24
 800a750:	f89a 3000 	ldrb.w	r3, [sl]
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 80a2 	beq.w	800a89e <_vfiprintf_r+0x20e>
 800a75a:	2300      	movs	r3, #0
 800a75c:	f04f 32ff 	mov.w	r2, #4294967295
 800a760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a764:	f10a 0a01 	add.w	sl, sl, #1
 800a768:	9304      	str	r3, [sp, #16]
 800a76a:	9307      	str	r3, [sp, #28]
 800a76c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a770:	931a      	str	r3, [sp, #104]	; 0x68
 800a772:	4654      	mov	r4, sl
 800a774:	2205      	movs	r2, #5
 800a776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77a:	4858      	ldr	r0, [pc, #352]	; (800a8dc <_vfiprintf_r+0x24c>)
 800a77c:	f7f5 fd30 	bl	80001e0 <memchr>
 800a780:	9a04      	ldr	r2, [sp, #16]
 800a782:	b9d8      	cbnz	r0, 800a7bc <_vfiprintf_r+0x12c>
 800a784:	06d1      	lsls	r1, r2, #27
 800a786:	bf44      	itt	mi
 800a788:	2320      	movmi	r3, #32
 800a78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a78e:	0713      	lsls	r3, r2, #28
 800a790:	bf44      	itt	mi
 800a792:	232b      	movmi	r3, #43	; 0x2b
 800a794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a798:	f89a 3000 	ldrb.w	r3, [sl]
 800a79c:	2b2a      	cmp	r3, #42	; 0x2a
 800a79e:	d015      	beq.n	800a7cc <_vfiprintf_r+0x13c>
 800a7a0:	9a07      	ldr	r2, [sp, #28]
 800a7a2:	4654      	mov	r4, sl
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	f04f 0c0a 	mov.w	ip, #10
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b0:	3b30      	subs	r3, #48	; 0x30
 800a7b2:	2b09      	cmp	r3, #9
 800a7b4:	d94e      	bls.n	800a854 <_vfiprintf_r+0x1c4>
 800a7b6:	b1b0      	cbz	r0, 800a7e6 <_vfiprintf_r+0x156>
 800a7b8:	9207      	str	r2, [sp, #28]
 800a7ba:	e014      	b.n	800a7e6 <_vfiprintf_r+0x156>
 800a7bc:	eba0 0308 	sub.w	r3, r0, r8
 800a7c0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	46a2      	mov	sl, r4
 800a7ca:	e7d2      	b.n	800a772 <_vfiprintf_r+0xe2>
 800a7cc:	9b03      	ldr	r3, [sp, #12]
 800a7ce:	1d19      	adds	r1, r3, #4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	9103      	str	r1, [sp, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bfbb      	ittet	lt
 800a7d8:	425b      	neglt	r3, r3
 800a7da:	f042 0202 	orrlt.w	r2, r2, #2
 800a7de:	9307      	strge	r3, [sp, #28]
 800a7e0:	9307      	strlt	r3, [sp, #28]
 800a7e2:	bfb8      	it	lt
 800a7e4:	9204      	strlt	r2, [sp, #16]
 800a7e6:	7823      	ldrb	r3, [r4, #0]
 800a7e8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ea:	d10c      	bne.n	800a806 <_vfiprintf_r+0x176>
 800a7ec:	7863      	ldrb	r3, [r4, #1]
 800a7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f0:	d135      	bne.n	800a85e <_vfiprintf_r+0x1ce>
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	1d1a      	adds	r2, r3, #4
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	9203      	str	r2, [sp, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	bfb8      	it	lt
 800a7fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800a802:	3402      	adds	r4, #2
 800a804:	9305      	str	r3, [sp, #20]
 800a806:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8ec <_vfiprintf_r+0x25c>
 800a80a:	7821      	ldrb	r1, [r4, #0]
 800a80c:	2203      	movs	r2, #3
 800a80e:	4650      	mov	r0, sl
 800a810:	f7f5 fce6 	bl	80001e0 <memchr>
 800a814:	b140      	cbz	r0, 800a828 <_vfiprintf_r+0x198>
 800a816:	2340      	movs	r3, #64	; 0x40
 800a818:	eba0 000a 	sub.w	r0, r0, sl
 800a81c:	fa03 f000 	lsl.w	r0, r3, r0
 800a820:	9b04      	ldr	r3, [sp, #16]
 800a822:	4303      	orrs	r3, r0
 800a824:	3401      	adds	r4, #1
 800a826:	9304      	str	r3, [sp, #16]
 800a828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a82c:	482c      	ldr	r0, [pc, #176]	; (800a8e0 <_vfiprintf_r+0x250>)
 800a82e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a832:	2206      	movs	r2, #6
 800a834:	f7f5 fcd4 	bl	80001e0 <memchr>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d03f      	beq.n	800a8bc <_vfiprintf_r+0x22c>
 800a83c:	4b29      	ldr	r3, [pc, #164]	; (800a8e4 <_vfiprintf_r+0x254>)
 800a83e:	bb1b      	cbnz	r3, 800a888 <_vfiprintf_r+0x1f8>
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	3307      	adds	r3, #7
 800a844:	f023 0307 	bic.w	r3, r3, #7
 800a848:	3308      	adds	r3, #8
 800a84a:	9303      	str	r3, [sp, #12]
 800a84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84e:	443b      	add	r3, r7
 800a850:	9309      	str	r3, [sp, #36]	; 0x24
 800a852:	e767      	b.n	800a724 <_vfiprintf_r+0x94>
 800a854:	fb0c 3202 	mla	r2, ip, r2, r3
 800a858:	460c      	mov	r4, r1
 800a85a:	2001      	movs	r0, #1
 800a85c:	e7a5      	b.n	800a7aa <_vfiprintf_r+0x11a>
 800a85e:	2300      	movs	r3, #0
 800a860:	3401      	adds	r4, #1
 800a862:	9305      	str	r3, [sp, #20]
 800a864:	4619      	mov	r1, r3
 800a866:	f04f 0c0a 	mov.w	ip, #10
 800a86a:	4620      	mov	r0, r4
 800a86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a870:	3a30      	subs	r2, #48	; 0x30
 800a872:	2a09      	cmp	r2, #9
 800a874:	d903      	bls.n	800a87e <_vfiprintf_r+0x1ee>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d0c5      	beq.n	800a806 <_vfiprintf_r+0x176>
 800a87a:	9105      	str	r1, [sp, #20]
 800a87c:	e7c3      	b.n	800a806 <_vfiprintf_r+0x176>
 800a87e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a882:	4604      	mov	r4, r0
 800a884:	2301      	movs	r3, #1
 800a886:	e7f0      	b.n	800a86a <_vfiprintf_r+0x1da>
 800a888:	ab03      	add	r3, sp, #12
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	462a      	mov	r2, r5
 800a88e:	4b16      	ldr	r3, [pc, #88]	; (800a8e8 <_vfiprintf_r+0x258>)
 800a890:	a904      	add	r1, sp, #16
 800a892:	4630      	mov	r0, r6
 800a894:	f7fd fc8c 	bl	80081b0 <_printf_float>
 800a898:	4607      	mov	r7, r0
 800a89a:	1c78      	adds	r0, r7, #1
 800a89c:	d1d6      	bne.n	800a84c <_vfiprintf_r+0x1bc>
 800a89e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a0:	07d9      	lsls	r1, r3, #31
 800a8a2:	d405      	bmi.n	800a8b0 <_vfiprintf_r+0x220>
 800a8a4:	89ab      	ldrh	r3, [r5, #12]
 800a8a6:	059a      	lsls	r2, r3, #22
 800a8a8:	d402      	bmi.n	800a8b0 <_vfiprintf_r+0x220>
 800a8aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ac:	f7ff f9d0 	bl	8009c50 <__retarget_lock_release_recursive>
 800a8b0:	89ab      	ldrh	r3, [r5, #12]
 800a8b2:	065b      	lsls	r3, r3, #25
 800a8b4:	f53f af12 	bmi.w	800a6dc <_vfiprintf_r+0x4c>
 800a8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ba:	e711      	b.n	800a6e0 <_vfiprintf_r+0x50>
 800a8bc:	ab03      	add	r3, sp, #12
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	462a      	mov	r2, r5
 800a8c2:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <_vfiprintf_r+0x258>)
 800a8c4:	a904      	add	r1, sp, #16
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f7fd ff16 	bl	80086f8 <_printf_i>
 800a8cc:	e7e4      	b.n	800a898 <_vfiprintf_r+0x208>
 800a8ce:	bf00      	nop
 800a8d0:	0800af18 	.word	0x0800af18
 800a8d4:	0800af38 	.word	0x0800af38
 800a8d8:	0800aef8 	.word	0x0800aef8
 800a8dc:	0800b0b4 	.word	0x0800b0b4
 800a8e0:	0800b0be 	.word	0x0800b0be
 800a8e4:	080081b1 	.word	0x080081b1
 800a8e8:	0800a66b 	.word	0x0800a66b
 800a8ec:	0800b0ba 	.word	0x0800b0ba

0800a8f0 <_sbrk_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d06      	ldr	r5, [pc, #24]	; (800a90c <_sbrk_r+0x1c>)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	f7f7 fcd2 	bl	80022a4 <_sbrk>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d102      	bne.n	800a90a <_sbrk_r+0x1a>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	b103      	cbz	r3, 800a90a <_sbrk_r+0x1a>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	20000794 	.word	0x20000794

0800a910 <__sread>:
 800a910:	b510      	push	{r4, lr}
 800a912:	460c      	mov	r4, r1
 800a914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a918:	f000 f8e2 	bl	800aae0 <_read_r>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	bfab      	itete	ge
 800a920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a922:	89a3      	ldrhlt	r3, [r4, #12]
 800a924:	181b      	addge	r3, r3, r0
 800a926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a92a:	bfac      	ite	ge
 800a92c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a92e:	81a3      	strhlt	r3, [r4, #12]
 800a930:	bd10      	pop	{r4, pc}

0800a932 <__swrite>:
 800a932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a936:	461f      	mov	r7, r3
 800a938:	898b      	ldrh	r3, [r1, #12]
 800a93a:	05db      	lsls	r3, r3, #23
 800a93c:	4605      	mov	r5, r0
 800a93e:	460c      	mov	r4, r1
 800a940:	4616      	mov	r6, r2
 800a942:	d505      	bpl.n	800a950 <__swrite+0x1e>
 800a944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a948:	2302      	movs	r3, #2
 800a94a:	2200      	movs	r2, #0
 800a94c:	f000 f898 	bl	800aa80 <_lseek_r>
 800a950:	89a3      	ldrh	r3, [r4, #12]
 800a952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a95a:	81a3      	strh	r3, [r4, #12]
 800a95c:	4632      	mov	r2, r6
 800a95e:	463b      	mov	r3, r7
 800a960:	4628      	mov	r0, r5
 800a962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a966:	f000 b817 	b.w	800a998 <_write_r>

0800a96a <__sseek>:
 800a96a:	b510      	push	{r4, lr}
 800a96c:	460c      	mov	r4, r1
 800a96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a972:	f000 f885 	bl	800aa80 <_lseek_r>
 800a976:	1c43      	adds	r3, r0, #1
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	bf15      	itete	ne
 800a97c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a97e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a986:	81a3      	strheq	r3, [r4, #12]
 800a988:	bf18      	it	ne
 800a98a:	81a3      	strhne	r3, [r4, #12]
 800a98c:	bd10      	pop	{r4, pc}

0800a98e <__sclose>:
 800a98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a992:	f000 b831 	b.w	800a9f8 <_close_r>
	...

0800a998 <_write_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	; (800a9b8 <_write_r+0x20>)
 800a99c:	4604      	mov	r4, r0
 800a99e:	4608      	mov	r0, r1
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f7f6 fb9a 	bl	80010e0 <_write>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_write_r+0x1e>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_write_r+0x1e>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	20000794 	.word	0x20000794

0800a9bc <__assert_func>:
 800a9bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9be:	4614      	mov	r4, r2
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <__assert_func+0x2c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	68d8      	ldr	r0, [r3, #12]
 800a9ca:	b14c      	cbz	r4, 800a9e0 <__assert_func+0x24>
 800a9cc:	4b07      	ldr	r3, [pc, #28]	; (800a9ec <__assert_func+0x30>)
 800a9ce:	9100      	str	r1, [sp, #0]
 800a9d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9d4:	4906      	ldr	r1, [pc, #24]	; (800a9f0 <__assert_func+0x34>)
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	f000 f81e 	bl	800aa18 <fiprintf>
 800a9dc:	f000 f89f 	bl	800ab1e <abort>
 800a9e0:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <__assert_func+0x38>)
 800a9e2:	461c      	mov	r4, r3
 800a9e4:	e7f3      	b.n	800a9ce <__assert_func+0x12>
 800a9e6:	bf00      	nop
 800a9e8:	2000000c 	.word	0x2000000c
 800a9ec:	0800b0c5 	.word	0x0800b0c5
 800a9f0:	0800b0d2 	.word	0x0800b0d2
 800a9f4:	0800b100 	.word	0x0800b100

0800a9f8 <_close_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d06      	ldr	r5, [pc, #24]	; (800aa14 <_close_r+0x1c>)
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4608      	mov	r0, r1
 800aa02:	602b      	str	r3, [r5, #0]
 800aa04:	f7f7 fc19 	bl	800223a <_close>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d102      	bne.n	800aa12 <_close_r+0x1a>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	b103      	cbz	r3, 800aa12 <_close_r+0x1a>
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	20000794 	.word	0x20000794

0800aa18 <fiprintf>:
 800aa18:	b40e      	push	{r1, r2, r3}
 800aa1a:	b503      	push	{r0, r1, lr}
 800aa1c:	4601      	mov	r1, r0
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	4805      	ldr	r0, [pc, #20]	; (800aa38 <fiprintf+0x20>)
 800aa22:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa26:	6800      	ldr	r0, [r0, #0]
 800aa28:	9301      	str	r3, [sp, #4]
 800aa2a:	f7ff fe31 	bl	800a690 <_vfiprintf_r>
 800aa2e:	b002      	add	sp, #8
 800aa30:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa34:	b003      	add	sp, #12
 800aa36:	4770      	bx	lr
 800aa38:	2000000c 	.word	0x2000000c

0800aa3c <_fstat_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	; (800aa5c <_fstat_r+0x20>)
 800aa40:	2300      	movs	r3, #0
 800aa42:	4604      	mov	r4, r0
 800aa44:	4608      	mov	r0, r1
 800aa46:	4611      	mov	r1, r2
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	f7f7 fc02 	bl	8002252 <_fstat>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d102      	bne.n	800aa58 <_fstat_r+0x1c>
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	b103      	cbz	r3, 800aa58 <_fstat_r+0x1c>
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000794 	.word	0x20000794

0800aa60 <_isatty_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d06      	ldr	r5, [pc, #24]	; (800aa7c <_isatty_r+0x1c>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	f7f7 fc01 	bl	8002272 <_isatty>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d102      	bne.n	800aa7a <_isatty_r+0x1a>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	b103      	cbz	r3, 800aa7a <_isatty_r+0x1a>
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	20000794 	.word	0x20000794

0800aa80 <_lseek_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d07      	ldr	r5, [pc, #28]	; (800aaa0 <_lseek_r+0x20>)
 800aa84:	4604      	mov	r4, r0
 800aa86:	4608      	mov	r0, r1
 800aa88:	4611      	mov	r1, r2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	602a      	str	r2, [r5, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f7f7 fbfa 	bl	8002288 <_lseek>
 800aa94:	1c43      	adds	r3, r0, #1
 800aa96:	d102      	bne.n	800aa9e <_lseek_r+0x1e>
 800aa98:	682b      	ldr	r3, [r5, #0]
 800aa9a:	b103      	cbz	r3, 800aa9e <_lseek_r+0x1e>
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}
 800aaa0:	20000794 	.word	0x20000794

0800aaa4 <__ascii_mbtowc>:
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	b901      	cbnz	r1, 800aaaa <__ascii_mbtowc+0x6>
 800aaa8:	a901      	add	r1, sp, #4
 800aaaa:	b142      	cbz	r2, 800aabe <__ascii_mbtowc+0x1a>
 800aaac:	b14b      	cbz	r3, 800aac2 <__ascii_mbtowc+0x1e>
 800aaae:	7813      	ldrb	r3, [r2, #0]
 800aab0:	600b      	str	r3, [r1, #0]
 800aab2:	7812      	ldrb	r2, [r2, #0]
 800aab4:	1e10      	subs	r0, r2, #0
 800aab6:	bf18      	it	ne
 800aab8:	2001      	movne	r0, #1
 800aaba:	b002      	add	sp, #8
 800aabc:	4770      	bx	lr
 800aabe:	4610      	mov	r0, r2
 800aac0:	e7fb      	b.n	800aaba <__ascii_mbtowc+0x16>
 800aac2:	f06f 0001 	mvn.w	r0, #1
 800aac6:	e7f8      	b.n	800aaba <__ascii_mbtowc+0x16>

0800aac8 <__malloc_lock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	; (800aad0 <__malloc_lock+0x8>)
 800aaca:	f7ff b8c0 	b.w	8009c4e <__retarget_lock_acquire_recursive>
 800aace:	bf00      	nop
 800aad0:	20000788 	.word	0x20000788

0800aad4 <__malloc_unlock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__malloc_unlock+0x8>)
 800aad6:	f7ff b8bb 	b.w	8009c50 <__retarget_lock_release_recursive>
 800aada:	bf00      	nop
 800aadc:	20000788 	.word	0x20000788

0800aae0 <_read_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	; (800ab00 <_read_r+0x20>)
 800aae4:	4604      	mov	r4, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	4611      	mov	r1, r2
 800aaea:	2200      	movs	r2, #0
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f7f7 fb86 	bl	8002200 <_read>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_read_r+0x1e>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_read_r+0x1e>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	20000794 	.word	0x20000794

0800ab04 <__ascii_wctomb>:
 800ab04:	b149      	cbz	r1, 800ab1a <__ascii_wctomb+0x16>
 800ab06:	2aff      	cmp	r2, #255	; 0xff
 800ab08:	bf85      	ittet	hi
 800ab0a:	238a      	movhi	r3, #138	; 0x8a
 800ab0c:	6003      	strhi	r3, [r0, #0]
 800ab0e:	700a      	strbls	r2, [r1, #0]
 800ab10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab14:	bf98      	it	ls
 800ab16:	2001      	movls	r0, #1
 800ab18:	4770      	bx	lr
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	4770      	bx	lr

0800ab1e <abort>:
 800ab1e:	b508      	push	{r3, lr}
 800ab20:	2006      	movs	r0, #6
 800ab22:	f000 f82b 	bl	800ab7c <raise>
 800ab26:	2001      	movs	r0, #1
 800ab28:	f7f7 fb60 	bl	80021ec <_exit>

0800ab2c <_raise_r>:
 800ab2c:	291f      	cmp	r1, #31
 800ab2e:	b538      	push	{r3, r4, r5, lr}
 800ab30:	4604      	mov	r4, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	d904      	bls.n	800ab40 <_raise_r+0x14>
 800ab36:	2316      	movs	r3, #22
 800ab38:	6003      	str	r3, [r0, #0]
 800ab3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab42:	b112      	cbz	r2, 800ab4a <_raise_r+0x1e>
 800ab44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab48:	b94b      	cbnz	r3, 800ab5e <_raise_r+0x32>
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 f830 	bl	800abb0 <_getpid_r>
 800ab50:	462a      	mov	r2, r5
 800ab52:	4601      	mov	r1, r0
 800ab54:	4620      	mov	r0, r4
 800ab56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab5a:	f000 b817 	b.w	800ab8c <_kill_r>
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d00a      	beq.n	800ab78 <_raise_r+0x4c>
 800ab62:	1c59      	adds	r1, r3, #1
 800ab64:	d103      	bne.n	800ab6e <_raise_r+0x42>
 800ab66:	2316      	movs	r3, #22
 800ab68:	6003      	str	r3, [r0, #0]
 800ab6a:	2001      	movs	r0, #1
 800ab6c:	e7e7      	b.n	800ab3e <_raise_r+0x12>
 800ab6e:	2400      	movs	r4, #0
 800ab70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab74:	4628      	mov	r0, r5
 800ab76:	4798      	blx	r3
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e7e0      	b.n	800ab3e <_raise_r+0x12>

0800ab7c <raise>:
 800ab7c:	4b02      	ldr	r3, [pc, #8]	; (800ab88 <raise+0xc>)
 800ab7e:	4601      	mov	r1, r0
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	f7ff bfd3 	b.w	800ab2c <_raise_r>
 800ab86:	bf00      	nop
 800ab88:	2000000c 	.word	0x2000000c

0800ab8c <_kill_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4d07      	ldr	r5, [pc, #28]	; (800abac <_kill_r+0x20>)
 800ab90:	2300      	movs	r3, #0
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	4611      	mov	r1, r2
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	f7f7 fb17 	bl	80021cc <_kill>
 800ab9e:	1c43      	adds	r3, r0, #1
 800aba0:	d102      	bne.n	800aba8 <_kill_r+0x1c>
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	b103      	cbz	r3, 800aba8 <_kill_r+0x1c>
 800aba6:	6023      	str	r3, [r4, #0]
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	bf00      	nop
 800abac:	20000794 	.word	0x20000794

0800abb0 <_getpid_r>:
 800abb0:	f7f7 bb04 	b.w	80021bc <_getpid>

0800abb4 <_init>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	bf00      	nop
 800abb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abba:	bc08      	pop	{r3}
 800abbc:	469e      	mov	lr, r3
 800abbe:	4770      	bx	lr

0800abc0 <_fini>:
 800abc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abc2:	bf00      	nop
 800abc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc6:	bc08      	pop	{r3}
 800abc8:	469e      	mov	lr, r3
 800abca:	4770      	bx	lr
