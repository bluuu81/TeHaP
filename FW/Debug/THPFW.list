
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013370  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002510  08013500  08013500  00023500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015a10  08015a10  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08015a10  08015a10  00025a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015a18  08015a18  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015a18  08015a18  00025a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015a1c  08015a1c  00025a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08015a20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054c8  20000204  08015c24  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056cc  08015c24  000356cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004ee6b  00000000  00000000  00030277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a7a9  00000000  00000000  0007f0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001dfc3  00000000  00000000  0008988b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022a0  00000000  00000000  000a7850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00003ec3  00000000  00000000  000a9af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003152f  00000000  00000000  000ad9b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004fad4  00000000  00000000  000deee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00106f5b  00000000  00000000  0012e9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000090ac  00000000  00000000  00235914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0023e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080134e8 	.word	0x080134e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	080134e8 	.word	0x080134e8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	; 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	bf28      	it	cs
 8000d64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d68:	d2ed      	bcs.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_ldivmod>:
 8000ec4:	b97b      	cbnz	r3, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec6:	b972      	cbnz	r2, 8000ee6 <__aeabi_ldivmod+0x22>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bfbe      	ittt	lt
 8000ecc:	2000      	movlt	r0, #0
 8000ece:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ed2:	e006      	blt.n	8000ee2 <__aeabi_ldivmod+0x1e>
 8000ed4:	bf08      	it	eq
 8000ed6:	2800      	cmpeq	r0, #0
 8000ed8:	bf1c      	itt	ne
 8000eda:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ede:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee2:	f000 b9f1 	b.w	80012c8 <__aeabi_idiv0>
 8000ee6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eee:	2900      	cmp	r1, #0
 8000ef0:	db09      	blt.n	8000f06 <__aeabi_ldivmod+0x42>
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db1a      	blt.n	8000f2c <__aeabi_ldivmod+0x68>
 8000ef6:	f000 f883 	bl	8001000 <__udivmoddi4>
 8000efa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f02:	b004      	add	sp, #16
 8000f04:	4770      	bx	lr
 8000f06:	4240      	negs	r0, r0
 8000f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db1b      	blt.n	8000f48 <__aeabi_ldivmod+0x84>
 8000f10:	f000 f876 	bl	8001000 <__udivmoddi4>
 8000f14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1c:	b004      	add	sp, #16
 8000f1e:	4240      	negs	r0, r0
 8000f20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f24:	4252      	negs	r2, r2
 8000f26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2a:	4770      	bx	lr
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f32:	f000 f865 	bl	8001000 <__udivmoddi4>
 8000f36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3e:	b004      	add	sp, #16
 8000f40:	4240      	negs	r0, r0
 8000f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f46:	4770      	bx	lr
 8000f48:	4252      	negs	r2, r2
 8000f4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4e:	f000 f857 	bl	8001000 <__udivmoddi4>
 8000f52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5a:	b004      	add	sp, #16
 8000f5c:	4252      	negs	r2, r2
 8000f5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f62:	4770      	bx	lr

08000f64 <__aeabi_uldivmod>:
 8000f64:	b953      	cbnz	r3, 8000f7c <__aeabi_uldivmod+0x18>
 8000f66:	b94a      	cbnz	r2, 8000f7c <__aeabi_uldivmod+0x18>
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	bf08      	it	eq
 8000f6c:	2800      	cmpeq	r0, #0
 8000f6e:	bf1c      	itt	ne
 8000f70:	f04f 31ff 	movne.w	r1, #4294967295
 8000f74:	f04f 30ff 	movne.w	r0, #4294967295
 8000f78:	f000 b9a6 	b.w	80012c8 <__aeabi_idiv0>
 8000f7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f84:	f000 f83c 	bl	8001000 <__udivmoddi4>
 8000f88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr

08000f94 <__aeabi_d2lz>:
 8000f94:	b538      	push	{r3, r4, r5, lr}
 8000f96:	2200      	movs	r2, #0
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	460d      	mov	r5, r1
 8000f9e:	f7ff fdad 	bl	8000afc <__aeabi_dcmplt>
 8000fa2:	b928      	cbnz	r0, 8000fb0 <__aeabi_d2lz+0x1c>
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	4629      	mov	r1, r5
 8000fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fac:	f000 b80a 	b.w	8000fc4 <__aeabi_d2ulz>
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000fb6:	f000 f805 	bl	8000fc4 <__aeabi_d2ulz>
 8000fba:	4240      	negs	r0, r0
 8000fbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_d2ulz>:
 8000fc4:	b5d0      	push	{r4, r6, r7, lr}
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__aeabi_d2ulz+0x34>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	4606      	mov	r6, r0
 8000fcc:	460f      	mov	r7, r1
 8000fce:	f7ff fb23 	bl	8000618 <__aeabi_dmul>
 8000fd2:	f7ff fdf9 	bl	8000bc8 <__aeabi_d2uiz>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	f7ff faa4 	bl	8000524 <__aeabi_ui2d>
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <__aeabi_d2ulz+0x38>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f7ff fb1a 	bl	8000618 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4630      	mov	r0, r6
 8000fea:	4639      	mov	r1, r7
 8000fec:	f7ff f95c 	bl	80002a8 <__aeabi_dsub>
 8000ff0:	f7ff fdea 	bl	8000bc8 <__aeabi_d2uiz>
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ff8:	3df00000 	.word	0x3df00000
 8000ffc:	41f00000 	.word	0x41f00000

08001000 <__udivmoddi4>:
 8001000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001004:	9e08      	ldr	r6, [sp, #32]
 8001006:	460d      	mov	r5, r1
 8001008:	4604      	mov	r4, r0
 800100a:	460f      	mov	r7, r1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d14a      	bne.n	80010a6 <__udivmoddi4+0xa6>
 8001010:	428a      	cmp	r2, r1
 8001012:	4694      	mov	ip, r2
 8001014:	d965      	bls.n	80010e2 <__udivmoddi4+0xe2>
 8001016:	fab2 f382 	clz	r3, r2
 800101a:	b143      	cbz	r3, 800102e <__udivmoddi4+0x2e>
 800101c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001020:	f1c3 0220 	rsb	r2, r3, #32
 8001024:	409f      	lsls	r7, r3
 8001026:	fa20 f202 	lsr.w	r2, r0, r2
 800102a:	4317      	orrs	r7, r2
 800102c:	409c      	lsls	r4, r3
 800102e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001032:	fa1f f58c 	uxth.w	r5, ip
 8001036:	fbb7 f1fe 	udiv	r1, r7, lr
 800103a:	0c22      	lsrs	r2, r4, #16
 800103c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001040:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001044:	fb01 f005 	mul.w	r0, r1, r5
 8001048:	4290      	cmp	r0, r2
 800104a:	d90a      	bls.n	8001062 <__udivmoddi4+0x62>
 800104c:	eb1c 0202 	adds.w	r2, ip, r2
 8001050:	f101 37ff 	add.w	r7, r1, #4294967295
 8001054:	f080 811c 	bcs.w	8001290 <__udivmoddi4+0x290>
 8001058:	4290      	cmp	r0, r2
 800105a:	f240 8119 	bls.w	8001290 <__udivmoddi4+0x290>
 800105e:	3902      	subs	r1, #2
 8001060:	4462      	add	r2, ip
 8001062:	1a12      	subs	r2, r2, r0
 8001064:	b2a4      	uxth	r4, r4
 8001066:	fbb2 f0fe 	udiv	r0, r2, lr
 800106a:	fb0e 2210 	mls	r2, lr, r0, r2
 800106e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001072:	fb00 f505 	mul.w	r5, r0, r5
 8001076:	42a5      	cmp	r5, r4
 8001078:	d90a      	bls.n	8001090 <__udivmoddi4+0x90>
 800107a:	eb1c 0404 	adds.w	r4, ip, r4
 800107e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001082:	f080 8107 	bcs.w	8001294 <__udivmoddi4+0x294>
 8001086:	42a5      	cmp	r5, r4
 8001088:	f240 8104 	bls.w	8001294 <__udivmoddi4+0x294>
 800108c:	4464      	add	r4, ip
 800108e:	3802      	subs	r0, #2
 8001090:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001094:	1b64      	subs	r4, r4, r5
 8001096:	2100      	movs	r1, #0
 8001098:	b11e      	cbz	r6, 80010a2 <__udivmoddi4+0xa2>
 800109a:	40dc      	lsrs	r4, r3
 800109c:	2300      	movs	r3, #0
 800109e:	e9c6 4300 	strd	r4, r3, [r6]
 80010a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a6:	428b      	cmp	r3, r1
 80010a8:	d908      	bls.n	80010bc <__udivmoddi4+0xbc>
 80010aa:	2e00      	cmp	r6, #0
 80010ac:	f000 80ed 	beq.w	800128a <__udivmoddi4+0x28a>
 80010b0:	2100      	movs	r1, #0
 80010b2:	e9c6 0500 	strd	r0, r5, [r6]
 80010b6:	4608      	mov	r0, r1
 80010b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010bc:	fab3 f183 	clz	r1, r3
 80010c0:	2900      	cmp	r1, #0
 80010c2:	d149      	bne.n	8001158 <__udivmoddi4+0x158>
 80010c4:	42ab      	cmp	r3, r5
 80010c6:	d302      	bcc.n	80010ce <__udivmoddi4+0xce>
 80010c8:	4282      	cmp	r2, r0
 80010ca:	f200 80f8 	bhi.w	80012be <__udivmoddi4+0x2be>
 80010ce:	1a84      	subs	r4, r0, r2
 80010d0:	eb65 0203 	sbc.w	r2, r5, r3
 80010d4:	2001      	movs	r0, #1
 80010d6:	4617      	mov	r7, r2
 80010d8:	2e00      	cmp	r6, #0
 80010da:	d0e2      	beq.n	80010a2 <__udivmoddi4+0xa2>
 80010dc:	e9c6 4700 	strd	r4, r7, [r6]
 80010e0:	e7df      	b.n	80010a2 <__udivmoddi4+0xa2>
 80010e2:	b902      	cbnz	r2, 80010e6 <__udivmoddi4+0xe6>
 80010e4:	deff      	udf	#255	; 0xff
 80010e6:	fab2 f382 	clz	r3, r2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 8090 	bne.w	8001210 <__udivmoddi4+0x210>
 80010f0:	1a8a      	subs	r2, r1, r2
 80010f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f6:	fa1f fe8c 	uxth.w	lr, ip
 80010fa:	2101      	movs	r1, #1
 80010fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8001100:	fb07 2015 	mls	r0, r7, r5, r2
 8001104:	0c22      	lsrs	r2, r4, #16
 8001106:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800110a:	fb0e f005 	mul.w	r0, lr, r5
 800110e:	4290      	cmp	r0, r2
 8001110:	d908      	bls.n	8001124 <__udivmoddi4+0x124>
 8001112:	eb1c 0202 	adds.w	r2, ip, r2
 8001116:	f105 38ff 	add.w	r8, r5, #4294967295
 800111a:	d202      	bcs.n	8001122 <__udivmoddi4+0x122>
 800111c:	4290      	cmp	r0, r2
 800111e:	f200 80cb 	bhi.w	80012b8 <__udivmoddi4+0x2b8>
 8001122:	4645      	mov	r5, r8
 8001124:	1a12      	subs	r2, r2, r0
 8001126:	b2a4      	uxth	r4, r4
 8001128:	fbb2 f0f7 	udiv	r0, r2, r7
 800112c:	fb07 2210 	mls	r2, r7, r0, r2
 8001130:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001134:	fb0e fe00 	mul.w	lr, lr, r0
 8001138:	45a6      	cmp	lr, r4
 800113a:	d908      	bls.n	800114e <__udivmoddi4+0x14e>
 800113c:	eb1c 0404 	adds.w	r4, ip, r4
 8001140:	f100 32ff 	add.w	r2, r0, #4294967295
 8001144:	d202      	bcs.n	800114c <__udivmoddi4+0x14c>
 8001146:	45a6      	cmp	lr, r4
 8001148:	f200 80bb 	bhi.w	80012c2 <__udivmoddi4+0x2c2>
 800114c:	4610      	mov	r0, r2
 800114e:	eba4 040e 	sub.w	r4, r4, lr
 8001152:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001156:	e79f      	b.n	8001098 <__udivmoddi4+0x98>
 8001158:	f1c1 0720 	rsb	r7, r1, #32
 800115c:	408b      	lsls	r3, r1
 800115e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001162:	ea4c 0c03 	orr.w	ip, ip, r3
 8001166:	fa05 f401 	lsl.w	r4, r5, r1
 800116a:	fa20 f307 	lsr.w	r3, r0, r7
 800116e:	40fd      	lsrs	r5, r7
 8001170:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001174:	4323      	orrs	r3, r4
 8001176:	fbb5 f8f9 	udiv	r8, r5, r9
 800117a:	fa1f fe8c 	uxth.w	lr, ip
 800117e:	fb09 5518 	mls	r5, r9, r8, r5
 8001182:	0c1c      	lsrs	r4, r3, #16
 8001184:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001188:	fb08 f50e 	mul.w	r5, r8, lr
 800118c:	42a5      	cmp	r5, r4
 800118e:	fa02 f201 	lsl.w	r2, r2, r1
 8001192:	fa00 f001 	lsl.w	r0, r0, r1
 8001196:	d90b      	bls.n	80011b0 <__udivmoddi4+0x1b0>
 8001198:	eb1c 0404 	adds.w	r4, ip, r4
 800119c:	f108 3aff 	add.w	sl, r8, #4294967295
 80011a0:	f080 8088 	bcs.w	80012b4 <__udivmoddi4+0x2b4>
 80011a4:	42a5      	cmp	r5, r4
 80011a6:	f240 8085 	bls.w	80012b4 <__udivmoddi4+0x2b4>
 80011aa:	f1a8 0802 	sub.w	r8, r8, #2
 80011ae:	4464      	add	r4, ip
 80011b0:	1b64      	subs	r4, r4, r5
 80011b2:	b29d      	uxth	r5, r3
 80011b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80011b8:	fb09 4413 	mls	r4, r9, r3, r4
 80011bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80011c4:	45a6      	cmp	lr, r4
 80011c6:	d908      	bls.n	80011da <__udivmoddi4+0x1da>
 80011c8:	eb1c 0404 	adds.w	r4, ip, r4
 80011cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80011d0:	d26c      	bcs.n	80012ac <__udivmoddi4+0x2ac>
 80011d2:	45a6      	cmp	lr, r4
 80011d4:	d96a      	bls.n	80012ac <__udivmoddi4+0x2ac>
 80011d6:	3b02      	subs	r3, #2
 80011d8:	4464      	add	r4, ip
 80011da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011de:	fba3 9502 	umull	r9, r5, r3, r2
 80011e2:	eba4 040e 	sub.w	r4, r4, lr
 80011e6:	42ac      	cmp	r4, r5
 80011e8:	46c8      	mov	r8, r9
 80011ea:	46ae      	mov	lr, r5
 80011ec:	d356      	bcc.n	800129c <__udivmoddi4+0x29c>
 80011ee:	d053      	beq.n	8001298 <__udivmoddi4+0x298>
 80011f0:	b156      	cbz	r6, 8001208 <__udivmoddi4+0x208>
 80011f2:	ebb0 0208 	subs.w	r2, r0, r8
 80011f6:	eb64 040e 	sbc.w	r4, r4, lr
 80011fa:	fa04 f707 	lsl.w	r7, r4, r7
 80011fe:	40ca      	lsrs	r2, r1
 8001200:	40cc      	lsrs	r4, r1
 8001202:	4317      	orrs	r7, r2
 8001204:	e9c6 7400 	strd	r7, r4, [r6]
 8001208:	4618      	mov	r0, r3
 800120a:	2100      	movs	r1, #0
 800120c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001210:	f1c3 0120 	rsb	r1, r3, #32
 8001214:	fa02 fc03 	lsl.w	ip, r2, r3
 8001218:	fa20 f201 	lsr.w	r2, r0, r1
 800121c:	fa25 f101 	lsr.w	r1, r5, r1
 8001220:	409d      	lsls	r5, r3
 8001222:	432a      	orrs	r2, r5
 8001224:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001228:	fa1f fe8c 	uxth.w	lr, ip
 800122c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001230:	fb07 1510 	mls	r5, r7, r0, r1
 8001234:	0c11      	lsrs	r1, r2, #16
 8001236:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800123a:	fb00 f50e 	mul.w	r5, r0, lr
 800123e:	428d      	cmp	r5, r1
 8001240:	fa04 f403 	lsl.w	r4, r4, r3
 8001244:	d908      	bls.n	8001258 <__udivmoddi4+0x258>
 8001246:	eb1c 0101 	adds.w	r1, ip, r1
 800124a:	f100 38ff 	add.w	r8, r0, #4294967295
 800124e:	d22f      	bcs.n	80012b0 <__udivmoddi4+0x2b0>
 8001250:	428d      	cmp	r5, r1
 8001252:	d92d      	bls.n	80012b0 <__udivmoddi4+0x2b0>
 8001254:	3802      	subs	r0, #2
 8001256:	4461      	add	r1, ip
 8001258:	1b49      	subs	r1, r1, r5
 800125a:	b292      	uxth	r2, r2
 800125c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001260:	fb07 1115 	mls	r1, r7, r5, r1
 8001264:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001268:	fb05 f10e 	mul.w	r1, r5, lr
 800126c:	4291      	cmp	r1, r2
 800126e:	d908      	bls.n	8001282 <__udivmoddi4+0x282>
 8001270:	eb1c 0202 	adds.w	r2, ip, r2
 8001274:	f105 38ff 	add.w	r8, r5, #4294967295
 8001278:	d216      	bcs.n	80012a8 <__udivmoddi4+0x2a8>
 800127a:	4291      	cmp	r1, r2
 800127c:	d914      	bls.n	80012a8 <__udivmoddi4+0x2a8>
 800127e:	3d02      	subs	r5, #2
 8001280:	4462      	add	r2, ip
 8001282:	1a52      	subs	r2, r2, r1
 8001284:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001288:	e738      	b.n	80010fc <__udivmoddi4+0xfc>
 800128a:	4631      	mov	r1, r6
 800128c:	4630      	mov	r0, r6
 800128e:	e708      	b.n	80010a2 <__udivmoddi4+0xa2>
 8001290:	4639      	mov	r1, r7
 8001292:	e6e6      	b.n	8001062 <__udivmoddi4+0x62>
 8001294:	4610      	mov	r0, r2
 8001296:	e6fb      	b.n	8001090 <__udivmoddi4+0x90>
 8001298:	4548      	cmp	r0, r9
 800129a:	d2a9      	bcs.n	80011f0 <__udivmoddi4+0x1f0>
 800129c:	ebb9 0802 	subs.w	r8, r9, r2
 80012a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012a4:	3b01      	subs	r3, #1
 80012a6:	e7a3      	b.n	80011f0 <__udivmoddi4+0x1f0>
 80012a8:	4645      	mov	r5, r8
 80012aa:	e7ea      	b.n	8001282 <__udivmoddi4+0x282>
 80012ac:	462b      	mov	r3, r5
 80012ae:	e794      	b.n	80011da <__udivmoddi4+0x1da>
 80012b0:	4640      	mov	r0, r8
 80012b2:	e7d1      	b.n	8001258 <__udivmoddi4+0x258>
 80012b4:	46d0      	mov	r8, sl
 80012b6:	e77b      	b.n	80011b0 <__udivmoddi4+0x1b0>
 80012b8:	3d02      	subs	r5, #2
 80012ba:	4462      	add	r2, ip
 80012bc:	e732      	b.n	8001124 <__udivmoddi4+0x124>
 80012be:	4608      	mov	r0, r1
 80012c0:	e70a      	b.n	80010d8 <__udivmoddi4+0xd8>
 80012c2:	4464      	add	r4, ip
 80012c4:	3802      	subs	r0, #2
 80012c6:	e742      	b.n	800114e <__udivmoddi4+0x14e>

080012c8 <__aeabi_idiv0>:
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <Calc_config_crc>:
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
	return crc;
}

void Calc_config_crc(void)		// aktualizacja CRC struktury config
{
 80012cc:	b510      	push	{r4, lr}
	config.checksum = 0xFFFF;
 80012ce:	4c0f      	ldr	r4, [pc, #60]	; (800130c <Calc_config_crc+0x40>)
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 80012d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80012dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
	uint8_t *p = (uint8_t*)&config;
 80012e0:	4621      	mov	r1, r4
 80012e2:	f104 0e3b 	add.w	lr, r4, #59	; 0x3b
	uint8_t x = crc >> 8 ^ data;
 80012e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012ea:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80012ee:	ea83 1c13 	eor.w	ip, r3, r3, lsr #4
 80012f2:	ea4f 124c 	mov.w	r2, ip, lsl #5
 80012f6:	ea4c 2300 	orr.w	r3, ip, r0, lsl #8
 80012fa:	ea82 320c 	eor.w	r2, r2, ip, lsl #12
 80012fe:	4053      	eors	r3, r2
	for(int i=0; i<sizeof(config)-2; ++i) config.checksum = Crc16_up(config.checksum, *p++);
 8001300:	4571      	cmp	r1, lr
 8001302:	f8a4 303b 	strh.w	r3, [r4, #59]	; 0x3b
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001306:	b298      	uxth	r0, r3
	for(int i=0; i<sizeof(config)-2; ++i) config.checksum = Crc16_up(config.checksum, *p++);
 8001308:	d1ed      	bne.n	80012e6 <Calc_config_crc+0x1a>
}
 800130a:	bd10      	pop	{r4, pc}
 800130c:	2000137c 	.word	0x2000137c

08001310 <Flash_write_block>:

#define ADDR_FLASH_PAGE_0   ((uint32_t)0x08000000) /* Base @ of Page 0, 2 Kbytes */
#define FLASH_PAGE_ADDRESS 	(ADDR_FLASH_PAGE_0 | (FLASH_PAGE_SIZE * USE_FLASH_PAGE))

uint8_t Flash_write_block(uint32_t blk, uint8_t *buff, uint32_t len)
{
 8001310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001314:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 8001316:	2400      	movs	r4, #0
{
 8001318:	4607      	mov	r7, r0
 800131a:	460d      	mov	r5, r1
 800131c:	4691      	mov	r9, r2
	uint32_t PAGEError = 0;
 800131e:	9401      	str	r4, [sp, #4]
//	WDR();
	HAL_FLASH_Unlock();
 8001320:	f008 fab0 	bl	8009884 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001324:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <Flash_write_block+0xa0>)
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	f24c 31fa 	movw	r1, #50170	; 0xc3fa
 800132c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001330:	619a      	str	r2, [r3, #24]
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
	EraseInitStruct.Banks       = FLASH_BANK_1;
	EraseInitStruct.Page        = blk;                                  // 2kb page
	EraseInitStruct.NbPages     = 1;
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001332:	a802      	add	r0, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001334:	6119      	str	r1, [r3, #16]
	EraseInitStruct.Banks       = FLASH_BANK_1;
 8001336:	2301      	movs	r3, #1
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001338:	a901      	add	r1, sp, #4
	EraseInitStruct.Banks       = FLASH_BANK_1;
 800133a:	e9cd 4302 	strd	r4, r3, [sp, #8]
	EraseInitStruct.NbPages     = 1;
 800133e:	e9cd 7304 	strd	r7, r3, [sp, #16]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001342:	f008 fb85 	bl	8009a50 <HAL_FLASHEx_Erase>
 8001346:	bb40      	cbnz	r0, 800139a <Flash_write_block+0x8a>
		return 0;
	}
    blk *= FLASH_PAGE_SIZE;
    blk += ADDR_FLASH_PAGE_0;
	uint64_t data64;
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 8001348:	ebc5 27c7 	rsb	r7, r5, r7, lsl #11
 800134c:	f107 6700 	add.w	r7, r7, #134217728	; 0x8000000
 8001350:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8001354:	4606      	mov	r6, r0
 8001356:	3f08      	subs	r7, #8
 8001358:	e002      	b.n	8001360 <Flash_write_block+0x50>
 800135a:	45b1      	cmp	r9, r6
 800135c:	d017      	beq.n	800138e <Flash_write_block+0x7e>
 800135e:	461e      	mov	r6, r3
    {
        data64 = *(uint64_t*)buff;
 8001360:	e8f5 2302 	ldrd	r2, r3, [r5], #8
        buff += 8;
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 8001364:	eb05 0807 	add.w	r8, r5, r7
 8001368:	2000      	movs	r0, #0
 800136a:	4641      	mov	r1, r8
 800136c:	f008 fad4 	bl	8009918 <HAL_FLASH_Program>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 8001370:	1c73      	adds	r3, r6, #1
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 8001372:	4604      	mov	r4, r0
 8001374:	2800      	cmp	r0, #0
 8001376:	d0f0      	beq.n	800135a <Flash_write_block+0x4a>
        {
            HAL_FLASH_Lock();
 8001378:	f008 fa98 	bl	80098ac <HAL_FLASH_Lock>
//            HAL_IWDG_Refresh(&hiwdg);
            printf("Programming error at %X\r\n",(unsigned int)(8*i + blk));
 800137c:	4641      	mov	r1, r8
 800137e:	480d      	ldr	r0, [pc, #52]	; (80013b4 <Flash_write_block+0xa4>)
 8001380:	f00e fdd0 	bl	800ff24 <iprintf>
            return 1;                               // blad
 8001384:	2401      	movs	r4, #1
        }
    }
	HAL_FLASH_Lock();
//	WDR();
	return 0;										// OK
}
 8001386:	4620      	mov	r0, r4
 8001388:	b007      	add	sp, #28
 800138a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	HAL_FLASH_Lock();
 800138e:	f008 fa8d 	bl	80098ac <HAL_FLASH_Lock>
}
 8001392:	4620      	mov	r0, r4
 8001394:	b007      	add	sp, #28
 8001396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		HAL_FLASH_Lock();			// blad kasowania
 800139a:	f008 fa87 	bl	80098ac <HAL_FLASH_Lock>
		printf("Erase error at %u\r\n", (int)blk);
 800139e:	4639      	mov	r1, r7
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <Flash_write_block+0xa8>)
 80013a2:	f00e fdbf 	bl	800ff24 <iprintf>
}
 80013a6:	4620      	mov	r0, r4
 80013a8:	b007      	add	sp, #28
 80013aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ae:	bf00      	nop
 80013b0:	40022000 	.word	0x40022000
 80013b4:	08013570 	.word	0x08013570
 80013b8:	0801355c 	.word	0x0801355c

080013bc <Save_config>:
    adr += (FLASH_PAGE_SIZE * USE_FLASH_PAGE);
    Flash_read(adr, data, size);
}

uint8_t Save_config(void)
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
    uint8_t err = 0;
    uint16_t oldcrc = config.checksum;
 80013be:	4e12      	ldr	r6, [pc, #72]	; (8001408 <Save_config+0x4c>)
 80013c0:	f8b6 403b 	ldrh.w	r4, [r6, #59]	; 0x3b
    Calc_config_crc();
 80013c4:	f7ff ff82 	bl	80012cc <Calc_config_crc>
    if(config.checksum != oldcrc)
 80013c8:	f8b6 303b 	ldrh.w	r3, [r6, #59]	; 0x3b
 80013cc:	42a3      	cmp	r3, r4
 80013ce:	d101      	bne.n	80013d4 <Save_config+0x18>
    uint8_t err = 0;
 80013d0:	2000      	movs	r0, #0
        err  = FLASH_write_block(0, p, sizeof(config));     // zapisz do 1 kopii
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
        err++;
    }
    return err;         // 0=NotNeed, 1=OK, 2=blad
}
 80013d2:	bd70      	pop	{r4, r5, r6, pc}
 80013d4:	2504      	movs	r5, #4
        err =  Flash_write_block(adr, buff, len);
 80013d6:	223d      	movs	r2, #61	; 0x3d
 80013d8:	4631      	mov	r1, r6
 80013da:	207e      	movs	r0, #126	; 0x7e
 80013dc:	f7ff ff98 	bl	8001310 <Flash_write_block>
        if(err == 0) break;
 80013e0:	4604      	mov	r4, r0
 80013e2:	b108      	cbz	r0, 80013e8 <Save_config+0x2c>
    for(int i=0; i<4; ++i)
 80013e4:	3d01      	subs	r5, #1
 80013e6:	d1f6      	bne.n	80013d6 <Save_config+0x1a>
        err =  Flash_write_block(adr, buff, len);
 80013e8:	4e07      	ldr	r6, [pc, #28]	; (8001408 <Save_config+0x4c>)
 80013ea:	2504      	movs	r5, #4
 80013ec:	223d      	movs	r2, #61	; 0x3d
 80013ee:	4631      	mov	r1, r6
 80013f0:	207f      	movs	r0, #127	; 0x7f
 80013f2:	f7ff ff8d 	bl	8001310 <Flash_write_block>
        if(err == 0) break;
 80013f6:	b118      	cbz	r0, 8001400 <Save_config+0x44>
    for(int i=0; i<4; ++i)
 80013f8:	3d01      	subs	r5, #1
 80013fa:	d1f7      	bne.n	80013ec <Save_config+0x30>
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
 80013fc:	4320      	orrs	r0, r4
 80013fe:	b2c4      	uxtb	r4, r0
        err++;
 8001400:	1c60      	adds	r0, r4, #1
 8001402:	b2c0      	uxtb	r0, r0
}
 8001404:	bd70      	pop	{r4, r5, r6, pc}
 8001406:	bf00      	nop
 8001408:	2000137c 	.word	0x2000137c

0800140c <Load_defaults>:
    }
    return 0;                                                   // config OK
}

void Load_defaults()
{
 800140c:	b510      	push	{r4, lr}
	memset((uint8_t*)&config, 0, sizeof(config));
 800140e:	4c15      	ldr	r4, [pc, #84]	; (8001464 <Load_defaults+0x58>)
 8001410:	2239      	movs	r2, #57	; 0x39
 8001412:	2100      	movs	r1, #0
 8001414:	4620      	mov	r0, r4
 8001416:	f00e ff19 	bl	801024c <memset>

	config.version = CONFIG_VERSION;
	config.bat_scale = 0.0505f;
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <Load_defaults+0x5c>)
 800141c:	f844 2c03 	str.w	r2, [r4, #-3]
	config.version = CONFIG_VERSION;
 8001420:	1f23      	subs	r3, r4, #4
 8001422:	2101      	movs	r1, #1
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 8001424:	2000      	movs	r0, #0
	config.reset_state = 0;
	config.disp_type = TXT;
 8001426:	f04f 0200 	mov.w	r2, #0
	config.tim_interval = 8;
 800142a:	7160      	strb	r0, [r4, #5]
	config.disp_type = TXT;
 800142c:	f361 0243 	bfi	r2, r1, #1, #3
	config.version = CONFIG_VERSION;
 8001430:	f804 1c04 	strb.w	r1, [r4, #-4]
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 8001434:	f06f 001b 	mvn.w	r0, #27
 8001438:	240c      	movs	r4, #12
	config.tim_interval = 8;
 800143a:	2108      	movs	r1, #8
	config.TMP117_use = 1;
 800143c:	f04f 0c23 	mov.w	ip, #35	; 0x23
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 8001440:	719c      	strb	r4, [r3, #6]
 8001442:	7158      	strb	r0, [r3, #5]
	config.disp_type = TXT;
 8001444:	71da      	strb	r2, [r3, #7]
	config.TMP117_conf = 1;
	config.TMP117_t_use = 1;
	config.TMP117_t_offset = 0.0f;
	config.SHT3_use = 1;
 8001446:	2441      	movs	r4, #65	; 0x41
	config.SHT3_conf = 0;
	config.SHT3_t_use = 0;
	config.SHT3_h_use = 1;
	config.SHT3_t_offset = 0.0f;
	config.SHT3_h_offset = 0.0f;
	config.MS8607_use = 1;
 8001448:	20e7      	movs	r0, #231	; 0xe7
	config.tim_interval = 8;
 800144a:	7219      	strb	r1, [r3, #8]
	config.BME280_h_use = 1;
	config.BME280_p_use = 1;
	config.BME280_t_offset = 0.0f;
	config.BME280_h_offset = 0.0f;
	config.BME280_p_offset = 0.0f;
	config.DPS368_use = 1;
 800144c:	2271      	movs	r2, #113	; 0x71
	config.BME280_use = 1;
 800144e:	21f5      	movs	r1, #245	; 0xf5
	config.TMP117_use = 1;
 8001450:	f883 c00a 	strb.w	ip, [r3, #10]
	config.SHT3_use = 1;
 8001454:	73dc      	strb	r4, [r3, #15]
	config.MS8607_use = 1;
 8001456:	7618      	strb	r0, [r3, #24]
	config.BME280_use = 1;
 8001458:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
	config.DPS368_use = 1;
 800145c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	config.DPS368_conf = 8;
	config.DPS368_t_use = 1;
	config.DPS368_p_use = 1;
	config.DPS368_t_offset = 0.0f;
	config.DPS368_p_offset = 0.0f;
}
 8001460:	bd10      	pop	{r4, pc}
 8001462:	bf00      	nop
 8001464:	20001380 	.word	0x20001380
 8001468:	3d4ed917 	.word	0x3d4ed917

0800146c <Load_config>:
{
 800146c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001470:	4c42      	ldr	r4, [pc, #264]	; (800157c <Load_config+0x110>)
 8001472:	f1c4 6000 	rsb	r0, r4, #134217728	; 0x8000000
 8001476:	f104 0c01 	add.w	ip, r4, #1
 800147a:	f104 013d 	add.w	r1, r4, #61	; 0x3d
 800147e:	4623      	mov	r3, r4
 8001480:	f500 307c 	add.w	r0, r0, #258048	; 0x3f000
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 8001484:	5c1a      	ldrb	r2, [r3, r0]
 8001486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800148a:	4299      	cmp	r1, r3
 800148c:	d1fa      	bne.n	8001484 <Load_config+0x18>
    uint8_t *p = (uint8_t*)&config;
 800148e:	4e3c      	ldr	r6, [pc, #240]	; (8001580 <Load_config+0x114>)
    uint16_t chk = 0xFFFF;
 8001490:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8001494:	f106 023b 	add.w	r2, r6, #59	; 0x3b
	uint8_t x = crc >> 8 ^ data;
 8001498:	f816 3b01 	ldrb.w	r3, [r6], #1
 800149c:	ea83 231e 	eor.w	r3, r3, lr, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80014a0:	ea83 1713 	eor.w	r7, r3, r3, lsr #4
 80014a4:	017d      	lsls	r5, r7, #5
 80014a6:	ea47 230e 	orr.w	r3, r7, lr, lsl #8
 80014aa:	ea85 3507 	eor.w	r5, r5, r7, lsl #12
 80014ae:	406b      	eors	r3, r5
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014b0:	4296      	cmp	r6, r2
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80014b2:	fa1f fe83 	uxth.w	lr, r3
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014b6:	d1ef      	bne.n	8001498 <Load_config+0x2c>
    if(chk == config.checksum) eepok |= 1;                      // zaznacz ze jest ok
 80014b8:	f8bc 603b 	ldrh.w	r6, [ip, #59]	; 0x3b
 80014bc:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001584 <Load_config+0x118>
    uint32_t eepok = 0;
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <Load_config+0x110>)
    if(chk == config.checksum) eepok |= 1;                      // zaznacz ze jest ok
 80014c2:	eba6 070e 	sub.w	r7, r6, lr
 80014c6:	fab7 f787 	clz	r7, r7
 80014ca:	eba8 080c 	sub.w	r8, r8, ip
 80014ce:	097f      	lsrs	r7, r7, #5
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 80014d0:	f818 5003 	ldrb.w	r5, [r8, r3]
 80014d4:	f803 5f01 	strb.w	r5, [r3, #1]!
 80014d8:	4299      	cmp	r1, r3
 80014da:	d1f9      	bne.n	80014d0 <Load_config+0x64>
    p = (uint8_t*)&config;
 80014dc:	4d28      	ldr	r5, [pc, #160]	; (8001580 <Load_config+0x114>)
    chk = 0xFFFF;
 80014de:	f64f 79ff 	movw	r9, #65535	; 0xffff
	uint8_t x = crc >> 8 ^ data;
 80014e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80014e6:	ea83 2319 	eor.w	r3, r3, r9, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80014ea:	ea83 1a13 	eor.w	sl, r3, r3, lsr #4
 80014ee:	ea4f 184a 	mov.w	r8, sl, lsl #5
 80014f2:	ea4a 2309 	orr.w	r3, sl, r9, lsl #8
 80014f6:	ea88 380a 	eor.w	r8, r8, sl, lsl #12
 80014fa:	ea88 0303 	eor.w	r3, r8, r3
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014fe:	4295      	cmp	r5, r2
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001500:	fa1f f983 	uxth.w	r9, r3
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 8001504:	d1ed      	bne.n	80014e2 <Load_config+0x76>
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 8001506:	f8bc 303b 	ldrh.w	r3, [ip, #59]	; 0x3b
 800150a:	454b      	cmp	r3, r9
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 800150c:	f815 3c3b 	ldrb.w	r3, [r5, #-59]
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 8001510:	d01f      	beq.n	8001552 <Load_config+0xe6>
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <Load_config+0xae>
    switch(eepok)
 8001516:	4576      	cmp	r6, lr
 8001518:	d008      	beq.n	800152c <Load_config+0xc0>
            Load_defaults();
 800151a:	f7ff ff77 	bl	800140c <Load_defaults>
            eepok = Save_config();
 800151e:	f7ff ff4d 	bl	80013bc <Save_config>
            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 8001522:	2801      	cmp	r0, #1
 8001524:	d912      	bls.n	800154c <Load_config+0xe0>
 8001526:	2003      	movs	r0, #3
}
 8001528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 800152c:	5d03      	ldrb	r3, [r0, r4]
 800152e:	f804 3f01 	strb.w	r3, [r4, #1]!
 8001532:	42a1      	cmp	r1, r4
 8001534:	d1fa      	bne.n	800152c <Load_config+0xc0>
        err =  Flash_write_block(adr, buff, len);
 8001536:	4d12      	ldr	r5, [pc, #72]	; (8001580 <Load_config+0x114>)
 8001538:	2404      	movs	r4, #4
 800153a:	223d      	movs	r2, #61	; 0x3d
 800153c:	4629      	mov	r1, r5
 800153e:	207f      	movs	r0, #127	; 0x7f
 8001540:	f7ff fee6 	bl	8001310 <Flash_write_block>
        if(err == 0) break;
 8001544:	b1b0      	cbz	r0, 8001574 <Load_config+0x108>
    for(int i=0; i<4; ++i)
 8001546:	3c01      	subs	r4, #1
 8001548:	d1f7      	bne.n	800153a <Load_config+0xce>
 800154a:	e7ec      	b.n	8001526 <Load_config+0xba>
            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 800154c:	2002      	movs	r0, #2
}
 800154e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 8001552:	2b01      	cmp	r3, #1
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 8001554:	f047 0702 	orr.w	r7, r7, #2
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 8001558:	d1df      	bne.n	800151a <Load_config+0xae>
    switch(eepok)
 800155a:	2f02      	cmp	r7, #2
 800155c:	d10a      	bne.n	8001574 <Load_config+0x108>
        err =  Flash_write_block(adr, buff, len);
 800155e:	4d08      	ldr	r5, [pc, #32]	; (8001580 <Load_config+0x114>)
    switch(eepok)
 8001560:	2404      	movs	r4, #4
        err =  Flash_write_block(adr, buff, len);
 8001562:	223d      	movs	r2, #61	; 0x3d
 8001564:	4629      	mov	r1, r5
 8001566:	207e      	movs	r0, #126	; 0x7e
 8001568:	f7ff fed2 	bl	8001310 <Flash_write_block>
        if(err == 0) break;
 800156c:	b110      	cbz	r0, 8001574 <Load_config+0x108>
    for(int i=0; i<4; ++i)
 800156e:	3c01      	subs	r4, #1
 8001570:	d1f7      	bne.n	8001562 <Load_config+0xf6>
 8001572:	e7d8      	b.n	8001526 <Load_config+0xba>
    switch(eepok)
 8001574:	2000      	movs	r0, #0
}
 8001576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800157a:	bf00      	nop
 800157c:	2000137b 	.word	0x2000137b
 8001580:	2000137c 	.word	0x2000137c
 8001584:	0803f801 	.word	0x0803f801

08001588 <EEPROM_Print_config>:

void EEPROM_Print_config(void)
{
 8001588:	b570      	push	{r4, r5, r6, lr}
	printf("================================= \r\n");
 800158a:	4e9d      	ldr	r6, [pc, #628]	; (8001800 <EEPROM_Print_config+0x278>)
	printf("Config version: %i \r\n", config.version);
 800158c:	4c9d      	ldr	r4, [pc, #628]	; (8001804 <EEPROM_Print_config+0x27c>)
	printf("Battery scale: %f \r\n", config.bat_scale);
	printf("Low Batt alarm: %i \r\n", config.batt_alarm);
	printf("Meas interval: %i \r\n", config.tim_interval);
	printf("TMP117 sensor use %i %i \r\n", config.TMP117_use, TMP117.sensor_use);
 800158e:	4d9e      	ldr	r5, [pc, #632]	; (8001808 <EEPROM_Print_config+0x280>)
	printf("================================= \r\n");
 8001590:	4630      	mov	r0, r6
 8001592:	f00e fd2d 	bl	800fff0 <puts>
	printf("Config version: %i \r\n", config.version);
 8001596:	7821      	ldrb	r1, [r4, #0]
 8001598:	489c      	ldr	r0, [pc, #624]	; (800180c <EEPROM_Print_config+0x284>)
 800159a:	f00e fcc3 	bl	800ff24 <iprintf>
	printf("Battery scale: %f \r\n", config.bat_scale);
 800159e:	f8d4 0001 	ldr.w	r0, [r4, #1]
 80015a2:	f7fe ffe1 	bl	8000568 <__aeabi_f2d>
 80015a6:	460b      	mov	r3, r1
 80015a8:	4602      	mov	r2, r0
 80015aa:	4899      	ldr	r0, [pc, #612]	; (8001810 <EEPROM_Print_config+0x288>)
 80015ac:	f00e fcba 	bl	800ff24 <iprintf>
	printf("Low Batt alarm: %i \r\n", config.batt_alarm);
 80015b0:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 80015b4:	4897      	ldr	r0, [pc, #604]	; (8001814 <EEPROM_Print_config+0x28c>)
 80015b6:	f00e fcb5 	bl	800ff24 <iprintf>
	printf("Meas interval: %i \r\n", config.tim_interval);
 80015ba:	8921      	ldrh	r1, [r4, #8]
 80015bc:	4896      	ldr	r0, [pc, #600]	; (8001818 <EEPROM_Print_config+0x290>)
 80015be:	f00e fcb1 	bl	800ff24 <iprintf>
	printf("TMP117 sensor use %i %i \r\n", config.TMP117_use, TMP117.sensor_use);
 80015c2:	782a      	ldrb	r2, [r5, #0]
 80015c4:	7aa1      	ldrb	r1, [r4, #10]
 80015c6:	4895      	ldr	r0, [pc, #596]	; (800181c <EEPROM_Print_config+0x294>)
 80015c8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80015cc:	f001 0101 	and.w	r1, r1, #1
 80015d0:	f00e fca8 	bl	800ff24 <iprintf>
	printf("TMP117 config %i %i \r\n", config.TMP117_conf, TMP117.sensor_conf);
 80015d4:	782a      	ldrb	r2, [r5, #0]
 80015d6:	7aa1      	ldrb	r1, [r4, #10]
 80015d8:	4891      	ldr	r0, [pc, #580]	; (8001820 <EEPROM_Print_config+0x298>)
 80015da:	f3c2 0283 	ubfx	r2, r2, #2, #4
 80015de:	f3c1 0143 	ubfx	r1, r1, #1, #4
 80015e2:	f00e fc9f 	bl	800ff24 <iprintf>
	printf("TMP117 temp meas %i %i \r\n", config.TMP117_t_use, TMP117.temp.use_meas);
 80015e6:	786a      	ldrb	r2, [r5, #1]
 80015e8:	7aa1      	ldrb	r1, [r4, #10]
 80015ea:	488e      	ldr	r0, [pc, #568]	; (8001824 <EEPROM_Print_config+0x29c>)
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);

	printf("SHTC3 sensor use %i %i \r\n", config.SHT3_use, SHT3.sensor_use);
 80015ec:	4d8e      	ldr	r5, [pc, #568]	; (8001828 <EEPROM_Print_config+0x2a0>)
	printf("TMP117 temp meas %i %i \r\n", config.TMP117_t_use, TMP117.temp.use_meas);
 80015ee:	f002 0201 	and.w	r2, r2, #1
 80015f2:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80015f6:	f00e fc95 	bl	800ff24 <iprintf>
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);
 80015fa:	f8d4 000b 	ldr.w	r0, [r4, #11]
 80015fe:	f7fe ffb3 	bl	8000568 <__aeabi_f2d>
 8001602:	460b      	mov	r3, r1
 8001604:	4602      	mov	r2, r0
 8001606:	4889      	ldr	r0, [pc, #548]	; (800182c <EEPROM_Print_config+0x2a4>)
 8001608:	f00e fc8c 	bl	800ff24 <iprintf>
	printf("SHTC3 sensor use %i %i \r\n", config.SHT3_use, SHT3.sensor_use);
 800160c:	7be1      	ldrb	r1, [r4, #15]
 800160e:	782a      	ldrb	r2, [r5, #0]
 8001610:	4887      	ldr	r0, [pc, #540]	; (8001830 <EEPROM_Print_config+0x2a8>)
 8001612:	f001 0101 	and.w	r1, r1, #1
 8001616:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800161a:	f00e fc83 	bl	800ff24 <iprintf>
	printf("SHTC3 config %i %i \r\n", config.SHT3_conf, SHT3.sensor_conf);
 800161e:	782a      	ldrb	r2, [r5, #0]
 8001620:	7be1      	ldrb	r1, [r4, #15]
 8001622:	4884      	ldr	r0, [pc, #528]	; (8001834 <EEPROM_Print_config+0x2ac>)
 8001624:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8001628:	f3c1 0143 	ubfx	r1, r1, #1, #4
 800162c:	f00e fc7a 	bl	800ff24 <iprintf>
	printf("SHTC3 temp meas %i %i \r\n", config.SHT3_t_use, SHT3.temp.use_meas);
 8001630:	786a      	ldrb	r2, [r5, #1]
 8001632:	7be1      	ldrb	r1, [r4, #15]
 8001634:	4880      	ldr	r0, [pc, #512]	; (8001838 <EEPROM_Print_config+0x2b0>)
 8001636:	f002 0201 	and.w	r2, r2, #1
 800163a:	f3c1 1140 	ubfx	r1, r1, #5, #1
 800163e:	f00e fc71 	bl	800ff24 <iprintf>
	printf("SHTC3 hum meas %i %i \r\n", config.SHT3_h_use, SHT3.hum.use_meas);
 8001642:	7aaa      	ldrb	r2, [r5, #10]
 8001644:	7be1      	ldrb	r1, [r4, #15]
 8001646:	487d      	ldr	r0, [pc, #500]	; (800183c <EEPROM_Print_config+0x2b4>)
	printf("SHTC3 temp offset: %f \r\n", config.SHT3_t_offset);
	printf("SHTC3 hum offset: %f \r\n", config.SHT3_h_offset);

	printf("MS8607 sensor use %i %i \r\n", config.MS8607_use, MS8607.sensor_use);
 8001648:	4d7d      	ldr	r5, [pc, #500]	; (8001840 <EEPROM_Print_config+0x2b8>)
	printf("SHTC3 hum meas %i %i \r\n", config.SHT3_h_use, SHT3.hum.use_meas);
 800164a:	f002 0201 	and.w	r2, r2, #1
 800164e:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8001652:	f00e fc67 	bl	800ff24 <iprintf>
	printf("SHTC3 temp offset: %f \r\n", config.SHT3_t_offset);
 8001656:	6920      	ldr	r0, [r4, #16]
 8001658:	f7fe ff86 	bl	8000568 <__aeabi_f2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4878      	ldr	r0, [pc, #480]	; (8001844 <EEPROM_Print_config+0x2bc>)
 8001662:	f00e fc5f 	bl	800ff24 <iprintf>
	printf("SHTC3 hum offset: %f \r\n", config.SHT3_h_offset);
 8001666:	6960      	ldr	r0, [r4, #20]
 8001668:	f7fe ff7e 	bl	8000568 <__aeabi_f2d>
 800166c:	460b      	mov	r3, r1
 800166e:	4602      	mov	r2, r0
 8001670:	4875      	ldr	r0, [pc, #468]	; (8001848 <EEPROM_Print_config+0x2c0>)
 8001672:	f00e fc57 	bl	800ff24 <iprintf>
	printf("MS8607 sensor use %i %i \r\n", config.MS8607_use, MS8607.sensor_use);
 8001676:	7e21      	ldrb	r1, [r4, #24]
 8001678:	782a      	ldrb	r2, [r5, #0]
 800167a:	4874      	ldr	r0, [pc, #464]	; (800184c <EEPROM_Print_config+0x2c4>)
 800167c:	f001 0101 	and.w	r1, r1, #1
 8001680:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001684:	f00e fc4e 	bl	800ff24 <iprintf>
	printf("MS8607 config %i %i \r\n", config.MS8607_conf, MS8607.sensor_conf);
 8001688:	782a      	ldrb	r2, [r5, #0]
 800168a:	7e21      	ldrb	r1, [r4, #24]
 800168c:	4870      	ldr	r0, [pc, #448]	; (8001850 <EEPROM_Print_config+0x2c8>)
 800168e:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8001692:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8001696:	f00e fc45 	bl	800ff24 <iprintf>
	printf("MS8607 temp meas %i %i \r\n", config.MS8607_t_use, MS8607.temp.use_meas);
 800169a:	786a      	ldrb	r2, [r5, #1]
 800169c:	7e21      	ldrb	r1, [r4, #24]
 800169e:	486d      	ldr	r0, [pc, #436]	; (8001854 <EEPROM_Print_config+0x2cc>)
 80016a0:	f002 0201 	and.w	r2, r2, #1
 80016a4:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80016a8:	f00e fc3c 	bl	800ff24 <iprintf>
	printf("MS8607 press meas %i %i \r\n", config.MS8607_p_use, MS8607.press.use_meas);
 80016ac:	7cea      	ldrb	r2, [r5, #19]
 80016ae:	7e21      	ldrb	r1, [r4, #24]
 80016b0:	4869      	ldr	r0, [pc, #420]	; (8001858 <EEPROM_Print_config+0x2d0>)
 80016b2:	f002 0201 	and.w	r2, r2, #1
 80016b6:	09c9      	lsrs	r1, r1, #7
 80016b8:	f00e fc34 	bl	800ff24 <iprintf>
	printf("MS8607 hum meas %i %i \r\n", config.MS8607_h_use, MS8607.hum.use_meas);
 80016bc:	7aaa      	ldrb	r2, [r5, #10]
 80016be:	7e21      	ldrb	r1, [r4, #24]
 80016c0:	4866      	ldr	r0, [pc, #408]	; (800185c <EEPROM_Print_config+0x2d4>)

	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);

	printf("BME280 sensor use %i %i \r\n", config.BME280_use, BME280.sensor_use);
 80016c2:	4d67      	ldr	r5, [pc, #412]	; (8001860 <EEPROM_Print_config+0x2d8>)
	printf("MS8607 hum meas %i %i \r\n", config.MS8607_h_use, MS8607.hum.use_meas);
 80016c4:	f002 0201 	and.w	r2, r2, #1
 80016c8:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80016cc:	f00e fc2a 	bl	800ff24 <iprintf>
	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
 80016d0:	f8d4 0019 	ldr.w	r0, [r4, #25]
 80016d4:	f7fe ff48 	bl	8000568 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4861      	ldr	r0, [pc, #388]	; (8001864 <EEPROM_Print_config+0x2dc>)
 80016de:	f00e fc21 	bl	800ff24 <iprintf>
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
 80016e2:	f8d4 0021 	ldr.w	r0, [r4, #33]	; 0x21
 80016e6:	f7fe ff3f 	bl	8000568 <__aeabi_f2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	485e      	ldr	r0, [pc, #376]	; (8001868 <EEPROM_Print_config+0x2e0>)
 80016f0:	f00e fc18 	bl	800ff24 <iprintf>
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);
 80016f4:	f8d4 001d 	ldr.w	r0, [r4, #29]
 80016f8:	f7fe ff36 	bl	8000568 <__aeabi_f2d>
 80016fc:	460b      	mov	r3, r1
 80016fe:	4602      	mov	r2, r0
 8001700:	485a      	ldr	r0, [pc, #360]	; (800186c <EEPROM_Print_config+0x2e4>)
 8001702:	f00e fc0f 	bl	800ff24 <iprintf>
	printf("BME280 sensor use %i %i \r\n", config.BME280_use, BME280.sensor_use);
 8001706:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 800170a:	782a      	ldrb	r2, [r5, #0]
 800170c:	4858      	ldr	r0, [pc, #352]	; (8001870 <EEPROM_Print_config+0x2e8>)
 800170e:	f001 0101 	and.w	r1, r1, #1
 8001712:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001716:	f00e fc05 	bl	800ff24 <iprintf>
	printf("BME280 temp meas %i %i \r\n", config.BME280_t_use, BME280.temp.use_meas);
 800171a:	786a      	ldrb	r2, [r5, #1]
 800171c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8001720:	4854      	ldr	r0, [pc, #336]	; (8001874 <EEPROM_Print_config+0x2ec>)
 8001722:	f002 0201 	and.w	r2, r2, #1
 8001726:	f3c1 1140 	ubfx	r1, r1, #5, #1
 800172a:	f00e fbfb 	bl	800ff24 <iprintf>
	printf("BME280 press meas %i %i \r\n", config.BME280_p_use, BME280.press.use_meas);
 800172e:	7cea      	ldrb	r2, [r5, #19]
 8001730:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8001734:	4850      	ldr	r0, [pc, #320]	; (8001878 <EEPROM_Print_config+0x2f0>)
 8001736:	f002 0201 	and.w	r2, r2, #1
 800173a:	09c9      	lsrs	r1, r1, #7
 800173c:	f00e fbf2 	bl	800ff24 <iprintf>
	printf("BME280 hum meas %i %i \r\n", config.BME280_h_use, BME280.hum.use_meas);
 8001740:	7aaa      	ldrb	r2, [r5, #10]
 8001742:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8001746:	484d      	ldr	r0, [pc, #308]	; (800187c <EEPROM_Print_config+0x2f4>)

	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
	printf("BME280 hum offset: %f  \r\n", config.BME280_h_offset);

	printf("DPS368 sensor use %i %i \r\n", config.DPS368_use, DPS368.sensor_use);
 8001748:	4d4d      	ldr	r5, [pc, #308]	; (8001880 <EEPROM_Print_config+0x2f8>)
	printf("BME280 hum meas %i %i \r\n", config.BME280_h_use, BME280.hum.use_meas);
 800174a:	f002 0201 	and.w	r2, r2, #1
 800174e:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8001752:	f00e fbe7 	bl	800ff24 <iprintf>
	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
 8001756:	f8d4 0026 	ldr.w	r0, [r4, #38]	; 0x26
 800175a:	f7fe ff05 	bl	8000568 <__aeabi_f2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4848      	ldr	r0, [pc, #288]	; (8001884 <EEPROM_Print_config+0x2fc>)
 8001764:	f00e fbde 	bl	800ff24 <iprintf>
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
 8001768:	f8d4 002e 	ldr.w	r0, [r4, #46]	; 0x2e
 800176c:	f7fe fefc 	bl	8000568 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4844      	ldr	r0, [pc, #272]	; (8001888 <EEPROM_Print_config+0x300>)
 8001776:	f00e fbd5 	bl	800ff24 <iprintf>
	printf("BME280 hum offset: %f  \r\n", config.BME280_h_offset);
 800177a:	f8d4 002a 	ldr.w	r0, [r4, #42]	; 0x2a
 800177e:	f7fe fef3 	bl	8000568 <__aeabi_f2d>
 8001782:	460b      	mov	r3, r1
 8001784:	4602      	mov	r2, r0
 8001786:	4841      	ldr	r0, [pc, #260]	; (800188c <EEPROM_Print_config+0x304>)
 8001788:	f00e fbcc 	bl	800ff24 <iprintf>
	printf("DPS368 sensor use %i %i \r\n", config.DPS368_use, DPS368.sensor_use);
 800178c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8001790:	782a      	ldrb	r2, [r5, #0]
 8001792:	483f      	ldr	r0, [pc, #252]	; (8001890 <EEPROM_Print_config+0x308>)
 8001794:	f001 0101 	and.w	r1, r1, #1
 8001798:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800179c:	f00e fbc2 	bl	800ff24 <iprintf>
	printf("DPS368 temp meas %i %i \r\n", config.DPS368_t_use, DPS368.temp.use_meas);
 80017a0:	786a      	ldrb	r2, [r5, #1]
 80017a2:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 80017a6:	483b      	ldr	r0, [pc, #236]	; (8001894 <EEPROM_Print_config+0x30c>)
 80017a8:	f002 0201 	and.w	r2, r2, #1
 80017ac:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80017b0:	f00e fbb8 	bl	800ff24 <iprintf>
	printf("DPS368 press meas %i %i \r\n", config.DPS368_p_use, DPS368.press.use_meas);
 80017b4:	7aaa      	ldrb	r2, [r5, #10]
 80017b6:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 80017ba:	4837      	ldr	r0, [pc, #220]	; (8001898 <EEPROM_Print_config+0x310>)
 80017bc:	f002 0201 	and.w	r2, r2, #1
 80017c0:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80017c4:	f00e fbae 	bl	800ff24 <iprintf>
	printf("DPS368 temp offset: %f \r\n", config.DPS368_t_offset);
 80017c8:	f8d4 0033 	ldr.w	r0, [r4, #51]	; 0x33
 80017cc:	f7fe fecc 	bl	8000568 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4831      	ldr	r0, [pc, #196]	; (800189c <EEPROM_Print_config+0x314>)
 80017d6:	f00e fba5 	bl	800ff24 <iprintf>
	printf("DPS368 press offset: %f \r\n", config.DPS368_p_offset);
 80017da:	f8d4 0037 	ldr.w	r0, [r4, #55]	; 0x37
 80017de:	f7fe fec3 	bl	8000568 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	482e      	ldr	r0, [pc, #184]	; (80018a0 <EEPROM_Print_config+0x318>)
 80017e8:	f00e fb9c 	bl	800ff24 <iprintf>

	printf("CHECKSUM: 0x%4X \r\n", config.checksum);
 80017ec:	f8b4 103b 	ldrh.w	r1, [r4, #59]	; 0x3b
 80017f0:	482c      	ldr	r0, [pc, #176]	; (80018a4 <EEPROM_Print_config+0x31c>)
 80017f2:	f00e fb97 	bl	800ff24 <iprintf>
	printf("================================= \r\n");
 80017f6:	4630      	mov	r0, r6

}
 80017f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("================================= \r\n");
 80017fc:	f00e bbf8 	b.w	800fff0 <puts>
 8001800:	0801358c 	.word	0x0801358c
 8001804:	2000137c 	.word	0x2000137c
 8001808:	20001334 	.word	0x20001334
 800180c:	080135b0 	.word	0x080135b0
 8001810:	080135c8 	.word	0x080135c8
 8001814:	080135e0 	.word	0x080135e0
 8001818:	080135f8 	.word	0x080135f8
 800181c:	08013610 	.word	0x08013610
 8001820:	0801362c 	.word	0x0801362c
 8001824:	08013644 	.word	0x08013644
 8001828:	2000131c 	.word	0x2000131c
 800182c:	08013660 	.word	0x08013660
 8001830:	0801367c 	.word	0x0801367c
 8001834:	08013698 	.word	0x08013698
 8001838:	080136b0 	.word	0x080136b0
 800183c:	080136cc 	.word	0x080136cc
 8001840:	200012f8 	.word	0x200012f8
 8001844:	080136e4 	.word	0x080136e4
 8001848:	08013700 	.word	0x08013700
 800184c:	08013718 	.word	0x08013718
 8001850:	08013734 	.word	0x08013734
 8001854:	0801374c 	.word	0x0801374c
 8001858:	08013768 	.word	0x08013768
 800185c:	08013784 	.word	0x08013784
 8001860:	200012b8 	.word	0x200012b8
 8001864:	080137a0 	.word	0x080137a0
 8001868:	080137bc 	.word	0x080137bc
 800186c:	080137d8 	.word	0x080137d8
 8001870:	080137f4 	.word	0x080137f4
 8001874:	08013810 	.word	0x08013810
 8001878:	0801382c 	.word	0x0801382c
 800187c:	08013848 	.word	0x08013848
 8001880:	200012dc 	.word	0x200012dc
 8001884:	08013864 	.word	0x08013864
 8001888:	08013880 	.word	0x08013880
 800188c:	0801389c 	.word	0x0801389c
 8001890:	080138b8 	.word	0x080138b8
 8001894:	080138d4 	.word	0x080138d4
 8001898:	080138f0 	.word	0x080138f0
 800189c:	0801390c 	.word	0x0801390c
 80018a0:	08013928 	.word	0x08013928
 80018a4:	08013944 	.word	0x08013944

080018a8 <SIM_HW_OFF>:
 */
#include "SIM868.h"

void SIM_HW_OFF()
{
	SIM_OFF();
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <SIM_HW_OFF+0xc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	f008 ba47 	b.w	8009d40 <HAL_GPIO_WritePin>
 80018b2:	bf00      	nop
 80018b4:	48000400 	.word	0x48000400

080018b8 <GPS_ON>:
}

void GPS_ON()
{
	///HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <GPS_OFF>:
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 80018c0:	b510      	push	{r4, lr}
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 80018c2:	4c07      	ldr	r4, [pc, #28]	; (80018e0 <ADC_DMA_Start+0x20>)
 80018c4:	217f      	movs	r1, #127	; 0x7f
 80018c6:	4620      	mov	r0, r4
 80018c8:	f007 fcd8 	bl	800927c <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 80018cc:	200a      	movs	r0, #10
 80018ce:	f007 f84b 	bl	8008968 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 80018d2:	4620      	mov	r0, r4
 80018d4:	4903      	ldr	r1, [pc, #12]	; (80018e4 <ADC_DMA_Start+0x24>)
}
 80018d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 80018da:	2205      	movs	r2, #5
 80018dc:	f007 bc40 	b.w	8009160 <HAL_ADC_Start_DMA>
 80018e0:	20000fe0 	.word	0x20000fe0
 80018e4:	20000220 	.word	0x20000220

080018e8 <GET_MCU_Temp>:
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));

	  	for(uint8_t i=0; i<5;i+=1)
	  	{
	  		tmp+=adc_data[i];
 80018e8:	4a23      	ldr	r2, [pc, #140]	; (8001978 <GET_MCU_Temp+0x90>)
	  	}
	  	tmp*=0.2f;
 80018ea:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800197c <GET_MCU_Temp+0x94>
	  		tmp+=adc_data[i];
 80018ee:	8811      	ldrh	r1, [r2, #0]
 80018f0:	8853      	ldrh	r3, [r2, #2]
 80018f2:	8890      	ldrh	r0, [r2, #4]
 80018f4:	440b      	add	r3, r1
 80018f6:	88d1      	ldrh	r1, [r2, #6]
 80018f8:	8912      	ldrh	r2, [r2, #8]
 80018fa:	4403      	add	r3, r0
 80018fc:	440b      	add	r3, r1
 80018fe:	4413      	add	r3, r2
	  	tmp*=0.2f;
 8001900:	b29b      	uxth	r3, r3
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800190a:	b570      	push	{r4, r5, r6, lr}
	  	tmp*=0.2f;
 800190c:	ee67 7a87 	vmul.f32	s15, s15, s14
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 8001910:	4e1b      	ldr	r6, [pc, #108]	; (8001980 <GET_MCU_Temp+0x98>)
	  	tmp*=0.2f;
 8001912:	eefc 7ae7 	vcvt.u32.f32	s15, s15

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 8001916:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	; 0xa8
 800191a:	ee07 3a10 	vmov	s14, r3
 800191e:	ee17 3a90 	vmov	r3, s15
 8001922:	b29b      	uxth	r3, r3
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800192c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001934:	ee17 0a90 	vmov	r0, s15
 8001938:	f7fe fe16 	bl	8000568 <__aeabi_f2d>
 800193c:	a30c      	add	r3, pc, #48	; (adr r3, 8001970 <GET_MCU_Temp+0x88>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	f7fe fe69 	bl	8000618 <__aeabi_dmul>
 8001946:	4604      	mov	r4, r0
 8001948:	f8b6 00ca 	ldrh.w	r0, [r6, #202]	; 0xca
 800194c:	460d      	mov	r5, r1
 800194e:	f7fe fdf9 	bl	8000544 <__aeabi_i2d>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4620      	mov	r0, r4
 8001958:	4629      	mov	r1, r5
 800195a:	f7fe ff87 	bl	800086c <__aeabi_ddiv>
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <GET_MCU_Temp+0x9c>)
 8001960:	2200      	movs	r2, #0
 8001962:	f7fe fca3 	bl	80002ac <__adddf3>
 8001966:	f7ff f94f 	bl	8000c08 <__aeabi_d2f>
	  	return temperature;
}
 800196a:	ee00 0a10 	vmov	s0, r0
 800196e:	bd70      	pop	{r4, r5, r6, pc}
 8001970:	33333333 	.word	0x33333333
 8001974:	40113333 	.word	0x40113333
 8001978:	20000220 	.word	0x20000220
 800197c:	3e4ccccd 	.word	0x3e4ccccd
 8001980:	1fff7500 	.word	0x1fff7500
 8001984:	40390000 	.word	0x40390000

08001988 <atc_init>:
    vPortFree(ptr);
#endif
}
//####################################################################################################
void atc_init(atc_t *atc, const char *name, USART_TypeDef *USARTx, void (*found)(char*))
{
 8001988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800198a:	460f      	mov	r7, r1
  if (atc->inited == true)
 800198c:	7801      	ldrb	r1, [r0, #0]
 800198e:	b101      	cbz	r1, 8001992 <atc_init+0xa>
  atc->usart = USARTx;
  atc->found = found;
  LL_USART_EnableIT_RXNE(atc->usart);
  atc->inited = true;
  atc_printf("\r\n[%s] inited.\r\n", atc->name);
}
 8001990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  memset(atc, 0, sizeof(atc_t));
 8001992:	4605      	mov	r5, r0
 8001994:	4614      	mov	r4, r2
 8001996:	f44f 62c7 	mov.w	r2, #1592	; 0x638
 800199a:	461e      	mov	r6, r3
 800199c:	f00e fc56 	bl	801024c <memset>
  strncpy(atc->name, name, sizeof(atc->name) - 1);
 80019a0:	2207      	movs	r2, #7
 80019a2:	4639      	mov	r1, r7
 80019a4:	f205 6025 	addw	r0, r5, #1573	; 0x625
 80019a8:	f00e fc77 	bl	801029a <strncpy>
  atc->usart = USARTx;
 80019ac:	f8c5 4630 	str.w	r4, [r5, #1584]	; 0x630
  atc->found = found;
 80019b0:	f8c5 6634 	str.w	r6, [r5, #1588]	; 0x634
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019b4:	e854 3f00 	ldrex	r3, [r4]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80019b8:	f043 0320 	orr.w	r3, r3, #32
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019bc:	e844 3200 	strex	r2, r3, [r4]
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d1f7      	bne.n	80019b4 <atc_init+0x2c>
  atc->inited = true;
 80019c4:	2301      	movs	r3, #1
 80019c6:	702b      	strb	r3, [r5, #0]
}
 80019c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ca:	bf00      	nop

080019cc <atc_transmit>:
{
  atc->lock = false;
}
//####################################################################################################
void atc_transmit(atc_t *atc, uint8_t *data, uint16_t len)
{
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	4606      	mov	r6, r0
  for (uint16_t i = 0; i < len; i++)
 80019d0:	b312      	cbz	r2, 8001a18 <atc_transmit+0x4c>
 80019d2:	3a01      	subs	r2, #1
  {
    while (!LL_USART_IsActiveFlag_TXE(atc->usart))
      atc_delay(1);
    LL_USART_TransmitData8(atc->usart, data[i]);
  }
  while (!LL_USART_IsActiveFlag_TC(atc->usart))
 80019d4:	f8d0 3630 	ldr.w	r3, [r0, #1584]	; 0x630
 80019d8:	1e4c      	subs	r4, r1, #1
 80019da:	fa11 f582 	uxtah	r5, r1, r2
 80019de:	e004      	b.n	80019ea <atc_transmit+0x1e>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80019e0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80019e4:	851a      	strh	r2, [r3, #40]	; 0x28
  for (uint16_t i = 0; i < len; i++)
 80019e6:	42ac      	cmp	r4, r5
 80019e8:	d00f      	beq.n	8001a0a <atc_transmit+0x3e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	0612      	lsls	r2, r2, #24
 80019ee:	d4f7      	bmi.n	80019e0 <atc_transmit+0x14>
      atc_delay(1);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f00b fb2b 	bl	800d04c <osDelay>
    while (!LL_USART_IsActiveFlag_TXE(atc->usart))
 80019f6:	f8d6 3630 	ldr.w	r3, [r6, #1584]	; 0x630
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	0611      	lsls	r1, r2, #24
 80019fe:	d5f7      	bpl.n	80019f0 <atc_transmit+0x24>
  USARTx->TDR = Value;
 8001a00:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28
  for (uint16_t i = 0; i < len; i++)
 8001a06:	42ac      	cmp	r4, r5
 8001a08:	d1ef      	bne.n	80019ea <atc_transmit+0x1e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	065b      	lsls	r3, r3, #25
 8001a0e:	d500      	bpl.n	8001a12 <atc_transmit+0x46>
    atc_delay(1);
}
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
    atc_delay(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f00b fb1a 	bl	800d04c <osDelay>
  while (!LL_USART_IsActiveFlag_TC(atc->usart))
 8001a18:	f8d6 3630 	ldr.w	r3, [r6, #1584]	; 0x630
 8001a1c:	e7f5      	b.n	8001a0a <atc_transmit+0x3e>
 8001a1e:	bf00      	nop

08001a20 <atc_rxCallback>:
//####################################################################################################
void atc_rxCallback(atc_t *atc)
{
  if (LL_USART_IsActiveFlag_RXNE(atc->usart))
 8001a20:	f8d0 3630 	ldr.w	r3, [r0, #1584]	; 0x630
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	0692      	lsls	r2, r2, #26
 8001a28:	d513      	bpl.n	8001a52 <atc_rxCallback+0x32>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001a2a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  {
    uint8_t tmp = LL_USART_ReceiveData8(atc->usart);
    if (atc->rxIndex < _ATC_RXSIZE - 1)
 8001a2c:	f8b0 35de 	ldrh.w	r3, [r0, #1502]	; 0x5de
 8001a30:	f240 51da 	movw	r1, #1498	; 0x5da
 8001a34:	428b      	cmp	r3, r1
{
 8001a36:	b510      	push	{r4, lr}
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	4604      	mov	r4, r0
    if (atc->rxIndex < _ATC_RXSIZE - 1)
 8001a3c:	d804      	bhi.n	8001a48 <atc_rxCallback+0x28>
    {
      atc->rxBuffer[atc->rxIndex] = tmp;
 8001a3e:	18c1      	adds	r1, r0, r3
      atc->rxIndex++;
 8001a40:	3301      	adds	r3, #1
 8001a42:	704a      	strb	r2, [r1, #1]
 8001a44:	f8a0 35de 	strh.w	r3, [r0, #1502]	; 0x5de
    }
    atc->rxTime = HAL_GetTick();
 8001a48:	f006 ff88 	bl	800895c <HAL_GetTick>
 8001a4c:	f8c4 05e0 	str.w	r0, [r4, #1504]	; 0x5e0
//    LL_USART_ClearFlag_FE(atc->usart);
//  if (LL_USART_IsActiveFlag_ORE(atc->usart))
//    LL_USART_ClearFlag_ORE(atc->usart);
//  if (LL_USART_IsActiveFlag_NE(atc->usart))
//    LL_USART_ClearFlag_NE(atc->usart);
}
 8001a50:	bd10      	pop	{r4, pc}
 8001a52:	4770      	bx	lr

08001a54 <atc_search>:
//####################################################################################################
void atc_search(atc_t *atc)
{
 8001a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a56:	4605      	mov	r5, r0
 8001a58:	f200 54e4 	addw	r4, r0, #1508	; 0x5e4
 8001a5c:	f200 670c 	addw	r7, r0, #1548	; 0x60c
  for (uint8_t search = 0; search < _ATC_SEARCH_MAX; search++)
  {
    if (atc->search[search] == NULL)
      continue;
    char *str = strstr((char*) atc->rxBuffer, atc->search[search]);
 8001a60:	1c46      	adds	r6, r0, #1
    if (atc->search[search] == NULL)
 8001a62:	f854 1f04 	ldr.w	r1, [r4, #4]!
    char *str = strstr((char*) atc->rxBuffer, atc->search[search]);
 8001a66:	4630      	mov	r0, r6
    if (atc->search[search] == NULL)
 8001a68:	b131      	cbz	r1, 8001a78 <atc_search+0x24>
    char *str = strstr((char*) atc->rxBuffer, atc->search[search]);
 8001a6a:	f00e fc85 	bl	8010378 <strstr>
    if (str != NULL)
 8001a6e:	b118      	cbz	r0, 8001a78 <atc_search+0x24>
    {
      if (atc->found != NULL)
 8001a70:	f8d5 3634 	ldr.w	r3, [r5, #1588]	; 0x634
 8001a74:	b103      	cbz	r3, 8001a78 <atc_search+0x24>
        atc->found(str);
 8001a76:	4798      	blx	r3
  for (uint8_t search = 0; search < _ATC_SEARCH_MAX; search++)
 8001a78:	42a7      	cmp	r7, r4
 8001a7a:	d1f2      	bne.n	8001a62 <atc_search+0xe>
    }
  }
}
 8001a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a7e:	bf00      	nop

08001a80 <atc_addSearch>:
    return true;
  return false;
}
//####################################################################################################
bool atc_addSearch(atc_t *atc, const char *str)
{
 8001a80:	b570      	push	{r4, r5, r6, lr}
  if (atc->searchIndex == _ATC_SEARCH_MAX)
 8001a82:	f890 6624 	ldrb.w	r6, [r0, #1572]	; 0x624
 8001a86:	2e0a      	cmp	r6, #10
 8001a88:	d02d      	beq.n	8001ae6 <atc_addSearch+0x66>
  {
    atc_printf("[%s] Error: Search limit reached", atc->name);
    return false;
  }
  atc->search[atc->searchIndex] = (char*) atc_alloc(strlen(str) + 1);
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	4608      	mov	r0, r1
 8001a8e:	460d      	mov	r5, r1
 8001a90:	f7fe fbfe 	bl	8000290 <strlen>
  return pvPortMalloc(size);
 8001a94:	3001      	adds	r0, #1
 8001a96:	f00c fa77 	bl	800df88 <pvPortMalloc>
  atc->search[atc->searchIndex] = (char*) atc_alloc(strlen(str) + 1);
 8001a9a:	f506 76bd 	add.w	r6, r6, #378	; 0x17a
 8001a9e:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  if (atc->search[atc->searchIndex] != NULL)
 8001aa2:	f894 3624 	ldrb.w	r3, [r4, #1572]	; 0x624
 8001aa6:	f503 73bd 	add.w	r3, r3, #378	; 0x17a
 8001aaa:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 8001aae:	b1d6      	cbz	r6, 8001ae6 <atc_addSearch+0x66>
  {
    strncpy(atc->search[atc->searchIndex], str, strlen(str));
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f7fe fbed 	bl	8000290 <strlen>
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4630      	mov	r0, r6
 8001abc:	f00e fbed 	bl	801029a <strncpy>
    atc->search[atc->searchIndex][strlen(str)] = 0;
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f7fe fbe5 	bl	8000290 <strlen>
 8001ac6:	f894 2624 	ldrb.w	r2, [r4, #1572]	; 0x624
 8001aca:	f502 72bd 	add.w	r2, r2, #378	; 0x17a
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	54d1      	strb	r1, [r2, r3]
    atc->searchIndex++;
 8001ad8:	f894 3624 	ldrb.w	r3, [r4, #1572]	; 0x624
    return true;
 8001adc:	2001      	movs	r0, #1
    atc->searchIndex++;
 8001ade:	4403      	add	r3, r0
 8001ae0:	f884 3624 	strb.w	r3, [r4, #1572]	; 0x624
  }
  else
    return false;
}
 8001ae4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8001ae6:	2000      	movs	r0, #0
}
 8001ae8:	bd70      	pop	{r4, r5, r6, pc}
 8001aea:	bf00      	nop

08001aec <atc_command>:
//####################################################################################################
int8_t atc_command(atc_t *atc, const char *command, uint32_t timeout_ms, char *answer, uint16_t answer_size,
    int items, ...)
{
 8001aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af0:	b085      	sub	sp, #20
 8001af2:	4604      	mov	r4, r0
 8001af4:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8001af8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001afa:	e9cd 3000 	strd	r3, r0, [sp]
  if (atc->inited == false)
 8001afe:	7823      	ldrb	r3, [r4, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80b5 	beq.w	8001c70 <atc_command+0x184>
  if (atc->lock == false)
 8001b06:	f894 362d 	ldrb.w	r3, [r4, #1581]	; 0x62d
 8001b0a:	4689      	mov	r9, r1
 8001b0c:	4615      	mov	r5, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 809b 	bne.w	8001c4a <atc_command+0x15e>
    atc->lock = true;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f884 362d 	strb.w	r3, [r4, #1581]	; 0x62d
    return -1;
  if (atc_lock(atc, timeout_ms) == false)
    return -1;
  if (answer != NULL)
 8001b1a:	9b00      	ldr	r3, [sp, #0]
 8001b1c:	b123      	cbz	r3, 8001b28 <atc_command+0x3c>
    memset(answer, 0, answer_size);
 8001b1e:	9a01      	ldr	r2, [sp, #4]
 8001b20:	9800      	ldr	r0, [sp, #0]
 8001b22:	2100      	movs	r1, #0
 8001b24:	f00e fb92 	bl	801024c <memset>
  uint8_t foundIndex = 0;
  va_list tag;
  va_start(tag, items);
 8001b28:	ae10      	add	r6, sp, #64	; 0x40
  for (uint8_t i = 0; i < items; i++)
 8001b2a:	2f00      	cmp	r7, #0
  va_start(tag, items);
 8001b2c:	9603      	str	r6, [sp, #12]
  for (uint8_t i = 0; i < items; i++)
 8001b2e:	dd23      	ble.n	8001b78 <atc_command+0x8c>
 8001b30:	f204 6b0c 	addw	fp, r4, #1548	; 0x60c
    if (i == _ATC_SEARCH_CMD_MAX)
    {
      atc_printf("[%s] Error: Search command limit reached", atc->name);
      break;
    }
    char *str = va_arg(tag, char*);
 8001b34:	f04f 0801 	mov.w	r8, #1
 8001b38:	46a2      	mov	sl, r4
 8001b3a:	6834      	ldr	r4, [r6, #0]
 8001b3c:	3604      	adds	r6, #4
    atc->searchCmd[i] = (char*) atc_alloc(strlen(str) + 1);
 8001b3e:	4620      	mov	r0, r4
    char *str = va_arg(tag, char*);
 8001b40:	9603      	str	r6, [sp, #12]
    atc->searchCmd[i] = (char*) atc_alloc(strlen(str) + 1);
 8001b42:	f7fe fba5 	bl	8000290 <strlen>
  return pvPortMalloc(size);
 8001b46:	3001      	adds	r0, #1
 8001b48:	f00c fa1e 	bl	800df88 <pvPortMalloc>
    if (atc->searchCmd[i] != NULL)
    {
      strcpy(atc->searchCmd[i], str);
 8001b4c:	4621      	mov	r1, r4
    atc->searchCmd[i] = (char*) atc_alloc(strlen(str) + 1);
 8001b4e:	f84b 0f04 	str.w	r0, [fp, #4]!
    if (atc->searchCmd[i] != NULL)
 8001b52:	b148      	cbz	r0, 8001b68 <atc_command+0x7c>
      strcpy(atc->searchCmd[i], str);
 8001b54:	f00e fd00 	bl	8010558 <strcpy>
      atc->searchCmd[i][strlen(str)] = 0;
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7fe fb99 	bl	8000290 <strlen>
 8001b5e:	f8db 3000 	ldr.w	r3, [fp]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	541a      	strb	r2, [r3, r0]
  for (uint8_t i = 0; i < items; i++)
 8001b68:	4547      	cmp	r7, r8
    if (i == _ATC_SEARCH_CMD_MAX)
 8001b6a:	f108 0801 	add.w	r8, r8, #1
  for (uint8_t i = 0; i < items; i++)
 8001b6e:	d002      	beq.n	8001b76 <atc_command+0x8a>
    if (i == _ATC_SEARCH_CMD_MAX)
 8001b70:	f1b8 0f06 	cmp.w	r8, #6
 8001b74:	d1e1      	bne.n	8001b3a <atc_command+0x4e>
 8001b76:	4654      	mov	r4, sl
    }
  }
  va_end(tag);
  atc_transmit(atc, (uint8_t*) command, strlen(command));
 8001b78:	4648      	mov	r0, r9
 8001b7a:	f7fe fb89 	bl	8000290 <strlen>
 8001b7e:	4649      	mov	r1, r9
 8001b80:	b282      	uxth	r2, r0
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff ff22 	bl	80019cc <atc_transmit>
  uint32_t start = HAL_GetTick();
 8001b88:	f006 fee8 	bl	800895c <HAL_GetTick>
    atc_delay(1);
    if (atc_available(atc))
    {
      atc_printf("[%s] %s", atc->name, (char* )atc->rxBuffer);
      atc_search(atc);
      char *found = atc_searchAnswer(atc, items, &foundIndex);
 8001b8c:	fa5f f987 	uxtb.w	r9, r7
  uint32_t start = HAL_GetTick();
 8001b90:	4606      	mov	r6, r0
  while (HAL_GetTick() - start < timeout_ms)
 8001b92:	f006 fee3 	bl	800895c <HAL_GetTick>
 8001b96:	1b80      	subs	r0, r0, r6
 8001b98:	42a8      	cmp	r0, r5
 8001b9a:	d23b      	bcs.n	8001c14 <atc_command+0x128>
    atc_delay(1);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f00b fa55 	bl	800d04c <osDelay>
  if ((atc->rxIndex > 0) && (HAL_GetTick() - atc->rxTime) > _ATC_RXTIMEOUT_MS)
 8001ba2:	f8b4 35de 	ldrh.w	r3, [r4, #1502]	; 0x5de
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f3      	beq.n	8001b92 <atc_command+0xa6>
 8001baa:	f006 fed7 	bl	800895c <HAL_GetTick>
 8001bae:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 8001bb2:	1ac0      	subs	r0, r0, r3
 8001bb4:	2832      	cmp	r0, #50	; 0x32
 8001bb6:	d9ec      	bls.n	8001b92 <atc_command+0xa6>
      atc_search(atc);
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7ff ff4b 	bl	8001a54 <atc_search>
  for (uint8_t search = 0; search < items; search++)
 8001bbe:	f104 0b01 	add.w	fp, r4, #1
 8001bc2:	f1b9 0f00 	cmp.w	r9, #0
 8001bc6:	d016      	beq.n	8001bf6 <atc_command+0x10a>
 8001bc8:	f204 6a0c 	addw	sl, r4, #1548	; 0x60c
 8001bcc:	f04f 0800 	mov.w	r8, #0
 8001bd0:	f104 0b01 	add.w	fp, r4, #1
    if (atc->searchCmd[search] == NULL)
 8001bd4:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    char *str = strstr((char*) atc->rxBuffer, atc->searchCmd[search]);
 8001bd8:	4658      	mov	r0, fp
    if (atc->searchCmd[search] == NULL)
 8001bda:	b161      	cbz	r1, 8001bf6 <atc_command+0x10a>
    char *str = strstr((char*) atc->rxBuffer, atc->searchCmd[search]);
 8001bdc:	f00e fbcc 	bl	8010378 <strstr>
  for (uint8_t search = 0; search < items; search++)
 8001be0:	f108 0301 	add.w	r3, r8, #1
    if (str != NULL)
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d149      	bne.n	8001c7c <atc_command+0x190>
  for (uint8_t search = 0; search < items; search++)
 8001be8:	fa5f f883 	uxtb.w	r8, r3
 8001bec:	45c1      	cmp	r9, r8
 8001bee:	d002      	beq.n	8001bf6 <atc_command+0x10a>
    if (search == _ATC_SEARCH_CMD_MAX)
 8001bf0:	f1b8 0f05 	cmp.w	r8, #5
 8001bf4:	d1ee      	bne.n	8001bd4 <atc_command+0xe8>
  memset(atc->rxBuffer, 0, _ATC_RXSIZE);
 8001bf6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4658      	mov	r0, fp
 8001bfe:	f00e fb25 	bl	801024c <memset>
  atc->rxIndex = 0;
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	f8a4 35de 	strh.w	r3, [r4, #1502]	; 0x5de
  while (HAL_GetTick() - start < timeout_ms)
 8001c0a:	f006 fea7 	bl	800895c <HAL_GetTick>
 8001c0e:	1b80      	subs	r0, r0, r6
 8001c10:	42a8      	cmp	r0, r5
 8001c12:	d3c3      	bcc.n	8001b9c <atc_command+0xb0>
 8001c14:	f04f 0900 	mov.w	r9, #0
      atc_empty(atc);
      if (found != NULL)
        break;
    }
  }
  for (uint8_t i = 0; i < items; i++)
 8001c18:	2f00      	cmp	r7, #0
 8001c1a:	dd0f      	ble.n	8001c3c <atc_command+0x150>
 8001c1c:	2500      	movs	r5, #0
 8001c1e:	462e      	mov	r6, r5
  {
    atc_free(atc->searchCmd[i]);
    atc->searchCmd[i] = NULL;
 8001c20:	46a8      	mov	r8, r5
    atc_free(atc->searchCmd[i]);
 8001c22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  for (uint8_t i = 0; i < items; i++)
 8001c26:	3501      	adds	r5, #1
    vPortFree(ptr);
 8001c28:	f8d6 0610 	ldr.w	r0, [r6, #1552]	; 0x610
  for (uint8_t i = 0; i < items; i++)
 8001c2c:	b2ed      	uxtb	r5, r5
    vPortFree(ptr);
 8001c2e:	f00c fa41 	bl	800e0b4 <vPortFree>
  for (uint8_t i = 0; i < items; i++)
 8001c32:	42bd      	cmp	r5, r7
    atc->searchCmd[i] = NULL;
 8001c34:	f8c6 8610 	str.w	r8, [r6, #1552]	; 0x610
  for (uint8_t i = 0; i < items; i++)
 8001c38:	462e      	mov	r6, r5
 8001c3a:	dbf2      	blt.n	8001c22 <atc_command+0x136>
  atc->lock = false;
 8001c3c:	2300      	movs	r3, #0
  }
  atc_unlock(atc);
  return foundIndex;
}
 8001c3e:	4648      	mov	r0, r9
  atc->lock = false;
 8001c40:	f884 362d 	strb.w	r3, [r4, #1581]	; 0x62d
}
 8001c44:	b005      	add	sp, #20
 8001c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = HAL_GetTick();
 8001c4a:	f006 fe87 	bl	800895c <HAL_GetTick>
 8001c4e:	4606      	mov	r6, r0
  while (HAL_GetTick() - start < wait_ms)
 8001c50:	e006      	b.n	8001c60 <atc_command+0x174>
    atc_delay(1);
 8001c52:	f00b f9fb 	bl	800d04c <osDelay>
    if (atc->lock == 0)
 8001c56:	f894 362d 	ldrb.w	r3, [r4, #1581]	; 0x62d
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f43f af5a 	beq.w	8001b14 <atc_command+0x28>
  while (HAL_GetTick() - start < wait_ms)
 8001c60:	f006 fe7c 	bl	800895c <HAL_GetTick>
 8001c64:	4603      	mov	r3, r0
 8001c66:	1b9b      	subs	r3, r3, r6
 8001c68:	429d      	cmp	r5, r3
    atc_delay(1);
 8001c6a:	f04f 0001 	mov.w	r0, #1
  while (HAL_GetTick() - start < wait_ms)
 8001c6e:	d8f0      	bhi.n	8001c52 <atc_command+0x166>
    return -1;
 8001c70:	f04f 39ff 	mov.w	r9, #4294967295
}
 8001c74:	4648      	mov	r0, r9
 8001c76:	b005      	add	sp, #20
 8001c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (found != NULL && answer != NULL)
 8001c7c:	9b00      	ldr	r3, [sp, #0]
 8001c7e:	b123      	cbz	r3, 8001c8a <atc_command+0x19e>
        strncpy(answer, found, answer_size);
 8001c80:	4601      	mov	r1, r0
 8001c82:	9a01      	ldr	r2, [sp, #4]
 8001c84:	9800      	ldr	r0, [sp, #0]
 8001c86:	f00e fb08 	bl	801029a <strncpy>
  memset(atc->rxBuffer, 0, _ATC_RXSIZE);
 8001c8a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001c8e:	4658      	mov	r0, fp
 8001c90:	2100      	movs	r1, #0
 8001c92:	f00e fadb 	bl	801024c <memset>
      *foundIndex = search + 1;
 8001c96:	f108 0801 	add.w	r8, r8, #1
  atc->rxIndex = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8a4 35de 	strh.w	r3, [r4, #1502]	; 0x5de
  return foundIndex;
 8001ca0:	fa4f f988 	sxtb.w	r9, r8
 8001ca4:	e7b8      	b.n	8001c18 <atc_command+0x12c>
 8001ca6:	bf00      	nop

08001ca8 <atc_loop>:
//####################################################################################################
void atc_loop(atc_t *atc)
{
 8001ca8:	b538      	push	{r3, r4, r5, lr}
  if (atc->inited == false)
 8001caa:	7803      	ldrb	r3, [r0, #0]
 8001cac:	b303      	cbz	r3, 8001cf0 <atc_loop+0x48>
#if (_ATC_RTOS > 0)
    atc_delay(1);
#endif
    return;
  }
  if (HAL_GetTick() - atc->loopTime < _ATC_RXTIMEOUT_MS)
 8001cae:	4604      	mov	r4, r0
 8001cb0:	f006 fe54 	bl	800895c <HAL_GetTick>
 8001cb4:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 8001cb8:	1ac0      	subs	r0, r0, r3
 8001cba:	2831      	cmp	r0, #49	; 0x31
 8001cbc:	d918      	bls.n	8001cf0 <atc_loop+0x48>
#if (_ATC_RTOS > 0)
    atc_delay(1);
#endif
    return;
  }
  atc->loopTime = HAL_GetTick();
 8001cbe:	f006 fe4d 	bl	800895c <HAL_GetTick>
  if (atc->lock == false)
 8001cc2:	f894 362d 	ldrb.w	r3, [r4, #1581]	; 0x62d
  atc->loopTime = HAL_GetTick();
 8001cc6:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
  if (atc->lock == false)
 8001cca:	b1b3      	cbz	r3, 8001cfa <atc_loop+0x52>
  uint32_t start = HAL_GetTick();
 8001ccc:	f006 fe46 	bl	800895c <HAL_GetTick>
 8001cd0:	4605      	mov	r5, r0
  while (HAL_GetTick() - start < wait_ms)
 8001cd2:	e004      	b.n	8001cde <atc_loop+0x36>
    atc_delay(1);
 8001cd4:	f00b f9ba 	bl	800d04c <osDelay>
    if (atc->lock == 0)
 8001cd8:	f894 362d 	ldrb.w	r3, [r4, #1581]	; 0x62d
 8001cdc:	b16b      	cbz	r3, 8001cfa <atc_loop+0x52>
  while (HAL_GetTick() - start < wait_ms)
 8001cde:	f006 fe3d 	bl	800895c <HAL_GetTick>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	1b5b      	subs	r3, r3, r5
 8001ce6:	2b09      	cmp	r3, #9
    atc_delay(1);
 8001ce8:	f04f 0001 	mov.w	r0, #1
  while (HAL_GetTick() - start < wait_ms)
 8001cec:	d9f2      	bls.n	8001cd4 <atc_loop+0x2c>
    atc_printf("[%s] %s", atc->name, (char* )atc->rxBuffer);
    atc_search(atc);
    atc_empty(atc);
  }
  atc_unlock(atc);
}
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    atc_delay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f00b b9a9 	b.w	800d04c <osDelay>
  if ((atc->rxIndex > 0) && (HAL_GetTick() - atc->rxTime) > _ATC_RXTIMEOUT_MS)
 8001cfa:	f8b4 35de 	ldrh.w	r3, [r4, #1502]	; 0x5de
    atc->lock = true;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f884 262d 	strb.w	r2, [r4, #1581]	; 0x62d
  if ((atc->rxIndex > 0) && (HAL_GetTick() - atc->rxTime) > _ATC_RXTIMEOUT_MS)
 8001d04:	b91b      	cbnz	r3, 8001d0e <atc_loop+0x66>
  atc->lock = false;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f884 362d 	strb.w	r3, [r4, #1581]	; 0x62d
}
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
  if ((atc->rxIndex > 0) && (HAL_GetTick() - atc->rxTime) > _ATC_RXTIMEOUT_MS)
 8001d0e:	f006 fe25 	bl	800895c <HAL_GetTick>
 8001d12:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 8001d16:	1ac0      	subs	r0, r0, r3
 8001d18:	2832      	cmp	r0, #50	; 0x32
 8001d1a:	d9f4      	bls.n	8001d06 <atc_loop+0x5e>
    atc_search(atc);
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff fe99 	bl	8001a54 <atc_search>
  memset(atc->rxBuffer, 0, _ATC_RXSIZE);
 8001d22:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d26:	2100      	movs	r1, #0
 8001d28:	1c60      	adds	r0, r4, #1
 8001d2a:	f00e fa8f 	bl	801024c <memset>
  atc->rxIndex = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8a4 35de 	strh.w	r3, [r4, #1502]	; 0x5de
}
 8001d34:	e7e7      	b.n	8001d06 <atc_loop+0x5e>
 8001d36:	bf00      	nop

08001d38 <read_register16.isra.0>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001d38:	b510      	push	{r4, lr}
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001d3a:	ea4f 0c40 	mov.w	ip, r0, lsl #1
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001d3e:	b086      	sub	sp, #24
 8001d40:	4608      	mov	r0, r1

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001d42:	fa1f f18c 	uxth.w	r1, ip
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001d46:	469c      	mov	ip, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001d48:	2302      	movs	r3, #2
 8001d4a:	f241 3488 	movw	r4, #5000	; 0x1388
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	ab05      	add	r3, sp, #20
 8001d52:	9402      	str	r4, [sp, #8]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2301      	movs	r3, #1
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001d58:	4664      	mov	r4, ip
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001d5a:	f008 fc83 	bl	800a664 <HAL_I2C_Mem_Read>
 8001d5e:	b928      	cbnz	r0, 8001d6c <read_register16.isra.0+0x34>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001d60:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001d64:	8023      	strh	r3, [r4, #0]
		return true;
 8001d66:	2001      	movs	r0, #1
	} else
		return false;

}
 8001d68:	b006      	add	sp, #24
 8001d6a:	bd10      	pop	{r4, pc}
		return false;
 8001d6c:	2000      	movs	r0, #0
}
 8001d6e:	b006      	add	sp, #24
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	bf00      	nop

08001d74 <bmp280_init>:
		return false;
	else
		return true;
}

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001d78:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8001d7a:	f1a3 0276 	sub.w	r2, r3, #118	; 0x76
 8001d7e:	2a01      	cmp	r2, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001d80:	b087      	sub	sp, #28
	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001d82:	d904      	bls.n	8001d8e <bmp280_init+0x1a>

	if (dev->id == BME280_CHIP_ID) {
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
			return false;
 8001d84:	2700      	movs	r7, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}

	return true;
}
 8001d86:	4638      	mov	r0, r7
 8001d88:	b007      	add	sp, #28
 8001d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	9202      	str	r2, [sp, #8]
 8001d94:	460d      	mov	r5, r1
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001d96:	f100 0232 	add.w	r2, r0, #50	; 0x32
	tx_buff = (dev->addr << 1);
 8001d9a:	0059      	lsls	r1, r3, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e9cd 2300 	strd	r2, r3, [sp]
 8001da2:	4604      	mov	r4, r0
 8001da4:	b289      	uxth	r1, r1
 8001da6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001da8:	22d0      	movs	r2, #208	; 0xd0
 8001daa:	f008 fc5b 	bl	800a664 <HAL_I2C_Mem_Read>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d1e8      	bne.n	8001d84 <bmp280_init+0x10>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001db2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8001db6:	2b58      	cmp	r3, #88	; 0x58
 8001db8:	d001      	beq.n	8001dbe <bmp280_init+0x4a>
 8001dba:	2b60      	cmp	r3, #96	; 0x60
 8001dbc:	d1e2      	bne.n	8001d84 <bmp280_init+0x10>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001dbe:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001dc0:	2701      	movs	r7, #1
 8001dc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dc6:	ae05      	add	r6, sp, #20
 8001dc8:	23b6      	movs	r3, #182	; 0xb6
 8001dca:	9202      	str	r2, [sp, #8]
	tx_buff = (dev->addr << 1);
 8001dcc:	40b9      	lsls	r1, r7
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001dce:	9701      	str	r7, [sp, #4]
 8001dd0:	9600      	str	r6, [sp, #0]
 8001dd2:	f88d 3014 	strb.w	r3, [sp, #20]
 8001dd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001dd8:	b289      	uxth	r1, r1
 8001dda:	463b      	mov	r3, r7
 8001ddc:	22e0      	movs	r2, #224	; 0xe0
 8001dde:	f008 fb15 	bl	800a40c <HAL_I2C_Mem_Write>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d1ce      	bne.n	8001d84 <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001de6:	f241 3888 	movw	r8, #5000	; 0x1388
	tx_buff = (dev->addr << 1);
 8001dea:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001dec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001dee:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001df0:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001df2:	b299      	uxth	r1, r3
 8001df4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	22f3      	movs	r2, #243	; 0xf3
 8001dfc:	f008 fc32 	bl	800a664 <HAL_I2C_Mem_Read>
				&& (status & 1) == 0)
 8001e00:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	4318      	orrs	r0, r3
 8001e0a:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
 8001e0e:	d1ec      	bne.n	8001dea <bmp280_init+0x76>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001e10:	f8cd 8008 	str.w	r8, [sp, #8]
 8001e14:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001e16:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001e18:	f04f 0a02 	mov.w	sl, #2
 8001e1c:	f8cd a004 	str.w	sl, [sp, #4]
	tx_buff = (dev->addr << 1);
 8001e20:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001e22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e24:	b289      	uxth	r1, r1
 8001e26:	2301      	movs	r3, #1
 8001e28:	2288      	movs	r2, #136	; 0x88
 8001e2a:	f008 fc1b 	bl	800a664 <HAL_I2C_Mem_Read>
 8001e2e:	4607      	mov	r7, r0
 8001e30:	2800      	cmp	r0, #0
 8001e32:	d1a7      	bne.n	8001d84 <bmp280_init+0x10>
 8001e34:	e9cd a801 	strd	sl, r8, [sp, #4]
 8001e38:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001e3a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001e3c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001e40:	8023      	strh	r3, [r4, #0]
	tx_buff = (dev->addr << 1);
 8001e42:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001e44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e46:	b289      	uxth	r1, r1
 8001e48:	2301      	movs	r3, #1
 8001e4a:	228a      	movs	r2, #138	; 0x8a
 8001e4c:	f008 fc0a 	bl	800a664 <HAL_I2C_Mem_Read>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d198      	bne.n	8001d86 <bmp280_init+0x12>
 8001e54:	e9cd a801 	strd	sl, r8, [sp, #4]
 8001e58:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001e5a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001e5c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001e60:	8063      	strh	r3, [r4, #2]
	tx_buff = (dev->addr << 1);
 8001e62:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001e64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e66:	b289      	uxth	r1, r1
 8001e68:	2301      	movs	r3, #1
 8001e6a:	228c      	movs	r2, #140	; 0x8c
 8001e6c:	f008 fbfa 	bl	800a664 <HAL_I2C_Mem_Read>
 8001e70:	4607      	mov	r7, r0
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d186      	bne.n	8001d84 <bmp280_init+0x10>
 8001e76:	e9cd a801 	strd	sl, r8, [sp, #4]
 8001e7a:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001e7c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001e7e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001e82:	80a3      	strh	r3, [r4, #4]
	tx_buff = (dev->addr << 1);
 8001e84:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001e86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e88:	b289      	uxth	r1, r1
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	228e      	movs	r2, #142	; 0x8e
 8001e8e:	f008 fbe9 	bl	800a664 <HAL_I2C_Mem_Read>
 8001e92:	2800      	cmp	r0, #0
 8001e94:	f47f af77 	bne.w	8001d86 <bmp280_init+0x12>
 8001e98:	e9cd a801 	strd	sl, r8, [sp, #4]
 8001e9c:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001e9e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001ea0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001ea4:	80e3      	strh	r3, [r4, #6]
	tx_buff = (dev->addr << 1);
 8001ea6:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001ea8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001eaa:	b289      	uxth	r1, r1
 8001eac:	2301      	movs	r3, #1
 8001eae:	2290      	movs	r2, #144	; 0x90
 8001eb0:	f008 fbd8 	bl	800a664 <HAL_I2C_Mem_Read>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	f47f af65 	bne.w	8001d84 <bmp280_init+0x10>
 8001eba:	e9cd a801 	strd	sl, r8, [sp, #4]
 8001ebe:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001ec0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001ec2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001ec6:	8123      	strh	r3, [r4, #8]
	tx_buff = (dev->addr << 1);
 8001ec8:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001eca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ecc:	b289      	uxth	r1, r1
 8001ece:	2301      	movs	r3, #1
 8001ed0:	2292      	movs	r2, #146	; 0x92
 8001ed2:	f008 fbc7 	bl	800a664 <HAL_I2C_Mem_Read>
 8001ed6:	4607      	mov	r7, r0
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	f47f af53 	bne.w	8001d84 <bmp280_init+0x10>
 8001ede:	e9cd a801 	strd	sl, r8, [sp, #4]
 8001ee2:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001ee4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001ee6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8001eea:	8162      	strh	r2, [r4, #10]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001eec:	2301      	movs	r3, #1
	tx_buff = (dev->addr << 1);
 8001eee:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001ef0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ef2:	b289      	uxth	r1, r1
 8001ef4:	2294      	movs	r2, #148	; 0x94
 8001ef6:	f008 fbb5 	bl	800a664 <HAL_I2C_Mem_Read>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	f47f af43 	bne.w	8001d86 <bmp280_init+0x12>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001f00:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001f04:	81a3      	strh	r3, [r4, #12]
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001f06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f08:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001f0a:	f104 030e 	add.w	r3, r4, #14
 8001f0e:	2296      	movs	r2, #150	; 0x96
 8001f10:	f7ff ff12 	bl	8001d38 <read_register16.isra.0>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	f43f af35 	beq.w	8001d84 <bmp280_init+0x10>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001f1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f1c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001f1e:	f104 0310 	add.w	r3, r4, #16
 8001f22:	2298      	movs	r2, #152	; 0x98
 8001f24:	f7ff ff08 	bl	8001d38 <read_register16.isra.0>
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	f43f af2b 	beq.w	8001d84 <bmp280_init+0x10>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001f2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f30:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001f32:	f104 0312 	add.w	r3, r4, #18
 8001f36:	229a      	movs	r2, #154	; 0x9a
 8001f38:	f7ff fefe 	bl	8001d38 <read_register16.isra.0>
 8001f3c:	2800      	cmp	r0, #0
 8001f3e:	f43f af21 	beq.w	8001d84 <bmp280_init+0x10>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001f42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f44:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001f46:	f104 0314 	add.w	r3, r4, #20
 8001f4a:	229c      	movs	r2, #156	; 0x9c
 8001f4c:	f7ff fef4 	bl	8001d38 <read_register16.isra.0>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	f43f af17 	beq.w	8001d84 <bmp280_init+0x10>
			&& read_register16(dev, 0x9e,
 8001f56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f58:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001f5a:	f104 0316 	add.w	r3, r4, #22
 8001f5e:	229e      	movs	r2, #158	; 0x9e
 8001f60:	f7ff feea 	bl	8001d38 <read_register16.isra.0>
 8001f64:	4607      	mov	r7, r0
 8001f66:	2800      	cmp	r0, #0
 8001f68:	f43f af0c 	beq.w	8001d84 <bmp280_init+0x10>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001f6c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8001f70:	2b60      	cmp	r3, #96	; 0x60
 8001f72:	d03b      	beq.n	8001fec <bmp280_init+0x278>
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001f74:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001f76:	9600      	str	r6, [sp, #0]
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001f78:	786b      	ldrb	r3, [r5, #1]
 8001f7a:	796a      	ldrb	r2, [r5, #5]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8001f82:	f88d 3014 	strb.w	r3, [sp, #20]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001f86:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
	tx_buff = (dev->addr << 1);
 8001f90:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001f92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f94:	b289      	uxth	r1, r1
 8001f96:	22f5      	movs	r2, #245	; 0xf5
 8001f98:	f008 fa38 	bl	800a40c <HAL_I2C_Mem_Write>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	f47f aef1 	bne.w	8001d84 <bmp280_init+0x10>
	if (params->mode == BMP280_MODE_FORCED) {
 8001fa2:	782a      	ldrb	r2, [r5, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 8001fa4:	78ab      	ldrb	r3, [r5, #2]
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001fa6:	78e9      	ldrb	r1, [r5, #3]
	if (params->mode == BMP280_MODE_FORCED) {
 8001fa8:	2a01      	cmp	r2, #1
			| (params->oversampling_pressure << 2) | (params->mode);
 8001faa:	ea4f 0383 	mov.w	r3, r3, lsl #2
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001fae:	bf04      	itt	eq
 8001fb0:	7028      	strbeq	r0, [r5, #0]
 8001fb2:	4602      	moveq	r2, r0
			| (params->oversampling_pressure << 2) | (params->mode);
 8001fb4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001fb8:	431a      	orrs	r2, r3
	if (dev->id == BME280_CHIP_ID) {
 8001fba:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8001fbe:	2b60      	cmp	r3, #96	; 0x60
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001fc0:	fa5f f882 	uxtb.w	r8, r2
	if (dev->id == BME280_CHIP_ID) {
 8001fc4:	d07a      	beq.n	80020bc <bmp280_init+0x348>
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001fc6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001fc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001fca:	9600      	str	r6, [sp, #0]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f242 7210 	movw	r2, #10000	; 0x2710
	tx_buff = (dev->addr << 1);
 8001fd2:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001fd4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001fd8:	b289      	uxth	r1, r1
 8001fda:	22f4      	movs	r2, #244	; 0xf4
 8001fdc:	f88d 8014 	strb.w	r8, [sp, #20]
 8001fe0:	f008 fa14 	bl	800a40c <HAL_I2C_Mem_Write>
		return false;
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	bf18      	it	ne
 8001fe8:	2700      	movne	r7, #0
 8001fea:	e6cc      	b.n	8001d86 <bmp280_init+0x12>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001fec:	f04f 0901 	mov.w	r9, #1
 8001ff0:	f241 3a88 	movw	sl, #5000	; 0x1388
	tx_buff = (dev->addr << 1);
 8001ff4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001ff6:	e9cd 9a01 	strd	r9, sl, [sp, #4]
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001ffa:	f104 0318 	add.w	r3, r4, #24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001ffe:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 8002000:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002002:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002004:	b289      	uxth	r1, r1
 8002006:	464b      	mov	r3, r9
 8002008:	22a1      	movs	r2, #161	; 0xa1
 800200a:	f008 fb2b 	bl	800a664 <HAL_I2C_Mem_Read>
 800200e:	2800      	cmp	r0, #0
 8002010:	f47f aeb8 	bne.w	8001d84 <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002014:	f8cd a008 	str.w	sl, [sp, #8]
 8002018:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 800201a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800201c:	2302      	movs	r3, #2
 800201e:	9301      	str	r3, [sp, #4]
	tx_buff = (dev->addr << 1);
 8002020:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002022:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002024:	b289      	uxth	r1, r1
 8002026:	464b      	mov	r3, r9
 8002028:	22e1      	movs	r2, #225	; 0xe1
 800202a:	f008 fb1b 	bl	800a664 <HAL_I2C_Mem_Read>
 800202e:	2800      	cmp	r0, #0
 8002030:	f47f aea8 	bne.w	8001d84 <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002034:	e9cd 9a01 	strd	r9, sl, [sp, #4]
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8002038:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	tx_buff = (dev->addr << 1);
 800203c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800203e:	8363      	strh	r3, [r4, #26]
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8002040:	f104 031c 	add.w	r3, r4, #28
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002044:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 8002046:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002048:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800204a:	b289      	uxth	r1, r1
 800204c:	464b      	mov	r3, r9
 800204e:	22e3      	movs	r2, #227	; 0xe3
 8002050:	f008 fb08 	bl	800a664 <HAL_I2C_Mem_Read>
 8002054:	2800      	cmp	r0, #0
 8002056:	f47f ae95 	bne.w	8001d84 <bmp280_init+0x10>
			&& read_register16(dev, 0xe4, &h4)
 800205a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800205c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800205e:	f10d 0312 	add.w	r3, sp, #18
 8002062:	22e4      	movs	r2, #228	; 0xe4
 8002064:	f7ff fe68 	bl	8001d38 <read_register16.isra.0>
 8002068:	2800      	cmp	r0, #0
 800206a:	f43f ae8b 	beq.w	8001d84 <bmp280_init+0x10>
			&& read_register16(dev, 0xe5, &h5)
 800206e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002070:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002072:	4633      	mov	r3, r6
 8002074:	22e5      	movs	r2, #229	; 0xe5
 8002076:	f7ff fe5f 	bl	8001d38 <read_register16.isra.0>
 800207a:	2800      	cmp	r0, #0
 800207c:	f43f ae82 	beq.w	8001d84 <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002080:	e9cd 9a01 	strd	r9, sl, [sp, #4]
	tx_buff = (dev->addr << 1);
 8002084:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8002086:	f104 0222 	add.w	r2, r4, #34	; 0x22
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800208a:	9200      	str	r2, [sp, #0]
	tx_buff = (dev->addr << 1);
 800208c:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800208e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002090:	464b      	mov	r3, r9
 8002092:	b289      	uxth	r1, r1
 8002094:	22e7      	movs	r2, #231	; 0xe7
 8002096:	f008 fae5 	bl	800a664 <HAL_I2C_Mem_Read>
 800209a:	2800      	cmp	r0, #0
 800209c:	f47f ae72 	bne.w	8001d84 <bmp280_init+0x10>
		dev->dig_H5 = h5 >> 4;
 80020a0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80020a4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		dev->dig_H5 = h5 >> 4;
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	8423      	strh	r3, [r4, #32]
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80020ac:	0113      	lsls	r3, r2, #4
 80020ae:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80020b2:	f3c2 2203 	ubfx	r2, r2, #8, #4
 80020b6:	4313      	orrs	r3, r2
 80020b8:	83e3      	strh	r3, [r4, #30]
		return true;
 80020ba:	e75b      	b.n	8001f74 <bmp280_init+0x200>
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80020bc:	792b      	ldrb	r3, [r5, #4]
 80020be:	f88d 3014 	strb.w	r3, [sp, #20]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80020c2:	9600      	str	r6, [sp, #0]
 80020c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80020c8:	2301      	movs	r3, #1
 80020ca:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80020cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
	tx_buff = (dev->addr << 1);
 80020d0:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80020d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80020d4:	b289      	uxth	r1, r1
 80020d6:	22f2      	movs	r2, #242	; 0xf2
 80020d8:	f008 f998 	bl	800a40c <HAL_I2C_Mem_Write>
 80020dc:	2800      	cmp	r0, #0
 80020de:	f43f af72 	beq.w	8001fc6 <bmp280_init+0x252>
 80020e2:	e64f      	b.n	8001d84 <bmp280_init+0x10>

080020e4 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 80020e4:	b530      	push	{r4, r5, lr}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 80020ea:	b087      	sub	sp, #28
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80020ec:	2501      	movs	r5, #1
	tx_buff = (dev->addr << 1);
 80020ee:	8c81      	ldrh	r1, [r0, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80020f0:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80020f4:	f10d 0316 	add.w	r3, sp, #22
 80020f8:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 80020fa:	40a9      	lsls	r1, r5
bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 80020fc:	4604      	mov	r4, r0
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80020fe:	b289      	uxth	r1, r1
 8002100:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002102:	462b      	mov	r3, r5
 8002104:	22f4      	movs	r2, #244	; 0xf4
 8002106:	f008 faad 	bl	800a664 <HAL_I2C_Mem_Read>
 800210a:	b9e8      	cbnz	r0, 8002148 <bmp280_force_measurement+0x64>
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
		return false;
	ctrl &= ~0b11;  // clear two lower bits
	ctrl |= BMP280_MODE_FORCED;
 800210c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	ctrl &= ~0b11;  // clear two lower bits
 800210e:	f89d c016 	ldrb.w	ip, [sp, #22]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8002112:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002114:	f242 7310 	movw	r3, #10000	; 0x2710
 8002118:	9302      	str	r3, [sp, #8]
	tx_buff = (dev->addr << 1);
 800211a:	40a9      	lsls	r1, r5
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800211c:	f10d 0317 	add.w	r3, sp, #23
	ctrl &= ~0b11;  // clear two lower bits
 8002120:	f02c 0c03 	bic.w	ip, ip, #3
	ctrl |= BMP280_MODE_FORCED;
 8002124:	ea4c 0c05 	orr.w	ip, ip, r5
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8002128:	e9cd 3500 	strd	r3, r5, [sp]
 800212c:	b289      	uxth	r1, r1
 800212e:	462b      	mov	r3, r5
 8002130:	22f4      	movs	r2, #244	; 0xf4
	ctrl |= BMP280_MODE_FORCED;
 8002132:	f88d c016 	strb.w	ip, [sp, #22]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002136:	f88d c017 	strb.w	ip, [sp, #23]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800213a:	f008 f967 	bl	800a40c <HAL_I2C_Mem_Write>
		return false;
 800213e:	fab0 f080 	clz	r0, r0
 8002142:	0940      	lsrs	r0, r0, #5
	}
	return true;
}
 8002144:	b007      	add	sp, #28
 8002146:	bd30      	pop	{r4, r5, pc}
		return false;
 8002148:	2000      	movs	r0, #0
}
 800214a:	b007      	add	sp, #28
 800214c:	bd30      	pop	{r4, r5, pc}
 800214e:	bf00      	nop

08002150 <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8002150:	b510      	push	{r4, lr}
	tx_buff = (dev->addr << 1);
 8002152:	8c81      	ldrh	r1, [r0, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002154:	6a80      	ldr	r0, [r0, #40]	; 0x28
bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8002156:	b086      	sub	sp, #24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002158:	2301      	movs	r3, #1
 800215a:	f10d 0217 	add.w	r2, sp, #23
 800215e:	f241 3488 	movw	r4, #5000	; 0x1388
	tx_buff = (dev->addr << 1);
 8002162:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002164:	9200      	str	r2, [sp, #0]
 8002166:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800216a:	b289      	uxth	r1, r1
 800216c:	22f3      	movs	r2, #243	; 0xf3
 800216e:	f008 fa79 	bl	800a664 <HAL_I2C_Mem_Read>
 8002172:	b110      	cbz	r0, 800217a <bmp280_is_measuring+0x2a>
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
		return false;
 8002174:	2000      	movs	r0, #0
	if (status & (1 << 3)) {
		return true;
	}
	return false;
}
 8002176:	b006      	add	sp, #24
 8002178:	bd10      	pop	{r4, pc}
	if (status & (1 << 3)) {
 800217a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800217e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
}
 8002182:	b006      	add	sp, #24
 8002184:	bd10      	pop	{r4, pc}
 8002186:	bf00      	nop

08002188 <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800218c:	4604      	mov	r4, r0
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800218e:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
		uint32_t *humidity) {
 8002192:	b08f      	sub	sp, #60	; 0x3c
	if (dev->id != BME280_CHIP_ID) {
 8002194:	2860      	cmp	r0, #96	; 0x60
		uint32_t *humidity) {
 8002196:	4688      	mov	r8, r1
 8002198:	9205      	str	r2, [sp, #20]
 800219a:	461e      	mov	r6, r3
	if (dev->id != BME280_CHIP_ID) {
 800219c:	f000 8154 	beq.w	8002448 <bmp280_read_fixed+0x2c0>
		if (humidity)
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8156 	beq.w	8002452 <bmp280_read_fixed+0x2ca>
			*humidity = 0;
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	4616      	mov	r6, r2
 80021ac:	2306      	movs	r3, #6
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	ab0c      	add	r3, sp, #48	; 0x30
 80021b2:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 80021b4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	2301      	movs	r3, #1
 80021bc:	9202      	str	r2, [sp, #8]
	tx_buff = (dev->addr << 1);
 80021be:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80021c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80021c2:	b289      	uxth	r1, r1
 80021c4:	22f7      	movs	r2, #247	; 0xf7
 80021c6:	f008 fa4d 	bl	800a664 <HAL_I2C_Mem_Read>
 80021ca:	2800      	cmp	r0, #0
 80021cc:	f040 8138 	bne.w	8002440 <bmp280_read_fixed+0x2b8>
	if (read_data(dev, 0xf7, data, size)) {
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80021d0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80021d4:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 80021d8:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80021dc:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80021e0:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80021e4:	9706      	str	r7, [sp, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80021ec:	8822      	ldrh	r2, [r4, #0]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80021ee:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80021f2:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80021f6:	fb03 f503 	mul.w	r5, r3, r3
			* (int32_t) dev->dig_T3) >> 14;
 80021fa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80021fe:	132d      	asrs	r5, r5, #12
			* (int32_t) dev->dig_T3) >> 14;
 8002200:	fb03 f505 	mul.w	r5, r3, r5
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002204:	0052      	lsls	r2, r2, #1
			* (int32_t) dev->dig_T2) >> 11;
 8002206:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800220a:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
			* (int32_t) dev->dig_T2) >> 11;
 800220e:	fb03 f202 	mul.w	r2, r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002212:	13ad      	asrs	r5, r5, #14
	*fine_temp = var1 + var2;
 8002214:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	return (*fine_temp * 5 + 128) >> 8;
 8002218:	eb05 0985 	add.w	r9, r5, r5, lsl #2
 800221c:	f109 0980 	add.w	r9, r9, #128	; 0x80
 8002220:	ea4f 2929 	mov.w	r9, r9, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002224:	88e1      	ldrh	r1, [r4, #6]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002226:	f9b4 2008 	ldrsh.w	r2, [r4, #8]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800222a:	f8c8 9000 	str.w	r9, [r8]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800222e:	f89d 8031 	ldrb.w	r8, [sp, #49]	; 0x31
 8002232:	f8cd 801c 	str.w	r8, [sp, #28]
 8002236:	f89d 8032 	ldrb.w	r8, [sp, #50]	; 0x32
 800223a:	f8cd 8020 	str.w	r8, [sp, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800223e:	f9b4 8010 	ldrsh.w	r8, [r4, #16]
 8002242:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002246:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 800224a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800224e:	f5a5 3efa 	sub.w	lr, r5, #128000	; 0x1f400
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8002252:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 8002256:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800225a:	fb8e 890e 	smull	r8, r9, lr, lr
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800225e:	ea4f 7bec 	mov.w	fp, ip, asr #31
 8002262:	fb0c fa09 	mul.w	sl, ip, r9
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002266:	fb82 230e 	smull	r2, r3, r2, lr
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800226a:	fb08 aa0b 	mla	sl, r8, fp, sl
 800226e:	fbac cb08 	umull	ip, fp, ip, r8
 8002272:	44d3      	add	fp, sl
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002274:	031b      	lsls	r3, r3, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002276:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800227a:	ea43 5312 	orr.w	r3, r3, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800227e:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8002282:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002284:	eb1c 0c02 	adds.w	ip, ip, r2
 8002288:	eb43 232b 	adc.w	r3, r3, fp, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800228c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002290:	fbac c201 	umull	ip, r2, ip, r1
 8002294:	fb01 2103 	mla	r1, r1, r3, r2
 8002298:	17cb      	asrs	r3, r1, #31
 800229a:	104a      	asrs	r2, r1, #1
	if (var1 == 0) {
 800229c:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 80022a0:	f000 8089 	beq.w	80023b6 <bmp280_read_fixed+0x22e>
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80022a4:	9908      	ldr	r1, [sp, #32]
 80022a6:	9f07      	ldr	r7, [sp, #28]
 80022a8:	0909      	lsrs	r1, r1, #4
 80022aa:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 80022ae:	9f06      	ldr	r7, [sp, #24]
 80022b0:	ea41 3107 	orr.w	r1, r1, r7, lsl #12
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80022b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80022b6:	fb87 ec0e 	smull	lr, ip, r7, lr
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80022ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80022bc:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80022c0:	fb07 f909 	mul.w	r9, r7, r9
 80022c4:	ea4f 7ae7 	mov.w	sl, r7, asr #31
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80022c8:	ea4c 3cde 	orr.w	ip, ip, lr, lsr #15
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80022cc:	fb08 9a0a 	mla	sl, r8, sl, r9
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80022d0:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80022d4:	fba7 9808 	umull	r9, r8, r7, r8
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80022d8:	eb1e 0e09 	adds.w	lr, lr, r9
	p = 1048576 - adc_press;
 80022dc:	f5c1 1180 	rsb	r1, r1, #1048576	; 0x100000
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80022e0:	44c2      	add	sl, r8
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80022e2:	eb4a 0a0c 	adc.w	sl, sl, ip
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80022e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80022e8:	eb10 000e 	adds.w	r0, r0, lr
	p = (((p << 31) - var2) * 3125) / var1;
 80022ec:	f001 4e00 	and.w	lr, r1, #2147483648	; 0x80000000
 80022f0:	ea4e 0e51 	orr.w	lr, lr, r1, lsr #1
 80022f4:	07c9      	lsls	r1, r1, #31
 80022f6:	ebb1 0800 	subs.w	r8, r1, r0
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80022fa:	eb0a 0ac7 	add.w	sl, sl, r7, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
 80022fe:	eb6e 0e0a 	sbc.w	lr, lr, sl
 8002302:	eb18 0c08 	adds.w	ip, r8, r8
 8002306:	eb4e 010e 	adc.w	r1, lr, lr
 800230a:	eb1c 0c08 	adds.w	ip, ip, r8
 800230e:	eb4e 0101 	adc.w	r1, lr, r1
 8002312:	0188      	lsls	r0, r1, #6
 8002314:	ea4f 198c 	mov.w	r9, ip, lsl #6
 8002318:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 800231c:	eb1c 0c09 	adds.w	ip, ip, r9
 8002320:	eb41 0100 	adc.w	r1, r1, r0
 8002324:	0089      	lsls	r1, r1, #2
 8002326:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 800232a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800232e:	eb1c 0c08 	adds.w	ip, ip, r8
 8002332:	eb4e 0101 	adc.w	r1, lr, r1
 8002336:	ea4f 008c 	mov.w	r0, ip, lsl #2
 800233a:	0089      	lsls	r1, r1, #2
 800233c:	eb10 0008 	adds.w	r0, r0, r8
 8002340:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8002344:	eb4e 0101 	adc.w	r1, lr, r1
 8002348:	f7fe fdbc 	bl	8000ec4 <__aeabi_ldivmod>
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800234c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8002350:	ea4f 3e61 	mov.w	lr, r1, asr #13
 8002354:	ea4f 3c50 	mov.w	ip, r0, lsr #13
 8002358:	ea4c 4cc1 	orr.w	ip, ip, r1, lsl #19
 800235c:	17d3      	asrs	r3, r2, #31
 800235e:	fb02 f80e 	mul.w	r8, r2, lr
 8002362:	fb0c 8903 	mla	r9, ip, r3, r8
 8002366:	fba2 280c 	umull	r2, r8, r2, ip
 800236a:	fb02 fe0e 	mul.w	lr, r2, lr
 800236e:	44c8      	add	r8, r9
 8002370:	fb0c ee08 	mla	lr, ip, r8, lr
 8002374:	fba2 2c0c 	umull	r2, ip, r2, ip
 8002378:	44f4      	add	ip, lr
 800237a:	0e52      	lsrs	r2, r2, #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800237c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002380:	ea42 12cc 	orr.w	r2, r2, ip, lsl #7
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002384:	1812      	adds	r2, r2, r0
 8002386:	eb41 6c6c 	adc.w	ip, r1, ip, asr #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 800238a:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 800238e:	fb03 f101 	mul.w	r1, r3, r1
 8002392:	fb0e 1100 	mla	r1, lr, r0, r1
 8002396:	fba3 3000 	umull	r3, r0, r3, r0
 800239a:	4401      	add	r1, r0
 800239c:	0cdb      	lsrs	r3, r3, #19
 800239e:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80023a2:	18d0      	adds	r0, r2, r3
 80023a4:	eb4c 4ce1 	adc.w	ip, ip, r1, asr #19
 80023a8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80023ac:	0a00      	lsrs	r0, r0, #8
 80023ae:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
	return p;
 80023b2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80023b6:	9b05      	ldr	r3, [sp, #20]
 80023b8:	6018      	str	r0, [r3, #0]

	if (humidity) {
 80023ba:	2e00      	cmp	r6, #0
 80023bc:	d04b      	beq.n	8002456 <bmp280_read_fixed+0x2ce>
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80023be:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80023c2:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80023c6:	f994 1022 	ldrsb.w	r1, [r4, #34]	; 0x22
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80023ca:	ba5b      	rev16	r3, r3
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	0512      	lsls	r2, r2, #20
 80023d0:	ebc2 3283 	rsb	r2, r2, r3, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80023d4:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
	v_x1_u32r = fine_temp - (int32_t) 76800;
 80023d8:	f5a5 3596 	sub.w	r5, r5, #76800	; 0x12c00
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80023dc:	fb05 2213 	mls	r2, r5, r3, r2
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80023e0:	7f23      	ldrb	r3, [r4, #28]
 80023e2:	fb05 f303 	mul.w	r3, r5, r3
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80023e6:	fb05 f101 	mul.w	r1, r5, r1
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80023ea:	12db      	asrs	r3, r3, #11
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80023ec:	1289      	asrs	r1, r1, #10
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80023ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80023f6:	129b      	asrs	r3, r3, #10
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80023f8:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80023fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002400:	fb01 f303 	mul.w	r3, r1, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002404:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002408:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800240c:	13d2      	asrs	r2, r2, #15
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800240e:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002410:	fb02 f303 	mul.w	r3, r2, r3
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002414:	13da      	asrs	r2, r3, #15
					* (int32_t) dev->dig_H1) >> 4);
 8002416:	7e21      	ldrb	r1, [r4, #24]
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002418:	fb02 f202 	mul.w	r2, r2, r2
 800241c:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 800241e:	fb01 f202 	mul.w	r2, r1, r2
	v_x1_u32r = v_x1_u32r
 8002422:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002426:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 800242a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800242e:	bfa8      	it	ge
 8002430:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
	return v_x1_u32r >> 12;
 8002434:	131b      	asrs	r3, r3, #12
		int32_t adc_humidity = data[6] << 8 | data[7];
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
	}

	return true;
 8002436:	2001      	movs	r0, #1
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002438:	6033      	str	r3, [r6, #0]
}
 800243a:	b00f      	add	sp, #60	; 0x3c
 800243c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
 8002440:	2000      	movs	r0, #0
}
 8002442:	b00f      	add	sp, #60	; 0x3c
 8002444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t size = humidity ? 8 : 6;
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf14      	ite	ne
 800244c:	2308      	movne	r3, #8
 800244e:	2306      	moveq	r3, #6
 8002450:	e6ad      	b.n	80021ae <bmp280_read_fixed+0x26>
 8002452:	2306      	movs	r3, #6
 8002454:	e6ab      	b.n	80021ae <bmp280_read_fixed+0x26>
	return true;
 8002456:	2001      	movs	r0, #1
}
 8002458:	b00f      	add	sp, #60	; 0x3c
 800245a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800245e:	bf00      	nop

08002460 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	460d      	mov	r5, r1
 8002464:	b084      	sub	sp, #16
 8002466:	4616      	mov	r6, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002468:	b30b      	cbz	r3, 80024ae <bmp280_read_float+0x4e>
 800246a:	461c      	mov	r4, r3
 800246c:	aa02      	add	r2, sp, #8
 800246e:	ab03      	add	r3, sp, #12
 8002470:	a901      	add	r1, sp, #4
 8002472:	f7ff fe89 	bl	8002188 <bmp280_read_fixed>
 8002476:	b910      	cbnz	r0, 800247e <bmp280_read_float+0x1e>
		if (humidity)
			*humidity = (float) fixed_humidity / 1024;
		return true;
	}

	return false;
 8002478:	2000      	movs	r0, #0
}
 800247a:	b004      	add	sp, #16
 800247c:	bd70      	pop	{r4, r5, r6, pc}
		*temperature = (float) fixed_temperature / 100;
 800247e:	eddd 7a01 	vldr	s15, [sp, #4]
 8002482:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80024e0 <bmp280_read_float+0x80>
 8002486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248a:	eec7 6a87 	vdiv.f32	s13, s15, s14
		*pressure = (float) fixed_pressure / 256;
 800248e:	ed9d 7a02 	vldr	s14, [sp, #8]
			*humidity = (float) fixed_humidity / 1024;
 8002492:	eddd 7a03 	vldr	s15, [sp, #12]
		*temperature = (float) fixed_temperature / 100;
 8002496:	edc5 6a00 	vstr	s13, [r5]
		*pressure = (float) fixed_pressure / 256;
 800249a:	eebb 7acc 	vcvt.f32.u32	s14, s14, #8
			*humidity = (float) fixed_humidity / 1024;
 800249e:	eefb 7acb 	vcvt.f32.u32	s15, s15, #10
		*pressure = (float) fixed_pressure / 256;
 80024a2:	ed86 7a00 	vstr	s14, [r6]
			*humidity = (float) fixed_humidity / 1024;
 80024a6:	edc4 7a00 	vstr	s15, [r4]
}
 80024aa:	b004      	add	sp, #16
 80024ac:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80024ae:	aa02      	add	r2, sp, #8
 80024b0:	a901      	add	r1, sp, #4
 80024b2:	f7ff fe69 	bl	8002188 <bmp280_read_fixed>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d0de      	beq.n	8002478 <bmp280_read_float+0x18>
		*temperature = (float) fixed_temperature / 100;
 80024ba:	eddd 7a01 	vldr	s15, [sp, #4]
 80024be:	eddf 6a08 	vldr	s13, [pc, #32]	; 80024e0 <bmp280_read_float+0x80>
 80024c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		*pressure = (float) fixed_pressure / 256;
 80024ca:	eddd 7a02 	vldr	s15, [sp, #8]
		*temperature = (float) fixed_temperature / 100;
 80024ce:	ed85 7a00 	vstr	s14, [r5]
		*pressure = (float) fixed_pressure / 256;
 80024d2:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 80024d6:	edc6 7a00 	vstr	s15, [r6]
}
 80024da:	b004      	add	sp, #16
 80024dc:	bd70      	pop	{r4, r5, r6, pc}
 80024de:	bf00      	nop
 80024e0:	42c80000 	.word	0x42c80000

080024e4 <BQ25798_check>:
#define BQ25798_ADDR 0x6B << 1


// Checking
uint8_t BQ25798_check()
{
 80024e4:	b570      	push	{r4, r5, r6, lr}
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 80024e6:	4815      	ldr	r0, [pc, #84]	; (800253c <BQ25798_check+0x58>)
	for (int i = 0; i < 5; i++) {
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 80024e8:	4e15      	ldr	r6, [pc, #84]	; (8002540 <BQ25798_check+0x5c>)
	printf("Checking BQ25798 ... ");
 80024ea:	f00d fd1b 	bl	800ff24 <iprintf>
 80024ee:	2505      	movs	r5, #5
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 80024f0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80024f4:	2203      	movs	r2, #3
 80024f6:	21d6      	movs	r1, #214	; 0xd6
 80024f8:	4630      	mov	r0, r6
 80024fa:	f008 f9db 	bl	800a8b4 <HAL_I2C_IsDeviceReady>
 80024fe:	4604      	mov	r4, r0
		osDelay(50);
 8002500:	2032      	movs	r0, #50	; 0x32
 8002502:	f00a fda3 	bl	800d04c <osDelay>
	    	BQ25798_set_ADC();
	    	res = OK;
	        break;
	    } else {
	    	res = FAULT;
	    	osDelay(500);
 8002506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	    if (status == HAL_OK) {
 800250a:	b144      	cbz	r4, 800251e <BQ25798_check+0x3a>
	    	osDelay(500);
 800250c:	f00a fd9e 	bl	800d04c <osDelay>
	for (int i = 0; i < 5; i++) {
 8002510:	3d01      	subs	r5, #1
 8002512:	d1ed      	bne.n	80024f0 <BQ25798_check+0xc>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 8002514:	480b      	ldr	r0, [pc, #44]	; (8002544 <BQ25798_check+0x60>)
 8002516:	f00d fd6b 	bl	800fff0 <puts>
 800251a:	4628      	mov	r0, r5
	return res;
}
 800251c:	bd70      	pop	{r4, r5, r6, pc}
	    	printf("OK !\r\n");
 800251e:	480a      	ldr	r0, [pc, #40]	; (8002548 <BQ25798_check+0x64>)
 8002520:	f00d fd66 	bl	800fff0 <puts>

void BQ25798_set_ADC()
{
	uint8_t reg;
	reg = 0b10000000;
	i2c_write8(&hi2c1, REG2E_ADC_Control, reg, BQ25798_ADDR);
 8002524:	23d6      	movs	r3, #214	; 0xd6
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	212e      	movs	r1, #46	; 0x2e
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <BQ25798_check+0x5c>)
 800252c:	f005 fd06 	bl	8007f3c <i2c_write8>
	osDelay(1);
 8002530:	2001      	movs	r0, #1
 8002532:	f00a fd8b 	bl	800d04c <osDelay>
	    	res = OK;
 8002536:	2001      	movs	r0, #1
}
 8002538:	bd70      	pop	{r4, r5, r6, pc}
 800253a:	bf00      	nop
 800253c:	08013958 	.word	0x08013958
 8002540:	200010b0 	.word	0x200010b0
 8002544:	08013978 	.word	0x08013978
 8002548:	08013970 	.word	0x08013970

0800254c <BQ25798_Vbat_read>:
}

uint16_t BQ25798_Vbat_read()
{
 800254c:	b500      	push	{lr}
 800254e:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG3B_VBAT_ADC, &value, BQ25798_ADDR);
 8002550:	23d6      	movs	r3, #214	; 0xd6
 8002552:	f10d 0206 	add.w	r2, sp, #6
 8002556:	213b      	movs	r1, #59	; 0x3b
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <BQ25798_Vbat_read+0x20>)
 800255a:	f005 fcd9 	bl	8007f10 <i2c_read16>
    return byteswap16(value);
 800255e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002562:	f005 fd69 	bl	8008038 <byteswap16>
}
 8002566:	b003      	add	sp, #12
 8002568:	f85d fb04 	ldr.w	pc, [sp], #4
 800256c:	200010b0 	.word	0x200010b0

08002570 <BQ25798_Vsys_read>:

uint16_t BQ25798_Vsys_read()
{
 8002570:	b500      	push	{lr}
 8002572:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG3D_VSYS_ADC, &value, BQ25798_ADDR);
 8002574:	23d6      	movs	r3, #214	; 0xd6
 8002576:	f10d 0206 	add.w	r2, sp, #6
 800257a:	213d      	movs	r1, #61	; 0x3d
 800257c:	4804      	ldr	r0, [pc, #16]	; (8002590 <BQ25798_Vsys_read+0x20>)
 800257e:	f005 fcc7 	bl	8007f10 <i2c_read16>
    return byteswap16(value);
 8002582:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002586:	f005 fd57 	bl	8008038 <byteswap16>
}
 800258a:	b003      	add	sp, #12
 800258c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002590:	200010b0 	.word	0x200010b0

08002594 <BQ25798_Vac1_read>:
    i2c_read16(&hi2c1, REG35_VBUS_ADC, &value, BQ25798_ADDR);
    return byteswap16(value);
}

uint16_t BQ25798_Vac1_read()
{
 8002594:	b500      	push	{lr}
 8002596:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG37_VAC1_ADC, &value, BQ25798_ADDR);
 8002598:	23d6      	movs	r3, #214	; 0xd6
 800259a:	f10d 0206 	add.w	r2, sp, #6
 800259e:	2137      	movs	r1, #55	; 0x37
 80025a0:	4804      	ldr	r0, [pc, #16]	; (80025b4 <BQ25798_Vac1_read+0x20>)
 80025a2:	f005 fcb5 	bl	8007f10 <i2c_read16>
    return byteswap16(value);
 80025a6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80025aa:	f005 fd45 	bl	8008038 <byteswap16>
}
 80025ae:	b003      	add	sp, #12
 80025b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80025b4:	200010b0 	.word	0x200010b0

080025b8 <BQ25798_Vac2_read>:

uint16_t BQ25798_Vac2_read()
{
 80025b8:	b500      	push	{lr}
 80025ba:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG39_VAC2_ADC, &value, BQ25798_ADDR);
 80025bc:	23d6      	movs	r3, #214	; 0xd6
 80025be:	f10d 0206 	add.w	r2, sp, #6
 80025c2:	2139      	movs	r1, #57	; 0x39
 80025c4:	4804      	ldr	r0, [pc, #16]	; (80025d8 <BQ25798_Vac2_read+0x20>)
 80025c6:	f005 fca3 	bl	8007f10 <i2c_read16>
    return byteswap16(value);
 80025ca:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80025ce:	f005 fd33 	bl	8008038 <byteswap16>
}
 80025d2:	b003      	add	sp, #12
 80025d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80025d8:	200010b0 	.word	0x200010b0

080025dc <BQ25798_Ibus_read>:

uint16_t BQ25798_Ibus_read()
{
 80025dc:	b500      	push	{lr}
 80025de:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG31_IBUS_ADC, &value, BQ25798_ADDR);
 80025e0:	23d6      	movs	r3, #214	; 0xd6
 80025e2:	f10d 0206 	add.w	r2, sp, #6
 80025e6:	2131      	movs	r1, #49	; 0x31
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <BQ25798_Ibus_read+0x20>)
 80025ea:	f005 fc91 	bl	8007f10 <i2c_read16>
    return byteswap16(value);
 80025ee:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80025f2:	f005 fd21 	bl	8008038 <byteswap16>
}
 80025f6:	b003      	add	sp, #12
 80025f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80025fc:	200010b0 	.word	0x200010b0

08002600 <BQ25798_Ibat_read>:

uint16_t BQ25798_Ibat_read()
{
 8002600:	b500      	push	{lr}
 8002602:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG33_IBAT_ADC, &value, BQ25798_ADDR);
 8002604:	23d6      	movs	r3, #214	; 0xd6
 8002606:	f10d 0206 	add.w	r2, sp, #6
 800260a:	2133      	movs	r1, #51	; 0x33
 800260c:	4804      	ldr	r0, [pc, #16]	; (8002620 <BQ25798_Ibat_read+0x20>)
 800260e:	f005 fc7f 	bl	8007f10 <i2c_read16>
    return byteswap16(value);
 8002612:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002616:	f005 fd0f 	bl	8008038 <byteswap16>
}
 800261a:	b003      	add	sp, #12
 800261c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002620:	200010b0 	.word	0x200010b0

08002624 <BQ25798_Sys_Min_Voltage_read>:

uint16_t BQ25798_Sys_Min_Voltage_read()
{
 8002624:	b500      	push	{lr}
 8002626:	b087      	sub	sp, #28
	uint8_t value;
	uint8_t mask = 0x3F;
	uint16_t voltage;
    HAL_I2C_Mem_Read(&hi2c1, BQ25798_ADDR, REG00_Minimal_System_Voltage, I2C_MEMADD_SIZE_8BIT, &value, 1, 500);
 8002628:	2301      	movs	r3, #1
 800262a:	f10d 0217 	add.w	r2, sp, #23
 800262e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002632:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002636:	9200      	str	r2, [sp, #0]
 8002638:	21d6      	movs	r1, #214	; 0xd6
 800263a:	2200      	movs	r2, #0
 800263c:	4808      	ldr	r0, [pc, #32]	; (8002660 <BQ25798_Sys_Min_Voltage_read+0x3c>)
 800263e:	f008 f811 	bl	800a664 <HAL_I2C_Mem_Read>
    voltage= value & mask;
 8002642:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    voltage *= 250;
 800264a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800264e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002652:	0040      	lsls	r0, r0, #1
    voltage += 2500;
 8002654:	f600 10c4 	addw	r0, r0, #2500	; 0x9c4
    return voltage;
 8002658:	b280      	uxth	r0, r0
}
 800265a:	b007      	add	sp, #28
 800265c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002660:	200010b0 	.word	0x200010b0

08002664 <BQ25798_Chr_Volt_Limit_read>:

uint16_t BQ25798_Chr_Volt_Limit_read()
{
 8002664:	b500      	push	{lr}
 8002666:	b083      	sub	sp, #12
	uint16_t value;
	i2c_read16(&hi2c1, REG01_Charge_Voltage_Limit, &value, BQ25798_ADDR);
 8002668:	23d6      	movs	r3, #214	; 0xd6
 800266a:	f10d 0206 	add.w	r2, sp, #6
 800266e:	2101      	movs	r1, #1
 8002670:	4806      	ldr	r0, [pc, #24]	; (800268c <BQ25798_Chr_Volt_Limit_read+0x28>)
 8002672:	f005 fc4d 	bl	8007f10 <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8002676:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800267a:	f005 fcdd 	bl	8008038 <byteswap16>
    return swapvalue * 10;
 800267e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002682:	0040      	lsls	r0, r0, #1
 8002684:	b280      	uxth	r0, r0
}
 8002686:	b003      	add	sp, #12
 8002688:	f85d fb04 	ldr.w	pc, [sp], #4
 800268c:	200010b0 	.word	0x200010b0

08002690 <BQ25798_Chr_Curr_Limit_read>:

uint16_t BQ25798_Chr_Curr_Limit_read()
{
 8002690:	b500      	push	{lr}
 8002692:	b083      	sub	sp, #12
	uint16_t value;
	i2c_read16(&hi2c1, REG03_Charge_Current_Limit, &value, BQ25798_ADDR);
 8002694:	23d6      	movs	r3, #214	; 0xd6
 8002696:	f10d 0206 	add.w	r2, sp, #6
 800269a:	2103      	movs	r1, #3
 800269c:	4806      	ldr	r0, [pc, #24]	; (80026b8 <BQ25798_Chr_Curr_Limit_read+0x28>)
 800269e:	f005 fc37 	bl	8007f10 <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 80026a2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80026a6:	f005 fcc7 	bl	8008038 <byteswap16>
    return swapvalue * 10;
 80026aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ae:	0040      	lsls	r0, r0, #1
 80026b0:	b280      	uxth	r0, r0
}
 80026b2:	b003      	add	sp, #12
 80026b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80026b8:	200010b0 	.word	0x200010b0

080026bc <BQ25798_Sys_Min_Voltage_write>:

uint8_t BQ25798_Sys_Min_Voltage_write(uint8_t bits) // 6 bits multiplier (2500mV + 6bits * 250mV) e.g 3000mV = 2500 + 3*250 = 3,25V / bits=3
{
 80026bc:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG00_Minimal_System_Voltage, (bits & 0x3F), BQ25798_ADDR);
 80026be:	23d6      	movs	r3, #214	; 0xd6
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <BQ25798_Sys_Min_Voltage_write+0x10>)
 80026c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80026c6:	2100      	movs	r1, #0
 80026c8:	f005 bc38 	b.w	8007f3c <i2c_write8>
 80026cc:	200010b0 	.word	0x200010b0

080026d0 <BQ25798_Chr_Volt_Limit_write>:
}

uint8_t BQ25798_Chr_Volt_Limit_write(uint16_t val)
{
	uint8_t res;
	val /= 10;
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <BQ25798_Chr_Volt_Limit_write+0x20>)
{
 80026d2:	b510      	push	{r4, lr}
	val /= 10;
 80026d4:	fba3 3000 	umull	r3, r0, r3, r0
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 80026d8:	08c0      	lsrs	r0, r0, #3
 80026da:	f005 fcad 	bl	8008038 <byteswap16>
    return res;
}
 80026de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 80026e2:	4602      	mov	r2, r0
 80026e4:	23d6      	movs	r3, #214	; 0xd6
 80026e6:	4803      	ldr	r0, [pc, #12]	; (80026f4 <BQ25798_Chr_Volt_Limit_write+0x24>)
 80026e8:	2101      	movs	r1, #1
 80026ea:	f005 bc3b 	b.w	8007f64 <i2c_write16>
 80026ee:	bf00      	nop
 80026f0:	cccccccd 	.word	0xcccccccd
 80026f4:	200010b0 	.word	0x200010b0

080026f8 <BQ25798_Chr_Curr_Limit_write>:

uint8_t BQ25798_Chr_Curr_Limit_write(uint16_t val)
{
	uint8_t res;
	val /= 10;
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <BQ25798_Chr_Curr_Limit_write+0x20>)
{
 80026fa:	b510      	push	{r4, lr}
	val /= 10;
 80026fc:	fba3 3000 	umull	r3, r0, r3, r0
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8002700:	08c0      	lsrs	r0, r0, #3
 8002702:	f005 fc99 	bl	8008038 <byteswap16>
    return res;
}
 8002706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 800270a:	4602      	mov	r2, r0
 800270c:	23d6      	movs	r3, #214	; 0xd6
 800270e:	4803      	ldr	r0, [pc, #12]	; (800271c <BQ25798_Chr_Curr_Limit_write+0x24>)
 8002710:	2103      	movs	r1, #3
 8002712:	f005 bc27 	b.w	8007f64 <i2c_write16>
 8002716:	bf00      	nop
 8002718:	cccccccd 	.word	0xcccccccd
 800271c:	200010b0 	.word	0x200010b0

08002720 <BQ25798_Chr_Input_Voltage_Limit_write>:

uint8_t BQ25798_Chr_Input_Voltage_Limit_write(uint8_t val)
{
 8002720:	4602      	mov	r2, r0
	uint8_t res;
	res = i2c_write8(&hi2c1, REG05_Input_Voltage_Limit, val, BQ25798_ADDR);
 8002722:	23d6      	movs	r3, #214	; 0xd6
 8002724:	4801      	ldr	r0, [pc, #4]	; (800272c <BQ25798_Chr_Input_Voltage_Limit_write+0xc>)
 8002726:	2105      	movs	r1, #5
 8002728:	f005 bc08 	b.w	8007f3c <i2c_write8>
 800272c:	200010b0 	.word	0x200010b0

08002730 <BQ25798_Chr_Input_Curr_Limit_write>:
    return res;
}

uint8_t BQ25798_Chr_Input_Curr_Limit_write(uint16_t val)
{
 8002730:	b510      	push	{r4, lr}
	uint8_t res;
	res = i2c_write16(&hi2c1, REG06_Input_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8002732:	f005 fc81 	bl	8008038 <byteswap16>
    return res;
}
 8002736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG06_Input_Current_Limit, byteswap16(val), BQ25798_ADDR);
 800273a:	4602      	mov	r2, r0
 800273c:	23d6      	movs	r3, #214	; 0xd6
 800273e:	4802      	ldr	r0, [pc, #8]	; (8002748 <BQ25798_Chr_Input_Curr_Limit_write+0x18>)
 8002740:	2106      	movs	r1, #6
 8002742:	f005 bc0f 	b.w	8007f64 <i2c_write16>
 8002746:	bf00      	nop
 8002748:	200010b0 	.word	0x200010b0

0800274c <BQ25798_Chrg_CTRL1_write>:

uint8_t BQ25798_Chrg_CTRL1_write(uint8_t hex_val)
{
 800274c:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG10_Charger_Control_1, hex_val, BQ25798_ADDR);
 800274e:	23d6      	movs	r3, #214	; 0xd6
 8002750:	4801      	ldr	r0, [pc, #4]	; (8002758 <BQ25798_Chrg_CTRL1_write+0xc>)
 8002752:	2110      	movs	r1, #16
 8002754:	f005 bbf2 	b.w	8007f3c <i2c_write8>
 8002758:	200010b0 	.word	0x200010b0

0800275c <BQ25798_Chrg_NTC_CTRL1_write>:
    return res;
}

uint8_t BQ25798_Chrg_NTC_CTRL1_write(uint8_t hex_val)
{
 800275c:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG18_NTC_Control_1, hex_val, BQ25798_ADDR);
 800275e:	23d6      	movs	r3, #214	; 0xd6
 8002760:	4801      	ldr	r0, [pc, #4]	; (8002768 <BQ25798_Chrg_NTC_CTRL1_write+0xc>)
 8002762:	2118      	movs	r1, #24
 8002764:	f005 bbea 	b.w	8007f3c <i2c_write8>
 8002768:	200010b0 	.word	0x200010b0

0800276c <BQ25798_WD_RST>:
    return res;
}

uint8_t BQ25798_WD_RST()
{
 800276c:	b510      	push	{r4, lr}
	uint8_t res, value;
	i2c_read8(&hi2c1, REG10_Charger_Control_1, &value, BQ25798_ADDR);
 800276e:	4c0c      	ldr	r4, [pc, #48]	; (80027a0 <BQ25798_WD_RST+0x34>)
{
 8002770:	b082      	sub	sp, #8
	i2c_read8(&hi2c1, REG10_Charger_Control_1, &value, BQ25798_ADDR);
 8002772:	23d6      	movs	r3, #214	; 0xd6
 8002774:	f10d 0207 	add.w	r2, sp, #7
 8002778:	2110      	movs	r1, #16
 800277a:	4620      	mov	r0, r4
 800277c:	f005 fbb4 	bl	8007ee8 <i2c_read8>
//	printf("Reset REG (read): %x\r\n", value);
	setBit(&value,3,1);
 8002780:	f10d 0007 	add.w	r0, sp, #7
 8002784:	2201      	movs	r2, #1
 8002786:	2103      	movs	r1, #3
 8002788:	f005 fc02 	bl	8007f90 <setBit>
//	printf("Reset REG (reset): %x\r\n", value);
    res = i2c_write8(&hi2c1, REG10_Charger_Control_1, value, BQ25798_ADDR);
 800278c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002790:	23d6      	movs	r3, #214	; 0xd6
 8002792:	2110      	movs	r1, #16
 8002794:	4620      	mov	r0, r4
 8002796:	f005 fbd1 	bl	8007f3c <i2c_write8>
    return res;
}
 800279a:	b002      	add	sp, #8
 800279c:	bd10      	pop	{r4, pc}
 800279e:	bf00      	nop
 80027a0:	200010b0 	.word	0x200010b0

080027a4 <BQ25798_MPPT_CTRL>:

uint8_t BQ25798_MPPT_CTRL(uint8_t set)
{
 80027a4:	b530      	push	{r4, r5, lr}
	uint8_t res, value;
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 80027a6:	4d0c      	ldr	r5, [pc, #48]	; (80027d8 <BQ25798_MPPT_CTRL+0x34>)
{
 80027a8:	b083      	sub	sp, #12
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 80027aa:	23d6      	movs	r3, #214	; 0xd6
{
 80027ac:	4604      	mov	r4, r0
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 80027ae:	f10d 0207 	add.w	r2, sp, #7
 80027b2:	2115      	movs	r1, #21
 80027b4:	4628      	mov	r0, r5
 80027b6:	f005 fb97 	bl	8007ee8 <i2c_read8>
//	printf("Reset REG (read): %x\r\n", value);
	setBit(&value,0,set);
 80027ba:	4622      	mov	r2, r4
 80027bc:	f10d 0007 	add.w	r0, sp, #7
 80027c0:	2100      	movs	r1, #0
 80027c2:	f005 fbe5 	bl	8007f90 <setBit>
//	printf("Reset REG (reset): %x\r\n", value);
    res = i2c_write8(&hi2c1, REG15_MPPT_Control, value, BQ25798_ADDR);
 80027c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80027ca:	23d6      	movs	r3, #214	; 0xd6
 80027cc:	2115      	movs	r1, #21
 80027ce:	4628      	mov	r0, r5
 80027d0:	f005 fbb4 	bl	8007f3c <i2c_write8>
    return res;
}
 80027d4:	b003      	add	sp, #12
 80027d6:	bd30      	pop	{r4, r5, pc}
 80027d8:	200010b0 	.word	0x200010b0

080027dc <_write>:

static char clibuf[64];
static int cliptr;

int _write(int file, char *ptr, int len)
{
 80027dc:	b510      	push	{r4, lr}
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 80027de:	1c53      	adds	r3, r2, #1
{
 80027e0:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 80027e2:	4803      	ldr	r0, [pc, #12]	; (80027f0 <_write+0x14>)
 80027e4:	b292      	uxth	r2, r2
 80027e6:	f00a f837 	bl	800c858 <HAL_UART_Transmit>
    return len;
}
 80027ea:	4620      	mov	r0, r4
 80027ec:	bd10      	pop	{r4, pc}
 80027ee:	bf00      	nop
 80027f0:	200011d0 	.word	0x200011d0

080027f4 <HAL_UART_RxCpltCallback>:
    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_UART_RxCpltCallback+0x10>)
 80027f6:	4283      	cmp	r3, r0
 80027f8:	d000      	beq.n	80027fc <HAL_UART_RxCpltCallback+0x8>

}
 80027fa:	4770      	bx	lr
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80027fc:	4902      	ldr	r1, [pc, #8]	; (8002808 <HAL_UART_RxCpltCallback+0x14>)
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	f00a b96c 	b.w	800cadc <HAL_UART_Receive_IT>
 8002804:	200011d0 	.word	0x200011d0
 8002808:	20000274 	.word	0x20000274

0800280c <HAL_UART_ErrorCallback>:
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <HAL_UART_ErrorCallback+0x10>)
 800280e:	4283      	cmp	r3, r0
 8002810:	d000      	beq.n	8002814 <HAL_UART_ErrorCallback+0x8>

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
    HAL_UART_RxCpltCallback(huart);
}
 8002812:	4770      	bx	lr
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8002814:	4902      	ldr	r1, [pc, #8]	; (8002820 <HAL_UART_ErrorCallback+0x14>)
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	f00a b960 	b.w	800cadc <HAL_UART_Receive_IT>
 800281c:	200011d0 	.word	0x200011d0
 8002820:	20000274 	.word	0x20000274

08002824 <find>:
}

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 8002824:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 8002826:	4e12      	ldr	r6, [pc, #72]	; (8002870 <find+0x4c>)
 8002828:	7833      	ldrb	r3, [r6, #0]
 800282a:	b1e3      	cbz	r3, 8002866 <find+0x42>
 800282c:	4d11      	ldr	r5, [pc, #68]	; (8002874 <find+0x50>)
 800282e:	4637      	mov	r7, r6
 8002830:	f1c0 0e00 	rsb	lr, r0, #0
{
 8002834:	4602      	mov	r2, r0
 8002836:	46bc      	mov	ip, r7
 8002838:	e003      	b.n	8002842 <find+0x1e>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
			if(!arg2[k+1]) return (clibuf+(j+1));
 800283a:	7813      	ldrb	r3, [r2, #0]
 800283c:	b1ab      	cbz	r3, 800286a <find+0x46>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 800283e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8002842:	5ce9      	ldrb	r1, [r5, r3]
 8002844:	f001 0103 	and.w	r1, r1, #3
 8002848:	2901      	cmp	r1, #1
 800284a:	eb0e 0402 	add.w	r4, lr, r2
 800284e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002852:	bf08      	it	eq
 8002854:	3320      	addeq	r3, #32
 8002856:	4299      	cmp	r1, r3
 8002858:	d0ef      	beq.n	800283a <find+0x16>
	for(i=0; clibuf[i]; i++)
 800285a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800285e:	f10e 0e01 	add.w	lr, lr, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1e6      	bne.n	8002834 <find+0x10>
	return NULL;
 8002866:	4618      	mov	r0, r3
}
 8002868:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(!arg2[k+1]) return (clibuf+(j+1));
 800286a:	3401      	adds	r4, #1
 800286c:	1930      	adds	r0, r6, r4
}
 800286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002870:	2000022c 	.word	0x2000022c
 8002874:	080155c9 	.word	0x080155c9

08002878 <getval>:

char * getval(char *p, int32_t *val, int32_t min, int32_t max)		// get s32 value from cmdline
{
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t tmp = 0;
	if(*p == ' ') p++;
 800287a:	7807      	ldrb	r7, [r0, #0]
 800287c:	2f20      	cmp	r7, #32
	uint8_t sign = (*p == '-') ? 1:0;
 800287e:	bf08      	it	eq
 8002880:	7847      	ldrbeq	r7, [r0, #1]
{
 8002882:	4606      	mov	r6, r0
	if(*p == ' ') p++;
 8002884:	bf08      	it	eq
 8002886:	3601      	addeq	r6, #1
	while(*p)
 8002888:	b1f7      	cbz	r7, 80028c8 <getval+0x50>
 800288a:	463d      	mov	r5, r7
	int32_t tmp = 0;
 800288c:	2400      	movs	r4, #0
 800288e:	e004      	b.n	800289a <getval+0x22>
	while(*p)
 8002890:	f816 5f01 	ldrb.w	r5, [r6, #1]!
	{
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 8002894:	eb0c 0440 	add.w	r4, ip, r0, lsl #1
	while(*p)
 8002898:	b13d      	cbz	r5, 80028aa <getval+0x32>
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 800289a:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800289e:	fa5f f08c 	uxtb.w	r0, ip
 80028a2:	2809      	cmp	r0, #9
 80028a4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80028a8:	d9f2      	bls.n	8002890 <getval+0x18>
		else break;
	}
	if(sign) tmp = -tmp;
 80028aa:	2f2d      	cmp	r7, #45	; 0x2d
 80028ac:	d100      	bne.n	80028b0 <getval+0x38>
 80028ae:	4264      	negs	r4, r4
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 80028b0:	4294      	cmp	r4, r2
 80028b2:	db01      	blt.n	80028b8 <getval+0x40>
 80028b4:	429c      	cmp	r4, r3
 80028b6:	dd04      	ble.n	80028c2 <getval+0x4a>
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <getval+0x54>)
 80028ba:	f00d fb99 	bl	800fff0 <puts>
	return p;
}
 80028be:	4630      	mov	r0, r6
 80028c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 80028c2:	600c      	str	r4, [r1, #0]
}
 80028c4:	4630      	mov	r0, r6
 80028c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t tmp = 0;
 80028c8:	463c      	mov	r4, r7
 80028ca:	e7f1      	b.n	80028b0 <getval+0x38>
 80028cc:	08013984 	.word	0x08013984

080028d0 <getFloat>:
	}
	printf("%s: %s\r\n", nam, dst);
}

char * getFloat (char *p, float *val, float min, float max)
{
 80028d0:	b530      	push	{r4, r5, lr}
 80028d2:	ed2d 8b02 	vpush	{d8}
	 char* pend;
	float tmp = 0;
		while(*p == ' ') p++;
 80028d6:	7803      	ldrb	r3, [r0, #0]
 80028d8:	2b20      	cmp	r3, #32
{
 80028da:	b083      	sub	sp, #12
 80028dc:	4604      	mov	r4, r0
 80028de:	eeb0 8a40 	vmov.f32	s16, s0
 80028e2:	eef0 8a60 	vmov.f32	s17, s1
 80028e6:	460d      	mov	r5, r1
		while(*p == ' ') p++;
 80028e8:	d103      	bne.n	80028f2 <getFloat+0x22>
 80028ea:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d0fb      	beq.n	80028ea <getFloat+0x1a>
		tmp = strtof(p, &pend);
 80028f2:	a901      	add	r1, sp, #4
 80028f4:	4620      	mov	r0, r4
 80028f6:	f00c fae9 	bl	800eecc <strtof>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 80028fa:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	db04      	blt.n	800290e <getFloat+0x3e>
 8002904:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8002908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290c:	d907      	bls.n	800291e <getFloat+0x4e>
 800290e:	4807      	ldr	r0, [pc, #28]	; (800292c <getFloat+0x5c>)
 8002910:	f00d fb6e 	bl	800fff0 <puts>
		return p;
}
 8002914:	4620      	mov	r0, r4
 8002916:	b003      	add	sp, #12
 8002918:	ecbd 8b02 	vpop	{d8}
 800291c:	bd30      	pop	{r4, r5, pc}
 800291e:	4620      	mov	r0, r4
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8002920:	ed85 0a00 	vstr	s0, [r5]
}
 8002924:	b003      	add	sp, #12
 8002926:	ecbd 8b02 	vpop	{d8}
 800292a:	bd30      	pop	{r4, r5, pc}
 800292c:	08013984 	.word	0x08013984

08002930 <print_status>:
}*/



void print_status()
{
 8002930:	b500      	push	{lr}
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002932:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8002a08 <print_status+0xd8>
{
 8002936:	b083      	sub	sp, #12
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <print_status+0xe0>)
 800293a:	4836      	ldr	r0, [pc, #216]	; (8002a14 <print_status+0xe4>)
 800293c:	ed8d 7b00 	vstr	d7, [sp]
 8002940:	2200      	movs	r2, #0
 8002942:	f00d faef 	bl	800ff24 <iprintf>
	printf("Charger state : ");
 8002946:	4834      	ldr	r0, [pc, #208]	; (8002a18 <print_status+0xe8>)
 8002948:	f00d faec 	bl	800ff24 <iprintf>
	switch (charger_state)
 800294c:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <print_status+0xec>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d806      	bhi.n	8002962 <print_status+0x32>
 8002954:	e8df f003 	tbb	[pc, r3]
 8002958:	4c025054 	.word	0x4c025054
		break;
	case 1:
		printf("OK\r\n");
		break;
	case 2:
		printf("No charging ...\r\n");
 800295c:	4830      	ldr	r0, [pc, #192]	; (8002a20 <print_status+0xf0>)
 800295e:	f00d fb47 	bl	800fff0 <puts>
		break;
	case 3:
		printf("Charging ...\r\n");
		break;
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 8002962:	f7fe ffc1 	bl	80018e8 <GET_MCU_Temp>
 8002966:	ee10 0a10 	vmov	r0, s0
 800296a:	f7fd fdfd 	bl	8000568 <__aeabi_f2d>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	482c      	ldr	r0, [pc, #176]	; (8002a24 <print_status+0xf4>)
 8002974:	f00d fad6 	bl	800ff24 <iprintf>
	printf("VBAT: %u [mV]  ", BQ25798_Vbat_read());
 8002978:	f7ff fde8 	bl	800254c <BQ25798_Vbat_read>
 800297c:	4601      	mov	r1, r0
 800297e:	482a      	ldr	r0, [pc, #168]	; (8002a28 <print_status+0xf8>)
 8002980:	f00d fad0 	bl	800ff24 <iprintf>
	printf("Vac1: %u [mV]  ", BQ25798_Vac1_read());
 8002984:	f7ff fe06 	bl	8002594 <BQ25798_Vac1_read>
 8002988:	4601      	mov	r1, r0
 800298a:	4828      	ldr	r0, [pc, #160]	; (8002a2c <print_status+0xfc>)
 800298c:	f00d faca 	bl	800ff24 <iprintf>
	printf("Vac2: %u [mV]  ", BQ25798_Vac2_read());
 8002990:	f7ff fe12 	bl	80025b8 <BQ25798_Vac2_read>
 8002994:	4601      	mov	r1, r0
 8002996:	4826      	ldr	r0, [pc, #152]	; (8002a30 <print_status+0x100>)
 8002998:	f00d fac4 	bl	800ff24 <iprintf>
	printf("VSYS: %u [mV]  \r\n", BQ25798_Vsys_read());
 800299c:	f7ff fde8 	bl	8002570 <BQ25798_Vsys_read>
 80029a0:	4601      	mov	r1, r0
 80029a2:	4824      	ldr	r0, [pc, #144]	; (8002a34 <print_status+0x104>)
 80029a4:	f00d fabe 	bl	800ff24 <iprintf>
	printf("Ibus: %u [mA]  ", BQ25798_Ibus_read());
 80029a8:	f7ff fe18 	bl	80025dc <BQ25798_Ibus_read>
 80029ac:	4601      	mov	r1, r0
 80029ae:	4822      	ldr	r0, [pc, #136]	; (8002a38 <print_status+0x108>)
 80029b0:	f00d fab8 	bl	800ff24 <iprintf>
	printf("Ibat: %u [mA]  \r\n", BQ25798_Ibat_read());
 80029b4:	f7ff fe24 	bl	8002600 <BQ25798_Ibat_read>
 80029b8:	4601      	mov	r1, r0
 80029ba:	4820      	ldr	r0, [pc, #128]	; (8002a3c <print_status+0x10c>)
 80029bc:	f00d fab2 	bl	800ff24 <iprintf>
	printf("Minimal SYS Voltage: %u [mV]  \r\n", BQ25798_Sys_Min_Voltage_read());
 80029c0:	f7ff fe30 	bl	8002624 <BQ25798_Sys_Min_Voltage_read>
 80029c4:	4601      	mov	r1, r0
 80029c6:	481e      	ldr	r0, [pc, #120]	; (8002a40 <print_status+0x110>)
 80029c8:	f00d faac 	bl	800ff24 <iprintf>
	printf("Charge Voltage Limit: %u [mV]  \r\n",BQ25798_Chr_Volt_Limit_read());
 80029cc:	f7ff fe4a 	bl	8002664 <BQ25798_Chr_Volt_Limit_read>
 80029d0:	4601      	mov	r1, r0
 80029d2:	481c      	ldr	r0, [pc, #112]	; (8002a44 <print_status+0x114>)
 80029d4:	f00d faa6 	bl	800ff24 <iprintf>
	printf("Charge Current Limit: %u [mA]  \r\n",BQ25798_Chr_Curr_Limit_read());
 80029d8:	f7ff fe5a 	bl	8002690 <BQ25798_Chr_Curr_Limit_read>
 80029dc:	4601      	mov	r1, r0
 80029de:	481a      	ldr	r0, [pc, #104]	; (8002a48 <print_status+0x118>)
 80029e0:	f00d faa0 	bl	800ff24 <iprintf>
//	BQ25798_Chrg_STAT0_read();
//	BQ25798_Chrg_STAT1_read();
//	BQ25798_Chrg_STAT2_read();
//	BQ25798_Chrg_STAT3_read();
//	BQ25798_Chrg_STAT4_read();
	printf("-----------------\r\n");
 80029e4:	4819      	ldr	r0, [pc, #100]	; (8002a4c <print_status+0x11c>)

}
 80029e6:	b003      	add	sp, #12
 80029e8:	f85d eb04 	ldr.w	lr, [sp], #4
	printf("-----------------\r\n");
 80029ec:	f00d bb00 	b.w	800fff0 <puts>
		printf("Charging ...\r\n");
 80029f0:	4817      	ldr	r0, [pc, #92]	; (8002a50 <print_status+0x120>)
 80029f2:	f00d fafd 	bl	800fff0 <puts>
		break;
 80029f6:	e7b4      	b.n	8002962 <print_status+0x32>
		printf("OK\r\n");
 80029f8:	4816      	ldr	r0, [pc, #88]	; (8002a54 <print_status+0x124>)
 80029fa:	f00d faf9 	bl	800fff0 <puts>
		break;
 80029fe:	e7b0      	b.n	8002962 <print_status+0x32>
		printf("FAULT\r\n");
 8002a00:	4815      	ldr	r0, [pc, #84]	; (8002a58 <print_status+0x128>)
 8002a02:	f00d faf5 	bl	800fff0 <puts>
		break;
 8002a06:	e7ac      	b.n	8002962 <print_status+0x32>
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	3fe00000 	.word	0x3fe00000
 8002a10:	3ff00000 	.word	0x3ff00000
 8002a14:	08013990 	.word	0x08013990
 8002a18:	080139b4 	.word	0x080139b4
 8002a1c:	20001378 	.word	0x20001378
 8002a20:	080139d0 	.word	0x080139d0
 8002a24:	080139f4 	.word	0x080139f4
 8002a28:	08013a10 	.word	0x08013a10
 8002a2c:	08013a20 	.word	0x08013a20
 8002a30:	08013a30 	.word	0x08013a30
 8002a34:	08013a40 	.word	0x08013a40
 8002a38:	08013a54 	.word	0x08013a54
 8002a3c:	08013a64 	.word	0x08013a64
 8002a40:	08013a78 	.word	0x08013a78
 8002a44:	08013a9c 	.word	0x08013a9c
 8002a48:	08013ac0 	.word	0x08013ac0
 8002a4c:	080150fc 	.word	0x080150fc
 8002a50:	080139e4 	.word	0x080139e4
 8002a54:	08015400 	.word	0x08015400
 8002a58:	080139c8 	.word	0x080139c8
 8002a5c:	00000000 	.word	0x00000000

08002a60 <print_help>:

void print_help()
{
 8002a60:	b510      	push	{r4, lr}
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002a62:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8002b08 <print_help+0xa8>
{
 8002a66:	b082      	sub	sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002a68:	ed8d 7b00 	vstr	d7, [sp]
 8002a6c:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <print_help+0xb0>)
 8002a6e:	4829      	ldr	r0, [pc, #164]	; (8002b14 <print_help+0xb4>)
	printf("set [sensor] disable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - disable sensor\r\n");
	printf("set [sensor] [type] en - type=[temperature;press;hum] - enable sensor type\r\n");
	printf("set [sensor] [type] dis - type=[temperature;press;hum] - disable sensor type\r\n");
	printf("set [sensor] [type] offset X.X - set offset [X.X float]\r\n");
	printf("set [sensor] conf Y - set sensor config [Y - 0..15]\r\n");
	printf("-----------------\r\n");
 8002a70:	4c29      	ldr	r4, [pc, #164]	; (8002b18 <print_help+0xb8>)
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002a72:	2200      	movs	r2, #0
 8002a74:	f00d fa56 	bl	800ff24 <iprintf>
	printf("SET COMMANDS:\r\n");
 8002a78:	4828      	ldr	r0, [pc, #160]	; (8002b1c <print_help+0xbc>)
 8002a7a:	f00d fab9 	bl	800fff0 <puts>
	printf("set interval X - X=4..3600[s] - measurement interval\r\n");
 8002a7e:	4828      	ldr	r0, [pc, #160]	; (8002b20 <print_help+0xc0>)
 8002a80:	f00d fab6 	bl	800fff0 <puts>
	printf("set disptype X - 0 - NONE(silent), 1 - TXT, 2 - CSV - measurement format\r\n");
 8002a84:	4827      	ldr	r0, [pc, #156]	; (8002b24 <print_help+0xc4>)
 8002a86:	f00d fab3 	bl	800fff0 <puts>
	printf("set [sensor] enable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - enable sensor\r\n");
 8002a8a:	4827      	ldr	r0, [pc, #156]	; (8002b28 <print_help+0xc8>)
 8002a8c:	f00d fab0 	bl	800fff0 <puts>
	printf("set [sensor] disable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - disable sensor\r\n");
 8002a90:	4826      	ldr	r0, [pc, #152]	; (8002b2c <print_help+0xcc>)
 8002a92:	f00d faad 	bl	800fff0 <puts>
	printf("set [sensor] [type] en - type=[temperature;press;hum] - enable sensor type\r\n");
 8002a96:	4826      	ldr	r0, [pc, #152]	; (8002b30 <print_help+0xd0>)
 8002a98:	f00d faaa 	bl	800fff0 <puts>
	printf("set [sensor] [type] dis - type=[temperature;press;hum] - disable sensor type\r\n");
 8002a9c:	4825      	ldr	r0, [pc, #148]	; (8002b34 <print_help+0xd4>)
 8002a9e:	f00d faa7 	bl	800fff0 <puts>
	printf("set [sensor] [type] offset X.X - set offset [X.X float]\r\n");
 8002aa2:	4825      	ldr	r0, [pc, #148]	; (8002b38 <print_help+0xd8>)
 8002aa4:	f00d faa4 	bl	800fff0 <puts>
	printf("set [sensor] conf Y - set sensor config [Y - 0..15]\r\n");
 8002aa8:	4824      	ldr	r0, [pc, #144]	; (8002b3c <print_help+0xdc>)
 8002aaa:	f00d faa1 	bl	800fff0 <puts>
	printf("-----------------\r\n");
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f00d fa9e 	bl	800fff0 <puts>

	printf("CONFIG COMMANDS:\r\n");
 8002ab4:	4822      	ldr	r0, [pc, #136]	; (8002b40 <print_help+0xe0>)
 8002ab6:	f00d fa9b 	bl	800fff0 <puts>
	printf("printconfig - Print config values\r\n");
 8002aba:	4822      	ldr	r0, [pc, #136]	; (8002b44 <print_help+0xe4>)
 8002abc:	f00d fa98 	bl	800fff0 <puts>
	printf("clearconfig - load default config values\r\n");
 8002ac0:	4821      	ldr	r0, [pc, #132]	; (8002b48 <print_help+0xe8>)
 8002ac2:	f00d fa95 	bl	800fff0 <puts>
	printf("loadconfig - load config values\r\n");
 8002ac6:	4821      	ldr	r0, [pc, #132]	; (8002b4c <print_help+0xec>)
 8002ac8:	f00d fa92 	bl	800fff0 <puts>
	printf("saveconfig - save config values\r\n");
 8002acc:	4820      	ldr	r0, [pc, #128]	; (8002b50 <print_help+0xf0>)
 8002ace:	f00d fa8f 	bl	800fff0 <puts>
	printf("-----------------\r\n");
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f00d fa8c 	bl	800fff0 <puts>

	printf("MEAS COMMANDS:\r\n");
 8002ad8:	481e      	ldr	r0, [pc, #120]	; (8002b54 <print_help+0xf4>)
 8002ada:	f00d fa89 	bl	800fff0 <puts>
	printf("meas start cont [disp] - Start continuos measurement disp=[txt;csv]\r\n");
 8002ade:	481e      	ldr	r0, [pc, #120]	; (8002b58 <print_help+0xf8>)
 8002ae0:	f00d fa86 	bl	800fff0 <puts>
	printf("meas start [disp] X - Start X measures disp=[txt;csv], X=1..500 \r\n");
 8002ae4:	481d      	ldr	r0, [pc, #116]	; (8002b5c <print_help+0xfc>)
 8002ae6:	f00d fa83 	bl	800fff0 <puts>

	printf("-----------------\r\n");
 8002aea:	4620      	mov	r0, r4
 8002aec:	f00d fa80 	bl	800fff0 <puts>
	printf("? or help - help\r\n");
 8002af0:	481b      	ldr	r0, [pc, #108]	; (8002b60 <print_help+0x100>)
 8002af2:	f00d fa7d 	bl	800fff0 <puts>
	printf("-----------------\r\n");
 8002af6:	4620      	mov	r0, r4

}
 8002af8:	b002      	add	sp, #8
 8002afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("-----------------\r\n");
 8002afe:	f00d ba77 	b.w	800fff0 <puts>
 8002b02:	bf00      	nop
 8002b04:	f3af 8000 	nop.w
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	3fe00000 	.word	0x3fe00000
 8002b10:	3ff00000 	.word	0x3ff00000
 8002b14:	08013990 	.word	0x08013990
 8002b18:	080150fc 	.word	0x080150fc
 8002b1c:	08013ae4 	.word	0x08013ae4
 8002b20:	08013af4 	.word	0x08013af4
 8002b24:	08013b2c 	.word	0x08013b2c
 8002b28:	08013b78 	.word	0x08013b78
 8002b2c:	08013bcc 	.word	0x08013bcc
 8002b30:	08013c20 	.word	0x08013c20
 8002b34:	08013c6c 	.word	0x08013c6c
 8002b38:	08013cbc 	.word	0x08013cbc
 8002b3c:	08013cf8 	.word	0x08013cf8
 8002b40:	08013d30 	.word	0x08013d30
 8002b44:	08013d44 	.word	0x08013d44
 8002b48:	08013d68 	.word	0x08013d68
 8002b4c:	08013d94 	.word	0x08013d94
 8002b50:	08013db8 	.word	0x08013db8
 8002b54:	08013ddc 	.word	0x08013ddc
 8002b58:	08013dec 	.word	0x08013dec
 8002b5c:	08013e34 	.word	0x08013e34
 8002b60:	08013e78 	.word	0x08013e78

08002b64 <CLI_proc>:
{
 8002b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8002b68:	4ca9      	ldr	r4, [pc, #676]	; (8002e10 <CLI_proc+0x2ac>)
{
 8002b6a:	ed2d 8b02 	vpush	{d8}
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	2b3f      	cmp	r3, #63	; 0x3f
{
 8002b72:	b082      	sub	sp, #8
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8002b74:	d803      	bhi.n	8002b7e <CLI_proc+0x1a>
 8002b76:	49a7      	ldr	r1, [pc, #668]	; (8002e14 <CLI_proc+0x2b0>)
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	54c8      	strb	r0, [r1, r3]
 8002b7c:	6022      	str	r2, [r4, #0]
	if(ch == 10)	// LF
 8002b7e:	280a      	cmp	r0, #10
 8002b80:	d004      	beq.n	8002b8c <CLI_proc+0x28>
}
 8002b82:	b002      	add	sp, #8
 8002b84:	ecbd 8b02 	vpop	{d8}
 8002b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    if(clibuf[cliptr-1] == 13) cliptr--;
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	4da1      	ldr	r5, [pc, #644]	; (8002e14 <CLI_proc+0x2b0>)
 8002b90:	1e58      	subs	r0, r3, #1
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 8002b92:	2100      	movs	r1, #0
	    if(clibuf[cliptr-1] == 13) cliptr--;
 8002b94:	5c2a      	ldrb	r2, [r5, r0]
 8002b96:	2a0d      	cmp	r2, #13
 8002b98:	bf18      	it	ne
 8002b9a:	4618      	movne	r0, r3
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 8002b9c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8002ba0:	4428      	add	r0, r5
 8002ba2:	f00d fb53 	bl	801024c <memset>
		cliptr = 0;
 8002ba6:	2300      	movs	r3, #0
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 8002ba8:	489b      	ldr	r0, [pc, #620]	; (8002e18 <CLI_proc+0x2b4>)
		cliptr = 0;
 8002baa:	6023      	str	r3, [r4, #0]
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 8002bac:	f7ff fe3a 	bl	8002824 <find>
 8002bb0:	1c6b      	adds	r3, r5, #1
 8002bb2:	4283      	cmp	r3, r0
 8002bb4:	f000 80dd 	beq.w	8002d72 <CLI_proc+0x20e>
 8002bb8:	4898      	ldr	r0, [pc, #608]	; (8002e1c <CLI_proc+0x2b8>)
 8002bba:	f7ff fe33 	bl	8002824 <find>
 8002bbe:	1d2f      	adds	r7, r5, #4
 8002bc0:	4287      	cmp	r7, r0
 8002bc2:	f000 80d6 	beq.w	8002d72 <CLI_proc+0x20e>
		if(find("status")==clibuf+6) {print_status(); return;}
 8002bc6:	4896      	ldr	r0, [pc, #600]	; (8002e20 <CLI_proc+0x2bc>)
 8002bc8:	f7ff fe2c 	bl	8002824 <find>
 8002bcc:	1dae      	adds	r6, r5, #6
 8002bce:	4286      	cmp	r6, r0
 8002bd0:	f000 80e7 	beq.w	8002da2 <CLI_proc+0x23e>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 8002bd4:	4893      	ldr	r0, [pc, #588]	; (8002e24 <CLI_proc+0x2c0>)
 8002bd6:	f7ff fe25 	bl	8002824 <find>
 8002bda:	f105 0807 	add.w	r8, r5, #7
 8002bde:	4580      	cmp	r8, r0
 8002be0:	f000 80e6 	beq.w	8002db0 <CLI_proc+0x24c>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 8002be4:	4890      	ldr	r0, [pc, #576]	; (8002e28 <CLI_proc+0x2c4>)
 8002be6:	f7ff fe1d 	bl	8002824 <find>
 8002bea:	f105 040b 	add.w	r4, r5, #11
 8002bee:	4284      	cmp	r4, r0
 8002bf0:	f000 80c6 	beq.w	8002d80 <CLI_proc+0x21c>
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 8002bf4:	488d      	ldr	r0, [pc, #564]	; (8002e2c <CLI_proc+0x2c8>)
 8002bf6:	f7ff fe15 	bl	8002824 <find>
 8002bfa:	4284      	cmp	r4, r0
 8002bfc:	f000 80e2 	beq.w	8002dc4 <CLI_proc+0x260>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",Load_config()); return;}
 8002c00:	488b      	ldr	r0, [pc, #556]	; (8002e30 <CLI_proc+0x2cc>)
 8002c02:	f7ff fe0f 	bl	8002824 <find>
 8002c06:	f105 090a 	add.w	r9, r5, #10
 8002c0a:	4581      	cmp	r9, r0
 8002c0c:	f000 80e1 	beq.w	8002dd2 <CLI_proc+0x26e>
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",Save_config()); return;}
 8002c10:	4888      	ldr	r0, [pc, #544]	; (8002e34 <CLI_proc+0x2d0>)
 8002c12:	f7ff fe07 	bl	8002824 <find>
 8002c16:	4581      	cmp	r9, r0
 8002c18:	f000 80e6 	beq.w	8002de8 <CLI_proc+0x284>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 8002c1c:	4886      	ldr	r0, [pc, #536]	; (8002e38 <CLI_proc+0x2d4>)
 8002c1e:	f7ff fe01 	bl	8002824 <find>
 8002c22:	f105 0a0c 	add.w	sl, r5, #12
 8002c26:	4582      	cmp	sl, r0
 8002c28:	f000 80e3 	beq.w	8002df2 <CLI_proc+0x28e>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 8002c2c:	4883      	ldr	r0, [pc, #524]	; (8002e3c <CLI_proc+0x2d8>)
 8002c2e:	f7ff fdf9 	bl	8002824 <find>
 8002c32:	4284      	cmp	r4, r0
 8002c34:	f000 814c 	beq.w	8002ed0 <CLI_proc+0x36c>
		if(find("sim on")==clibuf+6) {SIM_ON(); return;}
 8002c38:	4881      	ldr	r0, [pc, #516]	; (8002e40 <CLI_proc+0x2dc>)
 8002c3a:	f7ff fdf3 	bl	8002824 <find>
 8002c3e:	4286      	cmp	r6, r0
 8002c40:	f000 8176 	beq.w	8002f30 <CLI_proc+0x3cc>
		if(find("sim off")==clibuf+7) {SIM_OFF(); return;}
 8002c44:	487f      	ldr	r0, [pc, #508]	; (8002e44 <CLI_proc+0x2e0>)
 8002c46:	f7ff fded 	bl	8002824 <find>
 8002c4a:	4580      	cmp	r8, r0
 8002c4c:	f000 817a 	beq.w	8002f44 <CLI_proc+0x3e0>
		if(find("gps on")==clibuf+6) {GPS_ON(); return;}
 8002c50:	487d      	ldr	r0, [pc, #500]	; (8002e48 <CLI_proc+0x2e4>)
 8002c52:	f7ff fde7 	bl	8002824 <find>
 8002c56:	4286      	cmp	r6, r0
 8002c58:	f000 824c 	beq.w	80030f4 <CLI_proc+0x590>
		if(find("gps off")==clibuf+7) {GPS_OFF(); return;}
 8002c5c:	487b      	ldr	r0, [pc, #492]	; (8002e4c <CLI_proc+0x2e8>)
 8002c5e:	f7ff fde1 	bl	8002824 <find>
 8002c62:	4580      	cmp	r8, r0
 8002c64:	f000 8255 	beq.w	8003112 <CLI_proc+0x5ae>
		if(find("rtc debug on")==clibuf+12) {printf("RTC Debug ON\r\n"); rtc_debug=1; return;}
 8002c68:	4879      	ldr	r0, [pc, #484]	; (8002e50 <CLI_proc+0x2ec>)
 8002c6a:	f7ff fddb 	bl	8002824 <find>
 8002c6e:	4582      	cmp	sl, r0
 8002c70:	f000 8256 	beq.w	8003120 <CLI_proc+0x5bc>
		if(find("rtc debug off")==clibuf+13) {printf("RTC Debug OFF\r\n"); rtc_debug=0; return;}
 8002c74:	4877      	ldr	r0, [pc, #476]	; (8002e54 <CLI_proc+0x2f0>)
 8002c76:	4d78      	ldr	r5, [pc, #480]	; (8002e58 <CLI_proc+0x2f4>)
 8002c78:	f7ff fdd4 	bl	8002824 <find>
 8002c7c:	4285      	cmp	r5, r0
 8002c7e:	f000 8256 	beq.w	800312e <CLI_proc+0x5ca>
		if(find("rtos debug on")==clibuf+13) {printf("RTOS Debug ON\r\n"); rtos_debug=1; return;}
 8002c82:	4876      	ldr	r0, [pc, #472]	; (8002e5c <CLI_proc+0x2f8>)
 8002c84:	f7ff fdce 	bl	8002824 <find>
 8002c88:	4285      	cmp	r5, r0
 8002c8a:	f000 8257 	beq.w	800313c <CLI_proc+0x5d8>
		if(find("rtos debug off")==clibuf+14) {printf("RTOS Debug OFF\r\n"); rtos_debug=0; return;}
 8002c8e:	4874      	ldr	r0, [pc, #464]	; (8002e60 <CLI_proc+0x2fc>)
 8002c90:	f7ff fdc8 	bl	8002824 <find>
 8002c94:	1c6e      	adds	r6, r5, #1
 8002c96:	4286      	cmp	r6, r0
 8002c98:	d07c      	beq.n	8002d94 <CLI_proc+0x230>
		if(find("meas debug on")==clibuf+13) {printf("MEAS Debug ON\r\n"); meas_debug=1; return;}
 8002c9a:	4872      	ldr	r0, [pc, #456]	; (8002e64 <CLI_proc+0x300>)
 8002c9c:	f7ff fdc2 	bl	8002824 <find>
 8002ca0:	4285      	cmp	r5, r0
 8002ca2:	f000 8252 	beq.w	800314a <CLI_proc+0x5e6>
		if(find("meas debug off")==clibuf+14) {printf("MEAS Debug OFF\r\n"); meas_debug=0; return;}
 8002ca6:	4870      	ldr	r0, [pc, #448]	; (8002e68 <CLI_proc+0x304>)
 8002ca8:	f7ff fdbc 	bl	8002824 <find>
 8002cac:	4286      	cmp	r6, r0
 8002cae:	f000 8253 	beq.w	8003158 <CLI_proc+0x5f4>
		if(find("get time")==clibuf+8) {print_rtc_time(); return;}
 8002cb2:	486e      	ldr	r0, [pc, #440]	; (8002e6c <CLI_proc+0x308>)
 8002cb4:	f7ff fdb6 	bl	8002824 <find>
 8002cb8:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <CLI_proc+0x30c>)
 8002cba:	4283      	cmp	r3, r0
 8002cbc:	f000 8253 	beq.w	8003166 <CLI_proc+0x602>
		if(find("rtc sync ntp")==clibuf+12)
 8002cc0:	486c      	ldr	r0, [pc, #432]	; (8002e74 <CLI_proc+0x310>)
 8002cc2:	f7ff fdaf 	bl	8002824 <find>
 8002cc6:	4582      	cmp	sl, r0
 8002cc8:	f000 8267 	beq.w	800319a <CLI_proc+0x636>
		p = find("set ");
 8002ccc:	486a      	ldr	r0, [pc, #424]	; (8002e78 <CLI_proc+0x314>)
 8002cce:	f7ff fda9 	bl	8002824 <find>
		if(p == clibuf+4)
 8002cd2:	4287      	cmp	r7, r0
 8002cd4:	f000 8139 	beq.w	8002f4a <CLI_proc+0x3e6>
		p = find("meas ");
 8002cd8:	4868      	ldr	r0, [pc, #416]	; (8002e7c <CLI_proc+0x318>)
 8002cda:	f7ff fda3 	bl	8002824 <find>
		if(p == clibuf+5)
 8002cde:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <CLI_proc+0x31c>)
 8002ce0:	4298      	cmp	r0, r3
		p = find("meas ");
 8002ce2:	4605      	mov	r5, r0
		if(p == clibuf+5)
 8002ce4:	f47f af4d 	bne.w	8002b82 <CLI_proc+0x1e>
			if((p = find("start ")))
 8002ce8:	4866      	ldr	r0, [pc, #408]	; (8002e84 <CLI_proc+0x320>)
 8002cea:	f7ff fd9b 	bl	8002824 <find>
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	f43f af47 	beq.w	8002b82 <CLI_proc+0x1e>
				if(p == clibuf+11)
 8002cf4:	42a0      	cmp	r0, r4
 8002cf6:	f47f af44 	bne.w	8002b82 <CLI_proc+0x1e>
					if((strstr(clibuf+11, "txt ")))
 8002cfa:	4963      	ldr	r1, [pc, #396]	; (8002e88 <CLI_proc+0x324>)
 8002cfc:	f00d fb3c 	bl	8010378 <strstr>
 8002d00:	4606      	mov	r6, r0
 8002d02:	2800      	cmp	r0, #0
 8002d04:	f040 8385 	bne.w	8003412 <CLI_proc+0x8ae>
					if((strstr(clibuf+11, "csv ")))
 8002d08:	4960      	ldr	r1, [pc, #384]	; (8002e8c <CLI_proc+0x328>)
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f00d fb34 	bl	8010378 <strstr>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	f040 8511 	bne.w	8003738 <CLI_proc+0xbd4>
						if((strstr(clibuf+11, "cont ")))
 8002d16:	495e      	ldr	r1, [pc, #376]	; (8002e90 <CLI_proc+0x32c>)
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f00d fb2d 	bl	8010378 <strstr>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	f43f af2f 	beq.w	8002b82 <CLI_proc+0x1e>
							if((strstr(clibuf+16, "txt")))
 8002d24:	495b      	ldr	r1, [pc, #364]	; (8002e94 <CLI_proc+0x330>)
 8002d26:	f105 000b 	add.w	r0, r5, #11
 8002d2a:	f00d fb25 	bl	8010378 <strstr>
 8002d2e:	4604      	mov	r4, r0
 8002d30:	2800      	cmp	r0, #0
 8002d32:	f040 856d 	bne.w	8003810 <CLI_proc+0xcac>
							if((strstr(clibuf+16, "csv")))
 8002d36:	4958      	ldr	r1, [pc, #352]	; (8002e98 <CLI_proc+0x334>)
 8002d38:	f105 000b 	add.w	r0, r5, #11
 8002d3c:	f00d fb1c 	bl	8010378 <strstr>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	f43f af1e 	beq.w	8002b82 <CLI_proc+0x1e>
								meas_cont_mode = 1;
 8002d46:	4a55      	ldr	r2, [pc, #340]	; (8002e9c <CLI_proc+0x338>)
								disp_type = 2;
 8002d48:	4b55      	ldr	r3, [pc, #340]	; (8002ea0 <CLI_proc+0x33c>)
								printf("Start continuous measurement, TXT format\r\n");
 8002d4a:	4856      	ldr	r0, [pc, #344]	; (8002ea4 <CLI_proc+0x340>)
								meas_cont_mode = 1;
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	7011      	strb	r1, [r2, #0]
								disp_type = 2;
 8002d50:	2202      	movs	r2, #2
 8002d52:	701a      	strb	r2, [r3, #0]
								printf("Start continuous measurement, TXT format\r\n");
 8002d54:	f00d f94c 	bl	800fff0 <puts>
								csvcnt = 0;
 8002d58:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <CLI_proc+0x344>)
 8002d5a:	801c      	strh	r4, [r3, #0]
								printCSVheader();
 8002d5c:	f004 f92c 	bl	8006fb8 <printCSVheader>
								ReinitTimer(tim_interval);
 8002d60:	4b52      	ldr	r3, [pc, #328]	; (8002eac <CLI_proc+0x348>)
 8002d62:	8818      	ldrh	r0, [r3, #0]
}
 8002d64:	b002      	add	sp, #8
 8002d66:	ecbd 8b02 	vpop	{d8}
 8002d6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
								ReinitTimer(tim_interval);
 8002d6e:	f004 b885 	b.w	8006e7c <ReinitTimer>
}
 8002d72:	b002      	add	sp, #8
 8002d74:	ecbd 8b02 	vpop	{d8}
 8002d78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 8002d7c:	f7ff be70 	b.w	8002a60 <print_help>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 8002d80:	484b      	ldr	r0, [pc, #300]	; (8002eb0 <CLI_proc+0x34c>)
 8002d82:	f00d f935 	bl	800fff0 <puts>
}
 8002d86:	b002      	add	sp, #8
 8002d88:	ecbd 8b02 	vpop	{d8}
 8002d8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 8002d90:	f7fe bb3c 	b.w	800140c <Load_defaults>
		if(find("rtos debug off")==clibuf+14) {printf("RTOS Debug OFF\r\n"); rtos_debug=0; return;}
 8002d94:	4847      	ldr	r0, [pc, #284]	; (8002eb4 <CLI_proc+0x350>)
 8002d96:	f00d f92b 	bl	800fff0 <puts>
 8002d9a:	4b47      	ldr	r3, [pc, #284]	; (8002eb8 <CLI_proc+0x354>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e6ef      	b.n	8002b82 <CLI_proc+0x1e>
}
 8002da2:	b002      	add	sp, #8
 8002da4:	ecbd 8b02 	vpop	{d8}
 8002da8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("status")==clibuf+6) {print_status(); return;}
 8002dac:	f7ff bdc0 	b.w	8002930 <print_status>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 8002db0:	4842      	ldr	r0, [pc, #264]	; (8002ebc <CLI_proc+0x358>)
 8002db2:	22a0      	movs	r2, #160	; 0xa0
 8002db4:	2138      	movs	r1, #56	; 0x38
}
 8002db6:	b002      	add	sp, #8
 8002db8:	ecbd 8b02 	vpop	{d8}
 8002dbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 8002dc0:	f005 b904 	b.w	8007fcc <i2c_scan>
}
 8002dc4:	b002      	add	sp, #8
 8002dc6:	ecbd 8b02 	vpop	{d8}
 8002dca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 8002dce:	f7fe bbdb 	b.w	8001588 <EEPROM_Print_config>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",Load_config()); return;}
 8002dd2:	f7fe fb4b 	bl	800146c <Load_config>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	4839      	ldr	r0, [pc, #228]	; (8002ec0 <CLI_proc+0x35c>)
}
 8002dda:	b002      	add	sp, #8
 8002ddc:	ecbd 8b02 	vpop	{d8}
 8002de0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",Save_config()); return;}
 8002de4:	f00d b89e 	b.w	800ff24 <iprintf>
 8002de8:	f7fe fae8 	bl	80013bc <Save_config>
 8002dec:	4601      	mov	r1, r0
 8002dee:	4835      	ldr	r0, [pc, #212]	; (8002ec4 <CLI_proc+0x360>)
 8002df0:	e7f3      	b.n	8002dda <CLI_proc+0x276>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 8002df2:	a901      	add	r1, sp, #4
 8002df4:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f10a 0001 	add.w	r0, sl, #1
 8002dfe:	f7ff fd3b 	bl	8002878 <getval>
 8002e02:	9b01      	ldr	r3, [sp, #4]
 8002e04:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <CLI_proc+0x364>)
 8002e06:	4831      	ldr	r0, [pc, #196]	; (8002ecc <CLI_proc+0x368>)
 8002e08:	f8a2 3005 	strh.w	r3, [r2, #5]
 8002e0c:	b299      	uxth	r1, r3
 8002e0e:	e7e4      	b.n	8002dda <CLI_proc+0x276>
 8002e10:	2000026c 	.word	0x2000026c
 8002e14:	2000022c 	.word	0x2000022c
 8002e18:	08013e8c 	.word	0x08013e8c
 8002e1c:	08013e90 	.word	0x08013e90
 8002e20:	08013e98 	.word	0x08013e98
 8002e24:	08013ea0 	.word	0x08013ea0
 8002e28:	08013ea8 	.word	0x08013ea8
 8002e2c:	08013ed0 	.word	0x08013ed0
 8002e30:	08013edc 	.word	0x08013edc
 8002e34:	08013f10 	.word	0x08013f10
 8002e38:	08013f5c 	.word	0x08013f5c
 8002e3c:	08013f7c 	.word	0x08013f7c
 8002e40:	08013f9c 	.word	0x08013f9c
 8002e44:	08013fa4 	.word	0x08013fa4
 8002e48:	08013fac 	.word	0x08013fac
 8002e4c:	08013fb4 	.word	0x08013fb4
 8002e50:	08013fbc 	.word	0x08013fbc
 8002e54:	08013fdc 	.word	0x08013fdc
 8002e58:	20000239 	.word	0x20000239
 8002e5c:	08013ffc 	.word	0x08013ffc
 8002e60:	0801401c 	.word	0x0801401c
 8002e64:	0801403c 	.word	0x0801403c
 8002e68:	0801405c 	.word	0x0801405c
 8002e6c:	0801407c 	.word	0x0801407c
 8002e70:	20000234 	.word	0x20000234
 8002e74:	08014088 	.word	0x08014088
 8002e78:	080140bc 	.word	0x080140bc
 8002e7c:	08014780 	.word	0x08014780
 8002e80:	20000231 	.word	0x20000231
 8002e84:	08014788 	.word	0x08014788
 8002e88:	08014790 	.word	0x08014790
 8002e8c:	080147b8 	.word	0x080147b8
 8002e90:	080147e0 	.word	0x080147e0
 8002e94:	080147e8 	.word	0x080147e8
 8002e98:	08014818 	.word	0x08014818
 8002e9c:	2000000c 	.word	0x2000000c
 8002ea0:	200013b9 	.word	0x200013b9
 8002ea4:	080147ec 	.word	0x080147ec
 8002ea8:	20000270 	.word	0x20000270
 8002eac:	20001404 	.word	0x20001404
 8002eb0:	08013eb4 	.word	0x08013eb4
 8002eb4:	0801402c 	.word	0x0801402c
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	20001104 	.word	0x20001104
 8002ec0:	08013ee8 	.word	0x08013ee8
 8002ec4:	08013f1c 	.word	0x08013f1c
 8002ec8:	2000137c 	.word	0x2000137c
 8002ecc:	08013f6c 	.word	0x08013f6c
		while(*p == ' ') p++;
 8002ed0:	7b2b      	ldrb	r3, [r5, #12]
 8002ed2:	48b7      	ldr	r0, [pc, #732]	; (80031b0 <CLI_proc+0x64c>)
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d103      	bne.n	8002ee0 <CLI_proc+0x37c>
 8002ed8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d0fb      	beq.n	8002ed8 <CLI_proc+0x374>
		tmp = strtof(p, &pend);
 8002ee0:	a901      	add	r1, sp, #4
 8002ee2:	f00b fff3 	bl	800eecc <strtof>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8002ee6:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 8002eea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		tmp = strtof(p, &pend);
 8002ef2:	eeb0 8a40 	vmov.f32	s16, s0
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8002ef6:	f2c0 8104 	blt.w	8003102 <CLI_proc+0x59e>
 8002efa:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002efe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	f200 80fc 	bhi.w	8003102 <CLI_proc+0x59e>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 8002f0a:	ee10 0a10 	vmov	r0, s0
 8002f0e:	f7fd fb2b 	bl	8000568 <__aeabi_f2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4ca7      	ldr	r4, [pc, #668]	; (80031b4 <CLI_proc+0x650>)
 8002f18:	48a7      	ldr	r0, [pc, #668]	; (80031b8 <CLI_proc+0x654>)
 8002f1a:	ee18 1a10 	vmov	r1, s16
 8002f1e:	f8c4 1001 	str.w	r1, [r4, #1]
}
 8002f22:	b002      	add	sp, #8
 8002f24:	ecbd 8b02 	vpop	{d8}
 8002f28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 8002f2c:	f00c bffa 	b.w	800ff24 <iprintf>
		if(find("sim on")==clibuf+6) {SIM_ON(); return;}
 8002f30:	48a2      	ldr	r0, [pc, #648]	; (80031bc <CLI_proc+0x658>)
 8002f32:	2201      	movs	r2, #1
		if(find("sim off")==clibuf+7) {SIM_OFF(); return;}
 8002f34:	2101      	movs	r1, #1
}
 8002f36:	b002      	add	sp, #8
 8002f38:	ecbd 8b02 	vpop	{d8}
 8002f3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("sim off")==clibuf+7) {SIM_OFF(); return;}
 8002f40:	f006 befe 	b.w	8009d40 <HAL_GPIO_WritePin>
 8002f44:	489d      	ldr	r0, [pc, #628]	; (80031bc <CLI_proc+0x658>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	e7f4      	b.n	8002f34 <CLI_proc+0x3d0>
			if((p = find("interval ")))
 8002f4a:	489d      	ldr	r0, [pc, #628]	; (80031c0 <CLI_proc+0x65c>)
 8002f4c:	f7ff fc6a 	bl	8002824 <find>
 8002f50:	4605      	mov	r5, r0
 8002f52:	2800      	cmp	r0, #0
 8002f54:	f040 810e 	bne.w	8003174 <CLI_proc+0x610>
			if((p = find("disptype ")))
 8002f58:	489a      	ldr	r0, [pc, #616]	; (80031c4 <CLI_proc+0x660>)
 8002f5a:	f7ff fc63 	bl	8002824 <find>
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	f040 817c 	bne.w	800325c <CLI_proc+0x6f8>
			if((p = find("tmp117 ")))
 8002f64:	4898      	ldr	r0, [pc, #608]	; (80031c8 <CLI_proc+0x664>)
 8002f66:	f7ff fc5d 	bl	8002824 <find>
 8002f6a:	b110      	cbz	r0, 8002f72 <CLI_proc+0x40e>
				if(p == clibuf+11)
 8002f6c:	42a0      	cmp	r0, r4
 8002f6e:	f000 82a7 	beq.w	80034c0 <CLI_proc+0x95c>
			if((p = find("shtc3 ")))
 8002f72:	4896      	ldr	r0, [pc, #600]	; (80031cc <CLI_proc+0x668>)
 8002f74:	f7ff fc56 	bl	8002824 <find>
 8002f78:	b110      	cbz	r0, 8002f80 <CLI_proc+0x41c>
				if(p == clibuf+10)
 8002f7a:	4548      	cmp	r0, r9
 8002f7c:	f000 8338 	beq.w	80035f0 <CLI_proc+0xa8c>
			if((p = find("ms8607 ")))
 8002f80:	4893      	ldr	r0, [pc, #588]	; (80031d0 <CLI_proc+0x66c>)
 8002f82:	f7ff fc4f 	bl	8002824 <find>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	f000 8180 	beq.w	800328c <CLI_proc+0x728>
				if(p == clibuf+11)
 8002f8c:	42a0      	cmp	r0, r4
 8002f8e:	f47f adf8 	bne.w	8002b82 <CLI_proc+0x1e>
					if((p = find("enable")))
 8002f92:	4890      	ldr	r0, [pc, #576]	; (80031d4 <CLI_proc+0x670>)
 8002f94:	f7ff fc46 	bl	8002824 <find>
 8002f98:	b170      	cbz	r0, 8002fb8 <CLI_proc+0x454>
						MS8607.sensor_use = 1;
 8002f9a:	498f      	ldr	r1, [pc, #572]	; (80031d8 <CLI_proc+0x674>)
						config.MS8607_use = 1;
 8002f9c:	4c85      	ldr	r4, [pc, #532]	; (80031b4 <CLI_proc+0x650>)
						MS8607.sensor_use = 1;
 8002f9e:	780b      	ldrb	r3, [r1, #0]
						config.MS8607_use = 1;
 8002fa0:	7e22      	ldrb	r2, [r4, #24]
						printf("MS8607 sensor enabled\r\n");
 8002fa2:	488e      	ldr	r0, [pc, #568]	; (80031dc <CLI_proc+0x678>)
						config.MS8607_use = 1;
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
						MS8607.sensor_use = 1;
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
						config.MS8607_use = 1;
 8002fac:	7622      	strb	r2, [r4, #24]
						MS8607.sensor_use = 1;
 8002fae:	700b      	strb	r3, [r1, #0]
						printf("MS8607 sensor enabled\r\n");
 8002fb0:	f00d f81e 	bl	800fff0 <puts>
						Save_config();
 8002fb4:	f7fe fa02 	bl	80013bc <Save_config>
					if((p = find("disable")))
 8002fb8:	4889      	ldr	r0, [pc, #548]	; (80031e0 <CLI_proc+0x67c>)
 8002fba:	f7ff fc33 	bl	8002824 <find>
 8002fbe:	b170      	cbz	r0, 8002fde <CLI_proc+0x47a>
						config.MS8607_use = 0;
 8002fc0:	497c      	ldr	r1, [pc, #496]	; (80031b4 <CLI_proc+0x650>)
						MS8607.sensor_use = 0;
 8002fc2:	4b85      	ldr	r3, [pc, #532]	; (80031d8 <CLI_proc+0x674>)
						config.MS8607_use = 0;
 8002fc4:	7e0c      	ldrb	r4, [r1, #24]
						MS8607.sensor_use = 0;
 8002fc6:	781a      	ldrb	r2, [r3, #0]
						printf("MS8607 sensor disabled\r\n");
 8002fc8:	4886      	ldr	r0, [pc, #536]	; (80031e4 <CLI_proc+0x680>)
						MS8607.sensor_use = 0;
 8002fca:	f36f 0241 	bfc	r2, #1, #1
						config.MS8607_use = 0;
 8002fce:	f36f 0400 	bfc	r4, #0, #1
 8002fd2:	760c      	strb	r4, [r1, #24]
						MS8607.sensor_use = 0;
 8002fd4:	701a      	strb	r2, [r3, #0]
						printf("MS8607 sensor disabled\r\n");
 8002fd6:	f00d f80b 	bl	800fff0 <puts>
						Save_config();
 8002fda:	f7fe f9ef 	bl	80013bc <Save_config>
					if((p = find("conf ")))
 8002fde:	4882      	ldr	r0, [pc, #520]	; (80031e8 <CLI_proc+0x684>)
 8002fe0:	f7ff fc20 	bl	8002824 <find>
 8002fe4:	b1f0      	cbz	r0, 8003024 <CLI_proc+0x4c0>
			            getval(clibuf+16, &tmp, 0, 5);
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	2200      	movs	r2, #0
 8002fea:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 8002fec:	f04f 34ff 	mov.w	r4, #4294967295
			            getval(clibuf+16, &tmp, 0, 5);
 8002ff0:	487e      	ldr	r0, [pc, #504]	; (80031ec <CLI_proc+0x688>)
						int32_t tmp = -1;
 8002ff2:	9401      	str	r4, [sp, #4]
			            getval(clibuf+16, &tmp, 0, 5);
 8002ff4:	f7ff fc40 	bl	8002878 <getval>
			            config.MS8607_conf = tmp;
 8002ff8:	496e      	ldr	r1, [pc, #440]	; (80031b4 <CLI_proc+0x650>)
			            MS8607.sensor_conf = tmp;
 8002ffa:	4b77      	ldr	r3, [pc, #476]	; (80031d8 <CLI_proc+0x674>)
			            config.MS8607_conf = tmp;
 8002ffc:	9c01      	ldr	r4, [sp, #4]
 8002ffe:	7e08      	ldrb	r0, [r1, #24]
			            MS8607.sensor_conf = tmp;
 8003000:	781a      	ldrb	r2, [r3, #0]
			            config.MS8607_conf = tmp;
 8003002:	f004 050f 	and.w	r5, r4, #15
 8003006:	f365 0044 	bfi	r0, r5, #1, #4
			            MS8607.sensor_conf = tmp;
 800300a:	f365 0285 	bfi	r2, r5, #2, #4
			            config.MS8607_conf = tmp;
 800300e:	7608      	strb	r0, [r1, #24]
			            MS8607_osr(tmp);
 8003010:	b2e0      	uxtb	r0, r4
			            MS8607.sensor_conf = tmp;
 8003012:	701a      	strb	r2, [r3, #0]
			            MS8607_osr(tmp);
 8003014:	f002 fe14 	bl	8005c40 <MS8607_osr>
			            printf("MS8607 config %li\r\n",tmp);
 8003018:	4621      	mov	r1, r4
 800301a:	4875      	ldr	r0, [pc, #468]	; (80031f0 <CLI_proc+0x68c>)
 800301c:	f00c ff82 	bl	800ff24 <iprintf>
						Save_config();
 8003020:	f7fe f9cc 	bl	80013bc <Save_config>
					if((p = find("temperature ")))
 8003024:	4873      	ldr	r0, [pc, #460]	; (80031f4 <CLI_proc+0x690>)
 8003026:	f7ff fbfd 	bl	8002824 <find>
 800302a:	4604      	mov	r4, r0
 800302c:	b118      	cbz	r0, 8003036 <CLI_proc+0x4d2>
						if(p == clibuf+23)
 800302e:	4b72      	ldr	r3, [pc, #456]	; (80031f8 <CLI_proc+0x694>)
 8003030:	4298      	cmp	r0, r3
 8003032:	f000 8443 	beq.w	80038bc <CLI_proc+0xd58>
					if((p = find("press ")))
 8003036:	4871      	ldr	r0, [pc, #452]	; (80031fc <CLI_proc+0x698>)
 8003038:	f7ff fbf4 	bl	8002824 <find>
 800303c:	4604      	mov	r4, r0
 800303e:	b118      	cbz	r0, 8003048 <CLI_proc+0x4e4>
						if(p == clibuf+17)
 8003040:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <CLI_proc+0x69c>)
 8003042:	4298      	cmp	r0, r3
 8003044:	f000 8482 	beq.w	800394c <CLI_proc+0xde8>
					if((p = find("hum ")))
 8003048:	486e      	ldr	r0, [pc, #440]	; (8003204 <CLI_proc+0x6a0>)
 800304a:	f7ff fbeb 	bl	8002824 <find>
 800304e:	4604      	mov	r4, r0
 8003050:	2800      	cmp	r0, #0
 8003052:	f43f ad96 	beq.w	8002b82 <CLI_proc+0x1e>
						if(p == clibuf+15)
 8003056:	4b6c      	ldr	r3, [pc, #432]	; (8003208 <CLI_proc+0x6a4>)
 8003058:	4298      	cmp	r0, r3
 800305a:	f47f ad92 	bne.w	8002b82 <CLI_proc+0x1e>
							if((strstr(clibuf+15, "offset ")))
 800305e:	496b      	ldr	r1, [pc, #428]	; (800320c <CLI_proc+0x6a8>)
 8003060:	f00d f98a 	bl	8010378 <strstr>
 8003064:	b1b8      	cbz	r0, 8003096 <CLI_proc+0x532>
						        getFloat(clibuf+22, &tmp, MIN_OFFSET, MAX_OFFSET);
 8003066:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800306a:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800306e:	a901      	add	r1, sp, #4
 8003070:	1de0      	adds	r0, r4, #7
 8003072:	f7ff fc2d 	bl	80028d0 <getFloat>
						        MS8607.hum.offset = tmp;
 8003076:	4b58      	ldr	r3, [pc, #352]	; (80031d8 <CLI_proc+0x674>)
						        config.MS8607_h_offset = tmp;
 8003078:	494e      	ldr	r1, [pc, #312]	; (80031b4 <CLI_proc+0x650>)
 800307a:	9801      	ldr	r0, [sp, #4]
						        MS8607.hum.offset = tmp;
 800307c:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.MS8607_h_offset = tmp;
 8003080:	f8c1 001d 	str.w	r0, [r1, #29]
						        printf("MS8607 humidity offset %.6f\r\n",tmp);
 8003084:	f7fd fa70 	bl	8000568 <__aeabi_f2d>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4860      	ldr	r0, [pc, #384]	; (8003210 <CLI_proc+0x6ac>)
 800308e:	f00c ff49 	bl	800ff24 <iprintf>
						        Save_config();
 8003092:	f7fe f993 	bl	80013bc <Save_config>
							if((strstr(clibuf+15, "en")))
 8003096:	495f      	ldr	r1, [pc, #380]	; (8003214 <CLI_proc+0x6b0>)
 8003098:	485b      	ldr	r0, [pc, #364]	; (8003208 <CLI_proc+0x6a4>)
 800309a:	f00d f96d 	bl	8010378 <strstr>
 800309e:	b170      	cbz	r0, 80030be <CLI_proc+0x55a>
								MS8607.hum.use_meas = 1;
 80030a0:	494d      	ldr	r1, [pc, #308]	; (80031d8 <CLI_proc+0x674>)
								config.MS8607_h_use = 1;
 80030a2:	4c44      	ldr	r4, [pc, #272]	; (80031b4 <CLI_proc+0x650>)
								MS8607.hum.use_meas = 1;
 80030a4:	7a8b      	ldrb	r3, [r1, #10]
								config.MS8607_h_use = 1;
 80030a6:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 humidity measure enabled\r\n");
 80030a8:	485b      	ldr	r0, [pc, #364]	; (8003218 <CLI_proc+0x6b4>)
								config.MS8607_h_use = 1;
 80030aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
								MS8607.hum.use_meas = 1;
 80030ae:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_h_use = 1;
 80030b2:	7622      	strb	r2, [r4, #24]
								MS8607.hum.use_meas = 1;
 80030b4:	728b      	strb	r3, [r1, #10]
								printf("MS8607 humidity measure enabled\r\n");
 80030b6:	f00c ff9b 	bl	800fff0 <puts>
								Save_config();
 80030ba:	f7fe f97f 	bl	80013bc <Save_config>
							if((strstr(clibuf+15, "dis")))
 80030be:	4957      	ldr	r1, [pc, #348]	; (800321c <CLI_proc+0x6b8>)
 80030c0:	4851      	ldr	r0, [pc, #324]	; (8003208 <CLI_proc+0x6a4>)
 80030c2:	f00d f959 	bl	8010378 <strstr>
 80030c6:	2800      	cmp	r0, #0
 80030c8:	f43f ad5b 	beq.w	8002b82 <CLI_proc+0x1e>
								config.MS8607_h_use = 0;
 80030cc:	4939      	ldr	r1, [pc, #228]	; (80031b4 <CLI_proc+0x650>)
								MS8607.hum.use_meas = 0;
 80030ce:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <CLI_proc+0x674>)
								config.MS8607_h_use = 0;
 80030d0:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.hum.use_meas = 0;
 80030d2:	7a9a      	ldrb	r2, [r3, #10]
								printf("MS8607 humidity measure disable\r\n");
 80030d4:	4852      	ldr	r0, [pc, #328]	; (8003220 <CLI_proc+0x6bc>)
								config.MS8607_h_use = 0;
 80030d6:	f36f 1486 	bfc	r4, #6, #1
								MS8607.hum.use_meas = 0;
 80030da:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_h_use = 0;
 80030de:	760c      	strb	r4, [r1, #24]
								DPS368.press.use_meas = 0;
 80030e0:	729a      	strb	r2, [r3, #10]
								printf("DPS368 pressure measure disable\r\n");
 80030e2:	f00c ff85 	bl	800fff0 <puts>
}
 80030e6:	b002      	add	sp, #8
 80030e8:	ecbd 8b02 	vpop	{d8}
 80030ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
								Save_config();
 80030f0:	f7fe b964 	b.w	80013bc <Save_config>
}
 80030f4:	b002      	add	sp, #8
 80030f6:	ecbd 8b02 	vpop	{d8}
 80030fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gps on")==clibuf+6) {GPS_ON(); return;}
 80030fe:	f7fe bbdb 	b.w	80018b8 <GPS_ON>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8003102:	4848      	ldr	r0, [pc, #288]	; (8003224 <CLI_proc+0x6c0>)
	float tempfloat = 0.0;
 8003104:	ed9f 8a48 	vldr	s16, [pc, #288]	; 8003228 <CLI_proc+0x6c4>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8003108:	f00c ff72 	bl	800fff0 <puts>
 800310c:	2200      	movs	r2, #0
 800310e:	2300      	movs	r3, #0
 8003110:	e701      	b.n	8002f16 <CLI_proc+0x3b2>
}
 8003112:	b002      	add	sp, #8
 8003114:	ecbd 8b02 	vpop	{d8}
 8003118:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("gps off")==clibuf+7) {GPS_OFF(); return;}
 800311c:	f7fe bbce 	b.w	80018bc <GPS_OFF>
		if(find("rtc debug on")==clibuf+12) {printf("RTC Debug ON\r\n"); rtc_debug=1; return;}
 8003120:	4842      	ldr	r0, [pc, #264]	; (800322c <CLI_proc+0x6c8>)
 8003122:	f00c ff65 	bl	800fff0 <puts>
 8003126:	4b42      	ldr	r3, [pc, #264]	; (8003230 <CLI_proc+0x6cc>)
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e529      	b.n	8002b82 <CLI_proc+0x1e>
		if(find("rtc debug off")==clibuf+13) {printf("RTC Debug OFF\r\n"); rtc_debug=0; return;}
 800312e:	4841      	ldr	r0, [pc, #260]	; (8003234 <CLI_proc+0x6d0>)
 8003130:	f00c ff5e 	bl	800fff0 <puts>
 8003134:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <CLI_proc+0x6cc>)
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e522      	b.n	8002b82 <CLI_proc+0x1e>
		if(find("rtos debug on")==clibuf+13) {printf("RTOS Debug ON\r\n"); rtos_debug=1; return;}
 800313c:	483e      	ldr	r0, [pc, #248]	; (8003238 <CLI_proc+0x6d4>)
 800313e:	f00c ff57 	bl	800fff0 <puts>
 8003142:	4b3e      	ldr	r3, [pc, #248]	; (800323c <CLI_proc+0x6d8>)
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e51b      	b.n	8002b82 <CLI_proc+0x1e>
		if(find("meas debug on")==clibuf+13) {printf("MEAS Debug ON\r\n"); meas_debug=1; return;}
 800314a:	483d      	ldr	r0, [pc, #244]	; (8003240 <CLI_proc+0x6dc>)
 800314c:	f00c ff50 	bl	800fff0 <puts>
 8003150:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <CLI_proc+0x6e0>)
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e514      	b.n	8002b82 <CLI_proc+0x1e>
		if(find("meas debug off")==clibuf+14) {printf("MEAS Debug OFF\r\n"); meas_debug=0; return;}
 8003158:	483b      	ldr	r0, [pc, #236]	; (8003248 <CLI_proc+0x6e4>)
 800315a:	f00c ff49 	bl	800fff0 <puts>
 800315e:	4b39      	ldr	r3, [pc, #228]	; (8003244 <CLI_proc+0x6e0>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e50d      	b.n	8002b82 <CLI_proc+0x1e>
}
 8003166:	b002      	add	sp, #8
 8003168:	ecbd 8b02 	vpop	{d8}
 800316c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if(find("get time")==clibuf+8) {print_rtc_time(); return;}
 8003170:	f004 be94 	b.w	8007e9c <print_rtc_time>
	            getval(p, &tmp, 4, 3600);
 8003174:	2204      	movs	r2, #4
 8003176:	f44f 6361 	mov.w	r3, #3600	; 0xe10
				int32_t tmp = -1;
 800317a:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 4, 3600);
 800317e:	eb0d 0102 	add.w	r1, sp, r2
				int32_t tmp = -1;
 8003182:	9401      	str	r4, [sp, #4]
	            getval(p, &tmp, 4, 3600);
 8003184:	f7ff fb78 	bl	8002878 <getval>
		            if(tmp >= 4)
 8003188:	9b01      	ldr	r3, [sp, #4]
 800318a:	2b03      	cmp	r3, #3
 800318c:	f77f acf9 	ble.w	8002b82 <CLI_proc+0x1e>
		                new_tim_interval = tmp;
 8003190:	4a2e      	ldr	r2, [pc, #184]	; (800324c <CLI_proc+0x6e8>)
		                printf("New meas interval: %u\r\n", new_tim_interval);
 8003192:	482f      	ldr	r0, [pc, #188]	; (8003250 <CLI_proc+0x6ec>)
		                new_tim_interval = tmp;
 8003194:	8013      	strh	r3, [r2, #0]
		                printf("New meas interval: %u\r\n", new_tim_interval);
 8003196:	b299      	uxth	r1, r3
 8003198:	e61f      	b.n	8002dda <CLI_proc+0x276>
			printf("RTC SYNC NTP\r\n");
 800319a:	482e      	ldr	r0, [pc, #184]	; (8003254 <CLI_proc+0x6f0>)
 800319c:	f00c ff28 	bl	800fff0 <puts>
			status= sync_NTP();
 80031a0:	f004 fe06 	bl	8007db0 <sync_NTP>
			if (status>0)
 80031a4:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 80031a8:	f43f aceb 	beq.w	8002b82 <CLI_proc+0x1e>
				printf("NTP sync error %i\r\n",status);
 80031ac:	482a      	ldr	r0, [pc, #168]	; (8003258 <CLI_proc+0x6f4>)
 80031ae:	e614      	b.n	8002dda <CLI_proc+0x276>
 80031b0:	20000238 	.word	0x20000238
 80031b4:	2000137c 	.word	0x2000137c
 80031b8:	08013f88 	.word	0x08013f88
 80031bc:	48000400 	.word	0x48000400
 80031c0:	080140c4 	.word	0x080140c4
 80031c4:	080140e8 	.word	0x080140e8
 80031c8:	0801412c 	.word	0x0801412c
 80031cc:	08014228 	.word	0x08014228
 80031d0:	08014350 	.word	0x08014350
 80031d4:	08014134 	.word	0x08014134
 80031d8:	200012f8 	.word	0x200012f8
 80031dc:	08014358 	.word	0x08014358
 80031e0:	08014154 	.word	0x08014154
 80031e4:	08014370 	.word	0x08014370
 80031e8:	08014174 	.word	0x08014174
 80031ec:	2000023c 	.word	0x2000023c
 80031f0:	08014388 	.word	0x08014388
 80031f4:	0801419c 	.word	0x0801419c
 80031f8:	20000243 	.word	0x20000243
 80031fc:	08014408 	.word	0x08014408
 8003200:	2000023d 	.word	0x2000023d
 8003204:	080142e8 	.word	0x080142e8
 8003208:	2000023b 	.word	0x2000023b
 800320c:	080141ac 	.word	0x080141ac
 8003210:	08014478 	.word	0x08014478
 8003214:	080141d8 	.word	0x080141d8
 8003218:	08014498 	.word	0x08014498
 800321c:	08014200 	.word	0x08014200
 8003220:	080144bc 	.word	0x080144bc
 8003224:	08013984 	.word	0x08013984
 8003228:	00000000 	.word	0x00000000
 800322c:	08013fcc 	.word	0x08013fcc
 8003230:	200002b7 	.word	0x200002b7
 8003234:	08013fec 	.word	0x08013fec
 8003238:	0801400c 	.word	0x0801400c
 800323c:	20000000 	.word	0x20000000
 8003240:	0801404c 	.word	0x0801404c
 8003244:	200002b6 	.word	0x200002b6
 8003248:	0801406c 	.word	0x0801406c
 800324c:	200013c4 	.word	0x200013c4
 8003250:	080140d0 	.word	0x080140d0
 8003254:	08014098 	.word	0x08014098
 8003258:	080140a8 	.word	0x080140a8
				int32_t tmp = -1;
 800325c:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 2);
 8003260:	2302      	movs	r3, #2
 8003262:	462a      	mov	r2, r5
 8003264:	a901      	add	r1, sp, #4
				int32_t tmp = -1;
 8003266:	9401      	str	r4, [sp, #4]
	            getval(p, &tmp, 0, 2);
 8003268:	f7ff fb06 	bl	8002878 <getval>
		            if(tmp >= 1)
 800326c:	9c01      	ldr	r4, [sp, #4]
 800326e:	2c00      	cmp	r4, #0
 8003270:	f340 8258 	ble.w	8003724 <CLI_proc+0xbc0>
		            	if(tmp==1) printf("Display type TXT\r\n"); else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8003274:	2c01      	cmp	r4, #1
 8003276:	f000 827a 	beq.w	800376e <CLI_proc+0xc0a>
 800327a:	2c02      	cmp	r4, #2
 800327c:	f000 82d2 	beq.w	8003824 <CLI_proc+0xcc0>
		            	csvcnt = 0;
 8003280:	4a70      	ldr	r2, [pc, #448]	; (8003444 <CLI_proc+0x8e0>)
		            	disp_type = tmp;
 8003282:	4b71      	ldr	r3, [pc, #452]	; (8003448 <CLI_proc+0x8e4>)
		            	csvcnt = 0;
 8003284:	2100      	movs	r1, #0
 8003286:	8011      	strh	r1, [r2, #0]
		            	disp_type = tmp;
 8003288:	701c      	strb	r4, [r3, #0]
 800328a:	e47a      	b.n	8002b82 <CLI_proc+0x1e>
			if((p = find("bme280 ")))
 800328c:	486f      	ldr	r0, [pc, #444]	; (800344c <CLI_proc+0x8e8>)
 800328e:	f7ff fac9 	bl	8002824 <find>
 8003292:	b110      	cbz	r0, 800329a <CLI_proc+0x736>
				if(p == clibuf+11)
 8003294:	42a0      	cmp	r0, r4
 8003296:	f000 83d1 	beq.w	8003a3c <CLI_proc+0xed8>
			if((p = find("dps368 ")))
 800329a:	486d      	ldr	r0, [pc, #436]	; (8003450 <CLI_proc+0x8ec>)
 800329c:	f7ff fac2 	bl	8002824 <find>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	f43f ad19 	beq.w	8002cd8 <CLI_proc+0x174>
				if(p == clibuf+11)
 80032a6:	42a0      	cmp	r0, r4
 80032a8:	f47f ad16 	bne.w	8002cd8 <CLI_proc+0x174>
					if((p = find("enable")))
 80032ac:	4869      	ldr	r0, [pc, #420]	; (8003454 <CLI_proc+0x8f0>)
 80032ae:	f7ff fab9 	bl	8002824 <find>
 80032b2:	b180      	cbz	r0, 80032d6 <CLI_proc+0x772>
						config.DPS368_use = 1;
 80032b4:	4868      	ldr	r0, [pc, #416]	; (8003458 <CLI_proc+0x8f4>)
						DPS368.sensor_use = 1;
 80032b6:	4969      	ldr	r1, [pc, #420]	; (800345c <CLI_proc+0x8f8>)
						config.DPS368_use = 1;
 80032b8:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
						DPS368.sensor_use = 1;
 80032bc:	780b      	ldrb	r3, [r1, #0]
						config.DPS368_use = 1;
 80032be:	f042 0201 	orr.w	r2, r2, #1
						DPS368.sensor_use = 1;
 80032c2:	f043 0302 	orr.w	r3, r3, #2
						config.DPS368_use = 1;
 80032c6:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
						printf("DPS368 sensor enabled\r\n");
 80032ca:	4865      	ldr	r0, [pc, #404]	; (8003460 <CLI_proc+0x8fc>)
						DPS368.sensor_use = 1;
 80032cc:	700b      	strb	r3, [r1, #0]
						printf("DPS368 sensor enabled\r\n");
 80032ce:	f00c fe8f 	bl	800fff0 <puts>
						Save_config();
 80032d2:	f7fe f873 	bl	80013bc <Save_config>
					if((p = find("disable")))
 80032d6:	4863      	ldr	r0, [pc, #396]	; (8003464 <CLI_proc+0x900>)
 80032d8:	f7ff faa4 	bl	8002824 <find>
 80032dc:	b180      	cbz	r0, 8003300 <CLI_proc+0x79c>
						config.DPS368_use = 0;
 80032de:	495e      	ldr	r1, [pc, #376]	; (8003458 <CLI_proc+0x8f4>)
						DPS368.sensor_use = 0;
 80032e0:	4b5e      	ldr	r3, [pc, #376]	; (800345c <CLI_proc+0x8f8>)
						config.DPS368_use = 0;
 80032e2:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
						DPS368.sensor_use = 0;
 80032e6:	781a      	ldrb	r2, [r3, #0]
						config.DPS368_use = 0;
 80032e8:	f36f 0000 	bfc	r0, #0, #1
						DPS368.sensor_use = 0;
 80032ec:	f36f 0241 	bfc	r2, #1, #1
						config.DPS368_use = 0;
 80032f0:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
						printf("DPS368 sensor disabled\r\n");
 80032f4:	485c      	ldr	r0, [pc, #368]	; (8003468 <CLI_proc+0x904>)
						DPS368.sensor_use = 0;
 80032f6:	701a      	strb	r2, [r3, #0]
						printf("DPS368 sensor disabled\r\n");
 80032f8:	f00c fe7a 	bl	800fff0 <puts>
						Save_config();
 80032fc:	f7fe f85e 	bl	80013bc <Save_config>
					if((p = find("conf ")))
 8003300:	485a      	ldr	r0, [pc, #360]	; (800346c <CLI_proc+0x908>)
 8003302:	f7ff fa8f 	bl	8002824 <find>
 8003306:	b350      	cbz	r0, 800335e <CLI_proc+0x7fa>
			            getval(clibuf+16, &tmp, 0, 8);
 8003308:	2308      	movs	r3, #8
 800330a:	2200      	movs	r2, #0
 800330c:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 800330e:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+16, &tmp, 0, 8);
 8003312:	4857      	ldr	r0, [pc, #348]	; (8003470 <CLI_proc+0x90c>)
						int32_t tmp = -1;
 8003314:	9501      	str	r5, [sp, #4]
			            getval(clibuf+16, &tmp, 0, 8);
 8003316:	f7ff faaf 	bl	8002878 <getval>
			            config.DPS368_conf = tmp;
 800331a:	4a4f      	ldr	r2, [pc, #316]	; (8003458 <CLI_proc+0x8f4>)
 800331c:	9d01      	ldr	r5, [sp, #4]
 800331e:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
			            DPS368.sensor_conf = tmp;
 8003322:	4b4e      	ldr	r3, [pc, #312]	; (800345c <CLI_proc+0x8f8>)
			            config.DPS368_conf = tmp;
 8003324:	f005 000f 	and.w	r0, r5, #15
 8003328:	f360 0144 	bfi	r1, r0, #1, #4
 800332c:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
			            DPS368.sensor_conf = tmp;
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	f360 0285 	bfi	r2, r0, #2, #4
 8003336:	701a      	strb	r2, [r3, #0]
			            dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8003338:	f001 f936 	bl	80045a8 <dps368_ovr_config>
 800333c:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <CLI_proc+0x910>)
 800333e:	4603      	mov	r3, r0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	7013      	strb	r3, [r2, #0]
			            dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8003344:	4a4c      	ldr	r2, [pc, #304]	; (8003478 <CLI_proc+0x914>)
 8003346:	2000      	movs	r0, #0
 8003348:	7010      	strb	r0, [r2, #0]
			            dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 800334a:	4a4c      	ldr	r2, [pc, #304]	; (800347c <CLI_proc+0x918>)
 800334c:	7013      	strb	r3, [r2, #0]
			            DPS368_temp_correct(dps368_ovr_temp);
 800334e:	f000 ffab 	bl	80042a8 <DPS368_temp_correct>
			            printf("DPS368 temperature config %li\r\n",tmp);
 8003352:	4629      	mov	r1, r5
 8003354:	484a      	ldr	r0, [pc, #296]	; (8003480 <CLI_proc+0x91c>)
 8003356:	f00c fde5 	bl	800ff24 <iprintf>
						Save_config();
 800335a:	f7fe f82f 	bl	80013bc <Save_config>
					if((p = find("temperature ")))
 800335e:	4849      	ldr	r0, [pc, #292]	; (8003484 <CLI_proc+0x920>)
 8003360:	f7ff fa60 	bl	8002824 <find>
 8003364:	4605      	mov	r5, r0
 8003366:	b118      	cbz	r0, 8003370 <CLI_proc+0x80c>
						if(p == clibuf+23)
 8003368:	4b47      	ldr	r3, [pc, #284]	; (8003488 <CLI_proc+0x924>)
 800336a:	4298      	cmp	r0, r3
 800336c:	f000 845e 	beq.w	8003c2c <CLI_proc+0x10c8>
					if((p = find("press ")))
 8003370:	4846      	ldr	r0, [pc, #280]	; (800348c <CLI_proc+0x928>)
 8003372:	f7ff fa57 	bl	8002824 <find>
 8003376:	4605      	mov	r5, r0
 8003378:	2800      	cmp	r0, #0
 800337a:	f43f acad 	beq.w	8002cd8 <CLI_proc+0x174>
						if(p == clibuf+17)
 800337e:	4b44      	ldr	r3, [pc, #272]	; (8003490 <CLI_proc+0x92c>)
 8003380:	4298      	cmp	r0, r3
 8003382:	f47f aca9 	bne.w	8002cd8 <CLI_proc+0x174>
							if((strstr(clibuf+17, "offset ")))
 8003386:	4943      	ldr	r1, [pc, #268]	; (8003494 <CLI_proc+0x930>)
 8003388:	f00c fff6 	bl	8010378 <strstr>
 800338c:	b1b8      	cbz	r0, 80033be <CLI_proc+0x85a>
					            getFloat(clibuf+24, &tmp, -500, 500);
 800338e:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003498 <CLI_proc+0x934>
 8003392:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800349c <CLI_proc+0x938>
 8003396:	a901      	add	r1, sp, #4
 8003398:	1de8      	adds	r0, r5, #7
 800339a:	f7ff fa99 	bl	80028d0 <getFloat>
					            DPS368.press.offset = tmp;
 800339e:	4b2f      	ldr	r3, [pc, #188]	; (800345c <CLI_proc+0x8f8>)
					            config.DPS368_p_offset = tmp;
 80033a0:	492d      	ldr	r1, [pc, #180]	; (8003458 <CLI_proc+0x8f4>)
 80033a2:	9801      	ldr	r0, [sp, #4]
					            DPS368.press.offset = tmp;
 80033a4:	f8c3 000f 	str.w	r0, [r3, #15]
					            config.DPS368_p_offset = tmp;
 80033a8:	f8c1 0037 	str.w	r0, [r1, #55]	; 0x37
					            printf("DPS368 pressure offset %.6f\r\n",tmp);
 80033ac:	f7fd f8dc 	bl	8000568 <__aeabi_f2d>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	483a      	ldr	r0, [pc, #232]	; (80034a0 <CLI_proc+0x93c>)
 80033b6:	f00c fdb5 	bl	800ff24 <iprintf>
								Save_config();
 80033ba:	f7fd ffff 	bl	80013bc <Save_config>
							if((strstr(clibuf+17, "en")))
 80033be:	4939      	ldr	r1, [pc, #228]	; (80034a4 <CLI_proc+0x940>)
 80033c0:	4833      	ldr	r0, [pc, #204]	; (8003490 <CLI_proc+0x92c>)
 80033c2:	f00c ffd9 	bl	8010378 <strstr>
 80033c6:	b180      	cbz	r0, 80033ea <CLI_proc+0x886>
								DPS368.press.use_meas = 1;
 80033c8:	4924      	ldr	r1, [pc, #144]	; (800345c <CLI_proc+0x8f8>)
								config.DPS368_p_use = 1;
 80033ca:	4c23      	ldr	r4, [pc, #140]	; (8003458 <CLI_proc+0x8f4>)
								DPS368.press.use_meas = 1;
 80033cc:	7a8b      	ldrb	r3, [r1, #10]
								config.DPS368_p_use = 1;
 80033ce:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
								printf("DPS368 pressure measure enabled\r\n");
 80033d2:	4835      	ldr	r0, [pc, #212]	; (80034a8 <CLI_proc+0x944>)
								config.DPS368_p_use = 1;
 80033d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
								DPS368.press.use_meas = 1;
 80033d8:	f043 0301 	orr.w	r3, r3, #1
								config.DPS368_p_use = 1;
 80033dc:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
								DPS368.press.use_meas = 1;
 80033e0:	728b      	strb	r3, [r1, #10]
								printf("DPS368 pressure measure enabled\r\n");
 80033e2:	f00c fe05 	bl	800fff0 <puts>
								Save_config();
 80033e6:	f7fd ffe9 	bl	80013bc <Save_config>
							if((strstr(clibuf+17, "dis")))
 80033ea:	4930      	ldr	r1, [pc, #192]	; (80034ac <CLI_proc+0x948>)
 80033ec:	4828      	ldr	r0, [pc, #160]	; (8003490 <CLI_proc+0x92c>)
 80033ee:	f00c ffc3 	bl	8010378 <strstr>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	f43f abc5 	beq.w	8002b82 <CLI_proc+0x1e>
								config.DPS368_p_use = 0;
 80033f8:	4917      	ldr	r1, [pc, #92]	; (8003458 <CLI_proc+0x8f4>)
								DPS368.press.use_meas = 0;
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <CLI_proc+0x8f8>)
								config.DPS368_p_use = 0;
 80033fc:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
								DPS368.press.use_meas = 0;
 8003400:	7a9a      	ldrb	r2, [r3, #10]
								printf("DPS368 pressure measure disable\r\n");
 8003402:	482b      	ldr	r0, [pc, #172]	; (80034b0 <CLI_proc+0x94c>)
								config.DPS368_p_use = 0;
 8003404:	f36f 1486 	bfc	r4, #6, #1
								DPS368.press.use_meas = 0;
 8003408:	f36f 0200 	bfc	r2, #0, #1
								config.DPS368_p_use = 0;
 800340c:	f881 4032 	strb.w	r4, [r1, #50]	; 0x32
 8003410:	e666      	b.n	80030e0 <CLI_proc+0x57c>
						getval(clibuf+15, &tmp, 1, 500);
 8003412:	a901      	add	r1, sp, #4
 8003414:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003418:	2201      	movs	r2, #1
						int32_t tmp = -1;
 800341a:	f04f 34ff 	mov.w	r4, #4294967295
						getval(clibuf+15, &tmp, 1, 500);
 800341e:	f105 000a 	add.w	r0, r5, #10
						int32_t tmp = -1;
 8003422:	9401      	str	r4, [sp, #4]
						getval(clibuf+15, &tmp, 1, 500);
 8003424:	f7ff fa28 	bl	8002878 <getval>
						meas_count = tmp;
 8003428:	4c22      	ldr	r4, [pc, #136]	; (80034b4 <CLI_proc+0x950>)
 800342a:	9901      	ldr	r1, [sp, #4]
						meas_cont_mode = 0;
 800342c:	4a22      	ldr	r2, [pc, #136]	; (80034b8 <CLI_proc+0x954>)
						disp_type = 1;
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <CLI_proc+0x8e4>)
						meas_count = tmp;
 8003430:	8021      	strh	r1, [r4, #0]
						meas_cont_mode = 0;
 8003432:	2500      	movs	r5, #0
 8003434:	7015      	strb	r5, [r2, #0]
						printf("Start %i measures, TXT output\r\n", meas_count);
 8003436:	b289      	uxth	r1, r1
						disp_type = 1;
 8003438:	2201      	movs	r2, #1
						printf("Start %i measures, TXT output\r\n", meas_count);
 800343a:	4820      	ldr	r0, [pc, #128]	; (80034bc <CLI_proc+0x958>)
						disp_type = 1;
 800343c:	701a      	strb	r2, [r3, #0]
						printf("Start %i measures, TXT output\r\n", meas_count);
 800343e:	f00c fd71 	bl	800ff24 <iprintf>
						ReinitTimer(tim_interval);
 8003442:	e48d      	b.n	8002d60 <CLI_proc+0x1fc>
 8003444:	20000270 	.word	0x20000270
 8003448:	200013b9 	.word	0x200013b9
 800344c:	080144e0 	.word	0x080144e0
 8003450:	08014654 	.word	0x08014654
 8003454:	08014134 	.word	0x08014134
 8003458:	2000137c 	.word	0x2000137c
 800345c:	200012dc 	.word	0x200012dc
 8003460:	0801465c 	.word	0x0801465c
 8003464:	08014154 	.word	0x08014154
 8003468:	08014674 	.word	0x08014674
 800346c:	08014174 	.word	0x08014174
 8003470:	2000023c 	.word	0x2000023c
 8003474:	200013ba 	.word	0x200013ba
 8003478:	200013bd 	.word	0x200013bd
 800347c:	200013bc 	.word	0x200013bc
 8003480:	0801468c 	.word	0x0801468c
 8003484:	0801419c 	.word	0x0801419c
 8003488:	20000243 	.word	0x20000243
 800348c:	08014408 	.word	0x08014408
 8003490:	2000023d 	.word	0x2000023d
 8003494:	080141ac 	.word	0x080141ac
 8003498:	43fa0000 	.word	0x43fa0000
 800349c:	c3fa0000 	.word	0xc3fa0000
 80034a0:	08014718 	.word	0x08014718
 80034a4:	080141d8 	.word	0x080141d8
 80034a8:	08014738 	.word	0x08014738
 80034ac:	08014200 	.word	0x08014200
 80034b0:	0801475c 	.word	0x0801475c
 80034b4:	2000000e 	.word	0x2000000e
 80034b8:	2000000c 	.word	0x2000000c
 80034bc:	08014798 	.word	0x08014798
					if((p = find("enable")))
 80034c0:	48ad      	ldr	r0, [pc, #692]	; (8003778 <CLI_proc+0xc14>)
 80034c2:	f7ff f9af 	bl	8002824 <find>
 80034c6:	b170      	cbz	r0, 80034e6 <CLI_proc+0x982>
						config.TMP117_use = 1;
 80034c8:	4aac      	ldr	r2, [pc, #688]	; (800377c <CLI_proc+0xc18>)
						printf("TMP117 sensor enabled\r\n");
 80034ca:	48ad      	ldr	r0, [pc, #692]	; (8003780 <CLI_proc+0xc1c>)
						config.TMP117_use = 1;
 80034cc:	7a93      	ldrb	r3, [r2, #10]
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	7293      	strb	r3, [r2, #10]
						TMP117.sensor_use = 1;
 80034d4:	4aab      	ldr	r2, [pc, #684]	; (8003784 <CLI_proc+0xc20>)
 80034d6:	7813      	ldrb	r3, [r2, #0]
 80034d8:	f043 0302 	orr.w	r3, r3, #2
 80034dc:	7013      	strb	r3, [r2, #0]
						printf("TMP117 sensor enabled\r\n");
 80034de:	f00c fd87 	bl	800fff0 <puts>
						Save_config();
 80034e2:	f7fd ff6b 	bl	80013bc <Save_config>
					if((p = find("disable")))
 80034e6:	48a8      	ldr	r0, [pc, #672]	; (8003788 <CLI_proc+0xc24>)
 80034e8:	f7ff f99c 	bl	8002824 <find>
 80034ec:	b170      	cbz	r0, 800350c <CLI_proc+0x9a8>
						config.TMP117_use = 0;
 80034ee:	4ba3      	ldr	r3, [pc, #652]	; (800377c <CLI_proc+0xc18>)
						printf("TMP117 sensor disabled\r\n");
 80034f0:	48a6      	ldr	r0, [pc, #664]	; (800378c <CLI_proc+0xc28>)
						config.TMP117_use = 0;
 80034f2:	7a9a      	ldrb	r2, [r3, #10]
 80034f4:	f36f 0200 	bfc	r2, #0, #1
 80034f8:	729a      	strb	r2, [r3, #10]
						TMP117.sensor_use = 0;
 80034fa:	4ba2      	ldr	r3, [pc, #648]	; (8003784 <CLI_proc+0xc20>)
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	f36f 0241 	bfc	r2, #1, #1
 8003502:	701a      	strb	r2, [r3, #0]
						printf("TMP117 sensor disabled\r\n");
 8003504:	f00c fd74 	bl	800fff0 <puts>
						Save_config();
 8003508:	f7fd ff58 	bl	80013bc <Save_config>
					if((p = find("conf ")))
 800350c:	48a0      	ldr	r0, [pc, #640]	; (8003790 <CLI_proc+0xc2c>)
 800350e:	f7ff f989 	bl	8002824 <find>
 8003512:	b1f8      	cbz	r0, 8003554 <CLI_proc+0x9f0>
						int32_t tmp = -1;
 8003514:	f04f 31ff 	mov.w	r1, #4294967295
						getval(clibuf+16, &tmp, 0, 3);
 8003518:	2303      	movs	r3, #3
 800351a:	2200      	movs	r2, #0
						int32_t tmp = -1;
 800351c:	9101      	str	r1, [sp, #4]
						getval(clibuf+16, &tmp, 0, 3);
 800351e:	489d      	ldr	r0, [pc, #628]	; (8003794 <CLI_proc+0xc30>)
 8003520:	a901      	add	r1, sp, #4
 8003522:	f7ff f9a9 	bl	8002878 <getval>
						config.TMP117_conf = tmp;
 8003526:	4a95      	ldr	r2, [pc, #596]	; (800377c <CLI_proc+0xc18>)
 8003528:	9d01      	ldr	r5, [sp, #4]
 800352a:	7a91      	ldrb	r1, [r2, #10]
						TMP117.sensor_conf = tmp;
 800352c:	4b95      	ldr	r3, [pc, #596]	; (8003784 <CLI_proc+0xc20>)
						config.TMP117_conf = tmp;
 800352e:	f005 000f 	and.w	r0, r5, #15
 8003532:	f360 0144 	bfi	r1, r0, #1, #4
 8003536:	7291      	strb	r1, [r2, #10]
						TMP117.sensor_conf = tmp;
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	f360 0285 	bfi	r2, r0, #2, #4
 800353e:	701a      	strb	r2, [r3, #0]
						tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8003540:	f004 fe3a 	bl	80081b8 <tmp117_avr_conf>
 8003544:	4b94      	ldr	r3, [pc, #592]	; (8003798 <CLI_proc+0xc34>)
						printf("TMP117 temperature config %li\r\n",tmp);
 8003546:	4629      	mov	r1, r5
						tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8003548:	8018      	strh	r0, [r3, #0]
						printf("TMP117 temperature config %li\r\n",tmp);
 800354a:	4894      	ldr	r0, [pc, #592]	; (800379c <CLI_proc+0xc38>)
 800354c:	f00c fcea 	bl	800ff24 <iprintf>
						Save_config();
 8003550:	f7fd ff34 	bl	80013bc <Save_config>
					if((p = find("temperature ")))
 8003554:	4892      	ldr	r0, [pc, #584]	; (80037a0 <CLI_proc+0xc3c>)
 8003556:	f7ff f965 	bl	8002824 <find>
 800355a:	4605      	mov	r5, r0
 800355c:	2800      	cmp	r0, #0
 800355e:	f43f ad08 	beq.w	8002f72 <CLI_proc+0x40e>
						if(p == clibuf+23)
 8003562:	4b90      	ldr	r3, [pc, #576]	; (80037a4 <CLI_proc+0xc40>)
 8003564:	4298      	cmp	r0, r3
 8003566:	f47f ad04 	bne.w	8002f72 <CLI_proc+0x40e>
							if((strstr(clibuf+23, "offset ")))
 800356a:	498f      	ldr	r1, [pc, #572]	; (80037a8 <CLI_proc+0xc44>)
 800356c:	f00c ff04 	bl	8010378 <strstr>
 8003570:	b1b8      	cbz	r0, 80035a2 <CLI_proc+0xa3e>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 8003572:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003576:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 800357a:	a901      	add	r1, sp, #4
 800357c:	1de8      	adds	r0, r5, #7
 800357e:	f7ff f9a7 	bl	80028d0 <getFloat>
					            TMP117.temp.offset = tmp;
 8003582:	4b80      	ldr	r3, [pc, #512]	; (8003784 <CLI_proc+0xc20>)
					            config.TMP117_t_offset = tmp;
 8003584:	497d      	ldr	r1, [pc, #500]	; (800377c <CLI_proc+0xc18>)
 8003586:	9801      	ldr	r0, [sp, #4]
					            TMP117.temp.offset = tmp;
 8003588:	f8c3 0006 	str.w	r0, [r3, #6]
					            config.TMP117_t_offset = tmp;
 800358c:	f8c1 000b 	str.w	r0, [r1, #11]
					            printf("TMP117 temperature offset %.6f\r\n",tmp);
 8003590:	f7fc ffea 	bl	8000568 <__aeabi_f2d>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4884      	ldr	r0, [pc, #528]	; (80037ac <CLI_proc+0xc48>)
 800359a:	f00c fcc3 	bl	800ff24 <iprintf>
								Save_config();
 800359e:	f7fd ff0d 	bl	80013bc <Save_config>
							if((strstr(clibuf+23, "en")))
 80035a2:	4983      	ldr	r1, [pc, #524]	; (80037b0 <CLI_proc+0xc4c>)
 80035a4:	487f      	ldr	r0, [pc, #508]	; (80037a4 <CLI_proc+0xc40>)
 80035a6:	f00c fee7 	bl	8010378 <strstr>
 80035aa:	b170      	cbz	r0, 80035ca <CLI_proc+0xa66>
								TMP117.temp.use_meas = 1;
 80035ac:	4975      	ldr	r1, [pc, #468]	; (8003784 <CLI_proc+0xc20>)
								config.TMP117_t_use = 1;
 80035ae:	4c73      	ldr	r4, [pc, #460]	; (800377c <CLI_proc+0xc18>)
								TMP117.temp.use_meas = 1;
 80035b0:	784b      	ldrb	r3, [r1, #1]
								config.TMP117_t_use = 1;
 80035b2:	7aa2      	ldrb	r2, [r4, #10]
								printf("TMP117 temperature measure enabled\r\n");
 80035b4:	487f      	ldr	r0, [pc, #508]	; (80037b4 <CLI_proc+0xc50>)
								config.TMP117_t_use = 1;
 80035b6:	f042 0220 	orr.w	r2, r2, #32
								TMP117.temp.use_meas = 1;
 80035ba:	f043 0301 	orr.w	r3, r3, #1
								config.TMP117_t_use = 1;
 80035be:	72a2      	strb	r2, [r4, #10]
								TMP117.temp.use_meas = 1;
 80035c0:	704b      	strb	r3, [r1, #1]
								printf("TMP117 temperature measure enabled\r\n");
 80035c2:	f00c fd15 	bl	800fff0 <puts>
								Save_config();
 80035c6:	f7fd fef9 	bl	80013bc <Save_config>
							if((strstr(clibuf+23, "dis")))
 80035ca:	497b      	ldr	r1, [pc, #492]	; (80037b8 <CLI_proc+0xc54>)
 80035cc:	4875      	ldr	r0, [pc, #468]	; (80037a4 <CLI_proc+0xc40>)
 80035ce:	f00c fed3 	bl	8010378 <strstr>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	f43f aad5 	beq.w	8002b82 <CLI_proc+0x1e>
								config.TMP117_t_use = 0;
 80035d8:	4968      	ldr	r1, [pc, #416]	; (800377c <CLI_proc+0xc18>)
								TMP117.temp.use_meas = 0;
 80035da:	4b6a      	ldr	r3, [pc, #424]	; (8003784 <CLI_proc+0xc20>)
								config.TMP117_t_use = 0;
 80035dc:	7a8c      	ldrb	r4, [r1, #10]
								TMP117.temp.use_meas = 0;
 80035de:	785a      	ldrb	r2, [r3, #1]
								printf("TMP117 temperature measure disable\r\n");
 80035e0:	4876      	ldr	r0, [pc, #472]	; (80037bc <CLI_proc+0xc58>)
								config.TMP117_t_use = 0;
 80035e2:	f36f 1445 	bfc	r4, #5, #1
								TMP117.temp.use_meas = 0;
 80035e6:	f36f 0200 	bfc	r2, #0, #1
								config.TMP117_t_use = 0;
 80035ea:	728c      	strb	r4, [r1, #10]
								TMP117.temp.use_meas = 0;
 80035ec:	705a      	strb	r2, [r3, #1]
								printf("TMP117 temperature measure disable\r\n");
 80035ee:	e578      	b.n	80030e2 <CLI_proc+0x57e>
					if((p = find("enable")))
 80035f0:	4861      	ldr	r0, [pc, #388]	; (8003778 <CLI_proc+0xc14>)
 80035f2:	f7ff f917 	bl	8002824 <find>
 80035f6:	b170      	cbz	r0, 8003616 <CLI_proc+0xab2>
						config.SHT3_use = 1;
 80035f8:	4960      	ldr	r1, [pc, #384]	; (800377c <CLI_proc+0xc18>)
						SHT3.sensor_use = 1;
 80035fa:	4a71      	ldr	r2, [pc, #452]	; (80037c0 <CLI_proc+0xc5c>)
						config.SHT3_use = 1;
 80035fc:	7bcb      	ldrb	r3, [r1, #15]
						printf("SHTC3 sensor enabled\r\n");
 80035fe:	4871      	ldr	r0, [pc, #452]	; (80037c4 <CLI_proc+0xc60>)
						config.SHT3_use = 1;
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	73cb      	strb	r3, [r1, #15]
						SHT3.sensor_use = 1;
 8003606:	7813      	ldrb	r3, [r2, #0]
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	7013      	strb	r3, [r2, #0]
						printf("SHTC3 sensor enabled\r\n");
 800360e:	f00c fcef 	bl	800fff0 <puts>
						Save_config();
 8003612:	f7fd fed3 	bl	80013bc <Save_config>
					if((p = find("disable")))
 8003616:	485c      	ldr	r0, [pc, #368]	; (8003788 <CLI_proc+0xc24>)
 8003618:	f7ff f904 	bl	8002824 <find>
 800361c:	b170      	cbz	r0, 800363c <CLI_proc+0xad8>
						config.SHT3_use = 0;
 800361e:	4a57      	ldr	r2, [pc, #348]	; (800377c <CLI_proc+0xc18>)
						SHT3.sensor_use = 0;
 8003620:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <CLI_proc+0xc5c>)
						config.SHT3_use = 0;
 8003622:	7bd1      	ldrb	r1, [r2, #15]
						printf("SHTC3 sensor disabled\r\n");
 8003624:	4868      	ldr	r0, [pc, #416]	; (80037c8 <CLI_proc+0xc64>)
						config.SHT3_use = 0;
 8003626:	f36f 0100 	bfc	r1, #0, #1
 800362a:	73d1      	strb	r1, [r2, #15]
						SHT3.sensor_use = 0;
 800362c:	781a      	ldrb	r2, [r3, #0]
 800362e:	f36f 0241 	bfc	r2, #1, #1
 8003632:	701a      	strb	r2, [r3, #0]
						printf("SHTC3 sensor disabled\r\n");
 8003634:	f00c fcdc 	bl	800fff0 <puts>
						Save_config();
 8003638:	f7fd fec0 	bl	80013bc <Save_config>
					if((p = find("conf ")))
 800363c:	4854      	ldr	r0, [pc, #336]	; (8003790 <CLI_proc+0xc2c>)
 800363e:	f7ff f8f1 	bl	8002824 <find>
 8003642:	b1e0      	cbz	r0, 800367e <CLI_proc+0xb1a>
						int32_t tmp = -1;
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
			            getval(clibuf+15, &tmp, 0, 1);
 8003648:	2301      	movs	r3, #1
 800364a:	2200      	movs	r2, #0
 800364c:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 800364e:	9001      	str	r0, [sp, #4]
			            getval(clibuf+15, &tmp, 0, 1);
 8003650:	485e      	ldr	r0, [pc, #376]	; (80037cc <CLI_proc+0xc68>)
			            config.SHT3_conf = tmp;
 8003652:	4d4a      	ldr	r5, [pc, #296]	; (800377c <CLI_proc+0xc18>)
			            getval(clibuf+15, &tmp, 0, 1);
 8003654:	f7ff f910 	bl	8002878 <getval>
			            SHT3.sensor_conf = tmp;
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <CLI_proc+0xc5c>)
			            config.SHT3_conf = tmp;
 800365a:	9901      	ldr	r1, [sp, #4]
			            SHT3.sensor_conf = tmp;
 800365c:	781a      	ldrb	r2, [r3, #0]
			            config.SHT3_conf = tmp;
 800365e:	7bef      	ldrb	r7, [r5, #15]
 8003660:	f001 000f 	and.w	r0, r1, #15
			            SHT3.sensor_conf = tmp;
 8003664:	f360 0285 	bfi	r2, r0, #2, #4
 8003668:	701a      	strb	r2, [r3, #0]
			            sht3_mode=tmp;
 800366a:	4b59      	ldr	r3, [pc, #356]	; (80037d0 <CLI_proc+0xc6c>)
			            config.SHT3_conf = tmp;
 800366c:	f360 0744 	bfi	r7, r0, #1, #4
			            printf("SHT3 temperature config %li\r\n",tmp);
 8003670:	4858      	ldr	r0, [pc, #352]	; (80037d4 <CLI_proc+0xc70>)
			            sht3_mode=tmp;
 8003672:	7019      	strb	r1, [r3, #0]
			            config.SHT3_conf = tmp;
 8003674:	73ef      	strb	r7, [r5, #15]
			            printf("SHT3 temperature config %li\r\n",tmp);
 8003676:	f00c fc55 	bl	800ff24 <iprintf>
						Save_config();
 800367a:	f7fd fe9f 	bl	80013bc <Save_config>
					if((p = find("temperature ")))
 800367e:	4848      	ldr	r0, [pc, #288]	; (80037a0 <CLI_proc+0xc3c>)
 8003680:	f7ff f8d0 	bl	8002824 <find>
 8003684:	4605      	mov	r5, r0
 8003686:	b118      	cbz	r0, 8003690 <CLI_proc+0xb2c>
						if(p == clibuf+22)
 8003688:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <CLI_proc+0xc74>)
 800368a:	4298      	cmp	r0, r3
 800368c:	f000 80d0 	beq.w	8003830 <CLI_proc+0xccc>
					if((p = find("hum ")))
 8003690:	4852      	ldr	r0, [pc, #328]	; (80037dc <CLI_proc+0xc78>)
 8003692:	f7ff f8c7 	bl	8002824 <find>
 8003696:	2800      	cmp	r0, #0
 8003698:	f43f ac72 	beq.w	8002f80 <CLI_proc+0x41c>
						if(p == clibuf+14)
 800369c:	42b0      	cmp	r0, r6
 800369e:	f47f ac6f 	bne.w	8002f80 <CLI_proc+0x41c>
							if((strstr(clibuf+14, "offset ")))
 80036a2:	4941      	ldr	r1, [pc, #260]	; (80037a8 <CLI_proc+0xc44>)
 80036a4:	f00c fe68 	bl	8010378 <strstr>
 80036a8:	b1b0      	cbz	r0, 80036d8 <CLI_proc+0xb74>
						        getFloat(clibuf+21, &tmp, MIN_OFFSET, MAX_OFFSET);
 80036aa:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80036ae:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80036b2:	a901      	add	r1, sp, #4
 80036b4:	484a      	ldr	r0, [pc, #296]	; (80037e0 <CLI_proc+0xc7c>)
 80036b6:	f7ff f90b 	bl	80028d0 <getFloat>
						        SHT3.hum.offset = tmp;
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <CLI_proc+0xc5c>)
						        config.SHT3_h_offset = tmp;
 80036bc:	492f      	ldr	r1, [pc, #188]	; (800377c <CLI_proc+0xc18>)
 80036be:	9801      	ldr	r0, [sp, #4]
						        SHT3.hum.offset = tmp;
 80036c0:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.SHT3_h_offset = tmp;
 80036c4:	6148      	str	r0, [r1, #20]
						        printf("SHTC3 humidity offset %.6f\r\n",tmp);
 80036c6:	f7fc ff4f 	bl	8000568 <__aeabi_f2d>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4845      	ldr	r0, [pc, #276]	; (80037e4 <CLI_proc+0xc80>)
 80036d0:	f00c fc28 	bl	800ff24 <iprintf>
						        Save_config();
 80036d4:	f7fd fe72 	bl	80013bc <Save_config>
							if((strstr(clibuf+14, "en")))
 80036d8:	4935      	ldr	r1, [pc, #212]	; (80037b0 <CLI_proc+0xc4c>)
 80036da:	4843      	ldr	r0, [pc, #268]	; (80037e8 <CLI_proc+0xc84>)
 80036dc:	f00c fe4c 	bl	8010378 <strstr>
 80036e0:	b170      	cbz	r0, 8003700 <CLI_proc+0xb9c>
								SHT3.hum.use_meas = 1;
 80036e2:	4937      	ldr	r1, [pc, #220]	; (80037c0 <CLI_proc+0xc5c>)
								config.SHT3_h_use = 1;
 80036e4:	4c25      	ldr	r4, [pc, #148]	; (800377c <CLI_proc+0xc18>)
								SHT3.hum.use_meas = 1;
 80036e6:	7a8b      	ldrb	r3, [r1, #10]
								config.SHT3_h_use = 1;
 80036e8:	7be2      	ldrb	r2, [r4, #15]
								printf("SHTC3 humidity measure enabled\r\n");
 80036ea:	4840      	ldr	r0, [pc, #256]	; (80037ec <CLI_proc+0xc88>)
								config.SHT3_h_use = 1;
 80036ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
								SHT3.hum.use_meas = 1;
 80036f0:	f043 0301 	orr.w	r3, r3, #1
								config.SHT3_h_use = 1;
 80036f4:	73e2      	strb	r2, [r4, #15]
								SHT3.hum.use_meas = 1;
 80036f6:	728b      	strb	r3, [r1, #10]
								printf("SHTC3 humidity measure enabled\r\n");
 80036f8:	f00c fc7a 	bl	800fff0 <puts>
								Save_config();
 80036fc:	f7fd fe5e 	bl	80013bc <Save_config>
							if((strstr(clibuf+14, "dis")))
 8003700:	492d      	ldr	r1, [pc, #180]	; (80037b8 <CLI_proc+0xc54>)
 8003702:	4839      	ldr	r0, [pc, #228]	; (80037e8 <CLI_proc+0xc84>)
 8003704:	f00c fe38 	bl	8010378 <strstr>
 8003708:	2800      	cmp	r0, #0
 800370a:	f43f aa3a 	beq.w	8002b82 <CLI_proc+0x1e>
								config.SHT3_h_use = 0;
 800370e:	491b      	ldr	r1, [pc, #108]	; (800377c <CLI_proc+0xc18>)
								SHT3.hum.use_meas = 0;
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <CLI_proc+0xc5c>)
								config.SHT3_h_use = 0;
 8003712:	7bcc      	ldrb	r4, [r1, #15]
								SHT3.hum.use_meas = 0;
 8003714:	7a9a      	ldrb	r2, [r3, #10]
								printf("SHTC3 humidity measure disable\r\n");
 8003716:	4836      	ldr	r0, [pc, #216]	; (80037f0 <CLI_proc+0xc8c>)
								config.SHT3_h_use = 0;
 8003718:	f36f 1486 	bfc	r4, #6, #1
								SHT3.hum.use_meas = 0;
 800371c:	f36f 0200 	bfc	r2, #0, #1
								config.SHT3_h_use = 0;
 8003720:	73cc      	strb	r4, [r1, #15]
								SHT3.hum.use_meas = 0;
 8003722:	e4dd      	b.n	80030e0 <CLI_proc+0x57c>
		            else {disp_type = tmp; printf("Silent mode\r\n");}
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <CLI_proc+0xc90>)
 8003726:	4834      	ldr	r0, [pc, #208]	; (80037f8 <CLI_proc+0xc94>)
 8003728:	701c      	strb	r4, [r3, #0]
}
 800372a:	b002      	add	sp, #8
 800372c:	ecbd 8b02 	vpop	{d8}
 8003730:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		            else {disp_type = tmp; printf("Silent mode\r\n");}
 8003734:	f00c bc5c 	b.w	800fff0 <puts>
						int32_t tmp = -1;
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+15, &tmp, 1, 500);
 800373c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003740:	2201      	movs	r2, #1
 8003742:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 8003744:	9001      	str	r0, [sp, #4]
						getval(clibuf+15, &tmp, 1, 500);
 8003746:	f105 000a 	add.w	r0, r5, #10
 800374a:	f7ff f895 	bl	8002878 <getval>
						meas_count = tmp;
 800374e:	9901      	ldr	r1, [sp, #4]
 8003750:	482a      	ldr	r0, [pc, #168]	; (80037fc <CLI_proc+0xc98>)
						meas_cont_mode = 0;
 8003752:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <CLI_proc+0xc9c>)
						disp_type = 2;
 8003754:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <CLI_proc+0xc90>)
						meas_count = tmp;
 8003756:	8001      	strh	r1, [r0, #0]
						meas_cont_mode = 0;
 8003758:	7016      	strb	r6, [r2, #0]
						printf("Start %i measures, CSV output\r\n", meas_count);
 800375a:	482a      	ldr	r0, [pc, #168]	; (8003804 <CLI_proc+0xca0>)
						disp_type = 2;
 800375c:	2202      	movs	r2, #2
						printf("Start %i measures, CSV output\r\n", meas_count);
 800375e:	b289      	uxth	r1, r1
						disp_type = 2;
 8003760:	701a      	strb	r2, [r3, #0]
						printf("Start %i measures, CSV output\r\n", meas_count);
 8003762:	f00c fbdf 	bl	800ff24 <iprintf>
						csvcnt = 0;
 8003766:	4b28      	ldr	r3, [pc, #160]	; (8003808 <CLI_proc+0xca4>)
 8003768:	801e      	strh	r6, [r3, #0]
						printCSVheader();
 800376a:	f7ff baf7 	b.w	8002d5c <CLI_proc+0x1f8>
		            	if(tmp==1) printf("Display type TXT\r\n"); else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 800376e:	4827      	ldr	r0, [pc, #156]	; (800380c <CLI_proc+0xca8>)
 8003770:	f00c fc3e 	bl	800fff0 <puts>
 8003774:	e584      	b.n	8003280 <CLI_proc+0x71c>
 8003776:	bf00      	nop
 8003778:	08014134 	.word	0x08014134
 800377c:	2000137c 	.word	0x2000137c
 8003780:	0801413c 	.word	0x0801413c
 8003784:	20001334 	.word	0x20001334
 8003788:	08014154 	.word	0x08014154
 800378c:	0801415c 	.word	0x0801415c
 8003790:	08014174 	.word	0x08014174
 8003794:	2000023c 	.word	0x2000023c
 8003798:	20001406 	.word	0x20001406
 800379c:	0801417c 	.word	0x0801417c
 80037a0:	0801419c 	.word	0x0801419c
 80037a4:	20000243 	.word	0x20000243
 80037a8:	080141ac 	.word	0x080141ac
 80037ac:	080141b4 	.word	0x080141b4
 80037b0:	080141d8 	.word	0x080141d8
 80037b4:	080141dc 	.word	0x080141dc
 80037b8:	08014200 	.word	0x08014200
 80037bc:	08014204 	.word	0x08014204
 80037c0:	2000131c 	.word	0x2000131c
 80037c4:	08014230 	.word	0x08014230
 80037c8:	08014248 	.word	0x08014248
 80037cc:	2000023b 	.word	0x2000023b
 80037d0:	200013fd 	.word	0x200013fd
 80037d4:	08014260 	.word	0x08014260
 80037d8:	20000242 	.word	0x20000242
 80037dc:	080142e8 	.word	0x080142e8
 80037e0:	20000241 	.word	0x20000241
 80037e4:	080142f0 	.word	0x080142f0
 80037e8:	2000023a 	.word	0x2000023a
 80037ec:	08014310 	.word	0x08014310
 80037f0:	08014330 	.word	0x08014330
 80037f4:	200013b9 	.word	0x200013b9
 80037f8:	0801411c 	.word	0x0801411c
 80037fc:	2000000e 	.word	0x2000000e
 8003800:	2000000c 	.word	0x2000000c
 8003804:	080147c0 	.word	0x080147c0
 8003808:	20000270 	.word	0x20000270
 800380c:	080140f4 	.word	0x080140f4
								meas_cont_mode = 1;
 8003810:	4972      	ldr	r1, [pc, #456]	; (80039dc <CLI_proc+0xe78>)
								disp_type = 1;
 8003812:	4a73      	ldr	r2, [pc, #460]	; (80039e0 <CLI_proc+0xe7c>)
								printf("Start continuous measurement, TXT format\r\n");
 8003814:	4873      	ldr	r0, [pc, #460]	; (80039e4 <CLI_proc+0xe80>)
								meas_cont_mode = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	700b      	strb	r3, [r1, #0]
								disp_type = 1;
 800381a:	7013      	strb	r3, [r2, #0]
								printf("Start continuous measurement, TXT format\r\n");
 800381c:	f00c fbe8 	bl	800fff0 <puts>
								ReinitTimer(tim_interval);
 8003820:	f7ff ba9e 	b.w	8002d60 <CLI_proc+0x1fc>
		            	if(tmp==1) printf("Display type TXT\r\n"); else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8003824:	4870      	ldr	r0, [pc, #448]	; (80039e8 <CLI_proc+0xe84>)
 8003826:	f00c fb7d 	bl	800ff24 <iprintf>
 800382a:	f003 fbc5 	bl	8006fb8 <printCSVheader>
 800382e:	e527      	b.n	8003280 <CLI_proc+0x71c>
							if((strstr(clibuf+22, "offset ")))
 8003830:	496e      	ldr	r1, [pc, #440]	; (80039ec <CLI_proc+0xe88>)
 8003832:	f00c fda1 	bl	8010378 <strstr>
 8003836:	b1b0      	cbz	r0, 8003866 <CLI_proc+0xd02>
					            getFloat(clibuf+29, &tmp, MIN_OFFSET, MAX_OFFSET);
 8003838:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 800383c:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8003840:	a901      	add	r1, sp, #4
 8003842:	1de8      	adds	r0, r5, #7
 8003844:	f7ff f844 	bl	80028d0 <getFloat>
					            config.SHT3_t_offset = tmp;
 8003848:	4b69      	ldr	r3, [pc, #420]	; (80039f0 <CLI_proc+0xe8c>)
 800384a:	9801      	ldr	r0, [sp, #4]
 800384c:	6118      	str	r0, [r3, #16]
					            SHT3.temp.offset = tmp;
 800384e:	4b69      	ldr	r3, [pc, #420]	; (80039f4 <CLI_proc+0xe90>)
 8003850:	f8c3 0006 	str.w	r0, [r3, #6]
					            printf("SHTC3 temperature offset %.6f\r\n",tmp);
 8003854:	f7fc fe88 	bl	8000568 <__aeabi_f2d>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4866      	ldr	r0, [pc, #408]	; (80039f8 <CLI_proc+0xe94>)
 800385e:	f00c fb61 	bl	800ff24 <iprintf>
								Save_config();
 8003862:	f7fd fdab 	bl	80013bc <Save_config>
							if((strstr(clibuf+22, "en")))
 8003866:	4965      	ldr	r1, [pc, #404]	; (80039fc <CLI_proc+0xe98>)
 8003868:	4865      	ldr	r0, [pc, #404]	; (8003a00 <CLI_proc+0xe9c>)
 800386a:	f00c fd85 	bl	8010378 <strstr>
 800386e:	b170      	cbz	r0, 800388e <CLI_proc+0xd2a>
								config.SHT3_t_use = 1;
 8003870:	495f      	ldr	r1, [pc, #380]	; (80039f0 <CLI_proc+0xe8c>)
								SHT3.temp.use_meas = 1;
 8003872:	4a60      	ldr	r2, [pc, #384]	; (80039f4 <CLI_proc+0xe90>)
								config.SHT3_t_use = 1;
 8003874:	7bcb      	ldrb	r3, [r1, #15]
								printf("SHTC3 temperature measure enabled\r\n");
 8003876:	4863      	ldr	r0, [pc, #396]	; (8003a04 <CLI_proc+0xea0>)
								config.SHT3_t_use = 1;
 8003878:	f043 0320 	orr.w	r3, r3, #32
 800387c:	73cb      	strb	r3, [r1, #15]
								SHT3.temp.use_meas = 1;
 800387e:	7853      	ldrb	r3, [r2, #1]
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	7053      	strb	r3, [r2, #1]
								printf("SHTC3 temperature measure enabled\r\n");
 8003886:	f00c fbb3 	bl	800fff0 <puts>
								Save_config();
 800388a:	f7fd fd97 	bl	80013bc <Save_config>
							if((strstr(clibuf+22, "dis")))
 800388e:	495e      	ldr	r1, [pc, #376]	; (8003a08 <CLI_proc+0xea4>)
 8003890:	485b      	ldr	r0, [pc, #364]	; (8003a00 <CLI_proc+0xe9c>)
 8003892:	f00c fd71 	bl	8010378 <strstr>
 8003896:	2800      	cmp	r0, #0
 8003898:	f43f aefa 	beq.w	8003690 <CLI_proc+0xb2c>
								config.SHT3_t_use = 0;
 800389c:	4a54      	ldr	r2, [pc, #336]	; (80039f0 <CLI_proc+0xe8c>)
								SHT3.temp.use_meas = 0;
 800389e:	4b55      	ldr	r3, [pc, #340]	; (80039f4 <CLI_proc+0xe90>)
								config.SHT3_t_use = 0;
 80038a0:	7bd1      	ldrb	r1, [r2, #15]
								printf("SHTC3 temperature measure disable\r\n");
 80038a2:	485a      	ldr	r0, [pc, #360]	; (8003a0c <CLI_proc+0xea8>)
								config.SHT3_t_use = 0;
 80038a4:	f36f 1145 	bfc	r1, #5, #1
 80038a8:	73d1      	strb	r1, [r2, #15]
								SHT3.temp.use_meas = 0;
 80038aa:	785a      	ldrb	r2, [r3, #1]
 80038ac:	f36f 0200 	bfc	r2, #0, #1
 80038b0:	705a      	strb	r2, [r3, #1]
								printf("SHTC3 temperature measure disable\r\n");
 80038b2:	f00c fb9d 	bl	800fff0 <puts>
								Save_config();
 80038b6:	f7fd fd81 	bl	80013bc <Save_config>
 80038ba:	e6e9      	b.n	8003690 <CLI_proc+0xb2c>
							if((strstr(clibuf+23, "offset ")))
 80038bc:	494b      	ldr	r1, [pc, #300]	; (80039ec <CLI_proc+0xe88>)
 80038be:	f00c fd5b 	bl	8010378 <strstr>
 80038c2:	b1b8      	cbz	r0, 80038f4 <CLI_proc+0xd90>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 80038c4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80038c8:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 80038cc:	a901      	add	r1, sp, #4
 80038ce:	1de0      	adds	r0, r4, #7
 80038d0:	f7fe fffe 	bl	80028d0 <getFloat>
					            MS8607.temp.offset = tmp;
 80038d4:	4b4e      	ldr	r3, [pc, #312]	; (8003a10 <CLI_proc+0xeac>)
					            config.MS8607_t_offset = tmp;
 80038d6:	4946      	ldr	r1, [pc, #280]	; (80039f0 <CLI_proc+0xe8c>)
 80038d8:	9801      	ldr	r0, [sp, #4]
					            MS8607.temp.offset = tmp;
 80038da:	f8c3 0006 	str.w	r0, [r3, #6]
					            config.MS8607_t_offset = tmp;
 80038de:	f8c1 0019 	str.w	r0, [r1, #25]
					            printf("MS8607 temperature offset %.6f\r\n",tmp);
 80038e2:	f7fc fe41 	bl	8000568 <__aeabi_f2d>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	484a      	ldr	r0, [pc, #296]	; (8003a14 <CLI_proc+0xeb0>)
 80038ec:	f00c fb1a 	bl	800ff24 <iprintf>
								Save_config();
 80038f0:	f7fd fd64 	bl	80013bc <Save_config>
							if((strstr(clibuf+23, "en")))
 80038f4:	4941      	ldr	r1, [pc, #260]	; (80039fc <CLI_proc+0xe98>)
 80038f6:	4848      	ldr	r0, [pc, #288]	; (8003a18 <CLI_proc+0xeb4>)
 80038f8:	f00c fd3e 	bl	8010378 <strstr>
 80038fc:	b170      	cbz	r0, 800391c <CLI_proc+0xdb8>
								MS8607.temp.use_meas = 1;
 80038fe:	4944      	ldr	r1, [pc, #272]	; (8003a10 <CLI_proc+0xeac>)
								config.MS8607_t_use = 1;
 8003900:	4c3b      	ldr	r4, [pc, #236]	; (80039f0 <CLI_proc+0xe8c>)
								MS8607.temp.use_meas = 1;
 8003902:	784b      	ldrb	r3, [r1, #1]
								config.MS8607_t_use = 1;
 8003904:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 temperature measure enabled\r\n");
 8003906:	4845      	ldr	r0, [pc, #276]	; (8003a1c <CLI_proc+0xeb8>)
								config.MS8607_t_use = 1;
 8003908:	f042 0220 	orr.w	r2, r2, #32
								MS8607.temp.use_meas = 1;
 800390c:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_t_use = 1;
 8003910:	7622      	strb	r2, [r4, #24]
								MS8607.temp.use_meas = 1;
 8003912:	704b      	strb	r3, [r1, #1]
								printf("MS8607 temperature measure enabled\r\n");
 8003914:	f00c fb6c 	bl	800fff0 <puts>
								Save_config();
 8003918:	f7fd fd50 	bl	80013bc <Save_config>
							if((strstr(clibuf+23, "dis")))
 800391c:	493a      	ldr	r1, [pc, #232]	; (8003a08 <CLI_proc+0xea4>)
 800391e:	483e      	ldr	r0, [pc, #248]	; (8003a18 <CLI_proc+0xeb4>)
 8003920:	f00c fd2a 	bl	8010378 <strstr>
 8003924:	2800      	cmp	r0, #0
 8003926:	f43f ab86 	beq.w	8003036 <CLI_proc+0x4d2>
								config.MS8607_t_use = 0;
 800392a:	4931      	ldr	r1, [pc, #196]	; (80039f0 <CLI_proc+0xe8c>)
								MS8607.temp.use_meas = 0;
 800392c:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <CLI_proc+0xeac>)
								config.MS8607_t_use = 0;
 800392e:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.temp.use_meas = 0;
 8003930:	785a      	ldrb	r2, [r3, #1]
								printf("MS8607 temperature measure disable\r\n");
 8003932:	483b      	ldr	r0, [pc, #236]	; (8003a20 <CLI_proc+0xebc>)
								MS8607.temp.use_meas = 0;
 8003934:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_t_use = 0;
 8003938:	f36f 1445 	bfc	r4, #5, #1
 800393c:	760c      	strb	r4, [r1, #24]
								MS8607.temp.use_meas = 0;
 800393e:	705a      	strb	r2, [r3, #1]
								printf("MS8607 temperature measure disable\r\n");
 8003940:	f00c fb56 	bl	800fff0 <puts>
								Save_config();
 8003944:	f7fd fd3a 	bl	80013bc <Save_config>
 8003948:	f7ff bb75 	b.w	8003036 <CLI_proc+0x4d2>
							if((strstr(clibuf+17, "offset ")))
 800394c:	4927      	ldr	r1, [pc, #156]	; (80039ec <CLI_proc+0xe88>)
 800394e:	f00c fd13 	bl	8010378 <strstr>
 8003952:	b1b0      	cbz	r0, 8003982 <CLI_proc+0xe1e>
					            getFloat(clibuf+24, &tmp, -500, 500);
 8003954:	eddf 0a33 	vldr	s1, [pc, #204]	; 8003a24 <CLI_proc+0xec0>
 8003958:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8003a28 <CLI_proc+0xec4>
 800395c:	a901      	add	r1, sp, #4
 800395e:	1de0      	adds	r0, r4, #7
 8003960:	f7fe ffb6 	bl	80028d0 <getFloat>
					            MS8607.press.offset = tmp;
 8003964:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <CLI_proc+0xeac>)
					            config.MS8607_p_offset = tmp;
 8003966:	4922      	ldr	r1, [pc, #136]	; (80039f0 <CLI_proc+0xe8c>)
 8003968:	9801      	ldr	r0, [sp, #4]
					            MS8607.press.offset = tmp;
 800396a:	6198      	str	r0, [r3, #24]
					            config.MS8607_p_offset = tmp;
 800396c:	f8c1 0021 	str.w	r0, [r1, #33]	; 0x21
					            printf("MS8607 pressure offset %.6f\r\n",tmp);
 8003970:	f7fc fdfa 	bl	8000568 <__aeabi_f2d>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	482c      	ldr	r0, [pc, #176]	; (8003a2c <CLI_proc+0xec8>)
 800397a:	f00c fad3 	bl	800ff24 <iprintf>
								Save_config();
 800397e:	f7fd fd1d 	bl	80013bc <Save_config>
							if((strstr(clibuf+17, "en")))
 8003982:	491e      	ldr	r1, [pc, #120]	; (80039fc <CLI_proc+0xe98>)
 8003984:	482a      	ldr	r0, [pc, #168]	; (8003a30 <CLI_proc+0xecc>)
 8003986:	f00c fcf7 	bl	8010378 <strstr>
 800398a:	b170      	cbz	r0, 80039aa <CLI_proc+0xe46>
								MS8607.press.use_meas = 1;
 800398c:	4920      	ldr	r1, [pc, #128]	; (8003a10 <CLI_proc+0xeac>)
								config.MS8607_p_use = 1;
 800398e:	4c18      	ldr	r4, [pc, #96]	; (80039f0 <CLI_proc+0xe8c>)
								MS8607.press.use_meas = 1;
 8003990:	7ccb      	ldrb	r3, [r1, #19]
								config.MS8607_p_use = 1;
 8003992:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 pressure measure enabled\r\n");
 8003994:	4827      	ldr	r0, [pc, #156]	; (8003a34 <CLI_proc+0xed0>)
								config.MS8607_p_use = 1;
 8003996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
								MS8607.press.use_meas = 1;
 800399a:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_p_use = 1;
 800399e:	7622      	strb	r2, [r4, #24]
								MS8607.press.use_meas = 1;
 80039a0:	74cb      	strb	r3, [r1, #19]
								printf("MS8607 pressure measure enabled\r\n");
 80039a2:	f00c fb25 	bl	800fff0 <puts>
								Save_config();
 80039a6:	f7fd fd09 	bl	80013bc <Save_config>
							if((strstr(clibuf+17, "dis")))
 80039aa:	4917      	ldr	r1, [pc, #92]	; (8003a08 <CLI_proc+0xea4>)
 80039ac:	4820      	ldr	r0, [pc, #128]	; (8003a30 <CLI_proc+0xecc>)
 80039ae:	f00c fce3 	bl	8010378 <strstr>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	f43f ab48 	beq.w	8003048 <CLI_proc+0x4e4>
								config.MS8607_p_use = 0;
 80039b8:	490d      	ldr	r1, [pc, #52]	; (80039f0 <CLI_proc+0xe8c>)
								MS8607.press.use_meas = 0;
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <CLI_proc+0xeac>)
								config.MS8607_p_use = 0;
 80039bc:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.press.use_meas = 0;
 80039be:	7cda      	ldrb	r2, [r3, #19]
								printf("MS8607 pressure measure disable\r\n");
 80039c0:	481d      	ldr	r0, [pc, #116]	; (8003a38 <CLI_proc+0xed4>)
								MS8607.press.use_meas = 0;
 80039c2:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_p_use = 0;
 80039c6:	f36f 14c7 	bfc	r4, #7, #1
 80039ca:	760c      	strb	r4, [r1, #24]
								MS8607.press.use_meas = 0;
 80039cc:	74da      	strb	r2, [r3, #19]
								printf("MS8607 pressure measure disable\r\n");
 80039ce:	f00c fb0f 	bl	800fff0 <puts>
								Save_config();
 80039d2:	f7fd fcf3 	bl	80013bc <Save_config>
 80039d6:	f7ff bb37 	b.w	8003048 <CLI_proc+0x4e4>
 80039da:	bf00      	nop
 80039dc:	2000000c 	.word	0x2000000c
 80039e0:	200013b9 	.word	0x200013b9
 80039e4:	080147ec 	.word	0x080147ec
 80039e8:	08014108 	.word	0x08014108
 80039ec:	080141ac 	.word	0x080141ac
 80039f0:	2000137c 	.word	0x2000137c
 80039f4:	2000131c 	.word	0x2000131c
 80039f8:	08014280 	.word	0x08014280
 80039fc:	080141d8 	.word	0x080141d8
 8003a00:	20000242 	.word	0x20000242
 8003a04:	080142a0 	.word	0x080142a0
 8003a08:	08014200 	.word	0x08014200
 8003a0c:	080142c4 	.word	0x080142c4
 8003a10:	200012f8 	.word	0x200012f8
 8003a14:	0801439c 	.word	0x0801439c
 8003a18:	20000243 	.word	0x20000243
 8003a1c:	080143c0 	.word	0x080143c0
 8003a20:	080143e4 	.word	0x080143e4
 8003a24:	43fa0000 	.word	0x43fa0000
 8003a28:	c3fa0000 	.word	0xc3fa0000
 8003a2c:	08014410 	.word	0x08014410
 8003a30:	2000023d 	.word	0x2000023d
 8003a34:	08014430 	.word	0x08014430
 8003a38:	08014454 	.word	0x08014454
					if((p = find("enable")))
 8003a3c:	48a1      	ldr	r0, [pc, #644]	; (8003cc4 <CLI_proc+0x1160>)
 8003a3e:	f7fe fef1 	bl	8002824 <find>
 8003a42:	b180      	cbz	r0, 8003a66 <CLI_proc+0xf02>
						config.BME280_use = 1;
 8003a44:	48a0      	ldr	r0, [pc, #640]	; (8003cc8 <CLI_proc+0x1164>)
						BME280.sensor_use = 1;
 8003a46:	49a1      	ldr	r1, [pc, #644]	; (8003ccc <CLI_proc+0x1168>)
						config.BME280_use = 1;
 8003a48:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
						BME280.sensor_use = 1;
 8003a4c:	780b      	ldrb	r3, [r1, #0]
						config.BME280_use = 1;
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
						BME280.sensor_use = 1;
 8003a52:	f043 0302 	orr.w	r3, r3, #2
						config.BME280_use = 1;
 8003a56:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
						printf("BME280 sensor enabled\r\n");
 8003a5a:	489d      	ldr	r0, [pc, #628]	; (8003cd0 <CLI_proc+0x116c>)
						BME280.sensor_use = 1;
 8003a5c:	700b      	strb	r3, [r1, #0]
						printf("BME280 sensor enabled\r\n");
 8003a5e:	f00c fac7 	bl	800fff0 <puts>
						Save_config();
 8003a62:	f7fd fcab 	bl	80013bc <Save_config>
					if((p = find("disable")))
 8003a66:	489b      	ldr	r0, [pc, #620]	; (8003cd4 <CLI_proc+0x1170>)
 8003a68:	f7fe fedc 	bl	8002824 <find>
 8003a6c:	b180      	cbz	r0, 8003a90 <CLI_proc+0xf2c>
						config.BME280_use = 0;
 8003a6e:	4996      	ldr	r1, [pc, #600]	; (8003cc8 <CLI_proc+0x1164>)
						BME280.sensor_use = 0;
 8003a70:	4b96      	ldr	r3, [pc, #600]	; (8003ccc <CLI_proc+0x1168>)
						config.BME280_use = 0;
 8003a72:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
						BME280.sensor_use = 0;
 8003a76:	781a      	ldrb	r2, [r3, #0]
						config.BME280_use = 0;
 8003a78:	f36f 0000 	bfc	r0, #0, #1
						BME280.sensor_use = 0;
 8003a7c:	f36f 0241 	bfc	r2, #1, #1
						config.BME280_use = 0;
 8003a80:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
						printf("BME280 sensor disabled\r\n");
 8003a84:	4894      	ldr	r0, [pc, #592]	; (8003cd8 <CLI_proc+0x1174>)
						BME280.sensor_use = 0;
 8003a86:	701a      	strb	r2, [r3, #0]
						printf("BME280 sensor disabled\r\n");
 8003a88:	f00c fab2 	bl	800fff0 <puts>
						Save_config();
 8003a8c:	f7fd fc96 	bl	80013bc <Save_config>
					if((p = find("conf ")))
 8003a90:	4892      	ldr	r0, [pc, #584]	; (8003cdc <CLI_proc+0x1178>)
 8003a92:	f7fe fec7 	bl	8002824 <find>
 8003a96:	b1e0      	cbz	r0, 8003ad2 <CLI_proc+0xf6e>
			            getval(clibuf+16, &tmp, 0, 10);
 8003a98:	230a      	movs	r3, #10
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 8003a9e:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+16, &tmp, 0, 10);
 8003aa2:	488f      	ldr	r0, [pc, #572]	; (8003ce0 <CLI_proc+0x117c>)
						int32_t tmp = -1;
 8003aa4:	9501      	str	r5, [sp, #4]
			            getval(clibuf+16, &tmp, 0, 10);
 8003aa6:	f7fe fee7 	bl	8002878 <getval>
			            config.BME280_conf = tmp;
 8003aaa:	4a87      	ldr	r2, [pc, #540]	; (8003cc8 <CLI_proc+0x1164>)
 8003aac:	9801      	ldr	r0, [sp, #4]
 8003aae:	f892 5025 	ldrb.w	r5, [r2, #37]	; 0x25
			            BME280.sensor_conf = tmp;
 8003ab2:	4b86      	ldr	r3, [pc, #536]	; (8003ccc <CLI_proc+0x1168>)
			            config.BME280_conf = tmp;
 8003ab4:	f000 010f 	and.w	r1, r0, #15
 8003ab8:	f361 0544 	bfi	r5, r1, #1, #4
 8003abc:	f882 5025 	strb.w	r5, [r2, #37]	; 0x25
			            BME280.sensor_conf = tmp;
 8003ac0:	781a      	ldrb	r2, [r3, #0]
			            bme280_conf_change(tmp);
 8003ac2:	b2c0      	uxtb	r0, r0
			            BME280.sensor_conf = tmp;
 8003ac4:	f361 0285 	bfi	r2, r1, #2, #4
 8003ac8:	701a      	strb	r2, [r3, #0]
			            bme280_conf_change(tmp);
 8003aca:	f004 fe2b 	bl	8008724 <bme280_conf_change>
						Save_config();
 8003ace:	f7fd fc75 	bl	80013bc <Save_config>
					if((p = find("temperature ")))
 8003ad2:	4884      	ldr	r0, [pc, #528]	; (8003ce4 <CLI_proc+0x1180>)
 8003ad4:	f7fe fea6 	bl	8002824 <find>
 8003ad8:	4605      	mov	r5, r0
 8003ada:	b118      	cbz	r0, 8003ae4 <CLI_proc+0xf80>
						if(p == clibuf+23)
 8003adc:	4b82      	ldr	r3, [pc, #520]	; (8003ce8 <CLI_proc+0x1184>)
 8003ade:	4298      	cmp	r0, r3
 8003ae0:	f000 812a 	beq.w	8003d38 <CLI_proc+0x11d4>
					if((p = find("press ")))
 8003ae4:	4881      	ldr	r0, [pc, #516]	; (8003cec <CLI_proc+0x1188>)
 8003ae6:	f7fe fe9d 	bl	8002824 <find>
 8003aea:	4605      	mov	r5, r0
 8003aec:	b110      	cbz	r0, 8003af4 <CLI_proc+0xf90>
						if(p == clibuf+17)
 8003aee:	4b80      	ldr	r3, [pc, #512]	; (8003cf0 <CLI_proc+0x118c>)
 8003af0:	4298      	cmp	r0, r3
 8003af2:	d051      	beq.n	8003b98 <CLI_proc+0x1034>
					if((p = find("hum ")))
 8003af4:	487f      	ldr	r0, [pc, #508]	; (8003cf4 <CLI_proc+0x1190>)
 8003af6:	f7fe fe95 	bl	8002824 <find>
 8003afa:	4605      	mov	r5, r0
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f43f abcc 	beq.w	800329a <CLI_proc+0x736>
						if(p == clibuf+15)
 8003b02:	4b7d      	ldr	r3, [pc, #500]	; (8003cf8 <CLI_proc+0x1194>)
 8003b04:	4298      	cmp	r0, r3
 8003b06:	f47f abc8 	bne.w	800329a <CLI_proc+0x736>
							if((strstr(clibuf+15, "offset ")))
 8003b0a:	497c      	ldr	r1, [pc, #496]	; (8003cfc <CLI_proc+0x1198>)
 8003b0c:	f00c fc34 	bl	8010378 <strstr>
 8003b10:	b1b8      	cbz	r0, 8003b42 <CLI_proc+0xfde>
						        getFloat(clibuf+22, &tmp, MIN_OFFSET, MAX_OFFSET);
 8003b12:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003b16:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8003b1a:	a901      	add	r1, sp, #4
 8003b1c:	1de8      	adds	r0, r5, #7
 8003b1e:	f7fe fed7 	bl	80028d0 <getFloat>
						        BME280.hum.offset = tmp;
 8003b22:	4b6a      	ldr	r3, [pc, #424]	; (8003ccc <CLI_proc+0x1168>)
						        config.BME280_h_offset = tmp;
 8003b24:	4968      	ldr	r1, [pc, #416]	; (8003cc8 <CLI_proc+0x1164>)
 8003b26:	9801      	ldr	r0, [sp, #4]
						        BME280.hum.offset = tmp;
 8003b28:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.BME280_h_offset = tmp;
 8003b2c:	f8c1 002a 	str.w	r0, [r1, #42]	; 0x2a
						        printf("BME280 humidity offset %.6f\r\n",tmp);
 8003b30:	f7fc fd1a 	bl	8000568 <__aeabi_f2d>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4871      	ldr	r0, [pc, #452]	; (8003d00 <CLI_proc+0x119c>)
 8003b3a:	f00c f9f3 	bl	800ff24 <iprintf>
						        Save_config();
 8003b3e:	f7fd fc3d 	bl	80013bc <Save_config>
							if((strstr(clibuf+15, "en")))
 8003b42:	4970      	ldr	r1, [pc, #448]	; (8003d04 <CLI_proc+0x11a0>)
 8003b44:	486c      	ldr	r0, [pc, #432]	; (8003cf8 <CLI_proc+0x1194>)
 8003b46:	f00c fc17 	bl	8010378 <strstr>
 8003b4a:	b180      	cbz	r0, 8003b6e <CLI_proc+0x100a>
								BME280.hum.use_meas = 1;
 8003b4c:	495f      	ldr	r1, [pc, #380]	; (8003ccc <CLI_proc+0x1168>)
								config.BME280_h_use = 1;
 8003b4e:	4c5e      	ldr	r4, [pc, #376]	; (8003cc8 <CLI_proc+0x1164>)
								BME280.hum.use_meas = 1;
 8003b50:	7a8b      	ldrb	r3, [r1, #10]
								config.BME280_h_use = 1;
 8003b52:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
								printf("BME280 humidity measure enabled\r\n");
 8003b56:	486c      	ldr	r0, [pc, #432]	; (8003d08 <CLI_proc+0x11a4>)
								config.BME280_h_use = 1;
 8003b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
								BME280.hum.use_meas = 1;
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_h_use = 1;
 8003b60:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
								BME280.hum.use_meas = 1;
 8003b64:	728b      	strb	r3, [r1, #10]
								printf("BME280 humidity measure enabled\r\n");
 8003b66:	f00c fa43 	bl	800fff0 <puts>
								Save_config();
 8003b6a:	f7fd fc27 	bl	80013bc <Save_config>
							if((strstr(clibuf+15, "dis")))
 8003b6e:	4967      	ldr	r1, [pc, #412]	; (8003d0c <CLI_proc+0x11a8>)
 8003b70:	4861      	ldr	r0, [pc, #388]	; (8003cf8 <CLI_proc+0x1194>)
 8003b72:	f00c fc01 	bl	8010378 <strstr>
 8003b76:	2800      	cmp	r0, #0
 8003b78:	f43f a803 	beq.w	8002b82 <CLI_proc+0x1e>
								config.BME280_h_use = 0;
 8003b7c:	4952      	ldr	r1, [pc, #328]	; (8003cc8 <CLI_proc+0x1164>)
								BME280.hum.use_meas = 0;
 8003b7e:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <CLI_proc+0x1168>)
								config.BME280_h_use = 0;
 8003b80:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
								BME280.hum.use_meas = 0;
 8003b84:	7a9a      	ldrb	r2, [r3, #10]
								printf("BME280 humidity measure disable\r\n");
 8003b86:	4862      	ldr	r0, [pc, #392]	; (8003d10 <CLI_proc+0x11ac>)
								config.BME280_h_use = 0;
 8003b88:	f36f 1486 	bfc	r4, #6, #1
								BME280.hum.use_meas = 0;
 8003b8c:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_h_use = 0;
 8003b90:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
								BME280.hum.use_meas = 0;
 8003b94:	f7ff baa4 	b.w	80030e0 <CLI_proc+0x57c>
							if((strstr(clibuf+17, "offset ")))
 8003b98:	4958      	ldr	r1, [pc, #352]	; (8003cfc <CLI_proc+0x1198>)
 8003b9a:	f00c fbed 	bl	8010378 <strstr>
 8003b9e:	b1b0      	cbz	r0, 8003bce <CLI_proc+0x106a>
					            getFloat(clibuf+24, &tmp, -500, 500);
 8003ba0:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8003d14 <CLI_proc+0x11b0>
 8003ba4:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8003d18 <CLI_proc+0x11b4>
 8003ba8:	a901      	add	r1, sp, #4
 8003baa:	1de8      	adds	r0, r5, #7
 8003bac:	f7fe fe90 	bl	80028d0 <getFloat>
					            config.BME280_p_offset = tmp;
 8003bb0:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <CLI_proc+0x1164>)
					            BME280.press.offset = tmp;
 8003bb2:	4946      	ldr	r1, [pc, #280]	; (8003ccc <CLI_proc+0x1168>)
					            config.BME280_p_offset = tmp;
 8003bb4:	9801      	ldr	r0, [sp, #4]
 8003bb6:	f8c3 002e 	str.w	r0, [r3, #46]	; 0x2e
					            BME280.press.offset = tmp;
 8003bba:	6188      	str	r0, [r1, #24]
					            printf("BME280 pressure offset %.6f\r\n",tmp);
 8003bbc:	f7fc fcd4 	bl	8000568 <__aeabi_f2d>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4855      	ldr	r0, [pc, #340]	; (8003d1c <CLI_proc+0x11b8>)
 8003bc6:	f00c f9ad 	bl	800ff24 <iprintf>
								Save_config();
 8003bca:	f7fd fbf7 	bl	80013bc <Save_config>
							if((strstr(clibuf+17, "en")))
 8003bce:	494d      	ldr	r1, [pc, #308]	; (8003d04 <CLI_proc+0x11a0>)
 8003bd0:	4847      	ldr	r0, [pc, #284]	; (8003cf0 <CLI_proc+0x118c>)
 8003bd2:	f00c fbd1 	bl	8010378 <strstr>
 8003bd6:	b180      	cbz	r0, 8003bfa <CLI_proc+0x1096>
								config.BME280_p_use = 1;
 8003bd8:	483b      	ldr	r0, [pc, #236]	; (8003cc8 <CLI_proc+0x1164>)
								BME280.press.use_meas = 1;
 8003bda:	493c      	ldr	r1, [pc, #240]	; (8003ccc <CLI_proc+0x1168>)
								config.BME280_p_use = 1;
 8003bdc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
								BME280.press.use_meas = 1;
 8003be0:	7ccb      	ldrb	r3, [r1, #19]
								config.BME280_p_use = 1;
 8003be2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
								BME280.press.use_meas = 1;
 8003be6:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_p_use = 1;
 8003bea:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
								printf("BME280 pressure measure enabled\r\n");
 8003bee:	484c      	ldr	r0, [pc, #304]	; (8003d20 <CLI_proc+0x11bc>)
								BME280.press.use_meas = 1;
 8003bf0:	74cb      	strb	r3, [r1, #19]
								printf("BME280 pressure measure enabled\r\n");
 8003bf2:	f00c f9fd 	bl	800fff0 <puts>
								Save_config();
 8003bf6:	f7fd fbe1 	bl	80013bc <Save_config>
							if((strstr(clibuf+17, "dis")))
 8003bfa:	4944      	ldr	r1, [pc, #272]	; (8003d0c <CLI_proc+0x11a8>)
 8003bfc:	483c      	ldr	r0, [pc, #240]	; (8003cf0 <CLI_proc+0x118c>)
 8003bfe:	f00c fbbb 	bl	8010378 <strstr>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	f43f af76 	beq.w	8003af4 <CLI_proc+0xf90>
								config.BME280_p_use = 0;
 8003c08:	492f      	ldr	r1, [pc, #188]	; (8003cc8 <CLI_proc+0x1164>)
								BME280.press.use_meas = 0;
 8003c0a:	4b30      	ldr	r3, [pc, #192]	; (8003ccc <CLI_proc+0x1168>)
								config.BME280_p_use = 0;
 8003c0c:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
								BME280.press.use_meas = 0;
 8003c10:	7cda      	ldrb	r2, [r3, #19]
								config.BME280_p_use = 0;
 8003c12:	f36f 10c7 	bfc	r0, #7, #1
								BME280.press.use_meas = 0;
 8003c16:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_p_use = 0;
 8003c1a:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
								printf("BME280 pressure measure disable\r\n");
 8003c1e:	4841      	ldr	r0, [pc, #260]	; (8003d24 <CLI_proc+0x11c0>)
								BME280.press.use_meas = 0;
 8003c20:	74da      	strb	r2, [r3, #19]
								printf("BME280 pressure measure disable\r\n");
 8003c22:	f00c f9e5 	bl	800fff0 <puts>
								Save_config();
 8003c26:	f7fd fbc9 	bl	80013bc <Save_config>
 8003c2a:	e763      	b.n	8003af4 <CLI_proc+0xf90>
							if((strstr(clibuf+23, "offset ")))
 8003c2c:	4933      	ldr	r1, [pc, #204]	; (8003cfc <CLI_proc+0x1198>)
 8003c2e:	f00c fba3 	bl	8010378 <strstr>
 8003c32:	b1b8      	cbz	r0, 8003c64 <CLI_proc+0x1100>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 8003c34:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003c38:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8003c3c:	a901      	add	r1, sp, #4
 8003c3e:	1de8      	adds	r0, r5, #7
 8003c40:	f7fe fe46 	bl	80028d0 <getFloat>
					            config.DPS368_t_offset = tmp;
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <CLI_proc+0x1164>)
					            DPS368.temp.offset = tmp;
 8003c46:	4938      	ldr	r1, [pc, #224]	; (8003d28 <CLI_proc+0x11c4>)
					            config.DPS368_t_offset = tmp;
 8003c48:	9801      	ldr	r0, [sp, #4]
 8003c4a:	f8c3 0033 	str.w	r0, [r3, #51]	; 0x33
					            DPS368.temp.offset = tmp;
 8003c4e:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("DPS368 temperature offset %.6f\r\n",tmp);
 8003c52:	f7fc fc89 	bl	8000568 <__aeabi_f2d>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4834      	ldr	r0, [pc, #208]	; (8003d2c <CLI_proc+0x11c8>)
 8003c5c:	f00c f962 	bl	800ff24 <iprintf>
								Save_config();
 8003c60:	f7fd fbac 	bl	80013bc <Save_config>
							if((strstr(clibuf+23, "en")))
 8003c64:	4927      	ldr	r1, [pc, #156]	; (8003d04 <CLI_proc+0x11a0>)
 8003c66:	4820      	ldr	r0, [pc, #128]	; (8003ce8 <CLI_proc+0x1184>)
 8003c68:	f00c fb86 	bl	8010378 <strstr>
 8003c6c:	b180      	cbz	r0, 8003c90 <CLI_proc+0x112c>
								config.DPS368_t_use = 1;
 8003c6e:	4816      	ldr	r0, [pc, #88]	; (8003cc8 <CLI_proc+0x1164>)
								DPS368.temp.use_meas = 1;
 8003c70:	492d      	ldr	r1, [pc, #180]	; (8003d28 <CLI_proc+0x11c4>)
								config.DPS368_t_use = 1;
 8003c72:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
								DPS368.temp.use_meas = 1;
 8003c76:	784b      	ldrb	r3, [r1, #1]
								config.DPS368_t_use = 1;
 8003c78:	f042 0220 	orr.w	r2, r2, #32
								DPS368.temp.use_meas = 1;
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
								config.DPS368_t_use = 1;
 8003c80:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
								printf("DPS368 temperature measure enabled\r\n");
 8003c84:	482a      	ldr	r0, [pc, #168]	; (8003d30 <CLI_proc+0x11cc>)
								DPS368.temp.use_meas = 1;
 8003c86:	704b      	strb	r3, [r1, #1]
								printf("DPS368 temperature measure enabled\r\n");
 8003c88:	f00c f9b2 	bl	800fff0 <puts>
								Save_config();
 8003c8c:	f7fd fb96 	bl	80013bc <Save_config>
							if((strstr(clibuf+23, "dis")))
 8003c90:	491e      	ldr	r1, [pc, #120]	; (8003d0c <CLI_proc+0x11a8>)
 8003c92:	4815      	ldr	r0, [pc, #84]	; (8003ce8 <CLI_proc+0x1184>)
 8003c94:	f00c fb70 	bl	8010378 <strstr>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	f43f ab69 	beq.w	8003370 <CLI_proc+0x80c>
								config.DPS368_t_use = 0;
 8003c9e:	490a      	ldr	r1, [pc, #40]	; (8003cc8 <CLI_proc+0x1164>)
								DPS368.temp.use_meas = 0;
 8003ca0:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <CLI_proc+0x11c4>)
								config.DPS368_t_use = 0;
 8003ca2:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
								DPS368.temp.use_meas = 0;
 8003ca6:	785a      	ldrb	r2, [r3, #1]
								config.DPS368_t_use = 0;
 8003ca8:	f36f 1045 	bfc	r0, #5, #1
								DPS368.temp.use_meas = 0;
 8003cac:	f36f 0200 	bfc	r2, #0, #1
								config.DPS368_t_use = 0;
 8003cb0:	f881 0032 	strb.w	r0, [r1, #50]	; 0x32
								printf("DPS368 temperature measure disable\r\n");
 8003cb4:	481f      	ldr	r0, [pc, #124]	; (8003d34 <CLI_proc+0x11d0>)
								DPS368.temp.use_meas = 0;
 8003cb6:	705a      	strb	r2, [r3, #1]
								printf("DPS368 temperature measure disable\r\n");
 8003cb8:	f00c f99a 	bl	800fff0 <puts>
								Save_config();
 8003cbc:	f7fd fb7e 	bl	80013bc <Save_config>
 8003cc0:	f7ff bb56 	b.w	8003370 <CLI_proc+0x80c>
 8003cc4:	08014134 	.word	0x08014134
 8003cc8:	2000137c 	.word	0x2000137c
 8003ccc:	200012b8 	.word	0x200012b8
 8003cd0:	080144e8 	.word	0x080144e8
 8003cd4:	08014154 	.word	0x08014154
 8003cd8:	08014500 	.word	0x08014500
 8003cdc:	08014174 	.word	0x08014174
 8003ce0:	2000023c 	.word	0x2000023c
 8003ce4:	0801419c 	.word	0x0801419c
 8003ce8:	20000243 	.word	0x20000243
 8003cec:	08014408 	.word	0x08014408
 8003cf0:	2000023d 	.word	0x2000023d
 8003cf4:	080142e8 	.word	0x080142e8
 8003cf8:	2000023b 	.word	0x2000023b
 8003cfc:	080141ac 	.word	0x080141ac
 8003d00:	080145ec 	.word	0x080145ec
 8003d04:	080141d8 	.word	0x080141d8
 8003d08:	0801460c 	.word	0x0801460c
 8003d0c:	08014200 	.word	0x08014200
 8003d10:	08014630 	.word	0x08014630
 8003d14:	43fa0000 	.word	0x43fa0000
 8003d18:	c3fa0000 	.word	0xc3fa0000
 8003d1c:	08014584 	.word	0x08014584
 8003d20:	080145a4 	.word	0x080145a4
 8003d24:	080145c8 	.word	0x080145c8
 8003d28:	200012dc 	.word	0x200012dc
 8003d2c:	080146ac 	.word	0x080146ac
 8003d30:	080146d0 	.word	0x080146d0
 8003d34:	080146f4 	.word	0x080146f4
							if((strstr(clibuf+23, "offset ")))
 8003d38:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <CLI_proc+0x126c>)
 8003d3a:	f00c fb1d 	bl	8010378 <strstr>
 8003d3e:	b1b8      	cbz	r0, 8003d70 <CLI_proc+0x120c>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 8003d40:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003d44:	eeba 0a04 	vmov.f32	s0, #164	; 0xc1200000 -10.0
 8003d48:	a901      	add	r1, sp, #4
 8003d4a:	1de8      	adds	r0, r5, #7
 8003d4c:	f7fe fdc0 	bl	80028d0 <getFloat>
					            config.BME280_t_offset = tmp;
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <CLI_proc+0x1270>)
					            BME280.temp.offset = tmp;
 8003d52:	4921      	ldr	r1, [pc, #132]	; (8003dd8 <CLI_proc+0x1274>)
					            config.BME280_t_offset = tmp;
 8003d54:	9801      	ldr	r0, [sp, #4]
 8003d56:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
					            BME280.temp.offset = tmp;
 8003d5a:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("BME280 temperature offset %.6f\r\n",tmp);
 8003d5e:	f7fc fc03 	bl	8000568 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	481d      	ldr	r0, [pc, #116]	; (8003ddc <CLI_proc+0x1278>)
 8003d68:	f00c f8dc 	bl	800ff24 <iprintf>
								Save_config();
 8003d6c:	f7fd fb26 	bl	80013bc <Save_config>
							if((strstr(clibuf+23, "en")))
 8003d70:	491b      	ldr	r1, [pc, #108]	; (8003de0 <CLI_proc+0x127c>)
 8003d72:	481c      	ldr	r0, [pc, #112]	; (8003de4 <CLI_proc+0x1280>)
 8003d74:	f00c fb00 	bl	8010378 <strstr>
 8003d78:	b180      	cbz	r0, 8003d9c <CLI_proc+0x1238>
								config.BME280_t_use = 1;
 8003d7a:	4816      	ldr	r0, [pc, #88]	; (8003dd4 <CLI_proc+0x1270>)
								BME280.temp.use_meas = 1;
 8003d7c:	4916      	ldr	r1, [pc, #88]	; (8003dd8 <CLI_proc+0x1274>)
								config.BME280_t_use = 1;
 8003d7e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
								BME280.temp.use_meas = 1;
 8003d82:	784b      	ldrb	r3, [r1, #1]
								config.BME280_t_use = 1;
 8003d84:	f042 0220 	orr.w	r2, r2, #32
								BME280.temp.use_meas = 1;
 8003d88:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_t_use = 1;
 8003d8c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
								printf("BME280 temperature measure enabled\r\n");
 8003d90:	4815      	ldr	r0, [pc, #84]	; (8003de8 <CLI_proc+0x1284>)
								BME280.temp.use_meas = 1;
 8003d92:	704b      	strb	r3, [r1, #1]
								printf("BME280 temperature measure enabled\r\n");
 8003d94:	f00c f92c 	bl	800fff0 <puts>
								Save_config();
 8003d98:	f7fd fb10 	bl	80013bc <Save_config>
							if((strstr(clibuf+23, "dis")))
 8003d9c:	4913      	ldr	r1, [pc, #76]	; (8003dec <CLI_proc+0x1288>)
 8003d9e:	4811      	ldr	r0, [pc, #68]	; (8003de4 <CLI_proc+0x1280>)
 8003da0:	f00c faea 	bl	8010378 <strstr>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	f43f ae9d 	beq.w	8003ae4 <CLI_proc+0xf80>
								config.BME280_t_use = 0;
 8003daa:	490a      	ldr	r1, [pc, #40]	; (8003dd4 <CLI_proc+0x1270>)
								BME280.temp.use_meas = 0;
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <CLI_proc+0x1274>)
								config.BME280_t_use = 0;
 8003dae:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
								BME280.temp.use_meas = 0;
 8003db2:	785a      	ldrb	r2, [r3, #1]
								config.BME280_t_use = 0;
 8003db4:	f36f 1045 	bfc	r0, #5, #1
								BME280.temp.use_meas = 0;
 8003db8:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_t_use = 0;
 8003dbc:	f881 0025 	strb.w	r0, [r1, #37]	; 0x25
								printf("BME280 temperature measure disable\r\n");
 8003dc0:	480b      	ldr	r0, [pc, #44]	; (8003df0 <CLI_proc+0x128c>)
								BME280.temp.use_meas = 0;
 8003dc2:	705a      	strb	r2, [r3, #1]
								printf("BME280 temperature measure disable\r\n");
 8003dc4:	f00c f914 	bl	800fff0 <puts>
								Save_config();
 8003dc8:	f7fd faf8 	bl	80013bc <Save_config>
 8003dcc:	e68a      	b.n	8003ae4 <CLI_proc+0xf80>
 8003dce:	bf00      	nop
 8003dd0:	080141ac 	.word	0x080141ac
 8003dd4:	2000137c 	.word	0x2000137c
 8003dd8:	200012b8 	.word	0x200012b8
 8003ddc:	08014518 	.word	0x08014518
 8003de0:	080141d8 	.word	0x080141d8
 8003de4:	20000243 	.word	0x20000243
 8003de8:	0801453c 	.word	0x0801453c
 8003dec:	08014200 	.word	0x08014200
 8003df0:	08014560 	.word	0x08014560

08003df4 <CLI>:
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <CLI+0x58>)
 8003df6:	f8b2 305a 	ldrh.w	r3, [r2, #90]	; 0x5a
void CLI() {
 8003dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 8003dfe:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8003e02:	4e13      	ldr	r6, [pc, #76]	; (8003e50 <CLI+0x5c>)
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	1ae4      	subs	r4, r4, r3
 8003e08:	8832      	ldrh	r2, [r6, #0]
 8003e0a:	3440      	adds	r4, #64	; 0x40
 8003e0c:	1aa4      	subs	r4, r4, r2
 8003e0e:	4263      	negs	r3, r4
 8003e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e14:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8003e18:	bf58      	it	pl
 8003e1a:	425c      	negpl	r4, r3
 8003e1c:	b2a4      	uxth	r4, r4
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 8003e1e:	b194      	cbz	r4, 8003e46 <CLI+0x52>
 8003e20:	2500      	movs	r5, #0
 8003e22:	4f0c      	ldr	r7, [pc, #48]	; (8003e54 <CLI+0x60>)
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8003e24:	46a8      	mov	r8, r5
 8003e26:	e000      	b.n	8003e2a <CLI+0x36>
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 8003e28:	8832      	ldrh	r2, [r6, #0]
 8003e2a:	5cb8      	ldrb	r0, [r7, r2]
 8003e2c:	1c53      	adds	r3, r2, #1
 8003e2e:	b29b      	uxth	r3, r3
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8003e30:	2b3f      	cmp	r3, #63	; 0x3f
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 8003e32:	f105 0501 	add.w	r5, r5, #1
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 8003e36:	8033      	strh	r3, [r6, #0]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8003e38:	bf88      	it	hi
 8003e3a:	f8a6 8000 	strhhi.w	r8, [r6]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 8003e3e:	f7fe fe91 	bl	8002b64 <CLI_proc>
 8003e42:	42a5      	cmp	r5, r4
 8003e44:	d1f0      	bne.n	8003e28 <CLI+0x34>
}
 8003e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200011d0 	.word	0x200011d0
 8003e50:	200002b4 	.word	0x200002b4
 8003e54:	20000274 	.word	0x20000274

08003e58 <DPS368_check>:

DPS_coeff_t DPS_coef;
volatile int32_t Kt_coef, Kp_coef;

uint8_t DPS368_check()
{
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	b082      	sub	sp, #8
	uint8_t value;
	SET_DPS368();
 8003e5c:	f004 f8f0 	bl	8008040 <SET_DPS368>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, DPS368_ADDR, 3, 150);
 8003e60:	4814      	ldr	r0, [pc, #80]	; (8003eb4 <DPS368_check+0x5c>)
 8003e62:	2396      	movs	r3, #150	; 0x96
 8003e64:	2203      	movs	r2, #3
 8003e66:	21ee      	movs	r1, #238	; 0xee
 8003e68:	f006 fd24 	bl	800a8b4 <HAL_I2C_IsDeviceReady>
 8003e6c:	4604      	mov	r4, r0
	osDelay(100);
 8003e6e:	2064      	movs	r0, #100	; 0x64
 8003e70:	f009 f8ec 	bl	800d04c <osDelay>
	if (status == HAL_OK) {
 8003e74:	b9bc      	cbnz	r4, 8003ea6 <DPS368_check+0x4e>
		i2c_read8(&hi2c2, DPS368_REG_ID, &value, DPS368_ADDR);
 8003e76:	23ee      	movs	r3, #238	; 0xee
 8003e78:	480e      	ldr	r0, [pc, #56]	; (8003eb4 <DPS368_check+0x5c>)
 8003e7a:	f10d 0207 	add.w	r2, sp, #7
 8003e7e:	210d      	movs	r1, #13
 8003e80:	f004 f832 	bl	8007ee8 <i2c_read8>
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8003e84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d005      	beq.n	8003e98 <DPS368_check+0x40>
 8003e8c:	480a      	ldr	r0, [pc, #40]	; (8003eb8 <DPS368_check+0x60>)
 8003e8e:	f00c f8af 	bl	800fff0 <puts>
	} else {printf("DPS368 FAILED\r\n"); return 0;}
	return 0;
}
 8003e92:	4620      	mov	r0, r4
 8003e94:	b002      	add	sp, #8
 8003e96:	bd10      	pop	{r4, pc}
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8003e98:	4808      	ldr	r0, [pc, #32]	; (8003ebc <DPS368_check+0x64>)
 8003e9a:	f00c f8a9 	bl	800fff0 <puts>
 8003e9e:	2401      	movs	r4, #1
}
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	b002      	add	sp, #8
 8003ea4:	bd10      	pop	{r4, pc}
	} else {printf("DPS368 FAILED\r\n"); return 0;}
 8003ea6:	4806      	ldr	r0, [pc, #24]	; (8003ec0 <DPS368_check+0x68>)
 8003ea8:	f00c f8a2 	bl	800fff0 <puts>
 8003eac:	2400      	movs	r4, #0
}
 8003eae:	4620      	mov	r0, r4
 8003eb0:	b002      	add	sp, #8
 8003eb2:	bd10      	pop	{r4, pc}
 8003eb4:	20001104 	.word	0x20001104
 8003eb8:	08014828 	.word	0x08014828
 8003ebc:	0801481c 	.word	0x0801481c
 8003ec0:	08014834 	.word	0x08014834

08003ec4 <DPS368_read_coeff>:
    }
}


void DPS368_read_coeff()
{
 8003ec4:	b500      	push	{lr}
 8003ec6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t regs[18];
	SET_DPS368();
 8003ec8:	f004 f8ba 	bl	8008040 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, regs, 18, 250);
 8003ecc:	ab05      	add	r3, sp, #20
 8003ece:	21fa      	movs	r1, #250	; 0xfa
 8003ed0:	2212      	movs	r2, #18
 8003ed2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	2301      	movs	r3, #1
 8003edc:	21ee      	movs	r1, #238	; 0xee
 8003ede:	4835      	ldr	r0, [pc, #212]	; (8003fb4 <DPS368_read_coeff+0xf0>)
 8003ee0:	f006 fbc0 	bl	800a664 <HAL_I2C_Mem_Read>
//	for(uint8_t i=0; i<19;i++){
//		printf("Coef %d : %#x\r\n",i,regs[i]);
//	}
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 8003ee4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8003ee8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    getTwosComplement(&DPS_coef.C0, 12);
    // c0 is only used as c0*0.5, so c0_half is calculated immediately
    DPS_coef.C0 = DPS_coef.C0 / 2U;

    // now do the same thing for all other coefficients
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8003eec:	f89d 0016 	ldrb.w	r0, [sp, #22]
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 8003ef0:	0911      	lsrs	r1, r2, #4
 8003ef2:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8003ef6:	0212      	lsls	r2, r2, #8
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003ef8:	09db      	lsrs	r3, r3, #7
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8003efa:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <DPS368_read_coeff+0xf4>)
        *raw -= (uint32_t)1 << length;
 8003f00:	bf18      	it	ne
 8003f02:	f5a1 5180 	subne.w	r1, r1, #4096	; 0x1000
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8003f06:	4310      	orrs	r0, r2
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8003f08:	0849      	lsrs	r1, r1, #1
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003f0a:	0ad2      	lsrs	r2, r2, #11
    getTwosComplement(&DPS_coef.C1, 12);
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 8003f0c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 8003f10:	6019      	str	r1, [r3, #0]
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 8003f12:	bf0c      	ite	eq
 8003f14:	6058      	streq	r0, [r3, #4]
        *raw -= (uint32_t)1 << length;
 8003f16:	f5a0 5180 	subne.w	r1, r0, #4096	; 0x1000
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 8003f1a:	f89d 0017 	ldrb.w	r0, [sp, #23]
        *raw -= (uint32_t)1 << length;
 8003f1e:	bf18      	it	ne
 8003f20:	6059      	strne	r1, [r3, #4]
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 8003f22:	0112      	lsls	r2, r2, #4
 8003f24:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8003f28:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8003f2c:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003f30:	0cd2      	lsrs	r2, r2, #19
        *raw -= (uint32_t)1 << length;
 8003f32:	bf18      	it	ne
 8003f34:	f5a0 1080 	subne.w	r0, r0, #1048576	; 0x100000
 8003f38:	6098      	str	r0, [r3, #8]
    getTwosComplement(&DPS_coef.C00, 20);
    DPS_coef.C10 = (((uint32_t)regs[5] & 0x0F) << 16) | ((uint32_t)regs[6] << 8) | (uint32_t)regs[7];
 8003f3a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8003f3e:	0409      	lsls	r1, r1, #16
 8003f40:	ba52      	rev16	r2, r2
 8003f42:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8003f46:	b292      	uxth	r2, r2
 8003f48:	430a      	orrs	r2, r1
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003f4a:	0cc9      	lsrs	r1, r1, #19
        *raw -= (uint32_t)1 << length;
 8003f4c:	bf18      	it	ne
 8003f4e:	f5a2 1280 	subne.w	r2, r2, #1048576	; 0x100000
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8003f58:	ba52      	rev16	r2, r2
 8003f5a:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003f5c:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8003f5e:	bf48      	it	mi
 8003f60:	f5a1 3180 	submi.w	r1, r1, #65536	; 0x10000
 8003f64:	6119      	str	r1, [r3, #16]
 8003f66:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8003f6a:	ba52      	rev16	r2, r2
 8003f6c:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003f6e:	0410      	lsls	r0, r2, #16
        *raw -= (uint32_t)1 << length;
 8003f70:	bf48      	it	mi
 8003f72:	f5a1 3180 	submi.w	r1, r1, #65536	; 0x10000
 8003f76:	6159      	str	r1, [r3, #20]
 8003f78:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003f7c:	ba52      	rev16	r2, r2
 8003f7e:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003f80:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8003f82:	bf48      	it	mi
 8003f84:	f5a1 3180 	submi.w	r1, r1, #65536	; 0x10000
 8003f88:	6199      	str	r1, [r3, #24]
 8003f8a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8003f8e:	ba52      	rev16	r2, r2
 8003f90:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003f92:	0410      	lsls	r0, r2, #16
        *raw -= (uint32_t)1 << length;
 8003f94:	bf48      	it	mi
 8003f96:	f5a1 3180 	submi.w	r1, r1, #65536	; 0x10000
 8003f9a:	61d9      	str	r1, [r3, #28]
 8003f9c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8003fa0:	ba52      	rev16	r2, r2
 8003fa2:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003fa4:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8003fa6:	bf48      	it	mi
 8003fa8:	f5a1 3180 	submi.w	r1, r1, #65536	; 0x10000
 8003fac:	6219      	str	r1, [r3, #32]
//    printf("C0: %ld   C1: %ld\r\n",DPS_coef.C0,DPS_coef.C1);
//    printf("C00: %ld   C01: %ld\r\n",DPS_coef.C00,DPS_coef.C01);
//    printf("C10: %ld   C11: %ld\r\n",DPS_coef.C10,DPS_coef.C11);
//    printf("C20: %ld   C21: %ld\r\n",DPS_coef.C20,DPS_coef.C21);
//    printf("C30: %ld\r\n",DPS_coef.C30);
}
 8003fae:	b00b      	add	sp, #44	; 0x2c
 8003fb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fb4:	20001104 	.word	0x20001104
 8003fb8:	200002b8 	.word	0x200002b8

08003fbc <DPS368_fifo>:
	printf("CFG REG 0x09 DUMP (hex): %#x\r\n",reg);
	printbinaryMSB(reg);
}

void DPS368_fifo(uint8_t endis)
{
 8003fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003fc0:	4f13      	ldr	r7, [pc, #76]	; (8004010 <DPS368_fifo+0x54>)
{
 8003fc2:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003fc4:	2401      	movs	r4, #1
 8003fc6:	f10d 0517 	add.w	r5, sp, #23
 8003fca:	f04f 08fa 	mov.w	r8, #250	; 0xfa
{
 8003fce:	4606      	mov	r6, r0
	SET_DPS368();
 8003fd0:	f004 f836 	bl	8008040 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8003fda:	9500      	str	r5, [sp, #0]
 8003fdc:	2209      	movs	r2, #9
 8003fde:	21ee      	movs	r1, #238	; 0xee
 8003fe0:	4638      	mov	r0, r7
 8003fe2:	f006 fb3f 	bl	800a664 <HAL_I2C_Mem_Read>
//	printf("(fifo) CFG REG READ (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	setBit(&reg,1,endis);
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4628      	mov	r0, r5
 8003fec:	f003 ffd0 	bl	8007f90 <setBit>
//	printf("SET FIFO EN\r\n");
//	printf("(fifo) CFG REG WRITE (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003ff0:	4623      	mov	r3, r4
 8003ff2:	2209      	movs	r2, #9
 8003ff4:	21ee      	movs	r1, #238	; 0xee
 8003ff6:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8003ffa:	9500      	str	r5, [sp, #0]
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	f006 fa05 	bl	800a40c <HAL_I2C_Mem_Write>
	osDelay(1);
 8004002:	4620      	mov	r0, r4
 8004004:	f009 f822 	bl	800d04c <osDelay>
}
 8004008:	b006      	add	sp, #24
 800400a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800400e:	bf00      	nop
 8004010:	20001104 	.word	0x20001104

08004014 <DPS368_conf_int>:

void DPS368_conf_int(uint8_t ints)
{
 8004014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8004018:	4f13      	ldr	r7, [pc, #76]	; (8004068 <DPS368_conf_int+0x54>)
{
 800401a:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 800401c:	2401      	movs	r4, #1
 800401e:	f10d 0517 	add.w	r5, sp, #23
 8004022:	f04f 08fa 	mov.w	r8, #250	; 0xfa
{
 8004026:	4606      	mov	r6, r0
	SET_DPS368();
 8004028:	f004 f80a 	bl	8008040 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 800402c:	4623      	mov	r3, r4
 800402e:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8004032:	9500      	str	r5, [sp, #0]
 8004034:	21ee      	movs	r1, #238	; 0xee
 8004036:	2209      	movs	r2, #9
 8004038:	4638      	mov	r0, r7
 800403a:	f006 fb13 	bl	800a664 <HAL_I2C_Mem_Read>
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	modifyRegister(&reg, 0xF0, ints);
 800403e:	4632      	mov	r2, r6
 8004040:	4628      	mov	r0, r5
 8004042:	21f0      	movs	r1, #240	; 0xf0
 8004044:	f003 ffba 	bl	8007fbc <modifyRegister>
//	printf("SET INT \r\n");
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8004048:	4623      	mov	r3, r4
 800404a:	2209      	movs	r2, #9
 800404c:	21ee      	movs	r1, #238	; 0xee
 800404e:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8004052:	9500      	str	r5, [sp, #0]
 8004054:	4638      	mov	r0, r7
 8004056:	f006 f9d9 	bl	800a40c <HAL_I2C_Mem_Write>
	osDelay(1);
 800405a:	4620      	mov	r0, r4
 800405c:	f008 fff6 	bl	800d04c <osDelay>
}
 8004060:	b006      	add	sp, #24
 8004062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004066:	bf00      	nop
 8004068:	20001104 	.word	0x20001104

0800406c <DPS368_temp_source>:

void DPS368_temp_source()
{
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	b086      	sub	sp, #24
	uint8_t reg, reg_mod;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8004070:	2401      	movs	r4, #1
 8004072:	f10d 0517 	add.w	r5, sp, #23
 8004076:	26fa      	movs	r6, #250	; 0xfa
	SET_DPS368();
 8004078:	f003 ffe2 	bl	8008040 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 800407c:	4623      	mov	r3, r4
 800407e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004082:	2207      	movs	r2, #7
 8004084:	9500      	str	r5, [sp, #0]
 8004086:	21ee      	movs	r1, #238	; 0xee
 8004088:	4811      	ldr	r0, [pc, #68]	; (80040d0 <DPS368_temp_source+0x64>)
 800408a:	f006 faeb 	bl	800a664 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x07 (hex) (NOMOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x28, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 800408e:	f10d 0316 	add.w	r3, sp, #22
 8004092:	2228      	movs	r2, #40	; 0x28
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800409a:	4623      	mov	r3, r4
 800409c:	21ee      	movs	r1, #238	; 0xee
 800409e:	480c      	ldr	r0, [pc, #48]	; (80040d0 <DPS368_temp_source+0x64>)
 80040a0:	f006 fae0 	bl	800a664 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x28 (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	if((reg & 0x80) == 0) {
 80040a4:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 80040a8:	2b00      	cmp	r3, #0
//		printf("Internal Temp\r\n");
		setBit(&reg_mod, 7, 0);
 80040aa:	bfac      	ite	ge
 80040ac:	2200      	movge	r2, #0
	} else {
//		printf("External Temp\r\n");
		setBit(&reg_mod, 7, 1);
 80040ae:	4622      	movlt	r2, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	2107      	movs	r1, #7
 80040b4:	f003 ff6c 	bl	8007f90 <setBit>
		}
//	printf("CFG TEMP SRC 0x07 (hex) (MOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 80040b8:	2301      	movs	r3, #1
 80040ba:	22fa      	movs	r2, #250	; 0xfa
 80040bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80040c0:	9500      	str	r5, [sp, #0]
 80040c2:	2207      	movs	r2, #7
 80040c4:	21ee      	movs	r1, #238	; 0xee
 80040c6:	4802      	ldr	r0, [pc, #8]	; (80040d0 <DPS368_temp_source+0x64>)
 80040c8:	f006 f9a0 	bl	800a40c <HAL_I2C_Mem_Write>

}
 80040cc:	b006      	add	sp, #24
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	20001104 	.word	0x20001104

080040d4 <DPS368_conf_temp>:


void DPS368_conf_temp(uint8_t ovr, uint8_t rate)
{
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	4604      	mov	r4, r0
 80040da:	460d      	mov	r5, r1
	uint8_t reg;
	SET_DPS368();
	reg = ovr + rate;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80040dc:	f10d 0617 	add.w	r6, sp, #23
	SET_DPS368();
 80040e0:	f003 ffae 	bl	8008040 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80040e4:	2301      	movs	r3, #1
 80040e6:	22fa      	movs	r2, #250	; 0xfa
 80040e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
	reg = ovr + rate;
 80040ec:	4425      	add	r5, r4
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80040ee:	9600      	str	r6, [sp, #0]
 80040f0:	2207      	movs	r2, #7
 80040f2:	21ee      	movs	r1, #238	; 0xee
 80040f4:	4830      	ldr	r0, [pc, #192]	; (80041b8 <DPS368_conf_temp+0xe4>)
	reg = ovr + rate;
 80040f6:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80040fa:	f006 f987 	bl	800a40c <HAL_I2C_Mem_Write>
    switch (ovr)
 80040fe:	2c07      	cmp	r4, #7
 8004100:	d809      	bhi.n	8004116 <DPS368_conf_temp+0x42>
 8004102:	e8df f004 	tbb	[pc, r4]
 8004106:	3f2b      	.short	0x3f2b
 8004108:	534e4944 	.word	0x534e4944
 800410c:	2604      	.short	0x2604
        case DPS_OVERSAMPLE_32:
        	Kt_coef = DPS_OSR_SF_32;
            break;

        case DPS_OVERSAMPLE_64:
        	Kt_coef = DPS_OSR_SF_64;
 800410e:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <DPS368_conf_temp+0xe8>)
 8004110:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8004114:	601a      	str	r2, [r3, #0]
        	Kt_coef = DPS_OSR_SF_128;
            break;
    }
//    printf("Kt_coef set: %lu\r\n",Kt_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8004116:	2401      	movs	r4, #1
 8004118:	23fa      	movs	r3, #250	; 0xfa
 800411a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800411e:	21ee      	movs	r1, #238	; 0xee
 8004120:	2209      	movs	r2, #9
 8004122:	4825      	ldr	r0, [pc, #148]	; (80041b8 <DPS368_conf_temp+0xe4>)
 8004124:	9600      	str	r6, [sp, #0]
 8004126:	4623      	mov	r3, r4
 8004128:	f006 fa9c 	bl	800a664 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 3, 1);
 800412c:	4622      	mov	r2, r4
 800412e:	2103      	movs	r1, #3
 8004130:	4630      	mov	r0, r6
 8004132:	f003 ff2d 	bl	8007f90 <setBit>
    else setBit(&reg, 3, 0);
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8004136:	2301      	movs	r3, #1
 8004138:	21fa      	movs	r1, #250	; 0xfa
 800413a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800413e:	2209      	movs	r2, #9
 8004140:	21ee      	movs	r1, #238	; 0xee
 8004142:	9600      	str	r6, [sp, #0]
 8004144:	481c      	ldr	r0, [pc, #112]	; (80041b8 <DPS368_conf_temp+0xe4>)
 8004146:	f006 f961 	bl	800a40c <HAL_I2C_Mem_Write>

	DPS368_temp_source();
 800414a:	f7ff ff8f 	bl	800406c <DPS368_temp_source>

}
 800414e:	b006      	add	sp, #24
 8004150:	bd70      	pop	{r4, r5, r6, pc}
        	Kt_coef = DPS_OSR_SF_128;
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <DPS368_conf_temp+0xe8>)
 8004154:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8004158:	601a      	str	r2, [r3, #0]
            break;
 800415a:	e7dc      	b.n	8004116 <DPS368_conf_temp+0x42>
            Kt_coef = DPS_OSR_SF_1;
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <DPS368_conf_temp+0xe8>)
 800415e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004162:	601a      	str	r2, [r3, #0]
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8004164:	2301      	movs	r3, #1
 8004166:	22fa      	movs	r2, #250	; 0xfa
 8004168:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800416c:	9600      	str	r6, [sp, #0]
 800416e:	2209      	movs	r2, #9
 8004170:	21ee      	movs	r1, #238	; 0xee
 8004172:	4811      	ldr	r0, [pc, #68]	; (80041b8 <DPS368_conf_temp+0xe4>)
 8004174:	f006 fa76 	bl	800a664 <HAL_I2C_Mem_Read>
    else setBit(&reg, 3, 0);
 8004178:	2200      	movs	r2, #0
 800417a:	2103      	movs	r1, #3
 800417c:	4630      	mov	r0, r6
 800417e:	f003 ff07 	bl	8007f90 <setBit>
 8004182:	e7d8      	b.n	8004136 <DPS368_conf_temp+0x62>
        	Kt_coef = DPS_OSR_SF_2;
 8004184:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <DPS368_conf_temp+0xe8>)
 8004186:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800418a:	601a      	str	r2, [r3, #0]
            break;
 800418c:	e7ea      	b.n	8004164 <DPS368_conf_temp+0x90>
        	Kt_coef = DPS_OSR_SF_4;
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <DPS368_conf_temp+0xe8>)
 8004190:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 8004194:	601a      	str	r2, [r3, #0]
            break;
 8004196:	e7e5      	b.n	8004164 <DPS368_conf_temp+0x90>
        	Kt_coef = DPS_OSR_SF_8;
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <DPS368_conf_temp+0xe8>)
 800419a:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 800419e:	601a      	str	r2, [r3, #0]
            break;
 80041a0:	e7e0      	b.n	8004164 <DPS368_conf_temp+0x90>
        	Kt_coef = DPS_OSR_SF_16;
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <DPS368_conf_temp+0xe8>)
 80041a4:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 80041a8:	601a      	str	r2, [r3, #0]
            break;
 80041aa:	e7b4      	b.n	8004116 <DPS368_conf_temp+0x42>
        	Kt_coef = DPS_OSR_SF_32;
 80041ac:	4b03      	ldr	r3, [pc, #12]	; (80041bc <DPS368_conf_temp+0xe8>)
 80041ae:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 80041b2:	601a      	str	r2, [r3, #0]
            break;
 80041b4:	e7af      	b.n	8004116 <DPS368_conf_temp+0x42>
 80041b6:	bf00      	nop
 80041b8:	20001104 	.word	0x20001104
 80041bc:	200002e0 	.word	0x200002e0

080041c0 <DPS368_conf_press>:

void DPS368_conf_press(uint8_t ovr, uint8_t rate)
{
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	4604      	mov	r4, r0
 80041c6:	460d      	mov	r5, r1
	uint8_t reg;
	SET_DPS368();
	reg = ovr + rate;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80041c8:	f10d 0617 	add.w	r6, sp, #23
	SET_DPS368();
 80041cc:	f003 ff38 	bl	8008040 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80041d0:	2301      	movs	r3, #1
 80041d2:	22fa      	movs	r2, #250	; 0xfa
 80041d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
	reg = ovr + rate;
 80041d8:	4425      	add	r5, r4
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80041da:	9600      	str	r6, [sp, #0]
 80041dc:	2206      	movs	r2, #6
 80041de:	21ee      	movs	r1, #238	; 0xee
 80041e0:	482f      	ldr	r0, [pc, #188]	; (80042a0 <DPS368_conf_press+0xe0>)
	reg = ovr + rate;
 80041e2:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80041e6:	f006 f911 	bl	800a40c <HAL_I2C_Mem_Write>
    switch (ovr)
 80041ea:	2c07      	cmp	r4, #7
 80041ec:	d809      	bhi.n	8004202 <DPS368_conf_press+0x42>
 80041ee:	e8df f004 	tbb	[pc, r4]
 80041f2:	3d29      	.short	0x3d29
 80041f4:	514c4742 	.word	0x514c4742
 80041f8:	2404      	.short	0x2404
        case DPS_OVERSAMPLE_32:
        	Kp_coef = DPS_OSR_SF_32;
            break;

        case DPS_OVERSAMPLE_64:
        	Kp_coef = DPS_OSR_SF_64;
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <DPS368_conf_press+0xe4>)
 80041fc:	f44f 227e 	mov.w	r2, #1040384	; 0xfe000
 8004200:	601a      	str	r2, [r3, #0]
            break;
    }

//    printf("Kp_coef set: %lu\r\n",Kp_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8004202:	2401      	movs	r4, #1
 8004204:	23fa      	movs	r3, #250	; 0xfa
 8004206:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800420a:	21ee      	movs	r1, #238	; 0xee
 800420c:	2209      	movs	r2, #9
 800420e:	4824      	ldr	r0, [pc, #144]	; (80042a0 <DPS368_conf_press+0xe0>)
 8004210:	9600      	str	r6, [sp, #0]
 8004212:	4623      	mov	r3, r4
 8004214:	f006 fa26 	bl	800a664 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 2, 1);
 8004218:	4622      	mov	r2, r4
 800421a:	2102      	movs	r1, #2
 800421c:	4630      	mov	r0, r6
 800421e:	f003 feb7 	bl	8007f90 <setBit>
    else setBit(&reg, 2, 0);
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8004222:	2301      	movs	r3, #1
 8004224:	22fa      	movs	r2, #250	; 0xfa
 8004226:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800422a:	9600      	str	r6, [sp, #0]
 800422c:	2209      	movs	r2, #9
 800422e:	21ee      	movs	r1, #238	; 0xee
 8004230:	481b      	ldr	r0, [pc, #108]	; (80042a0 <DPS368_conf_press+0xe0>)
 8004232:	f006 f8eb 	bl	800a40c <HAL_I2C_Mem_Write>


}
 8004236:	b006      	add	sp, #24
 8004238:	bd70      	pop	{r4, r5, r6, pc}
        	Kp_coef = DPS_OSR_SF_128;
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <DPS368_conf_press+0xe4>)
 800423c:	f44f 12ff 	mov.w	r2, #2088960	; 0x1fe000
 8004240:	601a      	str	r2, [r3, #0]
            break;
 8004242:	e7de      	b.n	8004202 <DPS368_conf_press+0x42>
            Kp_coef = DPS_OSR_SF_1;
 8004244:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <DPS368_conf_press+0xe4>)
 8004246:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800424a:	601a      	str	r2, [r3, #0]
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 800424c:	2301      	movs	r3, #1
 800424e:	22fa      	movs	r2, #250	; 0xfa
 8004250:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004254:	9600      	str	r6, [sp, #0]
 8004256:	2209      	movs	r2, #9
 8004258:	21ee      	movs	r1, #238	; 0xee
 800425a:	4811      	ldr	r0, [pc, #68]	; (80042a0 <DPS368_conf_press+0xe0>)
 800425c:	f006 fa02 	bl	800a664 <HAL_I2C_Mem_Read>
    else setBit(&reg, 2, 0);
 8004260:	2200      	movs	r2, #0
 8004262:	2102      	movs	r1, #2
 8004264:	4630      	mov	r0, r6
 8004266:	f003 fe93 	bl	8007f90 <setBit>
 800426a:	e7da      	b.n	8004222 <DPS368_conf_press+0x62>
        	Kp_coef = DPS_OSR_SF_2;
 800426c:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <DPS368_conf_press+0xe4>)
 800426e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004272:	601a      	str	r2, [r3, #0]
            break;
 8004274:	e7ea      	b.n	800424c <DPS368_conf_press+0x8c>
        	Kp_coef = DPS_OSR_SF_4;
 8004276:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <DPS368_conf_press+0xe4>)
 8004278:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 800427c:	601a      	str	r2, [r3, #0]
            break;
 800427e:	e7e5      	b.n	800424c <DPS368_conf_press+0x8c>
        	Kp_coef = DPS_OSR_SF_8;
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <DPS368_conf_press+0xe4>)
 8004282:	f44f 02f0 	mov.w	r2, #7864320	; 0x780000
 8004286:	601a      	str	r2, [r3, #0]
            break;
 8004288:	e7e0      	b.n	800424c <DPS368_conf_press+0x8c>
        	Kp_coef = DPS_OSR_SF_16;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <DPS368_conf_press+0xe4>)
 800428c:	f44f 3278 	mov.w	r2, #253952	; 0x3e000
 8004290:	601a      	str	r2, [r3, #0]
            break;
 8004292:	e7b6      	b.n	8004202 <DPS368_conf_press+0x42>
        	Kp_coef = DPS_OSR_SF_32;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <DPS368_conf_press+0xe4>)
 8004296:	f44f 22fc 	mov.w	r2, #516096	; 0x7e000
 800429a:	601a      	str	r2, [r3, #0]
            break;
 800429c:	e7b1      	b.n	8004202 <DPS368_conf_press+0x42>
 800429e:	bf00      	nop
 80042a0:	20001104 	.word	0x20001104
 80042a4:	200002dc 	.word	0x200002dc

080042a8 <DPS368_temp_correct>:
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);

}

void DPS368_temp_correct(uint8_t ovr)
{
 80042a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042aa:	b087      	sub	sp, #28
	SET_DPS368();
	HAL_StatusTypeDef status;
	uint8_t write_data = 0xA5;
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 80042ac:	2401      	movs	r4, #1
{
 80042ae:	4605      	mov	r5, r0
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 80042b0:	27fa      	movs	r7, #250	; 0xfa
	SET_DPS368();
 80042b2:	f003 fec5 	bl	8008040 <SET_DPS368>
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 80042b6:	f10d 0616 	add.w	r6, sp, #22
	uint8_t write_data = 0xA5;
 80042ba:	23a5      	movs	r3, #165	; 0xa5
 80042bc:	f88d 3016 	strb.w	r3, [sp, #22]
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 80042c0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80042c4:	482b      	ldr	r0, [pc, #172]	; (8004374 <DPS368_temp_correct+0xcc>)
 80042c6:	9600      	str	r6, [sp, #0]
 80042c8:	4623      	mov	r3, r4
 80042ca:	220e      	movs	r2, #14
 80042cc:	21ee      	movs	r1, #238	; 0xee
 80042ce:	f006 f89d 	bl	800a40c <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 80042d2:	b1c8      	cbz	r0, 8004308 <DPS368_temp_correct+0x60>
	}
	if (status == HAL_OK) {
        write_data = 0x00;
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
	}
	DPS368_conf_temp(ovr, DPS_RATE_1);
 80042d4:	4628      	mov	r0, r5
 80042d6:	2100      	movs	r1, #0
 80042d8:	f7ff fefc 	bl	80040d4 <DPS368_conf_temp>
}


void DPS368_run_mode(uint8_t mode)
{
	SET_DPS368();
 80042dc:	f003 feb0 	bl	8008040 <SET_DPS368>
	uint8_t reg;
//	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
//	reg = (reg & 0x0E) | mode;
	reg = mode;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80042e0:	2301      	movs	r3, #1
 80042e2:	f10d 0217 	add.w	r2, sp, #23
 80042e6:	21fa      	movs	r1, #250	; 0xfa
 80042e8:	e9cd 3101 	strd	r3, r1, [sp, #4]
	reg = mode;
 80042ec:	2402      	movs	r4, #2
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80042ee:	9200      	str	r2, [sp, #0]
 80042f0:	21ee      	movs	r1, #238	; 0xee
 80042f2:	2208      	movs	r2, #8
 80042f4:	481f      	ldr	r0, [pc, #124]	; (8004374 <DPS368_temp_correct+0xcc>)
	reg = mode;
 80042f6:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80042fa:	f006 f887 	bl	800a40c <HAL_I2C_Mem_Write>
	osDelay(2);
 80042fe:	4620      	mov	r0, r4
 8004300:	f008 fea4 	bl	800d04c <osDelay>
}
 8004304:	b007      	add	sp, #28
 8004306:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_data = 0x96;
 8004308:	2396      	movs	r3, #150	; 0x96
 800430a:	f88d 3016 	strb.w	r3, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 800430e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004312:	4818      	ldr	r0, [pc, #96]	; (8004374 <DPS368_temp_correct+0xcc>)
 8004314:	9600      	str	r6, [sp, #0]
 8004316:	4623      	mov	r3, r4
 8004318:	220f      	movs	r2, #15
 800431a:	21ee      	movs	r1, #238	; 0xee
 800431c:	f006 f876 	bl	800a40c <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8004320:	2800      	cmp	r0, #0
 8004322:	d1d7      	bne.n	80042d4 <DPS368_temp_correct+0x2c>
        write_data = 0x02;
 8004324:	2302      	movs	r3, #2
 8004326:	f88d 3016 	strb.w	r3, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x62, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 800432a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800432e:	4811      	ldr	r0, [pc, #68]	; (8004374 <DPS368_temp_correct+0xcc>)
 8004330:	9600      	str	r6, [sp, #0]
 8004332:	4623      	mov	r3, r4
 8004334:	2262      	movs	r2, #98	; 0x62
 8004336:	21ee      	movs	r1, #238	; 0xee
 8004338:	f006 f868 	bl	800a40c <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 800433c:	2800      	cmp	r0, #0
 800433e:	d1c9      	bne.n	80042d4 <DPS368_temp_correct+0x2c>
        write_data = 0x00;
 8004340:	f88d 0016 	strb.w	r0, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8004344:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004348:	480a      	ldr	r0, [pc, #40]	; (8004374 <DPS368_temp_correct+0xcc>)
 800434a:	9600      	str	r6, [sp, #0]
 800434c:	4623      	mov	r3, r4
 800434e:	220e      	movs	r2, #14
 8004350:	21ee      	movs	r1, #238	; 0xee
 8004352:	f006 f85b 	bl	800a40c <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8004356:	2800      	cmp	r0, #0
 8004358:	d1bc      	bne.n	80042d4 <DPS368_temp_correct+0x2c>
        write_data = 0x00;
 800435a:	f88d 0016 	strb.w	r0, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 800435e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004362:	9600      	str	r6, [sp, #0]
 8004364:	4623      	mov	r3, r4
 8004366:	220f      	movs	r2, #15
 8004368:	21ee      	movs	r1, #238	; 0xee
 800436a:	4802      	ldr	r0, [pc, #8]	; (8004374 <DPS368_temp_correct+0xcc>)
 800436c:	f006 f84e 	bl	800a40c <HAL_I2C_Mem_Write>
 8004370:	e7b0      	b.n	80042d4 <DPS368_temp_correct+0x2c>
 8004372:	bf00      	nop
 8004374:	20001104 	.word	0x20001104

08004378 <calcBusyTime>:


uint32_t calcBusyTime(uint8_t osr)
{
    // formula from datasheet (optimized)
    return (((uint32_t)20U) + ((uint32_t)16U << ((uint16_t)osr)));
 8004378:	2310      	movs	r3, #16
 800437a:	fa03 f000 	lsl.w	r0, r3, r0
}
 800437e:	3014      	adds	r0, #20
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <DPS368_init>:

void DPS368_init(uint8_t fifo, uint8_t int_m)
{
 8004384:	b510      	push	{r4, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	4604      	mov	r4, r0
 800438a:	9105      	str	r1, [sp, #20]
	DPS368_read_coeff();
 800438c:	f7ff fd9a 	bl	8003ec4 <DPS368_read_coeff>
	DPS368_conf_int(int_m);
 8004390:	9805      	ldr	r0, [sp, #20]
 8004392:	f7ff fe3f 	bl	8004014 <DPS368_conf_int>
	DPS368_fifo(fifo);
 8004396:	4620      	mov	r0, r4
 8004398:	f7ff fe10 	bl	8003fbc <DPS368_fifo>
	SET_DPS368();
 800439c:	f003 fe50 	bl	8008040 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80043a0:	2301      	movs	r3, #1
 80043a2:	f10d 021f 	add.w	r2, sp, #31
 80043a6:	21fa      	movs	r1, #250	; 0xfa
 80043a8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80043ac:	9200      	str	r2, [sp, #0]
 80043ae:	21ee      	movs	r1, #238	; 0xee
 80043b0:	2208      	movs	r2, #8
	reg = mode;
 80043b2:	2400      	movs	r4, #0
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80043b4:	4804      	ldr	r0, [pc, #16]	; (80043c8 <DPS368_init+0x44>)
	reg = mode;
 80043b6:	f88d 401f 	strb.w	r4, [sp, #31]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80043ba:	f006 f827 	bl	800a40c <HAL_I2C_Mem_Write>
	osDelay(2);
 80043be:	2002      	movs	r0, #2
 80043c0:	f008 fe44 	bl	800d04c <osDelay>
	DPS368_run_mode(MODE_IDLE);
}
 80043c4:	b008      	add	sp, #32
 80043c6:	bd10      	pop	{r4, pc}
 80043c8:	20001104 	.word	0x20001104

080043cc <DPS368_start_meas_temp>:

void DPS368_start_meas_temp(uint8_t ovr)
{
 80043cc:	b510      	push	{r4, lr}
	DPS368_conf_temp(ovr, 0U);
 80043ce:	2100      	movs	r1, #0
{
 80043d0:	b086      	sub	sp, #24
	DPS368_conf_temp(ovr, 0U);
 80043d2:	f7ff fe7f 	bl	80040d4 <DPS368_conf_temp>
	SET_DPS368();
 80043d6:	f003 fe33 	bl	8008040 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80043da:	2301      	movs	r3, #1
 80043dc:	f10d 0217 	add.w	r2, sp, #23
 80043e0:	21fa      	movs	r1, #250	; 0xfa
 80043e2:	e9cd 3101 	strd	r3, r1, [sp, #4]
	reg = mode;
 80043e6:	2402      	movs	r4, #2
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80043e8:	9200      	str	r2, [sp, #0]
 80043ea:	21ee      	movs	r1, #238	; 0xee
 80043ec:	2208      	movs	r2, #8
 80043ee:	4805      	ldr	r0, [pc, #20]	; (8004404 <DPS368_start_meas_temp+0x38>)
	reg = mode;
 80043f0:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 80043f4:	f006 f80a 	bl	800a40c <HAL_I2C_Mem_Write>
	osDelay(2);
 80043f8:	4620      	mov	r0, r4
 80043fa:	f008 fe27 	bl	800d04c <osDelay>
	DPS368_run_mode(MODE_CMD_TEMP);
}
 80043fe:	b006      	add	sp, #24
 8004400:	bd10      	pop	{r4, pc}
 8004402:	bf00      	nop
 8004404:	20001104 	.word	0x20001104

08004408 <DPS368_calc_temp>:
float DPS368_calc_temp(float temp_scaled)
{
	float temperature;
//	temp_scaled = DPS368_get_scaled_temp();
//	printf("DPS TEMP SCALED VALUE: %.3f\r\n", temp_scaled);
	temperature = DPS_coef.C0 + DPS_coef.C1 * temp_scaled;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <DPS368_calc_temp+0x1c>)
 800440a:	ed93 7a01 	vldr	s14, [r3, #4]
 800440e:	edd3 7a00 	vldr	s15, [r3]
 8004412:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return temperature;
}
 800441a:	eee7 7a00 	vfma.f32	s15, s14, s0
 800441e:	eeb0 0a67 	vmov.f32	s0, s15
 8004422:	4770      	bx	lr
 8004424:	200002b8 	.word	0x200002b8

08004428 <DPS368_start_meas_press>:

void DPS368_start_meas_press(uint8_t ovr)
{
 8004428:	b500      	push	{lr}
	DPS368_conf_press(ovr, 0U);
 800442a:	2100      	movs	r1, #0
{
 800442c:	b087      	sub	sp, #28
	DPS368_conf_press(ovr, 0U);
 800442e:	f7ff fec7 	bl	80041c0 <DPS368_conf_press>
	SET_DPS368();
 8004432:	f003 fe05 	bl	8008040 <SET_DPS368>
	reg = mode;
 8004436:	2301      	movs	r3, #1
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8004438:	f10d 0217 	add.w	r2, sp, #23
 800443c:	21fa      	movs	r1, #250	; 0xfa
 800443e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8004442:	9200      	str	r2, [sp, #0]
 8004444:	21ee      	movs	r1, #238	; 0xee
 8004446:	2208      	movs	r2, #8
 8004448:	4805      	ldr	r0, [pc, #20]	; (8004460 <DPS368_start_meas_press+0x38>)
	reg = mode;
 800444a:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 800444e:	f005 ffdd 	bl	800a40c <HAL_I2C_Mem_Write>
	osDelay(2);
 8004452:	2002      	movs	r0, #2
 8004454:	f008 fdfa 	bl	800d04c <osDelay>
	DPS368_run_mode(MODE_CMD_PRESS);
}
 8004458:	b007      	add	sp, #28
 800445a:	f85d fb04 	ldr.w	pc, [sp], #4
 800445e:	bf00      	nop
 8004460:	20001104 	.word	0x20001104

08004464 <DPS368_get_scaled_temp>:

float DPS368_get_scaled_temp()
{
 8004464:	b500      	push	{lr}
 8004466:	b087      	sub	sp, #28
	SET_DPS368();
 8004468:	f003 fdea 	bl	8008040 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_temp;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 800446c:	2203      	movs	r2, #3
 800446e:	ab05      	add	r3, sp, #20
 8004470:	21fa      	movs	r1, #250	; 0xfa
 8004472:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	21ee      	movs	r1, #238	; 0xee
 800447a:	2301      	movs	r3, #1
 800447c:	4811      	ldr	r0, [pc, #68]	; (80044c4 <DPS368_get_scaled_temp+0x60>)
 800447e:	f006 f8f1 	bl	800a664 <HAL_I2C_Mem_Read>
	raw_temp = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8004482:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8004486:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800448a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800448e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8004492:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    if (*raw & ((uint32_t)1 << (length - 1)))
 8004496:	0dda      	lsrs	r2, r3, #23
	getTwosComplement(&raw_temp, 24);
	const float scalingT = 1.0f/Kt_coef;
 8004498:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <DPS368_get_scaled_temp+0x64>)
 800449a:	ed92 7a00 	vldr	s14, [r2]
 800449e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044a6:	ee86 0a87 	vdiv.f32	s0, s13, s14
        *raw -= (uint32_t)1 << length;
 80044aa:	bf18      	it	ne
 80044ac:	f103 437f 	addne.w	r3, r3, #4278190080	; 0xff000000
	return ((float)raw_temp * scalingT);
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80044b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80044bc:	b007      	add	sp, #28
 80044be:	f85d fb04 	ldr.w	pc, [sp], #4
 80044c2:	bf00      	nop
 80044c4:	20001104 	.word	0x20001104
 80044c8:	200002e0 	.word	0x200002e0

080044cc <DPS368_get_press>:

float DPS368_get_press(float temp_scaled)
{
 80044cc:	b500      	push	{lr}
 80044ce:	ed2d 8b02 	vpush	{d8}
 80044d2:	b087      	sub	sp, #28
 80044d4:	eeb0 8a40 	vmov.f32	s16, s0
	SET_DPS368();
 80044d8:	f003 fdb2 	bl	8008040 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_press;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_PRESS, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 80044dc:	ab05      	add	r3, sp, #20
 80044de:	21fa      	movs	r1, #250	; 0xfa
 80044e0:	2203      	movs	r2, #3
 80044e2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2200      	movs	r2, #0
 80044ea:	2301      	movs	r3, #1
 80044ec:	21ee      	movs	r1, #238	; 0xee
 80044ee:	482b      	ldr	r0, [pc, #172]	; (800459c <DPS368_get_press+0xd0>)
 80044f0:	f006 f8b8 	bl	800a664 <HAL_I2C_Mem_Read>
	raw_press = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 80044f4:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80044f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80044fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8004500:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8004504:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    if (*raw & ((uint32_t)1 << (length - 1)))
 8004508:	0dda      	lsrs	r2, r3, #23
	getTwosComplement(&raw_press, 24);
	const float scalingP = 1.0f/Kp_coef;
 800450a:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <DPS368_get_press+0xd4>)
 800450c:	ed92 7a00 	vldr	s14, [r2]
//	printf("DPS RAW PRESS VALUE: %ld\r\n", raw_press);
//	printf("DPS SCALING PRESS VALUE: %.12f\r\n", scalingP);
	float press_scaled, pressure;
	press_scaled = (float)raw_press * scalingP;
//	printf("DPS PRESS SCALED VALUE: %.3f\r\n", press_scaled);
    pressure = DPS_coef.C00;
 8004510:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <DPS368_get_press+0xd8>)
	const float scalingP = 1.0f/Kp_coef;
 8004512:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004516:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800451a:	eec6 6a07 	vdiv.f32	s13, s12, s14
        *raw -= (uint32_t)1 << length;
 800451e:	bf18      	it	ne
 8004520:	f103 437f 	addne.w	r3, r3, #4278190080	; 0xff000000
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004524:	ed92 7a08 	vldr	s14, [r2, #32]
	pressure += (temp_scaled * DPS_coef.C01);
 8004528:	edd2 4a04 	vldr	s9, [r2, #16]
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 800452c:	ed92 4a07 	vldr	s8, [r2, #28]
 8004530:	ed92 6a05 	vldr	s12, [r2, #20]
	press_scaled = (float)raw_press * scalingP;
 8004534:	ee07 3a90 	vmov	s15, r3
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004538:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 800453c:	ed92 7a06 	vldr	s14, [r2, #24]
	press_scaled = (float)raw_press * scalingP;
 8004540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004544:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
	press_scaled = (float)raw_press * scalingP;
 8004548:	ee66 6aa7 	vmul.f32	s13, s13, s15
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 800454c:	eef0 7a45 	vmov.f32	s15, s10
 8004550:	eee3 7aa6 	vfma.f32	s15, s7, s13
 8004554:	ed92 7a03 	vldr	s14, [r2, #12]
 8004558:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    pressure = DPS_coef.C00;
 800455c:	ed92 7a02 	vldr	s14, [r2, #8]
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004560:	eee7 5aa6 	vfma.f32	s11, s15, s13
    pressure = DPS_coef.C00;
 8004564:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	pressure += (temp_scaled * DPS_coef.C01);
 8004568:	eef8 4ae4 	vcvt.f32.s32	s9, s9
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 800456c:	eef0 7a47 	vmov.f32	s15, s14
 8004570:	eee5 7aa6 	vfma.f32	s15, s11, s13
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8004574:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8004578:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	pressure += (temp_scaled * DPS_coef.C01);
 800457c:	eee4 7a88 	vfma.f32	s15, s9, s16
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8004580:	eea4 6a26 	vfma.f32	s12, s8, s13
 8004584:	ee26 5a88 	vmul.f32	s10, s13, s16
//	return pressure *0.01f;
	return pressure;
}
 8004588:	eee5 7a06 	vfma.f32	s15, s10, s12
 800458c:	eeb0 0a67 	vmov.f32	s0, s15
 8004590:	b007      	add	sp, #28
 8004592:	ecbd 8b02 	vpop	{d8}
 8004596:	f85d fb04 	ldr.w	pc, [sp], #4
 800459a:	bf00      	nop
 800459c:	20001104 	.word	0x20001104
 80045a0:	200002dc 	.word	0x200002dc
 80045a4:	200002b8 	.word	0x200002b8

080045a8 <dps368_ovr_config>:

uint16_t dps368_ovr_config(uint8_t sensor_conf)
{
 80045a8:	b508      	push	{r3, lr}
    switch (sensor_conf) {
 80045aa:	2807      	cmp	r0, #7
 80045ac:	d84d      	bhi.n	800464a <dps368_ovr_config+0xa2>
 80045ae:	e8df f000 	tbb	[pc, r0]
 80045b2:	160d      	.short	0x160d
 80045b4:	3a31281f 	.word	0x3a31281f
 80045b8:	0443      	.short	0x0443
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
        case 6:
        	printf("DPS368 set TEMP & PRESS Oversample x64\r\n");
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
        case 7:
        	printf("DPS368 set TEMP & PRESS Oversample x128\r\n");
 80045ba:	4828      	ldr	r0, [pc, #160]	; (800465c <dps368_ovr_config+0xb4>)
 80045bc:	f00b fd18 	bl	800fff0 <puts>
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_128);
 80045c0:	2107      	movs	r1, #7

        default:
        	printf("DPS368 set TEMP Oversample x128, PRESS Oversample x4 \r\n");
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_4);
    }
}
 80045c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_128);
 80045c6:	4608      	mov	r0, r1
 80045c8:	f003 bcf4 	b.w	8007fb4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x1\r\n");
 80045cc:	4824      	ldr	r0, [pc, #144]	; (8004660 <dps368_ovr_config+0xb8>)
 80045ce:	f00b fd0f 	bl	800fff0 <puts>
            return combine_uint8(DPS_OVERSAMPLE_1,DPS_OVERSAMPLE_1);
 80045d2:	2100      	movs	r1, #0
}
 80045d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_1,DPS_OVERSAMPLE_1);
 80045d8:	4608      	mov	r0, r1
 80045da:	f003 bceb 	b.w	8007fb4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x2\r\n");
 80045de:	4821      	ldr	r0, [pc, #132]	; (8004664 <dps368_ovr_config+0xbc>)
 80045e0:	f00b fd06 	bl	800fff0 <puts>
            return combine_uint8(DPS_OVERSAMPLE_2,DPS_OVERSAMPLE_2);
 80045e4:	2101      	movs	r1, #1
}
 80045e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_2,DPS_OVERSAMPLE_2);
 80045ea:	4608      	mov	r0, r1
 80045ec:	f003 bce2 	b.w	8007fb4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x4\r\n");
 80045f0:	481d      	ldr	r0, [pc, #116]	; (8004668 <dps368_ovr_config+0xc0>)
 80045f2:	f00b fcfd 	bl	800fff0 <puts>
            return combine_uint8(DPS_OVERSAMPLE_4,DPS_OVERSAMPLE_4);
 80045f6:	2102      	movs	r1, #2
}
 80045f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_4,DPS_OVERSAMPLE_4);
 80045fc:	4608      	mov	r0, r1
 80045fe:	f003 bcd9 	b.w	8007fb4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x8\r\n");
 8004602:	481a      	ldr	r0, [pc, #104]	; (800466c <dps368_ovr_config+0xc4>)
 8004604:	f00b fcf4 	bl	800fff0 <puts>
            return combine_uint8(DPS_OVERSAMPLE_8,DPS_OVERSAMPLE_8);
 8004608:	2103      	movs	r1, #3
}
 800460a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_8,DPS_OVERSAMPLE_8);
 800460e:	4608      	mov	r0, r1
 8004610:	f003 bcd0 	b.w	8007fb4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x16\r\n");
 8004614:	4816      	ldr	r0, [pc, #88]	; (8004670 <dps368_ovr_config+0xc8>)
 8004616:	f00b fceb 	bl	800fff0 <puts>
            return combine_uint8(DPS_OVERSAMPLE_16,DPS_OVERSAMPLE_16);
 800461a:	2104      	movs	r1, #4
}
 800461c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_16,DPS_OVERSAMPLE_16);
 8004620:	4608      	mov	r0, r1
 8004622:	f003 bcc7 	b.w	8007fb4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x32\r\n");
 8004626:	4813      	ldr	r0, [pc, #76]	; (8004674 <dps368_ovr_config+0xcc>)
 8004628:	f00b fce2 	bl	800fff0 <puts>
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
 800462c:	2105      	movs	r1, #5
}
 800462e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
 8004632:	4608      	mov	r0, r1
 8004634:	f003 bcbe 	b.w	8007fb4 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x64\r\n");
 8004638:	480f      	ldr	r0, [pc, #60]	; (8004678 <dps368_ovr_config+0xd0>)
 800463a:	f00b fcd9 	bl	800fff0 <puts>
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
 800463e:	2106      	movs	r1, #6
}
 8004640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
 8004644:	4608      	mov	r0, r1
 8004646:	f003 bcb5 	b.w	8007fb4 <combine_uint8>
        	printf("DPS368 set TEMP Oversample x128, PRESS Oversample x4 \r\n");
 800464a:	480c      	ldr	r0, [pc, #48]	; (800467c <dps368_ovr_config+0xd4>)
 800464c:	f00b fcd0 	bl	800fff0 <puts>
}
 8004650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_4);
 8004654:	2102      	movs	r1, #2
 8004656:	2007      	movs	r0, #7
 8004658:	f003 bcac 	b.w	8007fb4 <combine_uint8>
 800465c:	0801495c 	.word	0x0801495c
 8004660:	08014844 	.word	0x08014844
 8004664:	0801486c 	.word	0x0801486c
 8004668:	08014894 	.word	0x08014894
 800466c:	080148bc 	.word	0x080148bc
 8004670:	080148e4 	.word	0x080148e4
 8004674:	0801490c 	.word	0x0801490c
 8004678:	08014934 	.word	0x08014934
 800467c:	08014988 	.word	0x08014988

08004680 <PreSleepProcessing>:

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
/* place for user code */
}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <PostSleepProcessing>:
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop

08004688 <gsm_gprs_setApName>:
#include "gsm.h"

#if (_GSM_GPRS == 1)
//###############################################################################################################
bool gsm_gprs_setApName(const char *apName)
{
 8004688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800468c:	b085      	sub	sp, #20
  if (apName == NULL)
 800468e:	b130      	cbz	r0, 800469e <gsm_gprs_setApName+0x16>
  {
    gsm_printf("[GSM] gprs_setApName(%s) failed!\r\n", apName);
    return false;
  }
  if (gsm_lock(10000) == false)
 8004690:	4605      	mov	r5, r0
 8004692:	f242 7010 	movw	r0, #10000	; 0x2710
 8004696:	f000 faab 	bl	8004bf0 <gsm_lock>
 800469a:	4604      	mov	r4, r0
 800469c:	b920      	cbnz	r0, 80046a8 <gsm_gprs_setApName+0x20>
  }
  if (gsm_command("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
  {
    gsm_printf("[GSM] gprs_setApName(%s) failed!\r\n", apName);
    gsm_unlock();
    return false;
 800469e:	2400      	movs	r4, #0
    return true;
  }
  gsm_printf("[GSM] gprs_setApName(%s) failed!\r\n", apName);
  gsm_unlock();
  return false;
}
 80046a0:	4620      	mov	r0, r4
 80046a2:	b005      	add	sp, #20
 80046a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (gsm_command("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 80046a8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8004714 <gsm_gprs_setApName+0x8c>
 80046ac:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8004718 <gsm_gprs_setApName+0x90>
 80046b0:	4914      	ldr	r1, [pc, #80]	; (8004704 <gsm_gprs_setApName+0x7c>)
 80046b2:	4815      	ldr	r0, [pc, #84]	; (8004708 <gsm_gprs_setApName+0x80>)
 80046b4:	2600      	movs	r6, #0
 80046b6:	2702      	movs	r7, #2
 80046b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80046bc:	9701      	str	r7, [sp, #4]
 80046be:	9600      	str	r6, [sp, #0]
 80046c0:	4633      	mov	r3, r6
 80046c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046c6:	f7fd fa11 	bl	8001aec <atc_command>
 80046ca:	2801      	cmp	r0, #1
 80046cc:	d002      	beq.n	80046d4 <gsm_gprs_setApName+0x4c>
    gsm_unlock();
 80046ce:	f000 faa9 	bl	8004c24 <gsm_unlock>
 80046d2:	e7e4      	b.n	800469e <gsm_gprs_setApName+0x16>
  sprintf((char*)gsm.buffer, "AT+SAPBR=3,1,\"APN\",\"%s\"\r\n", apName);
 80046d4:	490d      	ldr	r1, [pc, #52]	; (800470c <gsm_gprs_setApName+0x84>)
 80046d6:	480e      	ldr	r0, [pc, #56]	; (8004710 <gsm_gprs_setApName+0x88>)
 80046d8:	462a      	mov	r2, r5
 80046da:	f00b fc91 	bl	8010000 <siprintf>
  if (gsm_command((char*)gsm.buffer, 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 80046de:	490c      	ldr	r1, [pc, #48]	; (8004710 <gsm_gprs_setApName+0x88>)
 80046e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80046e4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80046e8:	9600      	str	r6, [sp, #0]
 80046ea:	4633      	mov	r3, r6
 80046ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046f0:	f5a1 60c7 	sub.w	r0, r1, #1592	; 0x638
 80046f4:	f7fd f9fa 	bl	8001aec <atc_command>
 80046f8:	2801      	cmp	r0, #1
 80046fa:	d1e8      	bne.n	80046ce <gsm_gprs_setApName+0x46>
    gsm_unlock();
 80046fc:	f000 fa92 	bl	8004c24 <gsm_unlock>
    return true;
 8004700:	e7ce      	b.n	80046a0 <gsm_gprs_setApName+0x18>
 8004702:	bf00      	nop
 8004704:	080149c0 	.word	0x080149c0
 8004708:	200002ec 	.word	0x200002ec
 800470c:	080149f4 	.word	0x080149f4
 8004710:	20000924 	.word	0x20000924
 8004714:	080149e0 	.word	0x080149e0
 8004718:	080149ec 	.word	0x080149ec

0800471c <gsm_gprs_connect>:
//###############################################################################################################
bool gsm_gprs_connect(void)
{
 800471c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  gsm_printf("[GSM] gprs_connect() begin\r\n");
  if (gsm_lock(10000) == false)
 8004720:	f242 7010 	movw	r0, #10000	; 0x2710
{
 8004724:	b085      	sub	sp, #20
  if (gsm_lock(10000) == false)
 8004726:	f000 fa63 	bl	8004bf0 <gsm_lock>
 800472a:	4604      	mov	r4, r0
 800472c:	b918      	cbnz	r0, 8004736 <gsm_gprs_connect+0x1a>
  gsm.gprs.connected = true;
  gsm.gprs.connectedLast = true;
  gsm_printf("[GSM] gprs_connect() done\r\n");
  gsm_unlock();
  return true;
}
 800472e:	4620      	mov	r0, r4
 8004730:	b005      	add	sp, #20
 8004732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  gsm_command("AT+SAPBR=0,1\r\n", 5000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8004736:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8004810 <gsm_gprs_connect+0xf4>
 800473a:	4e2c      	ldr	r6, [pc, #176]	; (80047ec <gsm_gprs_connect+0xd0>)
 800473c:	4f2c      	ldr	r7, [pc, #176]	; (80047f0 <gsm_gprs_connect+0xd4>)
 800473e:	492d      	ldr	r1, [pc, #180]	; (80047f4 <gsm_gprs_connect+0xd8>)
 8004740:	f04f 0800 	mov.w	r8, #0
 8004744:	2502      	movs	r5, #2
 8004746:	4643      	mov	r3, r8
 8004748:	f241 3288 	movw	r2, #5000	; 0x1388
 800474c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8004750:	9501      	str	r5, [sp, #4]
 8004752:	f8cd 8000 	str.w	r8, [sp]
 8004756:	4648      	mov	r0, r9
 8004758:	f7fd f9c8 	bl	8001aec <atc_command>
  gsm_delay(2000);
 800475c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004760:	f008 fc74 	bl	800d04c <osDelay>
  if (gsm_command("AT+SAPBR=1,1\r\n", 90000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 8004764:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8004768:	e9cd 8500 	strd	r8, r5, [sp]
 800476c:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <gsm_gprs_connect+0xdc>)
 800476e:	4923      	ldr	r1, [pc, #140]	; (80047fc <gsm_gprs_connect+0xe0>)
 8004770:	4643      	mov	r3, r8
 8004772:	4648      	mov	r0, r9
 8004774:	f7fd f9ba 	bl	8001aec <atc_command>
 8004778:	2801      	cmp	r0, #1
 800477a:	d114      	bne.n	80047a6 <gsm_gprs_connect+0x8a>
  gsm_delay(2000);
 800477c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004780:	f008 fc64 	bl	800d04c <osDelay>
  if (gsm_command("AT+SAPBR=2,1\r\n", 1000, (char*)gsm.buffer, sizeof(gsm.buffer), 2, "\r\n+SAPBR: 1,1,", "\r\nERROR\r\n") != 1)
 8004784:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <gsm_gprs_connect+0xe4>)
 8004786:	9302      	str	r3, [sp, #8]
 8004788:	f240 53cc 	movw	r3, #1484	; 0x5cc
 800478c:	e9cd 3500 	strd	r3, r5, [sp]
 8004790:	491c      	ldr	r1, [pc, #112]	; (8004804 <gsm_gprs_connect+0xe8>)
 8004792:	9603      	str	r6, [sp, #12]
 8004794:	f509 63c7 	add.w	r3, r9, #1592	; 0x638
 8004798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800479c:	4648      	mov	r0, r9
 800479e:	f7fd f9a5 	bl	8001aec <atc_command>
 80047a2:	2801      	cmp	r0, #1
 80047a4:	d009      	beq.n	80047ba <gsm_gprs_connect+0x9e>
    gsm.gprs.connected = false;
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <gsm_gprs_connect+0xec>)
 80047a8:	2400      	movs	r4, #0
 80047aa:	f8a3 4c3c 	strh.w	r4, [r3, #3132]	; 0xc3c
    gsm_unlock();
 80047ae:	f000 fa39 	bl	8004c24 <gsm_unlock>
}
 80047b2:	4620      	mov	r0, r4
 80047b4:	b005      	add	sp, #20
 80047b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(gsm.gprs.ip, 0, sizeof(gsm.gprs.ip));
 80047ba:	f609 4236 	addw	r2, r9, #3126	; 0xc36
  sscanf((char*)gsm.buffer, "\r\n+SAPBR: 1,1,\"%[^\"\r\n]", gsm.gprs.ip);
 80047be:	4913      	ldr	r1, [pc, #76]	; (800480c <gsm_gprs_connect+0xf0>)
  memset(gsm.gprs.ip, 0, sizeof(gsm.gprs.ip));
 80047c0:	f8c9 8c36 	str.w	r8, [r9, #3126]	; 0xc36
  sscanf((char*)gsm.buffer, "\r\n+SAPBR: 1,1,\"%[^\"\r\n]", gsm.gprs.ip);
 80047c4:	f2a2 50fe 	subw	r0, r2, #1534	; 0x5fe
  memset(gsm.gprs.ip, 0, sizeof(gsm.gprs.ip));
 80047c8:	f8c9 8c3a 	str.w	r8, [r9, #3130]	; 0xc3a
 80047cc:	f8c9 8c3e 	str.w	r8, [r9, #3134]	; 0xc3e
 80047d0:	f8c9 8c42 	str.w	r8, [r9, #3138]	; 0xc42
  sscanf((char*)gsm.buffer, "\r\n+SAPBR: 1,1,\"%[^\"\r\n]", gsm.gprs.ip);
 80047d4:	f00b fc34 	bl	8010040 <siscanf>
  gsm.gprs.connected = true;
 80047d8:	f240 1301 	movw	r3, #257	; 0x101
 80047dc:	f8a9 3c34 	strh.w	r3, [r9, #3124]	; 0xc34
  gsm_unlock();
 80047e0:	f000 fa20 	bl	8004c24 <gsm_unlock>
}
 80047e4:	4620      	mov	r0, r4
 80047e6:	b005      	add	sp, #20
 80047e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047ec:	080149e0 	.word	0x080149e0
 80047f0:	080149ec 	.word	0x080149ec
 80047f4:	08014a10 	.word	0x08014a10
 80047f8:	00015f90 	.word	0x00015f90
 80047fc:	08014a20 	.word	0x08014a20
 8004800:	08014a40 	.word	0x08014a40
 8004804:	08014a30 	.word	0x08014a30
 8004808:	200002e4 	.word	0x200002e4
 800480c:	08014a50 	.word	0x08014a50
 8004810:	200002ec 	.word	0x200002ec

08004814 <gsm_gprs_ntpServer>:
  gsm_unlock();
  return gsm_ftp_error_none;
}
//###############################################################################################################
bool gsm_gprs_ntpServer(char *server, int8_t time_zone_in_quarter)
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (gsm.gprs.connected == false)
 8004816:	4f1b      	ldr	r7, [pc, #108]	; (8004884 <gsm_gprs_ntpServer+0x70>)
 8004818:	f897 3c3c 	ldrb.w	r3, [r7, #3132]	; 0xc3c
{
 800481c:	b085      	sub	sp, #20
  if (gsm.gprs.connected == false)
 800481e:	b91b      	cbnz	r3, 8004828 <gsm_gprs_ntpServer+0x14>
  {
    gsm_printf("[GSM] gprs_ntpServer(%s, %d) failed!\r\n", server, time_zone_in_quarter);
    return false;
 8004820:	2400      	movs	r4, #0
    return false;
  }
  gsm_printf("[GSM] gprs_ntpServer(%s, %d) done\r\n", server, time_zone_in_quarter);
  gsm_unlock();
  return true;
}
 8004822:	4620      	mov	r0, r4
 8004824:	b005      	add	sp, #20
 8004826:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (gsm_lock(10000) == false)
 8004828:	4605      	mov	r5, r0
 800482a:	f242 7010 	movw	r0, #10000	; 0x2710
 800482e:	460e      	mov	r6, r1
 8004830:	f000 f9de 	bl	8004bf0 <gsm_lock>
 8004834:	4604      	mov	r4, r0
 8004836:	2800      	cmp	r0, #0
 8004838:	d0f2      	beq.n	8004820 <gsm_gprs_ntpServer+0xc>
  sprintf((char*)gsm.buffer, "AT+CNTP=\"%s\",%d\r\n", server, time_zone_in_quarter);
 800483a:	462a      	mov	r2, r5
 800483c:	4912      	ldr	r1, [pc, #72]	; (8004888 <gsm_gprs_ntpServer+0x74>)
 800483e:	4633      	mov	r3, r6
 8004840:	f507 60c8 	add.w	r0, r7, #1600	; 0x640
 8004844:	f00b fbdc 	bl	8010000 <siprintf>
  if (gsm_command((char*)gsm.buffer, 10000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 8004848:	4a10      	ldr	r2, [pc, #64]	; (800488c <gsm_gprs_ntpServer+0x78>)
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <gsm_gprs_ntpServer+0x7c>)
 800484c:	2500      	movs	r5, #0
 800484e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8004852:	2302      	movs	r3, #2
 8004854:	e9cd 5300 	strd	r5, r3, [sp]
 8004858:	f242 7210 	movw	r2, #10000	; 0x2710
 800485c:	462b      	mov	r3, r5
 800485e:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8004862:	f107 0008 	add.w	r0, r7, #8
 8004866:	f7fd f941 	bl	8001aec <atc_command>
 800486a:	2801      	cmp	r0, #1
 800486c:	d005      	beq.n	800487a <gsm_gprs_ntpServer+0x66>
    gsm_unlock();
 800486e:	f000 f9d9 	bl	8004c24 <gsm_unlock>
    return false;
 8004872:	462c      	mov	r4, r5
}
 8004874:	4620      	mov	r0, r4
 8004876:	b005      	add	sp, #20
 8004878:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gsm_unlock();
 800487a:	f000 f9d3 	bl	8004c24 <gsm_unlock>
}
 800487e:	4620      	mov	r0, r4
 8004880:	b005      	add	sp, #20
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004884:	200002e4 	.word	0x200002e4
 8004888:	08014a68 	.word	0x08014a68
 800488c:	080149e0 	.word	0x080149e0
 8004890:	080149ec 	.word	0x080149ec

08004894 <gsm_gprs_ntpSyncTime>:
//###############################################################################################################
bool gsm_gprs_ntpSyncTime(void)
{
 8004894:	b570      	push	{r4, r5, r6, lr}
  if (gsm.gprs.connected == false)
 8004896:	4d16      	ldr	r5, [pc, #88]	; (80048f0 <gsm_gprs_ntpSyncTime+0x5c>)
 8004898:	f895 3c3c 	ldrb.w	r3, [r5, #3132]	; 0xc3c
{
 800489c:	b084      	sub	sp, #16
  if (gsm.gprs.connected == false)
 800489e:	b91b      	cbnz	r3, 80048a8 <gsm_gprs_ntpSyncTime+0x14>
  {
    gsm_printf("[GSM] gprs_ntpSyncTime() 1 failed!\r\n");
    return false;
 80048a0:	2400      	movs	r4, #0
    return false;
  }
  gsm_printf("[GSM] gprs_ntpSyncTime() done\r\n");
  gsm_unlock();
  return true;
}
 80048a2:	4620      	mov	r0, r4
 80048a4:	b004      	add	sp, #16
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
  if (gsm_lock(10000) == false)
 80048a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80048ac:	f000 f9a0 	bl	8004bf0 <gsm_lock>
 80048b0:	4604      	mov	r4, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0f4      	beq.n	80048a0 <gsm_gprs_ntpSyncTime+0xc>
  if (gsm_command("AT+CNTP\r\n", 10000, NULL, 0, 2, "\r\n+CNTP: 1\r\n", "\r\nERROR\r\n") != 1)
 80048b6:	4a0f      	ldr	r2, [pc, #60]	; (80048f4 <gsm_gprs_ntpSyncTime+0x60>)
 80048b8:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <gsm_gprs_ntpSyncTime+0x64>)
 80048ba:	4910      	ldr	r1, [pc, #64]	; (80048fc <gsm_gprs_ntpSyncTime+0x68>)
 80048bc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80048c0:	2600      	movs	r6, #0
 80048c2:	2302      	movs	r3, #2
 80048c4:	e9cd 6300 	strd	r6, r3, [sp]
 80048c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80048cc:	4633      	mov	r3, r6
 80048ce:	f105 0008 	add.w	r0, r5, #8
 80048d2:	f7fd f90b 	bl	8001aec <atc_command>
 80048d6:	2801      	cmp	r0, #1
 80048d8:	d005      	beq.n	80048e6 <gsm_gprs_ntpSyncTime+0x52>
    gsm_unlock();
 80048da:	f000 f9a3 	bl	8004c24 <gsm_unlock>
    return false;
 80048de:	4634      	mov	r4, r6
}
 80048e0:	4620      	mov	r0, r4
 80048e2:	b004      	add	sp, #16
 80048e4:	bd70      	pop	{r4, r5, r6, pc}
  gsm_unlock();
 80048e6:	f000 f99d 	bl	8004c24 <gsm_unlock>
}
 80048ea:	4620      	mov	r0, r4
 80048ec:	b004      	add	sp, #16
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	200002e4 	.word	0x200002e4
 80048f4:	080149e0 	.word	0x080149e0
 80048f8:	08014a88 	.word	0x08014a88
 80048fc:	08014a7c 	.word	0x08014a7c

08004900 <gsm_gprs_ntpGetTime>:
//###############################################################################################################
bool gsm_gprs_ntpGetTime(char *string)
{
 8004900:	b530      	push	{r4, r5, lr}
 8004902:	b085      	sub	sp, #20
  if (string == NULL)
 8004904:	b130      	cbz	r0, 8004914 <gsm_gprs_ntpGetTime+0x14>
  {
    gsm_printf("[GSM] gprs_ntpGetTime() failed!\r\n");
    return false;
  }
  if (gsm_lock(10000) == false)
 8004906:	4605      	mov	r5, r0
 8004908:	f242 7010 	movw	r0, #10000	; 0x2710
 800490c:	f000 f970 	bl	8004bf0 <gsm_lock>
 8004910:	4604      	mov	r4, r0
 8004912:	b918      	cbnz	r0, 800491c <gsm_gprs_ntpGetTime+0x1c>
  }
  if (gsm_command("AT+CCLK?\r\n", 10000, (char*)gsm.buffer, sizeof(gsm.buffer), 2, "\r\n+CCLK:", "\r\nERROR\r\n") != 1)
  {
    gsm_printf("[GSM] gprs_ntpGetTime() failed!\r\n");
    gsm_unlock();
    return false;
 8004914:	2400      	movs	r4, #0
  }
  sscanf((char*)gsm.buffer, "\r\n+CCLK: \"%[^\"\r\n]", string);
  gsm_printf("[GSM] gprs_ntpGetTime() done. %s\r\n", string);
  gsm_unlock();
  return true;
}
 8004916:	4620      	mov	r0, r4
 8004918:	b005      	add	sp, #20
 800491a:	bd30      	pop	{r4, r5, pc}
  if (gsm_command("AT+CCLK?\r\n", 10000, (char*)gsm.buffer, sizeof(gsm.buffer), 2, "\r\n+CCLK:", "\r\nERROR\r\n") != 1)
 800491c:	490f      	ldr	r1, [pc, #60]	; (800495c <gsm_gprs_ntpGetTime+0x5c>)
 800491e:	4a10      	ldr	r2, [pc, #64]	; (8004960 <gsm_gprs_ntpGetTime+0x60>)
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <gsm_gprs_ntpGetTime+0x64>)
 8004922:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8004926:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800492a:	2102      	movs	r1, #2
 800492c:	e9cd 2100 	strd	r2, r1, [sp]
 8004930:	f5a3 60c7 	sub.w	r0, r3, #1592	; 0x638
 8004934:	490c      	ldr	r1, [pc, #48]	; (8004968 <gsm_gprs_ntpGetTime+0x68>)
 8004936:	f242 7210 	movw	r2, #10000	; 0x2710
 800493a:	f7fd f8d7 	bl	8001aec <atc_command>
 800493e:	2801      	cmp	r0, #1
 8004940:	d002      	beq.n	8004948 <gsm_gprs_ntpGetTime+0x48>
    gsm_unlock();
 8004942:	f000 f96f 	bl	8004c24 <gsm_unlock>
 8004946:	e7e5      	b.n	8004914 <gsm_gprs_ntpGetTime+0x14>
  sscanf((char*)gsm.buffer, "\r\n+CCLK: \"%[^\"\r\n]", string);
 8004948:	4908      	ldr	r1, [pc, #32]	; (800496c <gsm_gprs_ntpGetTime+0x6c>)
 800494a:	4806      	ldr	r0, [pc, #24]	; (8004964 <gsm_gprs_ntpGetTime+0x64>)
 800494c:	462a      	mov	r2, r5
 800494e:	f00b fb77 	bl	8010040 <siscanf>
  gsm_unlock();
 8004952:	f000 f967 	bl	8004c24 <gsm_unlock>
}
 8004956:	4620      	mov	r0, r4
 8004958:	b005      	add	sp, #20
 800495a:	bd30      	pop	{r4, r5, pc}
 800495c:	080149e0 	.word	0x080149e0
 8004960:	08014aa4 	.word	0x08014aa4
 8004964:	20000924 	.word	0x20000924
 8004968:	08014a98 	.word	0x08014a98
 800496c:	08014ab0 	.word	0x08014ab0

08004970 <gsm_found>:

gsm_t gsm;

//###############################################################################################################
void gsm_found(char *found_str)
{
 8004970:	b570      	push	{r4, r5, r6, lr}
  char *str;

  str = strstr(found_str, "POWER DOWN\r\n");
 8004972:	495a      	ldr	r1, [pc, #360]	; (8004adc <gsm_found+0x16c>)
{
 8004974:	b082      	sub	sp, #8
 8004976:	4604      	mov	r4, r0
  str = strstr(found_str, "POWER DOWN\r\n");
 8004978:	f00b fcfe 	bl	8010378 <strstr>
  if (str != NULL)
 800497c:	b130      	cbz	r0, 800498c <gsm_found+0x1c>
  {
    gsm.status.power = 0;
 800497e:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <gsm_found+0x170>)
 8004980:	791a      	ldrb	r2, [r3, #4]
 8004982:	f36f 0200 	bfc	r2, #0, #1
 8004986:	711a      	strb	r2, [r3, #4]
  }
#endif
#if (_GSM_BLUETOOTH == 1)
  str = strstr(found_str, "");
#endif
}
 8004988:	b002      	add	sp, #8
 800498a:	bd70      	pop	{r4, r5, r6, pc}
  str = strstr(found_str, "\r\n+CREG: ");
 800498c:	4955      	ldr	r1, [pc, #340]	; (8004ae4 <gsm_found+0x174>)
 800498e:	4620      	mov	r0, r4
 8004990:	f00b fcf2 	bl	8010378 <strstr>
  if (str != NULL)
 8004994:	b1e8      	cbz	r0, 80049d2 <gsm_found+0x62>
    int16_t p1 = -1, p2 = -1;
 8004996:	f64f 74ff 	movw	r4, #65535	; 0xffff
    sscanf(str, "\r\n+CREG: %hd,%hd", &p1, &p2);
 800499a:	f10d 0306 	add.w	r3, sp, #6
 800499e:	aa01      	add	r2, sp, #4
 80049a0:	4951      	ldr	r1, [pc, #324]	; (8004ae8 <gsm_found+0x178>)
    int16_t p1 = -1, p2 = -1;
 80049a2:	f8ad 4004 	strh.w	r4, [sp, #4]
 80049a6:	f8ad 4006 	strh.w	r4, [sp, #6]
    sscanf(str, "\r\n+CREG: %hd,%hd", &p1, &p2);
 80049aa:	f00b fb49 	bl	8010040 <siscanf>
    if (p2 == 1)
 80049ae:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
      gsm.status.netReg = 1;
 80049b2:	494b      	ldr	r1, [pc, #300]	; (8004ae0 <gsm_found+0x170>)
    if (p2 == 1)
 80049b4:	f1a3 0301 	sub.w	r3, r3, #1
 80049b8:	fab3 f383 	clz	r3, r3
      gsm.status.netReg = 1;
 80049bc:	790a      	ldrb	r2, [r1, #4]
    if (p2 == 1)
 80049be:	095b      	lsrs	r3, r3, #5
      gsm.status.netReg = 1;
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	f022 020c 	bic.w	r2, r2, #12
 80049c6:	f043 0308 	orr.w	r3, r3, #8
 80049ca:	4313      	orrs	r3, r2
 80049cc:	710b      	strb	r3, [r1, #4]
}
 80049ce:	b002      	add	sp, #8
 80049d0:	bd70      	pop	{r4, r5, r6, pc}
  str = strstr(found_str, "\r\n+CMTI:");
 80049d2:	4946      	ldr	r1, [pc, #280]	; (8004aec <gsm_found+0x17c>)
 80049d4:	4620      	mov	r0, r4
 80049d6:	f00b fccf 	bl	8010378 <strstr>
  if (str != NULL)
 80049da:	b118      	cbz	r0, 80049e4 <gsm_found+0x74>
    str = strchr(str, ',');
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	f00b fc3d 	bl	801025c <strchr>
    if (str != NULL)
 80049e2:	b9a0      	cbnz	r0, 8004a0e <gsm_found+0x9e>
  str = strstr(found_str, "\r\nCLOSED\r\n");
 80049e4:	4942      	ldr	r1, [pc, #264]	; (8004af0 <gsm_found+0x180>)
 80049e6:	4620      	mov	r0, r4
 80049e8:	f00b fcc6 	bl	8010378 <strstr>
  if (str != NULL)
 80049ec:	b120      	cbz	r0, 80049f8 <gsm_found+0x88>
    gsm.gprs.tcpConnection = 0;
 80049ee:	4b3c      	ldr	r3, [pc, #240]	; (8004ae0 <gsm_found+0x170>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2c5a 	strb.w	r2, [r3, #3162]	; 0xc5a
    return;
 80049f6:	e7c7      	b.n	8004988 <gsm_found+0x18>
  str = strstr(found_str, "\r\n+CIPRXGET: 1\r\n");
 80049f8:	493e      	ldr	r1, [pc, #248]	; (8004af4 <gsm_found+0x184>)
 80049fa:	4620      	mov	r0, r4
 80049fc:	f00b fcbc 	bl	8010378 <strstr>
  if (str != NULL)
 8004a00:	4605      	mov	r5, r0
 8004a02:	b158      	cbz	r0, 8004a1c <gsm_found+0xac>
    gsm.gprs.gotData = 1;
 8004a04:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <gsm_found+0x170>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2c5b 	strb.w	r2, [r3, #3163]	; 0xc5b
    return;
 8004a0c:	e7bc      	b.n	8004988 <gsm_found+0x18>
      gsm.msg.newMsg = atoi(str);
 8004a0e:	3001      	adds	r0, #1
 8004a10:	f009 fb90 	bl	800e134 <atoi>
 8004a14:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <gsm_found+0x170>)
 8004a16:	f8a3 0c1a 	strh.w	r0, [r3, #3098]	; 0xc1a
      return;
 8004a1a:	e7b5      	b.n	8004988 <gsm_found+0x18>
  str = strstr(found_str, "\r\n+SMSTATE: 0\r\n");
 8004a1c:	4936      	ldr	r1, [pc, #216]	; (8004af8 <gsm_found+0x188>)
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f00b fcaa 	bl	8010378 <strstr>
  if (str != NULL)
 8004a24:	4606      	mov	r6, r0
 8004a26:	b118      	cbz	r0, 8004a30 <gsm_found+0xc0>
    gsm.gprs.mqttConnected = 0;
 8004a28:	4b2d      	ldr	r3, [pc, #180]	; (8004ae0 <gsm_found+0x170>)
 8004a2a:	f883 5ce1 	strb.w	r5, [r3, #3297]	; 0xce1
    return;
 8004a2e:	e7ab      	b.n	8004988 <gsm_found+0x18>
  str = strstr(found_str, "\r\n+SMPUBLISH: ");
 8004a30:	4620      	mov	r0, r4
 8004a32:	4932      	ldr	r1, [pc, #200]	; (8004afc <gsm_found+0x18c>)
 8004a34:	f00b fca0 	bl	8010378 <strstr>
  if (str != NULL)
 8004a38:	4604      	mov	r4, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d0a4      	beq.n	8004988 <gsm_found+0x18>
    memset(gsm.gprs.mqttMessage, 0, sizeof(gsm.gprs.mqttMessage));
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	4631      	mov	r1, r6
 8004a42:	482f      	ldr	r0, [pc, #188]	; (8004b00 <gsm_found+0x190>)
 8004a44:	f00b fc02 	bl	801024c <memset>
    memset(gsm.gprs.mqttTopic, 0, sizeof(gsm.gprs.mqttTopic));
 8004a48:	2240      	movs	r2, #64	; 0x40
 8004a4a:	4631      	mov	r1, r6
 8004a4c:	482d      	ldr	r0, [pc, #180]	; (8004b04 <gsm_found+0x194>)
 8004a4e:	f00b fbfd 	bl	801024c <memset>
    str = strtok(str, "\"");
 8004a52:	492d      	ldr	r1, [pc, #180]	; (8004b08 <gsm_found+0x198>)
 8004a54:	4620      	mov	r0, r4
 8004a56:	f00b fc33 	bl	80102c0 <strtok>
      str = strtok(NULL, "\"");
 8004a5a:	492b      	ldr	r1, [pc, #172]	; (8004b08 <gsm_found+0x198>)
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f00b fc2f 	bl	80102c0 <strtok>
      if (str == NULL)
 8004a62:	4604      	mov	r4, r0
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d08f      	beq.n	8004988 <gsm_found+0x18>
      endStr = strtok(NULL, "\"");
 8004a68:	4927      	ldr	r1, [pc, #156]	; (8004b08 <gsm_found+0x198>)
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f00b fc28 	bl	80102c0 <strtok>
      if (endStr == NULL)
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d089      	beq.n	8004988 <gsm_found+0x18>
      len = endStr - str;
 8004a74:	1b03      	subs	r3, r0, r4
 8004a76:	b2db      	uxtb	r3, r3
      if (len > sizeof(gsm.gprs.mqttTopic))
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d82a      	bhi.n	8004ad2 <gsm_found+0x162>
      if (len > 2)
 8004a7c:	2b02      	cmp	r3, #2
        len --;
 8004a7e:	bf8a      	itet	hi
 8004a80:	f103 33ff 	addhi.w	r3, r3, #4294967295
      strncpy(gsm.gprs.mqttTopic, str, len);
 8004a84:	461a      	movls	r2, r3
 8004a86:	b2da      	uxtbhi	r2, r3
 8004a88:	4621      	mov	r1, r4
 8004a8a:	481e      	ldr	r0, [pc, #120]	; (8004b04 <gsm_found+0x194>)
 8004a8c:	f00b fc05 	bl	801029a <strncpy>
      str = strtok(NULL, "\"");
 8004a90:	491d      	ldr	r1, [pc, #116]	; (8004b08 <gsm_found+0x198>)
 8004a92:	2000      	movs	r0, #0
 8004a94:	f00b fc14 	bl	80102c0 <strtok>
      if (str == NULL)
 8004a98:	4604      	mov	r4, r0
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	f43f af74 	beq.w	8004988 <gsm_found+0x18>
      endStr = strtok(NULL, "\"");
 8004aa0:	4919      	ldr	r1, [pc, #100]	; (8004b08 <gsm_found+0x198>)
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f00b fc0c 	bl	80102c0 <strtok>
      if (endStr == NULL)
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	f43f af6d 	beq.w	8004988 <gsm_found+0x18>
      len = endStr - str;
 8004aae:	1b03      	subs	r3, r0, r4
 8004ab0:	b2da      	uxtb	r2, r3
      if (len > sizeof(gsm.gprs.mqttMessage))
 8004ab2:	2a40      	cmp	r2, #64	; 0x40
 8004ab4:	d80f      	bhi.n	8004ad6 <gsm_found+0x166>
      if (len > 2)
 8004ab6:	2a02      	cmp	r2, #2
 8004ab8:	d901      	bls.n	8004abe <gsm_found+0x14e>
        len --;
 8004aba:	3a01      	subs	r2, #1
 8004abc:	b2d2      	uxtb	r2, r2
      strncpy(gsm.gprs.mqttMessage, str, len);
 8004abe:	4d08      	ldr	r5, [pc, #32]	; (8004ae0 <gsm_found+0x170>)
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	f505 604a 	add.w	r0, r5, #3232	; 0xca0
 8004ac6:	f00b fbe8 	bl	801029a <strncpy>
      gsm.gprs.mqttData = 1;      
 8004aca:	2301      	movs	r3, #1
 8004acc:	f885 3ce0 	strb.w	r3, [r5, #3296]	; 0xce0
 8004ad0:	e75a      	b.n	8004988 <gsm_found+0x18>
 8004ad2:	223f      	movs	r2, #63	; 0x3f
        len --;
 8004ad4:	e7d8      	b.n	8004a88 <gsm_found+0x118>
        len = sizeof(gsm.gprs.mqttMessage);
 8004ad6:	2240      	movs	r2, #64	; 0x40
 8004ad8:	e7ef      	b.n	8004aba <gsm_found+0x14a>
 8004ada:	bf00      	nop
 8004adc:	08014ac4 	.word	0x08014ac4
 8004ae0:	200002e4 	.word	0x200002e4
 8004ae4:	08014ad4 	.word	0x08014ad4
 8004ae8:	08014ae0 	.word	0x08014ae0
 8004aec:	08014af4 	.word	0x08014af4
 8004af0:	08014b00 	.word	0x08014b00
 8004af4:	08014b0c 	.word	0x08014b0c
 8004af8:	08014b20 	.word	0x08014b20
 8004afc:	08014b30 	.word	0x08014b30
 8004b00:	20000f84 	.word	0x20000f84
 8004b04:	20000f44 	.word	0x20000f44
 8004b08:	08014b40 	.word	0x08014b40

08004b0c <gsm_init_commands>:
//###############################################################################################################
void gsm_init_commands(void)
{
 8004b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  gsm_command("AT&F0\r\n", 5000, NULL, 0, 1, "\r\nOK\r\n");
 8004b0e:	4d2d      	ldr	r5, [pc, #180]	; (8004bc4 <gsm_init_commands+0xb8>)
 8004b10:	4f2d      	ldr	r7, [pc, #180]	; (8004bc8 <gsm_init_commands+0xbc>)
 8004b12:	492e      	ldr	r1, [pc, #184]	; (8004bcc <gsm_init_commands+0xc0>)
{
 8004b14:	b085      	sub	sp, #20
  gsm_command("AT&F0\r\n", 5000, NULL, 0, 1, "\r\nOK\r\n");
 8004b16:	2400      	movs	r4, #0
 8004b18:	2601      	movs	r6, #1
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8004b20:	9400      	str	r4, [sp, #0]
 8004b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b26:	4628      	mov	r0, r5
 8004b28:	f7fc ffe0 	bl	8001aec <atc_command>
  gsm_command("ATE1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8004b32:	4927      	ldr	r1, [pc, #156]	; (8004bd0 <gsm_init_commands+0xc4>)
 8004b34:	9400      	str	r4, [sp, #0]
 8004b36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f7fc ffd6 	bl	8001aec <atc_command>
  gsm_command("AT+CREG=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8004b40:	4623      	mov	r3, r4
 8004b42:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8004b46:	4923      	ldr	r1, [pc, #140]	; (8004bd4 <gsm_init_commands+0xc8>)
 8004b48:	9400      	str	r4, [sp, #0]
 8004b4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7fc ffcc 	bl	8001aec <atc_command>
  gsm_command("AT+FSHEX=0\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8004b54:	4623      	mov	r3, r4
 8004b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b5a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8004b5e:	491e      	ldr	r1, [pc, #120]	; (8004bd8 <gsm_init_commands+0xcc>)
 8004b60:	9400      	str	r4, [sp, #0]
 8004b62:	4628      	mov	r0, r5
 8004b64:	f7fc ffc2 	bl	8001aec <atc_command>
  gsm_command("AT+COLP=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
  gsm_command("AT+CLIP=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
  gsm_command("AT+DDET=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
#endif
#if (_GSM_MSG == 1)
  gsm_msg_textMode(true, false);
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f001 faa4 	bl	80060b8 <gsm_msg_textMode>
  gsm_msg_selectStorage(gsm_msg_store_module);
 8004b70:	2002      	movs	r0, #2
 8004b72:	f001 fb83 	bl	800627c <gsm_msg_selectStorage>
  gsm_msg_selectCharacterSet(gsm_msg_chSet_ira);
 8004b76:	2003      	movs	r0, #3
 8004b78:	f001 fbea 	bl	8006350 <gsm_msg_selectCharacterSet>
#endif
#if (_GSM_GPRS == 1)
  gsm_command("AT+CIPSHUT\r\n", 5000, NULL, 0, 2, "\r\nSHUT OK\r\n", "\r\nERROR\r\n");
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <gsm_init_commands+0xd0>)
 8004b7e:	9303      	str	r3, [sp, #12]
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <gsm_init_commands+0xd4>)
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	2302      	movs	r3, #2
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	4916      	ldr	r1, [pc, #88]	; (8004be4 <gsm_init_commands+0xd8>)
 8004b8a:	9400      	str	r4, [sp, #0]
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b92:	4628      	mov	r0, r5
 8004b94:	f7fc ffaa 	bl	8001aec <atc_command>
  gsm_command("AT+CIPHEAD=0\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8004b98:	4623      	mov	r3, r4
 8004b9a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8004b9e:	4912      	ldr	r1, [pc, #72]	; (8004be8 <gsm_init_commands+0xdc>)
 8004ba0:	9400      	str	r4, [sp, #0]
 8004ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f7fc ffa0 	bl	8001aec <atc_command>
  gsm_command("AT+CIPRXGET=1\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n");
 8004bac:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8004bb0:	490e      	ldr	r1, [pc, #56]	; (8004bec <gsm_init_commands+0xe0>)
 8004bb2:	9400      	str	r4, [sp, #0]
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f7fc ff96 	bl	8001aec <atc_command>
#endif
#if (_GSM_BLUETOOTH == 1)

#endif
}
 8004bc0:	b005      	add	sp, #20
 8004bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc4:	200002ec 	.word	0x200002ec
 8004bc8:	080149ec 	.word	0x080149ec
 8004bcc:	08014b44 	.word	0x08014b44
 8004bd0:	08014b4c 	.word	0x08014b4c
 8004bd4:	08014b54 	.word	0x08014b54
 8004bd8:	08014b60 	.word	0x08014b60
 8004bdc:	080149e0 	.word	0x080149e0
 8004be0:	08014b80 	.word	0x08014b80
 8004be4:	08014b70 	.word	0x08014b70
 8004be8:	08014b8c 	.word	0x08014b8c
 8004bec:	08014b9c 	.word	0x08014b9c

08004bf0 <gsm_lock>:
//###############################################################################################################
bool gsm_lock(uint32_t timeout_ms)
{
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4605      	mov	r5, r0
  uint32_t start = HAL_GetTick();
 8004bf4:	f003 feb2 	bl	800895c <HAL_GetTick>
  while (HAL_GetTick() - start < timeout_ms)
  {
    if (gsm.lock == 0)
 8004bf8:	4e09      	ldr	r6, [pc, #36]	; (8004c20 <gsm_lock+0x30>)
  uint32_t start = HAL_GetTick();
 8004bfa:	4604      	mov	r4, r0
  while (HAL_GetTick() - start < timeout_ms)
 8004bfc:	e003      	b.n	8004c06 <gsm_lock+0x16>
    if (gsm.lock == 0)
 8004bfe:	7873      	ldrb	r3, [r6, #1]
 8004c00:	b153      	cbz	r3, 8004c18 <gsm_lock+0x28>
    {
      gsm.lock = 1;
      return true;
    }
    gsm_delay(1);
 8004c02:	f008 fa23 	bl	800d04c <osDelay>
  while (HAL_GetTick() - start < timeout_ms)
 8004c06:	f003 fea9 	bl	800895c <HAL_GetTick>
 8004c0a:	1b03      	subs	r3, r0, r4
 8004c0c:	42ab      	cmp	r3, r5
    gsm_delay(1);
 8004c0e:	f04f 0001 	mov.w	r0, #1
  while (HAL_GetTick() - start < timeout_ms)
 8004c12:	d3f4      	bcc.n	8004bfe <gsm_lock+0xe>
  }
  return false;
 8004c14:	2000      	movs	r0, #0
}
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
      gsm.lock = 1;
 8004c18:	2001      	movs	r0, #1
 8004c1a:	7070      	strb	r0, [r6, #1]
}
 8004c1c:	bd70      	pop	{r4, r5, r6, pc}
 8004c1e:	bf00      	nop
 8004c20:	200002e4 	.word	0x200002e4

08004c24 <gsm_unlock>:
//###############################################################################################################
void gsm_unlock()
{
  gsm.lock = 0;
 8004c24:	4b01      	ldr	r3, [pc, #4]	; (8004c2c <gsm_unlock+0x8>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	705a      	strb	r2, [r3, #1]
}
 8004c2a:	4770      	bx	lr
 8004c2c:	200002e4 	.word	0x200002e4

08004c30 <gsm_init>:
//###############################################################################################################
bool gsm_init(void)
{
 8004c30:	b538      	push	{r3, r4, r5, lr}
  if (gsm.inited == 1)
 8004c32:	4c2e      	ldr	r4, [pc, #184]	; (8004cec <gsm_init+0xbc>)
 8004c34:	7820      	ldrb	r0, [r4, #0]
 8004c36:	2801      	cmp	r0, #1
 8004c38:	d054      	beq.n	8004ce4 <gsm_init+0xb4>
    return true;
  gsm_printf("[GSM] init begin\r\n");
  HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_SET);
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	482c      	ldr	r0, [pc, #176]	; (8004cf0 <gsm_init+0xc0>)
 8004c40:	f005 f87e 	bl	8009d40 <HAL_GPIO_WritePin>
  gsm_delay(3000);
 8004c44:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004c48:	f008 fa00 	bl	800d04c <osDelay>
  memset(&gsm, 0, sizeof(gsm));
 8004c4c:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004c50:	2100      	movs	r1, #0
 8004c52:	4620      	mov	r0, r4
 8004c54:	f00b fafa 	bl	801024c <memset>
  atc_init(&gsm.atc, "GSM ATC", _GSM_USART, gsm_found);
 8004c58:	4926      	ldr	r1, [pc, #152]	; (8004cf4 <gsm_init+0xc4>)
 8004c5a:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <gsm_init+0xc8>)
 8004c5c:	4a27      	ldr	r2, [pc, #156]	; (8004cfc <gsm_init+0xcc>)
 8004c5e:	f104 0008 	add.w	r0, r4, #8
 8004c62:	f7fc fe91 	bl	8001988 <atc_init>
  if (atc_addSearch(&gsm.atc, "POWER DOWN\r\n") == false)
 8004c66:	4926      	ldr	r1, [pc, #152]	; (8004d00 <gsm_init+0xd0>)
 8004c68:	f104 0008 	add.w	r0, r4, #8
 8004c6c:	f7fc ff08 	bl	8001a80 <atc_addSearch>
 8004c70:	b910      	cbnz	r0, 8004c78 <gsm_init+0x48>
    return false;
 8004c72:	2500      	movs	r5, #0
#endif
  gsm_delay(1000);
  gsm_printf("[GSM] init done\r\n");
  gsm.inited = 1;
  return true;
}
 8004c74:	4628      	mov	r0, r5
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
  if (atc_addSearch(&gsm.atc, "\r\n+CREG:") == false)
 8004c78:	4922      	ldr	r1, [pc, #136]	; (8004d04 <gsm_init+0xd4>)
 8004c7a:	f104 0008 	add.w	r0, r4, #8
 8004c7e:	f7fc feff 	bl	8001a80 <atc_addSearch>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d0f5      	beq.n	8004c72 <gsm_init+0x42>
  if (atc_addSearch(&gsm.atc, "\r\n+CMTI:") == false)
 8004c86:	4920      	ldr	r1, [pc, #128]	; (8004d08 <gsm_init+0xd8>)
 8004c88:	f104 0008 	add.w	r0, r4, #8
 8004c8c:	f7fc fef8 	bl	8001a80 <atc_addSearch>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d0ee      	beq.n	8004c72 <gsm_init+0x42>
  gsm.msg.newMsg = -1;
 8004c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (atc_addSearch(&gsm.atc, "\r\nCLOSED\r\n") == false)
 8004c98:	491c      	ldr	r1, [pc, #112]	; (8004d0c <gsm_init+0xdc>)
  gsm.msg.newMsg = -1;
 8004c9a:	f8a4 3c1a 	strh.w	r3, [r4, #3098]	; 0xc1a
  if (atc_addSearch(&gsm.atc, "\r\nCLOSED\r\n") == false)
 8004c9e:	f104 0008 	add.w	r0, r4, #8
 8004ca2:	f7fc feed 	bl	8001a80 <atc_addSearch>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d0e3      	beq.n	8004c72 <gsm_init+0x42>
  if (atc_addSearch(&gsm.atc, "\r\n+CIPRXGET: 1\r\n") == false)
 8004caa:	4919      	ldr	r1, [pc, #100]	; (8004d10 <gsm_init+0xe0>)
 8004cac:	f104 0008 	add.w	r0, r4, #8
 8004cb0:	f7fc fee6 	bl	8001a80 <atc_addSearch>
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d0dc      	beq.n	8004c72 <gsm_init+0x42>
   if (atc_addSearch(&gsm.atc, "\r\n+SMSTATE: ") == false)
 8004cb8:	4916      	ldr	r1, [pc, #88]	; (8004d14 <gsm_init+0xe4>)
 8004cba:	f104 0008 	add.w	r0, r4, #8
 8004cbe:	f7fc fedf 	bl	8001a80 <atc_addSearch>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0d5      	beq.n	8004c72 <gsm_init+0x42>
   if (atc_addSearch(&gsm.atc, "\r\n+SMPUBLISH: ") == false)
 8004cc6:	4914      	ldr	r1, [pc, #80]	; (8004d18 <gsm_init+0xe8>)
 8004cc8:	f104 0008 	add.w	r0, r4, #8
 8004ccc:	f7fc fed8 	bl	8001a80 <atc_addSearch>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	d0cd      	beq.n	8004c72 <gsm_init+0x42>
  gsm_delay(1000);
 8004cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cda:	f008 f9b7 	bl	800d04c <osDelay>
  gsm.inited = 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	7023      	strb	r3, [r4, #0]
  return true;
 8004ce2:	e7c7      	b.n	8004c74 <gsm_init+0x44>
    return true;
 8004ce4:	4605      	mov	r5, r0
}
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	bd38      	pop	{r3, r4, r5, pc}
 8004cea:	bf00      	nop
 8004cec:	200002e4 	.word	0x200002e4
 8004cf0:	48000c00 	.word	0x48000c00
 8004cf4:	08014bac 	.word	0x08014bac
 8004cf8:	08004971 	.word	0x08004971
 8004cfc:	40004400 	.word	0x40004400
 8004d00:	08014ac4 	.word	0x08014ac4
 8004d04:	08014bb4 	.word	0x08014bb4
 8004d08:	08014af4 	.word	0x08014af4
 8004d0c:	08014b00 	.word	0x08014b00
 8004d10:	08014b0c 	.word	0x08014b0c
 8004d14:	08014bc0 	.word	0x08014bc0
 8004d18:	08014b30 	.word	0x08014b30

08004d1c <gsm_power>:
  //  --- 60s timer  ######################

}
//###############################################################################################################
bool gsm_power(bool on_off)
{
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  gsm_printf("[GSM] power(%d) begin\r\n", on_off);
  uint8_t state = 0;
  if (on_off)
 8004d20:	4604      	mov	r4, r0
{
 8004d22:	b084      	sub	sp, #16
  if (on_off)
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d03d      	beq.n	8004da4 <gsm_power+0x88>
  {
		if (gsm.status.power == 1)
 8004d28:	4d3e      	ldr	r5, [pc, #248]	; (8004e24 <gsm_power+0x108>)
 8004d2a:	792a      	ldrb	r2, [r5, #4]
 8004d2c:	f012 0301 	ands.w	r3, r2, #1
 8004d30:	d135      	bne.n	8004d9e <gsm_power+0x82>
			return true;
    gsm.status.turnOn = 1;
    gsm.status.turnOff = 0;  
 8004d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  else
  {
    gsm.status.turnOn = 0;
    gsm.status.turnOff = 1;    
  }
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004d3a:	f04f 0801 	mov.w	r8, #1
 8004d3e:	4f3a      	ldr	r7, [pc, #232]	; (8004e28 <gsm_power+0x10c>)
 8004d40:	9702      	str	r7, [sp, #8]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	4939      	ldr	r1, [pc, #228]	; (8004e2c <gsm_power+0x110>)
    gsm.status.turnOff = 0;  
 8004d46:	712a      	strb	r2, [r5, #4]
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004d48:	f105 0008 	add.w	r0, r5, #8
 8004d4c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d54:	f7fc feca 	bl	8001aec <atc_command>
 8004d58:	4540      	cmp	r0, r8
 8004d5a:	d042      	beq.n	8004de2 <gsm_power+0xc6>
  }
  if ((on_off == true) && (state == 0))
  {
    memset(&gsm.status, 0, sizeof(gsm.status));
    if (on_off)
      gsm.status.turnOn = 1;
 8004d5c:	2340      	movs	r3, #64	; 0x40
    else
      gsm.status.turnOff = 1; 
    //HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_RESET);
    gsm_delay(1500);
 8004d5e:	f240 50dc 	movw	r0, #1500	; 0x5dc
      gsm.status.turnOn = 1;
 8004d62:	712b      	strb	r3, [r5, #4]
    gsm_delay(1500);
 8004d64:	f008 f972 	bl	800d04c <osDelay>
    //HAL_GPIO_WritePin(_GSM_KEY_GPIO, _GSM_KEY_PIN, GPIO_PIN_SET);
    gsm_delay(3000);
 8004d68:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004d6c:	f008 f96e 	bl	800d04c <osDelay>
    for (uint8_t i = 0; i < 5; i++)
    {
      if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004d70:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004e2c <gsm_power+0x110>
    gsm_delay(3000);
 8004d74:	2605      	movs	r6, #5
      if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004d76:	f105 0908 	add.w	r9, r5, #8
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8004d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d86:	4651      	mov	r1, sl
 8004d88:	4648      	mov	r0, r9
 8004d8a:	f7fc feaf 	bl	8001aec <atc_command>
 8004d8e:	2801      	cmp	r0, #1
    for (uint8_t i = 0; i < 5; i++)
 8004d90:	f106 33ff 	add.w	r3, r6, #4294967295
      if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004d94:	d039      	beq.n	8004e0a <gsm_power+0xee>
    for (uint8_t i = 0; i < 5; i++)
 8004d96:	f013 06ff 	ands.w	r6, r3, #255	; 0xff
 8004d9a:	d1ee      	bne.n	8004d7a <gsm_power+0x5e>
      return true;
    }
    else
    {
      gsm_printf("[GSM] power(%d) failed!\r\n", on_off);
      return false;
 8004d9c:	4630      	mov	r0, r6
    gsm_printf("[GSM] power(%d) done\r\n", on_off);
    return true;
  }
  gsm_printf("[GSM] power(%d) failed!\r\n", on_off);
  return false;
}
 8004d9e:	b004      	add	sp, #16
 8004da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    gsm.status.turnOff = 1;    
 8004da4:	4e1f      	ldr	r6, [pc, #124]	; (8004e24 <gsm_power+0x108>)
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004da6:	4a20      	ldr	r2, [pc, #128]	; (8004e28 <gsm_power+0x10c>)
    gsm.status.turnOff = 1;    
 8004da8:	7933      	ldrb	r3, [r6, #4]
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004daa:	4920      	ldr	r1, [pc, #128]	; (8004e2c <gsm_power+0x110>)
 8004dac:	9000      	str	r0, [sp, #0]
    gsm.status.turnOff = 1;    
 8004dae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004db2:	2701      	movs	r7, #1
    gsm.status.turnOff = 1;    
 8004db4:	f043 0320 	orr.w	r3, r3, #32
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004db8:	e9cd 7201 	strd	r7, r2, [sp, #4]
 8004dbc:	f106 0008 	add.w	r0, r6, #8
    gsm.status.turnOff = 1;    
 8004dc0:	7133      	strb	r3, [r6, #4]
  if (gsm_command("AT\r\n", 1000, NULL, 0, 1, "\r\nOK\r\n") == 1)
 8004dc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dc6:	4623      	mov	r3, r4
 8004dc8:	f7fc fe90 	bl	8001aec <atc_command>
 8004dcc:	42b8      	cmp	r0, r7
 8004dce:	4605      	mov	r5, r0
 8004dd0:	d00d      	beq.n	8004dee <gsm_power+0xd2>
    gsm.status.power = 0;
 8004dd2:	7933      	ldrb	r3, [r6, #4]
    return true;
 8004dd4:	4638      	mov	r0, r7
    gsm.status.power = 0;
 8004dd6:	f364 0300 	bfi	r3, r4, #0, #1
 8004dda:	7133      	strb	r3, [r6, #4]
}
 8004ddc:	b004      	add	sp, #16
 8004dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    gsm.status.power = 1;
 8004de2:	2341      	movs	r3, #65	; 0x41
 8004de4:	712b      	strb	r3, [r5, #4]
    gsm_init_commands();
 8004de6:	f7ff fe91 	bl	8004b0c <gsm_init_commands>
    return true;
 8004dea:	4620      	mov	r0, r4
 8004dec:	e7d7      	b.n	8004d9e <gsm_power+0x82>
    gsm_delay(1500);
 8004dee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004df2:	f008 f92b 	bl	800d04c <osDelay>
    gsm_delay(3000);
 8004df6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004dfa:	f008 f927 	bl	800d04c <osDelay>
    gsm.status.power = 0;
 8004dfe:	7933      	ldrb	r3, [r6, #4]
 8004e00:	f364 0300 	bfi	r3, r4, #0, #1
    return true;
 8004e04:	4628      	mov	r0, r5
    gsm.status.power = 0;
 8004e06:	7133      	strb	r3, [r6, #4]
    return true;
 8004e08:	e7c9      	b.n	8004d9e <gsm_power+0x82>
      gsm_delay(5000);
 8004e0a:	f241 3088 	movw	r0, #5000	; 0x1388
 8004e0e:	f008 f91d 	bl	800d04c <osDelay>
      gsm_init_commands();
 8004e12:	f7ff fe7b 	bl	8004b0c <gsm_init_commands>
      gsm.status.power = 1;
 8004e16:	792b      	ldrb	r3, [r5, #4]
 8004e18:	f043 0301 	orr.w	r3, r3, #1
      return true;
 8004e1c:	4620      	mov	r0, r4
      gsm.status.power = 1;
 8004e1e:	712b      	strb	r3, [r5, #4]
      return true;
 8004e20:	e7bd      	b.n	8004d9e <gsm_power+0x82>
 8004e22:	bf00      	nop
 8004e24:	200002e4 	.word	0x200002e4
 8004e28:	080149ec 	.word	0x080149ec
 8004e2c:	08014bd0 	.word	0x08014bd0

08004e30 <gsm_getSignalQuality_0_to_100>:
  gsm_unlock();
  return true;
}
//###############################################################################################################
uint8_t gsm_getSignalQuality_0_to_100(void)
{
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	b08e      	sub	sp, #56	; 0x38
  uint32_t start = HAL_GetTick();
 8004e34:	f003 fd92 	bl	800895c <HAL_GetTick>
    if (gsm.lock == 0)
 8004e38:	4e23      	ldr	r6, [pc, #140]	; (8004ec8 <gsm_getSignalQuality_0_to_100+0x98>)
  uint32_t start = HAL_GetTick();
 8004e3a:	4605      	mov	r5, r0
  while (HAL_GetTick() - start < timeout_ms)
 8004e3c:	e003      	b.n	8004e46 <gsm_getSignalQuality_0_to_100+0x16>
    if (gsm.lock == 0)
 8004e3e:	7874      	ldrb	r4, [r6, #1]
 8004e40:	b16c      	cbz	r4, 8004e5e <gsm_getSignalQuality_0_to_100+0x2e>
    gsm_delay(1);
 8004e42:	f008 f903 	bl	800d04c <osDelay>
  while (HAL_GetTick() - start < timeout_ms)
 8004e46:	f003 fd89 	bl	800895c <HAL_GetTick>
 8004e4a:	1b40      	subs	r0, r0, r5
 8004e4c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
    gsm_delay(1);
 8004e50:	f04f 0001 	mov.w	r0, #1
  while (HAL_GetTick() - start < timeout_ms)
 8004e54:	d3f3      	bcc.n	8004e3e <gsm_getSignalQuality_0_to_100+0xe>
  if (gsm_lock(2000) == false)
  {
    gsm_printf("[GSM] getSignalQuality_0_to_100() failed!\r\n");
    return false;
 8004e56:	2400      	movs	r4, #0
  else
    gsm.signal = (p1 * 100) / 31;
  gsm_printf("[GSM] getSignalQuality_0_to_100() done\r\n");
  gsm_unlock();
  return gsm.signal;
}
 8004e58:	4620      	mov	r0, r4
 8004e5a:	b00e      	add	sp, #56	; 0x38
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
  if (gsm_command("AT+CSQ\r\n", 1000, str, sizeof(str), 2, "\r\n+CSQ:", "\r\nERROR\r\n") != 1)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <gsm_getSignalQuality_0_to_100+0x9c>)
 8004e60:	491b      	ldr	r1, [pc, #108]	; (8004ed0 <gsm_getSignalQuality_0_to_100+0xa0>)
 8004e62:	9302      	str	r3, [sp, #8]
      gsm.lock = 1;
 8004e64:	2201      	movs	r2, #1
 8004e66:	7072      	strb	r2, [r6, #1]
  if (gsm_command("AT+CSQ\r\n", 1000, str, sizeof(str), 2, "\r\n+CSQ:", "\r\nERROR\r\n") != 1)
 8004e68:	2320      	movs	r3, #32
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	e9cd 3200 	strd	r3, r2, [sp]
 8004e70:	9103      	str	r1, [sp, #12]
 8004e72:	4818      	ldr	r0, [pc, #96]	; (8004ed4 <gsm_getSignalQuality_0_to_100+0xa4>)
 8004e74:	4918      	ldr	r1, [pc, #96]	; (8004ed8 <gsm_getSignalQuality_0_to_100+0xa8>)
 8004e76:	ab06      	add	r3, sp, #24
 8004e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e7c:	f7fc fe36 	bl	8001aec <atc_command>
 8004e80:	2801      	cmp	r0, #1
 8004e82:	d004      	beq.n	8004e8e <gsm_getSignalQuality_0_to_100+0x5e>
  gsm.lock = 0;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4620      	mov	r0, r4
  gsm.lock = 0;
 8004e88:	7073      	strb	r3, [r6, #1]
}
 8004e8a:	b00e      	add	sp, #56	; 0x38
 8004e8c:	bd70      	pop	{r4, r5, r6, pc}
  if (sscanf(str, "\r\n+CSQ: %hd,%hd\r\n", &p1, &p2) != 2)
 8004e8e:	4913      	ldr	r1, [pc, #76]	; (8004edc <gsm_getSignalQuality_0_to_100+0xac>)
 8004e90:	f10d 0316 	add.w	r3, sp, #22
 8004e94:	aa05      	add	r2, sp, #20
 8004e96:	a806      	add	r0, sp, #24
 8004e98:	f00b f8d2 	bl	8010040 <siscanf>
 8004e9c:	2802      	cmp	r0, #2
 8004e9e:	d1f1      	bne.n	8004e84 <gsm_getSignalQuality_0_to_100+0x54>
  if (p1 == 99)
 8004ea0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8004ea4:	2b63      	cmp	r3, #99	; 0x63
 8004ea6:	d00c      	beq.n	8004ec2 <gsm_getSignalQuality_0_to_100+0x92>
    gsm.signal = (p1 * 100) / 31;
 8004ea8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004eac:	4a0c      	ldr	r2, [pc, #48]	; (8004ee0 <gsm_getSignalQuality_0_to_100+0xb0>)
 8004eae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8004eb8:	441a      	add	r2, r3
 8004eba:	17db      	asrs	r3, r3, #31
 8004ebc:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8004ec0:	b2dc      	uxtb	r4, r3
 8004ec2:	70f4      	strb	r4, [r6, #3]
  return gsm.signal;
 8004ec4:	e7de      	b.n	8004e84 <gsm_getSignalQuality_0_to_100+0x54>
 8004ec6:	bf00      	nop
 8004ec8:	200002e4 	.word	0x200002e4
 8004ecc:	08014be4 	.word	0x08014be4
 8004ed0:	080149e0 	.word	0x080149e0
 8004ed4:	200002ec 	.word	0x200002ec
 8004ed8:	08014bd8 	.word	0x08014bd8
 8004edc:	08014bec 	.word	0x08014bec
 8004ee0:	84210843 	.word	0x84210843

08004ee4 <gsm_loop>:
{
 8004ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  atc_loop(&gsm.atc);
 8004ee6:	4ea5      	ldr	r6, [pc, #660]	; (800517c <gsm_loop+0x298>)
  if (HAL_GetTick() - gsm_time_1s > 1000)
 8004ee8:	4ca5      	ldr	r4, [pc, #660]	; (8005180 <gsm_loop+0x29c>)
{
 8004eea:	b099      	sub	sp, #100	; 0x64
  atc_loop(&gsm.atc);
 8004eec:	f106 0008 	add.w	r0, r6, #8
 8004ef0:	f7fc feda 	bl	8001ca8 <atc_loop>
  if (HAL_GetTick() - gsm_time_1s > 1000)
 8004ef4:	f003 fd32 	bl	800895c <HAL_GetTick>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	1ac0      	subs	r0, r0, r3
 8004efc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f00:	d81a      	bhi.n	8004f38 <gsm_loop+0x54>
  if ((HAL_GetTick() - gsm_time_10s > 10000) && (gsm.status.power == 1))
 8004f02:	4ca0      	ldr	r4, [pc, #640]	; (8005184 <gsm_loop+0x2a0>)
 8004f04:	f003 fd2a 	bl	800895c <HAL_GetTick>
 8004f08:	6822      	ldr	r2, [r4, #0]
 8004f0a:	f242 7310 	movw	r3, #10000	; 0x2710
 8004f0e:	1a80      	subs	r0, r0, r2
 8004f10:	4298      	cmp	r0, r3
 8004f12:	d902      	bls.n	8004f1a <gsm_loop+0x36>
 8004f14:	7933      	ldrb	r3, [r6, #4]
 8004f16:	07dd      	lsls	r5, r3, #31
 8004f18:	d464      	bmi.n	8004fe4 <gsm_loop+0x100>
  if ((HAL_GetTick() - gsm_time_60s > 60000) && (gsm.status.power == 1))
 8004f1a:	4c9b      	ldr	r4, [pc, #620]	; (8005188 <gsm_loop+0x2a4>)
 8004f1c:	f003 fd1e 	bl	800895c <HAL_GetTick>
 8004f20:	6822      	ldr	r2, [r4, #0]
 8004f22:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004f26:	1a80      	subs	r0, r0, r2
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	d903      	bls.n	8004f34 <gsm_loop+0x50>
 8004f2c:	7933      	ldrb	r3, [r6, #4]
 8004f2e:	07da      	lsls	r2, r3, #31
 8004f30:	f100 809c 	bmi.w	800506c <gsm_loop+0x188>
}
 8004f34:	b019      	add	sp, #100	; 0x64
 8004f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gsm_time_10s_check_power++;
 8004f38:	4d94      	ldr	r5, [pc, #592]	; (800518c <gsm_loop+0x2a8>)
    gsm_time_1s = HAL_GetTick();
 8004f3a:	f003 fd0f 	bl	800895c <HAL_GetTick>
    gsm_time_10s_check_power++;
 8004f3e:	7829      	ldrb	r1, [r5, #0]
    if ((gsm.status.turnOn == 1) && (gsm.lock == 0) && (gsm_time_10s_check_power == 10))
 8004f40:	7932      	ldrb	r2, [r6, #4]
    gsm_time_1s = HAL_GetTick();
 8004f42:	6020      	str	r0, [r4, #0]
    gsm_time_10s_check_power++;
 8004f44:	3101      	adds	r1, #1
 8004f46:	b2c9      	uxtb	r1, r1
    if ((gsm.status.turnOn == 1) && (gsm.lock == 0) && (gsm_time_10s_check_power == 10))
 8004f48:	0650      	lsls	r0, r2, #25
    gsm_time_10s_check_power++;
 8004f4a:	7029      	strb	r1, [r5, #0]
    if ((gsm.status.turnOn == 1) && (gsm.lock == 0) && (gsm_time_10s_check_power == 10))
 8004f4c:	d52f      	bpl.n	8004fae <gsm_loop+0xca>
 8004f4e:	7874      	ldrb	r4, [r6, #1]
 8004f50:	bb6c      	cbnz	r4, 8004fae <gsm_loop+0xca>
 8004f52:	290a      	cmp	r1, #10
 8004f54:	f000 813a 	beq.w	80051cc <gsm_loop+0x2e8>
    if ((gsm.status.power == 1) && (gsm.status.simcardChecked == 0))
 8004f58:	f002 0311 	and.w	r3, r2, #17
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	f000 80aa 	beq.w	80050b6 <gsm_loop+0x1d2>
    if ((gsm.status.power == 1) && (gsm.status.netChange == 1))
 8004f62:	f002 0309 	and.w	r3, r2, #9
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	f000 808a 	beq.w	8005080 <gsm_loop+0x19c>
    if (gsm.status.power == 1)
 8004f6c:	07d3      	lsls	r3, r2, #31
 8004f6e:	d5c8      	bpl.n	8004f02 <gsm_loop+0x1e>
      if (gsm.msg.newMsg >= 0)
 8004f70:	f9b6 0c1a 	ldrsh.w	r0, [r6, #3098]	; 0xc1a
 8004f74:	2800      	cmp	r0, #0
 8004f76:	f280 8090 	bge.w	800509a <gsm_loop+0x1b6>
      if (gsm.gprs.mqttData == 1)
 8004f7a:	f896 3ce0 	ldrb.w	r3, [r6, #3296]	; 0xce0
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	f000 814c 	beq.w	800521c <gsm_loop+0x338>
      if ((gsm.gprs.mqttConnected == 1) && (gsm.gprs.mqttConnectedLast == 0))
 8004f84:	f8d6 3ce0 	ldr.w	r3, [r6, #3296]	; 0xce0
 8004f88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f94:	f000 80a4 	beq.w	80050e0 <gsm_loop+0x1fc>
      else if ((gsm.gprs.mqttConnected == 0) && (gsm.gprs.mqttConnectedLast == 1))
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9c:	d1b1      	bne.n	8004f02 <gsm_loop+0x1e>
        gsm.gprs.mqttConnectedLast = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f886 3ce2 	strb.w	r3, [r6, #3298]	; 0xce2
        gsm_callback_mqttDisconnect();
 8004fa4:	f000 f9d4 	bl	8005350 <gsm_callback_mqttDisconnect>
 8004fa8:	e7ab      	b.n	8004f02 <gsm_loop+0x1e>
    if ((gsm.status.turnOff == 1) && (gsm_time_10s_check_power == 10))
 8004faa:	7932      	ldrb	r2, [r6, #4]
 8004fac:	70b4      	strb	r4, [r6, #2]
 8004fae:	0691      	lsls	r1, r2, #26
 8004fb0:	d5d2      	bpl.n	8004f58 <gsm_loop+0x74>
 8004fb2:	782b      	ldrb	r3, [r5, #0]
 8004fb4:	2b0a      	cmp	r3, #10
 8004fb6:	d1cf      	bne.n	8004f58 <gsm_loop+0x74>
      if (gsm_command("AT\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 8004fb8:	4a75      	ldr	r2, [pc, #468]	; (8005190 <gsm_loop+0x2ac>)
 8004fba:	4b76      	ldr	r3, [pc, #472]	; (8005194 <gsm_loop+0x2b0>)
 8004fbc:	4976      	ldr	r1, [pc, #472]	; (8005198 <gsm_loop+0x2b4>)
 8004fbe:	4877      	ldr	r0, [pc, #476]	; (800519c <gsm_loop+0x2b8>)
 8004fc0:	e9cd 3202 	strd	r3, r2, [sp, #8]
      gsm_time_10s_check_power = 0;
 8004fc4:	2400      	movs	r4, #0
      if (gsm_command("AT\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e9cd 4300 	strd	r4, r3, [sp]
 8004fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004fd0:	4623      	mov	r3, r4
      gsm_time_10s_check_power = 0;
 8004fd2:	702c      	strb	r4, [r5, #0]
      gsm.error = 0;
 8004fd4:	70b4      	strb	r4, [r6, #2]
      if (gsm_command("AT\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 8004fd6:	f7fc fd89 	bl	8001aec <atc_command>
 8004fda:	2801      	cmp	r0, #1
 8004fdc:	f000 8127 	beq.w	800522e <gsm_loop+0x34a>
    if ((gsm.status.power == 1) && (gsm.status.simcardChecked == 0))
 8004fe0:	7932      	ldrb	r2, [r6, #4]
 8004fe2:	e7b9      	b.n	8004f58 <gsm_loop+0x74>
    gsm_time_10s = HAL_GetTick();
 8004fe4:	f003 fcba 	bl	800895c <HAL_GetTick>
    if ((gsm.status.power == 1) && (gsm.lock == 0))
 8004fe8:	7933      	ldrb	r3, [r6, #4]
    gsm_time_10s = HAL_GetTick();
 8004fea:	6020      	str	r0, [r4, #0]
    if ((gsm.status.power == 1) && (gsm.lock == 0))
 8004fec:	07d8      	lsls	r0, r3, #31
 8004fee:	d510      	bpl.n	8005012 <gsm_loop+0x12e>
 8004ff0:	7873      	ldrb	r3, [r6, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d191      	bne.n	8004f1a <gsm_loop+0x36>
      gsm_getSignalQuality_0_to_100();
 8004ff6:	f7ff ff1b 	bl	8004e30 <gsm_getSignalQuality_0_to_100>
      if (gsm.status.netReg == 0)
 8004ffa:	7933      	ldrb	r3, [r6, #4]
 8004ffc:	f013 0304 	ands.w	r3, r3, #4
 8005000:	d107      	bne.n	8005012 <gsm_loop+0x12e>
        gsm_command("AT+CREG?\r\n", 1000, NULL, 0, 0);
 8005002:	e9cd 3300 	strd	r3, r3, [sp]
 8005006:	4966      	ldr	r1, [pc, #408]	; (80051a0 <gsm_loop+0x2bc>)
 8005008:	4864      	ldr	r0, [pc, #400]	; (800519c <gsm_loop+0x2b8>)
 800500a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800500e:	f7fc fd6d 	bl	8001aec <atc_command>
    if (gsm.lock == 0)
 8005012:	7874      	ldrb	r4, [r6, #1]
 8005014:	2c00      	cmp	r4, #0
 8005016:	d180      	bne.n	8004f1a <gsm_loop+0x36>
      if (gsm.msg.storageUsed > 0)
 8005018:	f8b6 3c12 	ldrh.w	r3, [r6, #3090]	; 0xc12
 800501c:	2b00      	cmp	r3, #0
 800501e:	d16a      	bne.n	80050f6 <gsm_loop+0x212>
    if ((gsm.status.power == 1) && (gsm.lock == 0))
 8005020:	7933      	ldrb	r3, [r6, #4]
 8005022:	07db      	lsls	r3, r3, #31
 8005024:	f57f af79 	bpl.w	8004f1a <gsm_loop+0x36>
      if (gsm.gprs.connected)
 8005028:	f896 3c3c 	ldrb.w	r3, [r6, #3132]	; 0xc3c
 800502c:	2b00      	cmp	r3, #0
 800502e:	f43f af74 	beq.w	8004f1a <gsm_loop+0x36>
        if (gsm_command("AT+SAPBR=2,1\r\n", 1000, str1, sizeof(str1), 2, "\r\n+SAPBR: 1,", "\r\nERROR\r\n") == 1)
 8005032:	4957      	ldr	r1, [pc, #348]	; (8005190 <gsm_loop+0x2ac>)
 8005034:	4b5b      	ldr	r3, [pc, #364]	; (80051a4 <gsm_loop+0x2c0>)
 8005036:	4859      	ldr	r0, [pc, #356]	; (800519c <gsm_loop+0x2b8>)
 8005038:	e9cd 3102 	strd	r3, r1, [sp, #8]
 800503c:	2202      	movs	r2, #2
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	e9cd 3200 	strd	r3, r2, [sp]
 8005044:	4958      	ldr	r1, [pc, #352]	; (80051a8 <gsm_loop+0x2c4>)
 8005046:	ab08      	add	r3, sp, #32
 8005048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800504c:	f7fc fd4e 	bl	8001aec <atc_command>
 8005050:	2801      	cmp	r0, #1
 8005052:	f000 80fd 	beq.w	8005250 <gsm_loop+0x36c>
          if (gsm.gprs.connectedLast == true)
 8005056:	f896 3c3d 	ldrb.w	r3, [r6, #3133]	; 0xc3d
 800505a:	2b00      	cmp	r3, #0
 800505c:	f43f af5d 	beq.w	8004f1a <gsm_loop+0x36>
              gsm.gprs.connected = false;
 8005060:	2300      	movs	r3, #0
 8005062:	f8a6 3c3c 	strh.w	r3, [r6, #3132]	; 0xc3c
              gsm_callback_gprsDisconnected();
 8005066:	f000 f96f 	bl	8005348 <gsm_callback_gprsDisconnected>
 800506a:	e756      	b.n	8004f1a <gsm_loop+0x36>
    gsm_time_60s = HAL_GetTick();
 800506c:	f003 fc76 	bl	800895c <HAL_GetTick>
    if (gsm.lock == 0)
 8005070:	7873      	ldrb	r3, [r6, #1]
    gsm_time_60s = HAL_GetTick();
 8005072:	6020      	str	r0, [r4, #0]
    if (gsm.lock == 0)
 8005074:	2b00      	cmp	r3, #0
 8005076:	f47f af5d 	bne.w	8004f34 <gsm_loop+0x50>
      gsm_msg_updateStorage();
 800507a:	f001 f811 	bl	80060a0 <gsm_msg_updateStorage>
}
 800507e:	e759      	b.n	8004f34 <gsm_loop+0x50>
      gsm.status.netChange = 0;
 8005080:	7933      	ldrb	r3, [r6, #4]
      if (gsm.status.netReg == 1)
 8005082:	f003 02f7 	and.w	r2, r3, #247	; 0xf7
 8005086:	f013 0304 	ands.w	r3, r3, #4
 800508a:	d02d      	beq.n	80050e8 <gsm_loop+0x204>
        gsm.status.registerd = 1;
 800508c:	f042 0202 	orr.w	r2, r2, #2
 8005090:	7132      	strb	r2, [r6, #4]
        gsm_callback_networkRegister();
 8005092:	f000 f94d 	bl	8005330 <gsm_callback_networkRegister>
    if (gsm.status.power == 1)
 8005096:	7932      	ldrb	r2, [r6, #4]
 8005098:	e768      	b.n	8004f6c <gsm_loop+0x88>
        if (gsm_msg_read(gsm.msg.newMsg))
 800509a:	b280      	uxth	r0, r0
 800509c:	f001 f9cc 	bl	8006438 <gsm_msg_read>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d15e      	bne.n	8005162 <gsm_loop+0x27e>
    if (gsm.status.power == 1)
 80050a4:	7933      	ldrb	r3, [r6, #4]
        gsm.msg.newMsg = -1;
 80050a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    if (gsm.status.power == 1)
 80050aa:	07df      	lsls	r7, r3, #31
        gsm.msg.newMsg = -1;
 80050ac:	f8a6 2c1a 	strh.w	r2, [r6, #3098]	; 0xc1a
    if (gsm.status.power == 1)
 80050b0:	f53f af63 	bmi.w	8004f7a <gsm_loop+0x96>
 80050b4:	e725      	b.n	8004f02 <gsm_loop+0x1e>
      if (gsm_command("AT+CPIN?\r\n", 1000, str1, sizeof(str1), 2, "\r\n+CPIN:", "\r\nERROR\r\n") == 1)
 80050b6:	4936      	ldr	r1, [pc, #216]	; (8005190 <gsm_loop+0x2ac>)
 80050b8:	4b3c      	ldr	r3, [pc, #240]	; (80051ac <gsm_loop+0x2c8>)
 80050ba:	4838      	ldr	r0, [pc, #224]	; (800519c <gsm_loop+0x2b8>)
 80050bc:	e9cd 3102 	strd	r3, r1, [sp, #8]
 80050c0:	2202      	movs	r2, #2
 80050c2:	2340      	movs	r3, #64	; 0x40
 80050c4:	e9cd 3200 	strd	r3, r2, [sp]
 80050c8:	4939      	ldr	r1, [pc, #228]	; (80051b0 <gsm_loop+0x2cc>)
 80050ca:	ab08      	add	r3, sp, #32
 80050cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050d0:	f7fc fd0c 	bl	8001aec <atc_command>
 80050d4:	2801      	cmp	r0, #1
 80050d6:	d025      	beq.n	8005124 <gsm_loop+0x240>
        gsm_callback_simcardNotInserted();
 80050d8:	f000 f928 	bl	800532c <gsm_callback_simcardNotInserted>
    if ((gsm.status.power == 1) && (gsm.status.netChange == 1))
 80050dc:	7932      	ldrb	r2, [r6, #4]
 80050de:	e740      	b.n	8004f62 <gsm_loop+0x7e>
        gsm.gprs.mqttConnectedLast = 1;      
 80050e0:	2301      	movs	r3, #1
 80050e2:	f886 3ce2 	strb.w	r3, [r6, #3298]	; 0xce2
 80050e6:	e70c      	b.n	8004f02 <gsm_loop+0x1e>
        gsm.status.registerd = 0;
 80050e8:	f363 0241 	bfi	r2, r3, #1, #1
 80050ec:	7132      	strb	r2, [r6, #4]
        gsm_callback_networkUnregister();
 80050ee:	f000 f921 	bl	8005334 <gsm_callback_networkUnregister>
    if (gsm.status.power == 1)
 80050f2:	7932      	ldrb	r2, [r6, #4]
 80050f4:	e73a      	b.n	8004f6c <gsm_loop+0x88>
            gsm_callback_newMsg(gsm.msg.number, gsm.msg.time, (char*) gsm.buffer);
 80050f6:	4f2f      	ldr	r7, [pc, #188]	; (80051b4 <gsm_loop+0x2d0>)
 80050f8:	e002      	b.n	8005100 <gsm_loop+0x21c>
        for (uint16_t i = 0; i < 150; i++)
 80050fa:	2c96      	cmp	r4, #150	; 0x96
 80050fc:	f000 8081 	beq.w	8005202 <gsm_loop+0x31e>
 8005100:	b2a5      	uxth	r5, r4
          if (gsm_msg_read(i))
 8005102:	4628      	mov	r0, r5
        for (uint16_t i = 0; i < 150; i++)
 8005104:	3401      	adds	r4, #1
          if (gsm_msg_read(i))
 8005106:	f001 f997 	bl	8006438 <gsm_msg_read>
 800510a:	2800      	cmp	r0, #0
 800510c:	d0f5      	beq.n	80050fa <gsm_loop+0x216>
            gsm_msg_delete(i);
 800510e:	4628      	mov	r0, r5
 8005110:	f001 f87e 	bl	8006210 <gsm_msg_delete>
            gsm_callback_newMsg(gsm.msg.number, gsm.msg.time, (char*) gsm.buffer);
 8005114:	4828      	ldr	r0, [pc, #160]	; (80051b8 <gsm_loop+0x2d4>)
 8005116:	463b      	mov	r3, r7
 8005118:	e890 0006 	ldmia.w	r0, {r1, r2}
 800511c:	3018      	adds	r0, #24
 800511e:	f000 f90b 	bl	8005338 <gsm_callback_newMsg>
 8005122:	e7ea      	b.n	80050fa <gsm_loop+0x216>
        if (sscanf(str1, "\r\n+CPIN: %[^\r\n]", str2) == 1)
 8005124:	4925      	ldr	r1, [pc, #148]	; (80051bc <gsm_loop+0x2d8>)
 8005126:	aa04      	add	r2, sp, #16
 8005128:	a808      	add	r0, sp, #32
 800512a:	f00a ff89 	bl	8010040 <siscanf>
 800512e:	2801      	cmp	r0, #1
 8005130:	d1d4      	bne.n	80050dc <gsm_loop+0x1f8>
          if (strcmp(str2, "READY") == 0)
 8005132:	4b23      	ldr	r3, [pc, #140]	; (80051c0 <gsm_loop+0x2dc>)
 8005134:	9a04      	ldr	r2, [sp, #16]
 8005136:	429a      	cmp	r2, r3
 8005138:	f000 80ab 	beq.w	8005292 <gsm_loop+0x3ae>
          if (strcmp(str2, "SIM PIN") == 0)
 800513c:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <gsm_loop+0x2e0>)
 800513e:	9b04      	ldr	r3, [sp, #16]
 8005140:	4293      	cmp	r3, r2
 8005142:	f000 8099 	beq.w	8005278 <gsm_loop+0x394>
          if (strcmp(str2, "SIM PUK") == 0)
 8005146:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <gsm_loop+0x2e0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d1c7      	bne.n	80050dc <gsm_loop+0x1f8>
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <gsm_loop+0x2e4>)
 800514e:	9a05      	ldr	r2, [sp, #20]
 8005150:	429a      	cmp	r2, r3
 8005152:	d1c3      	bne.n	80050dc <gsm_loop+0x1f8>
            gsm_callback_simcardPukRequest();
 8005154:	f000 f8e8 	bl	8005328 <gsm_callback_simcardPukRequest>
            gsm.status.simcardChecked = 1;
 8005158:	7932      	ldrb	r2, [r6, #4]
 800515a:	f042 0210 	orr.w	r2, r2, #16
 800515e:	7132      	strb	r2, [r6, #4]
 8005160:	e6ff      	b.n	8004f62 <gsm_loop+0x7e>
          gsm_msg_delete(gsm.msg.newMsg);
 8005162:	f8b6 0c1a 	ldrh.w	r0, [r6, #3098]	; 0xc1a
 8005166:	f001 f853 	bl	8006210 <gsm_msg_delete>
          gsm_callback_newMsg(gsm.msg.number, gsm.msg.time, (char*) gsm.buffer);
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <gsm_loop+0x2d0>)
 800516c:	f203 52d4 	addw	r2, r3, #1492	; 0x5d4
 8005170:	ca06      	ldmia	r2, {r1, r2}
 8005172:	f203 50ec 	addw	r0, r3, #1516	; 0x5ec
 8005176:	f000 f8df 	bl	8005338 <gsm_callback_newMsg>
 800517a:	e793      	b.n	80050a4 <gsm_loop+0x1c0>
 800517c:	200002e4 	.word	0x200002e4
 8005180:	20000fd0 	.word	0x20000fd0
 8005184:	20000fc8 	.word	0x20000fc8
 8005188:	20000fd4 	.word	0x20000fd4
 800518c:	20000fcc 	.word	0x20000fcc
 8005190:	080149e0 	.word	0x080149e0
 8005194:	080149ec 	.word	0x080149ec
 8005198:	08014bd0 	.word	0x08014bd0
 800519c:	200002ec 	.word	0x200002ec
 80051a0:	08014c40 	.word	0x08014c40
 80051a4:	08014c4c 	.word	0x08014c4c
 80051a8:	08014a30 	.word	0x08014a30
 80051ac:	08014c0c 	.word	0x08014c0c
 80051b0:	08014c00 	.word	0x08014c00
 80051b4:	20000924 	.word	0x20000924
 80051b8:	20000ef8 	.word	0x20000ef8
 80051bc:	08014c18 	.word	0x08014c18
 80051c0:	44414552 	.word	0x44414552
 80051c4:	204d4953 	.word	0x204d4953
 80051c8:	004b5550 	.word	0x004b5550
      if (gsm_command("AT\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 80051cc:	4a37      	ldr	r2, [pc, #220]	; (80052ac <gsm_loop+0x3c8>)
 80051ce:	4b38      	ldr	r3, [pc, #224]	; (80052b0 <gsm_loop+0x3cc>)
 80051d0:	4938      	ldr	r1, [pc, #224]	; (80052b4 <gsm_loop+0x3d0>)
 80051d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80051d6:	2302      	movs	r3, #2
 80051d8:	e9cd 4300 	strd	r4, r3, [sp]
 80051dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051e0:	4623      	mov	r3, r4
      gsm_time_10s_check_power = 0;
 80051e2:	702c      	strb	r4, [r5, #0]
      if (gsm_command("AT\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 80051e4:	f106 0008 	add.w	r0, r6, #8
 80051e8:	f7fc fc80 	bl	8001aec <atc_command>
 80051ec:	2801      	cmp	r0, #1
 80051ee:	f43f aedc 	beq.w	8004faa <gsm_loop+0xc6>
        gsm.error++;
 80051f2:	78b3      	ldrb	r3, [r6, #2]
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2db      	uxtb	r3, r3
      if (gsm.error >= 10)
 80051f8:	2b09      	cmp	r3, #9
 80051fa:	70b3      	strb	r3, [r6, #2]
 80051fc:	d81b      	bhi.n	8005236 <gsm_loop+0x352>
    if ((gsm.status.turnOff == 1) && (gsm_time_10s_check_power == 10))
 80051fe:	7932      	ldrb	r2, [r6, #4]
 8005200:	e6d5      	b.n	8004fae <gsm_loop+0xca>
				gsm_msg_deleteAll();
 8005202:	f000 ffc5 	bl	8006190 <gsm_msg_deleteAll>
        gsm_msg_updateStorage();
 8005206:	f000 ff4b 	bl	80060a0 <gsm_msg_updateStorage>
    if ((gsm.status.power == 1) && (gsm.lock == 0))
 800520a:	7933      	ldrb	r3, [r6, #4]
 800520c:	07d9      	lsls	r1, r3, #31
 800520e:	f57f ae84 	bpl.w	8004f1a <gsm_loop+0x36>
 8005212:	7873      	ldrb	r3, [r6, #1]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f43f af07 	beq.w	8005028 <gsm_loop+0x144>
 800521a:	e67e      	b.n	8004f1a <gsm_loop+0x36>
        gsm_callback_mqttMessage(gsm.gprs.mqttTopic, gsm.gprs.mqttMessage);
 800521c:	4926      	ldr	r1, [pc, #152]	; (80052b8 <gsm_loop+0x3d4>)
        gsm.gprs.mqttData = 0;
 800521e:	2300      	movs	r3, #0
        gsm_callback_mqttMessage(gsm.gprs.mqttTopic, gsm.gprs.mqttMessage);
 8005220:	f1a1 0040 	sub.w	r0, r1, #64	; 0x40
        gsm.gprs.mqttData = 0;
 8005224:	f886 3ce0 	strb.w	r3, [r6, #3296]	; 0xce0
        gsm_callback_mqttMessage(gsm.gprs.mqttTopic, gsm.gprs.mqttMessage);
 8005228:	f000 f890 	bl	800534c <gsm_callback_mqttMessage>
 800522c:	e6aa      	b.n	8004f84 <gsm_loop+0xa0>
        gsm_power(false);
 800522e:	4620      	mov	r0, r4
 8005230:	f7ff fd74 	bl	8004d1c <gsm_power>
 8005234:	e6d4      	b.n	8004fe0 <gsm_loop+0xfc>
        gsm.status.power = 0;
 8005236:	7933      	ldrb	r3, [r6, #4]
        if (gsm_power(true))
 8005238:	2001      	movs	r0, #1
        gsm.status.power = 0;
 800523a:	f364 0300 	bfi	r3, r4, #0, #1
 800523e:	7133      	strb	r3, [r6, #4]
        if (gsm_power(true))
 8005240:	f7ff fd6c 	bl	8004d1c <gsm_power>
    if ((gsm.status.turnOff == 1) && (gsm_time_10s_check_power == 10))
 8005244:	7932      	ldrb	r2, [r6, #4]
        if (gsm_power(true))
 8005246:	2800      	cmp	r0, #0
 8005248:	f43f aeb1 	beq.w	8004fae <gsm_loop+0xca>
          gsm.error = 0;          
 800524c:	70b4      	strb	r4, [r6, #2]
 800524e:	e6ae      	b.n	8004fae <gsm_loop+0xca>
          if (sscanf(str1, "\r\n+SAPBR: 1,1,\"%[^\"\r\n]", gsm.gprs.ip) == 1)
 8005250:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <gsm_loop+0x3d8>)
 8005252:	491b      	ldr	r1, [pc, #108]	; (80052c0 <gsm_loop+0x3dc>)
 8005254:	a808      	add	r0, sp, #32
 8005256:	f00a fef3 	bl	8010040 <siscanf>
 800525a:	2801      	cmp	r0, #1
            if (gsm.gprs.connectedLast == false)
 800525c:	f896 3c3d 	ldrb.w	r3, [r6, #3133]	; 0xc3d
          if (sscanf(str1, "\r\n+SAPBR: 1,1,\"%[^\"\r\n]", gsm.gprs.ip) == 1)
 8005260:	f47f aefb 	bne.w	800505a <gsm_loop+0x176>
            if (gsm.gprs.connectedLast == false)
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f ae58 	bne.w	8004f1a <gsm_loop+0x36>
              gsm.gprs.connected = true;
 800526a:	f240 1301 	movw	r3, #257	; 0x101
 800526e:	f8a6 3c3c 	strh.w	r3, [r6, #3132]	; 0xc3c
              gsm_callback_gprsConnected();
 8005272:	f000 f867 	bl	8005344 <gsm_callback_gprsConnected>
 8005276:	e650      	b.n	8004f1a <gsm_loop+0x36>
          if (strcmp(str2, "SIM PIN") == 0)
 8005278:	4a12      	ldr	r2, [pc, #72]	; (80052c4 <gsm_loop+0x3e0>)
 800527a:	9905      	ldr	r1, [sp, #20]
 800527c:	4291      	cmp	r1, r2
 800527e:	f47f af62 	bne.w	8005146 <gsm_loop+0x262>
            gsm_callback_simcardPinRequest();
 8005282:	f000 f84f 	bl	8005324 <gsm_callback_simcardPinRequest>
            gsm.status.simcardChecked = 1;
 8005286:	7932      	ldrb	r2, [r6, #4]
 8005288:	9b04      	ldr	r3, [sp, #16]
 800528a:	f042 0210 	orr.w	r2, r2, #16
 800528e:	7132      	strb	r2, [r6, #4]
 8005290:	e759      	b.n	8005146 <gsm_loop+0x262>
          if (strcmp(str2, "READY") == 0)
 8005292:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8005296:	2b59      	cmp	r3, #89	; 0x59
 8005298:	f47f af50 	bne.w	800513c <gsm_loop+0x258>
            gsm_callback_simcardReady();
 800529c:	f000 f840 	bl	8005320 <gsm_callback_simcardReady>
            gsm.status.simcardChecked = 1;
 80052a0:	7933      	ldrb	r3, [r6, #4]
 80052a2:	f043 0310 	orr.w	r3, r3, #16
 80052a6:	7133      	strb	r3, [r6, #4]
 80052a8:	e748      	b.n	800513c <gsm_loop+0x258>
 80052aa:	bf00      	nop
 80052ac:	080149e0 	.word	0x080149e0
 80052b0:	080149ec 	.word	0x080149ec
 80052b4:	08014bd0 	.word	0x08014bd0
 80052b8:	20000f84 	.word	0x20000f84
 80052bc:	20000f22 	.word	0x20000f22
 80052c0:	08014a50 	.word	0x08014a50
 80052c4:	004e4950 	.word	0x004e4950

080052c8 <gsm_waitForRegister>:
//###############################################################################################################
bool gsm_waitForRegister(uint8_t waitSecond)
{
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	4604      	mov	r4, r0
  gsm_printf("[GSM] waitForRegister(%d second) begin\r\n", waitSecond);
  uint32_t startTime = HAL_GetTick();
 80052cc:	f003 fb46 	bl	800895c <HAL_GetTick>
  while (HAL_GetTick() - startTime < (waitSecond * 1000))
 80052d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  {
    gsm_delay(100);
    gsm_loop();
    if (gsm.status.registerd == 1)
 80052d4:	4e11      	ldr	r6, [pc, #68]	; (800531c <gsm_waitForRegister+0x54>)
  uint32_t startTime = HAL_GetTick();
 80052d6:	4605      	mov	r5, r0
  while (HAL_GetTick() - startTime < (waitSecond * 1000))
 80052d8:	fb03 f404 	mul.w	r4, r3, r4
 80052dc:	e006      	b.n	80052ec <gsm_waitForRegister+0x24>
    gsm_delay(100);
 80052de:	f007 feb5 	bl	800d04c <osDelay>
    gsm_loop();
 80052e2:	f7ff fdff 	bl	8004ee4 <gsm_loop>
    if (gsm.status.registerd == 1)
 80052e6:	7933      	ldrb	r3, [r6, #4]
 80052e8:	079b      	lsls	r3, r3, #30
 80052ea:	d409      	bmi.n	8005300 <gsm_waitForRegister+0x38>
  while (HAL_GetTick() - startTime < (waitSecond * 1000))
 80052ec:	f003 fb36 	bl	800895c <HAL_GetTick>
 80052f0:	4603      	mov	r3, r0
 80052f2:	1b5b      	subs	r3, r3, r5
 80052f4:	42a3      	cmp	r3, r4
    gsm_delay(100);
 80052f6:	f04f 0064 	mov.w	r0, #100	; 0x64
  while (HAL_GetTick() - startTime < (waitSecond * 1000))
 80052fa:	d3f0      	bcc.n	80052de <gsm_waitForRegister+0x16>
    }
    if (gsm.inited == 0)
      continue;
  }
  gsm_printf("[GSM] waitForRegister() failed!\r\n");
  return false;
 80052fc:	2000      	movs	r0, #0
}
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	240a      	movs	r4, #10
        gsm_loop();
 8005302:	f7ff fdef 	bl	8004ee4 <gsm_loop>
        gsm_delay(500);
 8005306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800530a:	f007 fe9f 	bl	800d04c <osDelay>
      for (uint8_t i = 0; i < 10; i++)
 800530e:	1e63      	subs	r3, r4, #1
 8005310:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8005314:	d1f5      	bne.n	8005302 <gsm_waitForRegister+0x3a>
      return true;
 8005316:	2001      	movs	r0, #1
}
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	bf00      	nop
 800531c:	200002e4 	.word	0x200002e4

08005320 <gsm_callback_simcardReady>:
#if (_GSM_CALL == 1 || _GSM_MSG == 1 || _GSM_GPRS == 1)
//###############################################################################################################
void gsm_callback_simcardReady(void)
{
  gsm_printf("CALLBACK SIMCARD READY\r\n");
}
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop

08005324 <gsm_callback_simcardPinRequest>:
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop

08005328 <gsm_callback_simcardPukRequest>:
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <gsm_callback_simcardNotInserted>:
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop

08005330 <gsm_callback_networkRegister>:
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop

08005334 <gsm_callback_networkUnregister>:
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop

08005338 <gsm_callback_newMsg>:
}
#endif
//###############################################################################################################
#if (_GSM_MSG == 1)
void gsm_callback_newMsg(char *number, gsm_time_t time, char *msg)
{
 8005338:	b082      	sub	sp, #8
 800533a:	ab02      	add	r3, sp, #8
 800533c:	e903 0006 	stmdb	r3, {r1, r2}
  gsm_printf("CALLBACK NEW MESSAGE FROM %s, LEN:%d\r\n", number, strlen(msg));
  gsm_printf("%s\r\n", msg);
}
 8005340:	b002      	add	sp, #8
 8005342:	4770      	bx	lr

08005344 <gsm_callback_gprsConnected>:
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop

08005348 <gsm_callback_gprsDisconnected>:
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop

0800534c <gsm_callback_mqttMessage>:
}
//###############################################################################################################
void gsm_callback_mqttMessage(char *topic, char *message)
{
  gsm_printf("CALLBACK GPRS MQTT TOPIC: %s   ----   MESSAGE: %s\r\n", topic, message);
}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop

08005350 <gsm_callback_mqttDisconnect>:
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop

08005354 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005354:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005356:	2001      	movs	r0, #1
 8005358:	f007 fe78 	bl	800d04c <osDelay>
  for(;;)
 800535c:	e7fb      	b.n	8005356 <StartDefaultTask+0x2>
 800535e:	bf00      	nop

08005360 <SystemClock_Config>:
{
 8005360:	b530      	push	{r4, r5, lr}
 8005362:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005364:	2244      	movs	r2, #68	; 0x44
 8005366:	2100      	movs	r1, #0
 8005368:	a805      	add	r0, sp, #20
 800536a:	f00a ff6f 	bl	801024c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800536e:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005370:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005374:	e9cd 3300 	strd	r3, r3, [sp]
 8005378:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800537c:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800537e:	f005 fbaf 	bl	800aae0 <HAL_PWREx_ControlVoltageScaling>
 8005382:	b108      	cbz	r0, 8005388 <SystemClock_Config+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 8005384:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005386:	e7fe      	b.n	8005386 <SystemClock_Config+0x26>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005388:	2209      	movs	r2, #9
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800538a:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800538c:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800538e:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005390:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005394:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005398:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800539c:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800539e:	2307      	movs	r3, #7
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80053a0:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053a2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80053a4:	220a      	movs	r2, #10
 80053a6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80053aa:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 80053ac:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053ae:	f005 fc79 	bl	800aca4 <HAL_RCC_OscConfig>
 80053b2:	4603      	mov	r3, r0
 80053b4:	b108      	cbz	r0, 80053ba <SystemClock_Config+0x5a>
 80053b6:	b672      	cpsid	i
  while (1)
 80053b8:	e7fe      	b.n	80053b8 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053ba:	220f      	movs	r2, #15
 80053bc:	9200      	str	r2, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80053be:	4621      	mov	r1, r4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80053c0:	2280      	movs	r2, #128	; 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80053c2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80053c4:	e9cd 5201 	strd	r5, r2, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053c8:	e9cd 3303 	strd	r3, r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80053cc:	f005 ff7a 	bl	800b2c4 <HAL_RCC_ClockConfig>
 80053d0:	b108      	cbz	r0, 80053d6 <SystemClock_Config+0x76>
 80053d2:	b672      	cpsid	i
  while (1)
 80053d4:	e7fe      	b.n	80053d4 <SystemClock_Config+0x74>
}
 80053d6:	b017      	add	sp, #92	; 0x5c
 80053d8:	bd30      	pop	{r4, r5, pc}
 80053da:	bf00      	nop

080053dc <main>:
{
 80053dc:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053de:	2400      	movs	r4, #0
{
 80053e0:	b0ac      	sub	sp, #176	; 0xb0
  HAL_Init();
 80053e2:	f003 fa9f 	bl	8008924 <HAL_Init>
  SystemClock_Config();
 80053e6:	f7ff ffbb 	bl	8005360 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ea:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 80053ee:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f2:	4db0      	ldr	r5, [pc, #704]	; (80056b4 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f4:	9419      	str	r4, [sp, #100]	; 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80053f8:	f043 0304 	orr.w	r3, r3, #4
 80053fc:	64eb      	str	r3, [r5, #76]	; 0x4c
 80053fe:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	9304      	str	r3, [sp, #16]
 8005406:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005408:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800540a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800540e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005410:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	9305      	str	r3, [sp, #20]
 8005418:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800541a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005422:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	9306      	str	r3, [sp, #24]
 800542a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800542c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800542e:	f043 0302 	orr.w	r3, r3, #2
 8005432:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005434:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005436:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 800543a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800543c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 800543e:	2201      	movs	r2, #1
 8005440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005444:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 8005446:	f004 fc7b 	bl	8009d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 800544a:	4622      	mov	r2, r4
 800544c:	489a      	ldr	r0, [pc, #616]	; (80056b8 <main+0x2dc>)
 800544e:	f248 2101 	movw	r1, #33281	; 0x8201
 8005452:	f004 fc75 	bl	8009d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RST2_Pin|BQ_QON_Pin|BQ_CE_Pin, GPIO_PIN_RESET);
 8005456:	4622      	mov	r2, r4
 8005458:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800545c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005460:	f004 fc6e 	bl	8009d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8005464:	2201      	movs	r2, #1
 8005466:	4894      	ldr	r0, [pc, #592]	; (80056b8 <main+0x2dc>)
 8005468:	f44f 7190 	mov.w	r1, #288	; 0x120
 800546c:	f004 fc68 	bl	8009d40 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005470:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = But_ONOFF_Pin;
 8005474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 8005478:	4890      	ldr	r0, [pc, #576]	; (80056bc <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800547a:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 800547e:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005480:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005482:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 8005486:	f004 fb6d 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800548a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800548e:	488b      	ldr	r0, [pc, #556]	; (80056bc <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005490:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005492:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005494:	e9cd 3715 	strd	r3, r7, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005498:	f004 fb64 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 800549c:	f248 0302 	movw	r3, #32770	; 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a0:	a915      	add	r1, sp, #84	; 0x54
 80054a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	e9cd 7416 	strd	r7, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80054aa:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ac:	f004 fb5a 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80054b0:	2310      	movs	r3, #16
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80054b2:	a915      	add	r1, sp, #84	; 0x54
 80054b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054b8:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80054be:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80054c0:	f004 fb50 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80054c4:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c8:	a915      	add	r1, sp, #84	; 0x54
 80054ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ce:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80054d2:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054d4:	9616      	str	r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d6:	f004 fb45 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 80054da:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80054dc:	a915      	add	r1, sp, #84	; 0x54
 80054de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054e2:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 80054e6:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 80054e8:	f004 fb3c 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|LED2_Pin;
 80054ec:	f248 1321 	movw	r3, #33057	; 0x8121
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f0:	4871      	ldr	r0, [pc, #452]	; (80056b8 <main+0x2dc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f2:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f4:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|LED2_Pin;
 80054fa:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054fc:	f004 fb32 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8005500:	f241 0302 	movw	r3, #4098	; 0x1002
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005504:	486c      	ldr	r0, [pc, #432]	; (80056b8 <main+0x2dc>)
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8005506:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005508:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800550a:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800550e:	f004 fb29 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8005512:	f640 430c 	movw	r3, #3084	; 0xc0c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005516:	4868      	ldr	r0, [pc, #416]	; (80056b8 <main+0x2dc>)
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8005518:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551a:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800551c:	e9cd 7416 	strd	r7, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = RST2_Pin;
 8005520:	f44f 7880 	mov.w	r8, #256	; 0x100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005524:	f004 fb1e 	bl	8009b64 <HAL_GPIO_Init>
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 8005528:	a915      	add	r1, sp, #84	; 0x54
 800552a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005530:	e9cd 6616 	strd	r6, r6, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = RST2_Pin;
 8005534:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 8005538:	f004 fb14 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800553c:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800553e:	4860      	ldr	r0, [pc, #384]	; (80056c0 <main+0x2e4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005540:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005542:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005544:	e9cd 7416 	strd	r7, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005548:	f004 fb0c 	bl	8009b64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Main_SW_Pin;
 800554c:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 8005550:	4859      	ldr	r0, [pc, #356]	; (80056b8 <main+0x2dc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005552:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 8005554:	a915      	add	r1, sp, #84	; 0x54
  GPIO_InitStruct.Pin = Main_SW_Pin;
 8005556:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005558:	e9cd 6916 	strd	r6, r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 800555c:	f004 fb02 	bl	8009b64 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005560:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8005562:	4f58      	ldr	r7, [pc, #352]	; (80056c4 <main+0x2e8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005564:	4333      	orrs	r3, r6
 8005566:	64ab      	str	r3, [r5, #72]	; 0x48
 8005568:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 800556a:	4d57      	ldr	r5, [pc, #348]	; (80056c8 <main+0x2ec>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800556c:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800556e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005570:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8005572:	2105      	movs	r1, #5
 8005574:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005576:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8005578:	f003 fede 	bl	8009338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800557c:	200b      	movs	r0, #11
 800557e:	f003 ff19 	bl	80093b4 <HAL_NVIC_EnableIRQ>
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8005582:	230c      	movs	r3, #12
  ADC_ChannelConfTypeDef sConfig = {0};
 8005584:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8005588:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 800558c:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005590:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005594:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8005598:	e9c5 4410 	strd	r4, r4, [r5, #64]	; 0x40
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800559c:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800559e:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80055a2:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80055a4:	63eb      	str	r3, [r5, #60]	; 0x3c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055a6:	2404      	movs	r4, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80055a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80055ac:	f8a5 8018 	strh.w	r8, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80055b0:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80055b2:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.NbrOfConversion = 1;
 80055b6:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80055b8:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  hadc1.Init.OversamplingMode = ENABLE;
 80055bc:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80055c0:	64ae      	str	r6, [r5, #72]	; 0x48
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80055c2:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80055c4:	f003 f9e2 	bl	800898c <HAL_ADC_Init>
 80055c8:	b108      	cbz	r0, 80055ce <main+0x1f2>
 80055ca:	b672      	cpsid	i
  while (1)
 80055cc:	e7fe      	b.n	80055cc <main+0x1f0>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80055ce:	4603      	mov	r3, r0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80055d0:	9419      	str	r4, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80055d2:	4c3e      	ldr	r4, [pc, #248]	; (80056cc <main+0x2f0>)
  sConfig.Offset = 0;
 80055d4:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80055d6:	2306      	movs	r3, #6
 80055d8:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055dc:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80055de:	237f      	movs	r3, #127	; 0x7f
 80055e0:	2507      	movs	r5, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055e2:	a915      	add	r1, sp, #84	; 0x54
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80055e4:	e9cd 5317 	strd	r5, r3, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055e8:	f003 fafe 	bl	8008be8 <HAL_ADC_ConfigChannel>
 80055ec:	b988      	cbnz	r0, 8005612 <main+0x236>
  hi2c1.Instance = I2C1;
 80055ee:	4c38      	ldr	r4, [pc, #224]	; (80056d0 <main+0x2f4>)
  hi2c1.Init.Timing = 0x00301347;
 80055f0:	4b38      	ldr	r3, [pc, #224]	; (80056d4 <main+0x2f8>)
 80055f2:	4d39      	ldr	r5, [pc, #228]	; (80056d8 <main+0x2fc>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055f4:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055f6:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80055fa:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055fe:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005602:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00301347;
 8005604:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005608:	f004 fcf2 	bl	8009ff0 <HAL_I2C_Init>
 800560c:	b118      	cbz	r0, 8005616 <main+0x23a>
 800560e:	b672      	cpsid	i
  while (1)
 8005610:	e7fe      	b.n	8005610 <main+0x234>
 8005612:	b672      	cpsid	i
 8005614:	e7fe      	b.n	8005614 <main+0x238>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005616:	4601      	mov	r1, r0
 8005618:	4620      	mov	r0, r4
 800561a:	f005 fa03 	bl	800aa24 <HAL_I2CEx_ConfigAnalogFilter>
 800561e:	4601      	mov	r1, r0
 8005620:	b108      	cbz	r0, 8005626 <main+0x24a>
 8005622:	b672      	cpsid	i
  while (1)
 8005624:	e7fe      	b.n	8005624 <main+0x248>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005626:	4620      	mov	r0, r4
 8005628:	f005 fa26 	bl	800aa78 <HAL_I2CEx_ConfigDigitalFilter>
 800562c:	b108      	cbz	r0, 8005632 <main+0x256>
 800562e:	b672      	cpsid	i
  while (1)
 8005630:	e7fe      	b.n	8005630 <main+0x254>
  hi2c2.Instance = I2C2;
 8005632:	4c2a      	ldr	r4, [pc, #168]	; (80056dc <main+0x300>)
 8005634:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <main+0x304>)
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005636:	61e0      	str	r0, [r4, #28]
  hi2c2.Init.OwnAddress1 = 0;
 8005638:	e9c4 5001 	strd	r5, r0, [r4, #4]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800563c:	e9c4 6003 	strd	r6, r0, [r4, #12]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005640:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005644:	f44f 3700 	mov.w	r7, #131072	; 0x20000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005648:	4620      	mov	r0, r4
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800564a:	6227      	str	r7, [r4, #32]
  hi2c2.Instance = I2C2;
 800564c:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800564e:	f004 fccf 	bl	8009ff0 <HAL_I2C_Init>
 8005652:	4601      	mov	r1, r0
 8005654:	b108      	cbz	r0, 800565a <main+0x27e>
 8005656:	b672      	cpsid	i
  while (1)
 8005658:	e7fe      	b.n	8005658 <main+0x27c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800565a:	4620      	mov	r0, r4
 800565c:	f005 f9e2 	bl	800aa24 <HAL_I2CEx_ConfigAnalogFilter>
 8005660:	4601      	mov	r1, r0
 8005662:	b108      	cbz	r0, 8005668 <main+0x28c>
 8005664:	b672      	cpsid	i
  while (1)
 8005666:	e7fe      	b.n	8005666 <main+0x28a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005668:	4620      	mov	r0, r4
 800566a:	f005 fa05 	bl	800aa78 <HAL_I2CEx_ConfigDigitalFilter>
 800566e:	4603      	mov	r3, r0
 8005670:	b108      	cbz	r0, 8005676 <main+0x29a>
 8005672:	b672      	cpsid	i
  while (1)
 8005674:	e7fe      	b.n	8005674 <main+0x298>
  hi2c3.Instance = I2C3;
 8005676:	4c1b      	ldr	r4, [pc, #108]	; (80056e4 <main+0x308>)
  hi2c3.Init.OwnAddress1 = 0;
 8005678:	e9c4 5001 	strd	r5, r0, [r4, #4]
  hi2c3.Init.OwnAddress2 = 0;
 800567c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005680:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005684:	4620      	mov	r0, r4
  hi2c3.Instance = I2C3;
 8005686:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <main+0x30c>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005688:	60e6      	str	r6, [r4, #12]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800568a:	6227      	str	r7, [r4, #32]
  hi2c3.Instance = I2C3;
 800568c:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800568e:	f004 fcaf 	bl	8009ff0 <HAL_I2C_Init>
 8005692:	4601      	mov	r1, r0
 8005694:	b108      	cbz	r0, 800569a <main+0x2be>
 8005696:	b672      	cpsid	i
  while (1)
 8005698:	e7fe      	b.n	8005698 <main+0x2bc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800569a:	4620      	mov	r0, r4
 800569c:	f005 f9c2 	bl	800aa24 <HAL_I2CEx_ConfigAnalogFilter>
 80056a0:	b108      	cbz	r0, 80056a6 <main+0x2ca>
 80056a2:	b672      	cpsid	i
  while (1)
 80056a4:	e7fe      	b.n	80056a4 <main+0x2c8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80056a6:	480f      	ldr	r0, [pc, #60]	; (80056e4 <main+0x308>)
 80056a8:	2100      	movs	r1, #0
 80056aa:	f005 f9e5 	bl	800aa78 <HAL_I2CEx_ConfigDigitalFilter>
 80056ae:	b1e8      	cbz	r0, 80056ec <main+0x310>
 80056b0:	b672      	cpsid	i
  while (1)
 80056b2:	e7fe      	b.n	80056b2 <main+0x2d6>
 80056b4:	40021000 	.word	0x40021000
 80056b8:	48000400 	.word	0x48000400
 80056bc:	48000800 	.word	0x48000800
 80056c0:	48001c00 	.word	0x48001c00
 80056c4:	50040000 	.word	0x50040000
 80056c8:	20000fe0 	.word	0x20000fe0
 80056cc:	c7520000 	.word	0xc7520000
 80056d0:	200010b0 	.word	0x200010b0
 80056d4:	40005400 	.word	0x40005400
 80056d8:	00301347 	.word	0x00301347
 80056dc:	20001104 	.word	0x20001104
 80056e0:	40005800 	.word	0x40005800
 80056e4:	20001158 	.word	0x20001158
 80056e8:	40005c00 	.word	0x40005c00
  huart1.Instance = USART1;
 80056ec:	4b80      	ldr	r3, [pc, #512]	; (80058f0 <main+0x514>)
  huart1.Init.BaudRate = 115200;
 80056ee:	4a81      	ldr	r2, [pc, #516]	; (80058f4 <main+0x518>)
  huart1.Init.Parity = UART_PARITY_NONE;
 80056f0:	6118      	str	r0, [r3, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056f2:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80056f6:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80056fa:	e9c3 0008 	strd	r0, r0, [r3, #32]
  huart1.Init.BaudRate = 115200;
 80056fe:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005702:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005704:	f04f 080c 	mov.w	r8, #12
  huart1.Init.BaudRate = 115200;
 8005708:	e9c3 2700 	strd	r2, r7, [r3]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800570c:	f8c3 8014 	str.w	r8, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005710:	f007 f946 	bl	800c9a0 <HAL_UART_Init>
 8005714:	4601      	mov	r1, r0
 8005716:	b108      	cbz	r0, 800571c <main+0x340>
 8005718:	b672      	cpsid	i
  while (1)
 800571a:	e7fe      	b.n	800571a <main+0x33e>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800571c:	2258      	movs	r2, #88	; 0x58
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800571e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8005722:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 8005726:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800572a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800572e:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005732:	900e      	str	r0, [sp, #56]	; 0x38
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005734:	9008      	str	r0, [sp, #32]
 8005736:	900d      	str	r0, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005738:	eb0d 0002 	add.w	r0, sp, r2
 800573c:	f00a fd86 	bl	801024c <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005740:	2502      	movs	r5, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8005742:	f04f 0904 	mov.w	r9, #4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005746:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005748:	9515      	str	r5, [sp, #84]	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800574a:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800574e:	f005 ff45 	bl	800b5dc <HAL_RCCEx_PeriphCLKConfig>
 8005752:	4604      	mov	r4, r0
 8005754:	b108      	cbz	r0, 800575a <main+0x37e>
 8005756:	b672      	cpsid	i
  while (1)
 8005758:	e7fe      	b.n	8005758 <main+0x37c>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800575a:	4b67      	ldr	r3, [pc, #412]	; (80058f8 <main+0x51c>)
  LL_USART_Init(USART2, &USART_InitStruct);
 800575c:	4e67      	ldr	r6, [pc, #412]	; (80058fc <main+0x520>)
 800575e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005760:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005764:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005766:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005768:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800576c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800576e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800577a:	f8cd 9020 	str.w	r9, [sp, #32]
 800577e:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005782:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 8005786:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005788:	f04f 0907 	mov.w	r9, #7
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800578c:	a908      	add	r1, sp, #32
 800578e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8005792:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  (void)tmpreg;
 8005796:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005798:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800579c:	f007 f9c8 	bl	800cb30 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80057a0:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80057a2:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057a6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80057a8:	2501      	movs	r5, #1
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80057ae:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80057b0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80057b4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80057b6:	950c      	str	r5, [sp, #48]	; 0x30
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b8:	f007 f9ba 	bl	800cb30 <LL_GPIO_Init>
  LL_USART_Init(USART2, &USART_InitStruct);
 80057bc:	a90e      	add	r1, sp, #56	; 0x38
 80057be:	4630      	mov	r0, r6
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80057c0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80057c4:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  USART_InitStruct.BaudRate = 115200;
 80057c8:	970e      	str	r7, [sp, #56]	; 0x38
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80057ca:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80057ce:	9411      	str	r4, [sp, #68]	; 0x44
  LL_USART_Init(USART2, &USART_InitStruct);
 80057d0:	f007 fbbe 	bl	800cf50 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d4:	6873      	ldr	r3, [r6, #4]
  hcrc.Instance = CRC;
 80057d6:	484a      	ldr	r0, [pc, #296]	; (8005900 <main+0x524>)
 80057d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80057dc:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80057de:	68b3      	ldr	r3, [r6, #8]
 80057e0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80057e4:	60b3      	str	r3, [r6, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80057e6:	6833      	ldr	r3, [r6, #0]
 80057e8:	432b      	orrs	r3, r5
 80057ea:	6033      	str	r3, [r6, #0]
 80057ec:	4b45      	ldr	r3, [pc, #276]	; (8005904 <main+0x528>)
 80057ee:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80057f0:	f240 1301 	movw	r3, #257	; 0x101
 80057f4:	8083      	strh	r3, [r0, #4]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80057f6:	2131      	movs	r1, #49	; 0x31
 80057f8:	2310      	movs	r3, #16
  hcrc.Init.InitValue = 0xFF;
 80057fa:	26ff      	movs	r6, #255	; 0xff
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80057fc:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8005800:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8005804:	6205      	str	r5, [r0, #32]
  hcrc.Init.InitValue = 0xFF;
 8005806:	6106      	str	r6, [r0, #16]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005808:	f003 fe4e 	bl	80094a8 <HAL_CRC_Init>
 800580c:	b108      	cbz	r0, 8005812 <main+0x436>
 800580e:	b672      	cpsid	i
  while (1)
 8005810:	e7fe      	b.n	8005810 <main+0x434>
  hrtc.Instance = RTC;
 8005812:	4c3d      	ldr	r4, [pc, #244]	; (8005908 <main+0x52c>)
 8005814:	4b3d      	ldr	r3, [pc, #244]	; (800590c <main+0x530>)
  RTC_TimeTypeDef sTime = {0};
 8005816:	9019      	str	r0, [sp, #100]	; 0x64
 8005818:	e9cd 0015 	strd	r0, r0, [sp, #84]	; 0x54
 800581c:	e9cd 0017 	strd	r0, r0, [sp, #92]	; 0x5c
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005820:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005824:	e9c4 0006 	strd	r0, r0, [r4, #24]
  RTC_DateTypeDef sDate = {0};
 8005828:	900e      	str	r0, [sp, #56]	; 0x38
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800582a:	6060      	str	r0, [r4, #4]
  hrtc.Instance = RTC;
 800582c:	6023      	str	r3, [r4, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800582e:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = 127;
 8005830:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
 8005832:	60e6      	str	r6, [r4, #12]
  hrtc.Init.AsynchPrediv = 127;
 8005834:	60a3      	str	r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005836:	f006 f90d 	bl	800ba54 <HAL_RTC_Init>
 800583a:	b108      	cbz	r0, 8005840 <main+0x464>
 800583c:	b672      	cpsid	i
  while (1)
 800583e:	e7fe      	b.n	800583e <main+0x462>
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005840:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  sTime.Hours = 0x0;
 8005844:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
  sTime.Seconds = 0x0;
 8005848:	f88d 0056 	strb.w	r0, [sp, #86]	; 0x56
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800584c:	462a      	mov	r2, r5
 800584e:	a915      	add	r1, sp, #84	; 0x54
 8005850:	4620      	mov	r0, r4
 8005852:	f006 f949 	bl	800bae8 <HAL_RTC_SetTime>
 8005856:	b108      	cbz	r0, 800585c <main+0x480>
 8005858:	b672      	cpsid	i
  while (1)
 800585a:	e7fe      	b.n	800585a <main+0x47e>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800585c:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <main+0x534>)
 800585e:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005860:	4620      	mov	r0, r4
 8005862:	462a      	mov	r2, r5
 8005864:	a90e      	add	r1, sp, #56	; 0x38
 8005866:	f006 f9cd 	bl	800bc04 <HAL_RTC_SetDate>
 800586a:	4604      	mov	r4, r0
 800586c:	b108      	cbz	r0, 8005872 <main+0x496>
 800586e:	b672      	cpsid	i
  while (1)
 8005870:	e7fe      	b.n	8005870 <main+0x494>
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005872:	4602      	mov	r2, r0
 8005874:	2105      	movs	r1, #5
 8005876:	2025      	movs	r0, #37	; 0x25
 8005878:	f003 fd5e 	bl	8009338 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800587c:	2025      	movs	r0, #37	; 0x25
 800587e:	f003 fd99 	bl	80093b4 <HAL_NVIC_EnableIRQ>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005882:	4b24      	ldr	r3, [pc, #144]	; (8005914 <main+0x538>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800588a:	f1c3 0207 	rsb	r2, r3, #7
 800588e:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005890:	f103 0104 	add.w	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005894:	bf28      	it	cs
 8005896:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005898:	2906      	cmp	r1, #6
 800589a:	bf88      	it	hi
 800589c:	1edc      	subhi	r4, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	4093      	lsls	r3, r2
 80058a4:	43db      	mvns	r3, r3
 80058a6:	f003 0305 	and.w	r3, r3, #5
 80058aa:	40a3      	lsls	r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ac:	4a1a      	ldr	r2, [pc, #104]	; (8005918 <main+0x53c>)
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f882 3326 	strb.w	r3, [r2, #806]	; 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	6053      	str	r3, [r2, #4]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 80058ba:	4c18      	ldr	r4, [pc, #96]	; (800591c <main+0x540>)
 80058bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058be:	ad0e      	add	r5, sp, #56	; 0x38
 80058c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058c2:	f854 3b04 	ldr.w	r3, [r4], #4
 80058c6:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80058c8:	2100      	movs	r1, #0
 80058ca:	a80e      	add	r0, sp, #56	; 0x38
 80058cc:	f007 fba2 	bl	800d014 <osThreadCreate>
 80058d0:	4b13      	ldr	r3, [pc, #76]	; (8005920 <main+0x544>)
 80058d2:	6018      	str	r0, [r3, #0]
  osThreadDef(THPMainTask, THP_MainTask, osPriorityNormal, 0, 512);
 80058d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058d6:	ad15      	add	r5, sp, #84	; 0x54
 80058d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	602b      	str	r3, [r5, #0]
  THPMainTaskHandle = osThreadCreate(osThread(THPMainTask), NULL);
 80058de:	2100      	movs	r1, #0
 80058e0:	a815      	add	r0, sp, #84	; 0x54
 80058e2:	f007 fb97 	bl	800d014 <osThreadCreate>
 80058e6:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <main+0x548>)
 80058e8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80058ea:	f007 fb8d 	bl	800d008 <osKernelStart>
  while (1)
 80058ee:	e7fe      	b.n	80058ee <main+0x512>
 80058f0:	200011d0 	.word	0x200011d0
 80058f4:	40013800 	.word	0x40013800
 80058f8:	40021000 	.word	0x40021000
 80058fc:	40004400 	.word	0x40004400
 8005900:	20001044 	.word	0x20001044
 8005904:	40023000 	.word	0x40023000
 8005908:	200011ac 	.word	0x200011ac
 800590c:	40002800 	.word	0x40002800
 8005910:	07010101 	.word	0x07010101
 8005914:	e000ed00 	.word	0xe000ed00
 8005918:	e000e100 	.word	0xe000e100
 800591c:	08013500 	.word	0x08013500
 8005920:	20000fdc 	.word	0x20000fdc
 8005924:	20000fd8 	.word	0x20000fd8

08005928 <HAL_TIM_PeriodElapsedCallback>:
{
 8005928:	b538      	push	{r3, r4, r5, lr}
  if (htim->Instance == TIM7) {
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800592c:	6804      	ldr	r4, [r0, #0]
 800592e:	429c      	cmp	r4, r3
 8005930:	d000      	beq.n	8005934 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	4605      	mov	r5, r0
    HAL_IncTick();
 8005936:	f003 f805 	bl	8008944 <HAL_IncTick>
  if (htim->Instance == TIM7) {
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	42a3      	cmp	r3, r4
 800593e:	d1f8      	bne.n	8005932 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8005940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  HAL_SYSTICK_Callback();
 8005944:	f001 baa2 	b.w	8006e8c <HAL_SYSTICK_Callback>
 8005948:	40001400 	.word	0x40001400

0800594c <Error_Handler>:
 800594c:	b672      	cpsid	i
  while (1)
 800594e:	e7fe      	b.n	800594e <Error_Handler+0x2>

08005950 <hsensor_humidity_conversion_and_read_adc>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error
 */
enum ms8607_status hsensor_humidity_conversion_and_read_adc( uint16_t *adc)
{
 8005950:	b5f0      	push	{r4, r5, r6, r7, lr}
		.address     = HSENSOR_ADDR,
		.data_length = 3,
		.data        = buffer,
	};
	
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 8005952:	4a3b      	ldr	r2, [pc, #236]	; (8005a40 <hsensor_humidity_conversion_and_read_adc+0xf0>)
    struct i2c_master_packet read_transfer = {
 8005954:	4c3b      	ldr	r4, [pc, #236]	; (8005a44 <hsensor_humidity_conversion_and_read_adc+0xf4>)
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 8005956:	7812      	ldrb	r2, [r2, #0]
{
 8005958:	b087      	sub	sp, #28
	buffer[0] = 0;
 800595a:	2300      	movs	r3, #0
    struct i2c_master_packet read_transfer = {
 800595c:	a901      	add	r1, sp, #4
	buffer[0] = 0;
 800595e:	f8ad 3004 	strh.w	r3, [sp, #4]
	buffer[2] = 0;
 8005962:	f88d 3006 	strb.w	r3, [sp, #6]
    struct i2c_master_packet read_transfer = {
 8005966:	e9cd 4102 	strd	r4, r1, [sp, #8]
	struct i2c_master_packet transfer = {
 800596a:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <hsensor_humidity_conversion_and_read_adc+0xf8>)
{
 800596c:	4606      	mov	r6, r0
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 800596e:	b982      	cbnz	r2, 8005992 <hsensor_humidity_conversion_and_read_adc+0x42>
	data[0] = cmd;
 8005970:	22e5      	movs	r2, #229	; 0xe5
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 8005972:	a804      	add	r0, sp, #16
	data[0] = cmd;
 8005974:	f88d 2000 	strb.w	r2, [sp]
	struct i2c_master_packet transfer = {
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 800597e:	f000 fb15 	bl	8005fac <i2c_master_write_packet_wait_no_stop>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005982:	2801      	cmp	r0, #1
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 8005984:	4605      	mov	r5, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005986:	d001      	beq.n	800598c <hsensor_humidity_conversion_and_read_adc+0x3c>
	if( i2c_status != STATUS_OK)
 8005988:	b1c8      	cbz	r0, 80059be <hsensor_humidity_conversion_and_read_adc+0x6e>
		
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
	if( i2c_status == STATUS_ERR_OVERFLOW )
		return ms8607_status_no_i2c_acknowledge;
	if( i2c_status != STATUS_OK)
		return ms8607_status_i2c_transfer_error;
 800598a:	2502      	movs	r5, #2
		return status;
	
	*adc = _adc;

	return status;
}
 800598c:	4628      	mov	r0, r5
 800598e:	b007      	add	sp, #28
 8005990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data[0] = cmd;
 8005992:	22f5      	movs	r2, #245	; 0xf5
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005994:	a804      	add	r0, sp, #16
	data[0] = cmd;
 8005996:	f88d 2000 	strb.w	r2, [sp]
	struct i2c_master_packet transfer = {
 800599a:	9304      	str	r3, [sp, #16]
 800599c:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80059a0:	f000 faf6 	bl	8005f90 <i2c_master_write_packet_wait>
		osDelay(hsensor_conversion_time/1000);
 80059a4:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <hsensor_humidity_conversion_and_read_adc+0xfc>)
 80059a6:	4b2a      	ldr	r3, [pc, #168]	; (8005a50 <hsensor_humidity_conversion_and_read_adc+0x100>)
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80059a8:	4605      	mov	r5, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 80059aa:	2d01      	cmp	r5, #1
		osDelay(hsensor_conversion_time/1000);
 80059ac:	6810      	ldr	r0, [r2, #0]
	if( i2c_status == STATUS_ERR_OVERFLOW )
 80059ae:	d037      	beq.n	8005a20 <hsensor_humidity_conversion_and_read_adc+0xd0>
	if( i2c_status != STATUS_OK)
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	d13d      	bne.n	8005a30 <hsensor_humidity_conversion_and_read_adc+0xe0>
		osDelay(hsensor_conversion_time/1000);
 80059b4:	fba3 3000 	umull	r3, r0, r3, r0
 80059b8:	0980      	lsrs	r0, r0, #6
 80059ba:	f007 fb47 	bl	800d04c <osDelay>
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 80059be:	a802      	add	r0, sp, #8
 80059c0:	f000 fad8 	bl	8005f74 <i2c_master_read_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 80059c4:	2801      	cmp	r0, #1
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 80059c6:	4605      	mov	r5, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 80059c8:	d0e0      	beq.n	800598c <hsensor_humidity_conversion_and_read_adc+0x3c>
	if( i2c_status != STATUS_OK)
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d1dd      	bne.n	800598a <hsensor_humidity_conversion_and_read_adc+0x3a>
	_adc = (buffer[0] << 8) | buffer[1];
 80059ce:	f8bd e004 	ldrh.w	lr, [sp, #4]
	crc = buffer[2];
 80059d2:	f89d 7006 	ldrb.w	r7, [sp, #6]
	uint32_t mask    = 0xFF8000;
 80059d6:	4c1f      	ldr	r4, [pc, #124]	; (8005a54 <hsensor_humidity_conversion_and_read_adc+0x104>)
	uint32_t polynom = 0x988000; // x^8 + x^5 + x^4 + 1
 80059d8:	491f      	ldr	r1, [pc, #124]	; (8005a58 <hsensor_humidity_conversion_and_read_adc+0x108>)
 80059da:	fa9e fe9e 	rev16.w	lr, lr
 80059de:	fa1f fc8e 	uxth.w	ip, lr
	uint32_t result  = (uint32_t)value<<8; // Pad with zeros as specified in spec
 80059e2:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80059e6:	2210      	movs	r2, #16
	uint32_t msb     = 0x800000;
 80059e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
		if( result & msb )
 80059ec:	ea13 0f0c 	tst.w	r3, ip
			result = ((result ^ polynom) & mask) | ( result & ~mask);
 80059f0:	bf1c      	itt	ne
 80059f2:	ea04 0001 	andne.w	r0, r4, r1
 80059f6:	ea8c 0c00 	eorne.w	ip, ip, r0
	while( msb != 0x80 ) {
 80059fa:	3a01      	subs	r2, #1
		msb >>= 1;
 80059fc:	ea4f 0353 	mov.w	r3, r3, lsr #1
		mask >>= 1;
 8005a00:	ea4f 0454 	mov.w	r4, r4, lsr #1
		polynom >>=1;
 8005a04:	ea4f 0151 	mov.w	r1, r1, lsr #1
	while( msb != 0x80 ) {
 8005a08:	d1f0      	bne.n	80059ec <hsensor_humidity_conversion_and_read_adc+0x9c>
	if( result == crc )
 8005a0a:	4567      	cmp	r7, ip
 8005a0c:	d003      	beq.n	8005a16 <hsensor_humidity_conversion_and_read_adc+0xc6>
		return ms8607_status_crc_error;
 8005a0e:	2503      	movs	r5, #3
}
 8005a10:	4628      	mov	r0, r5
 8005a12:	b007      	add	sp, #28
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a16:	4628      	mov	r0, r5
	*adc = _adc;
 8005a18:	f8a6 e000 	strh.w	lr, [r6]
}
 8005a1c:	b007      	add	sp, #28
 8005a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(hsensor_conversion_time/1000);
 8005a20:	fba3 3000 	umull	r3, r0, r3, r0
 8005a24:	0980      	lsrs	r0, r0, #6
 8005a26:	f007 fb11 	bl	800d04c <osDelay>
}
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	b007      	add	sp, #28
 8005a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(hsensor_conversion_time/1000);
 8005a30:	fba3 3000 	umull	r3, r0, r3, r0
 8005a34:	0980      	lsrs	r0, r0, #6
		return ms8607_status_i2c_transfer_error;
 8005a36:	2502      	movs	r5, #2
		osDelay(hsensor_conversion_time/1000);
 8005a38:	f007 fb08 	bl	800d04c <osDelay>
	if( status != ms8607_status_ok)
 8005a3c:	e7a6      	b.n	800598c <hsensor_humidity_conversion_and_read_adc+0x3c>
 8005a3e:	bf00      	nop
 8005a40:	20001264 	.word	0x20001264
 8005a44:	00030080 	.word	0x00030080
 8005a48:	00010080 	.word	0x00010080
 8005a4c:	20000004 	.word	0x20000004
 8005a50:	10624dd3 	.word	0x10624dd3
 8005a54:	00ff8000 	.word	0x00ff8000
 8005a58:	00988000 	.word	0x00988000

08005a5c <psensor_read_eeprom>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error on the coefficients
 */
enum ms8607_status psensor_read_eeprom(void)
{
 8005a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a60:	b087      	sub	sp, #28
 8005a62:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8005b44 <psensor_read_eeprom+0xe8>
	struct i2c_master_packet read_transfer = {
 8005a66:	4f33      	ldr	r7, [pc, #204]	; (8005b34 <psensor_read_eeprom+0xd8>)
	struct i2c_master_packet transfer = {
 8005a68:	4e33      	ldr	r6, [pc, #204]	; (8005b38 <psensor_read_eeprom+0xdc>)
{
 8005a6a:	24a0      	movs	r4, #160	; 0xa0
 8005a6c:	f10d 0804 	add.w	r8, sp, #4
	buffer[0] = 0;
 8005a70:	2500      	movs	r5, #0
 8005a72:	e010      	b.n	8005a96 <psensor_read_eeprom+0x3a>
	if( i2c_status != STATUS_OK)
 8005a74:	bb19      	cbnz	r1, 8005abe <psensor_read_eeprom+0x62>
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8005a76:	f000 fa7d 	bl	8005f74 <i2c_master_read_packet_wait>
	enum ms8607_status status;
	uint8_t i;
	
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8005a7a:	3402      	adds	r4, #2
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005a7c:	2801      	cmp	r0, #1
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8005a7e:	b2e4      	uxtb	r4, r4
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005a80:	d056      	beq.n	8005b30 <psensor_read_eeprom+0xd4>
	if( i2c_status != STATUS_OK)
 8005a82:	b9e0      	cbnz	r0, 8005abe <psensor_read_eeprom+0x62>
 8005a84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005a88:	ba5b      	rev16	r3, r3
	*coeff = (buffer[0] << 8) | buffer[1];
 8005a8a:	f829 3f02 	strh.w	r3, [r9, #2]!
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8005a8e:	b29b      	uxth	r3, r3
    if (*coeff == 0) {
 8005a90:	b1ab      	cbz	r3, 8005abe <psensor_read_eeprom+0x62>
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8005a92:	2cae      	cmp	r4, #174	; 0xae
 8005a94:	d018      	beq.n	8005ac8 <psensor_read_eeprom+0x6c>
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005a96:	a804      	add	r0, sp, #16
	struct i2c_master_packet read_transfer = {
 8005a98:	e9cd 7802 	strd	r7, r8, [sp, #8]
	data[0] = cmd;
 8005a9c:	f88d 4000 	strb.w	r4, [sp]
	buffer[0] = 0;
 8005aa0:	f8ad 5004 	strh.w	r5, [sp, #4]
	struct i2c_master_packet transfer = {
 8005aa4:	9604      	str	r6, [sp, #16]
 8005aa6:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005aaa:	f000 fa71 	bl	8005f90 <i2c_master_write_packet_wait>
 8005aae:	4601      	mov	r1, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005ab0:	2901      	cmp	r1, #1
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8005ab2:	a802      	add	r0, sp, #8
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005ab4:	d1de      	bne.n	8005a74 <psensor_read_eeprom+0x18>
		return ms8607_status_crc_error;
	
	psensor_coeff_read = true;
	
  	return ms8607_status_ok;
}
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	b007      	add	sp, #28
 8005aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ms8607_status_i2c_transfer_error;
 8005abe:	2102      	movs	r1, #2
}
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	b007      	add	sp, #28
 8005ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 8005ac8:	4c1c      	ldr	r4, [pc, #112]	; (8005b3c <psensor_read_eeprom+0xe0>)
 8005aca:	f8b4 c000 	ldrh.w	ip, [r4]
	uint8_t cnt, n_bit;
	uint16_t n_rem, crc_read;
	
	n_rem = 0x00;
	crc_read = n_prom[0];
	n_prom[COEFFICIENT_NUMBERS] = 0;
 8005ace:	81e0      	strh	r0, [r4, #14]
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 8005ad0:	f3cc 030b 	ubfx	r3, ip, #0, #12
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 8005ad4:	ea4f 3e1c 	mov.w	lr, ip, lsr #12
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 8005ad8:	8023      	strh	r3, [r4, #0]
	n_rem = 0x00;
 8005ada:	4602      	mov	r2, r0

	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {

		// Get next byte
		if (cnt%2 == 1)
 8005adc:	07c1      	lsls	r1, r0, #31
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
 8005ade:	bf46      	itte	mi
 8005ae0:	b2db      	uxtbmi	r3, r3
 8005ae2:	405a      	eormi	r2, r3
		else
			n_rem ^=  n_prom[cnt>>1]>>8 ;
 8005ae4:	ea82 2213 	eorpl.w	r2, r2, r3, lsr #8
	n_rem = 0x00;
 8005ae8:	2108      	movs	r1, #8

		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {

			if( n_rem & 0x8000 )
				n_rem = (n_rem << 1) ^ 0x3000;
 8005aea:	0053      	lsls	r3, r2, #1
 8005aec:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
			if( n_rem & 0x8000 )
 8005af0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
				n_rem = (n_rem << 1) ^ 0x3000;
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	bf14      	ite	ne
 8005af8:	b29a      	uxthne	r2, r3
			else
				n_rem <<= 1;
 8005afa:	0052      	lsleq	r2, r2, #1
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 8005afc:	f101 33ff 	add.w	r3, r1, #4294967295
				n_rem <<= 1;
 8005b00:	bf08      	it	eq
 8005b02:	b292      	uxtheq	r2, r2
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 8005b04:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8005b08:	d1ef      	bne.n	8005aea <psensor_read_eeprom+0x8e>
	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	b2c0      	uxtb	r0, r0
 8005b0e:	2810      	cmp	r0, #16
 8005b10:	d003      	beq.n	8005b1a <psensor_read_eeprom+0xbe>
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
 8005b12:	0843      	lsrs	r3, r0, #1
 8005b14:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8005b18:	e7e0      	b.n	8005adc <psensor_read_eeprom+0x80>
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 8005b1a:	ebbe 3f12 	cmp.w	lr, r2, lsr #12
	psensor_coeff_read = true;
 8005b1e:	bf08      	it	eq
 8005b20:	4b07      	ldreq	r3, [pc, #28]	; (8005b40 <psensor_read_eeprom+0xe4>)
		}
	}
	n_rem >>= 12;
	n_prom[0] = crc_read;
 8005b22:	f8a4 c000 	strh.w	ip, [r4]
	psensor_coeff_read = true;
 8005b26:	bf06      	itte	eq
 8005b28:	2201      	moveq	r2, #1
 8005b2a:	701a      	strbeq	r2, [r3, #0]
		return ms8607_status_crc_error;
 8005b2c:	2103      	movne	r1, #3
 8005b2e:	e7c2      	b.n	8005ab6 <psensor_read_eeprom+0x5a>
		return ms8607_status_no_i2c_acknowledge;
 8005b30:	4601      	mov	r1, r0
 8005b32:	e7c0      	b.n	8005ab6 <psensor_read_eeprom+0x5a>
 8005b34:	000200ec 	.word	0x000200ec
 8005b38:	000100ec 	.word	0x000100ec
 8005b3c:	20001254 	.word	0x20001254
 8005b40:	20001265 	.word	0x20001265
 8005b44:	20001252 	.word	0x20001252

08005b48 <psensor_conversion_and_read_adc>:
{
 8005b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	4605      	mov	r5, r0
    struct i2c_master_packet read_transfer = {
 8005b4e:	a801      	add	r0, sp, #4
	buffer[0] = 0;
 8005b50:	2300      	movs	r3, #0
    struct i2c_master_packet read_transfer = {
 8005b52:	4a31      	ldr	r2, [pc, #196]	; (8005c18 <psensor_conversion_and_read_adc+0xd0>)
 8005b54:	9003      	str	r0, [sp, #12]
	struct i2c_master_packet transfer = {
 8005b56:	4f31      	ldr	r7, [pc, #196]	; (8005c1c <psensor_conversion_and_read_adc+0xd4>)
	buffer[0] = 0;
 8005b58:	f8ad 3004 	strh.w	r3, [sp, #4]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005b5c:	a804      	add	r0, sp, #16
{
 8005b5e:	460e      	mov	r6, r1
	buffer[2] = 0;
 8005b60:	f88d 3006 	strb.w	r3, [sp, #6]
    struct i2c_master_packet read_transfer = {
 8005b64:	9202      	str	r2, [sp, #8]
	data[0] = cmd;
 8005b66:	f88d 5000 	strb.w	r5, [sp]
	struct i2c_master_packet transfer = {
 8005b6a:	9704      	str	r7, [sp, #16]
 8005b6c:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005b70:	f000 fa0e 	bl	8005f90 <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005b74:	2801      	cmp	r0, #1
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005b76:	4604      	mov	r4, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005b78:	d02d      	beq.n	8005bd6 <psensor_conversion_and_read_adc+0x8e>
	if( i2c_status != STATUS_OK)
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d13d      	bne.n	8005bfa <psensor_conversion_and_read_adc+0xb2>
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8005b7e:	4b28      	ldr	r3, [pc, #160]	; (8005c20 <psensor_conversion_and_read_adc+0xd8>)
 8005b80:	f3c5 0542 	ubfx	r5, r5, #1, #3
 8005b84:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b88:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <psensor_conversion_and_read_adc+0xdc>)
 8005b8a:	fba3 3000 	umull	r3, r0, r3, r0
 8005b8e:	0980      	lsrs	r0, r0, #6
 8005b90:	f007 fa5c 	bl	800d04c <osDelay>
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005b94:	a804      	add	r0, sp, #16
	data[0] = cmd;
 8005b96:	f88d 4000 	strb.w	r4, [sp]
	struct i2c_master_packet transfer = {
 8005b9a:	9704      	str	r7, [sp, #16]
 8005b9c:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005ba0:	f000 f9f6 	bl	8005f90 <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005ba4:	2801      	cmp	r0, #1
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005ba6:	4604      	mov	r4, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005ba8:	d012      	beq.n	8005bd0 <psensor_conversion_and_read_adc+0x88>
	if( i2c_status != STATUS_OK)
 8005baa:	bb10      	cbnz	r0, 8005bf2 <psensor_conversion_and_read_adc+0xaa>
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8005bac:	a802      	add	r0, sp, #8
 8005bae:	f000 f9e1 	bl	8005f74 <i2c_master_read_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005bb2:	2801      	cmp	r0, #1
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8005bb4:	4604      	mov	r4, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8005bb6:	d00b      	beq.n	8005bd0 <psensor_conversion_and_read_adc+0x88>
	if( i2c_status != STATUS_OK)
 8005bb8:	b9d8      	cbnz	r0, 8005bf2 <psensor_conversion_and_read_adc+0xaa>
	*adc = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8005bba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005bbe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8005bc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	6033      	str	r3, [r6, #0]
}
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	b007      	add	sp, #28
 8005bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8005bd6:	4a12      	ldr	r2, [pc, #72]	; (8005c20 <psensor_conversion_and_read_adc+0xd8>)
 8005bd8:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <psensor_conversion_and_read_adc+0xdc>)
 8005bda:	f3c5 0542 	ubfx	r5, r5, #1, #3
 8005bde:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8005be2:	fba3 3000 	umull	r3, r0, r3, r0
 8005be6:	0980      	lsrs	r0, r0, #6
 8005be8:	f007 fa30 	bl	800d04c <osDelay>
}
 8005bec:	4620      	mov	r0, r4
 8005bee:	b007      	add	sp, #28
 8005bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ms8607_status_i2c_transfer_error;
 8005bf2:	2402      	movs	r4, #2
}
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	b007      	add	sp, #28
 8005bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <psensor_conversion_and_read_adc+0xd8>)
 8005bfc:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <psensor_conversion_and_read_adc+0xdc>)
 8005bfe:	f3c5 0542 	ubfx	r5, r5, #1, #3
		return ms8607_status_i2c_transfer_error;
 8005c02:	2402      	movs	r4, #2
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8005c04:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8005c08:	fba3 3000 	umull	r3, r0, r3, r0
 8005c0c:	0980      	lsrs	r0, r0, #6
 8005c0e:	f007 fa1d 	bl	800d04c <osDelay>
}
 8005c12:	4620      	mov	r0, r4
 8005c14:	b007      	add	sp, #28
 8005c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c18:	000300ec 	.word	0x000300ec
 8005c1c:	000100ec 	.word	0x000100ec
 8005c20:	08014c74 	.word	0x08014c74
 8005c24:	10624dd3 	.word	0x10624dd3

08005c28 <ms8607_init>:
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 8005c28:	4903      	ldr	r1, [pc, #12]	; (8005c38 <ms8607_init+0x10>)
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <ms8607_init+0x14>)
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 8005c2c:	2000      	movs	r0, #0
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 8005c2e:	2205      	movs	r2, #5
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 8005c30:	7008      	strb	r0, [r1, #0]
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 8005c32:	701a      	strb	r2, [r3, #0]
	i2c_master_init();
 8005c34:	f000 b99c 	b.w	8005f70 <i2c_master_init>
 8005c38:	20001264 	.word	0x20001264
 8005c3c:	20001266 	.word	0x20001266

08005c40 <MS8607_osr>:
	psensor_resolution_osr = osr;
 8005c40:	4b01      	ldr	r3, [pc, #4]	; (8005c48 <MS8607_osr+0x8>)
 8005c42:	7018      	strb	r0, [r3, #0]
	i2c_master_init();
 8005c44:	f000 b994 	b.w	8005f70 <i2c_master_init>
 8005c48:	20001266 	.word	0x20001266

08005c4c <ms8607_is_connected>:
{
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	b082      	sub	sp, #8
	struct i2c_master_packet transfer = {
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	2400      	movs	r4, #0
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005c54:	4668      	mov	r0, sp
	struct i2c_master_packet transfer = {
 8005c56:	e9cd 3400 	strd	r3, r4, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005c5a:	f000 f999 	bl	8005f90 <i2c_master_write_packet_wait>
	if( i2c_status != STATUS_OK)
 8005c5e:	b958      	cbnz	r0, 8005c78 <ms8607_is_connected+0x2c>
	struct i2c_master_packet transfer = {
 8005c60:	4603      	mov	r3, r0
 8005c62:	22ec      	movs	r2, #236	; 0xec
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005c64:	4668      	mov	r0, sp
	struct i2c_master_packet transfer = {
 8005c66:	e9cd 2300 	strd	r2, r3, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8005c6a:	f000 f991 	bl	8005f90 <i2c_master_write_packet_wait>
	if( i2c_status != STATUS_OK)
 8005c6e:	fab0 f080 	clz	r0, r0
 8005c72:	0940      	lsrs	r0, r0, #5
}
 8005c74:	b002      	add	sp, #8
 8005c76:	bd10      	pop	{r4, pc}
		return false;
 8005c78:	4620      	mov	r0, r4
}
 8005c7a:	b002      	add	sp, #8
 8005c7c:	bd10      	pop	{r4, pc}
 8005c7e:	bf00      	nop

08005c80 <ms8607_read_humidity>:
{
 8005c80:	b510      	push	{r4, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	4604      	mov	r4, r0
	status = hsensor_humidity_conversion_and_read_adc( &adc);
 8005c86:	f10d 0006 	add.w	r0, sp, #6
 8005c8a:	f7ff fe61 	bl	8005950 <hsensor_humidity_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8005c8e:	b988      	cbnz	r0, 8005cb4 <ms8607_read_humidity+0x34>
	*humidity = (float)adc * HUMIDITY_COEFF_MUL / (1UL<<16) + HUMIDITY_COEFF_ADD;
 8005c90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005c94:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005cb8 <ms8607_read_humidity+0x38>
 8005c98:	eddf 6a08 	vldr	s13, [pc, #32]	; 8005cbc <ms8607_read_humidity+0x3c>
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ca8:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8005cac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8005cb0:	ed84 7a00 	vstr	s14, [r4]
	}
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd10      	pop	{r4, pc}
 8005cb8:	42fa0000 	.word	0x42fa0000
 8005cbc:	37800000 	.word	0x37800000

08005cc0 <psensor_read_temperature>:
{
 8005cc0:	b510      	push	{r4, lr}
	if( psensor_coeff_read == false )
 8005cc2:	4b28      	ldr	r3, [pc, #160]	; (8005d64 <psensor_read_temperature+0xa4>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
{
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	4604      	mov	r4, r0
	if( psensor_coeff_read == false )
 8005cca:	b913      	cbnz	r3, 8005cd2 <psensor_read_temperature+0x12>
		status = psensor_read_eeprom();
 8005ccc:	f7ff fec6 	bl	8005a5c <psensor_read_eeprom>
	if( status != ms8607_status_ok)
 8005cd0:	bba8      	cbnz	r0, 8005d3e <psensor_read_temperature+0x7e>
	cmd = psensor_resolution_osr*2;
 8005cd2:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <psensor_read_temperature+0xa8>)
 8005cd4:	7818      	ldrb	r0, [r3, #0]
 8005cd6:	0040      	lsls	r0, r0, #1
 8005cd8:	b2c0      	uxtb	r0, r0
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8005cda:	a901      	add	r1, sp, #4
 8005cdc:	f040 0050 	orr.w	r0, r0, #80	; 0x50
 8005ce0:	f7ff ff32 	bl	8005b48 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8005ce4:	bb58      	cbnz	r0, 8005d3e <psensor_read_temperature+0x7e>
    if (adc_temperature == 0) {
 8005ce6:	9b01      	ldr	r3, [sp, #4]
 8005ce8:	b3cb      	cbz	r3, 8005d5e <psensor_read_temperature+0x9e>
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8005cea:	4a20      	ldr	r2, [pc, #128]	; (8005d6c <psensor_read_temperature+0xac>)
 8005cec:	8951      	ldrh	r1, [r2, #10]
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8005cee:	8992      	ldrh	r2, [r2, #12]
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8005cf0:	eba3 2301 	sub.w	r3, r3, r1, lsl #8
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8005cf4:	fb82 2103 	smull	r2, r1, r2, r3
 8005cf8:	0dd2      	lsrs	r2, r2, #23
 8005cfa:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8005cfe:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
	if( TEMP < 2000 )
 8005d02:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 8005d06:	fb83 3103 	smull	r3, r1, r3, r3
	if( TEMP < 2000 )
 8005d0a:	da1a      	bge.n	8005d42 <psensor_read_temperature+0x82>
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 8005d0c:	eb13 0c03 	adds.w	ip, r3, r3
 8005d10:	eb41 0e01 	adc.w	lr, r1, r1
 8005d14:	eb1c 0c03 	adds.w	ip, ip, r3
 8005d18:	eb41 010e 	adc.w	r1, r1, lr
 8005d1c:	104b      	asrs	r3, r1, #1
 8005d1e:	ee07 3a10 	vmov	s14, r3
	*temperature = ( (float)TEMP - T2 ) / 100;
 8005d22:	ee07 2a90 	vmov	s15, r2
 8005d26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d2e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8005d70 <psensor_read_temperature+0xb0>
 8005d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d3a:	ed84 7a00 	vstr	s14, [r4]
}
 8005d3e:	b002      	add	sp, #8
 8005d40:	bd10      	pop	{r4, pc}
		T2 = ( 5 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 38;
 8005d42:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 8005d46:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8005d4a:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
 8005d4e:	eb1c 0c03 	adds.w	ip, ip, r3
 8005d52:	eb41 010e 	adc.w	r1, r1, lr
 8005d56:	118b      	asrs	r3, r1, #6
 8005d58:	ee07 3a10 	vmov	s14, r3
		SENS2 = 0 ;
 8005d5c:	e7e1      	b.n	8005d22 <psensor_read_temperature+0x62>
        return ms8607_status_i2c_transfer_error;
 8005d5e:	2002      	movs	r0, #2
}
 8005d60:	b002      	add	sp, #8
 8005d62:	bd10      	pop	{r4, pc}
 8005d64:	20001265 	.word	0x20001265
 8005d68:	20001266 	.word	0x20001266
 8005d6c:	20001254 	.word	0x20001254
 8005d70:	42c80000 	.word	0x42c80000

08005d74 <ms8607_read_temperature>:
	status = psensor_read_temperature(t);
 8005d74:	f7ff bfa4 	b.w	8005cc0 <psensor_read_temperature>

08005d78 <psensor_read_pressure>:
{
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( psensor_coeff_read == false )
 8005d7c:	4b77      	ldr	r3, [pc, #476]	; (8005f5c <psensor_read_pressure+0x1e4>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
{
 8005d80:	b083      	sub	sp, #12
 8005d82:	4605      	mov	r5, r0
	if( psensor_coeff_read == false )
 8005d84:	b91b      	cbnz	r3, 8005d8e <psensor_read_pressure+0x16>
		status = psensor_read_eeprom();
 8005d86:	f7ff fe69 	bl	8005a5c <psensor_read_eeprom>
	if( status != ms8607_status_ok)
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	b950      	cbnz	r0, 8005da4 <psensor_read_pressure+0x2c>
	cmd = psensor_resolution_osr*2;
 8005d8e:	4e74      	ldr	r6, [pc, #464]	; (8005f60 <psensor_read_pressure+0x1e8>)
 8005d90:	7833      	ldrb	r3, [r6, #0]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	b2db      	uxtb	r3, r3
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8005d96:	4669      	mov	r1, sp
 8005d98:	f043 0050 	orr.w	r0, r3, #80	; 0x50
 8005d9c:	f7ff fed4 	bl	8005b48 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8005da0:	4604      	mov	r4, r0
 8005da2:	b118      	cbz	r0, 8005dac <psensor_read_pressure+0x34>
}
 8005da4:	4620      	mov	r0, r4
 8005da6:	b003      	add	sp, #12
 8005da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd = psensor_resolution_osr*2;
 8005dac:	7830      	ldrb	r0, [r6, #0]
 8005dae:	0040      	lsls	r0, r0, #1
 8005db0:	b2c0      	uxtb	r0, r0
	status = psensor_conversion_and_read_adc( cmd, &adc_pressure);
 8005db2:	a901      	add	r1, sp, #4
 8005db4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8005db8:	f7ff fec6 	bl	8005b48 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d1f0      	bne.n	8005da4 <psensor_read_pressure+0x2c>
    if (adc_temperature == 0 || adc_pressure == 0) {
 8005dc2:	9a00      	ldr	r2, [sp, #0]
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	f000 80be 	beq.w	8005f46 <psensor_read_pressure+0x1ce>
 8005dca:	9e01      	ldr	r6, [sp, #4]
 8005dcc:	2e00      	cmp	r6, #0
 8005dce:	f000 80ba 	beq.w	8005f46 <psensor_read_pressure+0x1ce>
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8005dd2:	4964      	ldr	r1, [pc, #400]	; (8005f64 <psensor_read_pressure+0x1ec>)
 8005dd4:	894b      	ldrh	r3, [r1, #10]
 8005dd6:	eba2 2203 	sub.w	r2, r2, r3, lsl #8
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8005dda:	898b      	ldrh	r3, [r1, #12]
 8005ddc:	fb83 3002 	smull	r3, r0, r3, r2
 8005de0:	0ddb      	lsrs	r3, r3, #23
 8005de2:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8005de6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
	if( TEMP < 2000 )
 8005dea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005dee:	f280 80af 	bge.w	8005f50 <psensor_read_pressure+0x1d8>
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005df2:	f5b3 6cfa 	subs.w	ip, r3, #2000	; 0x7d0
 8005df6:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8005dfa:	f169 0700 	sbc.w	r7, r9, #0
 8005dfe:	fb0c f707 	mul.w	r7, ip, r7
 8005e02:	fbac 0c0c 	umull	r0, ip, ip, ip
 8005e06:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
 8005e0a:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8005e0e:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 8005e12:	ebbe 0e00 	subs.w	lr, lr, r0
 8005e16:	ea47 7710 	orr.w	r7, r7, r0, lsr #28
 8005e1a:	eb67 070c 	sbc.w	r7, r7, ip
 8005e1e:	00bf      	lsls	r7, r7, #2
 8005e20:	ea47 779e 	orr.w	r7, r7, lr, lsr #30
 8005e24:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005e28:	eb1e 0e00 	adds.w	lr, lr, r0
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e2c:	ea4f 0acc 	mov.w	sl, ip, lsl #3
 8005e30:	ea4f 08c0 	mov.w	r8, r0, lsl #3
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e34:	eb4c 0707 	adc.w	r7, ip, r7
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e38:	ea4a 7a50 	orr.w	sl, sl, r0, lsr #29
 8005e3c:	ebb8 0800 	subs.w	r8, r8, r0
 8005e40:	eb6a 0a0c 	sbc.w	sl, sl, ip
 8005e44:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8005e48:	ea4a 7a98 	orr.w	sl, sl, r8, lsr #30
 8005e4c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005e50:	eb18 0800 	adds.w	r8, r8, r0
		if( TEMP < -1500 )
 8005e54:	4844      	ldr	r0, [pc, #272]	; (8005f68 <psensor_read_pressure+0x1f0>)
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e56:	eb4c 0c0a 	adc.w	ip, ip, sl
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e5a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e5e:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if( TEMP < -1500 )
 8005e62:	4283      	cmp	r3, r0
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e64:	ea4e 7e07 	orr.w	lr, lr, r7, lsl #28
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e68:	ea48 780c 	orr.w	r8, r8, ip, lsl #28
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e6c:	ea4f 1727 	mov.w	r7, r7, asr #4
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8005e70:	ea4f 1c2c 	mov.w	ip, ip, asr #4
		if( TEMP < -1500 )
 8005e74:	da28      	bge.n	8005ec8 <psensor_read_pressure+0x150>
			OFF2 += 17 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8005e76:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005e7a:	181b      	adds	r3, r3, r0
 8005e7c:	f149 0900 	adc.w	r9, r9, #0
 8005e80:	fb03 f909 	mul.w	r9, r3, r9
 8005e84:	fba3 a303 	umull	sl, r3, r3, r3
 8005e88:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8005e8c:	ea4f 1903 	mov.w	r9, r3, lsl #4
 8005e90:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8005e94:	eb10 000a 	adds.w	r0, r0, sl
 8005e98:	ea49 791a 	orr.w	r9, r9, sl, lsr #28
 8005e9c:	eb43 0909 	adc.w	r9, r3, r9
 8005ea0:	eb10 000e 	adds.w	r0, r0, lr
 8005ea4:	eb47 0709 	adc.w	r7, r7, r9
 8005ea8:	4686      	mov	lr, r0
			SENS2 += 9 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8005eaa:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8005eae:	ea4f 00ca 	mov.w	r0, sl, lsl #3
 8005eb2:	eb10 000a 	adds.w	r0, r0, sl
 8005eb6:	ea49 795a 	orr.w	r9, r9, sl, lsr #29
 8005eba:	eb43 0309 	adc.w	r3, r3, r9
 8005ebe:	eb10 0008 	adds.w	r0, r0, r8
 8005ec2:	eb4c 0c03 	adc.w	ip, ip, r3
 8005ec6:	4680      	mov	r8, r0
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8005ec8:	f8b1 a008 	ldrh.w	sl, [r1, #8]
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8005ecc:	88cb      	ldrh	r3, [r1, #6]
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8005ece:	8888      	ldrh	r0, [r1, #4]
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8005ed0:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8005ed4:	fb8a 1a02 	smull	r1, sl, sl, r2
 8005ed8:	0989      	lsrs	r1, r1, #6
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8005eda:	fb83 3202 	smull	r3, r2, r3, r2
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8005ede:	ea4f 4b40 	mov.w	fp, r0, lsl #17
 8005ee2:	ea41 618a 	orr.w	r1, r1, sl, lsl #26
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8005ee6:	09db      	lsrs	r3, r3, #7
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8005ee8:	eb11 010b 	adds.w	r1, r1, fp
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8005eec:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8005ef0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8005ef4:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 8005ef8:	eb40 10aa 	adc.w	r0, r0, sl, asr #6
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8005efc:	11d2      	asrs	r2, r2, #7
 8005efe:	eb13 0309 	adds.w	r3, r3, r9
 8005f02:	f142 0200 	adc.w	r2, r2, #0
	SENS -= SENS2 ;
 8005f06:	ebb3 0308 	subs.w	r3, r3, r8
 8005f0a:	eb62 020c 	sbc.w	r2, r2, ip
	OFF -= OFF2 ;
 8005f0e:	ebb1 0c0e 	subs.w	ip, r1, lr
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8005f12:	fba3 3106 	umull	r3, r1, r3, r6
 8005f16:	fb06 1102 	mla	r1, r6, r2, r1
 8005f1a:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8005f1e:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
	OFF -= OFF2 ;
 8005f22:	eb60 0707 	sbc.w	r7, r0, r7
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8005f26:	1549      	asrs	r1, r1, #21
 8005f28:	ebb3 000c 	subs.w	r0, r3, ip
 8005f2c:	eb61 0107 	sbc.w	r1, r1, r7
 8005f30:	0bc0      	lsrs	r0, r0, #15
	*pressure = (float)P;
 8005f32:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
 8005f36:	13c9      	asrs	r1, r1, #15
 8005f38:	f7fa ff86 	bl	8000e48 <__aeabi_l2f>
 8005f3c:	6028      	str	r0, [r5, #0]
}
 8005f3e:	4620      	mov	r0, r4
 8005f40:	b003      	add	sp, #12
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ms8607_status_i2c_transfer_error;
 8005f46:	2402      	movs	r4, #2
}
 8005f48:	4620      	mov	r0, r4
 8005f4a:	b003      	add	sp, #12
 8005f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SENS2 = 0 ;
 8005f50:	46a0      	mov	r8, r4
 8005f52:	46a4      	mov	ip, r4
		OFF2 = 0 ;
 8005f54:	46a6      	mov	lr, r4
 8005f56:	4627      	mov	r7, r4
 8005f58:	e7b6      	b.n	8005ec8 <psensor_read_pressure+0x150>
 8005f5a:	bf00      	nop
 8005f5c:	20001265 	.word	0x20001265
 8005f60:	20001266 	.word	0x20001266
 8005f64:	20001254 	.word	0x20001254
 8005f68:	fffffa24 	.word	0xfffffa24

08005f6c <ms8607_read_pressure>:
	status = psensor_read_pressure(p);
 8005f6c:	f7ff bf04 	b.w	8005d78 <psensor_read_pressure>

08005f70 <i2c_master_init>:
#include "ms8607.h"
#include "ms8607_i2c.h"

void i2c_master_init(void)
{
}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop

08005f74 <i2c_master_read_packet_wait>:

enum status_code i2c_master_read_packet_wait(struct i2c_master_packet *const packet)
{
 8005f74:	b510      	push	{r4, lr}
 8005f76:	b082      	sub	sp, #8
    uint8_t res = HAL_I2C_Master_Receive(&hi2c2, packet->address, packet->data, packet->data_length, 50);
 8005f78:	2432      	movs	r4, #50	; 0x32
 8005f7a:	8843      	ldrh	r3, [r0, #2]
 8005f7c:	6842      	ldr	r2, [r0, #4]
 8005f7e:	8801      	ldrh	r1, [r0, #0]
 8005f80:	9400      	str	r4, [sp, #0]
 8005f82:	4802      	ldr	r0, [pc, #8]	; (8005f8c <i2c_master_read_packet_wait+0x18>)
 8005f84:	f004 f962 	bl	800a24c <HAL_I2C_Master_Receive>
    return (enum status_code)res;
}
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd10      	pop	{r4, pc}
 8005f8c:	20001104 	.word	0x20001104

08005f90 <i2c_master_write_packet_wait>:


enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *const packet)
{
 8005f90:	b510      	push	{r4, lr}
 8005f92:	b082      	sub	sp, #8
    uint8_t res = HAL_I2C_Master_Transmit(&hi2c2, packet->address, packet->data, packet->data_length, 50);
 8005f94:	2432      	movs	r4, #50	; 0x32
 8005f96:	8843      	ldrh	r3, [r0, #2]
 8005f98:	6842      	ldr	r2, [r0, #4]
 8005f9a:	8801      	ldrh	r1, [r0, #0]
 8005f9c:	9400      	str	r4, [sp, #0]
 8005f9e:	4802      	ldr	r0, [pc, #8]	; (8005fa8 <i2c_master_write_packet_wait+0x18>)
 8005fa0:	f004 f87a 	bl	800a098 <HAL_I2C_Master_Transmit>
    return (enum status_code)res;
}
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd10      	pop	{r4, pc}
 8005fa8:	20001104 	.word	0x20001104

08005fac <i2c_master_write_packet_wait_no_stop>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	2432      	movs	r4, #50	; 0x32
 8005fb2:	8843      	ldrh	r3, [r0, #2]
 8005fb4:	6842      	ldr	r2, [r0, #4]
 8005fb6:	8801      	ldrh	r1, [r0, #0]
 8005fb8:	9400      	str	r4, [sp, #0]
 8005fba:	4802      	ldr	r0, [pc, #8]	; (8005fc4 <i2c_master_write_packet_wait_no_stop+0x18>)
 8005fbc:	f004 f86c 	bl	800a098 <HAL_I2C_Master_Transmit>
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd10      	pop	{r4, pc}
 8005fc4:	20001104 	.word	0x20001104

08005fc8 <gsm_msg_updateStorage.part.0>:
#include "gsm.h"
#include "pdu.h"

#if (_GSM_MSG == 1)
//###############################################################################################################
bool gsm_msg_updateStorage(void)
 8005fc8:	b530      	push	{r4, r5, lr}
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
    return false;
  }
  char str[64];
  char s[5];
  if (gsm_command("AT+CPMS?\r\n", 1000 , str, sizeof(str), 2, "\r\n+CPMS:", "\r\nERROR\r\n") != 1)
 8005fca:	482c      	ldr	r0, [pc, #176]	; (800607c <gsm_msg_updateStorage.part.0+0xb4>)
 8005fcc:	492c      	ldr	r1, [pc, #176]	; (8006080 <gsm_msg_updateStorage.part.0+0xb8>)
bool gsm_msg_updateStorage(void)
 8005fce:	b097      	sub	sp, #92	; 0x5c
  if (gsm_command("AT+CPMS?\r\n", 1000 , str, sizeof(str), 2, "\r\n+CPMS:", "\r\nERROR\r\n") != 1)
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	2340      	movs	r3, #64	; 0x40
 8005fd4:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8005fd8:	e9cd 3200 	strd	r3, r2, [sp]
 8005fdc:	4929      	ldr	r1, [pc, #164]	; (8006084 <gsm_msg_updateStorage.part.0+0xbc>)
 8005fde:	482a      	ldr	r0, [pc, #168]	; (8006088 <gsm_msg_updateStorage.part.0+0xc0>)
 8005fe0:	ab06      	add	r3, sp, #24
 8005fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fe6:	f7fb fd81 	bl	8001aec <atc_command>
 8005fea:	2801      	cmp	r0, #1
 8005fec:	d124      	bne.n	8006038 <gsm_msg_updateStorage.part.0+0x70>
  {
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
    gsm_unlock();
    return false;
  }
  if (sscanf(str, "\r\n+CPMS: \"%[^\"]\",%hd,%hd,", s, &gsm.msg.storageUsed, &gsm.msg.storageTotal) != 3)
 8005fee:	4b27      	ldr	r3, [pc, #156]	; (800608c <gsm_msg_updateStorage.part.0+0xc4>)
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	4927      	ldr	r1, [pc, #156]	; (8006090 <gsm_msg_updateStorage.part.0+0xc8>)
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	3302      	adds	r3, #2
 8005ff8:	a806      	add	r0, sp, #24
 8005ffa:	aa04      	add	r2, sp, #16
 8005ffc:	f00a f820 	bl	8010040 <siscanf>
 8006000:	2803      	cmp	r0, #3
 8006002:	d119      	bne.n	8006038 <gsm_msg_updateStorage.part.0+0x70>
  {
    gsm_printf("[GSM] msg_updateStorage() failed!\r\n");
    gsm_unlock();
    return false;
  }
  if (strcmp(s, "SM") == 0)
 8006004:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8006008:	f644 5353 	movw	r3, #19795	; 0x4d53
 800600c:	429d      	cmp	r5, r3
 800600e:	d01e      	beq.n	800604e <gsm_msg_updateStorage.part.0+0x86>
    gsm.msg.storage = gsm_msg_store_simcard;
  else if (strcmp(s, "ME") == 0)
 8006010:	f244 534d 	movw	r3, #17741	; 0x454d
 8006014:	429d      	cmp	r5, r3
 8006016:	d014      	beq.n	8006042 <gsm_msg_updateStorage.part.0+0x7a>
    gsm.msg.storage = gsm_msg_store_module;
  else if (strcmp(s, "SM_P") == 0)
 8006018:	491e      	ldr	r1, [pc, #120]	; (8006094 <gsm_msg_updateStorage.part.0+0xcc>)
 800601a:	a804      	add	r0, sp, #16
 800601c:	f7fa f8d8 	bl	80001d0 <strcmp>
 8006020:	b318      	cbz	r0, 800606a <gsm_msg_updateStorage.part.0+0xa2>
    gsm.msg.storage = gsm_msg_store_simcard_preferred;
  else if (strcmp(s, "ME_P") == 0)
 8006022:	491d      	ldr	r1, [pc, #116]	; (8006098 <gsm_msg_updateStorage.part.0+0xd0>)
 8006024:	a804      	add	r0, sp, #16
 8006026:	f7fa f8d3 	bl	80001d0 <strcmp>
 800602a:	b1e0      	cbz	r0, 8006066 <gsm_msg_updateStorage.part.0+0x9e>
    gsm.msg.storage = gsm_msg_store_module_preferred;
  else if (strcmp(s, "MT") == 0)
 800602c:	f245 434d 	movw	r3, #21581	; 0x544d
 8006030:	429d      	cmp	r5, r3
 8006032:	d01c      	beq.n	800606e <gsm_msg_updateStorage.part.0+0xa6>
 8006034:	2400      	movs	r4, #0
 8006036:	e00e      	b.n	8006056 <gsm_msg_updateStorage.part.0+0x8e>
    gsm_unlock();
 8006038:	f7fe fdf4 	bl	8004c24 <gsm_unlock>
    return false;
 800603c:	2000      	movs	r0, #0
  else
    gsm.msg.storage = gsm_msg_store_error;
  gsm_printf("[GSM] msg_updateStorage() done\r\n");
  gsm_unlock();
  return true;
}
 800603e:	b017      	add	sp, #92	; 0x5c
 8006040:	bd30      	pop	{r4, r5, pc}
  else if (strcmp(s, "ME") == 0)
 8006042:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e6      	bne.n	8006018 <gsm_msg_updateStorage.part.0+0x50>
 800604a:	2402      	movs	r4, #2
 800604c:	e003      	b.n	8006056 <gsm_msg_updateStorage.part.0+0x8e>
  if (strcmp(s, "SM") == 0)
 800604e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1dc      	bne.n	8006010 <gsm_msg_updateStorage.part.0+0x48>
    gsm.msg.storage = gsm_msg_store_simcard;
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <gsm_msg_updateStorage.part.0+0xd4>)
 8006058:	f883 4c0e 	strb.w	r4, [r3, #3086]	; 0xc0e
  gsm_unlock();
 800605c:	f7fe fde2 	bl	8004c24 <gsm_unlock>
  return true;
 8006060:	2001      	movs	r0, #1
}
 8006062:	b017      	add	sp, #92	; 0x5c
 8006064:	bd30      	pop	{r4, r5, pc}
 8006066:	2404      	movs	r4, #4
 8006068:	e7f5      	b.n	8006056 <gsm_msg_updateStorage.part.0+0x8e>
 800606a:	2403      	movs	r4, #3
 800606c:	e7f3      	b.n	8006056 <gsm_msg_updateStorage.part.0+0x8e>
  else if (strcmp(s, "MT") == 0)
 800606e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1de      	bne.n	8006034 <gsm_msg_updateStorage.part.0+0x6c>
 8006076:	2405      	movs	r4, #5
 8006078:	e7ed      	b.n	8006056 <gsm_msg_updateStorage.part.0+0x8e>
 800607a:	bf00      	nop
 800607c:	080149e0 	.word	0x080149e0
 8006080:	08014c98 	.word	0x08014c98
 8006084:	08014c8c 	.word	0x08014c8c
 8006088:	200002ec 	.word	0x200002ec
 800608c:	20000ef4 	.word	0x20000ef4
 8006090:	08014ca4 	.word	0x08014ca4
 8006094:	08014cc8 	.word	0x08014cc8
 8006098:	08014cd0 	.word	0x08014cd0
 800609c:	200002e4 	.word	0x200002e4

080060a0 <gsm_msg_updateStorage>:
{
 80060a0:	b508      	push	{r3, lr}
  if (gsm_lock(10000) == false)
 80060a2:	f242 7010 	movw	r0, #10000	; 0x2710
 80060a6:	f7fe fda3 	bl	8004bf0 <gsm_lock>
 80060aa:	b900      	cbnz	r0, 80060ae <gsm_msg_updateStorage+0xe>
}
 80060ac:	bd08      	pop	{r3, pc}
 80060ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060b2:	f7ff bf89 	b.w	8005fc8 <gsm_msg_updateStorage.part.0>
 80060b6:	bf00      	nop

080060b8 <gsm_msg_textMode>:
  gsm_msg_updateStorage();
  return gsm.msg.storageTotal - gsm.msg.storageUsed;
}
//###############################################################################################################
bool gsm_msg_textMode(bool on_off, bool integer)
{
 80060b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060bc:	4605      	mov	r5, r0
 80060be:	b085      	sub	sp, #20
  if (gsm_lock(10000) == false)
 80060c0:	f242 7010 	movw	r0, #10000	; 0x2710
{
 80060c4:	460e      	mov	r6, r1
  if (gsm_lock(10000) == false)
 80060c6:	f7fe fd93 	bl	8004bf0 <gsm_lock>
 80060ca:	4604      	mov	r4, r0
 80060cc:	b198      	cbz	r0, 80060f6 <gsm_msg_textMode+0x3e>
  {
    gsm_printf("[GSM] msg_textMode() failed!\r\n");
    return false;
  }
  if (on_off)
 80060ce:	b9b5      	cbnz	r5, 80060fe <gsm_msg_textMode+0x46>
      return true;
    }
  }
  else
  {
    if (gsm_command("AT+CMGF=0\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 80060d0:	4927      	ldr	r1, [pc, #156]	; (8006170 <gsm_msg_textMode+0xb8>)
 80060d2:	4a28      	ldr	r2, [pc, #160]	; (8006174 <gsm_msg_textMode+0xbc>)
 80060d4:	4828      	ldr	r0, [pc, #160]	; (8006178 <gsm_msg_textMode+0xc0>)
 80060d6:	2302      	movs	r3, #2
 80060d8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80060dc:	e9cd 5300 	strd	r5, r3, [sp]
 80060e0:	4926      	ldr	r1, [pc, #152]	; (800617c <gsm_msg_textMode+0xc4>)
 80060e2:	462b      	mov	r3, r5
 80060e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060e8:	f7fb fd00 	bl	8001aec <atc_command>
 80060ec:	2801      	cmp	r0, #1
 80060ee:	d038      	beq.n	8006162 <gsm_msg_textMode+0xaa>
      gsm_unlock();
      return true;
    }
  }
  gsm_printf("[GSM] msg_textMode() failed!\r\n");
  gsm_unlock();
 80060f0:	f7fe fd98 	bl	8004c24 <gsm_unlock>
  return false;
 80060f4:	2400      	movs	r4, #0
}
 80060f6:	4620      	mov	r0, r4
 80060f8:	b005      	add	sp, #20
 80060fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (gsm_command("AT+CMGF=1\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 80060fe:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006170 <gsm_msg_textMode+0xb8>
 8006102:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8006174 <gsm_msg_textMode+0xbc>
 8006106:	491e      	ldr	r1, [pc, #120]	; (8006180 <gsm_msg_textMode+0xc8>)
 8006108:	481b      	ldr	r0, [pc, #108]	; (8006178 <gsm_msg_textMode+0xc0>)
 800610a:	2400      	movs	r4, #0
 800610c:	2702      	movs	r7, #2
 800610e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006112:	9701      	str	r7, [sp, #4]
 8006114:	9400      	str	r4, [sp, #0]
 8006116:	4623      	mov	r3, r4
 8006118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800611c:	f7fb fce6 	bl	8001aec <atc_command>
 8006120:	2801      	cmp	r0, #1
 8006122:	d1e5      	bne.n	80060f0 <gsm_msg_textMode+0x38>
      gsm.msg.textMode = 1;
 8006124:	f8df c064 	ldr.w	ip, [pc, #100]	; 800618c <gsm_msg_textMode+0xd4>
 8006128:	f88c 0c0c 	strb.w	r0, [ip, #3084]	; 0xc0c
        gsm_command("AT+CSMP=17,167,0,0\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 800612c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006130:	9701      	str	r7, [sp, #4]
      if (integer == false)
 8006132:	b166      	cbz	r6, 800614e <gsm_msg_textMode+0x96>
        gsm_command("AT+CSMP=17,167,0,8\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 8006134:	4913      	ldr	r1, [pc, #76]	; (8006184 <gsm_msg_textMode+0xcc>)
 8006136:	9400      	str	r4, [sp, #0]
 8006138:	4623      	mov	r3, r4
 800613a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800613e:	f10c 0008 	add.w	r0, ip, #8
 8006142:	f7fb fcd3 	bl	8001aec <atc_command>
      gsm_unlock();
 8006146:	f7fe fd6d 	bl	8004c24 <gsm_unlock>
      return true;
 800614a:	462c      	mov	r4, r5
 800614c:	e7d3      	b.n	80060f6 <gsm_msg_textMode+0x3e>
        gsm_command("AT+CSMP=17,167,0,0\r\n", 1000, NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n");
 800614e:	490e      	ldr	r1, [pc, #56]	; (8006188 <gsm_msg_textMode+0xd0>)
 8006150:	9600      	str	r6, [sp, #0]
 8006152:	4633      	mov	r3, r6
 8006154:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006158:	f10c 0008 	add.w	r0, ip, #8
 800615c:	f7fb fcc6 	bl	8001aec <atc_command>
        gsm_printf("[GSM] msg_textMode() done. text: true, integer: false \r\n");
 8006160:	e7f1      	b.n	8006146 <gsm_msg_textMode+0x8e>
      gsm.msg.textMode = 0;
 8006162:	4b0a      	ldr	r3, [pc, #40]	; (800618c <gsm_msg_textMode+0xd4>)
 8006164:	f883 5c0c 	strb.w	r5, [r3, #3084]	; 0xc0c
      gsm_unlock();
 8006168:	f7fe fd5c 	bl	8004c24 <gsm_unlock>
      return true;
 800616c:	e7c3      	b.n	80060f6 <gsm_msg_textMode+0x3e>
 800616e:	bf00      	nop
 8006170:	080149e0 	.word	0x080149e0
 8006174:	080149ec 	.word	0x080149ec
 8006178:	200002ec 	.word	0x200002ec
 800617c:	08014d18 	.word	0x08014d18
 8006180:	08014cdc 	.word	0x08014cdc
 8006184:	08014d00 	.word	0x08014d00
 8006188:	08014ce8 	.word	0x08014ce8
 800618c:	200002e4 	.word	0x200002e4

08006190 <gsm_msg_deleteAll>:
    return false;
  }
}
//###############################################################################################################
bool gsm_msg_deleteAll(void)
{
 8006190:	b510      	push	{r4, lr}
  if (gsm_lock(10000) == false)
 8006192:	f242 7010 	movw	r0, #10000	; 0x2710
{
 8006196:	b084      	sub	sp, #16
  if (gsm_lock(10000) == false)
 8006198:	f7fe fd2a 	bl	8004bf0 <gsm_lock>
 800619c:	4604      	mov	r4, r0
 800619e:	b1a8      	cbz	r0, 80061cc <gsm_msg_deleteAll+0x3c>
  {
    gsm_printf("[GSM] msg_deleteAll() failed!\r\n");
    return false;
  }
  if (gsm.msg.textMode)
 80061a0:	4816      	ldr	r0, [pc, #88]	; (80061fc <gsm_msg_deleteAll+0x6c>)
 80061a2:	f890 3c0c 	ldrb.w	r3, [r0, #3084]	; 0xc0c
 80061a6:	b9a3      	cbnz	r3, 80061d2 <gsm_msg_deleteAll+0x42>
    gsm_unlock();
    return true;
  }
  else
  {
    if (gsm_command("AT+CMGDA=6\r\n", 25000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 80061a8:	4915      	ldr	r1, [pc, #84]	; (8006200 <gsm_msg_deleteAll+0x70>)
 80061aa:	4a16      	ldr	r2, [pc, #88]	; (8006204 <gsm_msg_deleteAll+0x74>)
 80061ac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80061b0:	2202      	movs	r2, #2
 80061b2:	e9cd 3200 	strd	r3, r2, [sp]
 80061b6:	4914      	ldr	r1, [pc, #80]	; (8006208 <gsm_msg_deleteAll+0x78>)
 80061b8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80061bc:	3008      	adds	r0, #8
 80061be:	f7fb fc95 	bl	8001aec <atc_command>
 80061c2:	2801      	cmp	r0, #1
 80061c4:	d015      	beq.n	80061f2 <gsm_msg_deleteAll+0x62>
      gsm_unlock();
 80061c6:	f7fe fd2d 	bl	8004c24 <gsm_unlock>
      return false;
 80061ca:	2400      	movs	r4, #0
    }
    gsm_printf("[GSM] msg_deleteAll() done\r\n");
    gsm_unlock();
    return true;
  }
}
 80061cc:	4620      	mov	r0, r4
 80061ce:	b004      	add	sp, #16
 80061d0:	bd10      	pop	{r4, pc}
    if (gsm_command("AT+CMGDA=\"DEL ALL\"\r\n", 25000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 80061d2:	490b      	ldr	r1, [pc, #44]	; (8006200 <gsm_msg_deleteAll+0x70>)
 80061d4:	4a0b      	ldr	r2, [pc, #44]	; (8006204 <gsm_msg_deleteAll+0x74>)
 80061d6:	2300      	movs	r3, #0
 80061d8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80061dc:	2202      	movs	r2, #2
 80061de:	e9cd 3200 	strd	r3, r2, [sp]
 80061e2:	490a      	ldr	r1, [pc, #40]	; (800620c <gsm_msg_deleteAll+0x7c>)
 80061e4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80061e8:	3008      	adds	r0, #8
 80061ea:	f7fb fc7f 	bl	8001aec <atc_command>
 80061ee:	2801      	cmp	r0, #1
 80061f0:	d1e9      	bne.n	80061c6 <gsm_msg_deleteAll+0x36>
    gsm_unlock();
 80061f2:	f7fe fd17 	bl	8004c24 <gsm_unlock>
}
 80061f6:	4620      	mov	r0, r4
 80061f8:	b004      	add	sp, #16
 80061fa:	bd10      	pop	{r4, pc}
 80061fc:	200002e4 	.word	0x200002e4
 8006200:	080149e0 	.word	0x080149e0
 8006204:	080149ec 	.word	0x080149ec
 8006208:	08014d3c 	.word	0x08014d3c
 800620c:	08014d24 	.word	0x08014d24

08006210 <gsm_msg_delete>:
//###############################################################################################################
bool gsm_msg_delete(uint16_t index)
{
 8006210:	b530      	push	{r4, r5, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	b08d      	sub	sp, #52	; 0x34
  if (gsm_lock(10000) == false)
 8006216:	f242 7010 	movw	r0, #10000	; 0x2710
 800621a:	f7fe fce9 	bl	8004bf0 <gsm_lock>
 800621e:	4604      	mov	r4, r0
 8006220:	b910      	cbnz	r0, 8006228 <gsm_msg_delete+0x18>
    return true;
  }
  gsm_printf("[GSM] msg_delete(%d) failed!\r\n", index);
  gsm_unlock();
  return false;
}
 8006222:	4620      	mov	r0, r4
 8006224:	b00d      	add	sp, #52	; 0x34
 8006226:	bd30      	pop	{r4, r5, pc}
  sprintf(str, "AT+CMGD=%d\r\n", index);
 8006228:	462a      	mov	r2, r5
 800622a:	4910      	ldr	r1, [pc, #64]	; (800626c <gsm_msg_delete+0x5c>)
 800622c:	a804      	add	r0, sp, #16
 800622e:	f009 fee7 	bl	8010000 <siprintf>
  if (gsm_command(str, 5000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") == 1)
 8006232:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <gsm_msg_delete+0x60>)
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <gsm_msg_delete+0x64>)
 8006236:	4810      	ldr	r0, [pc, #64]	; (8006278 <gsm_msg_delete+0x68>)
 8006238:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800623c:	2500      	movs	r5, #0
 800623e:	2302      	movs	r3, #2
 8006240:	e9cd 5300 	strd	r5, r3, [sp]
 8006244:	f241 3288 	movw	r2, #5000	; 0x1388
 8006248:	462b      	mov	r3, r5
 800624a:	a904      	add	r1, sp, #16
 800624c:	f7fb fc4e 	bl	8001aec <atc_command>
 8006250:	2801      	cmp	r0, #1
 8006252:	d005      	beq.n	8006260 <gsm_msg_delete+0x50>
  gsm_unlock();
 8006254:	f7fe fce6 	bl	8004c24 <gsm_unlock>
  return false;
 8006258:	462c      	mov	r4, r5
}
 800625a:	4620      	mov	r0, r4
 800625c:	b00d      	add	sp, #52	; 0x34
 800625e:	bd30      	pop	{r4, r5, pc}
    gsm_unlock();
 8006260:	f7fe fce0 	bl	8004c24 <gsm_unlock>
}
 8006264:	4620      	mov	r0, r4
 8006266:	b00d      	add	sp, #52	; 0x34
 8006268:	bd30      	pop	{r4, r5, pc}
 800626a:	bf00      	nop
 800626c:	08014d4c 	.word	0x08014d4c
 8006270:	080149e0 	.word	0x080149e0
 8006274:	080149ec 	.word	0x080149ec
 8006278:	200002ec 	.word	0x200002ec

0800627c <gsm_msg_selectStorage>:
  }
  // --- pdu mode
}
//###############################################################################################################
bool gsm_msg_selectStorage(gsm_msg_store_t gsm_msg_store_)
{
 800627c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800627e:	4605      	mov	r5, r0
 8006280:	b095      	sub	sp, #84	; 0x54
  if (gsm_lock(10000) == false)
 8006282:	f242 7010 	movw	r0, #10000	; 0x2710
 8006286:	f7fe fcb3 	bl	8004bf0 <gsm_lock>
 800628a:	4604      	mov	r4, r0
 800628c:	b150      	cbz	r0, 80062a4 <gsm_msg_selectStorage+0x28>
  {
    gsm_printf("[GSM] msg_selectStorage() failed!\r\n");
    return false;
  }
  char str[64];
  switch (gsm_msg_store_)
 800628e:	1e6b      	subs	r3, r5, #1
 8006290:	2b04      	cmp	r3, #4
 8006292:	d804      	bhi.n	800629e <gsm_msg_selectStorage+0x22>
 8006294:	e8df f003 	tbb	[pc, r3]
 8006298:	483a3836 	.word	0x483a3836
 800629c:	09          	.byte	0x09
 800629d:	00          	.byte	0x00
  case gsm_msg_store_simcard_or_module:
    sprintf(str, "AT+CPMS=\"MT\",\"MT\",\"MT\"\r\n");
    break;
  default:
    gsm_printf("[GSM] msg_selectStorage() failed!\r\n");
    gsm_unlock();
 800629e:	f7fe fcc1 	bl	8004c24 <gsm_unlock>
    return false;
 80062a2:	2400      	movs	r4, #0
  gsm.msg.storage = gsm_msg_store_;
  gsm_printf("[GSM] msg_selectStorage() done\r\n");
  gsm_unlock();
  gsm_msg_updateStorage();
  return true;
}
 80062a4:	4620      	mov	r0, r4
 80062a6:	b015      	add	sp, #84	; 0x54
 80062a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sprintf(str, "AT+CPMS=\"MT\",\"MT\",\"MT\"\r\n");
 80062aa:	4f20      	ldr	r7, [pc, #128]	; (800632c <gsm_msg_selectStorage+0xb0>)
    sprintf(str, "AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n");
 80062ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80062ae:	f10d 0c10 	add.w	ip, sp, #16
 80062b2:	4666      	mov	r6, ip
 80062b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80062b6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80062ba:	c603      	stmia	r6!, {r0, r1}
 80062bc:	7032      	strb	r2, [r6, #0]
  if (gsm_command(str, 1000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 80062be:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <gsm_msg_selectStorage+0xb4>)
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	4b1c      	ldr	r3, [pc, #112]	; (8006334 <gsm_msg_selectStorage+0xb8>)
 80062c4:	9302      	str	r3, [sp, #8]
 80062c6:	2600      	movs	r6, #0
 80062c8:	2302      	movs	r3, #2
 80062ca:	e9cd 6300 	strd	r6, r3, [sp]
 80062ce:	481a      	ldr	r0, [pc, #104]	; (8006338 <gsm_msg_selectStorage+0xbc>)
 80062d0:	4633      	mov	r3, r6
 80062d2:	4661      	mov	r1, ip
 80062d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062d8:	f7fb fc08 	bl	8001aec <atc_command>
 80062dc:	2801      	cmp	r0, #1
 80062de:	d1de      	bne.n	800629e <gsm_msg_selectStorage+0x22>
  gsm.msg.storage = gsm_msg_store_;
 80062e0:	4b16      	ldr	r3, [pc, #88]	; (800633c <gsm_msg_selectStorage+0xc0>)
 80062e2:	f883 5c0e 	strb.w	r5, [r3, #3086]	; 0xc0e
  gsm_unlock();
 80062e6:	f7fe fc9d 	bl	8004c24 <gsm_unlock>
  if (gsm_lock(10000) == false)
 80062ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80062ee:	f7fe fc7f 	bl	8004bf0 <gsm_lock>
 80062f2:	4605      	mov	r5, r0
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d0d5      	beq.n	80062a4 <gsm_msg_selectStorage+0x28>
 80062f8:	f7ff fe66 	bl	8005fc8 <gsm_msg_updateStorage.part.0>
  return true;
 80062fc:	462c      	mov	r4, r5
}
 80062fe:	4620      	mov	r0, r4
 8006300:	b015      	add	sp, #84	; 0x54
 8006302:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sprintf(str, "AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n");
 8006304:	4f0e      	ldr	r7, [pc, #56]	; (8006340 <gsm_msg_selectStorage+0xc4>)
 8006306:	e7d1      	b.n	80062ac <gsm_msg_selectStorage+0x30>
    sprintf(str, "AT+CPMS=\"ME\",\"ME\",\"ME\"\r\n");
 8006308:	4f0e      	ldr	r7, [pc, #56]	; (8006344 <gsm_msg_selectStorage+0xc8>)
 800630a:	e7cf      	b.n	80062ac <gsm_msg_selectStorage+0x30>
    sprintf(str, "AT+CPMS=\"SM_P\",\"SM_P\",\"SM_P\"\r\n");
 800630c:	4f0e      	ldr	r7, [pc, #56]	; (8006348 <gsm_msg_selectStorage+0xcc>)
    sprintf(str, "AT+CPMS=\"ME_P\",\"ME_P\",\"ME_P\"\r\n");
 800630e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006310:	f10d 0c10 	add.w	ip, sp, #16
 8006314:	4666      	mov	r6, ip
 8006316:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006318:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800631c:	c607      	stmia	r6!, {r0, r1, r2}
 800631e:	f826 3b02 	strh.w	r3, [r6], #2
 8006322:	0c1b      	lsrs	r3, r3, #16
 8006324:	7033      	strb	r3, [r6, #0]
    break;
 8006326:	e7ca      	b.n	80062be <gsm_msg_selectStorage+0x42>
    sprintf(str, "AT+CPMS=\"ME_P\",\"ME_P\",\"ME_P\"\r\n");
 8006328:	4f08      	ldr	r7, [pc, #32]	; (800634c <gsm_msg_selectStorage+0xd0>)
 800632a:	e7f0      	b.n	800630e <gsm_msg_selectStorage+0x92>
 800632c:	08014dd4 	.word	0x08014dd4
 8006330:	080149e0 	.word	0x080149e0
 8006334:	080149ec 	.word	0x080149ec
 8006338:	200002ec 	.word	0x200002ec
 800633c:	200002e4 	.word	0x200002e4
 8006340:	08014d5c 	.word	0x08014d5c
 8006344:	08014d78 	.word	0x08014d78
 8006348:	08014d94 	.word	0x08014d94
 800634c:	08014db4 	.word	0x08014db4

08006350 <gsm_msg_selectCharacterSet>:
//###############################################################################################################
bool gsm_msg_selectCharacterSet(gsm_msg_chset_t gsm_msg_chSet_)
{
 8006350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006352:	4606      	mov	r6, r0
 8006354:	b095      	sub	sp, #84	; 0x54
  if (gsm_lock(10000) == false)
 8006356:	f242 7010 	movw	r0, #10000	; 0x2710
 800635a:	f7fe fc49 	bl	8004bf0 <gsm_lock>
 800635e:	4604      	mov	r4, r0
 8006360:	b348      	cbz	r0, 80063b6 <gsm_msg_selectCharacterSet+0x66>
  {
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
    return false;
  }
  char str[64];
  switch (gsm_msg_chSet_)
 8006362:	1e73      	subs	r3, r6, #1
 8006364:	2b06      	cmp	r3, #6
 8006366:	d829      	bhi.n	80063bc <gsm_msg_selectCharacterSet+0x6c>
 8006368:	e8df f003 	tbb	[pc, r3]
 800636c:	453e352e 	.word	0x453e352e
 8006370:	4e4c      	.short	0x4e4c
 8006372:	04          	.byte	0x04
 8006373:	00          	.byte	0x00
  {
  case gsm_msg_chSet_8859_1:
    sprintf(str, "AT+CSCS=\"8859-1\"\r\n");
 8006374:	4f25      	ldr	r7, [pc, #148]	; (800640c <gsm_msg_selectCharacterSet+0xbc>)
 8006376:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8006378:	f10d 0c10 	add.w	ip, sp, #16
 800637c:	4665      	mov	r5, ip
 800637e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	f825 3b02 	strh.w	r3, [r5], #2
 8006386:	0c1b      	lsrs	r3, r3, #16
 8006388:	702b      	strb	r3, [r5, #0]
  default:
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
    gsm_unlock();
    return false;
  }
  if (gsm_command(str, 1000 , NULL, 0, 2, "\r\nOK\r\n", "\r\nERROR\r\n") != 1)
 800638a:	4b21      	ldr	r3, [pc, #132]	; (8006410 <gsm_msg_selectCharacterSet+0xc0>)
 800638c:	9303      	str	r3, [sp, #12]
 800638e:	4b21      	ldr	r3, [pc, #132]	; (8006414 <gsm_msg_selectCharacterSet+0xc4>)
 8006390:	9302      	str	r3, [sp, #8]
 8006392:	2500      	movs	r5, #0
 8006394:	2302      	movs	r3, #2
 8006396:	e9cd 5300 	strd	r5, r3, [sp]
 800639a:	481f      	ldr	r0, [pc, #124]	; (8006418 <gsm_msg_selectCharacterSet+0xc8>)
 800639c:	462b      	mov	r3, r5
 800639e:	4661      	mov	r1, ip
 80063a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063a4:	f7fb fba2 	bl	8001aec <atc_command>
 80063a8:	2801      	cmp	r0, #1
 80063aa:	d107      	bne.n	80063bc <gsm_msg_selectCharacterSet+0x6c>
  {
    gsm_printf("[GSM] msg_selectCharacterSet() failed!\r\n");
    gsm_unlock();
    return false;
  }
  gsm.msg.characterSet = gsm_msg_chSet_;
 80063ac:	4b1b      	ldr	r3, [pc, #108]	; (800641c <gsm_msg_selectCharacterSet+0xcc>)
 80063ae:	f883 6c0d 	strb.w	r6, [r3, #3085]	; 0xc0d
  gsm_printf("[GSM] msg_selectCharacterSet() done\r\n");
  gsm_unlock();
 80063b2:	f7fe fc37 	bl	8004c24 <gsm_unlock>
  return true;
}
 80063b6:	4620      	mov	r0, r4
 80063b8:	b015      	add	sp, #84	; 0x54
 80063ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gsm_unlock();
 80063bc:	f7fe fc32 	bl	8004c24 <gsm_unlock>
    return false;
 80063c0:	2400      	movs	r4, #0
}
 80063c2:	4620      	mov	r0, r4
 80063c4:	b015      	add	sp, #84	; 0x54
 80063c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sprintf(str, "AT+CSCS=\"GSM\"\r\n");
 80063c8:	4b15      	ldr	r3, [pc, #84]	; (8006420 <gsm_msg_selectCharacterSet+0xd0>)
 80063ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063cc:	f10d 0c10 	add.w	ip, sp, #16
 80063d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    break;
 80063d4:	e7d9      	b.n	800638a <gsm_msg_selectCharacterSet+0x3a>
    sprintf(str, "AT+CSCS=\"UCS2\"\r\n");
 80063d6:	4f13      	ldr	r7, [pc, #76]	; (8006424 <gsm_msg_selectCharacterSet+0xd4>)
    sprintf(str, "AT+CSCS=\"PCDN\"\r\n");
 80063d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80063da:	f10d 0c10 	add.w	ip, sp, #16
 80063de:	4665      	mov	r5, ip
 80063e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	702b      	strb	r3, [r5, #0]
    break;
 80063e6:	e7d0      	b.n	800638a <gsm_msg_selectCharacterSet+0x3a>
    sprintf(str, "AT+CSCS=\"IRA\"\r\n");
 80063e8:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <gsm_msg_selectCharacterSet+0xd8>)
 80063ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063ec:	f10d 0c10 	add.w	ip, sp, #16
 80063f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    break;
 80063f4:	e7c9      	b.n	800638a <gsm_msg_selectCharacterSet+0x3a>
    sprintf(str, "AT+CSCS=\"HEX\"\r\n");
 80063f6:	4b0d      	ldr	r3, [pc, #52]	; (800642c <gsm_msg_selectCharacterSet+0xdc>)
 80063f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063fa:	f10d 0c10 	add.w	ip, sp, #16
 80063fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    break;
 8006402:	e7c2      	b.n	800638a <gsm_msg_selectCharacterSet+0x3a>
    sprintf(str, "AT+CSCS=\"PCCP\"\r\n");
 8006404:	4f0a      	ldr	r7, [pc, #40]	; (8006430 <gsm_msg_selectCharacterSet+0xe0>)
 8006406:	e7e7      	b.n	80063d8 <gsm_msg_selectCharacterSet+0x88>
    sprintf(str, "AT+CSCS=\"PCDN\"\r\n");
 8006408:	4f0a      	ldr	r7, [pc, #40]	; (8006434 <gsm_msg_selectCharacterSet+0xe4>)
 800640a:	e7e5      	b.n	80063d8 <gsm_msg_selectCharacterSet+0x88>
 800640c:	08014df0 	.word	0x08014df0
 8006410:	080149e0 	.word	0x080149e0
 8006414:	080149ec 	.word	0x080149ec
 8006418:	200002ec 	.word	0x200002ec
 800641c:	200002e4 	.word	0x200002e4
 8006420:	08014e04 	.word	0x08014e04
 8006424:	08014e48 	.word	0x08014e48
 8006428:	08014e14 	.word	0x08014e14
 800642c:	08014e38 	.word	0x08014e38
 8006430:	08014e24 	.word	0x08014e24
 8006434:	08014e5c 	.word	0x08014e5c

08006438 <gsm_msg_read>:
//###############################################################################################################
bool gsm_msg_read(uint16_t index)
{
 8006438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643c:	4605      	mov	r5, r0
 800643e:	b08e      	sub	sp, #56	; 0x38
  if (gsm_lock(10000) == false)
 8006440:	f242 7010 	movw	r0, #10000	; 0x2710
 8006444:	f7fe fbd4 	bl	8004bf0 <gsm_lock>
 8006448:	4604      	mov	r4, r0
 800644a:	b140      	cbz	r0, 800645e <gsm_msg_read+0x26>
    gsm_printf("[GSM] msg_read(%d) failed!\r\n", index);
    return false;
  }
  char str[20];
  //  +++ text mode
  if (gsm.msg.textMode == 1)
 800644c:	4e64      	ldr	r6, [pc, #400]	; (80065e0 <gsm_msg_read+0x1a8>)
 800644e:	f896 7c0c 	ldrb.w	r7, [r6, #3084]	; 0xc0c
 8006452:	2f01      	cmp	r7, #1
 8006454:	d043      	beq.n	80064de <gsm_msg_read+0xa6>
    }
  }
  //  --- text mode

  //  +++ pdu mode
  else if(gsm.msg.textMode == 0)
 8006456:	b137      	cbz	r7, 8006466 <gsm_msg_read+0x2e>
    sprintf(str, "AT+CMGR=%d\r\n", index);
    if (gsm_command(str, 5000, (char* )gsm.buffer, sizeof(gsm.buffer), 3, "\r\n+CMGR:", "\r\nOK\r\n", "\r\nERROR\r\n")
        != 1)
    {
      gsm_printf("[GSM] msg_read(%d) failed!\r\n", index);
      gsm_unlock();
 8006458:	f7fe fbe4 	bl	8004c24 <gsm_unlock>
      return false;
 800645c:	2400      	movs	r4, #0
  //  --- pdu mode

  gsm_printf("[GSM] msg_read(%d) failed!\r\n", index);
  gsm_unlock();
  return false;
}
 800645e:	4620      	mov	r0, r4
 8006460:	b00e      	add	sp, #56	; 0x38
 8006462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sprintf(str, "AT+CMGR=%d\r\n", index);
 8006466:	495f      	ldr	r1, [pc, #380]	; (80065e4 <gsm_msg_read+0x1ac>)
 8006468:	462a      	mov	r2, r5
 800646a:	a809      	add	r0, sp, #36	; 0x24
 800646c:	f009 fdc8 	bl	8010000 <siprintf>
    if (gsm_command(str, 5000, (char* )gsm.buffer, sizeof(gsm.buffer), 3, "\r\n+CMGR:", "\r\nOK\r\n", "\r\nERROR\r\n")
 8006470:	4b5d      	ldr	r3, [pc, #372]	; (80065e8 <gsm_msg_read+0x1b0>)
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	4b5d      	ldr	r3, [pc, #372]	; (80065ec <gsm_msg_read+0x1b4>)
 8006476:	9303      	str	r3, [sp, #12]
 8006478:	4b5d      	ldr	r3, [pc, #372]	; (80065f0 <gsm_msg_read+0x1b8>)
 800647a:	9302      	str	r3, [sp, #8]
 800647c:	f240 58cc 	movw	r8, #1484	; 0x5cc
 8006480:	2303      	movs	r3, #3
 8006482:	e9cd 8300 	strd	r8, r3, [sp]
 8006486:	a909      	add	r1, sp, #36	; 0x24
 8006488:	f506 63c8 	add.w	r3, r6, #1600	; 0x640
 800648c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006490:	f106 0008 	add.w	r0, r6, #8
 8006494:	f7fb fb2a 	bl	8001aec <atc_command>
 8006498:	2801      	cmp	r0, #1
 800649a:	d1dd      	bne.n	8006458 <gsm_msg_read+0x20>
    char *end = strstr(gsm.buffer, "\r\n\r\nOK\r\n");
 800649c:	4955      	ldr	r1, [pc, #340]	; (80065f4 <gsm_msg_read+0x1bc>)
 800649e:	f506 60c8 	add.w	r0, r6, #1600	; 0x640
 80064a2:	f009 ff69 	bl	8010378 <strstr>
    char *s = strtok((char*) gsm.buffer, "\r\n");
 80064a6:	4954      	ldr	r1, [pc, #336]	; (80065f8 <gsm_msg_read+0x1c0>)
    char *end = strstr(gsm.buffer, "\r\n\r\nOK\r\n");
 80064a8:	4605      	mov	r5, r0
    char *s = strtok((char*) gsm.buffer, "\r\n");
 80064aa:	f506 60c8 	add.w	r0, r6, #1600	; 0x640
 80064ae:	f009 ff07 	bl	80102c0 <strtok>
		s = strtok(NULL, "\r\n");
 80064b2:	4951      	ldr	r1, [pc, #324]	; (80065f8 <gsm_msg_read+0x1c0>)
 80064b4:	4638      	mov	r0, r7
 80064b6:	f009 ff03 	bl	80102c0 <strtok>
		strncpy((char*) &gsm.buffer[0], s, end - s);
 80064ba:	1a2d      	subs	r5, r5, r0
		s = strtok(NULL, "\r\n");
 80064bc:	4601      	mov	r1, r0
		strncpy((char*) &gsm.buffer[0], s, end - s);
 80064be:	462a      	mov	r2, r5
 80064c0:	f506 60c8 	add.w	r0, r6, #1600	; 0x640
 80064c4:	f009 fee9 	bl	801029a <strncpy>
		memset(&gsm.buffer[end - s], 0, sizeof(gsm.buffer) - (end - s));
 80064c8:	f505 60c8 	add.w	r0, r5, #1600	; 0x640
 80064cc:	eba8 0205 	sub.w	r2, r8, r5
 80064d0:	4639      	mov	r1, r7
 80064d2:	4430      	add	r0, r6
 80064d4:	f009 feba 	bl	801024c <memset>
		gsm_unlock();
 80064d8:	f7fe fba4 	bl	8004c24 <gsm_unlock>
		return true;
 80064dc:	e7bf      	b.n	800645e <gsm_msg_read+0x26>
    sprintf(str, "AT+CMGR=%d\r\n", index);
 80064de:	4941      	ldr	r1, [pc, #260]	; (80065e4 <gsm_msg_read+0x1ac>)
 80064e0:	462a      	mov	r2, r5
 80064e2:	a809      	add	r0, sp, #36	; 0x24
 80064e4:	f009 fd8c 	bl	8010000 <siprintf>
    if (gsm_command(str, 5000, (char* )gsm.buffer, sizeof(gsm.buffer), 3, "\r\n+CMGR:", "\r\nOK\r\n", "\r\nERROR\r\n")
 80064e8:	4a3f      	ldr	r2, [pc, #252]	; (80065e8 <gsm_msg_read+0x1b0>)
 80064ea:	4b40      	ldr	r3, [pc, #256]	; (80065ec <gsm_msg_read+0x1b4>)
 80064ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80064f0:	4a3f      	ldr	r2, [pc, #252]	; (80065f0 <gsm_msg_read+0x1b8>)
 80064f2:	2303      	movs	r3, #3
 80064f4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80064f8:	f240 53cc 	movw	r3, #1484	; 0x5cc
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006502:	f506 63c8 	add.w	r3, r6, #1600	; 0x640
 8006506:	a909      	add	r1, sp, #36	; 0x24
 8006508:	f106 0008 	add.w	r0, r6, #8
 800650c:	f7fb faee 	bl	8001aec <atc_command>
 8006510:	2801      	cmp	r0, #1
 8006512:	d1a1      	bne.n	8006458 <gsm_msg_read+0x20>
    sscanf((char*) gsm.buffer, "\r\n+CMGR: \"%[^\"]\",\"%[^\"]\",\"\",\"%hd/%hd/%hd,%hd:%hd:%hd%*d\"", gsm.msg.status,
 8006514:	f10d 0122 	add.w	r1, sp, #34	; 0x22
 8006518:	ab08      	add	r3, sp, #32
 800651a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 800651e:	aa06      	add	r2, sp, #24
 8006520:	f10d 011e 	add.w	r1, sp, #30
 8006524:	ab07      	add	r3, sp, #28
 8006526:	f10d 001a 	add.w	r0, sp, #26
 800652a:	e9cd 3102 	strd	r3, r1, [sp, #8]
 800652e:	e9cd 2000 	strd	r2, r0, [sp]
 8006532:	4932      	ldr	r1, [pc, #200]	; (80065fc <gsm_msg_read+0x1c4>)
 8006534:	f606 432c 	addw	r3, r6, #3116	; 0xc2c
 8006538:	f606 421c 	addw	r2, r6, #3100	; 0xc1c
 800653c:	f506 60c8 	add.w	r0, r6, #1600	; 0x640
 8006540:	f009 fd7e 	bl	8010040 <siscanf>
    gsm.msg.time.month = d[1];
 8006544:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    gsm.msg.time.year = d[0];
 8006548:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    gsm.msg.time.day = d[2];
 800654c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    gsm.msg.time.month = d[1];
 8006550:	f886 3c15 	strb.w	r3, [r6, #3093]	; 0xc15
    gsm.msg.time.hour = d[3];
 8006554:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    gsm.msg.time.year = d[0];
 8006558:	f886 2c14 	strb.w	r2, [r6, #3092]	; 0xc14
    gsm.msg.time.day = d[2];
 800655c:	f886 1c16 	strb.w	r1, [r6, #3094]	; 0xc16
    gsm.msg.time.minute = d[4];
 8006560:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    gsm.msg.time.hour = d[3];
 8006564:	f886 3c17 	strb.w	r3, [r6, #3095]	; 0xc17
    char *s = strtok((char*) gsm.buffer, "\"");
 8006568:	4925      	ldr	r1, [pc, #148]	; (8006600 <gsm_msg_read+0x1c8>)
    gsm.msg.time.second = d[5];
 800656a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    gsm.msg.time.minute = d[4];
 800656e:	f886 2c18 	strb.w	r2, [r6, #3096]	; 0xc18
    char *s = strtok((char*) gsm.buffer, "\"");
 8006572:	f506 60c8 	add.w	r0, r6, #1600	; 0x640
    gsm.msg.time.second = d[5];
 8006576:	f886 3c19 	strb.w	r3, [r6, #3097]	; 0xc19
    char *s = strtok((char*) gsm.buffer, "\"");
 800657a:	f009 fea1 	bl	80102c0 <strtok>
    while (s != NULL)
 800657e:	2800      	cmp	r0, #0
 8006580:	f43f af6a 	beq.w	8006458 <gsm_msg_read+0x20>
      s = strtok(NULL, "\"");
 8006584:	491e      	ldr	r1, [pc, #120]	; (8006600 <gsm_msg_read+0x1c8>)
 8006586:	4d1e      	ldr	r5, [pc, #120]	; (8006600 <gsm_msg_read+0x1c8>)
 8006588:	2000      	movs	r0, #0
 800658a:	f009 fe99 	bl	80102c0 <strtok>
 800658e:	2706      	movs	r7, #6
 8006590:	4603      	mov	r3, r0
 8006592:	4629      	mov	r1, r5
 8006594:	2000      	movs	r0, #0
    while (s != NULL)
 8006596:	2b00      	cmp	r3, #0
 8006598:	f43f af5e 	beq.w	8006458 <gsm_msg_read+0x20>
      s = strtok(NULL, "\"");
 800659c:	f009 fe90 	bl	80102c0 <strtok>
      if (cnt == 6)
 80065a0:	1e79      	subs	r1, r7, #1
 80065a2:	f011 07ff 	ands.w	r7, r1, #255	; 0xff
      s = strtok(NULL, "\"");
 80065a6:	4603      	mov	r3, r0
      if (cnt == 6)
 80065a8:	d1f3      	bne.n	8006592 <gsm_msg_read+0x15a>
        s += 2;
 80065aa:	1c85      	adds	r5, r0, #2
        char *end = strstr(s, "\r\nOK\r\n");
 80065ac:	490f      	ldr	r1, [pc, #60]	; (80065ec <gsm_msg_read+0x1b4>)
 80065ae:	4628      	mov	r0, r5
 80065b0:	f009 fee2 	bl	8010378 <strstr>
        if (end != NULL)
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f43f af4f 	beq.w	8006458 <gsm_msg_read+0x20>
          strncpy((char*) &gsm.buffer[0], s, end - s);
 80065ba:	eba0 0805 	sub.w	r8, r0, r5
 80065be:	4629      	mov	r1, r5
 80065c0:	4642      	mov	r2, r8
 80065c2:	4810      	ldr	r0, [pc, #64]	; (8006604 <gsm_msg_read+0x1cc>)
 80065c4:	f009 fe69 	bl	801029a <strncpy>
          memset(&gsm.buffer[end - s], 0, sizeof(gsm.buffer) - (end - s));
 80065c8:	f508 60c8 	add.w	r0, r8, #1600	; 0x640
 80065cc:	f5c8 62b9 	rsb	r2, r8, #1480	; 0x5c8
 80065d0:	3204      	adds	r2, #4
 80065d2:	4639      	mov	r1, r7
 80065d4:	4430      	add	r0, r6
 80065d6:	f009 fe39 	bl	801024c <memset>
          gsm_unlock();
 80065da:	f7fe fb23 	bl	8004c24 <gsm_unlock>
          return true;
 80065de:	e73e      	b.n	800645e <gsm_msg_read+0x26>
 80065e0:	200002e4 	.word	0x200002e4
 80065e4:	08014e70 	.word	0x08014e70
 80065e8:	080149e0 	.word	0x080149e0
 80065ec:	080149ec 	.word	0x080149ec
 80065f0:	08014e80 	.word	0x08014e80
 80065f4:	08014ec8 	.word	0x08014ec8
 80065f8:	08013954 	.word	0x08013954
 80065fc:	08014e8c 	.word	0x08014e8c
 8006600:	08014b40 	.word	0x08014b40
 8006604:	20000924 	.word	0x20000924

08006608 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <HAL_MspInit+0x48>)
{
 800660a:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800660e:	f040 0001 	orr.w	r0, r0, #1
 8006612:	6618      	str	r0, [r3, #96]	; 0x60
 8006614:	6e1c      	ldr	r4, [r3, #96]	; 0x60
{
 8006616:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006618:	f004 0401 	and.w	r4, r4, #1
 800661c:	9400      	str	r4, [sp, #0]
 800661e:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006620:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8006622:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006626:	659c      	str	r4, [r3, #88]	; 0x58
 8006628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006630:	2200      	movs	r2, #0
 8006632:	210f      	movs	r1, #15
 8006634:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006638:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800663a:	f002 fe7d 	bl	8009338 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800663e:	2105      	movs	r1, #5
 8006640:	2200      	movs	r2, #0
 8006642:	4608      	mov	r0, r1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006644:	b002      	add	sp, #8
 8006646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800664a:	f002 be75 	b.w	8009338 <HAL_NVIC_SetPriority>
 800664e:	bf00      	nop
 8006650:	40021000 	.word	0x40021000

08006654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006654:	b530      	push	{r4, r5, lr}
 8006656:	4604      	mov	r4, r0
 8006658:	b099      	sub	sp, #100	; 0x64
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800665a:	225c      	movs	r2, #92	; 0x5c
 800665c:	2100      	movs	r1, #0
 800665e:	a801      	add	r0, sp, #4
 8006660:	f009 fdf4 	bl	801024c <memset>
  if(hadc->Instance==ADC1)
 8006664:	4b23      	ldr	r3, [pc, #140]	; (80066f4 <HAL_ADC_MspInit+0xa0>)
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	429a      	cmp	r2, r3
 800666a:	d001      	beq.n	8006670 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800666c:	b019      	add	sp, #100	; 0x64
 800666e:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006678:	9101      	str	r1, [sp, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800667a:	9215      	str	r2, [sp, #84]	; 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800667c:	2103      	movs	r1, #3
 800667e:	2201      	movs	r2, #1
 8006680:	e9cd 1202 	strd	r1, r2, [sp, #8]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8006684:	2207      	movs	r2, #7
 8006686:	2108      	movs	r1, #8
 8006688:	e9cd 1204 	strd	r1, r2, [sp, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800668c:	2302      	movs	r3, #2
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800668e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006692:	a801      	add	r0, sp, #4
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006694:	e9cd 3306 	strd	r3, r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8006698:	9208      	str	r2, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800669a:	f004 ff9f 	bl	800b5dc <HAL_RCCEx_PeriphCLKConfig>
 800669e:	bb18      	cbnz	r0, 80066e8 <HAL_ADC_MspInit+0x94>
    __HAL_RCC_ADC_CLK_ENABLE();
 80066a0:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Instance = DMA1_Channel1;
 80066a2:	4d16      	ldr	r5, [pc, #88]	; (80066fc <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80066a4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80066a6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80066aa:	64d1      	str	r1, [r2, #76]	; 0x4c
 80066ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 80066ae:	4914      	ldr	r1, [pc, #80]	; (8006700 <HAL_ADC_MspInit+0xac>)
 80066b0:	6029      	str	r1, [r5, #0]
    __HAL_RCC_ADC_CLK_ENABLE();
 80066b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80066b6:	9200      	str	r2, [sp, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80066b8:	2300      	movs	r3, #0
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80066ba:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC_CLK_ENABLE();
 80066bc:	9a00      	ldr	r2, [sp, #0]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80066be:	622b      	str	r3, [r5, #32]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80066c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80066c4:	e9c5 3103 	strd	r3, r1, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80066c8:	616a      	str	r2, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80066ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066ce:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80066d0:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066d2:	e9c5 3301 	strd	r3, r3, [r5, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80066d6:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80066da:	f002 ff83 	bl	80095e4 <HAL_DMA_Init>
 80066de:	b930      	cbnz	r0, 80066ee <HAL_ADC_MspInit+0x9a>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80066e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80066e2:	62ac      	str	r4, [r5, #40]	; 0x28
}
 80066e4:	b019      	add	sp, #100	; 0x64
 80066e6:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80066e8:	f7ff f930 	bl	800594c <Error_Handler>
 80066ec:	e7d8      	b.n	80066a0 <HAL_ADC_MspInit+0x4c>
      Error_Handler();
 80066ee:	f7ff f92d 	bl	800594c <Error_Handler>
 80066f2:	e7f5      	b.n	80066e0 <HAL_ADC_MspInit+0x8c>
 80066f4:	50040000 	.word	0x50040000
 80066f8:	40021000 	.word	0x40021000
 80066fc:	20001068 	.word	0x20001068
 8006700:	40020008 	.word	0x40020008

08006704 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8006704:	4b09      	ldr	r3, [pc, #36]	; (800672c <HAL_CRC_MspInit+0x28>)
 8006706:	6802      	ldr	r2, [r0, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d000      	beq.n	800670e <HAL_CRC_MspInit+0xa>
 800670c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800670e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
{
 8006712:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8006714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006716:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800671a:	649a      	str	r2, [r3, #72]	; 0x48
 800671c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006726:	b002      	add	sp, #8
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40023000 	.word	0x40023000

08006730 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	4604      	mov	r4, r0
 8006736:	b0a4      	sub	sp, #144	; 0x90
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006738:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800673a:	225c      	movs	r2, #92	; 0x5c
 800673c:	a80d      	add	r0, sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800673e:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8006742:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 8006746:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006748:	f009 fd80 	bl	801024c <memset>
  if(hi2c->Instance==I2C1)
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	4a5b      	ldr	r2, [pc, #364]	; (80068bc <HAL_I2C_MspInit+0x18c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d008      	beq.n	8006766 <HAL_I2C_MspInit+0x36>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8006754:	4a5a      	ldr	r2, [pc, #360]	; (80068c0 <HAL_I2C_MspInit+0x190>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d036      	beq.n	80067c8 <HAL_I2C_MspInit+0x98>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800675a:	4a5a      	ldr	r2, [pc, #360]	; (80068c4 <HAL_I2C_MspInit+0x194>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d062      	beq.n	8006826 <HAL_I2C_MspInit+0xf6>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006760:	b024      	add	sp, #144	; 0x90
 8006762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006766:	2240      	movs	r2, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8006768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800676c:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800676e:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8006770:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006772:	f004 ff33 	bl	800b5dc <HAL_RCCEx_PeriphCLKConfig>
 8006776:	2800      	cmp	r0, #0
 8006778:	f040 8097 	bne.w	80068aa <HAL_I2C_MspInit+0x17a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800677c:	4c52      	ldr	r4, [pc, #328]	; (80068c8 <HAL_I2C_MspInit+0x198>)
 800677e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006780:	f043 0301 	orr.w	r3, r3, #1
 8006784:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006786:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006788:	f44f 65c0 	mov.w	r5, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800678c:	2212      	movs	r2, #18
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800678e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006792:	e9cd 5208 	strd	r5, r2, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006796:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006798:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800679a:	2001      	movs	r0, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800679c:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067a0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067a2:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80067a4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80067aa:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067ac:	f003 f9da 	bl	8009b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80067b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80067b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067be:	9302      	str	r3, [sp, #8]
 80067c0:	9b02      	ldr	r3, [sp, #8]
}
 80067c2:	b024      	add	sp, #144	; 0x90
 80067c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80067c8:	2280      	movs	r2, #128	; 0x80
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80067ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80067ce:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80067d0:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80067d2:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80067d4:	f004 ff02 	bl	800b5dc <HAL_RCCEx_PeriphCLKConfig>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d169      	bne.n	80068b0 <HAL_I2C_MspInit+0x180>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067dc:	4c3a      	ldr	r4, [pc, #232]	; (80068c8 <HAL_I2C_MspInit+0x198>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067de:	483b      	ldr	r0, [pc, #236]	; (80068cc <HAL_I2C_MspInit+0x19c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80067e2:	f043 0302 	orr.w	r3, r3, #2
 80067e6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80067e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80067f0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067f4:	2312      	movs	r3, #18
 80067f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067fa:	2201      	movs	r2, #1
 80067fc:	2303      	movs	r3, #3
 80067fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006802:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006804:	2304      	movs	r3, #4
 8006806:	930c      	str	r3, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006808:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800680a:	f003 f9ab 	bl	8009b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800680e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006814:	65a3      	str	r3, [r4, #88]	; 0x58
 8006816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800681c:	9304      	str	r3, [sp, #16]
 800681e:	9b04      	ldr	r3, [sp, #16]
}
 8006820:	b024      	add	sp, #144	; 0x90
 8006822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006826:	f44f 7280 	mov.w	r2, #256	; 0x100
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 800682a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800682e:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8006830:	920d      	str	r2, [sp, #52]	; 0x34
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8006832:	931b      	str	r3, [sp, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006834:	f004 fed2 	bl	800b5dc <HAL_RCCEx_PeriphCLKConfig>
 8006838:	2800      	cmp	r0, #0
 800683a:	d13c      	bne.n	80068b6 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800683c:	4c22      	ldr	r4, [pc, #136]	; (80068c8 <HAL_I2C_MspInit+0x198>)
 800683e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006840:	2501      	movs	r5, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006842:	432b      	orrs	r3, r5
 8006844:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006846:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006848:	402b      	ands	r3, r5
 800684a:	9305      	str	r3, [sp, #20]
 800684c:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800684e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006850:	f043 0302 	orr.w	r3, r3, #2
 8006854:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006856:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800685e:	2612      	movs	r6, #18
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006860:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006862:	f04f 0803 	mov.w	r8, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006866:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006868:	a908      	add	r1, sp, #32
 800686a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800686e:	9a06      	ldr	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006870:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006872:	e9cd 580a 	strd	r5, r8, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006876:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006878:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800687a:	f003 f973 	bl	8009b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800687e:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006880:	4812      	ldr	r0, [pc, #72]	; (80068cc <HAL_I2C_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006882:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006884:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006886:	e9cd 870b 	strd	r8, r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800688a:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800688c:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800688e:	f003 f969 	bl	8009b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006892:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006894:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006898:	65a3      	str	r3, [r4, #88]	; 0x58
 800689a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800689c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068a0:	9307      	str	r3, [sp, #28]
 80068a2:	9b07      	ldr	r3, [sp, #28]
}
 80068a4:	b024      	add	sp, #144	; 0x90
 80068a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 80068aa:	f7ff f84f 	bl	800594c <Error_Handler>
 80068ae:	e765      	b.n	800677c <HAL_I2C_MspInit+0x4c>
      Error_Handler();
 80068b0:	f7ff f84c 	bl	800594c <Error_Handler>
 80068b4:	e792      	b.n	80067dc <HAL_I2C_MspInit+0xac>
      Error_Handler();
 80068b6:	f7ff f849 	bl	800594c <Error_Handler>
 80068ba:	e7bf      	b.n	800683c <HAL_I2C_MspInit+0x10c>
 80068bc:	40005400 	.word	0x40005400
 80068c0:	40005800 	.word	0x40005800
 80068c4:	40005c00 	.word	0x40005c00
 80068c8:	40021000 	.word	0x40021000
 80068cc:	48000400 	.word	0x48000400

080068d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80068d0:	b510      	push	{r4, lr}
 80068d2:	4604      	mov	r4, r0
 80068d4:	b098      	sub	sp, #96	; 0x60
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80068d6:	225c      	movs	r2, #92	; 0x5c
 80068d8:	2100      	movs	r1, #0
 80068da:	a801      	add	r0, sp, #4
 80068dc:	f009 fcb6 	bl	801024c <memset>
  if(hrtc->Instance==RTC)
 80068e0:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <HAL_RTC_MspInit+0x48>)
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d001      	beq.n	80068ec <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80068e8:	b018      	add	sp, #96	; 0x60
 80068ea:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80068ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80068f0:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068f4:	a801      	add	r0, sp, #4
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80068f6:	9201      	str	r2, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80068f8:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068fa:	f004 fe6f 	bl	800b5dc <HAL_RCCEx_PeriphCLKConfig>
 80068fe:	b940      	cbnz	r0, 8006912 <HAL_RTC_MspInit+0x42>
    __HAL_RCC_RTC_ENABLE();
 8006900:	4a06      	ldr	r2, [pc, #24]	; (800691c <HAL_RTC_MspInit+0x4c>)
 8006902:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800690e:	b018      	add	sp, #96	; 0x60
 8006910:	bd10      	pop	{r4, pc}
      Error_Handler();
 8006912:	f7ff f81b 	bl	800594c <Error_Handler>
 8006916:	e7f3      	b.n	8006900 <HAL_RTC_MspInit+0x30>
 8006918:	40002800 	.word	0x40002800
 800691c:	40021000 	.word	0x40021000

08006920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006920:	b530      	push	{r4, r5, lr}
 8006922:	4604      	mov	r4, r0
 8006924:	b09f      	sub	sp, #124	; 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006926:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006928:	225c      	movs	r2, #92	; 0x5c
 800692a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800692c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8006930:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8006934:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006936:	f009 fc89 	bl	801024c <memset>
  if(huart->Instance==USART1)
 800693a:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <HAL_UART_MspInit+0x90>)
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d001      	beq.n	8006946 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006942:	b01f      	add	sp, #124	; 0x7c
 8006944:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006946:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006948:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800694a:	9307      	str	r3, [sp, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800694c:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800694e:	f004 fe45 	bl	800b5dc <HAL_RCCEx_PeriphCLKConfig>
 8006952:	bb50      	cbnz	r0, 80069aa <HAL_UART_MspInit+0x8a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006954:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <HAL_UART_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006956:	4818      	ldr	r0, [pc, #96]	; (80069b8 <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8006958:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800695a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800695e:	661a      	str	r2, [r3, #96]	; 0x60
 8006960:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006962:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006966:	9200      	str	r2, [sp, #0]
 8006968:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800696a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800696c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800696e:	4322      	orrs	r2, r4
 8006970:	64da      	str	r2, [r3, #76]	; 0x4c
 8006972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006974:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006976:	4023      	ands	r3, r4
 8006978:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800697a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800697c:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800697e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006980:	9302      	str	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006982:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006984:	2300      	movs	r3, #0
 8006986:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006988:	e9cd 4505 	strd	r4, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800698c:	f003 f8ea 	bl	8009b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006990:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006992:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006994:	4808      	ldr	r0, [pc, #32]	; (80069b8 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006996:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006998:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699a:	e9cd 2402 	strd	r2, r4, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800699e:	e9cd 4505 	strd	r4, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069a2:	f003 f8df 	bl	8009b64 <HAL_GPIO_Init>
}
 80069a6:	b01f      	add	sp, #124	; 0x7c
 80069a8:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80069aa:	f7fe ffcf 	bl	800594c <Error_Handler>
 80069ae:	e7d1      	b.n	8006954 <HAL_UART_MspInit+0x34>
 80069b0:	40013800 	.word	0x40013800
 80069b4:	40021000 	.word	0x40021000
 80069b8:	48000400 	.word	0x48000400

080069bc <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80069bc:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <HAL_InitTick+0x90>)
{
 80069be:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM7_CLK_ENABLE();
 80069c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069c2:	f042 0220 	orr.w	r2, r2, #32
 80069c6:	659a      	str	r2, [r3, #88]	; 0x58
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 80069ca:	b088      	sub	sp, #32
  __HAL_RCC_TIM7_CLK_ENABLE();
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	9302      	str	r3, [sp, #8]
{
 80069d2:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80069d4:	a901      	add	r1, sp, #4
 80069d6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 80069d8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80069da:	f004 fd4b 	bl	800b474 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80069de:	9b06      	ldr	r3, [sp, #24]
 80069e0:	b9d3      	cbnz	r3, 8006a18 <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80069e2:	f004 fd23 	bl	800b42c <HAL_RCC_GetPCLK1Freq>
 80069e6:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80069e8:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <HAL_InitTick+0x94>)

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80069ea:	4c1a      	ldr	r4, [pc, #104]	; (8006a54 <HAL_InitTick+0x98>)
 80069ec:	491a      	ldr	r1, [pc, #104]	; (8006a58 <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80069ee:	fba2 2303 	umull	r2, r3, r2, r3
 80069f2:	0c9b      	lsrs	r3, r3, #18
 80069f4:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 80069f6:	2200      	movs	r2, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 80069f8:	e9c4 1300 	strd	r1, r3, [r4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim7);
 80069fc:	4620      	mov	r0, r4
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80069fe:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim7.Init.ClockDivision = 0;
 8006a02:	6122      	str	r2, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a04:	60a2      	str	r2, [r4, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a06:	61a2      	str	r2, [r4, #24]
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8006a08:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim7);
 8006a0a:	f005 fab7 	bl	800bf7c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8006a0e:	4606      	mov	r6, r0
 8006a10:	b130      	cbz	r0, 8006a20 <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 8006a12:	4630      	mov	r0, r6
 8006a14:	b008      	add	sp, #32
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006a18:	f004 fd08 	bl	800b42c <HAL_RCC_GetPCLK1Freq>
 8006a1c:	0043      	lsls	r3, r0, #1
 8006a1e:	e7e3      	b.n	80069e8 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim7);
 8006a20:	4620      	mov	r0, r4
 8006a22:	f005 f96b 	bl	800bcfc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8006a26:	4606      	mov	r6, r0
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1f2      	bne.n	8006a12 <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006a2c:	2037      	movs	r0, #55	; 0x37
 8006a2e:	f002 fcc1 	bl	80093b4 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a32:	2d0f      	cmp	r5, #15
 8006a34:	d901      	bls.n	8006a3a <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 8006a36:	2601      	movs	r6, #1
 8006a38:	e7eb      	b.n	8006a12 <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8006a3a:	4632      	mov	r2, r6
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	2037      	movs	r0, #55	; 0x37
 8006a40:	f002 fc7a 	bl	8009338 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_InitTick+0xa0>)
 8006a46:	601d      	str	r5, [r3, #0]
 8006a48:	e7e3      	b.n	8006a12 <HAL_InitTick+0x56>
 8006a4a:	bf00      	nop
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	431bde83 	.word	0x431bde83
 8006a54:	20001268 	.word	0x20001268
 8006a58:	40001400 	.word	0x40001400
 8006a5c:	20000014 	.word	0x20000014

08006a60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006a60:	e7fe      	b.n	8006a60 <NMI_Handler>
 8006a62:	bf00      	nop

08006a64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a64:	e7fe      	b.n	8006a64 <HardFault_Handler>
 8006a66:	bf00      	nop

08006a68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a68:	e7fe      	b.n	8006a68 <MemManage_Handler>
 8006a6a:	bf00      	nop

08006a6c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a6c:	e7fe      	b.n	8006a6c <BusFault_Handler>
 8006a6e:	bf00      	nop

08006a70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a70:	e7fe      	b.n	8006a70 <UsageFault_Handler>
 8006a72:	bf00      	nop

08006a74 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop

08006a78 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <DMA1_Channel1_IRQHandler+0x8>)
 8006a7a:	f002 beb5 	b.w	80097e8 <HAL_DMA_IRQHandler>
 8006a7e:	bf00      	nop
 8006a80:	20001068 	.word	0x20001068

08006a84 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <USART1_IRQHandler+0x8>)
 8006a86:	f005 baef 	b.w	800c068 <HAL_UART_IRQHandler>
 8006a8a:	bf00      	nop
 8006a8c:	200011d0 	.word	0x200011d0

08006a90 <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
	gsm_rxCallback();
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <USART2_IRQHandler+0x8>)
 8006a92:	f7fa bfc5 	b.w	8001a20 <atc_rxCallback>
 8006a96:	bf00      	nop
 8006a98:	200002ec 	.word	0x200002ec

08006a9c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006a9c:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <TIM7_IRQHandler+0x8>)
 8006a9e:	f005 b963 	b.w	800bd68 <HAL_TIM_IRQHandler>
 8006aa2:	bf00      	nop
 8006aa4:	20001268 	.word	0x20001268

08006aa8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	4770      	bx	lr

08006aac <_kill>:

int _kill(int pid, int sig)
{
 8006aac:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006aae:	f009 fd29 	bl	8010504 <__errno>
 8006ab2:	2316      	movs	r3, #22
 8006ab4:	6003      	str	r3, [r0, #0]
  return -1;
}
 8006ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8006aba:	bd08      	pop	{r3, pc}

08006abc <_exit>:

void _exit (int status)
{
 8006abc:	b508      	push	{r3, lr}
  errno = EINVAL;
 8006abe:	f009 fd21 	bl	8010504 <__errno>
 8006ac2:	2316      	movs	r3, #22
 8006ac4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8006ac6:	e7fe      	b.n	8006ac6 <_exit+0xa>

08006ac8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop

08006ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ad4:	604b      	str	r3, [r1, #4]
  return 0;
}
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop

08006adc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006adc:	2001      	movs	r0, #1
 8006ade:	4770      	bx	lr

08006ae0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	4770      	bx	lr

08006ae4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006ae4:	490c      	ldr	r1, [pc, #48]	; (8006b18 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ae6:	4a0d      	ldr	r2, [pc, #52]	; (8006b1c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8006ae8:	680b      	ldr	r3, [r1, #0]
{
 8006aea:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006aec:	4c0c      	ldr	r4, [pc, #48]	; (8006b20 <_sbrk+0x3c>)
 8006aee:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8006af0:	b12b      	cbz	r3, 8006afe <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006af2:	4418      	add	r0, r3
 8006af4:	4290      	cmp	r0, r2
 8006af6:	d807      	bhi.n	8006b08 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006af8:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006afe:	4b09      	ldr	r3, [pc, #36]	; (8006b24 <_sbrk+0x40>)
 8006b00:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8006b02:	4418      	add	r0, r3
 8006b04:	4290      	cmp	r0, r2
 8006b06:	d9f7      	bls.n	8006af8 <_sbrk+0x14>
    errno = ENOMEM;
 8006b08:	f009 fcfc 	bl	8010504 <__errno>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	bd10      	pop	{r4, pc}
 8006b18:	200012b4 	.word	0x200012b4
 8006b1c:	20010000 	.word	0x20010000
 8006b20:	00000400 	.word	0x00000400
 8006b24:	200056d0 	.word	0x200056d0

08006b28 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006b28:	4a03      	ldr	r2, [pc, #12]	; (8006b38 <SystemInit+0x10>)
 8006b2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006b2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006b36:	4770      	bx	lr
 8006b38:	e000ed00 	.word	0xe000ed00

08006b3c <SensorsTask>:
}

// ******************************************************************************************************

void SensorsTask(void const *argument)
{
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	ed2d 8b02 	vpush	{d8}
	uint8_t shtc3_values[6];

	printf("Sensors task created\r\n\r\n\r\n");
 8006b44:	48a6      	ldr	r0, [pc, #664]	; (8006de0 <SensorsTask+0x2a4>)
 8006b46:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8006e14 <SensorsTask+0x2d8>
 8006b4a:	4ca6      	ldr	r4, [pc, #664]	; (8006de4 <SensorsTask+0x2a8>)
 8006b4c:	4fa6      	ldr	r7, [pc, #664]	; (8006de8 <SensorsTask+0x2ac>)
 8006b4e:	4da7      	ldr	r5, [pc, #668]	; (8006dec <SensorsTask+0x2b0>)
 8006b50:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8006e18 <SensorsTask+0x2dc>
	while(1)
	{
		vTaskSuspend(NULL);		// zatrzymaj taki i czekaj na komende start
		LED2_ON();				// mrugniecie czerwona
 8006b54:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8006e1c <SensorsTask+0x2e0>
{
 8006b58:	b083      	sub	sp, #12
	printf("Sensors task created\r\n\r\n\r\n");
 8006b5a:	f009 fa49 	bl	800fff0 <puts>
 8006b5e:	e018      	b.n	8006b92 <SensorsTask+0x56>
		  if(TMP117.temp.use_meas) {
			  TMP117.temp.value = TMP117_get_temp();
		//    			  printf("Temperatura TMP117: %.2f\r\n", TMP117.temp.value);
		  }
		}
		if(BME280.present && BME280.sensor_use){
 8006b60:	7823      	ldrb	r3, [r4, #0]
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d05b      	beq.n	8006c22 <SensorsTask+0xe6>
		  if(BME280.hum.use_meas) {
			  BME280.hum.value = BME280_get_hum();
		//    		      printf("Wilgotnosc BME280: %.2f\r\n", BME280.hum.value);
		  }
		}
		if(SHT3.present && SHT3.sensor_use){
 8006b6a:	783b      	ldrb	r3, [r7, #0]
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d06c      	beq.n	8006c4e <SensorsTask+0x112>
		  if(SHT3.hum.use_meas) {
			  SHT3.hum.value = SHTC3_get_hum(shtc3_values);
		//    			  printf("Wilgotnosc SHT3: %.2f\r\n", SHT3.hum.value);
		  }
		}
		if(MS8607.present && MS8607.sensor_use){
 8006b74:	f899 3000 	ldrb.w	r3, [r9]
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d07d      	beq.n	8006c7c <SensorsTask+0x140>
		  if(MS8607.hum.use_meas) {
			  MS8607.hum.value = MS8607_get_hum();
		//    			  printf("Wilgotnosc MS8607: %.2f\r\n", MS8607.hum.value);
		  }
		}
		if(DPS368.present && DPS368.sensor_use){
 8006b80:	782b      	ldrb	r3, [r5, #0]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	f000 8093 	beq.w	8006cb2 <SensorsTask+0x176>
			  osDelay( calcBusyTime(dps368_ovr_press) + 10);			// zaczekaj na koniec przetwarzania
   			  DPS368.press.value = DPS368_get_press(dps_scaled_temp);	// pobierz cisnienie uzywając temperatury
//    		  printf("Cisnienie DPS368: %.2f\r\n", DPS368.press.value);
		  }
		}
		sensors_data_ready = 1;
 8006b8c:	4a98      	ldr	r2, [pc, #608]	; (8006df0 <SensorsTask+0x2b4>)
 8006b8e:	2301      	movs	r3, #1
 8006b90:	7013      	strb	r3, [r2, #0]
		vTaskSuspend(NULL);		// zatrzymaj taki i czekaj na komende start
 8006b92:	2000      	movs	r0, #0
 8006b94:	f006 ff06 	bl	800d9a4 <vTaskSuspend>
		LED2_ON();				// mrugniecie czerwona
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b9e:	4650      	mov	r0, sl
 8006ba0:	f003 f8ce 	bl	8009d40 <HAL_GPIO_WritePin>
		  if(TMP117.sensor_use && TMP117.temp.use_meas) {
 8006ba4:	f898 3000 	ldrb.w	r3, [r8]
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	f000 80e7 	beq.w	8006d80 <SensorsTask+0x244>
		uint32_t meas_time = 0;
 8006bb2:	2600      	movs	r6, #0
		  if(BME280.sensor_use && (BME280.temp.use_meas || BME280.press.use_meas || BME280.hum.use_meas) ) {
 8006bb4:	7823      	ldrb	r3, [r4, #0]
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	f000 80d3 	beq.w	8006d66 <SensorsTask+0x22a>
		  if(SHT3.sensor_use && (SHT3.temp.use_meas || SHT3.hum.use_meas)) {
 8006bc0:	783b      	ldrb	r3, [r7, #0]
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	f000 80bf 	beq.w	8006d4a <SensorsTask+0x20e>
		  if(DPS368.sensor_use && (DPS368.temp.use_meas || DPS368.press.use_meas)) {
 8006bcc:	782b      	ldrb	r3, [r5, #0]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	f000 8092 	beq.w	8006cfc <SensorsTask+0x1c0>
		uint8_t dps368_press = 0;
 8006bd8:	f04f 0b00 	mov.w	fp, #0
		if(disp_type == 1) {
 8006bdc:	4b85      	ldr	r3, [pc, #532]	; (8006df4 <SensorsTask+0x2b8>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	f000 80a8 	beq.w	8006d36 <SensorsTask+0x1fa>
		LED2_OFF();						// mrugniecie czerwona
 8006be6:	2201      	movs	r2, #1
 8006be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bec:	4650      	mov	r0, sl
 8006bee:	f003 f8a7 	bl	8009d40 <HAL_GPIO_WritePin>
		osDelay(meas_time);				// odczekaj czas potrzebny na przetworzenie (maksymalny wymagany)
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f006 fa2a 	bl	800d04c <osDelay>
		if(TMP117.present && TMP117.sensor_use){
 8006bf8:	f898 3000 	ldrb.w	r3, [r8]
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d1ad      	bne.n	8006b60 <SensorsTask+0x24>
		  if(TMP117.temp.use_meas) {
 8006c04:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006c08:	07de      	lsls	r6, r3, #31
 8006c0a:	d5a9      	bpl.n	8006b60 <SensorsTask+0x24>
			  TMP117.temp.value = TMP117_get_temp();
 8006c0c:	f001 fa78 	bl	8008100 <TMP117_get_temp>
 8006c10:	ee10 3a10 	vmov	r3, s0
 8006c14:	f8c8 3002 	str.w	r3, [r8, #2]
		if(BME280.present && BME280.sensor_use){
 8006c18:	7823      	ldrb	r3, [r4, #0]
 8006c1a:	f003 0303 	and.w	r3, r3, #3
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d1a3      	bne.n	8006b6a <SensorsTask+0x2e>
		  if(BME280.temp.use_meas) {
 8006c22:	7863      	ldrb	r3, [r4, #1]
 8006c24:	07d8      	lsls	r0, r3, #31
 8006c26:	f100 80cc 	bmi.w	8006dc2 <SensorsTask+0x286>
		  if(BME280.press.use_meas) {
 8006c2a:	7ce3      	ldrb	r3, [r4, #19]
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	f100 80c3 	bmi.w	8006db8 <SensorsTask+0x27c>
		  if(BME280.hum.use_meas) {
 8006c32:	7aa3      	ldrb	r3, [r4, #10]
 8006c34:	07da      	lsls	r2, r3, #31
 8006c36:	d598      	bpl.n	8006b6a <SensorsTask+0x2e>
			  BME280.hum.value = BME280_get_hum();
 8006c38:	f001 fd18 	bl	800866c <BME280_get_hum>
 8006c3c:	ee10 3a10 	vmov	r3, s0
 8006c40:	f8c4 300b 	str.w	r3, [r4, #11]
		if(SHT3.present && SHT3.sensor_use){
 8006c44:	783b      	ldrb	r3, [r7, #0]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d192      	bne.n	8006b74 <SensorsTask+0x38>
		  SHTC3_read_values(shtc3_values);
 8006c4e:	4668      	mov	r0, sp
 8006c50:	f001 fb96 	bl	8008380 <SHTC3_read_values>
		  if(SHT3.temp.use_meas) {
 8006c54:	787b      	ldrb	r3, [r7, #1]
 8006c56:	07db      	lsls	r3, r3, #31
 8006c58:	f100 80ba 	bmi.w	8006dd0 <SensorsTask+0x294>
		  if(SHT3.hum.use_meas) {
 8006c5c:	7abb      	ldrb	r3, [r7, #10]
 8006c5e:	07de      	lsls	r6, r3, #31
 8006c60:	d588      	bpl.n	8006b74 <SensorsTask+0x38>
			  SHT3.hum.value = SHTC3_get_hum(shtc3_values);
 8006c62:	4668      	mov	r0, sp
 8006c64:	f001 fbd6 	bl	8008414 <SHTC3_get_hum>
 8006c68:	ee10 3a10 	vmov	r3, s0
 8006c6c:	f8c7 300b 	str.w	r3, [r7, #11]
		if(MS8607.present && MS8607.sensor_use){
 8006c70:	f899 3000 	ldrb.w	r3, [r9]
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d181      	bne.n	8006b80 <SensorsTask+0x44>
		  if(MS8607.temp.use_meas) {
 8006c7c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8006c80:	07d8      	lsls	r0, r3, #31
 8006c82:	f100 8089 	bmi.w	8006d98 <SensorsTask+0x25c>
		  if(MS8607.press.use_meas) {
 8006c86:	f899 3013 	ldrb.w	r3, [r9, #19]
 8006c8a:	07d9      	lsls	r1, r3, #31
 8006c8c:	f100 808f 	bmi.w	8006dae <SensorsTask+0x272>
		  if(MS8607.hum.use_meas) {
 8006c90:	f899 300a 	ldrb.w	r3, [r9, #10]
 8006c94:	07da      	lsls	r2, r3, #31
 8006c96:	f57f af73 	bpl.w	8006b80 <SensorsTask+0x44>
			  MS8607.hum.value = MS8607_get_hum();
 8006c9a:	f001 fadb 	bl	8008254 <MS8607_get_hum>
 8006c9e:	ee10 3a10 	vmov	r3, s0
 8006ca2:	f8c9 300b 	str.w	r3, [r9, #11]
		if(DPS368.present && DPS368.sensor_use){
 8006ca6:	782b      	ldrb	r3, [r5, #0]
 8006ca8:	f003 0303 	and.w	r3, r3, #3
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	f47f af6d 	bne.w	8006b8c <SensorsTask+0x50>
		  float dps_scaled_temp = DPS368_get_scaled_temp();				// odczytaj temperature
 8006cb2:	f7fd fbd7 	bl	8004464 <DPS368_get_scaled_temp>
		  if(DPS368.temp.use_meas) {
 8006cb6:	786b      	ldrb	r3, [r5, #1]
 8006cb8:	07db      	lsls	r3, r3, #31
		  float dps_scaled_temp = DPS368_get_scaled_temp();				// odczytaj temperature
 8006cba:	eeb0 8a40 	vmov.f32	s16, s0
		  if(DPS368.temp.use_meas) {
 8006cbe:	d416      	bmi.n	8006cee <SensorsTask+0x1b2>
		  if(dps368_press) {											// jak ma byc cisnienie z DPS
 8006cc0:	f1bb 0f00 	cmp.w	fp, #0
 8006cc4:	f43f af62 	beq.w	8006b8c <SensorsTask+0x50>
			  DPS368_start_meas_press(dps368_ovr_press);				// uruchom przetworzenie cisnienia
 8006cc8:	4e4b      	ldr	r6, [pc, #300]	; (8006df8 <SensorsTask+0x2bc>)
 8006cca:	7830      	ldrb	r0, [r6, #0]
 8006ccc:	f7fd fbac 	bl	8004428 <DPS368_start_meas_press>
			  osDelay( calcBusyTime(dps368_ovr_press) + 10);			// zaczekaj na koniec przetwarzania
 8006cd0:	7830      	ldrb	r0, [r6, #0]
 8006cd2:	f7fd fb51 	bl	8004378 <calcBusyTime>
 8006cd6:	300a      	adds	r0, #10
 8006cd8:	f006 f9b8 	bl	800d04c <osDelay>
   			  DPS368.press.value = DPS368_get_press(dps_scaled_temp);	// pobierz cisnienie uzywając temperatury
 8006cdc:	eeb0 0a48 	vmov.f32	s0, s16
 8006ce0:	f7fd fbf4 	bl	80044cc <DPS368_get_press>
 8006ce4:	ee10 3a10 	vmov	r3, s0
 8006ce8:	f8c5 300b 	str.w	r3, [r5, #11]
 8006cec:	e74e      	b.n	8006b8c <SensorsTask+0x50>
			  DPS368.temp.value = DPS368_calc_temp(dps_scaled_temp);
 8006cee:	f7fd fb8b 	bl	8004408 <DPS368_calc_temp>
 8006cf2:	ee10 3a10 	vmov	r3, s0
 8006cf6:	f8c5 3002 	str.w	r3, [r5, #2]
 8006cfa:	e7e1      	b.n	8006cc0 <SensorsTask+0x184>
 8006cfc:	f895 b001 	ldrb.w	fp, [r5, #1]
 8006d00:	7aab      	ldrb	r3, [r5, #10]
 8006d02:	ea4b 0b03 	orr.w	fp, fp, r3
		  if(DPS368.sensor_use && (DPS368.temp.use_meas || DPS368.press.use_meas)) {
 8006d06:	f01b 0b01 	ands.w	fp, fp, #1
 8006d0a:	f43f af67 	beq.w	8006bdc <SensorsTask+0xa0>
			  DPS368_start_meas_temp(dps368_ovr_temp);
 8006d0e:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <SensorsTask+0x2c0>)
 8006d10:	7818      	ldrb	r0, [r3, #0]
 8006d12:	f7fd fb5b 	bl	80043cc <DPS368_start_meas_temp>
			  uint32_t dpstim = calcBusyTime(dps368_ovr_temp);
 8006d16:	4b39      	ldr	r3, [pc, #228]	; (8006dfc <SensorsTask+0x2c0>)
 8006d18:	7818      	ldrb	r0, [r3, #0]
 8006d1a:	f7fd fb2d 	bl	8004378 <calcBusyTime>
		if(disp_type == 1) {
 8006d1e:	4b35      	ldr	r3, [pc, #212]	; (8006df4 <SensorsTask+0x2b8>)
			  if(DPS368.press.use_meas) dps368_press = 1;				// z DPS bedzie tez cisnienie
 8006d20:	f895 b00a 	ldrb.w	fp, [r5, #10]
		if(disp_type == 1) {
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	4286      	cmp	r6, r0
 8006d28:	bf38      	it	cc
 8006d2a:	4606      	movcc	r6, r0
 8006d2c:	2b01      	cmp	r3, #1
			  if(DPS368.press.use_meas) dps368_press = 1;				// z DPS bedzie tez cisnienie
 8006d2e:	f00b 0b01 	and.w	fp, fp, #1
		if(disp_type == 1) {
 8006d32:	f47f af58 	bne.w	8006be6 <SensorsTask+0xaa>
		  printf("Komenda startu pomiarow wyslana\r\n");
 8006d36:	4832      	ldr	r0, [pc, #200]	; (8006e00 <SensorsTask+0x2c4>)
 8006d38:	f009 f95a 	bl	800fff0 <puts>
		  printf("Meas interval: %u\r\n", tim_interval);
 8006d3c:	4b31      	ldr	r3, [pc, #196]	; (8006e04 <SensorsTask+0x2c8>)
 8006d3e:	4832      	ldr	r0, [pc, #200]	; (8006e08 <SensorsTask+0x2cc>)
 8006d40:	8819      	ldrh	r1, [r3, #0]
 8006d42:	b289      	uxth	r1, r1
 8006d44:	f009 f8ee 	bl	800ff24 <iprintf>
 8006d48:	e74d      	b.n	8006be6 <SensorsTask+0xaa>
		  if(SHT3.sensor_use && (SHT3.temp.use_meas || SHT3.hum.use_meas)) {
 8006d4a:	787b      	ldrb	r3, [r7, #1]
 8006d4c:	7aba      	ldrb	r2, [r7, #10]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	07db      	lsls	r3, r3, #31
 8006d52:	f57f af3b 	bpl.w	8006bcc <SensorsTask+0x90>
			  SHTC3_start_meas(sht3_mode);
 8006d56:	4b2d      	ldr	r3, [pc, #180]	; (8006e0c <SensorsTask+0x2d0>)
 8006d58:	2e64      	cmp	r6, #100	; 0x64
 8006d5a:	7818      	ldrb	r0, [r3, #0]
 8006d5c:	bf38      	it	cc
 8006d5e:	2664      	movcc	r6, #100	; 0x64
 8006d60:	f001 fae0 	bl	8008324 <SHTC3_start_meas>
			  if(meas_time < 100) meas_time = 100;
 8006d64:	e732      	b.n	8006bcc <SensorsTask+0x90>
		  if(BME280.sensor_use && (BME280.temp.use_meas || BME280.press.use_meas || BME280.hum.use_meas) ) {
 8006d66:	7ce2      	ldrb	r2, [r4, #19]
 8006d68:	7863      	ldrb	r3, [r4, #1]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	7aa2      	ldrb	r2, [r4, #10]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	07da      	lsls	r2, r3, #31
 8006d72:	f57f af25 	bpl.w	8006bc0 <SensorsTask+0x84>
			  BME280_start_meas();
 8006d76:	f001 fca7 	bl	80086c8 <BME280_start_meas>
			  if(meas_time < 500) meas_time = 500;
 8006d7a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8006d7e:	e71f      	b.n	8006bc0 <SensorsTask+0x84>
		  if(TMP117.sensor_use && TMP117.temp.use_meas) {
 8006d80:	f898 6001 	ldrb.w	r6, [r8, #1]
 8006d84:	f016 0601 	ands.w	r6, r6, #1
 8006d88:	f43f af14 	beq.w	8006bb4 <SensorsTask+0x78>
			  TMP117_start_meas(tmp117_avr);
 8006d8c:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <SensorsTask+0x2d4>)
 8006d8e:	7818      	ldrb	r0, [r3, #0]
 8006d90:	f001 f9d2 	bl	8008138 <TMP117_start_meas>
			  if(meas_time < 200) meas_time = 200;
 8006d94:	26c8      	movs	r6, #200	; 0xc8
 8006d96:	e70d      	b.n	8006bb4 <SensorsTask+0x78>
			  MS8607.temp.value = MS8607_get_temp();
 8006d98:	f001 fa48 	bl	800822c <MS8607_get_temp>
 8006d9c:	ee10 3a10 	vmov	r3, s0
 8006da0:	f8c9 3002 	str.w	r3, [r9, #2]
		  if(MS8607.press.use_meas) {
 8006da4:	f899 3013 	ldrb.w	r3, [r9, #19]
 8006da8:	07d9      	lsls	r1, r3, #31
 8006daa:	f57f af71 	bpl.w	8006c90 <SensorsTask+0x154>
			  MS8607.press.value = MS8607_get_press();
 8006dae:	f001 fa47 	bl	8008240 <MS8607_get_press>
 8006db2:	ed89 0a05 	vstr	s0, [r9, #20]
 8006db6:	e76b      	b.n	8006c90 <SensorsTask+0x154>
			  BME280.press.value = BME280_get_press();
 8006db8:	f001 fc2a 	bl	8008610 <BME280_get_press>
 8006dbc:	ed84 0a05 	vstr	s0, [r4, #20]
 8006dc0:	e737      	b.n	8006c32 <SensorsTask+0xf6>
			  BME280.temp.value = BME280_get_temp();
 8006dc2:	f001 fbf7 	bl	80085b4 <BME280_get_temp>
 8006dc6:	ee10 3a10 	vmov	r3, s0
 8006dca:	f8c4 3002 	str.w	r3, [r4, #2]
 8006dce:	e72c      	b.n	8006c2a <SensorsTask+0xee>
			  SHT3.temp.value = SHTC3_get_temp(shtc3_values);
 8006dd0:	4668      	mov	r0, sp
 8006dd2:	f001 fae9 	bl	80083a8 <SHTC3_get_temp>
 8006dd6:	ee10 3a10 	vmov	r3, s0
 8006dda:	f8c7 3002 	str.w	r3, [r7, #2]
 8006dde:	e73d      	b.n	8006c5c <SensorsTask+0x120>
 8006de0:	08014f1c 	.word	0x08014f1c
 8006de4:	200012b8 	.word	0x200012b8
 8006de8:	2000131c 	.word	0x2000131c
 8006dec:	200012dc 	.word	0x200012dc
 8006df0:	200013fc 	.word	0x200013fc
 8006df4:	200013b9 	.word	0x200013b9
 8006df8:	200013bc 	.word	0x200013bc
 8006dfc:	200013bd 	.word	0x200013bd
 8006e00:	08014f38 	.word	0x08014f38
 8006e04:	20001404 	.word	0x20001404
 8006e08:	08014f5c 	.word	0x08014f5c
 8006e0c:	200013fd 	.word	0x200013fd
 8006e10:	20001406 	.word	0x20001406
 8006e14:	20001334 	.word	0x20001334
 8006e18:	200012f8 	.word	0x200012f8
 8006e1c:	48000400 	.word	0x48000400

08006e20 <GSMTask>:

// ******************************************************************************************************


void GSMTask(void const *argument)
{
 8006e20:	b508      	push	{r3, lr}


	printf("========GSM TASK STARTED=======\r\n");
 8006e22:	4810      	ldr	r0, [pc, #64]	; (8006e64 <GSMTask+0x44>)
 8006e24:	f009 f8e4 	bl	800fff0 <puts>
	SIM_ON();
 8006e28:	2201      	movs	r2, #1
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	480e      	ldr	r0, [pc, #56]	; (8006e68 <GSMTask+0x48>)
 8006e2e:	f002 ff87 	bl	8009d40 <HAL_GPIO_WritePin>
	  gsm_init();
 8006e32:	f7fd fefd 	bl	8004c30 <gsm_init>
	  gsm_power(true);
 8006e36:	2001      	movs	r0, #1
 8006e38:	f7fd ff70 	bl	8004d1c <gsm_power>
	  gsm_waitForRegister(30);
 8006e3c:	201e      	movs	r0, #30
 8006e3e:	f7fe fa43 	bl	80052c8 <gsm_waitForRegister>
	  uint8_t signal;
      signal=gsm_getSignalQuality_0_to_100();
 8006e42:	f7fd fff5 	bl	8004e30 <gsm_getSignalQuality_0_to_100>
	     	  while(signal==0)
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d0fb      	beq.n	8006e42 <GSMTask+0x22>
	     	  {
	     	  signal=gsm_getSignalQuality_0_to_100();
	     	  }
	     	  gsm_gprs_setApName("internet");
 8006e4a:	4808      	ldr	r0, [pc, #32]	; (8006e6c <GSMTask+0x4c>)
 8006e4c:	f7fd fc1c 	bl	8004688 <gsm_gprs_setApName>
	     	  gsm_gprs_connect();
 8006e50:	f7fd fc64 	bl	800471c <gsm_gprs_connect>
	     	  gsm_gprs_ntpServer("194.146.251.101", 8);
 8006e54:	4806      	ldr	r0, [pc, #24]	; (8006e70 <GSMTask+0x50>)
 8006e56:	2108      	movs	r1, #8
 8006e58:	f7fd fcdc 	bl	8004814 <gsm_gprs_ntpServer>
	     	  //gsm_gprs_ntpSyncTime();
	     	  printf("gprs\r\n");
 8006e5c:	4805      	ldr	r0, [pc, #20]	; (8006e74 <GSMTask+0x54>)
 8006e5e:	f009 f8c7 	bl	800fff0 <puts>

	     	 while (1)
 8006e62:	e7fe      	b.n	8006e62 <GSMTask+0x42>
 8006e64:	08014f70 	.word	0x08014f70
 8006e68:	48000400 	.word	0x48000400
 8006e6c:	08014f94 	.word	0x08014f94
 8006e70:	08014fa0 	.word	0x08014fa0
 8006e74:	08014fb0 	.word	0x08014fb0

08006e78 <_read>:
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop

08006e7c <ReinitTimer>:
{
 8006e7c:	b508      	push	{r3, lr}
	ticksstart = HAL_GetTick();
 8006e7e:	f001 fd6d 	bl	800895c <HAL_GetTick>
 8006e82:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <ReinitTimer+0xc>)
 8006e84:	6018      	str	r0, [r3, #0]
}
 8006e86:	bd08      	pop	{r3, pc}
 8006e88:	20001400 	.word	0x20001400

08006e8c <HAL_SYSTICK_Callback>:
}
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop

08006e90 <check_powerOn>:
{
 8006e90:	b570      	push	{r4, r5, r6, lr}
	uint32_t timon = HAL_GetTick();
 8006e92:	f001 fd63 	bl	800895c <HAL_GetTick>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8006e96:	4e0f      	ldr	r6, [pc, #60]	; (8006ed4 <check_powerOn+0x44>)
	uint32_t timon = HAL_GetTick();
 8006e98:	4605      	mov	r5, r0
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8006e9a:	e005      	b.n	8006ea8 <check_powerOn+0x18>
	    if(HAL_GetTick() - timon > 1000)     // 1 sec pushing
 8006e9c:	f001 fd5e 	bl	800895c <HAL_GetTick>
 8006ea0:	1b40      	subs	r0, r0, r5
 8006ea2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006ea6:	d808      	bhi.n	8006eba <check_powerOn+0x2a>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8006ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006eac:	4630      	mov	r0, r6
 8006eae:	f002 ff41 	bl	8009d34 <HAL_GPIO_ReadPin>
 8006eb2:	2801      	cmp	r0, #1
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	d0f1      	beq.n	8006e9c <check_powerOn+0xc>
}
 8006eb8:	bd70      	pop	{r4, r5, r6, pc}
	    	timon = HAL_GetTick();
 8006eba:	f001 fd4f 	bl	800895c <HAL_GetTick>
	        POWER_ON();    // pull-up power supply
 8006ebe:	4806      	ldr	r0, [pc, #24]	; (8006ed8 <check_powerOn+0x48>)
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ec6:	f002 ff3b 	bl	8009d40 <HAL_GPIO_WritePin>
}
 8006eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    	printf("Power ON\r\n");
 8006ece:	4803      	ldr	r0, [pc, #12]	; (8006edc <check_powerOn+0x4c>)
 8006ed0:	f009 b88e 	b.w	800fff0 <puts>
 8006ed4:	48000800 	.word	0x48000800
 8006ed8:	48000400 	.word	0x48000400
 8006edc:	08014fb8 	.word	0x08014fb8

08006ee0 <check_powerOff>:
{
 8006ee0:	b538      	push	{r3, r4, r5, lr}
  if(Power_SW_READ()) //power button pressed
 8006ee2:	4824      	ldr	r0, [pc, #144]	; (8006f74 <check_powerOff+0x94>)
 8006ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ee8:	f002 ff24 	bl	8009d34 <HAL_GPIO_ReadPin>
 8006eec:	b160      	cbz	r0, 8006f08 <check_powerOff+0x28>
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 8006eee:	4c22      	ldr	r4, [pc, #136]	; (8006f78 <check_powerOff+0x98>)
	 LED2_ON();
 8006ef0:	4822      	ldr	r0, [pc, #136]	; (8006f7c <check_powerOff+0x9c>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ef8:	f002 ff22 	bl	8009d40 <HAL_GPIO_WritePin>
	 keystate = 1;
 8006efc:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <check_powerOff+0xa0>)
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 8006efe:	6823      	ldr	r3, [r4, #0]
	 keystate = 1;
 8006f00:	2501      	movs	r5, #1
 8006f02:	7015      	strb	r5, [r2, #0]
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 8006f04:	b99b      	cbnz	r3, 8006f2e <check_powerOff+0x4e>
}
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
	  if(keystate) LED2_OFF();
 8006f08:	4c1d      	ldr	r4, [pc, #116]	; (8006f80 <check_powerOff+0xa0>)
	  offTim = HAL_GetTick();   // button released, update offTim
 8006f0a:	f001 fd27 	bl	800895c <HAL_GetTick>
 8006f0e:	4a1a      	ldr	r2, [pc, #104]	; (8006f78 <check_powerOff+0x98>)
	  if(keystate) LED2_OFF();
 8006f10:	7823      	ldrb	r3, [r4, #0]
	  offTim = HAL_GetTick();   // button released, update offTim
 8006f12:	6010      	str	r0, [r2, #0]
	  if(keystate) LED2_OFF();
 8006f14:	b913      	cbnz	r3, 8006f1c <check_powerOff+0x3c>
	  keystate = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	7023      	strb	r3, [r4, #0]
}
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
	  if(keystate) LED2_OFF();
 8006f1c:	4817      	ldr	r0, [pc, #92]	; (8006f7c <check_powerOff+0x9c>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f24:	f002 ff0c 	bl	8009d40 <HAL_GPIO_WritePin>
	  keystate = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	7023      	strb	r3, [r4, #0]
 8006f2c:	e7f5      	b.n	8006f1a <check_powerOff+0x3a>
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 8006f2e:	f001 fd15 	bl	800895c <HAL_GetTick>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	1ac0      	subs	r0, r0, r3
 8006f36:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8006f3a:	d9e4      	bls.n	8006f06 <check_powerOff+0x26>
    	 printf("Power off\r\n");
 8006f3c:	4811      	ldr	r0, [pc, #68]	; (8006f84 <check_powerOff+0xa4>)
 8006f3e:	f009 f857 	bl	800fff0 <puts>
    	 LED2_OFF();
 8006f42:	462a      	mov	r2, r5
 8006f44:	480d      	ldr	r0, [pc, #52]	; (8006f7c <check_powerOff+0x9c>)
 8006f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f4a:	f002 fef9 	bl	8009d40 <HAL_GPIO_WritePin>
    	 LED1_OFF();
 8006f4e:	462a      	mov	r2, r5
 8006f50:	480a      	ldr	r0, [pc, #40]	; (8006f7c <check_powerOff+0x9c>)
 8006f52:	2120      	movs	r1, #32
 8006f54:	f002 fef4 	bl	8009d40 <HAL_GPIO_WritePin>
    	 POWER_OFF();
 8006f58:	4808      	ldr	r0, [pc, #32]	; (8006f7c <check_powerOff+0x9c>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f60:	f002 feee 	bl	8009d40 <HAL_GPIO_WritePin>
    	 osDelay(2000);
 8006f64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006f68:	f006 f870 	bl	800d04c <osDelay>
}
 8006f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	 HAL_NVIC_SystemReset();
 8006f70:	f002 ba2e 	b.w	80093d0 <HAL_NVIC_SystemReset>
 8006f74:	48000800 	.word	0x48000800
 8006f78:	200013c8 	.word	0x200013c8
 8006f7c:	48000400 	.word	0x48000400
 8006f80:	200013be 	.word	0x200013be
 8006f84:	08014fc4 	.word	0x08014fc4

08006f88 <HALcalculateCRC>:
{
 8006f88:	b530      	push	{r4, r5, lr}
    HAL_CRC_Init(&hcrc);
 8006f8a:	4c0a      	ldr	r4, [pc, #40]	; (8006fb4 <HALcalculateCRC+0x2c>)
{
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	4605      	mov	r5, r0
    HAL_CRC_Init(&hcrc);
 8006f90:	4620      	mov	r0, r4
{
 8006f92:	9101      	str	r1, [sp, #4]
    HAL_CRC_Init(&hcrc);
 8006f94:	f002 fa88 	bl	80094a8 <HAL_CRC_Init>
    __HAL_CRC_DR_RESET(&hcrc);
 8006f98:	6820      	ldr	r0, [r4, #0]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 8006f9a:	9a01      	ldr	r2, [sp, #4]
    __HAL_CRC_DR_RESET(&hcrc);
 8006f9c:	6883      	ldr	r3, [r0, #8]
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	6083      	str	r3, [r0, #8]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	f002 fabc 	bl	8009524 <HAL_CRC_Calculate>
}
 8006fac:	b2c0      	uxtb	r0, r0
 8006fae:	b003      	add	sp, #12
 8006fb0:	bd30      	pop	{r4, r5, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20001044 	.word	0x20001044

08006fb8 <printCSVheader>:
{
 8006fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 8006fba:	4862      	ldr	r0, [pc, #392]	; (8007144 <printCSVheader+0x18c>)
 8006fbc:	f009 f818 	bl	800fff0 <puts>
	printf("CNT;");
 8006fc0:	4861      	ldr	r0, [pc, #388]	; (8007148 <printCSVheader+0x190>)
 8006fc2:	f008 ffaf 	bl	800ff24 <iprintf>
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 8006fc6:	4a61      	ldr	r2, [pc, #388]	; (800714c <printCSVheader+0x194>)
 8006fc8:	7813      	ldrb	r3, [r2, #0]
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d03a      	beq.n	8007048 <printCSVheader+0x90>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 8006fd2:	4d5f      	ldr	r5, [pc, #380]	; (8007150 <printCSVheader+0x198>)
 8006fd4:	782b      	ldrb	r3, [r5, #0]
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d040      	beq.n	8007060 <printCSVheader+0xa8>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8006fde:	4e5d      	ldr	r6, [pc, #372]	; (8007154 <printCSVheader+0x19c>)
 8006fe0:	7833      	ldrb	r3, [r6, #0]
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d046      	beq.n	8007078 <printCSVheader+0xc0>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 8006fea:	4c5b      	ldr	r4, [pc, #364]	; (8007158 <printCSVheader+0x1a0>)
 8006fec:	7823      	ldrb	r3, [r4, #0]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d04c      	beq.n	8007090 <printCSVheader+0xd8>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 8006ff6:	4f59      	ldr	r7, [pc, #356]	; (800715c <printCSVheader+0x1a4>)
 8006ff8:	783b      	ldrb	r3, [r7, #0]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d052      	beq.n	80070a8 <printCSVheader+0xf0>
	if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("PRESS_BME280;");
 8007002:	782b      	ldrb	r3, [r5, #0]
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2b03      	cmp	r3, #3
 800700a:	d058      	beq.n	80070be <printCSVheader+0x106>
	if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("PRESS_MS8607;");
 800700c:	7823      	ldrb	r3, [r4, #0]
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	2b03      	cmp	r3, #3
 8007014:	d05e      	beq.n	80070d4 <printCSVheader+0x11c>
	if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("PRESS_DPS368;");
 8007016:	783b      	ldrb	r3, [r7, #0]
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	2b03      	cmp	r3, #3
 800701e:	d064      	beq.n	80070ea <printCSVheader+0x132>
	if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("HUM_BME280;");
 8007020:	782b      	ldrb	r3, [r5, #0]
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	2b03      	cmp	r3, #3
 8007028:	d06a      	beq.n	8007100 <printCSVheader+0x148>
	if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("HUM_SHTC3;");
 800702a:	7833      	ldrb	r3, [r6, #0]
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	2b03      	cmp	r3, #3
 8007032:	d070      	beq.n	8007116 <printCSVheader+0x15e>
	if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("HUM_MS8607;");
 8007034:	7823      	ldrb	r3, [r4, #0]
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	2b03      	cmp	r3, #3
 800703c:	d076      	beq.n	800712c <printCSVheader+0x174>
}
 800703e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 8007042:	4840      	ldr	r0, [pc, #256]	; (8007144 <printCSVheader+0x18c>)
 8007044:	f008 bfd4 	b.w	800fff0 <puts>
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 8007048:	7853      	ldrb	r3, [r2, #1]
 800704a:	07df      	lsls	r7, r3, #31
 800704c:	d5c1      	bpl.n	8006fd2 <printCSVheader+0x1a>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 800704e:	4d40      	ldr	r5, [pc, #256]	; (8007150 <printCSVheader+0x198>)
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 8007050:	4843      	ldr	r0, [pc, #268]	; (8007160 <printCSVheader+0x1a8>)
 8007052:	f008 ff67 	bl	800ff24 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 8007056:	782b      	ldrb	r3, [r5, #0]
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d1be      	bne.n	8006fde <printCSVheader+0x26>
 8007060:	786b      	ldrb	r3, [r5, #1]
 8007062:	07de      	lsls	r6, r3, #31
 8007064:	d5bb      	bpl.n	8006fde <printCSVheader+0x26>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8007066:	4e3b      	ldr	r6, [pc, #236]	; (8007154 <printCSVheader+0x19c>)
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 8007068:	483e      	ldr	r0, [pc, #248]	; (8007164 <printCSVheader+0x1ac>)
 800706a:	f008 ff5b 	bl	800ff24 <iprintf>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 800706e:	7833      	ldrb	r3, [r6, #0]
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	2b03      	cmp	r3, #3
 8007076:	d1b8      	bne.n	8006fea <printCSVheader+0x32>
 8007078:	7873      	ldrb	r3, [r6, #1]
 800707a:	07dc      	lsls	r4, r3, #31
 800707c:	d5b5      	bpl.n	8006fea <printCSVheader+0x32>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 800707e:	4c36      	ldr	r4, [pc, #216]	; (8007158 <printCSVheader+0x1a0>)
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8007080:	4839      	ldr	r0, [pc, #228]	; (8007168 <printCSVheader+0x1b0>)
 8007082:	f008 ff4f 	bl	800ff24 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 8007086:	7823      	ldrb	r3, [r4, #0]
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	2b03      	cmp	r3, #3
 800708e:	d1b2      	bne.n	8006ff6 <printCSVheader+0x3e>
 8007090:	7863      	ldrb	r3, [r4, #1]
 8007092:	07d8      	lsls	r0, r3, #31
 8007094:	d5af      	bpl.n	8006ff6 <printCSVheader+0x3e>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 8007096:	4f31      	ldr	r7, [pc, #196]	; (800715c <printCSVheader+0x1a4>)
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 8007098:	4834      	ldr	r0, [pc, #208]	; (800716c <printCSVheader+0x1b4>)
 800709a:	f008 ff43 	bl	800ff24 <iprintf>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 800709e:	783b      	ldrb	r3, [r7, #0]
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	2b03      	cmp	r3, #3
 80070a6:	d1ac      	bne.n	8007002 <printCSVheader+0x4a>
 80070a8:	787b      	ldrb	r3, [r7, #1]
 80070aa:	07d9      	lsls	r1, r3, #31
 80070ac:	d5a9      	bpl.n	8007002 <printCSVheader+0x4a>
 80070ae:	4830      	ldr	r0, [pc, #192]	; (8007170 <printCSVheader+0x1b8>)
 80070b0:	f008 ff38 	bl	800ff24 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("PRESS_BME280;");
 80070b4:	782b      	ldrb	r3, [r5, #0]
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d1a6      	bne.n	800700c <printCSVheader+0x54>
 80070be:	7ceb      	ldrb	r3, [r5, #19]
 80070c0:	07da      	lsls	r2, r3, #31
 80070c2:	d5a3      	bpl.n	800700c <printCSVheader+0x54>
 80070c4:	482b      	ldr	r0, [pc, #172]	; (8007174 <printCSVheader+0x1bc>)
 80070c6:	f008 ff2d 	bl	800ff24 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("PRESS_MS8607;");
 80070ca:	7823      	ldrb	r3, [r4, #0]
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d1a0      	bne.n	8007016 <printCSVheader+0x5e>
 80070d4:	7ce3      	ldrb	r3, [r4, #19]
 80070d6:	07db      	lsls	r3, r3, #31
 80070d8:	d59d      	bpl.n	8007016 <printCSVheader+0x5e>
 80070da:	4827      	ldr	r0, [pc, #156]	; (8007178 <printCSVheader+0x1c0>)
 80070dc:	f008 ff22 	bl	800ff24 <iprintf>
	if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("PRESS_DPS368;");
 80070e0:	783b      	ldrb	r3, [r7, #0]
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d19a      	bne.n	8007020 <printCSVheader+0x68>
 80070ea:	7abb      	ldrb	r3, [r7, #10]
 80070ec:	07d8      	lsls	r0, r3, #31
 80070ee:	d597      	bpl.n	8007020 <printCSVheader+0x68>
 80070f0:	4822      	ldr	r0, [pc, #136]	; (800717c <printCSVheader+0x1c4>)
 80070f2:	f008 ff17 	bl	800ff24 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("HUM_BME280;");
 80070f6:	782b      	ldrb	r3, [r5, #0]
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d194      	bne.n	800702a <printCSVheader+0x72>
 8007100:	7aab      	ldrb	r3, [r5, #10]
 8007102:	07d9      	lsls	r1, r3, #31
 8007104:	d591      	bpl.n	800702a <printCSVheader+0x72>
 8007106:	481e      	ldr	r0, [pc, #120]	; (8007180 <printCSVheader+0x1c8>)
 8007108:	f008 ff0c 	bl	800ff24 <iprintf>
	if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("HUM_SHTC3;");
 800710c:	7833      	ldrb	r3, [r6, #0]
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	2b03      	cmp	r3, #3
 8007114:	d18e      	bne.n	8007034 <printCSVheader+0x7c>
 8007116:	7ab3      	ldrb	r3, [r6, #10]
 8007118:	07da      	lsls	r2, r3, #31
 800711a:	d58b      	bpl.n	8007034 <printCSVheader+0x7c>
 800711c:	4819      	ldr	r0, [pc, #100]	; (8007184 <printCSVheader+0x1cc>)
 800711e:	f008 ff01 	bl	800ff24 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("HUM_MS8607;");
 8007122:	7823      	ldrb	r3, [r4, #0]
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	2b03      	cmp	r3, #3
 800712a:	d188      	bne.n	800703e <printCSVheader+0x86>
 800712c:	7aa3      	ldrb	r3, [r4, #10]
 800712e:	07db      	lsls	r3, r3, #31
 8007130:	d585      	bpl.n	800703e <printCSVheader+0x86>
 8007132:	4815      	ldr	r0, [pc, #84]	; (8007188 <printCSVheader+0x1d0>)
 8007134:	f008 fef6 	bl	800ff24 <iprintf>
}
 8007138:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 800713c:	4801      	ldr	r0, [pc, #4]	; (8007144 <printCSVheader+0x18c>)
 800713e:	f008 bf57 	b.w	800fff0 <puts>
 8007142:	bf00      	nop
 8007144:	08014f34 	.word	0x08014f34
 8007148:	08014fd0 	.word	0x08014fd0
 800714c:	20001334 	.word	0x20001334
 8007150:	200012b8 	.word	0x200012b8
 8007154:	2000131c 	.word	0x2000131c
 8007158:	200012f8 	.word	0x200012f8
 800715c:	200012dc 	.word	0x200012dc
 8007160:	08014fd8 	.word	0x08014fd8
 8007164:	08014fe8 	.word	0x08014fe8
 8007168:	08014ff8 	.word	0x08014ff8
 800716c:	08015004 	.word	0x08015004
 8007170:	08015014 	.word	0x08015014
 8007174:	08015024 	.word	0x08015024
 8007178:	08015034 	.word	0x08015034
 800717c:	08015044 	.word	0x08015044
 8007180:	08015054 	.word	0x08015054
 8007184:	08015060 	.word	0x08015060
 8007188:	0801506c 	.word	0x0801506c

0800718c <display_values>:
	switch (format)
 800718c:	2801      	cmp	r0, #1
{
 800718e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (format)
 8007190:	d002      	beq.n	8007198 <display_values+0xc>
 8007192:	2802      	cmp	r0, #2
 8007194:	d05e      	beq.n	8007254 <display_values+0xc8>
}
 8007196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("-----------------------\r\n");
 8007198:	48bc      	ldr	r0, [pc, #752]	; (800748c <display_values+0x300>)
 800719a:	f008 ff29 	bl	800fff0 <puts>
		printf("Temperature:\r\n");
 800719e:	48bc      	ldr	r0, [pc, #752]	; (8007490 <display_values+0x304>)
 80071a0:	f008 ff26 	bl	800fff0 <puts>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TMP117: %.2f   ", TMP117.temp.value+TMP117.temp.offset);
 80071a4:	4abb      	ldr	r2, [pc, #748]	; (8007494 <display_values+0x308>)
 80071a6:	7813      	ldrb	r3, [r2, #0]
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	f000 80a1 	beq.w	80072f4 <display_values+0x168>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("BME280: %.2f   ", BME280.temp.value+BME280.temp.offset);
 80071b2:	4db9      	ldr	r5, [pc, #740]	; (8007498 <display_values+0x30c>)
 80071b4:	782b      	ldrb	r3, [r5, #0]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	f000 829c 	beq.w	80076f8 <display_values+0x56c>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("SHTC3: %.2f   ", SHT3.temp.value+SHT3.temp.offset);
 80071c0:	4eb6      	ldr	r6, [pc, #728]	; (800749c <display_values+0x310>)
 80071c2:	7833      	ldrb	r3, [r6, #0]
 80071c4:	f003 0303 	and.w	r3, r3, #3
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	f000 827d 	beq.w	80076c8 <display_values+0x53c>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("MS8607: %.2f   ", MS8607.temp.value+MS8607.temp.offset);
 80071ce:	4cb4      	ldr	r4, [pc, #720]	; (80074a0 <display_values+0x314>)
 80071d0:	7823      	ldrb	r3, [r4, #0]
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	f000 825e 	beq.w	8007698 <display_values+0x50c>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("DPS368: %.2f   ", DPS368.temp.value+DPS368.temp.offset);
 80071dc:	4fb1      	ldr	r7, [pc, #708]	; (80074a4 <display_values+0x318>)
 80071de:	783b      	ldrb	r3, [r7, #0]
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	f000 823f 	beq.w	8007668 <display_values+0x4dc>
		printf("\r\n-----------------------\r\n");
 80071ea:	48af      	ldr	r0, [pc, #700]	; (80074a8 <display_values+0x31c>)
 80071ec:	f008 ff00 	bl	800fff0 <puts>
		printf("Press:\r\n");
 80071f0:	48ae      	ldr	r0, [pc, #696]	; (80074ac <display_values+0x320>)
 80071f2:	f008 fefd 	bl	800fff0 <puts>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("BME280: %.2f   ", BME280.press.value+BME280.press.offset);
 80071f6:	782b      	ldrb	r3, [r5, #0]
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	f000 821f 	beq.w	8007640 <display_values+0x4b4>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("MS8607: %.2f   ", MS8607.press.value+MS8607.press.offset);
 8007202:	7823      	ldrb	r3, [r4, #0]
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	2b03      	cmp	r3, #3
 800720a:	f000 8205 	beq.w	8007618 <display_values+0x48c>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("DPS368: %.2f   ", DPS368.press.value+DPS368.press.offset);
 800720e:	783b      	ldrb	r3, [r7, #0]
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	2b03      	cmp	r3, #3
 8007216:	f000 81e7 	beq.w	80075e8 <display_values+0x45c>
		printf("\r\n-----------------------\r\n");
 800721a:	48a3      	ldr	r0, [pc, #652]	; (80074a8 <display_values+0x31c>)
 800721c:	f008 fee8 	bl	800fff0 <puts>
		printf("Hum:\r\n");
 8007220:	48a3      	ldr	r0, [pc, #652]	; (80074b0 <display_values+0x324>)
 8007222:	f008 fee5 	bl	800fff0 <puts>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("BME280: %.2f   ", BME280.hum.value+BME280.hum.offset);
 8007226:	782b      	ldrb	r3, [r5, #0]
 8007228:	f003 0303 	and.w	r3, r3, #3
 800722c:	2b03      	cmp	r3, #3
 800722e:	f000 81c3 	beq.w	80075b8 <display_values+0x42c>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("SHTC3: %.2f   ", SHT3.hum.value+SHT3.hum.offset);
 8007232:	7833      	ldrb	r3, [r6, #0]
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	2b03      	cmp	r3, #3
 800723a:	f000 81a5 	beq.w	8007588 <display_values+0x3fc>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("MS8607: %.2f   ", MS8607.hum.value+MS8607.hum.offset);
 800723e:	7823      	ldrb	r3, [r4, #0]
 8007240:	f003 0303 	and.w	r3, r3, #3
 8007244:	2b03      	cmp	r3, #3
 8007246:	f000 8187 	beq.w	8007558 <display_values+0x3cc>
}
 800724a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("\r\n-----------------------\r\n");
 800724e:	4896      	ldr	r0, [pc, #600]	; (80074a8 <display_values+0x31c>)
 8007250:	f008 bece 	b.w	800fff0 <puts>
		printf("%u;",++csvcnt);
 8007254:	4b97      	ldr	r3, [pc, #604]	; (80074b4 <display_values+0x328>)
 8007256:	4898      	ldr	r0, [pc, #608]	; (80074b8 <display_values+0x32c>)
 8007258:	8819      	ldrh	r1, [r3, #0]
 800725a:	3101      	adds	r1, #1
 800725c:	b289      	uxth	r1, r1
 800725e:	8019      	strh	r1, [r3, #0]
 8007260:	f008 fe60 	bl	800ff24 <iprintf>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("%.2f;",TMP117.temp.value+TMP117.temp.offset);
 8007264:	4a8b      	ldr	r2, [pc, #556]	; (8007494 <display_values+0x308>)
 8007266:	7813      	ldrb	r3, [r2, #0]
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	2b03      	cmp	r3, #3
 800726e:	f000 815b 	beq.w	8007528 <display_values+0x39c>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("%.2f;",BME280.temp.value+BME280.temp.offset);
 8007272:	4d89      	ldr	r5, [pc, #548]	; (8007498 <display_values+0x30c>)
 8007274:	782b      	ldrb	r3, [r5, #0]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b03      	cmp	r3, #3
 800727c:	f000 813c 	beq.w	80074f8 <display_values+0x36c>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("%.2f;",SHT3.temp.value+SHT3.temp.offset);
 8007280:	4e86      	ldr	r6, [pc, #536]	; (800749c <display_values+0x310>)
 8007282:	7833      	ldrb	r3, [r6, #0]
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	2b03      	cmp	r3, #3
 800728a:	f000 811d 	beq.w	80074c8 <display_values+0x33c>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("%.2f;",MS8607.temp.value+MS8607.temp.offset);
 800728e:	4c84      	ldr	r4, [pc, #528]	; (80074a0 <display_values+0x314>)
 8007290:	7823      	ldrb	r3, [r4, #0]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	2b03      	cmp	r3, #3
 8007298:	f000 80e0 	beq.w	800745c <display_values+0x2d0>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("%.2f;",DPS368.temp.value+DPS368.temp.offset);
 800729c:	4f81      	ldr	r7, [pc, #516]	; (80074a4 <display_values+0x318>)
 800729e:	783b      	ldrb	r3, [r7, #0]
 80072a0:	f003 0303 	and.w	r3, r3, #3
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	f000 80c1 	beq.w	800742c <display_values+0x2a0>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("%.2f;",BME280.press.value+BME280.press.offset);
 80072aa:	782b      	ldrb	r3, [r5, #0]
 80072ac:	f003 0303 	and.w	r3, r3, #3
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	f000 80a7 	beq.w	8007404 <display_values+0x278>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("%.2f;",MS8607.press.value+MS8607.press.offset);
 80072b6:	7823      	ldrb	r3, [r4, #0]
 80072b8:	f003 0303 	and.w	r3, r3, #3
 80072bc:	2b03      	cmp	r3, #3
 80072be:	f000 808d 	beq.w	80073dc <display_values+0x250>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("%.2f;",DPS368.press.value+DPS368.press.offset);
 80072c2:	783b      	ldrb	r3, [r7, #0]
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d070      	beq.n	80073ae <display_values+0x222>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("%.2f;",BME280.hum.value+BME280.hum.offset);
 80072cc:	782b      	ldrb	r3, [r5, #0]
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d054      	beq.n	8007380 <display_values+0x1f4>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("%.2f;",SHT3.hum.value+SHT3.hum.offset);
 80072d6:	7833      	ldrb	r3, [r6, #0]
 80072d8:	f003 0303 	and.w	r3, r3, #3
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d038      	beq.n	8007352 <display_values+0x1c6>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("%.2f;",MS8607.hum.value+MS8607.hum.offset);
 80072e0:	7823      	ldrb	r3, [r4, #0]
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d01c      	beq.n	8007324 <display_values+0x198>
}
 80072ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("\r\n");
 80072ee:	4873      	ldr	r0, [pc, #460]	; (80074bc <display_values+0x330>)
 80072f0:	f008 be7e 	b.w	800fff0 <puts>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TMP117: %.2f   ", TMP117.temp.value+TMP117.temp.offset);
 80072f4:	7853      	ldrb	r3, [r2, #1]
 80072f6:	07df      	lsls	r7, r3, #31
 80072f8:	f57f af5b 	bpl.w	80071b2 <display_values+0x26>
 80072fc:	f8d2 0002 	ldr.w	r0, [r2, #2]
 8007300:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8007304:	ee07 0a90 	vmov	s15, r0
 8007308:	ee07 3a10 	vmov	s14, r3
 800730c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007310:	ee17 0a90 	vmov	r0, s15
 8007314:	f7f9 f928 	bl	8000568 <__aeabi_f2d>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4868      	ldr	r0, [pc, #416]	; (80074c0 <display_values+0x334>)
 800731e:	f008 fe01 	bl	800ff24 <iprintf>
 8007322:	e746      	b.n	80071b2 <display_values+0x26>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("%.2f;",MS8607.hum.value+MS8607.hum.offset);
 8007324:	7aa3      	ldrb	r3, [r4, #10]
 8007326:	07db      	lsls	r3, r3, #31
 8007328:	d5df      	bpl.n	80072ea <display_values+0x15e>
 800732a:	f8d4 300f 	ldr.w	r3, [r4, #15]
 800732e:	f8d4 000b 	ldr.w	r0, [r4, #11]
 8007332:	ee07 3a10 	vmov	s14, r3
 8007336:	ee07 0a90 	vmov	s15, r0
 800733a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800733e:	ee17 0a90 	vmov	r0, s15
 8007342:	f7f9 f911 	bl	8000568 <__aeabi_f2d>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	485e      	ldr	r0, [pc, #376]	; (80074c4 <display_values+0x338>)
 800734c:	f008 fdea 	bl	800ff24 <iprintf>
 8007350:	e7cb      	b.n	80072ea <display_values+0x15e>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("%.2f;",SHT3.hum.value+SHT3.hum.offset);
 8007352:	7ab3      	ldrb	r3, [r6, #10]
 8007354:	07da      	lsls	r2, r3, #31
 8007356:	d5c3      	bpl.n	80072e0 <display_values+0x154>
 8007358:	f8d6 300f 	ldr.w	r3, [r6, #15]
 800735c:	f8d6 000b 	ldr.w	r0, [r6, #11]
 8007360:	ee07 3a10 	vmov	s14, r3
 8007364:	ee07 0a90 	vmov	s15, r0
 8007368:	ee77 7a87 	vadd.f32	s15, s15, s14
 800736c:	ee17 0a90 	vmov	r0, s15
 8007370:	f7f9 f8fa 	bl	8000568 <__aeabi_f2d>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4852      	ldr	r0, [pc, #328]	; (80074c4 <display_values+0x338>)
 800737a:	f008 fdd3 	bl	800ff24 <iprintf>
 800737e:	e7af      	b.n	80072e0 <display_values+0x154>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("%.2f;",BME280.hum.value+BME280.hum.offset);
 8007380:	7aab      	ldrb	r3, [r5, #10]
 8007382:	07d9      	lsls	r1, r3, #31
 8007384:	d5a7      	bpl.n	80072d6 <display_values+0x14a>
 8007386:	f8d5 300f 	ldr.w	r3, [r5, #15]
 800738a:	f8d5 000b 	ldr.w	r0, [r5, #11]
 800738e:	ee07 3a10 	vmov	s14, r3
 8007392:	ee07 0a90 	vmov	s15, r0
 8007396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800739a:	ee17 0a90 	vmov	r0, s15
 800739e:	f7f9 f8e3 	bl	8000568 <__aeabi_f2d>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4847      	ldr	r0, [pc, #284]	; (80074c4 <display_values+0x338>)
 80073a8:	f008 fdbc 	bl	800ff24 <iprintf>
 80073ac:	e793      	b.n	80072d6 <display_values+0x14a>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("%.2f;",DPS368.press.value+DPS368.press.offset);
 80073ae:	7abb      	ldrb	r3, [r7, #10]
 80073b0:	07d8      	lsls	r0, r3, #31
 80073b2:	d58b      	bpl.n	80072cc <display_values+0x140>
 80073b4:	f8d7 300f 	ldr.w	r3, [r7, #15]
 80073b8:	f8d7 000b 	ldr.w	r0, [r7, #11]
 80073bc:	ee07 3a10 	vmov	s14, r3
 80073c0:	ee07 0a90 	vmov	s15, r0
 80073c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073c8:	ee17 0a90 	vmov	r0, s15
 80073cc:	f7f9 f8cc 	bl	8000568 <__aeabi_f2d>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	483b      	ldr	r0, [pc, #236]	; (80074c4 <display_values+0x338>)
 80073d6:	f008 fda5 	bl	800ff24 <iprintf>
 80073da:	e777      	b.n	80072cc <display_values+0x140>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("%.2f;",MS8607.press.value+MS8607.press.offset);
 80073dc:	7ce3      	ldrb	r3, [r4, #19]
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	f57f af6f 	bpl.w	80072c2 <display_values+0x136>
 80073e4:	ed94 7a05 	vldr	s14, [r4, #20]
 80073e8:	edd4 7a06 	vldr	s15, [r4, #24]
 80073ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073f0:	ee17 0a90 	vmov	r0, s15
 80073f4:	f7f9 f8b8 	bl	8000568 <__aeabi_f2d>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4831      	ldr	r0, [pc, #196]	; (80074c4 <display_values+0x338>)
 80073fe:	f008 fd91 	bl	800ff24 <iprintf>
 8007402:	e75e      	b.n	80072c2 <display_values+0x136>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("%.2f;",BME280.press.value+BME280.press.offset);
 8007404:	7ceb      	ldrb	r3, [r5, #19]
 8007406:	07da      	lsls	r2, r3, #31
 8007408:	f57f af55 	bpl.w	80072b6 <display_values+0x12a>
 800740c:	ed95 7a05 	vldr	s14, [r5, #20]
 8007410:	edd5 7a06 	vldr	s15, [r5, #24]
 8007414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007418:	ee17 0a90 	vmov	r0, s15
 800741c:	f7f9 f8a4 	bl	8000568 <__aeabi_f2d>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4827      	ldr	r0, [pc, #156]	; (80074c4 <display_values+0x338>)
 8007426:	f008 fd7d 	bl	800ff24 <iprintf>
 800742a:	e744      	b.n	80072b6 <display_values+0x12a>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("%.2f;",DPS368.temp.value+DPS368.temp.offset);
 800742c:	787b      	ldrb	r3, [r7, #1]
 800742e:	07d9      	lsls	r1, r3, #31
 8007430:	f57f af3b 	bpl.w	80072aa <display_values+0x11e>
 8007434:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8007438:	f8d7 0002 	ldr.w	r0, [r7, #2]
 800743c:	ee07 3a10 	vmov	s14, r3
 8007440:	ee07 0a90 	vmov	s15, r0
 8007444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007448:	ee17 0a90 	vmov	r0, s15
 800744c:	f7f9 f88c 	bl	8000568 <__aeabi_f2d>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	481b      	ldr	r0, [pc, #108]	; (80074c4 <display_values+0x338>)
 8007456:	f008 fd65 	bl	800ff24 <iprintf>
 800745a:	e726      	b.n	80072aa <display_values+0x11e>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("%.2f;",MS8607.temp.value+MS8607.temp.offset);
 800745c:	7863      	ldrb	r3, [r4, #1]
 800745e:	07d8      	lsls	r0, r3, #31
 8007460:	f57f af1c 	bpl.w	800729c <display_values+0x110>
 8007464:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8007468:	f8d4 0002 	ldr.w	r0, [r4, #2]
 800746c:	ee07 3a10 	vmov	s14, r3
 8007470:	ee07 0a90 	vmov	s15, r0
 8007474:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007478:	ee17 0a90 	vmov	r0, s15
 800747c:	f7f9 f874 	bl	8000568 <__aeabi_f2d>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	480f      	ldr	r0, [pc, #60]	; (80074c4 <display_values+0x338>)
 8007486:	f008 fd4d 	bl	800ff24 <iprintf>
 800748a:	e707      	b.n	800729c <display_values+0x110>
 800748c:	08015078 	.word	0x08015078
 8007490:	08015094 	.word	0x08015094
 8007494:	20001334 	.word	0x20001334
 8007498:	200012b8 	.word	0x200012b8
 800749c:	2000131c 	.word	0x2000131c
 80074a0:	200012f8 	.word	0x200012f8
 80074a4:	200012dc 	.word	0x200012dc
 80074a8:	080150f4 	.word	0x080150f4
 80074ac:	08015110 	.word	0x08015110
 80074b0:	08015118 	.word	0x08015118
 80074b4:	20000270 	.word	0x20000270
 80074b8:	08015120 	.word	0x08015120
 80074bc:	08014f34 	.word	0x08014f34
 80074c0:	080150a4 	.word	0x080150a4
 80074c4:	08015124 	.word	0x08015124
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("%.2f;",SHT3.temp.value+SHT3.temp.offset);
 80074c8:	7873      	ldrb	r3, [r6, #1]
 80074ca:	07dc      	lsls	r4, r3, #31
 80074cc:	f57f aedf 	bpl.w	800728e <display_values+0x102>
 80074d0:	f8d6 3006 	ldr.w	r3, [r6, #6]
 80074d4:	f8d6 0002 	ldr.w	r0, [r6, #2]
 80074d8:	ee07 3a10 	vmov	s14, r3
 80074dc:	ee07 0a90 	vmov	s15, r0
 80074e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074e4:	ee17 0a90 	vmov	r0, s15
 80074e8:	f7f9 f83e 	bl	8000568 <__aeabi_f2d>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	488d      	ldr	r0, [pc, #564]	; (8007728 <display_values+0x59c>)
 80074f2:	f008 fd17 	bl	800ff24 <iprintf>
 80074f6:	e6ca      	b.n	800728e <display_values+0x102>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("%.2f;",BME280.temp.value+BME280.temp.offset);
 80074f8:	786b      	ldrb	r3, [r5, #1]
 80074fa:	07de      	lsls	r6, r3, #31
 80074fc:	f57f aec0 	bpl.w	8007280 <display_values+0xf4>
 8007500:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8007504:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8007508:	ee07 3a10 	vmov	s14, r3
 800750c:	ee07 0a90 	vmov	s15, r0
 8007510:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007514:	ee17 0a90 	vmov	r0, s15
 8007518:	f7f9 f826 	bl	8000568 <__aeabi_f2d>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4881      	ldr	r0, [pc, #516]	; (8007728 <display_values+0x59c>)
 8007522:	f008 fcff 	bl	800ff24 <iprintf>
 8007526:	e6ab      	b.n	8007280 <display_values+0xf4>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("%.2f;",TMP117.temp.value+TMP117.temp.offset);
 8007528:	7853      	ldrb	r3, [r2, #1]
 800752a:	07df      	lsls	r7, r3, #31
 800752c:	f57f aea1 	bpl.w	8007272 <display_values+0xe6>
 8007530:	f8d2 0002 	ldr.w	r0, [r2, #2]
 8007534:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8007538:	ee07 0a90 	vmov	s15, r0
 800753c:	ee07 3a10 	vmov	s14, r3
 8007540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007544:	ee17 0a90 	vmov	r0, s15
 8007548:	f7f9 f80e 	bl	8000568 <__aeabi_f2d>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4875      	ldr	r0, [pc, #468]	; (8007728 <display_values+0x59c>)
 8007552:	f008 fce7 	bl	800ff24 <iprintf>
 8007556:	e68c      	b.n	8007272 <display_values+0xe6>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("MS8607: %.2f   ", MS8607.hum.value+MS8607.hum.offset);
 8007558:	7aa3      	ldrb	r3, [r4, #10]
 800755a:	07db      	lsls	r3, r3, #31
 800755c:	f57f ae75 	bpl.w	800724a <display_values+0xbe>
 8007560:	f8d4 300f 	ldr.w	r3, [r4, #15]
 8007564:	f8d4 000b 	ldr.w	r0, [r4, #11]
 8007568:	ee07 3a10 	vmov	s14, r3
 800756c:	ee07 0a90 	vmov	s15, r0
 8007570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007574:	ee17 0a90 	vmov	r0, s15
 8007578:	f7f8 fff6 	bl	8000568 <__aeabi_f2d>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	486a      	ldr	r0, [pc, #424]	; (800772c <display_values+0x5a0>)
 8007582:	f008 fccf 	bl	800ff24 <iprintf>
 8007586:	e660      	b.n	800724a <display_values+0xbe>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("SHTC3: %.2f   ", SHT3.hum.value+SHT3.hum.offset);
 8007588:	7ab3      	ldrb	r3, [r6, #10]
 800758a:	07da      	lsls	r2, r3, #31
 800758c:	f57f ae57 	bpl.w	800723e <display_values+0xb2>
 8007590:	f8d6 300f 	ldr.w	r3, [r6, #15]
 8007594:	f8d6 000b 	ldr.w	r0, [r6, #11]
 8007598:	ee07 3a10 	vmov	s14, r3
 800759c:	ee07 0a90 	vmov	s15, r0
 80075a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075a4:	ee17 0a90 	vmov	r0, s15
 80075a8:	f7f8 ffde 	bl	8000568 <__aeabi_f2d>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	485f      	ldr	r0, [pc, #380]	; (8007730 <display_values+0x5a4>)
 80075b2:	f008 fcb7 	bl	800ff24 <iprintf>
 80075b6:	e642      	b.n	800723e <display_values+0xb2>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("BME280: %.2f   ", BME280.hum.value+BME280.hum.offset);
 80075b8:	7aab      	ldrb	r3, [r5, #10]
 80075ba:	07d9      	lsls	r1, r3, #31
 80075bc:	f57f ae39 	bpl.w	8007232 <display_values+0xa6>
 80075c0:	f8d5 300f 	ldr.w	r3, [r5, #15]
 80075c4:	f8d5 000b 	ldr.w	r0, [r5, #11]
 80075c8:	ee07 3a10 	vmov	s14, r3
 80075cc:	ee07 0a90 	vmov	s15, r0
 80075d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075d4:	ee17 0a90 	vmov	r0, s15
 80075d8:	f7f8 ffc6 	bl	8000568 <__aeabi_f2d>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4854      	ldr	r0, [pc, #336]	; (8007734 <display_values+0x5a8>)
 80075e2:	f008 fc9f 	bl	800ff24 <iprintf>
 80075e6:	e624      	b.n	8007232 <display_values+0xa6>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("DPS368: %.2f   ", DPS368.press.value+DPS368.press.offset);
 80075e8:	7abb      	ldrb	r3, [r7, #10]
 80075ea:	07d8      	lsls	r0, r3, #31
 80075ec:	f57f ae15 	bpl.w	800721a <display_values+0x8e>
 80075f0:	f8d7 300f 	ldr.w	r3, [r7, #15]
 80075f4:	f8d7 000b 	ldr.w	r0, [r7, #11]
 80075f8:	ee07 3a10 	vmov	s14, r3
 80075fc:	ee07 0a90 	vmov	s15, r0
 8007600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007604:	ee17 0a90 	vmov	r0, s15
 8007608:	f7f8 ffae 	bl	8000568 <__aeabi_f2d>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4849      	ldr	r0, [pc, #292]	; (8007738 <display_values+0x5ac>)
 8007612:	f008 fc87 	bl	800ff24 <iprintf>
 8007616:	e600      	b.n	800721a <display_values+0x8e>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("MS8607: %.2f   ", MS8607.press.value+MS8607.press.offset);
 8007618:	7ce3      	ldrb	r3, [r4, #19]
 800761a:	07db      	lsls	r3, r3, #31
 800761c:	f57f adf7 	bpl.w	800720e <display_values+0x82>
 8007620:	ed94 7a05 	vldr	s14, [r4, #20]
 8007624:	edd4 7a06 	vldr	s15, [r4, #24]
 8007628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800762c:	ee17 0a90 	vmov	r0, s15
 8007630:	f7f8 ff9a 	bl	8000568 <__aeabi_f2d>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	483c      	ldr	r0, [pc, #240]	; (800772c <display_values+0x5a0>)
 800763a:	f008 fc73 	bl	800ff24 <iprintf>
 800763e:	e5e6      	b.n	800720e <display_values+0x82>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("BME280: %.2f   ", BME280.press.value+BME280.press.offset);
 8007640:	7ceb      	ldrb	r3, [r5, #19]
 8007642:	07da      	lsls	r2, r3, #31
 8007644:	f57f addd 	bpl.w	8007202 <display_values+0x76>
 8007648:	ed95 7a05 	vldr	s14, [r5, #20]
 800764c:	edd5 7a06 	vldr	s15, [r5, #24]
 8007650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007654:	ee17 0a90 	vmov	r0, s15
 8007658:	f7f8 ff86 	bl	8000568 <__aeabi_f2d>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4834      	ldr	r0, [pc, #208]	; (8007734 <display_values+0x5a8>)
 8007662:	f008 fc5f 	bl	800ff24 <iprintf>
 8007666:	e5cc      	b.n	8007202 <display_values+0x76>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("DPS368: %.2f   ", DPS368.temp.value+DPS368.temp.offset);
 8007668:	787b      	ldrb	r3, [r7, #1]
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	f57f adbd 	bpl.w	80071ea <display_values+0x5e>
 8007670:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8007674:	f8d7 0002 	ldr.w	r0, [r7, #2]
 8007678:	ee07 3a10 	vmov	s14, r3
 800767c:	ee07 0a90 	vmov	s15, r0
 8007680:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007684:	ee17 0a90 	vmov	r0, s15
 8007688:	f7f8 ff6e 	bl	8000568 <__aeabi_f2d>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4829      	ldr	r0, [pc, #164]	; (8007738 <display_values+0x5ac>)
 8007692:	f008 fc47 	bl	800ff24 <iprintf>
 8007696:	e5a8      	b.n	80071ea <display_values+0x5e>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("MS8607: %.2f   ", MS8607.temp.value+MS8607.temp.offset);
 8007698:	7863      	ldrb	r3, [r4, #1]
 800769a:	07d8      	lsls	r0, r3, #31
 800769c:	f57f ad9e 	bpl.w	80071dc <display_values+0x50>
 80076a0:	f8d4 3006 	ldr.w	r3, [r4, #6]
 80076a4:	f8d4 0002 	ldr.w	r0, [r4, #2]
 80076a8:	ee07 3a10 	vmov	s14, r3
 80076ac:	ee07 0a90 	vmov	s15, r0
 80076b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076b4:	ee17 0a90 	vmov	r0, s15
 80076b8:	f7f8 ff56 	bl	8000568 <__aeabi_f2d>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	481a      	ldr	r0, [pc, #104]	; (800772c <display_values+0x5a0>)
 80076c2:	f008 fc2f 	bl	800ff24 <iprintf>
 80076c6:	e589      	b.n	80071dc <display_values+0x50>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("SHTC3: %.2f   ", SHT3.temp.value+SHT3.temp.offset);
 80076c8:	7873      	ldrb	r3, [r6, #1]
 80076ca:	07dc      	lsls	r4, r3, #31
 80076cc:	f57f ad7f 	bpl.w	80071ce <display_values+0x42>
 80076d0:	f8d6 3006 	ldr.w	r3, [r6, #6]
 80076d4:	f8d6 0002 	ldr.w	r0, [r6, #2]
 80076d8:	ee07 3a10 	vmov	s14, r3
 80076dc:	ee07 0a90 	vmov	s15, r0
 80076e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076e4:	ee17 0a90 	vmov	r0, s15
 80076e8:	f7f8 ff3e 	bl	8000568 <__aeabi_f2d>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	480f      	ldr	r0, [pc, #60]	; (8007730 <display_values+0x5a4>)
 80076f2:	f008 fc17 	bl	800ff24 <iprintf>
 80076f6:	e56a      	b.n	80071ce <display_values+0x42>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("BME280: %.2f   ", BME280.temp.value+BME280.temp.offset);
 80076f8:	786b      	ldrb	r3, [r5, #1]
 80076fa:	07de      	lsls	r6, r3, #31
 80076fc:	f57f ad60 	bpl.w	80071c0 <display_values+0x34>
 8007700:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8007704:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8007708:	ee07 3a10 	vmov	s14, r3
 800770c:	ee07 0a90 	vmov	s15, r0
 8007710:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007714:	ee17 0a90 	vmov	r0, s15
 8007718:	f7f8 ff26 	bl	8000568 <__aeabi_f2d>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4804      	ldr	r0, [pc, #16]	; (8007734 <display_values+0x5a8>)
 8007722:	f008 fbff 	bl	800ff24 <iprintf>
 8007726:	e54b      	b.n	80071c0 <display_values+0x34>
 8007728:	08015124 	.word	0x08015124
 800772c:	080150d4 	.word	0x080150d4
 8007730:	080150c4 	.word	0x080150c4
 8007734:	080150b4 	.word	0x080150b4
 8007738:	080150e4 	.word	0x080150e4

0800773c <getConfVars>:
{
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  BME280.sensor_use = config.BME280_use;
 8007740:	495f      	ldr	r1, [pc, #380]	; (80078c0 <getConfVars+0x184>)
	  SHT3.sensor_use = config.SHT3_use;
 8007742:	4b60      	ldr	r3, [pc, #384]	; (80078c4 <getConfVars+0x188>)
	  BME280.sensor_use = config.BME280_use;
 8007744:	8808      	ldrh	r0, [r1, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8007746:	4e60      	ldr	r6, [pc, #384]	; (80078c8 <getConfVars+0x18c>)
 8007748:	7bda      	ldrb	r2, [r3, #15]
	  MS8607.sensor_use = config.MS8607_use;
 800774a:	7e1d      	ldrb	r5, [r3, #24]
	  DPS368.sensor_use = config.DPS368_use;
 800774c:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80078d0 <getConfVars+0x194>
	  TMP117.sensor_use = config.TMP117_use;
 8007750:	f8df c180 	ldr.w	ip, [pc, #384]	; 80078d4 <getConfVars+0x198>
	  TMP117.sensor_conf = config.TMP117_conf;
 8007754:	7a9c      	ldrb	r4, [r3, #10]
	  TMP117.sensor_use = config.TMP117_use;
 8007756:	f8bc e000 	ldrh.w	lr, [ip]
	  BME280.sensor_use = config.BME280_use;
 800775a:	f893 7025 	ldrb.w	r7, [r3, #37]	; 0x25
	  DPS368.sensor_use = config.DPS368_use;
 800775e:	f893 b032 	ldrb.w	fp, [r3, #50]	; 0x32
	  BME280.press.use_meas = config.BME280_p_use;
 8007762:	f891 a013 	ldrb.w	sl, [r1, #19]
{
 8007766:	b087      	sub	sp, #28
	  BME280.sensor_use = config.BME280_use;
 8007768:	f420 709f 	bic.w	r0, r0, #318	; 0x13e
	  SHT3.sensor_use = config.SHT3_use;
 800776c:	9200      	str	r2, [sp, #0]
	  BME280.sensor_use = config.BME280_use;
 800776e:	9002      	str	r0, [sp, #8]
	  MS8607.sensor_use = config.MS8607_use;
 8007770:	4a56      	ldr	r2, [pc, #344]	; (80078cc <getConfVars+0x190>)
	  SHT3.sensor_use = config.SHT3_use;
 8007772:	8830      	ldrh	r0, [r6, #0]
	  MS8607.sensor_use = config.MS8607_use;
 8007774:	9501      	str	r5, [sp, #4]
	  SHT3.sensor_use = config.SHT3_use;
 8007776:	f420 759f 	bic.w	r5, r0, #318	; 0x13e
	  MS8607.sensor_use = config.MS8607_use;
 800777a:	8810      	ldrh	r0, [r2, #0]
	  SHT3.sensor_use = config.SHT3_use;
 800777c:	9503      	str	r5, [sp, #12]
	  MS8607.sensor_use = config.MS8607_use;
 800777e:	f420 799f 	bic.w	r9, r0, #318	; 0x13e
	  DPS368.sensor_use = config.DPS368_use;
 8007782:	f8b8 0000 	ldrh.w	r0, [r8]
	  MS8607.sensor_use = config.MS8607_use;
 8007786:	f8cd 9010 	str.w	r9, [sp, #16]
	  DPS368.sensor_use = config.DPS368_use;
 800778a:	f420 799f 	bic.w	r9, r0, #318	; 0x13e
 800778e:	f8cd 9014 	str.w	r9, [sp, #20]
	  TMP117.temp.offset = config.TMP117_t_offset;
 8007792:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8007796:	f8cc 0006 	str.w	r0, [ip, #6]
	  BME280.temp.offset = config.BME280_t_offset;
 800779a:	f8d3 0026 	ldr.w	r0, [r3, #38]	; 0x26
 800779e:	f8c1 0006 	str.w	r0, [r1, #6]
	  MS8607.temp.offset = config.MS8607_t_offset;
 80077a2:	f8d3 0019 	ldr.w	r0, [r3, #25]
 80077a6:	f8c2 0006 	str.w	r0, [r2, #6]
	  DPS368.temp.offset = config.DPS368_t_offset;
 80077aa:	f8d3 0033 	ldr.w	r0, [r3, #51]	; 0x33
 80077ae:	f8c8 0006 	str.w	r0, [r8, #6]
	  TMP117.sensor_use = config.TMP117_use;
 80077b2:	0060      	lsls	r0, r4, #1
 80077b4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80077b8:	f3c4 1440 	ubfx	r4, r4, #5, #1
	  MS8607.sensor_use = config.MS8607_use;
 80077bc:	9d01      	ldr	r5, [sp, #4]
	  MS8607.press.use_meas = config.MS8607_p_use;
 80077be:	f892 9013 	ldrb.w	r9, [r2, #19]
	  TMP117.sensor_use = config.TMP117_use;
 80077c2:	f42e 7e9f 	bic.w	lr, lr, #318	; 0x13e
 80077c6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80077ca:	ea40 000e 	orr.w	r0, r0, lr
	  BME280.sensor_use = config.BME280_use;
 80077ce:	007c      	lsls	r4, r7, #1
	  TMP117.sensor_use = config.TMP117_use;
 80077d0:	f8ac 0000 	strh.w	r0, [ip]
	  BME280.sensor_use = config.BME280_use;
 80077d4:	f004 043e 	and.w	r4, r4, #62	; 0x3e
	  MS8607.sensor_use = config.MS8607_use;
 80077d8:	ea4f 0c45 	mov.w	ip, r5, lsl #1
	  BME280.sensor_use = config.BME280_use;
 80077dc:	f3c7 1540 	ubfx	r5, r7, #5, #1
 80077e0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80077e4:	9d02      	ldr	r5, [sp, #8]
	  SHT3.sensor_use = config.SHT3_use;
 80077e6:	9800      	ldr	r0, [sp, #0]
	  BME280.sensor_use = config.BME280_use;
 80077e8:	432c      	orrs	r4, r5
 80077ea:	800c      	strh	r4, [r1, #0]
	  SHT3.sensor_use = config.SHT3_use;
 80077ec:	9c00      	ldr	r4, [sp, #0]
 80077ee:	9d03      	ldr	r5, [sp, #12]
 80077f0:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 80077f4:	f3c4 1440 	ubfx	r4, r4, #5, #1
 80077f8:	f00e 0e3e 	and.w	lr, lr, #62	; 0x3e
 80077fc:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
 8007800:	ea4e 0e05 	orr.w	lr, lr, r5
	  MS8607.sensor_use = config.MS8607_use;
 8007804:	9d01      	ldr	r5, [sp, #4]
	  SHT3.sensor_use = config.SHT3_use;
 8007806:	f8a6 e000 	strh.w	lr, [r6]
	  MS8607.sensor_use = config.MS8607_use;
 800780a:	f00c 0c3e 	and.w	ip, ip, #62	; 0x3e
 800780e:	f3c5 1e40 	ubfx	lr, r5, #5, #1
 8007812:	9d04      	ldr	r5, [sp, #16]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8007814:	9c00      	ldr	r4, [sp, #0]
	  MS8607.sensor_use = config.MS8607_use;
 8007816:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 800781a:	ea4c 0c05 	orr.w	ip, ip, r5
	  DPS368.sensor_use = config.DPS368_use;
 800781e:	ea4f 004b 	mov.w	r0, fp, lsl #1
	  MS8607.sensor_use = config.MS8607_use;
 8007822:	f8a2 c000 	strh.w	ip, [r2]
	  DPS368.sensor_use = config.DPS368_use;
 8007826:	9d05      	ldr	r5, [sp, #20]
 8007828:	f3cb 1c40 	ubfx	ip, fp, #5, #1
 800782c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007830:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8007834:	4328      	orrs	r0, r5
 8007836:	f8a8 0000 	strh.w	r0, [r8]
	  SHT3.temp.offset = config.SHT3_t_offset;
 800783a:	6918      	ldr	r0, [r3, #16]
 800783c:	f8c6 0006 	str.w	r0, [r6, #6]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007840:	9d01      	ldr	r5, [sp, #4]
	  BME280.press.offset = config.BME280_p_offset;
 8007842:	f8d3 002e 	ldr.w	r0, [r3, #46]	; 0x2e
 8007846:	6188      	str	r0, [r1, #24]
	  BME280.press.use_meas = config.BME280_p_use;
 8007848:	ea4f 1ed7 	mov.w	lr, r7, lsr #7
 800784c:	f36e 0a00 	bfi	sl, lr, #0, #1
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007850:	ea4f 1ed5 	mov.w	lr, r5, lsr #7
	  MS8607.press.offset = config.MS8607_p_offset;
 8007854:	f8d3 0021 	ldr.w	r0, [r3, #33]	; 0x21
 8007858:	6190      	str	r0, [r2, #24]
	  MS8607.press.use_meas = config.MS8607_p_use;
 800785a:	f36e 0900 	bfi	r9, lr, #0, #1
	  BME280.press.use_meas = config.BME280_p_use;
 800785e:	f881 a013 	strb.w	sl, [r1, #19]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8007862:	f882 9013 	strb.w	r9, [r2, #19]
	  DPS368.press.offset = config.DPS368_p_offset;
 8007866:	f8d3 0037 	ldr.w	r0, [r3, #55]	; 0x37
 800786a:	f8c8 000f 	str.w	r0, [r8, #15]
	  BME280.hum.offset = config.BME280_h_offset;
 800786e:	f8d3 002a 	ldr.w	r0, [r3, #42]	; 0x2a
 8007872:	f8c1 000f 	str.w	r0, [r1, #15]
	  MS8607.hum.offset = config.MS8607_h_offset;
 8007876:	f8d3 001d 	ldr.w	r0, [r3, #29]
	  SHT3.hum.offset = config.SHT3_h_offset;
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f8c6 300f 	str.w	r3, [r6, #15]
	  DPS368.press.use_meas = config.DPS368_p_use;
 8007880:	f898 300a 	ldrb.w	r3, [r8, #10]
	  MS8607.hum.offset = config.MS8607_h_offset;
 8007884:	f8c2 000f 	str.w	r0, [r2, #15]
	  DPS368.press.use_meas = config.DPS368_p_use;
 8007888:	f3cb 1c80 	ubfx	ip, fp, #6, #1
 800788c:	f36c 0300 	bfi	r3, ip, #0, #1
 8007890:	f888 300a 	strb.w	r3, [r8, #10]
	  BME280.hum.use_meas = config.BME280_h_use;
 8007894:	7a8b      	ldrb	r3, [r1, #10]
 8007896:	f3c7 1780 	ubfx	r7, r7, #6, #1
 800789a:	f367 0300 	bfi	r3, r7, #0, #1
 800789e:	728b      	strb	r3, [r1, #10]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 80078a0:	7ab1      	ldrb	r1, [r6, #10]
	  MS8607.hum.use_meas = config.MS8607_h_use;
 80078a2:	7a93      	ldrb	r3, [r2, #10]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 80078a4:	f3c4 1480 	ubfx	r4, r4, #6, #1
	  MS8607.hum.use_meas = config.MS8607_h_use;
 80078a8:	f3c5 1580 	ubfx	r5, r5, #6, #1
	  SHT3.hum.use_meas = config.SHT3_h_use;
 80078ac:	f364 0100 	bfi	r1, r4, #0, #1
	  MS8607.hum.use_meas = config.MS8607_h_use;
 80078b0:	f365 0300 	bfi	r3, r5, #0, #1
	  SHT3.hum.use_meas = config.SHT3_h_use;
 80078b4:	72b1      	strb	r1, [r6, #10]
	  MS8607.hum.use_meas = config.MS8607_h_use;
 80078b6:	7293      	strb	r3, [r2, #10]
}
 80078b8:	b007      	add	sp, #28
 80078ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	200012b8 	.word	0x200012b8
 80078c4:	2000137c 	.word	0x2000137c
 80078c8:	2000131c 	.word	0x2000131c
 80078cc:	200012f8 	.word	0x200012f8
 80078d0:	200012dc 	.word	0x200012dc
 80078d4:	20001334 	.word	0x20001334

080078d8 <THP_MainTask>:

}


void THP_MainTask(void const *argument)
{
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  POWER_OFF();
 80078dc:	48b3      	ldr	r0, [pc, #716]	; (8007bac <THP_MainTask+0x2d4>)
{
 80078de:	b091      	sub	sp, #68	; 0x44
	  POWER_OFF();
 80078e0:	2200      	movs	r2, #0
 80078e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078e6:	f002 fa2b 	bl	8009d40 <HAL_GPIO_WritePin>
	  HAL_RTC_GetTime(&hrtc, &sTime, 0);
 80078ea:	49b1      	ldr	r1, [pc, #708]	; (8007bb0 <THP_MainTask+0x2d8>)
 80078ec:	48b1      	ldr	r0, [pc, #708]	; (8007bb4 <THP_MainTask+0x2dc>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	f003 ffda 	bl	800b8a8 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, 0);
 80078f4:	49b0      	ldr	r1, [pc, #704]	; (8007bb8 <THP_MainTask+0x2e0>)
 80078f6:	48af      	ldr	r0, [pc, #700]	; (8007bb4 <THP_MainTask+0x2dc>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	f004 f80d 	bl	800b918 <HAL_RTC_GetDate>
	  gsm_loop();
 80078fe:	f7fd faf1 	bl	8004ee4 <gsm_loop>

	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8007902:	48ae      	ldr	r0, [pc, #696]	; (8007bbc <THP_MainTask+0x2e4>)
 8007904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007908:	f002 fa14 	bl	8009d34 <HAL_GPIO_ReadPin>
 800790c:	2800      	cmp	r0, #0
 800790e:	f000 81ff 	beq.w	8007d10 <THP_MainTask+0x438>
	  HAL_UART_RxCpltCallback(&huart1); //CLI
 8007912:	48ab      	ldr	r0, [pc, #684]	; (8007bc0 <THP_MainTask+0x2e8>)
 8007914:	f7fa ff6e 	bl	80027f4 <HAL_UART_RxCpltCallback>
	  check_powerOn();
 8007918:	f7ff faba 	bl	8006e90 <check_powerOn>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 800791c:	48a7      	ldr	r0, [pc, #668]	; (8007bbc <THP_MainTask+0x2e4>)
 800791e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007922:	f002 fa07 	bl	8009d34 <HAL_GPIO_ReadPin>
 8007926:	2800      	cmp	r0, #0
 8007928:	f000 8225 	beq.w	8007d76 <THP_MainTask+0x49e>
	  SIM_HW_OFF();
 800792c:	f7f9 ffbc 	bl	80018a8 <SIM_HW_OFF>
	  printf("\r\n\r\n\r\nInitializing (RTOS version)...\r\n");
 8007930:	48a4      	ldr	r0, [pc, #656]	; (8007bc4 <THP_MainTask+0x2ec>)
 8007932:	f008 fb5d 	bl	800fff0 <puts>
	  if (Load_config()==0) {printf("Config loaded OK \r\n");};
 8007936:	f7f9 fd99 	bl	800146c <Load_config>
 800793a:	2800      	cmp	r0, #0
 800793c:	f000 8217 	beq.w	8007d6e <THP_MainTask+0x496>
	  charger_state = BQ25798_check();
 8007940:	f7fa fdd0 	bl	80024e4 <BQ25798_check>
 8007944:	4ba0      	ldr	r3, [pc, #640]	; (8007bc8 <THP_MainTask+0x2f0>)
 8007946:	7018      	strb	r0, [r3, #0]
	  if (charger_state) {
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 81e3 	bne.w	8007d16 <THP_MainTask+0x43e>
		  BQ25798_Chrg_NTC_CTRL1_write(1);
		  CE_EN();
		  BQ25798_MPPT_CTRL(1); //MPPT ON

	  }
	  LED1_ON();
 8007950:	4896      	ldr	r0, [pc, #600]	; (8007bac <THP_MainTask+0x2d4>)
	  LED2_OFF();
	  ADC_DMA_Start();

	  TMP117.present = TMP117_check();
 8007952:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007c24 <THP_MainTask+0x34c>
	  SHT3.present = SHTC3_check();
 8007956:	4f9d      	ldr	r7, [pc, #628]	; (8007bcc <THP_MainTask+0x2f4>)
	  MS8607.present = MS8607_check();
 8007958:	4c9d      	ldr	r4, [pc, #628]	; (8007bd0 <THP_MainTask+0x2f8>)
	  BME280.present = BME280_check();
 800795a:	4e9e      	ldr	r6, [pc, #632]	; (8007bd4 <THP_MainTask+0x2fc>)
	  DPS368.present = DPS368_check();
 800795c:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 8007c28 <THP_MainTask+0x350>

	  getConfVars();

	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
	//  printf("TMP117 conf var %x\r\n", tmp117_avr);
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8007960:	4d9d      	ldr	r5, [pc, #628]	; (8007bd8 <THP_MainTask+0x300>)

	  MS8607_osr(MS8607.sensor_conf);
	  printf("MS8607 OSR %d\r\n", 256<<MS8607.sensor_conf);

	  disp_type = config.disp_type;
	  new_tim_interval = config.tim_interval; //w sekundach
 8007962:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007c2c <THP_MainTask+0x354>
 8007966:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 8007c30 <THP_MainTask+0x358>
	  LED1_ON();
 800796a:	2200      	movs	r2, #0
 800796c:	2120      	movs	r1, #32
 800796e:	f002 f9e7 	bl	8009d40 <HAL_GPIO_WritePin>
	  LED2_OFF();
 8007972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007976:	2201      	movs	r2, #1
 8007978:	488c      	ldr	r0, [pc, #560]	; (8007bac <THP_MainTask+0x2d4>)
 800797a:	f002 f9e1 	bl	8009d40 <HAL_GPIO_WritePin>
	  ADC_DMA_Start();
 800797e:	f7f9 ff9f 	bl	80018c0 <ADC_DMA_Start>
	  TMP117.present = TMP117_check();
 8007982:	f000 fb7f 	bl	8008084 <TMP117_check>
 8007986:	f899 3000 	ldrb.w	r3, [r9]
 800798a:	f360 0300 	bfi	r3, r0, #0, #1
 800798e:	f889 3000 	strb.w	r3, [r9]
	  SHT3.present = SHTC3_check();
 8007992:	f000 fc69 	bl	8008268 <SHTC3_check>
 8007996:	783b      	ldrb	r3, [r7, #0]
 8007998:	f360 0300 	bfi	r3, r0, #0, #1
 800799c:	703b      	strb	r3, [r7, #0]
	  MS8607.present = MS8607_check();
 800799e:	f000 fc2f 	bl	8008200 <MS8607_check>
 80079a2:	7823      	ldrb	r3, [r4, #0]
 80079a4:	f360 0300 	bfi	r3, r0, #0, #1
 80079a8:	7023      	strb	r3, [r4, #0]
	  BME280.present = BME280_check();
 80079aa:	f000 fd65 	bl	8008478 <BME280_check>
 80079ae:	7833      	ldrb	r3, [r6, #0]
 80079b0:	f360 0300 	bfi	r3, r0, #0, #1
 80079b4:	7033      	strb	r3, [r6, #0]
	  DPS368.present = DPS368_check();
 80079b6:	f7fc fa4f 	bl	8003e58 <DPS368_check>
 80079ba:	f898 3000 	ldrb.w	r3, [r8]
 80079be:	f360 0300 	bfi	r3, r0, #0, #1
 80079c2:	f888 3000 	strb.w	r3, [r8]
	  getConfVars();
 80079c6:	f7ff feb9 	bl	800773c <getConfVars>
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 80079ca:	f899 0000 	ldrb.w	r0, [r9]
 80079ce:	f3c0 0083 	ubfx	r0, r0, #2, #4
 80079d2:	f000 fbf1 	bl	80081b8 <tmp117_avr_conf>
 80079d6:	4602      	mov	r2, r0
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 80079d8:	f898 0000 	ldrb.w	r0, [r8]
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 80079dc:	4b7f      	ldr	r3, [pc, #508]	; (8007bdc <THP_MainTask+0x304>)
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 80079de:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8007c34 <THP_MainTask+0x35c>
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 80079e2:	801a      	strh	r2, [r3, #0]
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 80079e4:	f3c0 0083 	ubfx	r0, r0, #2, #4
 80079e8:	f7fc fdde 	bl	80045a8 <dps368_ovr_config>
 80079ec:	8028      	strh	r0, [r5, #0]
	  printf("DPS368 conf var %x\r\n", dps368_ovr_conf);
 80079ee:	8829      	ldrh	r1, [r5, #0]
 80079f0:	487b      	ldr	r0, [pc, #492]	; (8007be0 <THP_MainTask+0x308>)
 80079f2:	b289      	uxth	r1, r1
 80079f4:	f008 fa96 	bl	800ff24 <iprintf>
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 80079f8:	882b      	ldrh	r3, [r5, #0]
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 80079fa:	4a7a      	ldr	r2, [pc, #488]	; (8007be4 <THP_MainTask+0x30c>)
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 80079fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8007a00:	f888 3000 	strb.w	r3, [r8]
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8007a04:	882b      	ldrh	r3, [r5, #0]
 8007a06:	4d78      	ldr	r5, [pc, #480]	; (8007be8 <THP_MainTask+0x310>)
	  DPS368_init(FIFO_DIS, INT_NONE);
 8007a08:	2100      	movs	r1, #0
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8007a0a:	b2db      	uxtb	r3, r3
	  DPS368_init(FIFO_DIS, INT_NONE);
 8007a0c:	4608      	mov	r0, r1
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8007a0e:	7013      	strb	r3, [r2, #0]
	  DPS368_init(FIFO_DIS, INT_NONE);
 8007a10:	f7fc fcb8 	bl	8004384 <DPS368_init>
	  DPS368_temp_correct(dps368_ovr_temp);
 8007a14:	f898 0000 	ldrb.w	r0, [r8]
 8007a18:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8007c38 <THP_MainTask+0x360>
 8007a1c:	f7fc fc44 	bl	80042a8 <DPS368_temp_correct>
	  sht3_mode=SHT3.sensor_conf;
 8007a20:	783b      	ldrb	r3, [r7, #0]
 8007a22:	4a72      	ldr	r2, [pc, #456]	; (8007bec <THP_MainTask+0x314>)
	  if(sht3_mode==normal) printf("SHTC3 normal mode\r\n");
 8007a24:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 8007a28:	bf0c      	ite	eq
 8007a2a:	4871      	ldreq	r0, [pc, #452]	; (8007bf0 <THP_MainTask+0x318>)
	  else printf("SHTC3 low power mode\r\n");
 8007a2c:	4871      	ldrne	r0, [pc, #452]	; (8007bf4 <THP_MainTask+0x31c>)
	  sht3_mode=SHT3.sensor_conf;
 8007a2e:	f3c3 0183 	ubfx	r1, r3, #2, #4
 8007a32:	7011      	strb	r1, [r2, #0]
	  else printf("SHTC3 low power mode\r\n");
 8007a34:	f008 fadc 	bl	800fff0 <puts>
	  bme280_conf_change(BME280.sensor_conf);
 8007a38:	7830      	ldrb	r0, [r6, #0]


	  //task dla GSM
	  	  osThreadDef(GSMTask, GSMTask, osPriorityNormal, 0, 512);
 8007a3a:	4e6f      	ldr	r6, [pc, #444]	; (8007bf8 <THP_MainTask+0x320>)
	  bme280_conf_change(BME280.sensor_conf);
 8007a3c:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8007a40:	f000 fe70 	bl	8008724 <bme280_conf_change>
	  MS8607_osr(MS8607.sensor_conf);
 8007a44:	7820      	ldrb	r0, [r4, #0]
 8007a46:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8007a4a:	f7fe f8f9 	bl	8005c40 <MS8607_osr>
	  printf("MS8607 OSR %d\r\n", 256<<MS8607.sensor_conf);
 8007a4e:	7823      	ldrb	r3, [r4, #0]
 8007a50:	486a      	ldr	r0, [pc, #424]	; (8007bfc <THP_MainTask+0x324>)
 8007a52:	4c6b      	ldr	r4, [pc, #428]	; (8007c00 <THP_MainTask+0x328>)
 8007a54:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8007a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a5c:	4099      	lsls	r1, r3
 8007a5e:	f008 fa61 	bl	800ff24 <iprintf>
	  disp_type = config.disp_type;
 8007a62:	4a68      	ldr	r2, [pc, #416]	; (8007c04 <THP_MainTask+0x32c>)
 8007a64:	4968      	ldr	r1, [pc, #416]	; (8007c08 <THP_MainTask+0x330>)
 8007a66:	79d3      	ldrb	r3, [r2, #7]
 8007a68:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007a6c:	700b      	strb	r3, [r1, #0]
	  new_tim_interval = config.tim_interval; //w sekundach
 8007a6e:	8913      	ldrh	r3, [r2, #8]
 8007a70:	f8aa 3000 	strh.w	r3, [sl]
	  	  osThreadDef(GSMTask, GSMTask, osPriorityNormal, 0, 512);
 8007a74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007a76:	af06      	add	r7, sp, #24
 8007a78:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8007a7a:	f856 3b04 	ldr.w	r3, [r6], #4
 8007a7e:	603b      	str	r3, [r7, #0]
	  	  GSMTaskHandle = osThreadCreate(osThread(GSMTask), NULL);
 8007a80:	2100      	movs	r1, #0
 8007a82:	a806      	add	r0, sp, #24
 8007a84:	f005 fac6 	bl	800d014 <osThreadCreate>
 8007a88:	4b60      	ldr	r3, [pc, #384]	; (8007c0c <THP_MainTask+0x334>)
 8007a8a:	6018      	str	r0, [r3, #0]

	  // uruchomienie taska sensorów
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 8007a8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007a8e:	af0b      	add	r7, sp, #44	; 0x2c
 8007a90:	c70f      	stmia	r7!, {r0, r1, r2, r3}
	  measTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8007a92:	2100      	movs	r1, #0
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 8007a94:	6833      	ldr	r3, [r6, #0]
 8007a96:	603b      	str	r3, [r7, #0]
	  measTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8007a98:	a80b      	add	r0, sp, #44	; 0x2c
 8007a9a:	f005 fabb 	bl	800d014 <osThreadCreate>
 8007a9e:	4b5c      	ldr	r3, [pc, #368]	; (8007c10 <THP_MainTask+0x338>)
 8007aa0:	6018      	str	r0, [r3, #0]





	  uint32_t ticks30ms = HAL_GetTick();
 8007aa2:	f000 ff5b 	bl	800895c <HAL_GetTick>
 8007aa6:	9005      	str	r0, [sp, #20]
	  uint32_t ticks1000ms = HAL_GetTick();
 8007aa8:	f000 ff58 	bl	800895c <HAL_GetTick>
 8007aac:	4607      	mov	r7, r0
	  uint32_t ticksbqwd = HAL_GetTick();
 8007aae:	f000 ff55 	bl	800895c <HAL_GetTick>
 8007ab2:	4606      	mov	r6, r0
	  uint8_t firstrun = 1;
	  osDelay(100);
 8007ab4:	2064      	movs	r0, #100	; 0x64
	  uint8_t firstrun = 1;
 8007ab6:	f04f 0901 	mov.w	r9, #1
	  osDelay(100);
 8007aba:	f005 fac7 	bl	800d04c <osDelay>
 8007abe:	e023      	b.n	8007b08 <THP_MainTask+0x230>

		  // uruchomienie pomiaru
		  if(HAL_GetTick() - ticksstart >= tim_interval*1000UL || firstrun) {	// czas uruchomic pomiar ?
			  ticksstart = HAL_GetTick();
			  firstrun = 0;
			  if (meas_count > 0 || meas_cont_mode) {
 8007ac0:	4b54      	ldr	r3, [pc, #336]	; (8007c14 <THP_MainTask+0x33c>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b13b      	cbz	r3, 8007ad6 <THP_MainTask+0x1fe>
				  if(meas_cont_mode == 0) {
					  meas_count--;
					  if(meas_count == 0) printf("Last measure\r\n");
				  }
				  if (rtos_debug) { printf("===TASK MEAS\r\n");}
 8007ac6:	4b54      	ldr	r3, [pc, #336]	; (8007c18 <THP_MainTask+0x340>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d169      	bne.n	8007ba2 <THP_MainTask+0x2ca>
				  vTaskResume(measTaskHandle);						// odblokuj taks pomiarow
 8007ace:	4b50      	ldr	r3, [pc, #320]	; (8007c10 <THP_MainTask+0x338>)
 8007ad0:	6818      	ldr	r0, [r3, #0]
 8007ad2:	f005 fc51 	bl	800d378 <vTaskResume>
			  }
		  }

		  if(HAL_GetTick() - ticksstart >= 3*1000UL || firstrun) {	// czas uruchomic gsm ?
 8007ad6:	f000 ff41 	bl	800895c <HAL_GetTick>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	1ac0      	subs	r0, r0, r3
 8007ade:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8007ae2:	4298      	cmp	r0, r3
 8007ae4:	f200 80aa 	bhi.w	8007c3c <THP_MainTask+0x364>
		 			  }
		 		  }


		  // wyswietlenie pomiarow
	      if(sensors_data_ready) {						// taks sensorow zakonczyl dzialanie ?
 8007ae8:	f89b 3000 	ldrb.w	r3, [fp]
 8007aec:	b14b      	cbz	r3, 8007b02 <THP_MainTask+0x22a>
	    	  sensors_data_ready = 0;
	    	  if(disp_type > 0) {
 8007aee:	4a46      	ldr	r2, [pc, #280]	; (8007c08 <THP_MainTask+0x330>)
	    	  sensors_data_ready = 0;
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	f88b 3000 	strb.w	r3, [fp]
	    	  if(disp_type > 0) {
 8007af8:	7813      	ldrb	r3, [r2, #0]
 8007afa:	b113      	cbz	r3, 8007b02 <THP_MainTask+0x22a>
	    		  display_values(disp_type);
 8007afc:	7810      	ldrb	r0, [r2, #0]
 8007afe:	f7ff fb45 	bl	800718c <display_values>
	    	  }
	      }

	      __WFI();
 8007b02:	bf30      	wfi
		  if (new_tim_interval != tim_interval) {
 8007b04:	f04f 0900 	mov.w	r9, #0
 8007b08:	f8ba 2000 	ldrh.w	r2, [sl]
 8007b0c:	8823      	ldrh	r3, [r4, #0]
 8007b0e:	b292      	uxth	r2, r2
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d006      	beq.n	8007b24 <THP_MainTask+0x24c>
			  tim_interval = new_tim_interval;
 8007b16:	f8ba 3000 	ldrh.w	r3, [sl]
			  config.tim_interval = tim_interval;
 8007b1a:	4a3a      	ldr	r2, [pc, #232]	; (8007c04 <THP_MainTask+0x32c>)
			  tim_interval = new_tim_interval;
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	8023      	strh	r3, [r4, #0]
			  config.tim_interval = tim_interval;
 8007b20:	8823      	ldrh	r3, [r4, #0]
 8007b22:	8113      	strh	r3, [r2, #8]
		  CLI();
 8007b24:	f7fc f966 	bl	8003df4 <CLI>
		  if(HAL_GetTick()-ticks30ms >= 30)
 8007b28:	f000 ff18 	bl	800895c <HAL_GetTick>
 8007b2c:	9b05      	ldr	r3, [sp, #20]
 8007b2e:	1ac0      	subs	r0, r0, r3
 8007b30:	281d      	cmp	r0, #29
 8007b32:	f200 8098 	bhi.w	8007c66 <THP_MainTask+0x38e>
		  if(HAL_GetTick()-ticks1000ms >= 1000)
 8007b36:	f000 ff11 	bl	800895c <HAL_GetTick>
 8007b3a:	1bc0      	subs	r0, r0, r7
 8007b3c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007b40:	f080 80a1 	bcs.w	8007c86 <THP_MainTask+0x3ae>
		  if(HAL_GetTick()-ticksbqwd >= 15000)
 8007b44:	f000 ff0a 	bl	800895c <HAL_GetTick>
 8007b48:	f643 2397 	movw	r3, #14999	; 0x3a97
 8007b4c:	1b80      	subs	r0, r0, r6
 8007b4e:	4298      	cmp	r0, r3
 8007b50:	f200 80c3 	bhi.w	8007cda <THP_MainTask+0x402>
		  if(HAL_GetTick() - ticksstart >= tim_interval*1000UL || firstrun) {	// czas uruchomic pomiar ?
 8007b54:	f000 ff02 	bl	800895c <HAL_GetTick>
 8007b58:	682a      	ldr	r2, [r5, #0]
 8007b5a:	8823      	ldrh	r3, [r4, #0]
 8007b5c:	1a80      	subs	r0, r0, r2
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	4298      	cmp	r0, r3
 8007b6a:	d202      	bcs.n	8007b72 <THP_MainTask+0x29a>
 8007b6c:	f1b9 0f00 	cmp.w	r9, #0
 8007b70:	d0b1      	beq.n	8007ad6 <THP_MainTask+0x1fe>
			  ticksstart = HAL_GetTick();
 8007b72:	f000 fef3 	bl	800895c <HAL_GetTick>
			  if (meas_count > 0 || meas_cont_mode) {
 8007b76:	f8b8 3000 	ldrh.w	r3, [r8]
			  ticksstart = HAL_GetTick();
 8007b7a:	6028      	str	r0, [r5, #0]
			  if (meas_count > 0 || meas_cont_mode) {
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d09f      	beq.n	8007ac0 <THP_MainTask+0x1e8>
				  if(meas_cont_mode == 0) {
 8007b80:	4a24      	ldr	r2, [pc, #144]	; (8007c14 <THP_MainTask+0x33c>)
 8007b82:	7812      	ldrb	r2, [r2, #0]
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	d19e      	bne.n	8007ac6 <THP_MainTask+0x1ee>
					  meas_count--;
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f8a8 3000 	strh.w	r3, [r8]
					  if(meas_count == 0) printf("Last measure\r\n");
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d198      	bne.n	8007ac6 <THP_MainTask+0x1ee>
 8007b94:	4821      	ldr	r0, [pc, #132]	; (8007c1c <THP_MainTask+0x344>)
 8007b96:	f008 fa2b 	bl	800fff0 <puts>
				  if (rtos_debug) { printf("===TASK MEAS\r\n");}
 8007b9a:	4b1f      	ldr	r3, [pc, #124]	; (8007c18 <THP_MainTask+0x340>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d095      	beq.n	8007ace <THP_MainTask+0x1f6>
 8007ba2:	481f      	ldr	r0, [pc, #124]	; (8007c20 <THP_MainTask+0x348>)
 8007ba4:	f008 fa24 	bl	800fff0 <puts>
 8007ba8:	e791      	b.n	8007ace <THP_MainTask+0x1f6>
 8007baa:	bf00      	nop
 8007bac:	48000400 	.word	0x48000400
 8007bb0:	200013e8 	.word	0x200013e8
 8007bb4:	200011ac 	.word	0x200011ac
 8007bb8:	200013cc 	.word	0x200013cc
 8007bbc:	48000800 	.word	0x48000800
 8007bc0:	200011d0 	.word	0x200011d0
 8007bc4:	0801512c 	.word	0x0801512c
 8007bc8:	20001378 	.word	0x20001378
 8007bcc:	2000131c 	.word	0x2000131c
 8007bd0:	200012f8 	.word	0x200012f8
 8007bd4:	200012b8 	.word	0x200012b8
 8007bd8:	200013ba 	.word	0x200013ba
 8007bdc:	20001406 	.word	0x20001406
 8007be0:	0801517c 	.word	0x0801517c
 8007be4:	200013bc 	.word	0x200013bc
 8007be8:	20001400 	.word	0x20001400
 8007bec:	200013fd 	.word	0x200013fd
 8007bf0:	08015194 	.word	0x08015194
 8007bf4:	080151a8 	.word	0x080151a8
 8007bf8:	08013528 	.word	0x08013528
 8007bfc:	080151c0 	.word	0x080151c0
 8007c00:	20001404 	.word	0x20001404
 8007c04:	2000137c 	.word	0x2000137c
 8007c08:	200013b9 	.word	0x200013b9
 8007c0c:	200012f4 	.word	0x200012f4
 8007c10:	200013c0 	.word	0x200013c0
 8007c14:	2000000c 	.word	0x2000000c
 8007c18:	20000000 	.word	0x20000000
 8007c1c:	080151f8 	.word	0x080151f8
 8007c20:	08015208 	.word	0x08015208
 8007c24:	20001334 	.word	0x20001334
 8007c28:	200012dc 	.word	0x200012dc
 8007c2c:	200013c4 	.word	0x200013c4
 8007c30:	200013fc 	.word	0x200013fc
 8007c34:	200013bd 	.word	0x200013bd
 8007c38:	2000000e 	.word	0x2000000e
		 			  ticksstart = HAL_GetTick();
 8007c3c:	f000 fe8e 	bl	800895c <HAL_GetTick>
		 			  if (meas_count > 0 || meas_cont_mode) {
 8007c40:	f8b8 3000 	ldrh.w	r3, [r8]
		 			  ticksstart = HAL_GetTick();
 8007c44:	6028      	str	r0, [r5, #0]
		 			  if (meas_count > 0 || meas_cont_mode) {
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d14d      	bne.n	8007ce6 <THP_MainTask+0x40e>
 8007c4a:	4b4c      	ldr	r3, [pc, #304]	; (8007d7c <THP_MainTask+0x4a4>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f43f af4a 	beq.w	8007ae8 <THP_MainTask+0x210>
		 				 if (rtos_debug) { printf("===TASK GSM\r\n");}
 8007c54:	4b4a      	ldr	r3, [pc, #296]	; (8007d80 <THP_MainTask+0x4a8>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d155      	bne.n	8007d08 <THP_MainTask+0x430>
		 				 vTaskResume(GSMTaskHandle);						// odblokuj taks pomiarow
 8007c5c:	4b49      	ldr	r3, [pc, #292]	; (8007d84 <THP_MainTask+0x4ac>)
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	f005 fb8a 	bl	800d378 <vTaskResume>
 8007c64:	e740      	b.n	8007ae8 <THP_MainTask+0x210>
			  ticks30ms = HAL_GetTick();
 8007c66:	f000 fe79 	bl	800895c <HAL_GetTick>
			  LED1_TOGGLE();
 8007c6a:	2120      	movs	r1, #32
			  ticks30ms = HAL_GetTick();
 8007c6c:	9005      	str	r0, [sp, #20]
			  LED1_TOGGLE();
 8007c6e:	4846      	ldr	r0, [pc, #280]	; (8007d88 <THP_MainTask+0x4b0>)
 8007c70:	f002 f86c 	bl	8009d4c <HAL_GPIO_TogglePin>
			  check_powerOff();
 8007c74:	f7ff f934 	bl	8006ee0 <check_powerOff>
		  if(HAL_GetTick()-ticks1000ms >= 1000)
 8007c78:	f000 fe70 	bl	800895c <HAL_GetTick>
 8007c7c:	1bc0      	subs	r0, r0, r7
 8007c7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007c82:	f4ff af5f 	bcc.w	8007b44 <THP_MainTask+0x26c>
			  ticks1000ms = HAL_GetTick();
 8007c86:	f000 fe69 	bl	800895c <HAL_GetTick>
			  HAL_RTC_GetTime(&hrtc, &sTime, 0);
 8007c8a:	4940      	ldr	r1, [pc, #256]	; (8007d8c <THP_MainTask+0x4b4>)
 8007c8c:	2200      	movs	r2, #0
			  ticks1000ms = HAL_GetTick();
 8007c8e:	4607      	mov	r7, r0
			  HAL_RTC_GetTime(&hrtc, &sTime, 0);
 8007c90:	483f      	ldr	r0, [pc, #252]	; (8007d90 <THP_MainTask+0x4b8>)
 8007c92:	f003 fe09 	bl	800b8a8 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &sDate, 0);
 8007c96:	493f      	ldr	r1, [pc, #252]	; (8007d94 <THP_MainTask+0x4bc>)
 8007c98:	483d      	ldr	r0, [pc, #244]	; (8007d90 <THP_MainTask+0x4b8>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f003 fe3c 	bl	800b918 <HAL_RTC_GetDate>
			  if (rtc_debug)
 8007ca0:	4b3d      	ldr	r3, [pc, #244]	; (8007d98 <THP_MainTask+0x4c0>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f43f af4d 	beq.w	8007b44 <THP_MainTask+0x26c>
			  printf("RTC Time: %02i:%02i:%02i %i/%i/20%02i\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds, sDate.Date, sDate.Month, sDate.Year);
 8007caa:	4b38      	ldr	r3, [pc, #224]	; (8007d8c <THP_MainTask+0x4b4>)
 8007cac:	4839      	ldr	r0, [pc, #228]	; (8007d94 <THP_MainTask+0x4bc>)
 8007cae:	7819      	ldrb	r1, [r3, #0]
 8007cb0:	785a      	ldrb	r2, [r3, #1]
 8007cb2:	789b      	ldrb	r3, [r3, #2]
 8007cb4:	7880      	ldrb	r0, [r0, #2]
 8007cb6:	9000      	str	r0, [sp, #0]
 8007cb8:	4836      	ldr	r0, [pc, #216]	; (8007d94 <THP_MainTask+0x4bc>)
 8007cba:	7840      	ldrb	r0, [r0, #1]
 8007cbc:	9001      	str	r0, [sp, #4]
 8007cbe:	4835      	ldr	r0, [pc, #212]	; (8007d94 <THP_MainTask+0x4bc>)
 8007cc0:	78c0      	ldrb	r0, [r0, #3]
 8007cc2:	9002      	str	r0, [sp, #8]
 8007cc4:	4835      	ldr	r0, [pc, #212]	; (8007d9c <THP_MainTask+0x4c4>)
 8007cc6:	f008 f92d 	bl	800ff24 <iprintf>
		  if(HAL_GetTick()-ticksbqwd >= 15000)
 8007cca:	f000 fe47 	bl	800895c <HAL_GetTick>
 8007cce:	f643 2397 	movw	r3, #14999	; 0x3a97
 8007cd2:	1b80      	subs	r0, r0, r6
 8007cd4:	4298      	cmp	r0, r3
 8007cd6:	f67f af3d 	bls.w	8007b54 <THP_MainTask+0x27c>
			  ticksbqwd = HAL_GetTick();
 8007cda:	f000 fe3f 	bl	800895c <HAL_GetTick>
 8007cde:	4606      	mov	r6, r0
			  BQ25798_WD_RST();
 8007ce0:	f7fa fd44 	bl	800276c <BQ25798_WD_RST>
 8007ce4:	e736      	b.n	8007b54 <THP_MainTask+0x27c>
		 				  if(meas_cont_mode == 0) {
 8007ce6:	4a25      	ldr	r2, [pc, #148]	; (8007d7c <THP_MainTask+0x4a4>)
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	d1b2      	bne.n	8007c54 <THP_MainTask+0x37c>
		 					  meas_count--;
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f8a8 3000 	strh.w	r3, [r8]
		 					  if(meas_count == 0) printf("Last measure\r\n");
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1ac      	bne.n	8007c54 <THP_MainTask+0x37c>
 8007cfa:	4829      	ldr	r0, [pc, #164]	; (8007da0 <THP_MainTask+0x4c8>)
 8007cfc:	f008 f978 	bl	800fff0 <puts>
		 				 if (rtos_debug) { printf("===TASK GSM\r\n");}
 8007d00:	4b1f      	ldr	r3, [pc, #124]	; (8007d80 <THP_MainTask+0x4a8>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0a9      	beq.n	8007c5c <THP_MainTask+0x384>
 8007d08:	4826      	ldr	r0, [pc, #152]	; (8007da4 <THP_MainTask+0x4cc>)
 8007d0a:	f008 f971 	bl	800fff0 <puts>
 8007d0e:	e7a5      	b.n	8007c5c <THP_MainTask+0x384>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8007d10:	f001 fb5e 	bl	80093d0 <HAL_NVIC_SystemReset>
 8007d14:	e5fd      	b.n	8007912 <THP_MainTask+0x3a>
		  printf("Configure charger \r\n");
 8007d16:	4824      	ldr	r0, [pc, #144]	; (8007da8 <THP_MainTask+0x4d0>)
 8007d18:	f008 f96a 	bl	800fff0 <puts>
		  QON_EN();
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d26:	f002 f80b 	bl	8009d40 <HAL_GPIO_WritePin>
		  BQ25798_Sys_Min_Voltage_write(3); 	// 3250mV
 8007d2a:	2003      	movs	r0, #3
 8007d2c:	f7fa fcc6 	bl	80026bc <BQ25798_Sys_Min_Voltage_write>
		  BQ25798_Chr_Volt_Limit_write(4200); 	// 4200mV
 8007d30:	f241 0068 	movw	r0, #4200	; 0x1068
 8007d34:	f7fa fccc 	bl	80026d0 <BQ25798_Chr_Volt_Limit_write>
		  BQ25798_Chr_Curr_Limit_write(2000); 	// 2000mA
 8007d38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007d3c:	f7fa fcdc 	bl	80026f8 <BQ25798_Chr_Curr_Limit_write>
		  BQ25798_Chr_Input_Voltage_Limit_write(130); //*100mV
 8007d40:	2082      	movs	r0, #130	; 0x82
 8007d42:	f7fa fced 	bl	8002720 <BQ25798_Chr_Input_Voltage_Limit_write>
		  BQ25798_Chr_Input_Curr_Limit_write(200); //*10mA
 8007d46:	20c8      	movs	r0, #200	; 0xc8
 8007d48:	f7fa fcf2 	bl	8002730 <BQ25798_Chr_Input_Curr_Limit_write>
		  BQ25798_Chrg_CTRL1_write(0x95);
 8007d4c:	2095      	movs	r0, #149	; 0x95
 8007d4e:	f7fa fcfd 	bl	800274c <BQ25798_Chrg_CTRL1_write>
		  BQ25798_Chrg_NTC_CTRL1_write(1);
 8007d52:	2001      	movs	r0, #1
 8007d54:	f7fa fd02 	bl	800275c <BQ25798_Chrg_NTC_CTRL1_write>
		  CE_EN();
 8007d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d62:	f001 ffed 	bl	8009d40 <HAL_GPIO_WritePin>
		  BQ25798_MPPT_CTRL(1); //MPPT ON
 8007d66:	2001      	movs	r0, #1
 8007d68:	f7fa fd1c 	bl	80027a4 <BQ25798_MPPT_CTRL>
 8007d6c:	e5f0      	b.n	8007950 <THP_MainTask+0x78>
	  if (Load_config()==0) {printf("Config loaded OK \r\n");};
 8007d6e:	480f      	ldr	r0, [pc, #60]	; (8007dac <THP_MainTask+0x4d4>)
 8007d70:	f008 f93e 	bl	800fff0 <puts>
 8007d74:	e5e4      	b.n	8007940 <THP_MainTask+0x68>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8007d76:	f001 fb2b 	bl	80093d0 <HAL_NVIC_SystemReset>
 8007d7a:	e5d7      	b.n	800792c <THP_MainTask+0x54>
 8007d7c:	2000000c 	.word	0x2000000c
 8007d80:	20000000 	.word	0x20000000
 8007d84:	200012f4 	.word	0x200012f4
 8007d88:	48000400 	.word	0x48000400
 8007d8c:	200013e8 	.word	0x200013e8
 8007d90:	200011ac 	.word	0x200011ac
 8007d94:	200013cc 	.word	0x200013cc
 8007d98:	200002b7 	.word	0x200002b7
 8007d9c:	080151d0 	.word	0x080151d0
 8007da0:	080151f8 	.word	0x080151f8
 8007da4:	08015218 	.word	0x08015218
 8007da8:	08015168 	.word	0x08015168
 8007dac:	08015154 	.word	0x08015154

08007db0 <sync_NTP>:
	  }
}

uint8_t sync_NTP()
{
 8007db0:	b530      	push	{r4, r5, lr}
 8007db2:	b095      	sub	sp, #84	; 0x54

	uint8_t rok,miesiac,dzien,godzina,minuta,sekunda;

	char tempdata[50];
	if (gsm_gprs_ntpSyncTime() != 1)
 8007db4:	f7fc fd6e 	bl	8004894 <gsm_gprs_ntpSyncTime>
 8007db8:	b910      	cbnz	r0, 8007dc0 <sync_NTP+0x10>
	{return 1;
 8007dba:	2001      	movs	r0, #1
	if (rtc_debug)
		{
		printf("RTC Time UPDATED: %02i:%02i:%02i %i/%i/20%02i\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds, sDate.Date, sDate.Month, sDate.Year);
		}
	return 0;
}
 8007dbc:	b015      	add	sp, #84	; 0x54
 8007dbe:	bd30      	pop	{r4, r5, pc}
	if ( gsm_gprs_ntpGetTime(&tempdata) !=1)
 8007dc0:	a807      	add	r0, sp, #28
 8007dc2:	f7fc fd9d 	bl	8004900 <gsm_gprs_ntpGetTime>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d052      	beq.n	8007e70 <sync_NTP+0xc0>
	printf("=====%s=========",&tempdata);
 8007dca:	a907      	add	r1, sp, #28
 8007dcc:	482a      	ldr	r0, [pc, #168]	; (8007e78 <sync_NTP+0xc8>)
	sNewDate.Year=rok;
 8007dce:	4c2b      	ldr	r4, [pc, #172]	; (8007e7c <sync_NTP+0xcc>)
	HAL_RTC_GetTime(&hrtc, &sTime, 0);
 8007dd0:	4d2b      	ldr	r5, [pc, #172]	; (8007e80 <sync_NTP+0xd0>)
	printf("=====%s=========",&tempdata);
 8007dd2:	f008 f8a7 	bl	800ff24 <iprintf>
	sscanf(tempdata,"%2i/%2i/%2i,%02i:%02i:%02i", &rok, &miesiac , &dzien, &godzina, &minuta, &sekunda);
 8007dd6:	f10d 021b 	add.w	r2, sp, #27
 8007dda:	f10d 031a 	add.w	r3, sp, #26
 8007dde:	f10d 0019 	add.w	r0, sp, #25
 8007de2:	a906      	add	r1, sp, #24
 8007de4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8007de8:	e9cd 1000 	strd	r1, r0, [sp]
 8007dec:	f10d 0317 	add.w	r3, sp, #23
 8007df0:	4924      	ldr	r1, [pc, #144]	; (8007e84 <sync_NTP+0xd4>)
 8007df2:	f10d 0216 	add.w	r2, sp, #22
 8007df6:	a807      	add	r0, sp, #28
 8007df8:	f008 f922 	bl	8010040 <siscanf>
	sNewTime.Hours=godzina;
 8007dfc:	4922      	ldr	r1, [pc, #136]	; (8007e88 <sync_NTP+0xd8>)
	sNewDate.Year=rok;
 8007dfe:	f89d 0016 	ldrb.w	r0, [sp, #22]
	sNewDate.Month=miesiac;
 8007e02:	f89d 3017 	ldrb.w	r3, [sp, #23]
	sNewDate.Year=rok;
 8007e06:	70e0      	strb	r0, [r4, #3]
	sNewDate.Date=dzien;
 8007e08:	f89d 2018 	ldrb.w	r2, [sp, #24]
	sNewDate.Month=miesiac;
 8007e0c:	7063      	strb	r3, [r4, #1]
	sNewTime.Minutes=minuta;
 8007e0e:	f89d 001a 	ldrb.w	r0, [sp, #26]
	sNewTime.Hours=godzina;
 8007e12:	f89d 3019 	ldrb.w	r3, [sp, #25]
	sNewDate.Date=dzien;
 8007e16:	70a2      	strb	r2, [r4, #2]
	sNewTime.Hours=godzina;
 8007e18:	700b      	strb	r3, [r1, #0]
	HAL_RTC_SetTime(&hrtc, &sNewTime, 0);
 8007e1a:	2200      	movs	r2, #0
	sNewTime.Seconds=sekunda;
 8007e1c:	f89d 301b 	ldrb.w	r3, [sp, #27]
	sNewTime.Minutes=minuta;
 8007e20:	7048      	strb	r0, [r1, #1]
	HAL_RTC_SetTime(&hrtc, &sNewTime, 0);
 8007e22:	481a      	ldr	r0, [pc, #104]	; (8007e8c <sync_NTP+0xdc>)
	sNewTime.Seconds=sekunda;
 8007e24:	708b      	strb	r3, [r1, #2]
	HAL_RTC_SetTime(&hrtc, &sNewTime, 0);
 8007e26:	f003 fe5f 	bl	800bae8 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sNewDate, 0);
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4817      	ldr	r0, [pc, #92]	; (8007e8c <sync_NTP+0xdc>)
	HAL_RTC_GetDate(&hrtc, &sDate, 0);
 8007e30:	4c17      	ldr	r4, [pc, #92]	; (8007e90 <sync_NTP+0xe0>)
	HAL_RTC_SetDate(&hrtc, &sNewDate, 0);
 8007e32:	f003 fee7 	bl	800bc04 <HAL_RTC_SetDate>
	HAL_RTC_GetTime(&hrtc, &sTime, 0);
 8007e36:	2200      	movs	r2, #0
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4814      	ldr	r0, [pc, #80]	; (8007e8c <sync_NTP+0xdc>)
 8007e3c:	f003 fd34 	bl	800b8a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, 0);
 8007e40:	4812      	ldr	r0, [pc, #72]	; (8007e8c <sync_NTP+0xdc>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	4621      	mov	r1, r4
 8007e46:	f003 fd67 	bl	800b918 <HAL_RTC_GetDate>
	if (rtc_debug)
 8007e4a:	4b12      	ldr	r3, [pc, #72]	; (8007e94 <sync_NTP+0xe4>)
 8007e4c:	7818      	ldrb	r0, [r3, #0]
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0b4      	beq.n	8007dbc <sync_NTP+0xc>
		printf("RTC Time UPDATED: %02i:%02i:%02i %i/%i/20%02i\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds, sDate.Date, sDate.Month, sDate.Year);
 8007e52:	7829      	ldrb	r1, [r5, #0]
 8007e54:	786a      	ldrb	r2, [r5, #1]
 8007e56:	78ab      	ldrb	r3, [r5, #2]
 8007e58:	78a0      	ldrb	r0, [r4, #2]
 8007e5a:	9000      	str	r0, [sp, #0]
 8007e5c:	7865      	ldrb	r5, [r4, #1]
 8007e5e:	9501      	str	r5, [sp, #4]
 8007e60:	78e4      	ldrb	r4, [r4, #3]
 8007e62:	9402      	str	r4, [sp, #8]
 8007e64:	480c      	ldr	r0, [pc, #48]	; (8007e98 <sync_NTP+0xe8>)
 8007e66:	f008 f85d 	bl	800ff24 <iprintf>
	return 0;
 8007e6a:	2000      	movs	r0, #0
}
 8007e6c:	b015      	add	sp, #84	; 0x54
 8007e6e:	bd30      	pop	{r4, r5, pc}
		return 2;
 8007e70:	2002      	movs	r0, #2
}
 8007e72:	b015      	add	sp, #84	; 0x54
 8007e74:	bd30      	pop	{r4, r5, pc}
 8007e76:	bf00      	nop
 8007e78:	08015228 	.word	0x08015228
 8007e7c:	200013d0 	.word	0x200013d0
 8007e80:	200013e8 	.word	0x200013e8
 8007e84:	0801523c 	.word	0x0801523c
 8007e88:	200013d4 	.word	0x200013d4
 8007e8c:	200011ac 	.word	0x200011ac
 8007e90:	200013cc 	.word	0x200013cc
 8007e94:	200002b7 	.word	0x200002b7
 8007e98:	08015258 	.word	0x08015258

08007e9c <print_rtc_time>:


void print_rtc_time()
{
 8007e9c:	b570      	push	{r4, r5, r6, lr}
	HAL_RTC_GetTime(&hrtc, &sTime, 0);
 8007e9e:	4d0e      	ldr	r5, [pc, #56]	; (8007ed8 <print_rtc_time+0x3c>)
 8007ea0:	4e0e      	ldr	r6, [pc, #56]	; (8007edc <print_rtc_time+0x40>)
			HAL_RTC_GetDate(&hrtc, &sDate, 0);
 8007ea2:	4c0f      	ldr	r4, [pc, #60]	; (8007ee0 <print_rtc_time+0x44>)
{
 8007ea4:	b084      	sub	sp, #16
	HAL_RTC_GetTime(&hrtc, &sTime, 0);
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f003 fcfc 	bl	800b8a8 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, 0);
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f003 fd2f 	bl	800b918 <HAL_RTC_GetDate>
		  printf("RTC Time: %02i:%02i:%02i %i/%i/20%02i\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds, sDate.Date, sDate.Month, sDate.Year);
 8007eba:	7829      	ldrb	r1, [r5, #0]
 8007ebc:	786a      	ldrb	r2, [r5, #1]
 8007ebe:	78ab      	ldrb	r3, [r5, #2]
 8007ec0:	78a0      	ldrb	r0, [r4, #2]
 8007ec2:	9000      	str	r0, [sp, #0]
 8007ec4:	7865      	ldrb	r5, [r4, #1]
 8007ec6:	9501      	str	r5, [sp, #4]
 8007ec8:	78e4      	ldrb	r4, [r4, #3]
 8007eca:	9402      	str	r4, [sp, #8]
 8007ecc:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <print_rtc_time+0x48>)
 8007ece:	f008 f829 	bl	800ff24 <iprintf>

}
 8007ed2:	b004      	add	sp, #16
 8007ed4:	bd70      	pop	{r4, r5, r6, pc}
 8007ed6:	bf00      	nop
 8007ed8:	200013e8 	.word	0x200013e8
 8007edc:	200011ac 	.word	0x200011ac
 8007ee0:	200013cc 	.word	0x200013cc
 8007ee4:	080151d0 	.word	0x080151d0

08007ee8 <i2c_read8>:
#include <math.h>



uint8_t i2c_read8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t *value, uint8_t addr)
{
 8007ee8:	b530      	push	{r4, r5, lr}
 8007eea:	b087      	sub	sp, #28
 8007eec:	460d      	mov	r5, r1
 8007eee:	4619      	mov	r1, r3
	uint8_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8007ef0:	2308      	movs	r3, #8
{
 8007ef2:	4614      	mov	r4, r2
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8007ef4:	9302      	str	r3, [sp, #8]
 8007ef6:	462a      	mov	r2, r5
 8007ef8:	2301      	movs	r3, #1
 8007efa:	f10d 0517 	add.w	r5, sp, #23
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	9500      	str	r5, [sp, #0]
 8007f02:	f002 fbaf 	bl	800a664 <HAL_I2C_Mem_Read>
    *value = tmp;
 8007f06:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007f0a:	7023      	strb	r3, [r4, #0]
    return res;
}
 8007f0c:	b007      	add	sp, #28
 8007f0e:	bd30      	pop	{r4, r5, pc}

08007f10 <i2c_read16>:

uint8_t i2c_read16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t *value, uint8_t addr)
{
 8007f10:	b510      	push	{r4, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	468c      	mov	ip, r1
 8007f16:	4619      	mov	r1, r3
	uint16_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8007f18:	2308      	movs	r3, #8
 8007f1a:	9302      	str	r3, [sp, #8]
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	f10d 0316 	add.w	r3, sp, #22
{
 8007f24:	4614      	mov	r4, r2
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	4662      	mov	r2, ip
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	f002 fb9a 	bl	800a664 <HAL_I2C_Mem_Read>
    *value = tmp;
 8007f30:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8007f34:	8023      	strh	r3, [r4, #0]
    return res;
}
 8007f36:	b006      	add	sp, #24
 8007f38:	bd10      	pop	{r4, pc}
 8007f3a:	bf00      	nop

08007f3c <i2c_write8>:
    *value = tmp;
    return res;
}

uint8_t i2c_write8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t value, uint8_t addr)
{
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	b086      	sub	sp, #24
	uint8_t tmp = value;
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8007f40:	2408      	movs	r4, #8
 8007f42:	9402      	str	r4, [sp, #8]
{
 8007f44:	4614      	mov	r4, r2
 8007f46:	468c      	mov	ip, r1
	uint8_t tmp = value;
 8007f48:	f88d 4017 	strb.w	r4, [sp, #23]
{
 8007f4c:	4619      	mov	r1, r3
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8007f4e:	f10d 0417 	add.w	r4, sp, #23
 8007f52:	2301      	movs	r3, #1
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	4662      	mov	r2, ip
 8007f58:	9400      	str	r4, [sp, #0]
 8007f5a:	f002 fa57 	bl	800a40c <HAL_I2C_Mem_Write>
    return res;
}
 8007f5e:	b006      	add	sp, #24
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	bf00      	nop

08007f64 <i2c_write16>:

uint8_t i2c_write16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t value, uint8_t addr)
{
 8007f64:	b500      	push	{lr}
 8007f66:	b087      	sub	sp, #28
 8007f68:	468e      	mov	lr, r1
 8007f6a:	4619      	mov	r1, r3
	uint16_t tmp = value;
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8007f6c:	2308      	movs	r3, #8
 8007f6e:	9302      	str	r3, [sp, #8]
 8007f70:	2302      	movs	r3, #2
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	f10d 0316 	add.w	r3, sp, #22
{
 8007f78:	4694      	mov	ip, r2
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	4672      	mov	r2, lr
 8007f7e:	2301      	movs	r3, #1
	uint16_t tmp = value;
 8007f80:	f8ad c016 	strh.w	ip, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8007f84:	f002 fa42 	bl	800a40c <HAL_I2C_Mem_Write>
    return res;
}
 8007f88:	b007      	add	sp, #28
 8007f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f8e:	bf00      	nop

08007f90 <setBit>:
    old_word |= new_word;
    i2c_write16(i2c, sub_address, old_word, addr);
}

void setBit(uint8_t* reg, int bitNumber, int value) {
    if (value == 0) {
 8007f90:	b932      	cbnz	r2, 8007fa0 <setBit+0x10>
        *reg &= ~(1 << bitNumber);  // Ustawienie bitu na 0
 8007f92:	7803      	ldrb	r3, [r0, #0]
 8007f94:	2201      	movs	r2, #1
 8007f96:	408a      	lsls	r2, r1
 8007f98:	ea23 0302 	bic.w	r3, r3, r2
 8007f9c:	7003      	strb	r3, [r0, #0]
 8007f9e:	4770      	bx	lr
    } else if (value == 1) {
 8007fa0:	2a01      	cmp	r2, #1
 8007fa2:	d000      	beq.n	8007fa6 <setBit+0x16>
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
    }
}
 8007fa4:	4770      	bx	lr
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
 8007fa6:	7803      	ldrb	r3, [r0, #0]
 8007fa8:	fa02 f101 	lsl.w	r1, r2, r1
 8007fac:	430b      	orrs	r3, r1
 8007fae:	7003      	strb	r3, [r0, #0]
}
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop

08007fb4 <combine_uint8>:

uint16_t combine_uint8(uint8_t high, uint8_t low) {
    return ((uint16_t)high << 8) | low;
}
 8007fb4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop

08007fbc <modifyRegister>:

void modifyRegister(unsigned char* reg, unsigned char mask, unsigned char value) {
    *reg = (*reg & ~mask) | (value & mask);
 8007fbc:	7803      	ldrb	r3, [r0, #0]
 8007fbe:	400a      	ands	r2, r1
 8007fc0:	ea23 0301 	bic.w	r3, r3, r1
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	7003      	strb	r3, [r0, #0]
}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop

08007fcc <i2c_scan>:

void i2c_scan(I2C_HandleTypeDef * i2c, uint8_t addr_min, uint8_t addr_max)
{
 8007fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	4616      	mov	r6, r2
 8007fd4:	4607      	mov	r7, r0
	printf("Scanning I2C devices ...\r\n");
 8007fd6:	4815      	ldr	r0, [pc, #84]	; (800802c <i2c_scan+0x60>)
 8007fd8:	f008 f80a 	bl	800fff0 <puts>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8007fdc:	42b4      	cmp	r4, r6
 8007fde:	d823      	bhi.n	8008028 <i2c_scan+0x5c>
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
		osDelay(100);
		if (status == HAL_OK) {
			    	printf("Device found on %#x \r\n", addr);
			    } else {
			    	printf("Device NOTfound on %#x \r\n", addr);
 8007fe0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8008030 <i2c_scan+0x64>
			    	printf("Device found on %#x \r\n", addr);
 8007fe4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8008034 <i2c_scan+0x68>
 8007fe8:	e006      	b.n	8007ff8 <i2c_scan+0x2c>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8007fea:	3401      	adds	r4, #1
			    	printf("Device found on %#x \r\n", addr);
 8007fec:	4648      	mov	r0, r9
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8007fee:	b2e4      	uxtb	r4, r4
			    	printf("Device found on %#x \r\n", addr);
 8007ff0:	f007 ff98 	bl	800ff24 <iprintf>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8007ff4:	42a6      	cmp	r6, r4
 8007ff6:	d317      	bcc.n	8008028 <i2c_scan+0x5c>
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
 8007ff8:	0061      	lsls	r1, r4, #1
 8007ffa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ffe:	2203      	movs	r2, #3
 8008000:	4638      	mov	r0, r7
 8008002:	f002 fc57 	bl	800a8b4 <HAL_I2C_IsDeviceReady>
 8008006:	4605      	mov	r5, r0
		osDelay(100);
 8008008:	2064      	movs	r0, #100	; 0x64
 800800a:	f005 f81f 	bl	800d04c <osDelay>
			    	printf("Device NOTfound on %#x \r\n", addr);
 800800e:	4621      	mov	r1, r4
 8008010:	4640      	mov	r0, r8
		if (status == HAL_OK) {
 8008012:	2d00      	cmp	r5, #0
 8008014:	d0e9      	beq.n	8007fea <i2c_scan+0x1e>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8008016:	3401      	adds	r4, #1
			    	printf("Device NOTfound on %#x \r\n", addr);
 8008018:	f007 ff84 	bl	800ff24 <iprintf>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 800801c:	b2e4      	uxtb	r4, r4
			    	osDelay(100);
 800801e:	2064      	movs	r0, #100	; 0x64
 8008020:	f005 f814 	bl	800d04c <osDelay>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 8008024:	42a6      	cmp	r6, r4
 8008026:	d2e7      	bcs.n	8007ff8 <i2c_scan+0x2c>
			    }
	}
}
 8008028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802c:	0801529c 	.word	0x0801529c
 8008030:	080152d0 	.word	0x080152d0
 8008034:	080152b8 	.word	0x080152b8

08008038 <byteswap16>:
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8008038:	ba40      	rev16	r0, r0

uint16_t byteswap16 (uint16_t bytes)
{
//	return ((bytes & 0xFF) << 8) | ((bytes >> 8) & 0xFF);
	return __REV16(bytes);
}
 800803a:	b280      	uxth	r0, r0
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop

08008040 <SET_DPS368>:
{
	TCA9543A_SelectChannel(0);
}

void SET_DPS368()
{
 8008040:	b500      	push	{lr}
		I2C2TCA_NRST();
 8008042:	2201      	movs	r2, #1
{
 8008044:	b087      	sub	sp, #28
		I2C2TCA_NRST();
 8008046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800804a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800804e:	f001 fe77 	bl	8009d40 <HAL_GPIO_WritePin>
		osDelay(1);
 8008052:	2001      	movs	r0, #1
 8008054:	f004 fffa 	bl	800d04c <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008058:	2301      	movs	r3, #1
 800805a:	f10d 0217 	add.w	r2, sp, #23
 800805e:	f04f 31ff 	mov.w	r1, #4294967295
 8008062:	e9cd 3101 	strd	r3, r1, [sp, #4]
		uint8_t data = 1 << channel;
 8008066:	f04f 0c02 	mov.w	ip, #2
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800806a:	9200      	str	r2, [sp, #0]
 800806c:	21e4      	movs	r1, #228	; 0xe4
 800806e:	2200      	movs	r2, #0
 8008070:	4803      	ldr	r0, [pc, #12]	; (8008080 <SET_DPS368+0x40>)
		uint8_t data = 1 << channel;
 8008072:	f88d c017 	strb.w	ip, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008076:	f002 f9c9 	bl	800a40c <HAL_I2C_Mem_Write>
	TCA9543A_SelectChannel(1);
}
 800807a:	b007      	add	sp, #28
 800807c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008080:	20001104 	.word	0x20001104

08008084 <TMP117_check>:



uint8_t TMP117_check()
{
 8008084:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 8008086:	481a      	ldr	r0, [pc, #104]	; (80080f0 <TMP117_check+0x6c>)
{
 8008088:	b086      	sub	sp, #24
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 800808a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800808e:	2203      	movs	r2, #3
 8008090:	2192      	movs	r1, #146	; 0x92
 8008092:	f002 fc0f 	bl	800a8b4 <HAL_I2C_IsDeviceReady>
 8008096:	4604      	mov	r4, r0
	osDelay(100);
 8008098:	2064      	movs	r0, #100	; 0x64
 800809a:	f004 ffd7 	bl	800d04c <osDelay>
	if (status == HAL_OK) {
 800809e:	b9fc      	cbnz	r4, 80080e0 <TMP117_check+0x5c>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80080a0:	2108      	movs	r1, #8
 80080a2:	2202      	movs	r2, #2
 80080a4:	f10d 0316 	add.w	r3, sp, #22
 80080a8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	220f      	movs	r2, #15
 80080b0:	2301      	movs	r3, #1
 80080b2:	480f      	ldr	r0, [pc, #60]	; (80080f0 <TMP117_check+0x6c>)
 80080b4:	2192      	movs	r1, #146	; 0x92
 80080b6:	f002 fad5 	bl	800a664 <HAL_I2C_Mem_Read>
    *value = tmp;
 80080ba:	f8bd 2016 	ldrh.w	r2, [sp, #22]
		uint16_t value;
		i2c_read16(&hi2c2, TMP117_ID_REG, &value, TMP117_ADDR << 1);
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 80080be:	f241 7301 	movw	r3, #5889	; 0x1701
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d005      	beq.n	80080d2 <TMP117_check+0x4e>
 80080c6:	480b      	ldr	r0, [pc, #44]	; (80080f4 <TMP117_check+0x70>)
 80080c8:	f007 ff92 	bl	800fff0 <puts>
	} else {printf("TMP117 FAILED\r\n"); return 0;}
}
 80080cc:	4620      	mov	r0, r4
 80080ce:	b006      	add	sp, #24
 80080d0:	bd10      	pop	{r4, pc}
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 80080d2:	4809      	ldr	r0, [pc, #36]	; (80080f8 <TMP117_check+0x74>)
 80080d4:	f007 ff8c 	bl	800fff0 <puts>
 80080d8:	2401      	movs	r4, #1
}
 80080da:	4620      	mov	r0, r4
 80080dc:	b006      	add	sp, #24
 80080de:	bd10      	pop	{r4, pc}
	} else {printf("TMP117 FAILED\r\n"); return 0;}
 80080e0:	4806      	ldr	r0, [pc, #24]	; (80080fc <TMP117_check+0x78>)
 80080e2:	f007 ff85 	bl	800fff0 <puts>
 80080e6:	2400      	movs	r4, #0
}
 80080e8:	4620      	mov	r0, r4
 80080ea:	b006      	add	sp, #24
 80080ec:	bd10      	pop	{r4, pc}
 80080ee:	bf00      	nop
 80080f0:	20001104 	.word	0x20001104
 80080f4:	080152f8 	.word	0x080152f8
 80080f8:	080152ec 	.word	0x080152ec
 80080fc:	08015304 	.word	0x08015304

08008100 <TMP117_get_temp>:
	osDelay(1);

}

float TMP117_get_temp()
{
 8008100:	b500      	push	{lr}
 8008102:	b087      	sub	sp, #28
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008104:	f10d 0316 	add.w	r3, sp, #22
 8008108:	2108      	movs	r1, #8
 800810a:	2202      	movs	r2, #2
 800810c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2200      	movs	r2, #0
 8008114:	2301      	movs	r3, #1
 8008116:	2192      	movs	r1, #146	; 0x92
 8008118:	4806      	ldr	r0, [pc, #24]	; (8008134 <TMP117_get_temp+0x34>)
 800811a:	f002 faa3 	bl	800a664 <HAL_I2C_Mem_Read>
    *value = tmp;
 800811e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008122:	ba5b      	rev16	r3, r3
	uint16_t value;
	int16_t raw;
    i2c_read16(&hi2c2, TMP117_TEMP_REG, &value, TMP117_ADDR << 1);
    raw = byteswap16(value);
    return (float)(raw * TMP117_RESOLUTION);
 8008124:	b21b      	sxth	r3, r3
 8008126:	ee00 3a10 	vmov	s0, r3
}
 800812a:	eeba 0aec 	vcvt.f32.s32	s0, s0, #7
 800812e:	b007      	add	sp, #28
 8008130:	f85d fb04 	ldr.w	pc, [sp], #4
 8008134:	20001104 	.word	0x20001104

08008138 <TMP117_start_meas>:

void TMP117_start_meas(uint8_t avg_mode)
{
 8008138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	b086      	sub	sp, #24
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800813e:	4e1d      	ldr	r6, [pc, #116]	; (80081b4 <TMP117_start_meas+0x7c>)
	uint16_t tmp = value;
 8008140:	f44f 7308 	mov.w	r3, #544	; 0x220
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008144:	f04f 0808 	mov.w	r8, #8
 8008148:	2502      	movs	r5, #2
 800814a:	f10d 0716 	add.w	r7, sp, #22
	uint16_t tmp = value;
 800814e:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008152:	2301      	movs	r3, #1
 8008154:	461a      	mov	r2, r3
 8008156:	2192      	movs	r1, #146	; 0x92
 8008158:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800815c:	9700      	str	r7, [sp, #0]
{
 800815e:	4604      	mov	r4, r0
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8008160:	4630      	mov	r0, r6
 8008162:	f002 f953 	bl	800a40c <HAL_I2C_Mem_Write>
	osDelay(1);
 8008166:	2001      	movs	r0, #1
 8008168:	f004 ff70 	bl	800d04c <osDelay>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800816c:	2301      	movs	r3, #1
 800816e:	461a      	mov	r2, r3
 8008170:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8008174:	9700      	str	r7, [sp, #0]
 8008176:	2192      	movs	r1, #146	; 0x92
 8008178:	4630      	mov	r0, r6
 800817a:	f002 fa73 	bl	800a664 <HAL_I2C_Mem_Read>
    *value = tmp;
 800817e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8008182:	ba5b      	rev16	r3, r3
	uint16_t config, swapconfig;
	TMP117_RST_Conf_Reg();
	i2c_read16(&hi2c2, TMP117_CONF_REG, &config, TMP117_ADDR << 1);
	swapconfig = byteswap16(config);
//	printf("REG in TMP (hex): %x \r\n", swapconfig);
	swapconfig |= avg_mode;
 8008184:	431c      	orrs	r4, r3
 8008186:	b2a4      	uxth	r4, r4
	return __REV16(bytes);
 8008188:	f444 6440 	orr.w	r4, r4, #3072	; 0xc00
 800818c:	ba64      	rev16	r4, r4
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800818e:	2301      	movs	r3, #1
 8008190:	e9cd 7500 	strd	r7, r5, [sp]
 8008194:	f8cd 8008 	str.w	r8, [sp, #8]
 8008198:	4630      	mov	r0, r6
 800819a:	461a      	mov	r2, r3
 800819c:	2192      	movs	r1, #146	; 0x92
	return __REV16(bytes);
 800819e:	f8ad 4016 	strh.w	r4, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80081a2:	f002 f933 	bl	800a40c <HAL_I2C_Mem_Write>
	swapconfig |= one_shot;
	config = byteswap16(swapconfig);
	i2c_write16(&hi2c2, TMP117_CONF_REG, config, TMP117_ADDR << 1);
	osDelay(2);
 80081a6:	4628      	mov	r0, r5
}
 80081a8:	b006      	add	sp, #24
 80081aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(2);
 80081ae:	f004 bf4d 	b.w	800d04c <osDelay>
 80081b2:	bf00      	nop
 80081b4:	20001104 	.word	0x20001104

080081b8 <tmp117_avr_conf>:

uint16_t tmp117_avr_conf(uint8_t sensor_conf)
{
    switch (sensor_conf) {
 80081b8:	2802      	cmp	r0, #2
{
 80081ba:	b508      	push	{r3, lr}
    switch (sensor_conf) {
 80081bc:	d008      	beq.n	80081d0 <tmp117_avr_conf+0x18>
 80081be:	2803      	cmp	r0, #3
 80081c0:	d010      	beq.n	80081e4 <tmp117_avr_conf+0x2c>
 80081c2:	2801      	cmp	r0, #1
 80081c4:	d009      	beq.n	80081da <tmp117_avr_conf+0x22>
        case 0:
        	printf("TMP117 set no_avg\r\n");
 80081c6:	480a      	ldr	r0, [pc, #40]	; (80081f0 <tmp117_avr_conf+0x38>)
 80081c8:	f007 ff12 	bl	800fff0 <puts>
            return no_avg;
 80081cc:	2000      	movs	r0, #0
            return avg64;
        default:
        	printf("TMP117 set no_avg\r\n");
            return no_avg;
    }
}
 80081ce:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg32\r\n");
 80081d0:	4808      	ldr	r0, [pc, #32]	; (80081f4 <tmp117_avr_conf+0x3c>)
 80081d2:	f007 ff0d 	bl	800fff0 <puts>
            return avg32;
 80081d6:	2040      	movs	r0, #64	; 0x40
}
 80081d8:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg8\r\n");
 80081da:	4807      	ldr	r0, [pc, #28]	; (80081f8 <tmp117_avr_conf+0x40>)
 80081dc:	f007 ff08 	bl	800fff0 <puts>
            return avg8;
 80081e0:	2020      	movs	r0, #32
}
 80081e2:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg64\r\n");
 80081e4:	4805      	ldr	r0, [pc, #20]	; (80081fc <tmp117_avr_conf+0x44>)
 80081e6:	f007 ff03 	bl	800fff0 <puts>
            return avg64;
 80081ea:	2060      	movs	r0, #96	; 0x60
}
 80081ec:	bd08      	pop	{r3, pc}
 80081ee:	bf00      	nop
 80081f0:	08015314 	.word	0x08015314
 80081f4:	0801533c 	.word	0x0801533c
 80081f8:	08015328 	.word	0x08015328
 80081fc:	08015350 	.word	0x08015350

08008200 <MS8607_check>:

uint8_t MS8607_check()
{
 8008200:	b510      	push	{r4, lr}
	ms8607_init();
 8008202:	f7fd fd11 	bl	8005c28 <ms8607_init>
	if(ms8607_is_connected()) {printf("MS8607 OK\r\n"); return 1;
 8008206:	f7fd fd21 	bl	8005c4c <ms8607_is_connected>
 800820a:	b120      	cbz	r0, 8008216 <MS8607_check+0x16>
 800820c:	4805      	ldr	r0, [pc, #20]	; (8008224 <MS8607_check+0x24>)
 800820e:	f007 feef 	bl	800fff0 <puts>
 8008212:	2001      	movs	r0, #1
	} else {printf("MS8607 FAIL\r\n"); return 0;};
	ms8607_reset();
}
 8008214:	bd10      	pop	{r4, pc}
 8008216:	4604      	mov	r4, r0
	} else {printf("MS8607 FAIL\r\n"); return 0;};
 8008218:	4803      	ldr	r0, [pc, #12]	; (8008228 <MS8607_check+0x28>)
 800821a:	f007 fee9 	bl	800fff0 <puts>
 800821e:	4620      	mov	r0, r4
}
 8008220:	bd10      	pop	{r4, pc}
 8008222:	bf00      	nop
 8008224:	08015364 	.word	0x08015364
 8008228:	08015370 	.word	0x08015370

0800822c <MS8607_get_temp>:




float MS8607_get_temp()
{
 800822c:	b500      	push	{lr}
 800822e:	b083      	sub	sp, #12
	float temp;
	ms8607_read_temperature(&temp);
 8008230:	a801      	add	r0, sp, #4
 8008232:	f7fd fd9f 	bl	8005d74 <ms8607_read_temperature>
//	printf("MS Temp: %f\r\n",temp);
	return temp;
}
 8008236:	ed9d 0a01 	vldr	s0, [sp, #4]
 800823a:	b003      	add	sp, #12
 800823c:	f85d fb04 	ldr.w	pc, [sp], #4

08008240 <MS8607_get_press>:

float MS8607_get_press()
{
 8008240:	b500      	push	{lr}
 8008242:	b083      	sub	sp, #12
	float press;
	ms8607_read_pressure(&press);
 8008244:	a801      	add	r0, sp, #4
 8008246:	f7fd fe91 	bl	8005f6c <ms8607_read_pressure>
//	printf("MS Press: %f\r\n",press);
	return press;
}
 800824a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800824e:	b003      	add	sp, #12
 8008250:	f85d fb04 	ldr.w	pc, [sp], #4

08008254 <MS8607_get_hum>:

float MS8607_get_hum()
{
 8008254:	b500      	push	{lr}
 8008256:	b083      	sub	sp, #12
	float hum;
	ms8607_read_humidity(&hum);
 8008258:	a801      	add	r0, sp, #4
 800825a:	f7fd fd11 	bl	8005c80 <ms8607_read_humidity>
//	printf("MS Hum: %f\r\n",hum);
	return hum;
}
 800825e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8008262:	b003      	add	sp, #12
 8008264:	f85d fb04 	ldr.w	pc, [sp], #4

08008268 <SHTC3_check>:
	else return 0;
}


uint8_t SHTC3_check()
{
 8008268:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status, status2;
	uint8_t data[2];
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 800826a:	4829      	ldr	r0, [pc, #164]	; (8008310 <SHTC3_check+0xa8>)
{
 800826c:	b084      	sub	sp, #16
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 800826e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008272:	2203      	movs	r2, #3
 8008274:	21e0      	movs	r1, #224	; 0xe0
 8008276:	f002 fb1d 	bl	800a8b4 <HAL_I2C_IsDeviceReady>
 800827a:	4604      	mov	r4, r0
	osDelay(2);
 800827c:	2002      	movs	r0, #2
 800827e:	f004 fee5 	bl	800d04c <osDelay>
	if (status == HAL_OK) {
 8008282:	bb9c      	cbnz	r4, 80082ec <SHTC3_check+0x84>
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8008284:	2396      	movs	r3, #150	; 0x96
	uint16_t command = SHTC3_CMD_WAKEUP;
 8008286:	f241 7135 	movw	r1, #5941	; 0x1735
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800828a:	9300      	str	r3, [sp, #0]
	uint16_t command = SHTC3_CMD_WAKEUP;
 800828c:	f8ad 100e 	strh.w	r1, [sp, #14]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8008290:	481f      	ldr	r0, [pc, #124]	; (8008310 <SHTC3_check+0xa8>)
 8008292:	21e0      	movs	r1, #224	; 0xe0
 8008294:	2302      	movs	r3, #2
 8008296:	f10d 020e 	add.w	r2, sp, #14
 800829a:	f001 fefd 	bl	800a098 <HAL_I2C_Master_Transmit>
	if(status == HAL_OK) { return 1; }
 800829e:	4601      	mov	r1, r0
 80082a0:	bb00      	cbnz	r0, 80082e4 <SHTC3_check+0x7c>
		SHTC3_wakeup();
		uint16_t command = SHTC3_CMD_READ_ID;
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80082a2:	2496      	movs	r4, #150	; 0x96
 80082a4:	2302      	movs	r3, #2
 80082a6:	f10d 020e 	add.w	r2, sp, #14
 80082aa:	21e0      	movs	r1, #224	; 0xe0
		uint16_t command = SHTC3_CMD_READ_ID;
 80082ac:	f64c 0cef 	movw	ip, #51439	; 0xc8ef
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80082b0:	4817      	ldr	r0, [pc, #92]	; (8008310 <SHTC3_check+0xa8>)
 80082b2:	9400      	str	r4, [sp, #0]
		uint16_t command = SHTC3_CMD_READ_ID;
 80082b4:	f8ad c00e 	strh.w	ip, [sp, #14]
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80082b8:	f001 feee 	bl	800a098 <HAL_I2C_Master_Transmit>
		status2 = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 2, 150);
 80082bc:	4814      	ldr	r0, [pc, #80]	; (8008310 <SHTC3_check+0xa8>)
 80082be:	9400      	str	r4, [sp, #0]
 80082c0:	2302      	movs	r3, #2
 80082c2:	aa03      	add	r2, sp, #12
 80082c4:	21e1      	movs	r1, #225	; 0xe1
 80082c6:	f001 ffc1 	bl	800a24c <HAL_I2C_Master_Receive>
		  if (status2 == HAL_OK) {
 80082ca:	b9d0      	cbnz	r0, 8008302 <SHTC3_check+0x9a>
			  uint16_t id = data[0] << 8 | data[1];
			  uint16_t code = id & SHTC3_PRODUCT_CODE_MASK;
 80082cc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80082d0:	f640 033f 	movw	r3, #2111	; 0x83f
 80082d4:	ba52      	rev16	r2, r2
			  if (code == 0x807) {
 80082d6:	4013      	ands	r3, r2
 80082d8:	f640 0207 	movw	r2, #2055	; 0x807
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00b      	beq.n	80082f8 <SHTC3_check+0x90>
				  return 1;
			  }
		  } else {printf("NO SHTC3\r\n"); return 0;}
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
	return 0;
}
 80082e0:	b004      	add	sp, #16
 80082e2:	bd10      	pop	{r4, pc}
	else {printf("SHTC3 Wake up fail %x\r\n", status); return 0; }
 80082e4:	480b      	ldr	r0, [pc, #44]	; (8008314 <SHTC3_check+0xac>)
 80082e6:	f007 fe1d 	bl	800ff24 <iprintf>
 80082ea:	e7da      	b.n	80082a2 <SHTC3_check+0x3a>
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 80082ec:	480a      	ldr	r0, [pc, #40]	; (8008318 <SHTC3_check+0xb0>)
 80082ee:	f007 fe7f 	bl	800fff0 <puts>
 80082f2:	2000      	movs	r0, #0
}
 80082f4:	b004      	add	sp, #16
 80082f6:	bd10      	pop	{r4, pc}
				  printf("SHTC3 OK\r\n");
 80082f8:	4808      	ldr	r0, [pc, #32]	; (800831c <SHTC3_check+0xb4>)
 80082fa:	f007 fe79 	bl	800fff0 <puts>
				  return 1;
 80082fe:	2001      	movs	r0, #1
 8008300:	e7ee      	b.n	80082e0 <SHTC3_check+0x78>
		  } else {printf("NO SHTC3\r\n"); return 0;}
 8008302:	4807      	ldr	r0, [pc, #28]	; (8008320 <SHTC3_check+0xb8>)
 8008304:	f007 fe74 	bl	800fff0 <puts>
 8008308:	2000      	movs	r0, #0
}
 800830a:	b004      	add	sp, #16
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	20001104 	.word	0x20001104
 8008314:	08015380 	.word	0x08015380
 8008318:	080153b0 	.word	0x080153b0
 800831c:	08015398 	.word	0x08015398
 8008320:	080153a4 	.word	0x080153a4

08008324 <SHTC3_start_meas>:

uint8_t SHTC3_start_meas(uint8_t mode)
{
 8008324:	b510      	push	{r4, lr}
 8008326:	b084      	sub	sp, #16
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8008328:	2396      	movs	r3, #150	; 0x96
	uint16_t command = SHTC3_CMD_WAKEUP;
 800832a:	f241 7135 	movw	r1, #5941	; 0x1735
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800832e:	9300      	str	r3, [sp, #0]
{
 8008330:	4604      	mov	r4, r0
	uint16_t command = SHTC3_CMD_WAKEUP;
 8008332:	f8ad 100e 	strh.w	r1, [sp, #14]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8008336:	4810      	ldr	r0, [pc, #64]	; (8008378 <SHTC3_start_meas+0x54>)
 8008338:	2302      	movs	r3, #2
 800833a:	f10d 020e 	add.w	r2, sp, #14
 800833e:	21e0      	movs	r1, #224	; 0xe0
 8008340:	f001 feaa 	bl	800a098 <HAL_I2C_Master_Transmit>
	if(status == HAL_OK) { return 1; }
 8008344:	b998      	cbnz	r0, 800836e <SHTC3_start_meas+0x4a>
	HAL_StatusTypeDef status;
	uint16_t command;
	SHTC3_wakeup();
	if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
	else command = SHTC3_CMD_TEMP_HUM_LP;
 8008346:	f645 0264 	movw	r2, #22628	; 0x5864
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800834a:	2396      	movs	r3, #150	; 0x96
	else command = SHTC3_CMD_TEMP_HUM_LP;
 800834c:	f24a 2c7c 	movw	ip, #41596	; 0xa27c
 8008350:	2c00      	cmp	r4, #0
 8008352:	bf18      	it	ne
 8008354:	4694      	movne	ip, r2
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	f10d 020e 	add.w	r2, sp, #14
 800835c:	2302      	movs	r3, #2
 800835e:	21e0      	movs	r1, #224	; 0xe0
 8008360:	4805      	ldr	r0, [pc, #20]	; (8008378 <SHTC3_start_meas+0x54>)
 8008362:	f8ad c00e 	strh.w	ip, [sp, #14]
 8008366:	f001 fe97 	bl	800a098 <HAL_I2C_Master_Transmit>
	return status; //0 = OK
}
 800836a:	b004      	add	sp, #16
 800836c:	bd10      	pop	{r4, pc}
 800836e:	4601      	mov	r1, r0
	else {printf("SHTC3 Wake up fail %x\r\n", status); return 0; }
 8008370:	4802      	ldr	r0, [pc, #8]	; (800837c <SHTC3_start_meas+0x58>)
 8008372:	f007 fdd7 	bl	800ff24 <iprintf>
 8008376:	e7e6      	b.n	8008346 <SHTC3_start_meas+0x22>
 8008378:	20001104 	.word	0x20001104
 800837c:	08015380 	.word	0x08015380

08008380 <SHTC3_read_values>:

uint8_t SHTC3_read_values(uint8_t* result)
{
 8008380:	b500      	push	{lr}
 8008382:	b083      	sub	sp, #12
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)result, 6, 500);
 8008384:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
{
 8008388:	4602      	mov	r2, r0
	status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)result, 6, 500);
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	21e1      	movs	r1, #225	; 0xe1
 800838e:	2306      	movs	r3, #6
 8008390:	4804      	ldr	r0, [pc, #16]	; (80083a4 <SHTC3_read_values+0x24>)
 8008392:	f001 ff5b 	bl	800a24c <HAL_I2C_Master_Receive>
	if (status != HAL_OK) {
		return 0;
	} 	else {
		return 1;
	};
}
 8008396:	fab0 f080 	clz	r0, r0
 800839a:	0940      	lsrs	r0, r0, #5
 800839c:	b003      	add	sp, #12
 800839e:	f85d fb04 	ldr.w	pc, [sp], #4
 80083a2:	bf00      	nop
 80083a4:	20001104 	.word	0x20001104

080083a8 <SHTC3_get_temp>:

float SHTC3_get_temp(uint8_t* result)
{
 80083a8:	b530      	push	{r4, r5, lr}
 80083aa:	8803      	ldrh	r3, [r0, #0]
 80083ac:	b083      	sub	sp, #12
 80083ae:	ba5b      	rev16	r3, r3
 80083b0:	4604      	mov	r4, r0
 80083b2:	b29d      	uxth	r5, r3
	uint16_t raw_temp = result[0] << 8 | result[1];
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80083b4:	2102      	movs	r1, #2
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
 80083b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80083ba:	a801      	add	r0, sp, #4
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
 80083bc:	f88d 3004 	strb.w	r3, [sp, #4]
 80083c0:	f88d 5005 	strb.w	r5, [sp, #5]
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80083c4:	f7fe fde0 	bl	8006f88 <HALcalculateCRC>
	if(result[2] == crc_hal) {
 80083c8:	78a3      	ldrb	r3, [r4, #2]
 80083ca:	4283      	cmp	r3, r0
 80083cc:	d006      	beq.n	80083dc <SHTC3_get_temp+0x34>
		return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
	}
	else {printf("Bad CRC\r\n");};
 80083ce:	480c      	ldr	r0, [pc, #48]	; (8008400 <SHTC3_get_temp+0x58>)
 80083d0:	f007 fe0e 	bl	800fff0 <puts>
	return -1000.0;
 80083d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8008404 <SHTC3_get_temp+0x5c>
}
 80083d8:	b003      	add	sp, #12
 80083da:	bd30      	pop	{r4, r5, pc}
		return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
 80083dc:	ee07 5a90 	vmov	s15, r5
 80083e0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8008408 <SHTC3_get_temp+0x60>
 80083e4:	eddf 6a09 	vldr	s13, [pc, #36]	; 800840c <SHTC3_get_temp+0x64>
 80083e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083f0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8008410 <SHTC3_get_temp+0x68>
 80083f4:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80083f8:	ee30 0a47 	vsub.f32	s0, s0, s14
}
 80083fc:	b003      	add	sp, #12
 80083fe:	bd30      	pop	{r4, r5, pc}
 8008400:	080153c0 	.word	0x080153c0
 8008404:	c47a0000 	.word	0xc47a0000
 8008408:	432f0000 	.word	0x432f0000
 800840c:	477fff00 	.word	0x477fff00
 8008410:	42340000 	.word	0x42340000

08008414 <SHTC3_get_hum>:

float SHTC3_get_hum(uint8_t* result)
{
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800841a:	b083      	sub	sp, #12
 800841c:	ba5b      	rev16	r3, r3
 800841e:	4604      	mov	r4, r0
 8008420:	b29d      	uxth	r5, r3
	uint16_t raw_hum = result[3] << 8 | result[4];
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8008422:	2102      	movs	r1, #2
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
 8008424:	f3c3 2307 	ubfx	r3, r3, #8, #8
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8008428:	a801      	add	r0, sp, #4
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
 800842a:	f88d 3004 	strb.w	r3, [sp, #4]
 800842e:	f88d 5005 	strb.w	r5, [sp, #5]
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8008432:	f7fe fda9 	bl	8006f88 <HALcalculateCRC>
	if(result[5] == crc_hal) {
 8008436:	7963      	ldrb	r3, [r4, #5]
 8008438:	4283      	cmp	r3, r0
 800843a:	d006      	beq.n	800844a <SHTC3_get_hum+0x36>
		return (float)((raw_hum * 100.0f) / 65535.0f);
	}
	else {printf("Bad CRC\r\n");};
 800843c:	480a      	ldr	r0, [pc, #40]	; (8008468 <SHTC3_get_hum+0x54>)
 800843e:	f007 fdd7 	bl	800fff0 <puts>
	return -1000.0;
 8008442:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800846c <SHTC3_get_hum+0x58>
}
 8008446:	b003      	add	sp, #12
 8008448:	bd30      	pop	{r4, r5, pc}
		return (float)((raw_hum * 100.0f) / 65535.0f);
 800844a:	ee07 5a90 	vmov	s15, r5
 800844e:	eddf 6a08 	vldr	s13, [pc, #32]	; 8008470 <SHTC3_get_hum+0x5c>
 8008452:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8008474 <SHTC3_get_hum+0x60>
 8008456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800845a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800845e:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 8008462:	b003      	add	sp, #12
 8008464:	bd30      	pop	{r4, r5, pc}
 8008466:	bf00      	nop
 8008468:	080153c0 	.word	0x080153c0
 800846c:	c47a0000 	.word	0xc47a0000
 8008470:	42c80000 	.word	0x42c80000
 8008474:	477fff00 	.word	0x477fff00

08008478 <BME280_check>:

uint8_t BME280_check()
{
 8008478:	b570      	push	{r4, r5, r6, lr}
		I2C2TCA_NRST();
 800847a:	2201      	movs	r2, #1
{
 800847c:	b086      	sub	sp, #24
		I2C2TCA_NRST();
 800847e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008486:	f001 fc5b 	bl	8009d40 <HAL_GPIO_WritePin>
		osDelay(1);
 800848a:	2001      	movs	r0, #1
 800848c:	f004 fdde 	bl	800d04c <osDelay>
		uint8_t data = 1 << channel;
 8008490:	2501      	movs	r5, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008492:	f04f 31ff 	mov.w	r1, #4294967295
 8008496:	f10d 0617 	add.w	r6, sp, #23
 800849a:	e9cd 5101 	strd	r5, r1, [sp, #4]
 800849e:	462b      	mov	r3, r5
 80084a0:	2200      	movs	r2, #0
 80084a2:	21e4      	movs	r1, #228	; 0xe4
 80084a4:	4819      	ldr	r0, [pc, #100]	; (800850c <BME280_check+0x94>)
 80084a6:	9600      	str	r6, [sp, #0]
		uint8_t data = 1 << channel;
 80084a8:	f88d 5017 	strb.w	r5, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80084ac:	f001 ffae 	bl	800a40c <HAL_I2C_Mem_Write>
	uint8_t value;
	SET_BME280();
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, BMP280_I2C_ADDRESS_1 << 1, 3, 150);
 80084b0:	4816      	ldr	r0, [pc, #88]	; (800850c <BME280_check+0x94>)
 80084b2:	2396      	movs	r3, #150	; 0x96
 80084b4:	2203      	movs	r2, #3
 80084b6:	21ee      	movs	r1, #238	; 0xee
 80084b8:	f002 f9fc 	bl	800a8b4 <HAL_I2C_IsDeviceReady>
 80084bc:	4604      	mov	r4, r0
	osDelay(100);
 80084be:	2064      	movs	r0, #100	; 0x64
 80084c0:	f004 fdc4 	bl	800d04c <osDelay>
	if (status == HAL_OK) {
 80084c4:	b9d4      	cbnz	r4, 80084fc <BME280_check+0x84>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 80084c6:	2308      	movs	r3, #8
 80084c8:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80084cc:	480f      	ldr	r0, [pc, #60]	; (800850c <BME280_check+0x94>)
 80084ce:	9600      	str	r6, [sp, #0]
 80084d0:	462b      	mov	r3, r5
 80084d2:	22d0      	movs	r2, #208	; 0xd0
 80084d4:	21ee      	movs	r1, #238	; 0xee
 80084d6:	f002 f8c5 	bl	800a664 <HAL_I2C_Mem_Read>
    *value = tmp;
 80084da:	f89d 3017 	ldrb.w	r3, [sp, #23]
		i2c_read8(&hi2c2, BMP280_REG_ID, &value, BMP280_I2C_ADDRESS_1 << 1);
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 80084de:	2b60      	cmp	r3, #96	; 0x60
 80084e0:	d005      	beq.n	80084ee <BME280_check+0x76>
 80084e2:	480b      	ldr	r0, [pc, #44]	; (8008510 <BME280_check+0x98>)
 80084e4:	f007 fd84 	bl	800fff0 <puts>
	} else {printf("BME280 FAILED\r\n"); return 0;}
	return 0;

}
 80084e8:	4620      	mov	r0, r4
 80084ea:	b006      	add	sp, #24
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 80084ee:	4809      	ldr	r0, [pc, #36]	; (8008514 <BME280_check+0x9c>)
 80084f0:	f007 fd7e 	bl	800fff0 <puts>
 80084f4:	462c      	mov	r4, r5
}
 80084f6:	4620      	mov	r0, r4
 80084f8:	b006      	add	sp, #24
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
	} else {printf("BME280 FAILED\r\n"); return 0;}
 80084fc:	4806      	ldr	r0, [pc, #24]	; (8008518 <BME280_check+0xa0>)
 80084fe:	f007 fd77 	bl	800fff0 <puts>
 8008502:	2400      	movs	r4, #0
}
 8008504:	4620      	mov	r0, r4
 8008506:	b006      	add	sp, #24
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	bf00      	nop
 800850c:	20001104 	.word	0x20001104
 8008510:	080153d8 	.word	0x080153d8
 8008514:	080153cc 	.word	0x080153cc
 8008518:	080153e4 	.word	0x080153e4

0800851c <BME280_init_config>:

void BME280_init_config(uint8_t conf_mode, uint8_t ovr_temp, uint8_t ovr_press, uint8_t ovr_hum, uint8_t coeff)
{
 800851c:	e92d 43e0 	stmdb	sp!, {r5, r6, r7, r8, r9, lr}
 8008520:	b086      	sub	sp, #24
 8008522:	4605      	mov	r5, r0
 8008524:	460f      	mov	r7, r1
 8008526:	4690      	mov	r8, r2
		I2C2TCA_NRST();
 8008528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800852c:	2201      	movs	r2, #1
 800852e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
{
 8008532:	461e      	mov	r6, r3
 8008534:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
		I2C2TCA_NRST();
 8008538:	f001 fc02 	bl	8009d40 <HAL_GPIO_WritePin>
		osDelay(1);
 800853c:	2001      	movs	r0, #1
 800853e:	f004 fd85 	bl	800d04c <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008542:	f04f 32ff 	mov.w	r2, #4294967295
		uint8_t data = 1 << channel;
 8008546:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008548:	9202      	str	r2, [sp, #8]
 800854a:	f10d 0217 	add.w	r2, sp, #23
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	9200      	str	r2, [sp, #0]
 8008552:	21e4      	movs	r1, #228	; 0xe4
 8008554:	4813      	ldr	r0, [pc, #76]	; (80085a4 <BME280_init_config+0x88>)
		uint8_t data = 1 << channel;
 8008556:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800855a:	2200      	movs	r2, #0
 800855c:	f001 ff56 	bl	800a40c <HAL_I2C_Mem_Write>
	SET_BME280();
//	bmp280_init_default_params(&bmp280.params);

	bmp280.params.filter = coeff;
 8008560:	4811      	ldr	r0, [pc, #68]	; (80085a8 <BME280_init_config+0x8c>)
	bmp280.params.oversampling_pressure = ovr_press;
	bmp280.params.oversampling_temperature = ovr_temp;
	bmp280.params.oversampling_humidity = ovr_hum;
//	bmp280.params.standby = BMP280_STANDBY_250;
	bmp280.addr = BMP280_I2C_ADDRESS_1;
	bmp280.i2c = &hi2c2;
 8008562:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <BME280_init_config+0x88>)
 8008564:	6283      	str	r3, [r0, #40]	; 0x28

	switch (conf_mode)
 8008566:	2d01      	cmp	r5, #1
	{
	case 1:
		bmp280.params.mode = BMP280_MODE_FORCED;
 8008568:	4601      	mov	r1, r0
	switch (conf_mode)
 800856a:	bf18      	it	ne
 800856c:	2503      	movne	r5, #3
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 800856e:	2377      	movs	r3, #119	; 0x77
		bmp280.params.mode = BMP280_MODE_FORCED;
 8008570:	f801 5f2c 	strb.w	r5, [r1, #44]!
	bmp280.params.filter = coeff;
 8008574:	f880 902d 	strb.w	r9, [r0, #45]	; 0x2d
	bmp280.params.oversampling_pressure = ovr_press;
 8008578:	f880 802e 	strb.w	r8, [r0, #46]	; 0x2e
	bmp280.params.oversampling_temperature = ovr_temp;
 800857c:	f880 702f 	strb.w	r7, [r0, #47]	; 0x2f
	bmp280.params.oversampling_humidity = ovr_hum;
 8008580:	f880 6030 	strb.w	r6, [r0, #48]	; 0x30
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8008584:	8483      	strh	r3, [r0, #36]	; 0x24
		bmp280.params.mode = BMP280_MODE_NORMAL;
		break;
	default:
		bmp280.params.mode = BMP280_MODE_NORMAL;
	  }
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 8008586:	f7f9 fbf5 	bl	8001d74 <bmp280_init>
 800858a:	b128      	cbz	r0, 8008598 <BME280_init_config+0x7c>
 800858c:	4807      	ldr	r0, [pc, #28]	; (80085ac <BME280_init_config+0x90>)
}
 800858e:	b006      	add	sp, #24
 8008590:	e8bd 43e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, lr}
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 8008594:	f007 bd2c 	b.w	800fff0 <puts>
 8008598:	4805      	ldr	r0, [pc, #20]	; (80085b0 <BME280_init_config+0x94>)
}
 800859a:	b006      	add	sp, #24
 800859c:	e8bd 43e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, lr}
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 80085a0:	f007 bd26 	b.w	800fff0 <puts>
 80085a4:	20001104 	.word	0x20001104
 80085a8:	20001344 	.word	0x20001344
 80085ac:	080153f4 	.word	0x080153f4
 80085b0:	08015404 	.word	0x08015404

080085b4 <BME280_get_temp>:

float BME280_get_temp()
{
 80085b4:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 80085b6:	2201      	movs	r2, #1
{
 80085b8:	b089      	sub	sp, #36	; 0x24
		I2C2TCA_NRST();
 80085ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085c2:	f001 fbbd 	bl	8009d40 <HAL_GPIO_WritePin>
		osDelay(1);
 80085c6:	2001      	movs	r0, #1
 80085c8:	f004 fd40 	bl	800d04c <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80085cc:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 80085ce:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80085d0:	f04f 32ff 	mov.w	r2, #4294967295
 80085d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80085d8:	480b      	ldr	r0, [pc, #44]	; (8008608 <BME280_get_temp+0x54>)
 80085da:	9500      	str	r5, [sp, #0]
 80085dc:	2200      	movs	r2, #0
 80085de:	21e4      	movs	r1, #228	; 0xe4
		uint8_t data = 1 << channel;
 80085e0:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80085e4:	f001 ff12 	bl	800a40c <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 80085e8:	4c08      	ldr	r4, [pc, #32]	; (800860c <BME280_get_temp+0x58>)
 80085ea:	4620      	mov	r0, r4
 80085ec:	f7f9 fdb0 	bl	8002150 <bmp280_is_measuring>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d1fa      	bne.n	80085ea <BME280_get_temp+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 80085f4:	462b      	mov	r3, r5
 80085f6:	aa06      	add	r2, sp, #24
 80085f8:	a905      	add	r1, sp, #20
 80085fa:	4804      	ldr	r0, [pc, #16]	; (800860c <BME280_get_temp+0x58>)
 80085fc:	f7f9 ff30 	bl	8002460 <bmp280_read_float>
	return temp;
}
 8008600:	ed9d 0a05 	vldr	s0, [sp, #20]
 8008604:	b009      	add	sp, #36	; 0x24
 8008606:	bd30      	pop	{r4, r5, pc}
 8008608:	20001104 	.word	0x20001104
 800860c:	20001344 	.word	0x20001344

08008610 <BME280_get_press>:

float BME280_get_press()
{
 8008610:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 8008612:	2201      	movs	r2, #1
{
 8008614:	b089      	sub	sp, #36	; 0x24
		I2C2TCA_NRST();
 8008616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800861a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800861e:	f001 fb8f 	bl	8009d40 <HAL_GPIO_WritePin>
		osDelay(1);
 8008622:	2001      	movs	r0, #1
 8008624:	f004 fd12 	bl	800d04c <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008628:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 800862a:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800862c:	f04f 32ff 	mov.w	r2, #4294967295
 8008630:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008634:	480b      	ldr	r0, [pc, #44]	; (8008664 <BME280_get_press+0x54>)
 8008636:	9500      	str	r5, [sp, #0]
 8008638:	2200      	movs	r2, #0
 800863a:	21e4      	movs	r1, #228	; 0xe4
		uint8_t data = 1 << channel;
 800863c:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008640:	f001 fee4 	bl	800a40c <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 8008644:	4c08      	ldr	r4, [pc, #32]	; (8008668 <BME280_get_press+0x58>)
 8008646:	4620      	mov	r0, r4
 8008648:	f7f9 fd82 	bl	8002150 <bmp280_is_measuring>
 800864c:	2800      	cmp	r0, #0
 800864e:	d1fa      	bne.n	8008646 <BME280_get_press+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8008650:	462b      	mov	r3, r5
 8008652:	aa06      	add	r2, sp, #24
 8008654:	a905      	add	r1, sp, #20
 8008656:	4804      	ldr	r0, [pc, #16]	; (8008668 <BME280_get_press+0x58>)
 8008658:	f7f9 ff02 	bl	8002460 <bmp280_read_float>
	return press;
}
 800865c:	ed9d 0a06 	vldr	s0, [sp, #24]
 8008660:	b009      	add	sp, #36	; 0x24
 8008662:	bd30      	pop	{r4, r5, pc}
 8008664:	20001104 	.word	0x20001104
 8008668:	20001344 	.word	0x20001344

0800866c <BME280_get_hum>:

float BME280_get_hum()
{
 800866c:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 800866e:	2201      	movs	r2, #1
{
 8008670:	b089      	sub	sp, #36	; 0x24
		I2C2TCA_NRST();
 8008672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800867a:	f001 fb61 	bl	8009d40 <HAL_GPIO_WritePin>
		osDelay(1);
 800867e:	2001      	movs	r0, #1
 8008680:	f004 fce4 	bl	800d04c <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008684:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 8008686:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8008688:	f04f 32ff 	mov.w	r2, #4294967295
 800868c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008690:	480b      	ldr	r0, [pc, #44]	; (80086c0 <BME280_get_hum+0x54>)
 8008692:	9500      	str	r5, [sp, #0]
 8008694:	2200      	movs	r2, #0
 8008696:	21e4      	movs	r1, #228	; 0xe4
		uint8_t data = 1 << channel;
 8008698:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800869c:	f001 feb6 	bl	800a40c <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 80086a0:	4c08      	ldr	r4, [pc, #32]	; (80086c4 <BME280_get_hum+0x58>)
 80086a2:	4620      	mov	r0, r4
 80086a4:	f7f9 fd54 	bl	8002150 <bmp280_is_measuring>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d1fa      	bne.n	80086a2 <BME280_get_hum+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 80086ac:	462b      	mov	r3, r5
 80086ae:	aa06      	add	r2, sp, #24
 80086b0:	a905      	add	r1, sp, #20
 80086b2:	4804      	ldr	r0, [pc, #16]	; (80086c4 <BME280_get_hum+0x58>)
 80086b4:	f7f9 fed4 	bl	8002460 <bmp280_read_float>
	return hum;
}
 80086b8:	ed9d 0a07 	vldr	s0, [sp, #28]
 80086bc:	b009      	add	sp, #36	; 0x24
 80086be:	bd30      	pop	{r4, r5, pc}
 80086c0:	20001104 	.word	0x20001104
 80086c4:	20001344 	.word	0x20001344

080086c8 <BME280_start_meas>:

void BME280_start_meas()
{
 80086c8:	b500      	push	{lr}
		I2C2TCA_NRST();
 80086ca:	2201      	movs	r2, #1
{
 80086cc:	b087      	sub	sp, #28
		I2C2TCA_NRST();
 80086ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80086d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80086d6:	f001 fb33 	bl	8009d40 <HAL_GPIO_WritePin>
		osDelay(1);
 80086da:	2001      	movs	r0, #1
 80086dc:	f004 fcb6 	bl	800d04c <osDelay>
		uint8_t data = 1 << channel;
 80086e0:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	f10d 0117 	add.w	r1, sp, #23
 80086ea:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80086ee:	9100      	str	r1, [sp, #0]
 80086f0:	4809      	ldr	r0, [pc, #36]	; (8008718 <BME280_start_meas+0x50>)
		uint8_t data = 1 << channel;
 80086f2:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80086f6:	2200      	movs	r2, #0
 80086f8:	21e4      	movs	r1, #228	; 0xe4
 80086fa:	f001 fe87 	bl	800a40c <HAL_I2C_Mem_Write>
	SET_BME280();
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 80086fe:	4807      	ldr	r0, [pc, #28]	; (800871c <BME280_start_meas+0x54>)
 8008700:	f7f9 fcf0 	bl	80020e4 <bmp280_force_measurement>
 8008704:	b110      	cbz	r0, 800870c <BME280_start_meas+0x44>
}
 8008706:	b007      	add	sp, #28
 8008708:	f85d fb04 	ldr.w	pc, [sp], #4
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 800870c:	4804      	ldr	r0, [pc, #16]	; (8008720 <BME280_start_meas+0x58>)
}
 800870e:	b007      	add	sp, #28
 8008710:	f85d eb04 	ldr.w	lr, [sp], #4
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8008714:	f007 bc6c 	b.w	800fff0 <puts>
 8008718:	20001104 	.word	0x20001104
 800871c:	20001344 	.word	0x20001344
 8008720:	08015418 	.word	0x08015418

08008724 <bme280_conf_change>:

void bme280_conf_change(uint8_t sensor_conf)
{
 8008724:	b500      	push	{lr}
 8008726:	b083      	sub	sp, #12
    switch (sensor_conf) {
 8008728:	2809      	cmp	r0, #9
 800872a:	d869      	bhi.n	8008800 <bme280_conf_change+0xdc>
 800872c:	e8df f000 	tbb	[pc, r0]
 8008730:	30261c12 	.word	0x30261c12
 8008734:	564d443a 	.word	0x564d443a
 8008738:	055f      	.short	0x055f
        case 8:
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_2);
        	printf("BME280 set x8, 2 IIR\r\n");
            return;
        case 9:
        	BME280_init_config(1, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
 800873a:	2305      	movs	r3, #5
 800873c:	2001      	movs	r0, #1
 800873e:	9000      	str	r0, [sp, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	4619      	mov	r1, r3
 8008744:	f7ff feea 	bl	800851c <BME280_init_config>
        	printf("BME280 set x16, 2 IIR\r\n");
 8008748:	4832      	ldr	r0, [pc, #200]	; (8008814 <bme280_conf_change+0xf0>)
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
            return ;
    }

}
 800874a:	b003      	add	sp, #12
 800874c:	f85d eb04 	ldr.w	lr, [sp], #4
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
 8008750:	f007 bc4e 	b.w	800fff0 <puts>
        	BME280_init_config(1, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_FILTER_OFF);
 8008754:	2301      	movs	r3, #1
 8008756:	2200      	movs	r2, #0
 8008758:	4618      	mov	r0, r3
 800875a:	9200      	str	r2, [sp, #0]
 800875c:	4619      	mov	r1, r3
 800875e:	461a      	mov	r2, r3
 8008760:	f7ff fedc 	bl	800851c <BME280_init_config>
        	printf("BME280 set x1, no IIR\r\n");
 8008764:	482c      	ldr	r0, [pc, #176]	; (8008818 <bme280_conf_change+0xf4>)
 8008766:	e7f0      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_FILTER_OFF);
 8008768:	2302      	movs	r3, #2
 800876a:	2200      	movs	r2, #0
 800876c:	2001      	movs	r0, #1
 800876e:	9200      	str	r2, [sp, #0]
 8008770:	4619      	mov	r1, r3
 8008772:	461a      	mov	r2, r3
 8008774:	f7ff fed2 	bl	800851c <BME280_init_config>
        	printf("BME280 set x2, no IIR\r\n");
 8008778:	4828      	ldr	r0, [pc, #160]	; (800881c <bme280_conf_change+0xf8>)
 800877a:	e7e6      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_OFF);
 800877c:	2303      	movs	r3, #3
 800877e:	2200      	movs	r2, #0
 8008780:	2001      	movs	r0, #1
 8008782:	9200      	str	r2, [sp, #0]
 8008784:	4619      	mov	r1, r3
 8008786:	461a      	mov	r2, r3
 8008788:	f7ff fec8 	bl	800851c <BME280_init_config>
        	printf("BME280 set x4, no IIR\r\n");
 800878c:	4824      	ldr	r0, [pc, #144]	; (8008820 <bme280_conf_change+0xfc>)
 800878e:	e7dc      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_OFF);
 8008790:	2304      	movs	r3, #4
 8008792:	2200      	movs	r2, #0
 8008794:	2001      	movs	r0, #1
 8008796:	9200      	str	r2, [sp, #0]
 8008798:	4619      	mov	r1, r3
 800879a:	461a      	mov	r2, r3
 800879c:	f7ff febe 	bl	800851c <BME280_init_config>
        	printf("BME280 set x8, no IIR\r\n");
 80087a0:	4820      	ldr	r0, [pc, #128]	; (8008824 <bme280_conf_change+0x100>)
 80087a2:	e7d2      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_OFF);
 80087a4:	2305      	movs	r3, #5
 80087a6:	2200      	movs	r2, #0
 80087a8:	2001      	movs	r0, #1
 80087aa:	9200      	str	r2, [sp, #0]
 80087ac:	4619      	mov	r1, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	f7ff feb4 	bl	800851c <BME280_init_config>
        	printf("BME280 set x16, no IIR\r\n");
 80087b4:	481c      	ldr	r0, [pc, #112]	; (8008828 <bme280_conf_change+0x104>)
 80087b6:	e7c8      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_FILTER_2);
 80087b8:	2101      	movs	r1, #1
 80087ba:	4608      	mov	r0, r1
 80087bc:	9100      	str	r1, [sp, #0]
 80087be:	460b      	mov	r3, r1
 80087c0:	460a      	mov	r2, r1
 80087c2:	f7ff feab 	bl	800851c <BME280_init_config>
        	printf("BME280 set x1, 2 IIR\r\n");
 80087c6:	4819      	ldr	r0, [pc, #100]	; (800882c <bme280_conf_change+0x108>)
 80087c8:	e7bf      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_FILTER_2);
 80087ca:	2302      	movs	r3, #2
 80087cc:	2001      	movs	r0, #1
 80087ce:	9000      	str	r0, [sp, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	4619      	mov	r1, r3
 80087d4:	f7ff fea2 	bl	800851c <BME280_init_config>
        	printf("BME280 set x2, 2 IIR\r\n");
 80087d8:	4815      	ldr	r0, [pc, #84]	; (8008830 <bme280_conf_change+0x10c>)
 80087da:	e7b6      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_2);
 80087dc:	2303      	movs	r3, #3
 80087de:	2001      	movs	r0, #1
 80087e0:	9000      	str	r0, [sp, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	4619      	mov	r1, r3
 80087e6:	f7ff fe99 	bl	800851c <BME280_init_config>
        	printf("BME280 set x4, 2 IIR\r\n");
 80087ea:	4812      	ldr	r0, [pc, #72]	; (8008834 <bme280_conf_change+0x110>)
 80087ec:	e7ad      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_2);
 80087ee:	2304      	movs	r3, #4
 80087f0:	2001      	movs	r0, #1
 80087f2:	9000      	str	r0, [sp, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	4619      	mov	r1, r3
 80087f8:	f7ff fe90 	bl	800851c <BME280_init_config>
        	printf("BME280 set x8, 2 IIR\r\n");
 80087fc:	480e      	ldr	r0, [pc, #56]	; (8008838 <bme280_conf_change+0x114>)
 80087fe:	e7a4      	b.n	800874a <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
 8008800:	2001      	movs	r0, #1
 8008802:	9000      	str	r0, [sp, #0]
 8008804:	2305      	movs	r3, #5
 8008806:	2204      	movs	r2, #4
 8008808:	2102      	movs	r1, #2
 800880a:	f7ff fe87 	bl	800851c <BME280_init_config>
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
 800880e:	480b      	ldr	r0, [pc, #44]	; (800883c <bme280_conf_change+0x118>)
 8008810:	e79b      	b.n	800874a <bme280_conf_change+0x26>
 8008812:	bf00      	nop
 8008814:	08015510 	.word	0x08015510
 8008818:	08015438 	.word	0x08015438
 800881c:	08015450 	.word	0x08015450
 8008820:	08015468 	.word	0x08015468
 8008824:	08015480 	.word	0x08015480
 8008828:	08015498 	.word	0x08015498
 800882c:	080154b0 	.word	0x080154b0
 8008830:	080154c8 	.word	0x080154c8
 8008834:	080154e0 	.word	0x080154e0
 8008838:	080154f8 	.word	0x080154f8
 800883c:	08015528 	.word	0x08015528

08008840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008878 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008844:	f7fe f970 	bl	8006b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008848:	480c      	ldr	r0, [pc, #48]	; (800887c <LoopForever+0x6>)
  ldr r1, =_edata
 800884a:	490d      	ldr	r1, [pc, #52]	; (8008880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800884c:	4a0d      	ldr	r2, [pc, #52]	; (8008884 <LoopForever+0xe>)
  movs r3, #0
 800884e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008850:	e002      	b.n	8008858 <LoopCopyDataInit>

08008852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008856:	3304      	adds	r3, #4

08008858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800885a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800885c:	d3f9      	bcc.n	8008852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800885e:	4a0a      	ldr	r2, [pc, #40]	; (8008888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008860:	4c0a      	ldr	r4, [pc, #40]	; (800888c <LoopForever+0x16>)
  movs r3, #0
 8008862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008864:	e001      	b.n	800886a <LoopFillZerobss>

08008866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008868:	3204      	adds	r2, #4

0800886a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800886a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800886c:	d3fb      	bcc.n	8008866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800886e:	f007 fe4f 	bl	8010510 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008872:	f7fc fdb3 	bl	80053dc <main>

08008876 <LoopForever>:

LoopForever:
    b LoopForever
 8008876:	e7fe      	b.n	8008876 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008878:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800887c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008880:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8008884:	08015a20 	.word	0x08015a20
  ldr r2, =_sbss
 8008888:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 800888c:	200056cc 	.word	0x200056cc

08008890 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008890:	e7fe      	b.n	8008890 <ADC1_IRQHandler>
	...

08008894 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8008894:	b510      	push	{r4, lr}
  if (lock == NULL)
 8008896:	b150      	cbz	r0, 80088ae <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
    return;
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8008898:	4604      	mov	r4, r0
 800889a:	200c      	movs	r0, #12
 800889c:	f005 fc4e 	bl	800e13c <malloc>
 80088a0:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 80088a2:	b148      	cbz	r0, 80088b8 <__retarget_lock_init_recursive+0x24>
static inline void stm32_lock_init(LockingData_t *lock)
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
  {
    lock->basepri[i] = 0;
 80088a4:	2200      	movs	r2, #0
  }
  lock->nesting_level = 0;
 80088a6:	7202      	strb	r2, [r0, #8]
    lock->basepri[i] = 0;
 80088a8:	e9c0 2200 	strd	r2, r2, [r0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 80088ac:	bd10      	pop	{r4, pc}
    errno = EINVAL;
 80088ae:	f007 fe29 	bl	8010504 <__errno>
 80088b2:	2316      	movs	r3, #22
 80088b4:	6003      	str	r3, [r0, #0]
}
 80088b6:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80088b8:	b672      	cpsid	i
  STM32_LOCK_BLOCK();
 80088ba:	f7fd f847 	bl	800594c <Error_Handler>
 80088be:	e7fe      	b.n	80088be <__retarget_lock_init_recursive+0x2a>

080088c0 <__retarget_lock_acquire_recursive>:
 80088c0:	b508      	push	{r3, lr}
 80088c2:	b1a8      	cbz	r0, 80088f0 <__retarget_lock_acquire_recursive+0x30>
 80088c4:	7a03      	ldrb	r3, [r0, #8]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d80e      	bhi.n	80088e8 <__retarget_lock_acquire_recursive+0x28>
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	7202      	strb	r2, [r0, #8]
 80088ce:	f3ef 8211 	mrs	r2, BASEPRI
 80088d2:	f04f 0150 	mov.w	r1, #80	; 0x50
 80088d6:	f381 8811 	msr	BASEPRI, r1
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80088e6:	bd08      	pop	{r3, pc}
 80088e8:	b672      	cpsid	i
 80088ea:	f7fd f82f 	bl	800594c <Error_Handler>
 80088ee:	e7fe      	b.n	80088ee <__retarget_lock_acquire_recursive+0x2e>
 80088f0:	b672      	cpsid	i
 80088f2:	f7fd f82b 	bl	800594c <Error_Handler>
 80088f6:	e7fe      	b.n	80088f6 <__retarget_lock_acquire_recursive+0x36>

080088f8 <__retarget_lock_release_recursive>:
 80088f8:	b508      	push	{r3, lr}
 80088fa:	b170      	cbz	r0, 800891a <__retarget_lock_release_recursive+0x22>
 80088fc:	7a03      	ldrb	r3, [r0, #8]
 80088fe:	3b01      	subs	r3, #1
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b01      	cmp	r3, #1
 8008904:	7203      	strb	r3, [r0, #8]
 8008906:	d804      	bhi.n	8008912 <__retarget_lock_release_recursive+0x1a>
 8008908:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	bd08      	pop	{r3, pc}
 8008912:	b672      	cpsid	i
 8008914:	f7fd f81a 	bl	800594c <Error_Handler>
 8008918:	e7fe      	b.n	8008918 <__retarget_lock_release_recursive+0x20>
 800891a:	b672      	cpsid	i
 800891c:	f7fd f816 	bl	800594c <Error_Handler>
 8008920:	e7fe      	b.n	8008920 <__retarget_lock_release_recursive+0x28>
 8008922:	bf00      	nop

08008924 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008924:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008926:	2003      	movs	r0, #3
 8008928:	f000 fcf4 	bl	8009314 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800892c:	200f      	movs	r0, #15
 800892e:	f7fe f845 	bl	80069bc <HAL_InitTick>
 8008932:	b110      	cbz	r0, 800893a <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8008934:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8008936:	4620      	mov	r0, r4
 8008938:	bd10      	pop	{r4, pc}
 800893a:	4604      	mov	r4, r0
    HAL_MspInit();
 800893c:	f7fd fe64 	bl	8006608 <HAL_MspInit>
}
 8008940:	4620      	mov	r0, r4
 8008942:	bd10      	pop	{r4, pc}

08008944 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008944:	4a03      	ldr	r2, [pc, #12]	; (8008954 <HAL_IncTick+0x10>)
 8008946:	4b04      	ldr	r3, [pc, #16]	; (8008958 <HAL_IncTick+0x14>)
 8008948:	6811      	ldr	r1, [r2, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	440b      	add	r3, r1
 800894e:	6013      	str	r3, [r2, #0]
}
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20001420 	.word	0x20001420
 8008958:	20000010 	.word	0x20000010

0800895c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800895c:	4b01      	ldr	r3, [pc, #4]	; (8008964 <HAL_GetTick+0x8>)
 800895e:	6818      	ldr	r0, [r3, #0]
}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20001420 	.word	0x20001420

08008968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800896c:	f7ff fff6 	bl	800895c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008970:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8008972:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8008974:	d002      	beq.n	800897c <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8008976:	4b04      	ldr	r3, [pc, #16]	; (8008988 <HAL_Delay+0x20>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800897c:	f7ff ffee 	bl	800895c <HAL_GetTick>
 8008980:	1b43      	subs	r3, r0, r5
 8008982:	42a3      	cmp	r3, r4
 8008984:	d3fa      	bcc.n	800897c <HAL_Delay+0x14>
  {
  }
}
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20000010 	.word	0x20000010

0800898c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800898c:	b530      	push	{r4, r5, lr}
 800898e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008990:	2300      	movs	r3, #0
 8008992:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008994:	2800      	cmp	r0, #0
 8008996:	f000 80b1 	beq.w	8008afc <HAL_ADC_Init+0x170>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800899a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800899c:	4604      	mov	r4, r0
 800899e:	2d00      	cmp	r5, #0
 80089a0:	f000 8088 	beq.w	8008ab4 <HAL_ADC_Init+0x128>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80089a4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80089a6:	6893      	ldr	r3, [r2, #8]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	d505      	bpl.n	80089b8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80089ac:	6893      	ldr	r3, [r2, #8]
 80089ae:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80089b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80089b6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80089b8:	6893      	ldr	r3, [r2, #8]
 80089ba:	00dd      	lsls	r5, r3, #3
 80089bc:	d419      	bmi.n	80089f2 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80089be:	4b5d      	ldr	r3, [pc, #372]	; (8008b34 <HAL_ADC_Init+0x1a8>)
 80089c0:	485d      	ldr	r0, [pc, #372]	; (8008b38 <HAL_ADC_Init+0x1ac>)
 80089c2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80089c4:	6891      	ldr	r1, [r2, #8]
 80089c6:	099b      	lsrs	r3, r3, #6
 80089c8:	fba0 0303 	umull	r0, r3, r0, r3
 80089cc:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80089d0:	099b      	lsrs	r3, r3, #6
 80089d2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80089d6:	3301      	adds	r3, #1
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80089de:	6091      	str	r1, [r2, #8]
 80089e0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80089e2:	9b01      	ldr	r3, [sp, #4]
 80089e4:	b12b      	cbz	r3, 80089f2 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80089ec:	9b01      	ldr	r3, [sp, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1f9      	bne.n	80089e6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80089f2:	6893      	ldr	r3, [r2, #8]
 80089f4:	00d8      	lsls	r0, r3, #3
 80089f6:	d44f      	bmi.n	8008a98 <HAL_ADC_Init+0x10c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80089fa:	f043 0310 	orr.w	r3, r3, #16
 80089fe:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a00:	6da3      	ldr	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8008a02:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a04:	4303      	orrs	r3, r0
 8008a06:	65a3      	str	r3, [r4, #88]	; 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008a08:	6893      	ldr	r3, [r2, #8]
 8008a0a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008a0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a10:	d149      	bne.n	8008aa6 <HAL_ADC_Init+0x11a>
 8008a12:	06d9      	lsls	r1, r3, #27
 8008a14:	d447      	bmi.n	8008aa6 <HAL_ADC_Init+0x11a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a16:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008a1c:	f043 0302 	orr.w	r3, r3, #2
 8008a20:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a22:	6893      	ldr	r3, [r2, #8]
 8008a24:	07db      	lsls	r3, r3, #31
 8008a26:	d40a      	bmi.n	8008a3e <HAL_ADC_Init+0xb2>
 8008a28:	4b44      	ldr	r3, [pc, #272]	; (8008b3c <HAL_ADC_Init+0x1b0>)
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	07dd      	lsls	r5, r3, #31
 8008a2e:	d406      	bmi.n	8008a3e <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008a30:	4943      	ldr	r1, [pc, #268]	; (8008b40 <HAL_ADC_Init+0x1b4>)
 8008a32:	6865      	ldr	r5, [r4, #4]
 8008a34:	688b      	ldr	r3, [r1, #8]
 8008a36:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8008a3a:	432b      	orrs	r3, r5
 8008a3c:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8008a3e:	68e5      	ldr	r5, [r4, #12]
 8008a40:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008a42:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8008a46:	432b      	orrs	r3, r5
 8008a48:	68a5      	ldr	r5, [r4, #8]
 8008a4a:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a4c:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a4e:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8008a50:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a58:	d04b      	beq.n	8008af2 <HAL_ADC_Init+0x166>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008a5c:	b121      	cbz	r1, 8008a68 <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8008a5e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a60:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008a64:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a66:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008a68:	68d5      	ldr	r5, [r2, #12]
 8008a6a:	4936      	ldr	r1, [pc, #216]	; (8008b44 <HAL_ADC_Init+0x1b8>)
 8008a6c:	4029      	ands	r1, r5
 8008a6e:	4319      	orrs	r1, r3
 8008a70:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008a72:	6893      	ldr	r3, [r2, #8]
 8008a74:	0759      	lsls	r1, r3, #29
 8008a76:	d523      	bpl.n	8008ac0 <HAL_ADC_Init+0x134>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008a78:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008a7a:	6923      	ldr	r3, [r4, #16]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d040      	beq.n	8008b02 <HAL_ADC_Init+0x176>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008a80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008a82:	f023 030f 	bic.w	r3, r3, #15
 8008a86:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008a88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a8a:	f023 0303 	bic.w	r3, r3, #3
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8008a94:	b003      	add	sp, #12
 8008a96:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008a98:	6893      	ldr	r3, [r2, #8]
 8008a9a:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a9e:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008aa2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008aa4:	d0b5      	beq.n	8008a12 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8008aa8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008aaa:	f043 0310 	orr.w	r3, r3, #16
 8008aae:	6563      	str	r3, [r4, #84]	; 0x54
}
 8008ab0:	b003      	add	sp, #12
 8008ab2:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8008ab4:	f7fd fdce 	bl	8006654 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8008ab8:	65a5      	str	r5, [r4, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8008aba:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8008abe:	e771      	b.n	80089a4 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008ac0:	6893      	ldr	r3, [r2, #8]
 8008ac2:	071b      	lsls	r3, r3, #28
 8008ac4:	d4d9      	bmi.n	8008a7a <HAL_ADC_Init+0xee>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008ac6:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008ac8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008acc:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008ace:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008ad2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008ad4:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008ad8:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008adc:	430b      	orrs	r3, r1
 8008ade:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8008ae0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d014      	beq.n	8008b12 <HAL_ADC_Init+0x186>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008ae8:	6913      	ldr	r3, [r2, #16]
 8008aea:	f023 0301 	bic.w	r3, r3, #1
 8008aee:	6113      	str	r3, [r2, #16]
 8008af0:	e7c3      	b.n	8008a7a <HAL_ADC_Init+0xee>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008af2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008af4:	3901      	subs	r1, #1
 8008af6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8008afa:	e7ae      	b.n	8008a5a <HAL_ADC_Init+0xce>
    return HAL_ERROR;
 8008afc:	2001      	movs	r0, #1
}
 8008afe:	b003      	add	sp, #12
 8008b00:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008b02:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008b04:	69e3      	ldr	r3, [r4, #28]
 8008b06:	f021 010f 	bic.w	r1, r1, #15
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8008b10:	e7ba      	b.n	8008a88 <HAL_ADC_Init+0xfc>
        MODIFY_REG(hadc->Instance->CFGR2,
 8008b12:	6911      	ldr	r1, [r2, #16]
 8008b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b16:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8008b18:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8008b1c:	f021 0104 	bic.w	r1, r1, #4
 8008b20:	432b      	orrs	r3, r5
 8008b22:	430b      	orrs	r3, r1
 8008b24:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008b26:	430b      	orrs	r3, r1
 8008b28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	f043 0301 	orr.w	r3, r3, #1
 8008b30:	6113      	str	r3, [r2, #16]
 8008b32:	e7a2      	b.n	8008a7a <HAL_ADC_Init+0xee>
 8008b34:	20000008 	.word	0x20000008
 8008b38:	053e2d63 	.word	0x053e2d63
 8008b3c:	50040000 	.word	0x50040000
 8008b40:	50040300 	.word	0x50040300
 8008b44:	fff0c007 	.word	0xfff0c007

08008b48 <HAL_ADC_ConvCpltCallback>:
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop

08008b4c <HAL_ADC_ConvHalfCpltCallback>:
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop

08008b50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008b50:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008b52:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008b54:	f7ff fffa 	bl	8008b4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008b58:	bd08      	pop	{r3, pc}
 8008b5a:	bf00      	nop

08008b5c <HAL_ADC_ErrorCallback>:
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop

08008b60 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b60:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008b62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b64:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8008b68:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008b6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008b6c:	d11d      	bne.n	8008baa <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008b6e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b74:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008b76:	680a      	ldr	r2, [r1, #0]
 8008b78:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008b7c:	68ca      	ldr	r2, [r1, #12]
 8008b7e:	d01b      	beq.n	8008bb8 <ADC_DMAConvCplt+0x58>
 8008b80:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8008b84:	d10d      	bne.n	8008ba2 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008b86:	68ca      	ldr	r2, [r1, #12]
 8008b88:	0494      	lsls	r4, r2, #18
 8008b8a:	d40a      	bmi.n	8008ba2 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b92:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b96:	04d1      	lsls	r1, r2, #19
 8008b98:	d403      	bmi.n	8008ba2 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b9c:	f042 0201 	orr.w	r2, r2, #1
 8008ba0:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff ffd0 	bl	8008b48 <HAL_ADC_ConvCpltCallback>
}
 8008ba8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008baa:	06d2      	lsls	r2, r2, #27
 8008bac:	d40a      	bmi.n	8008bc4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb6:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008bb8:	0790      	lsls	r0, r2, #30
 8008bba:	d5e7      	bpl.n	8008b8c <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff ffc3 	bl	8008b48 <HAL_ADC_ConvCpltCallback>
 8008bc2:	e7f1      	b.n	8008ba8 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff ffc9 	bl	8008b5c <HAL_ADC_ErrorCallback>
}
 8008bca:	bd10      	pop	{r4, pc}

08008bcc <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bcc:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8008bce:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008bd0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd6:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008bd8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008bda:	f043 0304 	orr.w	r3, r3, #4
 8008bde:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008be0:	f7ff ffbc 	bl	8008b5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008be4:	bd08      	pop	{r3, pc}
 8008be6:	bf00      	nop

08008be8 <HAL_ADC_ConfigChannel>:
{
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8008bea:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
{
 8008bee:	b083      	sub	sp, #12
 8008bf0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8008bf2:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8008bf4:	f04f 0000 	mov.w	r0, #0
 8008bf8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8008bfa:	f000 80e5 	beq.w	8008dc8 <HAL_ADC_ConfigChannel+0x1e0>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008bfe:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8008c00:	2001      	movs	r0, #1
 8008c02:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008c06:	68a2      	ldr	r2, [r4, #8]
 8008c08:	f012 0204 	ands.w	r2, r2, #4
 8008c0c:	d155      	bne.n	8008cba <HAL_ADC_ConfigChannel+0xd2>
    if (sConfig->Rank <= 5U)
 8008c0e:	6848      	ldr	r0, [r1, #4]
 8008c10:	2805      	cmp	r0, #5
 8008c12:	d965      	bls.n	8008ce0 <HAL_ADC_ConfigChannel+0xf8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008c14:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8008c16:	261f      	movs	r6, #31
 8008c18:	f000 001f 	and.w	r0, r0, #31
 8008c1c:	4086      	lsls	r6, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008c1e:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8008c22:	43f6      	mvns	r6, r6
 8008c24:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008c26:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8008c2a:	f3c5 6c84 	ubfx	ip, r5, #26, #5
 8008c2e:	f85e 5002 	ldr.w	r5, [lr, r2]
 8008c32:	fa0c f000 	lsl.w	r0, ip, r0
 8008c36:	46f4      	mov	ip, lr
 8008c38:	ea05 0e06 	and.w	lr, r5, r6
 8008c3c:	ea40 000e 	orr.w	r0, r0, lr
 8008c40:	f84c 0002 	str.w	r0, [ip, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008c44:	68a2      	ldr	r2, [r4, #8]
 8008c46:	0755      	lsls	r5, r2, #29
 8008c48:	d545      	bpl.n	8008cd6 <HAL_ADC_ConfigChannel+0xee>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008c4a:	68a2      	ldr	r2, [r4, #8]
 8008c4c:	680d      	ldr	r5, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c4e:	68a2      	ldr	r2, [r4, #8]
 8008c50:	07d0      	lsls	r0, r2, #31
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008c52:	462e      	mov	r6, r5
 8008c54:	d412      	bmi.n	8008c7c <HAL_ADC_ConfigChannel+0x94>
 8008c56:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8008c58:	4ab5      	ldr	r2, [pc, #724]	; (8008f30 <HAL_ADC_ConfigChannel+0x348>)
 8008c5a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8008c5e:	f007 0c18 	and.w	ip, r7, #24
 8008c62:	fa22 f20c 	lsr.w	r2, r2, ip
 8008c66:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 8008c6a:	402a      	ands	r2, r5
 8008c6c:	ea20 000c 	bic.w	r0, r0, ip
 8008c70:	4302      	orrs	r2, r0
 8008c72:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c76:	4aaf      	ldr	r2, [pc, #700]	; (8008f34 <HAL_ADC_ConfigChannel+0x34c>)
 8008c78:	4297      	cmp	r7, r2
 8008c7a:	d069      	beq.n	8008d50 <HAL_ADC_ConfigChannel+0x168>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008c7c:	4aae      	ldr	r2, [pc, #696]	; (8008f38 <HAL_ADC_ConfigChannel+0x350>)
 8008c7e:	4216      	tst	r6, r2
 8008c80:	d027      	beq.n	8008cd2 <HAL_ADC_ConfigChannel+0xea>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008c82:	4aae      	ldr	r2, [pc, #696]	; (8008f3c <HAL_ADC_ConfigChannel+0x354>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008c84:	49ae      	ldr	r1, [pc, #696]	; (8008f40 <HAL_ADC_ConfigChannel+0x358>)
 8008c86:	6890      	ldr	r0, [r2, #8]
 8008c88:	428e      	cmp	r6, r1
 8008c8a:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8008c8e:	d01d      	beq.n	8008ccc <HAL_ADC_ConfigChannel+0xe4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008c90:	49ac      	ldr	r1, [pc, #688]	; (8008f44 <HAL_ADC_ConfigChannel+0x35c>)
 8008c92:	428e      	cmp	r6, r1
 8008c94:	f000 809b 	beq.w	8008dce <HAL_ADC_ConfigChannel+0x1e6>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008c98:	49ab      	ldr	r1, [pc, #684]	; (8008f48 <HAL_ADC_ConfigChannel+0x360>)
 8008c9a:	428e      	cmp	r6, r1
 8008c9c:	d119      	bne.n	8008cd2 <HAL_ADC_ConfigChannel+0xea>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008c9e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8008ca2:	d116      	bne.n	8008cd2 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_VREFINT_INSTANCE(hadc))
 8008ca4:	49a9      	ldr	r1, [pc, #676]	; (8008f4c <HAL_ADC_ConfigChannel+0x364>)
 8008ca6:	428c      	cmp	r4, r1
 8008ca8:	d113      	bne.n	8008cd2 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008caa:	6891      	ldr	r1, [r2, #8]
 8008cac:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8008cb0:	4329      	orrs	r1, r5
 8008cb2:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8008cb6:	6091      	str	r1, [r2, #8]
}
 8008cb8:	e003      	b.n	8008cc2 <HAL_ADC_ConfigChannel+0xda>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008cba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cbc:	f042 0220 	orr.w	r2, r2, #32
 8008cc0:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8008cc8:	b003      	add	sp, #12
 8008cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008ccc:	0201      	lsls	r1, r0, #8
 8008cce:	f140 80cb 	bpl.w	8008e68 <HAL_ADC_ConfigChannel+0x280>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	e7f5      	b.n	8008cc2 <HAL_ADC_ConfigChannel+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008cd6:	68a2      	ldr	r2, [r4, #8]
 8008cd8:	0712      	lsls	r2, r2, #28
 8008cda:	d509      	bpl.n	8008cf0 <HAL_ADC_ConfigChannel+0x108>
 8008cdc:	680d      	ldr	r5, [r1, #0]
}
 8008cde:	e7b6      	b.n	8008c4e <HAL_ADC_ConfigChannel+0x66>
      switch (sConfig->Rank)
 8008ce0:	3802      	subs	r0, #2
 8008ce2:	2803      	cmp	r0, #3
 8008ce4:	f200 81d3 	bhi.w	800908e <HAL_ADC_ConfigChannel+0x4a6>
 8008ce8:	e8df f000 	tbb	[pc, r0]
 8008cec:	918c8782 	.word	0x918c8782
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008cf0:	6808      	ldr	r0, [r1, #0]
  MODIFY_REG(*preg,
 8008cf2:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008cf4:	0dc5      	lsrs	r5, r0, #23
 8008cf6:	f104 0614 	add.w	r6, r4, #20
 8008cfa:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8008cfe:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8008d02:	fa02 f700 	lsl.w	r7, r2, r0
 8008d06:	f04f 0c07 	mov.w	ip, #7
 8008d0a:	5972      	ldr	r2, [r6, r5]
 8008d0c:	fa0c f000 	lsl.w	r0, ip, r0
 8008d10:	ea22 0200 	bic.w	r2, r2, r0
 8008d14:	433a      	orrs	r2, r7
 8008d16:	5172      	str	r2, [r6, r5]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008d18:	e9d1 0604 	ldrd	r0, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008d1c:	2804      	cmp	r0, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008d1e:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008d20:	f000 80c4 	beq.w	8008eac <HAL_ADC_ConfigChannel+0x2c4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d24:	f104 0560 	add.w	r5, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008d28:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008d2c:	0052      	lsls	r2, r2, #1
  MODIFY_REG(*preg,
 8008d2e:	f855 c020 	ldr.w	ip, [r5, r0, lsl #2]
 8008d32:	4f87      	ldr	r7, [pc, #540]	; (8008f50 <HAL_ADC_ConfigChannel+0x368>)
 8008d34:	4096      	lsls	r6, r2
 8008d36:	680a      	ldr	r2, [r1, #0]
 8008d38:	ea0c 0707 	and.w	r7, ip, r7
 8008d3c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8008d40:	433a      	orrs	r2, r7
 8008d42:	4332      	orrs	r2, r6
 8008d44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008d48:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
 8008d4c:	680d      	ldr	r5, [r1, #0]
}
 8008d4e:	e77e      	b.n	8008c4e <HAL_ADC_ConfigChannel+0x66>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d50:	f1bc 0f00 	cmp.w	ip, #0
 8008d54:	d063      	beq.n	8008e1e <HAL_ADC_ConfigChannel+0x236>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d56:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8008d5a:	2a00      	cmp	r2, #0
 8008d5c:	f000 80fe 	beq.w	8008f5c <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 8008d60:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d64:	3201      	adds	r2, #1
 8008d66:	f002 021f 	and.w	r2, r2, #31
 8008d6a:	2a09      	cmp	r2, #9
 8008d6c:	f240 80f6 	bls.w	8008f5c <HAL_ADC_ConfigChannel+0x374>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d70:	fa95 f0a5 	rbit	r0, r5
  if (value == 0U)
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f000 8183 	beq.w	8009080 <HAL_ADC_ConfigChannel+0x498>
  return __builtin_clz(value);
 8008d7a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d7e:	3001      	adds	r0, #1
 8008d80:	0680      	lsls	r0, r0, #26
 8008d82:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d86:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8008d8a:	2a00      	cmp	r2, #0
 8008d8c:	f000 817d 	beq.w	800908a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8008d90:	fab2 f282 	clz	r2, r2
 8008d94:	3201      	adds	r2, #1
 8008d96:	f002 021f 	and.w	r2, r2, #31
 8008d9a:	2601      	movs	r6, #1
 8008d9c:	fa06 f202 	lsl.w	r2, r6, r2
 8008da0:	4310      	orrs	r0, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da2:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	f000 816d 	beq.w	8009086 <HAL_ADC_ConfigChannel+0x49e>
  return __builtin_clz(value);
 8008dac:	fab5 f585 	clz	r5, r5
 8008db0:	3501      	adds	r5, #1
 8008db2:	f005 051f 	and.w	r5, r5, #31
 8008db6:	2203      	movs	r2, #3
 8008db8:	f06f 061d 	mvn.w	r6, #29
 8008dbc:	fb12 6205 	smlabb	r2, r2, r5, r6
 8008dc0:	0512      	lsls	r2, r2, #20
 8008dc2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008dc6:	e039      	b.n	8008e3c <HAL_ADC_ConfigChannel+0x254>
  __HAL_LOCK(hadc);
 8008dc8:	2002      	movs	r0, #2
}
 8008dca:	b003      	add	sp, #12
 8008dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008dce:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8008dd2:	f47f af7e 	bne.w	8008cd2 <HAL_ADC_ConfigChannel+0xea>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008dd6:	f1a1 41f7 	sub.w	r1, r1, #2071986176	; 0x7b800000
 8008dda:	428c      	cmp	r4, r1
 8008ddc:	f47f af79 	bne.w	8008cd2 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008de0:	6891      	ldr	r1, [r2, #8]
 8008de2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8008de6:	4329      	orrs	r1, r5
 8008de8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008dec:	6091      	str	r1, [r2, #8]
}
 8008dee:	e768      	b.n	8008cc2 <HAL_ADC_ConfigChannel+0xda>
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8008df0:	200c      	movs	r0, #12
 8008df2:	6048      	str	r0, [r1, #4]
          break;
 8008df4:	f46f 36f8 	mvn.w	r6, #126976	; 0x1f000
 8008df8:	e714      	b.n	8008c24 <HAL_ADC_ConfigChannel+0x3c>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8008dfa:	2012      	movs	r0, #18
 8008dfc:	6048      	str	r0, [r1, #4]
          break;
 8008dfe:	f46f 06f8 	mvn.w	r6, #8126464	; 0x7c0000
 8008e02:	e70f      	b.n	8008c24 <HAL_ADC_ConfigChannel+0x3c>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8008e04:	2018      	movs	r0, #24
 8008e06:	6048      	str	r0, [r1, #4]
          break;
 8008e08:	f06f 56f8 	mvn.w	r6, #520093696	; 0x1f000000
 8008e0c:	e70a      	b.n	8008c24 <HAL_ADC_ConfigChannel+0x3c>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8008e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e12:	604a      	str	r2, [r1, #4]
          break;
 8008e14:	2000      	movs	r0, #0
 8008e16:	f06f 061f 	mvn.w	r6, #31
 8008e1a:	2204      	movs	r2, #4
 8008e1c:	e702      	b.n	8008c24 <HAL_ADC_ConfigChannel+0x3c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008e1e:	0eaa      	lsrs	r2, r5, #26
 8008e20:	3201      	adds	r2, #1
 8008e22:	f002 051f 	and.w	r5, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e26:	2d09      	cmp	r5, #9
 8008e28:	d874      	bhi.n	8008f14 <HAL_ADC_ConfigChannel+0x32c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008e2a:	0690      	lsls	r0, r2, #26
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	40aa      	lsls	r2, r5
 8008e30:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8008e34:	4310      	orrs	r0, r2
 8008e36:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8008e3a:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e3c:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008e3e:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 8008e40:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008e42:	f104 0614 	add.w	r6, r4, #20
 8008e46:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8008e4a:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8008e4e:	fa00 f702 	lsl.w	r7, r0, r2
 8008e52:	f04f 0c07 	mov.w	ip, #7
 8008e56:	5970      	ldr	r0, [r6, r5]
 8008e58:	fa0c f202 	lsl.w	r2, ip, r2
 8008e5c:	ea20 0202 	bic.w	r2, r0, r2
 8008e60:	433a      	orrs	r2, r7
 8008e62:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008e64:	680e      	ldr	r6, [r1, #0]
}
 8008e66:	e709      	b.n	8008c7c <HAL_ADC_ConfigChannel+0x94>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e68:	4938      	ldr	r1, [pc, #224]	; (8008f4c <HAL_ADC_ConfigChannel+0x364>)
 8008e6a:	428c      	cmp	r4, r1
 8008e6c:	f47f af31 	bne.w	8008cd2 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008e70:	6891      	ldr	r1, [r2, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008e72:	4838      	ldr	r0, [pc, #224]	; (8008f54 <HAL_ADC_ConfigChannel+0x36c>)
 8008e74:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8008e78:	4329      	orrs	r1, r5
 8008e7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008e7e:	6091      	str	r1, [r2, #8]
 8008e80:	6802      	ldr	r2, [r0, #0]
 8008e82:	4935      	ldr	r1, [pc, #212]	; (8008f58 <HAL_ADC_ConfigChannel+0x370>)
 8008e84:	0992      	lsrs	r2, r2, #6
 8008e86:	fba1 1202 	umull	r1, r2, r1, r2
 8008e8a:	0992      	lsrs	r2, r2, #6
 8008e8c:	3201      	adds	r2, #1
 8008e8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008e92:	0092      	lsls	r2, r2, #2
 8008e94:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8008e96:	9a01      	ldr	r2, [sp, #4]
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	f43f af1a 	beq.w	8008cd2 <HAL_ADC_ConfigChannel+0xea>
            wait_loop_index--;
 8008e9e:	9a01      	ldr	r2, [sp, #4]
 8008ea0:	3a01      	subs	r2, #1
 8008ea2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8008ea4:	9a01      	ldr	r2, [sp, #4]
 8008ea6:	2a00      	cmp	r2, #0
 8008ea8:	d1f9      	bne.n	8008e9e <HAL_ADC_ConfigChannel+0x2b6>
 8008eaa:	e712      	b.n	8008cd2 <HAL_ADC_ConfigChannel+0xea>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008eac:	680d      	ldr	r5, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008eae:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008eb0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008eb2:	f3c5 0012 	ubfx	r0, r5, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008eb6:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d173      	bne.n	8008fa6 <HAL_ADC_ConfigChannel+0x3be>
 8008ebe:	f3c5 6684 	ubfx	r6, r5, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008ec2:	42b2      	cmp	r2, r6
 8008ec4:	f000 80c0 	beq.w	8009048 <HAL_ADC_ConfigChannel+0x460>
 8008ec8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008eca:	6e60      	ldr	r0, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ecc:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008ed0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8008ed4:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8008ed8:	42b0      	cmp	r0, r6
 8008eda:	f000 80a5 	beq.w	8009028 <HAL_ADC_ConfigChannel+0x440>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008ede:	6890      	ldr	r0, [r2, #8]
 8008ee0:	6890      	ldr	r0, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ee2:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008ee6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008eea:	f3c5 6684 	ubfx	r6, r5, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008eee:	4286      	cmp	r6, r0
 8008ef0:	f000 808a 	beq.w	8009008 <HAL_ADC_ConfigChannel+0x420>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008ef4:	68d0      	ldr	r0, [r2, #12]
 8008ef6:	68d0      	ldr	r0, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ef8:	f102 060c 	add.w	r6, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008efc:	f3c0 6284 	ubfx	r2, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008f00:	f3c5 6084 	ubfx	r0, r5, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008f04:	4290      	cmp	r0, r2
 8008f06:	f47f aea2 	bne.w	8008c4e <HAL_ADC_ConfigChannel+0x66>
  MODIFY_REG(*preg,
 8008f0a:	6832      	ldr	r2, [r6, #0]
 8008f0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008f10:	6032      	str	r2, [r6, #0]
 8008f12:	e6e3      	b.n	8008cdc <HAL_ADC_ConfigChannel+0xf4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f14:	0690      	lsls	r0, r2, #26
 8008f16:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8008f1a:	3a1e      	subs	r2, #30
 8008f1c:	2601      	movs	r6, #1
 8008f1e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8008f22:	0512      	lsls	r2, r2, #20
 8008f24:	fa06 f505 	lsl.w	r5, r6, r5
 8008f28:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008f2c:	4328      	orrs	r0, r5
 8008f2e:	e785      	b.n	8008e3c <HAL_ADC_ConfigChannel+0x254>
 8008f30:	0007ffff 	.word	0x0007ffff
 8008f34:	407f0000 	.word	0x407f0000
 8008f38:	80080000 	.word	0x80080000
 8008f3c:	50040300 	.word	0x50040300
 8008f40:	c7520000 	.word	0xc7520000
 8008f44:	cb840000 	.word	0xcb840000
 8008f48:	80000001 	.word	0x80000001
 8008f4c:	50040000 	.word	0x50040000
 8008f50:	03fff000 	.word	0x03fff000
 8008f54:	20000008 	.word	0x20000008
 8008f58:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f5c:	fa95 f0a5 	rbit	r0, r5
  if (value == 0U)
 8008f60:	2800      	cmp	r0, #0
 8008f62:	f000 808a 	beq.w	800907a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8008f66:	fab0 f080 	clz	r0, r0
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	0680      	lsls	r0, r0, #26
 8008f6e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f72:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d07d      	beq.n	8009076 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8008f7a:	fab2 f282 	clz	r2, r2
 8008f7e:	3201      	adds	r2, #1
 8008f80:	f002 021f 	and.w	r2, r2, #31
 8008f84:	2601      	movs	r6, #1
 8008f86:	fa06 f202 	lsl.w	r2, r6, r2
 8008f8a:	4310      	orrs	r0, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f8c:	fa95 f5a5 	rbit	r5, r5
  if (value == 0U)
 8008f90:	2d00      	cmp	r5, #0
 8008f92:	d06d      	beq.n	8009070 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8008f94:	fab5 f285 	clz	r2, r5
 8008f98:	3201      	adds	r2, #1
 8008f9a:	f002 021f 	and.w	r2, r2, #31
 8008f9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008fa2:	0512      	lsls	r2, r2, #20
 8008fa4:	e74a      	b.n	8008e3c <HAL_ADC_ConfigChannel+0x254>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fa6:	fa95 f0a5 	rbit	r0, r5
  if (value == 0U)
 8008faa:	b118      	cbz	r0, 8008fb4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8008fac:	fab0 f080 	clz	r0, r0
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008fb0:	4282      	cmp	r2, r0
 8008fb2:	d049      	beq.n	8009048 <HAL_ADC_ConfigChannel+0x460>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008fb4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fb6:	6e60      	ldr	r0, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008fb8:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008fbc:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8008fc0:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc4:	fa95 f6a5 	rbit	r6, r5
  if (value == 0U)
 8008fc8:	b11e      	cbz	r6, 8008fd2 <HAL_ADC_ConfigChannel+0x3ea>
  return __builtin_clz(value);
 8008fca:	fab6 f686 	clz	r6, r6
 8008fce:	42b0      	cmp	r0, r6
 8008fd0:	d02a      	beq.n	8009028 <HAL_ADC_ConfigChannel+0x440>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008fd2:	6890      	ldr	r0, [r2, #8]
 8008fd4:	6890      	ldr	r0, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008fd6:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008fda:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fde:	fa95 f6a5 	rbit	r6, r5
  if (value == 0U)
 8008fe2:	b11e      	cbz	r6, 8008fec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8008fe4:	fab6 f686 	clz	r6, r6
 8008fe8:	42b0      	cmp	r0, r6
 8008fea:	d00d      	beq.n	8009008 <HAL_ADC_ConfigChannel+0x420>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008fec:	68d0      	ldr	r0, [r2, #12]
 8008fee:	68d0      	ldr	r0, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ff0:	f102 060c 	add.w	r6, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008ff4:	f3c0 6284 	ubfx	r2, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ff8:	fa95 f0a5 	rbit	r0, r5
  if (value == 0U)
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f43f ae26 	beq.w	8008c4e <HAL_ADC_ConfigChannel+0x66>
  return __builtin_clz(value);
 8009002:	fab0 f080 	clz	r0, r0
 8009006:	e77d      	b.n	8008f04 <HAL_ADC_ConfigChannel+0x31c>
  MODIFY_REG(*preg,
 8009008:	6838      	ldr	r0, [r7, #0]
 800900a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800900e:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009010:	680d      	ldr	r5, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009012:	68d0      	ldr	r0, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009014:	f102 060c 	add.w	r6, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009018:	68d2      	ldr	r2, [r2, #12]
 800901a:	f3c5 0012 	ubfx	r0, r5, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800901e:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009022:	2800      	cmp	r0, #0
 8009024:	d1e8      	bne.n	8008ff8 <HAL_ADC_ConfigChannel+0x410>
 8009026:	e76b      	b.n	8008f00 <HAL_ADC_ConfigChannel+0x318>
  MODIFY_REG(*preg,
 8009028:	6838      	ldr	r0, [r7, #0]
 800902a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800902e:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009030:	680d      	ldr	r5, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009032:	6890      	ldr	r0, [r2, #8]
 8009034:	6890      	ldr	r0, [r2, #8]
 8009036:	f3c5 0612 	ubfx	r6, r5, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800903a:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800903e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009042:	2e00      	cmp	r6, #0
 8009044:	d1cb      	bne.n	8008fde <HAL_ADC_ConfigChannel+0x3f6>
 8009046:	e750      	b.n	8008eea <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 8009048:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800904a:	4622      	mov	r2, r4
 800904c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009050:	f842 0f60 	str.w	r0, [r2, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009054:	680d      	ldr	r5, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009056:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8009058:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800905a:	f3c5 0612 	ubfx	r6, r5, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800905e:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009062:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009066:	2e00      	cmp	r6, #0
 8009068:	d1ac      	bne.n	8008fc4 <HAL_ADC_ConfigChannel+0x3dc>
 800906a:	f3c5 6684 	ubfx	r6, r5, #26, #5
 800906e:	e733      	b.n	8008ed8 <HAL_ADC_ConfigChannel+0x2f0>
 8009070:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8009074:	e6e2      	b.n	8008e3c <HAL_ADC_ConfigChannel+0x254>
 8009076:	2202      	movs	r2, #2
 8009078:	e787      	b.n	8008f8a <HAL_ADC_ConfigChannel+0x3a2>
 800907a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800907e:	e778      	b.n	8008f72 <HAL_ADC_ConfigChannel+0x38a>
 8009080:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009084:	e67f      	b.n	8008d86 <HAL_ADC_ConfigChannel+0x19e>
 8009086:	4a04      	ldr	r2, [pc, #16]	; (8009098 <HAL_ADC_ConfigChannel+0x4b0>)
 8009088:	e6d8      	b.n	8008e3c <HAL_ADC_ConfigChannel+0x254>
 800908a:	2202      	movs	r2, #2
 800908c:	e688      	b.n	8008da0 <HAL_ADC_ConfigChannel+0x1b8>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800908e:	2006      	movs	r0, #6
 8009090:	6048      	str	r0, [r1, #4]
          break;
 8009092:	f46f 66f8 	mvn.w	r6, #1984	; 0x7c0
 8009096:	e5c5      	b.n	8008c24 <HAL_ADC_ConfigChannel+0x3c>
 8009098:	fe500000 	.word	0xfe500000

0800909c <ADC_Enable>:
{
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80090a0:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090a2:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80090a4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	07d2      	lsls	r2, r2, #31
 80090aa:	d42c      	bmi.n	8009106 <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80090ac:	6899      	ldr	r1, [r3, #8]
 80090ae:	4a27      	ldr	r2, [pc, #156]	; (800914c <ADC_Enable+0xb0>)
 80090b0:	4211      	tst	r1, r2
 80090b2:	4604      	mov	r4, r0
 80090b4:	d12a      	bne.n	800910c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80090b6:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80090b8:	4925      	ldr	r1, [pc, #148]	; (8009150 <ADC_Enable+0xb4>)
  MODIFY_REG(ADCx->CR,
 80090ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80090be:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80090c8:	688b      	ldr	r3, [r1, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	d428      	bmi.n	8009120 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80090ce:	f7ff fc45 	bl	800895c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 80090d8:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090da:	d414      	bmi.n	8009106 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 80090dc:	4e1d      	ldr	r6, [pc, #116]	; (8009154 <ADC_Enable+0xb8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	07d0      	lsls	r0, r2, #31
 80090e2:	d404      	bmi.n	80090ee <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 80090e4:	689a      	ldr	r2, [r3, #8]
 80090e6:	4032      	ands	r2, r6
 80090e8:	f042 0201 	orr.w	r2, r2, #1
 80090ec:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80090ee:	f7ff fc35 	bl	800895c <HAL_GetTick>
 80090f2:	1b43      	subs	r3, r0, r5
 80090f4:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090f6:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80090f8:	d902      	bls.n	8009100 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	07d1      	lsls	r1, r2, #31
 80090fe:	d505      	bpl.n	800910c <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	07d2      	lsls	r2, r2, #31
 8009104:	d5eb      	bpl.n	80090de <ADC_Enable+0x42>
  return HAL_OK;
 8009106:	2000      	movs	r0, #0
}
 8009108:	b002      	add	sp, #8
 800910a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800910c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800910e:	f043 0310 	orr.w	r3, r3, #16
 8009112:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009114:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8009116:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009118:	4303      	orrs	r3, r0
 800911a:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800911c:	b002      	add	sp, #8
 800911e:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009120:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <ADC_Enable+0xbc>)
 8009122:	4a0e      	ldr	r2, [pc, #56]	; (800915c <ADC_Enable+0xc0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	099b      	lsrs	r3, r3, #6
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	099b      	lsrs	r3, r3, #6
 800912e:	3301      	adds	r3, #1
 8009130:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8009138:	9b01      	ldr	r3, [sp, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0c7      	beq.n	80090ce <ADC_Enable+0x32>
        wait_loop_index--;
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	3b01      	subs	r3, #1
 8009142:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1f9      	bne.n	800913e <ADC_Enable+0xa2>
 800914a:	e7c0      	b.n	80090ce <ADC_Enable+0x32>
 800914c:	8000003f 	.word	0x8000003f
 8009150:	50040300 	.word	0x50040300
 8009154:	7fffffc0 	.word	0x7fffffc0
 8009158:	20000008 	.word	0x20000008
 800915c:	053e2d63 	.word	0x053e2d63

08009160 <HAL_ADC_Start_DMA>:
{
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009162:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009164:	689d      	ldr	r5, [r3, #8]
 8009166:	f015 0504 	ands.w	r5, r5, #4
 800916a:	d141      	bne.n	80091f0 <HAL_ADC_Start_DMA+0x90>
    __HAL_LOCK(hadc);
 800916c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8009170:	2b01      	cmp	r3, #1
 8009172:	4604      	mov	r4, r0
 8009174:	d03c      	beq.n	80091f0 <HAL_ADC_Start_DMA+0x90>
 8009176:	2301      	movs	r3, #1
 8009178:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
      tmp_hal_status = ADC_Enable(hadc);
 800917c:	460f      	mov	r7, r1
 800917e:	4616      	mov	r6, r2
 8009180:	f7ff ff8c 	bl	800909c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8009184:	2800      	cmp	r0, #0
 8009186:	d135      	bne.n	80091f4 <HAL_ADC_Start_DMA+0x94>
        ADC_STATE_CLR_SET(hadc->State,
 8009188:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800918a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800918c:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800918e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009192:	f023 0301 	bic.w	r3, r3, #1
 8009196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919a:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800919c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800919e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80091a2:	bf1c      	itt	ne
 80091a4:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 80091a6:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80091aa:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80091ac:	4b13      	ldr	r3, [pc, #76]	; (80091fc <HAL_ADC_Start_DMA+0x9c>)
 80091ae:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80091b0:	4b13      	ldr	r3, [pc, #76]	; (8009200 <HAL_ADC_Start_DMA+0xa0>)
 80091b2:	6303      	str	r3, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80091b4:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80091b6:	4b13      	ldr	r3, [pc, #76]	; (8009204 <HAL_ADC_Start_DMA+0xa4>)
 80091b8:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80091ba:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 80091bc:	2500      	movs	r5, #0
 80091be:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80091c2:	684d      	ldr	r5, [r1, #4]
 80091c4:	f045 0510 	orr.w	r5, r5, #16
 80091c8:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80091ca:	68cd      	ldr	r5, [r1, #12]
 80091cc:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80091d0:	4633      	mov	r3, r6
 80091d2:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80091d4:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80091d6:	3140      	adds	r1, #64	; 0x40
 80091d8:	f000 fa76 	bl	80096c8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80091dc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80091de:	6893      	ldr	r3, [r2, #8]
 80091e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80091e8:	f043 0304 	orr.w	r3, r3, #4
 80091ec:	6093      	str	r3, [r2, #8]
}
 80091ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 80091f0:	2002      	movs	r0, #2
}
 80091f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 80091f4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
}
 80091f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091fa:	bf00      	nop
 80091fc:	08008b61 	.word	0x08008b61
 8009200:	08008b51 	.word	0x08008b51
 8009204:	08008bcd 	.word	0x08008bcd

08009208 <ADC_Disable>:
{
 8009208:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800920a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800920c:	689a      	ldr	r2, [r3, #8]
 800920e:	0795      	lsls	r5, r2, #30
 8009210:	d502      	bpl.n	8009218 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009212:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8009214:	2000      	movs	r0, #0
}
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	689a      	ldr	r2, [r3, #8]
 800921a:	07d4      	lsls	r4, r2, #31
 800921c:	d52b      	bpl.n	8009276 <ADC_Disable+0x6e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	f002 020d 	and.w	r2, r2, #13
 8009224:	2a01      	cmp	r2, #1
 8009226:	4604      	mov	r4, r0
 8009228:	d008      	beq.n	800923c <ADC_Disable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800922a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800922c:	f043 0310 	orr.w	r3, r3, #16
 8009230:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009232:	6da3      	ldr	r3, [r4, #88]	; 0x58
          return HAL_ERROR;
 8009234:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009236:	4303      	orrs	r3, r0
 8009238:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800923a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009242:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009246:	2103      	movs	r1, #3
 8009248:	f042 0202 	orr.w	r2, r2, #2
 800924c:	609a      	str	r2, [r3, #8]
 800924e:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8009250:	f7ff fb84 	bl	800895c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800925a:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800925c:	d50b      	bpl.n	8009276 <ADC_Disable+0x6e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800925e:	f7ff fb7d 	bl	800895c <HAL_GetTick>
 8009262:	1b40      	subs	r0, r0, r5
 8009264:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009266:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009268:	d902      	bls.n	8009270 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800926a:	689a      	ldr	r2, [r3, #8]
 800926c:	07d2      	lsls	r2, r2, #31
 800926e:	d4dc      	bmi.n	800922a <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	07db      	lsls	r3, r3, #31
 8009274:	d4f3      	bmi.n	800925e <ADC_Disable+0x56>
  return HAL_OK;
 8009276:	2000      	movs	r0, #0
}
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	bf00      	nop

0800927c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800927c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800927e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8009282:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8009284:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8009286:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8009288:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800928a:	d03f      	beq.n	800930c <HAL_ADCEx_Calibration_Start+0x90>
 800928c:	2301      	movs	r3, #1
 800928e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009292:	4604      	mov	r4, r0
 8009294:	460d      	mov	r5, r1
 8009296:	f7ff ffb7 	bl	8009208 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800929a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (tmp_hal_status == HAL_OK)
 800929c:	b9e0      	cbnz	r0, 80092d8 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 800929e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80092a2:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80092a6:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 80092a8:	f043 0302 	orr.w	r3, r3, #2
 80092ac:	6563      	str	r3, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 80092ae:	6893      	ldr	r3, [r2, #8]
 80092b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80092b4:	f005 4180 	and.w	r1, r5, #1073741824	; 0x40000000
 80092b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80092bc:	4319      	orrs	r1, r3
 80092be:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80092c2:	6091      	str	r1, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80092c4:	6893      	ldr	r3, [r2, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	db0e      	blt.n	80092e8 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80092ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80092cc:	f023 0303 	bic.w	r3, r3, #3
 80092d0:	f043 0301 	orr.w	r3, r3, #1
 80092d4:	6563      	str	r3, [r4, #84]	; 0x54
 80092d6:	e002      	b.n	80092de <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80092d8:	f043 0310 	orr.w	r3, r3, #16
 80092dc:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092de:	2300      	movs	r3, #0
 80092e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80092e4:	b003      	add	sp, #12
 80092e6:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 80092e8:	9b01      	ldr	r3, [sp, #4]
 80092ea:	3301      	adds	r3, #1
 80092ec:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80092ee:	9b01      	ldr	r3, [sp, #4]
 80092f0:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80092f4:	d3e6      	bcc.n	80092c4 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80092f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80092f8:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80092fc:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 80092fe:	f043 0310 	orr.w	r3, r3, #16
 8009302:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8009304:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        return HAL_ERROR;
 8009308:	2001      	movs	r0, #1
 800930a:	e7eb      	b.n	80092e4 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 800930c:	2002      	movs	r0, #2
}
 800930e:	b003      	add	sp, #12
 8009310:	bd30      	pop	{r4, r5, pc}
 8009312:	bf00      	nop

08009314 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009314:	4907      	ldr	r1, [pc, #28]	; (8009334 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8009316:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009318:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800931a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800931e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009322:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009324:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009326:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800932a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800932e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	e000ed00 	.word	0xe000ed00

08009338 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009338:	4b1c      	ldr	r3, [pc, #112]	; (80093ac <HAL_NVIC_SetPriority+0x74>)
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009340:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009342:	f1c3 0e07 	rsb	lr, r3, #7
 8009346:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800934a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800934e:	bf28      	it	cs
 8009350:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009354:	f1bc 0f06 	cmp.w	ip, #6
 8009358:	d91b      	bls.n	8009392 <HAL_NVIC_SetPriority+0x5a>
 800935a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800935c:	f04f 3cff 	mov.w	ip, #4294967295
 8009360:	fa0c fc03 	lsl.w	ip, ip, r3
 8009364:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009368:	f04f 3cff 	mov.w	ip, #4294967295
 800936c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009370:	ea21 010c 	bic.w	r1, r1, ip
 8009374:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8009376:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009378:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800937c:	db0c      	blt.n	8009398 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800937e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8009382:	0109      	lsls	r1, r1, #4
 8009384:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8009388:	b2c9      	uxtb	r1, r1
 800938a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800938e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009392:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009394:	4613      	mov	r3, r2
 8009396:	e7e7      	b.n	8009368 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009398:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <HAL_NVIC_SetPriority+0x78>)
 800939a:	f000 000f 	and.w	r0, r0, #15
 800939e:	0109      	lsls	r1, r1, #4
 80093a0:	4403      	add	r3, r0
 80093a2:	b2c9      	uxtb	r1, r1
 80093a4:	7619      	strb	r1, [r3, #24]
 80093a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80093aa:	bf00      	nop
 80093ac:	e000ed00 	.word	0xe000ed00
 80093b0:	e000ecfc 	.word	0xe000ecfc

080093b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80093b4:	2800      	cmp	r0, #0
 80093b6:	db07      	blt.n	80093c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093b8:	4a04      	ldr	r2, [pc, #16]	; (80093cc <HAL_NVIC_EnableIRQ+0x18>)
 80093ba:	0941      	lsrs	r1, r0, #5
 80093bc:	2301      	movs	r3, #1
 80093be:	f000 001f 	and.w	r0, r0, #31
 80093c2:	4083      	lsls	r3, r0
 80093c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	e000e100 	.word	0xe000e100

080093d0 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80093d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80093d4:	4905      	ldr	r1, [pc, #20]	; (80093ec <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80093d6:	4b06      	ldr	r3, [pc, #24]	; (80093f0 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80093d8:	68ca      	ldr	r2, [r1, #12]
 80093da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80093de:	4313      	orrs	r3, r2
 80093e0:	60cb      	str	r3, [r1, #12]
 80093e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80093e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80093e8:	e7fd      	b.n	80093e6 <HAL_NVIC_SystemReset+0x16>
 80093ea:	bf00      	nop
 80093ec:	e000ed00 	.word	0xe000ed00
 80093f0:	05fa0004 	.word	0x05fa0004

080093f4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80093f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80093f8:	0897      	lsrs	r7, r2, #2
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80093fa:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80093fc:	d015      	beq.n	800942a <CRC_Handle_8+0x36>
 80093fe:	468c      	mov	ip, r1
 8009400:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009404:	f89c 3001 	ldrb.w	r3, [ip, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009408:	f89c 8000 	ldrb.w	r8, [ip]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800940c:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009410:	f89c e002 	ldrb.w	lr, [ip, #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009414:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009416:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800941a:	4323      	orrs	r3, r4
  for (i = 0U; i < (BufferLength / 4U); i++)
 800941c:	f10c 0c04 	add.w	ip, ip, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009420:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009424:	4566      	cmp	r6, ip
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009426:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009428:	d1ec      	bne.n	8009404 <CRC_Handle_8+0x10>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800942a:	f012 0203 	ands.w	r2, r2, #3
 800942e:	d00b      	beq.n	8009448 <CRC_Handle_8+0x54>
  {
    if ((BufferLength % 4U) == 1U)
 8009430:	2a01      	cmp	r2, #1
 8009432:	d00c      	beq.n	800944e <CRC_Handle_8+0x5a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 8009434:	2a02      	cmp	r2, #2
 8009436:	d111      	bne.n	800945c <CRC_Handle_8+0x68>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009438:	eb01 0387 	add.w	r3, r1, r7, lsl #2
 800943c:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
 8009446:	802b      	strh	r3, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009448:	6828      	ldr	r0, [r5, #0]
}
 800944a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800944e:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
 8009452:	702b      	strb	r3, [r5, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009454:	6805      	ldr	r5, [r0, #0]
  return hcrc->Instance->DR;
 8009456:	6828      	ldr	r0, [r5, #0]
}
 8009458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800945c:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
 8009460:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8009464:	784b      	ldrb	r3, [r1, #1]
 8009466:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      *pReg = data;
 800946a:	802b      	strh	r3, [r5, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800946c:	788b      	ldrb	r3, [r1, #2]
 800946e:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 8009470:	6805      	ldr	r5, [r0, #0]
 8009472:	6828      	ldr	r0, [r5, #0]
}
 8009474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009478 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009478:	b530      	push	{r4, r5, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800947a:	ea5f 0e52 	movs.w	lr, r2, lsr #1
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800947e:	6804      	ldr	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009480:	d00b      	beq.n	800949a <CRC_Handle_16+0x22>
 8009482:	2300      	movs	r3, #0
 8009484:	1c8d      	adds	r5, r1, #2
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009486:	f831 c023 	ldrh.w	ip, [r1, r3, lsl #2]
 800948a:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800948e:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009494:	4573      	cmp	r3, lr
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009496:	6020      	str	r0, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009498:	d1f5      	bne.n	8009486 <CRC_Handle_16+0xe>
  }
  if ((BufferLength % 2U) != 0U)
 800949a:	07d3      	lsls	r3, r2, #31
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 800949c:	bf44      	itt	mi
 800949e:	f831 302e 	ldrhmi.w	r3, [r1, lr, lsl #2]
 80094a2:	8023      	strhmi	r3, [r4, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80094a4:	6820      	ldr	r0, [r4, #0]
}
 80094a6:	bd30      	pop	{r4, r5, pc}

080094a8 <HAL_CRC_Init>:
  if (hcrc == NULL)
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d036      	beq.n	800951a <HAL_CRC_Init+0x72>
{
 80094ac:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80094ae:	7f43      	ldrb	r3, [r0, #29]
 80094b0:	4604      	mov	r4, r0
 80094b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80094b6:	b363      	cbz	r3, 8009512 <HAL_CRC_Init+0x6a>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80094b8:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80094ba:	2202      	movs	r2, #2
 80094bc:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80094be:	b9f3      	cbnz	r3, 80094fe <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	4a17      	ldr	r2, [pc, #92]	; (8009520 <HAL_CRC_Init+0x78>)
 80094c4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	f022 0218 	bic.w	r2, r2, #24
 80094cc:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80094ce:	7962      	ldrb	r2, [r4, #5]
 80094d0:	b18a      	cbz	r2, 80094f6 <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80094d2:	6922      	ldr	r2, [r4, #16]
 80094d4:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	6961      	ldr	r1, [r4, #20]
 80094da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80094de:	430a      	orrs	r2, r1
 80094e0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	69a1      	ldr	r1, [r4, #24]
 80094e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094ea:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 80094ec:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80094ee:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80094f0:	7761      	strb	r1, [r4, #29]
  return HAL_OK;
 80094f2:	2000      	movs	r0, #0
}
 80094f4:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80094f6:	f04f 32ff 	mov.w	r2, #4294967295
 80094fa:	611a      	str	r2, [r3, #16]
 80094fc:	e7eb      	b.n	80094d6 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80094fe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f83a 	bl	800957c <HAL_CRCEx_Polynomial_Set>
 8009508:	b908      	cbnz	r0, 800950e <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	e7df      	b.n	80094ce <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800950e:	2001      	movs	r0, #1
}
 8009510:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8009512:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8009514:	f7fd f8f6 	bl	8006704 <HAL_CRC_MspInit>
 8009518:	e7ce      	b.n	80094b8 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800951a:	2001      	movs	r0, #1
}
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	04c11db7 	.word	0x04c11db7

08009524 <HAL_CRC_Calculate>:
{
 8009524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_CRC_DR_RESET(hcrc);
 8009526:	6806      	ldr	r6, [r0, #0]
  switch (hcrc->InputDataFormat)
 8009528:	6a07      	ldr	r7, [r0, #32]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800952a:	2502      	movs	r5, #2
 800952c:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 800952e:	68b5      	ldr	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 8009530:	2f02      	cmp	r7, #2
  __HAL_CRC_DR_RESET(hcrc);
 8009532:	f045 0501 	orr.w	r5, r5, #1
{
 8009536:	4604      	mov	r4, r0
  __HAL_CRC_DR_RESET(hcrc);
 8009538:	60b5      	str	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 800953a:	d007      	beq.n	800954c <HAL_CRC_Calculate+0x28>
 800953c:	2f03      	cmp	r7, #3
 800953e:	d00f      	beq.n	8009560 <HAL_CRC_Calculate+0x3c>
 8009540:	2f01      	cmp	r7, #1
 8009542:	d008      	beq.n	8009556 <HAL_CRC_Calculate+0x32>
  hcrc->State = HAL_CRC_STATE_READY;
 8009544:	2301      	movs	r3, #1
 8009546:	7763      	strb	r3, [r4, #29]
  switch (hcrc->InputDataFormat)
 8009548:	2000      	movs	r0, #0
}
 800954a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800954c:	f7ff ff94 	bl	8009478 <CRC_Handle_16>
  hcrc->State = HAL_CRC_STATE_READY;
 8009550:	2301      	movs	r3, #1
 8009552:	7763      	strb	r3, [r4, #29]
}
 8009554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8009556:	f7ff ff4d 	bl	80093f4 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 800955a:	2301      	movs	r3, #1
 800955c:	7763      	strb	r3, [r4, #29]
}
 800955e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 8009560:	b13a      	cbz	r2, 8009572 <HAL_CRC_Calculate+0x4e>
 8009562:	3904      	subs	r1, #4
 8009564:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 8009568:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800956c:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 800956e:	4291      	cmp	r1, r2
 8009570:	d1fa      	bne.n	8009568 <HAL_CRC_Calculate+0x44>
  hcrc->State = HAL_CRC_STATE_READY;
 8009572:	2301      	movs	r3, #1
      temp = hcrc->Instance->DR;
 8009574:	6830      	ldr	r0, [r6, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8009576:	7763      	strb	r3, [r4, #29]
}
 8009578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800957a:	bf00      	nop

0800957c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800957c:	b410      	push	{r4}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800957e:	231e      	movs	r3, #30
 8009580:	e001      	b.n	8009586 <HAL_CRCEx_Polynomial_Set+0xa>
 8009582:	3b01      	subs	r3, #1
 8009584:	d315      	bcc.n	80095b2 <HAL_CRCEx_Polynomial_Set+0x36>
 8009586:	fa21 fc03 	lsr.w	ip, r1, r3
 800958a:	f01c 0f01 	tst.w	ip, #1
 800958e:	d0f8      	beq.n	8009582 <HAL_CRCEx_Polynomial_Set+0x6>
  {
  }

  switch (PolyLength)
 8009590:	2a18      	cmp	r2, #24
 8009592:	d80f      	bhi.n	80095b4 <HAL_CRCEx_Polynomial_Set+0x38>
 8009594:	e8df f002 	tbb	[pc, r2]
 8009598:	0e0e0e14 	.word	0x0e0e0e14
 800959c:	0e0e0e0e 	.word	0x0e0e0e0e
 80095a0:	0e0e0e1f 	.word	0x0e0e0e1f
 80095a4:	0e0e0e0e 	.word	0x0e0e0e0e
 80095a8:	0e0e0e22 	.word	0x0e0e0e22
 80095ac:	0e0e0e0e 	.word	0x0e0e0e0e
 80095b0:	12          	.byte	0x12
 80095b1:	00          	.byte	0x00
 80095b2:	b12a      	cbz	r2, 80095c0 <HAL_CRCEx_Polynomial_Set+0x44>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80095b4:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 80095b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ba:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 80095bc:	2b06      	cmp	r3, #6
 80095be:	d8f9      	bhi.n	80095b4 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80095c0:	6804      	ldr	r4, [r0, #0]
 80095c2:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80095c4:	68a3      	ldr	r3, [r4, #8]
 80095c6:	f023 0318 	bic.w	r3, r3, #24
 80095ca:	4313      	orrs	r3, r2
 80095cc:	2000      	movs	r0, #0
 80095ce:	60a3      	str	r3, [r4, #8]
}
 80095d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095d4:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 80095d6:	2b0f      	cmp	r3, #15
 80095d8:	d9f2      	bls.n	80095c0 <HAL_CRCEx_Polynomial_Set+0x44>
 80095da:	e7eb      	b.n	80095b4 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 80095dc:	2b07      	cmp	r3, #7
 80095de:	d9ef      	bls.n	80095c0 <HAL_CRCEx_Polynomial_Set+0x44>
 80095e0:	e7e8      	b.n	80095b4 <HAL_CRCEx_Polynomial_Set+0x38>
 80095e2:	bf00      	nop

080095e4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d04f      	beq.n	8009688 <HAL_DMA_Init+0xa4>
{
 80095e8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80095ea:	4b31      	ldr	r3, [pc, #196]	; (80096b0 <HAL_DMA_Init+0xcc>)
 80095ec:	6804      	ldr	r4, [r0, #0]
 80095ee:	429c      	cmp	r4, r3
 80095f0:	d941      	bls.n	8009676 <HAL_DMA_Init+0x92>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80095f2:	4a30      	ldr	r2, [pc, #192]	; (80096b4 <HAL_DMA_Init+0xd0>)
 80095f4:	4b30      	ldr	r3, [pc, #192]	; (80096b8 <HAL_DMA_Init+0xd4>)
 80095f6:	4d31      	ldr	r5, [pc, #196]	; (80096bc <HAL_DMA_Init+0xd8>)
 80095f8:	4422      	add	r2, r4
 80095fa:	fba3 3202 	umull	r3, r2, r3, r2
 80095fe:	0912      	lsrs	r2, r2, #4
 8009600:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009602:	2302      	movs	r3, #2
 8009604:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009608:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800960c:	6907      	ldr	r7, [r0, #16]
  tmp = hdma->Instance->CCR;
 800960e:	6821      	ldr	r1, [r4, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009610:	6442      	str	r2, [r0, #68]	; 0x44
  tmp |=  hdma->Init.Direction        |
 8009612:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009614:	433b      	orrs	r3, r7
 8009616:	6947      	ldr	r7, [r0, #20]
    hdma->DmaBaseAddress = DMA1;
 8009618:	6405      	str	r5, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800961a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800961c:	6987      	ldr	r7, [r0, #24]
 800961e:	433b      	orrs	r3, r7
 8009620:	69c7      	ldr	r7, [r0, #28]
 8009622:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8009624:	6a07      	ldr	r7, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009626:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800962a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800962e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8009630:	430b      	orrs	r3, r1
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009632:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8009636:	6023      	str	r3, [r4, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009638:	d013      	beq.n	8009662 <HAL_DMA_Init+0x7e>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800963a:	4b21      	ldr	r3, [pc, #132]	; (80096c0 <HAL_DMA_Init+0xdc>)
 800963c:	429d      	cmp	r5, r3
 800963e:	d025      	beq.n	800968c <HAL_DMA_Init+0xa8>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009640:	f8d3 14a8 	ldr.w	r1, [r3, #1192]	; 0x4a8
 8009644:	f002 021c 	and.w	r2, r2, #28
 8009648:	240f      	movs	r4, #15
 800964a:	4094      	lsls	r4, r2
 800964c:	ea21 0104 	bic.w	r1, r1, r4
 8009650:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009654:	6841      	ldr	r1, [r0, #4]
 8009656:	f8d3 44a8 	ldr.w	r4, [r3, #1192]	; 0x4a8
 800965a:	4091      	lsls	r1, r2
 800965c:	4321      	orrs	r1, r4
 800965e:	f8c3 14a8 	str.w	r1, [r3, #1192]	; 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009662:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8009664:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009666:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009668:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 800966c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
}
 8009670:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8009672:	4618      	mov	r0, r3
}
 8009674:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009676:	4a13      	ldr	r2, [pc, #76]	; (80096c4 <HAL_DMA_Init+0xe0>)
 8009678:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <HAL_DMA_Init+0xd4>)
 800967a:	4d11      	ldr	r5, [pc, #68]	; (80096c0 <HAL_DMA_Init+0xdc>)
 800967c:	4422      	add	r2, r4
 800967e:	fba3 3202 	umull	r3, r2, r3, r2
 8009682:	0912      	lsrs	r2, r2, #4
 8009684:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8009686:	e7bc      	b.n	8009602 <HAL_DMA_Init+0x1e>
    return HAL_ERROR;
 8009688:	2001      	movs	r0, #1
}
 800968a:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800968c:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8009690:	f002 021c 	and.w	r2, r2, #28
 8009694:	210f      	movs	r1, #15
 8009696:	4091      	lsls	r1, r2
 8009698:	ea23 0301 	bic.w	r3, r3, r1
 800969c:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80096a0:	6843      	ldr	r3, [r0, #4]
 80096a2:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80096a6:	4093      	lsls	r3, r2
 80096a8:	430b      	orrs	r3, r1
 80096aa:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 80096ae:	e7d8      	b.n	8009662 <HAL_DMA_Init+0x7e>
 80096b0:	40020407 	.word	0x40020407
 80096b4:	bffdfbf8 	.word	0xbffdfbf8
 80096b8:	cccccccd 	.word	0xcccccccd
 80096bc:	40020400 	.word	0x40020400
 80096c0:	40020000 	.word	0x40020000
 80096c4:	bffdfff8 	.word	0xbffdfff8

080096c8 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80096c8:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
 80096cc:	f1bc 0f01 	cmp.w	ip, #1
 80096d0:	d03c      	beq.n	800974c <HAL_DMA_Start_IT+0x84>
{
 80096d2:	b570      	push	{r4, r5, r6, lr}

  if(HAL_DMA_STATE_READY == hdma->State)
 80096d4:	f890 c025 	ldrb.w	ip, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 80096d8:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80096da:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 80096dc:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 80096e0:	fa5f fe8c 	uxtb.w	lr, ip
 80096e4:	d004      	beq.n	80096f0 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096e6:	2300      	movs	r3, #0
 80096e8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80096ec:	2002      	movs	r0, #2
  }
  return status;
}
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80096f0:	2502      	movs	r5, #2
 80096f2:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    __HAL_DMA_DISABLE(hdma);
 80096f6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096f8:	2500      	movs	r5, #0
 80096fa:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80096fc:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80096fe:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8009700:	f026 0601 	bic.w	r6, r6, #1
 8009704:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009706:	f005 051c 	and.w	r5, r5, #28
 800970a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800970c:	fa0e f505 	lsl.w	r5, lr, r5
 8009710:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009712:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009714:	6883      	ldr	r3, [r0, #8]
 8009716:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8009718:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800971a:	bf0b      	itete	eq
 800971c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800971e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8009720:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8009722:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8009724:	b14b      	cbz	r3, 800973a <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	f043 030e 	orr.w	r3, r3, #14
 800972c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8009734:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009736:	6023      	str	r3, [r4, #0]
}
 8009738:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	f023 0304 	bic.w	r3, r3, #4
 8009740:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	f043 030a 	orr.w	r3, r3, #10
 8009748:	6023      	str	r3, [r4, #0]
 800974a:	e7f0      	b.n	800972e <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 800974c:	2002      	movs	r0, #2
}
 800974e:	4770      	bx	lr

08009750 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009750:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8009754:	2a02      	cmp	r2, #2
{
 8009756:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009758:	d006      	beq.n	8009768 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800975a:	2204      	movs	r2, #4
 800975c:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800975e:	2200      	movs	r2, #0
    return HAL_ERROR;
 8009760:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8009762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8009766:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009768:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800976a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800976c:	6808      	ldr	r0, [r1, #0]
 800976e:	f020 000e 	bic.w	r0, r0, #14
 8009772:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8009774:	6808      	ldr	r0, [r1, #0]
 8009776:	f020 0001 	bic.w	r0, r0, #1
 800977a:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800977c:	f04f 0c01 	mov.w	ip, #1
 8009780:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009782:	f002 021c 	and.w	r2, r2, #28
 8009786:	fa0c f202 	lsl.w	r2, ip, r2
 800978a:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 800978c:	2200      	movs	r2, #0
    return status;
 800978e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8009790:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8009794:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop

0800979c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800979c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80097a0:	2a02      	cmp	r2, #2
 80097a2:	d003      	beq.n	80097ac <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097a4:	2204      	movs	r2, #4
 80097a6:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80097a8:	2001      	movs	r0, #1
}
 80097aa:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097ac:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80097ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80097b0:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097b2:	680c      	ldr	r4, [r1, #0]
 80097b4:	f024 040e 	bic.w	r4, r4, #14
 80097b8:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80097ba:	680c      	ldr	r4, [r1, #0]
 80097bc:	f024 0401 	bic.w	r4, r4, #1
 80097c0:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80097c2:	f002 021c 	and.w	r2, r2, #28
 80097c6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80097c8:	2101      	movs	r1, #1
 80097ca:	fa01 f202 	lsl.w	r2, r1, r2
 80097ce:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 80097d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80097d2:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80097d6:	2400      	movs	r4, #0
 80097d8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80097dc:	b112      	cbz	r2, 80097e4 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80097de:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80097e0:	4620      	mov	r0, r4
}
 80097e2:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80097e4:	4610      	mov	r0, r2
}
 80097e6:	bd10      	pop	{r4, pc}

080097e8 <HAL_DMA_IRQHandler>:
{
 80097e8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80097ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80097ec:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80097ee:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80097f0:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80097f2:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80097f4:	f003 031c 	and.w	r3, r3, #28
 80097f8:	2204      	movs	r2, #4
 80097fa:	409a      	lsls	r2, r3
 80097fc:	420a      	tst	r2, r1
 80097fe:	d00e      	beq.n	800981e <HAL_DMA_IRQHandler+0x36>
 8009800:	f014 0f04 	tst.w	r4, #4
 8009804:	d00b      	beq.n	800981e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	069b      	lsls	r3, r3, #26
 800980a:	d403      	bmi.n	8009814 <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	f023 0304 	bic.w	r3, r3, #4
 8009812:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009814:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8009816:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8009818:	b1cb      	cbz	r3, 800984e <HAL_DMA_IRQHandler+0x66>
}
 800981a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800981c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800981e:	2202      	movs	r2, #2
 8009820:	409a      	lsls	r2, r3
 8009822:	420a      	tst	r2, r1
 8009824:	d015      	beq.n	8009852 <HAL_DMA_IRQHandler+0x6a>
 8009826:	f014 0f02 	tst.w	r4, #2
 800982a:	d012      	beq.n	8009852 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	0699      	lsls	r1, r3, #26
 8009830:	d406      	bmi.n	8009840 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009832:	682b      	ldr	r3, [r5, #0]
 8009834:	f023 030a 	bic.w	r3, r3, #10
 8009838:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800983a:	2301      	movs	r3, #1
 800983c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferCpltCallback != NULL)
 8009840:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8009842:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8009844:	2100      	movs	r1, #0
 8009846:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e5      	bne.n	800981a <HAL_DMA_IRQHandler+0x32>
}
 800984e:	bc70      	pop	{r4, r5, r6}
 8009850:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8009852:	2208      	movs	r2, #8
 8009854:	409a      	lsls	r2, r3
 8009856:	420a      	tst	r2, r1
 8009858:	d0f9      	beq.n	800984e <HAL_DMA_IRQHandler+0x66>
 800985a:	0722      	lsls	r2, r4, #28
 800985c:	d5f7      	bpl.n	800984e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800985e:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8009860:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009862:	f022 020e 	bic.w	r2, r2, #14
 8009866:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009868:	2201      	movs	r2, #1
 800986a:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800986e:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009870:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009872:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8009874:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8009878:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 800987c:	2900      	cmp	r1, #0
 800987e:	d0e6      	beq.n	800984e <HAL_DMA_IRQHandler+0x66>
}
 8009880:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8009882:	4708      	bx	r1

08009884 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009884:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <HAL_FLASH_Unlock+0x1c>)
 8009886:	695a      	ldr	r2, [r3, #20]
 8009888:	2a00      	cmp	r2, #0
 800988a:	db01      	blt.n	8009890 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800988c:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800988e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009890:	4904      	ldr	r1, [pc, #16]	; (80098a4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009892:	4a05      	ldr	r2, [pc, #20]	; (80098a8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009894:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009896:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009898:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800989a:	0fc0      	lsrs	r0, r0, #31
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	40022000 	.word	0x40022000
 80098a4:	45670123 	.word	0x45670123
 80098a8:	cdef89ab 	.word	0xcdef89ab

080098ac <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80098ac:	4a03      	ldr	r2, [pc, #12]	; (80098bc <HAL_FLASH_Lock+0x10>)
 80098ae:	6953      	ldr	r3, [r2, #20]
 80098b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000

  return HAL_OK;
}
 80098b4:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80098b6:	6153      	str	r3, [r2, #20]
}
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	40022000 	.word	0x40022000

080098c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80098c4:	f7ff f84a 	bl	800895c <HAL_GetTick>
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80098c8:	4c10      	ldr	r4, [pc, #64]	; (800990c <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 80098ca:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80098cc:	e001      	b.n	80098d2 <FLASH_WaitForLastOperation+0x12>
  {
    if(Timeout != HAL_MAX_DELAY)
 80098ce:	1c6a      	adds	r2, r5, #1
 80098d0:	d10e      	bne.n	80098f0 <FLASH_WaitForLastOperation+0x30>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	03db      	lsls	r3, r3, #15
 80098d6:	d4fa      	bmi.n	80098ce <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80098d8:	6923      	ldr	r3, [r4, #16]
 80098da:	4a0d      	ldr	r2, [pc, #52]	; (8009910 <FLASH_WaitForLastOperation+0x50>)

  if(error != 0u)
 80098dc:	4013      	ands	r3, r2
 80098de:	d10e      	bne.n	80098fe <FLASH_WaitForLastOperation+0x3e>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80098e0:	6920      	ldr	r0, [r4, #16]
 80098e2:	f010 0001 	ands.w	r0, r0, #1
 80098e6:	d002      	beq.n	80098ee <FLASH_WaitForLastOperation+0x2e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80098e8:	2201      	movs	r2, #1
 80098ea:	6122      	str	r2, [r4, #16]
 80098ec:	4618      	mov	r0, r3
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) >= Timeout)
 80098f0:	f7ff f834 	bl	800895c <HAL_GetTick>
 80098f4:	1b80      	subs	r0, r0, r6
 80098f6:	42a8      	cmp	r0, r5
 80098f8:	d3eb      	bcc.n	80098d2 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 80098fa:	2003      	movs	r0, #3
}
 80098fc:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 80098fe:	4905      	ldr	r1, [pc, #20]	; (8009914 <FLASH_WaitForLastOperation+0x54>)
 8009900:	684a      	ldr	r2, [r1, #4]
 8009902:	431a      	orrs	r2, r3
 8009904:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8009906:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8009908:	6123      	str	r3, [r4, #16]
}
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	40022000 	.word	0x40022000
 8009910:	0002c3fa 	.word	0x0002c3fa
 8009914:	20000018 	.word	0x20000018

08009918 <HAL_FLASH_Program>:
{
 8009918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800991c:	4e32      	ldr	r6, [pc, #200]	; (80099e8 <HAL_FLASH_Program+0xd0>)
{
 800991e:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8009920:	7833      	ldrb	r3, [r6, #0]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d027      	beq.n	8009976 <HAL_FLASH_Program+0x5e>
 8009926:	2301      	movs	r3, #1
 8009928:	4607      	mov	r7, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800992a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800992e:	460d      	mov	r5, r1
 8009930:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8009932:	7033      	strb	r3, [r6, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009934:	f7ff ffc4 	bl	80098c0 <FLASH_WaitForLastOperation>
 8009938:	4681      	mov	r9, r0
  if(status == HAL_OK)
 800993a:	b120      	cbz	r0, 8009946 <HAL_FLASH_Program+0x2e>
  __HAL_UNLOCK(&pFlash);
 800993c:	2300      	movs	r3, #0
 800993e:	7033      	strb	r3, [r6, #0]
}
 8009940:	4648      	mov	r0, r9
 8009942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009946:	4a29      	ldr	r2, [pc, #164]	; (80099ec <HAL_FLASH_Program+0xd4>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009948:	6070      	str	r0, [r6, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800994a:	6813      	ldr	r3, [r2, #0]
 800994c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009950:	bf1f      	itttt	ne
 8009952:	6813      	ldrne	r3, [r2, #0]
 8009954:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8009958:	6013      	strne	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800995a:	2302      	movne	r3, #2
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800995c:	7733      	strb	r3, [r6, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800995e:	b17f      	cbz	r7, 8009980 <HAL_FLASH_Program+0x68>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009960:	1e7b      	subs	r3, r7, #1
 8009962:	2b01      	cmp	r3, #1
 8009964:	d922      	bls.n	80099ac <HAL_FLASH_Program+0x94>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009966:	f24c 3050 	movw	r0, #50000	; 0xc350
 800996a:	f7ff ffa9 	bl	80098c0 <FLASH_WaitForLastOperation>
 800996e:	4681      	mov	r9, r0
    FLASH_FlushCaches();
 8009970:	f000 f83e 	bl	80099f0 <FLASH_FlushCaches>
 8009974:	e7e2      	b.n	800993c <HAL_FLASH_Program+0x24>
  __HAL_LOCK(&pFlash);
 8009976:	f04f 0902 	mov.w	r9, #2
}
 800997a:	4648      	mov	r0, r9
 800997c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009980:	4a1a      	ldr	r2, [pc, #104]	; (80099ec <HAL_FLASH_Program+0xd4>)
 8009982:	6953      	ldr	r3, [r2, #20]
 8009984:	f043 0301 	orr.w	r3, r3, #1
 8009988:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800998a:	602c      	str	r4, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800998c:	f3bf 8f6f 	isb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009990:	f24c 3050 	movw	r0, #50000	; 0xc350
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8009994:	f8c5 8004 	str.w	r8, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009998:	f7ff ff92 	bl	80098c0 <FLASH_WaitForLastOperation>
 800999c:	f06f 0101 	mvn.w	r1, #1
 80099a0:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, prog_bit);
 80099a2:	4a12      	ldr	r2, [pc, #72]	; (80099ec <HAL_FLASH_Program+0xd4>)
 80099a4:	6953      	ldr	r3, [r2, #20]
 80099a6:	400b      	ands	r3, r1
 80099a8:	6153      	str	r3, [r2, #20]
 80099aa:	e7e1      	b.n	8009970 <HAL_FLASH_Program+0x58>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80099ac:	490f      	ldr	r1, [pc, #60]	; (80099ec <HAL_FLASH_Program+0xd4>)
 80099ae:	694b      	ldr	r3, [r1, #20]
 80099b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80099b4:	4622      	mov	r2, r4
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80099b6:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80099bc:	b672      	cpsid	i
 80099be:	1aa9      	subs	r1, r5, r2
 80099c0:	f502 7080 	add.w	r0, r2, #256	; 0x100
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80099c4:	6813      	ldr	r3, [r2, #0]
 80099c6:	5053      	str	r3, [r2, r1]
    dest_addr++;
    src_addr++;
 80099c8:	3204      	adds	r2, #4
    row_index--;
  } while (row_index != 0U);
 80099ca:	4282      	cmp	r2, r0
 80099cc:	d1fa      	bne.n	80099c4 <HAL_FLASH_Program+0xac>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ce:	f384 8810 	msr	PRIMASK, r4
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80099d2:	2f02      	cmp	r7, #2
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80099d4:	f24c 3050 	movw	r0, #50000	; 0xc350
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80099d8:	d1c7      	bne.n	800996a <HAL_FLASH_Program+0x52>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80099da:	f7ff ff71 	bl	80098c0 <FLASH_WaitForLastOperation>
 80099de:	f46f 2180 	mvn.w	r1, #262144	; 0x40000
 80099e2:	4681      	mov	r9, r0
    if (prog_bit != 0U)
 80099e4:	e7dd      	b.n	80099a2 <HAL_FLASH_Program+0x8a>
 80099e6:	bf00      	nop
 80099e8:	20000018 	.word	0x20000018
 80099ec:	40022000 	.word	0x40022000

080099f0 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80099f0:	4915      	ldr	r1, [pc, #84]	; (8009a48 <FLASH_FlushCaches+0x58>)
 80099f2:	7f0b      	ldrb	r3, [r1, #28]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80099f4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80099f8:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80099fa:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80099fc:	d110      	bne.n	8009a20 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80099fe:	4a13      	ldr	r2, [pc, #76]	; (8009a4c <FLASH_FlushCaches+0x5c>)
 8009a00:	6810      	ldr	r0, [r2, #0]
 8009a02:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8009a06:	6010      	str	r0, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009a08:	6810      	ldr	r0, [r2, #0]
 8009a0a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8009a0e:	6010      	str	r0, [r2, #0]
 8009a10:	6810      	ldr	r0, [r2, #0]
 8009a12:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8009a16:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009a18:	6810      	ldr	r0, [r2, #0]
 8009a1a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8009a1e:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8009a20:	3b02      	subs	r3, #2
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d80c      	bhi.n	8009a40 <FLASH_FlushCaches+0x50>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009a26:	4b09      	ldr	r3, [pc, #36]	; (8009a4c <FLASH_FlushCaches+0x5c>)
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a36:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a3e:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009a40:	2300      	movs	r3, #0
 8009a42:	770b      	strb	r3, [r1, #28]
}
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	20000018 	.word	0x20000018
 8009a4c:	40022000 	.word	0x40022000

08009a50 <HAL_FLASHEx_Erase>:
{
 8009a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8009a54:	4f40      	ldr	r7, [pc, #256]	; (8009b58 <HAL_FLASHEx_Erase+0x108>)
 8009a56:	783b      	ldrb	r3, [r7, #0]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d054      	beq.n	8009b06 <HAL_FLASHEx_Erase+0xb6>
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	2401      	movs	r4, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009a60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009a64:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8009a66:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009a68:	f7ff ff2a 	bl	80098c0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	b120      	cbz	r0, 8009a7a <HAL_FLASHEx_Erase+0x2a>
  __HAL_UNLOCK(&pFlash);
 8009a70:	2300      	movs	r3, #0
 8009a72:	703b      	strb	r3, [r7, #0]
}
 8009a74:	4630      	mov	r0, r6
 8009a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009a7a:	4b38      	ldr	r3, [pc, #224]	; (8009b5c <HAL_FLASHEx_Erase+0x10c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009a7c:	6078      	str	r0, [r7, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	f412 7f00 	tst.w	r2, #512	; 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009a84:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8009a86:	d142      	bne.n	8009b0e <HAL_FLASHEx_Erase+0xbe>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009a88:	0552      	lsls	r2, r2, #21
 8009a8a:	d54b      	bpl.n	8009b24 <HAL_FLASHEx_Erase+0xd4>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a92:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009a94:	2302      	movs	r3, #2
 8009a96:	773b      	strb	r3, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009a98:	f8da 3000 	ldr.w	r3, [sl]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d043      	beq.n	8009b28 <HAL_FLASHEx_Erase+0xd8>
      *PageError = 0xFFFFFFFFU;
 8009aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa4:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009aa8:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 8009aac:	442b      	add	r3, r5
 8009aae:	429d      	cmp	r5, r3
 8009ab0:	d226      	bcs.n	8009b00 <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8009ab2:	4c2a      	ldr	r4, [pc, #168]	; (8009b5c <HAL_FLASHEx_Erase+0x10c>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009ab4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8009b60 <HAL_FLASHEx_Erase+0x110>
 8009ab8:	e005      	b.n	8009ac6 <HAL_FLASHEx_Erase+0x76>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009aba:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8009abe:	3501      	adds	r5, #1
 8009ac0:	4413      	add	r3, r2
 8009ac2:	42ab      	cmp	r3, r5
 8009ac4:	d91c      	bls.n	8009b00 <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8009ac6:	6962      	ldr	r2, [r4, #20]
 8009ac8:	00eb      	lsls	r3, r5, #3
 8009aca:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
 8009ace:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009ad6:	6963      	ldr	r3, [r4, #20]
 8009ad8:	f043 0302 	orr.w	r3, r3, #2
 8009adc:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009ade:	6963      	ldr	r3, [r4, #20]
 8009ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae4:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009ae6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009aea:	f7ff fee9 	bl	80098c0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8009aee:	6963      	ldr	r3, [r4, #20]
 8009af0:	ea03 0309 	and.w	r3, r3, r9
 8009af4:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d0df      	beq.n	8009aba <HAL_FLASHEx_Erase+0x6a>
          *PageError = page_index;
 8009afa:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009afe:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 8009b00:	f7ff ff76 	bl	80099f0 <FLASH_FlushCaches>
 8009b04:	e7b4      	b.n	8009a70 <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 8009b06:	2602      	movs	r6, #2
}
 8009b08:	4630      	mov	r0, r6
 8009b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009b0e:	0551      	lsls	r1, r2, #21
 8009b10:	d506      	bpl.n	8009b20 <HAL_FLASHEx_Erase+0xd0>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b18:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	773b      	strb	r3, [r7, #28]
 8009b1e:	e7bb      	b.n	8009a98 <HAL_FLASHEx_Erase+0x48>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009b20:	773c      	strb	r4, [r7, #28]
 8009b22:	e7b9      	b.n	8009a98 <HAL_FLASHEx_Erase+0x48>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009b24:	7738      	strb	r0, [r7, #28]
 8009b26:	e7b7      	b.n	8009a98 <HAL_FLASHEx_Erase+0x48>
    if((Banks & FLASH_BANK_1) != 0U)
 8009b28:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009b2c:	07db      	lsls	r3, r3, #31
 8009b2e:	d504      	bpl.n	8009b3a <HAL_FLASHEx_Erase+0xea>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8009b30:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <HAL_FLASHEx_Erase+0x10c>)
 8009b32:	6953      	ldr	r3, [r2, #20]
 8009b34:	f043 0304 	orr.w	r3, r3, #4
 8009b38:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009b3a:	4c08      	ldr	r4, [pc, #32]	; (8009b5c <HAL_FLASHEx_Erase+0x10c>)
 8009b3c:	6963      	ldr	r3, [r4, #20]
 8009b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b42:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009b44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009b48:	f7ff feba 	bl	80098c0 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009b4c:	6963      	ldr	r3, [r4, #20]
 8009b4e:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009b52:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8009b54:	6163      	str	r3, [r4, #20]
 8009b56:	e7d3      	b.n	8009b00 <HAL_FLASHEx_Erase+0xb0>
 8009b58:	20000018 	.word	0x20000018
 8009b5c:	40022000 	.word	0x40022000
 8009b60:	fffffc05 	.word	0xfffffc05

08009b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b68:	680c      	ldr	r4, [r1, #0]
{
 8009b6a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b6c:	2c00      	cmp	r4, #0
 8009b6e:	d077      	beq.n	8009c60 <HAL_GPIO_Init+0xfc>
 8009b70:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b74:	4e69      	ldr	r6, [pc, #420]	; (8009d1c <HAL_GPIO_Init+0x1b8>)
  uint32_t position = 0x00u;
 8009b76:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009b78:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009b7c:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009b7e:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8009b82:	ea17 0a04 	ands.w	sl, r7, r4
 8009b86:	d065      	beq.n	8009c54 <HAL_GPIO_Init+0xf0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b88:	f8de 1004 	ldr.w	r1, [lr, #4]
 8009b8c:	f001 0203 	and.w	r2, r1, #3
 8009b90:	1e55      	subs	r5, r2, #1
 8009b92:	2d01      	cmp	r5, #1
 8009b94:	d967      	bls.n	8009c66 <HAL_GPIO_Init+0x102>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b96:	2a03      	cmp	r2, #3
 8009b98:	f040 80ab 	bne.w	8009cf2 <HAL_GPIO_Init+0x18e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009b9c:	fa02 f20c 	lsl.w	r2, r2, ip
 8009ba0:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8009ba2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009ba4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009ba6:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009ba8:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8009bac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009bae:	d051      	beq.n	8009c54 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bb0:	4d5b      	ldr	r5, [pc, #364]	; (8009d20 <HAL_GPIO_Init+0x1bc>)
 8009bb2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009bb4:	f042 0201 	orr.w	r2, r2, #1
 8009bb8:	662a      	str	r2, [r5, #96]	; 0x60
 8009bba:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009bbc:	f002 0201 	and.w	r2, r2, #1
 8009bc0:	9203      	str	r2, [sp, #12]
 8009bc2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8009bc4:	f023 0203 	bic.w	r2, r3, #3
 8009bc8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009bcc:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009bd0:	f003 0503 	and.w	r5, r3, #3
 8009bd4:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8009bd8:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009bda:	250f      	movs	r5, #15
 8009bdc:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009be0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009be4:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009be8:	d015      	beq.n	8009c16 <HAL_GPIO_Init+0xb2>
 8009bea:	4d4e      	ldr	r5, [pc, #312]	; (8009d24 <HAL_GPIO_Init+0x1c0>)
 8009bec:	42a8      	cmp	r0, r5
 8009bee:	f000 808b 	beq.w	8009d08 <HAL_GPIO_Init+0x1a4>
 8009bf2:	4d4d      	ldr	r5, [pc, #308]	; (8009d28 <HAL_GPIO_Init+0x1c4>)
 8009bf4:	42a8      	cmp	r0, r5
 8009bf6:	f000 808b 	beq.w	8009d10 <HAL_GPIO_Init+0x1ac>
 8009bfa:	4d4c      	ldr	r5, [pc, #304]	; (8009d2c <HAL_GPIO_Init+0x1c8>)
 8009bfc:	42a8      	cmp	r0, r5
 8009bfe:	d07d      	beq.n	8009cfc <HAL_GPIO_Init+0x198>
 8009c00:	4d4b      	ldr	r5, [pc, #300]	; (8009d30 <HAL_GPIO_Init+0x1cc>)
 8009c02:	42a8      	cmp	r0, r5
 8009c04:	bf13      	iteet	ne
 8009c06:	2507      	movne	r5, #7
 8009c08:	f04f 0804 	moveq.w	r8, #4
 8009c0c:	fa08 f509 	lsleq.w	r5, r8, r9
 8009c10:	fa05 f509 	lslne.w	r5, r5, r9
 8009c14:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009c16:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR1;
 8009c18:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8009c1a:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009c1e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8009c20:	bf54      	ite	pl
 8009c22:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8009c24:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8009c28:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8009c2a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009c2c:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8009c2e:	bf54      	ite	pl
 8009c30:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8009c32:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8009c36:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009c38:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009c3a:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8009c3c:	bf54      	ite	pl
 8009c3e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8009c40:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8009c44:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8009c46:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009c48:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8009c4a:	bf54      	ite	pl
 8009c4c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8009c4e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8009c52:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8009c54:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c56:	fa34 f203 	lsrs.w	r2, r4, r3
 8009c5a:	f10c 0c02 	add.w	ip, ip, #2
 8009c5e:	d18e      	bne.n	8009b7e <HAL_GPIO_Init+0x1a>
  }
}
 8009c60:	b005      	add	sp, #20
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8009c66:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009c6a:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009c6e:	f04f 0803 	mov.w	r8, #3
 8009c72:	fa08 f80c 	lsl.w	r8, r8, ip
 8009c76:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009c7a:	fa05 f50c 	lsl.w	r5, r5, ip
 8009c7e:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8009c82:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009c84:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8009c88:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c8c:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009c90:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8009c94:	409f      	lsls	r7, r3
 8009c96:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8009c9a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8009c9c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009c9e:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009ca2:	f8de 7008 	ldr.w	r7, [lr, #8]
 8009ca6:	fa07 f70c 	lsl.w	r7, r7, ip
 8009caa:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cae:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8009cb0:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cb2:	fa02 f20c 	lsl.w	r2, r2, ip
 8009cb6:	f47f af74 	bne.w	8009ba2 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 8009cba:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8009cbe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009cc2:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8009cc6:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8009cca:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009ccc:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009cd0:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009cd4:	fa07 f708 	lsl.w	r7, r7, r8
 8009cd8:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009cda:	270f      	movs	r7, #15
 8009cdc:	fa07 f808 	lsl.w	r8, r7, r8
 8009ce0:	9f00      	ldr	r7, [sp, #0]
 8009ce2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009ce6:	9f01      	ldr	r7, [sp, #4]
 8009ce8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8009cec:	f8c9 7020 	str.w	r7, [r9, #32]
 8009cf0:	e757      	b.n	8009ba2 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009cf2:	2503      	movs	r5, #3
 8009cf4:	fa05 f50c 	lsl.w	r5, r5, ip
 8009cf8:	43ed      	mvns	r5, r5
 8009cfa:	e7cf      	b.n	8009c9c <HAL_GPIO_Init+0x138>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009cfc:	f04f 0803 	mov.w	r8, #3
 8009d00:	fa08 f509 	lsl.w	r5, r8, r9
 8009d04:	432f      	orrs	r7, r5
 8009d06:	e786      	b.n	8009c16 <HAL_GPIO_Init+0xb2>
 8009d08:	fa0b f509 	lsl.w	r5, fp, r9
 8009d0c:	432f      	orrs	r7, r5
 8009d0e:	e782      	b.n	8009c16 <HAL_GPIO_Init+0xb2>
 8009d10:	f04f 0802 	mov.w	r8, #2
 8009d14:	fa08 f509 	lsl.w	r5, r8, r9
 8009d18:	432f      	orrs	r7, r5
 8009d1a:	e77c      	b.n	8009c16 <HAL_GPIO_Init+0xb2>
 8009d1c:	40010400 	.word	0x40010400
 8009d20:	40021000 	.word	0x40021000
 8009d24:	48000400 	.word	0x48000400
 8009d28:	48000800 	.word	0x48000800
 8009d2c:	48000c00 	.word	0x48000c00
 8009d30:	48001000 	.word	0x48001000

08009d34 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009d34:	6903      	ldr	r3, [r0, #16]
 8009d36:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009d38:	bf14      	ite	ne
 8009d3a:	2001      	movne	r0, #1
 8009d3c:	2000      	moveq	r0, #0
 8009d3e:	4770      	bx	lr

08009d40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009d40:	b10a      	cbz	r2, 8009d46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009d42:	6181      	str	r1, [r0, #24]
 8009d44:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009d46:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop

08009d4c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009d4c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d4e:	ea01 0203 	and.w	r2, r1, r3
 8009d52:	ea21 0103 	bic.w	r1, r1, r3
 8009d56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d5a:	6181      	str	r1, [r0, #24]
}
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop

08009d60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d64:	6803      	ldr	r3, [r0, #0]
{
 8009d66:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8009d68:	6998      	ldr	r0, [r3, #24]
{
 8009d6a:	460d      	mov	r5, r1
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009d6c:	f010 0110 	ands.w	r1, r0, #16
 8009d70:	d044      	beq.n	8009dfc <I2C_IsErrorOccurred+0x9c>
 8009d72:	4617      	mov	r7, r2
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d74:	2210      	movs	r2, #16
 8009d76:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8009d78:	f04f 0900 	mov.w	r9, #0
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
              hi2c->State = HAL_I2C_STATE_READY;
 8009d7c:	f04f 0820 	mov.w	r8, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	0696      	lsls	r6, r2, #26
 8009d84:	d463      	bmi.n	8009e4e <I2C_IsErrorOccurred+0xee>
 8009d86:	f1b9 0f00 	cmp.w	r9, #0
 8009d8a:	d163      	bne.n	8009e54 <I2C_IsErrorOccurred+0xf4>
      if (Timeout != HAL_MAX_DELAY)
 8009d8c:	1c68      	adds	r0, r5, #1
 8009d8e:	d153      	bne.n	8009e38 <I2C_IsErrorOccurred+0xd8>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d90:	699a      	ldr	r2, [r3, #24]
 8009d92:	0691      	lsls	r1, r2, #26
 8009d94:	d5fc      	bpl.n	8009d90 <I2C_IsErrorOccurred+0x30>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d96:	2220      	movs	r2, #32
 8009d98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009d9a:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009d9c:	05d5      	lsls	r5, r2, #23
    error_code |= HAL_I2C_ERROR_AF;
 8009d9e:	f04f 0104 	mov.w	r1, #4
    status = HAL_ERROR;
 8009da2:	f04f 0901 	mov.w	r9, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009da6:	d42d      	bmi.n	8009e04 <I2C_IsErrorOccurred+0xa4>

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009da8:	0557      	lsls	r7, r2, #21
 8009daa:	d53d      	bpl.n	8009e28 <I2C_IsErrorOccurred+0xc8>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009dac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009db0:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8009db2:	f041 0108 	orr.w	r1, r1, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009db6:	0596      	lsls	r6, r2, #22
 8009db8:	d504      	bpl.n	8009dc4 <I2C_IsErrorOccurred+0x64>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009dba:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8009dbe:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009dc2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8009dc8:	bf44      	itt	mi
 8009dca:	2200      	movmi	r2, #0
 8009dcc:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009dce:	699a      	ldr	r2, [r3, #24]
 8009dd0:	07d2      	lsls	r2, r2, #31
 8009dd2:	d524      	bpl.n	8009e1e <I2C_IsErrorOccurred+0xbe>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	4837      	ldr	r0, [pc, #220]	; (8009eb4 <I2C_IsErrorOccurred+0x154>)
 8009dd8:	4002      	ands	r2, r0
 8009dda:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009ddc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dde:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 8009de0:	430b      	orrs	r3, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8009de2:	2120      	movs	r1, #32
    hi2c->ErrorCode |= error_code;
 8009de4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de6:	f04f 0901 	mov.w	r9, #1
    hi2c->State = HAL_I2C_STATE_READY;
 8009dea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009dee:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009df2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  }

  return status;
}
 8009df6:	4648      	mov	r0, r9
 8009df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8009dfc:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 8009dfe:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009e00:	05d5      	lsls	r5, r2, #23
 8009e02:	d5d1      	bpl.n	8009da8 <I2C_IsErrorOccurred+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009e04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009e08:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e0a:	0550      	lsls	r0, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8009e0c:	f041 0101 	orr.w	r1, r1, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009e10:	d5d1      	bpl.n	8009db6 <I2C_IsErrorOccurred+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009e12:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009e16:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8009e18:	f041 0108 	orr.w	r1, r1, #8
 8009e1c:	e7cb      	b.n	8009db6 <I2C_IsErrorOccurred+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	f042 0201 	orr.w	r2, r2, #1
 8009e24:	619a      	str	r2, [r3, #24]
 8009e26:	e7d5      	b.n	8009dd4 <I2C_IsErrorOccurred+0x74>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009e28:	0595      	lsls	r5, r2, #22
 8009e2a:	d4c6      	bmi.n	8009dba <I2C_IsErrorOccurred+0x5a>
  if (status != HAL_OK)
 8009e2c:	f1b9 0f00 	cmp.w	r9, #0
 8009e30:	d1c8      	bne.n	8009dc4 <I2C_IsErrorOccurred+0x64>
}
 8009e32:	4648      	mov	r0, r9
 8009e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e38:	f7fe fd90 	bl	800895c <HAL_GetTick>
 8009e3c:	1bc0      	subs	r0, r0, r7
 8009e3e:	42a8      	cmp	r0, r5
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009e40:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009e42:	d809      	bhi.n	8009e58 <I2C_IsErrorOccurred+0xf8>
 8009e44:	b145      	cbz	r5, 8009e58 <I2C_IsErrorOccurred+0xf8>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009e46:	699a      	ldr	r2, [r3, #24]
 8009e48:	0692      	lsls	r2, r2, #26
 8009e4a:	d59f      	bpl.n	8009d8c <I2C_IsErrorOccurred+0x2c>
 8009e4c:	e7a3      	b.n	8009d96 <I2C_IsErrorOccurred+0x36>
    if (status == HAL_OK)
 8009e4e:	f1b9 0f00 	cmp.w	r9, #0
 8009e52:	d0a0      	beq.n	8009d96 <I2C_IsErrorOccurred+0x36>
    error_code |= HAL_I2C_ERROR_AF;
 8009e54:	2104      	movs	r1, #4
 8009e56:	e7d2      	b.n	8009dfe <I2C_IsErrorOccurred+0x9e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009e58:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8009e5a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009e5e:	6999      	ldr	r1, [r3, #24]
 8009e60:	040e      	lsls	r6, r1, #16
          tmp2 = hi2c->Mode;
 8009e62:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009e64:	d50d      	bpl.n	8009e82 <I2C_IsErrorOccurred+0x122>
 8009e66:	0441      	lsls	r1, r0, #17
 8009e68:	d40b      	bmi.n	8009e82 <I2C_IsErrorOccurred+0x122>
              (tmp1 != I2C_CR2_STOP) && \
 8009e6a:	2a20      	cmp	r2, #32
 8009e6c:	d009      	beq.n	8009e82 <I2C_IsErrorOccurred+0x122>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e74:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8009e76:	f7fe fd71 	bl	800895c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e7a:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	e000      	b.n	8009e82 <I2C_IsErrorOccurred+0x122>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	699e      	ldr	r6, [r3, #24]
 8009e84:	f016 0620 	ands.w	r6, r6, #32
 8009e88:	f47f af7a 	bne.w	8009d80 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009e8c:	f7fe fd66 	bl	800895c <HAL_GetTick>
 8009e90:	1bc0      	subs	r0, r0, r7
 8009e92:	2819      	cmp	r0, #25
 8009e94:	d9f4      	bls.n	8009e80 <I2C_IsErrorOccurred+0x120>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e96:	6c63      	ldr	r3, [r4, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8009e98:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e9c:	f043 0320 	orr.w	r3, r3, #32
 8009ea0:	6463      	str	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8009ea2:	f04f 0901 	mov.w	r9, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8009ea6:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009eaa:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eac:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 8009eb0:	e7e7      	b.n	8009e82 <I2C_IsErrorOccurred+0x122>
 8009eb2:	bf00      	nop
 8009eb4:	fe00e800 	.word	0xfe00e800

08009eb8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	4604      	mov	r4, r0
 8009ebc:	460d      	mov	r5, r1
 8009ebe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ec0:	e004      	b.n	8009ecc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ec2:	f7ff ff4d 	bl	8009d60 <I2C_IsErrorOccurred>
 8009ec6:	b950      	cbnz	r0, 8009ede <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8009ec8:	1c6a      	adds	r2, r5, #1
 8009eca:	d10a      	bne.n	8009ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	079b      	lsls	r3, r3, #30
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ed8:	d5f3      	bpl.n	8009ec2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 8009eda:	2000      	movs	r0, #0
}
 8009edc:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009ede:	2001      	movs	r0, #1
}
 8009ee0:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ee2:	f7fe fd3b 	bl	800895c <HAL_GetTick>
 8009ee6:	1b80      	subs	r0, r0, r6
 8009ee8:	42a8      	cmp	r0, r5
 8009eea:	d801      	bhi.n	8009ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 8009eec:	2d00      	cmp	r5, #0
 8009eee:	d1ed      	bne.n	8009ecc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ef0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ef2:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ef4:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8009ef8:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009efa:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009efc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8009f00:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f04:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        return HAL_ERROR;
 8009f08:	2001      	movs	r0, #1
}
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}

08009f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	4605      	mov	r5, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f14:	e008      	b.n	8009f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f16:	f7ff ff23 	bl	8009d60 <I2C_IsErrorOccurred>
 8009f1a:	b9e0      	cbnz	r0, 8009f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f1c:	f7fe fd1e 	bl	800895c <HAL_GetTick>
 8009f20:	1b80      	subs	r0, r0, r6
 8009f22:	42a0      	cmp	r0, r4
 8009f24:	d809      	bhi.n	8009f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8009f26:	b144      	cbz	r4, 8009f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	069b      	lsls	r3, r3, #26
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f2e:	4632      	mov	r2, r6
 8009f30:	4621      	mov	r1, r4
 8009f32:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f34:	d5ef      	bpl.n	8009f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 8009f36:	2000      	movs	r0, #0
}
 8009f38:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f3a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f3c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f3e:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8009f42:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f44:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009f46:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8009f4a:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f4e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009f52:	2001      	movs	r0, #1
}
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009f56:	2001      	movs	r0, #1
}
 8009f58:	bd70      	pop	{r4, r5, r6, pc}
 8009f5a:	bf00      	nop

08009f5c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	4604      	mov	r4, r0
 8009f60:	460d      	mov	r5, r1
 8009f62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f64:	e00c      	b.n	8009f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f66:	f7ff fefb 	bl	8009d60 <I2C_IsErrorOccurred>
 8009f6a:	b9e8      	cbnz	r0, 8009fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	699a      	ldr	r2, [r3, #24]
 8009f70:	0691      	lsls	r1, r2, #26
 8009f72:	d41b      	bmi.n	8009fac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f74:	f7fe fcf2 	bl	800895c <HAL_GetTick>
 8009f78:	1b80      	subs	r0, r0, r6
 8009f7a:	42a8      	cmp	r0, r5
 8009f7c:	d809      	bhi.n	8009f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8009f7e:	b145      	cbz	r5, 8009f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	075b      	lsls	r3, r3, #29
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f86:	4632      	mov	r2, r6
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f8c:	d5eb      	bpl.n	8009f66 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 8009f8e:	2000      	movs	r0, #0
}
 8009f90:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f92:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009f94:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f96:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8009f98:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f9a:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009f9c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8009fa0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      return HAL_ERROR;
 8009fa4:	2001      	movs	r0, #1
}
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8009fa8:	2001      	movs	r0, #1
}
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009fac:	699a      	ldr	r2, [r3, #24]
 8009fae:	0752      	lsls	r2, r2, #29
 8009fb0:	d502      	bpl.n	8009fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 8009fb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	d1ea      	bne.n	8009f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009fb8:	699a      	ldr	r2, [r3, #24]
 8009fba:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fbe:	bf1c      	itt	ne
 8009fc0:	2110      	movne	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009fc2:	2204      	movne	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fc4:	f04f 0520 	mov.w	r5, #32
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fc8:	bf18      	it	ne
 8009fca:	61d9      	strne	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fcc:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fce:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	4906      	ldr	r1, [pc, #24]	; (8009fec <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
 8009fd4:	400a      	ands	r2, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fd6:	2100      	movs	r1, #0
        I2C_RESET_CR2(hi2c);
 8009fd8:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8009fda:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8009fde:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        return HAL_ERROR;
 8009fe6:	2001      	movs	r0, #1
}
 8009fe8:	bd70      	pop	{r4, r5, r6, pc}
 8009fea:	bf00      	nop
 8009fec:	fe00e800 	.word	0xfe00e800

08009ff0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d04f      	beq.n	800a094 <HAL_I2C_Init+0xa4>
{
 8009ff4:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ff6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a000:	2b00      	cmp	r3, #0
 800a002:	d042      	beq.n	800a08a <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 800a004:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a006:	2224      	movs	r2, #36	; 0x24
 800a008:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a00c:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a00e:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 800a010:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800a018:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a01a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a01c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a01e:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a024:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a026:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a028:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a02a:	d02a      	beq.n	800a082 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a02c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a030:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a032:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a034:	bf04      	itt	eq
 800a036:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800a03a:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a03c:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a03e:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a040:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800a044:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800a048:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a04a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a04c:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a04e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a050:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a052:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a056:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a05a:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a05c:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a05e:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a060:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a062:	4301      	orrs	r1, r0
 800a064:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a066:	6819      	ldr	r1, [r3, #0]
 800a068:	f041 0101 	orr.w	r1, r1, #1
 800a06c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a06e:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800a070:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a072:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a074:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a078:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a07a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 800a07e:	4610      	mov	r0, r2
}
 800a080:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a086:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a088:	e7d8      	b.n	800a03c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800a08a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800a08e:	f7fc fb4f 	bl	8006730 <HAL_I2C_MspInit>
 800a092:	e7b7      	b.n	800a004 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800a094:	2001      	movs	r0, #1
}
 800a096:	4770      	bx	lr

0800a098 <HAL_I2C_Master_Transmit>:
{
 800a098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a09c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a09e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a0a2:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0a4:	2b20      	cmp	r3, #32
 800a0a6:	d179      	bne.n	800a19c <HAL_I2C_Master_Transmit+0x104>
    __HAL_LOCK(hi2c);
 800a0a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	d074      	beq.n	800a19c <HAL_I2C_Master_Transmit+0x104>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a0b8:	460f      	mov	r7, r1
 800a0ba:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800a0bc:	f7fe fc4e 	bl	800895c <HAL_GetTick>
 800a0c0:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0c2:	e004      	b.n	800a0ce <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0c4:	f7fe fc4a 	bl	800895c <HAL_GetTick>
 800a0c8:	1b80      	subs	r0, r0, r6
 800a0ca:	2819      	cmp	r0, #25
 800a0cc:	d869      	bhi.n	800a1a2 <HAL_I2C_Master_Transmit+0x10a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	6998      	ldr	r0, [r3, #24]
 800a0d2:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800a0d6:	d1f5      	bne.n	800a0c4 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a0d8:	2221      	movs	r2, #33	; 0x21
 800a0da:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a0de:	2210      	movs	r2, #16
 800a0e0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0e4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a0e6:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800a0ec:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0f0:	b292      	uxth	r2, r2
 800a0f2:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 800a0f4:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0f6:	d876      	bhi.n	800a1e6 <HAL_I2C_Master_Transmit+0x14e>
      hi2c->XferSize = hi2c->XferCount;
 800a0f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a0fa:	6858      	ldr	r0, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800a0fc:	b292      	uxth	r2, r2
 800a0fe:	8522      	strh	r2, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a100:	b2d1      	uxtb	r1, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800a102:	4a4e      	ldr	r2, [pc, #312]	; (800a23c <HAL_I2C_Master_Transmit+0x1a4>)
 800a104:	4010      	ands	r0, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a106:	f3c7 0209 	ubfx	r2, r7, #0, #10
 800a10a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800a10e:	4302      	orrs	r2, r0
 800a110:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a118:	605a      	str	r2, [r3, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a11a:	f3c7 0709 	ubfx	r7, r7, #0, #10
    while (hi2c->XferCount > 0U)
 800a11e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a120:	b29b      	uxth	r3, r3
 800a122:	b333      	cbz	r3, 800a172 <HAL_I2C_Master_Transmit+0xda>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a124:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800a244 <HAL_I2C_Master_Transmit+0x1ac>
 800a128:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800a248 <HAL_I2C_Master_Transmit+0x1b0>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a12c:	b2bf      	uxth	r7, r7
 800a12e:	e002      	b.n	800a136 <HAL_I2C_Master_Transmit+0x9e>
    while (hi2c->XferCount > 0U)
 800a130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a132:	b29b      	uxth	r3, r3
 800a134:	b1eb      	cbz	r3, 800a172 <HAL_I2C_Master_Transmit+0xda>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a136:	4632      	mov	r2, r6
 800a138:	4629      	mov	r1, r5
 800a13a:	4620      	mov	r0, r4
 800a13c:	f7ff febc 	bl	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a140:	2800      	cmp	r0, #0
 800a142:	d177      	bne.n	800a234 <HAL_I2C_Master_Transmit+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a144:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a146:	6821      	ldr	r1, [r4, #0]
 800a148:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a14c:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800a14e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a150:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a152:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a154:	3a01      	subs	r2, #1
 800a156:	b292      	uxth	r2, r2
 800a158:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a15a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a15c:	3b01      	subs	r3, #1
 800a15e:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a160:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800a162:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a164:	2a00      	cmp	r2, #0
 800a166:	d0e3      	beq.n	800a130 <HAL_I2C_Master_Transmit+0x98>
 800a168:	b363      	cbz	r3, 800a1c4 <HAL_I2C_Master_Transmit+0x12c>
    while (hi2c->XferCount > 0U)
 800a16a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1e1      	bne.n	800a136 <HAL_I2C_Master_Transmit+0x9e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a172:	4632      	mov	r2, r6
 800a174:	4629      	mov	r1, r5
 800a176:	4620      	mov	r0, r4
 800a178:	f7ff fec8 	bl	8009f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d159      	bne.n	800a234 <HAL_I2C_Master_Transmit+0x19c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a180:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800a182:	4d2f      	ldr	r5, [pc, #188]	; (800a240 <HAL_I2C_Master_Transmit+0x1a8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a184:	2120      	movs	r1, #32
 800a186:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	402a      	ands	r2, r5
 800a18c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a18e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a192:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a196:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a19a:	e000      	b.n	800a19e <HAL_I2C_Master_Transmit+0x106>
    return HAL_BUSY;
 800a19c:	2002      	movs	r0, #2
}
 800a19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1a6:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800a1aa:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1ac:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a1ae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800a1b2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1b6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800a1ba:	2001      	movs	r0, #1
}
 800a1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800a1c0:	1c6a      	adds	r2, r5, #1
 800a1c2:	d120      	bne.n	800a206 <HAL_I2C_Master_Transmit+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1c4:	698b      	ldr	r3, [r1, #24]
 800a1c6:	061b      	lsls	r3, r3, #24
 800a1c8:	d5fa      	bpl.n	800a1c0 <HAL_I2C_Master_Transmit+0x128>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	2bff      	cmp	r3, #255	; 0xff
 800a1d0:	d922      	bls.n	800a218 <HAL_I2C_Master_Transmit+0x180>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1d2:	684b      	ldr	r3, [r1, #4]
 800a1d4:	ea03 0308 	and.w	r3, r3, r8
 800a1d8:	433b      	orrs	r3, r7
 800a1da:	ea43 0309 	orr.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1de:	22ff      	movs	r2, #255	; 0xff
 800a1e0:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1e2:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a1e4:	e7a4      	b.n	800a130 <HAL_I2C_Master_Transmit+0x98>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1e6:	6859      	ldr	r1, [r3, #4]
 800a1e8:	4a14      	ldr	r2, [pc, #80]	; (800a23c <HAL_I2C_Master_Transmit+0x1a4>)
 800a1ea:	4011      	ands	r1, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1ec:	f3c7 0209 	ubfx	r2, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	f042 72ff 	orr.w	r2, r2, #33423360	; 0x1fe0000
 800a1f6:	f442 3290 	orr.w	r2, r2, #73728	; 0x12000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1fa:	21ff      	movs	r1, #255	; 0xff
 800a1fc:	8521      	strh	r1, [r4, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1fe:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a202:	605a      	str	r2, [r3, #4]
}
 800a204:	e78b      	b.n	800a11e <HAL_I2C_Master_Transmit+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a206:	f7fe fba9 	bl	800895c <HAL_GetTick>
 800a20a:	1b80      	subs	r0, r0, r6
 800a20c:	4285      	cmp	r5, r0
 800a20e:	d3c8      	bcc.n	800a1a2 <HAL_I2C_Master_Transmit+0x10a>
 800a210:	2d00      	cmp	r5, #0
 800a212:	d0c6      	beq.n	800a1a2 <HAL_I2C_Master_Transmit+0x10a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a214:	6821      	ldr	r1, [r4, #0]
 800a216:	e7d5      	b.n	800a1c4 <HAL_I2C_Master_Transmit+0x12c>
          hi2c->XferSize = hi2c->XferCount;
 800a218:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a21e:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800a220:	684b      	ldr	r3, [r1, #4]
 800a222:	ea03 0308 	and.w	r3, r3, r8
 800a226:	433b      	orrs	r3, r7
 800a228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a22c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a230:	604b      	str	r3, [r1, #4]
}
 800a232:	e77d      	b.n	800a130 <HAL_I2C_Master_Transmit+0x98>
        return HAL_ERROR;
 800a234:	2001      	movs	r0, #1
}
 800a236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a23a:	bf00      	nop
 800a23c:	fc009800 	.word	0xfc009800
 800a240:	fe00e800 	.word	0xfe00e800
 800a244:	fc009c00 	.word	0xfc009c00
 800a248:	01ff0000 	.word	0x01ff0000

0800a24c <HAL_I2C_Master_Receive>:
{
 800a24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a250:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a252:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a256:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a258:	2b20      	cmp	r3, #32
 800a25a:	f040 8095 	bne.w	800a388 <HAL_I2C_Master_Receive+0x13c>
    __HAL_LOCK(hi2c);
 800a25e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a262:	2b01      	cmp	r3, #1
 800a264:	4604      	mov	r4, r0
 800a266:	f000 808f 	beq.w	800a388 <HAL_I2C_Master_Receive+0x13c>
 800a26a:	2301      	movs	r3, #1
 800a26c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a270:	460f      	mov	r7, r1
 800a272:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800a274:	f7fe fb72 	bl	800895c <HAL_GetTick>
 800a278:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a27a:	e005      	b.n	800a288 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a27c:	f7fe fb6e 	bl	800895c <HAL_GetTick>
 800a280:	1b80      	subs	r0, r0, r6
 800a282:	2819      	cmp	r0, #25
 800a284:	f200 808a 	bhi.w	800a39c <HAL_I2C_Master_Receive+0x150>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	6998      	ldr	r0, [r3, #24]
 800a28c:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800a290:	d1f4      	bne.n	800a27c <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a292:	2222      	movs	r2, #34	; 0x22
 800a294:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a298:	2210      	movs	r2, #16
 800a29a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a29e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a2a0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800a2a6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2aa:	b292      	uxth	r2, r2
 800a2ac:	2aff      	cmp	r2, #255	; 0xff
    hi2c->XferISR   = NULL;
 800a2ae:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2b0:	f200 8083 	bhi.w	800a3ba <HAL_I2C_Master_Receive+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 800a2b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a2b6:	6858      	ldr	r0, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800a2b8:	b292      	uxth	r2, r2
 800a2ba:	8522      	strh	r2, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a2bc:	b2d1      	uxtb	r1, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800a2be:	4a4f      	ldr	r2, [pc, #316]	; (800a3fc <HAL_I2C_Master_Receive+0x1b0>)
 800a2c0:	4010      	ands	r0, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a2c2:	f3c7 0209 	ubfx	r2, r7, #0, #10
 800a2c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800a2ca:	4302      	orrs	r2, r0
 800a2cc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a2d0:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800a2d4:	605a      	str	r2, [r3, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a2d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
    while (hi2c->XferCount > 0U)
 800a2da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d03d      	beq.n	800a35e <HAL_I2C_Master_Receive+0x112>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a2e2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800a404 <HAL_I2C_Master_Receive+0x1b8>
 800a2e6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800a408 <HAL_I2C_Master_Receive+0x1bc>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a2ea:	b2bf      	uxth	r7, r7
 800a2ec:	e003      	b.n	800a2f6 <HAL_I2C_Master_Receive+0xaa>
    while (hi2c->XferCount > 0U)
 800a2ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d033      	beq.n	800a35e <HAL_I2C_Master_Receive+0x112>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2f6:	4632      	mov	r2, r6
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7ff fe2e 	bl	8009f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a300:	2800      	cmp	r0, #0
 800a302:	d178      	bne.n	800a3f6 <HAL_I2C_Master_Receive+0x1aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a304:	6822      	ldr	r2, [r4, #0]
 800a306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a308:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a30a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800a30c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a30e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a310:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a312:	3a01      	subs	r2, #1
 800a314:	b292      	uxth	r2, r2
 800a316:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a318:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a31a:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800a31c:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800a31e:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a320:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800a322:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800a324:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a326:	2a00      	cmp	r2, #0
 800a328:	d0e1      	beq.n	800a2ee <HAL_I2C_Master_Receive+0xa2>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1df      	bne.n	800a2ee <HAL_I2C_Master_Receive+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	e001      	b.n	800a336 <HAL_I2C_Master_Receive+0xea>
    if (Timeout != HAL_MAX_DELAY)
 800a332:	1c69      	adds	r1, r5, #1
 800a334:	d12b      	bne.n	800a38e <HAL_I2C_Master_Receive+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a336:	6993      	ldr	r3, [r2, #24]
 800a338:	061b      	lsls	r3, r3, #24
 800a33a:	d5fa      	bpl.n	800a332 <HAL_I2C_Master_Receive+0xe6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a33c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2bff      	cmp	r3, #255	; 0xff
 800a342:	d94a      	bls.n	800a3da <HAL_I2C_Master_Receive+0x18e>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a344:	6853      	ldr	r3, [r2, #4]
 800a346:	ea03 0308 	and.w	r3, r3, r8
 800a34a:	433b      	orrs	r3, r7
 800a34c:	ea43 0309 	orr.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a350:	21ff      	movs	r1, #255	; 0xff
 800a352:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a354:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 800a356:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1cb      	bne.n	800a2f6 <HAL_I2C_Master_Receive+0xaa>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a35e:	4632      	mov	r2, r6
 800a360:	4629      	mov	r1, r5
 800a362:	4620      	mov	r0, r4
 800a364:	f7ff fdd2 	bl	8009f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d144      	bne.n	800a3f6 <HAL_I2C_Master_Receive+0x1aa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a36c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800a36e:	4d24      	ldr	r5, [pc, #144]	; (800a400 <HAL_I2C_Master_Receive+0x1b4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a370:	2120      	movs	r1, #32
 800a372:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	402a      	ands	r2, r5
 800a378:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a37a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a37e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a382:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a386:	e000      	b.n	800a38a <HAL_I2C_Master_Receive+0x13e>
    return HAL_BUSY;
 800a388:	2002      	movs	r0, #2
}
 800a38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a38e:	f7fe fae5 	bl	800895c <HAL_GetTick>
 800a392:	1b80      	subs	r0, r0, r6
 800a394:	4285      	cmp	r5, r0
 800a396:	d301      	bcc.n	800a39c <HAL_I2C_Master_Receive+0x150>
 800a398:	2d00      	cmp	r5, #0
 800a39a:	d1c8      	bne.n	800a32e <HAL_I2C_Master_Receive+0xe2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a39c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a39e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3a0:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800a3a4:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3a6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a3a8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800a3ac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800a3b4:	2001      	movs	r0, #1
}
 800a3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3ba:	6859      	ldr	r1, [r3, #4]
 800a3bc:	4a0f      	ldr	r2, [pc, #60]	; (800a3fc <HAL_I2C_Master_Receive+0x1b0>)
 800a3be:	4011      	ands	r1, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3c0:	f3c7 0209 	ubfx	r2, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	f042 72ff 	orr.w	r2, r2, #33423360	; 0x1fe0000
 800a3ca:	f442 3292 	orr.w	r2, r2, #74752	; 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3ce:	21ff      	movs	r1, #255	; 0xff
 800a3d0:	8521      	strh	r1, [r4, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3d2:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3d6:	605a      	str	r2, [r3, #4]
}
 800a3d8:	e77f      	b.n	800a2da <HAL_I2C_Master_Receive+0x8e>
          hi2c->XferSize = hi2c->XferCount;
 800a3da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3dc:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3e2:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3e4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3e8:	ea01 0108 	and.w	r1, r1, r8
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a3f2:	6053      	str	r3, [r2, #4]
}
 800a3f4:	e77b      	b.n	800a2ee <HAL_I2C_Master_Receive+0xa2>
        return HAL_ERROR;
 800a3f6:	2001      	movs	r0, #1
}
 800a3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3fc:	fc009800 	.word	0xfc009800
 800a400:	fe00e800 	.word	0xfe00e800
 800a404:	fc009c00 	.word	0xfc009c00
 800a408:	01ff0000 	.word	0x01ff0000

0800a40c <HAL_I2C_Mem_Write>:
{
 800a40c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a412:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a416:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
 800a41a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a41c:	2b20      	cmp	r3, #32
 800a41e:	f040 80a8 	bne.w	800a572 <HAL_I2C_Mem_Write+0x166>
    if ((pData == NULL) || (Size == 0U))
 800a422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a424:	4604      	mov	r4, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 809d 	beq.w	800a566 <HAL_I2C_Mem_Write+0x15a>
 800a42c:	f1bb 0f00 	cmp.w	fp, #0
 800a430:	f000 8099 	beq.w	800a566 <HAL_I2C_Mem_Write+0x15a>
    __HAL_LOCK(hi2c);
 800a434:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a438:	2b01      	cmp	r3, #1
 800a43a:	f000 809a 	beq.w	800a572 <HAL_I2C_Mem_Write+0x166>
 800a43e:	2301      	movs	r3, #1
 800a440:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a444:	4688      	mov	r8, r1
 800a446:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800a448:	f7fe fa88 	bl	800895c <HAL_GetTick>
 800a44c:	4607      	mov	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a44e:	e005      	b.n	800a45c <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a450:	f7fe fa84 	bl	800895c <HAL_GetTick>
 800a454:	1bc0      	subs	r0, r0, r7
 800a456:	2819      	cmp	r0, #25
 800a458:	f200 808e 	bhi.w	800a578 <HAL_I2C_Mem_Write+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	699d      	ldr	r5, [r3, #24]
 800a460:	f415 4500 	ands.w	r5, r5, #32768	; 0x8000
 800a464:	d1f4      	bne.n	800a450 <HAL_I2C_Mem_Write+0x44>
    hi2c->pBuffPtr  = pData;
 800a466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a468:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a46a:	2221      	movs	r2, #33	; 0x21
 800a46c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a470:	2240      	movs	r2, #64	; 0x40
 800a472:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a476:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a478:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	4975      	ldr	r1, [pc, #468]	; (800a654 <HAL_I2C_Mem_Write+0x248>)
    hi2c->XferISR   = NULL;
 800a480:	6365      	str	r5, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800a482:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a484:	fa5f f18a 	uxtb.w	r1, sl
  MODIFY_REG(hi2c->Instance->CR2, \
 800a488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a48c:	f3c8 0809 	ubfx	r8, r8, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a490:	ea42 0208 	orr.w	r2, r2, r8
 800a494:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a49c:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a49e:	4631      	mov	r1, r6
 800a4a0:	463a      	mov	r2, r7
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f7ff fd08 	bl	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	f040 8096 	bne.w	800a5da <HAL_I2C_Mem_Write+0x1ce>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a4ae:	f1ba 0f01 	cmp.w	sl, #1
 800a4b2:	f040 8086 	bne.w	800a5c2 <HAL_I2C_Mem_Write+0x1b6>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a4b6:	6822      	ldr	r2, [r4, #0]
 800a4b8:	fa5f f389 	uxtb.w	r3, r9
 800a4bc:	6293      	str	r3, [r2, #40]	; 0x28
 800a4be:	e001      	b.n	800a4c4 <HAL_I2C_Mem_Write+0xb8>
    if (Timeout != HAL_MAX_DELAY)
 800a4c0:	1c75      	adds	r5, r6, #1
 800a4c2:	d168      	bne.n	800a596 <HAL_I2C_Mem_Write+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4c4:	6993      	ldr	r3, [r2, #24]
 800a4c6:	0618      	lsls	r0, r3, #24
 800a4c8:	d5fa      	bpl.n	800a4c0 <HAL_I2C_Mem_Write+0xb4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	2bff      	cmp	r3, #255	; 0xff
 800a4d0:	d86a      	bhi.n	800a5a8 <HAL_I2C_Mem_Write+0x19c>
      hi2c->XferSize = hi2c->XferCount;
 800a4d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a4d4:	4860      	ldr	r0, [pc, #384]	; (800a658 <HAL_I2C_Mem_Write+0x24c>)
      hi2c->XferSize = hi2c->XferCount;
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a4da:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800a4dc:	6853      	ldr	r3, [r2, #4]
 800a4de:	4003      	ands	r3, r0
 800a4e0:	ea43 0308 	orr.w	r3, r3, r8
 800a4e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a4e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a4ec:	6053      	str	r3, [r2, #4]
 800a4ee:	4d5a      	ldr	r5, [pc, #360]	; (800a658 <HAL_I2C_Mem_Write+0x24c>)
 800a4f0:	f8df a16c 	ldr.w	sl, [pc, #364]	; 800a660 <HAL_I2C_Mem_Write+0x254>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4f4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800a4f8:	e004      	b.n	800a504 <HAL_I2C_Mem_Write+0xf8>
    } while (hi2c->XferCount > 0U);
 800a4fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 8089 	beq.w	800a616 <HAL_I2C_Mem_Write+0x20a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a504:	463a      	mov	r2, r7
 800a506:	4631      	mov	r1, r6
 800a508:	4620      	mov	r0, r4
 800a50a:	f7ff fcd5 	bl	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d17f      	bne.n	800a612 <HAL_I2C_Mem_Write+0x206>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a514:	6822      	ldr	r2, [r4, #0]
 800a516:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a51a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a51c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a51e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a520:	3b01      	subs	r3, #1
 800a522:	b29b      	uxth	r3, r3
 800a524:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a526:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a528:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a52a:	3b01      	subs	r3, #1
 800a52c:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a52e:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 800a530:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a532:	2900      	cmp	r1, #0
 800a534:	d0e1      	beq.n	800a4fa <HAL_I2C_Mem_Write+0xee>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1df      	bne.n	800a4fa <HAL_I2C_Mem_Write+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a53a:	6993      	ldr	r3, [r2, #24]
 800a53c:	061b      	lsls	r3, r3, #24
 800a53e:	d404      	bmi.n	800a54a <HAL_I2C_Mem_Write+0x13e>
    if (Timeout != HAL_MAX_DELAY)
 800a540:	1c71      	adds	r1, r6, #1
 800a542:	d14f      	bne.n	800a5e4 <HAL_I2C_Mem_Write+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a544:	6993      	ldr	r3, [r2, #24]
 800a546:	061b      	lsls	r3, r3, #24
 800a548:	d5fa      	bpl.n	800a540 <HAL_I2C_Mem_Write+0x134>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a54a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	2bff      	cmp	r3, #255	; 0xff
 800a550:	d951      	bls.n	800a5f6 <HAL_I2C_Mem_Write+0x1ea>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a552:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a554:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a558:	402b      	ands	r3, r5
 800a55a:	ea43 0308 	orr.w	r3, r3, r8
 800a55e:	ea43 030a 	orr.w	r3, r3, sl
 800a562:	6053      	str	r3, [r2, #4]
}
 800a564:	e7c9      	b.n	800a4fa <HAL_I2C_Mem_Write+0xee>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a56a:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800a56c:	2001      	movs	r0, #1
}
 800a56e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800a572:	2002      	movs	r0, #2
}
 800a574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a578:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a57a:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a57c:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800a580:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a582:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a584:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800a588:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a58c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          return HAL_ERROR;
 800a590:	2001      	movs	r0, #1
}
 800a592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a596:	f7fe f9e1 	bl	800895c <HAL_GetTick>
 800a59a:	1bc0      	subs	r0, r0, r7
 800a59c:	4286      	cmp	r6, r0
 800a59e:	d34f      	bcc.n	800a640 <HAL_I2C_Mem_Write+0x234>
 800a5a0:	2e00      	cmp	r6, #0
 800a5a2:	d04d      	beq.n	800a640 <HAL_I2C_Mem_Write+0x234>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	e78d      	b.n	800a4c4 <HAL_I2C_Mem_Write+0xb8>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a5a8:	6853      	ldr	r3, [r2, #4]
 800a5aa:	492b      	ldr	r1, [pc, #172]	; (800a658 <HAL_I2C_Mem_Write+0x24c>)
 800a5ac:	400b      	ands	r3, r1
 800a5ae:	ea43 0308 	orr.w	r3, r3, r8
 800a5b2:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 800a5b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5ba:	21ff      	movs	r1, #255	; 0xff
 800a5bc:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a5be:	6053      	str	r3, [r2, #4]
}
 800a5c0:	e795      	b.n	800a4ee <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800a5c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	463a      	mov	r2, r7
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7ff fc72 	bl	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	f43f af6e 	beq.w	800a4b6 <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	e7c4      	b.n	800a56e <HAL_I2C_Mem_Write+0x162>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5e4:	f7fe f9ba 	bl	800895c <HAL_GetTick>
 800a5e8:	1bc0      	subs	r0, r0, r7
 800a5ea:	4286      	cmp	r6, r0
 800a5ec:	d3c4      	bcc.n	800a578 <HAL_I2C_Mem_Write+0x16c>
 800a5ee:	2e00      	cmp	r6, #0
 800a5f0:	d0c2      	beq.n	800a578 <HAL_I2C_Mem_Write+0x16c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	e7a6      	b.n	800a544 <HAL_I2C_Mem_Write+0x138>
          hi2c->XferSize = hi2c->XferCount;
 800a5f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a5fc:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800a5fe:	6853      	ldr	r3, [r2, #4]
 800a600:	402b      	ands	r3, r5
 800a602:	ea43 0308 	orr.w	r3, r3, r8
 800a606:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a60a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a60e:	6053      	str	r3, [r2, #4]
}
 800a610:	e773      	b.n	800a4fa <HAL_I2C_Mem_Write+0xee>
        return HAL_ERROR;
 800a612:	2001      	movs	r0, #1
 800a614:	e7ab      	b.n	800a56e <HAL_I2C_Mem_Write+0x162>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a616:	463a      	mov	r2, r7
 800a618:	4631      	mov	r1, r6
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7ff fc76 	bl	8009f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a620:	2800      	cmp	r0, #0
 800a622:	d1f6      	bne.n	800a612 <HAL_I2C_Mem_Write+0x206>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a624:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800a626:	4d0d      	ldr	r5, [pc, #52]	; (800a65c <HAL_I2C_Mem_Write+0x250>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a628:	2120      	movs	r1, #32
 800a62a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	402a      	ands	r2, r5
 800a630:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a632:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a636:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a63a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a63e:	e796      	b.n	800a56e <HAL_I2C_Mem_Write+0x162>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a640:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a642:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a644:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a646:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a648:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a64a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a64e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    return HAL_ERROR;
 800a652:	e7c2      	b.n	800a5da <HAL_I2C_Mem_Write+0x1ce>
 800a654:	fc009800 	.word	0xfc009800
 800a658:	fc009c00 	.word	0xfc009c00
 800a65c:	fe00e800 	.word	0xfe00e800
 800a660:	01ff0000 	.word	0x01ff0000

0800a664 <HAL_I2C_Mem_Read>:
{
 800a664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a668:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a66a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a66e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800a672:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a674:	2b20      	cmp	r3, #32
 800a676:	f040 808c 	bne.w	800a792 <HAL_I2C_Mem_Read+0x12e>
    if ((pData == NULL) || (Size == 0U))
 800a67a:	9b08      	ldr	r3, [sp, #32]
 800a67c:	4605      	mov	r5, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 8081 	beq.w	800a786 <HAL_I2C_Mem_Read+0x122>
 800a684:	f1ba 0f00 	cmp.w	sl, #0
 800a688:	d07d      	beq.n	800a786 <HAL_I2C_Mem_Read+0x122>
    __HAL_LOCK(hi2c);
 800a68a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d07f      	beq.n	800a792 <HAL_I2C_Mem_Read+0x12e>
 800a692:	2301      	movs	r3, #1
 800a694:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a698:	460f      	mov	r7, r1
 800a69a:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800a69c:	f7fe f95e 	bl	800895c <HAL_GetTick>
 800a6a0:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6a2:	e004      	b.n	800a6ae <HAL_I2C_Mem_Read+0x4a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6a4:	f7fe f95a 	bl	800895c <HAL_GetTick>
 800a6a8:	1b80      	subs	r0, r0, r6
 800a6aa:	2819      	cmp	r0, #25
 800a6ac:	d87b      	bhi.n	800a7a6 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6ae:	682b      	ldr	r3, [r5, #0]
 800a6b0:	6998      	ldr	r0, [r3, #24]
 800a6b2:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800a6b6:	d1f5      	bne.n	800a6a4 <HAL_I2C_Mem_Read+0x40>
    hi2c->pBuffPtr  = pData;
 800a6b8:	9a08      	ldr	r2, [sp, #32]
 800a6ba:	626a      	str	r2, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a6bc:	2222      	movs	r2, #34	; 0x22
 800a6be:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a6c2:	2240      	movs	r2, #64	; 0x40
 800a6c4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6c8:	6468      	str	r0, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800a6ca:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	4974      	ldr	r1, [pc, #464]	; (800a8a4 <HAL_I2C_Mem_Read+0x240>)
    hi2c->XferISR   = NULL;
 800a6d2:	6368      	str	r0, [r5, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800a6d4:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6d6:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800a6da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6de:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a6e2:	433a      	orrs	r2, r7
 800a6e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6e8:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f7ff fbe2 	bl	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	f040 80a2 	bne.w	800a83e <HAL_I2C_Mem_Read+0x1da>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6fa:	f1b8 0f01 	cmp.w	r8, #1
 800a6fe:	f040 8092 	bne.w	800a826 <HAL_I2C_Mem_Read+0x1c2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a702:	6829      	ldr	r1, [r5, #0]
 800a704:	fa5f f389 	uxtb.w	r3, r9
 800a708:	628b      	str	r3, [r1, #40]	; 0x28
 800a70a:	e001      	b.n	800a710 <HAL_I2C_Mem_Read+0xac>
    if (Timeout != HAL_MAX_DELAY)
 800a70c:	1c60      	adds	r0, r4, #1
 800a70e:	d159      	bne.n	800a7c4 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a710:	698b      	ldr	r3, [r1, #24]
 800a712:	065a      	lsls	r2, r3, #25
 800a714:	d5fa      	bpl.n	800a70c <HAL_I2C_Mem_Read+0xa8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a716:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a718:	b29b      	uxth	r3, r3
 800a71a:	2bff      	cmp	r3, #255	; 0xff
 800a71c:	d877      	bhi.n	800a80e <HAL_I2C_Mem_Read+0x1aa>
      hi2c->XferSize = hi2c->XferCount;
 800a71e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a720:	4860      	ldr	r0, [pc, #384]	; (800a8a4 <HAL_I2C_Mem_Read+0x240>)
      hi2c->XferSize = hi2c->XferCount;
 800a722:	b29b      	uxth	r3, r3
 800a724:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a726:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800a728:	684b      	ldr	r3, [r1, #4]
 800a72a:	4003      	ands	r3, r0
 800a72c:	433b      	orrs	r3, r7
 800a72e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a732:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a736:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 800a73a:	604b      	str	r3, [r1, #4]
 800a73c:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800a8ac <HAL_I2C_Mem_Read+0x248>
 800a740:	f8df a16c 	ldr.w	sl, [pc, #364]	; 800a8b0 <HAL_I2C_Mem_Read+0x24c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a744:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800a748:	e001      	b.n	800a74e <HAL_I2C_Mem_Read+0xea>
    if (Timeout != HAL_MAX_DELAY)
 800a74a:	1c63      	adds	r3, r4, #1
 800a74c:	d124      	bne.n	800a798 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a74e:	698b      	ldr	r3, [r1, #24]
 800a750:	0758      	lsls	r0, r3, #29
 800a752:	d5fa      	bpl.n	800a74a <HAL_I2C_Mem_Read+0xe6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a754:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a756:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800a758:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800a75a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800a75c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      hi2c->XferCount--;
 800a75e:	3b01      	subs	r3, #1
 800a760:	b29b      	uxth	r3, r3
 800a762:	856b      	strh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800a764:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800a766:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->pBuffPtr++;
 800a768:	626a      	str	r2, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a76a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800a76c:	3b01      	subs	r3, #1
 800a76e:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a770:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800a772:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a774:	b10a      	cbz	r2, 800a77a <HAL_I2C_Mem_Read+0x116>
 800a776:	2b00      	cmp	r3, #0
 800a778:	d034      	beq.n	800a7e4 <HAL_I2C_Mem_Read+0x180>
    } while (hi2c->XferCount > 0U);
 800a77a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d070      	beq.n	800a864 <HAL_I2C_Mem_Read+0x200>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a782:	6829      	ldr	r1, [r5, #0]
 800a784:	e7e3      	b.n	800a74e <HAL_I2C_Mem_Read+0xea>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a78a:	646b      	str	r3, [r5, #68]	; 0x44
      return  HAL_ERROR;
 800a78c:	2001      	movs	r0, #1
}
 800a78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800a792:	2002      	movs	r0, #2
}
 800a794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a798:	f7fe f8e0 	bl	800895c <HAL_GetTick>
 800a79c:	1b80      	subs	r0, r0, r6
 800a79e:	4284      	cmp	r4, r0
 800a7a0:	d301      	bcc.n	800a7a6 <HAL_I2C_Mem_Read+0x142>
 800a7a2:	2c00      	cmp	r4, #0
 800a7a4:	d1ed      	bne.n	800a782 <HAL_I2C_Mem_Read+0x11e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7a6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7a8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7aa:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800a7ae:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7b0:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800a7b2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800a7b6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7ba:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
 800a7be:	2001      	movs	r0, #1
}
 800a7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7c4:	f7fe f8ca 	bl	800895c <HAL_GetTick>
 800a7c8:	1b80      	subs	r0, r0, r6
 800a7ca:	4284      	cmp	r4, r0
 800a7cc:	d35e      	bcc.n	800a88c <HAL_I2C_Mem_Read+0x228>
 800a7ce:	2c00      	cmp	r4, #0
 800a7d0:	d05c      	beq.n	800a88c <HAL_I2C_Mem_Read+0x228>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7d2:	6829      	ldr	r1, [r5, #0]
 800a7d4:	e79c      	b.n	800a710 <HAL_I2C_Mem_Read+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7d6:	f7fe f8c1 	bl	800895c <HAL_GetTick>
 800a7da:	1b80      	subs	r0, r0, r6
 800a7dc:	4284      	cmp	r4, r0
 800a7de:	d3e2      	bcc.n	800a7a6 <HAL_I2C_Mem_Read+0x142>
 800a7e0:	2c00      	cmp	r4, #0
 800a7e2:	d0e0      	beq.n	800a7a6 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7e4:	682a      	ldr	r2, [r5, #0]
 800a7e6:	e001      	b.n	800a7ec <HAL_I2C_Mem_Read+0x188>
    if (Timeout != HAL_MAX_DELAY)
 800a7e8:	1c61      	adds	r1, r4, #1
 800a7ea:	d1f4      	bne.n	800a7d6 <HAL_I2C_Mem_Read+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7ec:	6993      	ldr	r3, [r2, #24]
 800a7ee:	061b      	lsls	r3, r3, #24
 800a7f0:	d5fa      	bpl.n	800a7e8 <HAL_I2C_Mem_Read+0x184>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7f2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	2bff      	cmp	r3, #255	; 0xff
 800a7f8:	d926      	bls.n	800a848 <HAL_I2C_Mem_Read+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a7fa:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7fc:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a800:	ea03 0308 	and.w	r3, r3, r8
 800a804:	433b      	orrs	r3, r7
 800a806:	ea43 030a 	orr.w	r3, r3, sl
 800a80a:	6053      	str	r3, [r2, #4]
}
 800a80c:	e7b5      	b.n	800a77a <HAL_I2C_Mem_Read+0x116>
  MODIFY_REG(hi2c->Instance->CR2, \
 800a80e:	684b      	ldr	r3, [r1, #4]
 800a810:	4a24      	ldr	r2, [pc, #144]	; (800a8a4 <HAL_I2C_Mem_Read+0x240>)
 800a812:	4013      	ands	r3, r2
 800a814:	433b      	orrs	r3, r7
 800a816:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 800a81a:	f443 3392 	orr.w	r3, r3, #74752	; 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a81e:	22ff      	movs	r2, #255	; 0xff
 800a820:	852a      	strh	r2, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a822:	604b      	str	r3, [r1, #4]
}
 800a824:	e78a      	b.n	800a73c <HAL_I2C_Mem_Read+0xd8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800a82c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a82e:	4621      	mov	r1, r4
 800a830:	4632      	mov	r2, r6
 800a832:	4628      	mov	r0, r5
 800a834:	f7ff fb40 	bl	8009eb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800a838:	2800      	cmp	r0, #0
 800a83a:	f43f af62 	beq.w	800a702 <HAL_I2C_Mem_Read+0x9e>
      __HAL_UNLOCK(hi2c);
 800a83e:	2300      	movs	r3, #0
 800a840:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 800a844:	2001      	movs	r0, #1
 800a846:	e7a2      	b.n	800a78e <HAL_I2C_Mem_Read+0x12a>
          hi2c->XferSize = hi2c->XferCount;
 800a848:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a84a:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a850:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800a852:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a856:	ea01 0108 	and.w	r1, r1, r8
 800a85a:	430b      	orrs	r3, r1
 800a85c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a860:	6053      	str	r3, [r2, #4]
}
 800a862:	e78a      	b.n	800a77a <HAL_I2C_Mem_Read+0x116>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a864:	4632      	mov	r2, r6
 800a866:	4621      	mov	r1, r4
 800a868:	4628      	mov	r0, r5
 800a86a:	f7ff fb4f 	bl	8009f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a86e:	b9b8      	cbnz	r0, 800a8a0 <HAL_I2C_Mem_Read+0x23c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a870:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 800a872:	4c0d      	ldr	r4, [pc, #52]	; (800a8a8 <HAL_I2C_Mem_Read+0x244>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a874:	2120      	movs	r1, #32
 800a876:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a878:	685a      	ldr	r2, [r3, #4]
 800a87a:	4022      	ands	r2, r4
 800a87c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a87e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a882:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a886:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800a88a:	e780      	b.n	800a78e <HAL_I2C_Mem_Read+0x12a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a88c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a88e:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a890:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a892:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a894:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a896:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a89a:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
    return HAL_ERROR;
 800a89e:	e7ce      	b.n	800a83e <HAL_I2C_Mem_Read+0x1da>
      return HAL_ERROR;
 800a8a0:	2001      	movs	r0, #1
 800a8a2:	e774      	b.n	800a78e <HAL_I2C_Mem_Read+0x12a>
 800a8a4:	fc009800 	.word	0xfc009800
 800a8a8:	fe00e800 	.word	0xfe00e800
 800a8ac:	fc009c00 	.word	0xfc009c00
 800a8b0:	01ff0000 	.word	0x01ff0000

0800a8b4 <HAL_I2C_IsDeviceReady>:
{
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	4605      	mov	r5, r0
  __IO uint32_t I2C_Trials = 0UL;
 800a8bc:	2000      	movs	r0, #0
 800a8be:	9001      	str	r0, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8c0:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
 800a8c4:	2820      	cmp	r0, #32
 800a8c6:	d159      	bne.n	800a97c <HAL_I2C_IsDeviceReady+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a8c8:	461f      	mov	r7, r3
 800a8ca:	682b      	ldr	r3, [r5, #0]
 800a8cc:	4690      	mov	r8, r2
 800a8ce:	699a      	ldr	r2, [r3, #24]
 800a8d0:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 800a8d4:	d152      	bne.n	800a97c <HAL_I2C_IsDeviceReady+0xc8>
    __HAL_LOCK(hi2c);
 800a8d6:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800a8da:	2801      	cmp	r0, #1
 800a8dc:	d04e      	beq.n	800a97c <HAL_I2C_IsDeviceReady+0xc8>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a8de:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800a8e2:	f3c1 0a09 	ubfx	sl, r1, #0, #10
    __HAL_LOCK(hi2c);
 800a8e6:	2101      	movs	r1, #1
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a8e8:	f049 7900 	orr.w	r9, r9, #33554432	; 0x2000000
    __HAL_LOCK(hi2c);
 800a8ec:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800a8f0:	2124      	movs	r1, #36	; 0x24
 800a8f2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a8f6:	f449 5900 	orr.w	r9, r9, #8192	; 0x2000
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8fa:	646a      	str	r2, [r5, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a8fc:	68ea      	ldr	r2, [r5, #12]
 800a8fe:	2a01      	cmp	r2, #1
 800a900:	bf0c      	ite	eq
 800a902:	464a      	moveq	r2, r9
 800a904:	f44a 5220 	orrne.w	r2, sl, #10240	; 0x2800
 800a908:	605a      	str	r2, [r3, #4]
      tickstart = HAL_GetTick();
 800a90a:	f7fe f827 	bl	800895c <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a90e:	6829      	ldr	r1, [r5, #0]
      tickstart = HAL_GetTick();
 800a910:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a912:	698a      	ldr	r2, [r1, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a914:	6988      	ldr	r0, [r1, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a916:	f002 0220 	and.w	r2, r2, #32
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a91a:	f000 0010 	and.w	r0, r0, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a91e:	4302      	orrs	r2, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a920:	460b      	mov	r3, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a922:	d113      	bne.n	800a94c <HAL_I2C_IsDeviceReady+0x98>
        if (Timeout != HAL_MAX_DELAY)
 800a924:	1c7c      	adds	r4, r7, #1
 800a926:	d007      	beq.n	800a938 <HAL_I2C_IsDeviceReady+0x84>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a928:	f7fe f818 	bl	800895c <HAL_GetTick>
 800a92c:	1b80      	subs	r0, r0, r6
 800a92e:	42b8      	cmp	r0, r7
 800a930:	d83e      	bhi.n	800a9b0 <HAL_I2C_IsDeviceReady+0xfc>
 800a932:	2f00      	cmp	r7, #0
 800a934:	d03c      	beq.n	800a9b0 <HAL_I2C_IsDeviceReady+0xfc>
 800a936:	6829      	ldr	r1, [r5, #0]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a938:	698c      	ldr	r4, [r1, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a93a:	698a      	ldr	r2, [r1, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a93c:	f004 0c20 	and.w	ip, r4, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a940:	f002 0210 	and.w	r2, r2, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a944:	ea5c 0c02 	orrs.w	ip, ip, r2
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800a948:	460b      	mov	r3, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800a94a:	d0eb      	beq.n	800a924 <HAL_I2C_IsDeviceReady+0x70>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800a94c:	698a      	ldr	r2, [r1, #24]
 800a94e:	06d0      	lsls	r0, r2, #27
 800a950:	d402      	bmi.n	800a958 <HAL_I2C_IsDeviceReady+0xa4>
 800a952:	e019      	b.n	800a988 <HAL_I2C_IsDeviceReady+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 800a954:	1c7c      	adds	r4, r7, #1
 800a956:	d123      	bne.n	800a9a0 <HAL_I2C_IsDeviceReady+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a958:	698b      	ldr	r3, [r1, #24]
 800a95a:	0698      	lsls	r0, r3, #26
 800a95c:	d5fa      	bpl.n	800a954 <HAL_I2C_IsDeviceReady+0xa0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a95e:	2310      	movs	r3, #16
 800a960:	61cb      	str	r3, [r1, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a962:	2320      	movs	r3, #32
 800a964:	61cb      	str	r3, [r1, #28]
      if (I2C_Trials == Trials)
 800a966:	9b01      	ldr	r3, [sp, #4]
 800a968:	4543      	cmp	r3, r8
 800a96a:	d02f      	beq.n	800a9cc <HAL_I2C_IsDeviceReady+0x118>
      I2C_Trials++;
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	3301      	adds	r3, #1
 800a970:	9301      	str	r3, [sp, #4]
    } while (I2C_Trials < Trials);
 800a972:	9b01      	ldr	r3, [sp, #4]
 800a974:	4543      	cmp	r3, r8
 800a976:	d21b      	bcs.n	800a9b0 <HAL_I2C_IsDeviceReady+0xfc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800a978:	460b      	mov	r3, r1
 800a97a:	e7bf      	b.n	800a8fc <HAL_I2C_IsDeviceReady+0x48>
    return HAL_BUSY;
 800a97c:	2002      	movs	r0, #2
}
 800a97e:	b002      	add	sp, #8
 800a980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (Timeout != HAL_MAX_DELAY)
 800a984:	1c79      	adds	r1, r7, #1
 800a986:	d144      	bne.n	800aa12 <HAL_I2C_IsDeviceReady+0x15e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a988:	699a      	ldr	r2, [r3, #24]
 800a98a:	0692      	lsls	r2, r2, #26
 800a98c:	d5fa      	bpl.n	800a984 <HAL_I2C_IsDeviceReady+0xd0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a98e:	2120      	movs	r1, #32
        __HAL_UNLOCK(hi2c);
 800a990:	2200      	movs	r2, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a992:	61d9      	str	r1, [r3, #28]
        return HAL_OK;
 800a994:	4610      	mov	r0, r2
        hi2c->State = HAL_I2C_STATE_READY;
 800a996:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800a99a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        return HAL_OK;
 800a99e:	e7ee      	b.n	800a97e <HAL_I2C_IsDeviceReady+0xca>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9a0:	f7fd ffdc 	bl	800895c <HAL_GetTick>
 800a9a4:	1b80      	subs	r0, r0, r6
 800a9a6:	4287      	cmp	r7, r0
 800a9a8:	d325      	bcc.n	800a9f6 <HAL_I2C_IsDeviceReady+0x142>
 800a9aa:	b327      	cbz	r7, 800a9f6 <HAL_I2C_IsDeviceReady+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9ac:	6829      	ldr	r1, [r5, #0]
 800a9ae:	e7d3      	b.n	800a958 <HAL_I2C_IsDeviceReady+0xa4>
    hi2c->State = HAL_I2C_STATE_READY;
 800a9b0:	2320      	movs	r3, #32
 800a9b2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9b6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800a9b8:	2200      	movs	r2, #0
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9ba:	f043 0320 	orr.w	r3, r3, #32
    return HAL_ERROR;
 800a9be:	2001      	movs	r0, #1
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9c0:	646b      	str	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800a9c2:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
}
 800a9c6:	b002      	add	sp, #8
 800a9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a9cc:	684b      	ldr	r3, [r1, #4]
 800a9ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9d2:	604b      	str	r3, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9d4:	e001      	b.n	800a9da <HAL_I2C_IsDeviceReady+0x126>
    if (Timeout != HAL_MAX_DELAY)
 800a9d6:	1c7a      	adds	r2, r7, #1
 800a9d8:	d105      	bne.n	800a9e6 <HAL_I2C_IsDeviceReady+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9da:	698b      	ldr	r3, [r1, #24]
 800a9dc:	069b      	lsls	r3, r3, #26
 800a9de:	d5fa      	bpl.n	800a9d6 <HAL_I2C_IsDeviceReady+0x122>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9e0:	2320      	movs	r3, #32
 800a9e2:	61cb      	str	r3, [r1, #28]
 800a9e4:	e7c2      	b.n	800a96c <HAL_I2C_IsDeviceReady+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9e6:	f7fd ffb9 	bl	800895c <HAL_GetTick>
 800a9ea:	1b80      	subs	r0, r0, r6
 800a9ec:	4287      	cmp	r7, r0
 800a9ee:	d302      	bcc.n	800a9f6 <HAL_I2C_IsDeviceReady+0x142>
 800a9f0:	b10f      	cbz	r7, 800a9f6 <HAL_I2C_IsDeviceReady+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9f2:	6829      	ldr	r1, [r5, #0]
 800a9f4:	e7f1      	b.n	800a9da <HAL_I2C_IsDeviceReady+0x126>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9f8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9fa:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800a9fe:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa00:	646b      	str	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800aa02:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800aa06:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          return HAL_ERROR;
 800aa0a:	2001      	movs	r0, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa0c:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
        return HAL_ERROR;
 800aa10:	e7b5      	b.n	800a97e <HAL_I2C_IsDeviceReady+0xca>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa12:	f7fd ffa3 	bl	800895c <HAL_GetTick>
 800aa16:	1b80      	subs	r0, r0, r6
 800aa18:	4287      	cmp	r7, r0
 800aa1a:	d3ec      	bcc.n	800a9f6 <HAL_I2C_IsDeviceReady+0x142>
 800aa1c:	2f00      	cmp	r7, #0
 800aa1e:	d0ea      	beq.n	800a9f6 <HAL_I2C_IsDeviceReady+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	e7b1      	b.n	800a988 <HAL_I2C_IsDeviceReady+0xd4>

0800aa24 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa24:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800aa28:	2a20      	cmp	r2, #32
 800aa2a:	d123      	bne.n	800aa74 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800aa2c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa30:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800aa34:	2a01      	cmp	r2, #1
 800aa36:	4603      	mov	r3, r0
 800aa38:	d01c      	beq.n	800aa74 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa3a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa3c:	2024      	movs	r0, #36	; 0x24
{
 800aa3e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa40:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800aa44:	6810      	ldr	r0, [r2, #0]
 800aa46:	f020 0001 	bic.w	r0, r0, #1
 800aa4a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aa4c:	6810      	ldr	r0, [r2, #0]
 800aa4e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800aa52:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aa54:	6810      	ldr	r0, [r2, #0]
 800aa56:	4301      	orrs	r1, r0
 800aa58:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aa5a:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa5c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 800aa60:	f041 0101 	orr.w	r1, r1, #1
 800aa64:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800aa66:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800aa6a:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 800aa6e:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 800aa70:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800aa74:	2002      	movs	r0, #2
}
 800aa76:	4770      	bx	lr

0800aa78 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa78:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800aa7c:	2a20      	cmp	r2, #32
 800aa7e:	d122      	bne.n	800aac6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 800aa80:	b500      	push	{lr}
 800aa82:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa86:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800aa8a:	2a01      	cmp	r2, #1
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	d01c      	beq.n	800aaca <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa90:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa92:	2024      	movs	r0, #36	; 0x24
 800aa94:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800aa98:	6810      	ldr	r0, [r2, #0]
 800aa9a:	f020 0001 	bic.w	r0, r0, #1
 800aa9e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800aaa0:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800aaa2:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800aaa6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800aaaa:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aaac:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aaae:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 800aab2:	f041 0101 	orr.w	r1, r1, #1
 800aab6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800aab8:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800aabc:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 800aac0:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 800aac2:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800aac6:	2002      	movs	r0, #2
}
 800aac8:	4770      	bx	lr
    return HAL_BUSY;
 800aaca:	2002      	movs	r0, #2
}
 800aacc:	f85d fb04 	ldr.w	pc, [sp], #4

0800aad0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <HAL_PWREx_GetVoltageRange+0xc>)
 800aad2:	6818      	ldr	r0, [r3, #0]
#endif
}
 800aad4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40007000 	.word	0x40007000

0800aae0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aae0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800aae4:	d00e      	beq.n	800ab04 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800aae6:	4a1c      	ldr	r2, [pc, #112]	; (800ab58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800aae8:	6813      	ldr	r3, [r2, #0]
 800aaea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aaee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaf2:	d02d      	beq.n	800ab50 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800aaf4:	6813      	ldr	r3, [r2, #0]
 800aaf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aafa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800aafe:	2000      	movs	r0, #0
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab04:	4914      	ldr	r1, [pc, #80]	; (800ab58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800ab06:	680b      	ldr	r3, [r1, #0]
 800ab08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab10:	d01e      	beq.n	800ab50 <HAL_PWREx_ControlVoltageScaling+0x70>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab12:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab14:	4a11      	ldr	r2, [pc, #68]	; (800ab5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab1e:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab20:	6813      	ldr	r3, [r2, #0]
 800ab22:	4a0f      	ldr	r2, [pc, #60]	; (800ab60 <HAL_PWREx_ControlVoltageScaling+0x80>)
 800ab24:	2032      	movs	r0, #50	; 0x32
 800ab26:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab2a:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab2c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab30:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab32:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab34:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab38:	d506      	bpl.n	800ab48 <HAL_PWREx_ControlVoltageScaling+0x68>
 800ab3a:	e000      	b.n	800ab3e <HAL_PWREx_ControlVoltageScaling+0x5e>
 800ab3c:	b123      	cbz	r3, 800ab48 <HAL_PWREx_ControlVoltageScaling+0x68>
 800ab3e:	694a      	ldr	r2, [r1, #20]
 800ab40:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800ab42:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab46:	d4f9      	bmi.n	800ab3c <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab48:	4b03      	ldr	r3, [pc, #12]	; (800ab58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	055b      	lsls	r3, r3, #21
 800ab4e:	d401      	bmi.n	800ab54 <HAL_PWREx_ControlVoltageScaling+0x74>
  return HAL_OK;
 800ab50:	2000      	movs	r0, #0
 800ab52:	4770      	bx	lr
        return HAL_TIMEOUT;
 800ab54:	2003      	movs	r0, #3
}
 800ab56:	4770      	bx	lr
 800ab58:	40007000 	.word	0x40007000
 800ab5c:	20000008 	.word	0x20000008
 800ab60:	431bde83 	.word	0x431bde83

0800ab64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800ab64:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ab66:	4d20      	ldr	r5, [pc, #128]	; (800abe8 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 800ab68:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800ab6a:	00db      	lsls	r3, r3, #3
{
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800ab70:	d51c      	bpl.n	800abac <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800ab72:	f7ff ffad 	bl	800aad0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab76:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800ab7a:	d029      	beq.n	800abd0 <RCC_SetFlashLatencyFromMSIRange+0x6c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800ab7c:	2c80      	cmp	r4, #128	; 0x80
 800ab7e:	d813      	bhi.n	800aba8 <RCC_SetFlashLatencyFromMSIRange+0x44>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800ab80:	d02f      	beq.n	800abe2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800ab82:	f1a4 0470 	sub.w	r4, r4, #112	; 0x70
 800ab86:	fab4 f484 	clz	r4, r4
 800ab8a:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ab8c:	4917      	ldr	r1, [pc, #92]	; (800abec <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800ab8e:	680b      	ldr	r3, [r1, #0]
 800ab90:	f023 0307 	bic.w	r3, r3, #7
 800ab94:	4323      	orrs	r3, r4
 800ab96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ab98:	6808      	ldr	r0, [r1, #0]
 800ab9a:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800ab9e:	1b00      	subs	r0, r0, r4
 800aba0:	bf18      	it	ne
 800aba2:	2001      	movne	r0, #1
 800aba4:	b003      	add	sp, #12
 800aba6:	bd30      	pop	{r4, r5, pc}
      latency = FLASH_LATENCY_3; /* 3WS */
 800aba8:	2403      	movs	r4, #3
 800abaa:	e7ef      	b.n	800ab8c <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 800abac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800abae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abb2:	65ab      	str	r3, [r5, #88]	; 0x58
 800abb4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800abb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abba:	9301      	str	r3, [sp, #4]
 800abbc:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800abbe:	f7ff ff87 	bl	800aad0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800abc2:	6dab      	ldr	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800abc4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 800abc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abcc:	65ab      	str	r3, [r5, #88]	; 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800abce:	d1d5      	bne.n	800ab7c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 800abd0:	2c80      	cmp	r4, #128	; 0x80
 800abd2:	d904      	bls.n	800abde <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 800abd4:	2ca0      	cmp	r4, #160	; 0xa0
 800abd6:	bf8c      	ite	hi
 800abd8:	2402      	movhi	r4, #2
 800abda:	2401      	movls	r4, #1
 800abdc:	e7d6      	b.n	800ab8c <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800abde:	2400      	movs	r4, #0
 800abe0:	e7d4      	b.n	800ab8c <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800abe2:	2402      	movs	r4, #2
 800abe4:	e7d2      	b.n	800ab8c <RCC_SetFlashLatencyFromMSIRange+0x28>
 800abe6:	bf00      	nop
 800abe8:	40021000 	.word	0x40021000
 800abec:	40022000 	.word	0x40022000

0800abf0 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abf0:	4a28      	ldr	r2, [pc, #160]	; (800ac94 <HAL_RCC_GetSysClockFreq+0xa4>)
 800abf2:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abf4:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800abf6:	f013 030c 	ands.w	r3, r3, #12
 800abfa:	d008      	beq.n	800ac0e <HAL_RCC_GetSysClockFreq+0x1e>
 800abfc:	2b0c      	cmp	r3, #12
 800abfe:	d038      	beq.n	800ac72 <HAL_RCC_GetSysClockFreq+0x82>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ac00:	2b04      	cmp	r3, #4
 800ac02:	d034      	beq.n	800ac6e <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ac04:	2b08      	cmp	r3, #8
 800ac06:	4824      	ldr	r0, [pc, #144]	; (800ac98 <HAL_RCC_GetSysClockFreq+0xa8>)
 800ac08:	bf18      	it	ne
 800ac0a:	2000      	movne	r0, #0
 800ac0c:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ac0e:	4a21      	ldr	r2, [pc, #132]	; (800ac94 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ac10:	6811      	ldr	r1, [r2, #0]
 800ac12:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ac14:	bf54      	ite	pl
 800ac16:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ac1a:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 800ac1c:	491f      	ldr	r1, [pc, #124]	; (800ac9c <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ac1e:	bf54      	ite	pl
 800ac20:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ac24:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800ac28:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ac2c:	b303      	cbz	r3, 800ac70 <HAL_RCC_GetSysClockFreq+0x80>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ac2e:	2b0c      	cmp	r3, #12
 800ac30:	d12d      	bne.n	800ac8e <HAL_RCC_GetSysClockFreq+0x9e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac32:	4b18      	ldr	r3, [pc, #96]	; (800ac94 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d025      	beq.n	800ac8a <HAL_RCC_GetSysClockFreq+0x9a>
 800ac3e:	4a16      	ldr	r2, [pc, #88]	; (800ac98 <HAL_RCC_GetSysClockFreq+0xa8>)
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	bf08      	it	eq
 800ac44:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac46:	4b13      	ldr	r3, [pc, #76]	; (800ac94 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ac48:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ac4a:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ac52:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac56:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ac5a:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ac5c:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac60:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ac62:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ac64:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800ac68:	fbb2 f0f3 	udiv	r0, r2, r3
 800ac6c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800ac6e:	480c      	ldr	r0, [pc, #48]	; (800aca0 <HAL_RCC_GetSysClockFreq+0xb0>)
}
 800ac70:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac72:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ac76:	2a01      	cmp	r2, #1
 800ac78:	d0c9      	beq.n	800ac0e <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac7a:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800ac82:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ac84:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800ac88:	d1d9      	bne.n	800ac3e <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 800ac8a:	4805      	ldr	r0, [pc, #20]	; (800aca0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800ac8c:	e7db      	b.n	800ac46 <HAL_RCC_GetSysClockFreq+0x56>
 800ac8e:	2000      	movs	r0, #0
  return sysclockfreq;
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	40021000 	.word	0x40021000
 800ac98:	007a1200 	.word	0x007a1200
 800ac9c:	08014eec 	.word	0x08014eec
 800aca0:	00f42400 	.word	0x00f42400

0800aca4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f000 8282 	beq.w	800b1ae <HAL_RCC_OscConfig+0x50a>
{
 800acaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acae:	4a94      	ldr	r2, [pc, #592]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800acb0:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acb2:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800acb4:	68d6      	ldr	r6, [r2, #12]
 800acb6:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800acb8:	06d8      	lsls	r0, r3, #27
{
 800acba:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acbc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800acc0:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800acc4:	d52e      	bpl.n	800ad24 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	f000 8123 	beq.w	800af12 <HAL_RCC_OscConfig+0x26e>
 800accc:	2d0c      	cmp	r5, #12
 800acce:	f000 811d 	beq.w	800af0c <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800acd2:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800acd4:	4f8a      	ldr	r7, [pc, #552]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 8193 	beq.w	800b002 <HAL_RCC_OscConfig+0x35e>
        __HAL_RCC_MSI_ENABLE();
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	f043 0301 	orr.w	r3, r3, #1
 800ace2:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800ace4:	f7fd fe3a 	bl	800895c <HAL_GetTick>
 800ace8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800acea:	e006      	b.n	800acfa <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800acec:	f7fd fe36 	bl	800895c <HAL_GetTick>
 800acf0:	eba0 0008 	sub.w	r0, r0, r8
 800acf4:	2802      	cmp	r0, #2
 800acf6:	f200 8194 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	079b      	lsls	r3, r3, #30
 800acfe:	d5f5      	bpl.n	800acec <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	f043 0308 	orr.w	r3, r3, #8
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	6a22      	ldr	r2, [r4, #32]
 800ad0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad10:	4313      	orrs	r3, r2
 800ad12:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	69e2      	ldr	r2, [r4, #28]
 800ad18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ad20:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	07d9      	lsls	r1, r3, #31
 800ad26:	f100 80c2 	bmi.w	800aeae <HAL_RCC_OscConfig+0x20a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad2a:	0799      	lsls	r1, r3, #30
 800ad2c:	d523      	bpl.n	800ad76 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ad2e:	2d04      	cmp	r5, #4
 800ad30:	f000 8157 	beq.w	800afe2 <HAL_RCC_OscConfig+0x33e>
 800ad34:	2d0c      	cmp	r5, #12
 800ad36:	f000 8151 	beq.w	800afdc <HAL_RCC_OscConfig+0x338>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ad3a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800ad3c:	4e70      	ldr	r6, [pc, #448]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 81d9 	beq.w	800b0f6 <HAL_RCC_OscConfig+0x452>
        __HAL_RCC_HSI_ENABLE();
 800ad44:	6833      	ldr	r3, [r6, #0]
 800ad46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad4a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800ad4c:	f7fd fe06 	bl	800895c <HAL_GetTick>
 800ad50:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad52:	e005      	b.n	800ad60 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad54:	f7fd fe02 	bl	800895c <HAL_GetTick>
 800ad58:	1bc0      	subs	r0, r0, r7
 800ad5a:	2802      	cmp	r0, #2
 800ad5c:	f200 8161 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad60:	6833      	ldr	r3, [r6, #0]
 800ad62:	055b      	lsls	r3, r3, #21
 800ad64:	d5f6      	bpl.n	800ad54 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad66:	6873      	ldr	r3, [r6, #4]
 800ad68:	6922      	ldr	r2, [r4, #16]
 800ad6a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800ad6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ad72:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	0719      	lsls	r1, r3, #28
 800ad78:	d519      	bpl.n	800adae <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad7a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800ad7c:	4e60      	ldr	r6, [pc, #384]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f000 8118 	beq.w	800afb4 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_LSI_ENABLE();
 800ad84:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800ad88:	f043 0301 	orr.w	r3, r3, #1
 800ad8c:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800ad90:	f7fd fde4 	bl	800895c <HAL_GetTick>
 800ad94:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ad96:	e005      	b.n	800ada4 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad98:	f7fd fde0 	bl	800895c <HAL_GetTick>
 800ad9c:	1bc0      	subs	r0, r0, r7
 800ad9e:	2802      	cmp	r0, #2
 800ada0:	f200 813f 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ada4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800ada8:	079a      	lsls	r2, r3, #30
 800adaa:	d5f5      	bpl.n	800ad98 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adac:	6823      	ldr	r3, [r4, #0]
 800adae:	075e      	lsls	r6, r3, #29
 800adb0:	d53f      	bpl.n	800ae32 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800adb2:	4b53      	ldr	r3, [pc, #332]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
 800adb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adb6:	00d0      	lsls	r0, r2, #3
 800adb8:	f100 819b 	bmi.w	800b0f2 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800adbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800adc2:	659a      	str	r2, [r3, #88]	; 0x58
 800adc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800adce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800add0:	4f4c      	ldr	r7, [pc, #304]	; (800af04 <HAL_RCC_OscConfig+0x260>)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	05d9      	lsls	r1, r3, #23
 800add6:	f140 81f7 	bpl.w	800b1c8 <HAL_RCC_OscConfig+0x524>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adda:	68a3      	ldr	r3, [r4, #8]
 800addc:	2b01      	cmp	r3, #1
 800adde:	f000 819c 	beq.w	800b11a <HAL_RCC_OscConfig+0x476>
 800ade2:	2b05      	cmp	r3, #5
 800ade4:	f000 821b 	beq.w	800b21e <HAL_RCC_OscConfig+0x57a>
 800ade8:	4f45      	ldr	r7, [pc, #276]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
 800adea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800adee:	f022 0201 	bic.w	r2, r2, #1
 800adf2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800adf6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800adfa:	f022 0204 	bic.w	r2, r2, #4
 800adfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f040 8190 	bne.w	800b128 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 800ae08:	f7fd fda8 	bl	800895c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae0c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800ae10:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae12:	e006      	b.n	800ae22 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae14:	f7fd fda2 	bl	800895c <HAL_GetTick>
 800ae18:	eba0 0008 	sub.w	r0, r0, r8
 800ae1c:	4548      	cmp	r0, r9
 800ae1e:	f200 8100 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ae22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae26:	0798      	lsls	r0, r3, #30
 800ae28:	d4f4      	bmi.n	800ae14 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800ae2a:	2e00      	cmp	r6, #0
 800ae2c:	f040 81de 	bne.w	800b1ec <HAL_RCC_OscConfig+0x548>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	0699      	lsls	r1, r3, #26
 800ae34:	d518      	bpl.n	800ae68 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ae36:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 800ae38:	4e31      	ldr	r6, [pc, #196]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 81a2 	beq.w	800b184 <HAL_RCC_OscConfig+0x4e0>
      __HAL_RCC_HSI48_ENABLE();
 800ae40:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800ae44:	f043 0301 	orr.w	r3, r3, #1
 800ae48:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800ae4c:	f7fd fd86 	bl	800895c <HAL_GetTick>
 800ae50:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ae52:	e005      	b.n	800ae60 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae54:	f7fd fd82 	bl	800895c <HAL_GetTick>
 800ae58:	1bc0      	subs	r0, r0, r7
 800ae5a:	2802      	cmp	r0, #2
 800ae5c:	f200 80e1 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ae60:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800ae64:	079a      	lsls	r2, r3, #30
 800ae66:	d5f5      	bpl.n	800ae54 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ae68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 813f 	beq.w	800b0ee <HAL_RCC_OscConfig+0x44a>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	f000 80ef 	beq.w	800b054 <HAL_RCC_OscConfig+0x3b0>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ae76:	2d0c      	cmp	r5, #12
 800ae78:	f000 808c 	beq.w	800af94 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 800ae7c:	4c20      	ldr	r4, [pc, #128]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae84:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800ae86:	f7fd fd69 	bl	800895c <HAL_GetTick>
 800ae8a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae8c:	e005      	b.n	800ae9a <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae8e:	f7fd fd65 	bl	800895c <HAL_GetTick>
 800ae92:	1b40      	subs	r0, r0, r5
 800ae94:	2802      	cmp	r0, #2
 800ae96:	f200 80c4 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800aea0:	d1f5      	bne.n	800ae8e <HAL_RCC_OscConfig+0x1ea>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800aea2:	68e1      	ldr	r1, [r4, #12]
 800aea4:	4a18      	ldr	r2, [pc, #96]	; (800af08 <HAL_RCC_OscConfig+0x264>)
 800aea6:	400a      	ands	r2, r1
  return HAL_OK;
 800aea8:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800aeaa:	60e2      	str	r2, [r4, #12]
 800aeac:	e073      	b.n	800af96 <HAL_RCC_OscConfig+0x2f2>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800aeae:	2d08      	cmp	r5, #8
 800aeb0:	d076      	beq.n	800afa0 <HAL_RCC_OscConfig+0x2fc>
 800aeb2:	2d0c      	cmp	r5, #12
 800aeb4:	d072      	beq.n	800af9c <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aeb6:	6863      	ldr	r3, [r4, #4]
 800aeb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aebc:	f000 80b5 	beq.w	800b02a <HAL_RCC_OscConfig+0x386>
 800aec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aec4:	f000 819e 	beq.w	800b204 <HAL_RCC_OscConfig+0x560>
 800aec8:	4f0d      	ldr	r7, [pc, #52]	; (800af00 <HAL_RCC_OscConfig+0x25c>)
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aed0:	603a      	str	r2, [r7, #0]
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aed8:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f040 80aa 	bne.w	800b034 <HAL_RCC_OscConfig+0x390>
        tickstart = HAL_GetTick();
 800aee0:	f7fd fd3c 	bl	800895c <HAL_GetTick>
 800aee4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aee6:	e006      	b.n	800aef6 <HAL_RCC_OscConfig+0x252>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aee8:	f7fd fd38 	bl	800895c <HAL_GetTick>
 800aeec:	eba0 0008 	sub.w	r0, r0, r8
 800aef0:	2864      	cmp	r0, #100	; 0x64
 800aef2:	f200 8096 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	0398      	lsls	r0, r3, #14
 800aefa:	d4f5      	bmi.n	800aee8 <HAL_RCC_OscConfig+0x244>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	e714      	b.n	800ad2a <HAL_RCC_OscConfig+0x86>
 800af00:	40021000 	.word	0x40021000
 800af04:	40007000 	.word	0x40007000
 800af08:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800af0c:	2e01      	cmp	r6, #1
 800af0e:	f47f aee0 	bne.w	800acd2 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af12:	4ba8      	ldr	r3, [pc, #672]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	0799      	lsls	r1, r3, #30
 800af18:	d439      	bmi.n	800af8e <HAL_RCC_OscConfig+0x2ea>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800af1a:	4ba6      	ldr	r3, [pc, #664]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800af1c:	6a20      	ldr	r0, [r4, #32]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	0712      	lsls	r2, r2, #28
 800af22:	bf56      	itet	pl
 800af24:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 800af28:	681b      	ldrmi	r3, [r3, #0]
 800af2a:	091b      	lsrpl	r3, r3, #4
 800af2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af30:	4298      	cmp	r0, r3
 800af32:	f200 810f 	bhi.w	800b154 <HAL_RCC_OscConfig+0x4b0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800af36:	4b9f      	ldr	r3, [pc, #636]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	f042 0208 	orr.w	r2, r2, #8
 800af3e:	601a      	str	r2, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800af46:	4302      	orrs	r2, r0
 800af48:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	69e1      	ldr	r1, [r4, #28]
 800af4e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800af52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800af56:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800af58:	2d00      	cmp	r5, #0
 800af5a:	f000 814d 	beq.w	800b1f8 <HAL_RCC_OscConfig+0x554>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800af5e:	f7ff fe47 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
 800af62:	4b94      	ldr	r3, [pc, #592]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800af64:	4a94      	ldr	r2, [pc, #592]	; (800b1b8 <HAL_RCC_OscConfig+0x514>)
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800af6c:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 800af6e:	4a93      	ldr	r2, [pc, #588]	; (800b1bc <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800af70:	f003 031f 	and.w	r3, r3, #31
 800af74:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 800af78:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800af7a:	4a91      	ldr	r2, [pc, #580]	; (800b1c0 <HAL_RCC_OscConfig+0x51c>)
 800af7c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800af7e:	f7fb fd1d 	bl	80069bc <HAL_InitTick>
        if(status != HAL_OK)
 800af82:	b940      	cbnz	r0, 800af96 <HAL_RCC_OscConfig+0x2f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	07d9      	lsls	r1, r3, #31
 800af88:	f57f aecf 	bpl.w	800ad2a <HAL_RCC_OscConfig+0x86>
 800af8c:	e78f      	b.n	800aeae <HAL_RCC_OscConfig+0x20a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af8e:	69a3      	ldr	r3, [r4, #24]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1c2      	bne.n	800af1a <HAL_RCC_OscConfig+0x276>
          return HAL_ERROR;
 800af94:	2001      	movs	r0, #1
}
 800af96:	b003      	add	sp, #12
 800af98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800af9c:	2e03      	cmp	r6, #3
 800af9e:	d18a      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x212>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afa0:	4a84      	ldr	r2, [pc, #528]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800afa2:	6812      	ldr	r2, [r2, #0]
 800afa4:	0392      	lsls	r2, r2, #14
 800afa6:	f57f aec0 	bpl.w	800ad2a <HAL_RCC_OscConfig+0x86>
 800afaa:	6862      	ldr	r2, [r4, #4]
 800afac:	2a00      	cmp	r2, #0
 800afae:	f47f aebc 	bne.w	800ad2a <HAL_RCC_OscConfig+0x86>
 800afb2:	e7ef      	b.n	800af94 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_LSI_DISABLE();
 800afb4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800afb8:	f023 0301 	bic.w	r3, r3, #1
 800afbc:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 800afc0:	f7fd fccc 	bl	800895c <HAL_GetTick>
 800afc4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800afc6:	e004      	b.n	800afd2 <HAL_RCC_OscConfig+0x32e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afc8:	f7fd fcc8 	bl	800895c <HAL_GetTick>
 800afcc:	1bc0      	subs	r0, r0, r7
 800afce:	2802      	cmp	r0, #2
 800afd0:	d827      	bhi.n	800b022 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800afd2:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 800afd6:	079b      	lsls	r3, r3, #30
 800afd8:	d4f6      	bmi.n	800afc8 <HAL_RCC_OscConfig+0x324>
 800afda:	e6e7      	b.n	800adac <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800afdc:	2e02      	cmp	r6, #2
 800afde:	f47f aeac 	bne.w	800ad3a <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afe2:	4a74      	ldr	r2, [pc, #464]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800afe4:	6812      	ldr	r2, [r2, #0]
 800afe6:	0552      	lsls	r2, r2, #21
 800afe8:	d502      	bpl.n	800aff0 <HAL_RCC_OscConfig+0x34c>
 800afea:	68e2      	ldr	r2, [r4, #12]
 800afec:	2a00      	cmp	r2, #0
 800afee:	d0d1      	beq.n	800af94 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aff0:	4970      	ldr	r1, [pc, #448]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800aff2:	6920      	ldr	r0, [r4, #16]
 800aff4:	684a      	ldr	r2, [r1, #4]
 800aff6:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 800affa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800affe:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b000:	e6b9      	b.n	800ad76 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	f023 0301 	bic.w	r3, r3, #1
 800b008:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800b00a:	f7fd fca7 	bl	800895c <HAL_GetTick>
 800b00e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	0798      	lsls	r0, r3, #30
 800b014:	d5b6      	bpl.n	800af84 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b016:	f7fd fca1 	bl	800895c <HAL_GetTick>
 800b01a:	eba0 0008 	sub.w	r0, r0, r8
 800b01e:	2802      	cmp	r0, #2
 800b020:	d9f6      	bls.n	800b010 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 800b022:	2003      	movs	r0, #3
}
 800b024:	b003      	add	sp, #12
 800b026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b02a:	4a62      	ldr	r2, [pc, #392]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800b02c:	6813      	ldr	r3, [r2, #0]
 800b02e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b032:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b034:	f7fd fc92 	bl	800895c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b038:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800b1b4 <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 800b03c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b03e:	e004      	b.n	800b04a <HAL_RCC_OscConfig+0x3a6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b040:	f7fd fc8c 	bl	800895c <HAL_GetTick>
 800b044:	1bc0      	subs	r0, r0, r7
 800b046:	2864      	cmp	r0, #100	; 0x64
 800b048:	d8eb      	bhi.n	800b022 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b04a:	f8d8 3000 	ldr.w	r3, [r8]
 800b04e:	039b      	lsls	r3, r3, #14
 800b050:	d5f6      	bpl.n	800b040 <HAL_RCC_OscConfig+0x39c>
 800b052:	e753      	b.n	800aefc <HAL_RCC_OscConfig+0x258>
      pll_config = RCC->PLLCFGR;
 800b054:	4e57      	ldr	r6, [pc, #348]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b056:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 800b058:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b05a:	f003 0103 	and.w	r1, r3, #3
 800b05e:	4291      	cmp	r1, r2
 800b060:	f000 80eb 	beq.w	800b23a <HAL_RCC_OscConfig+0x596>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b064:	2d0c      	cmp	r5, #12
 800b066:	d095      	beq.n	800af94 <HAL_RCC_OscConfig+0x2f0>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b068:	4d52      	ldr	r5, [pc, #328]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800b06a:	682b      	ldr	r3, [r5, #0]
 800b06c:	015e      	lsls	r6, r3, #5
 800b06e:	d491      	bmi.n	800af94 <HAL_RCC_OscConfig+0x2f0>
            __HAL_RCC_PLL_DISABLE();
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b076:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800b078:	f7fd fc70 	bl	800895c <HAL_GetTick>
 800b07c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b07e:	e004      	b.n	800b08a <HAL_RCC_OscConfig+0x3e6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b080:	f7fd fc6c 	bl	800895c <HAL_GetTick>
 800b084:	1b80      	subs	r0, r0, r6
 800b086:	2802      	cmp	r0, #2
 800b088:	d8cb      	bhi.n	800b022 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	0198      	lsls	r0, r3, #6
 800b08e:	d4f7      	bmi.n	800b080 <HAL_RCC_OscConfig+0x3dc>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b090:	68e9      	ldr	r1, [r5, #12]
 800b092:	4b4c      	ldr	r3, [pc, #304]	; (800b1c4 <HAL_RCC_OscConfig+0x520>)
 800b094:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b096:	6b20      	ldr	r0, [r4, #48]	; 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b098:	4e46      	ldr	r6, [pc, #280]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b09a:	400b      	ands	r3, r1
 800b09c:	4313      	orrs	r3, r2
 800b09e:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 800b0a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b0a6:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800b0aa:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 800b0ae:	3801      	subs	r0, #1
 800b0b0:	0849      	lsrs	r1, r1, #1
 800b0b2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800b0b6:	3901      	subs	r1, #1
 800b0b8:	0852      	lsrs	r2, r2, #1
 800b0ba:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800b0be:	3a01      	subs	r2, #1
 800b0c0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800b0c4:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800b0c6:	682b      	ldr	r3, [r5, #0]
 800b0c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0cc:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b0ce:	68eb      	ldr	r3, [r5, #12]
 800b0d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0d4:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800b0d6:	f7fd fc41 	bl	800895c <HAL_GetTick>
 800b0da:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0dc:	e004      	b.n	800b0e8 <HAL_RCC_OscConfig+0x444>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0de:	f7fd fc3d 	bl	800895c <HAL_GetTick>
 800b0e2:	1b00      	subs	r0, r0, r4
 800b0e4:	2802      	cmp	r0, #2
 800b0e6:	d89c      	bhi.n	800b022 <HAL_RCC_OscConfig+0x37e>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0e8:	6833      	ldr	r3, [r6, #0]
 800b0ea:	0199      	lsls	r1, r3, #6
 800b0ec:	d5f7      	bpl.n	800b0de <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	e751      	b.n	800af96 <HAL_RCC_OscConfig+0x2f2>
    FlagStatus       pwrclkchanged = RESET;
 800b0f2:	2600      	movs	r6, #0
 800b0f4:	e66c      	b.n	800add0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 800b0f6:	6833      	ldr	r3, [r6, #0]
 800b0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0fc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800b0fe:	f7fd fc2d 	bl	800895c <HAL_GetTick>
 800b102:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b104:	e004      	b.n	800b110 <HAL_RCC_OscConfig+0x46c>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b106:	f7fd fc29 	bl	800895c <HAL_GetTick>
 800b10a:	1bc0      	subs	r0, r0, r7
 800b10c:	2802      	cmp	r0, #2
 800b10e:	d888      	bhi.n	800b022 <HAL_RCC_OscConfig+0x37e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b110:	6833      	ldr	r3, [r6, #0]
 800b112:	0558      	lsls	r0, r3, #21
 800b114:	d4f7      	bmi.n	800b106 <HAL_RCC_OscConfig+0x462>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	e62d      	b.n	800ad76 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b11a:	4a26      	ldr	r2, [pc, #152]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800b11c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b120:	f043 0301 	orr.w	r3, r3, #1
 800b124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800b128:	f7fd fc18 	bl	800895c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b12c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800b1b4 <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 800b130:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b132:	f241 3988 	movw	r9, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b136:	e005      	b.n	800b144 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b138:	f7fd fc10 	bl	800895c <HAL_GetTick>
 800b13c:	1bc0      	subs	r0, r0, r7
 800b13e:	4548      	cmp	r0, r9
 800b140:	f63f af6f 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b144:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 800b148:	079b      	lsls	r3, r3, #30
 800b14a:	d5f5      	bpl.n	800b138 <HAL_RCC_OscConfig+0x494>
    if(pwrclkchanged == SET)
 800b14c:	2e00      	cmp	r6, #0
 800b14e:	f43f ae6f 	beq.w	800ae30 <HAL_RCC_OscConfig+0x18c>
 800b152:	e04b      	b.n	800b1ec <HAL_RCC_OscConfig+0x548>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b154:	f7ff fd06 	bl	800ab64 <RCC_SetFlashLatencyFromMSIRange>
 800b158:	2800      	cmp	r0, #0
 800b15a:	f47f af1b 	bne.w	800af94 <HAL_RCC_OscConfig+0x2f0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <HAL_RCC_OscConfig+0x510>)
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	f042 0208 	orr.w	r2, r2, #8
 800b166:	601a      	str	r2, [r3, #0]
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	6a21      	ldr	r1, [r4, #32]
 800b16c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b170:	430a      	orrs	r2, r1
 800b172:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	69e1      	ldr	r1, [r4, #28]
 800b178:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b17c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b180:	605a      	str	r2, [r3, #4]
 800b182:	e6ec      	b.n	800af5e <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 800b184:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800b188:	f023 0301 	bic.w	r3, r3, #1
 800b18c:	f8c6 3098 	str.w	r3, [r6, #152]	; 0x98
      tickstart = HAL_GetTick();
 800b190:	f7fd fbe4 	bl	800895c <HAL_GetTick>
 800b194:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b196:	e005      	b.n	800b1a4 <HAL_RCC_OscConfig+0x500>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b198:	f7fd fbe0 	bl	800895c <HAL_GetTick>
 800b19c:	1bc0      	subs	r0, r0, r7
 800b19e:	2802      	cmp	r0, #2
 800b1a0:	f63f af3f 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b1a4:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
 800b1a8:	079b      	lsls	r3, r3, #30
 800b1aa:	d4f5      	bmi.n	800b198 <HAL_RCC_OscConfig+0x4f4>
 800b1ac:	e65c      	b.n	800ae68 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 800b1ae:	2001      	movs	r0, #1
}
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	40021000 	.word	0x40021000
 800b1b8:	08014ed4 	.word	0x08014ed4
 800b1bc:	20000014 	.word	0x20000014
 800b1c0:	20000008 	.word	0x20000008
 800b1c4:	019d808c 	.word	0x019d808c
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1ce:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800b1d0:	f7fd fbc4 	bl	800895c <HAL_GetTick>
 800b1d4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	05da      	lsls	r2, r3, #23
 800b1da:	f53f adfe 	bmi.w	800adda <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1de:	f7fd fbbd 	bl	800895c <HAL_GetTick>
 800b1e2:	eba0 0008 	sub.w	r0, r0, r8
 800b1e6:	2802      	cmp	r0, #2
 800b1e8:	d9f5      	bls.n	800b1d6 <HAL_RCC_OscConfig+0x532>
 800b1ea:	e71a      	b.n	800b022 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1ec:	4a34      	ldr	r2, [pc, #208]	; (800b2c0 <HAL_RCC_OscConfig+0x61c>)
 800b1ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b1f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1f4:	6593      	str	r3, [r2, #88]	; 0x58
 800b1f6:	e61b      	b.n	800ae30 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b1f8:	f7ff fcb4 	bl	800ab64 <RCC_SetFlashLatencyFromMSIRange>
 800b1fc:	2800      	cmp	r0, #0
 800b1fe:	f43f aeae 	beq.w	800af5e <HAL_RCC_OscConfig+0x2ba>
 800b202:	e6c7      	b.n	800af94 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b204:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b208:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b21a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b21c:	e70a      	b.n	800b034 <HAL_RCC_OscConfig+0x390>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b21e:	4b28      	ldr	r3, [pc, #160]	; (800b2c0 <HAL_RCC_OscConfig+0x61c>)
 800b220:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b224:	f042 0204 	orr.w	r2, r2, #4
 800b228:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800b22c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800b230:	f042 0201 	orr.w	r2, r2, #1
 800b234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b238:	e776      	b.n	800b128 <HAL_RCC_OscConfig+0x484>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b23a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b23c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b240:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b242:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800b246:	f47f af0d 	bne.w	800b064 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b24a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b24c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b250:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800b254:	f47f af06 	bne.w	800b064 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b258:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b25a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b25e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800b262:	f47f aeff 	bne.w	800b064 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b266:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b268:	0852      	lsrs	r2, r2, #1
 800b26a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800b26e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b270:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800b274:	f47f aef6 	bne.w	800b064 <HAL_RCC_OscConfig+0x3c0>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b278:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b27a:	0852      	lsrs	r2, r2, #1
 800b27c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800b280:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b282:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800b286:	f47f aeed 	bne.w	800b064 <HAL_RCC_OscConfig+0x3c0>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b28a:	6833      	ldr	r3, [r6, #0]
 800b28c:	019a      	lsls	r2, r3, #6
 800b28e:	f53f af2e 	bmi.w	800b0ee <HAL_RCC_OscConfig+0x44a>
          __HAL_RCC_PLL_ENABLE();
 800b292:	6833      	ldr	r3, [r6, #0]
 800b294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b298:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b29a:	68f3      	ldr	r3, [r6, #12]
 800b29c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2a0:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 800b2a2:	f7fd fb5b 	bl	800895c <HAL_GetTick>
 800b2a6:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2a8:	e005      	b.n	800b2b6 <HAL_RCC_OscConfig+0x612>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2aa:	f7fd fb57 	bl	800895c <HAL_GetTick>
 800b2ae:	1b00      	subs	r0, r0, r4
 800b2b0:	2802      	cmp	r0, #2
 800b2b2:	f63f aeb6 	bhi.w	800b022 <HAL_RCC_OscConfig+0x37e>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2b6:	6833      	ldr	r3, [r6, #0]
 800b2b8:	019b      	lsls	r3, r3, #6
 800b2ba:	d5f6      	bpl.n	800b2aa <HAL_RCC_OscConfig+0x606>
 800b2bc:	e717      	b.n	800b0ee <HAL_RCC_OscConfig+0x44a>
 800b2be:	bf00      	nop
 800b2c0:	40021000 	.word	0x40021000

0800b2c4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	f000 809f 	beq.w	800b408 <HAL_RCC_ClockConfig+0x144>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b2ca:	4a53      	ldr	r2, [pc, #332]	; (800b418 <HAL_RCC_ClockConfig+0x154>)
 800b2cc:	6813      	ldr	r3, [r2, #0]
 800b2ce:	f003 0307 	and.w	r3, r3, #7
 800b2d2:	428b      	cmp	r3, r1
{
 800b2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d8:	460d      	mov	r5, r1
 800b2da:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b2dc:	d20c      	bcs.n	800b2f8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2de:	6813      	ldr	r3, [r2, #0]
 800b2e0:	f023 0307 	bic.w	r3, r3, #7
 800b2e4:	430b      	orrs	r3, r1
 800b2e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2e8:	6813      	ldr	r3, [r2, #0]
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	428b      	cmp	r3, r1
 800b2f0:	d002      	beq.n	800b2f8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800b2f2:	2001      	movs	r0, #1
}
 800b2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	079e      	lsls	r6, r3, #30
 800b2fc:	d571      	bpl.n	800b3e2 <HAL_RCC_ClockConfig+0x11e>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b2fe:	4847      	ldr	r0, [pc, #284]	; (800b41c <HAL_RCC_ClockConfig+0x158>)
 800b300:	68a1      	ldr	r1, [r4, #8]
 800b302:	6882      	ldr	r2, [r0, #8]
 800b304:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b308:	4291      	cmp	r1, r2
 800b30a:	d904      	bls.n	800b316 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b30c:	6882      	ldr	r2, [r0, #8]
 800b30e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b312:	430a      	orrs	r2, r1
 800b314:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b316:	07da      	lsls	r2, r3, #31
 800b318:	d526      	bpl.n	800b368 <HAL_RCC_ClockConfig+0xa4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b31a:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b31c:	4b3f      	ldr	r3, [pc, #252]	; (800b41c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b31e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b320:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b322:	d065      	beq.n	800b3f0 <HAL_RCC_ClockConfig+0x12c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b324:	2a02      	cmp	r2, #2
 800b326:	d06c      	beq.n	800b402 <HAL_RCC_ClockConfig+0x13e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b328:	2a00      	cmp	r2, #0
 800b32a:	d171      	bne.n	800b410 <HAL_RCC_ClockConfig+0x14c>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b32c:	079b      	lsls	r3, r3, #30
 800b32e:	d5e0      	bpl.n	800b2f2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b330:	4e3a      	ldr	r6, [pc, #232]	; (800b41c <HAL_RCC_ClockConfig+0x158>)
 800b332:	68b3      	ldr	r3, [r6, #8]
 800b334:	f023 0303 	bic.w	r3, r3, #3
 800b338:	4313      	orrs	r3, r2
 800b33a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800b33c:	f7fd fb0e 	bl	800895c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b340:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800b344:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b346:	e004      	b.n	800b352 <HAL_RCC_ClockConfig+0x8e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b348:	f7fd fb08 	bl	800895c <HAL_GetTick>
 800b34c:	1bc0      	subs	r0, r0, r7
 800b34e:	4540      	cmp	r0, r8
 800b350:	d85c      	bhi.n	800b40c <HAL_RCC_ClockConfig+0x148>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b352:	68b3      	ldr	r3, [r6, #8]
 800b354:	6862      	ldr	r2, [r4, #4]
 800b356:	f003 030c 	and.w	r3, r3, #12
 800b35a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800b35e:	d1f3      	bne.n	800b348 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	079e      	lsls	r6, r3, #30
 800b364:	d506      	bpl.n	800b374 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b366:	68a1      	ldr	r1, [r4, #8]
 800b368:	482c      	ldr	r0, [pc, #176]	; (800b41c <HAL_RCC_ClockConfig+0x158>)
 800b36a:	6882      	ldr	r2, [r0, #8]
 800b36c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b370:	428a      	cmp	r2, r1
 800b372:	d840      	bhi.n	800b3f6 <HAL_RCC_ClockConfig+0x132>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b374:	4928      	ldr	r1, [pc, #160]	; (800b418 <HAL_RCC_ClockConfig+0x154>)
 800b376:	680a      	ldr	r2, [r1, #0]
 800b378:	f002 0207 	and.w	r2, r2, #7
 800b37c:	42aa      	cmp	r2, r5
 800b37e:	d909      	bls.n	800b394 <HAL_RCC_ClockConfig+0xd0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b380:	680a      	ldr	r2, [r1, #0]
 800b382:	f022 0207 	bic.w	r2, r2, #7
 800b386:	432a      	orrs	r2, r5
 800b388:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b38a:	680a      	ldr	r2, [r1, #0]
 800b38c:	f002 0207 	and.w	r2, r2, #7
 800b390:	42aa      	cmp	r2, r5
 800b392:	d1ae      	bne.n	800b2f2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b394:	075d      	lsls	r5, r3, #29
 800b396:	d506      	bpl.n	800b3a6 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b398:	4920      	ldr	r1, [pc, #128]	; (800b41c <HAL_RCC_ClockConfig+0x158>)
 800b39a:	68e0      	ldr	r0, [r4, #12]
 800b39c:	688a      	ldr	r2, [r1, #8]
 800b39e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b3a2:	4302      	orrs	r2, r0
 800b3a4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3a6:	0718      	lsls	r0, r3, #28
 800b3a8:	d507      	bpl.n	800b3ba <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3aa:	4a1c      	ldr	r2, [pc, #112]	; (800b41c <HAL_RCC_ClockConfig+0x158>)
 800b3ac:	6921      	ldr	r1, [r4, #16]
 800b3ae:	6893      	ldr	r3, [r2, #8]
 800b3b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800b3b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b3b8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b3ba:	f7ff fc19 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
 800b3be:	4a17      	ldr	r2, [pc, #92]	; (800b41c <HAL_RCC_ClockConfig+0x158>)
 800b3c0:	4c17      	ldr	r4, [pc, #92]	; (800b420 <HAL_RCC_ClockConfig+0x15c>)
 800b3c2:	6892      	ldr	r2, [r2, #8]
 800b3c4:	4917      	ldr	r1, [pc, #92]	; (800b424 <HAL_RCC_ClockConfig+0x160>)
 800b3c6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 800b3ce:	4816      	ldr	r0, [pc, #88]	; (800b428 <HAL_RCC_ClockConfig+0x164>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b3d0:	f002 021f 	and.w	r2, r2, #31
 800b3d4:	40d3      	lsrs	r3, r2
}
 800b3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800b3da:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b3dc:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 800b3de:	f7fb baed 	b.w	80069bc <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3e2:	07d9      	lsls	r1, r3, #31
 800b3e4:	d5c6      	bpl.n	800b374 <HAL_RCC_ClockConfig+0xb0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3e6:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3e8:	4b0c      	ldr	r3, [pc, #48]	; (800b41c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3ea:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3ec:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3ee:	d199      	bne.n	800b324 <HAL_RCC_ClockConfig+0x60>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3f0:	0198      	lsls	r0, r3, #6
 800b3f2:	d49d      	bmi.n	800b330 <HAL_RCC_ClockConfig+0x6c>
 800b3f4:	e77d      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3f6:	6882      	ldr	r2, [r0, #8]
 800b3f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	6082      	str	r2, [r0, #8]
 800b400:	e7b8      	b.n	800b374 <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b402:	0399      	lsls	r1, r3, #14
 800b404:	d494      	bmi.n	800b330 <HAL_RCC_ClockConfig+0x6c>
 800b406:	e774      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800b408:	2001      	movs	r0, #1
}
 800b40a:	4770      	bx	lr
        return HAL_TIMEOUT;
 800b40c:	2003      	movs	r0, #3
 800b40e:	e771      	b.n	800b2f4 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b410:	055f      	lsls	r7, r3, #21
 800b412:	f57f af6e 	bpl.w	800b2f2 <HAL_RCC_ClockConfig+0x2e>
 800b416:	e78b      	b.n	800b330 <HAL_RCC_ClockConfig+0x6c>
 800b418:	40022000 	.word	0x40022000
 800b41c:	40021000 	.word	0x40021000
 800b420:	08014ed4 	.word	0x08014ed4
 800b424:	20000008 	.word	0x20000008
 800b428:	20000014 	.word	0x20000014

0800b42c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b42c:	4b05      	ldr	r3, [pc, #20]	; (800b444 <HAL_RCC_GetPCLK1Freq+0x18>)
 800b42e:	4a06      	ldr	r2, [pc, #24]	; (800b448 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b430:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800b432:	4906      	ldr	r1, [pc, #24]	; (800b44c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b434:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b438:	6808      	ldr	r0, [r1, #0]
 800b43a:	5cd3      	ldrb	r3, [r2, r3]
 800b43c:	f003 031f 	and.w	r3, r3, #31
}
 800b440:	40d8      	lsrs	r0, r3
 800b442:	4770      	bx	lr
 800b444:	40021000 	.word	0x40021000
 800b448:	08014ee4 	.word	0x08014ee4
 800b44c:	20000008 	.word	0x20000008

0800b450 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <HAL_RCC_GetPCLK2Freq+0x18>)
 800b452:	4a06      	ldr	r2, [pc, #24]	; (800b46c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b454:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800b456:	4906      	ldr	r1, [pc, #24]	; (800b470 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b458:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800b45c:	6808      	ldr	r0, [r1, #0]
 800b45e:	5cd3      	ldrb	r3, [r2, r3]
 800b460:	f003 031f 	and.w	r3, r3, #31
}
 800b464:	40d8      	lsrs	r0, r3
 800b466:	4770      	bx	lr
 800b468:	40021000 	.word	0x40021000
 800b46c:	08014ee4 	.word	0x08014ee4
 800b470:	20000008 	.word	0x20000008

0800b474 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b474:	4b0e      	ldr	r3, [pc, #56]	; (800b4b0 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b476:	220f      	movs	r2, #15
 800b478:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b47a:	689a      	ldr	r2, [r3, #8]
 800b47c:	f002 0203 	and.w	r2, r2, #3
 800b480:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b482:	689a      	ldr	r2, [r3, #8]
 800b484:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b488:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b490:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	08db      	lsrs	r3, r3, #3
{
 800b496:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b49c:	4c05      	ldr	r4, [pc, #20]	; (800b4b4 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b49e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b4a0:	6823      	ldr	r3, [r4, #0]
}
 800b4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	600b      	str	r3, [r1, #0]
}
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	40021000 	.word	0x40021000
 800b4b4:	40022000 	.word	0x40022000

0800b4b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4ba:	4b47      	ldr	r3, [pc, #284]	; (800b5d8 <RCCEx_PLLSAI1_Config+0x120>)
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	0792      	lsls	r2, r2, #30
{
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	460f      	mov	r7, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b4c4:	d007      	beq.n	800b4d6 <RCCEx_PLLSAI1_Config+0x1e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	6801      	ldr	r1, [r0, #0]
 800b4ca:	f002 0203 	and.w	r2, r2, #3
 800b4ce:	428a      	cmp	r2, r1
 800b4d0:	d04b      	beq.n	800b56a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800b4d2:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800b4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800b4d6:	6800      	ldr	r0, [r0, #0]
 800b4d8:	2802      	cmp	r0, #2
 800b4da:	d057      	beq.n	800b58c <RCCEx_PLLSAI1_Config+0xd4>
 800b4dc:	2803      	cmp	r0, #3
 800b4de:	d04e      	beq.n	800b57e <RCCEx_PLLSAI1_Config+0xc6>
 800b4e0:	2801      	cmp	r0, #1
 800b4e2:	d1f6      	bne.n	800b4d2 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	079b      	lsls	r3, r3, #30
 800b4e8:	d5f4      	bpl.n	800b4d4 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b4ea:	493b      	ldr	r1, [pc, #236]	; (800b5d8 <RCCEx_PLLSAI1_Config+0x120>)
 800b4ec:	6862      	ldr	r2, [r4, #4]
 800b4ee:	68cb      	ldr	r3, [r1, #12]
 800b4f0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800b4f4:	4303      	orrs	r3, r0
 800b4f6:	3a01      	subs	r2, #1
 800b4f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b4fc:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800b4fe:	4d36      	ldr	r5, [pc, #216]	; (800b5d8 <RCCEx_PLLSAI1_Config+0x120>)
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b506:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800b508:	f7fd fa28 	bl	800895c <HAL_GetTick>
 800b50c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b50e:	e004      	b.n	800b51a <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b510:	f7fd fa24 	bl	800895c <HAL_GetTick>
 800b514:	1b83      	subs	r3, r0, r6
 800b516:	2b02      	cmp	r3, #2
 800b518:	d83c      	bhi.n	800b594 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b51a:	682b      	ldr	r3, [r5, #0]
 800b51c:	011a      	lsls	r2, r3, #4
 800b51e:	d4f7      	bmi.n	800b510 <RCCEx_PLLSAI1_Config+0x58>
      if(Divider == DIVIDER_P_UPDATE)
 800b520:	2f00      	cmp	r7, #0
 800b522:	d139      	bne.n	800b598 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b524:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800b528:	692a      	ldr	r2, [r5, #16]
 800b52a:	06db      	lsls	r3, r3, #27
 800b52c:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800b530:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b534:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800b538:	4313      	orrs	r3, r2
 800b53a:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800b53c:	4d26      	ldr	r5, [pc, #152]	; (800b5d8 <RCCEx_PLLSAI1_Config+0x120>)
 800b53e:	682b      	ldr	r3, [r5, #0]
 800b540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b544:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b546:	f7fd fa09 	bl	800895c <HAL_GetTick>
 800b54a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b54c:	e004      	b.n	800b558 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b54e:	f7fd fa05 	bl	800895c <HAL_GetTick>
 800b552:	1b83      	subs	r3, r0, r6
 800b554:	2b02      	cmp	r3, #2
 800b556:	d81d      	bhi.n	800b594 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	d5f7      	bpl.n	800b54e <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b55e:	692b      	ldr	r3, [r5, #16]
 800b560:	69a2      	ldr	r2, [r4, #24]
 800b562:	4313      	orrs	r3, r2
 800b564:	2000      	movs	r0, #0
 800b566:	612b      	str	r3, [r5, #16]
}
 800b568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800b56a:	2a00      	cmp	r2, #0
 800b56c:	d0b1      	beq.n	800b4d2 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b56e:	68db      	ldr	r3, [r3, #12]
       ||
 800b570:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b572:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b576:	3301      	adds	r3, #1
       ||
 800b578:	4293      	cmp	r3, r2
 800b57a:	d1aa      	bne.n	800b4d2 <RCCEx_PLLSAI1_Config+0x1a>
 800b57c:	e7bf      	b.n	800b4fe <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	0395      	lsls	r5, r2, #14
 800b582:	d4b2      	bmi.n	800b4ea <RCCEx_PLLSAI1_Config+0x32>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	0359      	lsls	r1, r3, #13
 800b588:	d5a3      	bpl.n	800b4d2 <RCCEx_PLLSAI1_Config+0x1a>
 800b58a:	e7ae      	b.n	800b4ea <RCCEx_PLLSAI1_Config+0x32>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	055e      	lsls	r6, r3, #21
 800b590:	d59f      	bpl.n	800b4d2 <RCCEx_PLLSAI1_Config+0x1a>
 800b592:	e7aa      	b.n	800b4ea <RCCEx_PLLSAI1_Config+0x32>
    switch(PllSai1->PLLSAI1Source)
 800b594:	2003      	movs	r0, #3
}
 800b596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800b598:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b59a:	692b      	ldr	r3, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 800b59c:	d00d      	beq.n	800b5ba <RCCEx_PLLSAI1_Config+0x102>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b59e:	6962      	ldr	r2, [r4, #20]
 800b5a0:	68a1      	ldr	r1, [r4, #8]
 800b5a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b5a6:	0852      	lsrs	r2, r2, #1
 800b5a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b5ac:	3a01      	subs	r2, #1
 800b5ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b5b2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800b5b6:	612b      	str	r3, [r5, #16]
 800b5b8:	e7c0      	b.n	800b53c <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b5ba:	6922      	ldr	r2, [r4, #16]
 800b5bc:	68a1      	ldr	r1, [r4, #8]
 800b5be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b5c2:	0852      	lsrs	r2, r2, #1
 800b5c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b5c8:	3a01      	subs	r2, #1
 800b5ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b5ce:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800b5d2:	612b      	str	r3, [r5, #16]
 800b5d4:	e7b2      	b.n	800b53c <RCCEx_PLLSAI1_Config+0x84>
 800b5d6:	bf00      	nop
 800b5d8:	40021000 	.word	0x40021000

0800b5dc <HAL_RCCEx_PeriphCLKConfig>:
{
 800b5dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b5e0:	6803      	ldr	r3, [r0, #0]
 800b5e2:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
{
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b5ea:	d00c      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800b5ec:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b5ee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b5f2:	f000 8112 	beq.w	800b81a <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800b5f6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800b5fa:	f000 8113 	beq.w	800b824 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800b5fe:	2900      	cmp	r1, #0
 800b600:	f000 8126 	beq.w	800b850 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800b604:	2701      	movs	r7, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b606:	0399      	lsls	r1, r3, #14
 800b608:	d559      	bpl.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b60a:	4ba5      	ldr	r3, [pc, #660]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b60c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b60e:	00d2      	lsls	r2, r2, #3
 800b610:	f140 80f7 	bpl.w	800b802 <HAL_RCCEx_PeriphCLKConfig+0x226>
    FlagStatus       pwrclkchanged = RESET;
 800b614:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b618:	4da2      	ldr	r5, [pc, #648]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800b61a:	682b      	ldr	r3, [r5, #0]
 800b61c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b620:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800b622:	f7fd f99b 	bl	800895c <HAL_GetTick>
 800b626:	4606      	mov	r6, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b628:	e005      	b.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b62a:	f7fd f997 	bl	800895c <HAL_GetTick>
 800b62e:	1b83      	subs	r3, r0, r6
 800b630:	2b02      	cmp	r3, #2
 800b632:	f200 8101 	bhi.w	800b838 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b636:	682b      	ldr	r3, [r5, #0]
 800b638:	05db      	lsls	r3, r3, #23
 800b63a:	d5f6      	bpl.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    if(ret == HAL_OK)
 800b63c:	bbb7      	cbnz	r7, 800b6ac <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b63e:	4d98      	ldr	r5, [pc, #608]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b640:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b644:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800b648:	d027      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800b64a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d025      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b650:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800b654:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800b658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b65c:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b660:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800b664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b668:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b66c:	07ce      	lsls	r6, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b66e:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        RCC->BDCR = tmpregister;
 800b672:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b676:	f140 8110 	bpl.w	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        tickstart = HAL_GetTick();
 800b67a:	f7fd f96f 	bl	800895c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b67e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800b682:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b684:	e005      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0xb6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b686:	f7fd f969 	bl	800895c <HAL_GetTick>
 800b68a:	1b80      	subs	r0, r0, r6
 800b68c:	4548      	cmp	r0, r9
 800b68e:	f200 80d3 	bhi.w	800b838 <HAL_RCCEx_PeriphCLKConfig+0x25c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b692:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800b696:	0798      	lsls	r0, r3, #30
 800b698:	d5f5      	bpl.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b69a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b69c:	4980      	ldr	r1, [pc, #512]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b69e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800b6a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    if(pwrclkchanged == SET)
 800b6ac:	f1b8 0f00 	cmp.w	r8, #0
 800b6b0:	d004      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6b2:	4a7b      	ldr	r2, [pc, #492]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b6b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b6b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ba:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	07d9      	lsls	r1, r3, #31
 800b6c0:	d508      	bpl.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b6c2:	4977      	ldr	r1, [pc, #476]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b6c4:	6a20      	ldr	r0, [r4, #32]
 800b6c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b6ca:	f022 0203 	bic.w	r2, r2, #3
 800b6ce:	4302      	orrs	r2, r0
 800b6d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b6d4:	079a      	lsls	r2, r3, #30
 800b6d6:	d508      	bpl.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b6d8:	4971      	ldr	r1, [pc, #452]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b6da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b6dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b6e0:	f022 020c 	bic.w	r2, r2, #12
 800b6e4:	4302      	orrs	r2, r0
 800b6e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b6ea:	075e      	lsls	r6, r3, #29
 800b6ec:	d508      	bpl.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b6ee:	496c      	ldr	r1, [pc, #432]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b6f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b6f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b6f6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800b6fa:	4302      	orrs	r2, r0
 800b6fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b700:	069d      	lsls	r5, r3, #26
 800b702:	d508      	bpl.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b704:	4966      	ldr	r1, [pc, #408]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b706:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b708:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b70c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b710:	4302      	orrs	r2, r0
 800b712:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b716:	0598      	lsls	r0, r3, #22
 800b718:	d508      	bpl.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x150>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b71a:	4961      	ldr	r1, [pc, #388]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b71c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b71e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b722:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800b726:	4302      	orrs	r2, r0
 800b728:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b72c:	0559      	lsls	r1, r3, #21
 800b72e:	d508      	bpl.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b730:	495b      	ldr	r1, [pc, #364]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b732:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800b734:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b738:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800b73c:	4302      	orrs	r2, r0
 800b73e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b742:	065a      	lsls	r2, r3, #25
 800b744:	d508      	bpl.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b746:	4956      	ldr	r1, [pc, #344]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b748:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b74a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b74e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b752:	4302      	orrs	r2, r0
 800b754:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b758:	061e      	lsls	r6, r3, #24
 800b75a:	d508      	bpl.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b75c:	4950      	ldr	r1, [pc, #320]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b75e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800b760:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b764:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b768:	4302      	orrs	r2, r0
 800b76a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b76e:	05dd      	lsls	r5, r3, #23
 800b770:	d508      	bpl.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b772:	494b      	ldr	r1, [pc, #300]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b774:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b776:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b77a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800b77e:	4302      	orrs	r2, r0
 800b780:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b784:	0318      	lsls	r0, r3, #12
 800b786:	d50e      	bpl.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b788:	4945      	ldr	r1, [pc, #276]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b78a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b78c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b790:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b794:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b796:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b79a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b79e:	d04d      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x260>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b7a0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800b7a4:	d064      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x294>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b7a6:	0359      	lsls	r1, r3, #13
 800b7a8:	d50e      	bpl.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7aa:	493d      	ldr	r1, [pc, #244]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b7ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b7ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800b7b2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800b7b6:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b7b8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b7c0:	d041      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b7c2:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800b7c6:	d05c      	beq.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b7c8:	045a      	lsls	r2, r3, #17
 800b7ca:	d50b      	bpl.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7cc:	4834      	ldr	r0, [pc, #208]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b7ce:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b7d0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800b7d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b7d8:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b7da:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7de:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b7e2:	d03c      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x282>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b7e4:	041b      	lsls	r3, r3, #16
 800b7e6:	d508      	bpl.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b7e8:	4a2d      	ldr	r2, [pc, #180]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b7ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b7ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800b7f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7f4:	430b      	orrs	r3, r1
 800b7f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	b003      	add	sp, #12
 800b7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800b802:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b804:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b808:	659a      	str	r2, [r3, #88]	; 0x58
 800b80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b80c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b814:	f04f 0801 	mov.w	r8, #1
 800b818:	e6fe      	b.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b81a:	4821      	ldr	r0, [pc, #132]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b81c:	68c2      	ldr	r2, [r0, #12]
 800b81e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b822:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b824:	481e      	ldr	r0, [pc, #120]	; (800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800b826:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800b82a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800b82e:	430a      	orrs	r2, r1
 800b830:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 800b834:	2700      	movs	r7, #0
 800b836:	e6e6      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = HAL_TIMEOUT;
 800b838:	2703      	movs	r7, #3
 800b83a:	e737      	b.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b83c:	68ca      	ldr	r2, [r1, #12]
 800b83e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b842:	60ca      	str	r2, [r1, #12]
 800b844:	e7af      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b846:	68ca      	ldr	r2, [r1, #12]
 800b848:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b84c:	60ca      	str	r2, [r1, #12]
 800b84e:	e7bb      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b850:	3004      	adds	r0, #4
 800b852:	f7ff fe31 	bl	800b4b8 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800b856:	4607      	mov	r7, r0
 800b858:	b1e0      	cbz	r0, 800b894 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	e6d3      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b85e:	2102      	movs	r1, #2
 800b860:	1d20      	adds	r0, r4, #4
 800b862:	f7ff fe29 	bl	800b4b8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b866:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800b868:	2800      	cmp	r0, #0
 800b86a:	d0bb      	beq.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b86c:	4607      	mov	r7, r0
 800b86e:	e7b9      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b870:	2101      	movs	r1, #1
 800b872:	1d20      	adds	r0, r4, #4
 800b874:	f7ff fe20 	bl	800b4b8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b878:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d093      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b87e:	4607      	mov	r7, r0
 800b880:	e791      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b882:	2101      	movs	r1, #1
 800b884:	1d20      	adds	r0, r4, #4
 800b886:	f7ff fe17 	bl	800b4b8 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b88a:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d09b      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b890:	4607      	mov	r7, r0
 800b892:	e799      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b894:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b896:	6823      	ldr	r3, [r4, #0]
 800b898:	e7c4      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800b89a:	4613      	mov	r3, r2
 800b89c:	e6fe      	b.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800b89e:	bf00      	nop
 800b8a0:	40021000 	.word	0x40021000
 800b8a4:	40007000 	.word	0x40007000

0800b8a8 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b8a8:	6803      	ldr	r3, [r0, #0]
{
 800b8aa:	b510      	push	{r4, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b8ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b8ae:	6918      	ldr	r0, [r3, #16]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b8b0:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b8b2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800b8b6:	e9c1 4001 	strd	r4, r0, [r1, #4]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b8ba:	f3c3 4e05 	ubfx	lr, r3, #16, #6
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b8be:	f3c3 2c06 	ubfx	ip, r3, #8, #7
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b8c2:	f003 007f 	and.w	r0, r3, #127	; 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b8c6:	f3c3 4406 	ubfx	r4, r3, #16, #7
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b8ca:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800b8ce:	f881 e000 	strb.w	lr, [r1]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b8d2:	f881 c001 	strb.w	ip, [r1, #1]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800b8d6:	70cb      	strb	r3, [r1, #3]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800b8d8:	7088      	strb	r0, [r1, #2]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b8da:	b9d2      	cbnz	r2, 800b912 <HAL_RTC_GetTime+0x6a>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b8dc:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800b8e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800b8e4:	f00c 0c0f 	and.w	ip, ip, #15
 800b8e8:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b8ec:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800b8f0:	0903      	lsrs	r3, r0, #4
 800b8f2:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (tmp + (Value & 0x0FU));
 800b8f6:	f004 040f 	and.w	r4, r4, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b8fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800b8fe:	f000 000f 	and.w	r0, r0, #15
 800b902:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 800b906:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b90a:	700c      	strb	r4, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b90c:	f881 c001 	strb.w	ip, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b910:	7088      	strb	r0, [r1, #2]
}
 800b912:	2000      	movs	r0, #0
 800b914:	bd10      	pop	{r4, pc}
 800b916:	bf00      	nop

0800b918 <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b918:	6803      	ldr	r3, [r0, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
{
 800b91c:	b510      	push	{r4, lr}
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b91e:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b922:	f3c3 2e04 	ubfx	lr, r3, #8, #5
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b926:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b92a:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b92e:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b932:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b934:	f881 e001 	strb.w	lr, [r1, #1]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800b938:	700b      	strb	r3, [r1, #0]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800b93a:	f881 c002 	strb.w	ip, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 800b93e:	b9d2      	cbnz	r2, 800b976 <HAL_RTC_GetDate+0x5e>
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b940:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800b944:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800b948:	f00c 0c0f 	and.w	ip, ip, #15
 800b94c:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b950:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800b954:	0903      	lsrs	r3, r0, #4
 800b956:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
  return (tmp + (Value & 0x0FU));
 800b95a:	f004 040f 	and.w	r4, r4, #15
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800b95e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & 0x0FU));
 800b962:	f000 000f 	and.w	r0, r0, #15
 800b966:	eb04 044e 	add.w	r4, r4, lr, lsl #1
 800b96a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b96e:	704c      	strb	r4, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b970:	f881 c002 	strb.w	ip, [r1, #2]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b974:	70c8      	strb	r0, [r1, #3]
}
 800b976:	2000      	movs	r0, #0
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	bf00      	nop

0800b97c <RTC_EnterInitMode>:
{
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b97e:	6803      	ldr	r3, [r0, #0]
 800b980:	68dc      	ldr	r4, [r3, #12]
 800b982:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 800b986:	d002      	beq.n	800b98e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800b988:	2400      	movs	r4, #0
}
 800b98a:	4620      	mov	r0, r4
 800b98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b98e:	f04f 32ff 	mov.w	r2, #4294967295
 800b992:	60da      	str	r2, [r3, #12]
 800b994:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 800b996:	f7fc ffe1 	bl	800895c <HAL_GetTick>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b99a:	2703      	movs	r7, #3
    tickstart = HAL_GetTick();
 800b99c:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b99e:	e00a      	b.n	800b9b6 <RTC_EnterInitMode+0x3a>
 800b9a0:	2c03      	cmp	r4, #3
 800b9a2:	d0f2      	beq.n	800b98a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b9a4:	f7fc ffda 	bl	800895c <HAL_GetTick>
 800b9a8:	1b83      	subs	r3, r0, r6
 800b9aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b9ae:	bf84      	itt	hi
 800b9b0:	f885 7021 	strbhi.w	r7, [r5, #33]	; 0x21
        status = HAL_TIMEOUT;
 800b9b4:	2403      	movhi	r4, #3
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b9b6:	682b      	ldr	r3, [r5, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	065b      	lsls	r3, r3, #25
 800b9bc:	d5f0      	bpl.n	800b9a0 <RTC_EnterInitMode+0x24>
}
 800b9be:	4620      	mov	r0, r4
 800b9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9c2:	bf00      	nop

0800b9c4 <RTC_ExitInitMode>:
{
 800b9c4:	b538      	push	{r3, r4, r5, lr}
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800b9c6:	4b22      	ldr	r3, [pc, #136]	; (800ba50 <RTC_ExitInitMode+0x8c>)
 800b9c8:	68da      	ldr	r2, [r3, #12]
 800b9ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9ce:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b9d0:	689a      	ldr	r2, [r3, #8]
 800b9d2:	0691      	lsls	r1, r2, #26
{
 800b9d4:	4604      	mov	r4, r0
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b9d6:	d414      	bmi.n	800ba02 <RTC_ExitInitMode+0x3e>
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b9d8:	6802      	ldr	r2, [r0, #0]
 800b9da:	68d3      	ldr	r3, [r2, #12]
 800b9dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9e0:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 800b9e2:	f7fc ffbb 	bl	800895c <HAL_GetTick>
 800b9e6:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b9e8:	e005      	b.n	800b9f6 <RTC_ExitInitMode+0x32>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b9ea:	f7fc ffb7 	bl	800895c <HAL_GetTick>
 800b9ee:	1b43      	subs	r3, r0, r5
 800b9f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9f4:	d827      	bhi.n	800ba46 <RTC_ExitInitMode+0x82>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	069a      	lsls	r2, r3, #26
 800b9fc:	d5f5      	bpl.n	800b9ea <RTC_ExitInitMode+0x26>
  HAL_StatusTypeDef status = HAL_OK;
 800b9fe:	2000      	movs	r0, #0
}
 800ba00:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ba02:	689a      	ldr	r2, [r3, #8]
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ba04:	6801      	ldr	r1, [r0, #0]
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ba06:	f022 0220 	bic.w	r2, r2, #32
 800ba0a:	609a      	str	r2, [r3, #8]
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ba0c:	68cb      	ldr	r3, [r1, #12]
 800ba0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba12:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 800ba14:	f7fc ffa2 	bl	800895c <HAL_GetTick>
 800ba18:	4605      	mov	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ba1a:	e005      	b.n	800ba28 <RTC_ExitInitMode+0x64>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ba1c:	f7fc ff9e 	bl	800895c <HAL_GetTick>
 800ba20:	1b43      	subs	r3, r0, r5
 800ba22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba26:	d80a      	bhi.n	800ba3e <RTC_ExitInitMode+0x7a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	069b      	lsls	r3, r3, #26
 800ba2e:	d5f5      	bpl.n	800ba1c <RTC_ExitInitMode+0x58>
  HAL_StatusTypeDef status = HAL_OK;
 800ba30:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ba32:	4a07      	ldr	r2, [pc, #28]	; (800ba50 <RTC_ExitInitMode+0x8c>)
 800ba34:	6893      	ldr	r3, [r2, #8]
 800ba36:	f043 0320 	orr.w	r3, r3, #32
 800ba3a:	6093      	str	r3, [r2, #8]
}
 800ba3c:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba3e:	2003      	movs	r0, #3
 800ba40:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ba44:	e7f5      	b.n	800ba32 <RTC_ExitInitMode+0x6e>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba46:	2003      	movs	r0, #3
 800ba48:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
}
 800ba4c:	bd38      	pop	{r3, r4, r5, pc}
 800ba4e:	bf00      	nop
 800ba50:	40002800 	.word	0x40002800

0800ba54 <HAL_RTC_Init>:
  if (hrtc != NULL)
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d045      	beq.n	800bae4 <HAL_RTC_Init+0x90>
{
 800ba58:	b538      	push	{r3, r4, r5, lr}
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800ba5a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800ba5e:	4604      	mov	r4, r0
 800ba60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d038      	beq.n	800bada <HAL_RTC_Init+0x86>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba68:	6823      	ldr	r3, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ba6a:	2002      	movs	r0, #2
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba6c:	21ca      	movs	r1, #202	; 0xca
 800ba6e:	2253      	movs	r2, #83	; 0x53
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ba70:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba74:	6259      	str	r1, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800ba76:	4620      	mov	r0, r4
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba78:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800ba7a:	f7ff ff7f 	bl	800b97c <RTC_EnterInitMode>
    if (status == HAL_OK)
 800ba7e:	b100      	cbz	r0, 800ba82 <HAL_RTC_Init+0x2e>
}
 800ba80:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ba82:	e9d4 3200 	ldrd	r3, r2, [r4]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ba86:	6899      	ldr	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ba88:	6925      	ldr	r5, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ba8a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800ba8e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800ba92:	6099      	str	r1, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ba94:	69a1      	ldr	r1, [r4, #24]
 800ba96:	6898      	ldr	r0, [r3, #8]
 800ba98:	432a      	orrs	r2, r5
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	4302      	orrs	r2, r0
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800ba9e:	68e1      	ldr	r1, [r4, #12]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800baa0:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800baa2:	6119      	str	r1, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800baa4:	691a      	ldr	r2, [r3, #16]
 800baa6:	68a1      	ldr	r1, [r4, #8]
 800baa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
      status = RTC_ExitInitMode(hrtc);
 800baac:	4620      	mov	r0, r4
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800baae:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 800bab0:	f7ff ff88 	bl	800b9c4 <RTC_ExitInitMode>
      if (status == HAL_OK)
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d1e3      	bne.n	800ba80 <HAL_RTC_Init+0x2c>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bab8:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800baba:	69e2      	ldr	r2, [r4, #28]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800babc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800babe:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bac0:	f021 0103 	bic.w	r1, r1, #3
 800bac4:	64d9      	str	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bac6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bac8:	432a      	orrs	r2, r5
 800baca:	430a      	orrs	r2, r1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bacc:	21ff      	movs	r1, #255	; 0xff
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bace:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bad0:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 800bad2:	2301      	movs	r3, #1
 800bad4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800bad8:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800bada:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 800bade:	f7fa fef7 	bl	80068d0 <HAL_RTC_MspInit>
 800bae2:	e7c1      	b.n	800ba68 <HAL_RTC_Init+0x14>
  HAL_StatusTypeDef status = HAL_ERROR;
 800bae4:	2001      	movs	r0, #1
}
 800bae6:	4770      	bx	lr

0800bae8 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 800bae8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d058      	beq.n	800bba2 <HAL_RTC_SetTime+0xba>
 800baf0:	2301      	movs	r3, #1
{
 800baf2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 800baf4:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800baf8:	2302      	movs	r3, #2
 800bafa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bafe:	6803      	ldr	r3, [r0, #0]
 800bb00:	4616      	mov	r6, r2
 800bb02:	22ca      	movs	r2, #202	; 0xca
 800bb04:	625a      	str	r2, [r3, #36]	; 0x24
 800bb06:	2253      	movs	r2, #83	; 0x53
 800bb08:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	460d      	mov	r5, r1
 800bb0e:	f7ff ff35 	bl	800b97c <RTC_EnterInitMode>
  if (status == HAL_OK)
 800bb12:	b130      	cbz	r0, 800bb22 <HAL_RTC_SetTime+0x3a>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	22ff      	movs	r2, #255	; 0xff
 800bb18:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f884 3020 	strb.w	r3, [r4, #32]
}
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb22:	6821      	ldr	r1, [r4, #0]
    if (Format == RTC_FORMAT_BIN)
 800bb24:	2e00      	cmp	r6, #0
 800bb26:	d13e      	bne.n	800bba6 <HAL_RTC_SetTime+0xbe>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb28:	688a      	ldr	r2, [r1, #8]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb2a:	782b      	ldrb	r3, [r5, #0]
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb2c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bb30:	bf16      	itet	ne
 800bb32:	78ea      	ldrbne	r2, [r5, #3]
        sTime->TimeFormat = 0x00U;
 800bb34:	70ea      	strbeq	r2, [r5, #3]
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bb36:	0592      	lslne	r2, r2, #22
  while (temp >= 10U)
 800bb38:	2b09      	cmp	r3, #9
 800bb3a:	d909      	bls.n	800bb50 <HAL_RTC_SetTime+0x68>
  uint32_t bcdhigh = 0U;
 800bb3c:	2000      	movs	r0, #0
    temp -= 10U;
 800bb3e:	3b0a      	subs	r3, #10
 800bb40:	b2db      	uxtb	r3, r3
  while (temp >= 10U)
 800bb42:	2b09      	cmp	r3, #9
    bcdhigh++;
 800bb44:	f100 0001 	add.w	r0, r0, #1
  while (temp >= 10U)
 800bb48:	d8f9      	bhi.n	800bb3e <HAL_RTC_SetTime+0x56>
  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bb4a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800bb4e:	b2db      	uxtb	r3, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb50:	7868      	ldrb	r0, [r5, #1]
  while (temp >= 10U)
 800bb52:	2809      	cmp	r0, #9
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb54:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while (temp >= 10U)
 800bb58:	d90a      	bls.n	800bb70 <HAL_RTC_SetTime+0x88>
  uint32_t bcdhigh = 0U;
 800bb5a:	f04f 0c00 	mov.w	ip, #0
    temp -= 10U;
 800bb5e:	380a      	subs	r0, #10
 800bb60:	b2c0      	uxtb	r0, r0
  while (temp >= 10U)
 800bb62:	2809      	cmp	r0, #9
    bcdhigh++;
 800bb64:	f10c 0c01 	add.w	ip, ip, #1
  while (temp >= 10U)
 800bb68:	d8f9      	bhi.n	800bb5e <HAL_RTC_SetTime+0x76>
  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bb6a:	ea40 100c 	orr.w	r0, r0, ip, lsl #4
 800bb6e:	b2c0      	uxtb	r0, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bb70:	f895 c002 	ldrb.w	ip, [r5, #2]
  while (temp >= 10U)
 800bb74:	f1bc 0f09 	cmp.w	ip, #9
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb78:	ea4f 2000 	mov.w	r0, r0, lsl #8
  while (temp >= 10U)
 800bb7c:	d90c      	bls.n	800bb98 <HAL_RTC_SetTime+0xb0>
    temp -= 10U;
 800bb7e:	f1ac 0c0a 	sub.w	ip, ip, #10
 800bb82:	fa5f fc8c 	uxtb.w	ip, ip
  while (temp >= 10U)
 800bb86:	f1bc 0f09 	cmp.w	ip, #9
    bcdhigh++;
 800bb8a:	f106 0601 	add.w	r6, r6, #1
  while (temp >= 10U)
 800bb8e:	d8f6      	bhi.n	800bb7e <HAL_RTC_SetTime+0x96>
  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bb90:	ea4c 1c06 	orr.w	ip, ip, r6, lsl #4
 800bb94:	fa5f fc8c 	uxtb.w	ip, ip
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bb98:	431a      	orrs	r2, r3
 800bb9a:	4302      	orrs	r2, r0
 800bb9c:	ea42 020c 	orr.w	r2, r2, ip
 800bba0:	e012      	b.n	800bbc8 <HAL_RTC_SetTime+0xe0>
  __HAL_LOCK(hrtc);
 800bba2:	2002      	movs	r0, #2
}
 800bba4:	4770      	bx	lr
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bba6:	688b      	ldr	r3, [r1, #8]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bba8:	786a      	ldrb	r2, [r5, #1]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bbaa:	7828      	ldrb	r0, [r5, #0]
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bbac:	f013 0340 	ands.w	r3, r3, #64	; 0x40
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bbb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bbb4:	bf14      	ite	ne
 800bbb6:	78eb      	ldrbne	r3, [r5, #3]
        sTime->TimeFormat = 0x00U;
 800bbb8:	70eb      	strbeq	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bbba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bbbe:	78a8      	ldrb	r0, [r5, #2]
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bbc0:	bf18      	it	ne
 800bbc2:	059b      	lslne	r3, r3, #22
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bbc4:	4302      	orrs	r2, r0
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bbc6:	431a      	orrs	r2, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bbc8:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 800bbcc:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 800bbd0:	600a      	str	r2, [r1, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bbd2:	688a      	ldr	r2, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bbd4:	6928      	ldr	r0, [r5, #16]
 800bbd6:	68eb      	ldr	r3, [r5, #12]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bbd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbdc:	608a      	str	r2, [r1, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bbde:	688a      	ldr	r2, [r1, #8]
 800bbe0:	4303      	orrs	r3, r0
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f7ff feec 	bl	800b9c4 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	22ff      	movs	r2, #255	; 0xff
 800bbf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d191      	bne.n	800bb1a <HAL_RTC_SetTime+0x32>
    hrtc->State = HAL_RTC_STATE_READY;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f884 3020 	strb.w	r3, [r4, #32]
}
 800bc02:	bd70      	pop	{r4, r5, r6, pc}

0800bc04 <HAL_RTC_SetDate>:
{
 800bc04:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hrtc);
 800bc06:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d06f      	beq.n	800bcee <HAL_RTC_SetDate+0xea>
 800bc0e:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc10:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 800bc12:	2001      	movs	r0, #1
 800bc14:	f885 0020 	strb.w	r0, [r5, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc18:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bc1c:	b1d2      	cbz	r2, 800bc54 <HAL_RTC_SetDate+0x50>
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bc1e:	784a      	ldrb	r2, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bc20:	78cc      	ldrb	r4, [r1, #3]
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800bc22:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bc24:	780b      	ldrb	r3, [r1, #0]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bc26:	0212      	lsls	r2, r2, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bc28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bc2c:	4302      	orrs	r2, r0
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bc2e:	ea42 3443 	orr.w	r4, r2, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc32:	682b      	ldr	r3, [r5, #0]
 800bc34:	21ca      	movs	r1, #202	; 0xca
 800bc36:	2253      	movs	r2, #83	; 0x53
 800bc38:	6259      	str	r1, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800bc3a:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc3c:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800bc3e:	f7ff fe9d 	bl	800b97c <RTC_EnterInitMode>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bc42:	682b      	ldr	r3, [r5, #0]
  if (status == HAL_OK)
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d03d      	beq.n	800bcc4 <HAL_RTC_SetDate+0xc0>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc48:	22ff      	movs	r2, #255	; 0xff
 800bc4a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f885 3020 	strb.w	r3, [r5, #32]
}
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bc54:	7848      	ldrb	r0, [r1, #1]
 800bc56:	06c3      	lsls	r3, r0, #27
 800bc58:	d545      	bpl.n	800bce6 <HAL_RTC_SetDate+0xe2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bc5a:	78cb      	ldrb	r3, [r1, #3]
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bc5c:	f020 0010 	bic.w	r0, r0, #16
 800bc60:	300a      	adds	r0, #10
 800bc62:	b2c0      	uxtb	r0, r0
  while (temp >= 10U)
 800bc64:	2b09      	cmp	r3, #9
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bc66:	7048      	strb	r0, [r1, #1]
  while (temp >= 10U)
 800bc68:	d943      	bls.n	800bcf2 <HAL_RTC_SetDate+0xee>
  uint32_t bcdhigh = 0U;
 800bc6a:	2400      	movs	r4, #0
    temp -= 10U;
 800bc6c:	3b0a      	subs	r3, #10
 800bc6e:	b2db      	uxtb	r3, r3
  while (temp >= 10U)
 800bc70:	2b09      	cmp	r3, #9
    bcdhigh++;
 800bc72:	f104 0401 	add.w	r4, r4, #1
  while (temp >= 10U)
 800bc76:	d8f9      	bhi.n	800bc6c <HAL_RTC_SetDate+0x68>
  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bc78:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800bc7c:	b2db      	uxtb	r3, r3
  while (temp >= 10U)
 800bc7e:	2809      	cmp	r0, #9
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bc80:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while (temp >= 10U)
 800bc84:	d909      	bls.n	800bc9a <HAL_RTC_SetDate+0x96>
  uint32_t bcdhigh = 0U;
 800bc86:	2400      	movs	r4, #0
    temp -= 10U;
 800bc88:	380a      	subs	r0, #10
 800bc8a:	b2c0      	uxtb	r0, r0
  while (temp >= 10U)
 800bc8c:	2809      	cmp	r0, #9
    bcdhigh++;
 800bc8e:	f104 0401 	add.w	r4, r4, #1
  while (temp >= 10U)
 800bc92:	d8f9      	bhi.n	800bc88 <HAL_RTC_SetDate+0x84>
  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bc94:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
 800bc98:	b2c0      	uxtb	r0, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800bc9a:	788c      	ldrb	r4, [r1, #2]
  while (temp >= 10U)
 800bc9c:	2c09      	cmp	r4, #9
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bc9e:	ea4f 2000 	mov.w	r0, r0, lsl #8
  while (temp >= 10U)
 800bca2:	d908      	bls.n	800bcb6 <HAL_RTC_SetDate+0xb2>
    temp -= 10U;
 800bca4:	3c0a      	subs	r4, #10
 800bca6:	b2e4      	uxtb	r4, r4
  while (temp >= 10U)
 800bca8:	2c09      	cmp	r4, #9
    bcdhigh++;
 800bcaa:	f102 0201 	add.w	r2, r2, #1
  while (temp >= 10U)
 800bcae:	d8f9      	bhi.n	800bca4 <HAL_RTC_SetDate+0xa0>
  return ((uint8_t)(bcdhigh << 4U) | temp);
 800bcb0:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800bcb4:	b2e4      	uxtb	r4, r4
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800bcb6:	780a      	ldrb	r2, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bcb8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800bcbc:	ea43 0200 	orr.w	r2, r3, r0
 800bcc0:	4314      	orrs	r4, r2
 800bcc2:	e7b6      	b.n	800bc32 <HAL_RTC_SetDate+0x2e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bcc4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800bcc8:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800bccc:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800bcce:	4628      	mov	r0, r5
 800bcd0:	f7ff fe78 	bl	800b9c4 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	22ff      	movs	r2, #255	; 0xff
 800bcd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d1b6      	bne.n	800bc4c <HAL_RTC_SetDate+0x48>
    hrtc->State = HAL_RTC_STATE_READY ;
 800bcde:	2301      	movs	r3, #1
 800bce0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 800bce4:	e7b2      	b.n	800bc4c <HAL_RTC_SetDate+0x48>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bce6:	78cb      	ldrb	r3, [r1, #3]
  while (temp >= 10U)
 800bce8:	2b09      	cmp	r3, #9
 800bcea:	d8be      	bhi.n	800bc6a <HAL_RTC_SetDate+0x66>
 800bcec:	e7c7      	b.n	800bc7e <HAL_RTC_SetDate+0x7a>
  __HAL_LOCK(hrtc);
 800bcee:	2002      	movs	r0, #2
}
 800bcf0:	bd38      	pop	{r3, r4, r5, pc}
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800bcf2:	041b      	lsls	r3, r3, #16
  while (temp >= 10U)
 800bcf4:	e7c7      	b.n	800bc86 <HAL_RTC_SetDate+0x82>
 800bcf6:	bf00      	nop

0800bcf8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop

0800bcfc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcfc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d116      	bne.n	800bd32 <HAL_TIM_Base_Start_IT+0x36>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd04:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd06:	4911      	ldr	r1, [pc, #68]	; (800bd4c <HAL_TIM_Base_Start_IT+0x50>)
  htim->State = HAL_TIM_STATE_BUSY;
 800bd08:	2202      	movs	r2, #2
 800bd0a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd0e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd10:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd18:	d00d      	beq.n	800bd36 <HAL_TIM_Base_Start_IT+0x3a>
 800bd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd1e:	d00a      	beq.n	800bd36 <HAL_TIM_Base_Start_IT+0x3a>
 800bd20:	4a0b      	ldr	r2, [pc, #44]	; (800bd50 <HAL_TIM_Base_Start_IT+0x54>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d007      	beq.n	800bd36 <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	f042 0201 	orr.w	r2, r2, #1
  }

  /* Return function status */
  return HAL_OK;
 800bd2c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800bd2e:	601a      	str	r2, [r3, #0]
 800bd30:	4770      	bx	lr
    return HAL_ERROR;
 800bd32:	2001      	movs	r0, #1
 800bd34:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd36:	6899      	ldr	r1, [r3, #8]
 800bd38:	4a06      	ldr	r2, [pc, #24]	; (800bd54 <HAL_TIM_Base_Start_IT+0x58>)
 800bd3a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd3c:	2a06      	cmp	r2, #6
 800bd3e:	d002      	beq.n	800bd46 <HAL_TIM_Base_Start_IT+0x4a>
 800bd40:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800bd44:	d1ef      	bne.n	800bd26 <HAL_TIM_Base_Start_IT+0x2a>
  return HAL_OK;
 800bd46:	2000      	movs	r0, #0
}
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	40012c00 	.word	0x40012c00
 800bd50:	40014000 	.word	0x40014000
 800bd54:	00010007 	.word	0x00010007

0800bd58 <HAL_TIM_OC_DelayElapsedCallback>:
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop

0800bd5c <HAL_TIM_IC_CaptureCallback>:
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop

0800bd60 <HAL_TIM_PWM_PulseFinishedCallback>:
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop

0800bd64 <HAL_TIM_TriggerCallback>:
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop

0800bd68 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd68:	6803      	ldr	r3, [r0, #0]
 800bd6a:	691a      	ldr	r2, [r3, #16]
 800bd6c:	0791      	lsls	r1, r2, #30
{
 800bd6e:	b510      	push	{r4, lr}
 800bd70:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bd72:	d502      	bpl.n	800bd7a <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	0792      	lsls	r2, r2, #30
 800bd78:	d468      	bmi.n	800be4c <HAL_TIM_IRQHandler+0xe4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd7a:	691a      	ldr	r2, [r3, #16]
 800bd7c:	0752      	lsls	r2, r2, #29
 800bd7e:	d502      	bpl.n	800bd86 <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd80:	68da      	ldr	r2, [r3, #12]
 800bd82:	0750      	lsls	r0, r2, #29
 800bd84:	d44f      	bmi.n	800be26 <HAL_TIM_IRQHandler+0xbe>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd86:	691a      	ldr	r2, [r3, #16]
 800bd88:	0711      	lsls	r1, r2, #28
 800bd8a:	d502      	bpl.n	800bd92 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd8c:	68da      	ldr	r2, [r3, #12]
 800bd8e:	0712      	lsls	r2, r2, #28
 800bd90:	d437      	bmi.n	800be02 <HAL_TIM_IRQHandler+0x9a>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd92:	691a      	ldr	r2, [r3, #16]
 800bd94:	06d0      	lsls	r0, r2, #27
 800bd96:	d502      	bpl.n	800bd9e <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd98:	68da      	ldr	r2, [r3, #12]
 800bd9a:	06d1      	lsls	r1, r2, #27
 800bd9c:	d41e      	bmi.n	800bddc <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd9e:	691a      	ldr	r2, [r3, #16]
 800bda0:	07d2      	lsls	r2, r2, #31
 800bda2:	d502      	bpl.n	800bdaa <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bda4:	68da      	ldr	r2, [r3, #12]
 800bda6:	07d0      	lsls	r0, r2, #31
 800bda8:	d469      	bmi.n	800be7e <HAL_TIM_IRQHandler+0x116>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	0611      	lsls	r1, r2, #24
 800bdae:	d502      	bpl.n	800bdb6 <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdb0:	68da      	ldr	r2, [r3, #12]
 800bdb2:	0612      	lsls	r2, r2, #24
 800bdb4:	d46b      	bmi.n	800be8e <HAL_TIM_IRQHandler+0x126>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bdb6:	691a      	ldr	r2, [r3, #16]
 800bdb8:	05d0      	lsls	r0, r2, #23
 800bdba:	d502      	bpl.n	800bdc2 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	0611      	lsls	r1, r2, #24
 800bdc0:	d46d      	bmi.n	800be9e <HAL_TIM_IRQHandler+0x136>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bdc2:	691a      	ldr	r2, [r3, #16]
 800bdc4:	0652      	lsls	r2, r2, #25
 800bdc6:	d502      	bpl.n	800bdce <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bdc8:	68da      	ldr	r2, [r3, #12]
 800bdca:	0650      	lsls	r0, r2, #25
 800bdcc:	d46f      	bmi.n	800beae <HAL_TIM_IRQHandler+0x146>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bdce:	691a      	ldr	r2, [r3, #16]
 800bdd0:	0691      	lsls	r1, r2, #26
 800bdd2:	d502      	bpl.n	800bdda <HAL_TIM_IRQHandler+0x72>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bdd4:	68da      	ldr	r2, [r3, #12]
 800bdd6:	0692      	lsls	r2, r2, #26
 800bdd8:	d449      	bmi.n	800be6e <HAL_TIM_IRQHandler+0x106>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bdda:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bddc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bde0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bde2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bde4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bde6:	69db      	ldr	r3, [r3, #28]
 800bde8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800bdec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdee:	d16f      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdf0:	f7ff ffb2 	bl	800bd58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7ff ffb3 	bl	800bd60 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdfa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bdfc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdfe:	7722      	strb	r2, [r4, #28]
 800be00:	e7cd      	b.n	800bd9e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be02:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be06:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be08:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be0a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800be10:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be12:	d15a      	bne.n	800beca <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be14:	f7ff ffa0 	bl	800bd58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be18:	4620      	mov	r0, r4
 800be1a:	f7ff ffa1 	bl	800bd60 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be1e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800be20:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be22:	7722      	strb	r2, [r4, #28]
 800be24:	e7b5      	b.n	800bd92 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be26:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be2a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be2c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be2e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800be36:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be38:	d144      	bne.n	800bec4 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3a:	f7ff ff8d 	bl	800bd58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be3e:	4620      	mov	r0, r4
 800be40:	f7ff ff8e 	bl	800bd60 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be44:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be46:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be48:	7722      	strb	r2, [r4, #28]
 800be4a:	e79c      	b.n	800bd86 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be4c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be50:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be52:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be54:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	0799      	lsls	r1, r3, #30
 800be5a:	d130      	bne.n	800bebe <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be5c:	f7ff ff7c 	bl	800bd58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be60:	4620      	mov	r0, r4
 800be62:	f7ff ff7d 	bl	800bd60 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be66:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be68:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be6a:	7722      	strb	r2, [r4, #28]
 800be6c:	e785      	b.n	800bd7a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be6e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800be72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be74:	611a      	str	r2, [r3, #16]
}
 800be76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800be7a:	f000 b8b1 	b.w	800bfe0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be7e:	f06f 0201 	mvn.w	r2, #1
 800be82:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800be84:	4620      	mov	r0, r4
 800be86:	f7f9 fd4f 	bl	8005928 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	e78d      	b.n	800bdaa <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be92:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800be94:	4620      	mov	r0, r4
 800be96:	f000 f8a5 	bl	800bfe4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	e78b      	b.n	800bdb6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bea2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800bea4:	4620      	mov	r0, r4
 800bea6:	f000 f89f 	bl	800bfe8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	e789      	b.n	800bdc2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800beae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800beb2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800beb4:	4620      	mov	r0, r4
 800beb6:	f7ff ff55 	bl	800bd64 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	e787      	b.n	800bdce <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800bebe:	f7ff ff4d 	bl	800bd5c <HAL_TIM_IC_CaptureCallback>
 800bec2:	e7d0      	b.n	800be66 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800bec4:	f7ff ff4a 	bl	800bd5c <HAL_TIM_IC_CaptureCallback>
 800bec8:	e7bc      	b.n	800be44 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800beca:	f7ff ff47 	bl	800bd5c <HAL_TIM_IC_CaptureCallback>
 800bece:	e7a6      	b.n	800be1e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800bed0:	f7ff ff44 	bl	800bd5c <HAL_TIM_IC_CaptureCallback>
 800bed4:	e791      	b.n	800bdfa <HAL_TIM_IRQHandler+0x92>
 800bed6:	bf00      	nop

0800bed8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bed8:	4a27      	ldr	r2, [pc, #156]	; (800bf78 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800beda:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bedc:	4290      	cmp	r0, r2
{
 800bede:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bee0:	d02c      	beq.n	800bf3c <TIM_Base_SetConfig+0x64>
 800bee2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bee6:	d014      	beq.n	800bf12 <TIM_Base_SetConfig+0x3a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bee8:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800beec:	4290      	cmp	r0, r2
 800beee:	d03c      	beq.n	800bf6a <TIM_Base_SetConfig+0x92>
 800bef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bef4:	4290      	cmp	r0, r2
 800bef6:	d038      	beq.n	800bf6a <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bef8:	694d      	ldr	r5, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800befa:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800befc:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800befe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf02:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800bf04:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf06:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf08:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800bf0a:	6282      	str	r2, [r0, #40]	; 0x28
}
 800bf0c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800bf0e:	6143      	str	r3, [r0, #20]
}
 800bf10:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800bf12:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf14:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800bf1a:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf22:	694a      	ldr	r2, [r1, #20]
 800bf24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800bf2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf2c:	688b      	ldr	r3, [r1, #8]
 800bf2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800bf30:	680b      	ldr	r3, [r1, #0]
 800bf32:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800bf34:	2301      	movs	r3, #1
}
 800bf36:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800bf38:	6143      	str	r3, [r0, #20]
}
 800bf3a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800bf3c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf3e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800bf44:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf4a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf4c:	694a      	ldr	r2, [r1, #20]
 800bf4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf52:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800bf54:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf56:	688b      	ldr	r3, [r1, #8]
 800bf58:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800bf5a:	680b      	ldr	r3, [r1, #0]
 800bf5c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800bf5e:	690b      	ldr	r3, [r1, #16]
 800bf60:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800bf62:	2301      	movs	r3, #1
}
 800bf64:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800bf66:	6143      	str	r3, [r0, #20]
}
 800bf68:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf6a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf6c:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf72:	4323      	orrs	r3, r4
 800bf74:	e7eb      	b.n	800bf4e <TIM_Base_SetConfig+0x76>
 800bf76:	bf00      	nop
 800bf78:	40012c00 	.word	0x40012c00

0800bf7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800bf7c:	b370      	cbz	r0, 800bfdc <HAL_TIM_Base_Init+0x60>
{
 800bf7e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800bf80:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bf84:	4604      	mov	r4, r0
 800bf86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bf8a:	b313      	cbz	r3, 800bfd2 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf8c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800bf8e:	2302      	movs	r3, #2
 800bf90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf94:	f851 0b04 	ldr.w	r0, [r1], #4
 800bf98:	f7ff ff9e 	bl	800bed8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfa2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800bfa6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800bfaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800bfae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800bfb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800bfbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfc2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800bfc6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800bfca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800bfce:	2000      	movs	r0, #0
}
 800bfd0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800bfd2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800bfd6:	f7ff fe8f 	bl	800bcf8 <HAL_TIM_Base_MspInit>
 800bfda:	e7d7      	b.n	800bf8c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800bfdc:	2001      	movs	r0, #1
}
 800bfde:	4770      	bx	lr

0800bfe0 <HAL_TIMEx_CommutCallback>:
 800bfe0:	4770      	bx	lr
 800bfe2:	bf00      	nop

0800bfe4 <HAL_TIMEx_BreakCallback>:
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop

0800bfe8 <HAL_TIMEx_Break2Callback>:
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop

0800bfec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfec:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfee:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff6:	e842 3100 	strex	r1, r3, [r2]
 800bffa:	2900      	cmp	r1, #0
 800bffc:	d1f7      	bne.n	800bfee <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffe:	f102 0308 	add.w	r3, r2, #8
 800c002:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c006:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00a:	f102 0c08 	add.w	ip, r2, #8
 800c00e:	e84c 3100 	strex	r1, r3, [ip]
 800c012:	2900      	cmp	r1, #0
 800c014:	d1f3      	bne.n	800bffe <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c016:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d005      	beq.n	800c028 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c01c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800c01e:	2220      	movs	r2, #32
 800c020:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c022:	6643      	str	r3, [r0, #100]	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c024:	6603      	str	r3, [r0, #96]	; 0x60
}
 800c026:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c028:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c02c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c030:	e842 3100 	strex	r1, r3, [r2]
 800c034:	2900      	cmp	r1, #0
 800c036:	d0f1      	beq.n	800c01c <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	e852 3f00 	ldrex	r3, [r2]
 800c03c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c040:	e842 3100 	strex	r1, r3, [r2]
 800c044:	2900      	cmp	r1, #0
 800c046:	d1ef      	bne.n	800c028 <UART_EndRxTransfer+0x3c>
 800c048:	e7e8      	b.n	800c01c <UART_EndRxTransfer+0x30>
 800c04a:	bf00      	nop

0800c04c <HAL_UART_TxCpltCallback>:
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop

0800c050 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c050:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c052:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800c054:	2300      	movs	r3, #0
 800c056:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c05a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c05e:	f7f6 fbd5 	bl	800280c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c062:	bd08      	pop	{r3, pc}

0800c064 <HAL_UARTEx_RxEventCallback>:
}
 800c064:	4770      	bx	lr
 800c066:	bf00      	nop

0800c068 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c068:	6803      	ldr	r3, [r0, #0]
 800c06a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c06c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c06e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 800c072:	ea12 0f0c 	tst.w	r2, ip
{
 800c076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c07a:	689e      	ldr	r6, [r3, #8]
{
 800c07c:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800c07e:	d14e      	bne.n	800c11e <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c080:	0695      	lsls	r5, r2, #26
 800c082:	d502      	bpl.n	800c08a <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c084:	068f      	lsls	r7, r1, #26
 800c086:	f100 80c8 	bmi.w	800c21a <HAL_UART_IRQHandler+0x1b2>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c08a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800c08c:	2801      	cmp	r0, #1
 800c08e:	d024      	beq.n	800c0da <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c090:	02d0      	lsls	r0, r2, #11
 800c092:	d502      	bpl.n	800c09a <HAL_UART_IRQHandler+0x32>
 800c094:	0277      	lsls	r7, r6, #9
 800c096:	f100 80c5 	bmi.w	800c224 <HAL_UART_IRQHandler+0x1bc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c09a:	0616      	lsls	r6, r2, #24
 800c09c:	d414      	bmi.n	800c0c8 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c09e:	0650      	lsls	r0, r2, #25
 800c0a0:	d501      	bpl.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
 800c0a2:	064a      	lsls	r2, r1, #25
 800c0a4:	d401      	bmi.n	800c0aa <HAL_UART_IRQHandler+0x42>
}
 800c0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0aa:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b2:	e843 2100 	strex	r1, r2, [r3]
 800c0b6:	2900      	cmp	r1, #0
 800c0b8:	d1f7      	bne.n	800c0aa <HAL_UART_IRQHandler+0x42>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0ba:	2320      	movs	r3, #32
 800c0bc:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c0be:	66a1      	str	r1, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f7ff ffc3 	bl	800c04c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0c6:	e7ee      	b.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c0c8:	060d      	lsls	r5, r1, #24
 800c0ca:	d5e8      	bpl.n	800c09e <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 800c0cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0e9      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 800c0d2:	4620      	mov	r0, r4
}
 800c0d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800c0d8:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c0da:	06d5      	lsls	r5, r2, #27
 800c0dc:	d5d8      	bpl.n	800c090 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c0de:	06c8      	lsls	r0, r1, #27
 800c0e0:	d5d6      	bpl.n	800c090 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0e2:	2210      	movs	r2, #16
 800c0e4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0e6:	689a      	ldr	r2, [r3, #8]
 800c0e8:	0657      	lsls	r7, r2, #25
 800c0ea:	f140 80ae 	bpl.w	800c24a <HAL_UART_IRQHandler+0x1e2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0ee:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c0f0:	6801      	ldr	r1, [r0, #0]
 800c0f2:	684a      	ldr	r2, [r1, #4]
 800c0f4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	d0d5      	beq.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0fa:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 800c0fe:	4295      	cmp	r5, r2
 800c100:	d9d1      	bls.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 800c102:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c106:	680a      	ldr	r2, [r1, #0]
 800c108:	0696      	lsls	r6, r2, #26
 800c10a:	f140 80d2 	bpl.w	800c2b2 <HAL_UART_IRQHandler+0x24a>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c10e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800c112:	1ae9      	subs	r1, r5, r3
 800c114:	4620      	mov	r0, r4
 800c116:	b289      	uxth	r1, r1
 800c118:	f7ff ffa4 	bl	800c064 <HAL_UARTEx_RxEventCallback>
 800c11c:	e7c3      	b.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c11e:	487f      	ldr	r0, [pc, #508]	; (800c31c <HAL_UART_IRQHandler+0x2b4>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c120:	f006 0701 	and.w	r7, r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c124:	4008      	ands	r0, r1
 800c126:	4338      	orrs	r0, r7
 800c128:	d0af      	beq.n	800c08a <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c12a:	07d6      	lsls	r6, r2, #31
 800c12c:	461d      	mov	r5, r3
 800c12e:	d509      	bpl.n	800c144 <HAL_UART_IRQHandler+0xdc>
 800c130:	05c8      	lsls	r0, r1, #23
 800c132:	d507      	bpl.n	800c144 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c134:	2001      	movs	r0, #1
 800c136:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c138:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c13c:	f040 0001 	orr.w	r0, r0, #1
 800c140:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c144:	0796      	lsls	r6, r2, #30
 800c146:	d563      	bpl.n	800c210 <HAL_UART_IRQHandler+0x1a8>
 800c148:	b18f      	cbz	r7, 800c16e <HAL_UART_IRQHandler+0x106>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c14a:	2002      	movs	r0, #2
 800c14c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c14e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c152:	f040 0004 	orr.w	r0, r0, #4
 800c156:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c15a:	0750      	lsls	r0, r2, #29
 800c15c:	d507      	bpl.n	800c16e <HAL_UART_IRQHandler+0x106>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c15e:	2004      	movs	r0, #4
 800c160:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c162:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c166:	f040 0002 	orr.w	r0, r0, #2
 800c16a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c16e:	0710      	lsls	r0, r2, #28
 800c170:	d50b      	bpl.n	800c18a <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c172:	f001 0020 	and.w	r0, r1, #32
 800c176:	4338      	orrs	r0, r7
 800c178:	d007      	beq.n	800c18a <HAL_UART_IRQHandler+0x122>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c17a:	2008      	movs	r0, #8
 800c17c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c17e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c182:	f040 0008 	orr.w	r0, r0, #8
 800c186:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c18a:	0516      	lsls	r6, r2, #20
 800c18c:	d50a      	bpl.n	800c1a4 <HAL_UART_IRQHandler+0x13c>
 800c18e:	0148      	lsls	r0, r1, #5
 800c190:	d508      	bpl.n	800c1a4 <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c192:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c196:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c198:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c19c:	f043 0320 	orr.w	r3, r3, #32
 800c1a0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1a4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f43f af7c 	beq.w	800c0a6 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c1ae:	0693      	lsls	r3, r2, #26
 800c1b0:	d501      	bpl.n	800c1b6 <HAL_UART_IRQHandler+0x14e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c1b2:	068f      	lsls	r7, r1, #26
 800c1b4:	d442      	bmi.n	800c23c <HAL_UART_IRQHandler+0x1d4>
      errorcode = huart->ErrorCode;
 800c1b6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1ba:	68ab      	ldr	r3, [r5, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1bc:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c4:	ea53 0602 	orrs.w	r6, r3, r2
        UART_EndRxTransfer(huart);
 800c1c8:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1ca:	f000 80a2 	beq.w	800c312 <HAL_UART_IRQHandler+0x2aa>
        UART_EndRxTransfer(huart);
 800c1ce:	f7ff ff0d 	bl	800bfec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d2:	68ab      	ldr	r3, [r5, #8]
 800c1d4:	065e      	lsls	r6, r3, #25
 800c1d6:	d52d      	bpl.n	800c234 <HAL_UART_IRQHandler+0x1cc>
 800c1d8:	e000      	b.n	800c1dc <HAL_UART_IRQHandler+0x174>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1da:	6825      	ldr	r5, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1dc:	f105 0308 	add.w	r3, r5, #8
 800c1e0:	e853 3f00 	ldrex	r3, [r3]
 800c1e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e8:	f105 0108 	add.w	r1, r5, #8
 800c1ec:	e841 3200 	strex	r2, r3, [r1]
 800c1f0:	2a00      	cmp	r2, #0
 800c1f2:	d1f2      	bne.n	800c1da <HAL_UART_IRQHandler+0x172>
          if (huart->hdmarx != NULL)
 800c1f4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c1f6:	b1e8      	cbz	r0, 800c234 <HAL_UART_IRQHandler+0x1cc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1f8:	4b49      	ldr	r3, [pc, #292]	; (800c320 <HAL_UART_IRQHandler+0x2b8>)
 800c1fa:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1fc:	f7fd face 	bl	800979c <HAL_DMA_Abort_IT>
 800c200:	2800      	cmp	r0, #0
 800c202:	f43f af50 	beq.w	800c0a6 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c206:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 800c208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c20c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c20e:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c210:	0756      	lsls	r6, r2, #29
 800c212:	d5ac      	bpl.n	800c16e <HAL_UART_IRQHandler+0x106>
 800c214:	2f00      	cmp	r7, #0
 800c216:	d1a2      	bne.n	800c15e <HAL_UART_IRQHandler+0xf6>
 800c218:	e7a9      	b.n	800c16e <HAL_UART_IRQHandler+0x106>
      if (huart->RxISR != NULL)
 800c21a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f47f af59 	bne.w	800c0d4 <HAL_UART_IRQHandler+0x6c>
 800c222:	e740      	b.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c224:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800c228:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c22a:	621a      	str	r2, [r3, #32]
}
 800c22c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800c230:	f000 bc7c 	b.w	800cb2c <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800c234:	4620      	mov	r0, r4
 800c236:	f7f6 fae9 	bl	800280c <HAL_UART_ErrorCallback>
 800c23a:	e734      	b.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 800c23c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d0b9      	beq.n	800c1b6 <HAL_UART_IRQHandler+0x14e>
          huart->RxISR(huart);
 800c242:	4620      	mov	r0, r4
 800c244:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c246:	6825      	ldr	r5, [r4, #0]
 800c248:	e7b5      	b.n	800c1b6 <HAL_UART_IRQHandler+0x14e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c24a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 800c24e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c252:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 800c256:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c258:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 800c25a:	2a00      	cmp	r2, #0
 800c25c:	f43f af23 	beq.w	800c0a6 <HAL_UART_IRQHandler+0x3e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c260:	1a09      	subs	r1, r1, r0
 800c262:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800c264:	2900      	cmp	r1, #0
 800c266:	f43f af1e 	beq.w	800c0a6 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c26e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c272:	e843 2000 	strex	r0, r2, [r3]
 800c276:	2800      	cmp	r0, #0
 800c278:	d1f7      	bne.n	800c26a <HAL_UART_IRQHandler+0x202>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27a:	f103 0208 	add.w	r2, r3, #8
 800c27e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c282:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	f103 0508 	add.w	r5, r3, #8
 800c28a:	e845 2000 	strex	r0, r2, [r5]
 800c28e:	2800      	cmp	r0, #0
 800c290:	d1f3      	bne.n	800c27a <HAL_UART_IRQHandler+0x212>
        huart->RxState = HAL_UART_STATE_READY;
 800c292:	2220      	movs	r2, #32
 800c294:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 800c296:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c298:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c29e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a2:	e843 2000 	strex	r0, r2, [r3]
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d1f7      	bne.n	800c29a <HAL_UART_IRQHandler+0x232>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f7ff feda 	bl	800c064 <HAL_UARTEx_RxEventCallback>
 800c2b0:	e6f9      	b.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b2:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	e843 2100 	strex	r1, r2, [r3]
 800c2be:	2900      	cmp	r1, #0
 800c2c0:	d1f7      	bne.n	800c2b2 <HAL_UART_IRQHandler+0x24a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c2:	f103 0208 	add.w	r2, r3, #8
 800c2c6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2ca:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ce:	f103 0508 	add.w	r5, r3, #8
 800c2d2:	e845 2100 	strex	r1, r2, [r5]
 800c2d6:	2900      	cmp	r1, #0
 800c2d8:	d1f3      	bne.n	800c2c2 <HAL_UART_IRQHandler+0x25a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2da:	f103 0208 	add.w	r2, r3, #8
 800c2de:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e6:	f103 0508 	add.w	r5, r3, #8
 800c2ea:	e845 2100 	strex	r1, r2, [r5]
 800c2ee:	2900      	cmp	r1, #0
 800c2f0:	d1f3      	bne.n	800c2da <HAL_UART_IRQHandler+0x272>
          huart->RxState = HAL_UART_STATE_READY;
 800c2f2:	2220      	movs	r2, #32
 800c2f4:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2f6:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c300:	e843 2100 	strex	r1, r2, [r3]
 800c304:	2900      	cmp	r1, #0
 800c306:	d1f7      	bne.n	800c2f8 <HAL_UART_IRQHandler+0x290>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c308:	f7fd fa22 	bl	8009750 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c30c:	f8b4 5058 	ldrh.w	r5, [r4, #88]	; 0x58
 800c310:	e6fd      	b.n	800c10e <HAL_UART_IRQHandler+0xa6>
        HAL_UART_ErrorCallback(huart);
 800c312:	f7f6 fa7b 	bl	800280c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c316:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 800c31a:	e6c4      	b.n	800c0a6 <HAL_UART_IRQHandler+0x3e>
 800c31c:	04000120 	.word	0x04000120
 800c320:	0800c051 	.word	0x0800c051

0800c324 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c324:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800c326:	2a22      	cmp	r2, #34	; 0x22
{
 800c328:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800c32a:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c32e:	d006      	beq.n	800c33e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c330:	6802      	ldr	r2, [r0, #0]
 800c332:	8b13      	ldrh	r3, [r2, #24]
 800c334:	b29b      	uxth	r3, r3
 800c336:	f043 0308 	orr.w	r3, r3, #8
 800c33a:	8313      	strh	r3, [r2, #24]
  }
}
 800c33c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c33e:	6801      	ldr	r1, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c340:	6d42      	ldr	r2, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c342:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c344:	400b      	ands	r3, r1
 800c346:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800c348:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800c34c:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800c34e:	3b01      	subs	r3, #1
 800c350:	b29b      	uxth	r3, r3
 800c352:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800c356:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800c35a:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 800c35c:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 800c35e:	6542      	str	r2, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1eb      	bne.n	800c33c <UART_RxISR_8BIT+0x18>
 800c364:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c366:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c36a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36e:	e843 2100 	strex	r1, r2, [r3]
 800c372:	2900      	cmp	r1, #0
 800c374:	d1f7      	bne.n	800c366 <UART_RxISR_8BIT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c376:	f103 0208 	add.w	r2, r3, #8
 800c37a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c37e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c382:	f103 0c08 	add.w	ip, r3, #8
 800c386:	e84c 2100 	strex	r1, r2, [ip]
 800c38a:	2900      	cmp	r1, #0
 800c38c:	d1f3      	bne.n	800c376 <UART_RxISR_8BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 800c38e:	2220      	movs	r2, #32
 800c390:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c392:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 800c394:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c396:	2a01      	cmp	r2, #1
 800c398:	d112      	bne.n	800c3c0 <UART_RxISR_8BIT+0x9c>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39a:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a4:	e843 2100 	strex	r1, r2, [r3]
 800c3a8:	2900      	cmp	r1, #0
 800c3aa:	d1f7      	bne.n	800c39c <UART_RxISR_8BIT+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3ac:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3ae:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3b2:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3b4:	bf44      	itt	mi
 800c3b6:	2210      	movmi	r2, #16
 800c3b8:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3ba:	f7ff fe53 	bl	800c064 <HAL_UARTEx_RxEventCallback>
}
 800c3be:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800c3c0:	f7f6 fa18 	bl	80027f4 <HAL_UART_RxCpltCallback>
}
 800c3c4:	bd08      	pop	{r3, pc}
 800c3c6:	bf00      	nop

0800c3c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c3c8:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3ca:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 800c3cc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3d0:	2b22      	cmp	r3, #34	; 0x22
 800c3d2:	d006      	beq.n	800c3e2 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3d4:	6802      	ldr	r2, [r0, #0]
 800c3d6:	8b13      	ldrh	r3, [r2, #24]
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	f043 0308 	orr.w	r3, r3, #8
 800c3de:	8313      	strh	r3, [r2, #24]
  }
}
 800c3e0:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3e2:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c3e4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3e6:	f8b3 c024 	ldrh.w	ip, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800c3ea:	ea02 020c 	and.w	r2, r2, ip
 800c3ee:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 800c3f2:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 800c3f6:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800c3f8:	3a01      	subs	r2, #1
 800c3fa:	b292      	uxth	r2, r2
 800c3fc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800c400:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800c404:	b292      	uxth	r2, r2
 800c406:	2a00      	cmp	r2, #0
 800c408:	d1ea      	bne.n	800c3e0 <UART_RxISR_16BIT+0x18>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c40e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c412:	e843 2100 	strex	r1, r2, [r3]
 800c416:	2900      	cmp	r1, #0
 800c418:	d1f7      	bne.n	800c40a <UART_RxISR_16BIT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41a:	f103 0208 	add.w	r2, r3, #8
 800c41e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c422:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c426:	f103 0c08 	add.w	ip, r3, #8
 800c42a:	e84c 2100 	strex	r1, r2, [ip]
 800c42e:	2900      	cmp	r1, #0
 800c430:	d1f3      	bne.n	800c41a <UART_RxISR_16BIT+0x52>
      huart->RxState = HAL_UART_STATE_READY;
 800c432:	2220      	movs	r2, #32
 800c434:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c436:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 800c438:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c43a:	2a01      	cmp	r2, #1
 800c43c:	d112      	bne.n	800c464 <UART_RxISR_16BIT+0x9c>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c43e:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c440:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c444:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c448:	e843 2100 	strex	r1, r2, [r3]
 800c44c:	2900      	cmp	r1, #0
 800c44e:	d1f7      	bne.n	800c440 <UART_RxISR_16BIT+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c450:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c452:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c456:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c458:	bf44      	itt	mi
 800c45a:	2210      	movmi	r2, #16
 800c45c:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c45e:	f7ff fe01 	bl	800c064 <HAL_UARTEx_RxEventCallback>
}
 800c462:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800c464:	f7f6 f9c6 	bl	80027f4 <HAL_UART_RxCpltCallback>
}
 800c468:	bd08      	pop	{r3, pc}
 800c46a:	bf00      	nop

0800c46c <UART_SetConfig>:
{
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800c470:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c472:	6883      	ldr	r3, [r0, #8]
 800c474:	6900      	ldr	r0, [r0, #16]
 800c476:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c478:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c47a:	4303      	orrs	r3, r0
 800c47c:	430b      	orrs	r3, r1
 800c47e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c480:	4988      	ldr	r1, [pc, #544]	; (800c6a4 <UART_SetConfig+0x238>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c482:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c484:	4029      	ands	r1, r5
 800c486:	430b      	orrs	r3, r1
 800c488:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c48a:	6853      	ldr	r3, [r2, #4]
 800c48c:	68e1      	ldr	r1, [r4, #12]
 800c48e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c492:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c494:	4984      	ldr	r1, [pc, #528]	; (800c6a8 <UART_SetConfig+0x23c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c496:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c498:	428a      	cmp	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c49a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c49c:	6891      	ldr	r1, [r2, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c49e:	d059      	beq.n	800c554 <UART_SetConfig+0xe8>
    tmpreg |= huart->Init.OneBitSampling;
 800c4a0:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c4a2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800c4a6:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c4a8:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4aa:	4980      	ldr	r1, [pc, #512]	; (800c6ac <UART_SetConfig+0x240>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c4ac:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4ae:	428a      	cmp	r2, r1
 800c4b0:	d00b      	beq.n	800c4ca <UART_SetConfig+0x5e>
 800c4b2:	4b7f      	ldr	r3, [pc, #508]	; (800c6b0 <UART_SetConfig+0x244>)
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d02a      	beq.n	800c50e <UART_SetConfig+0xa2>
 800c4b8:	4b7e      	ldr	r3, [pc, #504]	; (800c6b4 <UART_SetConfig+0x248>)
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	f000 80a4 	beq.w	800c608 <UART_SetConfig+0x19c>
        ret = HAL_ERROR;
 800c4c0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800c4c2:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 800c4c4:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
}
 800c4c8:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c4ca:	4b7b      	ldr	r3, [pc, #492]	; (800c6b8 <UART_SetConfig+0x24c>)
 800c4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4d0:	f003 0303 	and.w	r3, r3, #3
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d978      	bls.n	800c5cc <UART_SetConfig+0x160>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c4de:	f000 80d5 	beq.w	800c68c <UART_SetConfig+0x220>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4e2:	f7fe ffb5 	bl	800b450 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d048      	beq.n	800c57c <UART_SetConfig+0x110>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c4ea:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4ec:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c4f0:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800c4f4:	fbb0 f2f2 	udiv	r2, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4f8:	f1a2 0310 	sub.w	r3, r2, #16
 800c4fc:	428b      	cmp	r3, r1
 800c4fe:	d8df      	bhi.n	800c4c0 <UART_SetConfig+0x54>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c500:	6823      	ldr	r3, [r4, #0]
 800c502:	60da      	str	r2, [r3, #12]
  huart->RxISR = NULL;
 800c504:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 800c506:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
 800c50a:	2000      	movs	r0, #0
}
 800c50c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c50e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800c512:	4a6a      	ldr	r2, [pc, #424]	; (800c6bc <UART_SetConfig+0x250>)
 800c514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c518:	f003 030c 	and.w	r3, r3, #12
 800c51c:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c51e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c522:	d059      	beq.n	800c5d8 <UART_SetConfig+0x16c>
    switch (clocksource)
 800c524:	2b08      	cmp	r3, #8
 800c526:	d8cb      	bhi.n	800c4c0 <UART_SetConfig+0x54>
 800c528:	a201      	add	r2, pc, #4	; (adr r2, 800c530 <UART_SetConfig+0xc4>)
 800c52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52e:	bf00      	nop
 800c530:	0800c633 	.word	0x0800c633
 800c534:	0800c4e3 	.word	0x0800c4e3
 800c538:	0800c655 	.word	0x0800c655
 800c53c:	0800c4c1 	.word	0x0800c4c1
 800c540:	0800c627 	.word	0x0800c627
 800c544:	0800c4c1 	.word	0x0800c4c1
 800c548:	0800c4c1 	.word	0x0800c4c1
 800c54c:	0800c4c1 	.word	0x0800c4c1
 800c550:	0800c645 	.word	0x0800c645
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c554:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800c558:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c55a:	4857      	ldr	r0, [pc, #348]	; (800c6b8 <UART_SetConfig+0x24c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c55c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c55e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800c562:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c56a:	d06e      	beq.n	800c64a <UART_SetConfig+0x1de>
 800c56c:	d80b      	bhi.n	800c586 <UART_SetConfig+0x11a>
 800c56e:	b383      	cbz	r3, 800c5d2 <UART_SetConfig+0x166>
 800c570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c574:	d1a4      	bne.n	800c4c0 <UART_SetConfig+0x54>
        pclk = HAL_RCC_GetSysClockFreq();
 800c576:	f7fe fb3b 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800c57a:	b948      	cbnz	r0, 800c590 <UART_SetConfig+0x124>
  huart->RxISR = NULL;
 800c57c:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 800c57e:	e9c4 2219 	strd	r2, r2, [r4, #100]	; 0x64
 800c582:	2000      	movs	r0, #0
}
 800c584:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c58a:	d199      	bne.n	800c4c0 <UART_SetConfig+0x54>
        pclk = (uint32_t) LSE_VALUE;
 800c58c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c590:	6862      	ldr	r2, [r4, #4]
 800c592:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800c596:	4283      	cmp	r3, r0
 800c598:	d892      	bhi.n	800c4c0 <UART_SetConfig+0x54>
 800c59a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800c59e:	d88f      	bhi.n	800c4c0 <UART_SetConfig+0x54>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c5a0:	2500      	movs	r5, #0
 800c5a2:	0853      	lsrs	r3, r2, #1
 800c5a4:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	fbe0 310c 	umlal	r3, r1, r0, ip
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	462b      	mov	r3, r5
 800c5b2:	f7f4 fcd7 	bl	8000f64 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5b6:	4a42      	ldr	r2, [pc, #264]	; (800c6c0 <UART_SetConfig+0x254>)
 800c5b8:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800c5bc:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c5be:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5c0:	f63f af7e 	bhi.w	800c4c0 <UART_SetConfig+0x54>
          huart->Instance->BRR = usartdiv;
 800c5c4:	6822      	ldr	r2, [r4, #0]
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	60d3      	str	r3, [r2, #12]
 800c5ca:	e77a      	b.n	800c4c2 <UART_SetConfig+0x56>
 800c5cc:	4a3d      	ldr	r2, [pc, #244]	; (800c6c4 <UART_SetConfig+0x258>)
 800c5ce:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5d0:	e7a5      	b.n	800c51e <UART_SetConfig+0xb2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5d2:	f7fe ff2b 	bl	800b42c <HAL_RCC_GetPCLK1Freq>
        break;
 800c5d6:	e7d0      	b.n	800c57a <UART_SetConfig+0x10e>
    switch (clocksource)
 800c5d8:	2b08      	cmp	r3, #8
 800c5da:	f63f af71 	bhi.w	800c4c0 <UART_SetConfig+0x54>
 800c5de:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <UART_SetConfig+0x178>)
 800c5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e4:	0800c659 	.word	0x0800c659
 800c5e8:	0800c68d 	.word	0x0800c68d
 800c5ec:	0800c699 	.word	0x0800c699
 800c5f0:	0800c4c1 	.word	0x0800c4c1
 800c5f4:	0800c693 	.word	0x0800c693
 800c5f8:	0800c4c1 	.word	0x0800c4c1
 800c5fc:	0800c4c1 	.word	0x0800c4c1
 800c600:	0800c4c1 	.word	0x0800c4c1
 800c604:	0800c69d 	.word	0x0800c69d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c608:	4b2b      	ldr	r3, [pc, #172]	; (800c6b8 <UART_SetConfig+0x24c>)
 800c60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c60e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c612:	2b20      	cmp	r3, #32
 800c614:	d01b      	beq.n	800c64e <UART_SetConfig+0x1e2>
 800c616:	d80f      	bhi.n	800c638 <UART_SetConfig+0x1cc>
 800c618:	b143      	cbz	r3, 800c62c <UART_SetConfig+0x1c0>
 800c61a:	2b10      	cmp	r3, #16
 800c61c:	f47f af50 	bne.w	800c4c0 <UART_SetConfig+0x54>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c620:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c624:	d035      	beq.n	800c692 <UART_SetConfig+0x226>
        pclk = HAL_RCC_GetSysClockFreq();
 800c626:	f7fe fae3 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
        break;
 800c62a:	e75c      	b.n	800c4e6 <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c62c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c630:	d012      	beq.n	800c658 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c632:	f7fe fefb 	bl	800b42c <HAL_RCC_GetPCLK1Freq>
        break;
 800c636:	e756      	b.n	800c4e6 <UART_SetConfig+0x7a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c638:	2b30      	cmp	r3, #48	; 0x30
 800c63a:	f47f af41 	bne.w	800c4c0 <UART_SetConfig+0x54>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c63e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c642:	d02b      	beq.n	800c69c <UART_SetConfig+0x230>
    switch (clocksource)
 800c644:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c648:	e74f      	b.n	800c4ea <UART_SetConfig+0x7e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c64a:	481f      	ldr	r0, [pc, #124]	; (800c6c8 <UART_SetConfig+0x25c>)
 800c64c:	e7a0      	b.n	800c590 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c64e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c652:	d021      	beq.n	800c698 <UART_SetConfig+0x22c>
        pclk = (uint32_t) HSI_VALUE;
 800c654:	481c      	ldr	r0, [pc, #112]	; (800c6c8 <UART_SetConfig+0x25c>)
 800c656:	e748      	b.n	800c4ea <UART_SetConfig+0x7e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c658:	f7fe fee8 	bl	800b42c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d08d      	beq.n	800c57c <UART_SetConfig+0x110>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c660:	0043      	lsls	r3, r0, #1
 800c662:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c664:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c668:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c66c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c670:	f1a3 0210 	sub.w	r2, r3, #16
 800c674:	428a      	cmp	r2, r1
 800c676:	f63f af23 	bhi.w	800c4c0 <UART_SetConfig+0x54>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c67a:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800c67e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c680:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c682:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c686:	4313      	orrs	r3, r2
 800c688:	60cb      	str	r3, [r1, #12]
 800c68a:	e777      	b.n	800c57c <UART_SetConfig+0x110>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c68c:	f7fe fee0 	bl	800b450 <HAL_RCC_GetPCLK2Freq>
        break;
 800c690:	e7e4      	b.n	800c65c <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 800c692:	f7fe faad 	bl	800abf0 <HAL_RCC_GetSysClockFreq>
        break;
 800c696:	e7e1      	b.n	800c65c <UART_SetConfig+0x1f0>
    switch (clocksource)
 800c698:	4b0c      	ldr	r3, [pc, #48]	; (800c6cc <UART_SetConfig+0x260>)
 800c69a:	e7e2      	b.n	800c662 <UART_SetConfig+0x1f6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c69c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c6a0:	e7df      	b.n	800c662 <UART_SetConfig+0x1f6>
 800c6a2:	bf00      	nop
 800c6a4:	efff69f3 	.word	0xefff69f3
 800c6a8:	40008000 	.word	0x40008000
 800c6ac:	40013800 	.word	0x40013800
 800c6b0:	40004400 	.word	0x40004400
 800c6b4:	40004800 	.word	0x40004800
 800c6b8:	40021000 	.word	0x40021000
 800c6bc:	0801555c 	.word	0x0801555c
 800c6c0:	000ffcff 	.word	0x000ffcff
 800c6c4:	08015558 	.word	0x08015558
 800c6c8:	00f42400 	.word	0x00f42400
 800c6cc:	01e84800 	.word	0x01e84800

0800c6d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c6d2:	07da      	lsls	r2, r3, #31
{
 800c6d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6d6:	d506      	bpl.n	800c6e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6d8:	6801      	ldr	r1, [r0, #0]
 800c6da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c6dc:	684a      	ldr	r2, [r1, #4]
 800c6de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c6e2:	4322      	orrs	r2, r4
 800c6e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6e6:	079c      	lsls	r4, r3, #30
 800c6e8:	d506      	bpl.n	800c6f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6ea:	6801      	ldr	r1, [r0, #0]
 800c6ec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c6ee:	684a      	ldr	r2, [r1, #4]
 800c6f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c6f4:	4322      	orrs	r2, r4
 800c6f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6f8:	0759      	lsls	r1, r3, #29
 800c6fa:	d506      	bpl.n	800c70a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6fc:	6801      	ldr	r1, [r0, #0]
 800c6fe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c700:	684a      	ldr	r2, [r1, #4]
 800c702:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c706:	4322      	orrs	r2, r4
 800c708:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c70a:	071a      	lsls	r2, r3, #28
 800c70c:	d506      	bpl.n	800c71c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c70e:	6801      	ldr	r1, [r0, #0]
 800c710:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c712:	684a      	ldr	r2, [r1, #4]
 800c714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c718:	4322      	orrs	r2, r4
 800c71a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c71c:	06dc      	lsls	r4, r3, #27
 800c71e:	d506      	bpl.n	800c72e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c720:	6801      	ldr	r1, [r0, #0]
 800c722:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c724:	688a      	ldr	r2, [r1, #8]
 800c726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c72a:	4322      	orrs	r2, r4
 800c72c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c72e:	0699      	lsls	r1, r3, #26
 800c730:	d506      	bpl.n	800c740 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c732:	6801      	ldr	r1, [r0, #0]
 800c734:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c736:	688a      	ldr	r2, [r1, #8]
 800c738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c73c:	4322      	orrs	r2, r4
 800c73e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c740:	065a      	lsls	r2, r3, #25
 800c742:	d509      	bpl.n	800c758 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c744:	6801      	ldr	r1, [r0, #0]
 800c746:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c748:	684a      	ldr	r2, [r1, #4]
 800c74a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c74e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c750:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c754:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c756:	d00b      	beq.n	800c770 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c758:	061b      	lsls	r3, r3, #24
 800c75a:	d506      	bpl.n	800c76a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c75c:	6802      	ldr	r2, [r0, #0]
 800c75e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c760:	6853      	ldr	r3, [r2, #4]
 800c762:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c766:	430b      	orrs	r3, r1
 800c768:	6053      	str	r3, [r2, #4]
}
 800c76a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c76e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c770:	684a      	ldr	r2, [r1, #4]
 800c772:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c774:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c778:	4322      	orrs	r2, r4
 800c77a:	604a      	str	r2, [r1, #4]
 800c77c:	e7ec      	b.n	800c758 <UART_AdvFeatureConfig+0x88>
 800c77e:	bf00      	nop

0800c780 <UART_WaitOnFlagUntilTimeout>:
{
 800c780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c784:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c788:	6805      	ldr	r5, [r0, #0]
{
 800c78a:	4681      	mov	r9, r0
 800c78c:	460f      	mov	r7, r1
 800c78e:	4616      	mov	r6, r2
 800c790:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c792:	e002      	b.n	800c79a <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 800c794:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c798:	d10a      	bne.n	800c7b0 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c79a:	69ec      	ldr	r4, [r5, #28]
 800c79c:	ea37 0404 	bics.w	r4, r7, r4
 800c7a0:	bf0c      	ite	eq
 800c7a2:	2401      	moveq	r4, #1
 800c7a4:	2400      	movne	r4, #0
 800c7a6:	42b4      	cmp	r4, r6
 800c7a8:	d0f4      	beq.n	800c794 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800c7aa:	2000      	movs	r0, #0
}
 800c7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7b0:	f7fc f8d4 	bl	800895c <HAL_GetTick>
 800c7b4:	eba0 000a 	sub.w	r0, r0, sl
 800c7b8:	4540      	cmp	r0, r8
 800c7ba:	d82d      	bhi.n	800c818 <UART_WaitOnFlagUntilTimeout+0x98>
 800c7bc:	f1b8 0f00 	cmp.w	r8, #0
 800c7c0:	d02a      	beq.n	800c818 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c7c2:	f8d9 5000 	ldr.w	r5, [r9]
 800c7c6:	682a      	ldr	r2, [r5, #0]
 800c7c8:	0751      	lsls	r1, r2, #29
 800c7ca:	462b      	mov	r3, r5
 800c7cc:	d5e5      	bpl.n	800c79a <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7ce:	69ea      	ldr	r2, [r5, #28]
 800c7d0:	0512      	lsls	r2, r2, #20
 800c7d2:	d5e2      	bpl.n	800c79a <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c7d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c7d8:	622a      	str	r2, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7da:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c7de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e2:	e843 2100 	strex	r1, r2, [r3]
 800c7e6:	2900      	cmp	r1, #0
 800c7e8:	d1f7      	bne.n	800c7da <UART_WaitOnFlagUntilTimeout+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ea:	f103 0208 	add.w	r2, r3, #8
 800c7ee:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7f2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f6:	f103 0008 	add.w	r0, r3, #8
 800c7fa:	e840 2100 	strex	r1, r2, [r0]
 800c7fe:	2900      	cmp	r1, #0
 800c800:	d1f3      	bne.n	800c7ea <UART_WaitOnFlagUntilTimeout+0x6a>
          huart->gState = HAL_UART_STATE_READY;
 800c802:	2320      	movs	r3, #32
 800c804:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800c808:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c80c:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          return HAL_TIMEOUT;
 800c810:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c812:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 800c816:	e7c9      	b.n	800c7ac <UART_WaitOnFlagUntilTimeout+0x2c>
 800c818:	f8d9 3000 	ldr.w	r3, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c820:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c824:	e843 2100 	strex	r1, r2, [r3]
 800c828:	2900      	cmp	r1, #0
 800c82a:	d1f7      	bne.n	800c81c <UART_WaitOnFlagUntilTimeout+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	f103 0208 	add.w	r2, r3, #8
 800c830:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c834:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c838:	f103 0008 	add.w	r0, r3, #8
 800c83c:	e840 2100 	strex	r1, r2, [r0]
 800c840:	2900      	cmp	r1, #0
 800c842:	d1f3      	bne.n	800c82c <UART_WaitOnFlagUntilTimeout+0xac>
        huart->gState = HAL_UART_STATE_READY;
 800c844:	2320      	movs	r3, #32
 800c846:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800c84a:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c84e:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 800c852:	2003      	movs	r0, #3
 800c854:	e7aa      	b.n	800c7ac <UART_WaitOnFlagUntilTimeout+0x2c>
 800c856:	bf00      	nop

0800c858 <HAL_UART_Transmit>:
{
 800c858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c85c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800c85e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800c860:	2820      	cmp	r0, #32
{
 800c862:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800c864:	d149      	bne.n	800c8fa <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800c866:	460d      	mov	r5, r1
 800c868:	2900      	cmp	r1, #0
 800c86a:	d042      	beq.n	800c8f2 <HAL_UART_Transmit+0x9a>
 800c86c:	4617      	mov	r7, r2
 800c86e:	2a00      	cmp	r2, #0
 800c870:	d03f      	beq.n	800c8f2 <HAL_UART_Transmit+0x9a>
 800c872:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800c874:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d03e      	beq.n	800c8fa <HAL_UART_Transmit+0xa2>
 800c87c:	2301      	movs	r3, #1
 800c87e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c882:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c886:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c888:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c88c:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 800c88e:	f7fc f865 	bl	800895c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c892:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800c894:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 800c89c:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    tickstart = HAL_GetTick();
 800c8a0:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8a2:	d02e      	beq.n	800c902 <HAL_UART_Transmit+0xaa>
    while (huart->TxXferCount > 0U)
 800c8a4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800c8a8:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800c8aa:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800c8ac:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800c8b0:	b973      	cbnz	r3, 800c8d0 <HAL_UART_Transmit+0x78>
 800c8b2:	e030      	b.n	800c916 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c8b4:	6823      	ldr	r3, [r4, #0]
 800c8b6:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c8ba:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800c8bc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c8c0:	3a01      	subs	r2, #1
 800c8c2:	b292      	uxth	r2, r2
 800c8c4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c8c8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c8cc:	b292      	uxth	r2, r2
 800c8ce:	b312      	cbz	r2, 800c916 <HAL_UART_Transmit+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c8d0:	9600      	str	r6, [sp, #0]
 800c8d2:	4643      	mov	r3, r8
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2180      	movs	r1, #128	; 0x80
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f7ff ff51 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800c8de:	b9b0      	cbnz	r0, 800c90e <HAL_UART_Transmit+0xb6>
      if (pdata8bits == NULL)
 800c8e0:	2d00      	cmp	r5, #0
 800c8e2:	d1e7      	bne.n	800c8b4 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c8e4:	f839 3b02 	ldrh.w	r3, [r9], #2
 800c8e8:	6822      	ldr	r2, [r4, #0]
 800c8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ee:	8513      	strh	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800c8f0:	e7e4      	b.n	800c8bc <HAL_UART_Transmit+0x64>
      return  HAL_ERROR;
 800c8f2:	2001      	movs	r0, #1
}
 800c8f4:	b003      	add	sp, #12
 800c8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800c8fa:	2002      	movs	r0, #2
}
 800c8fc:	b003      	add	sp, #12
 800c8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1cd      	bne.n	800c8a4 <HAL_UART_Transmit+0x4c>
 800c908:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800c90a:	461d      	mov	r5, r3
 800c90c:	e7ca      	b.n	800c8a4 <HAL_UART_Transmit+0x4c>
        return HAL_TIMEOUT;
 800c90e:	2003      	movs	r0, #3
}
 800c910:	b003      	add	sp, #12
 800c912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c916:	9600      	str	r6, [sp, #0]
 800c918:	4643      	mov	r3, r8
 800c91a:	2200      	movs	r2, #0
 800c91c:	2140      	movs	r1, #64	; 0x40
 800c91e:	4620      	mov	r0, r4
 800c920:	f7ff ff2e 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800c924:	2800      	cmp	r0, #0
 800c926:	d1f2      	bne.n	800c90e <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800c928:	2320      	movs	r3, #32
 800c92a:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 800c92c:	e7e2      	b.n	800c8f4 <HAL_UART_Transmit+0x9c>
 800c92e:	bf00      	nop

0800c930 <UART_CheckIdleState>:
{
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c934:	2600      	movs	r6, #0
{
 800c936:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c938:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800c93c:	f7fc f80e 	bl	800895c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c940:	6823      	ldr	r3, [r4, #0]
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800c946:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c948:	d40c      	bmi.n	800c964 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	075b      	lsls	r3, r3, #29
 800c94e:	d418      	bmi.n	800c982 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c950:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800c952:	2220      	movs	r2, #32
  return HAL_OK;
 800c954:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800c956:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800c958:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c95c:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c95e:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c960:	b002      	add	sp, #8
 800c962:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	4632      	mov	r2, r6
 800c96c:	4603      	mov	r3, r0
 800c96e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c972:	4620      	mov	r0, r4
 800c974:	f7ff ff04 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800c978:	b978      	cbnz	r0, 800c99a <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	075b      	lsls	r3, r3, #29
 800c980:	d5e6      	bpl.n	800c950 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c982:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c986:	9300      	str	r3, [sp, #0]
 800c988:	2200      	movs	r2, #0
 800c98a:	462b      	mov	r3, r5
 800c98c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c990:	4620      	mov	r0, r4
 800c992:	f7ff fef5 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800c996:	2800      	cmp	r0, #0
 800c998:	d0da      	beq.n	800c950 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800c99a:	2003      	movs	r0, #3
}
 800c99c:	b002      	add	sp, #8
 800c99e:	bd70      	pop	{r4, r5, r6, pc}

0800c9a0 <HAL_UART_Init>:
  if (huart == NULL)
 800c9a0:	b370      	cbz	r0, 800ca00 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c9a2:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800c9a4:	b510      	push	{r4, lr}
 800c9a6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800c9a8:	b32b      	cbz	r3, 800c9f6 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 800c9aa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c9ac:	2324      	movs	r3, #36	; 0x24
 800c9ae:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800c9b0:	6813      	ldr	r3, [r2, #0]
 800c9b2:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9b6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800c9b8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9ba:	f7ff fd57 	bl	800c46c <UART_SetConfig>
 800c9be:	2801      	cmp	r0, #1
 800c9c0:	d017      	beq.n	800c9f2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c4:	b98b      	cbnz	r3, 800c9ea <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	685a      	ldr	r2, [r3, #4]
 800c9ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c9ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9d0:	689a      	ldr	r2, [r3, #8]
 800c9d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c9d6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800c9de:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800c9e0:	601a      	str	r2, [r3, #0]
}
 800c9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800c9e6:	f7ff bfa3 	b.w	800c930 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f7ff fe70 	bl	800c6d0 <UART_AdvFeatureConfig>
 800c9f0:	e7e9      	b.n	800c9c6 <HAL_UART_Init+0x26>
}
 800c9f2:	2001      	movs	r0, #1
 800c9f4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800c9f6:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800c9fa:	f7f9 ff91 	bl	8006920 <HAL_UART_MspInit>
 800c9fe:	e7d4      	b.n	800c9aa <HAL_UART_Init+0xa>
}
 800ca00:	2001      	movs	r0, #1
 800ca02:	4770      	bx	lr

0800ca04 <UART_Start_Receive_IT>:
{
 800ca04:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 800ca06:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800ca08:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 800ca0a:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800ca0c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 800ca10:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 800ca14:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ca18:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 800ca1a:	d04e      	beq.n	800caba <UART_Start_Receive_IT+0xb6>
 800ca1c:	bb74      	cbnz	r4, 800ca7c <UART_Start_Receive_IT+0x78>
 800ca1e:	6903      	ldr	r3, [r0, #16]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	bf14      	ite	ne
 800ca24:	237f      	movne	r3, #127	; 0x7f
 800ca26:	23ff      	moveq	r3, #255	; 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca28:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca2a:	2122      	movs	r1, #34	; 0x22
 800ca2c:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca2e:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
  UART_MASK_COMPUTATION(huart);
 800ca32:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca36:	67c1      	str	r1, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca38:	f102 0308 	add.w	r3, r2, #8
 800ca3c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca40:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca44:	f102 0408 	add.w	r4, r2, #8
 800ca48:	e844 3100 	strex	r1, r3, [r4]
 800ca4c:	2900      	cmp	r1, #0
 800ca4e:	d1f3      	bne.n	800ca38 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca50:	6883      	ldr	r3, [r0, #8]
 800ca52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca56:	6903      	ldr	r3, [r0, #16]
 800ca58:	d019      	beq.n	800ca8e <UART_Start_Receive_IT+0x8a>
    huart->RxISR = UART_RxISR_8BIT;
 800ca5a:	4c1e      	ldr	r4, [pc, #120]	; (800cad4 <UART_Start_Receive_IT+0xd0>)
 800ca5c:	6644      	str	r4, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800ca5e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca62:	b1cb      	cbz	r3, 800ca98 <UART_Start_Receive_IT+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca64:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ca68:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6c:	e842 3100 	strex	r1, r3, [r2]
 800ca70:	2900      	cmp	r1, #0
 800ca72:	d1f7      	bne.n	800ca64 <UART_Start_Receive_IT+0x60>
}
 800ca74:	2000      	movs	r0, #0
 800ca76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca7a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800ca7c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800ca80:	d1d2      	bne.n	800ca28 <UART_Start_Receive_IT+0x24>
 800ca82:	6903      	ldr	r3, [r0, #16]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	bf0c      	ite	eq
 800ca88:	237f      	moveq	r3, #127	; 0x7f
 800ca8a:	233f      	movne	r3, #63	; 0x3f
 800ca8c:	e7cc      	b.n	800ca28 <UART_Start_Receive_IT+0x24>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca8e:	b9db      	cbnz	r3, 800cac8 <UART_Start_Receive_IT+0xc4>
 800ca90:	4911      	ldr	r1, [pc, #68]	; (800cad8 <UART_Start_Receive_IT+0xd4>)
 800ca92:	6641      	str	r1, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800ca94:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca98:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ca9c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa0:	e842 3100 	strex	r1, r3, [r2]
 800caa4:	2900      	cmp	r1, #0
 800caa6:	d0e5      	beq.n	800ca74 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa8:	e852 3f00 	ldrex	r3, [r2]
 800caac:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab0:	e842 3100 	strex	r1, r3, [r2]
 800cab4:	2900      	cmp	r1, #0
 800cab6:	d1ef      	bne.n	800ca98 <UART_Start_Receive_IT+0x94>
 800cab8:	e7dc      	b.n	800ca74 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 800caba:	6902      	ldr	r2, [r0, #16]
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	f240 13ff 	movw	r3, #511	; 0x1ff
 800cac2:	bf18      	it	ne
 800cac4:	23ff      	movne	r3, #255	; 0xff
 800cac6:	e7af      	b.n	800ca28 <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 800cac8:	4b02      	ldr	r3, [pc, #8]	; (800cad4 <UART_Start_Receive_IT+0xd0>)
 800caca:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 800cacc:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cad0:	e7c8      	b.n	800ca64 <UART_Start_Receive_IT+0x60>
 800cad2:	bf00      	nop
 800cad4:	0800c325 	.word	0x0800c325
 800cad8:	0800c3c9 	.word	0x0800c3c9

0800cadc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800cadc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800cade:	2b20      	cmp	r3, #32
 800cae0:	d120      	bne.n	800cb24 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800cae2:	b1e9      	cbz	r1, 800cb20 <HAL_UART_Receive_IT+0x44>
 800cae4:	b1e2      	cbz	r2, 800cb20 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 800cae6:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800caea:	2b01      	cmp	r3, #1
 800caec:	d01a      	beq.n	800cb24 <HAL_UART_Receive_IT+0x48>
{
 800caee:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800caf0:	4b0d      	ldr	r3, [pc, #52]	; (800cb28 <HAL_UART_Receive_IT+0x4c>)
 800caf2:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800caf4:	2501      	movs	r5, #1
 800caf6:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cafa:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cafc:	f04f 0500 	mov.w	r5, #0
 800cb00:	6605      	str	r5, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb02:	d00a      	beq.n	800cb1a <HAL_UART_Receive_IT+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb04:	6863      	ldr	r3, [r4, #4]
 800cb06:	021b      	lsls	r3, r3, #8
 800cb08:	d507      	bpl.n	800cb1a <HAL_UART_Receive_IT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0a:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb12:	e844 3500 	strex	r5, r3, [r4]
 800cb16:	2d00      	cmp	r5, #0
 800cb18:	d1f7      	bne.n	800cb0a <HAL_UART_Receive_IT+0x2e>
}
 800cb1a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800cb1c:	f7ff bf72 	b.w	800ca04 <UART_Start_Receive_IT>
      return HAL_ERROR;
 800cb20:	2001      	movs	r0, #1
 800cb22:	4770      	bx	lr
    return HAL_BUSY;
 800cb24:	2002      	movs	r0, #2
}
 800cb26:	4770      	bx	lr
 800cb28:	40008000 	.word	0x40008000

0800cb2c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop

0800cb30 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800cb34:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb36:	fa95 f2a5 	rbit	r2, r5
  return __builtin_clz(value);
 800cb3a:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800cb3e:	fa35 f302 	lsrs.w	r3, r5, r2
 800cb42:	f000 80a1 	beq.w	800cc88 <LL_GPIO_Init+0x158>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800cb46:	f04f 0c01 	mov.w	ip, #1
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800cb4a:	f04f 0e03 	mov.w	lr, #3
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cb4e:	43ef      	mvns	r7, r5
 800cb50:	e01e      	b.n	800cb90 <LL_GPIO_Init+0x60>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800cb52:	f8d0 8000 	ldr.w	r8, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb56:	fa93 f9a3 	rbit	r9, r3
  if (value == 0U)
 800cb5a:	f1b9 0f00 	cmp.w	r9, #0
 800cb5e:	d007      	beq.n	800cb70 <LL_GPIO_Init+0x40>
  return __builtin_clz(value);
 800cb60:	fab9 f989 	clz	r9, r9
 800cb64:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800cb68:	fa0e f909 	lsl.w	r9, lr, r9
 800cb6c:	ea28 0809 	bic.w	r8, r8, r9
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb70:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 808a 	beq.w	800cc8e <LL_GPIO_Init+0x15e>
  return __builtin_clz(value);
 800cb7a:	fab3 f383 	clz	r3, r3
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	409c      	lsls	r4, r3
 800cb82:	ea44 0408 	orr.w	r4, r4, r8
 800cb86:	6004      	str	r4, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800cb88:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800cb8a:	fa35 f302 	lsrs.w	r3, r5, r2
 800cb8e:	d07b      	beq.n	800cc88 <LL_GPIO_Init+0x158>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800cb90:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 800cb94:	402b      	ands	r3, r5
 800cb96:	d0f7      	beq.n	800cb88 <LL_GPIO_Init+0x58>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800cb98:	684c      	ldr	r4, [r1, #4]
 800cb9a:	f104 38ff 	add.w	r8, r4, #4294967295
 800cb9e:	f1b8 0f01 	cmp.w	r8, #1
 800cba2:	d945      	bls.n	800cc30 <LL_GPIO_Init+0x100>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800cba4:	f8d1 9010 	ldr.w	r9, [r1, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800cba8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbac:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800cbb0:	f1b8 0f00 	cmp.w	r8, #0
 800cbb4:	d007      	beq.n	800cbc6 <LL_GPIO_Init+0x96>
  return __builtin_clz(value);
 800cbb6:	fab8 f888 	clz	r8, r8
 800cbba:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800cbbe:	fa0e f808 	lsl.w	r8, lr, r8
 800cbc2:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbc6:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800cbca:	f1b8 0f00 	cmp.w	r8, #0
 800cbce:	d060      	beq.n	800cc92 <LL_GPIO_Init+0x162>
  return __builtin_clz(value);
 800cbd0:	fab8 f888 	clz	r8, r8
 800cbd4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800cbd8:	fa09 f908 	lsl.w	r9, r9, r8
 800cbdc:	ea49 090a 	orr.w	r9, r9, sl
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800cbe0:	2c02      	cmp	r4, #2
 800cbe2:	f8c0 900c 	str.w	r9, [r0, #12]
 800cbe6:	d1b4      	bne.n	800cb52 <LL_GPIO_Init+0x22>
        if (currentpin < LL_GPIO_PIN_8)
 800cbe8:	2bff      	cmp	r3, #255	; 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cbea:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 800cbee:	d853      	bhi.n	800cc98 <LL_GPIO_Init+0x168>
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800cbf0:	f8d0 a020 	ldr.w	sl, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbf4:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800cbf8:	f1b8 0f00 	cmp.w	r8, #0
 800cbfc:	d008      	beq.n	800cc10 <LL_GPIO_Init+0xe0>
  return __builtin_clz(value);
 800cbfe:	fab8 f888 	clz	r8, r8
 800cc02:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800cc06:	260f      	movs	r6, #15
 800cc08:	fa06 f808 	lsl.w	r8, r6, r8
 800cc0c:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc10:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800cc14:	f1b8 0f00 	cmp.w	r8, #0
 800cc18:	d063      	beq.n	800cce2 <LL_GPIO_Init+0x1b2>
  return __builtin_clz(value);
 800cc1a:	fab8 f888 	clz	r8, r8
 800cc1e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800cc22:	fa09 f908 	lsl.w	r9, r9, r8
 800cc26:	ea49 090a 	orr.w	r9, r9, sl
 800cc2a:	f8c0 9020 	str.w	r9, [r0, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800cc2e:	e790      	b.n	800cb52 <LL_GPIO_Init+0x22>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800cc30:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800cc34:	f8d0 a008 	ldr.w	sl, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc38:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800cc3c:	f1b8 0f00 	cmp.w	r8, #0
 800cc40:	d007      	beq.n	800cc52 <LL_GPIO_Init+0x122>
  return __builtin_clz(value);
 800cc42:	fab8 f888 	clz	r8, r8
 800cc46:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800cc4a:	fa0e f808 	lsl.w	r8, lr, r8
 800cc4e:	ea2a 0a08 	bic.w	sl, sl, r8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc52:	fa93 f8a3 	rbit	r8, r3
  if (value == 0U)
 800cc56:	f1b8 0f00 	cmp.w	r8, #0
 800cc5a:	d03f      	beq.n	800ccdc <LL_GPIO_Init+0x1ac>
  return __builtin_clz(value);
 800cc5c:	fab8 f888 	clz	r8, r8
 800cc60:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800cc64:	fa09 f908 	lsl.w	r9, r9, r8
 800cc68:	ea49 090a 	orr.w	r9, r9, sl
 800cc6c:	f8c0 9008 	str.w	r9, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cc70:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800cc74:	68ce      	ldr	r6, [r1, #12]
 800cc76:	ea07 0808 	and.w	r8, r7, r8
 800cc7a:	fb06 f905 	mul.w	r9, r6, r5
 800cc7e:	ea48 0809 	orr.w	r8, r8, r9
 800cc82:	f8c0 8004 	str.w	r8, [r0, #4]
}
 800cc86:	e78d      	b.n	800cba4 <LL_GPIO_Init+0x74>
  }

  return (SUCCESS);
}
 800cc88:	2000      	movs	r0, #0
 800cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8e:	2340      	movs	r3, #64	; 0x40
 800cc90:	e776      	b.n	800cb80 <LL_GPIO_Init+0x50>
 800cc92:	f04f 0840 	mov.w	r8, #64	; 0x40
 800cc96:	e79f      	b.n	800cbd8 <LL_GPIO_Init+0xa8>
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800cc98:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800cc9c:	ea4f 2813 	mov.w	r8, r3, lsr #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cca0:	fa98 fba8 	rbit	fp, r8
  if (value == 0U)
 800cca4:	f1bb 0f00 	cmp.w	fp, #0
 800cca8:	d008      	beq.n	800ccbc <LL_GPIO_Init+0x18c>
  return __builtin_clz(value);
 800ccaa:	fabb fb8b 	clz	fp, fp
 800ccae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800ccb2:	260f      	movs	r6, #15
 800ccb4:	fa06 fb0b 	lsl.w	fp, r6, fp
 800ccb8:	ea2a 0a0b 	bic.w	sl, sl, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccbc:	fa98 f8a8 	rbit	r8, r8
  if (value == 0U)
 800ccc0:	f1b8 0f00 	cmp.w	r8, #0
 800ccc4:	d010      	beq.n	800cce8 <LL_GPIO_Init+0x1b8>
  return __builtin_clz(value);
 800ccc6:	fab8 f888 	clz	r8, r8
 800ccca:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800ccce:	fa09 f908 	lsl.w	r9, r9, r8
 800ccd2:	ea49 090a 	orr.w	r9, r9, sl
 800ccd6:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800ccda:	e73a      	b.n	800cb52 <LL_GPIO_Init+0x22>
 800ccdc:	f04f 0840 	mov.w	r8, #64	; 0x40
 800cce0:	e7c0      	b.n	800cc64 <LL_GPIO_Init+0x134>
 800cce2:	f04f 0880 	mov.w	r8, #128	; 0x80
 800cce6:	e79c      	b.n	800cc22 <LL_GPIO_Init+0xf2>
 800cce8:	f04f 0880 	mov.w	r8, #128	; 0x80
 800ccec:	e7ef      	b.n	800ccce <LL_GPIO_Init+0x19e>
 800ccee:	bf00      	nop

0800ccf0 <RCC_GetSystemClockFreq>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ccf0:	4b3b      	ldr	r3, [pc, #236]	; (800cde0 <RCC_GetSystemClockFreq+0xf0>)
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	f003 030c 	and.w	r3, r3, #12
static uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800ccf8:	2b0c      	cmp	r3, #12
 800ccfa:	d808      	bhi.n	800cd0e <RCC_GetSystemClockFreq+0x1e>
 800ccfc:	e8df f003 	tbb	[pc, r3]
 800cd00:	07070707 	.word	0x07070707
 800cd04:	07070736 	.word	0x07070736
 800cd08:	07070738 	.word	0x07070738
 800cd0c:	14          	.byte	0x14
 800cd0d:	00          	.byte	0x00
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800cd0e:	4a34      	ldr	r2, [pc, #208]	; (800cde0 <RCC_GetSystemClockFreq+0xf0>)
 800cd10:	6813      	ldr	r3, [r2, #0]
 800cd12:	f013 0308 	ands.w	r3, r3, #8
 800cd16:	d11f      	bne.n	800cd58 <RCC_GetSystemClockFreq+0x68>
 800cd18:	6811      	ldr	r1, [r2, #0]
 800cd1a:	0709      	lsls	r1, r1, #28
 800cd1c:	d533      	bpl.n	800cd86 <RCC_GetSystemClockFreq+0x96>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800cd1e:	6812      	ldr	r2, [r2, #0]
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
      break;

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800cd20:	4a30      	ldr	r2, [pc, #192]	; (800cde4 <RCC_GetSystemClockFreq+0xf4>)
 800cd22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd26:	4770      	bx	lr
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800cd28:	4a2d      	ldr	r2, [pc, #180]	; (800cde0 <RCC_GetSystemClockFreq+0xf0>)
 800cd2a:	68d3      	ldr	r3, [r2, #12]
 800cd2c:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 800cd30:	2b02      	cmp	r3, #2
 800cd32:	d04a      	beq.n	800cdca <RCC_GetSystemClockFreq+0xda>
 800cd34:	2b03      	cmp	r3, #3
 800cd36:	d033      	beq.n	800cda0 <RCC_GetSystemClockFreq+0xb0>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800cd38:	6813      	ldr	r3, [r2, #0]
 800cd3a:	f013 0308 	ands.w	r3, r3, #8
 800cd3e:	d02a      	beq.n	800cd96 <RCC_GetSystemClockFreq+0xa6>
 800cd40:	6813      	ldr	r3, [r2, #0]
 800cd42:	0718      	lsls	r0, r3, #28
 800cd44:	d443      	bmi.n	800cdce <RCC_GetSystemClockFreq+0xde>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800cd46:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
      break;

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800cd4a:	091b      	lsrs	r3, r3, #4
 800cd4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd50:	4a24      	ldr	r2, [pc, #144]	; (800cde4 <RCC_GetSystemClockFreq+0xf4>)
 800cd52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd56:	e024      	b.n	800cda2 <RCC_GetSystemClockFreq+0xb2>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800cd58:	6813      	ldr	r3, [r2, #0]
 800cd5a:	071b      	lsls	r3, r3, #28
 800cd5c:	d50a      	bpl.n	800cd74 <RCC_GetSystemClockFreq+0x84>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800cd5e:	6813      	ldr	r3, [r2, #0]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800cd60:	4a20      	ldr	r2, [pc, #128]	; (800cde4 <RCC_GetSystemClockFreq+0xf4>)
 800cd62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800cd66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd6a:	4770      	bx	lr
      frequency = HSI_VALUE;
 800cd6c:	481e      	ldr	r0, [pc, #120]	; (800cde8 <RCC_GetSystemClockFreq+0xf8>)
}
 800cd6e:	4770      	bx	lr
  switch (LL_RCC_GetSysClkSource())
 800cd70:	481e      	ldr	r0, [pc, #120]	; (800cdec <RCC_GetSystemClockFreq+0xfc>)
 800cd72:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800cd74:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800cd78:	4a1a      	ldr	r2, [pc, #104]	; (800cde4 <RCC_GetSystemClockFreq+0xf4>)
 800cd7a:	091b      	lsrs	r3, r3, #4
 800cd7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd84:	4770      	bx	lr
 800cd86:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800cd8a:	4a16      	ldr	r2, [pc, #88]	; (800cde4 <RCC_GetSystemClockFreq+0xf4>)
 800cd8c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800cd90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cd94:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800cd96:	6811      	ldr	r1, [r2, #0]
 800cd98:	0709      	lsls	r1, r1, #28
 800cd9a:	d51c      	bpl.n	800cdd6 <RCC_GetSystemClockFreq+0xe6>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800cd9c:	6812      	ldr	r2, [r2, #0]
 800cd9e:	e7d7      	b.n	800cd50 <RCC_GetSystemClockFreq+0x60>
  switch (pllsource)
 800cda0:	4812      	ldr	r0, [pc, #72]	; (800cdec <RCC_GetSystemClockFreq+0xfc>)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800cda2:	4b0f      	ldr	r3, [pc, #60]	; (800cde0 <RCC_GetSystemClockFreq+0xf0>)
 800cda4:	68da      	ldr	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800cda6:	68d9      	ldr	r1, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800cda8:	68db      	ldr	r3, [r3, #12]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800cdaa:	f3c3 6341 	ubfx	r3, r3, #25, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800cdae:	f3c1 2106 	ubfx	r1, r1, #8, #7
 800cdb2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	3201      	adds	r2, #1
 800cdba:	005b      	lsls	r3, r3, #1
 800cdbc:	fbb0 f0f2 	udiv	r0, r0, r2
 800cdc0:	fb01 f000 	mul.w	r0, r1, r0
 800cdc4:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800cdc8:	4770      	bx	lr
      pllinputfreq = HSI_VALUE;
 800cdca:	4807      	ldr	r0, [pc, #28]	; (800cde8 <RCC_GetSystemClockFreq+0xf8>)
 800cdcc:	e7e9      	b.n	800cda2 <RCC_GetSystemClockFreq+0xb2>
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800cdce:	6813      	ldr	r3, [r2, #0]
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800cdd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800cdd4:	e7bc      	b.n	800cd50 <RCC_GetSystemClockFreq+0x60>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800cdd6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800cdda:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800cdde:	e7b7      	b.n	800cd50 <RCC_GetSystemClockFreq+0x60>
 800cde0:	40021000 	.word	0x40021000
 800cde4:	08014eec 	.word	0x08014eec
 800cde8:	00f42400 	.word	0x00f42400
 800cdec:	007a1200 	.word	0x007a1200

0800cdf0 <LL_RCC_GetUSARTClockFreq>:
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800cdf0:	2803      	cmp	r0, #3
{
 800cdf2:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800cdf4:	d02e      	beq.n	800ce54 <LL_RCC_GetUSARTClockFreq+0x64>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800cdf6:	280c      	cmp	r0, #12
 800cdf8:	d003      	beq.n	800ce02 <LL_RCC_GetUSARTClockFreq+0x12>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800cdfa:	2830      	cmp	r0, #48	; 0x30
 800cdfc:	d049      	beq.n	800ce92 <LL_RCC_GetUSARTClockFreq+0xa2>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800cdfe:	2000      	movs	r0, #0
}
 800ce00:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800ce02:	4b4d      	ldr	r3, [pc, #308]	; (800cf38 <LL_RCC_GetUSARTClockFreq+0x148>)
 800ce04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce08:	f003 030c 	and.w	r3, r3, #12
 800ce0c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ce10:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800ce14:	2b0c      	cmp	r3, #12
 800ce16:	d8f2      	bhi.n	800cdfe <LL_RCC_GetUSARTClockFreq+0xe>
 800ce18:	a201      	add	r2, pc, #4	; (adr r2, 800ce20 <LL_RCC_GetUSARTClockFreq+0x30>)
 800ce1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce1e:	bf00      	nop
 800ce20:	0800cedd 	.word	0x0800cedd
 800ce24:	0800cdff 	.word	0x0800cdff
 800ce28:	0800cdff 	.word	0x0800cdff
 800ce2c:	0800cdff 	.word	0x0800cdff
 800ce30:	0800ceb5 	.word	0x0800ceb5
 800ce34:	0800cdff 	.word	0x0800cdff
 800ce38:	0800cdff 	.word	0x0800cdff
 800ce3c:	0800cdff 	.word	0x0800cdff
 800ce40:	0800cefd 	.word	0x0800cefd
 800ce44:	0800cdff 	.word	0x0800cdff
 800ce48:	0800cdff 	.word	0x0800cdff
 800ce4c:	0800cdff 	.word	0x0800cdff
 800ce50:	0800cf0d 	.word	0x0800cf0d
 800ce54:	4c38      	ldr	r4, [pc, #224]	; (800cf38 <LL_RCC_GetUSARTClockFreq+0x148>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ce56:	4a39      	ldr	r2, [pc, #228]	; (800cf3c <LL_RCC_GetUSARTClockFreq+0x14c>)
 800ce58:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800ce5c:	f003 0303 	and.w	r3, r3, #3
 800ce60:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d032      	beq.n	800cece <LL_RCC_GetUSARTClockFreq+0xde>
 800ce68:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800ce6c:	d029      	beq.n	800cec2 <LL_RCC_GetUSARTClockFreq+0xd2>
 800ce6e:	3a01      	subs	r2, #1
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d01f      	beq.n	800ceb4 <LL_RCC_GetUSARTClockFreq+0xc4>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800ce74:	f7ff ff3c 	bl	800ccf0 <RCC_GetSystemClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800ce78:	68a2      	ldr	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ce7a:	68a3      	ldr	r3, [r4, #8]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ce7c:	4c30      	ldr	r4, [pc, #192]	; (800cf40 <LL_RCC_GetUSARTClockFreq+0x150>)
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800ce7e:	4931      	ldr	r1, [pc, #196]	; (800cf44 <LL_RCC_GetUSARTClockFreq+0x154>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ce80:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800ce84:	f3c3 23c2 	ubfx	r3, r3, #11, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ce88:	5ca2      	ldrb	r2, [r4, r2]
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800ce8a:	5ccb      	ldrb	r3, [r1, r3]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800ce8c:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800ce8e:	40d8      	lsrs	r0, r3
}
 800ce90:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800ce92:	4c29      	ldr	r4, [pc, #164]	; (800cf38 <LL_RCC_GetUSARTClockFreq+0x148>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800ce94:	4a2c      	ldr	r2, [pc, #176]	; (800cf48 <LL_RCC_GetUSARTClockFreq+0x158>)
 800ce96:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800ce9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ce9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d013      	beq.n	800cece <LL_RCC_GetUSARTClockFreq+0xde>
 800cea6:	d809      	bhi.n	800cebc <LL_RCC_GetUSARTClockFreq+0xcc>
 800cea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ceac:	d035      	beq.n	800cf1a <LL_RCC_GetUSARTClockFreq+0x12a>
 800ceae:	3a10      	subs	r2, #16
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d1a4      	bne.n	800cdfe <LL_RCC_GetUSARTClockFreq+0xe>
}
 800ceb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        usart_frequency = RCC_GetSystemClockFreq();
 800ceb8:	f7ff bf1a 	b.w	800ccf0 <RCC_GetSystemClockFreq>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800cebc:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800cec0:	d19d      	bne.n	800cdfe <LL_RCC_GetUSARTClockFreq+0xe>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800cec2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800cec6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800ceca:	03c0      	lsls	r0, r0, #15
}
 800cecc:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800cece:	6820      	ldr	r0, [r4, #0]
          usart_frequency = HSI_VALUE;
 800ced0:	4b1e      	ldr	r3, [pc, #120]	; (800cf4c <LL_RCC_GetUSARTClockFreq+0x15c>)
 800ced2:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800ced6:	bf18      	it	ne
 800ced8:	4618      	movne	r0, r3
}
 800ceda:	bd10      	pop	{r4, pc}
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cedc:	f7ff ff08 	bl	800ccf0 <RCC_GetSystemClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800cee0:	4b15      	ldr	r3, [pc, #84]	; (800cf38 <LL_RCC_GetUSARTClockFreq+0x148>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800cee2:	4917      	ldr	r1, [pc, #92]	; (800cf40 <LL_RCC_GetUSARTClockFreq+0x150>)
 800cee4:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800cee6:	689b      	ldr	r3, [r3, #8]
 800cee8:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800ceec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800cef0:	5c89      	ldrb	r1, [r1, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800cef2:	4a14      	ldr	r2, [pc, #80]	; (800cf44 <LL_RCC_GetUSARTClockFreq+0x154>)
 800cef4:	5cd3      	ldrb	r3, [r2, r3]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800cef6:	40c8      	lsrs	r0, r1
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800cef8:	40d8      	lsrs	r0, r3
}
 800cefa:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800cefc:	4a0e      	ldr	r2, [pc, #56]	; (800cf38 <LL_RCC_GetUSARTClockFreq+0x148>)
          usart_frequency = HSI_VALUE;
 800cefe:	4b13      	ldr	r3, [pc, #76]	; (800cf4c <LL_RCC_GetUSARTClockFreq+0x15c>)
 800cf00:	6810      	ldr	r0, [r2, #0]
 800cf02:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800cf06:	bf18      	it	ne
 800cf08:	4618      	movne	r0, r3
}
 800cf0a:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <LL_RCC_GetUSARTClockFreq+0x148>)
 800cf0e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800cf12:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800cf16:	03c0      	lsls	r0, r0, #15
 800cf18:	bd10      	pop	{r4, pc}
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800cf1a:	f7ff fee9 	bl	800ccf0 <RCC_GetSystemClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800cf1e:	68a2      	ldr	r2, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800cf20:	68a3      	ldr	r3, [r4, #8]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800cf22:	4c07      	ldr	r4, [pc, #28]	; (800cf40 <LL_RCC_GetUSARTClockFreq+0x150>)
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800cf24:	4907      	ldr	r1, [pc, #28]	; (800cf44 <LL_RCC_GetUSARTClockFreq+0x154>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800cf26:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800cf2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800cf2e:	5ca2      	ldrb	r2, [r4, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800cf30:	5ccb      	ldrb	r3, [r1, r3]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800cf32:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800cf34:	40d8      	lsrs	r0, r3
}
 800cf36:	bd10      	pop	{r4, pc}
 800cf38:	40021000 	.word	0x40021000
 800cf3c:	00030002 	.word	0x00030002
 800cf40:	08014ed4 	.word	0x08014ed4
 800cf44:	08014ee4 	.word	0x08014ee4
 800cf48:	00300020 	.word	0x00300020
 800cf4c:	00f42400 	.word	0x00f42400

0800cf50 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800cf50:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800cf52:	6803      	ldr	r3, [r0, #0]
 800cf54:	07db      	lsls	r3, r3, #31
 800cf56:	d422      	bmi.n	800cf9e <LL_USART_Init+0x4e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800cf58:	4604      	mov	r4, r0
 800cf5a:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
 800cf5e:	684b      	ldr	r3, [r1, #4]
 800cf60:	460d      	mov	r5, r1
 800cf62:	4303      	orrs	r3, r0
 800cf64:	4313      	orrs	r3, r2
 800cf66:	69aa      	ldr	r2, [r5, #24]
 800cf68:	6821      	ldr	r1, [r4, #0]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	4a22      	ldr	r2, [pc, #136]	; (800cff8 <LL_USART_Init+0xa8>)
 800cf6e:	400a      	ands	r2, r1
 800cf70:	4313      	orrs	r3, r2
 800cf72:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800cf74:	6863      	ldr	r3, [r4, #4]
 800cf76:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800cf78:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800cf7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	6063      	str	r3, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800cf82:	68a3      	ldr	r3, [r4, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800cf84:	4a1d      	ldr	r2, [pc, #116]	; (800cffc <LL_USART_Init+0xac>)
 800cf86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf8a:	430b      	orrs	r3, r1
 800cf8c:	4294      	cmp	r4, r2
 800cf8e:	60a3      	str	r3, [r4, #8]
 800cf90:	d007      	beq.n	800cfa2 <LL_USART_Init+0x52>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800cf92:	4b1b      	ldr	r3, [pc, #108]	; (800d000 <LL_USART_Init+0xb0>)
 800cf94:	429c      	cmp	r4, r3
 800cf96:	d01c      	beq.n	800cfd2 <LL_USART_Init+0x82>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800cf98:	4b1a      	ldr	r3, [pc, #104]	; (800d004 <LL_USART_Init+0xb4>)
 800cf9a:	429c      	cmp	r4, r3
 800cf9c:	d015      	beq.n	800cfca <LL_USART_Init+0x7a>
  ErrorStatus status = ERROR;
 800cf9e:	2001      	movs	r0, #1
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800cfa0:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800cfa2:	2003      	movs	r0, #3
 800cfa4:	f7ff ff24 	bl	800cdf0 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d0f8      	beq.n	800cf9e <LL_USART_Init+0x4e>
        && (USART_InitStruct->BaudRate != 0U))
 800cfac:	682a      	ldr	r2, [r5, #0]
 800cfae:	2a00      	cmp	r2, #0
 800cfb0:	d0f5      	beq.n	800cf9e <LL_USART_Init+0x4e>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800cfb2:	69ab      	ldr	r3, [r5, #24]
 800cfb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfb8:	d00f      	beq.n	800cfda <LL_USART_Init+0x8a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800cfba:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800cfbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800cfc6:	2000      	movs	r0, #0
}
 800cfc8:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800cfca:	2030      	movs	r0, #48	; 0x30
 800cfcc:	f7ff ff10 	bl	800cdf0 <LL_RCC_GetUSARTClockFreq>
 800cfd0:	e7ea      	b.n	800cfa8 <LL_USART_Init+0x58>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800cfd2:	200c      	movs	r0, #12
 800cfd4:	f7ff ff0c 	bl	800cdf0 <LL_RCC_GetUSARTClockFreq>
 800cfd8:	e7e6      	b.n	800cfa8 <LL_USART_Init+0x58>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800cfda:	0853      	lsrs	r3, r2, #1
    brrtemp = usartdiv & 0xFFF0U;
 800cfdc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800cfe0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800cfe4:	fbb3 f3f2 	udiv	r3, r3, r2
    brrtemp = usartdiv & 0xFFF0U;
 800cfe8:	ea03 0201 	and.w	r2, r3, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfec:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800cff0:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 800cff2:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 800cff4:	2000      	movs	r0, #0
}
 800cff6:	bd38      	pop	{r3, r4, r5, pc}
 800cff8:	efff69f3 	.word	0xefff69f3
 800cffc:	40013800 	.word	0x40013800
 800d000:	40004400 	.word	0x40004400
 800d004:	40004800 	.word	0x40004800

0800d008 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d008:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800d00a:	f000 fa07 	bl	800d41c <vTaskStartScheduler>
  
  return osOK;
}
 800d00e:	2000      	movs	r0, #0
 800d010:	bd08      	pop	{r3, pc}
 800d012:	bf00      	nop

0800d014 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d014:	b510      	push	{r4, lr}
 800d016:	4684      	mov	ip, r0
 800d018:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d01a:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 800d01e:	f8dc 1000 	ldr.w	r1, [ip]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d022:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d026:	6840      	ldr	r0, [r0, #4]
{
 800d028:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 800d02a:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800d02e:	bf14      	ite	ne
 800d030:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d034:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d036:	9400      	str	r4, [sp, #0]
 800d038:	ac03      	add	r4, sp, #12
 800d03a:	9401      	str	r4, [sp, #4]
 800d03c:	f000 f8a0 	bl	800d180 <xTaskCreate>
 800d040:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d042:	bf0c      	ite	eq
 800d044:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800d046:	2000      	movne	r0, #0
}
 800d048:	b004      	add	sp, #16
 800d04a:	bd10      	pop	{r4, pc}

0800d04c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d04c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d04e:	2801      	cmp	r0, #1
 800d050:	bf38      	it	cc
 800d052:	2001      	movcc	r0, #1
 800d054:	f000 fc38 	bl	800d8c8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d058:	2000      	movs	r0, #0
 800d05a:	bd08      	pop	{r3, pc}

0800d05c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d05c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d060:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d064:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d066:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d06a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d06e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop

0800d074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d074:	2300      	movs	r3, #0
 800d076:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop

0800d07c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d07c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d07e:	689a      	ldr	r2, [r3, #8]
 800d080:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d082:	6802      	ldr	r2, [r0, #0]
{
 800d084:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d086:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d088:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800d08a:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d08c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d08e:	6099      	str	r1, [r3, #8]
}
 800d090:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800d094:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d096:	6002      	str	r2, [r0, #0]
}
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop

0800d09c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d09c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d09e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0a0:	1c6b      	adds	r3, r5, #1
 800d0a2:	d010      	beq.n	800d0c6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0a4:	f100 0308 	add.w	r3, r0, #8
 800d0a8:	461c      	mov	r4, r3
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	42aa      	cmp	r2, r5
 800d0b0:	d9fa      	bls.n	800d0a8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d0b2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0b4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800d0b6:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d0b8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0ba:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0bc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800d0be:	6108      	str	r0, [r1, #16]
}
 800d0c0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800d0c2:	6002      	str	r2, [r0, #0]
}
 800d0c4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0c6:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0c8:	6863      	ldr	r3, [r4, #4]
 800d0ca:	e7f2      	b.n	800d0b2 <vListInsert+0x16>

0800d0cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0cc:	6903      	ldr	r3, [r0, #16]
{
 800d0ce:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0d0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d0d4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d0d6:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800d0d8:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d0da:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d0dc:	bf08      	it	eq
 800d0de:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800d0e0:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800d0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800d0e6:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800d0e8:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800d0ea:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d0ec:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800d0ee:	6818      	ldr	r0, [r3, #0]
}
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop

0800d0f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0f6:	4b1b      	ldr	r3, [pc, #108]	; (800d164 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f8:	4e1b      	ldr	r6, [pc, #108]	; (800d168 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800d0fa:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0fc:	6833      	ldr	r3, [r6, #0]
{
 800d0fe:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d100:	1d18      	adds	r0, r3, #4
{
 800d102:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d104:	f7ff ffe2 	bl	800d0cc <uxListRemove>
 800d108:	b940      	cbnz	r0, 800d11c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d10a:	6833      	ldr	r3, [r6, #0]
 800d10c:	4917      	ldr	r1, [pc, #92]	; (800d16c <prvAddCurrentTaskToDelayedList+0x78>)
 800d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d110:	2201      	movs	r2, #1
 800d112:	409a      	lsls	r2, r3
 800d114:	680b      	ldr	r3, [r1, #0]
 800d116:	ea23 0302 	bic.w	r3, r3, r2
 800d11a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d11c:	1c6b      	adds	r3, r5, #1
 800d11e:	d017      	beq.n	800d150 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d120:	6833      	ldr	r3, [r6, #0]
 800d122:	1964      	adds	r4, r4, r5
 800d124:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d126:	d307      	bcc.n	800d138 <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d128:	4b11      	ldr	r3, [pc, #68]	; (800d170 <prvAddCurrentTaskToDelayedList+0x7c>)
 800d12a:	6818      	ldr	r0, [r3, #0]
 800d12c:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d12e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d132:	3104      	adds	r1, #4
 800d134:	f7ff bfb2 	b.w	800d09c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d138:	4b0e      	ldr	r3, [pc, #56]	; (800d174 <prvAddCurrentTaskToDelayedList+0x80>)
 800d13a:	6818      	ldr	r0, [r3, #0]
 800d13c:	6831      	ldr	r1, [r6, #0]
 800d13e:	3104      	adds	r1, #4
 800d140:	f7ff ffac 	bl	800d09c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d144:	4b0c      	ldr	r3, [pc, #48]	; (800d178 <prvAddCurrentTaskToDelayedList+0x84>)
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800d14a:	bf88      	it	hi
 800d14c:	601c      	strhi	r4, [r3, #0]
}
 800d14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d150:	2f00      	cmp	r7, #0
 800d152:	d0e5      	beq.n	800d120 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d154:	6831      	ldr	r1, [r6, #0]
 800d156:	4809      	ldr	r0, [pc, #36]	; (800d17c <prvAddCurrentTaskToDelayedList+0x88>)
}
 800d158:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d15c:	3104      	adds	r1, #4
 800d15e:	f7ff bf8d 	b.w	800d07c <vListInsertEnd>
 800d162:	bf00      	nop
 800d164:	20001548 	.word	0x20001548
 800d168:	20001424 	.word	0x20001424
 800d16c:	200014cc 	.word	0x200014cc
 800d170:	2000142c 	.word	0x2000142c
 800d174:	20001428 	.word	0x20001428
 800d178:	200014fc 	.word	0x200014fc
 800d17c:	20001520 	.word	0x20001520

0800d180 <xTaskCreate>:
	{
 800d180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d184:	ea4f 0882 	mov.w	r8, r2, lsl #2
	{
 800d188:	4681      	mov	r9, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d18a:	4640      	mov	r0, r8
	{
 800d18c:	460d      	mov	r5, r1
 800d18e:	469a      	mov	sl, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d190:	f000 fefa 	bl	800df88 <pvPortMalloc>
			if( pxStack != NULL )
 800d194:	2800      	cmp	r0, #0
 800d196:	f000 808a 	beq.w	800d2ae <xTaskCreate+0x12e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d19a:	4606      	mov	r6, r0
 800d19c:	20a0      	movs	r0, #160	; 0xa0
 800d19e:	f000 fef3 	bl	800df88 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	f000 808f 	beq.w	800d2c8 <xTaskCreate+0x148>
					pxNewTCB->pxStack = pxStack;
 800d1aa:	6306      	str	r6, [r0, #48]	; 0x30
	if( pcName != NULL )
 800d1ac:	2d00      	cmp	r5, #0
 800d1ae:	f000 8094 	beq.w	800d2da <xTaskCreate+0x15a>
 800d1b2:	f105 3cff 	add.w	ip, r5, #4294967295
 800d1b6:	f100 0333 	add.w	r3, r0, #51	; 0x33
 800d1ba:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d1bc:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
 800d1c0:	f803 7f01 	strb.w	r7, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800d1c4:	b10f      	cbz	r7, 800d1ca <xTaskCreate+0x4a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d1c6:	45ac      	cmp	ip, r5
 800d1c8:	d1f8      	bne.n	800d1bc <xTaskCreate+0x3c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d1d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d1d2:	2d06      	cmp	r5, #6
 800d1d4:	bf28      	it	cs
 800d1d6:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800d1d8:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1dc:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800d1de:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d1e0:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1e2:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800d1e4:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d1e8:	f7ff ff44 	bl	800d074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d1ec:	f104 0018 	add.w	r0, r4, #24
 800d1f0:	f7ff ff40 	bl	800d074 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1f4:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d1f8:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1fa:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800d1fc:	f8c4 b098 	str.w	fp, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d200:	4659      	mov	r1, fp
 800d202:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d204:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d206:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d208:	f884 b09c 	strb.w	fp, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d20c:	f003 f81e 	bl	801024c <memset>
 800d210:	4b4b      	ldr	r3, [pc, #300]	; (800d340 <xTaskCreate+0x1c0>)
 800d212:	6523      	str	r3, [r4, #80]	; 0x50
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d214:	f1a8 0804 	sub.w	r8, r8, #4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d218:	f103 0568 	add.w	r5, r3, #104	; 0x68
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d21c:	eb06 0008 	add.w	r0, r6, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d220:	33d0      	adds	r3, #208	; 0xd0
 800d222:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d224:	4652      	mov	r2, sl
 800d226:	4649      	mov	r1, r9
 800d228:	f020 0007 	bic.w	r0, r0, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d22c:	6565      	str	r5, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d22e:	f000 fc99 	bl	800db64 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800d232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d234:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800d236:	b103      	cbz	r3, 800d23a <xTaskCreate+0xba>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d238:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800d23a:	f000 fcbb 	bl	800dbb4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800d23e:	4a41      	ldr	r2, [pc, #260]	; (800d344 <xTaskCreate+0x1c4>)
		if( pxCurrentTCB == NULL )
 800d240:	4e41      	ldr	r6, [pc, #260]	; (800d348 <xTaskCreate+0x1c8>)
		uxCurrentNumberOfTasks++;
 800d242:	6813      	ldr	r3, [r2, #0]
 800d244:	3301      	adds	r3, #1
 800d246:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d248:	6833      	ldr	r3, [r6, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d048      	beq.n	800d2e0 <xTaskCreate+0x160>
			if( xSchedulerRunning == pdFALSE )
 800d24e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800d36c <xTaskCreate+0x1ec>
 800d252:	f8d8 3000 	ldr.w	r3, [r8]
 800d256:	b373      	cbz	r3, 800d2b6 <xTaskCreate+0x136>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d258:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d25a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 800d370 <xTaskCreate+0x1f0>
		uxTaskNumber++;
 800d25e:	4d3b      	ldr	r5, [pc, #236]	; (800d34c <xTaskCreate+0x1cc>)
		prvAddTaskToReadyList( pxNewTCB );
 800d260:	4a3b      	ldr	r2, [pc, #236]	; (800d350 <xTaskCreate+0x1d0>)
		uxTaskNumber++;
 800d262:	682b      	ldr	r3, [r5, #0]
 800d264:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800d266:	4639      	mov	r1, r7
		uxTaskNumber++;
 800d268:	602b      	str	r3, [r5, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d26a:	6817      	ldr	r7, [r2, #0]
 800d26c:	2501      	movs	r5, #1
 800d26e:	fa05 f300 	lsl.w	r3, r5, r0
 800d272:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d276:	433b      	orrs	r3, r7
 800d278:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	f7ff fefd 	bl	800d07c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800d282:	f000 fcb9 	bl	800dbf8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800d286:	f8d8 3000 	ldr.w	r3, [r8]
 800d28a:	b31b      	cbz	r3, 800d2d4 <xTaskCreate+0x154>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d28c:	6832      	ldr	r2, [r6, #0]
 800d28e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d290:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d292:	429a      	cmp	r2, r3
 800d294:	d21e      	bcs.n	800d2d4 <xTaskCreate+0x154>
			taskYIELD_IF_USING_PREEMPTION();
 800d296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d29e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	e001      	b.n	800d2b2 <xTaskCreate+0x132>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2ae:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d2b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2b6:	6833      	ldr	r3, [r6, #0]
 800d2b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2bc:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800d370 <xTaskCreate+0x1f0>
 800d2c0:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800d2c2:	bf98      	it	ls
 800d2c4:	6034      	strls	r4, [r6, #0]
 800d2c6:	e7ca      	b.n	800d25e <xTaskCreate+0xde>
					vPortFree( pxStack );
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f000 fef3 	bl	800e0b4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d2:	e7ee      	b.n	800d2b2 <xTaskCreate+0x132>
			xReturn = pdPASS;
 800d2d4:	4628      	mov	r0, r5
	}
 800d2d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d2da:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 800d2de:	e777      	b.n	800d1d0 <xTaskCreate+0x50>
			pxCurrentTCB = pxNewTCB;
 800d2e0:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d2e2:	6813      	ldr	r3, [r2, #0]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d005      	beq.n	800d2f4 <xTaskCreate+0x174>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d2e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d2ea:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800d370 <xTaskCreate+0x1f0>
 800d2ee:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800d36c <xTaskCreate+0x1ec>
 800d2f2:	e7b4      	b.n	800d25e <xTaskCreate+0xde>
 800d2f4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800d370 <xTaskCreate+0x1f0>
 800d2f8:	464d      	mov	r5, r9
 800d2fa:	f109 088c 	add.w	r8, r9, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2fe:	4628      	mov	r0, r5
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d300:	3514      	adds	r5, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d302:	f7ff feab 	bl	800d05c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d306:	45a8      	cmp	r8, r5
 800d308:	d1f9      	bne.n	800d2fe <xTaskCreate+0x17e>
	vListInitialise( &xDelayedTaskList1 );
 800d30a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800d374 <xTaskCreate+0x1f4>
	vListInitialise( &xDelayedTaskList2 );
 800d30e:	4d11      	ldr	r5, [pc, #68]	; (800d354 <xTaskCreate+0x1d4>)
	vListInitialise( &xDelayedTaskList1 );
 800d310:	4640      	mov	r0, r8
 800d312:	f7ff fea3 	bl	800d05c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d316:	4628      	mov	r0, r5
 800d318:	f7ff fea0 	bl	800d05c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d31c:	480e      	ldr	r0, [pc, #56]	; (800d358 <xTaskCreate+0x1d8>)
 800d31e:	f7ff fe9d 	bl	800d05c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800d322:	480e      	ldr	r0, [pc, #56]	; (800d35c <xTaskCreate+0x1dc>)
 800d324:	f7ff fe9a 	bl	800d05c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800d328:	480d      	ldr	r0, [pc, #52]	; (800d360 <xTaskCreate+0x1e0>)
 800d32a:	f7ff fe97 	bl	800d05c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800d32e:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <xTaskCreate+0x1e4>)
		prvAddTaskToReadyList( pxNewTCB );
 800d330:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800d332:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <xTaskCreate+0x1e8>)
 800d338:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800d36c <xTaskCreate+0x1ec>
 800d33c:	601d      	str	r5, [r3, #0]
}
 800d33e:	e78e      	b.n	800d25e <xTaskCreate+0xde>
 800d340:	2000558c 	.word	0x2000558c
 800d344:	200014bc 	.word	0x200014bc
 800d348:	20001424 	.word	0x20001424
 800d34c:	200014c8 	.word	0x200014c8
 800d350:	200014cc 	.word	0x200014cc
 800d354:	200014e4 	.word	0x200014e4
 800d358:	20001508 	.word	0x20001508
 800d35c:	20001534 	.word	0x20001534
 800d360:	20001520 	.word	0x20001520
 800d364:	20001428 	.word	0x20001428
 800d368:	2000142c 	.word	0x2000142c
 800d36c:	2000151c 	.word	0x2000151c
 800d370:	20001430 	.word	0x20001430
 800d374:	200014d0 	.word	0x200014d0

0800d378 <vTaskResume>:
		configASSERT( xTaskToResume );
 800d378:	b198      	cbz	r0, 800d3a2 <vTaskResume+0x2a>
	{
 800d37a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d37c:	4d22      	ldr	r5, [pc, #136]	; (800d408 <vTaskResume+0x90>)
 800d37e:	682b      	ldr	r3, [r5, #0]
 800d380:	4283      	cmp	r3, r0
	{
 800d382:	b083      	sub	sp, #12
 800d384:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d386:	d00a      	beq.n	800d39e <vTaskResume+0x26>
			taskENTER_CRITICAL();
 800d388:	f000 fc14 	bl	800dbb4 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d38c:	4b1f      	ldr	r3, [pc, #124]	; (800d40c <vTaskResume+0x94>)
 800d38e:	6962      	ldr	r2, [r4, #20]
 800d390:	429a      	cmp	r2, r3
 800d392:	d00f      	beq.n	800d3b4 <vTaskResume+0x3c>
	}
 800d394:	b003      	add	sp, #12
 800d396:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			taskEXIT_CRITICAL();
 800d39a:	f000 bc2d 	b.w	800dbf8 <vPortExitCritical>
	}
 800d39e:	b003      	add	sp, #12
 800d3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 800d3b2:	e7fe      	b.n	800d3b2 <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d3b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d3b6:	4a16      	ldr	r2, [pc, #88]	; (800d410 <vTaskResume+0x98>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d0eb      	beq.n	800d394 <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1e9      	bne.n	800d394 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d3c0:	1d21      	adds	r1, r4, #4
 800d3c2:	4608      	mov	r0, r1
 800d3c4:	9101      	str	r1, [sp, #4]
 800d3c6:	f7ff fe81 	bl	800d0cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3ca:	4812      	ldr	r0, [pc, #72]	; (800d414 <vTaskResume+0x9c>)
 800d3cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d3ce:	6807      	ldr	r7, [r0, #0]
 800d3d0:	4e11      	ldr	r6, [pc, #68]	; (800d418 <vTaskResume+0xa0>)
 800d3d2:	9901      	ldr	r1, [sp, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	409a      	lsls	r2, r3
 800d3d8:	433a      	orrs	r2, r7
 800d3da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d3de:	6002      	str	r2, [r0, #0]
 800d3e0:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800d3e4:	f7ff fe4a 	bl	800d07c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d3d0      	bcc.n	800d394 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 800d3f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	e7c5      	b.n	800d394 <vTaskResume+0x1c>
 800d408:	20001424 	.word	0x20001424
 800d40c:	20001520 	.word	0x20001520
 800d410:	20001508 	.word	0x20001508
 800d414:	200014cc 	.word	0x200014cc
 800d418:	20001430 	.word	0x20001430

0800d41c <vTaskStartScheduler>:
{
 800d41c:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800d41e:	4b1a      	ldr	r3, [pc, #104]	; (800d488 <vTaskStartScheduler+0x6c>)
 800d420:	491a      	ldr	r1, [pc, #104]	; (800d48c <vTaskStartScheduler+0x70>)
 800d422:	481b      	ldr	r0, [pc, #108]	; (800d490 <vTaskStartScheduler+0x74>)
{
 800d424:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800d426:	2400      	movs	r4, #0
 800d428:	e9cd 4300 	strd	r4, r3, [sp]
 800d42c:	2280      	movs	r2, #128	; 0x80
 800d42e:	4623      	mov	r3, r4
 800d430:	f7ff fea6 	bl	800d180 <xTaskCreate>
	if( xReturn == pdPASS )
 800d434:	2801      	cmp	r0, #1
 800d436:	d00c      	beq.n	800d452 <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d438:	3001      	adds	r0, #1
 800d43a:	d001      	beq.n	800d440 <vTaskStartScheduler+0x24>
}
 800d43c:	b003      	add	sp, #12
 800d43e:	bd30      	pop	{r4, r5, pc}
 800d440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d450:	e7fe      	b.n	800d450 <vTaskStartScheduler+0x34>
 800d452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d462:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <vTaskStartScheduler+0x78>)
 800d464:	4a0c      	ldr	r2, [pc, #48]	; (800d498 <vTaskStartScheduler+0x7c>)
 800d466:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800d468:	490c      	ldr	r1, [pc, #48]	; (800d49c <vTaskStartScheduler+0x80>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d46a:	334c      	adds	r3, #76	; 0x4c
 800d46c:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800d46e:	4a0c      	ldr	r2, [pc, #48]	; (800d4a0 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d470:	4b0c      	ldr	r3, [pc, #48]	; (800d4a4 <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800d472:	f04f 35ff 	mov.w	r5, #4294967295
 800d476:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800d478:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d47a:	601c      	str	r4, [r3, #0]
}
 800d47c:	b003      	add	sp, #12
 800d47e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 800d482:	f000 bcc3 	b.w	800de0c <xPortStartScheduler>
 800d486:	bf00      	nop
 800d488:	200014f8 	.word	0x200014f8
 800d48c:	0801556c 	.word	0x0801556c
 800d490:	0800d791 	.word	0x0800d791
 800d494:	20001424 	.word	0x20001424
 800d498:	20000200 	.word	0x20000200
 800d49c:	200014fc 	.word	0x200014fc
 800d4a0:	2000151c 	.word	0x2000151c
 800d4a4:	20001548 	.word	0x20001548

0800d4a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d4a8:	4a02      	ldr	r2, [pc, #8]	; (800d4b4 <vTaskSuspendAll+0xc>)
 800d4aa:	6813      	ldr	r3, [r2, #0]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	6013      	str	r3, [r2, #0]
}
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	200014c4 	.word	0x200014c4

0800d4b8 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800d4b8:	4a09      	ldr	r2, [pc, #36]	; (800d4e0 <vTaskStepTick+0x28>)
 800d4ba:	490a      	ldr	r1, [pc, #40]	; (800d4e4 <vTaskStepTick+0x2c>)
 800d4bc:	6813      	ldr	r3, [r2, #0]
 800d4be:	6809      	ldr	r1, [r1, #0]
 800d4c0:	4403      	add	r3, r0
 800d4c2:	428b      	cmp	r3, r1
 800d4c4:	d908      	bls.n	800d4d8 <vTaskStepTick+0x20>
 800d4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ca:	f383 8811 	msr	BASEPRI, r3
 800d4ce:	f3bf 8f6f 	isb	sy
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	e7fe      	b.n	800d4d6 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800d4d8:	6813      	ldr	r3, [r2, #0]
 800d4da:	4403      	add	r3, r0
 800d4dc:	6013      	str	r3, [r2, #0]
	}
 800d4de:	4770      	bx	lr
 800d4e0:	20001548 	.word	0x20001548
 800d4e4:	200014fc 	.word	0x200014fc

0800d4e8 <xTaskIncrementTick>:
{
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ec:	4b50      	ldr	r3, [pc, #320]	; (800d630 <xTaskIncrementTick+0x148>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
{
 800d4f0:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d14c      	bne.n	800d590 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4f6:	4b4f      	ldr	r3, [pc, #316]	; (800d634 <xTaskIncrementTick+0x14c>)
 800d4f8:	681d      	ldr	r5, [r3, #0]
 800d4fa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d4fc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4fe:	2d00      	cmp	r5, #0
 800d500:	d04f      	beq.n	800d5a2 <xTaskIncrementTick+0xba>
 800d502:	4b4d      	ldr	r3, [pc, #308]	; (800d638 <xTaskIncrementTick+0x150>)
 800d504:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d506:	9b01      	ldr	r3, [sp, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	429d      	cmp	r5, r3
 800d50c:	d356      	bcc.n	800d5bc <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d50e:	4e4b      	ldr	r6, [pc, #300]	; (800d63c <xTaskIncrementTick+0x154>)
 800d510:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800d654 <xTaskIncrementTick+0x16c>
 800d514:	6833      	ldr	r3, [r6, #0]
 800d516:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800d658 <xTaskIncrementTick+0x170>
 800d51a:	681c      	ldr	r4, [r3, #0]
 800d51c:	2c00      	cmp	r4, #0
 800d51e:	d079      	beq.n	800d614 <xTaskIncrementTick+0x12c>
					prvAddTaskToReadyList( pxTCB );
 800d520:	4f47      	ldr	r7, [pc, #284]	; (800d640 <xTaskIncrementTick+0x158>)
BaseType_t xSwitchRequired = pdFALSE;
 800d522:	2400      	movs	r4, #0
					prvAddTaskToReadyList( pxTCB );
 800d524:	f04f 0a01 	mov.w	sl, #1
 800d528:	e024      	b.n	800d574 <xTaskIncrementTick+0x8c>
 800d52a:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d52c:	f7ff fdce 	bl	800d0cc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d530:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800d534:	9900      	ldr	r1, [sp, #0]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d536:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d53a:	b112      	cbz	r2, 800d542 <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d53c:	f7ff fdc6 	bl	800d0cc <uxListRemove>
 800d540:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 800d542:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	fa0a f200 	lsl.w	r2, sl, r0
 800d54c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d550:	431a      	orrs	r2, r3
 800d552:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800d556:	603a      	str	r2, [r7, #0]
 800d558:	f7ff fd90 	bl	800d07c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d55c:	f8d9 3000 	ldr.w	r3, [r9]
 800d560:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800d564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800d566:	429a      	cmp	r2, r3
 800d568:	bf28      	it	cs
 800d56a:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d56c:	6833      	ldr	r3, [r6, #0]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d04f      	beq.n	800d614 <xTaskIncrementTick+0x12c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d574:	6833      	ldr	r3, [r6, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d57c:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d580:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 800d584:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d586:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 800d588:	d2cf      	bcs.n	800d52a <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 800d58a:	9b01      	ldr	r3, [sp, #4]
 800d58c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d58e:	e01a      	b.n	800d5c6 <xTaskIncrementTick+0xde>
		++xPendedTicks;
 800d590:	4a2c      	ldr	r2, [pc, #176]	; (800d644 <xTaskIncrementTick+0x15c>)
 800d592:	6813      	ldr	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d594:	2400      	movs	r4, #0
		++xPendedTicks;
 800d596:	3301      	adds	r3, #1
}
 800d598:	4620      	mov	r0, r4
		++xPendedTicks;
 800d59a:	6013      	str	r3, [r2, #0]
}
 800d59c:	b003      	add	sp, #12
 800d59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800d5a2:	4b26      	ldr	r3, [pc, #152]	; (800d63c <xTaskIncrementTick+0x154>)
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	6812      	ldr	r2, [r2, #0]
 800d5a8:	b30a      	cbz	r2, 800d5ee <xTaskIncrementTick+0x106>
 800d5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	e7fe      	b.n	800d5ba <xTaskIncrementTick+0xd2>
 800d5bc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800d654 <xTaskIncrementTick+0x16c>
 800d5c0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800d658 <xTaskIncrementTick+0x170>
BaseType_t xSwitchRequired = pdFALSE;
 800d5c4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5c6:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800d5ca:	491f      	ldr	r1, [pc, #124]	; (800d648 <xTaskIncrementTick+0x160>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800d5d8:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800d5da:	2a02      	cmp	r2, #2
 800d5dc:	bf28      	it	cs
 800d5de:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	bf18      	it	ne
 800d5e4:	2401      	movne	r4, #1
}
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	b003      	add	sp, #12
 800d5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800d5ee:	4a17      	ldr	r2, [pc, #92]	; (800d64c <xTaskIncrementTick+0x164>)
 800d5f0:	6818      	ldr	r0, [r3, #0]
 800d5f2:	6811      	ldr	r1, [r2, #0]
 800d5f4:	6019      	str	r1, [r3, #0]
 800d5f6:	4916      	ldr	r1, [pc, #88]	; (800d650 <xTaskIncrementTick+0x168>)
 800d5f8:	6010      	str	r0, [r2, #0]
 800d5fa:	680a      	ldr	r2, [r1, #0]
 800d5fc:	3201      	adds	r2, #1
 800d5fe:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	6812      	ldr	r2, [r2, #0]
 800d604:	b95a      	cbnz	r2, 800d61e <xTaskIncrementTick+0x136>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d606:	4b0c      	ldr	r3, [pc, #48]	; (800d638 <xTaskIncrementTick+0x150>)
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	461a      	mov	r2, r3
 800d60c:	f04f 33ff 	mov.w	r3, #4294967295
 800d610:	6013      	str	r3, [r2, #0]
 800d612:	e778      	b.n	800d506 <xTaskIncrementTick+0x1e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d614:	9a01      	ldr	r2, [sp, #4]
 800d616:	f04f 33ff 	mov.w	r3, #4294967295
 800d61a:	6013      	str	r3, [r2, #0]
					break;
 800d61c:	e7d3      	b.n	800d5c6 <xTaskIncrementTick+0xde>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d61e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d620:	4a05      	ldr	r2, [pc, #20]	; (800d638 <xTaskIncrementTick+0x150>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d622:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d624:	9201      	str	r2, [sp, #4]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	6013      	str	r3, [r2, #0]
}
 800d62c:	e76b      	b.n	800d506 <xTaskIncrementTick+0x1e>
 800d62e:	bf00      	nop
 800d630:	200014c4 	.word	0x200014c4
 800d634:	20001548 	.word	0x20001548
 800d638:	200014fc 	.word	0x200014fc
 800d63c:	20001428 	.word	0x20001428
 800d640:	200014cc 	.word	0x200014cc
 800d644:	20001504 	.word	0x20001504
 800d648:	2000154c 	.word	0x2000154c
 800d64c:	2000142c 	.word	0x2000142c
 800d650:	20001500 	.word	0x20001500
 800d654:	20001430 	.word	0x20001430
 800d658:	20001424 	.word	0x20001424

0800d65c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800d65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800d662:	f000 faa7 	bl	800dbb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d666:	4b38      	ldr	r3, [pc, #224]	; (800d748 <xTaskResumeAll.part.0+0xec>)
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	3a01      	subs	r2, #1
 800d66c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d159      	bne.n	800d728 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d674:	4b35      	ldr	r3, [pc, #212]	; (800d74c <xTaskResumeAll.part.0+0xf0>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d055      	beq.n	800d728 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d67c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d764 <xTaskResumeAll.part.0+0x108>
 800d680:	f8da 3000 	ldr.w	r3, [sl]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d05c      	beq.n	800d742 <xTaskResumeAll.part.0+0xe6>
 800d688:	4d31      	ldr	r5, [pc, #196]	; (800d750 <xTaskResumeAll.part.0+0xf4>)
 800d68a:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800d768 <xTaskResumeAll.part.0+0x10c>
 800d68e:	4f31      	ldr	r7, [pc, #196]	; (800d754 <xTaskResumeAll.part.0+0xf8>)
 800d690:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800d76c <xTaskResumeAll.part.0+0x110>
					prvAddTaskToReadyList( pxTCB );
 800d694:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d696:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d69a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d69c:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6a0:	f104 0018 	add.w	r0, r4, #24
 800d6a4:	f7ff fd12 	bl	800d0cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6a8:	4658      	mov	r0, fp
 800d6aa:	f7ff fd0f 	bl	800d0cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d6ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d6b0:	682a      	ldr	r2, [r5, #0]
 800d6b2:	fa06 f300 	lsl.w	r3, r6, r0
 800d6b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	4659      	mov	r1, fp
 800d6be:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800d6c2:	602b      	str	r3, [r5, #0]
 800d6c4:	f7ff fcda 	bl	800d07c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ce:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800d6d0:	bf28      	it	cs
 800d6d2:	f8c9 6000 	strcs.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6d6:	f8da 3000 	ldr.w	r3, [sl]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1db      	bne.n	800d696 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6de:	4b1e      	ldr	r3, [pc, #120]	; (800d758 <xTaskResumeAll.part.0+0xfc>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	6812      	ldr	r2, [r2, #0]
 800d6e4:	b342      	cbz	r2, 800d738 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6e6:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6e8:	4b1c      	ldr	r3, [pc, #112]	; (800d75c <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6ec:	68d2      	ldr	r2, [r2, #12]
 800d6ee:	6852      	ldr	r2, [r2, #4]
 800d6f0:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d6f2:	4e1b      	ldr	r6, [pc, #108]	; (800d760 <xTaskResumeAll.part.0+0x104>)
 800d6f4:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d6f6:	b144      	cbz	r4, 800d70a <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 800d6f8:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d6fa:	f7ff fef5 	bl	800d4e8 <xTaskIncrementTick>
 800d6fe:	b108      	cbz	r0, 800d704 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 800d700:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d704:	3c01      	subs	r4, #1
 800d706:	d1f8      	bne.n	800d6fa <xTaskResumeAll.part.0+0x9e>
						xPendedTicks = 0;
 800d708:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800d70a:	f8d9 3000 	ldr.w	r3, [r9]
 800d70e:	b15b      	cbz	r3, 800d728 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800d710:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d718:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d724:	2001      	movs	r0, #1
 800d726:	e000      	b.n	800d72a <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 800d728:	2000      	movs	r0, #0
 800d72a:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 800d72c:	f000 fa64 	bl	800dbf8 <vPortExitCritical>
}
 800d730:	9801      	ldr	r0, [sp, #4]
 800d732:	b003      	add	sp, #12
 800d734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800d738:	4b08      	ldr	r3, [pc, #32]	; (800d75c <xTaskResumeAll.part.0+0x100>)
 800d73a:	f04f 32ff 	mov.w	r2, #4294967295
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	e7d7      	b.n	800d6f2 <xTaskResumeAll.part.0+0x96>
 800d742:	f8df 9028 	ldr.w	r9, [pc, #40]	; 800d76c <xTaskResumeAll.part.0+0x110>
 800d746:	e7d4      	b.n	800d6f2 <xTaskResumeAll.part.0+0x96>
 800d748:	200014c4 	.word	0x200014c4
 800d74c:	200014bc 	.word	0x200014bc
 800d750:	200014cc 	.word	0x200014cc
 800d754:	20001424 	.word	0x20001424
 800d758:	20001428 	.word	0x20001428
 800d75c:	200014fc 	.word	0x200014fc
 800d760:	20001504 	.word	0x20001504
 800d764:	20001508 	.word	0x20001508
 800d768:	20001430 	.word	0x20001430
 800d76c:	2000154c 	.word	0x2000154c

0800d770 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800d770:	4b06      	ldr	r3, [pc, #24]	; (800d78c <xTaskResumeAll+0x1c>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	b943      	cbnz	r3, 800d788 <xTaskResumeAll+0x18>
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	e7fe      	b.n	800d786 <xTaskResumeAll+0x16>
 800d788:	f7ff bf68 	b.w	800d65c <xTaskResumeAll.part.0>
 800d78c:	200014c4 	.word	0x200014c4

0800d790 <prvIdleTask>:
{
 800d790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	4d43      	ldr	r5, [pc, #268]	; (800d8a4 <prvIdleTask+0x114>)
 800d796:	4f44      	ldr	r7, [pc, #272]	; (800d8a8 <prvIdleTask+0x118>)
 800d798:	4e44      	ldr	r6, [pc, #272]	; (800d8ac <prvIdleTask+0x11c>)
 800d79a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800d8bc <prvIdleTask+0x12c>
 800d79e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800d8c0 <prvIdleTask+0x130>
 800d7a2:	f8df a120 	ldr.w	sl, [pc, #288]	; 800d8c4 <prvIdleTask+0x134>
				taskYIELD();
 800d7a6:	f04f 2be0 	mov.w	fp, #3758153728	; 0xe000e000
 800d7aa:	e018      	b.n	800d7de <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
 800d7ac:	f000 fa02 	bl	800dbb4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7b4:	1d20      	adds	r0, r4, #4
 800d7b6:	f7ff fc89 	bl	800d0cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d7ba:	6833      	ldr	r3, [r6, #0]
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800d7c6:	f000 fa17 	bl	800dbf8 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7ca:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800d7ce:	f002 fdfd 	bl	80103cc <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800d7d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d7d4:	f000 fc6e 	bl	800e0b4 <vPortFree>
			vPortFree( pxTCB );
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f000 fc6b 	bl	800e0b4 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7de:	682b      	ldr	r3, [r5, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1e3      	bne.n	800d7ac <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d907      	bls.n	800d7fc <prvIdleTask+0x6c>
				taskYIELD();
 800d7ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7f0:	f8cb 3d04 	str.w	r3, [fp, #3332]	; 0xd04
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800d7fc:	f8d9 3000 	ldr.w	r3, [r9]
 800d800:	2b01      	cmp	r3, #1
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d802:	f8da 3000 	ldr.w	r3, [sl]
 800d806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800d808:	d904      	bls.n	800d814 <prvIdleTask+0x84>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d1e7      	bne.n	800d7de <prvIdleTask+0x4e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d80e:	f8d8 3000 	ldr.w	r3, [r8]
 800d812:	e7e4      	b.n	800d7de <prvIdleTask+0x4e>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e2      	bne.n	800d7de <prvIdleTask+0x4e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d818:	f8d8 3000 	ldr.w	r3, [r8]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d8de      	bhi.n	800d7de <prvIdleTask+0x4e>
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d820:	4923      	ldr	r1, [pc, #140]	; (800d8b0 <prvIdleTask+0x120>)
 800d822:	4824      	ldr	r0, [pc, #144]	; (800d8b4 <prvIdleTask+0x124>)
 800d824:	680b      	ldr	r3, [r1, #0]
 800d826:	6802      	ldr	r2, [r0, #0]
 800d828:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d9d7      	bls.n	800d7de <prvIdleTask+0x4e>
	++uxSchedulerSuspended;
 800d82e:	4a22      	ldr	r2, [pc, #136]	; (800d8b8 <prvIdleTask+0x128>)
 800d830:	6813      	ldr	r3, [r2, #0]
 800d832:	3301      	adds	r3, #1
 800d834:	6013      	str	r3, [r2, #0]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d836:	680a      	ldr	r2, [r1, #0]
 800d838:	6803      	ldr	r3, [r0, #0]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d329      	bcc.n	800d892 <prvIdleTask+0x102>
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800d83e:	f8d9 3000 	ldr.w	r3, [r9]
 800d842:	2b01      	cmp	r3, #1
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d844:	f8da 3000 	ldr.w	r3, [sl]
 800d848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800d84a:	d90c      	bls.n	800d866 <prvIdleTask+0xd6>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d84c:	b1db      	cbz	r3, 800d886 <prvIdleTask+0xf6>
	configASSERT( uxSchedulerSuspended );
 800d84e:	4b1a      	ldr	r3, [pc, #104]	; (800d8b8 <prvIdleTask+0x128>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	b9db      	cbnz	r3, 800d88c <prvIdleTask+0xfc>
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	e7fe      	b.n	800d864 <prvIdleTask+0xd4>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1f1      	bne.n	800d84e <prvIdleTask+0xbe>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d86a:	f8d8 3000 	ldr.w	r3, [r8]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d8ed      	bhi.n	800d84e <prvIdleTask+0xbe>
			xReturn = xNextTaskUnblockTime - xTickCount;
 800d872:	4b0f      	ldr	r3, [pc, #60]	; (800d8b0 <prvIdleTask+0x120>)
 800d874:	6818      	ldr	r0, [r3, #0]
 800d876:	4b0f      	ldr	r3, [pc, #60]	; (800d8b4 <prvIdleTask+0x124>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800d87c:	2801      	cmp	r0, #1
 800d87e:	d9e6      	bls.n	800d84e <prvIdleTask+0xbe>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800d880:	f000 fa16 	bl	800dcb0 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 800d884:	e7e3      	b.n	800d84e <prvIdleTask+0xbe>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800d886:	f8d8 3000 	ldr.w	r3, [r8]
 800d88a:	e7e0      	b.n	800d84e <prvIdleTask+0xbe>
 800d88c:	f7ff fee6 	bl	800d65c <xTaskResumeAll.part.0>
 800d890:	e7a5      	b.n	800d7de <prvIdleTask+0x4e>
 800d892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d896:	f383 8811 	msr	BASEPRI, r3
 800d89a:	f3bf 8f6f 	isb	sy
 800d89e:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800d8a2:	e7fe      	b.n	800d8a2 <prvIdleTask+0x112>
 800d8a4:	200014c0 	.word	0x200014c0
 800d8a8:	20001534 	.word	0x20001534
 800d8ac:	200014bc 	.word	0x200014bc
 800d8b0:	200014fc 	.word	0x200014fc
 800d8b4:	20001548 	.word	0x20001548
 800d8b8:	200014c4 	.word	0x200014c4
 800d8bc:	20001430 	.word	0x20001430
 800d8c0:	200014cc 	.word	0x200014cc
 800d8c4:	20001424 	.word	0x20001424

0800d8c8 <vTaskDelay>:
	{
 800d8c8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8ca:	b950      	cbnz	r0, 800d8e2 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800d8cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800d8d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	f3bf 8f6f 	isb	sy
	}
 800d8e0:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800d8e2:	4c10      	ldr	r4, [pc, #64]	; (800d924 <vTaskDelay+0x5c>)
 800d8e4:	6821      	ldr	r1, [r4, #0]
 800d8e6:	b141      	cbz	r1, 800d8fa <vTaskDelay+0x32>
 800d8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	e7fe      	b.n	800d8f8 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d900:	f7ff fbf8 	bl	800d0f4 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	b943      	cbnz	r3, 800d91a <vTaskDelay+0x52>
 800d908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	e7fe      	b.n	800d918 <vTaskDelay+0x50>
 800d91a:	f7ff fe9f 	bl	800d65c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800d91e:	2800      	cmp	r0, #0
 800d920:	d0d4      	beq.n	800d8cc <vTaskDelay+0x4>
	}
 800d922:	bd10      	pop	{r4, pc}
 800d924:	200014c4 	.word	0x200014c4

0800d928 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d928:	4b18      	ldr	r3, [pc, #96]	; (800d98c <vTaskSwitchContext+0x64>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	b11b      	cbz	r3, 800d936 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800d92e:	4b18      	ldr	r3, [pc, #96]	; (800d990 <vTaskSwitchContext+0x68>)
 800d930:	2201      	movs	r2, #1
 800d932:	601a      	str	r2, [r3, #0]
 800d934:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800d936:	4916      	ldr	r1, [pc, #88]	; (800d990 <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d938:	4a16      	ldr	r2, [pc, #88]	; (800d994 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 800d93a:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d93c:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d93e:	fab3 f383 	clz	r3, r3
 800d942:	b2db      	uxtb	r3, r3
 800d944:	f1c3 031f 	rsb	r3, r3, #31
 800d948:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d94c:	4a12      	ldr	r2, [pc, #72]	; (800d998 <vTaskSwitchContext+0x70>)
 800d94e:	0099      	lsls	r1, r3, #2
 800d950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d954:	5850      	ldr	r0, [r2, r1]
 800d956:	b940      	cbnz	r0, 800d96a <vTaskSwitchContext+0x42>
	__asm volatile
 800d958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95c:	f383 8811 	msr	BASEPRI, r3
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	f3bf 8f4f 	dsb	sy
 800d968:	e7fe      	b.n	800d968 <vTaskSwitchContext+0x40>
 800d96a:	6858      	ldr	r0, [r3, #4]
 800d96c:	3108      	adds	r1, #8
 800d96e:	6840      	ldr	r0, [r0, #4]
 800d970:	6058      	str	r0, [r3, #4]
 800d972:	440a      	add	r2, r1
 800d974:	4290      	cmp	r0, r2
 800d976:	bf04      	itt	eq
 800d978:	6840      	ldreq	r0, [r0, #4]
 800d97a:	6058      	streq	r0, [r3, #4]
 800d97c:	4b07      	ldr	r3, [pc, #28]	; (800d99c <vTaskSwitchContext+0x74>)
 800d97e:	68c2      	ldr	r2, [r0, #12]
 800d980:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a06      	ldr	r2, [pc, #24]	; (800d9a0 <vTaskSwitchContext+0x78>)
 800d986:	334c      	adds	r3, #76	; 0x4c
 800d988:	6013      	str	r3, [r2, #0]
}
 800d98a:	4770      	bx	lr
 800d98c:	200014c4 	.word	0x200014c4
 800d990:	2000154c 	.word	0x2000154c
 800d994:	200014cc 	.word	0x200014cc
 800d998:	20001430 	.word	0x20001430
 800d99c:	20001424 	.word	0x20001424
 800d9a0:	20000200 	.word	0x20000200

0800d9a4 <vTaskSuspend>:
	{
 800d9a4:	b570      	push	{r4, r5, r6, lr}
 800d9a6:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d9a8:	4e38      	ldr	r6, [pc, #224]	; (800da8c <vTaskSuspend+0xe8>)
		taskENTER_CRITICAL();
 800d9aa:	f000 f903 	bl	800dbb4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d9ae:	2c00      	cmp	r4, #0
 800d9b0:	d04d      	beq.n	800da4e <vTaskSuspend+0xaa>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9b2:	1d25      	adds	r5, r4, #4
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f7ff fb89 	bl	800d0cc <uxListRemove>
 800d9ba:	b930      	cbnz	r0, 800d9ca <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d9bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d9be:	4934      	ldr	r1, [pc, #208]	; (800da90 <vTaskSuspend+0xec>)
 800d9c0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	58cb      	ldr	r3, [r1, r3]
 800d9c8:	b34b      	cbz	r3, 800da1e <vTaskSuspend+0x7a>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d9cc:	b11b      	cbz	r3, 800d9d6 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9ce:	f104 0018 	add.w	r0, r4, #24
 800d9d2:	f7ff fb7b 	bl	800d0cc <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d9d6:	4629      	mov	r1, r5
 800d9d8:	482e      	ldr	r0, [pc, #184]	; (800da94 <vTaskSuspend+0xf0>)
		if( xSchedulerRunning != pdFALSE )
 800d9da:	4d2f      	ldr	r5, [pc, #188]	; (800da98 <vTaskSuspend+0xf4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d9dc:	f7ff fb4e 	bl	800d07c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d9e0:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 800d9e4:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9e6:	bf04      	itt	eq
 800d9e8:	2300      	moveq	r3, #0
 800d9ea:	f884 309c 	strbeq.w	r3, [r4, #156]	; 0x9c
		taskEXIT_CRITICAL();
 800d9ee:	f000 f903 	bl	800dbf8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800d9f2:	682b      	ldr	r3, [r5, #0]
 800d9f4:	b9e3      	cbnz	r3, 800da30 <vTaskSuspend+0x8c>
		if( pxTCB == pxCurrentTCB )
 800d9f6:	6833      	ldr	r3, [r6, #0]
 800d9f8:	42a3      	cmp	r3, r4
 800d9fa:	d000      	beq.n	800d9fe <vTaskSuspend+0x5a>
	}
 800d9fc:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 800d9fe:	682b      	ldr	r3, [r5, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d02b      	beq.n	800da5c <vTaskSuspend+0xb8>
				configASSERT( uxSchedulerSuspended == 0 );
 800da04:	4b25      	ldr	r3, [pc, #148]	; (800da9c <vTaskSuspend+0xf8>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d02f      	beq.n	800da6c <vTaskSuspend+0xc8>
 800da0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	e7fe      	b.n	800da1c <vTaskSuspend+0x78>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da1e:	4920      	ldr	r1, [pc, #128]	; (800daa0 <vTaskSuspend+0xfc>)
 800da20:	2301      	movs	r3, #1
 800da22:	fa03 f202 	lsl.w	r2, r3, r2
 800da26:	680b      	ldr	r3, [r1, #0]
 800da28:	ea23 0302 	bic.w	r3, r3, r2
 800da2c:	600b      	str	r3, [r1, #0]
 800da2e:	e7cc      	b.n	800d9ca <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 800da30:	f000 f8c0 	bl	800dbb4 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da34:	4b1b      	ldr	r3, [pc, #108]	; (800daa4 <vTaskSuspend+0x100>)
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	6812      	ldr	r2, [r2, #0]
 800da3a:	b152      	cbz	r2, 800da52 <vTaskSuspend+0xae>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da3c:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da3e:	4b1a      	ldr	r3, [pc, #104]	; (800daa8 <vTaskSuspend+0x104>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da40:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da42:	68d2      	ldr	r2, [r2, #12]
 800da44:	6852      	ldr	r2, [r2, #4]
 800da46:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800da48:	f000 f8d6 	bl	800dbf8 <vPortExitCritical>
 800da4c:	e7d3      	b.n	800d9f6 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800da4e:	6834      	ldr	r4, [r6, #0]
 800da50:	e7af      	b.n	800d9b2 <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800da52:	4b15      	ldr	r3, [pc, #84]	; (800daa8 <vTaskSuspend+0x104>)
 800da54:	f04f 32ff 	mov.w	r2, #4294967295
 800da58:	601a      	str	r2, [r3, #0]
 800da5a:	e7f5      	b.n	800da48 <vTaskSuspend+0xa4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800da5c:	490d      	ldr	r1, [pc, #52]	; (800da94 <vTaskSuspend+0xf0>)
 800da5e:	4a13      	ldr	r2, [pc, #76]	; (800daac <vTaskSuspend+0x108>)
 800da60:	6809      	ldr	r1, [r1, #0]
 800da62:	6812      	ldr	r2, [r2, #0]
 800da64:	4291      	cmp	r1, r2
 800da66:	d10c      	bne.n	800da82 <vTaskSuspend+0xde>
					pxCurrentTCB = NULL;
 800da68:	6033      	str	r3, [r6, #0]
	}
 800da6a:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 800da6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800da70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800da78:	f3bf 8f4f 	dsb	sy
 800da7c:	f3bf 8f6f 	isb	sy
	}
 800da80:	bd70      	pop	{r4, r5, r6, pc}
 800da82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800da86:	f7ff bf4f 	b.w	800d928 <vTaskSwitchContext>
 800da8a:	bf00      	nop
 800da8c:	20001424 	.word	0x20001424
 800da90:	20001430 	.word	0x20001430
 800da94:	20001520 	.word	0x20001520
 800da98:	2000151c 	.word	0x2000151c
 800da9c:	200014c4 	.word	0x200014c4
 800daa0:	200014cc 	.word	0x200014cc
 800daa4:	20001428 	.word	0x20001428
 800daa8:	200014fc 	.word	0x200014fc
 800daac:	200014bc 	.word	0x200014bc

0800dab0 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800dab0:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <eTaskConfirmSleepModeStatus+0x28>)
 800dab2:	6818      	ldr	r0, [r3, #0]
 800dab4:	b918      	cbnz	r0, 800dabe <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
 800dab6:	4b09      	ldr	r3, [pc, #36]	; (800dadc <eTaskConfirmSleepModeStatus+0x2c>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	b113      	cbz	r3, 800dac2 <eTaskConfirmSleepModeStatus+0x12>
	}
 800dabc:	4770      	bx	lr
			eReturn = eAbortSleep;
 800dabe:	2000      	movs	r0, #0
	}
 800dac0:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800dac2:	4a07      	ldr	r2, [pc, #28]	; (800dae0 <eTaskConfirmSleepModeStatus+0x30>)
 800dac4:	4b07      	ldr	r3, [pc, #28]	; (800dae4 <eTaskConfirmSleepModeStatus+0x34>)
 800dac6:	6810      	ldr	r0, [r2, #0]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3b01      	subs	r3, #1
				eReturn = eNoTasksWaitingTimeout;
 800dacc:	4298      	cmp	r0, r3
 800dace:	bf14      	ite	ne
 800dad0:	2001      	movne	r0, #1
 800dad2:	2002      	moveq	r0, #2
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	20001508 	.word	0x20001508
 800dadc:	2000154c 	.word	0x2000154c
 800dae0:	20001520 	.word	0x20001520
 800dae4:	200014bc 	.word	0x200014bc

0800dae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dae8:	4808      	ldr	r0, [pc, #32]	; (800db0c <prvPortStartFirstTask+0x24>)
 800daea:	6800      	ldr	r0, [r0, #0]
 800daec:	6800      	ldr	r0, [r0, #0]
 800daee:	f380 8808 	msr	MSP, r0
 800daf2:	f04f 0000 	mov.w	r0, #0
 800daf6:	f380 8814 	msr	CONTROL, r0
 800dafa:	b662      	cpsie	i
 800dafc:	b661      	cpsie	f
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	df00      	svc	0
 800db08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db0a:	0000      	.short	0x0000
 800db0c:	e000ed08 	.word	0xe000ed08

0800db10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db20 <vPortEnableVFP+0x10>
 800db14:	6801      	ldr	r1, [r0, #0]
 800db16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db1a:	6001      	str	r1, [r0, #0]
 800db1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db1e:	0000      	.short	0x0000
 800db20:	e000ed88 	.word	0xe000ed88

0800db24 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800db24:	4b0e      	ldr	r3, [pc, #56]	; (800db60 <prvTaskExitError+0x3c>)
 800db26:	681b      	ldr	r3, [r3, #0]
{
 800db28:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800db2a:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800db2c:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800db2e:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800db30:	d008      	beq.n	800db44 <prvTaskExitError+0x20>
 800db32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db36:	f383 8811 	msr	BASEPRI, r3
 800db3a:	f3bf 8f6f 	isb	sy
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	e7fe      	b.n	800db42 <prvTaskExitError+0x1e>
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800db54:	9b01      	ldr	r3, [sp, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d0fc      	beq.n	800db54 <prvTaskExitError+0x30>
}
 800db5a:	b002      	add	sp, #8
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop
 800db60:	20000038 	.word	0x20000038

0800db64 <pxPortInitialiseStack>:
{
 800db64:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db6a:	4c07      	ldr	r4, [pc, #28]	; (800db88 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db6c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db70:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db74:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db78:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db7c:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 800db80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db84:	3844      	subs	r0, #68	; 0x44
 800db86:	4770      	bx	lr
 800db88:	0800db25 	.word	0x0800db25
 800db8c:	00000000 	.word	0x00000000

0800db90 <SVC_Handler>:
	__asm volatile (
 800db90:	4b07      	ldr	r3, [pc, #28]	; (800dbb0 <pxCurrentTCBConst2>)
 800db92:	6819      	ldr	r1, [r3, #0]
 800db94:	6808      	ldr	r0, [r1, #0]
 800db96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9a:	f380 8809 	msr	PSP, r0
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f04f 0000 	mov.w	r0, #0
 800dba6:	f380 8811 	msr	BASEPRI, r0
 800dbaa:	4770      	bx	lr
 800dbac:	f3af 8000 	nop.w

0800dbb0 <pxCurrentTCBConst2>:
 800dbb0:	20001424 	.word	0x20001424

0800dbb4 <vPortEnterCritical>:
 800dbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800dbc4:	4a0b      	ldr	r2, [pc, #44]	; (800dbf4 <vPortEnterCritical+0x40>)
 800dbc6:	6813      	ldr	r3, [r2, #0]
 800dbc8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800dbca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800dbcc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800dbce:	d000      	beq.n	800dbd2 <vPortEnterCritical+0x1e>
}
 800dbd0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbd2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dbd6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d0f7      	beq.n	800dbd0 <vPortEnterCritical+0x1c>
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	e7fe      	b.n	800dbf0 <vPortEnterCritical+0x3c>
 800dbf2:	bf00      	nop
 800dbf4:	20000038 	.word	0x20000038

0800dbf8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800dbf8:	4a08      	ldr	r2, [pc, #32]	; (800dc1c <vPortExitCritical+0x24>)
 800dbfa:	6813      	ldr	r3, [r2, #0]
 800dbfc:	b943      	cbnz	r3, 800dc10 <vPortExitCritical+0x18>
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	e7fe      	b.n	800dc0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800dc10:	3b01      	subs	r3, #1
 800dc12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc14:	b90b      	cbnz	r3, 800dc1a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc16:	f383 8811 	msr	BASEPRI, r3
}
 800dc1a:	4770      	bx	lr
 800dc1c:	20000038 	.word	0x20000038

0800dc20 <PendSV_Handler>:
	__asm volatile
 800dc20:	f3ef 8009 	mrs	r0, PSP
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	4b15      	ldr	r3, [pc, #84]	; (800dc80 <pxCurrentTCBConst>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	f01e 0f10 	tst.w	lr, #16
 800dc30:	bf08      	it	eq
 800dc32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3a:	6010      	str	r0, [r2, #0]
 800dc3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc44:	f380 8811 	msr	BASEPRI, r0
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	f7ff fe6a 	bl	800d928 <vTaskSwitchContext>
 800dc54:	f04f 0000 	mov.w	r0, #0
 800dc58:	f380 8811 	msr	BASEPRI, r0
 800dc5c:	bc09      	pop	{r0, r3}
 800dc5e:	6819      	ldr	r1, [r3, #0]
 800dc60:	6808      	ldr	r0, [r1, #0]
 800dc62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc66:	f01e 0f10 	tst.w	lr, #16
 800dc6a:	bf08      	it	eq
 800dc6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc70:	f380 8809 	msr	PSP, r0
 800dc74:	f3bf 8f6f 	isb	sy
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	f3af 8000 	nop.w

0800dc80 <pxCurrentTCBConst>:
 800dc80:	20001424 	.word	0x20001424

0800dc84 <SysTick_Handler>:
{
 800dc84:	b508      	push	{r3, lr}
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800dc96:	f7ff fc27 	bl	800d4e8 <xTaskIncrementTick>
 800dc9a:	b128      	cbz	r0, 800dca8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800dca8:	2300      	movs	r3, #0
 800dcaa:	f383 8811 	msr	BASEPRI, r3
}
 800dcae:	bd08      	pop	{r3, pc}

0800dcb0 <vPortSuppressTicksAndSleep>:
	{
 800dcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800dcb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800dcb8:	493b      	ldr	r1, [pc, #236]	; (800dda8 <vPortSuppressTicksAndSleep+0xf8>)
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800dcba:	691a      	ldr	r2, [r3, #16]
 800dcbc:	680e      	ldr	r6, [r1, #0]
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800dcbe:	4f3b      	ldr	r7, [pc, #236]	; (800ddac <vPortSuppressTicksAndSleep+0xfc>)
		if( ulReloadValue > ulStoppedTimerCompensation )
 800dcc0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800ddb0 <vPortSuppressTicksAndSleep+0x100>
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800dcc4:	f022 0201 	bic.w	r2, r2, #1
 800dcc8:	611a      	str	r2, [r3, #16]
 800dcca:	4286      	cmp	r6, r0
 800dccc:	bf28      	it	cs
 800dcce:	4606      	movcs	r6, r0
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800dcd0:	699c      	ldr	r4, [r3, #24]
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	f106 38ff 	add.w	r8, r6, #4294967295
 800dcd8:	fb03 4408 	mla	r4, r3, r8, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 800dcdc:	f8d9 3000 	ldr.w	r3, [r9]
 800dce0:	42a3      	cmp	r3, r4
			ulReloadValue -= ulStoppedTimerCompensation;
 800dce2:	bf38      	it	cc
 800dce4:	1ae4      	subcc	r4, r4, r3
		__asm volatile( "cpsid i" ::: "memory" );
 800dce6:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800dce8:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800dcec:	f3bf 8f6f 	isb	sy
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800dcf0:	f7ff fede 	bl	800dab0 <eTaskConfirmSleepModeStatus>
 800dcf4:	b968      	cbnz	r0, 800dd12 <vPortSuppressTicksAndSleep+0x62>
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800dcf6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dcfa:	699a      	ldr	r2, [r3, #24]
 800dcfc:	615a      	str	r2, [r3, #20]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800dcfe:	691a      	ldr	r2, [r3, #16]
 800dd00:	f042 0201 	orr.w	r2, r2, #1
 800dd04:	611a      	str	r2, [r3, #16]
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	3a01      	subs	r2, #1
 800dd0a:	615a      	str	r2, [r3, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800dd0c:	b662      	cpsie	i
	}
 800dd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800dd12:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd16:	2000      	movs	r0, #0
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800dd18:	616c      	str	r4, [r5, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd1a:	61a8      	str	r0, [r5, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800dd1c:	692b      	ldr	r3, [r5, #16]
 800dd1e:	f043 0301 	orr.w	r3, r3, #1
 800dd22:	612b      	str	r3, [r5, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800dd24:	f7f6 fcac 	bl	8004680 <PreSleepProcessing>
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7f6 fcab 	bl	8004684 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800dd2e:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800dd30:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800dd34:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800dd38:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800dd3a:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800dd3e:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800dd42:	2306      	movs	r3, #6
 800dd44:	612b      	str	r3, [r5, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800dd46:	692b      	ldr	r3, [r5, #16]
 800dd48:	03db      	lsls	r3, r3, #15
 800dd4a:	d50f      	bpl.n	800dd6c <vPortSuppressTicksAndSleep+0xbc>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800dd4c:	69ab      	ldr	r3, [r5, #24]
 800dd4e:	683a      	ldr	r2, [r7, #0]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800dd50:	f8d9 1000 	ldr.w	r1, [r9]
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800dd54:	4413      	add	r3, r2
 800dd56:	3b01      	subs	r3, #1
 800dd58:	1b1b      	subs	r3, r3, r4
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800dd5a:	4299      	cmp	r1, r3
 800dd5c:	d801      	bhi.n	800dd62 <vPortSuppressTicksAndSleep+0xb2>
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d200      	bcs.n	800dd64 <vPortSuppressTicksAndSleep+0xb4>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800dd62:	1e53      	subs	r3, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800dd64:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800dd68:	6153      	str	r3, [r2, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800dd6a:	e00c      	b.n	800dd86 <vPortSuppressTicksAndSleep+0xd6>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	69aa      	ldr	r2, [r5, #24]
 800dd70:	fb06 f003 	mul.w	r0, r6, r3
 800dd74:	eba0 0802 	sub.w	r8, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800dd78:	1a12      	subs	r2, r2, r0
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800dd7a:	fbb8 f8f3 	udiv	r8, r8, r3
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800dd7e:	fb08 3303 	mla	r3, r8, r3, r3
 800dd82:	4413      	add	r3, r2
 800dd84:	616b      	str	r3, [r5, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd86:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800dd8e:	6923      	ldr	r3, [r4, #16]
 800dd90:	f043 0301 	orr.w	r3, r3, #1
 800dd94:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 800dd96:	4640      	mov	r0, r8
 800dd98:	f7ff fb8e 	bl	800d4b8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800dda2:	b662      	cpsie	i
	}
 800dda4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dda8:	20001560 	.word	0x20001560
 800ddac:	2000155c 	.word	0x2000155c
 800ddb0:	20001558 	.word	0x20001558

0800ddb4 <vPortSetupTimerInterrupt>:
{
 800ddb4:	b4f0      	push	{r4, r5, r6, r7}
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800ddb6:	4c10      	ldr	r4, [pc, #64]	; (800ddf8 <vPortSetupTimerInterrupt+0x44>)
 800ddb8:	4910      	ldr	r1, [pc, #64]	; (800ddfc <vPortSetupTimerInterrupt+0x48>)
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	4a10      	ldr	r2, [pc, #64]	; (800de00 <vPortSetupTimerInterrupt+0x4c>)
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800ddbe:	4e11      	ldr	r6, [pc, #68]	; (800de04 <vPortSetupTimerInterrupt+0x50>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800ddc0:	fba1 0303 	umull	r0, r3, r1, r3
 800ddc4:	099b      	lsrs	r3, r3, #6
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800ddc6:	4810      	ldr	r0, [pc, #64]	; (800de08 <vPortSetupTimerInterrupt+0x54>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800ddc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ddca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800ddce:	2500      	movs	r5, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800ddd0:	272d      	movs	r7, #45	; 0x2d
 800ddd2:	6007      	str	r7, [r0, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800ddd4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ddd8:	fbb0 f3f3 	udiv	r3, r0, r3
 800dddc:	6033      	str	r3, [r6, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ddde:	6115      	str	r5, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dde0:	6195      	str	r5, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	fba1 1303 	umull	r1, r3, r1, r3
 800dde8:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddea:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ddec:	3b01      	subs	r3, #1
 800ddee:	6153      	str	r3, [r2, #20]
}
 800ddf0:	bcf0      	pop	{r4, r5, r6, r7}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddf2:	6110      	str	r0, [r2, #16]
}
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20000008 	.word	0x20000008
 800ddfc:	10624dd3 	.word	0x10624dd3
 800de00:	2000155c 	.word	0x2000155c
 800de04:	20001560 	.word	0x20001560
 800de08:	20001558 	.word	0x20001558

0800de0c <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800de0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800de10:	4a3e      	ldr	r2, [pc, #248]	; (800df0c <xPortStartScheduler+0x100>)
 800de12:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800de16:	4291      	cmp	r1, r2
 800de18:	d043      	beq.n	800dea2 <xPortStartScheduler+0x96>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de1a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800de1e:	4b3c      	ldr	r3, [pc, #240]	; (800df10 <xPortStartScheduler+0x104>)
 800de20:	429a      	cmp	r2, r3
 800de22:	d035      	beq.n	800de90 <xPortStartScheduler+0x84>
{
 800de24:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de26:	4b3b      	ldr	r3, [pc, #236]	; (800df14 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de28:	483b      	ldr	r0, [pc, #236]	; (800df18 <xPortStartScheduler+0x10c>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de2a:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de2c:	4c3b      	ldr	r4, [pc, #236]	; (800df1c <xPortStartScheduler+0x110>)
{
 800de2e:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de30:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de32:	b2d2      	uxtb	r2, r2
 800de34:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de36:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de40:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de44:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de48:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de4c:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de4e:	7003      	strb	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de50:	0610      	lsls	r0, r2, #24
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800de52:	6021      	str	r1, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de54:	bf48      	it	mi
 800de56:	2206      	movmi	r2, #6
 800de58:	d511      	bpl.n	800de7e <xPortStartScheduler+0x72>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800de5a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800de5e:	005b      	lsls	r3, r3, #1
 800de60:	b2db      	uxtb	r3, r3
 800de62:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800de66:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800de6a:	0609      	lsls	r1, r1, #24
 800de6c:	4610      	mov	r0, r2
 800de6e:	f102 32ff 	add.w	r2, r2, #4294967295
 800de72:	d4f2      	bmi.n	800de5a <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800de74:	2803      	cmp	r0, #3
 800de76:	6020      	str	r0, [r4, #0]
 800de78:	f88d 3003 	strb.w	r3, [sp, #3]
 800de7c:	d01a      	beq.n	800deb4 <xPortStartScheduler+0xa8>
	__asm volatile
 800de7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	e7fe      	b.n	800de8e <xPortStartScheduler+0x82>
 800de90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de94:	f383 8811 	msr	BASEPRI, r3
 800de98:	f3bf 8f6f 	isb	sy
 800de9c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dea0:	e7fe      	b.n	800dea0 <xPortStartScheduler+0x94>
 800dea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800deb2:	e7fe      	b.n	800deb2 <xPortStartScheduler+0xa6>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800deb4:	9b01      	ldr	r3, [sp, #4]
 800deb6:	4a17      	ldr	r2, [pc, #92]	; (800df14 <xPortStartScheduler+0x108>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800deb8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800debc:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dec0:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dec2:	6021      	str	r1, [r4, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dec4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dec6:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 800deca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dece:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ded2:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 800ded6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800deda:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800dede:	f7ff ff69 	bl	800ddb4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800dee2:	4b0f      	ldr	r3, [pc, #60]	; (800df20 <xPortStartScheduler+0x114>)
 800dee4:	2400      	movs	r4, #0
 800dee6:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800dee8:	f7ff fe12 	bl	800db10 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800deec:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 800def0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800def4:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 800def8:	f7ff fdf6 	bl	800dae8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800defc:	f7ff fd14 	bl	800d928 <vTaskSwitchContext>
	prvTaskExitError();
 800df00:	f7ff fe10 	bl	800db24 <prvTaskExitError>
}
 800df04:	4620      	mov	r0, r4
 800df06:	b003      	add	sp, #12
 800df08:	bd30      	pop	{r4, r5, pc}
 800df0a:	bf00      	nop
 800df0c:	410fc271 	.word	0x410fc271
 800df10:	410fc270 	.word	0x410fc270
 800df14:	e000e400 	.word	0xe000e400
 800df18:	20001550 	.word	0x20001550
 800df1c:	20001554 	.word	0x20001554
 800df20:	20000038 	.word	0x20000038

0800df24 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df24:	4b16      	ldr	r3, [pc, #88]	; (800df80 <prvInsertBlockIntoFreeList+0x5c>)
 800df26:	461a      	mov	r2, r3
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4283      	cmp	r3, r0
 800df2c:	d3fb      	bcc.n	800df26 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df2e:	6851      	ldr	r1, [r2, #4]
 800df30:	eb02 0c01 	add.w	ip, r2, r1
 800df34:	4560      	cmp	r0, ip
 800df36:	d01a      	beq.n	800df6e <prvInsertBlockIntoFreeList+0x4a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df38:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df3a:	eb00 0c01 	add.w	ip, r0, r1
 800df3e:	4563      	cmp	r3, ip
 800df40:	d005      	beq.n	800df4e <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df42:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df44:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df46:	bf18      	it	ne
 800df48:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800df4a:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df4c:	4610      	mov	r0, r2
{
 800df4e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df50:	4c0c      	ldr	r4, [pc, #48]	; (800df84 <prvInsertBlockIntoFreeList+0x60>)
 800df52:	6824      	ldr	r4, [r4, #0]
 800df54:	42a3      	cmp	r3, r4
 800df56:	d003      	beq.n	800df60 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df58:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df5c:	4421      	add	r1, r4
 800df5e:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 800df60:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df62:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800df64:	d000      	beq.n	800df68 <prvInsertBlockIntoFreeList+0x44>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df66:	6010      	str	r0, [r2, #0]
	}
}
 800df68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df6c:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df6e:	6840      	ldr	r0, [r0, #4]
 800df70:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df72:	1850      	adds	r0, r2, r1
 800df74:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df76:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df78:	d0e8      	beq.n	800df4c <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df7a:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	2000557c 	.word	0x2000557c
 800df84:	20001564 	.word	0x20001564

0800df88 <pvPortMalloc>:
{
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800df8c:	4e42      	ldr	r6, [pc, #264]	; (800e098 <pvPortMalloc+0x110>)
{
 800df8e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800df90:	f7ff fa8a 	bl	800d4a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800df94:	6833      	ldr	r3, [r6, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d05b      	beq.n	800e052 <pvPortMalloc+0xca>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df9a:	4b40      	ldr	r3, [pc, #256]	; (800e09c <pvPortMalloc+0x114>)
 800df9c:	681d      	ldr	r5, [r3, #0]
 800df9e:	422c      	tst	r4, r5
 800dfa0:	d12f      	bne.n	800e002 <pvPortMalloc+0x7a>
			if( xWantedSize > 0 )
 800dfa2:	b374      	cbz	r4, 800e002 <pvPortMalloc+0x7a>
				xWantedSize += xHeapStructSize;
 800dfa4:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dfa8:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dfaa:	bf1c      	itt	ne
 800dfac:	f021 0107 	bicne.w	r1, r1, #7
 800dfb0:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dfb2:	b331      	cbz	r1, 800e002 <pvPortMalloc+0x7a>
 800dfb4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800e0b0 <pvPortMalloc+0x128>
 800dfb8:	f8d8 7000 	ldr.w	r7, [r8]
 800dfbc:	428f      	cmp	r7, r1
 800dfbe:	d320      	bcc.n	800e002 <pvPortMalloc+0x7a>
				pxBlock = xStart.pxNextFreeBlock;
 800dfc0:	4837      	ldr	r0, [pc, #220]	; (800e0a0 <pvPortMalloc+0x118>)
 800dfc2:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfc4:	e003      	b.n	800dfce <pvPortMalloc+0x46>
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	b123      	cbz	r3, 800dfd4 <pvPortMalloc+0x4c>
 800dfca:	4620      	mov	r0, r4
 800dfcc:	461c      	mov	r4, r3
 800dfce:	6862      	ldr	r2, [r4, #4]
 800dfd0:	428a      	cmp	r2, r1
 800dfd2:	d3f8      	bcc.n	800dfc6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800dfd4:	6833      	ldr	r3, [r6, #0]
 800dfd6:	42a3      	cmp	r3, r4
 800dfd8:	d013      	beq.n	800e002 <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dfda:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfdc:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dfde:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dfe0:	1a53      	subs	r3, r2, r1
 800dfe2:	2b10      	cmp	r3, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfe4:	f106 0608 	add.w	r6, r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dfe8:	d916      	bls.n	800e018 <pvPortMalloc+0x90>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dfea:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfec:	0742      	lsls	r2, r0, #29
 800dfee:	d00e      	beq.n	800e00e <pvPortMalloc+0x86>
 800dff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	e7fe      	b.n	800e000 <pvPortMalloc+0x78>
	( void ) xTaskResumeAll();
 800e002:	f7ff fbb5 	bl	800d770 <xTaskResumeAll>
 800e006:	2600      	movs	r6, #0
}
 800e008:	4630      	mov	r0, r6
 800e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e00e:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e010:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e012:	f7ff ff87 	bl	800df24 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e016:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e018:	4b22      	ldr	r3, [pc, #136]	; (800e0a4 <pvPortMalloc+0x11c>)
					xNumberOfSuccessfulAllocations++;
 800e01a:	4923      	ldr	r1, [pc, #140]	; (800e0a8 <pvPortMalloc+0x120>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e01c:	6818      	ldr	r0, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e01e:	1abf      	subs	r7, r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e020:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e022:	bf38      	it	cc
 800e024:	601f      	strcc	r7, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e026:	680b      	ldr	r3, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e028:	f8c8 7000 	str.w	r7, [r8]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e02c:	4315      	orrs	r5, r2
					pxBlock->pxNextFreeBlock = NULL;
 800e02e:	2200      	movs	r2, #0
					xNumberOfSuccessfulAllocations++;
 800e030:	3301      	adds	r3, #1
					pxBlock->pxNextFreeBlock = NULL;
 800e032:	e9c4 2500 	strd	r2, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 800e036:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800e038:	f7ff fb9a 	bl	800d770 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e03c:	0773      	lsls	r3, r6, #29
 800e03e:	d0e3      	beq.n	800e008 <pvPortMalloc+0x80>
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	e7fe      	b.n	800e050 <pvPortMalloc+0xc8>
	uxAddress = ( size_t ) ucHeap;
 800e052:	4a16      	ldr	r2, [pc, #88]	; (800e0ac <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e054:	0755      	lsls	r5, r2, #29
 800e056:	d118      	bne.n	800e08a <pvPortMalloc+0x102>
 800e058:	f502 4380 	add.w	r3, r2, #16384	; 0x4000
 800e05c:	4611      	mov	r1, r2
	uxAddress -= xHeapStructSize;
 800e05e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e060:	f023 0307 	bic.w	r3, r3, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e064:	480f      	ldr	r0, [pc, #60]	; (800e0a4 <pvPortMalloc+0x11c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e066:	4d0e      	ldr	r5, [pc, #56]	; (800e0a0 <pvPortMalloc+0x118>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e068:	4f0c      	ldr	r7, [pc, #48]	; (800e09c <pvPortMalloc+0x114>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e06a:	6029      	str	r1, [r5, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e06c:	1a9a      	subs	r2, r3, r2
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e06e:	6002      	str	r2, [r0, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e070:	480f      	ldr	r0, [pc, #60]	; (800e0b0 <pvPortMalloc+0x128>)
	pxEnd = ( void * ) uxAddress;
 800e072:	6033      	str	r3, [r6, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e074:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e076:	2000      	movs	r0, #0
 800e078:	6068      	str	r0, [r5, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e07a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 800e07e:	e9c3 0000 	strd	r0, r0, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e082:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e084:	e9c1 3200 	strd	r3, r2, [r1]
}
 800e088:	e789      	b.n	800df9e <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e08a:	1dd1      	adds	r1, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e08c:	f021 0107 	bic.w	r1, r1, #7
 800e090:	f502 4380 	add.w	r3, r2, #16384	; 0x4000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e094:	460a      	mov	r2, r1
 800e096:	e7e2      	b.n	800e05e <pvPortMalloc+0xd6>
 800e098:	20001564 	.word	0x20001564
 800e09c:	20005568 	.word	0x20005568
 800e0a0:	2000557c 	.word	0x2000557c
 800e0a4:	20005570 	.word	0x20005570
 800e0a8:	20005574 	.word	0x20005574
 800e0ac:	20001568 	.word	0x20001568
 800e0b0:	2000556c 	.word	0x2000556c

0800e0b4 <vPortFree>:
	if( pv != NULL )
 800e0b4:	b1d0      	cbz	r0, 800e0ec <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0b6:	4a1c      	ldr	r2, [pc, #112]	; (800e128 <vPortFree+0x74>)
 800e0b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e0bc:	6812      	ldr	r2, [r2, #0]
 800e0be:	4213      	tst	r3, r2
 800e0c0:	d00b      	beq.n	800e0da <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e0c2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e0c6:	b191      	cbz	r1, 800e0ee <vPortFree+0x3a>
 800e0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0cc:	f383 8811 	msr	BASEPRI, r3
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	e7fe      	b.n	800e0d8 <vPortFree+0x24>
 800e0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0ea:	e7fe      	b.n	800e0ea <vPortFree+0x36>
 800e0ec:	4770      	bx	lr
{
 800e0ee:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e0f0:	ea23 0302 	bic.w	r3, r3, r2
{
 800e0f4:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e0f6:	f840 3c04 	str.w	r3, [r0, #-4]
 800e0fa:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800e0fc:	f7ff f9d4 	bl	800d4a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e100:	4a0a      	ldr	r2, [pc, #40]	; (800e12c <vPortFree+0x78>)
 800e102:	9801      	ldr	r0, [sp, #4]
 800e104:	6811      	ldr	r1, [r2, #0]
 800e106:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e10a:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e10c:	440b      	add	r3, r1
 800e10e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e110:	f7ff ff08 	bl	800df24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e114:	4a06      	ldr	r2, [pc, #24]	; (800e130 <vPortFree+0x7c>)
 800e116:	6813      	ldr	r3, [r2, #0]
 800e118:	3301      	adds	r3, #1
 800e11a:	6013      	str	r3, [r2, #0]
}
 800e11c:	b003      	add	sp, #12
 800e11e:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 800e122:	f7ff bb25 	b.w	800d770 <xTaskResumeAll>
 800e126:	bf00      	nop
 800e128:	20005568 	.word	0x20005568
 800e12c:	2000556c 	.word	0x2000556c
 800e130:	20005578 	.word	0x20005578

0800e134 <atoi>:
 800e134:	220a      	movs	r2, #10
 800e136:	2100      	movs	r1, #0
 800e138:	f000 bfb2 	b.w	800f0a0 <strtol>

0800e13c <malloc>:
 800e13c:	4b02      	ldr	r3, [pc, #8]	; (800e148 <malloc+0xc>)
 800e13e:	4601      	mov	r1, r0
 800e140:	6818      	ldr	r0, [r3, #0]
 800e142:	f000 b823 	b.w	800e18c <_malloc_r>
 800e146:	bf00      	nop
 800e148:	20000200 	.word	0x20000200

0800e14c <sbrk_aligned>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	4e0e      	ldr	r6, [pc, #56]	; (800e188 <sbrk_aligned+0x3c>)
 800e150:	460c      	mov	r4, r1
 800e152:	6831      	ldr	r1, [r6, #0]
 800e154:	4605      	mov	r5, r0
 800e156:	b911      	cbnz	r1, 800e15e <sbrk_aligned+0x12>
 800e158:	f002 f9b2 	bl	80104c0 <_sbrk_r>
 800e15c:	6030      	str	r0, [r6, #0]
 800e15e:	4621      	mov	r1, r4
 800e160:	4628      	mov	r0, r5
 800e162:	f002 f9ad 	bl	80104c0 <_sbrk_r>
 800e166:	1c43      	adds	r3, r0, #1
 800e168:	d00a      	beq.n	800e180 <sbrk_aligned+0x34>
 800e16a:	1cc4      	adds	r4, r0, #3
 800e16c:	f024 0403 	bic.w	r4, r4, #3
 800e170:	42a0      	cmp	r0, r4
 800e172:	d007      	beq.n	800e184 <sbrk_aligned+0x38>
 800e174:	1a21      	subs	r1, r4, r0
 800e176:	4628      	mov	r0, r5
 800e178:	f002 f9a2 	bl	80104c0 <_sbrk_r>
 800e17c:	3001      	adds	r0, #1
 800e17e:	d101      	bne.n	800e184 <sbrk_aligned+0x38>
 800e180:	f04f 34ff 	mov.w	r4, #4294967295
 800e184:	4620      	mov	r0, r4
 800e186:	bd70      	pop	{r4, r5, r6, pc}
 800e188:	20005588 	.word	0x20005588

0800e18c <_malloc_r>:
 800e18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e190:	1ccd      	adds	r5, r1, #3
 800e192:	f025 0503 	bic.w	r5, r5, #3
 800e196:	3508      	adds	r5, #8
 800e198:	2d0c      	cmp	r5, #12
 800e19a:	bf38      	it	cc
 800e19c:	250c      	movcc	r5, #12
 800e19e:	2d00      	cmp	r5, #0
 800e1a0:	4607      	mov	r7, r0
 800e1a2:	db01      	blt.n	800e1a8 <_malloc_r+0x1c>
 800e1a4:	42a9      	cmp	r1, r5
 800e1a6:	d905      	bls.n	800e1b4 <_malloc_r+0x28>
 800e1a8:	230c      	movs	r3, #12
 800e1aa:	603b      	str	r3, [r7, #0]
 800e1ac:	2600      	movs	r6, #0
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e288 <_malloc_r+0xfc>
 800e1b8:	f000 f868 	bl	800e28c <__malloc_lock>
 800e1bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e1c0:	461c      	mov	r4, r3
 800e1c2:	bb5c      	cbnz	r4, 800e21c <_malloc_r+0x90>
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	4638      	mov	r0, r7
 800e1c8:	f7ff ffc0 	bl	800e14c <sbrk_aligned>
 800e1cc:	1c43      	adds	r3, r0, #1
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	d155      	bne.n	800e27e <_malloc_r+0xf2>
 800e1d2:	f8d8 4000 	ldr.w	r4, [r8]
 800e1d6:	4626      	mov	r6, r4
 800e1d8:	2e00      	cmp	r6, #0
 800e1da:	d145      	bne.n	800e268 <_malloc_r+0xdc>
 800e1dc:	2c00      	cmp	r4, #0
 800e1de:	d048      	beq.n	800e272 <_malloc_r+0xe6>
 800e1e0:	6823      	ldr	r3, [r4, #0]
 800e1e2:	4631      	mov	r1, r6
 800e1e4:	4638      	mov	r0, r7
 800e1e6:	eb04 0903 	add.w	r9, r4, r3
 800e1ea:	f002 f969 	bl	80104c0 <_sbrk_r>
 800e1ee:	4581      	cmp	r9, r0
 800e1f0:	d13f      	bne.n	800e272 <_malloc_r+0xe6>
 800e1f2:	6821      	ldr	r1, [r4, #0]
 800e1f4:	1a6d      	subs	r5, r5, r1
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	f7ff ffa7 	bl	800e14c <sbrk_aligned>
 800e1fe:	3001      	adds	r0, #1
 800e200:	d037      	beq.n	800e272 <_malloc_r+0xe6>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	442b      	add	r3, r5
 800e206:	6023      	str	r3, [r4, #0]
 800e208:	f8d8 3000 	ldr.w	r3, [r8]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d038      	beq.n	800e282 <_malloc_r+0xf6>
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	42a2      	cmp	r2, r4
 800e214:	d12b      	bne.n	800e26e <_malloc_r+0xe2>
 800e216:	2200      	movs	r2, #0
 800e218:	605a      	str	r2, [r3, #4]
 800e21a:	e00f      	b.n	800e23c <_malloc_r+0xb0>
 800e21c:	6822      	ldr	r2, [r4, #0]
 800e21e:	1b52      	subs	r2, r2, r5
 800e220:	d41f      	bmi.n	800e262 <_malloc_r+0xd6>
 800e222:	2a0b      	cmp	r2, #11
 800e224:	d917      	bls.n	800e256 <_malloc_r+0xca>
 800e226:	1961      	adds	r1, r4, r5
 800e228:	42a3      	cmp	r3, r4
 800e22a:	6025      	str	r5, [r4, #0]
 800e22c:	bf18      	it	ne
 800e22e:	6059      	strne	r1, [r3, #4]
 800e230:	6863      	ldr	r3, [r4, #4]
 800e232:	bf08      	it	eq
 800e234:	f8c8 1000 	streq.w	r1, [r8]
 800e238:	5162      	str	r2, [r4, r5]
 800e23a:	604b      	str	r3, [r1, #4]
 800e23c:	4638      	mov	r0, r7
 800e23e:	f104 060b 	add.w	r6, r4, #11
 800e242:	f000 f829 	bl	800e298 <__malloc_unlock>
 800e246:	f026 0607 	bic.w	r6, r6, #7
 800e24a:	1d23      	adds	r3, r4, #4
 800e24c:	1af2      	subs	r2, r6, r3
 800e24e:	d0ae      	beq.n	800e1ae <_malloc_r+0x22>
 800e250:	1b9b      	subs	r3, r3, r6
 800e252:	50a3      	str	r3, [r4, r2]
 800e254:	e7ab      	b.n	800e1ae <_malloc_r+0x22>
 800e256:	42a3      	cmp	r3, r4
 800e258:	6862      	ldr	r2, [r4, #4]
 800e25a:	d1dd      	bne.n	800e218 <_malloc_r+0x8c>
 800e25c:	f8c8 2000 	str.w	r2, [r8]
 800e260:	e7ec      	b.n	800e23c <_malloc_r+0xb0>
 800e262:	4623      	mov	r3, r4
 800e264:	6864      	ldr	r4, [r4, #4]
 800e266:	e7ac      	b.n	800e1c2 <_malloc_r+0x36>
 800e268:	4634      	mov	r4, r6
 800e26a:	6876      	ldr	r6, [r6, #4]
 800e26c:	e7b4      	b.n	800e1d8 <_malloc_r+0x4c>
 800e26e:	4613      	mov	r3, r2
 800e270:	e7cc      	b.n	800e20c <_malloc_r+0x80>
 800e272:	230c      	movs	r3, #12
 800e274:	603b      	str	r3, [r7, #0]
 800e276:	4638      	mov	r0, r7
 800e278:	f000 f80e 	bl	800e298 <__malloc_unlock>
 800e27c:	e797      	b.n	800e1ae <_malloc_r+0x22>
 800e27e:	6025      	str	r5, [r4, #0]
 800e280:	e7dc      	b.n	800e23c <_malloc_r+0xb0>
 800e282:	605b      	str	r3, [r3, #4]
 800e284:	deff      	udf	#255	; 0xff
 800e286:	bf00      	nop
 800e288:	20005584 	.word	0x20005584

0800e28c <__malloc_lock>:
 800e28c:	4801      	ldr	r0, [pc, #4]	; (800e294 <__malloc_lock+0x8>)
 800e28e:	f7fa bb17 	b.w	80088c0 <__retarget_lock_acquire_recursive>
 800e292:	bf00      	nop
 800e294:	20001408 	.word	0x20001408

0800e298 <__malloc_unlock>:
 800e298:	4801      	ldr	r0, [pc, #4]	; (800e2a0 <__malloc_unlock+0x8>)
 800e29a:	f7fa bb2d 	b.w	80088f8 <__retarget_lock_release_recursive>
 800e29e:	bf00      	nop
 800e2a0:	20001408 	.word	0x20001408

0800e2a4 <sulp>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	ec45 4b10 	vmov	d0, r4, r5
 800e2ae:	4616      	mov	r6, r2
 800e2b0:	f003 ff32 	bl	8012118 <__ulp>
 800e2b4:	ec51 0b10 	vmov	r0, r1, d0
 800e2b8:	b17e      	cbz	r6, 800e2da <sulp+0x36>
 800e2ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e2be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	dd09      	ble.n	800e2da <sulp+0x36>
 800e2c6:	051b      	lsls	r3, r3, #20
 800e2c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e2cc:	2400      	movs	r4, #0
 800e2ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	462b      	mov	r3, r5
 800e2d6:	f7f2 f99f 	bl	8000618 <__aeabi_dmul>
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	0000      	movs	r0, r0
	...

0800e2e0 <_strtod_l>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	ed2d 8b02 	vpush	{d8}
 800e2e8:	b09b      	sub	sp, #108	; 0x6c
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	9216      	str	r2, [sp, #88]	; 0x58
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	f04f 0800 	mov.w	r8, #0
 800e2f8:	f04f 0900 	mov.w	r9, #0
 800e2fc:	460a      	mov	r2, r1
 800e2fe:	9215      	str	r2, [sp, #84]	; 0x54
 800e300:	7811      	ldrb	r1, [r2, #0]
 800e302:	292b      	cmp	r1, #43	; 0x2b
 800e304:	d04c      	beq.n	800e3a0 <_strtod_l+0xc0>
 800e306:	d83a      	bhi.n	800e37e <_strtod_l+0x9e>
 800e308:	290d      	cmp	r1, #13
 800e30a:	d834      	bhi.n	800e376 <_strtod_l+0x96>
 800e30c:	2908      	cmp	r1, #8
 800e30e:	d834      	bhi.n	800e37a <_strtod_l+0x9a>
 800e310:	2900      	cmp	r1, #0
 800e312:	d03d      	beq.n	800e390 <_strtod_l+0xb0>
 800e314:	2200      	movs	r2, #0
 800e316:	920a      	str	r2, [sp, #40]	; 0x28
 800e318:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800e31a:	7832      	ldrb	r2, [r6, #0]
 800e31c:	2a30      	cmp	r2, #48	; 0x30
 800e31e:	f040 80b4 	bne.w	800e48a <_strtod_l+0x1aa>
 800e322:	7872      	ldrb	r2, [r6, #1]
 800e324:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800e328:	2a58      	cmp	r2, #88	; 0x58
 800e32a:	d170      	bne.n	800e40e <_strtod_l+0x12e>
 800e32c:	9302      	str	r3, [sp, #8]
 800e32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	ab16      	add	r3, sp, #88	; 0x58
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	4a8e      	ldr	r2, [pc, #568]	; (800e570 <_strtod_l+0x290>)
 800e338:	ab17      	add	r3, sp, #92	; 0x5c
 800e33a:	a915      	add	r1, sp, #84	; 0x54
 800e33c:	4620      	mov	r0, r4
 800e33e:	f003 f87d 	bl	801143c <__gethex>
 800e342:	f010 070f 	ands.w	r7, r0, #15
 800e346:	4605      	mov	r5, r0
 800e348:	d005      	beq.n	800e356 <_strtod_l+0x76>
 800e34a:	2f06      	cmp	r7, #6
 800e34c:	d12a      	bne.n	800e3a4 <_strtod_l+0xc4>
 800e34e:	3601      	adds	r6, #1
 800e350:	2300      	movs	r3, #0
 800e352:	9615      	str	r6, [sp, #84]	; 0x54
 800e354:	930a      	str	r3, [sp, #40]	; 0x28
 800e356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f040 857f 	bne.w	800ee5c <_strtod_l+0xb7c>
 800e35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e360:	b1db      	cbz	r3, 800e39a <_strtod_l+0xba>
 800e362:	4642      	mov	r2, r8
 800e364:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e368:	ec43 2b10 	vmov	d0, r2, r3
 800e36c:	b01b      	add	sp, #108	; 0x6c
 800e36e:	ecbd 8b02 	vpop	{d8}
 800e372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e376:	2920      	cmp	r1, #32
 800e378:	d1cc      	bne.n	800e314 <_strtod_l+0x34>
 800e37a:	3201      	adds	r2, #1
 800e37c:	e7bf      	b.n	800e2fe <_strtod_l+0x1e>
 800e37e:	292d      	cmp	r1, #45	; 0x2d
 800e380:	d1c8      	bne.n	800e314 <_strtod_l+0x34>
 800e382:	2101      	movs	r1, #1
 800e384:	910a      	str	r1, [sp, #40]	; 0x28
 800e386:	1c51      	adds	r1, r2, #1
 800e388:	9115      	str	r1, [sp, #84]	; 0x54
 800e38a:	7852      	ldrb	r2, [r2, #1]
 800e38c:	2a00      	cmp	r2, #0
 800e38e:	d1c3      	bne.n	800e318 <_strtod_l+0x38>
 800e390:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e392:	9515      	str	r5, [sp, #84]	; 0x54
 800e394:	2b00      	cmp	r3, #0
 800e396:	f040 855f 	bne.w	800ee58 <_strtod_l+0xb78>
 800e39a:	4642      	mov	r2, r8
 800e39c:	464b      	mov	r3, r9
 800e39e:	e7e3      	b.n	800e368 <_strtod_l+0x88>
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	e7ef      	b.n	800e384 <_strtod_l+0xa4>
 800e3a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e3a6:	b13a      	cbz	r2, 800e3b8 <_strtod_l+0xd8>
 800e3a8:	2135      	movs	r1, #53	; 0x35
 800e3aa:	a818      	add	r0, sp, #96	; 0x60
 800e3ac:	f003 ffb1 	bl	8012312 <__copybits>
 800e3b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f003 fb84 	bl	8011ac0 <_Bfree>
 800e3b8:	3f01      	subs	r7, #1
 800e3ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e3bc:	2f04      	cmp	r7, #4
 800e3be:	d806      	bhi.n	800e3ce <_strtod_l+0xee>
 800e3c0:	e8df f007 	tbb	[pc, r7]
 800e3c4:	201d0314 	.word	0x201d0314
 800e3c8:	14          	.byte	0x14
 800e3c9:	00          	.byte	0x00
 800e3ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800e3ce:	05e9      	lsls	r1, r5, #23
 800e3d0:	bf48      	it	mi
 800e3d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800e3d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3da:	0d1b      	lsrs	r3, r3, #20
 800e3dc:	051b      	lsls	r3, r3, #20
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1b9      	bne.n	800e356 <_strtod_l+0x76>
 800e3e2:	f002 f88f 	bl	8010504 <__errno>
 800e3e6:	2322      	movs	r3, #34	; 0x22
 800e3e8:	6003      	str	r3, [r0, #0]
 800e3ea:	e7b4      	b.n	800e356 <_strtod_l+0x76>
 800e3ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800e3f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e3f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e3f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e3fc:	e7e7      	b.n	800e3ce <_strtod_l+0xee>
 800e3fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e578 <_strtod_l+0x298>
 800e402:	e7e4      	b.n	800e3ce <_strtod_l+0xee>
 800e404:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e408:	f04f 38ff 	mov.w	r8, #4294967295
 800e40c:	e7df      	b.n	800e3ce <_strtod_l+0xee>
 800e40e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	9215      	str	r2, [sp, #84]	; 0x54
 800e414:	785b      	ldrb	r3, [r3, #1]
 800e416:	2b30      	cmp	r3, #48	; 0x30
 800e418:	d0f9      	beq.n	800e40e <_strtod_l+0x12e>
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d09b      	beq.n	800e356 <_strtod_l+0x76>
 800e41e:	2301      	movs	r3, #1
 800e420:	f04f 0a00 	mov.w	sl, #0
 800e424:	9304      	str	r3, [sp, #16]
 800e426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e428:	930b      	str	r3, [sp, #44]	; 0x2c
 800e42a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e42e:	46d3      	mov	fp, sl
 800e430:	220a      	movs	r2, #10
 800e432:	9815      	ldr	r0, [sp, #84]	; 0x54
 800e434:	7806      	ldrb	r6, [r0, #0]
 800e436:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e43a:	b2d9      	uxtb	r1, r3
 800e43c:	2909      	cmp	r1, #9
 800e43e:	d926      	bls.n	800e48e <_strtod_l+0x1ae>
 800e440:	494c      	ldr	r1, [pc, #304]	; (800e574 <_strtod_l+0x294>)
 800e442:	2201      	movs	r2, #1
 800e444:	f001 ff17 	bl	8010276 <strncmp>
 800e448:	2800      	cmp	r0, #0
 800e44a:	d030      	beq.n	800e4ae <_strtod_l+0x1ce>
 800e44c:	2000      	movs	r0, #0
 800e44e:	4632      	mov	r2, r6
 800e450:	9005      	str	r0, [sp, #20]
 800e452:	465e      	mov	r6, fp
 800e454:	4603      	mov	r3, r0
 800e456:	2a65      	cmp	r2, #101	; 0x65
 800e458:	d001      	beq.n	800e45e <_strtod_l+0x17e>
 800e45a:	2a45      	cmp	r2, #69	; 0x45
 800e45c:	d113      	bne.n	800e486 <_strtod_l+0x1a6>
 800e45e:	b91e      	cbnz	r6, 800e468 <_strtod_l+0x188>
 800e460:	9a04      	ldr	r2, [sp, #16]
 800e462:	4302      	orrs	r2, r0
 800e464:	d094      	beq.n	800e390 <_strtod_l+0xb0>
 800e466:	2600      	movs	r6, #0
 800e468:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800e46a:	1c6a      	adds	r2, r5, #1
 800e46c:	9215      	str	r2, [sp, #84]	; 0x54
 800e46e:	786a      	ldrb	r2, [r5, #1]
 800e470:	2a2b      	cmp	r2, #43	; 0x2b
 800e472:	d074      	beq.n	800e55e <_strtod_l+0x27e>
 800e474:	2a2d      	cmp	r2, #45	; 0x2d
 800e476:	d078      	beq.n	800e56a <_strtod_l+0x28a>
 800e478:	f04f 0c00 	mov.w	ip, #0
 800e47c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e480:	2909      	cmp	r1, #9
 800e482:	d97f      	bls.n	800e584 <_strtod_l+0x2a4>
 800e484:	9515      	str	r5, [sp, #84]	; 0x54
 800e486:	2700      	movs	r7, #0
 800e488:	e09e      	b.n	800e5c8 <_strtod_l+0x2e8>
 800e48a:	2300      	movs	r3, #0
 800e48c:	e7c8      	b.n	800e420 <_strtod_l+0x140>
 800e48e:	f1bb 0f08 	cmp.w	fp, #8
 800e492:	bfd8      	it	le
 800e494:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e496:	f100 0001 	add.w	r0, r0, #1
 800e49a:	bfda      	itte	le
 800e49c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e4a0:	9309      	strle	r3, [sp, #36]	; 0x24
 800e4a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e4a6:	f10b 0b01 	add.w	fp, fp, #1
 800e4aa:	9015      	str	r0, [sp, #84]	; 0x54
 800e4ac:	e7c1      	b.n	800e432 <_strtod_l+0x152>
 800e4ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	9215      	str	r2, [sp, #84]	; 0x54
 800e4b4:	785a      	ldrb	r2, [r3, #1]
 800e4b6:	f1bb 0f00 	cmp.w	fp, #0
 800e4ba:	d037      	beq.n	800e52c <_strtod_l+0x24c>
 800e4bc:	9005      	str	r0, [sp, #20]
 800e4be:	465e      	mov	r6, fp
 800e4c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e4c4:	2b09      	cmp	r3, #9
 800e4c6:	d912      	bls.n	800e4ee <_strtod_l+0x20e>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e7c4      	b.n	800e456 <_strtod_l+0x176>
 800e4cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	9215      	str	r2, [sp, #84]	; 0x54
 800e4d2:	785a      	ldrb	r2, [r3, #1]
 800e4d4:	3001      	adds	r0, #1
 800e4d6:	2a30      	cmp	r2, #48	; 0x30
 800e4d8:	d0f8      	beq.n	800e4cc <_strtod_l+0x1ec>
 800e4da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e4de:	2b08      	cmp	r3, #8
 800e4e0:	f200 84c1 	bhi.w	800ee66 <_strtod_l+0xb86>
 800e4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4e6:	9005      	str	r0, [sp, #20]
 800e4e8:	2000      	movs	r0, #0
 800e4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4ec:	4606      	mov	r6, r0
 800e4ee:	3a30      	subs	r2, #48	; 0x30
 800e4f0:	f100 0301 	add.w	r3, r0, #1
 800e4f4:	d014      	beq.n	800e520 <_strtod_l+0x240>
 800e4f6:	9905      	ldr	r1, [sp, #20]
 800e4f8:	4419      	add	r1, r3
 800e4fa:	9105      	str	r1, [sp, #20]
 800e4fc:	4633      	mov	r3, r6
 800e4fe:	eb00 0c06 	add.w	ip, r0, r6
 800e502:	210a      	movs	r1, #10
 800e504:	4563      	cmp	r3, ip
 800e506:	d113      	bne.n	800e530 <_strtod_l+0x250>
 800e508:	1833      	adds	r3, r6, r0
 800e50a:	2b08      	cmp	r3, #8
 800e50c:	f106 0601 	add.w	r6, r6, #1
 800e510:	4406      	add	r6, r0
 800e512:	dc1a      	bgt.n	800e54a <_strtod_l+0x26a>
 800e514:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e516:	230a      	movs	r3, #10
 800e518:	fb03 2301 	mla	r3, r3, r1, r2
 800e51c:	9309      	str	r3, [sp, #36]	; 0x24
 800e51e:	2300      	movs	r3, #0
 800e520:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e522:	1c51      	adds	r1, r2, #1
 800e524:	9115      	str	r1, [sp, #84]	; 0x54
 800e526:	7852      	ldrb	r2, [r2, #1]
 800e528:	4618      	mov	r0, r3
 800e52a:	e7c9      	b.n	800e4c0 <_strtod_l+0x1e0>
 800e52c:	4658      	mov	r0, fp
 800e52e:	e7d2      	b.n	800e4d6 <_strtod_l+0x1f6>
 800e530:	2b08      	cmp	r3, #8
 800e532:	f103 0301 	add.w	r3, r3, #1
 800e536:	dc03      	bgt.n	800e540 <_strtod_l+0x260>
 800e538:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e53a:	434f      	muls	r7, r1
 800e53c:	9709      	str	r7, [sp, #36]	; 0x24
 800e53e:	e7e1      	b.n	800e504 <_strtod_l+0x224>
 800e540:	2b10      	cmp	r3, #16
 800e542:	bfd8      	it	le
 800e544:	fb01 fa0a 	mulle.w	sl, r1, sl
 800e548:	e7dc      	b.n	800e504 <_strtod_l+0x224>
 800e54a:	2e10      	cmp	r6, #16
 800e54c:	bfdc      	itt	le
 800e54e:	230a      	movle	r3, #10
 800e550:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800e554:	e7e3      	b.n	800e51e <_strtod_l+0x23e>
 800e556:	2300      	movs	r3, #0
 800e558:	9305      	str	r3, [sp, #20]
 800e55a:	2301      	movs	r3, #1
 800e55c:	e780      	b.n	800e460 <_strtod_l+0x180>
 800e55e:	f04f 0c00 	mov.w	ip, #0
 800e562:	1caa      	adds	r2, r5, #2
 800e564:	9215      	str	r2, [sp, #84]	; 0x54
 800e566:	78aa      	ldrb	r2, [r5, #2]
 800e568:	e788      	b.n	800e47c <_strtod_l+0x19c>
 800e56a:	f04f 0c01 	mov.w	ip, #1
 800e56e:	e7f8      	b.n	800e562 <_strtod_l+0x282>
 800e570:	08015574 	.word	0x08015574
 800e574:	08015571 	.word	0x08015571
 800e578:	7ff00000 	.word	0x7ff00000
 800e57c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e57e:	1c51      	adds	r1, r2, #1
 800e580:	9115      	str	r1, [sp, #84]	; 0x54
 800e582:	7852      	ldrb	r2, [r2, #1]
 800e584:	2a30      	cmp	r2, #48	; 0x30
 800e586:	d0f9      	beq.n	800e57c <_strtod_l+0x29c>
 800e588:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e58c:	2908      	cmp	r1, #8
 800e58e:	f63f af7a 	bhi.w	800e486 <_strtod_l+0x1a6>
 800e592:	3a30      	subs	r2, #48	; 0x30
 800e594:	9208      	str	r2, [sp, #32]
 800e596:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e598:	920c      	str	r2, [sp, #48]	; 0x30
 800e59a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e59c:	1c57      	adds	r7, r2, #1
 800e59e:	9715      	str	r7, [sp, #84]	; 0x54
 800e5a0:	7852      	ldrb	r2, [r2, #1]
 800e5a2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e5a6:	f1be 0f09 	cmp.w	lr, #9
 800e5aa:	d938      	bls.n	800e61e <_strtod_l+0x33e>
 800e5ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e5ae:	1a7f      	subs	r7, r7, r1
 800e5b0:	2f08      	cmp	r7, #8
 800e5b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e5b6:	dc03      	bgt.n	800e5c0 <_strtod_l+0x2e0>
 800e5b8:	9908      	ldr	r1, [sp, #32]
 800e5ba:	428f      	cmp	r7, r1
 800e5bc:	bfa8      	it	ge
 800e5be:	460f      	movge	r7, r1
 800e5c0:	f1bc 0f00 	cmp.w	ip, #0
 800e5c4:	d000      	beq.n	800e5c8 <_strtod_l+0x2e8>
 800e5c6:	427f      	negs	r7, r7
 800e5c8:	2e00      	cmp	r6, #0
 800e5ca:	d14f      	bne.n	800e66c <_strtod_l+0x38c>
 800e5cc:	9904      	ldr	r1, [sp, #16]
 800e5ce:	4301      	orrs	r1, r0
 800e5d0:	f47f aec1 	bne.w	800e356 <_strtod_l+0x76>
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f47f aedb 	bne.w	800e390 <_strtod_l+0xb0>
 800e5da:	2a69      	cmp	r2, #105	; 0x69
 800e5dc:	d029      	beq.n	800e632 <_strtod_l+0x352>
 800e5de:	dc26      	bgt.n	800e62e <_strtod_l+0x34e>
 800e5e0:	2a49      	cmp	r2, #73	; 0x49
 800e5e2:	d026      	beq.n	800e632 <_strtod_l+0x352>
 800e5e4:	2a4e      	cmp	r2, #78	; 0x4e
 800e5e6:	f47f aed3 	bne.w	800e390 <_strtod_l+0xb0>
 800e5ea:	499b      	ldr	r1, [pc, #620]	; (800e858 <_strtod_l+0x578>)
 800e5ec:	a815      	add	r0, sp, #84	; 0x54
 800e5ee:	f003 f965 	bl	80118bc <__match>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	f43f aecc 	beq.w	800e390 <_strtod_l+0xb0>
 800e5f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	2b28      	cmp	r3, #40	; 0x28
 800e5fe:	d12f      	bne.n	800e660 <_strtod_l+0x380>
 800e600:	4996      	ldr	r1, [pc, #600]	; (800e85c <_strtod_l+0x57c>)
 800e602:	aa18      	add	r2, sp, #96	; 0x60
 800e604:	a815      	add	r0, sp, #84	; 0x54
 800e606:	f003 f96d 	bl	80118e4 <__hexnan>
 800e60a:	2805      	cmp	r0, #5
 800e60c:	d128      	bne.n	800e660 <_strtod_l+0x380>
 800e60e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e610:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e614:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e618:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e61c:	e69b      	b.n	800e356 <_strtod_l+0x76>
 800e61e:	9f08      	ldr	r7, [sp, #32]
 800e620:	210a      	movs	r1, #10
 800e622:	fb01 2107 	mla	r1, r1, r7, r2
 800e626:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e62a:	9208      	str	r2, [sp, #32]
 800e62c:	e7b5      	b.n	800e59a <_strtod_l+0x2ba>
 800e62e:	2a6e      	cmp	r2, #110	; 0x6e
 800e630:	e7d9      	b.n	800e5e6 <_strtod_l+0x306>
 800e632:	498b      	ldr	r1, [pc, #556]	; (800e860 <_strtod_l+0x580>)
 800e634:	a815      	add	r0, sp, #84	; 0x54
 800e636:	f003 f941 	bl	80118bc <__match>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	f43f aea8 	beq.w	800e390 <_strtod_l+0xb0>
 800e640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e642:	4988      	ldr	r1, [pc, #544]	; (800e864 <_strtod_l+0x584>)
 800e644:	3b01      	subs	r3, #1
 800e646:	a815      	add	r0, sp, #84	; 0x54
 800e648:	9315      	str	r3, [sp, #84]	; 0x54
 800e64a:	f003 f937 	bl	80118bc <__match>
 800e64e:	b910      	cbnz	r0, 800e656 <_strtod_l+0x376>
 800e650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e652:	3301      	adds	r3, #1
 800e654:	9315      	str	r3, [sp, #84]	; 0x54
 800e656:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e874 <_strtod_l+0x594>
 800e65a:	f04f 0800 	mov.w	r8, #0
 800e65e:	e67a      	b.n	800e356 <_strtod_l+0x76>
 800e660:	4881      	ldr	r0, [pc, #516]	; (800e868 <_strtod_l+0x588>)
 800e662:	f001 ff91 	bl	8010588 <nan>
 800e666:	ec59 8b10 	vmov	r8, r9, d0
 800e66a:	e674      	b.n	800e356 <_strtod_l+0x76>
 800e66c:	9b05      	ldr	r3, [sp, #20]
 800e66e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e670:	1afb      	subs	r3, r7, r3
 800e672:	f1bb 0f00 	cmp.w	fp, #0
 800e676:	bf08      	it	eq
 800e678:	46b3      	moveq	fp, r6
 800e67a:	2e10      	cmp	r6, #16
 800e67c:	9308      	str	r3, [sp, #32]
 800e67e:	4635      	mov	r5, r6
 800e680:	bfa8      	it	ge
 800e682:	2510      	movge	r5, #16
 800e684:	f7f1 ff4e 	bl	8000524 <__aeabi_ui2d>
 800e688:	2e09      	cmp	r6, #9
 800e68a:	4680      	mov	r8, r0
 800e68c:	4689      	mov	r9, r1
 800e68e:	dd13      	ble.n	800e6b8 <_strtod_l+0x3d8>
 800e690:	4b76      	ldr	r3, [pc, #472]	; (800e86c <_strtod_l+0x58c>)
 800e692:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e696:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e69a:	f7f1 ffbd 	bl	8000618 <__aeabi_dmul>
 800e69e:	4680      	mov	r8, r0
 800e6a0:	4650      	mov	r0, sl
 800e6a2:	4689      	mov	r9, r1
 800e6a4:	f7f1 ff3e 	bl	8000524 <__aeabi_ui2d>
 800e6a8:	4602      	mov	r2, r0
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	4640      	mov	r0, r8
 800e6ae:	4649      	mov	r1, r9
 800e6b0:	f7f1 fdfc 	bl	80002ac <__adddf3>
 800e6b4:	4680      	mov	r8, r0
 800e6b6:	4689      	mov	r9, r1
 800e6b8:	2e0f      	cmp	r6, #15
 800e6ba:	dc38      	bgt.n	800e72e <_strtod_l+0x44e>
 800e6bc:	9b08      	ldr	r3, [sp, #32]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f43f ae49 	beq.w	800e356 <_strtod_l+0x76>
 800e6c4:	dd24      	ble.n	800e710 <_strtod_l+0x430>
 800e6c6:	2b16      	cmp	r3, #22
 800e6c8:	dc0b      	bgt.n	800e6e2 <_strtod_l+0x402>
 800e6ca:	4968      	ldr	r1, [pc, #416]	; (800e86c <_strtod_l+0x58c>)
 800e6cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6d4:	4642      	mov	r2, r8
 800e6d6:	464b      	mov	r3, r9
 800e6d8:	f7f1 ff9e 	bl	8000618 <__aeabi_dmul>
 800e6dc:	4680      	mov	r8, r0
 800e6de:	4689      	mov	r9, r1
 800e6e0:	e639      	b.n	800e356 <_strtod_l+0x76>
 800e6e2:	9a08      	ldr	r2, [sp, #32]
 800e6e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	db20      	blt.n	800e72e <_strtod_l+0x44e>
 800e6ec:	4c5f      	ldr	r4, [pc, #380]	; (800e86c <_strtod_l+0x58c>)
 800e6ee:	f1c6 060f 	rsb	r6, r6, #15
 800e6f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e6f6:	4642      	mov	r2, r8
 800e6f8:	464b      	mov	r3, r9
 800e6fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6fe:	f7f1 ff8b 	bl	8000618 <__aeabi_dmul>
 800e702:	9b08      	ldr	r3, [sp, #32]
 800e704:	1b9e      	subs	r6, r3, r6
 800e706:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e70a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e70e:	e7e3      	b.n	800e6d8 <_strtod_l+0x3f8>
 800e710:	9b08      	ldr	r3, [sp, #32]
 800e712:	3316      	adds	r3, #22
 800e714:	db0b      	blt.n	800e72e <_strtod_l+0x44e>
 800e716:	9b05      	ldr	r3, [sp, #20]
 800e718:	1bdf      	subs	r7, r3, r7
 800e71a:	4b54      	ldr	r3, [pc, #336]	; (800e86c <_strtod_l+0x58c>)
 800e71c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e724:	4640      	mov	r0, r8
 800e726:	4649      	mov	r1, r9
 800e728:	f7f2 f8a0 	bl	800086c <__aeabi_ddiv>
 800e72c:	e7d6      	b.n	800e6dc <_strtod_l+0x3fc>
 800e72e:	9b08      	ldr	r3, [sp, #32]
 800e730:	1b75      	subs	r5, r6, r5
 800e732:	441d      	add	r5, r3
 800e734:	2d00      	cmp	r5, #0
 800e736:	dd70      	ble.n	800e81a <_strtod_l+0x53a>
 800e738:	f015 030f 	ands.w	r3, r5, #15
 800e73c:	d00a      	beq.n	800e754 <_strtod_l+0x474>
 800e73e:	494b      	ldr	r1, [pc, #300]	; (800e86c <_strtod_l+0x58c>)
 800e740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e744:	4642      	mov	r2, r8
 800e746:	464b      	mov	r3, r9
 800e748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e74c:	f7f1 ff64 	bl	8000618 <__aeabi_dmul>
 800e750:	4680      	mov	r8, r0
 800e752:	4689      	mov	r9, r1
 800e754:	f035 050f 	bics.w	r5, r5, #15
 800e758:	d04d      	beq.n	800e7f6 <_strtod_l+0x516>
 800e75a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e75e:	dd22      	ble.n	800e7a6 <_strtod_l+0x4c6>
 800e760:	2500      	movs	r5, #0
 800e762:	46ab      	mov	fp, r5
 800e764:	9509      	str	r5, [sp, #36]	; 0x24
 800e766:	9505      	str	r5, [sp, #20]
 800e768:	2322      	movs	r3, #34	; 0x22
 800e76a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e874 <_strtod_l+0x594>
 800e76e:	6023      	str	r3, [r4, #0]
 800e770:	f04f 0800 	mov.w	r8, #0
 800e774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e776:	2b00      	cmp	r3, #0
 800e778:	f43f aded 	beq.w	800e356 <_strtod_l+0x76>
 800e77c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e77e:	4620      	mov	r0, r4
 800e780:	f003 f99e 	bl	8011ac0 <_Bfree>
 800e784:	9905      	ldr	r1, [sp, #20]
 800e786:	4620      	mov	r0, r4
 800e788:	f003 f99a 	bl	8011ac0 <_Bfree>
 800e78c:	4659      	mov	r1, fp
 800e78e:	4620      	mov	r0, r4
 800e790:	f003 f996 	bl	8011ac0 <_Bfree>
 800e794:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e796:	4620      	mov	r0, r4
 800e798:	f003 f992 	bl	8011ac0 <_Bfree>
 800e79c:	4629      	mov	r1, r5
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f003 f98e 	bl	8011ac0 <_Bfree>
 800e7a4:	e5d7      	b.n	800e356 <_strtod_l+0x76>
 800e7a6:	4b32      	ldr	r3, [pc, #200]	; (800e870 <_strtod_l+0x590>)
 800e7a8:	9304      	str	r3, [sp, #16]
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	112d      	asrs	r5, r5, #4
 800e7ae:	4640      	mov	r0, r8
 800e7b0:	4649      	mov	r1, r9
 800e7b2:	469a      	mov	sl, r3
 800e7b4:	2d01      	cmp	r5, #1
 800e7b6:	dc21      	bgt.n	800e7fc <_strtod_l+0x51c>
 800e7b8:	b10b      	cbz	r3, 800e7be <_strtod_l+0x4de>
 800e7ba:	4680      	mov	r8, r0
 800e7bc:	4689      	mov	r9, r1
 800e7be:	492c      	ldr	r1, [pc, #176]	; (800e870 <_strtod_l+0x590>)
 800e7c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e7c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e7c8:	4642      	mov	r2, r8
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7d0:	f7f1 ff22 	bl	8000618 <__aeabi_dmul>
 800e7d4:	4b27      	ldr	r3, [pc, #156]	; (800e874 <_strtod_l+0x594>)
 800e7d6:	460a      	mov	r2, r1
 800e7d8:	400b      	ands	r3, r1
 800e7da:	4927      	ldr	r1, [pc, #156]	; (800e878 <_strtod_l+0x598>)
 800e7dc:	428b      	cmp	r3, r1
 800e7de:	4680      	mov	r8, r0
 800e7e0:	d8be      	bhi.n	800e760 <_strtod_l+0x480>
 800e7e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e7e6:	428b      	cmp	r3, r1
 800e7e8:	bf86      	itte	hi
 800e7ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e87c <_strtod_l+0x59c>
 800e7ee:	f04f 38ff 	movhi.w	r8, #4294967295
 800e7f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	e07b      	b.n	800e8f4 <_strtod_l+0x614>
 800e7fc:	07ea      	lsls	r2, r5, #31
 800e7fe:	d505      	bpl.n	800e80c <_strtod_l+0x52c>
 800e800:	9b04      	ldr	r3, [sp, #16]
 800e802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e806:	f7f1 ff07 	bl	8000618 <__aeabi_dmul>
 800e80a:	2301      	movs	r3, #1
 800e80c:	9a04      	ldr	r2, [sp, #16]
 800e80e:	3208      	adds	r2, #8
 800e810:	f10a 0a01 	add.w	sl, sl, #1
 800e814:	106d      	asrs	r5, r5, #1
 800e816:	9204      	str	r2, [sp, #16]
 800e818:	e7cc      	b.n	800e7b4 <_strtod_l+0x4d4>
 800e81a:	d0ec      	beq.n	800e7f6 <_strtod_l+0x516>
 800e81c:	426d      	negs	r5, r5
 800e81e:	f015 020f 	ands.w	r2, r5, #15
 800e822:	d00a      	beq.n	800e83a <_strtod_l+0x55a>
 800e824:	4b11      	ldr	r3, [pc, #68]	; (800e86c <_strtod_l+0x58c>)
 800e826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e82a:	4640      	mov	r0, r8
 800e82c:	4649      	mov	r1, r9
 800e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e832:	f7f2 f81b 	bl	800086c <__aeabi_ddiv>
 800e836:	4680      	mov	r8, r0
 800e838:	4689      	mov	r9, r1
 800e83a:	112d      	asrs	r5, r5, #4
 800e83c:	d0db      	beq.n	800e7f6 <_strtod_l+0x516>
 800e83e:	2d1f      	cmp	r5, #31
 800e840:	dd1e      	ble.n	800e880 <_strtod_l+0x5a0>
 800e842:	2500      	movs	r5, #0
 800e844:	46ab      	mov	fp, r5
 800e846:	9509      	str	r5, [sp, #36]	; 0x24
 800e848:	9505      	str	r5, [sp, #20]
 800e84a:	2322      	movs	r3, #34	; 0x22
 800e84c:	f04f 0800 	mov.w	r8, #0
 800e850:	f04f 0900 	mov.w	r9, #0
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	e78d      	b.n	800e774 <_strtod_l+0x494>
 800e858:	080156d6 	.word	0x080156d6
 800e85c:	08015588 	.word	0x08015588
 800e860:	080156ce 	.word	0x080156ce
 800e864:	080157b8 	.word	0x080157b8
 800e868:	080157b4 	.word	0x080157b4
 800e86c:	08015910 	.word	0x08015910
 800e870:	080158e8 	.word	0x080158e8
 800e874:	7ff00000 	.word	0x7ff00000
 800e878:	7ca00000 	.word	0x7ca00000
 800e87c:	7fefffff 	.word	0x7fefffff
 800e880:	f015 0310 	ands.w	r3, r5, #16
 800e884:	bf18      	it	ne
 800e886:	236a      	movne	r3, #106	; 0x6a
 800e888:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ec2c <_strtod_l+0x94c>
 800e88c:	9304      	str	r3, [sp, #16]
 800e88e:	4640      	mov	r0, r8
 800e890:	4649      	mov	r1, r9
 800e892:	2300      	movs	r3, #0
 800e894:	07ea      	lsls	r2, r5, #31
 800e896:	d504      	bpl.n	800e8a2 <_strtod_l+0x5c2>
 800e898:	e9da 2300 	ldrd	r2, r3, [sl]
 800e89c:	f7f1 febc 	bl	8000618 <__aeabi_dmul>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	106d      	asrs	r5, r5, #1
 800e8a4:	f10a 0a08 	add.w	sl, sl, #8
 800e8a8:	d1f4      	bne.n	800e894 <_strtod_l+0x5b4>
 800e8aa:	b10b      	cbz	r3, 800e8b0 <_strtod_l+0x5d0>
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	4689      	mov	r9, r1
 800e8b0:	9b04      	ldr	r3, [sp, #16]
 800e8b2:	b1bb      	cbz	r3, 800e8e4 <_strtod_l+0x604>
 800e8b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e8b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	4649      	mov	r1, r9
 800e8c0:	dd10      	ble.n	800e8e4 <_strtod_l+0x604>
 800e8c2:	2b1f      	cmp	r3, #31
 800e8c4:	f340 811e 	ble.w	800eb04 <_strtod_l+0x824>
 800e8c8:	2b34      	cmp	r3, #52	; 0x34
 800e8ca:	bfde      	ittt	le
 800e8cc:	f04f 33ff 	movle.w	r3, #4294967295
 800e8d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e8d4:	4093      	lslle	r3, r2
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	bfcc      	ite	gt
 800e8dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e8e0:	ea03 0901 	andle.w	r9, r3, r1
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	f7f2 f8fc 	bl	8000ae8 <__aeabi_dcmpeq>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d1a6      	bne.n	800e842 <_strtod_l+0x562>
 800e8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8fa:	4633      	mov	r3, r6
 800e8fc:	465a      	mov	r2, fp
 800e8fe:	4620      	mov	r0, r4
 800e900:	f003 f946 	bl	8011b90 <__s2b>
 800e904:	9009      	str	r0, [sp, #36]	; 0x24
 800e906:	2800      	cmp	r0, #0
 800e908:	f43f af2a 	beq.w	800e760 <_strtod_l+0x480>
 800e90c:	9a08      	ldr	r2, [sp, #32]
 800e90e:	9b05      	ldr	r3, [sp, #20]
 800e910:	2a00      	cmp	r2, #0
 800e912:	eba3 0307 	sub.w	r3, r3, r7
 800e916:	bfa8      	it	ge
 800e918:	2300      	movge	r3, #0
 800e91a:	930c      	str	r3, [sp, #48]	; 0x30
 800e91c:	2500      	movs	r5, #0
 800e91e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e922:	9312      	str	r3, [sp, #72]	; 0x48
 800e924:	46ab      	mov	fp, r5
 800e926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e928:	4620      	mov	r0, r4
 800e92a:	6859      	ldr	r1, [r3, #4]
 800e92c:	f003 f888 	bl	8011a40 <_Balloc>
 800e930:	9005      	str	r0, [sp, #20]
 800e932:	2800      	cmp	r0, #0
 800e934:	f43f af18 	beq.w	800e768 <_strtod_l+0x488>
 800e938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e93a:	691a      	ldr	r2, [r3, #16]
 800e93c:	3202      	adds	r2, #2
 800e93e:	f103 010c 	add.w	r1, r3, #12
 800e942:	0092      	lsls	r2, r2, #2
 800e944:	300c      	adds	r0, #12
 800e946:	f001 fe0f 	bl	8010568 <memcpy>
 800e94a:	ec49 8b10 	vmov	d0, r8, r9
 800e94e:	aa18      	add	r2, sp, #96	; 0x60
 800e950:	a917      	add	r1, sp, #92	; 0x5c
 800e952:	4620      	mov	r0, r4
 800e954:	f003 fc50 	bl	80121f8 <__d2b>
 800e958:	ec49 8b18 	vmov	d8, r8, r9
 800e95c:	9016      	str	r0, [sp, #88]	; 0x58
 800e95e:	2800      	cmp	r0, #0
 800e960:	f43f af02 	beq.w	800e768 <_strtod_l+0x488>
 800e964:	2101      	movs	r1, #1
 800e966:	4620      	mov	r0, r4
 800e968:	f003 f9aa 	bl	8011cc0 <__i2b>
 800e96c:	4683      	mov	fp, r0
 800e96e:	2800      	cmp	r0, #0
 800e970:	f43f aefa 	beq.w	800e768 <_strtod_l+0x488>
 800e974:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e976:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e978:	2e00      	cmp	r6, #0
 800e97a:	bfab      	itete	ge
 800e97c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e97e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e980:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e982:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e986:	bfac      	ite	ge
 800e988:	eb06 0a03 	addge.w	sl, r6, r3
 800e98c:	1b9f      	sublt	r7, r3, r6
 800e98e:	9b04      	ldr	r3, [sp, #16]
 800e990:	1af6      	subs	r6, r6, r3
 800e992:	4416      	add	r6, r2
 800e994:	4ba0      	ldr	r3, [pc, #640]	; (800ec18 <_strtod_l+0x938>)
 800e996:	3e01      	subs	r6, #1
 800e998:	429e      	cmp	r6, r3
 800e99a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e99e:	f280 80c4 	bge.w	800eb2a <_strtod_l+0x84a>
 800e9a2:	1b9b      	subs	r3, r3, r6
 800e9a4:	2b1f      	cmp	r3, #31
 800e9a6:	eba2 0203 	sub.w	r2, r2, r3
 800e9aa:	f04f 0101 	mov.w	r1, #1
 800e9ae:	f300 80b0 	bgt.w	800eb12 <_strtod_l+0x832>
 800e9b2:	fa01 f303 	lsl.w	r3, r1, r3
 800e9b6:	930e      	str	r3, [sp, #56]	; 0x38
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	930d      	str	r3, [sp, #52]	; 0x34
 800e9bc:	eb0a 0602 	add.w	r6, sl, r2
 800e9c0:	9b04      	ldr	r3, [sp, #16]
 800e9c2:	45b2      	cmp	sl, r6
 800e9c4:	4417      	add	r7, r2
 800e9c6:	441f      	add	r7, r3
 800e9c8:	4653      	mov	r3, sl
 800e9ca:	bfa8      	it	ge
 800e9cc:	4633      	movge	r3, r6
 800e9ce:	42bb      	cmp	r3, r7
 800e9d0:	bfa8      	it	ge
 800e9d2:	463b      	movge	r3, r7
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	bfc2      	ittt	gt
 800e9d8:	1af6      	subgt	r6, r6, r3
 800e9da:	1aff      	subgt	r7, r7, r3
 800e9dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dd17      	ble.n	800ea16 <_strtod_l+0x736>
 800e9e6:	4659      	mov	r1, fp
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f003 fa28 	bl	8011e40 <__pow5mult>
 800e9f0:	4683      	mov	fp, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f43f aeb8 	beq.w	800e768 <_strtod_l+0x488>
 800e9f8:	4601      	mov	r1, r0
 800e9fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f003 f975 	bl	8011cec <__multiply>
 800ea02:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea04:	2800      	cmp	r0, #0
 800ea06:	f43f aeaf 	beq.w	800e768 <_strtod_l+0x488>
 800ea0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f003 f857 	bl	8011ac0 <_Bfree>
 800ea12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea14:	9316      	str	r3, [sp, #88]	; 0x58
 800ea16:	2e00      	cmp	r6, #0
 800ea18:	f300 808c 	bgt.w	800eb34 <_strtod_l+0x854>
 800ea1c:	9b08      	ldr	r3, [sp, #32]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	dd08      	ble.n	800ea34 <_strtod_l+0x754>
 800ea22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea24:	9905      	ldr	r1, [sp, #20]
 800ea26:	4620      	mov	r0, r4
 800ea28:	f003 fa0a 	bl	8011e40 <__pow5mult>
 800ea2c:	9005      	str	r0, [sp, #20]
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	f43f ae9a 	beq.w	800e768 <_strtod_l+0x488>
 800ea34:	2f00      	cmp	r7, #0
 800ea36:	dd08      	ble.n	800ea4a <_strtod_l+0x76a>
 800ea38:	9905      	ldr	r1, [sp, #20]
 800ea3a:	463a      	mov	r2, r7
 800ea3c:	4620      	mov	r0, r4
 800ea3e:	f003 fa59 	bl	8011ef4 <__lshift>
 800ea42:	9005      	str	r0, [sp, #20]
 800ea44:	2800      	cmp	r0, #0
 800ea46:	f43f ae8f 	beq.w	800e768 <_strtod_l+0x488>
 800ea4a:	f1ba 0f00 	cmp.w	sl, #0
 800ea4e:	dd08      	ble.n	800ea62 <_strtod_l+0x782>
 800ea50:	4659      	mov	r1, fp
 800ea52:	4652      	mov	r2, sl
 800ea54:	4620      	mov	r0, r4
 800ea56:	f003 fa4d 	bl	8011ef4 <__lshift>
 800ea5a:	4683      	mov	fp, r0
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	f43f ae83 	beq.w	800e768 <_strtod_l+0x488>
 800ea62:	9a05      	ldr	r2, [sp, #20]
 800ea64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ea66:	4620      	mov	r0, r4
 800ea68:	f003 facc 	bl	8012004 <__mdiff>
 800ea6c:	4605      	mov	r5, r0
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	f43f ae7a 	beq.w	800e768 <_strtod_l+0x488>
 800ea74:	68c3      	ldr	r3, [r0, #12]
 800ea76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea78:	2300      	movs	r3, #0
 800ea7a:	60c3      	str	r3, [r0, #12]
 800ea7c:	4659      	mov	r1, fp
 800ea7e:	f003 faa5 	bl	8011fcc <__mcmp>
 800ea82:	2800      	cmp	r0, #0
 800ea84:	da60      	bge.n	800eb48 <_strtod_l+0x868>
 800ea86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea88:	ea53 0308 	orrs.w	r3, r3, r8
 800ea8c:	f040 8084 	bne.w	800eb98 <_strtod_l+0x8b8>
 800ea90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d17f      	bne.n	800eb98 <_strtod_l+0x8b8>
 800ea98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea9c:	0d1b      	lsrs	r3, r3, #20
 800ea9e:	051b      	lsls	r3, r3, #20
 800eaa0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eaa4:	d978      	bls.n	800eb98 <_strtod_l+0x8b8>
 800eaa6:	696b      	ldr	r3, [r5, #20]
 800eaa8:	b913      	cbnz	r3, 800eab0 <_strtod_l+0x7d0>
 800eaaa:	692b      	ldr	r3, [r5, #16]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	dd73      	ble.n	800eb98 <_strtod_l+0x8b8>
 800eab0:	4629      	mov	r1, r5
 800eab2:	2201      	movs	r2, #1
 800eab4:	4620      	mov	r0, r4
 800eab6:	f003 fa1d 	bl	8011ef4 <__lshift>
 800eaba:	4659      	mov	r1, fp
 800eabc:	4605      	mov	r5, r0
 800eabe:	f003 fa85 	bl	8011fcc <__mcmp>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	dd68      	ble.n	800eb98 <_strtod_l+0x8b8>
 800eac6:	9904      	ldr	r1, [sp, #16]
 800eac8:	4a54      	ldr	r2, [pc, #336]	; (800ec1c <_strtod_l+0x93c>)
 800eaca:	464b      	mov	r3, r9
 800eacc:	2900      	cmp	r1, #0
 800eace:	f000 8084 	beq.w	800ebda <_strtod_l+0x8fa>
 800ead2:	ea02 0109 	and.w	r1, r2, r9
 800ead6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eada:	dc7e      	bgt.n	800ebda <_strtod_l+0x8fa>
 800eadc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eae0:	f77f aeb3 	ble.w	800e84a <_strtod_l+0x56a>
 800eae4:	4b4e      	ldr	r3, [pc, #312]	; (800ec20 <_strtod_l+0x940>)
 800eae6:	4640      	mov	r0, r8
 800eae8:	4649      	mov	r1, r9
 800eaea:	2200      	movs	r2, #0
 800eaec:	f7f1 fd94 	bl	8000618 <__aeabi_dmul>
 800eaf0:	4b4a      	ldr	r3, [pc, #296]	; (800ec1c <_strtod_l+0x93c>)
 800eaf2:	400b      	ands	r3, r1
 800eaf4:	4680      	mov	r8, r0
 800eaf6:	4689      	mov	r9, r1
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f47f ae3f 	bne.w	800e77c <_strtod_l+0x49c>
 800eafe:	2322      	movs	r3, #34	; 0x22
 800eb00:	6023      	str	r3, [r4, #0]
 800eb02:	e63b      	b.n	800e77c <_strtod_l+0x49c>
 800eb04:	f04f 32ff 	mov.w	r2, #4294967295
 800eb08:	fa02 f303 	lsl.w	r3, r2, r3
 800eb0c:	ea03 0808 	and.w	r8, r3, r8
 800eb10:	e6e8      	b.n	800e8e4 <_strtod_l+0x604>
 800eb12:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800eb16:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800eb1a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800eb1e:	36e2      	adds	r6, #226	; 0xe2
 800eb20:	fa01 f306 	lsl.w	r3, r1, r6
 800eb24:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800eb28:	e748      	b.n	800e9bc <_strtod_l+0x6dc>
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800eb32:	e743      	b.n	800e9bc <_strtod_l+0x6dc>
 800eb34:	9916      	ldr	r1, [sp, #88]	; 0x58
 800eb36:	4632      	mov	r2, r6
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f003 f9db 	bl	8011ef4 <__lshift>
 800eb3e:	9016      	str	r0, [sp, #88]	; 0x58
 800eb40:	2800      	cmp	r0, #0
 800eb42:	f47f af6b 	bne.w	800ea1c <_strtod_l+0x73c>
 800eb46:	e60f      	b.n	800e768 <_strtod_l+0x488>
 800eb48:	46ca      	mov	sl, r9
 800eb4a:	d171      	bne.n	800ec30 <_strtod_l+0x950>
 800eb4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb52:	b352      	cbz	r2, 800ebaa <_strtod_l+0x8ca>
 800eb54:	4a33      	ldr	r2, [pc, #204]	; (800ec24 <_strtod_l+0x944>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d12a      	bne.n	800ebb0 <_strtod_l+0x8d0>
 800eb5a:	9b04      	ldr	r3, [sp, #16]
 800eb5c:	4641      	mov	r1, r8
 800eb5e:	b1fb      	cbz	r3, 800eba0 <_strtod_l+0x8c0>
 800eb60:	4b2e      	ldr	r3, [pc, #184]	; (800ec1c <_strtod_l+0x93c>)
 800eb62:	ea09 0303 	and.w	r3, r9, r3
 800eb66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eb6a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb6e:	d81a      	bhi.n	800eba6 <_strtod_l+0x8c6>
 800eb70:	0d1b      	lsrs	r3, r3, #20
 800eb72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb76:	fa02 f303 	lsl.w	r3, r2, r3
 800eb7a:	4299      	cmp	r1, r3
 800eb7c:	d118      	bne.n	800ebb0 <_strtod_l+0x8d0>
 800eb7e:	4b2a      	ldr	r3, [pc, #168]	; (800ec28 <_strtod_l+0x948>)
 800eb80:	459a      	cmp	sl, r3
 800eb82:	d102      	bne.n	800eb8a <_strtod_l+0x8aa>
 800eb84:	3101      	adds	r1, #1
 800eb86:	f43f adef 	beq.w	800e768 <_strtod_l+0x488>
 800eb8a:	4b24      	ldr	r3, [pc, #144]	; (800ec1c <_strtod_l+0x93c>)
 800eb8c:	ea0a 0303 	and.w	r3, sl, r3
 800eb90:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800eb94:	f04f 0800 	mov.w	r8, #0
 800eb98:	9b04      	ldr	r3, [sp, #16]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d1a2      	bne.n	800eae4 <_strtod_l+0x804>
 800eb9e:	e5ed      	b.n	800e77c <_strtod_l+0x49c>
 800eba0:	f04f 33ff 	mov.w	r3, #4294967295
 800eba4:	e7e9      	b.n	800eb7a <_strtod_l+0x89a>
 800eba6:	4613      	mov	r3, r2
 800eba8:	e7e7      	b.n	800eb7a <_strtod_l+0x89a>
 800ebaa:	ea53 0308 	orrs.w	r3, r3, r8
 800ebae:	d08a      	beq.n	800eac6 <_strtod_l+0x7e6>
 800ebb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebb2:	b1e3      	cbz	r3, 800ebee <_strtod_l+0x90e>
 800ebb4:	ea13 0f0a 	tst.w	r3, sl
 800ebb8:	d0ee      	beq.n	800eb98 <_strtod_l+0x8b8>
 800ebba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebbc:	9a04      	ldr	r2, [sp, #16]
 800ebbe:	4640      	mov	r0, r8
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	b1c3      	cbz	r3, 800ebf6 <_strtod_l+0x916>
 800ebc4:	f7ff fb6e 	bl	800e2a4 <sulp>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	ec51 0b18 	vmov	r0, r1, d8
 800ebd0:	f7f1 fb6c 	bl	80002ac <__adddf3>
 800ebd4:	4680      	mov	r8, r0
 800ebd6:	4689      	mov	r9, r1
 800ebd8:	e7de      	b.n	800eb98 <_strtod_l+0x8b8>
 800ebda:	4013      	ands	r3, r2
 800ebdc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ebe0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ebe4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ebe8:	f04f 38ff 	mov.w	r8, #4294967295
 800ebec:	e7d4      	b.n	800eb98 <_strtod_l+0x8b8>
 800ebee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebf0:	ea13 0f08 	tst.w	r3, r8
 800ebf4:	e7e0      	b.n	800ebb8 <_strtod_l+0x8d8>
 800ebf6:	f7ff fb55 	bl	800e2a4 <sulp>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	ec51 0b18 	vmov	r0, r1, d8
 800ec02:	f7f1 fb51 	bl	80002a8 <__aeabi_dsub>
 800ec06:	2200      	movs	r2, #0
 800ec08:	2300      	movs	r3, #0
 800ec0a:	4680      	mov	r8, r0
 800ec0c:	4689      	mov	r9, r1
 800ec0e:	f7f1 ff6b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d0c0      	beq.n	800eb98 <_strtod_l+0x8b8>
 800ec16:	e618      	b.n	800e84a <_strtod_l+0x56a>
 800ec18:	fffffc02 	.word	0xfffffc02
 800ec1c:	7ff00000 	.word	0x7ff00000
 800ec20:	39500000 	.word	0x39500000
 800ec24:	000fffff 	.word	0x000fffff
 800ec28:	7fefffff 	.word	0x7fefffff
 800ec2c:	080155a0 	.word	0x080155a0
 800ec30:	4659      	mov	r1, fp
 800ec32:	4628      	mov	r0, r5
 800ec34:	f003 fb3a 	bl	80122ac <__ratio>
 800ec38:	ec57 6b10 	vmov	r6, r7, d0
 800ec3c:	ee10 0a10 	vmov	r0, s0
 800ec40:	2200      	movs	r2, #0
 800ec42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec46:	4639      	mov	r1, r7
 800ec48:	f7f1 ff62 	bl	8000b10 <__aeabi_dcmple>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d071      	beq.n	800ed34 <_strtod_l+0xa54>
 800ec50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d17c      	bne.n	800ed50 <_strtod_l+0xa70>
 800ec56:	f1b8 0f00 	cmp.w	r8, #0
 800ec5a:	d15a      	bne.n	800ed12 <_strtod_l+0xa32>
 800ec5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d15d      	bne.n	800ed20 <_strtod_l+0xa40>
 800ec64:	4b90      	ldr	r3, [pc, #576]	; (800eea8 <_strtod_l+0xbc8>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	4630      	mov	r0, r6
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 ff46 	bl	8000afc <__aeabi_dcmplt>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d15c      	bne.n	800ed2e <_strtod_l+0xa4e>
 800ec74:	4630      	mov	r0, r6
 800ec76:	4639      	mov	r1, r7
 800ec78:	4b8c      	ldr	r3, [pc, #560]	; (800eeac <_strtod_l+0xbcc>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f7f1 fccc 	bl	8000618 <__aeabi_dmul>
 800ec80:	4606      	mov	r6, r0
 800ec82:	460f      	mov	r7, r1
 800ec84:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ec88:	9606      	str	r6, [sp, #24]
 800ec8a:	9307      	str	r3, [sp, #28]
 800ec8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ec94:	4b86      	ldr	r3, [pc, #536]	; (800eeb0 <_strtod_l+0xbd0>)
 800ec96:	ea0a 0303 	and.w	r3, sl, r3
 800ec9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ec9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec9e:	4b85      	ldr	r3, [pc, #532]	; (800eeb4 <_strtod_l+0xbd4>)
 800eca0:	429a      	cmp	r2, r3
 800eca2:	f040 8090 	bne.w	800edc6 <_strtod_l+0xae6>
 800eca6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ecaa:	ec49 8b10 	vmov	d0, r8, r9
 800ecae:	f003 fa33 	bl	8012118 <__ulp>
 800ecb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecb6:	ec51 0b10 	vmov	r0, r1, d0
 800ecba:	f7f1 fcad 	bl	8000618 <__aeabi_dmul>
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	464b      	mov	r3, r9
 800ecc2:	f7f1 faf3 	bl	80002ac <__adddf3>
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4979      	ldr	r1, [pc, #484]	; (800eeb0 <_strtod_l+0xbd0>)
 800ecca:	4a7b      	ldr	r2, [pc, #492]	; (800eeb8 <_strtod_l+0xbd8>)
 800eccc:	4019      	ands	r1, r3
 800ecce:	4291      	cmp	r1, r2
 800ecd0:	4680      	mov	r8, r0
 800ecd2:	d944      	bls.n	800ed5e <_strtod_l+0xa7e>
 800ecd4:	ee18 2a90 	vmov	r2, s17
 800ecd8:	4b78      	ldr	r3, [pc, #480]	; (800eebc <_strtod_l+0xbdc>)
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d104      	bne.n	800ece8 <_strtod_l+0xa08>
 800ecde:	ee18 3a10 	vmov	r3, s16
 800ece2:	3301      	adds	r3, #1
 800ece4:	f43f ad40 	beq.w	800e768 <_strtod_l+0x488>
 800ece8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800eebc <_strtod_l+0xbdc>
 800ecec:	f04f 38ff 	mov.w	r8, #4294967295
 800ecf0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f002 fee4 	bl	8011ac0 <_Bfree>
 800ecf8:	9905      	ldr	r1, [sp, #20]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f002 fee0 	bl	8011ac0 <_Bfree>
 800ed00:	4659      	mov	r1, fp
 800ed02:	4620      	mov	r0, r4
 800ed04:	f002 fedc 	bl	8011ac0 <_Bfree>
 800ed08:	4629      	mov	r1, r5
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f002 fed8 	bl	8011ac0 <_Bfree>
 800ed10:	e609      	b.n	800e926 <_strtod_l+0x646>
 800ed12:	f1b8 0f01 	cmp.w	r8, #1
 800ed16:	d103      	bne.n	800ed20 <_strtod_l+0xa40>
 800ed18:	f1b9 0f00 	cmp.w	r9, #0
 800ed1c:	f43f ad95 	beq.w	800e84a <_strtod_l+0x56a>
 800ed20:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ee78 <_strtod_l+0xb98>
 800ed24:	4f60      	ldr	r7, [pc, #384]	; (800eea8 <_strtod_l+0xbc8>)
 800ed26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed2a:	2600      	movs	r6, #0
 800ed2c:	e7ae      	b.n	800ec8c <_strtod_l+0x9ac>
 800ed2e:	4f5f      	ldr	r7, [pc, #380]	; (800eeac <_strtod_l+0xbcc>)
 800ed30:	2600      	movs	r6, #0
 800ed32:	e7a7      	b.n	800ec84 <_strtod_l+0x9a4>
 800ed34:	4b5d      	ldr	r3, [pc, #372]	; (800eeac <_strtod_l+0xbcc>)
 800ed36:	4630      	mov	r0, r6
 800ed38:	4639      	mov	r1, r7
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f7f1 fc6c 	bl	8000618 <__aeabi_dmul>
 800ed40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed42:	4606      	mov	r6, r0
 800ed44:	460f      	mov	r7, r1
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d09c      	beq.n	800ec84 <_strtod_l+0x9a4>
 800ed4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ed4e:	e79d      	b.n	800ec8c <_strtod_l+0x9ac>
 800ed50:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ee80 <_strtod_l+0xba0>
 800ed54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ed58:	ec57 6b17 	vmov	r6, r7, d7
 800ed5c:	e796      	b.n	800ec8c <_strtod_l+0x9ac>
 800ed5e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ed62:	9b04      	ldr	r3, [sp, #16]
 800ed64:	46ca      	mov	sl, r9
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1c2      	bne.n	800ecf0 <_strtod_l+0xa10>
 800ed6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed70:	0d1b      	lsrs	r3, r3, #20
 800ed72:	051b      	lsls	r3, r3, #20
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d1bb      	bne.n	800ecf0 <_strtod_l+0xa10>
 800ed78:	4630      	mov	r0, r6
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	f7f2 f90a 	bl	8000f94 <__aeabi_d2lz>
 800ed80:	f7f1 fc1c 	bl	80005bc <__aeabi_l2d>
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	4630      	mov	r0, r6
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	f7f1 fa8c 	bl	80002a8 <__aeabi_dsub>
 800ed90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed96:	ea43 0308 	orr.w	r3, r3, r8
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	460f      	mov	r7, r1
 800eda0:	d054      	beq.n	800ee4c <_strtod_l+0xb6c>
 800eda2:	a339      	add	r3, pc, #228	; (adr r3, 800ee88 <_strtod_l+0xba8>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	f7f1 fea8 	bl	8000afc <__aeabi_dcmplt>
 800edac:	2800      	cmp	r0, #0
 800edae:	f47f ace5 	bne.w	800e77c <_strtod_l+0x49c>
 800edb2:	a337      	add	r3, pc, #220	; (adr r3, 800ee90 <_strtod_l+0xbb0>)
 800edb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb8:	4630      	mov	r0, r6
 800edba:	4639      	mov	r1, r7
 800edbc:	f7f1 febc 	bl	8000b38 <__aeabi_dcmpgt>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d095      	beq.n	800ecf0 <_strtod_l+0xa10>
 800edc4:	e4da      	b.n	800e77c <_strtod_l+0x49c>
 800edc6:	9b04      	ldr	r3, [sp, #16]
 800edc8:	b333      	cbz	r3, 800ee18 <_strtod_l+0xb38>
 800edca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edcc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800edd0:	d822      	bhi.n	800ee18 <_strtod_l+0xb38>
 800edd2:	a331      	add	r3, pc, #196	; (adr r3, 800ee98 <_strtod_l+0xbb8>)
 800edd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd8:	4630      	mov	r0, r6
 800edda:	4639      	mov	r1, r7
 800eddc:	f7f1 fe98 	bl	8000b10 <__aeabi_dcmple>
 800ede0:	b1a0      	cbz	r0, 800ee0c <_strtod_l+0xb2c>
 800ede2:	4639      	mov	r1, r7
 800ede4:	4630      	mov	r0, r6
 800ede6:	f7f1 feef 	bl	8000bc8 <__aeabi_d2uiz>
 800edea:	2801      	cmp	r0, #1
 800edec:	bf38      	it	cc
 800edee:	2001      	movcc	r0, #1
 800edf0:	f7f1 fb98 	bl	8000524 <__aeabi_ui2d>
 800edf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edf6:	4606      	mov	r6, r0
 800edf8:	460f      	mov	r7, r1
 800edfa:	bb23      	cbnz	r3, 800ee46 <_strtod_l+0xb66>
 800edfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee00:	9010      	str	r0, [sp, #64]	; 0x40
 800ee02:	9311      	str	r3, [sp, #68]	; 0x44
 800ee04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ee08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ee0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ee14:	1a9b      	subs	r3, r3, r2
 800ee16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ee1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ee20:	eef0 0a68 	vmov.f32	s1, s17
 800ee24:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ee28:	f003 f976 	bl	8012118 <__ulp>
 800ee2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ee30:	ec53 2b10 	vmov	r2, r3, d0
 800ee34:	f7f1 fbf0 	bl	8000618 <__aeabi_dmul>
 800ee38:	ec53 2b18 	vmov	r2, r3, d8
 800ee3c:	f7f1 fa36 	bl	80002ac <__adddf3>
 800ee40:	4680      	mov	r8, r0
 800ee42:	4689      	mov	r9, r1
 800ee44:	e78d      	b.n	800ed62 <_strtod_l+0xa82>
 800ee46:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ee4a:	e7db      	b.n	800ee04 <_strtod_l+0xb24>
 800ee4c:	a314      	add	r3, pc, #80	; (adr r3, 800eea0 <_strtod_l+0xbc0>)
 800ee4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee52:	f7f1 fe53 	bl	8000afc <__aeabi_dcmplt>
 800ee56:	e7b3      	b.n	800edc0 <_strtod_l+0xae0>
 800ee58:	2300      	movs	r3, #0
 800ee5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ee5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	f7ff ba7c 	b.w	800e35e <_strtod_l+0x7e>
 800ee66:	2a65      	cmp	r2, #101	; 0x65
 800ee68:	f43f ab75 	beq.w	800e556 <_strtod_l+0x276>
 800ee6c:	2a45      	cmp	r2, #69	; 0x45
 800ee6e:	f43f ab72 	beq.w	800e556 <_strtod_l+0x276>
 800ee72:	2301      	movs	r3, #1
 800ee74:	f7ff bbaa 	b.w	800e5cc <_strtod_l+0x2ec>
 800ee78:	00000000 	.word	0x00000000
 800ee7c:	bff00000 	.word	0xbff00000
 800ee80:	00000000 	.word	0x00000000
 800ee84:	3ff00000 	.word	0x3ff00000
 800ee88:	94a03595 	.word	0x94a03595
 800ee8c:	3fdfffff 	.word	0x3fdfffff
 800ee90:	35afe535 	.word	0x35afe535
 800ee94:	3fe00000 	.word	0x3fe00000
 800ee98:	ffc00000 	.word	0xffc00000
 800ee9c:	41dfffff 	.word	0x41dfffff
 800eea0:	94a03595 	.word	0x94a03595
 800eea4:	3fcfffff 	.word	0x3fcfffff
 800eea8:	3ff00000 	.word	0x3ff00000
 800eeac:	3fe00000 	.word	0x3fe00000
 800eeb0:	7ff00000 	.word	0x7ff00000
 800eeb4:	7fe00000 	.word	0x7fe00000
 800eeb8:	7c9fffff 	.word	0x7c9fffff
 800eebc:	7fefffff 	.word	0x7fefffff

0800eec0 <_strtod_r>:
 800eec0:	4b01      	ldr	r3, [pc, #4]	; (800eec8 <_strtod_r+0x8>)
 800eec2:	f7ff ba0d 	b.w	800e2e0 <_strtod_l>
 800eec6:	bf00      	nop
 800eec8:	20000048 	.word	0x20000048

0800eecc <strtof>:
 800eecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eed0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ef94 <strtof+0xc8>
 800eed4:	4b2a      	ldr	r3, [pc, #168]	; (800ef80 <strtof+0xb4>)
 800eed6:	460a      	mov	r2, r1
 800eed8:	ed2d 8b02 	vpush	{d8}
 800eedc:	4601      	mov	r1, r0
 800eede:	f8d8 0000 	ldr.w	r0, [r8]
 800eee2:	f7ff f9fd 	bl	800e2e0 <_strtod_l>
 800eee6:	ec55 4b10 	vmov	r4, r5, d0
 800eeea:	ee10 2a10 	vmov	r2, s0
 800eeee:	ee10 0a10 	vmov	r0, s0
 800eef2:	462b      	mov	r3, r5
 800eef4:	4629      	mov	r1, r5
 800eef6:	f7f1 fe29 	bl	8000b4c <__aeabi_dcmpun>
 800eefa:	b190      	cbz	r0, 800ef22 <strtof+0x56>
 800eefc:	2d00      	cmp	r5, #0
 800eefe:	4821      	ldr	r0, [pc, #132]	; (800ef84 <strtof+0xb8>)
 800ef00:	da09      	bge.n	800ef16 <strtof+0x4a>
 800ef02:	f001 fb49 	bl	8010598 <nanf>
 800ef06:	eeb1 8a40 	vneg.f32	s16, s0
 800ef0a:	eeb0 0a48 	vmov.f32	s0, s16
 800ef0e:	ecbd 8b02 	vpop	{d8}
 800ef12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef16:	ecbd 8b02 	vpop	{d8}
 800ef1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1e:	f001 bb3b 	b.w	8010598 <nanf>
 800ef22:	4620      	mov	r0, r4
 800ef24:	4629      	mov	r1, r5
 800ef26:	f7f1 fe6f 	bl	8000c08 <__aeabi_d2f>
 800ef2a:	ee08 0a10 	vmov	s16, r0
 800ef2e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ef88 <strtof+0xbc>
 800ef32:	eeb0 7ac8 	vabs.f32	s14, s16
 800ef36:	eeb4 7a67 	vcmp.f32	s14, s15
 800ef3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef3e:	dd11      	ble.n	800ef64 <strtof+0x98>
 800ef40:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800ef44:	4b11      	ldr	r3, [pc, #68]	; (800ef8c <strtof+0xc0>)
 800ef46:	f04f 32ff 	mov.w	r2, #4294967295
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	4639      	mov	r1, r7
 800ef4e:	f7f1 fdfd 	bl	8000b4c <__aeabi_dcmpun>
 800ef52:	b980      	cbnz	r0, 800ef76 <strtof+0xaa>
 800ef54:	4b0d      	ldr	r3, [pc, #52]	; (800ef8c <strtof+0xc0>)
 800ef56:	f04f 32ff 	mov.w	r2, #4294967295
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	4639      	mov	r1, r7
 800ef5e:	f7f1 fdd7 	bl	8000b10 <__aeabi_dcmple>
 800ef62:	b940      	cbnz	r0, 800ef76 <strtof+0xaa>
 800ef64:	ee18 3a10 	vmov	r3, s16
 800ef68:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ef6c:	d1cd      	bne.n	800ef0a <strtof+0x3e>
 800ef6e:	4b08      	ldr	r3, [pc, #32]	; (800ef90 <strtof+0xc4>)
 800ef70:	402b      	ands	r3, r5
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d0c9      	beq.n	800ef0a <strtof+0x3e>
 800ef76:	f8d8 3000 	ldr.w	r3, [r8]
 800ef7a:	2222      	movs	r2, #34	; 0x22
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	e7c4      	b.n	800ef0a <strtof+0x3e>
 800ef80:	20000048 	.word	0x20000048
 800ef84:	080157b4 	.word	0x080157b4
 800ef88:	7f7fffff 	.word	0x7f7fffff
 800ef8c:	7fefffff 	.word	0x7fefffff
 800ef90:	7ff00000 	.word	0x7ff00000
 800ef94:	20000200 	.word	0x20000200

0800ef98 <_strtol_l.constprop.0>:
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef9e:	d001      	beq.n	800efa4 <_strtol_l.constprop.0+0xc>
 800efa0:	2b24      	cmp	r3, #36	; 0x24
 800efa2:	d906      	bls.n	800efb2 <_strtol_l.constprop.0+0x1a>
 800efa4:	f001 faae 	bl	8010504 <__errno>
 800efa8:	2316      	movs	r3, #22
 800efaa:	6003      	str	r3, [r0, #0]
 800efac:	2000      	movs	r0, #0
 800efae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f098 <_strtol_l.constprop.0+0x100>
 800efb6:	460d      	mov	r5, r1
 800efb8:	462e      	mov	r6, r5
 800efba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800efbe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800efc2:	f017 0708 	ands.w	r7, r7, #8
 800efc6:	d1f7      	bne.n	800efb8 <_strtol_l.constprop.0+0x20>
 800efc8:	2c2d      	cmp	r4, #45	; 0x2d
 800efca:	d132      	bne.n	800f032 <_strtol_l.constprop.0+0x9a>
 800efcc:	782c      	ldrb	r4, [r5, #0]
 800efce:	2701      	movs	r7, #1
 800efd0:	1cb5      	adds	r5, r6, #2
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d05b      	beq.n	800f08e <_strtol_l.constprop.0+0xf6>
 800efd6:	2b10      	cmp	r3, #16
 800efd8:	d109      	bne.n	800efee <_strtol_l.constprop.0+0x56>
 800efda:	2c30      	cmp	r4, #48	; 0x30
 800efdc:	d107      	bne.n	800efee <_strtol_l.constprop.0+0x56>
 800efde:	782c      	ldrb	r4, [r5, #0]
 800efe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800efe4:	2c58      	cmp	r4, #88	; 0x58
 800efe6:	d14d      	bne.n	800f084 <_strtol_l.constprop.0+0xec>
 800efe8:	786c      	ldrb	r4, [r5, #1]
 800efea:	2310      	movs	r3, #16
 800efec:	3502      	adds	r5, #2
 800efee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eff2:	f108 38ff 	add.w	r8, r8, #4294967295
 800eff6:	f04f 0e00 	mov.w	lr, #0
 800effa:	fbb8 f9f3 	udiv	r9, r8, r3
 800effe:	4676      	mov	r6, lr
 800f000:	fb03 8a19 	mls	sl, r3, r9, r8
 800f004:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f008:	f1bc 0f09 	cmp.w	ip, #9
 800f00c:	d816      	bhi.n	800f03c <_strtol_l.constprop.0+0xa4>
 800f00e:	4664      	mov	r4, ip
 800f010:	42a3      	cmp	r3, r4
 800f012:	dd24      	ble.n	800f05e <_strtol_l.constprop.0+0xc6>
 800f014:	f1be 3fff 	cmp.w	lr, #4294967295
 800f018:	d008      	beq.n	800f02c <_strtol_l.constprop.0+0x94>
 800f01a:	45b1      	cmp	r9, r6
 800f01c:	d31c      	bcc.n	800f058 <_strtol_l.constprop.0+0xc0>
 800f01e:	d101      	bne.n	800f024 <_strtol_l.constprop.0+0x8c>
 800f020:	45a2      	cmp	sl, r4
 800f022:	db19      	blt.n	800f058 <_strtol_l.constprop.0+0xc0>
 800f024:	fb06 4603 	mla	r6, r6, r3, r4
 800f028:	f04f 0e01 	mov.w	lr, #1
 800f02c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f030:	e7e8      	b.n	800f004 <_strtol_l.constprop.0+0x6c>
 800f032:	2c2b      	cmp	r4, #43	; 0x2b
 800f034:	bf04      	itt	eq
 800f036:	782c      	ldrbeq	r4, [r5, #0]
 800f038:	1cb5      	addeq	r5, r6, #2
 800f03a:	e7ca      	b.n	800efd2 <_strtol_l.constprop.0+0x3a>
 800f03c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f040:	f1bc 0f19 	cmp.w	ip, #25
 800f044:	d801      	bhi.n	800f04a <_strtol_l.constprop.0+0xb2>
 800f046:	3c37      	subs	r4, #55	; 0x37
 800f048:	e7e2      	b.n	800f010 <_strtol_l.constprop.0+0x78>
 800f04a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f04e:	f1bc 0f19 	cmp.w	ip, #25
 800f052:	d804      	bhi.n	800f05e <_strtol_l.constprop.0+0xc6>
 800f054:	3c57      	subs	r4, #87	; 0x57
 800f056:	e7db      	b.n	800f010 <_strtol_l.constprop.0+0x78>
 800f058:	f04f 3eff 	mov.w	lr, #4294967295
 800f05c:	e7e6      	b.n	800f02c <_strtol_l.constprop.0+0x94>
 800f05e:	f1be 3fff 	cmp.w	lr, #4294967295
 800f062:	d105      	bne.n	800f070 <_strtol_l.constprop.0+0xd8>
 800f064:	2322      	movs	r3, #34	; 0x22
 800f066:	6003      	str	r3, [r0, #0]
 800f068:	4646      	mov	r6, r8
 800f06a:	b942      	cbnz	r2, 800f07e <_strtol_l.constprop.0+0xe6>
 800f06c:	4630      	mov	r0, r6
 800f06e:	e79e      	b.n	800efae <_strtol_l.constprop.0+0x16>
 800f070:	b107      	cbz	r7, 800f074 <_strtol_l.constprop.0+0xdc>
 800f072:	4276      	negs	r6, r6
 800f074:	2a00      	cmp	r2, #0
 800f076:	d0f9      	beq.n	800f06c <_strtol_l.constprop.0+0xd4>
 800f078:	f1be 0f00 	cmp.w	lr, #0
 800f07c:	d000      	beq.n	800f080 <_strtol_l.constprop.0+0xe8>
 800f07e:	1e69      	subs	r1, r5, #1
 800f080:	6011      	str	r1, [r2, #0]
 800f082:	e7f3      	b.n	800f06c <_strtol_l.constprop.0+0xd4>
 800f084:	2430      	movs	r4, #48	; 0x30
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1b1      	bne.n	800efee <_strtol_l.constprop.0+0x56>
 800f08a:	2308      	movs	r3, #8
 800f08c:	e7af      	b.n	800efee <_strtol_l.constprop.0+0x56>
 800f08e:	2c30      	cmp	r4, #48	; 0x30
 800f090:	d0a5      	beq.n	800efde <_strtol_l.constprop.0+0x46>
 800f092:	230a      	movs	r3, #10
 800f094:	e7ab      	b.n	800efee <_strtol_l.constprop.0+0x56>
 800f096:	bf00      	nop
 800f098:	080155c9 	.word	0x080155c9

0800f09c <_strtol_r>:
 800f09c:	f7ff bf7c 	b.w	800ef98 <_strtol_l.constprop.0>

0800f0a0 <strtol>:
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	460a      	mov	r2, r1
 800f0a4:	4601      	mov	r1, r0
 800f0a6:	4802      	ldr	r0, [pc, #8]	; (800f0b0 <strtol+0x10>)
 800f0a8:	6800      	ldr	r0, [r0, #0]
 800f0aa:	f7ff bf75 	b.w	800ef98 <_strtol_l.constprop.0>
 800f0ae:	bf00      	nop
 800f0b0:	20000200 	.word	0x20000200

0800f0b4 <__cvt>:
 800f0b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0b8:	ec55 4b10 	vmov	r4, r5, d0
 800f0bc:	2d00      	cmp	r5, #0
 800f0be:	460e      	mov	r6, r1
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	462b      	mov	r3, r5
 800f0c4:	bfbb      	ittet	lt
 800f0c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f0ca:	461d      	movlt	r5, r3
 800f0cc:	2300      	movge	r3, #0
 800f0ce:	232d      	movlt	r3, #45	; 0x2d
 800f0d0:	700b      	strb	r3, [r1, #0]
 800f0d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f0d8:	4691      	mov	r9, r2
 800f0da:	f023 0820 	bic.w	r8, r3, #32
 800f0de:	bfbc      	itt	lt
 800f0e0:	4622      	movlt	r2, r4
 800f0e2:	4614      	movlt	r4, r2
 800f0e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f0e8:	d005      	beq.n	800f0f6 <__cvt+0x42>
 800f0ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f0ee:	d100      	bne.n	800f0f2 <__cvt+0x3e>
 800f0f0:	3601      	adds	r6, #1
 800f0f2:	2102      	movs	r1, #2
 800f0f4:	e000      	b.n	800f0f8 <__cvt+0x44>
 800f0f6:	2103      	movs	r1, #3
 800f0f8:	ab03      	add	r3, sp, #12
 800f0fa:	9301      	str	r3, [sp, #4]
 800f0fc:	ab02      	add	r3, sp, #8
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	ec45 4b10 	vmov	d0, r4, r5
 800f104:	4653      	mov	r3, sl
 800f106:	4632      	mov	r2, r6
 800f108:	f001 faf2 	bl	80106f0 <_dtoa_r>
 800f10c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f110:	4607      	mov	r7, r0
 800f112:	d102      	bne.n	800f11a <__cvt+0x66>
 800f114:	f019 0f01 	tst.w	r9, #1
 800f118:	d022      	beq.n	800f160 <__cvt+0xac>
 800f11a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f11e:	eb07 0906 	add.w	r9, r7, r6
 800f122:	d110      	bne.n	800f146 <__cvt+0x92>
 800f124:	783b      	ldrb	r3, [r7, #0]
 800f126:	2b30      	cmp	r3, #48	; 0x30
 800f128:	d10a      	bne.n	800f140 <__cvt+0x8c>
 800f12a:	2200      	movs	r2, #0
 800f12c:	2300      	movs	r3, #0
 800f12e:	4620      	mov	r0, r4
 800f130:	4629      	mov	r1, r5
 800f132:	f7f1 fcd9 	bl	8000ae8 <__aeabi_dcmpeq>
 800f136:	b918      	cbnz	r0, 800f140 <__cvt+0x8c>
 800f138:	f1c6 0601 	rsb	r6, r6, #1
 800f13c:	f8ca 6000 	str.w	r6, [sl]
 800f140:	f8da 3000 	ldr.w	r3, [sl]
 800f144:	4499      	add	r9, r3
 800f146:	2200      	movs	r2, #0
 800f148:	2300      	movs	r3, #0
 800f14a:	4620      	mov	r0, r4
 800f14c:	4629      	mov	r1, r5
 800f14e:	f7f1 fccb 	bl	8000ae8 <__aeabi_dcmpeq>
 800f152:	b108      	cbz	r0, 800f158 <__cvt+0xa4>
 800f154:	f8cd 900c 	str.w	r9, [sp, #12]
 800f158:	2230      	movs	r2, #48	; 0x30
 800f15a:	9b03      	ldr	r3, [sp, #12]
 800f15c:	454b      	cmp	r3, r9
 800f15e:	d307      	bcc.n	800f170 <__cvt+0xbc>
 800f160:	9b03      	ldr	r3, [sp, #12]
 800f162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f164:	1bdb      	subs	r3, r3, r7
 800f166:	4638      	mov	r0, r7
 800f168:	6013      	str	r3, [r2, #0]
 800f16a:	b004      	add	sp, #16
 800f16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f170:	1c59      	adds	r1, r3, #1
 800f172:	9103      	str	r1, [sp, #12]
 800f174:	701a      	strb	r2, [r3, #0]
 800f176:	e7f0      	b.n	800f15a <__cvt+0xa6>

0800f178 <__exponent>:
 800f178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f17a:	4603      	mov	r3, r0
 800f17c:	2900      	cmp	r1, #0
 800f17e:	bfb8      	it	lt
 800f180:	4249      	neglt	r1, r1
 800f182:	f803 2b02 	strb.w	r2, [r3], #2
 800f186:	bfb4      	ite	lt
 800f188:	222d      	movlt	r2, #45	; 0x2d
 800f18a:	222b      	movge	r2, #43	; 0x2b
 800f18c:	2909      	cmp	r1, #9
 800f18e:	7042      	strb	r2, [r0, #1]
 800f190:	dd2a      	ble.n	800f1e8 <__exponent+0x70>
 800f192:	f10d 0207 	add.w	r2, sp, #7
 800f196:	4617      	mov	r7, r2
 800f198:	260a      	movs	r6, #10
 800f19a:	4694      	mov	ip, r2
 800f19c:	fb91 f5f6 	sdiv	r5, r1, r6
 800f1a0:	fb06 1415 	mls	r4, r6, r5, r1
 800f1a4:	3430      	adds	r4, #48	; 0x30
 800f1a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f1aa:	460c      	mov	r4, r1
 800f1ac:	2c63      	cmp	r4, #99	; 0x63
 800f1ae:	f102 32ff 	add.w	r2, r2, #4294967295
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	dcf1      	bgt.n	800f19a <__exponent+0x22>
 800f1b6:	3130      	adds	r1, #48	; 0x30
 800f1b8:	f1ac 0402 	sub.w	r4, ip, #2
 800f1bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f1c0:	1c41      	adds	r1, r0, #1
 800f1c2:	4622      	mov	r2, r4
 800f1c4:	42ba      	cmp	r2, r7
 800f1c6:	d30a      	bcc.n	800f1de <__exponent+0x66>
 800f1c8:	f10d 0209 	add.w	r2, sp, #9
 800f1cc:	eba2 020c 	sub.w	r2, r2, ip
 800f1d0:	42bc      	cmp	r4, r7
 800f1d2:	bf88      	it	hi
 800f1d4:	2200      	movhi	r2, #0
 800f1d6:	4413      	add	r3, r2
 800f1d8:	1a18      	subs	r0, r3, r0
 800f1da:	b003      	add	sp, #12
 800f1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1de:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f1e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f1e6:	e7ed      	b.n	800f1c4 <__exponent+0x4c>
 800f1e8:	2330      	movs	r3, #48	; 0x30
 800f1ea:	3130      	adds	r1, #48	; 0x30
 800f1ec:	7083      	strb	r3, [r0, #2]
 800f1ee:	70c1      	strb	r1, [r0, #3]
 800f1f0:	1d03      	adds	r3, r0, #4
 800f1f2:	e7f1      	b.n	800f1d8 <__exponent+0x60>

0800f1f4 <_printf_float>:
 800f1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f8:	ed2d 8b02 	vpush	{d8}
 800f1fc:	b08d      	sub	sp, #52	; 0x34
 800f1fe:	460c      	mov	r4, r1
 800f200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f204:	4616      	mov	r6, r2
 800f206:	461f      	mov	r7, r3
 800f208:	4605      	mov	r5, r0
 800f20a:	f001 f8cb 	bl	80103a4 <_localeconv_r>
 800f20e:	f8d0 a000 	ldr.w	sl, [r0]
 800f212:	4650      	mov	r0, sl
 800f214:	f7f1 f83c 	bl	8000290 <strlen>
 800f218:	2300      	movs	r3, #0
 800f21a:	930a      	str	r3, [sp, #40]	; 0x28
 800f21c:	6823      	ldr	r3, [r4, #0]
 800f21e:	9305      	str	r3, [sp, #20]
 800f220:	f8d8 3000 	ldr.w	r3, [r8]
 800f224:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f228:	3307      	adds	r3, #7
 800f22a:	f023 0307 	bic.w	r3, r3, #7
 800f22e:	f103 0208 	add.w	r2, r3, #8
 800f232:	f8c8 2000 	str.w	r2, [r8]
 800f236:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f23a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f23e:	9307      	str	r3, [sp, #28]
 800f240:	f8cd 8018 	str.w	r8, [sp, #24]
 800f244:	ee08 0a10 	vmov	s16, r0
 800f248:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f24c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f250:	4b9e      	ldr	r3, [pc, #632]	; (800f4cc <_printf_float+0x2d8>)
 800f252:	f04f 32ff 	mov.w	r2, #4294967295
 800f256:	f7f1 fc79 	bl	8000b4c <__aeabi_dcmpun>
 800f25a:	bb88      	cbnz	r0, 800f2c0 <_printf_float+0xcc>
 800f25c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f260:	4b9a      	ldr	r3, [pc, #616]	; (800f4cc <_printf_float+0x2d8>)
 800f262:	f04f 32ff 	mov.w	r2, #4294967295
 800f266:	f7f1 fc53 	bl	8000b10 <__aeabi_dcmple>
 800f26a:	bb48      	cbnz	r0, 800f2c0 <_printf_float+0xcc>
 800f26c:	2200      	movs	r2, #0
 800f26e:	2300      	movs	r3, #0
 800f270:	4640      	mov	r0, r8
 800f272:	4649      	mov	r1, r9
 800f274:	f7f1 fc42 	bl	8000afc <__aeabi_dcmplt>
 800f278:	b110      	cbz	r0, 800f280 <_printf_float+0x8c>
 800f27a:	232d      	movs	r3, #45	; 0x2d
 800f27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f280:	4a93      	ldr	r2, [pc, #588]	; (800f4d0 <_printf_float+0x2dc>)
 800f282:	4b94      	ldr	r3, [pc, #592]	; (800f4d4 <_printf_float+0x2e0>)
 800f284:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f288:	bf94      	ite	ls
 800f28a:	4690      	movls	r8, r2
 800f28c:	4698      	movhi	r8, r3
 800f28e:	2303      	movs	r3, #3
 800f290:	6123      	str	r3, [r4, #16]
 800f292:	9b05      	ldr	r3, [sp, #20]
 800f294:	f023 0304 	bic.w	r3, r3, #4
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	f04f 0900 	mov.w	r9, #0
 800f29e:	9700      	str	r7, [sp, #0]
 800f2a0:	4633      	mov	r3, r6
 800f2a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	f000 f9da 	bl	800f660 <_printf_common>
 800f2ac:	3001      	adds	r0, #1
 800f2ae:	f040 8090 	bne.w	800f3d2 <_printf_float+0x1de>
 800f2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b6:	b00d      	add	sp, #52	; 0x34
 800f2b8:	ecbd 8b02 	vpop	{d8}
 800f2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c0:	4642      	mov	r2, r8
 800f2c2:	464b      	mov	r3, r9
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	4649      	mov	r1, r9
 800f2c8:	f7f1 fc40 	bl	8000b4c <__aeabi_dcmpun>
 800f2cc:	b140      	cbz	r0, 800f2e0 <_printf_float+0xec>
 800f2ce:	464b      	mov	r3, r9
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	bfbc      	itt	lt
 800f2d4:	232d      	movlt	r3, #45	; 0x2d
 800f2d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f2da:	4a7f      	ldr	r2, [pc, #508]	; (800f4d8 <_printf_float+0x2e4>)
 800f2dc:	4b7f      	ldr	r3, [pc, #508]	; (800f4dc <_printf_float+0x2e8>)
 800f2de:	e7d1      	b.n	800f284 <_printf_float+0x90>
 800f2e0:	6863      	ldr	r3, [r4, #4]
 800f2e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f2e6:	9206      	str	r2, [sp, #24]
 800f2e8:	1c5a      	adds	r2, r3, #1
 800f2ea:	d13f      	bne.n	800f36c <_printf_float+0x178>
 800f2ec:	2306      	movs	r3, #6
 800f2ee:	6063      	str	r3, [r4, #4]
 800f2f0:	9b05      	ldr	r3, [sp, #20]
 800f2f2:	6861      	ldr	r1, [r4, #4]
 800f2f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	9303      	str	r3, [sp, #12]
 800f2fc:	ab0a      	add	r3, sp, #40	; 0x28
 800f2fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f302:	ab09      	add	r3, sp, #36	; 0x24
 800f304:	ec49 8b10 	vmov	d0, r8, r9
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	6022      	str	r2, [r4, #0]
 800f30c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f310:	4628      	mov	r0, r5
 800f312:	f7ff fecf 	bl	800f0b4 <__cvt>
 800f316:	9b06      	ldr	r3, [sp, #24]
 800f318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f31a:	2b47      	cmp	r3, #71	; 0x47
 800f31c:	4680      	mov	r8, r0
 800f31e:	d108      	bne.n	800f332 <_printf_float+0x13e>
 800f320:	1cc8      	adds	r0, r1, #3
 800f322:	db02      	blt.n	800f32a <_printf_float+0x136>
 800f324:	6863      	ldr	r3, [r4, #4]
 800f326:	4299      	cmp	r1, r3
 800f328:	dd41      	ble.n	800f3ae <_printf_float+0x1ba>
 800f32a:	f1ab 0302 	sub.w	r3, fp, #2
 800f32e:	fa5f fb83 	uxtb.w	fp, r3
 800f332:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f336:	d820      	bhi.n	800f37a <_printf_float+0x186>
 800f338:	3901      	subs	r1, #1
 800f33a:	465a      	mov	r2, fp
 800f33c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f340:	9109      	str	r1, [sp, #36]	; 0x24
 800f342:	f7ff ff19 	bl	800f178 <__exponent>
 800f346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f348:	1813      	adds	r3, r2, r0
 800f34a:	2a01      	cmp	r2, #1
 800f34c:	4681      	mov	r9, r0
 800f34e:	6123      	str	r3, [r4, #16]
 800f350:	dc02      	bgt.n	800f358 <_printf_float+0x164>
 800f352:	6822      	ldr	r2, [r4, #0]
 800f354:	07d2      	lsls	r2, r2, #31
 800f356:	d501      	bpl.n	800f35c <_printf_float+0x168>
 800f358:	3301      	adds	r3, #1
 800f35a:	6123      	str	r3, [r4, #16]
 800f35c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f360:	2b00      	cmp	r3, #0
 800f362:	d09c      	beq.n	800f29e <_printf_float+0xaa>
 800f364:	232d      	movs	r3, #45	; 0x2d
 800f366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f36a:	e798      	b.n	800f29e <_printf_float+0xaa>
 800f36c:	9a06      	ldr	r2, [sp, #24]
 800f36e:	2a47      	cmp	r2, #71	; 0x47
 800f370:	d1be      	bne.n	800f2f0 <_printf_float+0xfc>
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1bc      	bne.n	800f2f0 <_printf_float+0xfc>
 800f376:	2301      	movs	r3, #1
 800f378:	e7b9      	b.n	800f2ee <_printf_float+0xfa>
 800f37a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f37e:	d118      	bne.n	800f3b2 <_printf_float+0x1be>
 800f380:	2900      	cmp	r1, #0
 800f382:	6863      	ldr	r3, [r4, #4]
 800f384:	dd0b      	ble.n	800f39e <_printf_float+0x1aa>
 800f386:	6121      	str	r1, [r4, #16]
 800f388:	b913      	cbnz	r3, 800f390 <_printf_float+0x19c>
 800f38a:	6822      	ldr	r2, [r4, #0]
 800f38c:	07d0      	lsls	r0, r2, #31
 800f38e:	d502      	bpl.n	800f396 <_printf_float+0x1a2>
 800f390:	3301      	adds	r3, #1
 800f392:	440b      	add	r3, r1
 800f394:	6123      	str	r3, [r4, #16]
 800f396:	65a1      	str	r1, [r4, #88]	; 0x58
 800f398:	f04f 0900 	mov.w	r9, #0
 800f39c:	e7de      	b.n	800f35c <_printf_float+0x168>
 800f39e:	b913      	cbnz	r3, 800f3a6 <_printf_float+0x1b2>
 800f3a0:	6822      	ldr	r2, [r4, #0]
 800f3a2:	07d2      	lsls	r2, r2, #31
 800f3a4:	d501      	bpl.n	800f3aa <_printf_float+0x1b6>
 800f3a6:	3302      	adds	r3, #2
 800f3a8:	e7f4      	b.n	800f394 <_printf_float+0x1a0>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e7f2      	b.n	800f394 <_printf_float+0x1a0>
 800f3ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3b4:	4299      	cmp	r1, r3
 800f3b6:	db05      	blt.n	800f3c4 <_printf_float+0x1d0>
 800f3b8:	6823      	ldr	r3, [r4, #0]
 800f3ba:	6121      	str	r1, [r4, #16]
 800f3bc:	07d8      	lsls	r0, r3, #31
 800f3be:	d5ea      	bpl.n	800f396 <_printf_float+0x1a2>
 800f3c0:	1c4b      	adds	r3, r1, #1
 800f3c2:	e7e7      	b.n	800f394 <_printf_float+0x1a0>
 800f3c4:	2900      	cmp	r1, #0
 800f3c6:	bfd4      	ite	le
 800f3c8:	f1c1 0202 	rsble	r2, r1, #2
 800f3cc:	2201      	movgt	r2, #1
 800f3ce:	4413      	add	r3, r2
 800f3d0:	e7e0      	b.n	800f394 <_printf_float+0x1a0>
 800f3d2:	6823      	ldr	r3, [r4, #0]
 800f3d4:	055a      	lsls	r2, r3, #21
 800f3d6:	d407      	bmi.n	800f3e8 <_printf_float+0x1f4>
 800f3d8:	6923      	ldr	r3, [r4, #16]
 800f3da:	4642      	mov	r2, r8
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4628      	mov	r0, r5
 800f3e0:	47b8      	blx	r7
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	d12c      	bne.n	800f440 <_printf_float+0x24c>
 800f3e6:	e764      	b.n	800f2b2 <_printf_float+0xbe>
 800f3e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f3ec:	f240 80e0 	bls.w	800f5b0 <_printf_float+0x3bc>
 800f3f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	f7f1 fb76 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d034      	beq.n	800f46a <_printf_float+0x276>
 800f400:	4a37      	ldr	r2, [pc, #220]	; (800f4e0 <_printf_float+0x2ec>)
 800f402:	2301      	movs	r3, #1
 800f404:	4631      	mov	r1, r6
 800f406:	4628      	mov	r0, r5
 800f408:	47b8      	blx	r7
 800f40a:	3001      	adds	r0, #1
 800f40c:	f43f af51 	beq.w	800f2b2 <_printf_float+0xbe>
 800f410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f414:	429a      	cmp	r2, r3
 800f416:	db02      	blt.n	800f41e <_printf_float+0x22a>
 800f418:	6823      	ldr	r3, [r4, #0]
 800f41a:	07d8      	lsls	r0, r3, #31
 800f41c:	d510      	bpl.n	800f440 <_printf_float+0x24c>
 800f41e:	ee18 3a10 	vmov	r3, s16
 800f422:	4652      	mov	r2, sl
 800f424:	4631      	mov	r1, r6
 800f426:	4628      	mov	r0, r5
 800f428:	47b8      	blx	r7
 800f42a:	3001      	adds	r0, #1
 800f42c:	f43f af41 	beq.w	800f2b2 <_printf_float+0xbe>
 800f430:	f04f 0800 	mov.w	r8, #0
 800f434:	f104 091a 	add.w	r9, r4, #26
 800f438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f43a:	3b01      	subs	r3, #1
 800f43c:	4543      	cmp	r3, r8
 800f43e:	dc09      	bgt.n	800f454 <_printf_float+0x260>
 800f440:	6823      	ldr	r3, [r4, #0]
 800f442:	079b      	lsls	r3, r3, #30
 800f444:	f100 8107 	bmi.w	800f656 <_printf_float+0x462>
 800f448:	68e0      	ldr	r0, [r4, #12]
 800f44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f44c:	4298      	cmp	r0, r3
 800f44e:	bfb8      	it	lt
 800f450:	4618      	movlt	r0, r3
 800f452:	e730      	b.n	800f2b6 <_printf_float+0xc2>
 800f454:	2301      	movs	r3, #1
 800f456:	464a      	mov	r2, r9
 800f458:	4631      	mov	r1, r6
 800f45a:	4628      	mov	r0, r5
 800f45c:	47b8      	blx	r7
 800f45e:	3001      	adds	r0, #1
 800f460:	f43f af27 	beq.w	800f2b2 <_printf_float+0xbe>
 800f464:	f108 0801 	add.w	r8, r8, #1
 800f468:	e7e6      	b.n	800f438 <_printf_float+0x244>
 800f46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	dc39      	bgt.n	800f4e4 <_printf_float+0x2f0>
 800f470:	4a1b      	ldr	r2, [pc, #108]	; (800f4e0 <_printf_float+0x2ec>)
 800f472:	2301      	movs	r3, #1
 800f474:	4631      	mov	r1, r6
 800f476:	4628      	mov	r0, r5
 800f478:	47b8      	blx	r7
 800f47a:	3001      	adds	r0, #1
 800f47c:	f43f af19 	beq.w	800f2b2 <_printf_float+0xbe>
 800f480:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f484:	4313      	orrs	r3, r2
 800f486:	d102      	bne.n	800f48e <_printf_float+0x29a>
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	07d9      	lsls	r1, r3, #31
 800f48c:	d5d8      	bpl.n	800f440 <_printf_float+0x24c>
 800f48e:	ee18 3a10 	vmov	r3, s16
 800f492:	4652      	mov	r2, sl
 800f494:	4631      	mov	r1, r6
 800f496:	4628      	mov	r0, r5
 800f498:	47b8      	blx	r7
 800f49a:	3001      	adds	r0, #1
 800f49c:	f43f af09 	beq.w	800f2b2 <_printf_float+0xbe>
 800f4a0:	f04f 0900 	mov.w	r9, #0
 800f4a4:	f104 0a1a 	add.w	sl, r4, #26
 800f4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4aa:	425b      	negs	r3, r3
 800f4ac:	454b      	cmp	r3, r9
 800f4ae:	dc01      	bgt.n	800f4b4 <_printf_float+0x2c0>
 800f4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4b2:	e792      	b.n	800f3da <_printf_float+0x1e6>
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	4652      	mov	r2, sl
 800f4b8:	4631      	mov	r1, r6
 800f4ba:	4628      	mov	r0, r5
 800f4bc:	47b8      	blx	r7
 800f4be:	3001      	adds	r0, #1
 800f4c0:	f43f aef7 	beq.w	800f2b2 <_printf_float+0xbe>
 800f4c4:	f109 0901 	add.w	r9, r9, #1
 800f4c8:	e7ee      	b.n	800f4a8 <_printf_float+0x2b4>
 800f4ca:	bf00      	nop
 800f4cc:	7fefffff 	.word	0x7fefffff
 800f4d0:	080156c9 	.word	0x080156c9
 800f4d4:	080156cd 	.word	0x080156cd
 800f4d8:	080156d1 	.word	0x080156d1
 800f4dc:	080156d5 	.word	0x080156d5
 800f4e0:	08015a0b 	.word	0x08015a0b
 800f4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	bfa8      	it	ge
 800f4ec:	461a      	movge	r2, r3
 800f4ee:	2a00      	cmp	r2, #0
 800f4f0:	4691      	mov	r9, r2
 800f4f2:	dc37      	bgt.n	800f564 <_printf_float+0x370>
 800f4f4:	f04f 0b00 	mov.w	fp, #0
 800f4f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f4fc:	f104 021a 	add.w	r2, r4, #26
 800f500:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f502:	9305      	str	r3, [sp, #20]
 800f504:	eba3 0309 	sub.w	r3, r3, r9
 800f508:	455b      	cmp	r3, fp
 800f50a:	dc33      	bgt.n	800f574 <_printf_float+0x380>
 800f50c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f510:	429a      	cmp	r2, r3
 800f512:	db3b      	blt.n	800f58c <_printf_float+0x398>
 800f514:	6823      	ldr	r3, [r4, #0]
 800f516:	07da      	lsls	r2, r3, #31
 800f518:	d438      	bmi.n	800f58c <_printf_float+0x398>
 800f51a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f51e:	eba2 0903 	sub.w	r9, r2, r3
 800f522:	9b05      	ldr	r3, [sp, #20]
 800f524:	1ad2      	subs	r2, r2, r3
 800f526:	4591      	cmp	r9, r2
 800f528:	bfa8      	it	ge
 800f52a:	4691      	movge	r9, r2
 800f52c:	f1b9 0f00 	cmp.w	r9, #0
 800f530:	dc35      	bgt.n	800f59e <_printf_float+0x3aa>
 800f532:	f04f 0800 	mov.w	r8, #0
 800f536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f53a:	f104 0a1a 	add.w	sl, r4, #26
 800f53e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f542:	1a9b      	subs	r3, r3, r2
 800f544:	eba3 0309 	sub.w	r3, r3, r9
 800f548:	4543      	cmp	r3, r8
 800f54a:	f77f af79 	ble.w	800f440 <_printf_float+0x24c>
 800f54e:	2301      	movs	r3, #1
 800f550:	4652      	mov	r2, sl
 800f552:	4631      	mov	r1, r6
 800f554:	4628      	mov	r0, r5
 800f556:	47b8      	blx	r7
 800f558:	3001      	adds	r0, #1
 800f55a:	f43f aeaa 	beq.w	800f2b2 <_printf_float+0xbe>
 800f55e:	f108 0801 	add.w	r8, r8, #1
 800f562:	e7ec      	b.n	800f53e <_printf_float+0x34a>
 800f564:	4613      	mov	r3, r2
 800f566:	4631      	mov	r1, r6
 800f568:	4642      	mov	r2, r8
 800f56a:	4628      	mov	r0, r5
 800f56c:	47b8      	blx	r7
 800f56e:	3001      	adds	r0, #1
 800f570:	d1c0      	bne.n	800f4f4 <_printf_float+0x300>
 800f572:	e69e      	b.n	800f2b2 <_printf_float+0xbe>
 800f574:	2301      	movs	r3, #1
 800f576:	4631      	mov	r1, r6
 800f578:	4628      	mov	r0, r5
 800f57a:	9205      	str	r2, [sp, #20]
 800f57c:	47b8      	blx	r7
 800f57e:	3001      	adds	r0, #1
 800f580:	f43f ae97 	beq.w	800f2b2 <_printf_float+0xbe>
 800f584:	9a05      	ldr	r2, [sp, #20]
 800f586:	f10b 0b01 	add.w	fp, fp, #1
 800f58a:	e7b9      	b.n	800f500 <_printf_float+0x30c>
 800f58c:	ee18 3a10 	vmov	r3, s16
 800f590:	4652      	mov	r2, sl
 800f592:	4631      	mov	r1, r6
 800f594:	4628      	mov	r0, r5
 800f596:	47b8      	blx	r7
 800f598:	3001      	adds	r0, #1
 800f59a:	d1be      	bne.n	800f51a <_printf_float+0x326>
 800f59c:	e689      	b.n	800f2b2 <_printf_float+0xbe>
 800f59e:	9a05      	ldr	r2, [sp, #20]
 800f5a0:	464b      	mov	r3, r9
 800f5a2:	4442      	add	r2, r8
 800f5a4:	4631      	mov	r1, r6
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	47b8      	blx	r7
 800f5aa:	3001      	adds	r0, #1
 800f5ac:	d1c1      	bne.n	800f532 <_printf_float+0x33e>
 800f5ae:	e680      	b.n	800f2b2 <_printf_float+0xbe>
 800f5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5b2:	2a01      	cmp	r2, #1
 800f5b4:	dc01      	bgt.n	800f5ba <_printf_float+0x3c6>
 800f5b6:	07db      	lsls	r3, r3, #31
 800f5b8:	d53a      	bpl.n	800f630 <_printf_float+0x43c>
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	4642      	mov	r2, r8
 800f5be:	4631      	mov	r1, r6
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47b8      	blx	r7
 800f5c4:	3001      	adds	r0, #1
 800f5c6:	f43f ae74 	beq.w	800f2b2 <_printf_float+0xbe>
 800f5ca:	ee18 3a10 	vmov	r3, s16
 800f5ce:	4652      	mov	r2, sl
 800f5d0:	4631      	mov	r1, r6
 800f5d2:	4628      	mov	r0, r5
 800f5d4:	47b8      	blx	r7
 800f5d6:	3001      	adds	r0, #1
 800f5d8:	f43f ae6b 	beq.w	800f2b2 <_printf_float+0xbe>
 800f5dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f5e8:	f7f1 fa7e 	bl	8000ae8 <__aeabi_dcmpeq>
 800f5ec:	b9d8      	cbnz	r0, 800f626 <_printf_float+0x432>
 800f5ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f5f2:	f108 0201 	add.w	r2, r8, #1
 800f5f6:	4631      	mov	r1, r6
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	47b8      	blx	r7
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	d10e      	bne.n	800f61e <_printf_float+0x42a>
 800f600:	e657      	b.n	800f2b2 <_printf_float+0xbe>
 800f602:	2301      	movs	r3, #1
 800f604:	4652      	mov	r2, sl
 800f606:	4631      	mov	r1, r6
 800f608:	4628      	mov	r0, r5
 800f60a:	47b8      	blx	r7
 800f60c:	3001      	adds	r0, #1
 800f60e:	f43f ae50 	beq.w	800f2b2 <_printf_float+0xbe>
 800f612:	f108 0801 	add.w	r8, r8, #1
 800f616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f618:	3b01      	subs	r3, #1
 800f61a:	4543      	cmp	r3, r8
 800f61c:	dcf1      	bgt.n	800f602 <_printf_float+0x40e>
 800f61e:	464b      	mov	r3, r9
 800f620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f624:	e6da      	b.n	800f3dc <_printf_float+0x1e8>
 800f626:	f04f 0800 	mov.w	r8, #0
 800f62a:	f104 0a1a 	add.w	sl, r4, #26
 800f62e:	e7f2      	b.n	800f616 <_printf_float+0x422>
 800f630:	2301      	movs	r3, #1
 800f632:	4642      	mov	r2, r8
 800f634:	e7df      	b.n	800f5f6 <_printf_float+0x402>
 800f636:	2301      	movs	r3, #1
 800f638:	464a      	mov	r2, r9
 800f63a:	4631      	mov	r1, r6
 800f63c:	4628      	mov	r0, r5
 800f63e:	47b8      	blx	r7
 800f640:	3001      	adds	r0, #1
 800f642:	f43f ae36 	beq.w	800f2b2 <_printf_float+0xbe>
 800f646:	f108 0801 	add.w	r8, r8, #1
 800f64a:	68e3      	ldr	r3, [r4, #12]
 800f64c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f64e:	1a5b      	subs	r3, r3, r1
 800f650:	4543      	cmp	r3, r8
 800f652:	dcf0      	bgt.n	800f636 <_printf_float+0x442>
 800f654:	e6f8      	b.n	800f448 <_printf_float+0x254>
 800f656:	f04f 0800 	mov.w	r8, #0
 800f65a:	f104 0919 	add.w	r9, r4, #25
 800f65e:	e7f4      	b.n	800f64a <_printf_float+0x456>

0800f660 <_printf_common>:
 800f660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f664:	4616      	mov	r6, r2
 800f666:	4699      	mov	r9, r3
 800f668:	688a      	ldr	r2, [r1, #8]
 800f66a:	690b      	ldr	r3, [r1, #16]
 800f66c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f670:	4293      	cmp	r3, r2
 800f672:	bfb8      	it	lt
 800f674:	4613      	movlt	r3, r2
 800f676:	6033      	str	r3, [r6, #0]
 800f678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f67c:	4607      	mov	r7, r0
 800f67e:	460c      	mov	r4, r1
 800f680:	b10a      	cbz	r2, 800f686 <_printf_common+0x26>
 800f682:	3301      	adds	r3, #1
 800f684:	6033      	str	r3, [r6, #0]
 800f686:	6823      	ldr	r3, [r4, #0]
 800f688:	0699      	lsls	r1, r3, #26
 800f68a:	bf42      	ittt	mi
 800f68c:	6833      	ldrmi	r3, [r6, #0]
 800f68e:	3302      	addmi	r3, #2
 800f690:	6033      	strmi	r3, [r6, #0]
 800f692:	6825      	ldr	r5, [r4, #0]
 800f694:	f015 0506 	ands.w	r5, r5, #6
 800f698:	d106      	bne.n	800f6a8 <_printf_common+0x48>
 800f69a:	f104 0a19 	add.w	sl, r4, #25
 800f69e:	68e3      	ldr	r3, [r4, #12]
 800f6a0:	6832      	ldr	r2, [r6, #0]
 800f6a2:	1a9b      	subs	r3, r3, r2
 800f6a4:	42ab      	cmp	r3, r5
 800f6a6:	dc26      	bgt.n	800f6f6 <_printf_common+0x96>
 800f6a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f6ac:	1e13      	subs	r3, r2, #0
 800f6ae:	6822      	ldr	r2, [r4, #0]
 800f6b0:	bf18      	it	ne
 800f6b2:	2301      	movne	r3, #1
 800f6b4:	0692      	lsls	r2, r2, #26
 800f6b6:	d42b      	bmi.n	800f710 <_printf_common+0xb0>
 800f6b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6bc:	4649      	mov	r1, r9
 800f6be:	4638      	mov	r0, r7
 800f6c0:	47c0      	blx	r8
 800f6c2:	3001      	adds	r0, #1
 800f6c4:	d01e      	beq.n	800f704 <_printf_common+0xa4>
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	6922      	ldr	r2, [r4, #16]
 800f6ca:	f003 0306 	and.w	r3, r3, #6
 800f6ce:	2b04      	cmp	r3, #4
 800f6d0:	bf02      	ittt	eq
 800f6d2:	68e5      	ldreq	r5, [r4, #12]
 800f6d4:	6833      	ldreq	r3, [r6, #0]
 800f6d6:	1aed      	subeq	r5, r5, r3
 800f6d8:	68a3      	ldr	r3, [r4, #8]
 800f6da:	bf0c      	ite	eq
 800f6dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6e0:	2500      	movne	r5, #0
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	bfc4      	itt	gt
 800f6e6:	1a9b      	subgt	r3, r3, r2
 800f6e8:	18ed      	addgt	r5, r5, r3
 800f6ea:	2600      	movs	r6, #0
 800f6ec:	341a      	adds	r4, #26
 800f6ee:	42b5      	cmp	r5, r6
 800f6f0:	d11a      	bne.n	800f728 <_printf_common+0xc8>
 800f6f2:	2000      	movs	r0, #0
 800f6f4:	e008      	b.n	800f708 <_printf_common+0xa8>
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	4652      	mov	r2, sl
 800f6fa:	4649      	mov	r1, r9
 800f6fc:	4638      	mov	r0, r7
 800f6fe:	47c0      	blx	r8
 800f700:	3001      	adds	r0, #1
 800f702:	d103      	bne.n	800f70c <_printf_common+0xac>
 800f704:	f04f 30ff 	mov.w	r0, #4294967295
 800f708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f70c:	3501      	adds	r5, #1
 800f70e:	e7c6      	b.n	800f69e <_printf_common+0x3e>
 800f710:	18e1      	adds	r1, r4, r3
 800f712:	1c5a      	adds	r2, r3, #1
 800f714:	2030      	movs	r0, #48	; 0x30
 800f716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f71a:	4422      	add	r2, r4
 800f71c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f724:	3302      	adds	r3, #2
 800f726:	e7c7      	b.n	800f6b8 <_printf_common+0x58>
 800f728:	2301      	movs	r3, #1
 800f72a:	4622      	mov	r2, r4
 800f72c:	4649      	mov	r1, r9
 800f72e:	4638      	mov	r0, r7
 800f730:	47c0      	blx	r8
 800f732:	3001      	adds	r0, #1
 800f734:	d0e6      	beq.n	800f704 <_printf_common+0xa4>
 800f736:	3601      	adds	r6, #1
 800f738:	e7d9      	b.n	800f6ee <_printf_common+0x8e>
	...

0800f73c <_printf_i>:
 800f73c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f740:	7e0f      	ldrb	r7, [r1, #24]
 800f742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f744:	2f78      	cmp	r7, #120	; 0x78
 800f746:	4691      	mov	r9, r2
 800f748:	4680      	mov	r8, r0
 800f74a:	460c      	mov	r4, r1
 800f74c:	469a      	mov	sl, r3
 800f74e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f752:	d807      	bhi.n	800f764 <_printf_i+0x28>
 800f754:	2f62      	cmp	r7, #98	; 0x62
 800f756:	d80a      	bhi.n	800f76e <_printf_i+0x32>
 800f758:	2f00      	cmp	r7, #0
 800f75a:	f000 80d4 	beq.w	800f906 <_printf_i+0x1ca>
 800f75e:	2f58      	cmp	r7, #88	; 0x58
 800f760:	f000 80c0 	beq.w	800f8e4 <_printf_i+0x1a8>
 800f764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f76c:	e03a      	b.n	800f7e4 <_printf_i+0xa8>
 800f76e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f772:	2b15      	cmp	r3, #21
 800f774:	d8f6      	bhi.n	800f764 <_printf_i+0x28>
 800f776:	a101      	add	r1, pc, #4	; (adr r1, 800f77c <_printf_i+0x40>)
 800f778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f77c:	0800f7d5 	.word	0x0800f7d5
 800f780:	0800f7e9 	.word	0x0800f7e9
 800f784:	0800f765 	.word	0x0800f765
 800f788:	0800f765 	.word	0x0800f765
 800f78c:	0800f765 	.word	0x0800f765
 800f790:	0800f765 	.word	0x0800f765
 800f794:	0800f7e9 	.word	0x0800f7e9
 800f798:	0800f765 	.word	0x0800f765
 800f79c:	0800f765 	.word	0x0800f765
 800f7a0:	0800f765 	.word	0x0800f765
 800f7a4:	0800f765 	.word	0x0800f765
 800f7a8:	0800f8ed 	.word	0x0800f8ed
 800f7ac:	0800f815 	.word	0x0800f815
 800f7b0:	0800f8a7 	.word	0x0800f8a7
 800f7b4:	0800f765 	.word	0x0800f765
 800f7b8:	0800f765 	.word	0x0800f765
 800f7bc:	0800f90f 	.word	0x0800f90f
 800f7c0:	0800f765 	.word	0x0800f765
 800f7c4:	0800f815 	.word	0x0800f815
 800f7c8:	0800f765 	.word	0x0800f765
 800f7cc:	0800f765 	.word	0x0800f765
 800f7d0:	0800f8af 	.word	0x0800f8af
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	1d1a      	adds	r2, r3, #4
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	602a      	str	r2, [r5, #0]
 800f7dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e09f      	b.n	800f928 <_printf_i+0x1ec>
 800f7e8:	6820      	ldr	r0, [r4, #0]
 800f7ea:	682b      	ldr	r3, [r5, #0]
 800f7ec:	0607      	lsls	r7, r0, #24
 800f7ee:	f103 0104 	add.w	r1, r3, #4
 800f7f2:	6029      	str	r1, [r5, #0]
 800f7f4:	d501      	bpl.n	800f7fa <_printf_i+0xbe>
 800f7f6:	681e      	ldr	r6, [r3, #0]
 800f7f8:	e003      	b.n	800f802 <_printf_i+0xc6>
 800f7fa:	0646      	lsls	r6, r0, #25
 800f7fc:	d5fb      	bpl.n	800f7f6 <_printf_i+0xba>
 800f7fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f802:	2e00      	cmp	r6, #0
 800f804:	da03      	bge.n	800f80e <_printf_i+0xd2>
 800f806:	232d      	movs	r3, #45	; 0x2d
 800f808:	4276      	negs	r6, r6
 800f80a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f80e:	485a      	ldr	r0, [pc, #360]	; (800f978 <_printf_i+0x23c>)
 800f810:	230a      	movs	r3, #10
 800f812:	e012      	b.n	800f83a <_printf_i+0xfe>
 800f814:	682b      	ldr	r3, [r5, #0]
 800f816:	6820      	ldr	r0, [r4, #0]
 800f818:	1d19      	adds	r1, r3, #4
 800f81a:	6029      	str	r1, [r5, #0]
 800f81c:	0605      	lsls	r5, r0, #24
 800f81e:	d501      	bpl.n	800f824 <_printf_i+0xe8>
 800f820:	681e      	ldr	r6, [r3, #0]
 800f822:	e002      	b.n	800f82a <_printf_i+0xee>
 800f824:	0641      	lsls	r1, r0, #25
 800f826:	d5fb      	bpl.n	800f820 <_printf_i+0xe4>
 800f828:	881e      	ldrh	r6, [r3, #0]
 800f82a:	4853      	ldr	r0, [pc, #332]	; (800f978 <_printf_i+0x23c>)
 800f82c:	2f6f      	cmp	r7, #111	; 0x6f
 800f82e:	bf0c      	ite	eq
 800f830:	2308      	moveq	r3, #8
 800f832:	230a      	movne	r3, #10
 800f834:	2100      	movs	r1, #0
 800f836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f83a:	6865      	ldr	r5, [r4, #4]
 800f83c:	60a5      	str	r5, [r4, #8]
 800f83e:	2d00      	cmp	r5, #0
 800f840:	bfa2      	ittt	ge
 800f842:	6821      	ldrge	r1, [r4, #0]
 800f844:	f021 0104 	bicge.w	r1, r1, #4
 800f848:	6021      	strge	r1, [r4, #0]
 800f84a:	b90e      	cbnz	r6, 800f850 <_printf_i+0x114>
 800f84c:	2d00      	cmp	r5, #0
 800f84e:	d04b      	beq.n	800f8e8 <_printf_i+0x1ac>
 800f850:	4615      	mov	r5, r2
 800f852:	fbb6 f1f3 	udiv	r1, r6, r3
 800f856:	fb03 6711 	mls	r7, r3, r1, r6
 800f85a:	5dc7      	ldrb	r7, [r0, r7]
 800f85c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f860:	4637      	mov	r7, r6
 800f862:	42bb      	cmp	r3, r7
 800f864:	460e      	mov	r6, r1
 800f866:	d9f4      	bls.n	800f852 <_printf_i+0x116>
 800f868:	2b08      	cmp	r3, #8
 800f86a:	d10b      	bne.n	800f884 <_printf_i+0x148>
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	07de      	lsls	r6, r3, #31
 800f870:	d508      	bpl.n	800f884 <_printf_i+0x148>
 800f872:	6923      	ldr	r3, [r4, #16]
 800f874:	6861      	ldr	r1, [r4, #4]
 800f876:	4299      	cmp	r1, r3
 800f878:	bfde      	ittt	le
 800f87a:	2330      	movle	r3, #48	; 0x30
 800f87c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f880:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f884:	1b52      	subs	r2, r2, r5
 800f886:	6122      	str	r2, [r4, #16]
 800f888:	f8cd a000 	str.w	sl, [sp]
 800f88c:	464b      	mov	r3, r9
 800f88e:	aa03      	add	r2, sp, #12
 800f890:	4621      	mov	r1, r4
 800f892:	4640      	mov	r0, r8
 800f894:	f7ff fee4 	bl	800f660 <_printf_common>
 800f898:	3001      	adds	r0, #1
 800f89a:	d14a      	bne.n	800f932 <_printf_i+0x1f6>
 800f89c:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a0:	b004      	add	sp, #16
 800f8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8a6:	6823      	ldr	r3, [r4, #0]
 800f8a8:	f043 0320 	orr.w	r3, r3, #32
 800f8ac:	6023      	str	r3, [r4, #0]
 800f8ae:	4833      	ldr	r0, [pc, #204]	; (800f97c <_printf_i+0x240>)
 800f8b0:	2778      	movs	r7, #120	; 0x78
 800f8b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f8b6:	6823      	ldr	r3, [r4, #0]
 800f8b8:	6829      	ldr	r1, [r5, #0]
 800f8ba:	061f      	lsls	r7, r3, #24
 800f8bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f8c0:	d402      	bmi.n	800f8c8 <_printf_i+0x18c>
 800f8c2:	065f      	lsls	r7, r3, #25
 800f8c4:	bf48      	it	mi
 800f8c6:	b2b6      	uxthmi	r6, r6
 800f8c8:	07df      	lsls	r7, r3, #31
 800f8ca:	bf48      	it	mi
 800f8cc:	f043 0320 	orrmi.w	r3, r3, #32
 800f8d0:	6029      	str	r1, [r5, #0]
 800f8d2:	bf48      	it	mi
 800f8d4:	6023      	strmi	r3, [r4, #0]
 800f8d6:	b91e      	cbnz	r6, 800f8e0 <_printf_i+0x1a4>
 800f8d8:	6823      	ldr	r3, [r4, #0]
 800f8da:	f023 0320 	bic.w	r3, r3, #32
 800f8de:	6023      	str	r3, [r4, #0]
 800f8e0:	2310      	movs	r3, #16
 800f8e2:	e7a7      	b.n	800f834 <_printf_i+0xf8>
 800f8e4:	4824      	ldr	r0, [pc, #144]	; (800f978 <_printf_i+0x23c>)
 800f8e6:	e7e4      	b.n	800f8b2 <_printf_i+0x176>
 800f8e8:	4615      	mov	r5, r2
 800f8ea:	e7bd      	b.n	800f868 <_printf_i+0x12c>
 800f8ec:	682b      	ldr	r3, [r5, #0]
 800f8ee:	6826      	ldr	r6, [r4, #0]
 800f8f0:	6961      	ldr	r1, [r4, #20]
 800f8f2:	1d18      	adds	r0, r3, #4
 800f8f4:	6028      	str	r0, [r5, #0]
 800f8f6:	0635      	lsls	r5, r6, #24
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	d501      	bpl.n	800f900 <_printf_i+0x1c4>
 800f8fc:	6019      	str	r1, [r3, #0]
 800f8fe:	e002      	b.n	800f906 <_printf_i+0x1ca>
 800f900:	0670      	lsls	r0, r6, #25
 800f902:	d5fb      	bpl.n	800f8fc <_printf_i+0x1c0>
 800f904:	8019      	strh	r1, [r3, #0]
 800f906:	2300      	movs	r3, #0
 800f908:	6123      	str	r3, [r4, #16]
 800f90a:	4615      	mov	r5, r2
 800f90c:	e7bc      	b.n	800f888 <_printf_i+0x14c>
 800f90e:	682b      	ldr	r3, [r5, #0]
 800f910:	1d1a      	adds	r2, r3, #4
 800f912:	602a      	str	r2, [r5, #0]
 800f914:	681d      	ldr	r5, [r3, #0]
 800f916:	6862      	ldr	r2, [r4, #4]
 800f918:	2100      	movs	r1, #0
 800f91a:	4628      	mov	r0, r5
 800f91c:	f7f0 fc68 	bl	80001f0 <memchr>
 800f920:	b108      	cbz	r0, 800f926 <_printf_i+0x1ea>
 800f922:	1b40      	subs	r0, r0, r5
 800f924:	6060      	str	r0, [r4, #4]
 800f926:	6863      	ldr	r3, [r4, #4]
 800f928:	6123      	str	r3, [r4, #16]
 800f92a:	2300      	movs	r3, #0
 800f92c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f930:	e7aa      	b.n	800f888 <_printf_i+0x14c>
 800f932:	6923      	ldr	r3, [r4, #16]
 800f934:	462a      	mov	r2, r5
 800f936:	4649      	mov	r1, r9
 800f938:	4640      	mov	r0, r8
 800f93a:	47d0      	blx	sl
 800f93c:	3001      	adds	r0, #1
 800f93e:	d0ad      	beq.n	800f89c <_printf_i+0x160>
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	079b      	lsls	r3, r3, #30
 800f944:	d413      	bmi.n	800f96e <_printf_i+0x232>
 800f946:	68e0      	ldr	r0, [r4, #12]
 800f948:	9b03      	ldr	r3, [sp, #12]
 800f94a:	4298      	cmp	r0, r3
 800f94c:	bfb8      	it	lt
 800f94e:	4618      	movlt	r0, r3
 800f950:	e7a6      	b.n	800f8a0 <_printf_i+0x164>
 800f952:	2301      	movs	r3, #1
 800f954:	4632      	mov	r2, r6
 800f956:	4649      	mov	r1, r9
 800f958:	4640      	mov	r0, r8
 800f95a:	47d0      	blx	sl
 800f95c:	3001      	adds	r0, #1
 800f95e:	d09d      	beq.n	800f89c <_printf_i+0x160>
 800f960:	3501      	adds	r5, #1
 800f962:	68e3      	ldr	r3, [r4, #12]
 800f964:	9903      	ldr	r1, [sp, #12]
 800f966:	1a5b      	subs	r3, r3, r1
 800f968:	42ab      	cmp	r3, r5
 800f96a:	dcf2      	bgt.n	800f952 <_printf_i+0x216>
 800f96c:	e7eb      	b.n	800f946 <_printf_i+0x20a>
 800f96e:	2500      	movs	r5, #0
 800f970:	f104 0619 	add.w	r6, r4, #25
 800f974:	e7f5      	b.n	800f962 <_printf_i+0x226>
 800f976:	bf00      	nop
 800f978:	080156d9 	.word	0x080156d9
 800f97c:	080156ea 	.word	0x080156ea

0800f980 <_scanf_float>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	b087      	sub	sp, #28
 800f986:	4617      	mov	r7, r2
 800f988:	9303      	str	r3, [sp, #12]
 800f98a:	688b      	ldr	r3, [r1, #8]
 800f98c:	1e5a      	subs	r2, r3, #1
 800f98e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f992:	bf83      	ittte	hi
 800f994:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f998:	195b      	addhi	r3, r3, r5
 800f99a:	9302      	strhi	r3, [sp, #8]
 800f99c:	2300      	movls	r3, #0
 800f99e:	bf86      	itte	hi
 800f9a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f9a4:	608b      	strhi	r3, [r1, #8]
 800f9a6:	9302      	strls	r3, [sp, #8]
 800f9a8:	680b      	ldr	r3, [r1, #0]
 800f9aa:	468b      	mov	fp, r1
 800f9ac:	2500      	movs	r5, #0
 800f9ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f9b2:	f84b 3b1c 	str.w	r3, [fp], #28
 800f9b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f9ba:	4680      	mov	r8, r0
 800f9bc:	460c      	mov	r4, r1
 800f9be:	465e      	mov	r6, fp
 800f9c0:	46aa      	mov	sl, r5
 800f9c2:	46a9      	mov	r9, r5
 800f9c4:	9501      	str	r5, [sp, #4]
 800f9c6:	68a2      	ldr	r2, [r4, #8]
 800f9c8:	b152      	cbz	r2, 800f9e0 <_scanf_float+0x60>
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	2b4e      	cmp	r3, #78	; 0x4e
 800f9d0:	d864      	bhi.n	800fa9c <_scanf_float+0x11c>
 800f9d2:	2b40      	cmp	r3, #64	; 0x40
 800f9d4:	d83c      	bhi.n	800fa50 <_scanf_float+0xd0>
 800f9d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f9da:	b2c8      	uxtb	r0, r1
 800f9dc:	280e      	cmp	r0, #14
 800f9de:	d93a      	bls.n	800fa56 <_scanf_float+0xd6>
 800f9e0:	f1b9 0f00 	cmp.w	r9, #0
 800f9e4:	d003      	beq.n	800f9ee <_scanf_float+0x6e>
 800f9e6:	6823      	ldr	r3, [r4, #0]
 800f9e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9f2:	f1ba 0f01 	cmp.w	sl, #1
 800f9f6:	f200 8113 	bhi.w	800fc20 <_scanf_float+0x2a0>
 800f9fa:	455e      	cmp	r6, fp
 800f9fc:	f200 8105 	bhi.w	800fc0a <_scanf_float+0x28a>
 800fa00:	2501      	movs	r5, #1
 800fa02:	4628      	mov	r0, r5
 800fa04:	b007      	add	sp, #28
 800fa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa0a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fa0e:	2a0d      	cmp	r2, #13
 800fa10:	d8e6      	bhi.n	800f9e0 <_scanf_float+0x60>
 800fa12:	a101      	add	r1, pc, #4	; (adr r1, 800fa18 <_scanf_float+0x98>)
 800fa14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fa18:	0800fb57 	.word	0x0800fb57
 800fa1c:	0800f9e1 	.word	0x0800f9e1
 800fa20:	0800f9e1 	.word	0x0800f9e1
 800fa24:	0800f9e1 	.word	0x0800f9e1
 800fa28:	0800fbb7 	.word	0x0800fbb7
 800fa2c:	0800fb8f 	.word	0x0800fb8f
 800fa30:	0800f9e1 	.word	0x0800f9e1
 800fa34:	0800f9e1 	.word	0x0800f9e1
 800fa38:	0800fb65 	.word	0x0800fb65
 800fa3c:	0800f9e1 	.word	0x0800f9e1
 800fa40:	0800f9e1 	.word	0x0800f9e1
 800fa44:	0800f9e1 	.word	0x0800f9e1
 800fa48:	0800f9e1 	.word	0x0800f9e1
 800fa4c:	0800fb1d 	.word	0x0800fb1d
 800fa50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fa54:	e7db      	b.n	800fa0e <_scanf_float+0x8e>
 800fa56:	290e      	cmp	r1, #14
 800fa58:	d8c2      	bhi.n	800f9e0 <_scanf_float+0x60>
 800fa5a:	a001      	add	r0, pc, #4	; (adr r0, 800fa60 <_scanf_float+0xe0>)
 800fa5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fa60:	0800fb0f 	.word	0x0800fb0f
 800fa64:	0800f9e1 	.word	0x0800f9e1
 800fa68:	0800fb0f 	.word	0x0800fb0f
 800fa6c:	0800fba3 	.word	0x0800fba3
 800fa70:	0800f9e1 	.word	0x0800f9e1
 800fa74:	0800fabd 	.word	0x0800fabd
 800fa78:	0800faf9 	.word	0x0800faf9
 800fa7c:	0800faf9 	.word	0x0800faf9
 800fa80:	0800faf9 	.word	0x0800faf9
 800fa84:	0800faf9 	.word	0x0800faf9
 800fa88:	0800faf9 	.word	0x0800faf9
 800fa8c:	0800faf9 	.word	0x0800faf9
 800fa90:	0800faf9 	.word	0x0800faf9
 800fa94:	0800faf9 	.word	0x0800faf9
 800fa98:	0800faf9 	.word	0x0800faf9
 800fa9c:	2b6e      	cmp	r3, #110	; 0x6e
 800fa9e:	d809      	bhi.n	800fab4 <_scanf_float+0x134>
 800faa0:	2b60      	cmp	r3, #96	; 0x60
 800faa2:	d8b2      	bhi.n	800fa0a <_scanf_float+0x8a>
 800faa4:	2b54      	cmp	r3, #84	; 0x54
 800faa6:	d077      	beq.n	800fb98 <_scanf_float+0x218>
 800faa8:	2b59      	cmp	r3, #89	; 0x59
 800faaa:	d199      	bne.n	800f9e0 <_scanf_float+0x60>
 800faac:	2d07      	cmp	r5, #7
 800faae:	d197      	bne.n	800f9e0 <_scanf_float+0x60>
 800fab0:	2508      	movs	r5, #8
 800fab2:	e029      	b.n	800fb08 <_scanf_float+0x188>
 800fab4:	2b74      	cmp	r3, #116	; 0x74
 800fab6:	d06f      	beq.n	800fb98 <_scanf_float+0x218>
 800fab8:	2b79      	cmp	r3, #121	; 0x79
 800faba:	e7f6      	b.n	800faaa <_scanf_float+0x12a>
 800fabc:	6821      	ldr	r1, [r4, #0]
 800fabe:	05c8      	lsls	r0, r1, #23
 800fac0:	d51a      	bpl.n	800faf8 <_scanf_float+0x178>
 800fac2:	9b02      	ldr	r3, [sp, #8]
 800fac4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fac8:	6021      	str	r1, [r4, #0]
 800faca:	f109 0901 	add.w	r9, r9, #1
 800face:	b11b      	cbz	r3, 800fad8 <_scanf_float+0x158>
 800fad0:	3b01      	subs	r3, #1
 800fad2:	3201      	adds	r2, #1
 800fad4:	9302      	str	r3, [sp, #8]
 800fad6:	60a2      	str	r2, [r4, #8]
 800fad8:	68a3      	ldr	r3, [r4, #8]
 800fada:	3b01      	subs	r3, #1
 800fadc:	60a3      	str	r3, [r4, #8]
 800fade:	6923      	ldr	r3, [r4, #16]
 800fae0:	3301      	adds	r3, #1
 800fae2:	6123      	str	r3, [r4, #16]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	3b01      	subs	r3, #1
 800fae8:	2b00      	cmp	r3, #0
 800faea:	607b      	str	r3, [r7, #4]
 800faec:	f340 8084 	ble.w	800fbf8 <_scanf_float+0x278>
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	3301      	adds	r3, #1
 800faf4:	603b      	str	r3, [r7, #0]
 800faf6:	e766      	b.n	800f9c6 <_scanf_float+0x46>
 800faf8:	eb1a 0f05 	cmn.w	sl, r5
 800fafc:	f47f af70 	bne.w	800f9e0 <_scanf_float+0x60>
 800fb00:	6822      	ldr	r2, [r4, #0]
 800fb02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fb06:	6022      	str	r2, [r4, #0]
 800fb08:	f806 3b01 	strb.w	r3, [r6], #1
 800fb0c:	e7e4      	b.n	800fad8 <_scanf_float+0x158>
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	0610      	lsls	r0, r2, #24
 800fb12:	f57f af65 	bpl.w	800f9e0 <_scanf_float+0x60>
 800fb16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb1a:	e7f4      	b.n	800fb06 <_scanf_float+0x186>
 800fb1c:	f1ba 0f00 	cmp.w	sl, #0
 800fb20:	d10e      	bne.n	800fb40 <_scanf_float+0x1c0>
 800fb22:	f1b9 0f00 	cmp.w	r9, #0
 800fb26:	d10e      	bne.n	800fb46 <_scanf_float+0x1c6>
 800fb28:	6822      	ldr	r2, [r4, #0]
 800fb2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fb2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fb32:	d108      	bne.n	800fb46 <_scanf_float+0x1c6>
 800fb34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb38:	6022      	str	r2, [r4, #0]
 800fb3a:	f04f 0a01 	mov.w	sl, #1
 800fb3e:	e7e3      	b.n	800fb08 <_scanf_float+0x188>
 800fb40:	f1ba 0f02 	cmp.w	sl, #2
 800fb44:	d055      	beq.n	800fbf2 <_scanf_float+0x272>
 800fb46:	2d01      	cmp	r5, #1
 800fb48:	d002      	beq.n	800fb50 <_scanf_float+0x1d0>
 800fb4a:	2d04      	cmp	r5, #4
 800fb4c:	f47f af48 	bne.w	800f9e0 <_scanf_float+0x60>
 800fb50:	3501      	adds	r5, #1
 800fb52:	b2ed      	uxtb	r5, r5
 800fb54:	e7d8      	b.n	800fb08 <_scanf_float+0x188>
 800fb56:	f1ba 0f01 	cmp.w	sl, #1
 800fb5a:	f47f af41 	bne.w	800f9e0 <_scanf_float+0x60>
 800fb5e:	f04f 0a02 	mov.w	sl, #2
 800fb62:	e7d1      	b.n	800fb08 <_scanf_float+0x188>
 800fb64:	b97d      	cbnz	r5, 800fb86 <_scanf_float+0x206>
 800fb66:	f1b9 0f00 	cmp.w	r9, #0
 800fb6a:	f47f af3c 	bne.w	800f9e6 <_scanf_float+0x66>
 800fb6e:	6822      	ldr	r2, [r4, #0]
 800fb70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fb74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fb78:	f47f af39 	bne.w	800f9ee <_scanf_float+0x6e>
 800fb7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fb80:	6022      	str	r2, [r4, #0]
 800fb82:	2501      	movs	r5, #1
 800fb84:	e7c0      	b.n	800fb08 <_scanf_float+0x188>
 800fb86:	2d03      	cmp	r5, #3
 800fb88:	d0e2      	beq.n	800fb50 <_scanf_float+0x1d0>
 800fb8a:	2d05      	cmp	r5, #5
 800fb8c:	e7de      	b.n	800fb4c <_scanf_float+0x1cc>
 800fb8e:	2d02      	cmp	r5, #2
 800fb90:	f47f af26 	bne.w	800f9e0 <_scanf_float+0x60>
 800fb94:	2503      	movs	r5, #3
 800fb96:	e7b7      	b.n	800fb08 <_scanf_float+0x188>
 800fb98:	2d06      	cmp	r5, #6
 800fb9a:	f47f af21 	bne.w	800f9e0 <_scanf_float+0x60>
 800fb9e:	2507      	movs	r5, #7
 800fba0:	e7b2      	b.n	800fb08 <_scanf_float+0x188>
 800fba2:	6822      	ldr	r2, [r4, #0]
 800fba4:	0591      	lsls	r1, r2, #22
 800fba6:	f57f af1b 	bpl.w	800f9e0 <_scanf_float+0x60>
 800fbaa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fbae:	6022      	str	r2, [r4, #0]
 800fbb0:	f8cd 9004 	str.w	r9, [sp, #4]
 800fbb4:	e7a8      	b.n	800fb08 <_scanf_float+0x188>
 800fbb6:	6822      	ldr	r2, [r4, #0]
 800fbb8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fbbc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fbc0:	d006      	beq.n	800fbd0 <_scanf_float+0x250>
 800fbc2:	0550      	lsls	r0, r2, #21
 800fbc4:	f57f af0c 	bpl.w	800f9e0 <_scanf_float+0x60>
 800fbc8:	f1b9 0f00 	cmp.w	r9, #0
 800fbcc:	f43f af0f 	beq.w	800f9ee <_scanf_float+0x6e>
 800fbd0:	0591      	lsls	r1, r2, #22
 800fbd2:	bf58      	it	pl
 800fbd4:	9901      	ldrpl	r1, [sp, #4]
 800fbd6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fbda:	bf58      	it	pl
 800fbdc:	eba9 0101 	subpl.w	r1, r9, r1
 800fbe0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fbe4:	bf58      	it	pl
 800fbe6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fbea:	6022      	str	r2, [r4, #0]
 800fbec:	f04f 0900 	mov.w	r9, #0
 800fbf0:	e78a      	b.n	800fb08 <_scanf_float+0x188>
 800fbf2:	f04f 0a03 	mov.w	sl, #3
 800fbf6:	e787      	b.n	800fb08 <_scanf_float+0x188>
 800fbf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fbfc:	4639      	mov	r1, r7
 800fbfe:	4640      	mov	r0, r8
 800fc00:	4798      	blx	r3
 800fc02:	2800      	cmp	r0, #0
 800fc04:	f43f aedf 	beq.w	800f9c6 <_scanf_float+0x46>
 800fc08:	e6ea      	b.n	800f9e0 <_scanf_float+0x60>
 800fc0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc12:	463a      	mov	r2, r7
 800fc14:	4640      	mov	r0, r8
 800fc16:	4798      	blx	r3
 800fc18:	6923      	ldr	r3, [r4, #16]
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	6123      	str	r3, [r4, #16]
 800fc1e:	e6ec      	b.n	800f9fa <_scanf_float+0x7a>
 800fc20:	1e6b      	subs	r3, r5, #1
 800fc22:	2b06      	cmp	r3, #6
 800fc24:	d825      	bhi.n	800fc72 <_scanf_float+0x2f2>
 800fc26:	2d02      	cmp	r5, #2
 800fc28:	d836      	bhi.n	800fc98 <_scanf_float+0x318>
 800fc2a:	455e      	cmp	r6, fp
 800fc2c:	f67f aee8 	bls.w	800fa00 <_scanf_float+0x80>
 800fc30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc38:	463a      	mov	r2, r7
 800fc3a:	4640      	mov	r0, r8
 800fc3c:	4798      	blx	r3
 800fc3e:	6923      	ldr	r3, [r4, #16]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	6123      	str	r3, [r4, #16]
 800fc44:	e7f1      	b.n	800fc2a <_scanf_float+0x2aa>
 800fc46:	9802      	ldr	r0, [sp, #8]
 800fc48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fc50:	9002      	str	r0, [sp, #8]
 800fc52:	463a      	mov	r2, r7
 800fc54:	4640      	mov	r0, r8
 800fc56:	4798      	blx	r3
 800fc58:	6923      	ldr	r3, [r4, #16]
 800fc5a:	3b01      	subs	r3, #1
 800fc5c:	6123      	str	r3, [r4, #16]
 800fc5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc62:	fa5f fa8a 	uxtb.w	sl, sl
 800fc66:	f1ba 0f02 	cmp.w	sl, #2
 800fc6a:	d1ec      	bne.n	800fc46 <_scanf_float+0x2c6>
 800fc6c:	3d03      	subs	r5, #3
 800fc6e:	b2ed      	uxtb	r5, r5
 800fc70:	1b76      	subs	r6, r6, r5
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	05da      	lsls	r2, r3, #23
 800fc76:	d52f      	bpl.n	800fcd8 <_scanf_float+0x358>
 800fc78:	055b      	lsls	r3, r3, #21
 800fc7a:	d510      	bpl.n	800fc9e <_scanf_float+0x31e>
 800fc7c:	455e      	cmp	r6, fp
 800fc7e:	f67f aebf 	bls.w	800fa00 <_scanf_float+0x80>
 800fc82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fc86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fc8a:	463a      	mov	r2, r7
 800fc8c:	4640      	mov	r0, r8
 800fc8e:	4798      	blx	r3
 800fc90:	6923      	ldr	r3, [r4, #16]
 800fc92:	3b01      	subs	r3, #1
 800fc94:	6123      	str	r3, [r4, #16]
 800fc96:	e7f1      	b.n	800fc7c <_scanf_float+0x2fc>
 800fc98:	46aa      	mov	sl, r5
 800fc9a:	9602      	str	r6, [sp, #8]
 800fc9c:	e7df      	b.n	800fc5e <_scanf_float+0x2de>
 800fc9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fca2:	6923      	ldr	r3, [r4, #16]
 800fca4:	2965      	cmp	r1, #101	; 0x65
 800fca6:	f103 33ff 	add.w	r3, r3, #4294967295
 800fcaa:	f106 35ff 	add.w	r5, r6, #4294967295
 800fcae:	6123      	str	r3, [r4, #16]
 800fcb0:	d00c      	beq.n	800fccc <_scanf_float+0x34c>
 800fcb2:	2945      	cmp	r1, #69	; 0x45
 800fcb4:	d00a      	beq.n	800fccc <_scanf_float+0x34c>
 800fcb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fcba:	463a      	mov	r2, r7
 800fcbc:	4640      	mov	r0, r8
 800fcbe:	4798      	blx	r3
 800fcc0:	6923      	ldr	r3, [r4, #16]
 800fcc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	1eb5      	subs	r5, r6, #2
 800fcca:	6123      	str	r3, [r4, #16]
 800fccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fcd0:	463a      	mov	r2, r7
 800fcd2:	4640      	mov	r0, r8
 800fcd4:	4798      	blx	r3
 800fcd6:	462e      	mov	r6, r5
 800fcd8:	6825      	ldr	r5, [r4, #0]
 800fcda:	f015 0510 	ands.w	r5, r5, #16
 800fcde:	d158      	bne.n	800fd92 <_scanf_float+0x412>
 800fce0:	7035      	strb	r5, [r6, #0]
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcec:	d11c      	bne.n	800fd28 <_scanf_float+0x3a8>
 800fcee:	9b01      	ldr	r3, [sp, #4]
 800fcf0:	454b      	cmp	r3, r9
 800fcf2:	eba3 0209 	sub.w	r2, r3, r9
 800fcf6:	d124      	bne.n	800fd42 <_scanf_float+0x3c2>
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	4659      	mov	r1, fp
 800fcfc:	4640      	mov	r0, r8
 800fcfe:	f7ff f8df 	bl	800eec0 <_strtod_r>
 800fd02:	9b03      	ldr	r3, [sp, #12]
 800fd04:	6821      	ldr	r1, [r4, #0]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f011 0f02 	tst.w	r1, #2
 800fd0c:	ec57 6b10 	vmov	r6, r7, d0
 800fd10:	f103 0204 	add.w	r2, r3, #4
 800fd14:	d020      	beq.n	800fd58 <_scanf_float+0x3d8>
 800fd16:	9903      	ldr	r1, [sp, #12]
 800fd18:	600a      	str	r2, [r1, #0]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	e9c3 6700 	strd	r6, r7, [r3]
 800fd20:	68e3      	ldr	r3, [r4, #12]
 800fd22:	3301      	adds	r3, #1
 800fd24:	60e3      	str	r3, [r4, #12]
 800fd26:	e66c      	b.n	800fa02 <_scanf_float+0x82>
 800fd28:	9b04      	ldr	r3, [sp, #16]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d0e4      	beq.n	800fcf8 <_scanf_float+0x378>
 800fd2e:	9905      	ldr	r1, [sp, #20]
 800fd30:	230a      	movs	r3, #10
 800fd32:	462a      	mov	r2, r5
 800fd34:	3101      	adds	r1, #1
 800fd36:	4640      	mov	r0, r8
 800fd38:	f7ff f9b0 	bl	800f09c <_strtol_r>
 800fd3c:	9b04      	ldr	r3, [sp, #16]
 800fd3e:	9e05      	ldr	r6, [sp, #20]
 800fd40:	1ac2      	subs	r2, r0, r3
 800fd42:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fd46:	429e      	cmp	r6, r3
 800fd48:	bf28      	it	cs
 800fd4a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fd4e:	4912      	ldr	r1, [pc, #72]	; (800fd98 <_scanf_float+0x418>)
 800fd50:	4630      	mov	r0, r6
 800fd52:	f000 f955 	bl	8010000 <siprintf>
 800fd56:	e7cf      	b.n	800fcf8 <_scanf_float+0x378>
 800fd58:	f011 0f04 	tst.w	r1, #4
 800fd5c:	9903      	ldr	r1, [sp, #12]
 800fd5e:	600a      	str	r2, [r1, #0]
 800fd60:	d1db      	bne.n	800fd1a <_scanf_float+0x39a>
 800fd62:	f8d3 8000 	ldr.w	r8, [r3]
 800fd66:	ee10 2a10 	vmov	r2, s0
 800fd6a:	ee10 0a10 	vmov	r0, s0
 800fd6e:	463b      	mov	r3, r7
 800fd70:	4639      	mov	r1, r7
 800fd72:	f7f0 feeb 	bl	8000b4c <__aeabi_dcmpun>
 800fd76:	b128      	cbz	r0, 800fd84 <_scanf_float+0x404>
 800fd78:	4808      	ldr	r0, [pc, #32]	; (800fd9c <_scanf_float+0x41c>)
 800fd7a:	f000 fc0d 	bl	8010598 <nanf>
 800fd7e:	ed88 0a00 	vstr	s0, [r8]
 800fd82:	e7cd      	b.n	800fd20 <_scanf_float+0x3a0>
 800fd84:	4630      	mov	r0, r6
 800fd86:	4639      	mov	r1, r7
 800fd88:	f7f0 ff3e 	bl	8000c08 <__aeabi_d2f>
 800fd8c:	f8c8 0000 	str.w	r0, [r8]
 800fd90:	e7c6      	b.n	800fd20 <_scanf_float+0x3a0>
 800fd92:	2500      	movs	r5, #0
 800fd94:	e635      	b.n	800fa02 <_scanf_float+0x82>
 800fd96:	bf00      	nop
 800fd98:	080156fb 	.word	0x080156fb
 800fd9c:	080157b4 	.word	0x080157b4

0800fda0 <std>:
 800fda0:	2300      	movs	r3, #0
 800fda2:	b510      	push	{r4, lr}
 800fda4:	4604      	mov	r4, r0
 800fda6:	e9c0 3300 	strd	r3, r3, [r0]
 800fdaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdae:	6083      	str	r3, [r0, #8]
 800fdb0:	8181      	strh	r1, [r0, #12]
 800fdb2:	6643      	str	r3, [r0, #100]	; 0x64
 800fdb4:	81c2      	strh	r2, [r0, #14]
 800fdb6:	6183      	str	r3, [r0, #24]
 800fdb8:	4619      	mov	r1, r3
 800fdba:	2208      	movs	r2, #8
 800fdbc:	305c      	adds	r0, #92	; 0x5c
 800fdbe:	f000 fa45 	bl	801024c <memset>
 800fdc2:	4b0d      	ldr	r3, [pc, #52]	; (800fdf8 <std+0x58>)
 800fdc4:	6263      	str	r3, [r4, #36]	; 0x24
 800fdc6:	4b0d      	ldr	r3, [pc, #52]	; (800fdfc <std+0x5c>)
 800fdc8:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdca:	4b0d      	ldr	r3, [pc, #52]	; (800fe00 <std+0x60>)
 800fdcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdce:	4b0d      	ldr	r3, [pc, #52]	; (800fe04 <std+0x64>)
 800fdd0:	6323      	str	r3, [r4, #48]	; 0x30
 800fdd2:	4b0d      	ldr	r3, [pc, #52]	; (800fe08 <std+0x68>)
 800fdd4:	6224      	str	r4, [r4, #32]
 800fdd6:	429c      	cmp	r4, r3
 800fdd8:	d006      	beq.n	800fde8 <std+0x48>
 800fdda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800fdde:	4294      	cmp	r4, r2
 800fde0:	d002      	beq.n	800fde8 <std+0x48>
 800fde2:	33d0      	adds	r3, #208	; 0xd0
 800fde4:	429c      	cmp	r4, r3
 800fde6:	d105      	bne.n	800fdf4 <std+0x54>
 800fde8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fdec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf0:	f7f8 bd50 	b.w	8008894 <__retarget_lock_init_recursive>
 800fdf4:	bd10      	pop	{r4, pc}
 800fdf6:	bf00      	nop
 800fdf8:	08010099 	.word	0x08010099
 800fdfc:	080100bf 	.word	0x080100bf
 800fe00:	080100f7 	.word	0x080100f7
 800fe04:	0801011b 	.word	0x0801011b
 800fe08:	2000558c 	.word	0x2000558c

0800fe0c <stdio_exit_handler>:
 800fe0c:	4a02      	ldr	r2, [pc, #8]	; (800fe18 <stdio_exit_handler+0xc>)
 800fe0e:	4903      	ldr	r1, [pc, #12]	; (800fe1c <stdio_exit_handler+0x10>)
 800fe10:	4803      	ldr	r0, [pc, #12]	; (800fe20 <stdio_exit_handler+0x14>)
 800fe12:	f000 b869 	b.w	800fee8 <_fwalk_sglue>
 800fe16:	bf00      	nop
 800fe18:	2000003c 	.word	0x2000003c
 800fe1c:	08013039 	.word	0x08013039
 800fe20:	200001b4 	.word	0x200001b4

0800fe24 <cleanup_stdio>:
 800fe24:	6841      	ldr	r1, [r0, #4]
 800fe26:	4b0c      	ldr	r3, [pc, #48]	; (800fe58 <cleanup_stdio+0x34>)
 800fe28:	4299      	cmp	r1, r3
 800fe2a:	b510      	push	{r4, lr}
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	d001      	beq.n	800fe34 <cleanup_stdio+0x10>
 800fe30:	f003 f902 	bl	8013038 <_fflush_r>
 800fe34:	68a1      	ldr	r1, [r4, #8]
 800fe36:	4b09      	ldr	r3, [pc, #36]	; (800fe5c <cleanup_stdio+0x38>)
 800fe38:	4299      	cmp	r1, r3
 800fe3a:	d002      	beq.n	800fe42 <cleanup_stdio+0x1e>
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f003 f8fb 	bl	8013038 <_fflush_r>
 800fe42:	68e1      	ldr	r1, [r4, #12]
 800fe44:	4b06      	ldr	r3, [pc, #24]	; (800fe60 <cleanup_stdio+0x3c>)
 800fe46:	4299      	cmp	r1, r3
 800fe48:	d004      	beq.n	800fe54 <cleanup_stdio+0x30>
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe50:	f003 b8f2 	b.w	8013038 <_fflush_r>
 800fe54:	bd10      	pop	{r4, pc}
 800fe56:	bf00      	nop
 800fe58:	2000558c 	.word	0x2000558c
 800fe5c:	200055f4 	.word	0x200055f4
 800fe60:	2000565c 	.word	0x2000565c

0800fe64 <global_stdio_init.part.0>:
 800fe64:	b510      	push	{r4, lr}
 800fe66:	4b0b      	ldr	r3, [pc, #44]	; (800fe94 <global_stdio_init.part.0+0x30>)
 800fe68:	4c0b      	ldr	r4, [pc, #44]	; (800fe98 <global_stdio_init.part.0+0x34>)
 800fe6a:	4a0c      	ldr	r2, [pc, #48]	; (800fe9c <global_stdio_init.part.0+0x38>)
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	4620      	mov	r0, r4
 800fe70:	2200      	movs	r2, #0
 800fe72:	2104      	movs	r1, #4
 800fe74:	f7ff ff94 	bl	800fda0 <std>
 800fe78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	2109      	movs	r1, #9
 800fe80:	f7ff ff8e 	bl	800fda0 <std>
 800fe84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fe88:	2202      	movs	r2, #2
 800fe8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe8e:	2112      	movs	r1, #18
 800fe90:	f7ff bf86 	b.w	800fda0 <std>
 800fe94:	200056c4 	.word	0x200056c4
 800fe98:	2000558c 	.word	0x2000558c
 800fe9c:	0800fe0d 	.word	0x0800fe0d

0800fea0 <__sfp_lock_acquire>:
 800fea0:	4801      	ldr	r0, [pc, #4]	; (800fea8 <__sfp_lock_acquire+0x8>)
 800fea2:	f7f8 bd0d 	b.w	80088c0 <__retarget_lock_acquire_recursive>
 800fea6:	bf00      	nop
 800fea8:	20001414 	.word	0x20001414

0800feac <__sfp_lock_release>:
 800feac:	4801      	ldr	r0, [pc, #4]	; (800feb4 <__sfp_lock_release+0x8>)
 800feae:	f7f8 bd23 	b.w	80088f8 <__retarget_lock_release_recursive>
 800feb2:	bf00      	nop
 800feb4:	20001414 	.word	0x20001414

0800feb8 <__sinit>:
 800feb8:	b510      	push	{r4, lr}
 800feba:	4604      	mov	r4, r0
 800febc:	f7ff fff0 	bl	800fea0 <__sfp_lock_acquire>
 800fec0:	6a23      	ldr	r3, [r4, #32]
 800fec2:	b11b      	cbz	r3, 800fecc <__sinit+0x14>
 800fec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fec8:	f7ff bff0 	b.w	800feac <__sfp_lock_release>
 800fecc:	4b04      	ldr	r3, [pc, #16]	; (800fee0 <__sinit+0x28>)
 800fece:	6223      	str	r3, [r4, #32]
 800fed0:	4b04      	ldr	r3, [pc, #16]	; (800fee4 <__sinit+0x2c>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d1f5      	bne.n	800fec4 <__sinit+0xc>
 800fed8:	f7ff ffc4 	bl	800fe64 <global_stdio_init.part.0>
 800fedc:	e7f2      	b.n	800fec4 <__sinit+0xc>
 800fede:	bf00      	nop
 800fee0:	0800fe25 	.word	0x0800fe25
 800fee4:	200056c4 	.word	0x200056c4

0800fee8 <_fwalk_sglue>:
 800fee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feec:	4607      	mov	r7, r0
 800feee:	4688      	mov	r8, r1
 800fef0:	4614      	mov	r4, r2
 800fef2:	2600      	movs	r6, #0
 800fef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fef8:	f1b9 0901 	subs.w	r9, r9, #1
 800fefc:	d505      	bpl.n	800ff0a <_fwalk_sglue+0x22>
 800fefe:	6824      	ldr	r4, [r4, #0]
 800ff00:	2c00      	cmp	r4, #0
 800ff02:	d1f7      	bne.n	800fef4 <_fwalk_sglue+0xc>
 800ff04:	4630      	mov	r0, r6
 800ff06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff0a:	89ab      	ldrh	r3, [r5, #12]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d907      	bls.n	800ff20 <_fwalk_sglue+0x38>
 800ff10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff14:	3301      	adds	r3, #1
 800ff16:	d003      	beq.n	800ff20 <_fwalk_sglue+0x38>
 800ff18:	4629      	mov	r1, r5
 800ff1a:	4638      	mov	r0, r7
 800ff1c:	47c0      	blx	r8
 800ff1e:	4306      	orrs	r6, r0
 800ff20:	3568      	adds	r5, #104	; 0x68
 800ff22:	e7e9      	b.n	800fef8 <_fwalk_sglue+0x10>

0800ff24 <iprintf>:
 800ff24:	b40f      	push	{r0, r1, r2, r3}
 800ff26:	b507      	push	{r0, r1, r2, lr}
 800ff28:	4906      	ldr	r1, [pc, #24]	; (800ff44 <iprintf+0x20>)
 800ff2a:	ab04      	add	r3, sp, #16
 800ff2c:	6808      	ldr	r0, [r1, #0]
 800ff2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff32:	6881      	ldr	r1, [r0, #8]
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	f002 fd91 	bl	8012a5c <_vfiprintf_r>
 800ff3a:	b003      	add	sp, #12
 800ff3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff40:	b004      	add	sp, #16
 800ff42:	4770      	bx	lr
 800ff44:	20000200 	.word	0x20000200

0800ff48 <_puts_r>:
 800ff48:	6a03      	ldr	r3, [r0, #32]
 800ff4a:	b570      	push	{r4, r5, r6, lr}
 800ff4c:	6884      	ldr	r4, [r0, #8]
 800ff4e:	4605      	mov	r5, r0
 800ff50:	460e      	mov	r6, r1
 800ff52:	b90b      	cbnz	r3, 800ff58 <_puts_r+0x10>
 800ff54:	f7ff ffb0 	bl	800feb8 <__sinit>
 800ff58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff5a:	07db      	lsls	r3, r3, #31
 800ff5c:	d405      	bmi.n	800ff6a <_puts_r+0x22>
 800ff5e:	89a3      	ldrh	r3, [r4, #12]
 800ff60:	0598      	lsls	r0, r3, #22
 800ff62:	d402      	bmi.n	800ff6a <_puts_r+0x22>
 800ff64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff66:	f7f8 fcab 	bl	80088c0 <__retarget_lock_acquire_recursive>
 800ff6a:	89a3      	ldrh	r3, [r4, #12]
 800ff6c:	0719      	lsls	r1, r3, #28
 800ff6e:	d513      	bpl.n	800ff98 <_puts_r+0x50>
 800ff70:	6923      	ldr	r3, [r4, #16]
 800ff72:	b18b      	cbz	r3, 800ff98 <_puts_r+0x50>
 800ff74:	3e01      	subs	r6, #1
 800ff76:	68a3      	ldr	r3, [r4, #8]
 800ff78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	60a3      	str	r3, [r4, #8]
 800ff80:	b9e9      	cbnz	r1, 800ffbe <_puts_r+0x76>
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	da2e      	bge.n	800ffe4 <_puts_r+0x9c>
 800ff86:	4622      	mov	r2, r4
 800ff88:	210a      	movs	r1, #10
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	f000 f8c9 	bl	8010122 <__swbuf_r>
 800ff90:	3001      	adds	r0, #1
 800ff92:	d007      	beq.n	800ffa4 <_puts_r+0x5c>
 800ff94:	250a      	movs	r5, #10
 800ff96:	e007      	b.n	800ffa8 <_puts_r+0x60>
 800ff98:	4621      	mov	r1, r4
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f000 f8fe 	bl	801019c <__swsetup_r>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d0e7      	beq.n	800ff74 <_puts_r+0x2c>
 800ffa4:	f04f 35ff 	mov.w	r5, #4294967295
 800ffa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffaa:	07da      	lsls	r2, r3, #31
 800ffac:	d405      	bmi.n	800ffba <_puts_r+0x72>
 800ffae:	89a3      	ldrh	r3, [r4, #12]
 800ffb0:	059b      	lsls	r3, r3, #22
 800ffb2:	d402      	bmi.n	800ffba <_puts_r+0x72>
 800ffb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffb6:	f7f8 fc9f 	bl	80088f8 <__retarget_lock_release_recursive>
 800ffba:	4628      	mov	r0, r5
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	da04      	bge.n	800ffcc <_puts_r+0x84>
 800ffc2:	69a2      	ldr	r2, [r4, #24]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	dc06      	bgt.n	800ffd6 <_puts_r+0x8e>
 800ffc8:	290a      	cmp	r1, #10
 800ffca:	d004      	beq.n	800ffd6 <_puts_r+0x8e>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	1c5a      	adds	r2, r3, #1
 800ffd0:	6022      	str	r2, [r4, #0]
 800ffd2:	7019      	strb	r1, [r3, #0]
 800ffd4:	e7cf      	b.n	800ff76 <_puts_r+0x2e>
 800ffd6:	4622      	mov	r2, r4
 800ffd8:	4628      	mov	r0, r5
 800ffda:	f000 f8a2 	bl	8010122 <__swbuf_r>
 800ffde:	3001      	adds	r0, #1
 800ffe0:	d1c9      	bne.n	800ff76 <_puts_r+0x2e>
 800ffe2:	e7df      	b.n	800ffa4 <_puts_r+0x5c>
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	250a      	movs	r5, #10
 800ffe8:	1c5a      	adds	r2, r3, #1
 800ffea:	6022      	str	r2, [r4, #0]
 800ffec:	701d      	strb	r5, [r3, #0]
 800ffee:	e7db      	b.n	800ffa8 <_puts_r+0x60>

0800fff0 <puts>:
 800fff0:	4b02      	ldr	r3, [pc, #8]	; (800fffc <puts+0xc>)
 800fff2:	4601      	mov	r1, r0
 800fff4:	6818      	ldr	r0, [r3, #0]
 800fff6:	f7ff bfa7 	b.w	800ff48 <_puts_r>
 800fffa:	bf00      	nop
 800fffc:	20000200 	.word	0x20000200

08010000 <siprintf>:
 8010000:	b40e      	push	{r1, r2, r3}
 8010002:	b500      	push	{lr}
 8010004:	b09c      	sub	sp, #112	; 0x70
 8010006:	ab1d      	add	r3, sp, #116	; 0x74
 8010008:	9002      	str	r0, [sp, #8]
 801000a:	9006      	str	r0, [sp, #24]
 801000c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010010:	4809      	ldr	r0, [pc, #36]	; (8010038 <siprintf+0x38>)
 8010012:	9107      	str	r1, [sp, #28]
 8010014:	9104      	str	r1, [sp, #16]
 8010016:	4909      	ldr	r1, [pc, #36]	; (801003c <siprintf+0x3c>)
 8010018:	f853 2b04 	ldr.w	r2, [r3], #4
 801001c:	9105      	str	r1, [sp, #20]
 801001e:	6800      	ldr	r0, [r0, #0]
 8010020:	9301      	str	r3, [sp, #4]
 8010022:	a902      	add	r1, sp, #8
 8010024:	f002 fa20 	bl	8012468 <_svfiprintf_r>
 8010028:	9b02      	ldr	r3, [sp, #8]
 801002a:	2200      	movs	r2, #0
 801002c:	701a      	strb	r2, [r3, #0]
 801002e:	b01c      	add	sp, #112	; 0x70
 8010030:	f85d eb04 	ldr.w	lr, [sp], #4
 8010034:	b003      	add	sp, #12
 8010036:	4770      	bx	lr
 8010038:	20000200 	.word	0x20000200
 801003c:	ffff0208 	.word	0xffff0208

08010040 <siscanf>:
 8010040:	b40e      	push	{r1, r2, r3}
 8010042:	b510      	push	{r4, lr}
 8010044:	b09f      	sub	sp, #124	; 0x7c
 8010046:	ac21      	add	r4, sp, #132	; 0x84
 8010048:	f44f 7101 	mov.w	r1, #516	; 0x204
 801004c:	f854 2b04 	ldr.w	r2, [r4], #4
 8010050:	9201      	str	r2, [sp, #4]
 8010052:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010056:	9004      	str	r0, [sp, #16]
 8010058:	9008      	str	r0, [sp, #32]
 801005a:	f7f0 f919 	bl	8000290 <strlen>
 801005e:	4b0c      	ldr	r3, [pc, #48]	; (8010090 <siscanf+0x50>)
 8010060:	9005      	str	r0, [sp, #20]
 8010062:	9009      	str	r0, [sp, #36]	; 0x24
 8010064:	930d      	str	r3, [sp, #52]	; 0x34
 8010066:	480b      	ldr	r0, [pc, #44]	; (8010094 <siscanf+0x54>)
 8010068:	9a01      	ldr	r2, [sp, #4]
 801006a:	6800      	ldr	r0, [r0, #0]
 801006c:	9403      	str	r4, [sp, #12]
 801006e:	2300      	movs	r3, #0
 8010070:	9311      	str	r3, [sp, #68]	; 0x44
 8010072:	9316      	str	r3, [sp, #88]	; 0x58
 8010074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010078:	f8ad 301e 	strh.w	r3, [sp, #30]
 801007c:	a904      	add	r1, sp, #16
 801007e:	4623      	mov	r3, r4
 8010080:	f002 fb4a 	bl	8012718 <__ssvfiscanf_r>
 8010084:	b01f      	add	sp, #124	; 0x7c
 8010086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801008a:	b003      	add	sp, #12
 801008c:	4770      	bx	lr
 801008e:	bf00      	nop
 8010090:	080100bb 	.word	0x080100bb
 8010094:	20000200 	.word	0x20000200

08010098 <__sread>:
 8010098:	b510      	push	{r4, lr}
 801009a:	460c      	mov	r4, r1
 801009c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100a0:	f000 f9fc 	bl	801049c <_read_r>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	bfab      	itete	ge
 80100a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80100aa:	89a3      	ldrhlt	r3, [r4, #12]
 80100ac:	181b      	addge	r3, r3, r0
 80100ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80100b2:	bfac      	ite	ge
 80100b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80100b6:	81a3      	strhlt	r3, [r4, #12]
 80100b8:	bd10      	pop	{r4, pc}

080100ba <__seofread>:
 80100ba:	2000      	movs	r0, #0
 80100bc:	4770      	bx	lr

080100be <__swrite>:
 80100be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c2:	461f      	mov	r7, r3
 80100c4:	898b      	ldrh	r3, [r1, #12]
 80100c6:	05db      	lsls	r3, r3, #23
 80100c8:	4605      	mov	r5, r0
 80100ca:	460c      	mov	r4, r1
 80100cc:	4616      	mov	r6, r2
 80100ce:	d505      	bpl.n	80100dc <__swrite+0x1e>
 80100d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100d4:	2302      	movs	r3, #2
 80100d6:	2200      	movs	r2, #0
 80100d8:	f000 f9ce 	bl	8010478 <_lseek_r>
 80100dc:	89a3      	ldrh	r3, [r4, #12]
 80100de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100e6:	81a3      	strh	r3, [r4, #12]
 80100e8:	4632      	mov	r2, r6
 80100ea:	463b      	mov	r3, r7
 80100ec:	4628      	mov	r0, r5
 80100ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100f2:	f000 b9f5 	b.w	80104e0 <_write_r>

080100f6 <__sseek>:
 80100f6:	b510      	push	{r4, lr}
 80100f8:	460c      	mov	r4, r1
 80100fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100fe:	f000 f9bb 	bl	8010478 <_lseek_r>
 8010102:	1c43      	adds	r3, r0, #1
 8010104:	89a3      	ldrh	r3, [r4, #12]
 8010106:	bf15      	itete	ne
 8010108:	6560      	strne	r0, [r4, #84]	; 0x54
 801010a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801010e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010112:	81a3      	strheq	r3, [r4, #12]
 8010114:	bf18      	it	ne
 8010116:	81a3      	strhne	r3, [r4, #12]
 8010118:	bd10      	pop	{r4, pc}

0801011a <__sclose>:
 801011a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801011e:	f000 b945 	b.w	80103ac <_close_r>

08010122 <__swbuf_r>:
 8010122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010124:	460e      	mov	r6, r1
 8010126:	4614      	mov	r4, r2
 8010128:	4605      	mov	r5, r0
 801012a:	b118      	cbz	r0, 8010134 <__swbuf_r+0x12>
 801012c:	6a03      	ldr	r3, [r0, #32]
 801012e:	b90b      	cbnz	r3, 8010134 <__swbuf_r+0x12>
 8010130:	f7ff fec2 	bl	800feb8 <__sinit>
 8010134:	69a3      	ldr	r3, [r4, #24]
 8010136:	60a3      	str	r3, [r4, #8]
 8010138:	89a3      	ldrh	r3, [r4, #12]
 801013a:	071a      	lsls	r2, r3, #28
 801013c:	d525      	bpl.n	801018a <__swbuf_r+0x68>
 801013e:	6923      	ldr	r3, [r4, #16]
 8010140:	b31b      	cbz	r3, 801018a <__swbuf_r+0x68>
 8010142:	6823      	ldr	r3, [r4, #0]
 8010144:	6922      	ldr	r2, [r4, #16]
 8010146:	1a98      	subs	r0, r3, r2
 8010148:	6963      	ldr	r3, [r4, #20]
 801014a:	b2f6      	uxtb	r6, r6
 801014c:	4283      	cmp	r3, r0
 801014e:	4637      	mov	r7, r6
 8010150:	dc04      	bgt.n	801015c <__swbuf_r+0x3a>
 8010152:	4621      	mov	r1, r4
 8010154:	4628      	mov	r0, r5
 8010156:	f002 ff6f 	bl	8013038 <_fflush_r>
 801015a:	b9e0      	cbnz	r0, 8010196 <__swbuf_r+0x74>
 801015c:	68a3      	ldr	r3, [r4, #8]
 801015e:	3b01      	subs	r3, #1
 8010160:	60a3      	str	r3, [r4, #8]
 8010162:	6823      	ldr	r3, [r4, #0]
 8010164:	1c5a      	adds	r2, r3, #1
 8010166:	6022      	str	r2, [r4, #0]
 8010168:	701e      	strb	r6, [r3, #0]
 801016a:	6962      	ldr	r2, [r4, #20]
 801016c:	1c43      	adds	r3, r0, #1
 801016e:	429a      	cmp	r2, r3
 8010170:	d004      	beq.n	801017c <__swbuf_r+0x5a>
 8010172:	89a3      	ldrh	r3, [r4, #12]
 8010174:	07db      	lsls	r3, r3, #31
 8010176:	d506      	bpl.n	8010186 <__swbuf_r+0x64>
 8010178:	2e0a      	cmp	r6, #10
 801017a:	d104      	bne.n	8010186 <__swbuf_r+0x64>
 801017c:	4621      	mov	r1, r4
 801017e:	4628      	mov	r0, r5
 8010180:	f002 ff5a 	bl	8013038 <_fflush_r>
 8010184:	b938      	cbnz	r0, 8010196 <__swbuf_r+0x74>
 8010186:	4638      	mov	r0, r7
 8010188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801018a:	4621      	mov	r1, r4
 801018c:	4628      	mov	r0, r5
 801018e:	f000 f805 	bl	801019c <__swsetup_r>
 8010192:	2800      	cmp	r0, #0
 8010194:	d0d5      	beq.n	8010142 <__swbuf_r+0x20>
 8010196:	f04f 37ff 	mov.w	r7, #4294967295
 801019a:	e7f4      	b.n	8010186 <__swbuf_r+0x64>

0801019c <__swsetup_r>:
 801019c:	b538      	push	{r3, r4, r5, lr}
 801019e:	4b2a      	ldr	r3, [pc, #168]	; (8010248 <__swsetup_r+0xac>)
 80101a0:	4605      	mov	r5, r0
 80101a2:	6818      	ldr	r0, [r3, #0]
 80101a4:	460c      	mov	r4, r1
 80101a6:	b118      	cbz	r0, 80101b0 <__swsetup_r+0x14>
 80101a8:	6a03      	ldr	r3, [r0, #32]
 80101aa:	b90b      	cbnz	r3, 80101b0 <__swsetup_r+0x14>
 80101ac:	f7ff fe84 	bl	800feb8 <__sinit>
 80101b0:	89a3      	ldrh	r3, [r4, #12]
 80101b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101b6:	0718      	lsls	r0, r3, #28
 80101b8:	d422      	bmi.n	8010200 <__swsetup_r+0x64>
 80101ba:	06d9      	lsls	r1, r3, #27
 80101bc:	d407      	bmi.n	80101ce <__swsetup_r+0x32>
 80101be:	2309      	movs	r3, #9
 80101c0:	602b      	str	r3, [r5, #0]
 80101c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101c6:	81a3      	strh	r3, [r4, #12]
 80101c8:	f04f 30ff 	mov.w	r0, #4294967295
 80101cc:	e034      	b.n	8010238 <__swsetup_r+0x9c>
 80101ce:	0758      	lsls	r0, r3, #29
 80101d0:	d512      	bpl.n	80101f8 <__swsetup_r+0x5c>
 80101d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101d4:	b141      	cbz	r1, 80101e8 <__swsetup_r+0x4c>
 80101d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101da:	4299      	cmp	r1, r3
 80101dc:	d002      	beq.n	80101e4 <__swsetup_r+0x48>
 80101de:	4628      	mov	r0, r5
 80101e0:	f001 f878 	bl	80112d4 <_free_r>
 80101e4:	2300      	movs	r3, #0
 80101e6:	6363      	str	r3, [r4, #52]	; 0x34
 80101e8:	89a3      	ldrh	r3, [r4, #12]
 80101ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101ee:	81a3      	strh	r3, [r4, #12]
 80101f0:	2300      	movs	r3, #0
 80101f2:	6063      	str	r3, [r4, #4]
 80101f4:	6923      	ldr	r3, [r4, #16]
 80101f6:	6023      	str	r3, [r4, #0]
 80101f8:	89a3      	ldrh	r3, [r4, #12]
 80101fa:	f043 0308 	orr.w	r3, r3, #8
 80101fe:	81a3      	strh	r3, [r4, #12]
 8010200:	6923      	ldr	r3, [r4, #16]
 8010202:	b94b      	cbnz	r3, 8010218 <__swsetup_r+0x7c>
 8010204:	89a3      	ldrh	r3, [r4, #12]
 8010206:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801020a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801020e:	d003      	beq.n	8010218 <__swsetup_r+0x7c>
 8010210:	4621      	mov	r1, r4
 8010212:	4628      	mov	r0, r5
 8010214:	f002 ff70 	bl	80130f8 <__smakebuf_r>
 8010218:	89a0      	ldrh	r0, [r4, #12]
 801021a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801021e:	f010 0301 	ands.w	r3, r0, #1
 8010222:	d00a      	beq.n	801023a <__swsetup_r+0x9e>
 8010224:	2300      	movs	r3, #0
 8010226:	60a3      	str	r3, [r4, #8]
 8010228:	6963      	ldr	r3, [r4, #20]
 801022a:	425b      	negs	r3, r3
 801022c:	61a3      	str	r3, [r4, #24]
 801022e:	6923      	ldr	r3, [r4, #16]
 8010230:	b943      	cbnz	r3, 8010244 <__swsetup_r+0xa8>
 8010232:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010236:	d1c4      	bne.n	80101c2 <__swsetup_r+0x26>
 8010238:	bd38      	pop	{r3, r4, r5, pc}
 801023a:	0781      	lsls	r1, r0, #30
 801023c:	bf58      	it	pl
 801023e:	6963      	ldrpl	r3, [r4, #20]
 8010240:	60a3      	str	r3, [r4, #8]
 8010242:	e7f4      	b.n	801022e <__swsetup_r+0x92>
 8010244:	2000      	movs	r0, #0
 8010246:	e7f7      	b.n	8010238 <__swsetup_r+0x9c>
 8010248:	20000200 	.word	0x20000200

0801024c <memset>:
 801024c:	4402      	add	r2, r0
 801024e:	4603      	mov	r3, r0
 8010250:	4293      	cmp	r3, r2
 8010252:	d100      	bne.n	8010256 <memset+0xa>
 8010254:	4770      	bx	lr
 8010256:	f803 1b01 	strb.w	r1, [r3], #1
 801025a:	e7f9      	b.n	8010250 <memset+0x4>

0801025c <strchr>:
 801025c:	b2c9      	uxtb	r1, r1
 801025e:	4603      	mov	r3, r0
 8010260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010264:	b11a      	cbz	r2, 801026e <strchr+0x12>
 8010266:	428a      	cmp	r2, r1
 8010268:	d1f9      	bne.n	801025e <strchr+0x2>
 801026a:	4618      	mov	r0, r3
 801026c:	4770      	bx	lr
 801026e:	2900      	cmp	r1, #0
 8010270:	bf18      	it	ne
 8010272:	2300      	movne	r3, #0
 8010274:	e7f9      	b.n	801026a <strchr+0xe>

08010276 <strncmp>:
 8010276:	b510      	push	{r4, lr}
 8010278:	b16a      	cbz	r2, 8010296 <strncmp+0x20>
 801027a:	3901      	subs	r1, #1
 801027c:	1884      	adds	r4, r0, r2
 801027e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010282:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010286:	429a      	cmp	r2, r3
 8010288:	d103      	bne.n	8010292 <strncmp+0x1c>
 801028a:	42a0      	cmp	r0, r4
 801028c:	d001      	beq.n	8010292 <strncmp+0x1c>
 801028e:	2a00      	cmp	r2, #0
 8010290:	d1f5      	bne.n	801027e <strncmp+0x8>
 8010292:	1ad0      	subs	r0, r2, r3
 8010294:	bd10      	pop	{r4, pc}
 8010296:	4610      	mov	r0, r2
 8010298:	e7fc      	b.n	8010294 <strncmp+0x1e>

0801029a <strncpy>:
 801029a:	b510      	push	{r4, lr}
 801029c:	3901      	subs	r1, #1
 801029e:	4603      	mov	r3, r0
 80102a0:	b132      	cbz	r2, 80102b0 <strncpy+0x16>
 80102a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80102a6:	f803 4b01 	strb.w	r4, [r3], #1
 80102aa:	3a01      	subs	r2, #1
 80102ac:	2c00      	cmp	r4, #0
 80102ae:	d1f7      	bne.n	80102a0 <strncpy+0x6>
 80102b0:	441a      	add	r2, r3
 80102b2:	2100      	movs	r1, #0
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d100      	bne.n	80102ba <strncpy+0x20>
 80102b8:	bd10      	pop	{r4, pc}
 80102ba:	f803 1b01 	strb.w	r1, [r3], #1
 80102be:	e7f9      	b.n	80102b4 <strncpy+0x1a>

080102c0 <strtok>:
 80102c0:	4b16      	ldr	r3, [pc, #88]	; (801031c <strtok+0x5c>)
 80102c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102c4:	681e      	ldr	r6, [r3, #0]
 80102c6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80102c8:	4605      	mov	r5, r0
 80102ca:	b9fc      	cbnz	r4, 801030c <strtok+0x4c>
 80102cc:	2050      	movs	r0, #80	; 0x50
 80102ce:	9101      	str	r1, [sp, #4]
 80102d0:	f7fd ff34 	bl	800e13c <malloc>
 80102d4:	9901      	ldr	r1, [sp, #4]
 80102d6:	6470      	str	r0, [r6, #68]	; 0x44
 80102d8:	4602      	mov	r2, r0
 80102da:	b920      	cbnz	r0, 80102e6 <strtok+0x26>
 80102dc:	4b10      	ldr	r3, [pc, #64]	; (8010320 <strtok+0x60>)
 80102de:	4811      	ldr	r0, [pc, #68]	; (8010324 <strtok+0x64>)
 80102e0:	215b      	movs	r1, #91	; 0x5b
 80102e2:	f000 f95f 	bl	80105a4 <__assert_func>
 80102e6:	e9c0 4400 	strd	r4, r4, [r0]
 80102ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80102ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80102f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80102f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80102fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80102fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8010302:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8010306:	6184      	str	r4, [r0, #24]
 8010308:	7704      	strb	r4, [r0, #28]
 801030a:	6244      	str	r4, [r0, #36]	; 0x24
 801030c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801030e:	2301      	movs	r3, #1
 8010310:	4628      	mov	r0, r5
 8010312:	b002      	add	sp, #8
 8010314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010318:	f000 b806 	b.w	8010328 <__strtok_r>
 801031c:	20000200 	.word	0x20000200
 8010320:	08015700 	.word	0x08015700
 8010324:	08015717 	.word	0x08015717

08010328 <__strtok_r>:
 8010328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801032a:	b908      	cbnz	r0, 8010330 <__strtok_r+0x8>
 801032c:	6810      	ldr	r0, [r2, #0]
 801032e:	b188      	cbz	r0, 8010354 <__strtok_r+0x2c>
 8010330:	4604      	mov	r4, r0
 8010332:	4620      	mov	r0, r4
 8010334:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010338:	460f      	mov	r7, r1
 801033a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801033e:	b91e      	cbnz	r6, 8010348 <__strtok_r+0x20>
 8010340:	b965      	cbnz	r5, 801035c <__strtok_r+0x34>
 8010342:	6015      	str	r5, [r2, #0]
 8010344:	4628      	mov	r0, r5
 8010346:	e005      	b.n	8010354 <__strtok_r+0x2c>
 8010348:	42b5      	cmp	r5, r6
 801034a:	d1f6      	bne.n	801033a <__strtok_r+0x12>
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1f0      	bne.n	8010332 <__strtok_r+0xa>
 8010350:	6014      	str	r4, [r2, #0]
 8010352:	7003      	strb	r3, [r0, #0]
 8010354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010356:	461c      	mov	r4, r3
 8010358:	e00c      	b.n	8010374 <__strtok_r+0x4c>
 801035a:	b915      	cbnz	r5, 8010362 <__strtok_r+0x3a>
 801035c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010360:	460e      	mov	r6, r1
 8010362:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010366:	42ab      	cmp	r3, r5
 8010368:	d1f7      	bne.n	801035a <__strtok_r+0x32>
 801036a:	2b00      	cmp	r3, #0
 801036c:	d0f3      	beq.n	8010356 <__strtok_r+0x2e>
 801036e:	2300      	movs	r3, #0
 8010370:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010374:	6014      	str	r4, [r2, #0]
 8010376:	e7ed      	b.n	8010354 <__strtok_r+0x2c>

08010378 <strstr>:
 8010378:	780a      	ldrb	r2, [r1, #0]
 801037a:	b570      	push	{r4, r5, r6, lr}
 801037c:	b96a      	cbnz	r2, 801039a <strstr+0x22>
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	429a      	cmp	r2, r3
 8010382:	d109      	bne.n	8010398 <strstr+0x20>
 8010384:	460c      	mov	r4, r1
 8010386:	4605      	mov	r5, r0
 8010388:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801038c:	2b00      	cmp	r3, #0
 801038e:	d0f6      	beq.n	801037e <strstr+0x6>
 8010390:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010394:	429e      	cmp	r6, r3
 8010396:	d0f7      	beq.n	8010388 <strstr+0x10>
 8010398:	3001      	adds	r0, #1
 801039a:	7803      	ldrb	r3, [r0, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d1ef      	bne.n	8010380 <strstr+0x8>
 80103a0:	4618      	mov	r0, r3
 80103a2:	e7ec      	b.n	801037e <strstr+0x6>

080103a4 <_localeconv_r>:
 80103a4:	4800      	ldr	r0, [pc, #0]	; (80103a8 <_localeconv_r+0x4>)
 80103a6:	4770      	bx	lr
 80103a8:	20000138 	.word	0x20000138

080103ac <_close_r>:
 80103ac:	b538      	push	{r3, r4, r5, lr}
 80103ae:	4d06      	ldr	r5, [pc, #24]	; (80103c8 <_close_r+0x1c>)
 80103b0:	2300      	movs	r3, #0
 80103b2:	4604      	mov	r4, r0
 80103b4:	4608      	mov	r0, r1
 80103b6:	602b      	str	r3, [r5, #0]
 80103b8:	f7f6 fb86 	bl	8006ac8 <_close>
 80103bc:	1c43      	adds	r3, r0, #1
 80103be:	d102      	bne.n	80103c6 <_close_r+0x1a>
 80103c0:	682b      	ldr	r3, [r5, #0]
 80103c2:	b103      	cbz	r3, 80103c6 <_close_r+0x1a>
 80103c4:	6023      	str	r3, [r4, #0]
 80103c6:	bd38      	pop	{r3, r4, r5, pc}
 80103c8:	200056c8 	.word	0x200056c8

080103cc <_reclaim_reent>:
 80103cc:	4b29      	ldr	r3, [pc, #164]	; (8010474 <_reclaim_reent+0xa8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	4283      	cmp	r3, r0
 80103d2:	b570      	push	{r4, r5, r6, lr}
 80103d4:	4604      	mov	r4, r0
 80103d6:	d04b      	beq.n	8010470 <_reclaim_reent+0xa4>
 80103d8:	69c3      	ldr	r3, [r0, #28]
 80103da:	b143      	cbz	r3, 80103ee <_reclaim_reent+0x22>
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d144      	bne.n	801046c <_reclaim_reent+0xa0>
 80103e2:	69e3      	ldr	r3, [r4, #28]
 80103e4:	6819      	ldr	r1, [r3, #0]
 80103e6:	b111      	cbz	r1, 80103ee <_reclaim_reent+0x22>
 80103e8:	4620      	mov	r0, r4
 80103ea:	f000 ff73 	bl	80112d4 <_free_r>
 80103ee:	6961      	ldr	r1, [r4, #20]
 80103f0:	b111      	cbz	r1, 80103f8 <_reclaim_reent+0x2c>
 80103f2:	4620      	mov	r0, r4
 80103f4:	f000 ff6e 	bl	80112d4 <_free_r>
 80103f8:	69e1      	ldr	r1, [r4, #28]
 80103fa:	b111      	cbz	r1, 8010402 <_reclaim_reent+0x36>
 80103fc:	4620      	mov	r0, r4
 80103fe:	f000 ff69 	bl	80112d4 <_free_r>
 8010402:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010404:	b111      	cbz	r1, 801040c <_reclaim_reent+0x40>
 8010406:	4620      	mov	r0, r4
 8010408:	f000 ff64 	bl	80112d4 <_free_r>
 801040c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801040e:	b111      	cbz	r1, 8010416 <_reclaim_reent+0x4a>
 8010410:	4620      	mov	r0, r4
 8010412:	f000 ff5f 	bl	80112d4 <_free_r>
 8010416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010418:	b111      	cbz	r1, 8010420 <_reclaim_reent+0x54>
 801041a:	4620      	mov	r0, r4
 801041c:	f000 ff5a 	bl	80112d4 <_free_r>
 8010420:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010422:	b111      	cbz	r1, 801042a <_reclaim_reent+0x5e>
 8010424:	4620      	mov	r0, r4
 8010426:	f000 ff55 	bl	80112d4 <_free_r>
 801042a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801042c:	b111      	cbz	r1, 8010434 <_reclaim_reent+0x68>
 801042e:	4620      	mov	r0, r4
 8010430:	f000 ff50 	bl	80112d4 <_free_r>
 8010434:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010436:	b111      	cbz	r1, 801043e <_reclaim_reent+0x72>
 8010438:	4620      	mov	r0, r4
 801043a:	f000 ff4b 	bl	80112d4 <_free_r>
 801043e:	6a23      	ldr	r3, [r4, #32]
 8010440:	b1b3      	cbz	r3, 8010470 <_reclaim_reent+0xa4>
 8010442:	4620      	mov	r0, r4
 8010444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010448:	4718      	bx	r3
 801044a:	5949      	ldr	r1, [r1, r5]
 801044c:	b941      	cbnz	r1, 8010460 <_reclaim_reent+0x94>
 801044e:	3504      	adds	r5, #4
 8010450:	69e3      	ldr	r3, [r4, #28]
 8010452:	2d80      	cmp	r5, #128	; 0x80
 8010454:	68d9      	ldr	r1, [r3, #12]
 8010456:	d1f8      	bne.n	801044a <_reclaim_reent+0x7e>
 8010458:	4620      	mov	r0, r4
 801045a:	f000 ff3b 	bl	80112d4 <_free_r>
 801045e:	e7c0      	b.n	80103e2 <_reclaim_reent+0x16>
 8010460:	680e      	ldr	r6, [r1, #0]
 8010462:	4620      	mov	r0, r4
 8010464:	f000 ff36 	bl	80112d4 <_free_r>
 8010468:	4631      	mov	r1, r6
 801046a:	e7ef      	b.n	801044c <_reclaim_reent+0x80>
 801046c:	2500      	movs	r5, #0
 801046e:	e7ef      	b.n	8010450 <_reclaim_reent+0x84>
 8010470:	bd70      	pop	{r4, r5, r6, pc}
 8010472:	bf00      	nop
 8010474:	20000200 	.word	0x20000200

08010478 <_lseek_r>:
 8010478:	b538      	push	{r3, r4, r5, lr}
 801047a:	4d07      	ldr	r5, [pc, #28]	; (8010498 <_lseek_r+0x20>)
 801047c:	4604      	mov	r4, r0
 801047e:	4608      	mov	r0, r1
 8010480:	4611      	mov	r1, r2
 8010482:	2200      	movs	r2, #0
 8010484:	602a      	str	r2, [r5, #0]
 8010486:	461a      	mov	r2, r3
 8010488:	f7f6 fb2a 	bl	8006ae0 <_lseek>
 801048c:	1c43      	adds	r3, r0, #1
 801048e:	d102      	bne.n	8010496 <_lseek_r+0x1e>
 8010490:	682b      	ldr	r3, [r5, #0]
 8010492:	b103      	cbz	r3, 8010496 <_lseek_r+0x1e>
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	bd38      	pop	{r3, r4, r5, pc}
 8010498:	200056c8 	.word	0x200056c8

0801049c <_read_r>:
 801049c:	b538      	push	{r3, r4, r5, lr}
 801049e:	4d07      	ldr	r5, [pc, #28]	; (80104bc <_read_r+0x20>)
 80104a0:	4604      	mov	r4, r0
 80104a2:	4608      	mov	r0, r1
 80104a4:	4611      	mov	r1, r2
 80104a6:	2200      	movs	r2, #0
 80104a8:	602a      	str	r2, [r5, #0]
 80104aa:	461a      	mov	r2, r3
 80104ac:	f7f6 fce4 	bl	8006e78 <_read>
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	d102      	bne.n	80104ba <_read_r+0x1e>
 80104b4:	682b      	ldr	r3, [r5, #0]
 80104b6:	b103      	cbz	r3, 80104ba <_read_r+0x1e>
 80104b8:	6023      	str	r3, [r4, #0]
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	200056c8 	.word	0x200056c8

080104c0 <_sbrk_r>:
 80104c0:	b538      	push	{r3, r4, r5, lr}
 80104c2:	4d06      	ldr	r5, [pc, #24]	; (80104dc <_sbrk_r+0x1c>)
 80104c4:	2300      	movs	r3, #0
 80104c6:	4604      	mov	r4, r0
 80104c8:	4608      	mov	r0, r1
 80104ca:	602b      	str	r3, [r5, #0]
 80104cc:	f7f6 fb0a 	bl	8006ae4 <_sbrk>
 80104d0:	1c43      	adds	r3, r0, #1
 80104d2:	d102      	bne.n	80104da <_sbrk_r+0x1a>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	b103      	cbz	r3, 80104da <_sbrk_r+0x1a>
 80104d8:	6023      	str	r3, [r4, #0]
 80104da:	bd38      	pop	{r3, r4, r5, pc}
 80104dc:	200056c8 	.word	0x200056c8

080104e0 <_write_r>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	4d07      	ldr	r5, [pc, #28]	; (8010500 <_write_r+0x20>)
 80104e4:	4604      	mov	r4, r0
 80104e6:	4608      	mov	r0, r1
 80104e8:	4611      	mov	r1, r2
 80104ea:	2200      	movs	r2, #0
 80104ec:	602a      	str	r2, [r5, #0]
 80104ee:	461a      	mov	r2, r3
 80104f0:	f7f2 f974 	bl	80027dc <_write>
 80104f4:	1c43      	adds	r3, r0, #1
 80104f6:	d102      	bne.n	80104fe <_write_r+0x1e>
 80104f8:	682b      	ldr	r3, [r5, #0]
 80104fa:	b103      	cbz	r3, 80104fe <_write_r+0x1e>
 80104fc:	6023      	str	r3, [r4, #0]
 80104fe:	bd38      	pop	{r3, r4, r5, pc}
 8010500:	200056c8 	.word	0x200056c8

08010504 <__errno>:
 8010504:	4b01      	ldr	r3, [pc, #4]	; (801050c <__errno+0x8>)
 8010506:	6818      	ldr	r0, [r3, #0]
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop
 801050c:	20000200 	.word	0x20000200

08010510 <__libc_init_array>:
 8010510:	b570      	push	{r4, r5, r6, lr}
 8010512:	4d0d      	ldr	r5, [pc, #52]	; (8010548 <__libc_init_array+0x38>)
 8010514:	4c0d      	ldr	r4, [pc, #52]	; (801054c <__libc_init_array+0x3c>)
 8010516:	1b64      	subs	r4, r4, r5
 8010518:	10a4      	asrs	r4, r4, #2
 801051a:	2600      	movs	r6, #0
 801051c:	42a6      	cmp	r6, r4
 801051e:	d109      	bne.n	8010534 <__libc_init_array+0x24>
 8010520:	4d0b      	ldr	r5, [pc, #44]	; (8010550 <__libc_init_array+0x40>)
 8010522:	4c0c      	ldr	r4, [pc, #48]	; (8010554 <__libc_init_array+0x44>)
 8010524:	f002 ffe0 	bl	80134e8 <_init>
 8010528:	1b64      	subs	r4, r4, r5
 801052a:	10a4      	asrs	r4, r4, #2
 801052c:	2600      	movs	r6, #0
 801052e:	42a6      	cmp	r6, r4
 8010530:	d105      	bne.n	801053e <__libc_init_array+0x2e>
 8010532:	bd70      	pop	{r4, r5, r6, pc}
 8010534:	f855 3b04 	ldr.w	r3, [r5], #4
 8010538:	4798      	blx	r3
 801053a:	3601      	adds	r6, #1
 801053c:	e7ee      	b.n	801051c <__libc_init_array+0xc>
 801053e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010542:	4798      	blx	r3
 8010544:	3601      	adds	r6, #1
 8010546:	e7f2      	b.n	801052e <__libc_init_array+0x1e>
 8010548:	08015a18 	.word	0x08015a18
 801054c:	08015a18 	.word	0x08015a18
 8010550:	08015a18 	.word	0x08015a18
 8010554:	08015a1c 	.word	0x08015a1c

08010558 <strcpy>:
 8010558:	4603      	mov	r3, r0
 801055a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801055e:	f803 2b01 	strb.w	r2, [r3], #1
 8010562:	2a00      	cmp	r2, #0
 8010564:	d1f9      	bne.n	801055a <strcpy+0x2>
 8010566:	4770      	bx	lr

08010568 <memcpy>:
 8010568:	440a      	add	r2, r1
 801056a:	4291      	cmp	r1, r2
 801056c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010570:	d100      	bne.n	8010574 <memcpy+0xc>
 8010572:	4770      	bx	lr
 8010574:	b510      	push	{r4, lr}
 8010576:	f811 4b01 	ldrb.w	r4, [r1], #1
 801057a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801057e:	4291      	cmp	r1, r2
 8010580:	d1f9      	bne.n	8010576 <memcpy+0xe>
 8010582:	bd10      	pop	{r4, pc}
 8010584:	0000      	movs	r0, r0
	...

08010588 <nan>:
 8010588:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010590 <nan+0x8>
 801058c:	4770      	bx	lr
 801058e:	bf00      	nop
 8010590:	00000000 	.word	0x00000000
 8010594:	7ff80000 	.word	0x7ff80000

08010598 <nanf>:
 8010598:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80105a0 <nanf+0x8>
 801059c:	4770      	bx	lr
 801059e:	bf00      	nop
 80105a0:	7fc00000 	.word	0x7fc00000

080105a4 <__assert_func>:
 80105a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105a6:	4614      	mov	r4, r2
 80105a8:	461a      	mov	r2, r3
 80105aa:	4b09      	ldr	r3, [pc, #36]	; (80105d0 <__assert_func+0x2c>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4605      	mov	r5, r0
 80105b0:	68d8      	ldr	r0, [r3, #12]
 80105b2:	b14c      	cbz	r4, 80105c8 <__assert_func+0x24>
 80105b4:	4b07      	ldr	r3, [pc, #28]	; (80105d4 <__assert_func+0x30>)
 80105b6:	9100      	str	r1, [sp, #0]
 80105b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105bc:	4906      	ldr	r1, [pc, #24]	; (80105d8 <__assert_func+0x34>)
 80105be:	462b      	mov	r3, r5
 80105c0:	f002 fd62 	bl	8013088 <fiprintf>
 80105c4:	f002 fe84 	bl	80132d0 <abort>
 80105c8:	4b04      	ldr	r3, [pc, #16]	; (80105dc <__assert_func+0x38>)
 80105ca:	461c      	mov	r4, r3
 80105cc:	e7f3      	b.n	80105b6 <__assert_func+0x12>
 80105ce:	bf00      	nop
 80105d0:	20000200 	.word	0x20000200
 80105d4:	08015779 	.word	0x08015779
 80105d8:	08015786 	.word	0x08015786
 80105dc:	080157b4 	.word	0x080157b4

080105e0 <quorem>:
 80105e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e4:	6903      	ldr	r3, [r0, #16]
 80105e6:	690c      	ldr	r4, [r1, #16]
 80105e8:	42a3      	cmp	r3, r4
 80105ea:	4607      	mov	r7, r0
 80105ec:	db7e      	blt.n	80106ec <quorem+0x10c>
 80105ee:	3c01      	subs	r4, #1
 80105f0:	f101 0814 	add.w	r8, r1, #20
 80105f4:	f100 0514 	add.w	r5, r0, #20
 80105f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105fc:	9301      	str	r3, [sp, #4]
 80105fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010606:	3301      	adds	r3, #1
 8010608:	429a      	cmp	r2, r3
 801060a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801060e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010612:	fbb2 f6f3 	udiv	r6, r2, r3
 8010616:	d331      	bcc.n	801067c <quorem+0x9c>
 8010618:	f04f 0e00 	mov.w	lr, #0
 801061c:	4640      	mov	r0, r8
 801061e:	46ac      	mov	ip, r5
 8010620:	46f2      	mov	sl, lr
 8010622:	f850 2b04 	ldr.w	r2, [r0], #4
 8010626:	b293      	uxth	r3, r2
 8010628:	fb06 e303 	mla	r3, r6, r3, lr
 801062c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010630:	0c1a      	lsrs	r2, r3, #16
 8010632:	b29b      	uxth	r3, r3
 8010634:	ebaa 0303 	sub.w	r3, sl, r3
 8010638:	f8dc a000 	ldr.w	sl, [ip]
 801063c:	fa13 f38a 	uxtah	r3, r3, sl
 8010640:	fb06 220e 	mla	r2, r6, lr, r2
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	9b00      	ldr	r3, [sp, #0]
 8010648:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801064c:	b292      	uxth	r2, r2
 801064e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010652:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010656:	f8bd 3000 	ldrh.w	r3, [sp]
 801065a:	4581      	cmp	r9, r0
 801065c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010660:	f84c 3b04 	str.w	r3, [ip], #4
 8010664:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010668:	d2db      	bcs.n	8010622 <quorem+0x42>
 801066a:	f855 300b 	ldr.w	r3, [r5, fp]
 801066e:	b92b      	cbnz	r3, 801067c <quorem+0x9c>
 8010670:	9b01      	ldr	r3, [sp, #4]
 8010672:	3b04      	subs	r3, #4
 8010674:	429d      	cmp	r5, r3
 8010676:	461a      	mov	r2, r3
 8010678:	d32c      	bcc.n	80106d4 <quorem+0xf4>
 801067a:	613c      	str	r4, [r7, #16]
 801067c:	4638      	mov	r0, r7
 801067e:	f001 fca5 	bl	8011fcc <__mcmp>
 8010682:	2800      	cmp	r0, #0
 8010684:	db22      	blt.n	80106cc <quorem+0xec>
 8010686:	3601      	adds	r6, #1
 8010688:	4629      	mov	r1, r5
 801068a:	2000      	movs	r0, #0
 801068c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010690:	f8d1 c000 	ldr.w	ip, [r1]
 8010694:	b293      	uxth	r3, r2
 8010696:	1ac3      	subs	r3, r0, r3
 8010698:	0c12      	lsrs	r2, r2, #16
 801069a:	fa13 f38c 	uxtah	r3, r3, ip
 801069e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80106a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106ac:	45c1      	cmp	r9, r8
 80106ae:	f841 3b04 	str.w	r3, [r1], #4
 80106b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80106b6:	d2e9      	bcs.n	801068c <quorem+0xac>
 80106b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106c0:	b922      	cbnz	r2, 80106cc <quorem+0xec>
 80106c2:	3b04      	subs	r3, #4
 80106c4:	429d      	cmp	r5, r3
 80106c6:	461a      	mov	r2, r3
 80106c8:	d30a      	bcc.n	80106e0 <quorem+0x100>
 80106ca:	613c      	str	r4, [r7, #16]
 80106cc:	4630      	mov	r0, r6
 80106ce:	b003      	add	sp, #12
 80106d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106d4:	6812      	ldr	r2, [r2, #0]
 80106d6:	3b04      	subs	r3, #4
 80106d8:	2a00      	cmp	r2, #0
 80106da:	d1ce      	bne.n	801067a <quorem+0x9a>
 80106dc:	3c01      	subs	r4, #1
 80106de:	e7c9      	b.n	8010674 <quorem+0x94>
 80106e0:	6812      	ldr	r2, [r2, #0]
 80106e2:	3b04      	subs	r3, #4
 80106e4:	2a00      	cmp	r2, #0
 80106e6:	d1f0      	bne.n	80106ca <quorem+0xea>
 80106e8:	3c01      	subs	r4, #1
 80106ea:	e7eb      	b.n	80106c4 <quorem+0xe4>
 80106ec:	2000      	movs	r0, #0
 80106ee:	e7ee      	b.n	80106ce <quorem+0xee>

080106f0 <_dtoa_r>:
 80106f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f4:	ed2d 8b04 	vpush	{d8-d9}
 80106f8:	69c5      	ldr	r5, [r0, #28]
 80106fa:	b093      	sub	sp, #76	; 0x4c
 80106fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010700:	ec57 6b10 	vmov	r6, r7, d0
 8010704:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010708:	9107      	str	r1, [sp, #28]
 801070a:	4604      	mov	r4, r0
 801070c:	920a      	str	r2, [sp, #40]	; 0x28
 801070e:	930d      	str	r3, [sp, #52]	; 0x34
 8010710:	b975      	cbnz	r5, 8010730 <_dtoa_r+0x40>
 8010712:	2010      	movs	r0, #16
 8010714:	f7fd fd12 	bl	800e13c <malloc>
 8010718:	4602      	mov	r2, r0
 801071a:	61e0      	str	r0, [r4, #28]
 801071c:	b920      	cbnz	r0, 8010728 <_dtoa_r+0x38>
 801071e:	4bae      	ldr	r3, [pc, #696]	; (80109d8 <_dtoa_r+0x2e8>)
 8010720:	21ef      	movs	r1, #239	; 0xef
 8010722:	48ae      	ldr	r0, [pc, #696]	; (80109dc <_dtoa_r+0x2ec>)
 8010724:	f7ff ff3e 	bl	80105a4 <__assert_func>
 8010728:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801072c:	6005      	str	r5, [r0, #0]
 801072e:	60c5      	str	r5, [r0, #12]
 8010730:	69e3      	ldr	r3, [r4, #28]
 8010732:	6819      	ldr	r1, [r3, #0]
 8010734:	b151      	cbz	r1, 801074c <_dtoa_r+0x5c>
 8010736:	685a      	ldr	r2, [r3, #4]
 8010738:	604a      	str	r2, [r1, #4]
 801073a:	2301      	movs	r3, #1
 801073c:	4093      	lsls	r3, r2
 801073e:	608b      	str	r3, [r1, #8]
 8010740:	4620      	mov	r0, r4
 8010742:	f001 f9bd 	bl	8011ac0 <_Bfree>
 8010746:	69e3      	ldr	r3, [r4, #28]
 8010748:	2200      	movs	r2, #0
 801074a:	601a      	str	r2, [r3, #0]
 801074c:	1e3b      	subs	r3, r7, #0
 801074e:	bfbb      	ittet	lt
 8010750:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010754:	9303      	strlt	r3, [sp, #12]
 8010756:	2300      	movge	r3, #0
 8010758:	2201      	movlt	r2, #1
 801075a:	bfac      	ite	ge
 801075c:	f8c8 3000 	strge.w	r3, [r8]
 8010760:	f8c8 2000 	strlt.w	r2, [r8]
 8010764:	4b9e      	ldr	r3, [pc, #632]	; (80109e0 <_dtoa_r+0x2f0>)
 8010766:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801076a:	ea33 0308 	bics.w	r3, r3, r8
 801076e:	d11b      	bne.n	80107a8 <_dtoa_r+0xb8>
 8010770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010772:	f242 730f 	movw	r3, #9999	; 0x270f
 8010776:	6013      	str	r3, [r2, #0]
 8010778:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801077c:	4333      	orrs	r3, r6
 801077e:	f000 8593 	beq.w	80112a8 <_dtoa_r+0xbb8>
 8010782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010784:	b963      	cbnz	r3, 80107a0 <_dtoa_r+0xb0>
 8010786:	4b97      	ldr	r3, [pc, #604]	; (80109e4 <_dtoa_r+0x2f4>)
 8010788:	e027      	b.n	80107da <_dtoa_r+0xea>
 801078a:	4b97      	ldr	r3, [pc, #604]	; (80109e8 <_dtoa_r+0x2f8>)
 801078c:	9300      	str	r3, [sp, #0]
 801078e:	3308      	adds	r3, #8
 8010790:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010792:	6013      	str	r3, [r2, #0]
 8010794:	9800      	ldr	r0, [sp, #0]
 8010796:	b013      	add	sp, #76	; 0x4c
 8010798:	ecbd 8b04 	vpop	{d8-d9}
 801079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a0:	4b90      	ldr	r3, [pc, #576]	; (80109e4 <_dtoa_r+0x2f4>)
 80107a2:	9300      	str	r3, [sp, #0]
 80107a4:	3303      	adds	r3, #3
 80107a6:	e7f3      	b.n	8010790 <_dtoa_r+0xa0>
 80107a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107ac:	2200      	movs	r2, #0
 80107ae:	ec51 0b17 	vmov	r0, r1, d7
 80107b2:	eeb0 8a47 	vmov.f32	s16, s14
 80107b6:	eef0 8a67 	vmov.f32	s17, s15
 80107ba:	2300      	movs	r3, #0
 80107bc:	f7f0 f994 	bl	8000ae8 <__aeabi_dcmpeq>
 80107c0:	4681      	mov	r9, r0
 80107c2:	b160      	cbz	r0, 80107de <_dtoa_r+0xee>
 80107c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107c6:	2301      	movs	r3, #1
 80107c8:	6013      	str	r3, [r2, #0]
 80107ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	f000 8568 	beq.w	80112a2 <_dtoa_r+0xbb2>
 80107d2:	4b86      	ldr	r3, [pc, #536]	; (80109ec <_dtoa_r+0x2fc>)
 80107d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107d6:	6013      	str	r3, [r2, #0]
 80107d8:	3b01      	subs	r3, #1
 80107da:	9300      	str	r3, [sp, #0]
 80107dc:	e7da      	b.n	8010794 <_dtoa_r+0xa4>
 80107de:	aa10      	add	r2, sp, #64	; 0x40
 80107e0:	a911      	add	r1, sp, #68	; 0x44
 80107e2:	4620      	mov	r0, r4
 80107e4:	eeb0 0a48 	vmov.f32	s0, s16
 80107e8:	eef0 0a68 	vmov.f32	s1, s17
 80107ec:	f001 fd04 	bl	80121f8 <__d2b>
 80107f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80107f4:	4682      	mov	sl, r0
 80107f6:	2d00      	cmp	r5, #0
 80107f8:	d07f      	beq.n	80108fa <_dtoa_r+0x20a>
 80107fa:	ee18 3a90 	vmov	r3, s17
 80107fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010802:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010806:	ec51 0b18 	vmov	r0, r1, d8
 801080a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801080e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010812:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010816:	4619      	mov	r1, r3
 8010818:	2200      	movs	r2, #0
 801081a:	4b75      	ldr	r3, [pc, #468]	; (80109f0 <_dtoa_r+0x300>)
 801081c:	f7ef fd44 	bl	80002a8 <__aeabi_dsub>
 8010820:	a367      	add	r3, pc, #412	; (adr r3, 80109c0 <_dtoa_r+0x2d0>)
 8010822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010826:	f7ef fef7 	bl	8000618 <__aeabi_dmul>
 801082a:	a367      	add	r3, pc, #412	; (adr r3, 80109c8 <_dtoa_r+0x2d8>)
 801082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010830:	f7ef fd3c 	bl	80002ac <__adddf3>
 8010834:	4606      	mov	r6, r0
 8010836:	4628      	mov	r0, r5
 8010838:	460f      	mov	r7, r1
 801083a:	f7ef fe83 	bl	8000544 <__aeabi_i2d>
 801083e:	a364      	add	r3, pc, #400	; (adr r3, 80109d0 <_dtoa_r+0x2e0>)
 8010840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010844:	f7ef fee8 	bl	8000618 <__aeabi_dmul>
 8010848:	4602      	mov	r2, r0
 801084a:	460b      	mov	r3, r1
 801084c:	4630      	mov	r0, r6
 801084e:	4639      	mov	r1, r7
 8010850:	f7ef fd2c 	bl	80002ac <__adddf3>
 8010854:	4606      	mov	r6, r0
 8010856:	460f      	mov	r7, r1
 8010858:	f7f0 f98e 	bl	8000b78 <__aeabi_d2iz>
 801085c:	2200      	movs	r2, #0
 801085e:	4683      	mov	fp, r0
 8010860:	2300      	movs	r3, #0
 8010862:	4630      	mov	r0, r6
 8010864:	4639      	mov	r1, r7
 8010866:	f7f0 f949 	bl	8000afc <__aeabi_dcmplt>
 801086a:	b148      	cbz	r0, 8010880 <_dtoa_r+0x190>
 801086c:	4658      	mov	r0, fp
 801086e:	f7ef fe69 	bl	8000544 <__aeabi_i2d>
 8010872:	4632      	mov	r2, r6
 8010874:	463b      	mov	r3, r7
 8010876:	f7f0 f937 	bl	8000ae8 <__aeabi_dcmpeq>
 801087a:	b908      	cbnz	r0, 8010880 <_dtoa_r+0x190>
 801087c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010880:	f1bb 0f16 	cmp.w	fp, #22
 8010884:	d857      	bhi.n	8010936 <_dtoa_r+0x246>
 8010886:	4b5b      	ldr	r3, [pc, #364]	; (80109f4 <_dtoa_r+0x304>)
 8010888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801088c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010890:	ec51 0b18 	vmov	r0, r1, d8
 8010894:	f7f0 f932 	bl	8000afc <__aeabi_dcmplt>
 8010898:	2800      	cmp	r0, #0
 801089a:	d04e      	beq.n	801093a <_dtoa_r+0x24a>
 801089c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80108a0:	2300      	movs	r3, #0
 80108a2:	930c      	str	r3, [sp, #48]	; 0x30
 80108a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80108a6:	1b5b      	subs	r3, r3, r5
 80108a8:	1e5a      	subs	r2, r3, #1
 80108aa:	bf45      	ittet	mi
 80108ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80108b0:	9305      	strmi	r3, [sp, #20]
 80108b2:	2300      	movpl	r3, #0
 80108b4:	2300      	movmi	r3, #0
 80108b6:	9206      	str	r2, [sp, #24]
 80108b8:	bf54      	ite	pl
 80108ba:	9305      	strpl	r3, [sp, #20]
 80108bc:	9306      	strmi	r3, [sp, #24]
 80108be:	f1bb 0f00 	cmp.w	fp, #0
 80108c2:	db3c      	blt.n	801093e <_dtoa_r+0x24e>
 80108c4:	9b06      	ldr	r3, [sp, #24]
 80108c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80108ca:	445b      	add	r3, fp
 80108cc:	9306      	str	r3, [sp, #24]
 80108ce:	2300      	movs	r3, #0
 80108d0:	9308      	str	r3, [sp, #32]
 80108d2:	9b07      	ldr	r3, [sp, #28]
 80108d4:	2b09      	cmp	r3, #9
 80108d6:	d868      	bhi.n	80109aa <_dtoa_r+0x2ba>
 80108d8:	2b05      	cmp	r3, #5
 80108da:	bfc4      	itt	gt
 80108dc:	3b04      	subgt	r3, #4
 80108de:	9307      	strgt	r3, [sp, #28]
 80108e0:	9b07      	ldr	r3, [sp, #28]
 80108e2:	f1a3 0302 	sub.w	r3, r3, #2
 80108e6:	bfcc      	ite	gt
 80108e8:	2500      	movgt	r5, #0
 80108ea:	2501      	movle	r5, #1
 80108ec:	2b03      	cmp	r3, #3
 80108ee:	f200 8085 	bhi.w	80109fc <_dtoa_r+0x30c>
 80108f2:	e8df f003 	tbb	[pc, r3]
 80108f6:	3b2e      	.short	0x3b2e
 80108f8:	5839      	.short	0x5839
 80108fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80108fe:	441d      	add	r5, r3
 8010900:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010904:	2b20      	cmp	r3, #32
 8010906:	bfc1      	itttt	gt
 8010908:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801090c:	fa08 f803 	lslgt.w	r8, r8, r3
 8010910:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010914:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010918:	bfd6      	itet	le
 801091a:	f1c3 0320 	rsble	r3, r3, #32
 801091e:	ea48 0003 	orrgt.w	r0, r8, r3
 8010922:	fa06 f003 	lslle.w	r0, r6, r3
 8010926:	f7ef fdfd 	bl	8000524 <__aeabi_ui2d>
 801092a:	2201      	movs	r2, #1
 801092c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010930:	3d01      	subs	r5, #1
 8010932:	920e      	str	r2, [sp, #56]	; 0x38
 8010934:	e76f      	b.n	8010816 <_dtoa_r+0x126>
 8010936:	2301      	movs	r3, #1
 8010938:	e7b3      	b.n	80108a2 <_dtoa_r+0x1b2>
 801093a:	900c      	str	r0, [sp, #48]	; 0x30
 801093c:	e7b2      	b.n	80108a4 <_dtoa_r+0x1b4>
 801093e:	9b05      	ldr	r3, [sp, #20]
 8010940:	eba3 030b 	sub.w	r3, r3, fp
 8010944:	9305      	str	r3, [sp, #20]
 8010946:	f1cb 0300 	rsb	r3, fp, #0
 801094a:	9308      	str	r3, [sp, #32]
 801094c:	2300      	movs	r3, #0
 801094e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010950:	e7bf      	b.n	80108d2 <_dtoa_r+0x1e2>
 8010952:	2300      	movs	r3, #0
 8010954:	9309      	str	r3, [sp, #36]	; 0x24
 8010956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010958:	2b00      	cmp	r3, #0
 801095a:	dc52      	bgt.n	8010a02 <_dtoa_r+0x312>
 801095c:	2301      	movs	r3, #1
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	9304      	str	r3, [sp, #16]
 8010962:	461a      	mov	r2, r3
 8010964:	920a      	str	r2, [sp, #40]	; 0x28
 8010966:	e00b      	b.n	8010980 <_dtoa_r+0x290>
 8010968:	2301      	movs	r3, #1
 801096a:	e7f3      	b.n	8010954 <_dtoa_r+0x264>
 801096c:	2300      	movs	r3, #0
 801096e:	9309      	str	r3, [sp, #36]	; 0x24
 8010970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010972:	445b      	add	r3, fp
 8010974:	9301      	str	r3, [sp, #4]
 8010976:	3301      	adds	r3, #1
 8010978:	2b01      	cmp	r3, #1
 801097a:	9304      	str	r3, [sp, #16]
 801097c:	bfb8      	it	lt
 801097e:	2301      	movlt	r3, #1
 8010980:	69e0      	ldr	r0, [r4, #28]
 8010982:	2100      	movs	r1, #0
 8010984:	2204      	movs	r2, #4
 8010986:	f102 0614 	add.w	r6, r2, #20
 801098a:	429e      	cmp	r6, r3
 801098c:	d93d      	bls.n	8010a0a <_dtoa_r+0x31a>
 801098e:	6041      	str	r1, [r0, #4]
 8010990:	4620      	mov	r0, r4
 8010992:	f001 f855 	bl	8011a40 <_Balloc>
 8010996:	9000      	str	r0, [sp, #0]
 8010998:	2800      	cmp	r0, #0
 801099a:	d139      	bne.n	8010a10 <_dtoa_r+0x320>
 801099c:	4b16      	ldr	r3, [pc, #88]	; (80109f8 <_dtoa_r+0x308>)
 801099e:	4602      	mov	r2, r0
 80109a0:	f240 11af 	movw	r1, #431	; 0x1af
 80109a4:	e6bd      	b.n	8010722 <_dtoa_r+0x32>
 80109a6:	2301      	movs	r3, #1
 80109a8:	e7e1      	b.n	801096e <_dtoa_r+0x27e>
 80109aa:	2501      	movs	r5, #1
 80109ac:	2300      	movs	r3, #0
 80109ae:	9307      	str	r3, [sp, #28]
 80109b0:	9509      	str	r5, [sp, #36]	; 0x24
 80109b2:	f04f 33ff 	mov.w	r3, #4294967295
 80109b6:	9301      	str	r3, [sp, #4]
 80109b8:	9304      	str	r3, [sp, #16]
 80109ba:	2200      	movs	r2, #0
 80109bc:	2312      	movs	r3, #18
 80109be:	e7d1      	b.n	8010964 <_dtoa_r+0x274>
 80109c0:	636f4361 	.word	0x636f4361
 80109c4:	3fd287a7 	.word	0x3fd287a7
 80109c8:	8b60c8b3 	.word	0x8b60c8b3
 80109cc:	3fc68a28 	.word	0x3fc68a28
 80109d0:	509f79fb 	.word	0x509f79fb
 80109d4:	3fd34413 	.word	0x3fd34413
 80109d8:	08015700 	.word	0x08015700
 80109dc:	080157c2 	.word	0x080157c2
 80109e0:	7ff00000 	.word	0x7ff00000
 80109e4:	080157be 	.word	0x080157be
 80109e8:	080157b5 	.word	0x080157b5
 80109ec:	08015a0c 	.word	0x08015a0c
 80109f0:	3ff80000 	.word	0x3ff80000
 80109f4:	08015910 	.word	0x08015910
 80109f8:	0801581a 	.word	0x0801581a
 80109fc:	2301      	movs	r3, #1
 80109fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010a00:	e7d7      	b.n	80109b2 <_dtoa_r+0x2c2>
 8010a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a04:	9301      	str	r3, [sp, #4]
 8010a06:	9304      	str	r3, [sp, #16]
 8010a08:	e7ba      	b.n	8010980 <_dtoa_r+0x290>
 8010a0a:	3101      	adds	r1, #1
 8010a0c:	0052      	lsls	r2, r2, #1
 8010a0e:	e7ba      	b.n	8010986 <_dtoa_r+0x296>
 8010a10:	69e3      	ldr	r3, [r4, #28]
 8010a12:	9a00      	ldr	r2, [sp, #0]
 8010a14:	601a      	str	r2, [r3, #0]
 8010a16:	9b04      	ldr	r3, [sp, #16]
 8010a18:	2b0e      	cmp	r3, #14
 8010a1a:	f200 80a8 	bhi.w	8010b6e <_dtoa_r+0x47e>
 8010a1e:	2d00      	cmp	r5, #0
 8010a20:	f000 80a5 	beq.w	8010b6e <_dtoa_r+0x47e>
 8010a24:	f1bb 0f00 	cmp.w	fp, #0
 8010a28:	dd38      	ble.n	8010a9c <_dtoa_r+0x3ac>
 8010a2a:	4bc0      	ldr	r3, [pc, #768]	; (8010d2c <_dtoa_r+0x63c>)
 8010a2c:	f00b 020f 	and.w	r2, fp, #15
 8010a30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010a38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010a3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010a40:	d019      	beq.n	8010a76 <_dtoa_r+0x386>
 8010a42:	4bbb      	ldr	r3, [pc, #748]	; (8010d30 <_dtoa_r+0x640>)
 8010a44:	ec51 0b18 	vmov	r0, r1, d8
 8010a48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a4c:	f7ef ff0e 	bl	800086c <__aeabi_ddiv>
 8010a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a54:	f008 080f 	and.w	r8, r8, #15
 8010a58:	2503      	movs	r5, #3
 8010a5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010d30 <_dtoa_r+0x640>
 8010a5e:	f1b8 0f00 	cmp.w	r8, #0
 8010a62:	d10a      	bne.n	8010a7a <_dtoa_r+0x38a>
 8010a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a68:	4632      	mov	r2, r6
 8010a6a:	463b      	mov	r3, r7
 8010a6c:	f7ef fefe 	bl	800086c <__aeabi_ddiv>
 8010a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a74:	e02b      	b.n	8010ace <_dtoa_r+0x3de>
 8010a76:	2502      	movs	r5, #2
 8010a78:	e7ef      	b.n	8010a5a <_dtoa_r+0x36a>
 8010a7a:	f018 0f01 	tst.w	r8, #1
 8010a7e:	d008      	beq.n	8010a92 <_dtoa_r+0x3a2>
 8010a80:	4630      	mov	r0, r6
 8010a82:	4639      	mov	r1, r7
 8010a84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010a88:	f7ef fdc6 	bl	8000618 <__aeabi_dmul>
 8010a8c:	3501      	adds	r5, #1
 8010a8e:	4606      	mov	r6, r0
 8010a90:	460f      	mov	r7, r1
 8010a92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010a96:	f109 0908 	add.w	r9, r9, #8
 8010a9a:	e7e0      	b.n	8010a5e <_dtoa_r+0x36e>
 8010a9c:	f000 809f 	beq.w	8010bde <_dtoa_r+0x4ee>
 8010aa0:	f1cb 0600 	rsb	r6, fp, #0
 8010aa4:	4ba1      	ldr	r3, [pc, #644]	; (8010d2c <_dtoa_r+0x63c>)
 8010aa6:	4fa2      	ldr	r7, [pc, #648]	; (8010d30 <_dtoa_r+0x640>)
 8010aa8:	f006 020f 	and.w	r2, r6, #15
 8010aac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab4:	ec51 0b18 	vmov	r0, r1, d8
 8010ab8:	f7ef fdae 	bl	8000618 <__aeabi_dmul>
 8010abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ac0:	1136      	asrs	r6, r6, #4
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	2502      	movs	r5, #2
 8010ac6:	2e00      	cmp	r6, #0
 8010ac8:	d17e      	bne.n	8010bc8 <_dtoa_r+0x4d8>
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1d0      	bne.n	8010a70 <_dtoa_r+0x380>
 8010ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ad0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	f000 8084 	beq.w	8010be2 <_dtoa_r+0x4f2>
 8010ada:	4b96      	ldr	r3, [pc, #600]	; (8010d34 <_dtoa_r+0x644>)
 8010adc:	2200      	movs	r2, #0
 8010ade:	4640      	mov	r0, r8
 8010ae0:	4649      	mov	r1, r9
 8010ae2:	f7f0 f80b 	bl	8000afc <__aeabi_dcmplt>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	d07b      	beq.n	8010be2 <_dtoa_r+0x4f2>
 8010aea:	9b04      	ldr	r3, [sp, #16]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d078      	beq.n	8010be2 <_dtoa_r+0x4f2>
 8010af0:	9b01      	ldr	r3, [sp, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	dd39      	ble.n	8010b6a <_dtoa_r+0x47a>
 8010af6:	4b90      	ldr	r3, [pc, #576]	; (8010d38 <_dtoa_r+0x648>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	4640      	mov	r0, r8
 8010afc:	4649      	mov	r1, r9
 8010afe:	f7ef fd8b 	bl	8000618 <__aeabi_dmul>
 8010b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b06:	9e01      	ldr	r6, [sp, #4]
 8010b08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010b0c:	3501      	adds	r5, #1
 8010b0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010b12:	4628      	mov	r0, r5
 8010b14:	f7ef fd16 	bl	8000544 <__aeabi_i2d>
 8010b18:	4642      	mov	r2, r8
 8010b1a:	464b      	mov	r3, r9
 8010b1c:	f7ef fd7c 	bl	8000618 <__aeabi_dmul>
 8010b20:	4b86      	ldr	r3, [pc, #536]	; (8010d3c <_dtoa_r+0x64c>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	f7ef fbc2 	bl	80002ac <__adddf3>
 8010b28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b30:	9303      	str	r3, [sp, #12]
 8010b32:	2e00      	cmp	r6, #0
 8010b34:	d158      	bne.n	8010be8 <_dtoa_r+0x4f8>
 8010b36:	4b82      	ldr	r3, [pc, #520]	; (8010d40 <_dtoa_r+0x650>)
 8010b38:	2200      	movs	r2, #0
 8010b3a:	4640      	mov	r0, r8
 8010b3c:	4649      	mov	r1, r9
 8010b3e:	f7ef fbb3 	bl	80002a8 <__aeabi_dsub>
 8010b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b46:	4680      	mov	r8, r0
 8010b48:	4689      	mov	r9, r1
 8010b4a:	f7ef fff5 	bl	8000b38 <__aeabi_dcmpgt>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	f040 8296 	bne.w	8011080 <_dtoa_r+0x990>
 8010b54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b58:	4640      	mov	r0, r8
 8010b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b5e:	4649      	mov	r1, r9
 8010b60:	f7ef ffcc 	bl	8000afc <__aeabi_dcmplt>
 8010b64:	2800      	cmp	r0, #0
 8010b66:	f040 8289 	bne.w	801107c <_dtoa_r+0x98c>
 8010b6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010b6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	f2c0 814e 	blt.w	8010e12 <_dtoa_r+0x722>
 8010b76:	f1bb 0f0e 	cmp.w	fp, #14
 8010b7a:	f300 814a 	bgt.w	8010e12 <_dtoa_r+0x722>
 8010b7e:	4b6b      	ldr	r3, [pc, #428]	; (8010d2c <_dtoa_r+0x63c>)
 8010b80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f280 80dc 	bge.w	8010d48 <_dtoa_r+0x658>
 8010b90:	9b04      	ldr	r3, [sp, #16]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f300 80d8 	bgt.w	8010d48 <_dtoa_r+0x658>
 8010b98:	f040 826f 	bne.w	801107a <_dtoa_r+0x98a>
 8010b9c:	4b68      	ldr	r3, [pc, #416]	; (8010d40 <_dtoa_r+0x650>)
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	4640      	mov	r0, r8
 8010ba2:	4649      	mov	r1, r9
 8010ba4:	f7ef fd38 	bl	8000618 <__aeabi_dmul>
 8010ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010bac:	f7ef ffba 	bl	8000b24 <__aeabi_dcmpge>
 8010bb0:	9e04      	ldr	r6, [sp, #16]
 8010bb2:	4637      	mov	r7, r6
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	f040 8245 	bne.w	8011044 <_dtoa_r+0x954>
 8010bba:	9d00      	ldr	r5, [sp, #0]
 8010bbc:	2331      	movs	r3, #49	; 0x31
 8010bbe:	f805 3b01 	strb.w	r3, [r5], #1
 8010bc2:	f10b 0b01 	add.w	fp, fp, #1
 8010bc6:	e241      	b.n	801104c <_dtoa_r+0x95c>
 8010bc8:	07f2      	lsls	r2, r6, #31
 8010bca:	d505      	bpl.n	8010bd8 <_dtoa_r+0x4e8>
 8010bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bd0:	f7ef fd22 	bl	8000618 <__aeabi_dmul>
 8010bd4:	3501      	adds	r5, #1
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	1076      	asrs	r6, r6, #1
 8010bda:	3708      	adds	r7, #8
 8010bdc:	e773      	b.n	8010ac6 <_dtoa_r+0x3d6>
 8010bde:	2502      	movs	r5, #2
 8010be0:	e775      	b.n	8010ace <_dtoa_r+0x3de>
 8010be2:	9e04      	ldr	r6, [sp, #16]
 8010be4:	465f      	mov	r7, fp
 8010be6:	e792      	b.n	8010b0e <_dtoa_r+0x41e>
 8010be8:	9900      	ldr	r1, [sp, #0]
 8010bea:	4b50      	ldr	r3, [pc, #320]	; (8010d2c <_dtoa_r+0x63c>)
 8010bec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bf0:	4431      	add	r1, r6
 8010bf2:	9102      	str	r1, [sp, #8]
 8010bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010bf6:	eeb0 9a47 	vmov.f32	s18, s14
 8010bfa:	eef0 9a67 	vmov.f32	s19, s15
 8010bfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010c02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010c06:	2900      	cmp	r1, #0
 8010c08:	d044      	beq.n	8010c94 <_dtoa_r+0x5a4>
 8010c0a:	494e      	ldr	r1, [pc, #312]	; (8010d44 <_dtoa_r+0x654>)
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	f7ef fe2d 	bl	800086c <__aeabi_ddiv>
 8010c12:	ec53 2b19 	vmov	r2, r3, d9
 8010c16:	f7ef fb47 	bl	80002a8 <__aeabi_dsub>
 8010c1a:	9d00      	ldr	r5, [sp, #0]
 8010c1c:	ec41 0b19 	vmov	d9, r0, r1
 8010c20:	4649      	mov	r1, r9
 8010c22:	4640      	mov	r0, r8
 8010c24:	f7ef ffa8 	bl	8000b78 <__aeabi_d2iz>
 8010c28:	4606      	mov	r6, r0
 8010c2a:	f7ef fc8b 	bl	8000544 <__aeabi_i2d>
 8010c2e:	4602      	mov	r2, r0
 8010c30:	460b      	mov	r3, r1
 8010c32:	4640      	mov	r0, r8
 8010c34:	4649      	mov	r1, r9
 8010c36:	f7ef fb37 	bl	80002a8 <__aeabi_dsub>
 8010c3a:	3630      	adds	r6, #48	; 0x30
 8010c3c:	f805 6b01 	strb.w	r6, [r5], #1
 8010c40:	ec53 2b19 	vmov	r2, r3, d9
 8010c44:	4680      	mov	r8, r0
 8010c46:	4689      	mov	r9, r1
 8010c48:	f7ef ff58 	bl	8000afc <__aeabi_dcmplt>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	d164      	bne.n	8010d1a <_dtoa_r+0x62a>
 8010c50:	4642      	mov	r2, r8
 8010c52:	464b      	mov	r3, r9
 8010c54:	4937      	ldr	r1, [pc, #220]	; (8010d34 <_dtoa_r+0x644>)
 8010c56:	2000      	movs	r0, #0
 8010c58:	f7ef fb26 	bl	80002a8 <__aeabi_dsub>
 8010c5c:	ec53 2b19 	vmov	r2, r3, d9
 8010c60:	f7ef ff4c 	bl	8000afc <__aeabi_dcmplt>
 8010c64:	2800      	cmp	r0, #0
 8010c66:	f040 80b6 	bne.w	8010dd6 <_dtoa_r+0x6e6>
 8010c6a:	9b02      	ldr	r3, [sp, #8]
 8010c6c:	429d      	cmp	r5, r3
 8010c6e:	f43f af7c 	beq.w	8010b6a <_dtoa_r+0x47a>
 8010c72:	4b31      	ldr	r3, [pc, #196]	; (8010d38 <_dtoa_r+0x648>)
 8010c74:	ec51 0b19 	vmov	r0, r1, d9
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f7ef fccd 	bl	8000618 <__aeabi_dmul>
 8010c7e:	4b2e      	ldr	r3, [pc, #184]	; (8010d38 <_dtoa_r+0x648>)
 8010c80:	ec41 0b19 	vmov	d9, r0, r1
 8010c84:	2200      	movs	r2, #0
 8010c86:	4640      	mov	r0, r8
 8010c88:	4649      	mov	r1, r9
 8010c8a:	f7ef fcc5 	bl	8000618 <__aeabi_dmul>
 8010c8e:	4680      	mov	r8, r0
 8010c90:	4689      	mov	r9, r1
 8010c92:	e7c5      	b.n	8010c20 <_dtoa_r+0x530>
 8010c94:	ec51 0b17 	vmov	r0, r1, d7
 8010c98:	f7ef fcbe 	bl	8000618 <__aeabi_dmul>
 8010c9c:	9b02      	ldr	r3, [sp, #8]
 8010c9e:	9d00      	ldr	r5, [sp, #0]
 8010ca0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010ca2:	ec41 0b19 	vmov	d9, r0, r1
 8010ca6:	4649      	mov	r1, r9
 8010ca8:	4640      	mov	r0, r8
 8010caa:	f7ef ff65 	bl	8000b78 <__aeabi_d2iz>
 8010cae:	4606      	mov	r6, r0
 8010cb0:	f7ef fc48 	bl	8000544 <__aeabi_i2d>
 8010cb4:	3630      	adds	r6, #48	; 0x30
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	460b      	mov	r3, r1
 8010cba:	4640      	mov	r0, r8
 8010cbc:	4649      	mov	r1, r9
 8010cbe:	f7ef faf3 	bl	80002a8 <__aeabi_dsub>
 8010cc2:	f805 6b01 	strb.w	r6, [r5], #1
 8010cc6:	9b02      	ldr	r3, [sp, #8]
 8010cc8:	429d      	cmp	r5, r3
 8010cca:	4680      	mov	r8, r0
 8010ccc:	4689      	mov	r9, r1
 8010cce:	f04f 0200 	mov.w	r2, #0
 8010cd2:	d124      	bne.n	8010d1e <_dtoa_r+0x62e>
 8010cd4:	4b1b      	ldr	r3, [pc, #108]	; (8010d44 <_dtoa_r+0x654>)
 8010cd6:	ec51 0b19 	vmov	r0, r1, d9
 8010cda:	f7ef fae7 	bl	80002ac <__adddf3>
 8010cde:	4602      	mov	r2, r0
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	4640      	mov	r0, r8
 8010ce4:	4649      	mov	r1, r9
 8010ce6:	f7ef ff27 	bl	8000b38 <__aeabi_dcmpgt>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d173      	bne.n	8010dd6 <_dtoa_r+0x6e6>
 8010cee:	ec53 2b19 	vmov	r2, r3, d9
 8010cf2:	4914      	ldr	r1, [pc, #80]	; (8010d44 <_dtoa_r+0x654>)
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	f7ef fad7 	bl	80002a8 <__aeabi_dsub>
 8010cfa:	4602      	mov	r2, r0
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	4640      	mov	r0, r8
 8010d00:	4649      	mov	r1, r9
 8010d02:	f7ef fefb 	bl	8000afc <__aeabi_dcmplt>
 8010d06:	2800      	cmp	r0, #0
 8010d08:	f43f af2f 	beq.w	8010b6a <_dtoa_r+0x47a>
 8010d0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010d0e:	1e6b      	subs	r3, r5, #1
 8010d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010d16:	2b30      	cmp	r3, #48	; 0x30
 8010d18:	d0f8      	beq.n	8010d0c <_dtoa_r+0x61c>
 8010d1a:	46bb      	mov	fp, r7
 8010d1c:	e04a      	b.n	8010db4 <_dtoa_r+0x6c4>
 8010d1e:	4b06      	ldr	r3, [pc, #24]	; (8010d38 <_dtoa_r+0x648>)
 8010d20:	f7ef fc7a 	bl	8000618 <__aeabi_dmul>
 8010d24:	4680      	mov	r8, r0
 8010d26:	4689      	mov	r9, r1
 8010d28:	e7bd      	b.n	8010ca6 <_dtoa_r+0x5b6>
 8010d2a:	bf00      	nop
 8010d2c:	08015910 	.word	0x08015910
 8010d30:	080158e8 	.word	0x080158e8
 8010d34:	3ff00000 	.word	0x3ff00000
 8010d38:	40240000 	.word	0x40240000
 8010d3c:	401c0000 	.word	0x401c0000
 8010d40:	40140000 	.word	0x40140000
 8010d44:	3fe00000 	.word	0x3fe00000
 8010d48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d4c:	9d00      	ldr	r5, [sp, #0]
 8010d4e:	4642      	mov	r2, r8
 8010d50:	464b      	mov	r3, r9
 8010d52:	4630      	mov	r0, r6
 8010d54:	4639      	mov	r1, r7
 8010d56:	f7ef fd89 	bl	800086c <__aeabi_ddiv>
 8010d5a:	f7ef ff0d 	bl	8000b78 <__aeabi_d2iz>
 8010d5e:	9001      	str	r0, [sp, #4]
 8010d60:	f7ef fbf0 	bl	8000544 <__aeabi_i2d>
 8010d64:	4642      	mov	r2, r8
 8010d66:	464b      	mov	r3, r9
 8010d68:	f7ef fc56 	bl	8000618 <__aeabi_dmul>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	4630      	mov	r0, r6
 8010d72:	4639      	mov	r1, r7
 8010d74:	f7ef fa98 	bl	80002a8 <__aeabi_dsub>
 8010d78:	9e01      	ldr	r6, [sp, #4]
 8010d7a:	9f04      	ldr	r7, [sp, #16]
 8010d7c:	3630      	adds	r6, #48	; 0x30
 8010d7e:	f805 6b01 	strb.w	r6, [r5], #1
 8010d82:	9e00      	ldr	r6, [sp, #0]
 8010d84:	1bae      	subs	r6, r5, r6
 8010d86:	42b7      	cmp	r7, r6
 8010d88:	4602      	mov	r2, r0
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	d134      	bne.n	8010df8 <_dtoa_r+0x708>
 8010d8e:	f7ef fa8d 	bl	80002ac <__adddf3>
 8010d92:	4642      	mov	r2, r8
 8010d94:	464b      	mov	r3, r9
 8010d96:	4606      	mov	r6, r0
 8010d98:	460f      	mov	r7, r1
 8010d9a:	f7ef fecd 	bl	8000b38 <__aeabi_dcmpgt>
 8010d9e:	b9c8      	cbnz	r0, 8010dd4 <_dtoa_r+0x6e4>
 8010da0:	4642      	mov	r2, r8
 8010da2:	464b      	mov	r3, r9
 8010da4:	4630      	mov	r0, r6
 8010da6:	4639      	mov	r1, r7
 8010da8:	f7ef fe9e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010dac:	b110      	cbz	r0, 8010db4 <_dtoa_r+0x6c4>
 8010dae:	9b01      	ldr	r3, [sp, #4]
 8010db0:	07db      	lsls	r3, r3, #31
 8010db2:	d40f      	bmi.n	8010dd4 <_dtoa_r+0x6e4>
 8010db4:	4651      	mov	r1, sl
 8010db6:	4620      	mov	r0, r4
 8010db8:	f000 fe82 	bl	8011ac0 <_Bfree>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010dc0:	702b      	strb	r3, [r5, #0]
 8010dc2:	f10b 0301 	add.w	r3, fp, #1
 8010dc6:	6013      	str	r3, [r2, #0]
 8010dc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	f43f ace2 	beq.w	8010794 <_dtoa_r+0xa4>
 8010dd0:	601d      	str	r5, [r3, #0]
 8010dd2:	e4df      	b.n	8010794 <_dtoa_r+0xa4>
 8010dd4:	465f      	mov	r7, fp
 8010dd6:	462b      	mov	r3, r5
 8010dd8:	461d      	mov	r5, r3
 8010dda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dde:	2a39      	cmp	r2, #57	; 0x39
 8010de0:	d106      	bne.n	8010df0 <_dtoa_r+0x700>
 8010de2:	9a00      	ldr	r2, [sp, #0]
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d1f7      	bne.n	8010dd8 <_dtoa_r+0x6e8>
 8010de8:	9900      	ldr	r1, [sp, #0]
 8010dea:	2230      	movs	r2, #48	; 0x30
 8010dec:	3701      	adds	r7, #1
 8010dee:	700a      	strb	r2, [r1, #0]
 8010df0:	781a      	ldrb	r2, [r3, #0]
 8010df2:	3201      	adds	r2, #1
 8010df4:	701a      	strb	r2, [r3, #0]
 8010df6:	e790      	b.n	8010d1a <_dtoa_r+0x62a>
 8010df8:	4ba3      	ldr	r3, [pc, #652]	; (8011088 <_dtoa_r+0x998>)
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f7ef fc0c 	bl	8000618 <__aeabi_dmul>
 8010e00:	2200      	movs	r2, #0
 8010e02:	2300      	movs	r3, #0
 8010e04:	4606      	mov	r6, r0
 8010e06:	460f      	mov	r7, r1
 8010e08:	f7ef fe6e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d09e      	beq.n	8010d4e <_dtoa_r+0x65e>
 8010e10:	e7d0      	b.n	8010db4 <_dtoa_r+0x6c4>
 8010e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e14:	2a00      	cmp	r2, #0
 8010e16:	f000 80ca 	beq.w	8010fae <_dtoa_r+0x8be>
 8010e1a:	9a07      	ldr	r2, [sp, #28]
 8010e1c:	2a01      	cmp	r2, #1
 8010e1e:	f300 80ad 	bgt.w	8010f7c <_dtoa_r+0x88c>
 8010e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e24:	2a00      	cmp	r2, #0
 8010e26:	f000 80a5 	beq.w	8010f74 <_dtoa_r+0x884>
 8010e2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e2e:	9e08      	ldr	r6, [sp, #32]
 8010e30:	9d05      	ldr	r5, [sp, #20]
 8010e32:	9a05      	ldr	r2, [sp, #20]
 8010e34:	441a      	add	r2, r3
 8010e36:	9205      	str	r2, [sp, #20]
 8010e38:	9a06      	ldr	r2, [sp, #24]
 8010e3a:	2101      	movs	r1, #1
 8010e3c:	441a      	add	r2, r3
 8010e3e:	4620      	mov	r0, r4
 8010e40:	9206      	str	r2, [sp, #24]
 8010e42:	f000 ff3d 	bl	8011cc0 <__i2b>
 8010e46:	4607      	mov	r7, r0
 8010e48:	b165      	cbz	r5, 8010e64 <_dtoa_r+0x774>
 8010e4a:	9b06      	ldr	r3, [sp, #24]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	dd09      	ble.n	8010e64 <_dtoa_r+0x774>
 8010e50:	42ab      	cmp	r3, r5
 8010e52:	9a05      	ldr	r2, [sp, #20]
 8010e54:	bfa8      	it	ge
 8010e56:	462b      	movge	r3, r5
 8010e58:	1ad2      	subs	r2, r2, r3
 8010e5a:	9205      	str	r2, [sp, #20]
 8010e5c:	9a06      	ldr	r2, [sp, #24]
 8010e5e:	1aed      	subs	r5, r5, r3
 8010e60:	1ad3      	subs	r3, r2, r3
 8010e62:	9306      	str	r3, [sp, #24]
 8010e64:	9b08      	ldr	r3, [sp, #32]
 8010e66:	b1f3      	cbz	r3, 8010ea6 <_dtoa_r+0x7b6>
 8010e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f000 80a3 	beq.w	8010fb6 <_dtoa_r+0x8c6>
 8010e70:	2e00      	cmp	r6, #0
 8010e72:	dd10      	ble.n	8010e96 <_dtoa_r+0x7a6>
 8010e74:	4639      	mov	r1, r7
 8010e76:	4632      	mov	r2, r6
 8010e78:	4620      	mov	r0, r4
 8010e7a:	f000 ffe1 	bl	8011e40 <__pow5mult>
 8010e7e:	4652      	mov	r2, sl
 8010e80:	4601      	mov	r1, r0
 8010e82:	4607      	mov	r7, r0
 8010e84:	4620      	mov	r0, r4
 8010e86:	f000 ff31 	bl	8011cec <__multiply>
 8010e8a:	4651      	mov	r1, sl
 8010e8c:	4680      	mov	r8, r0
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f000 fe16 	bl	8011ac0 <_Bfree>
 8010e94:	46c2      	mov	sl, r8
 8010e96:	9b08      	ldr	r3, [sp, #32]
 8010e98:	1b9a      	subs	r2, r3, r6
 8010e9a:	d004      	beq.n	8010ea6 <_dtoa_r+0x7b6>
 8010e9c:	4651      	mov	r1, sl
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	f000 ffce 	bl	8011e40 <__pow5mult>
 8010ea4:	4682      	mov	sl, r0
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f000 ff09 	bl	8011cc0 <__i2b>
 8010eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	4606      	mov	r6, r0
 8010eb4:	f340 8081 	ble.w	8010fba <_dtoa_r+0x8ca>
 8010eb8:	461a      	mov	r2, r3
 8010eba:	4601      	mov	r1, r0
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	f000 ffbf 	bl	8011e40 <__pow5mult>
 8010ec2:	9b07      	ldr	r3, [sp, #28]
 8010ec4:	2b01      	cmp	r3, #1
 8010ec6:	4606      	mov	r6, r0
 8010ec8:	dd7a      	ble.n	8010fc0 <_dtoa_r+0x8d0>
 8010eca:	f04f 0800 	mov.w	r8, #0
 8010ece:	6933      	ldr	r3, [r6, #16]
 8010ed0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010ed4:	6918      	ldr	r0, [r3, #16]
 8010ed6:	f000 fea5 	bl	8011c24 <__hi0bits>
 8010eda:	f1c0 0020 	rsb	r0, r0, #32
 8010ede:	9b06      	ldr	r3, [sp, #24]
 8010ee0:	4418      	add	r0, r3
 8010ee2:	f010 001f 	ands.w	r0, r0, #31
 8010ee6:	f000 8094 	beq.w	8011012 <_dtoa_r+0x922>
 8010eea:	f1c0 0320 	rsb	r3, r0, #32
 8010eee:	2b04      	cmp	r3, #4
 8010ef0:	f340 8085 	ble.w	8010ffe <_dtoa_r+0x90e>
 8010ef4:	9b05      	ldr	r3, [sp, #20]
 8010ef6:	f1c0 001c 	rsb	r0, r0, #28
 8010efa:	4403      	add	r3, r0
 8010efc:	9305      	str	r3, [sp, #20]
 8010efe:	9b06      	ldr	r3, [sp, #24]
 8010f00:	4403      	add	r3, r0
 8010f02:	4405      	add	r5, r0
 8010f04:	9306      	str	r3, [sp, #24]
 8010f06:	9b05      	ldr	r3, [sp, #20]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	dd05      	ble.n	8010f18 <_dtoa_r+0x828>
 8010f0c:	4651      	mov	r1, sl
 8010f0e:	461a      	mov	r2, r3
 8010f10:	4620      	mov	r0, r4
 8010f12:	f000 ffef 	bl	8011ef4 <__lshift>
 8010f16:	4682      	mov	sl, r0
 8010f18:	9b06      	ldr	r3, [sp, #24]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	dd05      	ble.n	8010f2a <_dtoa_r+0x83a>
 8010f1e:	4631      	mov	r1, r6
 8010f20:	461a      	mov	r2, r3
 8010f22:	4620      	mov	r0, r4
 8010f24:	f000 ffe6 	bl	8011ef4 <__lshift>
 8010f28:	4606      	mov	r6, r0
 8010f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d072      	beq.n	8011016 <_dtoa_r+0x926>
 8010f30:	4631      	mov	r1, r6
 8010f32:	4650      	mov	r0, sl
 8010f34:	f001 f84a 	bl	8011fcc <__mcmp>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	da6c      	bge.n	8011016 <_dtoa_r+0x926>
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	4651      	mov	r1, sl
 8010f40:	220a      	movs	r2, #10
 8010f42:	4620      	mov	r0, r4
 8010f44:	f000 fdde 	bl	8011b04 <__multadd>
 8010f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f4e:	4682      	mov	sl, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f000 81b0 	beq.w	80112b6 <_dtoa_r+0xbc6>
 8010f56:	2300      	movs	r3, #0
 8010f58:	4639      	mov	r1, r7
 8010f5a:	220a      	movs	r2, #10
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f000 fdd1 	bl	8011b04 <__multadd>
 8010f62:	9b01      	ldr	r3, [sp, #4]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	4607      	mov	r7, r0
 8010f68:	f300 8096 	bgt.w	8011098 <_dtoa_r+0x9a8>
 8010f6c:	9b07      	ldr	r3, [sp, #28]
 8010f6e:	2b02      	cmp	r3, #2
 8010f70:	dc59      	bgt.n	8011026 <_dtoa_r+0x936>
 8010f72:	e091      	b.n	8011098 <_dtoa_r+0x9a8>
 8010f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010f76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f7a:	e758      	b.n	8010e2e <_dtoa_r+0x73e>
 8010f7c:	9b04      	ldr	r3, [sp, #16]
 8010f7e:	1e5e      	subs	r6, r3, #1
 8010f80:	9b08      	ldr	r3, [sp, #32]
 8010f82:	42b3      	cmp	r3, r6
 8010f84:	bfbf      	itttt	lt
 8010f86:	9b08      	ldrlt	r3, [sp, #32]
 8010f88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010f8a:	9608      	strlt	r6, [sp, #32]
 8010f8c:	1af3      	sublt	r3, r6, r3
 8010f8e:	bfb4      	ite	lt
 8010f90:	18d2      	addlt	r2, r2, r3
 8010f92:	1b9e      	subge	r6, r3, r6
 8010f94:	9b04      	ldr	r3, [sp, #16]
 8010f96:	bfbc      	itt	lt
 8010f98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010f9a:	2600      	movlt	r6, #0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	bfb7      	itett	lt
 8010fa0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010fa4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010fa8:	1a9d      	sublt	r5, r3, r2
 8010faa:	2300      	movlt	r3, #0
 8010fac:	e741      	b.n	8010e32 <_dtoa_r+0x742>
 8010fae:	9e08      	ldr	r6, [sp, #32]
 8010fb0:	9d05      	ldr	r5, [sp, #20]
 8010fb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010fb4:	e748      	b.n	8010e48 <_dtoa_r+0x758>
 8010fb6:	9a08      	ldr	r2, [sp, #32]
 8010fb8:	e770      	b.n	8010e9c <_dtoa_r+0x7ac>
 8010fba:	9b07      	ldr	r3, [sp, #28]
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	dc19      	bgt.n	8010ff4 <_dtoa_r+0x904>
 8010fc0:	9b02      	ldr	r3, [sp, #8]
 8010fc2:	b9bb      	cbnz	r3, 8010ff4 <_dtoa_r+0x904>
 8010fc4:	9b03      	ldr	r3, [sp, #12]
 8010fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fca:	b99b      	cbnz	r3, 8010ff4 <_dtoa_r+0x904>
 8010fcc:	9b03      	ldr	r3, [sp, #12]
 8010fce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010fd2:	0d1b      	lsrs	r3, r3, #20
 8010fd4:	051b      	lsls	r3, r3, #20
 8010fd6:	b183      	cbz	r3, 8010ffa <_dtoa_r+0x90a>
 8010fd8:	9b05      	ldr	r3, [sp, #20]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	9305      	str	r3, [sp, #20]
 8010fde:	9b06      	ldr	r3, [sp, #24]
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	9306      	str	r3, [sp, #24]
 8010fe4:	f04f 0801 	mov.w	r8, #1
 8010fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f47f af6f 	bne.w	8010ece <_dtoa_r+0x7de>
 8010ff0:	2001      	movs	r0, #1
 8010ff2:	e774      	b.n	8010ede <_dtoa_r+0x7ee>
 8010ff4:	f04f 0800 	mov.w	r8, #0
 8010ff8:	e7f6      	b.n	8010fe8 <_dtoa_r+0x8f8>
 8010ffa:	4698      	mov	r8, r3
 8010ffc:	e7f4      	b.n	8010fe8 <_dtoa_r+0x8f8>
 8010ffe:	d082      	beq.n	8010f06 <_dtoa_r+0x816>
 8011000:	9a05      	ldr	r2, [sp, #20]
 8011002:	331c      	adds	r3, #28
 8011004:	441a      	add	r2, r3
 8011006:	9205      	str	r2, [sp, #20]
 8011008:	9a06      	ldr	r2, [sp, #24]
 801100a:	441a      	add	r2, r3
 801100c:	441d      	add	r5, r3
 801100e:	9206      	str	r2, [sp, #24]
 8011010:	e779      	b.n	8010f06 <_dtoa_r+0x816>
 8011012:	4603      	mov	r3, r0
 8011014:	e7f4      	b.n	8011000 <_dtoa_r+0x910>
 8011016:	9b04      	ldr	r3, [sp, #16]
 8011018:	2b00      	cmp	r3, #0
 801101a:	dc37      	bgt.n	801108c <_dtoa_r+0x99c>
 801101c:	9b07      	ldr	r3, [sp, #28]
 801101e:	2b02      	cmp	r3, #2
 8011020:	dd34      	ble.n	801108c <_dtoa_r+0x99c>
 8011022:	9b04      	ldr	r3, [sp, #16]
 8011024:	9301      	str	r3, [sp, #4]
 8011026:	9b01      	ldr	r3, [sp, #4]
 8011028:	b963      	cbnz	r3, 8011044 <_dtoa_r+0x954>
 801102a:	4631      	mov	r1, r6
 801102c:	2205      	movs	r2, #5
 801102e:	4620      	mov	r0, r4
 8011030:	f000 fd68 	bl	8011b04 <__multadd>
 8011034:	4601      	mov	r1, r0
 8011036:	4606      	mov	r6, r0
 8011038:	4650      	mov	r0, sl
 801103a:	f000 ffc7 	bl	8011fcc <__mcmp>
 801103e:	2800      	cmp	r0, #0
 8011040:	f73f adbb 	bgt.w	8010bba <_dtoa_r+0x4ca>
 8011044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011046:	9d00      	ldr	r5, [sp, #0]
 8011048:	ea6f 0b03 	mvn.w	fp, r3
 801104c:	f04f 0800 	mov.w	r8, #0
 8011050:	4631      	mov	r1, r6
 8011052:	4620      	mov	r0, r4
 8011054:	f000 fd34 	bl	8011ac0 <_Bfree>
 8011058:	2f00      	cmp	r7, #0
 801105a:	f43f aeab 	beq.w	8010db4 <_dtoa_r+0x6c4>
 801105e:	f1b8 0f00 	cmp.w	r8, #0
 8011062:	d005      	beq.n	8011070 <_dtoa_r+0x980>
 8011064:	45b8      	cmp	r8, r7
 8011066:	d003      	beq.n	8011070 <_dtoa_r+0x980>
 8011068:	4641      	mov	r1, r8
 801106a:	4620      	mov	r0, r4
 801106c:	f000 fd28 	bl	8011ac0 <_Bfree>
 8011070:	4639      	mov	r1, r7
 8011072:	4620      	mov	r0, r4
 8011074:	f000 fd24 	bl	8011ac0 <_Bfree>
 8011078:	e69c      	b.n	8010db4 <_dtoa_r+0x6c4>
 801107a:	2600      	movs	r6, #0
 801107c:	4637      	mov	r7, r6
 801107e:	e7e1      	b.n	8011044 <_dtoa_r+0x954>
 8011080:	46bb      	mov	fp, r7
 8011082:	4637      	mov	r7, r6
 8011084:	e599      	b.n	8010bba <_dtoa_r+0x4ca>
 8011086:	bf00      	nop
 8011088:	40240000 	.word	0x40240000
 801108c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 80c8 	beq.w	8011224 <_dtoa_r+0xb34>
 8011094:	9b04      	ldr	r3, [sp, #16]
 8011096:	9301      	str	r3, [sp, #4]
 8011098:	2d00      	cmp	r5, #0
 801109a:	dd05      	ble.n	80110a8 <_dtoa_r+0x9b8>
 801109c:	4639      	mov	r1, r7
 801109e:	462a      	mov	r2, r5
 80110a0:	4620      	mov	r0, r4
 80110a2:	f000 ff27 	bl	8011ef4 <__lshift>
 80110a6:	4607      	mov	r7, r0
 80110a8:	f1b8 0f00 	cmp.w	r8, #0
 80110ac:	d05b      	beq.n	8011166 <_dtoa_r+0xa76>
 80110ae:	6879      	ldr	r1, [r7, #4]
 80110b0:	4620      	mov	r0, r4
 80110b2:	f000 fcc5 	bl	8011a40 <_Balloc>
 80110b6:	4605      	mov	r5, r0
 80110b8:	b928      	cbnz	r0, 80110c6 <_dtoa_r+0x9d6>
 80110ba:	4b83      	ldr	r3, [pc, #524]	; (80112c8 <_dtoa_r+0xbd8>)
 80110bc:	4602      	mov	r2, r0
 80110be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80110c2:	f7ff bb2e 	b.w	8010722 <_dtoa_r+0x32>
 80110c6:	693a      	ldr	r2, [r7, #16]
 80110c8:	3202      	adds	r2, #2
 80110ca:	0092      	lsls	r2, r2, #2
 80110cc:	f107 010c 	add.w	r1, r7, #12
 80110d0:	300c      	adds	r0, #12
 80110d2:	f7ff fa49 	bl	8010568 <memcpy>
 80110d6:	2201      	movs	r2, #1
 80110d8:	4629      	mov	r1, r5
 80110da:	4620      	mov	r0, r4
 80110dc:	f000 ff0a 	bl	8011ef4 <__lshift>
 80110e0:	9b00      	ldr	r3, [sp, #0]
 80110e2:	3301      	adds	r3, #1
 80110e4:	9304      	str	r3, [sp, #16]
 80110e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110ea:	4413      	add	r3, r2
 80110ec:	9308      	str	r3, [sp, #32]
 80110ee:	9b02      	ldr	r3, [sp, #8]
 80110f0:	f003 0301 	and.w	r3, r3, #1
 80110f4:	46b8      	mov	r8, r7
 80110f6:	9306      	str	r3, [sp, #24]
 80110f8:	4607      	mov	r7, r0
 80110fa:	9b04      	ldr	r3, [sp, #16]
 80110fc:	4631      	mov	r1, r6
 80110fe:	3b01      	subs	r3, #1
 8011100:	4650      	mov	r0, sl
 8011102:	9301      	str	r3, [sp, #4]
 8011104:	f7ff fa6c 	bl	80105e0 <quorem>
 8011108:	4641      	mov	r1, r8
 801110a:	9002      	str	r0, [sp, #8]
 801110c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011110:	4650      	mov	r0, sl
 8011112:	f000 ff5b 	bl	8011fcc <__mcmp>
 8011116:	463a      	mov	r2, r7
 8011118:	9005      	str	r0, [sp, #20]
 801111a:	4631      	mov	r1, r6
 801111c:	4620      	mov	r0, r4
 801111e:	f000 ff71 	bl	8012004 <__mdiff>
 8011122:	68c2      	ldr	r2, [r0, #12]
 8011124:	4605      	mov	r5, r0
 8011126:	bb02      	cbnz	r2, 801116a <_dtoa_r+0xa7a>
 8011128:	4601      	mov	r1, r0
 801112a:	4650      	mov	r0, sl
 801112c:	f000 ff4e 	bl	8011fcc <__mcmp>
 8011130:	4602      	mov	r2, r0
 8011132:	4629      	mov	r1, r5
 8011134:	4620      	mov	r0, r4
 8011136:	9209      	str	r2, [sp, #36]	; 0x24
 8011138:	f000 fcc2 	bl	8011ac0 <_Bfree>
 801113c:	9b07      	ldr	r3, [sp, #28]
 801113e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011140:	9d04      	ldr	r5, [sp, #16]
 8011142:	ea43 0102 	orr.w	r1, r3, r2
 8011146:	9b06      	ldr	r3, [sp, #24]
 8011148:	4319      	orrs	r1, r3
 801114a:	d110      	bne.n	801116e <_dtoa_r+0xa7e>
 801114c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011150:	d029      	beq.n	80111a6 <_dtoa_r+0xab6>
 8011152:	9b05      	ldr	r3, [sp, #20]
 8011154:	2b00      	cmp	r3, #0
 8011156:	dd02      	ble.n	801115e <_dtoa_r+0xa6e>
 8011158:	9b02      	ldr	r3, [sp, #8]
 801115a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801115e:	9b01      	ldr	r3, [sp, #4]
 8011160:	f883 9000 	strb.w	r9, [r3]
 8011164:	e774      	b.n	8011050 <_dtoa_r+0x960>
 8011166:	4638      	mov	r0, r7
 8011168:	e7ba      	b.n	80110e0 <_dtoa_r+0x9f0>
 801116a:	2201      	movs	r2, #1
 801116c:	e7e1      	b.n	8011132 <_dtoa_r+0xa42>
 801116e:	9b05      	ldr	r3, [sp, #20]
 8011170:	2b00      	cmp	r3, #0
 8011172:	db04      	blt.n	801117e <_dtoa_r+0xa8e>
 8011174:	9907      	ldr	r1, [sp, #28]
 8011176:	430b      	orrs	r3, r1
 8011178:	9906      	ldr	r1, [sp, #24]
 801117a:	430b      	orrs	r3, r1
 801117c:	d120      	bne.n	80111c0 <_dtoa_r+0xad0>
 801117e:	2a00      	cmp	r2, #0
 8011180:	dded      	ble.n	801115e <_dtoa_r+0xa6e>
 8011182:	4651      	mov	r1, sl
 8011184:	2201      	movs	r2, #1
 8011186:	4620      	mov	r0, r4
 8011188:	f000 feb4 	bl	8011ef4 <__lshift>
 801118c:	4631      	mov	r1, r6
 801118e:	4682      	mov	sl, r0
 8011190:	f000 ff1c 	bl	8011fcc <__mcmp>
 8011194:	2800      	cmp	r0, #0
 8011196:	dc03      	bgt.n	80111a0 <_dtoa_r+0xab0>
 8011198:	d1e1      	bne.n	801115e <_dtoa_r+0xa6e>
 801119a:	f019 0f01 	tst.w	r9, #1
 801119e:	d0de      	beq.n	801115e <_dtoa_r+0xa6e>
 80111a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80111a4:	d1d8      	bne.n	8011158 <_dtoa_r+0xa68>
 80111a6:	9a01      	ldr	r2, [sp, #4]
 80111a8:	2339      	movs	r3, #57	; 0x39
 80111aa:	7013      	strb	r3, [r2, #0]
 80111ac:	462b      	mov	r3, r5
 80111ae:	461d      	mov	r5, r3
 80111b0:	3b01      	subs	r3, #1
 80111b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80111b6:	2a39      	cmp	r2, #57	; 0x39
 80111b8:	d06c      	beq.n	8011294 <_dtoa_r+0xba4>
 80111ba:	3201      	adds	r2, #1
 80111bc:	701a      	strb	r2, [r3, #0]
 80111be:	e747      	b.n	8011050 <_dtoa_r+0x960>
 80111c0:	2a00      	cmp	r2, #0
 80111c2:	dd07      	ble.n	80111d4 <_dtoa_r+0xae4>
 80111c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80111c8:	d0ed      	beq.n	80111a6 <_dtoa_r+0xab6>
 80111ca:	9a01      	ldr	r2, [sp, #4]
 80111cc:	f109 0301 	add.w	r3, r9, #1
 80111d0:	7013      	strb	r3, [r2, #0]
 80111d2:	e73d      	b.n	8011050 <_dtoa_r+0x960>
 80111d4:	9b04      	ldr	r3, [sp, #16]
 80111d6:	9a08      	ldr	r2, [sp, #32]
 80111d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80111dc:	4293      	cmp	r3, r2
 80111de:	d043      	beq.n	8011268 <_dtoa_r+0xb78>
 80111e0:	4651      	mov	r1, sl
 80111e2:	2300      	movs	r3, #0
 80111e4:	220a      	movs	r2, #10
 80111e6:	4620      	mov	r0, r4
 80111e8:	f000 fc8c 	bl	8011b04 <__multadd>
 80111ec:	45b8      	cmp	r8, r7
 80111ee:	4682      	mov	sl, r0
 80111f0:	f04f 0300 	mov.w	r3, #0
 80111f4:	f04f 020a 	mov.w	r2, #10
 80111f8:	4641      	mov	r1, r8
 80111fa:	4620      	mov	r0, r4
 80111fc:	d107      	bne.n	801120e <_dtoa_r+0xb1e>
 80111fe:	f000 fc81 	bl	8011b04 <__multadd>
 8011202:	4680      	mov	r8, r0
 8011204:	4607      	mov	r7, r0
 8011206:	9b04      	ldr	r3, [sp, #16]
 8011208:	3301      	adds	r3, #1
 801120a:	9304      	str	r3, [sp, #16]
 801120c:	e775      	b.n	80110fa <_dtoa_r+0xa0a>
 801120e:	f000 fc79 	bl	8011b04 <__multadd>
 8011212:	4639      	mov	r1, r7
 8011214:	4680      	mov	r8, r0
 8011216:	2300      	movs	r3, #0
 8011218:	220a      	movs	r2, #10
 801121a:	4620      	mov	r0, r4
 801121c:	f000 fc72 	bl	8011b04 <__multadd>
 8011220:	4607      	mov	r7, r0
 8011222:	e7f0      	b.n	8011206 <_dtoa_r+0xb16>
 8011224:	9b04      	ldr	r3, [sp, #16]
 8011226:	9301      	str	r3, [sp, #4]
 8011228:	9d00      	ldr	r5, [sp, #0]
 801122a:	4631      	mov	r1, r6
 801122c:	4650      	mov	r0, sl
 801122e:	f7ff f9d7 	bl	80105e0 <quorem>
 8011232:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011236:	9b00      	ldr	r3, [sp, #0]
 8011238:	f805 9b01 	strb.w	r9, [r5], #1
 801123c:	1aea      	subs	r2, r5, r3
 801123e:	9b01      	ldr	r3, [sp, #4]
 8011240:	4293      	cmp	r3, r2
 8011242:	dd07      	ble.n	8011254 <_dtoa_r+0xb64>
 8011244:	4651      	mov	r1, sl
 8011246:	2300      	movs	r3, #0
 8011248:	220a      	movs	r2, #10
 801124a:	4620      	mov	r0, r4
 801124c:	f000 fc5a 	bl	8011b04 <__multadd>
 8011250:	4682      	mov	sl, r0
 8011252:	e7ea      	b.n	801122a <_dtoa_r+0xb3a>
 8011254:	9b01      	ldr	r3, [sp, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	bfc8      	it	gt
 801125a:	461d      	movgt	r5, r3
 801125c:	9b00      	ldr	r3, [sp, #0]
 801125e:	bfd8      	it	le
 8011260:	2501      	movle	r5, #1
 8011262:	441d      	add	r5, r3
 8011264:	f04f 0800 	mov.w	r8, #0
 8011268:	4651      	mov	r1, sl
 801126a:	2201      	movs	r2, #1
 801126c:	4620      	mov	r0, r4
 801126e:	f000 fe41 	bl	8011ef4 <__lshift>
 8011272:	4631      	mov	r1, r6
 8011274:	4682      	mov	sl, r0
 8011276:	f000 fea9 	bl	8011fcc <__mcmp>
 801127a:	2800      	cmp	r0, #0
 801127c:	dc96      	bgt.n	80111ac <_dtoa_r+0xabc>
 801127e:	d102      	bne.n	8011286 <_dtoa_r+0xb96>
 8011280:	f019 0f01 	tst.w	r9, #1
 8011284:	d192      	bne.n	80111ac <_dtoa_r+0xabc>
 8011286:	462b      	mov	r3, r5
 8011288:	461d      	mov	r5, r3
 801128a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801128e:	2a30      	cmp	r2, #48	; 0x30
 8011290:	d0fa      	beq.n	8011288 <_dtoa_r+0xb98>
 8011292:	e6dd      	b.n	8011050 <_dtoa_r+0x960>
 8011294:	9a00      	ldr	r2, [sp, #0]
 8011296:	429a      	cmp	r2, r3
 8011298:	d189      	bne.n	80111ae <_dtoa_r+0xabe>
 801129a:	f10b 0b01 	add.w	fp, fp, #1
 801129e:	2331      	movs	r3, #49	; 0x31
 80112a0:	e796      	b.n	80111d0 <_dtoa_r+0xae0>
 80112a2:	4b0a      	ldr	r3, [pc, #40]	; (80112cc <_dtoa_r+0xbdc>)
 80112a4:	f7ff ba99 	b.w	80107da <_dtoa_r+0xea>
 80112a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	f47f aa6d 	bne.w	801078a <_dtoa_r+0x9a>
 80112b0:	4b07      	ldr	r3, [pc, #28]	; (80112d0 <_dtoa_r+0xbe0>)
 80112b2:	f7ff ba92 	b.w	80107da <_dtoa_r+0xea>
 80112b6:	9b01      	ldr	r3, [sp, #4]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	dcb5      	bgt.n	8011228 <_dtoa_r+0xb38>
 80112bc:	9b07      	ldr	r3, [sp, #28]
 80112be:	2b02      	cmp	r3, #2
 80112c0:	f73f aeb1 	bgt.w	8011026 <_dtoa_r+0x936>
 80112c4:	e7b0      	b.n	8011228 <_dtoa_r+0xb38>
 80112c6:	bf00      	nop
 80112c8:	0801581a 	.word	0x0801581a
 80112cc:	08015a0b 	.word	0x08015a0b
 80112d0:	080157b5 	.word	0x080157b5

080112d4 <_free_r>:
 80112d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112d6:	2900      	cmp	r1, #0
 80112d8:	d044      	beq.n	8011364 <_free_r+0x90>
 80112da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112de:	9001      	str	r0, [sp, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	f1a1 0404 	sub.w	r4, r1, #4
 80112e6:	bfb8      	it	lt
 80112e8:	18e4      	addlt	r4, r4, r3
 80112ea:	f7fc ffcf 	bl	800e28c <__malloc_lock>
 80112ee:	4a1e      	ldr	r2, [pc, #120]	; (8011368 <_free_r+0x94>)
 80112f0:	9801      	ldr	r0, [sp, #4]
 80112f2:	6813      	ldr	r3, [r2, #0]
 80112f4:	b933      	cbnz	r3, 8011304 <_free_r+0x30>
 80112f6:	6063      	str	r3, [r4, #4]
 80112f8:	6014      	str	r4, [r2, #0]
 80112fa:	b003      	add	sp, #12
 80112fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011300:	f7fc bfca 	b.w	800e298 <__malloc_unlock>
 8011304:	42a3      	cmp	r3, r4
 8011306:	d908      	bls.n	801131a <_free_r+0x46>
 8011308:	6825      	ldr	r5, [r4, #0]
 801130a:	1961      	adds	r1, r4, r5
 801130c:	428b      	cmp	r3, r1
 801130e:	bf01      	itttt	eq
 8011310:	6819      	ldreq	r1, [r3, #0]
 8011312:	685b      	ldreq	r3, [r3, #4]
 8011314:	1949      	addeq	r1, r1, r5
 8011316:	6021      	streq	r1, [r4, #0]
 8011318:	e7ed      	b.n	80112f6 <_free_r+0x22>
 801131a:	461a      	mov	r2, r3
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	b10b      	cbz	r3, 8011324 <_free_r+0x50>
 8011320:	42a3      	cmp	r3, r4
 8011322:	d9fa      	bls.n	801131a <_free_r+0x46>
 8011324:	6811      	ldr	r1, [r2, #0]
 8011326:	1855      	adds	r5, r2, r1
 8011328:	42a5      	cmp	r5, r4
 801132a:	d10b      	bne.n	8011344 <_free_r+0x70>
 801132c:	6824      	ldr	r4, [r4, #0]
 801132e:	4421      	add	r1, r4
 8011330:	1854      	adds	r4, r2, r1
 8011332:	42a3      	cmp	r3, r4
 8011334:	6011      	str	r1, [r2, #0]
 8011336:	d1e0      	bne.n	80112fa <_free_r+0x26>
 8011338:	681c      	ldr	r4, [r3, #0]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	6053      	str	r3, [r2, #4]
 801133e:	440c      	add	r4, r1
 8011340:	6014      	str	r4, [r2, #0]
 8011342:	e7da      	b.n	80112fa <_free_r+0x26>
 8011344:	d902      	bls.n	801134c <_free_r+0x78>
 8011346:	230c      	movs	r3, #12
 8011348:	6003      	str	r3, [r0, #0]
 801134a:	e7d6      	b.n	80112fa <_free_r+0x26>
 801134c:	6825      	ldr	r5, [r4, #0]
 801134e:	1961      	adds	r1, r4, r5
 8011350:	428b      	cmp	r3, r1
 8011352:	bf04      	itt	eq
 8011354:	6819      	ldreq	r1, [r3, #0]
 8011356:	685b      	ldreq	r3, [r3, #4]
 8011358:	6063      	str	r3, [r4, #4]
 801135a:	bf04      	itt	eq
 801135c:	1949      	addeq	r1, r1, r5
 801135e:	6021      	streq	r1, [r4, #0]
 8011360:	6054      	str	r4, [r2, #4]
 8011362:	e7ca      	b.n	80112fa <_free_r+0x26>
 8011364:	b003      	add	sp, #12
 8011366:	bd30      	pop	{r4, r5, pc}
 8011368:	20005584 	.word	0x20005584

0801136c <rshift>:
 801136c:	6903      	ldr	r3, [r0, #16]
 801136e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011376:	ea4f 1261 	mov.w	r2, r1, asr #5
 801137a:	f100 0414 	add.w	r4, r0, #20
 801137e:	dd45      	ble.n	801140c <rshift+0xa0>
 8011380:	f011 011f 	ands.w	r1, r1, #31
 8011384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801138c:	d10c      	bne.n	80113a8 <rshift+0x3c>
 801138e:	f100 0710 	add.w	r7, r0, #16
 8011392:	4629      	mov	r1, r5
 8011394:	42b1      	cmp	r1, r6
 8011396:	d334      	bcc.n	8011402 <rshift+0x96>
 8011398:	1a9b      	subs	r3, r3, r2
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	1eea      	subs	r2, r5, #3
 801139e:	4296      	cmp	r6, r2
 80113a0:	bf38      	it	cc
 80113a2:	2300      	movcc	r3, #0
 80113a4:	4423      	add	r3, r4
 80113a6:	e015      	b.n	80113d4 <rshift+0x68>
 80113a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80113ac:	f1c1 0820 	rsb	r8, r1, #32
 80113b0:	40cf      	lsrs	r7, r1
 80113b2:	f105 0e04 	add.w	lr, r5, #4
 80113b6:	46a1      	mov	r9, r4
 80113b8:	4576      	cmp	r6, lr
 80113ba:	46f4      	mov	ip, lr
 80113bc:	d815      	bhi.n	80113ea <rshift+0x7e>
 80113be:	1a9a      	subs	r2, r3, r2
 80113c0:	0092      	lsls	r2, r2, #2
 80113c2:	3a04      	subs	r2, #4
 80113c4:	3501      	adds	r5, #1
 80113c6:	42ae      	cmp	r6, r5
 80113c8:	bf38      	it	cc
 80113ca:	2200      	movcc	r2, #0
 80113cc:	18a3      	adds	r3, r4, r2
 80113ce:	50a7      	str	r7, [r4, r2]
 80113d0:	b107      	cbz	r7, 80113d4 <rshift+0x68>
 80113d2:	3304      	adds	r3, #4
 80113d4:	1b1a      	subs	r2, r3, r4
 80113d6:	42a3      	cmp	r3, r4
 80113d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80113dc:	bf08      	it	eq
 80113de:	2300      	moveq	r3, #0
 80113e0:	6102      	str	r2, [r0, #16]
 80113e2:	bf08      	it	eq
 80113e4:	6143      	streq	r3, [r0, #20]
 80113e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113ea:	f8dc c000 	ldr.w	ip, [ip]
 80113ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80113f2:	ea4c 0707 	orr.w	r7, ip, r7
 80113f6:	f849 7b04 	str.w	r7, [r9], #4
 80113fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80113fe:	40cf      	lsrs	r7, r1
 8011400:	e7da      	b.n	80113b8 <rshift+0x4c>
 8011402:	f851 cb04 	ldr.w	ip, [r1], #4
 8011406:	f847 cf04 	str.w	ip, [r7, #4]!
 801140a:	e7c3      	b.n	8011394 <rshift+0x28>
 801140c:	4623      	mov	r3, r4
 801140e:	e7e1      	b.n	80113d4 <rshift+0x68>

08011410 <__hexdig_fun>:
 8011410:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011414:	2b09      	cmp	r3, #9
 8011416:	d802      	bhi.n	801141e <__hexdig_fun+0xe>
 8011418:	3820      	subs	r0, #32
 801141a:	b2c0      	uxtb	r0, r0
 801141c:	4770      	bx	lr
 801141e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011422:	2b05      	cmp	r3, #5
 8011424:	d801      	bhi.n	801142a <__hexdig_fun+0x1a>
 8011426:	3847      	subs	r0, #71	; 0x47
 8011428:	e7f7      	b.n	801141a <__hexdig_fun+0xa>
 801142a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801142e:	2b05      	cmp	r3, #5
 8011430:	d801      	bhi.n	8011436 <__hexdig_fun+0x26>
 8011432:	3827      	subs	r0, #39	; 0x27
 8011434:	e7f1      	b.n	801141a <__hexdig_fun+0xa>
 8011436:	2000      	movs	r0, #0
 8011438:	4770      	bx	lr
	...

0801143c <__gethex>:
 801143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011440:	4617      	mov	r7, r2
 8011442:	680a      	ldr	r2, [r1, #0]
 8011444:	b085      	sub	sp, #20
 8011446:	f102 0b02 	add.w	fp, r2, #2
 801144a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801144e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011452:	4681      	mov	r9, r0
 8011454:	468a      	mov	sl, r1
 8011456:	9302      	str	r3, [sp, #8]
 8011458:	32fe      	adds	r2, #254	; 0xfe
 801145a:	eb02 030b 	add.w	r3, r2, fp
 801145e:	46d8      	mov	r8, fp
 8011460:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011464:	9301      	str	r3, [sp, #4]
 8011466:	2830      	cmp	r0, #48	; 0x30
 8011468:	d0f7      	beq.n	801145a <__gethex+0x1e>
 801146a:	f7ff ffd1 	bl	8011410 <__hexdig_fun>
 801146e:	4604      	mov	r4, r0
 8011470:	2800      	cmp	r0, #0
 8011472:	d138      	bne.n	80114e6 <__gethex+0xaa>
 8011474:	49a7      	ldr	r1, [pc, #668]	; (8011714 <__gethex+0x2d8>)
 8011476:	2201      	movs	r2, #1
 8011478:	4640      	mov	r0, r8
 801147a:	f7fe fefc 	bl	8010276 <strncmp>
 801147e:	4606      	mov	r6, r0
 8011480:	2800      	cmp	r0, #0
 8011482:	d169      	bne.n	8011558 <__gethex+0x11c>
 8011484:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011488:	465d      	mov	r5, fp
 801148a:	f7ff ffc1 	bl	8011410 <__hexdig_fun>
 801148e:	2800      	cmp	r0, #0
 8011490:	d064      	beq.n	801155c <__gethex+0x120>
 8011492:	465a      	mov	r2, fp
 8011494:	7810      	ldrb	r0, [r2, #0]
 8011496:	2830      	cmp	r0, #48	; 0x30
 8011498:	4690      	mov	r8, r2
 801149a:	f102 0201 	add.w	r2, r2, #1
 801149e:	d0f9      	beq.n	8011494 <__gethex+0x58>
 80114a0:	f7ff ffb6 	bl	8011410 <__hexdig_fun>
 80114a4:	2301      	movs	r3, #1
 80114a6:	fab0 f480 	clz	r4, r0
 80114aa:	0964      	lsrs	r4, r4, #5
 80114ac:	465e      	mov	r6, fp
 80114ae:	9301      	str	r3, [sp, #4]
 80114b0:	4642      	mov	r2, r8
 80114b2:	4615      	mov	r5, r2
 80114b4:	3201      	adds	r2, #1
 80114b6:	7828      	ldrb	r0, [r5, #0]
 80114b8:	f7ff ffaa 	bl	8011410 <__hexdig_fun>
 80114bc:	2800      	cmp	r0, #0
 80114be:	d1f8      	bne.n	80114b2 <__gethex+0x76>
 80114c0:	4994      	ldr	r1, [pc, #592]	; (8011714 <__gethex+0x2d8>)
 80114c2:	2201      	movs	r2, #1
 80114c4:	4628      	mov	r0, r5
 80114c6:	f7fe fed6 	bl	8010276 <strncmp>
 80114ca:	b978      	cbnz	r0, 80114ec <__gethex+0xb0>
 80114cc:	b946      	cbnz	r6, 80114e0 <__gethex+0xa4>
 80114ce:	1c6e      	adds	r6, r5, #1
 80114d0:	4632      	mov	r2, r6
 80114d2:	4615      	mov	r5, r2
 80114d4:	3201      	adds	r2, #1
 80114d6:	7828      	ldrb	r0, [r5, #0]
 80114d8:	f7ff ff9a 	bl	8011410 <__hexdig_fun>
 80114dc:	2800      	cmp	r0, #0
 80114de:	d1f8      	bne.n	80114d2 <__gethex+0x96>
 80114e0:	1b73      	subs	r3, r6, r5
 80114e2:	009e      	lsls	r6, r3, #2
 80114e4:	e004      	b.n	80114f0 <__gethex+0xb4>
 80114e6:	2400      	movs	r4, #0
 80114e8:	4626      	mov	r6, r4
 80114ea:	e7e1      	b.n	80114b0 <__gethex+0x74>
 80114ec:	2e00      	cmp	r6, #0
 80114ee:	d1f7      	bne.n	80114e0 <__gethex+0xa4>
 80114f0:	782b      	ldrb	r3, [r5, #0]
 80114f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80114f6:	2b50      	cmp	r3, #80	; 0x50
 80114f8:	d13d      	bne.n	8011576 <__gethex+0x13a>
 80114fa:	786b      	ldrb	r3, [r5, #1]
 80114fc:	2b2b      	cmp	r3, #43	; 0x2b
 80114fe:	d02f      	beq.n	8011560 <__gethex+0x124>
 8011500:	2b2d      	cmp	r3, #45	; 0x2d
 8011502:	d031      	beq.n	8011568 <__gethex+0x12c>
 8011504:	1c69      	adds	r1, r5, #1
 8011506:	f04f 0b00 	mov.w	fp, #0
 801150a:	7808      	ldrb	r0, [r1, #0]
 801150c:	f7ff ff80 	bl	8011410 <__hexdig_fun>
 8011510:	1e42      	subs	r2, r0, #1
 8011512:	b2d2      	uxtb	r2, r2
 8011514:	2a18      	cmp	r2, #24
 8011516:	d82e      	bhi.n	8011576 <__gethex+0x13a>
 8011518:	f1a0 0210 	sub.w	r2, r0, #16
 801151c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011520:	f7ff ff76 	bl	8011410 <__hexdig_fun>
 8011524:	f100 3cff 	add.w	ip, r0, #4294967295
 8011528:	fa5f fc8c 	uxtb.w	ip, ip
 801152c:	f1bc 0f18 	cmp.w	ip, #24
 8011530:	d91d      	bls.n	801156e <__gethex+0x132>
 8011532:	f1bb 0f00 	cmp.w	fp, #0
 8011536:	d000      	beq.n	801153a <__gethex+0xfe>
 8011538:	4252      	negs	r2, r2
 801153a:	4416      	add	r6, r2
 801153c:	f8ca 1000 	str.w	r1, [sl]
 8011540:	b1dc      	cbz	r4, 801157a <__gethex+0x13e>
 8011542:	9b01      	ldr	r3, [sp, #4]
 8011544:	2b00      	cmp	r3, #0
 8011546:	bf14      	ite	ne
 8011548:	f04f 0800 	movne.w	r8, #0
 801154c:	f04f 0806 	moveq.w	r8, #6
 8011550:	4640      	mov	r0, r8
 8011552:	b005      	add	sp, #20
 8011554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011558:	4645      	mov	r5, r8
 801155a:	4626      	mov	r6, r4
 801155c:	2401      	movs	r4, #1
 801155e:	e7c7      	b.n	80114f0 <__gethex+0xb4>
 8011560:	f04f 0b00 	mov.w	fp, #0
 8011564:	1ca9      	adds	r1, r5, #2
 8011566:	e7d0      	b.n	801150a <__gethex+0xce>
 8011568:	f04f 0b01 	mov.w	fp, #1
 801156c:	e7fa      	b.n	8011564 <__gethex+0x128>
 801156e:	230a      	movs	r3, #10
 8011570:	fb03 0002 	mla	r0, r3, r2, r0
 8011574:	e7d0      	b.n	8011518 <__gethex+0xdc>
 8011576:	4629      	mov	r1, r5
 8011578:	e7e0      	b.n	801153c <__gethex+0x100>
 801157a:	eba5 0308 	sub.w	r3, r5, r8
 801157e:	3b01      	subs	r3, #1
 8011580:	4621      	mov	r1, r4
 8011582:	2b07      	cmp	r3, #7
 8011584:	dc0a      	bgt.n	801159c <__gethex+0x160>
 8011586:	4648      	mov	r0, r9
 8011588:	f000 fa5a 	bl	8011a40 <_Balloc>
 801158c:	4604      	mov	r4, r0
 801158e:	b940      	cbnz	r0, 80115a2 <__gethex+0x166>
 8011590:	4b61      	ldr	r3, [pc, #388]	; (8011718 <__gethex+0x2dc>)
 8011592:	4602      	mov	r2, r0
 8011594:	21e4      	movs	r1, #228	; 0xe4
 8011596:	4861      	ldr	r0, [pc, #388]	; (801171c <__gethex+0x2e0>)
 8011598:	f7ff f804 	bl	80105a4 <__assert_func>
 801159c:	3101      	adds	r1, #1
 801159e:	105b      	asrs	r3, r3, #1
 80115a0:	e7ef      	b.n	8011582 <__gethex+0x146>
 80115a2:	f100 0a14 	add.w	sl, r0, #20
 80115a6:	2300      	movs	r3, #0
 80115a8:	495a      	ldr	r1, [pc, #360]	; (8011714 <__gethex+0x2d8>)
 80115aa:	f8cd a004 	str.w	sl, [sp, #4]
 80115ae:	469b      	mov	fp, r3
 80115b0:	45a8      	cmp	r8, r5
 80115b2:	d342      	bcc.n	801163a <__gethex+0x1fe>
 80115b4:	9801      	ldr	r0, [sp, #4]
 80115b6:	f840 bb04 	str.w	fp, [r0], #4
 80115ba:	eba0 000a 	sub.w	r0, r0, sl
 80115be:	1080      	asrs	r0, r0, #2
 80115c0:	6120      	str	r0, [r4, #16]
 80115c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80115c6:	4658      	mov	r0, fp
 80115c8:	f000 fb2c 	bl	8011c24 <__hi0bits>
 80115cc:	683d      	ldr	r5, [r7, #0]
 80115ce:	eba8 0000 	sub.w	r0, r8, r0
 80115d2:	42a8      	cmp	r0, r5
 80115d4:	dd59      	ble.n	801168a <__gethex+0x24e>
 80115d6:	eba0 0805 	sub.w	r8, r0, r5
 80115da:	4641      	mov	r1, r8
 80115dc:	4620      	mov	r0, r4
 80115de:	f000 febb 	bl	8012358 <__any_on>
 80115e2:	4683      	mov	fp, r0
 80115e4:	b1b8      	cbz	r0, 8011616 <__gethex+0x1da>
 80115e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80115ea:	1159      	asrs	r1, r3, #5
 80115ec:	f003 021f 	and.w	r2, r3, #31
 80115f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80115f4:	f04f 0b01 	mov.w	fp, #1
 80115f8:	fa0b f202 	lsl.w	r2, fp, r2
 80115fc:	420a      	tst	r2, r1
 80115fe:	d00a      	beq.n	8011616 <__gethex+0x1da>
 8011600:	455b      	cmp	r3, fp
 8011602:	dd06      	ble.n	8011612 <__gethex+0x1d6>
 8011604:	f1a8 0102 	sub.w	r1, r8, #2
 8011608:	4620      	mov	r0, r4
 801160a:	f000 fea5 	bl	8012358 <__any_on>
 801160e:	2800      	cmp	r0, #0
 8011610:	d138      	bne.n	8011684 <__gethex+0x248>
 8011612:	f04f 0b02 	mov.w	fp, #2
 8011616:	4641      	mov	r1, r8
 8011618:	4620      	mov	r0, r4
 801161a:	f7ff fea7 	bl	801136c <rshift>
 801161e:	4446      	add	r6, r8
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	42b3      	cmp	r3, r6
 8011624:	da41      	bge.n	80116aa <__gethex+0x26e>
 8011626:	4621      	mov	r1, r4
 8011628:	4648      	mov	r0, r9
 801162a:	f000 fa49 	bl	8011ac0 <_Bfree>
 801162e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011630:	2300      	movs	r3, #0
 8011632:	6013      	str	r3, [r2, #0]
 8011634:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8011638:	e78a      	b.n	8011550 <__gethex+0x114>
 801163a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801163e:	2a2e      	cmp	r2, #46	; 0x2e
 8011640:	d014      	beq.n	801166c <__gethex+0x230>
 8011642:	2b20      	cmp	r3, #32
 8011644:	d106      	bne.n	8011654 <__gethex+0x218>
 8011646:	9b01      	ldr	r3, [sp, #4]
 8011648:	f843 bb04 	str.w	fp, [r3], #4
 801164c:	f04f 0b00 	mov.w	fp, #0
 8011650:	9301      	str	r3, [sp, #4]
 8011652:	465b      	mov	r3, fp
 8011654:	7828      	ldrb	r0, [r5, #0]
 8011656:	9303      	str	r3, [sp, #12]
 8011658:	f7ff feda 	bl	8011410 <__hexdig_fun>
 801165c:	9b03      	ldr	r3, [sp, #12]
 801165e:	f000 000f 	and.w	r0, r0, #15
 8011662:	4098      	lsls	r0, r3
 8011664:	ea4b 0b00 	orr.w	fp, fp, r0
 8011668:	3304      	adds	r3, #4
 801166a:	e7a1      	b.n	80115b0 <__gethex+0x174>
 801166c:	45a8      	cmp	r8, r5
 801166e:	d8e8      	bhi.n	8011642 <__gethex+0x206>
 8011670:	2201      	movs	r2, #1
 8011672:	4628      	mov	r0, r5
 8011674:	9303      	str	r3, [sp, #12]
 8011676:	f7fe fdfe 	bl	8010276 <strncmp>
 801167a:	4926      	ldr	r1, [pc, #152]	; (8011714 <__gethex+0x2d8>)
 801167c:	9b03      	ldr	r3, [sp, #12]
 801167e:	2800      	cmp	r0, #0
 8011680:	d1df      	bne.n	8011642 <__gethex+0x206>
 8011682:	e795      	b.n	80115b0 <__gethex+0x174>
 8011684:	f04f 0b03 	mov.w	fp, #3
 8011688:	e7c5      	b.n	8011616 <__gethex+0x1da>
 801168a:	da0b      	bge.n	80116a4 <__gethex+0x268>
 801168c:	eba5 0800 	sub.w	r8, r5, r0
 8011690:	4621      	mov	r1, r4
 8011692:	4642      	mov	r2, r8
 8011694:	4648      	mov	r0, r9
 8011696:	f000 fc2d 	bl	8011ef4 <__lshift>
 801169a:	eba6 0608 	sub.w	r6, r6, r8
 801169e:	4604      	mov	r4, r0
 80116a0:	f100 0a14 	add.w	sl, r0, #20
 80116a4:	f04f 0b00 	mov.w	fp, #0
 80116a8:	e7ba      	b.n	8011620 <__gethex+0x1e4>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	42b3      	cmp	r3, r6
 80116ae:	dd73      	ble.n	8011798 <__gethex+0x35c>
 80116b0:	1b9e      	subs	r6, r3, r6
 80116b2:	42b5      	cmp	r5, r6
 80116b4:	dc34      	bgt.n	8011720 <__gethex+0x2e4>
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2b02      	cmp	r3, #2
 80116ba:	d023      	beq.n	8011704 <__gethex+0x2c8>
 80116bc:	2b03      	cmp	r3, #3
 80116be:	d025      	beq.n	801170c <__gethex+0x2d0>
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d115      	bne.n	80116f0 <__gethex+0x2b4>
 80116c4:	42b5      	cmp	r5, r6
 80116c6:	d113      	bne.n	80116f0 <__gethex+0x2b4>
 80116c8:	2d01      	cmp	r5, #1
 80116ca:	d10b      	bne.n	80116e4 <__gethex+0x2a8>
 80116cc:	9a02      	ldr	r2, [sp, #8]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6013      	str	r3, [r2, #0]
 80116d2:	2301      	movs	r3, #1
 80116d4:	6123      	str	r3, [r4, #16]
 80116d6:	f8ca 3000 	str.w	r3, [sl]
 80116da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80116e0:	601c      	str	r4, [r3, #0]
 80116e2:	e735      	b.n	8011550 <__gethex+0x114>
 80116e4:	1e69      	subs	r1, r5, #1
 80116e6:	4620      	mov	r0, r4
 80116e8:	f000 fe36 	bl	8012358 <__any_on>
 80116ec:	2800      	cmp	r0, #0
 80116ee:	d1ed      	bne.n	80116cc <__gethex+0x290>
 80116f0:	4621      	mov	r1, r4
 80116f2:	4648      	mov	r0, r9
 80116f4:	f000 f9e4 	bl	8011ac0 <_Bfree>
 80116f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116fa:	2300      	movs	r3, #0
 80116fc:	6013      	str	r3, [r2, #0]
 80116fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8011702:	e725      	b.n	8011550 <__gethex+0x114>
 8011704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011706:	2b00      	cmp	r3, #0
 8011708:	d1f2      	bne.n	80116f0 <__gethex+0x2b4>
 801170a:	e7df      	b.n	80116cc <__gethex+0x290>
 801170c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801170e:	2b00      	cmp	r3, #0
 8011710:	d1dc      	bne.n	80116cc <__gethex+0x290>
 8011712:	e7ed      	b.n	80116f0 <__gethex+0x2b4>
 8011714:	08015571 	.word	0x08015571
 8011718:	0801581a 	.word	0x0801581a
 801171c:	0801582b 	.word	0x0801582b
 8011720:	f106 38ff 	add.w	r8, r6, #4294967295
 8011724:	f1bb 0f00 	cmp.w	fp, #0
 8011728:	d133      	bne.n	8011792 <__gethex+0x356>
 801172a:	f1b8 0f00 	cmp.w	r8, #0
 801172e:	d004      	beq.n	801173a <__gethex+0x2fe>
 8011730:	4641      	mov	r1, r8
 8011732:	4620      	mov	r0, r4
 8011734:	f000 fe10 	bl	8012358 <__any_on>
 8011738:	4683      	mov	fp, r0
 801173a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801173e:	2301      	movs	r3, #1
 8011740:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011744:	f008 081f 	and.w	r8, r8, #31
 8011748:	fa03 f308 	lsl.w	r3, r3, r8
 801174c:	4213      	tst	r3, r2
 801174e:	4631      	mov	r1, r6
 8011750:	4620      	mov	r0, r4
 8011752:	bf18      	it	ne
 8011754:	f04b 0b02 	orrne.w	fp, fp, #2
 8011758:	1bad      	subs	r5, r5, r6
 801175a:	f7ff fe07 	bl	801136c <rshift>
 801175e:	687e      	ldr	r6, [r7, #4]
 8011760:	f04f 0802 	mov.w	r8, #2
 8011764:	f1bb 0f00 	cmp.w	fp, #0
 8011768:	d04a      	beq.n	8011800 <__gethex+0x3c4>
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2b02      	cmp	r3, #2
 801176e:	d016      	beq.n	801179e <__gethex+0x362>
 8011770:	2b03      	cmp	r3, #3
 8011772:	d018      	beq.n	80117a6 <__gethex+0x36a>
 8011774:	2b01      	cmp	r3, #1
 8011776:	d109      	bne.n	801178c <__gethex+0x350>
 8011778:	f01b 0f02 	tst.w	fp, #2
 801177c:	d006      	beq.n	801178c <__gethex+0x350>
 801177e:	f8da 3000 	ldr.w	r3, [sl]
 8011782:	ea4b 0b03 	orr.w	fp, fp, r3
 8011786:	f01b 0f01 	tst.w	fp, #1
 801178a:	d10f      	bne.n	80117ac <__gethex+0x370>
 801178c:	f048 0810 	orr.w	r8, r8, #16
 8011790:	e036      	b.n	8011800 <__gethex+0x3c4>
 8011792:	f04f 0b01 	mov.w	fp, #1
 8011796:	e7d0      	b.n	801173a <__gethex+0x2fe>
 8011798:	f04f 0801 	mov.w	r8, #1
 801179c:	e7e2      	b.n	8011764 <__gethex+0x328>
 801179e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117a0:	f1c3 0301 	rsb	r3, r3, #1
 80117a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80117a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d0ef      	beq.n	801178c <__gethex+0x350>
 80117ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80117b0:	f104 0214 	add.w	r2, r4, #20
 80117b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80117b8:	9301      	str	r3, [sp, #4]
 80117ba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80117be:	2300      	movs	r3, #0
 80117c0:	4694      	mov	ip, r2
 80117c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80117c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80117ca:	d01e      	beq.n	801180a <__gethex+0x3ce>
 80117cc:	3101      	adds	r1, #1
 80117ce:	f8cc 1000 	str.w	r1, [ip]
 80117d2:	f1b8 0f02 	cmp.w	r8, #2
 80117d6:	f104 0214 	add.w	r2, r4, #20
 80117da:	d13d      	bne.n	8011858 <__gethex+0x41c>
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	3b01      	subs	r3, #1
 80117e0:	42ab      	cmp	r3, r5
 80117e2:	d10b      	bne.n	80117fc <__gethex+0x3c0>
 80117e4:	1169      	asrs	r1, r5, #5
 80117e6:	2301      	movs	r3, #1
 80117e8:	f005 051f 	and.w	r5, r5, #31
 80117ec:	fa03 f505 	lsl.w	r5, r3, r5
 80117f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80117f4:	421d      	tst	r5, r3
 80117f6:	bf18      	it	ne
 80117f8:	f04f 0801 	movne.w	r8, #1
 80117fc:	f048 0820 	orr.w	r8, r8, #32
 8011800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011802:	601c      	str	r4, [r3, #0]
 8011804:	9b02      	ldr	r3, [sp, #8]
 8011806:	601e      	str	r6, [r3, #0]
 8011808:	e6a2      	b.n	8011550 <__gethex+0x114>
 801180a:	4290      	cmp	r0, r2
 801180c:	f842 3c04 	str.w	r3, [r2, #-4]
 8011810:	d8d6      	bhi.n	80117c0 <__gethex+0x384>
 8011812:	68a2      	ldr	r2, [r4, #8]
 8011814:	4593      	cmp	fp, r2
 8011816:	db17      	blt.n	8011848 <__gethex+0x40c>
 8011818:	6861      	ldr	r1, [r4, #4]
 801181a:	4648      	mov	r0, r9
 801181c:	3101      	adds	r1, #1
 801181e:	f000 f90f 	bl	8011a40 <_Balloc>
 8011822:	4682      	mov	sl, r0
 8011824:	b918      	cbnz	r0, 801182e <__gethex+0x3f2>
 8011826:	4b1b      	ldr	r3, [pc, #108]	; (8011894 <__gethex+0x458>)
 8011828:	4602      	mov	r2, r0
 801182a:	2184      	movs	r1, #132	; 0x84
 801182c:	e6b3      	b.n	8011596 <__gethex+0x15a>
 801182e:	6922      	ldr	r2, [r4, #16]
 8011830:	3202      	adds	r2, #2
 8011832:	f104 010c 	add.w	r1, r4, #12
 8011836:	0092      	lsls	r2, r2, #2
 8011838:	300c      	adds	r0, #12
 801183a:	f7fe fe95 	bl	8010568 <memcpy>
 801183e:	4621      	mov	r1, r4
 8011840:	4648      	mov	r0, r9
 8011842:	f000 f93d 	bl	8011ac0 <_Bfree>
 8011846:	4654      	mov	r4, sl
 8011848:	6922      	ldr	r2, [r4, #16]
 801184a:	1c51      	adds	r1, r2, #1
 801184c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011850:	6121      	str	r1, [r4, #16]
 8011852:	2101      	movs	r1, #1
 8011854:	6151      	str	r1, [r2, #20]
 8011856:	e7bc      	b.n	80117d2 <__gethex+0x396>
 8011858:	6921      	ldr	r1, [r4, #16]
 801185a:	4559      	cmp	r1, fp
 801185c:	dd0b      	ble.n	8011876 <__gethex+0x43a>
 801185e:	2101      	movs	r1, #1
 8011860:	4620      	mov	r0, r4
 8011862:	f7ff fd83 	bl	801136c <rshift>
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	3601      	adds	r6, #1
 801186a:	42b3      	cmp	r3, r6
 801186c:	f6ff aedb 	blt.w	8011626 <__gethex+0x1ea>
 8011870:	f04f 0801 	mov.w	r8, #1
 8011874:	e7c2      	b.n	80117fc <__gethex+0x3c0>
 8011876:	f015 051f 	ands.w	r5, r5, #31
 801187a:	d0f9      	beq.n	8011870 <__gethex+0x434>
 801187c:	9b01      	ldr	r3, [sp, #4]
 801187e:	441a      	add	r2, r3
 8011880:	f1c5 0520 	rsb	r5, r5, #32
 8011884:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011888:	f000 f9cc 	bl	8011c24 <__hi0bits>
 801188c:	42a8      	cmp	r0, r5
 801188e:	dbe6      	blt.n	801185e <__gethex+0x422>
 8011890:	e7ee      	b.n	8011870 <__gethex+0x434>
 8011892:	bf00      	nop
 8011894:	0801581a 	.word	0x0801581a

08011898 <L_shift>:
 8011898:	f1c2 0208 	rsb	r2, r2, #8
 801189c:	0092      	lsls	r2, r2, #2
 801189e:	b570      	push	{r4, r5, r6, lr}
 80118a0:	f1c2 0620 	rsb	r6, r2, #32
 80118a4:	6843      	ldr	r3, [r0, #4]
 80118a6:	6804      	ldr	r4, [r0, #0]
 80118a8:	fa03 f506 	lsl.w	r5, r3, r6
 80118ac:	432c      	orrs	r4, r5
 80118ae:	40d3      	lsrs	r3, r2
 80118b0:	6004      	str	r4, [r0, #0]
 80118b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80118b6:	4288      	cmp	r0, r1
 80118b8:	d3f4      	bcc.n	80118a4 <L_shift+0xc>
 80118ba:	bd70      	pop	{r4, r5, r6, pc}

080118bc <__match>:
 80118bc:	b530      	push	{r4, r5, lr}
 80118be:	6803      	ldr	r3, [r0, #0]
 80118c0:	3301      	adds	r3, #1
 80118c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118c6:	b914      	cbnz	r4, 80118ce <__match+0x12>
 80118c8:	6003      	str	r3, [r0, #0]
 80118ca:	2001      	movs	r0, #1
 80118cc:	bd30      	pop	{r4, r5, pc}
 80118ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80118d6:	2d19      	cmp	r5, #25
 80118d8:	bf98      	it	ls
 80118da:	3220      	addls	r2, #32
 80118dc:	42a2      	cmp	r2, r4
 80118de:	d0f0      	beq.n	80118c2 <__match+0x6>
 80118e0:	2000      	movs	r0, #0
 80118e2:	e7f3      	b.n	80118cc <__match+0x10>

080118e4 <__hexnan>:
 80118e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118e8:	680b      	ldr	r3, [r1, #0]
 80118ea:	6801      	ldr	r1, [r0, #0]
 80118ec:	115e      	asrs	r6, r3, #5
 80118ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80118f2:	f013 031f 	ands.w	r3, r3, #31
 80118f6:	b087      	sub	sp, #28
 80118f8:	bf18      	it	ne
 80118fa:	3604      	addne	r6, #4
 80118fc:	2500      	movs	r5, #0
 80118fe:	1f37      	subs	r7, r6, #4
 8011900:	4682      	mov	sl, r0
 8011902:	4690      	mov	r8, r2
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	f846 5c04 	str.w	r5, [r6, #-4]
 801190a:	46b9      	mov	r9, r7
 801190c:	463c      	mov	r4, r7
 801190e:	9502      	str	r5, [sp, #8]
 8011910:	46ab      	mov	fp, r5
 8011912:	784a      	ldrb	r2, [r1, #1]
 8011914:	1c4b      	adds	r3, r1, #1
 8011916:	9303      	str	r3, [sp, #12]
 8011918:	b342      	cbz	r2, 801196c <__hexnan+0x88>
 801191a:	4610      	mov	r0, r2
 801191c:	9105      	str	r1, [sp, #20]
 801191e:	9204      	str	r2, [sp, #16]
 8011920:	f7ff fd76 	bl	8011410 <__hexdig_fun>
 8011924:	2800      	cmp	r0, #0
 8011926:	d14f      	bne.n	80119c8 <__hexnan+0xe4>
 8011928:	9a04      	ldr	r2, [sp, #16]
 801192a:	9905      	ldr	r1, [sp, #20]
 801192c:	2a20      	cmp	r2, #32
 801192e:	d818      	bhi.n	8011962 <__hexnan+0x7e>
 8011930:	9b02      	ldr	r3, [sp, #8]
 8011932:	459b      	cmp	fp, r3
 8011934:	dd13      	ble.n	801195e <__hexnan+0x7a>
 8011936:	454c      	cmp	r4, r9
 8011938:	d206      	bcs.n	8011948 <__hexnan+0x64>
 801193a:	2d07      	cmp	r5, #7
 801193c:	dc04      	bgt.n	8011948 <__hexnan+0x64>
 801193e:	462a      	mov	r2, r5
 8011940:	4649      	mov	r1, r9
 8011942:	4620      	mov	r0, r4
 8011944:	f7ff ffa8 	bl	8011898 <L_shift>
 8011948:	4544      	cmp	r4, r8
 801194a:	d950      	bls.n	80119ee <__hexnan+0x10a>
 801194c:	2300      	movs	r3, #0
 801194e:	f1a4 0904 	sub.w	r9, r4, #4
 8011952:	f844 3c04 	str.w	r3, [r4, #-4]
 8011956:	f8cd b008 	str.w	fp, [sp, #8]
 801195a:	464c      	mov	r4, r9
 801195c:	461d      	mov	r5, r3
 801195e:	9903      	ldr	r1, [sp, #12]
 8011960:	e7d7      	b.n	8011912 <__hexnan+0x2e>
 8011962:	2a29      	cmp	r2, #41	; 0x29
 8011964:	d155      	bne.n	8011a12 <__hexnan+0x12e>
 8011966:	3102      	adds	r1, #2
 8011968:	f8ca 1000 	str.w	r1, [sl]
 801196c:	f1bb 0f00 	cmp.w	fp, #0
 8011970:	d04f      	beq.n	8011a12 <__hexnan+0x12e>
 8011972:	454c      	cmp	r4, r9
 8011974:	d206      	bcs.n	8011984 <__hexnan+0xa0>
 8011976:	2d07      	cmp	r5, #7
 8011978:	dc04      	bgt.n	8011984 <__hexnan+0xa0>
 801197a:	462a      	mov	r2, r5
 801197c:	4649      	mov	r1, r9
 801197e:	4620      	mov	r0, r4
 8011980:	f7ff ff8a 	bl	8011898 <L_shift>
 8011984:	4544      	cmp	r4, r8
 8011986:	d934      	bls.n	80119f2 <__hexnan+0x10e>
 8011988:	f1a8 0204 	sub.w	r2, r8, #4
 801198c:	4623      	mov	r3, r4
 801198e:	f853 1b04 	ldr.w	r1, [r3], #4
 8011992:	f842 1f04 	str.w	r1, [r2, #4]!
 8011996:	429f      	cmp	r7, r3
 8011998:	d2f9      	bcs.n	801198e <__hexnan+0xaa>
 801199a:	1b3b      	subs	r3, r7, r4
 801199c:	f023 0303 	bic.w	r3, r3, #3
 80119a0:	3304      	adds	r3, #4
 80119a2:	3e03      	subs	r6, #3
 80119a4:	3401      	adds	r4, #1
 80119a6:	42a6      	cmp	r6, r4
 80119a8:	bf38      	it	cc
 80119aa:	2304      	movcc	r3, #4
 80119ac:	4443      	add	r3, r8
 80119ae:	2200      	movs	r2, #0
 80119b0:	f843 2b04 	str.w	r2, [r3], #4
 80119b4:	429f      	cmp	r7, r3
 80119b6:	d2fb      	bcs.n	80119b0 <__hexnan+0xcc>
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	b91b      	cbnz	r3, 80119c4 <__hexnan+0xe0>
 80119bc:	4547      	cmp	r7, r8
 80119be:	d126      	bne.n	8011a0e <__hexnan+0x12a>
 80119c0:	2301      	movs	r3, #1
 80119c2:	603b      	str	r3, [r7, #0]
 80119c4:	2005      	movs	r0, #5
 80119c6:	e025      	b.n	8011a14 <__hexnan+0x130>
 80119c8:	3501      	adds	r5, #1
 80119ca:	2d08      	cmp	r5, #8
 80119cc:	f10b 0b01 	add.w	fp, fp, #1
 80119d0:	dd06      	ble.n	80119e0 <__hexnan+0xfc>
 80119d2:	4544      	cmp	r4, r8
 80119d4:	d9c3      	bls.n	801195e <__hexnan+0x7a>
 80119d6:	2300      	movs	r3, #0
 80119d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80119dc:	2501      	movs	r5, #1
 80119de:	3c04      	subs	r4, #4
 80119e0:	6822      	ldr	r2, [r4, #0]
 80119e2:	f000 000f 	and.w	r0, r0, #15
 80119e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80119ea:	6020      	str	r0, [r4, #0]
 80119ec:	e7b7      	b.n	801195e <__hexnan+0x7a>
 80119ee:	2508      	movs	r5, #8
 80119f0:	e7b5      	b.n	801195e <__hexnan+0x7a>
 80119f2:	9b01      	ldr	r3, [sp, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d0df      	beq.n	80119b8 <__hexnan+0xd4>
 80119f8:	f1c3 0320 	rsb	r3, r3, #32
 80119fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011a00:	40da      	lsrs	r2, r3
 8011a02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011a06:	4013      	ands	r3, r2
 8011a08:	f846 3c04 	str.w	r3, [r6, #-4]
 8011a0c:	e7d4      	b.n	80119b8 <__hexnan+0xd4>
 8011a0e:	3f04      	subs	r7, #4
 8011a10:	e7d2      	b.n	80119b8 <__hexnan+0xd4>
 8011a12:	2004      	movs	r0, #4
 8011a14:	b007      	add	sp, #28
 8011a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a1a <__ascii_mbtowc>:
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	b901      	cbnz	r1, 8011a20 <__ascii_mbtowc+0x6>
 8011a1e:	a901      	add	r1, sp, #4
 8011a20:	b142      	cbz	r2, 8011a34 <__ascii_mbtowc+0x1a>
 8011a22:	b14b      	cbz	r3, 8011a38 <__ascii_mbtowc+0x1e>
 8011a24:	7813      	ldrb	r3, [r2, #0]
 8011a26:	600b      	str	r3, [r1, #0]
 8011a28:	7812      	ldrb	r2, [r2, #0]
 8011a2a:	1e10      	subs	r0, r2, #0
 8011a2c:	bf18      	it	ne
 8011a2e:	2001      	movne	r0, #1
 8011a30:	b002      	add	sp, #8
 8011a32:	4770      	bx	lr
 8011a34:	4610      	mov	r0, r2
 8011a36:	e7fb      	b.n	8011a30 <__ascii_mbtowc+0x16>
 8011a38:	f06f 0001 	mvn.w	r0, #1
 8011a3c:	e7f8      	b.n	8011a30 <__ascii_mbtowc+0x16>
	...

08011a40 <_Balloc>:
 8011a40:	b570      	push	{r4, r5, r6, lr}
 8011a42:	69c6      	ldr	r6, [r0, #28]
 8011a44:	4604      	mov	r4, r0
 8011a46:	460d      	mov	r5, r1
 8011a48:	b976      	cbnz	r6, 8011a68 <_Balloc+0x28>
 8011a4a:	2010      	movs	r0, #16
 8011a4c:	f7fc fb76 	bl	800e13c <malloc>
 8011a50:	4602      	mov	r2, r0
 8011a52:	61e0      	str	r0, [r4, #28]
 8011a54:	b920      	cbnz	r0, 8011a60 <_Balloc+0x20>
 8011a56:	4b18      	ldr	r3, [pc, #96]	; (8011ab8 <_Balloc+0x78>)
 8011a58:	4818      	ldr	r0, [pc, #96]	; (8011abc <_Balloc+0x7c>)
 8011a5a:	216b      	movs	r1, #107	; 0x6b
 8011a5c:	f7fe fda2 	bl	80105a4 <__assert_func>
 8011a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a64:	6006      	str	r6, [r0, #0]
 8011a66:	60c6      	str	r6, [r0, #12]
 8011a68:	69e6      	ldr	r6, [r4, #28]
 8011a6a:	68f3      	ldr	r3, [r6, #12]
 8011a6c:	b183      	cbz	r3, 8011a90 <_Balloc+0x50>
 8011a6e:	69e3      	ldr	r3, [r4, #28]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a76:	b9b8      	cbnz	r0, 8011aa8 <_Balloc+0x68>
 8011a78:	2101      	movs	r1, #1
 8011a7a:	fa01 f605 	lsl.w	r6, r1, r5
 8011a7e:	1d72      	adds	r2, r6, #5
 8011a80:	0092      	lsls	r2, r2, #2
 8011a82:	4620      	mov	r0, r4
 8011a84:	f001 fc2b 	bl	80132de <_calloc_r>
 8011a88:	b160      	cbz	r0, 8011aa4 <_Balloc+0x64>
 8011a8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a8e:	e00e      	b.n	8011aae <_Balloc+0x6e>
 8011a90:	2221      	movs	r2, #33	; 0x21
 8011a92:	2104      	movs	r1, #4
 8011a94:	4620      	mov	r0, r4
 8011a96:	f001 fc22 	bl	80132de <_calloc_r>
 8011a9a:	69e3      	ldr	r3, [r4, #28]
 8011a9c:	60f0      	str	r0, [r6, #12]
 8011a9e:	68db      	ldr	r3, [r3, #12]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d1e4      	bne.n	8011a6e <_Balloc+0x2e>
 8011aa4:	2000      	movs	r0, #0
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}
 8011aa8:	6802      	ldr	r2, [r0, #0]
 8011aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011aae:	2300      	movs	r3, #0
 8011ab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ab4:	e7f7      	b.n	8011aa6 <_Balloc+0x66>
 8011ab6:	bf00      	nop
 8011ab8:	08015700 	.word	0x08015700
 8011abc:	0801588b 	.word	0x0801588b

08011ac0 <_Bfree>:
 8011ac0:	b570      	push	{r4, r5, r6, lr}
 8011ac2:	69c6      	ldr	r6, [r0, #28]
 8011ac4:	4605      	mov	r5, r0
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	b976      	cbnz	r6, 8011ae8 <_Bfree+0x28>
 8011aca:	2010      	movs	r0, #16
 8011acc:	f7fc fb36 	bl	800e13c <malloc>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	61e8      	str	r0, [r5, #28]
 8011ad4:	b920      	cbnz	r0, 8011ae0 <_Bfree+0x20>
 8011ad6:	4b09      	ldr	r3, [pc, #36]	; (8011afc <_Bfree+0x3c>)
 8011ad8:	4809      	ldr	r0, [pc, #36]	; (8011b00 <_Bfree+0x40>)
 8011ada:	218f      	movs	r1, #143	; 0x8f
 8011adc:	f7fe fd62 	bl	80105a4 <__assert_func>
 8011ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ae4:	6006      	str	r6, [r0, #0]
 8011ae6:	60c6      	str	r6, [r0, #12]
 8011ae8:	b13c      	cbz	r4, 8011afa <_Bfree+0x3a>
 8011aea:	69eb      	ldr	r3, [r5, #28]
 8011aec:	6862      	ldr	r2, [r4, #4]
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011af4:	6021      	str	r1, [r4, #0]
 8011af6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
 8011afc:	08015700 	.word	0x08015700
 8011b00:	0801588b 	.word	0x0801588b

08011b04 <__multadd>:
 8011b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b08:	690d      	ldr	r5, [r1, #16]
 8011b0a:	4607      	mov	r7, r0
 8011b0c:	460c      	mov	r4, r1
 8011b0e:	461e      	mov	r6, r3
 8011b10:	f101 0c14 	add.w	ip, r1, #20
 8011b14:	2000      	movs	r0, #0
 8011b16:	f8dc 3000 	ldr.w	r3, [ip]
 8011b1a:	b299      	uxth	r1, r3
 8011b1c:	fb02 6101 	mla	r1, r2, r1, r6
 8011b20:	0c1e      	lsrs	r6, r3, #16
 8011b22:	0c0b      	lsrs	r3, r1, #16
 8011b24:	fb02 3306 	mla	r3, r2, r6, r3
 8011b28:	b289      	uxth	r1, r1
 8011b2a:	3001      	adds	r0, #1
 8011b2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b30:	4285      	cmp	r5, r0
 8011b32:	f84c 1b04 	str.w	r1, [ip], #4
 8011b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b3a:	dcec      	bgt.n	8011b16 <__multadd+0x12>
 8011b3c:	b30e      	cbz	r6, 8011b82 <__multadd+0x7e>
 8011b3e:	68a3      	ldr	r3, [r4, #8]
 8011b40:	42ab      	cmp	r3, r5
 8011b42:	dc19      	bgt.n	8011b78 <__multadd+0x74>
 8011b44:	6861      	ldr	r1, [r4, #4]
 8011b46:	4638      	mov	r0, r7
 8011b48:	3101      	adds	r1, #1
 8011b4a:	f7ff ff79 	bl	8011a40 <_Balloc>
 8011b4e:	4680      	mov	r8, r0
 8011b50:	b928      	cbnz	r0, 8011b5e <__multadd+0x5a>
 8011b52:	4602      	mov	r2, r0
 8011b54:	4b0c      	ldr	r3, [pc, #48]	; (8011b88 <__multadd+0x84>)
 8011b56:	480d      	ldr	r0, [pc, #52]	; (8011b8c <__multadd+0x88>)
 8011b58:	21ba      	movs	r1, #186	; 0xba
 8011b5a:	f7fe fd23 	bl	80105a4 <__assert_func>
 8011b5e:	6922      	ldr	r2, [r4, #16]
 8011b60:	3202      	adds	r2, #2
 8011b62:	f104 010c 	add.w	r1, r4, #12
 8011b66:	0092      	lsls	r2, r2, #2
 8011b68:	300c      	adds	r0, #12
 8011b6a:	f7fe fcfd 	bl	8010568 <memcpy>
 8011b6e:	4621      	mov	r1, r4
 8011b70:	4638      	mov	r0, r7
 8011b72:	f7ff ffa5 	bl	8011ac0 <_Bfree>
 8011b76:	4644      	mov	r4, r8
 8011b78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b7c:	3501      	adds	r5, #1
 8011b7e:	615e      	str	r6, [r3, #20]
 8011b80:	6125      	str	r5, [r4, #16]
 8011b82:	4620      	mov	r0, r4
 8011b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b88:	0801581a 	.word	0x0801581a
 8011b8c:	0801588b 	.word	0x0801588b

08011b90 <__s2b>:
 8011b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b94:	460c      	mov	r4, r1
 8011b96:	4615      	mov	r5, r2
 8011b98:	461f      	mov	r7, r3
 8011b9a:	2209      	movs	r2, #9
 8011b9c:	3308      	adds	r3, #8
 8011b9e:	4606      	mov	r6, r0
 8011ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	db09      	blt.n	8011bc0 <__s2b+0x30>
 8011bac:	4630      	mov	r0, r6
 8011bae:	f7ff ff47 	bl	8011a40 <_Balloc>
 8011bb2:	b940      	cbnz	r0, 8011bc6 <__s2b+0x36>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	4b19      	ldr	r3, [pc, #100]	; (8011c1c <__s2b+0x8c>)
 8011bb8:	4819      	ldr	r0, [pc, #100]	; (8011c20 <__s2b+0x90>)
 8011bba:	21d3      	movs	r1, #211	; 0xd3
 8011bbc:	f7fe fcf2 	bl	80105a4 <__assert_func>
 8011bc0:	0052      	lsls	r2, r2, #1
 8011bc2:	3101      	adds	r1, #1
 8011bc4:	e7f0      	b.n	8011ba8 <__s2b+0x18>
 8011bc6:	9b08      	ldr	r3, [sp, #32]
 8011bc8:	6143      	str	r3, [r0, #20]
 8011bca:	2d09      	cmp	r5, #9
 8011bcc:	f04f 0301 	mov.w	r3, #1
 8011bd0:	6103      	str	r3, [r0, #16]
 8011bd2:	dd16      	ble.n	8011c02 <__s2b+0x72>
 8011bd4:	f104 0909 	add.w	r9, r4, #9
 8011bd8:	46c8      	mov	r8, r9
 8011bda:	442c      	add	r4, r5
 8011bdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011be0:	4601      	mov	r1, r0
 8011be2:	3b30      	subs	r3, #48	; 0x30
 8011be4:	220a      	movs	r2, #10
 8011be6:	4630      	mov	r0, r6
 8011be8:	f7ff ff8c 	bl	8011b04 <__multadd>
 8011bec:	45a0      	cmp	r8, r4
 8011bee:	d1f5      	bne.n	8011bdc <__s2b+0x4c>
 8011bf0:	f1a5 0408 	sub.w	r4, r5, #8
 8011bf4:	444c      	add	r4, r9
 8011bf6:	1b2d      	subs	r5, r5, r4
 8011bf8:	1963      	adds	r3, r4, r5
 8011bfa:	42bb      	cmp	r3, r7
 8011bfc:	db04      	blt.n	8011c08 <__s2b+0x78>
 8011bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c02:	340a      	adds	r4, #10
 8011c04:	2509      	movs	r5, #9
 8011c06:	e7f6      	b.n	8011bf6 <__s2b+0x66>
 8011c08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011c0c:	4601      	mov	r1, r0
 8011c0e:	3b30      	subs	r3, #48	; 0x30
 8011c10:	220a      	movs	r2, #10
 8011c12:	4630      	mov	r0, r6
 8011c14:	f7ff ff76 	bl	8011b04 <__multadd>
 8011c18:	e7ee      	b.n	8011bf8 <__s2b+0x68>
 8011c1a:	bf00      	nop
 8011c1c:	0801581a 	.word	0x0801581a
 8011c20:	0801588b 	.word	0x0801588b

08011c24 <__hi0bits>:
 8011c24:	0c03      	lsrs	r3, r0, #16
 8011c26:	041b      	lsls	r3, r3, #16
 8011c28:	b9d3      	cbnz	r3, 8011c60 <__hi0bits+0x3c>
 8011c2a:	0400      	lsls	r0, r0, #16
 8011c2c:	2310      	movs	r3, #16
 8011c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011c32:	bf04      	itt	eq
 8011c34:	0200      	lsleq	r0, r0, #8
 8011c36:	3308      	addeq	r3, #8
 8011c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011c3c:	bf04      	itt	eq
 8011c3e:	0100      	lsleq	r0, r0, #4
 8011c40:	3304      	addeq	r3, #4
 8011c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011c46:	bf04      	itt	eq
 8011c48:	0080      	lsleq	r0, r0, #2
 8011c4a:	3302      	addeq	r3, #2
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	db05      	blt.n	8011c5c <__hi0bits+0x38>
 8011c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011c54:	f103 0301 	add.w	r3, r3, #1
 8011c58:	bf08      	it	eq
 8011c5a:	2320      	moveq	r3, #32
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	4770      	bx	lr
 8011c60:	2300      	movs	r3, #0
 8011c62:	e7e4      	b.n	8011c2e <__hi0bits+0xa>

08011c64 <__lo0bits>:
 8011c64:	6803      	ldr	r3, [r0, #0]
 8011c66:	f013 0207 	ands.w	r2, r3, #7
 8011c6a:	d00c      	beq.n	8011c86 <__lo0bits+0x22>
 8011c6c:	07d9      	lsls	r1, r3, #31
 8011c6e:	d422      	bmi.n	8011cb6 <__lo0bits+0x52>
 8011c70:	079a      	lsls	r2, r3, #30
 8011c72:	bf49      	itett	mi
 8011c74:	085b      	lsrmi	r3, r3, #1
 8011c76:	089b      	lsrpl	r3, r3, #2
 8011c78:	6003      	strmi	r3, [r0, #0]
 8011c7a:	2201      	movmi	r2, #1
 8011c7c:	bf5c      	itt	pl
 8011c7e:	6003      	strpl	r3, [r0, #0]
 8011c80:	2202      	movpl	r2, #2
 8011c82:	4610      	mov	r0, r2
 8011c84:	4770      	bx	lr
 8011c86:	b299      	uxth	r1, r3
 8011c88:	b909      	cbnz	r1, 8011c8e <__lo0bits+0x2a>
 8011c8a:	0c1b      	lsrs	r3, r3, #16
 8011c8c:	2210      	movs	r2, #16
 8011c8e:	b2d9      	uxtb	r1, r3
 8011c90:	b909      	cbnz	r1, 8011c96 <__lo0bits+0x32>
 8011c92:	3208      	adds	r2, #8
 8011c94:	0a1b      	lsrs	r3, r3, #8
 8011c96:	0719      	lsls	r1, r3, #28
 8011c98:	bf04      	itt	eq
 8011c9a:	091b      	lsreq	r3, r3, #4
 8011c9c:	3204      	addeq	r2, #4
 8011c9e:	0799      	lsls	r1, r3, #30
 8011ca0:	bf04      	itt	eq
 8011ca2:	089b      	lsreq	r3, r3, #2
 8011ca4:	3202      	addeq	r2, #2
 8011ca6:	07d9      	lsls	r1, r3, #31
 8011ca8:	d403      	bmi.n	8011cb2 <__lo0bits+0x4e>
 8011caa:	085b      	lsrs	r3, r3, #1
 8011cac:	f102 0201 	add.w	r2, r2, #1
 8011cb0:	d003      	beq.n	8011cba <__lo0bits+0x56>
 8011cb2:	6003      	str	r3, [r0, #0]
 8011cb4:	e7e5      	b.n	8011c82 <__lo0bits+0x1e>
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	e7e3      	b.n	8011c82 <__lo0bits+0x1e>
 8011cba:	2220      	movs	r2, #32
 8011cbc:	e7e1      	b.n	8011c82 <__lo0bits+0x1e>
	...

08011cc0 <__i2b>:
 8011cc0:	b510      	push	{r4, lr}
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	2101      	movs	r1, #1
 8011cc6:	f7ff febb 	bl	8011a40 <_Balloc>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	b928      	cbnz	r0, 8011cda <__i2b+0x1a>
 8011cce:	4b05      	ldr	r3, [pc, #20]	; (8011ce4 <__i2b+0x24>)
 8011cd0:	4805      	ldr	r0, [pc, #20]	; (8011ce8 <__i2b+0x28>)
 8011cd2:	f240 1145 	movw	r1, #325	; 0x145
 8011cd6:	f7fe fc65 	bl	80105a4 <__assert_func>
 8011cda:	2301      	movs	r3, #1
 8011cdc:	6144      	str	r4, [r0, #20]
 8011cde:	6103      	str	r3, [r0, #16]
 8011ce0:	bd10      	pop	{r4, pc}
 8011ce2:	bf00      	nop
 8011ce4:	0801581a 	.word	0x0801581a
 8011ce8:	0801588b 	.word	0x0801588b

08011cec <__multiply>:
 8011cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cf0:	4691      	mov	r9, r2
 8011cf2:	690a      	ldr	r2, [r1, #16]
 8011cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	bfb8      	it	lt
 8011cfc:	460b      	movlt	r3, r1
 8011cfe:	460c      	mov	r4, r1
 8011d00:	bfbc      	itt	lt
 8011d02:	464c      	movlt	r4, r9
 8011d04:	4699      	movlt	r9, r3
 8011d06:	6927      	ldr	r7, [r4, #16]
 8011d08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011d0c:	68a3      	ldr	r3, [r4, #8]
 8011d0e:	6861      	ldr	r1, [r4, #4]
 8011d10:	eb07 060a 	add.w	r6, r7, sl
 8011d14:	42b3      	cmp	r3, r6
 8011d16:	b085      	sub	sp, #20
 8011d18:	bfb8      	it	lt
 8011d1a:	3101      	addlt	r1, #1
 8011d1c:	f7ff fe90 	bl	8011a40 <_Balloc>
 8011d20:	b930      	cbnz	r0, 8011d30 <__multiply+0x44>
 8011d22:	4602      	mov	r2, r0
 8011d24:	4b44      	ldr	r3, [pc, #272]	; (8011e38 <__multiply+0x14c>)
 8011d26:	4845      	ldr	r0, [pc, #276]	; (8011e3c <__multiply+0x150>)
 8011d28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011d2c:	f7fe fc3a 	bl	80105a4 <__assert_func>
 8011d30:	f100 0514 	add.w	r5, r0, #20
 8011d34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011d38:	462b      	mov	r3, r5
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	4543      	cmp	r3, r8
 8011d3e:	d321      	bcc.n	8011d84 <__multiply+0x98>
 8011d40:	f104 0314 	add.w	r3, r4, #20
 8011d44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011d48:	f109 0314 	add.w	r3, r9, #20
 8011d4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011d50:	9202      	str	r2, [sp, #8]
 8011d52:	1b3a      	subs	r2, r7, r4
 8011d54:	3a15      	subs	r2, #21
 8011d56:	f022 0203 	bic.w	r2, r2, #3
 8011d5a:	3204      	adds	r2, #4
 8011d5c:	f104 0115 	add.w	r1, r4, #21
 8011d60:	428f      	cmp	r7, r1
 8011d62:	bf38      	it	cc
 8011d64:	2204      	movcc	r2, #4
 8011d66:	9201      	str	r2, [sp, #4]
 8011d68:	9a02      	ldr	r2, [sp, #8]
 8011d6a:	9303      	str	r3, [sp, #12]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d80c      	bhi.n	8011d8a <__multiply+0x9e>
 8011d70:	2e00      	cmp	r6, #0
 8011d72:	dd03      	ble.n	8011d7c <__multiply+0x90>
 8011d74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d05b      	beq.n	8011e34 <__multiply+0x148>
 8011d7c:	6106      	str	r6, [r0, #16]
 8011d7e:	b005      	add	sp, #20
 8011d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d84:	f843 2b04 	str.w	r2, [r3], #4
 8011d88:	e7d8      	b.n	8011d3c <__multiply+0x50>
 8011d8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011d8e:	f1ba 0f00 	cmp.w	sl, #0
 8011d92:	d024      	beq.n	8011dde <__multiply+0xf2>
 8011d94:	f104 0e14 	add.w	lr, r4, #20
 8011d98:	46a9      	mov	r9, r5
 8011d9a:	f04f 0c00 	mov.w	ip, #0
 8011d9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011da2:	f8d9 1000 	ldr.w	r1, [r9]
 8011da6:	fa1f fb82 	uxth.w	fp, r2
 8011daa:	b289      	uxth	r1, r1
 8011dac:	fb0a 110b 	mla	r1, sl, fp, r1
 8011db0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011db4:	f8d9 2000 	ldr.w	r2, [r9]
 8011db8:	4461      	add	r1, ip
 8011dba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011dbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8011dc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011dc6:	b289      	uxth	r1, r1
 8011dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011dcc:	4577      	cmp	r7, lr
 8011dce:	f849 1b04 	str.w	r1, [r9], #4
 8011dd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011dd6:	d8e2      	bhi.n	8011d9e <__multiply+0xb2>
 8011dd8:	9a01      	ldr	r2, [sp, #4]
 8011dda:	f845 c002 	str.w	ip, [r5, r2]
 8011dde:	9a03      	ldr	r2, [sp, #12]
 8011de0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011de4:	3304      	adds	r3, #4
 8011de6:	f1b9 0f00 	cmp.w	r9, #0
 8011dea:	d021      	beq.n	8011e30 <__multiply+0x144>
 8011dec:	6829      	ldr	r1, [r5, #0]
 8011dee:	f104 0c14 	add.w	ip, r4, #20
 8011df2:	46ae      	mov	lr, r5
 8011df4:	f04f 0a00 	mov.w	sl, #0
 8011df8:	f8bc b000 	ldrh.w	fp, [ip]
 8011dfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011e00:	fb09 220b 	mla	r2, r9, fp, r2
 8011e04:	4452      	add	r2, sl
 8011e06:	b289      	uxth	r1, r1
 8011e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011e0c:	f84e 1b04 	str.w	r1, [lr], #4
 8011e10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011e14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011e18:	f8be 1000 	ldrh.w	r1, [lr]
 8011e1c:	fb09 110a 	mla	r1, r9, sl, r1
 8011e20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011e24:	4567      	cmp	r7, ip
 8011e26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011e2a:	d8e5      	bhi.n	8011df8 <__multiply+0x10c>
 8011e2c:	9a01      	ldr	r2, [sp, #4]
 8011e2e:	50a9      	str	r1, [r5, r2]
 8011e30:	3504      	adds	r5, #4
 8011e32:	e799      	b.n	8011d68 <__multiply+0x7c>
 8011e34:	3e01      	subs	r6, #1
 8011e36:	e79b      	b.n	8011d70 <__multiply+0x84>
 8011e38:	0801581a 	.word	0x0801581a
 8011e3c:	0801588b 	.word	0x0801588b

08011e40 <__pow5mult>:
 8011e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e44:	4615      	mov	r5, r2
 8011e46:	f012 0203 	ands.w	r2, r2, #3
 8011e4a:	4606      	mov	r6, r0
 8011e4c:	460f      	mov	r7, r1
 8011e4e:	d007      	beq.n	8011e60 <__pow5mult+0x20>
 8011e50:	4c25      	ldr	r4, [pc, #148]	; (8011ee8 <__pow5mult+0xa8>)
 8011e52:	3a01      	subs	r2, #1
 8011e54:	2300      	movs	r3, #0
 8011e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011e5a:	f7ff fe53 	bl	8011b04 <__multadd>
 8011e5e:	4607      	mov	r7, r0
 8011e60:	10ad      	asrs	r5, r5, #2
 8011e62:	d03d      	beq.n	8011ee0 <__pow5mult+0xa0>
 8011e64:	69f4      	ldr	r4, [r6, #28]
 8011e66:	b97c      	cbnz	r4, 8011e88 <__pow5mult+0x48>
 8011e68:	2010      	movs	r0, #16
 8011e6a:	f7fc f967 	bl	800e13c <malloc>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	61f0      	str	r0, [r6, #28]
 8011e72:	b928      	cbnz	r0, 8011e80 <__pow5mult+0x40>
 8011e74:	4b1d      	ldr	r3, [pc, #116]	; (8011eec <__pow5mult+0xac>)
 8011e76:	481e      	ldr	r0, [pc, #120]	; (8011ef0 <__pow5mult+0xb0>)
 8011e78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011e7c:	f7fe fb92 	bl	80105a4 <__assert_func>
 8011e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011e84:	6004      	str	r4, [r0, #0]
 8011e86:	60c4      	str	r4, [r0, #12]
 8011e88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011e90:	b94c      	cbnz	r4, 8011ea6 <__pow5mult+0x66>
 8011e92:	f240 2171 	movw	r1, #625	; 0x271
 8011e96:	4630      	mov	r0, r6
 8011e98:	f7ff ff12 	bl	8011cc0 <__i2b>
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	6003      	str	r3, [r0, #0]
 8011ea6:	f04f 0900 	mov.w	r9, #0
 8011eaa:	07eb      	lsls	r3, r5, #31
 8011eac:	d50a      	bpl.n	8011ec4 <__pow5mult+0x84>
 8011eae:	4639      	mov	r1, r7
 8011eb0:	4622      	mov	r2, r4
 8011eb2:	4630      	mov	r0, r6
 8011eb4:	f7ff ff1a 	bl	8011cec <__multiply>
 8011eb8:	4639      	mov	r1, r7
 8011eba:	4680      	mov	r8, r0
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	f7ff fdff 	bl	8011ac0 <_Bfree>
 8011ec2:	4647      	mov	r7, r8
 8011ec4:	106d      	asrs	r5, r5, #1
 8011ec6:	d00b      	beq.n	8011ee0 <__pow5mult+0xa0>
 8011ec8:	6820      	ldr	r0, [r4, #0]
 8011eca:	b938      	cbnz	r0, 8011edc <__pow5mult+0x9c>
 8011ecc:	4622      	mov	r2, r4
 8011ece:	4621      	mov	r1, r4
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	f7ff ff0b 	bl	8011cec <__multiply>
 8011ed6:	6020      	str	r0, [r4, #0]
 8011ed8:	f8c0 9000 	str.w	r9, [r0]
 8011edc:	4604      	mov	r4, r0
 8011ede:	e7e4      	b.n	8011eaa <__pow5mult+0x6a>
 8011ee0:	4638      	mov	r0, r7
 8011ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ee6:	bf00      	nop
 8011ee8:	080159d8 	.word	0x080159d8
 8011eec:	08015700 	.word	0x08015700
 8011ef0:	0801588b 	.word	0x0801588b

08011ef4 <__lshift>:
 8011ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ef8:	460c      	mov	r4, r1
 8011efa:	6849      	ldr	r1, [r1, #4]
 8011efc:	6923      	ldr	r3, [r4, #16]
 8011efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f02:	68a3      	ldr	r3, [r4, #8]
 8011f04:	4607      	mov	r7, r0
 8011f06:	4691      	mov	r9, r2
 8011f08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f0c:	f108 0601 	add.w	r6, r8, #1
 8011f10:	42b3      	cmp	r3, r6
 8011f12:	db0b      	blt.n	8011f2c <__lshift+0x38>
 8011f14:	4638      	mov	r0, r7
 8011f16:	f7ff fd93 	bl	8011a40 <_Balloc>
 8011f1a:	4605      	mov	r5, r0
 8011f1c:	b948      	cbnz	r0, 8011f32 <__lshift+0x3e>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	4b28      	ldr	r3, [pc, #160]	; (8011fc4 <__lshift+0xd0>)
 8011f22:	4829      	ldr	r0, [pc, #164]	; (8011fc8 <__lshift+0xd4>)
 8011f24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011f28:	f7fe fb3c 	bl	80105a4 <__assert_func>
 8011f2c:	3101      	adds	r1, #1
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	e7ee      	b.n	8011f10 <__lshift+0x1c>
 8011f32:	2300      	movs	r3, #0
 8011f34:	f100 0114 	add.w	r1, r0, #20
 8011f38:	f100 0210 	add.w	r2, r0, #16
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	4553      	cmp	r3, sl
 8011f40:	db33      	blt.n	8011faa <__lshift+0xb6>
 8011f42:	6920      	ldr	r0, [r4, #16]
 8011f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011f48:	f104 0314 	add.w	r3, r4, #20
 8011f4c:	f019 091f 	ands.w	r9, r9, #31
 8011f50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011f54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011f58:	d02b      	beq.n	8011fb2 <__lshift+0xbe>
 8011f5a:	f1c9 0e20 	rsb	lr, r9, #32
 8011f5e:	468a      	mov	sl, r1
 8011f60:	2200      	movs	r2, #0
 8011f62:	6818      	ldr	r0, [r3, #0]
 8011f64:	fa00 f009 	lsl.w	r0, r0, r9
 8011f68:	4310      	orrs	r0, r2
 8011f6a:	f84a 0b04 	str.w	r0, [sl], #4
 8011f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f72:	459c      	cmp	ip, r3
 8011f74:	fa22 f20e 	lsr.w	r2, r2, lr
 8011f78:	d8f3      	bhi.n	8011f62 <__lshift+0x6e>
 8011f7a:	ebac 0304 	sub.w	r3, ip, r4
 8011f7e:	3b15      	subs	r3, #21
 8011f80:	f023 0303 	bic.w	r3, r3, #3
 8011f84:	3304      	adds	r3, #4
 8011f86:	f104 0015 	add.w	r0, r4, #21
 8011f8a:	4584      	cmp	ip, r0
 8011f8c:	bf38      	it	cc
 8011f8e:	2304      	movcc	r3, #4
 8011f90:	50ca      	str	r2, [r1, r3]
 8011f92:	b10a      	cbz	r2, 8011f98 <__lshift+0xa4>
 8011f94:	f108 0602 	add.w	r6, r8, #2
 8011f98:	3e01      	subs	r6, #1
 8011f9a:	4638      	mov	r0, r7
 8011f9c:	612e      	str	r6, [r5, #16]
 8011f9e:	4621      	mov	r1, r4
 8011fa0:	f7ff fd8e 	bl	8011ac0 <_Bfree>
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011faa:	f842 0f04 	str.w	r0, [r2, #4]!
 8011fae:	3301      	adds	r3, #1
 8011fb0:	e7c5      	b.n	8011f3e <__lshift+0x4a>
 8011fb2:	3904      	subs	r1, #4
 8011fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011fbc:	459c      	cmp	ip, r3
 8011fbe:	d8f9      	bhi.n	8011fb4 <__lshift+0xc0>
 8011fc0:	e7ea      	b.n	8011f98 <__lshift+0xa4>
 8011fc2:	bf00      	nop
 8011fc4:	0801581a 	.word	0x0801581a
 8011fc8:	0801588b 	.word	0x0801588b

08011fcc <__mcmp>:
 8011fcc:	b530      	push	{r4, r5, lr}
 8011fce:	6902      	ldr	r2, [r0, #16]
 8011fd0:	690c      	ldr	r4, [r1, #16]
 8011fd2:	1b12      	subs	r2, r2, r4
 8011fd4:	d10e      	bne.n	8011ff4 <__mcmp+0x28>
 8011fd6:	f100 0314 	add.w	r3, r0, #20
 8011fda:	3114      	adds	r1, #20
 8011fdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011fe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011fe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011fe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011fec:	42a5      	cmp	r5, r4
 8011fee:	d003      	beq.n	8011ff8 <__mcmp+0x2c>
 8011ff0:	d305      	bcc.n	8011ffe <__mcmp+0x32>
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	bd30      	pop	{r4, r5, pc}
 8011ff8:	4283      	cmp	r3, r0
 8011ffa:	d3f3      	bcc.n	8011fe4 <__mcmp+0x18>
 8011ffc:	e7fa      	b.n	8011ff4 <__mcmp+0x28>
 8011ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8012002:	e7f7      	b.n	8011ff4 <__mcmp+0x28>

08012004 <__mdiff>:
 8012004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012008:	460c      	mov	r4, r1
 801200a:	4606      	mov	r6, r0
 801200c:	4611      	mov	r1, r2
 801200e:	4620      	mov	r0, r4
 8012010:	4690      	mov	r8, r2
 8012012:	f7ff ffdb 	bl	8011fcc <__mcmp>
 8012016:	1e05      	subs	r5, r0, #0
 8012018:	d110      	bne.n	801203c <__mdiff+0x38>
 801201a:	4629      	mov	r1, r5
 801201c:	4630      	mov	r0, r6
 801201e:	f7ff fd0f 	bl	8011a40 <_Balloc>
 8012022:	b930      	cbnz	r0, 8012032 <__mdiff+0x2e>
 8012024:	4b3a      	ldr	r3, [pc, #232]	; (8012110 <__mdiff+0x10c>)
 8012026:	4602      	mov	r2, r0
 8012028:	f240 2137 	movw	r1, #567	; 0x237
 801202c:	4839      	ldr	r0, [pc, #228]	; (8012114 <__mdiff+0x110>)
 801202e:	f7fe fab9 	bl	80105a4 <__assert_func>
 8012032:	2301      	movs	r3, #1
 8012034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801203c:	bfa4      	itt	ge
 801203e:	4643      	movge	r3, r8
 8012040:	46a0      	movge	r8, r4
 8012042:	4630      	mov	r0, r6
 8012044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012048:	bfa6      	itte	ge
 801204a:	461c      	movge	r4, r3
 801204c:	2500      	movge	r5, #0
 801204e:	2501      	movlt	r5, #1
 8012050:	f7ff fcf6 	bl	8011a40 <_Balloc>
 8012054:	b920      	cbnz	r0, 8012060 <__mdiff+0x5c>
 8012056:	4b2e      	ldr	r3, [pc, #184]	; (8012110 <__mdiff+0x10c>)
 8012058:	4602      	mov	r2, r0
 801205a:	f240 2145 	movw	r1, #581	; 0x245
 801205e:	e7e5      	b.n	801202c <__mdiff+0x28>
 8012060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012064:	6926      	ldr	r6, [r4, #16]
 8012066:	60c5      	str	r5, [r0, #12]
 8012068:	f104 0914 	add.w	r9, r4, #20
 801206c:	f108 0514 	add.w	r5, r8, #20
 8012070:	f100 0e14 	add.w	lr, r0, #20
 8012074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801207c:	f108 0210 	add.w	r2, r8, #16
 8012080:	46f2      	mov	sl, lr
 8012082:	2100      	movs	r1, #0
 8012084:	f859 3b04 	ldr.w	r3, [r9], #4
 8012088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801208c:	fa11 f88b 	uxtah	r8, r1, fp
 8012090:	b299      	uxth	r1, r3
 8012092:	0c1b      	lsrs	r3, r3, #16
 8012094:	eba8 0801 	sub.w	r8, r8, r1
 8012098:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801209c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80120a0:	fa1f f888 	uxth.w	r8, r8
 80120a4:	1419      	asrs	r1, r3, #16
 80120a6:	454e      	cmp	r6, r9
 80120a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80120ac:	f84a 3b04 	str.w	r3, [sl], #4
 80120b0:	d8e8      	bhi.n	8012084 <__mdiff+0x80>
 80120b2:	1b33      	subs	r3, r6, r4
 80120b4:	3b15      	subs	r3, #21
 80120b6:	f023 0303 	bic.w	r3, r3, #3
 80120ba:	3304      	adds	r3, #4
 80120bc:	3415      	adds	r4, #21
 80120be:	42a6      	cmp	r6, r4
 80120c0:	bf38      	it	cc
 80120c2:	2304      	movcc	r3, #4
 80120c4:	441d      	add	r5, r3
 80120c6:	4473      	add	r3, lr
 80120c8:	469e      	mov	lr, r3
 80120ca:	462e      	mov	r6, r5
 80120cc:	4566      	cmp	r6, ip
 80120ce:	d30e      	bcc.n	80120ee <__mdiff+0xea>
 80120d0:	f10c 0203 	add.w	r2, ip, #3
 80120d4:	1b52      	subs	r2, r2, r5
 80120d6:	f022 0203 	bic.w	r2, r2, #3
 80120da:	3d03      	subs	r5, #3
 80120dc:	45ac      	cmp	ip, r5
 80120de:	bf38      	it	cc
 80120e0:	2200      	movcc	r2, #0
 80120e2:	4413      	add	r3, r2
 80120e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80120e8:	b17a      	cbz	r2, 801210a <__mdiff+0x106>
 80120ea:	6107      	str	r7, [r0, #16]
 80120ec:	e7a4      	b.n	8012038 <__mdiff+0x34>
 80120ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80120f2:	fa11 f288 	uxtah	r2, r1, r8
 80120f6:	1414      	asrs	r4, r2, #16
 80120f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80120fc:	b292      	uxth	r2, r2
 80120fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012102:	f84e 2b04 	str.w	r2, [lr], #4
 8012106:	1421      	asrs	r1, r4, #16
 8012108:	e7e0      	b.n	80120cc <__mdiff+0xc8>
 801210a:	3f01      	subs	r7, #1
 801210c:	e7ea      	b.n	80120e4 <__mdiff+0xe0>
 801210e:	bf00      	nop
 8012110:	0801581a 	.word	0x0801581a
 8012114:	0801588b 	.word	0x0801588b

08012118 <__ulp>:
 8012118:	b082      	sub	sp, #8
 801211a:	ed8d 0b00 	vstr	d0, [sp]
 801211e:	9a01      	ldr	r2, [sp, #4]
 8012120:	4b0f      	ldr	r3, [pc, #60]	; (8012160 <__ulp+0x48>)
 8012122:	4013      	ands	r3, r2
 8012124:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012128:	2b00      	cmp	r3, #0
 801212a:	dc08      	bgt.n	801213e <__ulp+0x26>
 801212c:	425b      	negs	r3, r3
 801212e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012132:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012136:	da04      	bge.n	8012142 <__ulp+0x2a>
 8012138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801213c:	4113      	asrs	r3, r2
 801213e:	2200      	movs	r2, #0
 8012140:	e008      	b.n	8012154 <__ulp+0x3c>
 8012142:	f1a2 0314 	sub.w	r3, r2, #20
 8012146:	2b1e      	cmp	r3, #30
 8012148:	bfda      	itte	le
 801214a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801214e:	40da      	lsrle	r2, r3
 8012150:	2201      	movgt	r2, #1
 8012152:	2300      	movs	r3, #0
 8012154:	4619      	mov	r1, r3
 8012156:	4610      	mov	r0, r2
 8012158:	ec41 0b10 	vmov	d0, r0, r1
 801215c:	b002      	add	sp, #8
 801215e:	4770      	bx	lr
 8012160:	7ff00000 	.word	0x7ff00000

08012164 <__b2d>:
 8012164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012168:	6906      	ldr	r6, [r0, #16]
 801216a:	f100 0814 	add.w	r8, r0, #20
 801216e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012172:	1f37      	subs	r7, r6, #4
 8012174:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012178:	4610      	mov	r0, r2
 801217a:	f7ff fd53 	bl	8011c24 <__hi0bits>
 801217e:	f1c0 0320 	rsb	r3, r0, #32
 8012182:	280a      	cmp	r0, #10
 8012184:	600b      	str	r3, [r1, #0]
 8012186:	491b      	ldr	r1, [pc, #108]	; (80121f4 <__b2d+0x90>)
 8012188:	dc15      	bgt.n	80121b6 <__b2d+0x52>
 801218a:	f1c0 0c0b 	rsb	ip, r0, #11
 801218e:	fa22 f30c 	lsr.w	r3, r2, ip
 8012192:	45b8      	cmp	r8, r7
 8012194:	ea43 0501 	orr.w	r5, r3, r1
 8012198:	bf34      	ite	cc
 801219a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801219e:	2300      	movcs	r3, #0
 80121a0:	3015      	adds	r0, #21
 80121a2:	fa02 f000 	lsl.w	r0, r2, r0
 80121a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80121aa:	4303      	orrs	r3, r0
 80121ac:	461c      	mov	r4, r3
 80121ae:	ec45 4b10 	vmov	d0, r4, r5
 80121b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b6:	45b8      	cmp	r8, r7
 80121b8:	bf3a      	itte	cc
 80121ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80121be:	f1a6 0708 	subcc.w	r7, r6, #8
 80121c2:	2300      	movcs	r3, #0
 80121c4:	380b      	subs	r0, #11
 80121c6:	d012      	beq.n	80121ee <__b2d+0x8a>
 80121c8:	f1c0 0120 	rsb	r1, r0, #32
 80121cc:	fa23 f401 	lsr.w	r4, r3, r1
 80121d0:	4082      	lsls	r2, r0
 80121d2:	4322      	orrs	r2, r4
 80121d4:	4547      	cmp	r7, r8
 80121d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80121da:	bf8c      	ite	hi
 80121dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80121e0:	2200      	movls	r2, #0
 80121e2:	4083      	lsls	r3, r0
 80121e4:	40ca      	lsrs	r2, r1
 80121e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80121ea:	4313      	orrs	r3, r2
 80121ec:	e7de      	b.n	80121ac <__b2d+0x48>
 80121ee:	ea42 0501 	orr.w	r5, r2, r1
 80121f2:	e7db      	b.n	80121ac <__b2d+0x48>
 80121f4:	3ff00000 	.word	0x3ff00000

080121f8 <__d2b>:
 80121f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80121fc:	460f      	mov	r7, r1
 80121fe:	2101      	movs	r1, #1
 8012200:	ec59 8b10 	vmov	r8, r9, d0
 8012204:	4616      	mov	r6, r2
 8012206:	f7ff fc1b 	bl	8011a40 <_Balloc>
 801220a:	4604      	mov	r4, r0
 801220c:	b930      	cbnz	r0, 801221c <__d2b+0x24>
 801220e:	4602      	mov	r2, r0
 8012210:	4b24      	ldr	r3, [pc, #144]	; (80122a4 <__d2b+0xac>)
 8012212:	4825      	ldr	r0, [pc, #148]	; (80122a8 <__d2b+0xb0>)
 8012214:	f240 310f 	movw	r1, #783	; 0x30f
 8012218:	f7fe f9c4 	bl	80105a4 <__assert_func>
 801221c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012224:	bb2d      	cbnz	r5, 8012272 <__d2b+0x7a>
 8012226:	9301      	str	r3, [sp, #4]
 8012228:	f1b8 0300 	subs.w	r3, r8, #0
 801222c:	d026      	beq.n	801227c <__d2b+0x84>
 801222e:	4668      	mov	r0, sp
 8012230:	9300      	str	r3, [sp, #0]
 8012232:	f7ff fd17 	bl	8011c64 <__lo0bits>
 8012236:	e9dd 1200 	ldrd	r1, r2, [sp]
 801223a:	b1e8      	cbz	r0, 8012278 <__d2b+0x80>
 801223c:	f1c0 0320 	rsb	r3, r0, #32
 8012240:	fa02 f303 	lsl.w	r3, r2, r3
 8012244:	430b      	orrs	r3, r1
 8012246:	40c2      	lsrs	r2, r0
 8012248:	6163      	str	r3, [r4, #20]
 801224a:	9201      	str	r2, [sp, #4]
 801224c:	9b01      	ldr	r3, [sp, #4]
 801224e:	61a3      	str	r3, [r4, #24]
 8012250:	2b00      	cmp	r3, #0
 8012252:	bf14      	ite	ne
 8012254:	2202      	movne	r2, #2
 8012256:	2201      	moveq	r2, #1
 8012258:	6122      	str	r2, [r4, #16]
 801225a:	b1bd      	cbz	r5, 801228c <__d2b+0x94>
 801225c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012260:	4405      	add	r5, r0
 8012262:	603d      	str	r5, [r7, #0]
 8012264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012268:	6030      	str	r0, [r6, #0]
 801226a:	4620      	mov	r0, r4
 801226c:	b003      	add	sp, #12
 801226e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012276:	e7d6      	b.n	8012226 <__d2b+0x2e>
 8012278:	6161      	str	r1, [r4, #20]
 801227a:	e7e7      	b.n	801224c <__d2b+0x54>
 801227c:	a801      	add	r0, sp, #4
 801227e:	f7ff fcf1 	bl	8011c64 <__lo0bits>
 8012282:	9b01      	ldr	r3, [sp, #4]
 8012284:	6163      	str	r3, [r4, #20]
 8012286:	3020      	adds	r0, #32
 8012288:	2201      	movs	r2, #1
 801228a:	e7e5      	b.n	8012258 <__d2b+0x60>
 801228c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012294:	6038      	str	r0, [r7, #0]
 8012296:	6918      	ldr	r0, [r3, #16]
 8012298:	f7ff fcc4 	bl	8011c24 <__hi0bits>
 801229c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80122a0:	e7e2      	b.n	8012268 <__d2b+0x70>
 80122a2:	bf00      	nop
 80122a4:	0801581a 	.word	0x0801581a
 80122a8:	0801588b 	.word	0x0801588b

080122ac <__ratio>:
 80122ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b0:	4688      	mov	r8, r1
 80122b2:	4669      	mov	r1, sp
 80122b4:	4681      	mov	r9, r0
 80122b6:	f7ff ff55 	bl	8012164 <__b2d>
 80122ba:	a901      	add	r1, sp, #4
 80122bc:	4640      	mov	r0, r8
 80122be:	ec55 4b10 	vmov	r4, r5, d0
 80122c2:	f7ff ff4f 	bl	8012164 <__b2d>
 80122c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80122ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80122ce:	eba3 0c02 	sub.w	ip, r3, r2
 80122d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80122d6:	1a9b      	subs	r3, r3, r2
 80122d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80122dc:	ec51 0b10 	vmov	r0, r1, d0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	bfd6      	itet	le
 80122e4:	460a      	movle	r2, r1
 80122e6:	462a      	movgt	r2, r5
 80122e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80122ec:	468b      	mov	fp, r1
 80122ee:	462f      	mov	r7, r5
 80122f0:	bfd4      	ite	le
 80122f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80122f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80122fa:	4620      	mov	r0, r4
 80122fc:	ee10 2a10 	vmov	r2, s0
 8012300:	465b      	mov	r3, fp
 8012302:	4639      	mov	r1, r7
 8012304:	f7ee fab2 	bl	800086c <__aeabi_ddiv>
 8012308:	ec41 0b10 	vmov	d0, r0, r1
 801230c:	b003      	add	sp, #12
 801230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012312 <__copybits>:
 8012312:	3901      	subs	r1, #1
 8012314:	b570      	push	{r4, r5, r6, lr}
 8012316:	1149      	asrs	r1, r1, #5
 8012318:	6914      	ldr	r4, [r2, #16]
 801231a:	3101      	adds	r1, #1
 801231c:	f102 0314 	add.w	r3, r2, #20
 8012320:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012324:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012328:	1f05      	subs	r5, r0, #4
 801232a:	42a3      	cmp	r3, r4
 801232c:	d30c      	bcc.n	8012348 <__copybits+0x36>
 801232e:	1aa3      	subs	r3, r4, r2
 8012330:	3b11      	subs	r3, #17
 8012332:	f023 0303 	bic.w	r3, r3, #3
 8012336:	3211      	adds	r2, #17
 8012338:	42a2      	cmp	r2, r4
 801233a:	bf88      	it	hi
 801233c:	2300      	movhi	r3, #0
 801233e:	4418      	add	r0, r3
 8012340:	2300      	movs	r3, #0
 8012342:	4288      	cmp	r0, r1
 8012344:	d305      	bcc.n	8012352 <__copybits+0x40>
 8012346:	bd70      	pop	{r4, r5, r6, pc}
 8012348:	f853 6b04 	ldr.w	r6, [r3], #4
 801234c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012350:	e7eb      	b.n	801232a <__copybits+0x18>
 8012352:	f840 3b04 	str.w	r3, [r0], #4
 8012356:	e7f4      	b.n	8012342 <__copybits+0x30>

08012358 <__any_on>:
 8012358:	f100 0214 	add.w	r2, r0, #20
 801235c:	6900      	ldr	r0, [r0, #16]
 801235e:	114b      	asrs	r3, r1, #5
 8012360:	4298      	cmp	r0, r3
 8012362:	b510      	push	{r4, lr}
 8012364:	db11      	blt.n	801238a <__any_on+0x32>
 8012366:	dd0a      	ble.n	801237e <__any_on+0x26>
 8012368:	f011 011f 	ands.w	r1, r1, #31
 801236c:	d007      	beq.n	801237e <__any_on+0x26>
 801236e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012372:	fa24 f001 	lsr.w	r0, r4, r1
 8012376:	fa00 f101 	lsl.w	r1, r0, r1
 801237a:	428c      	cmp	r4, r1
 801237c:	d10b      	bne.n	8012396 <__any_on+0x3e>
 801237e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012382:	4293      	cmp	r3, r2
 8012384:	d803      	bhi.n	801238e <__any_on+0x36>
 8012386:	2000      	movs	r0, #0
 8012388:	bd10      	pop	{r4, pc}
 801238a:	4603      	mov	r3, r0
 801238c:	e7f7      	b.n	801237e <__any_on+0x26>
 801238e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012392:	2900      	cmp	r1, #0
 8012394:	d0f5      	beq.n	8012382 <__any_on+0x2a>
 8012396:	2001      	movs	r0, #1
 8012398:	e7f6      	b.n	8012388 <__any_on+0x30>

0801239a <__ascii_wctomb>:
 801239a:	b149      	cbz	r1, 80123b0 <__ascii_wctomb+0x16>
 801239c:	2aff      	cmp	r2, #255	; 0xff
 801239e:	bf85      	ittet	hi
 80123a0:	238a      	movhi	r3, #138	; 0x8a
 80123a2:	6003      	strhi	r3, [r0, #0]
 80123a4:	700a      	strbls	r2, [r1, #0]
 80123a6:	f04f 30ff 	movhi.w	r0, #4294967295
 80123aa:	bf98      	it	ls
 80123ac:	2001      	movls	r0, #1
 80123ae:	4770      	bx	lr
 80123b0:	4608      	mov	r0, r1
 80123b2:	4770      	bx	lr

080123b4 <__ssputs_r>:
 80123b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123b8:	688e      	ldr	r6, [r1, #8]
 80123ba:	461f      	mov	r7, r3
 80123bc:	42be      	cmp	r6, r7
 80123be:	680b      	ldr	r3, [r1, #0]
 80123c0:	4682      	mov	sl, r0
 80123c2:	460c      	mov	r4, r1
 80123c4:	4690      	mov	r8, r2
 80123c6:	d82c      	bhi.n	8012422 <__ssputs_r+0x6e>
 80123c8:	898a      	ldrh	r2, [r1, #12]
 80123ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80123ce:	d026      	beq.n	801241e <__ssputs_r+0x6a>
 80123d0:	6965      	ldr	r5, [r4, #20]
 80123d2:	6909      	ldr	r1, [r1, #16]
 80123d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80123d8:	eba3 0901 	sub.w	r9, r3, r1
 80123dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80123e0:	1c7b      	adds	r3, r7, #1
 80123e2:	444b      	add	r3, r9
 80123e4:	106d      	asrs	r5, r5, #1
 80123e6:	429d      	cmp	r5, r3
 80123e8:	bf38      	it	cc
 80123ea:	461d      	movcc	r5, r3
 80123ec:	0553      	lsls	r3, r2, #21
 80123ee:	d527      	bpl.n	8012440 <__ssputs_r+0x8c>
 80123f0:	4629      	mov	r1, r5
 80123f2:	f7fb fecb 	bl	800e18c <_malloc_r>
 80123f6:	4606      	mov	r6, r0
 80123f8:	b360      	cbz	r0, 8012454 <__ssputs_r+0xa0>
 80123fa:	6921      	ldr	r1, [r4, #16]
 80123fc:	464a      	mov	r2, r9
 80123fe:	f7fe f8b3 	bl	8010568 <memcpy>
 8012402:	89a3      	ldrh	r3, [r4, #12]
 8012404:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801240c:	81a3      	strh	r3, [r4, #12]
 801240e:	6126      	str	r6, [r4, #16]
 8012410:	6165      	str	r5, [r4, #20]
 8012412:	444e      	add	r6, r9
 8012414:	eba5 0509 	sub.w	r5, r5, r9
 8012418:	6026      	str	r6, [r4, #0]
 801241a:	60a5      	str	r5, [r4, #8]
 801241c:	463e      	mov	r6, r7
 801241e:	42be      	cmp	r6, r7
 8012420:	d900      	bls.n	8012424 <__ssputs_r+0x70>
 8012422:	463e      	mov	r6, r7
 8012424:	6820      	ldr	r0, [r4, #0]
 8012426:	4632      	mov	r2, r6
 8012428:	4641      	mov	r1, r8
 801242a:	f000 ff14 	bl	8013256 <memmove>
 801242e:	68a3      	ldr	r3, [r4, #8]
 8012430:	1b9b      	subs	r3, r3, r6
 8012432:	60a3      	str	r3, [r4, #8]
 8012434:	6823      	ldr	r3, [r4, #0]
 8012436:	4433      	add	r3, r6
 8012438:	6023      	str	r3, [r4, #0]
 801243a:	2000      	movs	r0, #0
 801243c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012440:	462a      	mov	r2, r5
 8012442:	f000 ff62 	bl	801330a <_realloc_r>
 8012446:	4606      	mov	r6, r0
 8012448:	2800      	cmp	r0, #0
 801244a:	d1e0      	bne.n	801240e <__ssputs_r+0x5a>
 801244c:	6921      	ldr	r1, [r4, #16]
 801244e:	4650      	mov	r0, sl
 8012450:	f7fe ff40 	bl	80112d4 <_free_r>
 8012454:	230c      	movs	r3, #12
 8012456:	f8ca 3000 	str.w	r3, [sl]
 801245a:	89a3      	ldrh	r3, [r4, #12]
 801245c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012460:	81a3      	strh	r3, [r4, #12]
 8012462:	f04f 30ff 	mov.w	r0, #4294967295
 8012466:	e7e9      	b.n	801243c <__ssputs_r+0x88>

08012468 <_svfiprintf_r>:
 8012468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246c:	4698      	mov	r8, r3
 801246e:	898b      	ldrh	r3, [r1, #12]
 8012470:	061b      	lsls	r3, r3, #24
 8012472:	b09d      	sub	sp, #116	; 0x74
 8012474:	4607      	mov	r7, r0
 8012476:	460d      	mov	r5, r1
 8012478:	4614      	mov	r4, r2
 801247a:	d50e      	bpl.n	801249a <_svfiprintf_r+0x32>
 801247c:	690b      	ldr	r3, [r1, #16]
 801247e:	b963      	cbnz	r3, 801249a <_svfiprintf_r+0x32>
 8012480:	2140      	movs	r1, #64	; 0x40
 8012482:	f7fb fe83 	bl	800e18c <_malloc_r>
 8012486:	6028      	str	r0, [r5, #0]
 8012488:	6128      	str	r0, [r5, #16]
 801248a:	b920      	cbnz	r0, 8012496 <_svfiprintf_r+0x2e>
 801248c:	230c      	movs	r3, #12
 801248e:	603b      	str	r3, [r7, #0]
 8012490:	f04f 30ff 	mov.w	r0, #4294967295
 8012494:	e0d0      	b.n	8012638 <_svfiprintf_r+0x1d0>
 8012496:	2340      	movs	r3, #64	; 0x40
 8012498:	616b      	str	r3, [r5, #20]
 801249a:	2300      	movs	r3, #0
 801249c:	9309      	str	r3, [sp, #36]	; 0x24
 801249e:	2320      	movs	r3, #32
 80124a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80124a8:	2330      	movs	r3, #48	; 0x30
 80124aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012650 <_svfiprintf_r+0x1e8>
 80124ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124b2:	f04f 0901 	mov.w	r9, #1
 80124b6:	4623      	mov	r3, r4
 80124b8:	469a      	mov	sl, r3
 80124ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124be:	b10a      	cbz	r2, 80124c4 <_svfiprintf_r+0x5c>
 80124c0:	2a25      	cmp	r2, #37	; 0x25
 80124c2:	d1f9      	bne.n	80124b8 <_svfiprintf_r+0x50>
 80124c4:	ebba 0b04 	subs.w	fp, sl, r4
 80124c8:	d00b      	beq.n	80124e2 <_svfiprintf_r+0x7a>
 80124ca:	465b      	mov	r3, fp
 80124cc:	4622      	mov	r2, r4
 80124ce:	4629      	mov	r1, r5
 80124d0:	4638      	mov	r0, r7
 80124d2:	f7ff ff6f 	bl	80123b4 <__ssputs_r>
 80124d6:	3001      	adds	r0, #1
 80124d8:	f000 80a9 	beq.w	801262e <_svfiprintf_r+0x1c6>
 80124dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124de:	445a      	add	r2, fp
 80124e0:	9209      	str	r2, [sp, #36]	; 0x24
 80124e2:	f89a 3000 	ldrb.w	r3, [sl]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	f000 80a1 	beq.w	801262e <_svfiprintf_r+0x1c6>
 80124ec:	2300      	movs	r3, #0
 80124ee:	f04f 32ff 	mov.w	r2, #4294967295
 80124f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124f6:	f10a 0a01 	add.w	sl, sl, #1
 80124fa:	9304      	str	r3, [sp, #16]
 80124fc:	9307      	str	r3, [sp, #28]
 80124fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012502:	931a      	str	r3, [sp, #104]	; 0x68
 8012504:	4654      	mov	r4, sl
 8012506:	2205      	movs	r2, #5
 8012508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801250c:	4850      	ldr	r0, [pc, #320]	; (8012650 <_svfiprintf_r+0x1e8>)
 801250e:	f7ed fe6f 	bl	80001f0 <memchr>
 8012512:	9a04      	ldr	r2, [sp, #16]
 8012514:	b9d8      	cbnz	r0, 801254e <_svfiprintf_r+0xe6>
 8012516:	06d0      	lsls	r0, r2, #27
 8012518:	bf44      	itt	mi
 801251a:	2320      	movmi	r3, #32
 801251c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012520:	0711      	lsls	r1, r2, #28
 8012522:	bf44      	itt	mi
 8012524:	232b      	movmi	r3, #43	; 0x2b
 8012526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801252a:	f89a 3000 	ldrb.w	r3, [sl]
 801252e:	2b2a      	cmp	r3, #42	; 0x2a
 8012530:	d015      	beq.n	801255e <_svfiprintf_r+0xf6>
 8012532:	9a07      	ldr	r2, [sp, #28]
 8012534:	4654      	mov	r4, sl
 8012536:	2000      	movs	r0, #0
 8012538:	f04f 0c0a 	mov.w	ip, #10
 801253c:	4621      	mov	r1, r4
 801253e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012542:	3b30      	subs	r3, #48	; 0x30
 8012544:	2b09      	cmp	r3, #9
 8012546:	d94d      	bls.n	80125e4 <_svfiprintf_r+0x17c>
 8012548:	b1b0      	cbz	r0, 8012578 <_svfiprintf_r+0x110>
 801254a:	9207      	str	r2, [sp, #28]
 801254c:	e014      	b.n	8012578 <_svfiprintf_r+0x110>
 801254e:	eba0 0308 	sub.w	r3, r0, r8
 8012552:	fa09 f303 	lsl.w	r3, r9, r3
 8012556:	4313      	orrs	r3, r2
 8012558:	9304      	str	r3, [sp, #16]
 801255a:	46a2      	mov	sl, r4
 801255c:	e7d2      	b.n	8012504 <_svfiprintf_r+0x9c>
 801255e:	9b03      	ldr	r3, [sp, #12]
 8012560:	1d19      	adds	r1, r3, #4
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	9103      	str	r1, [sp, #12]
 8012566:	2b00      	cmp	r3, #0
 8012568:	bfbb      	ittet	lt
 801256a:	425b      	neglt	r3, r3
 801256c:	f042 0202 	orrlt.w	r2, r2, #2
 8012570:	9307      	strge	r3, [sp, #28]
 8012572:	9307      	strlt	r3, [sp, #28]
 8012574:	bfb8      	it	lt
 8012576:	9204      	strlt	r2, [sp, #16]
 8012578:	7823      	ldrb	r3, [r4, #0]
 801257a:	2b2e      	cmp	r3, #46	; 0x2e
 801257c:	d10c      	bne.n	8012598 <_svfiprintf_r+0x130>
 801257e:	7863      	ldrb	r3, [r4, #1]
 8012580:	2b2a      	cmp	r3, #42	; 0x2a
 8012582:	d134      	bne.n	80125ee <_svfiprintf_r+0x186>
 8012584:	9b03      	ldr	r3, [sp, #12]
 8012586:	1d1a      	adds	r2, r3, #4
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	9203      	str	r2, [sp, #12]
 801258c:	2b00      	cmp	r3, #0
 801258e:	bfb8      	it	lt
 8012590:	f04f 33ff 	movlt.w	r3, #4294967295
 8012594:	3402      	adds	r4, #2
 8012596:	9305      	str	r3, [sp, #20]
 8012598:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012660 <_svfiprintf_r+0x1f8>
 801259c:	7821      	ldrb	r1, [r4, #0]
 801259e:	2203      	movs	r2, #3
 80125a0:	4650      	mov	r0, sl
 80125a2:	f7ed fe25 	bl	80001f0 <memchr>
 80125a6:	b138      	cbz	r0, 80125b8 <_svfiprintf_r+0x150>
 80125a8:	9b04      	ldr	r3, [sp, #16]
 80125aa:	eba0 000a 	sub.w	r0, r0, sl
 80125ae:	2240      	movs	r2, #64	; 0x40
 80125b0:	4082      	lsls	r2, r0
 80125b2:	4313      	orrs	r3, r2
 80125b4:	3401      	adds	r4, #1
 80125b6:	9304      	str	r3, [sp, #16]
 80125b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125bc:	4825      	ldr	r0, [pc, #148]	; (8012654 <_svfiprintf_r+0x1ec>)
 80125be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125c2:	2206      	movs	r2, #6
 80125c4:	f7ed fe14 	bl	80001f0 <memchr>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	d038      	beq.n	801263e <_svfiprintf_r+0x1d6>
 80125cc:	4b22      	ldr	r3, [pc, #136]	; (8012658 <_svfiprintf_r+0x1f0>)
 80125ce:	bb1b      	cbnz	r3, 8012618 <_svfiprintf_r+0x1b0>
 80125d0:	9b03      	ldr	r3, [sp, #12]
 80125d2:	3307      	adds	r3, #7
 80125d4:	f023 0307 	bic.w	r3, r3, #7
 80125d8:	3308      	adds	r3, #8
 80125da:	9303      	str	r3, [sp, #12]
 80125dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125de:	4433      	add	r3, r6
 80125e0:	9309      	str	r3, [sp, #36]	; 0x24
 80125e2:	e768      	b.n	80124b6 <_svfiprintf_r+0x4e>
 80125e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80125e8:	460c      	mov	r4, r1
 80125ea:	2001      	movs	r0, #1
 80125ec:	e7a6      	b.n	801253c <_svfiprintf_r+0xd4>
 80125ee:	2300      	movs	r3, #0
 80125f0:	3401      	adds	r4, #1
 80125f2:	9305      	str	r3, [sp, #20]
 80125f4:	4619      	mov	r1, r3
 80125f6:	f04f 0c0a 	mov.w	ip, #10
 80125fa:	4620      	mov	r0, r4
 80125fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012600:	3a30      	subs	r2, #48	; 0x30
 8012602:	2a09      	cmp	r2, #9
 8012604:	d903      	bls.n	801260e <_svfiprintf_r+0x1a6>
 8012606:	2b00      	cmp	r3, #0
 8012608:	d0c6      	beq.n	8012598 <_svfiprintf_r+0x130>
 801260a:	9105      	str	r1, [sp, #20]
 801260c:	e7c4      	b.n	8012598 <_svfiprintf_r+0x130>
 801260e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012612:	4604      	mov	r4, r0
 8012614:	2301      	movs	r3, #1
 8012616:	e7f0      	b.n	80125fa <_svfiprintf_r+0x192>
 8012618:	ab03      	add	r3, sp, #12
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	462a      	mov	r2, r5
 801261e:	4b0f      	ldr	r3, [pc, #60]	; (801265c <_svfiprintf_r+0x1f4>)
 8012620:	a904      	add	r1, sp, #16
 8012622:	4638      	mov	r0, r7
 8012624:	f7fc fde6 	bl	800f1f4 <_printf_float>
 8012628:	1c42      	adds	r2, r0, #1
 801262a:	4606      	mov	r6, r0
 801262c:	d1d6      	bne.n	80125dc <_svfiprintf_r+0x174>
 801262e:	89ab      	ldrh	r3, [r5, #12]
 8012630:	065b      	lsls	r3, r3, #25
 8012632:	f53f af2d 	bmi.w	8012490 <_svfiprintf_r+0x28>
 8012636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012638:	b01d      	add	sp, #116	; 0x74
 801263a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801263e:	ab03      	add	r3, sp, #12
 8012640:	9300      	str	r3, [sp, #0]
 8012642:	462a      	mov	r2, r5
 8012644:	4b05      	ldr	r3, [pc, #20]	; (801265c <_svfiprintf_r+0x1f4>)
 8012646:	a904      	add	r1, sp, #16
 8012648:	4638      	mov	r0, r7
 801264a:	f7fd f877 	bl	800f73c <_printf_i>
 801264e:	e7eb      	b.n	8012628 <_svfiprintf_r+0x1c0>
 8012650:	080159e4 	.word	0x080159e4
 8012654:	080159ee 	.word	0x080159ee
 8012658:	0800f1f5 	.word	0x0800f1f5
 801265c:	080123b5 	.word	0x080123b5
 8012660:	080159ea 	.word	0x080159ea

08012664 <_sungetc_r>:
 8012664:	b538      	push	{r3, r4, r5, lr}
 8012666:	1c4b      	adds	r3, r1, #1
 8012668:	4614      	mov	r4, r2
 801266a:	d103      	bne.n	8012674 <_sungetc_r+0x10>
 801266c:	f04f 35ff 	mov.w	r5, #4294967295
 8012670:	4628      	mov	r0, r5
 8012672:	bd38      	pop	{r3, r4, r5, pc}
 8012674:	8993      	ldrh	r3, [r2, #12]
 8012676:	f023 0320 	bic.w	r3, r3, #32
 801267a:	8193      	strh	r3, [r2, #12]
 801267c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801267e:	6852      	ldr	r2, [r2, #4]
 8012680:	b2cd      	uxtb	r5, r1
 8012682:	b18b      	cbz	r3, 80126a8 <_sungetc_r+0x44>
 8012684:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012686:	4293      	cmp	r3, r2
 8012688:	dd08      	ble.n	801269c <_sungetc_r+0x38>
 801268a:	6823      	ldr	r3, [r4, #0]
 801268c:	1e5a      	subs	r2, r3, #1
 801268e:	6022      	str	r2, [r4, #0]
 8012690:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012694:	6863      	ldr	r3, [r4, #4]
 8012696:	3301      	adds	r3, #1
 8012698:	6063      	str	r3, [r4, #4]
 801269a:	e7e9      	b.n	8012670 <_sungetc_r+0xc>
 801269c:	4621      	mov	r1, r4
 801269e:	f000 fda0 	bl	80131e2 <__submore>
 80126a2:	2800      	cmp	r0, #0
 80126a4:	d0f1      	beq.n	801268a <_sungetc_r+0x26>
 80126a6:	e7e1      	b.n	801266c <_sungetc_r+0x8>
 80126a8:	6921      	ldr	r1, [r4, #16]
 80126aa:	6823      	ldr	r3, [r4, #0]
 80126ac:	b151      	cbz	r1, 80126c4 <_sungetc_r+0x60>
 80126ae:	4299      	cmp	r1, r3
 80126b0:	d208      	bcs.n	80126c4 <_sungetc_r+0x60>
 80126b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80126b6:	42a9      	cmp	r1, r5
 80126b8:	d104      	bne.n	80126c4 <_sungetc_r+0x60>
 80126ba:	3b01      	subs	r3, #1
 80126bc:	3201      	adds	r2, #1
 80126be:	6023      	str	r3, [r4, #0]
 80126c0:	6062      	str	r2, [r4, #4]
 80126c2:	e7d5      	b.n	8012670 <_sungetc_r+0xc>
 80126c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80126c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126cc:	6363      	str	r3, [r4, #52]	; 0x34
 80126ce:	2303      	movs	r3, #3
 80126d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80126d2:	4623      	mov	r3, r4
 80126d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80126d8:	6023      	str	r3, [r4, #0]
 80126da:	2301      	movs	r3, #1
 80126dc:	e7dc      	b.n	8012698 <_sungetc_r+0x34>

080126de <__ssrefill_r>:
 80126de:	b510      	push	{r4, lr}
 80126e0:	460c      	mov	r4, r1
 80126e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80126e4:	b169      	cbz	r1, 8012702 <__ssrefill_r+0x24>
 80126e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126ea:	4299      	cmp	r1, r3
 80126ec:	d001      	beq.n	80126f2 <__ssrefill_r+0x14>
 80126ee:	f7fe fdf1 	bl	80112d4 <_free_r>
 80126f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80126f4:	6063      	str	r3, [r4, #4]
 80126f6:	2000      	movs	r0, #0
 80126f8:	6360      	str	r0, [r4, #52]	; 0x34
 80126fa:	b113      	cbz	r3, 8012702 <__ssrefill_r+0x24>
 80126fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80126fe:	6023      	str	r3, [r4, #0]
 8012700:	bd10      	pop	{r4, pc}
 8012702:	6923      	ldr	r3, [r4, #16]
 8012704:	6023      	str	r3, [r4, #0]
 8012706:	2300      	movs	r3, #0
 8012708:	6063      	str	r3, [r4, #4]
 801270a:	89a3      	ldrh	r3, [r4, #12]
 801270c:	f043 0320 	orr.w	r3, r3, #32
 8012710:	81a3      	strh	r3, [r4, #12]
 8012712:	f04f 30ff 	mov.w	r0, #4294967295
 8012716:	e7f3      	b.n	8012700 <__ssrefill_r+0x22>

08012718 <__ssvfiscanf_r>:
 8012718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801271c:	460c      	mov	r4, r1
 801271e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012722:	2100      	movs	r1, #0
 8012724:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012728:	49a6      	ldr	r1, [pc, #664]	; (80129c4 <__ssvfiscanf_r+0x2ac>)
 801272a:	91a0      	str	r1, [sp, #640]	; 0x280
 801272c:	f10d 0804 	add.w	r8, sp, #4
 8012730:	49a5      	ldr	r1, [pc, #660]	; (80129c8 <__ssvfiscanf_r+0x2b0>)
 8012732:	4fa6      	ldr	r7, [pc, #664]	; (80129cc <__ssvfiscanf_r+0x2b4>)
 8012734:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80129d0 <__ssvfiscanf_r+0x2b8>
 8012738:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801273c:	4606      	mov	r6, r0
 801273e:	91a1      	str	r1, [sp, #644]	; 0x284
 8012740:	9300      	str	r3, [sp, #0]
 8012742:	7813      	ldrb	r3, [r2, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	f000 815a 	beq.w	80129fe <__ssvfiscanf_r+0x2e6>
 801274a:	5cf9      	ldrb	r1, [r7, r3]
 801274c:	f011 0108 	ands.w	r1, r1, #8
 8012750:	f102 0501 	add.w	r5, r2, #1
 8012754:	d019      	beq.n	801278a <__ssvfiscanf_r+0x72>
 8012756:	6863      	ldr	r3, [r4, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	dd0f      	ble.n	801277c <__ssvfiscanf_r+0x64>
 801275c:	6823      	ldr	r3, [r4, #0]
 801275e:	781a      	ldrb	r2, [r3, #0]
 8012760:	5cba      	ldrb	r2, [r7, r2]
 8012762:	0712      	lsls	r2, r2, #28
 8012764:	d401      	bmi.n	801276a <__ssvfiscanf_r+0x52>
 8012766:	462a      	mov	r2, r5
 8012768:	e7eb      	b.n	8012742 <__ssvfiscanf_r+0x2a>
 801276a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801276c:	3201      	adds	r2, #1
 801276e:	9245      	str	r2, [sp, #276]	; 0x114
 8012770:	6862      	ldr	r2, [r4, #4]
 8012772:	3301      	adds	r3, #1
 8012774:	3a01      	subs	r2, #1
 8012776:	6062      	str	r2, [r4, #4]
 8012778:	6023      	str	r3, [r4, #0]
 801277a:	e7ec      	b.n	8012756 <__ssvfiscanf_r+0x3e>
 801277c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801277e:	4621      	mov	r1, r4
 8012780:	4630      	mov	r0, r6
 8012782:	4798      	blx	r3
 8012784:	2800      	cmp	r0, #0
 8012786:	d0e9      	beq.n	801275c <__ssvfiscanf_r+0x44>
 8012788:	e7ed      	b.n	8012766 <__ssvfiscanf_r+0x4e>
 801278a:	2b25      	cmp	r3, #37	; 0x25
 801278c:	d012      	beq.n	80127b4 <__ssvfiscanf_r+0x9c>
 801278e:	469a      	mov	sl, r3
 8012790:	6863      	ldr	r3, [r4, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	f340 8091 	ble.w	80128ba <__ssvfiscanf_r+0x1a2>
 8012798:	6822      	ldr	r2, [r4, #0]
 801279a:	7813      	ldrb	r3, [r2, #0]
 801279c:	4553      	cmp	r3, sl
 801279e:	f040 812e 	bne.w	80129fe <__ssvfiscanf_r+0x2e6>
 80127a2:	6863      	ldr	r3, [r4, #4]
 80127a4:	3b01      	subs	r3, #1
 80127a6:	6063      	str	r3, [r4, #4]
 80127a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80127aa:	3201      	adds	r2, #1
 80127ac:	3301      	adds	r3, #1
 80127ae:	6022      	str	r2, [r4, #0]
 80127b0:	9345      	str	r3, [sp, #276]	; 0x114
 80127b2:	e7d8      	b.n	8012766 <__ssvfiscanf_r+0x4e>
 80127b4:	9141      	str	r1, [sp, #260]	; 0x104
 80127b6:	9143      	str	r1, [sp, #268]	; 0x10c
 80127b8:	7853      	ldrb	r3, [r2, #1]
 80127ba:	2b2a      	cmp	r3, #42	; 0x2a
 80127bc:	bf02      	ittt	eq
 80127be:	2310      	moveq	r3, #16
 80127c0:	1c95      	addeq	r5, r2, #2
 80127c2:	9341      	streq	r3, [sp, #260]	; 0x104
 80127c4:	220a      	movs	r2, #10
 80127c6:	46aa      	mov	sl, r5
 80127c8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80127cc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80127d0:	2b09      	cmp	r3, #9
 80127d2:	d91c      	bls.n	801280e <__ssvfiscanf_r+0xf6>
 80127d4:	487e      	ldr	r0, [pc, #504]	; (80129d0 <__ssvfiscanf_r+0x2b8>)
 80127d6:	2203      	movs	r2, #3
 80127d8:	f7ed fd0a 	bl	80001f0 <memchr>
 80127dc:	b138      	cbz	r0, 80127ee <__ssvfiscanf_r+0xd6>
 80127de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80127e0:	eba0 0009 	sub.w	r0, r0, r9
 80127e4:	2301      	movs	r3, #1
 80127e6:	4083      	lsls	r3, r0
 80127e8:	4313      	orrs	r3, r2
 80127ea:	9341      	str	r3, [sp, #260]	; 0x104
 80127ec:	4655      	mov	r5, sl
 80127ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80127f2:	2b78      	cmp	r3, #120	; 0x78
 80127f4:	d806      	bhi.n	8012804 <__ssvfiscanf_r+0xec>
 80127f6:	2b57      	cmp	r3, #87	; 0x57
 80127f8:	d810      	bhi.n	801281c <__ssvfiscanf_r+0x104>
 80127fa:	2b25      	cmp	r3, #37	; 0x25
 80127fc:	d0c7      	beq.n	801278e <__ssvfiscanf_r+0x76>
 80127fe:	d857      	bhi.n	80128b0 <__ssvfiscanf_r+0x198>
 8012800:	2b00      	cmp	r3, #0
 8012802:	d065      	beq.n	80128d0 <__ssvfiscanf_r+0x1b8>
 8012804:	2303      	movs	r3, #3
 8012806:	9347      	str	r3, [sp, #284]	; 0x11c
 8012808:	230a      	movs	r3, #10
 801280a:	9342      	str	r3, [sp, #264]	; 0x108
 801280c:	e076      	b.n	80128fc <__ssvfiscanf_r+0x1e4>
 801280e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012810:	fb02 1103 	mla	r1, r2, r3, r1
 8012814:	3930      	subs	r1, #48	; 0x30
 8012816:	9143      	str	r1, [sp, #268]	; 0x10c
 8012818:	4655      	mov	r5, sl
 801281a:	e7d4      	b.n	80127c6 <__ssvfiscanf_r+0xae>
 801281c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012820:	2a20      	cmp	r2, #32
 8012822:	d8ef      	bhi.n	8012804 <__ssvfiscanf_r+0xec>
 8012824:	a101      	add	r1, pc, #4	; (adr r1, 801282c <__ssvfiscanf_r+0x114>)
 8012826:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801282a:	bf00      	nop
 801282c:	080128df 	.word	0x080128df
 8012830:	08012805 	.word	0x08012805
 8012834:	08012805 	.word	0x08012805
 8012838:	0801293d 	.word	0x0801293d
 801283c:	08012805 	.word	0x08012805
 8012840:	08012805 	.word	0x08012805
 8012844:	08012805 	.word	0x08012805
 8012848:	08012805 	.word	0x08012805
 801284c:	08012805 	.word	0x08012805
 8012850:	08012805 	.word	0x08012805
 8012854:	08012805 	.word	0x08012805
 8012858:	08012953 	.word	0x08012953
 801285c:	08012939 	.word	0x08012939
 8012860:	080128b7 	.word	0x080128b7
 8012864:	080128b7 	.word	0x080128b7
 8012868:	080128b7 	.word	0x080128b7
 801286c:	08012805 	.word	0x08012805
 8012870:	080128f5 	.word	0x080128f5
 8012874:	08012805 	.word	0x08012805
 8012878:	08012805 	.word	0x08012805
 801287c:	08012805 	.word	0x08012805
 8012880:	08012805 	.word	0x08012805
 8012884:	08012963 	.word	0x08012963
 8012888:	08012931 	.word	0x08012931
 801288c:	080128d7 	.word	0x080128d7
 8012890:	08012805 	.word	0x08012805
 8012894:	08012805 	.word	0x08012805
 8012898:	0801295f 	.word	0x0801295f
 801289c:	08012805 	.word	0x08012805
 80128a0:	08012939 	.word	0x08012939
 80128a4:	08012805 	.word	0x08012805
 80128a8:	08012805 	.word	0x08012805
 80128ac:	080128df 	.word	0x080128df
 80128b0:	3b45      	subs	r3, #69	; 0x45
 80128b2:	2b02      	cmp	r3, #2
 80128b4:	d8a6      	bhi.n	8012804 <__ssvfiscanf_r+0xec>
 80128b6:	2305      	movs	r3, #5
 80128b8:	e01f      	b.n	80128fa <__ssvfiscanf_r+0x1e2>
 80128ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80128bc:	4621      	mov	r1, r4
 80128be:	4630      	mov	r0, r6
 80128c0:	4798      	blx	r3
 80128c2:	2800      	cmp	r0, #0
 80128c4:	f43f af68 	beq.w	8012798 <__ssvfiscanf_r+0x80>
 80128c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80128ca:	2800      	cmp	r0, #0
 80128cc:	f040 808d 	bne.w	80129ea <__ssvfiscanf_r+0x2d2>
 80128d0:	f04f 30ff 	mov.w	r0, #4294967295
 80128d4:	e08f      	b.n	80129f6 <__ssvfiscanf_r+0x2de>
 80128d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80128d8:	f042 0220 	orr.w	r2, r2, #32
 80128dc:	9241      	str	r2, [sp, #260]	; 0x104
 80128de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80128e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128e4:	9241      	str	r2, [sp, #260]	; 0x104
 80128e6:	2210      	movs	r2, #16
 80128e8:	2b6f      	cmp	r3, #111	; 0x6f
 80128ea:	9242      	str	r2, [sp, #264]	; 0x108
 80128ec:	bf34      	ite	cc
 80128ee:	2303      	movcc	r3, #3
 80128f0:	2304      	movcs	r3, #4
 80128f2:	e002      	b.n	80128fa <__ssvfiscanf_r+0x1e2>
 80128f4:	2300      	movs	r3, #0
 80128f6:	9342      	str	r3, [sp, #264]	; 0x108
 80128f8:	2303      	movs	r3, #3
 80128fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80128fc:	6863      	ldr	r3, [r4, #4]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	dd3d      	ble.n	801297e <__ssvfiscanf_r+0x266>
 8012902:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012904:	0659      	lsls	r1, r3, #25
 8012906:	d404      	bmi.n	8012912 <__ssvfiscanf_r+0x1fa>
 8012908:	6823      	ldr	r3, [r4, #0]
 801290a:	781a      	ldrb	r2, [r3, #0]
 801290c:	5cba      	ldrb	r2, [r7, r2]
 801290e:	0712      	lsls	r2, r2, #28
 8012910:	d43c      	bmi.n	801298c <__ssvfiscanf_r+0x274>
 8012912:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012914:	2b02      	cmp	r3, #2
 8012916:	dc4b      	bgt.n	80129b0 <__ssvfiscanf_r+0x298>
 8012918:	466b      	mov	r3, sp
 801291a:	4622      	mov	r2, r4
 801291c:	a941      	add	r1, sp, #260	; 0x104
 801291e:	4630      	mov	r0, r6
 8012920:	f000 f9b6 	bl	8012c90 <_scanf_chars>
 8012924:	2801      	cmp	r0, #1
 8012926:	d06a      	beq.n	80129fe <__ssvfiscanf_r+0x2e6>
 8012928:	2802      	cmp	r0, #2
 801292a:	f47f af1c 	bne.w	8012766 <__ssvfiscanf_r+0x4e>
 801292e:	e7cb      	b.n	80128c8 <__ssvfiscanf_r+0x1b0>
 8012930:	2308      	movs	r3, #8
 8012932:	9342      	str	r3, [sp, #264]	; 0x108
 8012934:	2304      	movs	r3, #4
 8012936:	e7e0      	b.n	80128fa <__ssvfiscanf_r+0x1e2>
 8012938:	220a      	movs	r2, #10
 801293a:	e7d5      	b.n	80128e8 <__ssvfiscanf_r+0x1d0>
 801293c:	4629      	mov	r1, r5
 801293e:	4640      	mov	r0, r8
 8012940:	f000 fc16 	bl	8013170 <__sccl>
 8012944:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801294a:	9341      	str	r3, [sp, #260]	; 0x104
 801294c:	4605      	mov	r5, r0
 801294e:	2301      	movs	r3, #1
 8012950:	e7d3      	b.n	80128fa <__ssvfiscanf_r+0x1e2>
 8012952:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012958:	9341      	str	r3, [sp, #260]	; 0x104
 801295a:	2300      	movs	r3, #0
 801295c:	e7cd      	b.n	80128fa <__ssvfiscanf_r+0x1e2>
 801295e:	2302      	movs	r3, #2
 8012960:	e7cb      	b.n	80128fa <__ssvfiscanf_r+0x1e2>
 8012962:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012964:	06c3      	lsls	r3, r0, #27
 8012966:	f53f aefe 	bmi.w	8012766 <__ssvfiscanf_r+0x4e>
 801296a:	9b00      	ldr	r3, [sp, #0]
 801296c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801296e:	1d19      	adds	r1, r3, #4
 8012970:	9100      	str	r1, [sp, #0]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	07c0      	lsls	r0, r0, #31
 8012976:	bf4c      	ite	mi
 8012978:	801a      	strhmi	r2, [r3, #0]
 801297a:	601a      	strpl	r2, [r3, #0]
 801297c:	e6f3      	b.n	8012766 <__ssvfiscanf_r+0x4e>
 801297e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012980:	4621      	mov	r1, r4
 8012982:	4630      	mov	r0, r6
 8012984:	4798      	blx	r3
 8012986:	2800      	cmp	r0, #0
 8012988:	d0bb      	beq.n	8012902 <__ssvfiscanf_r+0x1ea>
 801298a:	e79d      	b.n	80128c8 <__ssvfiscanf_r+0x1b0>
 801298c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801298e:	3201      	adds	r2, #1
 8012990:	9245      	str	r2, [sp, #276]	; 0x114
 8012992:	6862      	ldr	r2, [r4, #4]
 8012994:	3a01      	subs	r2, #1
 8012996:	2a00      	cmp	r2, #0
 8012998:	6062      	str	r2, [r4, #4]
 801299a:	dd02      	ble.n	80129a2 <__ssvfiscanf_r+0x28a>
 801299c:	3301      	adds	r3, #1
 801299e:	6023      	str	r3, [r4, #0]
 80129a0:	e7b2      	b.n	8012908 <__ssvfiscanf_r+0x1f0>
 80129a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80129a4:	4621      	mov	r1, r4
 80129a6:	4630      	mov	r0, r6
 80129a8:	4798      	blx	r3
 80129aa:	2800      	cmp	r0, #0
 80129ac:	d0ac      	beq.n	8012908 <__ssvfiscanf_r+0x1f0>
 80129ae:	e78b      	b.n	80128c8 <__ssvfiscanf_r+0x1b0>
 80129b0:	2b04      	cmp	r3, #4
 80129b2:	dc0f      	bgt.n	80129d4 <__ssvfiscanf_r+0x2bc>
 80129b4:	466b      	mov	r3, sp
 80129b6:	4622      	mov	r2, r4
 80129b8:	a941      	add	r1, sp, #260	; 0x104
 80129ba:	4630      	mov	r0, r6
 80129bc:	f000 f9c2 	bl	8012d44 <_scanf_i>
 80129c0:	e7b0      	b.n	8012924 <__ssvfiscanf_r+0x20c>
 80129c2:	bf00      	nop
 80129c4:	08012665 	.word	0x08012665
 80129c8:	080126df 	.word	0x080126df
 80129cc:	080155c9 	.word	0x080155c9
 80129d0:	080159ea 	.word	0x080159ea
 80129d4:	4b0b      	ldr	r3, [pc, #44]	; (8012a04 <__ssvfiscanf_r+0x2ec>)
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	f43f aec5 	beq.w	8012766 <__ssvfiscanf_r+0x4e>
 80129dc:	466b      	mov	r3, sp
 80129de:	4622      	mov	r2, r4
 80129e0:	a941      	add	r1, sp, #260	; 0x104
 80129e2:	4630      	mov	r0, r6
 80129e4:	f7fc ffcc 	bl	800f980 <_scanf_float>
 80129e8:	e79c      	b.n	8012924 <__ssvfiscanf_r+0x20c>
 80129ea:	89a3      	ldrh	r3, [r4, #12]
 80129ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80129f0:	bf18      	it	ne
 80129f2:	f04f 30ff 	movne.w	r0, #4294967295
 80129f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80129fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012a00:	e7f9      	b.n	80129f6 <__ssvfiscanf_r+0x2de>
 8012a02:	bf00      	nop
 8012a04:	0800f981 	.word	0x0800f981

08012a08 <__sfputc_r>:
 8012a08:	6893      	ldr	r3, [r2, #8]
 8012a0a:	3b01      	subs	r3, #1
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	b410      	push	{r4}
 8012a10:	6093      	str	r3, [r2, #8]
 8012a12:	da08      	bge.n	8012a26 <__sfputc_r+0x1e>
 8012a14:	6994      	ldr	r4, [r2, #24]
 8012a16:	42a3      	cmp	r3, r4
 8012a18:	db01      	blt.n	8012a1e <__sfputc_r+0x16>
 8012a1a:	290a      	cmp	r1, #10
 8012a1c:	d103      	bne.n	8012a26 <__sfputc_r+0x1e>
 8012a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a22:	f7fd bb7e 	b.w	8010122 <__swbuf_r>
 8012a26:	6813      	ldr	r3, [r2, #0]
 8012a28:	1c58      	adds	r0, r3, #1
 8012a2a:	6010      	str	r0, [r2, #0]
 8012a2c:	7019      	strb	r1, [r3, #0]
 8012a2e:	4608      	mov	r0, r1
 8012a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a34:	4770      	bx	lr

08012a36 <__sfputs_r>:
 8012a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a38:	4606      	mov	r6, r0
 8012a3a:	460f      	mov	r7, r1
 8012a3c:	4614      	mov	r4, r2
 8012a3e:	18d5      	adds	r5, r2, r3
 8012a40:	42ac      	cmp	r4, r5
 8012a42:	d101      	bne.n	8012a48 <__sfputs_r+0x12>
 8012a44:	2000      	movs	r0, #0
 8012a46:	e007      	b.n	8012a58 <__sfputs_r+0x22>
 8012a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a4c:	463a      	mov	r2, r7
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f7ff ffda 	bl	8012a08 <__sfputc_r>
 8012a54:	1c43      	adds	r3, r0, #1
 8012a56:	d1f3      	bne.n	8012a40 <__sfputs_r+0xa>
 8012a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a5c <_vfiprintf_r>:
 8012a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a60:	460d      	mov	r5, r1
 8012a62:	b09d      	sub	sp, #116	; 0x74
 8012a64:	4614      	mov	r4, r2
 8012a66:	4698      	mov	r8, r3
 8012a68:	4606      	mov	r6, r0
 8012a6a:	b118      	cbz	r0, 8012a74 <_vfiprintf_r+0x18>
 8012a6c:	6a03      	ldr	r3, [r0, #32]
 8012a6e:	b90b      	cbnz	r3, 8012a74 <_vfiprintf_r+0x18>
 8012a70:	f7fd fa22 	bl	800feb8 <__sinit>
 8012a74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a76:	07d9      	lsls	r1, r3, #31
 8012a78:	d405      	bmi.n	8012a86 <_vfiprintf_r+0x2a>
 8012a7a:	89ab      	ldrh	r3, [r5, #12]
 8012a7c:	059a      	lsls	r2, r3, #22
 8012a7e:	d402      	bmi.n	8012a86 <_vfiprintf_r+0x2a>
 8012a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a82:	f7f5 ff1d 	bl	80088c0 <__retarget_lock_acquire_recursive>
 8012a86:	89ab      	ldrh	r3, [r5, #12]
 8012a88:	071b      	lsls	r3, r3, #28
 8012a8a:	d501      	bpl.n	8012a90 <_vfiprintf_r+0x34>
 8012a8c:	692b      	ldr	r3, [r5, #16]
 8012a8e:	b99b      	cbnz	r3, 8012ab8 <_vfiprintf_r+0x5c>
 8012a90:	4629      	mov	r1, r5
 8012a92:	4630      	mov	r0, r6
 8012a94:	f7fd fb82 	bl	801019c <__swsetup_r>
 8012a98:	b170      	cbz	r0, 8012ab8 <_vfiprintf_r+0x5c>
 8012a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a9c:	07dc      	lsls	r4, r3, #31
 8012a9e:	d504      	bpl.n	8012aaa <_vfiprintf_r+0x4e>
 8012aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa4:	b01d      	add	sp, #116	; 0x74
 8012aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aaa:	89ab      	ldrh	r3, [r5, #12]
 8012aac:	0598      	lsls	r0, r3, #22
 8012aae:	d4f7      	bmi.n	8012aa0 <_vfiprintf_r+0x44>
 8012ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ab2:	f7f5 ff21 	bl	80088f8 <__retarget_lock_release_recursive>
 8012ab6:	e7f3      	b.n	8012aa0 <_vfiprintf_r+0x44>
 8012ab8:	2300      	movs	r3, #0
 8012aba:	9309      	str	r3, [sp, #36]	; 0x24
 8012abc:	2320      	movs	r3, #32
 8012abe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ac6:	2330      	movs	r3, #48	; 0x30
 8012ac8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012c7c <_vfiprintf_r+0x220>
 8012acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ad0:	f04f 0901 	mov.w	r9, #1
 8012ad4:	4623      	mov	r3, r4
 8012ad6:	469a      	mov	sl, r3
 8012ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012adc:	b10a      	cbz	r2, 8012ae2 <_vfiprintf_r+0x86>
 8012ade:	2a25      	cmp	r2, #37	; 0x25
 8012ae0:	d1f9      	bne.n	8012ad6 <_vfiprintf_r+0x7a>
 8012ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8012ae6:	d00b      	beq.n	8012b00 <_vfiprintf_r+0xa4>
 8012ae8:	465b      	mov	r3, fp
 8012aea:	4622      	mov	r2, r4
 8012aec:	4629      	mov	r1, r5
 8012aee:	4630      	mov	r0, r6
 8012af0:	f7ff ffa1 	bl	8012a36 <__sfputs_r>
 8012af4:	3001      	adds	r0, #1
 8012af6:	f000 80a9 	beq.w	8012c4c <_vfiprintf_r+0x1f0>
 8012afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012afc:	445a      	add	r2, fp
 8012afe:	9209      	str	r2, [sp, #36]	; 0x24
 8012b00:	f89a 3000 	ldrb.w	r3, [sl]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f000 80a1 	beq.w	8012c4c <_vfiprintf_r+0x1f0>
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b14:	f10a 0a01 	add.w	sl, sl, #1
 8012b18:	9304      	str	r3, [sp, #16]
 8012b1a:	9307      	str	r3, [sp, #28]
 8012b1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b20:	931a      	str	r3, [sp, #104]	; 0x68
 8012b22:	4654      	mov	r4, sl
 8012b24:	2205      	movs	r2, #5
 8012b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b2a:	4854      	ldr	r0, [pc, #336]	; (8012c7c <_vfiprintf_r+0x220>)
 8012b2c:	f7ed fb60 	bl	80001f0 <memchr>
 8012b30:	9a04      	ldr	r2, [sp, #16]
 8012b32:	b9d8      	cbnz	r0, 8012b6c <_vfiprintf_r+0x110>
 8012b34:	06d1      	lsls	r1, r2, #27
 8012b36:	bf44      	itt	mi
 8012b38:	2320      	movmi	r3, #32
 8012b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b3e:	0713      	lsls	r3, r2, #28
 8012b40:	bf44      	itt	mi
 8012b42:	232b      	movmi	r3, #43	; 0x2b
 8012b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b48:	f89a 3000 	ldrb.w	r3, [sl]
 8012b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8012b4e:	d015      	beq.n	8012b7c <_vfiprintf_r+0x120>
 8012b50:	9a07      	ldr	r2, [sp, #28]
 8012b52:	4654      	mov	r4, sl
 8012b54:	2000      	movs	r0, #0
 8012b56:	f04f 0c0a 	mov.w	ip, #10
 8012b5a:	4621      	mov	r1, r4
 8012b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b60:	3b30      	subs	r3, #48	; 0x30
 8012b62:	2b09      	cmp	r3, #9
 8012b64:	d94d      	bls.n	8012c02 <_vfiprintf_r+0x1a6>
 8012b66:	b1b0      	cbz	r0, 8012b96 <_vfiprintf_r+0x13a>
 8012b68:	9207      	str	r2, [sp, #28]
 8012b6a:	e014      	b.n	8012b96 <_vfiprintf_r+0x13a>
 8012b6c:	eba0 0308 	sub.w	r3, r0, r8
 8012b70:	fa09 f303 	lsl.w	r3, r9, r3
 8012b74:	4313      	orrs	r3, r2
 8012b76:	9304      	str	r3, [sp, #16]
 8012b78:	46a2      	mov	sl, r4
 8012b7a:	e7d2      	b.n	8012b22 <_vfiprintf_r+0xc6>
 8012b7c:	9b03      	ldr	r3, [sp, #12]
 8012b7e:	1d19      	adds	r1, r3, #4
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	9103      	str	r1, [sp, #12]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	bfbb      	ittet	lt
 8012b88:	425b      	neglt	r3, r3
 8012b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8012b8e:	9307      	strge	r3, [sp, #28]
 8012b90:	9307      	strlt	r3, [sp, #28]
 8012b92:	bfb8      	it	lt
 8012b94:	9204      	strlt	r2, [sp, #16]
 8012b96:	7823      	ldrb	r3, [r4, #0]
 8012b98:	2b2e      	cmp	r3, #46	; 0x2e
 8012b9a:	d10c      	bne.n	8012bb6 <_vfiprintf_r+0x15a>
 8012b9c:	7863      	ldrb	r3, [r4, #1]
 8012b9e:	2b2a      	cmp	r3, #42	; 0x2a
 8012ba0:	d134      	bne.n	8012c0c <_vfiprintf_r+0x1b0>
 8012ba2:	9b03      	ldr	r3, [sp, #12]
 8012ba4:	1d1a      	adds	r2, r3, #4
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	9203      	str	r2, [sp, #12]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	bfb8      	it	lt
 8012bae:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bb2:	3402      	adds	r4, #2
 8012bb4:	9305      	str	r3, [sp, #20]
 8012bb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012c8c <_vfiprintf_r+0x230>
 8012bba:	7821      	ldrb	r1, [r4, #0]
 8012bbc:	2203      	movs	r2, #3
 8012bbe:	4650      	mov	r0, sl
 8012bc0:	f7ed fb16 	bl	80001f0 <memchr>
 8012bc4:	b138      	cbz	r0, 8012bd6 <_vfiprintf_r+0x17a>
 8012bc6:	9b04      	ldr	r3, [sp, #16]
 8012bc8:	eba0 000a 	sub.w	r0, r0, sl
 8012bcc:	2240      	movs	r2, #64	; 0x40
 8012bce:	4082      	lsls	r2, r0
 8012bd0:	4313      	orrs	r3, r2
 8012bd2:	3401      	adds	r4, #1
 8012bd4:	9304      	str	r3, [sp, #16]
 8012bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bda:	4829      	ldr	r0, [pc, #164]	; (8012c80 <_vfiprintf_r+0x224>)
 8012bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012be0:	2206      	movs	r2, #6
 8012be2:	f7ed fb05 	bl	80001f0 <memchr>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	d03f      	beq.n	8012c6a <_vfiprintf_r+0x20e>
 8012bea:	4b26      	ldr	r3, [pc, #152]	; (8012c84 <_vfiprintf_r+0x228>)
 8012bec:	bb1b      	cbnz	r3, 8012c36 <_vfiprintf_r+0x1da>
 8012bee:	9b03      	ldr	r3, [sp, #12]
 8012bf0:	3307      	adds	r3, #7
 8012bf2:	f023 0307 	bic.w	r3, r3, #7
 8012bf6:	3308      	adds	r3, #8
 8012bf8:	9303      	str	r3, [sp, #12]
 8012bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bfc:	443b      	add	r3, r7
 8012bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8012c00:	e768      	b.n	8012ad4 <_vfiprintf_r+0x78>
 8012c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c06:	460c      	mov	r4, r1
 8012c08:	2001      	movs	r0, #1
 8012c0a:	e7a6      	b.n	8012b5a <_vfiprintf_r+0xfe>
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	3401      	adds	r4, #1
 8012c10:	9305      	str	r3, [sp, #20]
 8012c12:	4619      	mov	r1, r3
 8012c14:	f04f 0c0a 	mov.w	ip, #10
 8012c18:	4620      	mov	r0, r4
 8012c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c1e:	3a30      	subs	r2, #48	; 0x30
 8012c20:	2a09      	cmp	r2, #9
 8012c22:	d903      	bls.n	8012c2c <_vfiprintf_r+0x1d0>
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d0c6      	beq.n	8012bb6 <_vfiprintf_r+0x15a>
 8012c28:	9105      	str	r1, [sp, #20]
 8012c2a:	e7c4      	b.n	8012bb6 <_vfiprintf_r+0x15a>
 8012c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c30:	4604      	mov	r4, r0
 8012c32:	2301      	movs	r3, #1
 8012c34:	e7f0      	b.n	8012c18 <_vfiprintf_r+0x1bc>
 8012c36:	ab03      	add	r3, sp, #12
 8012c38:	9300      	str	r3, [sp, #0]
 8012c3a:	462a      	mov	r2, r5
 8012c3c:	4b12      	ldr	r3, [pc, #72]	; (8012c88 <_vfiprintf_r+0x22c>)
 8012c3e:	a904      	add	r1, sp, #16
 8012c40:	4630      	mov	r0, r6
 8012c42:	f7fc fad7 	bl	800f1f4 <_printf_float>
 8012c46:	4607      	mov	r7, r0
 8012c48:	1c78      	adds	r0, r7, #1
 8012c4a:	d1d6      	bne.n	8012bfa <_vfiprintf_r+0x19e>
 8012c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c4e:	07d9      	lsls	r1, r3, #31
 8012c50:	d405      	bmi.n	8012c5e <_vfiprintf_r+0x202>
 8012c52:	89ab      	ldrh	r3, [r5, #12]
 8012c54:	059a      	lsls	r2, r3, #22
 8012c56:	d402      	bmi.n	8012c5e <_vfiprintf_r+0x202>
 8012c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012c5a:	f7f5 fe4d 	bl	80088f8 <__retarget_lock_release_recursive>
 8012c5e:	89ab      	ldrh	r3, [r5, #12]
 8012c60:	065b      	lsls	r3, r3, #25
 8012c62:	f53f af1d 	bmi.w	8012aa0 <_vfiprintf_r+0x44>
 8012c66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c68:	e71c      	b.n	8012aa4 <_vfiprintf_r+0x48>
 8012c6a:	ab03      	add	r3, sp, #12
 8012c6c:	9300      	str	r3, [sp, #0]
 8012c6e:	462a      	mov	r2, r5
 8012c70:	4b05      	ldr	r3, [pc, #20]	; (8012c88 <_vfiprintf_r+0x22c>)
 8012c72:	a904      	add	r1, sp, #16
 8012c74:	4630      	mov	r0, r6
 8012c76:	f7fc fd61 	bl	800f73c <_printf_i>
 8012c7a:	e7e4      	b.n	8012c46 <_vfiprintf_r+0x1ea>
 8012c7c:	080159e4 	.word	0x080159e4
 8012c80:	080159ee 	.word	0x080159ee
 8012c84:	0800f1f5 	.word	0x0800f1f5
 8012c88:	08012a37 	.word	0x08012a37
 8012c8c:	080159ea 	.word	0x080159ea

08012c90 <_scanf_chars>:
 8012c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c94:	4615      	mov	r5, r2
 8012c96:	688a      	ldr	r2, [r1, #8]
 8012c98:	4680      	mov	r8, r0
 8012c9a:	460c      	mov	r4, r1
 8012c9c:	b932      	cbnz	r2, 8012cac <_scanf_chars+0x1c>
 8012c9e:	698a      	ldr	r2, [r1, #24]
 8012ca0:	2a00      	cmp	r2, #0
 8012ca2:	bf0c      	ite	eq
 8012ca4:	2201      	moveq	r2, #1
 8012ca6:	f04f 32ff 	movne.w	r2, #4294967295
 8012caa:	608a      	str	r2, [r1, #8]
 8012cac:	6822      	ldr	r2, [r4, #0]
 8012cae:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8012d40 <_scanf_chars+0xb0>
 8012cb2:	06d1      	lsls	r1, r2, #27
 8012cb4:	bf5f      	itttt	pl
 8012cb6:	681a      	ldrpl	r2, [r3, #0]
 8012cb8:	1d11      	addpl	r1, r2, #4
 8012cba:	6019      	strpl	r1, [r3, #0]
 8012cbc:	6816      	ldrpl	r6, [r2, #0]
 8012cbe:	2700      	movs	r7, #0
 8012cc0:	69a0      	ldr	r0, [r4, #24]
 8012cc2:	b188      	cbz	r0, 8012ce8 <_scanf_chars+0x58>
 8012cc4:	2801      	cmp	r0, #1
 8012cc6:	d107      	bne.n	8012cd8 <_scanf_chars+0x48>
 8012cc8:	682a      	ldr	r2, [r5, #0]
 8012cca:	7811      	ldrb	r1, [r2, #0]
 8012ccc:	6962      	ldr	r2, [r4, #20]
 8012cce:	5c52      	ldrb	r2, [r2, r1]
 8012cd0:	b952      	cbnz	r2, 8012ce8 <_scanf_chars+0x58>
 8012cd2:	2f00      	cmp	r7, #0
 8012cd4:	d031      	beq.n	8012d3a <_scanf_chars+0xaa>
 8012cd6:	e022      	b.n	8012d1e <_scanf_chars+0x8e>
 8012cd8:	2802      	cmp	r0, #2
 8012cda:	d120      	bne.n	8012d1e <_scanf_chars+0x8e>
 8012cdc:	682b      	ldr	r3, [r5, #0]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012ce4:	071b      	lsls	r3, r3, #28
 8012ce6:	d41a      	bmi.n	8012d1e <_scanf_chars+0x8e>
 8012ce8:	6823      	ldr	r3, [r4, #0]
 8012cea:	06da      	lsls	r2, r3, #27
 8012cec:	bf5e      	ittt	pl
 8012cee:	682b      	ldrpl	r3, [r5, #0]
 8012cf0:	781b      	ldrbpl	r3, [r3, #0]
 8012cf2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012cf6:	682a      	ldr	r2, [r5, #0]
 8012cf8:	686b      	ldr	r3, [r5, #4]
 8012cfa:	3201      	adds	r2, #1
 8012cfc:	602a      	str	r2, [r5, #0]
 8012cfe:	68a2      	ldr	r2, [r4, #8]
 8012d00:	3b01      	subs	r3, #1
 8012d02:	3a01      	subs	r2, #1
 8012d04:	606b      	str	r3, [r5, #4]
 8012d06:	3701      	adds	r7, #1
 8012d08:	60a2      	str	r2, [r4, #8]
 8012d0a:	b142      	cbz	r2, 8012d1e <_scanf_chars+0x8e>
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	dcd7      	bgt.n	8012cc0 <_scanf_chars+0x30>
 8012d10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012d14:	4629      	mov	r1, r5
 8012d16:	4640      	mov	r0, r8
 8012d18:	4798      	blx	r3
 8012d1a:	2800      	cmp	r0, #0
 8012d1c:	d0d0      	beq.n	8012cc0 <_scanf_chars+0x30>
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	f013 0310 	ands.w	r3, r3, #16
 8012d24:	d105      	bne.n	8012d32 <_scanf_chars+0xa2>
 8012d26:	68e2      	ldr	r2, [r4, #12]
 8012d28:	3201      	adds	r2, #1
 8012d2a:	60e2      	str	r2, [r4, #12]
 8012d2c:	69a2      	ldr	r2, [r4, #24]
 8012d2e:	b102      	cbz	r2, 8012d32 <_scanf_chars+0xa2>
 8012d30:	7033      	strb	r3, [r6, #0]
 8012d32:	6923      	ldr	r3, [r4, #16]
 8012d34:	443b      	add	r3, r7
 8012d36:	6123      	str	r3, [r4, #16]
 8012d38:	2000      	movs	r0, #0
 8012d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d3e:	bf00      	nop
 8012d40:	080155c9 	.word	0x080155c9

08012d44 <_scanf_i>:
 8012d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d48:	4698      	mov	r8, r3
 8012d4a:	4b74      	ldr	r3, [pc, #464]	; (8012f1c <_scanf_i+0x1d8>)
 8012d4c:	460c      	mov	r4, r1
 8012d4e:	4682      	mov	sl, r0
 8012d50:	4616      	mov	r6, r2
 8012d52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d56:	b087      	sub	sp, #28
 8012d58:	ab03      	add	r3, sp, #12
 8012d5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012d5e:	4b70      	ldr	r3, [pc, #448]	; (8012f20 <_scanf_i+0x1dc>)
 8012d60:	69a1      	ldr	r1, [r4, #24]
 8012d62:	4a70      	ldr	r2, [pc, #448]	; (8012f24 <_scanf_i+0x1e0>)
 8012d64:	2903      	cmp	r1, #3
 8012d66:	bf18      	it	ne
 8012d68:	461a      	movne	r2, r3
 8012d6a:	68a3      	ldr	r3, [r4, #8]
 8012d6c:	9201      	str	r2, [sp, #4]
 8012d6e:	1e5a      	subs	r2, r3, #1
 8012d70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012d74:	bf88      	it	hi
 8012d76:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012d7a:	4627      	mov	r7, r4
 8012d7c:	bf82      	ittt	hi
 8012d7e:	eb03 0905 	addhi.w	r9, r3, r5
 8012d82:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012d86:	60a3      	strhi	r3, [r4, #8]
 8012d88:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012d8c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012d90:	bf98      	it	ls
 8012d92:	f04f 0900 	movls.w	r9, #0
 8012d96:	6023      	str	r3, [r4, #0]
 8012d98:	463d      	mov	r5, r7
 8012d9a:	f04f 0b00 	mov.w	fp, #0
 8012d9e:	6831      	ldr	r1, [r6, #0]
 8012da0:	ab03      	add	r3, sp, #12
 8012da2:	7809      	ldrb	r1, [r1, #0]
 8012da4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012da8:	2202      	movs	r2, #2
 8012daa:	f7ed fa21 	bl	80001f0 <memchr>
 8012dae:	b328      	cbz	r0, 8012dfc <_scanf_i+0xb8>
 8012db0:	f1bb 0f01 	cmp.w	fp, #1
 8012db4:	d159      	bne.n	8012e6a <_scanf_i+0x126>
 8012db6:	6862      	ldr	r2, [r4, #4]
 8012db8:	b92a      	cbnz	r2, 8012dc6 <_scanf_i+0x82>
 8012dba:	6822      	ldr	r2, [r4, #0]
 8012dbc:	2308      	movs	r3, #8
 8012dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012dc2:	6063      	str	r3, [r4, #4]
 8012dc4:	6022      	str	r2, [r4, #0]
 8012dc6:	6822      	ldr	r2, [r4, #0]
 8012dc8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012dcc:	6022      	str	r2, [r4, #0]
 8012dce:	68a2      	ldr	r2, [r4, #8]
 8012dd0:	1e51      	subs	r1, r2, #1
 8012dd2:	60a1      	str	r1, [r4, #8]
 8012dd4:	b192      	cbz	r2, 8012dfc <_scanf_i+0xb8>
 8012dd6:	6832      	ldr	r2, [r6, #0]
 8012dd8:	1c51      	adds	r1, r2, #1
 8012dda:	6031      	str	r1, [r6, #0]
 8012ddc:	7812      	ldrb	r2, [r2, #0]
 8012dde:	f805 2b01 	strb.w	r2, [r5], #1
 8012de2:	6872      	ldr	r2, [r6, #4]
 8012de4:	3a01      	subs	r2, #1
 8012de6:	2a00      	cmp	r2, #0
 8012de8:	6072      	str	r2, [r6, #4]
 8012dea:	dc07      	bgt.n	8012dfc <_scanf_i+0xb8>
 8012dec:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012df0:	4631      	mov	r1, r6
 8012df2:	4650      	mov	r0, sl
 8012df4:	4790      	blx	r2
 8012df6:	2800      	cmp	r0, #0
 8012df8:	f040 8085 	bne.w	8012f06 <_scanf_i+0x1c2>
 8012dfc:	f10b 0b01 	add.w	fp, fp, #1
 8012e00:	f1bb 0f03 	cmp.w	fp, #3
 8012e04:	d1cb      	bne.n	8012d9e <_scanf_i+0x5a>
 8012e06:	6863      	ldr	r3, [r4, #4]
 8012e08:	b90b      	cbnz	r3, 8012e0e <_scanf_i+0xca>
 8012e0a:	230a      	movs	r3, #10
 8012e0c:	6063      	str	r3, [r4, #4]
 8012e0e:	6863      	ldr	r3, [r4, #4]
 8012e10:	4945      	ldr	r1, [pc, #276]	; (8012f28 <_scanf_i+0x1e4>)
 8012e12:	6960      	ldr	r0, [r4, #20]
 8012e14:	1ac9      	subs	r1, r1, r3
 8012e16:	f000 f9ab 	bl	8013170 <__sccl>
 8012e1a:	f04f 0b00 	mov.w	fp, #0
 8012e1e:	68a3      	ldr	r3, [r4, #8]
 8012e20:	6822      	ldr	r2, [r4, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d03d      	beq.n	8012ea2 <_scanf_i+0x15e>
 8012e26:	6831      	ldr	r1, [r6, #0]
 8012e28:	6960      	ldr	r0, [r4, #20]
 8012e2a:	f891 c000 	ldrb.w	ip, [r1]
 8012e2e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012e32:	2800      	cmp	r0, #0
 8012e34:	d035      	beq.n	8012ea2 <_scanf_i+0x15e>
 8012e36:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012e3a:	d124      	bne.n	8012e86 <_scanf_i+0x142>
 8012e3c:	0510      	lsls	r0, r2, #20
 8012e3e:	d522      	bpl.n	8012e86 <_scanf_i+0x142>
 8012e40:	f10b 0b01 	add.w	fp, fp, #1
 8012e44:	f1b9 0f00 	cmp.w	r9, #0
 8012e48:	d003      	beq.n	8012e52 <_scanf_i+0x10e>
 8012e4a:	3301      	adds	r3, #1
 8012e4c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012e50:	60a3      	str	r3, [r4, #8]
 8012e52:	6873      	ldr	r3, [r6, #4]
 8012e54:	3b01      	subs	r3, #1
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	6073      	str	r3, [r6, #4]
 8012e5a:	dd1b      	ble.n	8012e94 <_scanf_i+0x150>
 8012e5c:	6833      	ldr	r3, [r6, #0]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	6033      	str	r3, [r6, #0]
 8012e62:	68a3      	ldr	r3, [r4, #8]
 8012e64:	3b01      	subs	r3, #1
 8012e66:	60a3      	str	r3, [r4, #8]
 8012e68:	e7d9      	b.n	8012e1e <_scanf_i+0xda>
 8012e6a:	f1bb 0f02 	cmp.w	fp, #2
 8012e6e:	d1ae      	bne.n	8012dce <_scanf_i+0x8a>
 8012e70:	6822      	ldr	r2, [r4, #0]
 8012e72:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012e76:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012e7a:	d1bf      	bne.n	8012dfc <_scanf_i+0xb8>
 8012e7c:	2310      	movs	r3, #16
 8012e7e:	6063      	str	r3, [r4, #4]
 8012e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012e84:	e7a2      	b.n	8012dcc <_scanf_i+0x88>
 8012e86:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012e8a:	6022      	str	r2, [r4, #0]
 8012e8c:	780b      	ldrb	r3, [r1, #0]
 8012e8e:	f805 3b01 	strb.w	r3, [r5], #1
 8012e92:	e7de      	b.n	8012e52 <_scanf_i+0x10e>
 8012e94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012e98:	4631      	mov	r1, r6
 8012e9a:	4650      	mov	r0, sl
 8012e9c:	4798      	blx	r3
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d0df      	beq.n	8012e62 <_scanf_i+0x11e>
 8012ea2:	6823      	ldr	r3, [r4, #0]
 8012ea4:	05d9      	lsls	r1, r3, #23
 8012ea6:	d50d      	bpl.n	8012ec4 <_scanf_i+0x180>
 8012ea8:	42bd      	cmp	r5, r7
 8012eaa:	d909      	bls.n	8012ec0 <_scanf_i+0x17c>
 8012eac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012eb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012eb4:	4632      	mov	r2, r6
 8012eb6:	4650      	mov	r0, sl
 8012eb8:	4798      	blx	r3
 8012eba:	f105 39ff 	add.w	r9, r5, #4294967295
 8012ebe:	464d      	mov	r5, r9
 8012ec0:	42bd      	cmp	r5, r7
 8012ec2:	d028      	beq.n	8012f16 <_scanf_i+0x1d2>
 8012ec4:	6822      	ldr	r2, [r4, #0]
 8012ec6:	f012 0210 	ands.w	r2, r2, #16
 8012eca:	d113      	bne.n	8012ef4 <_scanf_i+0x1b0>
 8012ecc:	702a      	strb	r2, [r5, #0]
 8012ece:	6863      	ldr	r3, [r4, #4]
 8012ed0:	9e01      	ldr	r6, [sp, #4]
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	4650      	mov	r0, sl
 8012ed6:	47b0      	blx	r6
 8012ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8012edc:	6821      	ldr	r1, [r4, #0]
 8012ede:	1d1a      	adds	r2, r3, #4
 8012ee0:	f8c8 2000 	str.w	r2, [r8]
 8012ee4:	f011 0f20 	tst.w	r1, #32
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	d00f      	beq.n	8012f0c <_scanf_i+0x1c8>
 8012eec:	6018      	str	r0, [r3, #0]
 8012eee:	68e3      	ldr	r3, [r4, #12]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	60e3      	str	r3, [r4, #12]
 8012ef4:	6923      	ldr	r3, [r4, #16]
 8012ef6:	1bed      	subs	r5, r5, r7
 8012ef8:	445d      	add	r5, fp
 8012efa:	442b      	add	r3, r5
 8012efc:	6123      	str	r3, [r4, #16]
 8012efe:	2000      	movs	r0, #0
 8012f00:	b007      	add	sp, #28
 8012f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f06:	f04f 0b00 	mov.w	fp, #0
 8012f0a:	e7ca      	b.n	8012ea2 <_scanf_i+0x15e>
 8012f0c:	07ca      	lsls	r2, r1, #31
 8012f0e:	bf4c      	ite	mi
 8012f10:	8018      	strhmi	r0, [r3, #0]
 8012f12:	6018      	strpl	r0, [r3, #0]
 8012f14:	e7eb      	b.n	8012eee <_scanf_i+0x1aa>
 8012f16:	2001      	movs	r0, #1
 8012f18:	e7f2      	b.n	8012f00 <_scanf_i+0x1bc>
 8012f1a:	bf00      	nop
 8012f1c:	08013550 	.word	0x08013550
 8012f20:	0801344d 	.word	0x0801344d
 8012f24:	0800f09d 	.word	0x0800f09d
 8012f28:	08015a05 	.word	0x08015a05

08012f2c <__sflush_r>:
 8012f2c:	898a      	ldrh	r2, [r1, #12]
 8012f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f32:	4605      	mov	r5, r0
 8012f34:	0710      	lsls	r0, r2, #28
 8012f36:	460c      	mov	r4, r1
 8012f38:	d458      	bmi.n	8012fec <__sflush_r+0xc0>
 8012f3a:	684b      	ldr	r3, [r1, #4]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	dc05      	bgt.n	8012f4c <__sflush_r+0x20>
 8012f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	dc02      	bgt.n	8012f4c <__sflush_r+0x20>
 8012f46:	2000      	movs	r0, #0
 8012f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f4e:	2e00      	cmp	r6, #0
 8012f50:	d0f9      	beq.n	8012f46 <__sflush_r+0x1a>
 8012f52:	2300      	movs	r3, #0
 8012f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f58:	682f      	ldr	r7, [r5, #0]
 8012f5a:	6a21      	ldr	r1, [r4, #32]
 8012f5c:	602b      	str	r3, [r5, #0]
 8012f5e:	d032      	beq.n	8012fc6 <__sflush_r+0x9a>
 8012f60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f62:	89a3      	ldrh	r3, [r4, #12]
 8012f64:	075a      	lsls	r2, r3, #29
 8012f66:	d505      	bpl.n	8012f74 <__sflush_r+0x48>
 8012f68:	6863      	ldr	r3, [r4, #4]
 8012f6a:	1ac0      	subs	r0, r0, r3
 8012f6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f6e:	b10b      	cbz	r3, 8012f74 <__sflush_r+0x48>
 8012f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f72:	1ac0      	subs	r0, r0, r3
 8012f74:	2300      	movs	r3, #0
 8012f76:	4602      	mov	r2, r0
 8012f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f7a:	6a21      	ldr	r1, [r4, #32]
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	47b0      	blx	r6
 8012f80:	1c43      	adds	r3, r0, #1
 8012f82:	89a3      	ldrh	r3, [r4, #12]
 8012f84:	d106      	bne.n	8012f94 <__sflush_r+0x68>
 8012f86:	6829      	ldr	r1, [r5, #0]
 8012f88:	291d      	cmp	r1, #29
 8012f8a:	d82b      	bhi.n	8012fe4 <__sflush_r+0xb8>
 8012f8c:	4a29      	ldr	r2, [pc, #164]	; (8013034 <__sflush_r+0x108>)
 8012f8e:	410a      	asrs	r2, r1
 8012f90:	07d6      	lsls	r6, r2, #31
 8012f92:	d427      	bmi.n	8012fe4 <__sflush_r+0xb8>
 8012f94:	2200      	movs	r2, #0
 8012f96:	6062      	str	r2, [r4, #4]
 8012f98:	04d9      	lsls	r1, r3, #19
 8012f9a:	6922      	ldr	r2, [r4, #16]
 8012f9c:	6022      	str	r2, [r4, #0]
 8012f9e:	d504      	bpl.n	8012faa <__sflush_r+0x7e>
 8012fa0:	1c42      	adds	r2, r0, #1
 8012fa2:	d101      	bne.n	8012fa8 <__sflush_r+0x7c>
 8012fa4:	682b      	ldr	r3, [r5, #0]
 8012fa6:	b903      	cbnz	r3, 8012faa <__sflush_r+0x7e>
 8012fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8012faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fac:	602f      	str	r7, [r5, #0]
 8012fae:	2900      	cmp	r1, #0
 8012fb0:	d0c9      	beq.n	8012f46 <__sflush_r+0x1a>
 8012fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fb6:	4299      	cmp	r1, r3
 8012fb8:	d002      	beq.n	8012fc0 <__sflush_r+0x94>
 8012fba:	4628      	mov	r0, r5
 8012fbc:	f7fe f98a 	bl	80112d4 <_free_r>
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8012fc4:	e7c0      	b.n	8012f48 <__sflush_r+0x1c>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	4628      	mov	r0, r5
 8012fca:	47b0      	blx	r6
 8012fcc:	1c41      	adds	r1, r0, #1
 8012fce:	d1c8      	bne.n	8012f62 <__sflush_r+0x36>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d0c5      	beq.n	8012f62 <__sflush_r+0x36>
 8012fd6:	2b1d      	cmp	r3, #29
 8012fd8:	d001      	beq.n	8012fde <__sflush_r+0xb2>
 8012fda:	2b16      	cmp	r3, #22
 8012fdc:	d101      	bne.n	8012fe2 <__sflush_r+0xb6>
 8012fde:	602f      	str	r7, [r5, #0]
 8012fe0:	e7b1      	b.n	8012f46 <__sflush_r+0x1a>
 8012fe2:	89a3      	ldrh	r3, [r4, #12]
 8012fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fe8:	81a3      	strh	r3, [r4, #12]
 8012fea:	e7ad      	b.n	8012f48 <__sflush_r+0x1c>
 8012fec:	690f      	ldr	r7, [r1, #16]
 8012fee:	2f00      	cmp	r7, #0
 8012ff0:	d0a9      	beq.n	8012f46 <__sflush_r+0x1a>
 8012ff2:	0793      	lsls	r3, r2, #30
 8012ff4:	680e      	ldr	r6, [r1, #0]
 8012ff6:	bf08      	it	eq
 8012ff8:	694b      	ldreq	r3, [r1, #20]
 8012ffa:	600f      	str	r7, [r1, #0]
 8012ffc:	bf18      	it	ne
 8012ffe:	2300      	movne	r3, #0
 8013000:	eba6 0807 	sub.w	r8, r6, r7
 8013004:	608b      	str	r3, [r1, #8]
 8013006:	f1b8 0f00 	cmp.w	r8, #0
 801300a:	dd9c      	ble.n	8012f46 <__sflush_r+0x1a>
 801300c:	6a21      	ldr	r1, [r4, #32]
 801300e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013010:	4643      	mov	r3, r8
 8013012:	463a      	mov	r2, r7
 8013014:	4628      	mov	r0, r5
 8013016:	47b0      	blx	r6
 8013018:	2800      	cmp	r0, #0
 801301a:	dc06      	bgt.n	801302a <__sflush_r+0xfe>
 801301c:	89a3      	ldrh	r3, [r4, #12]
 801301e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013022:	81a3      	strh	r3, [r4, #12]
 8013024:	f04f 30ff 	mov.w	r0, #4294967295
 8013028:	e78e      	b.n	8012f48 <__sflush_r+0x1c>
 801302a:	4407      	add	r7, r0
 801302c:	eba8 0800 	sub.w	r8, r8, r0
 8013030:	e7e9      	b.n	8013006 <__sflush_r+0xda>
 8013032:	bf00      	nop
 8013034:	dfbffffe 	.word	0xdfbffffe

08013038 <_fflush_r>:
 8013038:	b538      	push	{r3, r4, r5, lr}
 801303a:	690b      	ldr	r3, [r1, #16]
 801303c:	4605      	mov	r5, r0
 801303e:	460c      	mov	r4, r1
 8013040:	b913      	cbnz	r3, 8013048 <_fflush_r+0x10>
 8013042:	2500      	movs	r5, #0
 8013044:	4628      	mov	r0, r5
 8013046:	bd38      	pop	{r3, r4, r5, pc}
 8013048:	b118      	cbz	r0, 8013052 <_fflush_r+0x1a>
 801304a:	6a03      	ldr	r3, [r0, #32]
 801304c:	b90b      	cbnz	r3, 8013052 <_fflush_r+0x1a>
 801304e:	f7fc ff33 	bl	800feb8 <__sinit>
 8013052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d0f3      	beq.n	8013042 <_fflush_r+0xa>
 801305a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801305c:	07d0      	lsls	r0, r2, #31
 801305e:	d404      	bmi.n	801306a <_fflush_r+0x32>
 8013060:	0599      	lsls	r1, r3, #22
 8013062:	d402      	bmi.n	801306a <_fflush_r+0x32>
 8013064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013066:	f7f5 fc2b 	bl	80088c0 <__retarget_lock_acquire_recursive>
 801306a:	4628      	mov	r0, r5
 801306c:	4621      	mov	r1, r4
 801306e:	f7ff ff5d 	bl	8012f2c <__sflush_r>
 8013072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013074:	07da      	lsls	r2, r3, #31
 8013076:	4605      	mov	r5, r0
 8013078:	d4e4      	bmi.n	8013044 <_fflush_r+0xc>
 801307a:	89a3      	ldrh	r3, [r4, #12]
 801307c:	059b      	lsls	r3, r3, #22
 801307e:	d4e1      	bmi.n	8013044 <_fflush_r+0xc>
 8013080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013082:	f7f5 fc39 	bl	80088f8 <__retarget_lock_release_recursive>
 8013086:	e7dd      	b.n	8013044 <_fflush_r+0xc>

08013088 <fiprintf>:
 8013088:	b40e      	push	{r1, r2, r3}
 801308a:	b503      	push	{r0, r1, lr}
 801308c:	4601      	mov	r1, r0
 801308e:	ab03      	add	r3, sp, #12
 8013090:	4805      	ldr	r0, [pc, #20]	; (80130a8 <fiprintf+0x20>)
 8013092:	f853 2b04 	ldr.w	r2, [r3], #4
 8013096:	6800      	ldr	r0, [r0, #0]
 8013098:	9301      	str	r3, [sp, #4]
 801309a:	f7ff fcdf 	bl	8012a5c <_vfiprintf_r>
 801309e:	b002      	add	sp, #8
 80130a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80130a4:	b003      	add	sp, #12
 80130a6:	4770      	bx	lr
 80130a8:	20000200 	.word	0x20000200

080130ac <__swhatbuf_r>:
 80130ac:	b570      	push	{r4, r5, r6, lr}
 80130ae:	460c      	mov	r4, r1
 80130b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130b4:	2900      	cmp	r1, #0
 80130b6:	b096      	sub	sp, #88	; 0x58
 80130b8:	4615      	mov	r5, r2
 80130ba:	461e      	mov	r6, r3
 80130bc:	da0d      	bge.n	80130da <__swhatbuf_r+0x2e>
 80130be:	89a3      	ldrh	r3, [r4, #12]
 80130c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80130c4:	f04f 0100 	mov.w	r1, #0
 80130c8:	bf0c      	ite	eq
 80130ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80130ce:	2340      	movne	r3, #64	; 0x40
 80130d0:	2000      	movs	r0, #0
 80130d2:	6031      	str	r1, [r6, #0]
 80130d4:	602b      	str	r3, [r5, #0]
 80130d6:	b016      	add	sp, #88	; 0x58
 80130d8:	bd70      	pop	{r4, r5, r6, pc}
 80130da:	466a      	mov	r2, sp
 80130dc:	f000 f8d6 	bl	801328c <_fstat_r>
 80130e0:	2800      	cmp	r0, #0
 80130e2:	dbec      	blt.n	80130be <__swhatbuf_r+0x12>
 80130e4:	9901      	ldr	r1, [sp, #4]
 80130e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80130ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80130ee:	4259      	negs	r1, r3
 80130f0:	4159      	adcs	r1, r3
 80130f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130f6:	e7eb      	b.n	80130d0 <__swhatbuf_r+0x24>

080130f8 <__smakebuf_r>:
 80130f8:	898b      	ldrh	r3, [r1, #12]
 80130fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130fc:	079d      	lsls	r5, r3, #30
 80130fe:	4606      	mov	r6, r0
 8013100:	460c      	mov	r4, r1
 8013102:	d507      	bpl.n	8013114 <__smakebuf_r+0x1c>
 8013104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013108:	6023      	str	r3, [r4, #0]
 801310a:	6123      	str	r3, [r4, #16]
 801310c:	2301      	movs	r3, #1
 801310e:	6163      	str	r3, [r4, #20]
 8013110:	b002      	add	sp, #8
 8013112:	bd70      	pop	{r4, r5, r6, pc}
 8013114:	ab01      	add	r3, sp, #4
 8013116:	466a      	mov	r2, sp
 8013118:	f7ff ffc8 	bl	80130ac <__swhatbuf_r>
 801311c:	9900      	ldr	r1, [sp, #0]
 801311e:	4605      	mov	r5, r0
 8013120:	4630      	mov	r0, r6
 8013122:	f7fb f833 	bl	800e18c <_malloc_r>
 8013126:	b948      	cbnz	r0, 801313c <__smakebuf_r+0x44>
 8013128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801312c:	059a      	lsls	r2, r3, #22
 801312e:	d4ef      	bmi.n	8013110 <__smakebuf_r+0x18>
 8013130:	f023 0303 	bic.w	r3, r3, #3
 8013134:	f043 0302 	orr.w	r3, r3, #2
 8013138:	81a3      	strh	r3, [r4, #12]
 801313a:	e7e3      	b.n	8013104 <__smakebuf_r+0xc>
 801313c:	89a3      	ldrh	r3, [r4, #12]
 801313e:	6020      	str	r0, [r4, #0]
 8013140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013144:	81a3      	strh	r3, [r4, #12]
 8013146:	9b00      	ldr	r3, [sp, #0]
 8013148:	6163      	str	r3, [r4, #20]
 801314a:	9b01      	ldr	r3, [sp, #4]
 801314c:	6120      	str	r0, [r4, #16]
 801314e:	b15b      	cbz	r3, 8013168 <__smakebuf_r+0x70>
 8013150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013154:	4630      	mov	r0, r6
 8013156:	f000 f8ab 	bl	80132b0 <_isatty_r>
 801315a:	b128      	cbz	r0, 8013168 <__smakebuf_r+0x70>
 801315c:	89a3      	ldrh	r3, [r4, #12]
 801315e:	f023 0303 	bic.w	r3, r3, #3
 8013162:	f043 0301 	orr.w	r3, r3, #1
 8013166:	81a3      	strh	r3, [r4, #12]
 8013168:	89a3      	ldrh	r3, [r4, #12]
 801316a:	431d      	orrs	r5, r3
 801316c:	81a5      	strh	r5, [r4, #12]
 801316e:	e7cf      	b.n	8013110 <__smakebuf_r+0x18>

08013170 <__sccl>:
 8013170:	b570      	push	{r4, r5, r6, lr}
 8013172:	780b      	ldrb	r3, [r1, #0]
 8013174:	4604      	mov	r4, r0
 8013176:	2b5e      	cmp	r3, #94	; 0x5e
 8013178:	bf0b      	itete	eq
 801317a:	784b      	ldrbeq	r3, [r1, #1]
 801317c:	1c4a      	addne	r2, r1, #1
 801317e:	1c8a      	addeq	r2, r1, #2
 8013180:	2100      	movne	r1, #0
 8013182:	bf08      	it	eq
 8013184:	2101      	moveq	r1, #1
 8013186:	3801      	subs	r0, #1
 8013188:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801318c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013190:	42a8      	cmp	r0, r5
 8013192:	d1fb      	bne.n	801318c <__sccl+0x1c>
 8013194:	b90b      	cbnz	r3, 801319a <__sccl+0x2a>
 8013196:	1e50      	subs	r0, r2, #1
 8013198:	bd70      	pop	{r4, r5, r6, pc}
 801319a:	f081 0101 	eor.w	r1, r1, #1
 801319e:	54e1      	strb	r1, [r4, r3]
 80131a0:	4610      	mov	r0, r2
 80131a2:	4602      	mov	r2, r0
 80131a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80131a8:	2d2d      	cmp	r5, #45	; 0x2d
 80131aa:	d005      	beq.n	80131b8 <__sccl+0x48>
 80131ac:	2d5d      	cmp	r5, #93	; 0x5d
 80131ae:	d016      	beq.n	80131de <__sccl+0x6e>
 80131b0:	2d00      	cmp	r5, #0
 80131b2:	d0f1      	beq.n	8013198 <__sccl+0x28>
 80131b4:	462b      	mov	r3, r5
 80131b6:	e7f2      	b.n	801319e <__sccl+0x2e>
 80131b8:	7846      	ldrb	r6, [r0, #1]
 80131ba:	2e5d      	cmp	r6, #93	; 0x5d
 80131bc:	d0fa      	beq.n	80131b4 <__sccl+0x44>
 80131be:	42b3      	cmp	r3, r6
 80131c0:	dcf8      	bgt.n	80131b4 <__sccl+0x44>
 80131c2:	3002      	adds	r0, #2
 80131c4:	461a      	mov	r2, r3
 80131c6:	3201      	adds	r2, #1
 80131c8:	4296      	cmp	r6, r2
 80131ca:	54a1      	strb	r1, [r4, r2]
 80131cc:	dcfb      	bgt.n	80131c6 <__sccl+0x56>
 80131ce:	1af2      	subs	r2, r6, r3
 80131d0:	3a01      	subs	r2, #1
 80131d2:	1c5d      	adds	r5, r3, #1
 80131d4:	42b3      	cmp	r3, r6
 80131d6:	bfa8      	it	ge
 80131d8:	2200      	movge	r2, #0
 80131da:	18ab      	adds	r3, r5, r2
 80131dc:	e7e1      	b.n	80131a2 <__sccl+0x32>
 80131de:	4610      	mov	r0, r2
 80131e0:	e7da      	b.n	8013198 <__sccl+0x28>

080131e2 <__submore>:
 80131e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e6:	460c      	mov	r4, r1
 80131e8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80131ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131ee:	4299      	cmp	r1, r3
 80131f0:	d11d      	bne.n	801322e <__submore+0x4c>
 80131f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80131f6:	f7fa ffc9 	bl	800e18c <_malloc_r>
 80131fa:	b918      	cbnz	r0, 8013204 <__submore+0x22>
 80131fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013208:	63a3      	str	r3, [r4, #56]	; 0x38
 801320a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801320e:	6360      	str	r0, [r4, #52]	; 0x34
 8013210:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013214:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013218:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801321c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013220:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013224:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013228:	6020      	str	r0, [r4, #0]
 801322a:	2000      	movs	r0, #0
 801322c:	e7e8      	b.n	8013200 <__submore+0x1e>
 801322e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013230:	0077      	lsls	r7, r6, #1
 8013232:	463a      	mov	r2, r7
 8013234:	f000 f869 	bl	801330a <_realloc_r>
 8013238:	4605      	mov	r5, r0
 801323a:	2800      	cmp	r0, #0
 801323c:	d0de      	beq.n	80131fc <__submore+0x1a>
 801323e:	eb00 0806 	add.w	r8, r0, r6
 8013242:	4601      	mov	r1, r0
 8013244:	4632      	mov	r2, r6
 8013246:	4640      	mov	r0, r8
 8013248:	f7fd f98e 	bl	8010568 <memcpy>
 801324c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013250:	f8c4 8000 	str.w	r8, [r4]
 8013254:	e7e9      	b.n	801322a <__submore+0x48>

08013256 <memmove>:
 8013256:	4288      	cmp	r0, r1
 8013258:	b510      	push	{r4, lr}
 801325a:	eb01 0402 	add.w	r4, r1, r2
 801325e:	d902      	bls.n	8013266 <memmove+0x10>
 8013260:	4284      	cmp	r4, r0
 8013262:	4623      	mov	r3, r4
 8013264:	d807      	bhi.n	8013276 <memmove+0x20>
 8013266:	1e43      	subs	r3, r0, #1
 8013268:	42a1      	cmp	r1, r4
 801326a:	d008      	beq.n	801327e <memmove+0x28>
 801326c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013270:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013274:	e7f8      	b.n	8013268 <memmove+0x12>
 8013276:	4402      	add	r2, r0
 8013278:	4601      	mov	r1, r0
 801327a:	428a      	cmp	r2, r1
 801327c:	d100      	bne.n	8013280 <memmove+0x2a>
 801327e:	bd10      	pop	{r4, pc}
 8013280:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013284:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013288:	e7f7      	b.n	801327a <memmove+0x24>
	...

0801328c <_fstat_r>:
 801328c:	b538      	push	{r3, r4, r5, lr}
 801328e:	4d07      	ldr	r5, [pc, #28]	; (80132ac <_fstat_r+0x20>)
 8013290:	2300      	movs	r3, #0
 8013292:	4604      	mov	r4, r0
 8013294:	4608      	mov	r0, r1
 8013296:	4611      	mov	r1, r2
 8013298:	602b      	str	r3, [r5, #0]
 801329a:	f7f3 fc19 	bl	8006ad0 <_fstat>
 801329e:	1c43      	adds	r3, r0, #1
 80132a0:	d102      	bne.n	80132a8 <_fstat_r+0x1c>
 80132a2:	682b      	ldr	r3, [r5, #0]
 80132a4:	b103      	cbz	r3, 80132a8 <_fstat_r+0x1c>
 80132a6:	6023      	str	r3, [r4, #0]
 80132a8:	bd38      	pop	{r3, r4, r5, pc}
 80132aa:	bf00      	nop
 80132ac:	200056c8 	.word	0x200056c8

080132b0 <_isatty_r>:
 80132b0:	b538      	push	{r3, r4, r5, lr}
 80132b2:	4d06      	ldr	r5, [pc, #24]	; (80132cc <_isatty_r+0x1c>)
 80132b4:	2300      	movs	r3, #0
 80132b6:	4604      	mov	r4, r0
 80132b8:	4608      	mov	r0, r1
 80132ba:	602b      	str	r3, [r5, #0]
 80132bc:	f7f3 fc0e 	bl	8006adc <_isatty>
 80132c0:	1c43      	adds	r3, r0, #1
 80132c2:	d102      	bne.n	80132ca <_isatty_r+0x1a>
 80132c4:	682b      	ldr	r3, [r5, #0]
 80132c6:	b103      	cbz	r3, 80132ca <_isatty_r+0x1a>
 80132c8:	6023      	str	r3, [r4, #0]
 80132ca:	bd38      	pop	{r3, r4, r5, pc}
 80132cc:	200056c8 	.word	0x200056c8

080132d0 <abort>:
 80132d0:	b508      	push	{r3, lr}
 80132d2:	2006      	movs	r0, #6
 80132d4:	f000 f8e4 	bl	80134a0 <raise>
 80132d8:	2001      	movs	r0, #1
 80132da:	f7f3 fbef 	bl	8006abc <_exit>

080132de <_calloc_r>:
 80132de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132e0:	fba1 2402 	umull	r2, r4, r1, r2
 80132e4:	b94c      	cbnz	r4, 80132fa <_calloc_r+0x1c>
 80132e6:	4611      	mov	r1, r2
 80132e8:	9201      	str	r2, [sp, #4]
 80132ea:	f7fa ff4f 	bl	800e18c <_malloc_r>
 80132ee:	9a01      	ldr	r2, [sp, #4]
 80132f0:	4605      	mov	r5, r0
 80132f2:	b930      	cbnz	r0, 8013302 <_calloc_r+0x24>
 80132f4:	4628      	mov	r0, r5
 80132f6:	b003      	add	sp, #12
 80132f8:	bd30      	pop	{r4, r5, pc}
 80132fa:	220c      	movs	r2, #12
 80132fc:	6002      	str	r2, [r0, #0]
 80132fe:	2500      	movs	r5, #0
 8013300:	e7f8      	b.n	80132f4 <_calloc_r+0x16>
 8013302:	4621      	mov	r1, r4
 8013304:	f7fc ffa2 	bl	801024c <memset>
 8013308:	e7f4      	b.n	80132f4 <_calloc_r+0x16>

0801330a <_realloc_r>:
 801330a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801330e:	4680      	mov	r8, r0
 8013310:	4614      	mov	r4, r2
 8013312:	460e      	mov	r6, r1
 8013314:	b921      	cbnz	r1, 8013320 <_realloc_r+0x16>
 8013316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801331a:	4611      	mov	r1, r2
 801331c:	f7fa bf36 	b.w	800e18c <_malloc_r>
 8013320:	b92a      	cbnz	r2, 801332e <_realloc_r+0x24>
 8013322:	f7fd ffd7 	bl	80112d4 <_free_r>
 8013326:	4625      	mov	r5, r4
 8013328:	4628      	mov	r0, r5
 801332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801332e:	f000 f8d3 	bl	80134d8 <_malloc_usable_size_r>
 8013332:	4284      	cmp	r4, r0
 8013334:	4607      	mov	r7, r0
 8013336:	d802      	bhi.n	801333e <_realloc_r+0x34>
 8013338:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801333c:	d812      	bhi.n	8013364 <_realloc_r+0x5a>
 801333e:	4621      	mov	r1, r4
 8013340:	4640      	mov	r0, r8
 8013342:	f7fa ff23 	bl	800e18c <_malloc_r>
 8013346:	4605      	mov	r5, r0
 8013348:	2800      	cmp	r0, #0
 801334a:	d0ed      	beq.n	8013328 <_realloc_r+0x1e>
 801334c:	42bc      	cmp	r4, r7
 801334e:	4622      	mov	r2, r4
 8013350:	4631      	mov	r1, r6
 8013352:	bf28      	it	cs
 8013354:	463a      	movcs	r2, r7
 8013356:	f7fd f907 	bl	8010568 <memcpy>
 801335a:	4631      	mov	r1, r6
 801335c:	4640      	mov	r0, r8
 801335e:	f7fd ffb9 	bl	80112d4 <_free_r>
 8013362:	e7e1      	b.n	8013328 <_realloc_r+0x1e>
 8013364:	4635      	mov	r5, r6
 8013366:	e7df      	b.n	8013328 <_realloc_r+0x1e>

08013368 <_strtoul_l.constprop.0>:
 8013368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801336c:	4f36      	ldr	r7, [pc, #216]	; (8013448 <_strtoul_l.constprop.0+0xe0>)
 801336e:	4686      	mov	lr, r0
 8013370:	460d      	mov	r5, r1
 8013372:	4628      	mov	r0, r5
 8013374:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013378:	5d3e      	ldrb	r6, [r7, r4]
 801337a:	f016 0608 	ands.w	r6, r6, #8
 801337e:	d1f8      	bne.n	8013372 <_strtoul_l.constprop.0+0xa>
 8013380:	2c2d      	cmp	r4, #45	; 0x2d
 8013382:	d130      	bne.n	80133e6 <_strtoul_l.constprop.0+0x7e>
 8013384:	782c      	ldrb	r4, [r5, #0]
 8013386:	2601      	movs	r6, #1
 8013388:	1c85      	adds	r5, r0, #2
 801338a:	2b00      	cmp	r3, #0
 801338c:	d057      	beq.n	801343e <_strtoul_l.constprop.0+0xd6>
 801338e:	2b10      	cmp	r3, #16
 8013390:	d109      	bne.n	80133a6 <_strtoul_l.constprop.0+0x3e>
 8013392:	2c30      	cmp	r4, #48	; 0x30
 8013394:	d107      	bne.n	80133a6 <_strtoul_l.constprop.0+0x3e>
 8013396:	7828      	ldrb	r0, [r5, #0]
 8013398:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801339c:	2858      	cmp	r0, #88	; 0x58
 801339e:	d149      	bne.n	8013434 <_strtoul_l.constprop.0+0xcc>
 80133a0:	786c      	ldrb	r4, [r5, #1]
 80133a2:	2310      	movs	r3, #16
 80133a4:	3502      	adds	r5, #2
 80133a6:	f04f 38ff 	mov.w	r8, #4294967295
 80133aa:	2700      	movs	r7, #0
 80133ac:	fbb8 f8f3 	udiv	r8, r8, r3
 80133b0:	fb03 f908 	mul.w	r9, r3, r8
 80133b4:	ea6f 0909 	mvn.w	r9, r9
 80133b8:	4638      	mov	r0, r7
 80133ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80133be:	f1bc 0f09 	cmp.w	ip, #9
 80133c2:	d815      	bhi.n	80133f0 <_strtoul_l.constprop.0+0x88>
 80133c4:	4664      	mov	r4, ip
 80133c6:	42a3      	cmp	r3, r4
 80133c8:	dd23      	ble.n	8013412 <_strtoul_l.constprop.0+0xaa>
 80133ca:	f1b7 3fff 	cmp.w	r7, #4294967295
 80133ce:	d007      	beq.n	80133e0 <_strtoul_l.constprop.0+0x78>
 80133d0:	4580      	cmp	r8, r0
 80133d2:	d31b      	bcc.n	801340c <_strtoul_l.constprop.0+0xa4>
 80133d4:	d101      	bne.n	80133da <_strtoul_l.constprop.0+0x72>
 80133d6:	45a1      	cmp	r9, r4
 80133d8:	db18      	blt.n	801340c <_strtoul_l.constprop.0+0xa4>
 80133da:	fb00 4003 	mla	r0, r0, r3, r4
 80133de:	2701      	movs	r7, #1
 80133e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80133e4:	e7e9      	b.n	80133ba <_strtoul_l.constprop.0+0x52>
 80133e6:	2c2b      	cmp	r4, #43	; 0x2b
 80133e8:	bf04      	itt	eq
 80133ea:	782c      	ldrbeq	r4, [r5, #0]
 80133ec:	1c85      	addeq	r5, r0, #2
 80133ee:	e7cc      	b.n	801338a <_strtoul_l.constprop.0+0x22>
 80133f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80133f4:	f1bc 0f19 	cmp.w	ip, #25
 80133f8:	d801      	bhi.n	80133fe <_strtoul_l.constprop.0+0x96>
 80133fa:	3c37      	subs	r4, #55	; 0x37
 80133fc:	e7e3      	b.n	80133c6 <_strtoul_l.constprop.0+0x5e>
 80133fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013402:	f1bc 0f19 	cmp.w	ip, #25
 8013406:	d804      	bhi.n	8013412 <_strtoul_l.constprop.0+0xaa>
 8013408:	3c57      	subs	r4, #87	; 0x57
 801340a:	e7dc      	b.n	80133c6 <_strtoul_l.constprop.0+0x5e>
 801340c:	f04f 37ff 	mov.w	r7, #4294967295
 8013410:	e7e6      	b.n	80133e0 <_strtoul_l.constprop.0+0x78>
 8013412:	1c7b      	adds	r3, r7, #1
 8013414:	d106      	bne.n	8013424 <_strtoul_l.constprop.0+0xbc>
 8013416:	2322      	movs	r3, #34	; 0x22
 8013418:	f8ce 3000 	str.w	r3, [lr]
 801341c:	4638      	mov	r0, r7
 801341e:	b932      	cbnz	r2, 801342e <_strtoul_l.constprop.0+0xc6>
 8013420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013424:	b106      	cbz	r6, 8013428 <_strtoul_l.constprop.0+0xc0>
 8013426:	4240      	negs	r0, r0
 8013428:	2a00      	cmp	r2, #0
 801342a:	d0f9      	beq.n	8013420 <_strtoul_l.constprop.0+0xb8>
 801342c:	b107      	cbz	r7, 8013430 <_strtoul_l.constprop.0+0xc8>
 801342e:	1e69      	subs	r1, r5, #1
 8013430:	6011      	str	r1, [r2, #0]
 8013432:	e7f5      	b.n	8013420 <_strtoul_l.constprop.0+0xb8>
 8013434:	2430      	movs	r4, #48	; 0x30
 8013436:	2b00      	cmp	r3, #0
 8013438:	d1b5      	bne.n	80133a6 <_strtoul_l.constprop.0+0x3e>
 801343a:	2308      	movs	r3, #8
 801343c:	e7b3      	b.n	80133a6 <_strtoul_l.constprop.0+0x3e>
 801343e:	2c30      	cmp	r4, #48	; 0x30
 8013440:	d0a9      	beq.n	8013396 <_strtoul_l.constprop.0+0x2e>
 8013442:	230a      	movs	r3, #10
 8013444:	e7af      	b.n	80133a6 <_strtoul_l.constprop.0+0x3e>
 8013446:	bf00      	nop
 8013448:	080155c9 	.word	0x080155c9

0801344c <_strtoul_r>:
 801344c:	f7ff bf8c 	b.w	8013368 <_strtoul_l.constprop.0>

08013450 <_raise_r>:
 8013450:	291f      	cmp	r1, #31
 8013452:	b538      	push	{r3, r4, r5, lr}
 8013454:	4604      	mov	r4, r0
 8013456:	460d      	mov	r5, r1
 8013458:	d904      	bls.n	8013464 <_raise_r+0x14>
 801345a:	2316      	movs	r3, #22
 801345c:	6003      	str	r3, [r0, #0]
 801345e:	f04f 30ff 	mov.w	r0, #4294967295
 8013462:	bd38      	pop	{r3, r4, r5, pc}
 8013464:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013466:	b112      	cbz	r2, 801346e <_raise_r+0x1e>
 8013468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801346c:	b94b      	cbnz	r3, 8013482 <_raise_r+0x32>
 801346e:	4620      	mov	r0, r4
 8013470:	f000 f830 	bl	80134d4 <_getpid_r>
 8013474:	462a      	mov	r2, r5
 8013476:	4601      	mov	r1, r0
 8013478:	4620      	mov	r0, r4
 801347a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801347e:	f000 b817 	b.w	80134b0 <_kill_r>
 8013482:	2b01      	cmp	r3, #1
 8013484:	d00a      	beq.n	801349c <_raise_r+0x4c>
 8013486:	1c59      	adds	r1, r3, #1
 8013488:	d103      	bne.n	8013492 <_raise_r+0x42>
 801348a:	2316      	movs	r3, #22
 801348c:	6003      	str	r3, [r0, #0]
 801348e:	2001      	movs	r0, #1
 8013490:	e7e7      	b.n	8013462 <_raise_r+0x12>
 8013492:	2400      	movs	r4, #0
 8013494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013498:	4628      	mov	r0, r5
 801349a:	4798      	blx	r3
 801349c:	2000      	movs	r0, #0
 801349e:	e7e0      	b.n	8013462 <_raise_r+0x12>

080134a0 <raise>:
 80134a0:	4b02      	ldr	r3, [pc, #8]	; (80134ac <raise+0xc>)
 80134a2:	4601      	mov	r1, r0
 80134a4:	6818      	ldr	r0, [r3, #0]
 80134a6:	f7ff bfd3 	b.w	8013450 <_raise_r>
 80134aa:	bf00      	nop
 80134ac:	20000200 	.word	0x20000200

080134b0 <_kill_r>:
 80134b0:	b538      	push	{r3, r4, r5, lr}
 80134b2:	4d07      	ldr	r5, [pc, #28]	; (80134d0 <_kill_r+0x20>)
 80134b4:	2300      	movs	r3, #0
 80134b6:	4604      	mov	r4, r0
 80134b8:	4608      	mov	r0, r1
 80134ba:	4611      	mov	r1, r2
 80134bc:	602b      	str	r3, [r5, #0]
 80134be:	f7f3 faf5 	bl	8006aac <_kill>
 80134c2:	1c43      	adds	r3, r0, #1
 80134c4:	d102      	bne.n	80134cc <_kill_r+0x1c>
 80134c6:	682b      	ldr	r3, [r5, #0]
 80134c8:	b103      	cbz	r3, 80134cc <_kill_r+0x1c>
 80134ca:	6023      	str	r3, [r4, #0]
 80134cc:	bd38      	pop	{r3, r4, r5, pc}
 80134ce:	bf00      	nop
 80134d0:	200056c8 	.word	0x200056c8

080134d4 <_getpid_r>:
 80134d4:	f7f3 bae8 	b.w	8006aa8 <_getpid>

080134d8 <_malloc_usable_size_r>:
 80134d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134dc:	1f18      	subs	r0, r3, #4
 80134de:	2b00      	cmp	r3, #0
 80134e0:	bfbc      	itt	lt
 80134e2:	580b      	ldrlt	r3, [r1, r0]
 80134e4:	18c0      	addlt	r0, r0, r3
 80134e6:	4770      	bx	lr

080134e8 <_init>:
 80134e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ea:	bf00      	nop
 80134ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134ee:	bc08      	pop	{r3}
 80134f0:	469e      	mov	lr, r3
 80134f2:	4770      	bx	lr

080134f4 <_fini>:
 80134f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134f6:	bf00      	nop
 80134f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134fa:	bc08      	pop	{r3}
 80134fc:	469e      	mov	lr, r3
 80134fe:	4770      	bx	lr
