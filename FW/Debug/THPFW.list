
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010264  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d90  080103f8  080103f8  000113f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012188  08012188  00014200  2**0
                  CONTENTS
  4 .ARM          00000008  08012188  08012188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012190  08012190  00014200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012190  08012190  00013190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012194  08012194  00013194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012198  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004800  20000200  08012398  00014200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a00  08012398  00014a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003efb1  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000087ac  00000000  00000000  000531e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00019adf  00000000  00000000  0005b98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002078  00000000  00000000  00075470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000333b  00000000  00000000  000774e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b8cb  00000000  00000000  0007a823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040ba5  00000000  00000000  000a60ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3455  00000000  00000000  000e6c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001da0e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007738  00000000  00000000  001da12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  001e1864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080103dc 	.word	0x080103dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080103dc 	.word	0x080103dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_frsub>:
 8000c88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	e002      	b.n	8000c94 <__addsf3>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_fsub>:
 8000c90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c94 <__addsf3>:
 8000c94:	0042      	lsls	r2, r0, #1
 8000c96:	bf1f      	itttt	ne
 8000c98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c9c:	ea92 0f03 	teqne	r2, r3
 8000ca0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ca4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca8:	d06a      	beq.n	8000d80 <__addsf3+0xec>
 8000caa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cb2:	bfc1      	itttt	gt
 8000cb4:	18d2      	addgt	r2, r2, r3
 8000cb6:	4041      	eorgt	r1, r0
 8000cb8:	4048      	eorgt	r0, r1
 8000cba:	4041      	eorgt	r1, r0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	2b19      	cmp	r3, #25
 8000cc2:	bf88      	it	hi
 8000cc4:	4770      	bxhi	lr
 8000cc6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cce:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cda:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cde:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4249      	negne	r1, r1
 8000ce6:	ea92 0f03 	teq	r2, r3
 8000cea:	d03f      	beq.n	8000d6c <__addsf3+0xd8>
 8000cec:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cf4:	eb10 000c 	adds.w	r0, r0, ip
 8000cf8:	f1c3 0320 	rsb	r3, r3, #32
 8000cfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000d00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__addsf3+0x78>
 8000d06:	4249      	negs	r1, r1
 8000d08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d10:	d313      	bcc.n	8000d3a <__addsf3+0xa6>
 8000d12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d16:	d306      	bcc.n	8000d26 <__addsf3+0x92>
 8000d18:	0840      	lsrs	r0, r0, #1
 8000d1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d1e:	f102 0201 	add.w	r2, r2, #1
 8000d22:	2afe      	cmp	r2, #254	@ 0xfe
 8000d24:	d251      	bcs.n	8000dca <__addsf3+0x136>
 8000d26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	ea40 0003 	orr.w	r0, r0, r3
 8000d38:	4770      	bx	lr
 8000d3a:	0049      	lsls	r1, r1, #1
 8000d3c:	eb40 0000 	adc.w	r0, r0, r0
 8000d40:	3a01      	subs	r2, #1
 8000d42:	bf28      	it	cs
 8000d44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d48:	d2ed      	bcs.n	8000d26 <__addsf3+0x92>
 8000d4a:	fab0 fc80 	clz	ip, r0
 8000d4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d52:	ebb2 020c 	subs.w	r2, r2, ip
 8000d56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d5a:	bfaa      	itet	ge
 8000d5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d60:	4252      	neglt	r2, r2
 8000d62:	4318      	orrge	r0, r3
 8000d64:	bfbc      	itt	lt
 8000d66:	40d0      	lsrlt	r0, r2
 8000d68:	4318      	orrlt	r0, r3
 8000d6a:	4770      	bx	lr
 8000d6c:	f092 0f00 	teq	r2, #0
 8000d70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d74:	bf06      	itte	eq
 8000d76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d7a:	3201      	addeq	r2, #1
 8000d7c:	3b01      	subne	r3, #1
 8000d7e:	e7b5      	b.n	8000cec <__addsf3+0x58>
 8000d80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d88:	bf18      	it	ne
 8000d8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d8e:	d021      	beq.n	8000dd4 <__addsf3+0x140>
 8000d90:	ea92 0f03 	teq	r2, r3
 8000d94:	d004      	beq.n	8000da0 <__addsf3+0x10c>
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	bf08      	it	eq
 8000d9c:	4608      	moveq	r0, r1
 8000d9e:	4770      	bx	lr
 8000da0:	ea90 0f01 	teq	r0, r1
 8000da4:	bf1c      	itt	ne
 8000da6:	2000      	movne	r0, #0
 8000da8:	4770      	bxne	lr
 8000daa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dae:	d104      	bne.n	8000dba <__addsf3+0x126>
 8000db0:	0040      	lsls	r0, r0, #1
 8000db2:	bf28      	it	cs
 8000db4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000db8:	4770      	bx	lr
 8000dba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dbe:	bf3c      	itt	cc
 8000dc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dc4:	4770      	bxcc	lr
 8000dc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd8:	bf16      	itet	ne
 8000dda:	4608      	movne	r0, r1
 8000ddc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de0:	4601      	movne	r1, r0
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	bf06      	itte	eq
 8000de6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dea:	ea90 0f01 	teqeq	r0, r1
 8000dee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000df2:	4770      	bx	lr

08000df4 <__aeabi_ui2f>:
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e004      	b.n	8000e04 <__aeabi_i2f+0x8>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_i2f>:
 8000dfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e00:	bf48      	it	mi
 8000e02:	4240      	negmi	r0, r0
 8000e04:	ea5f 0c00 	movs.w	ip, r0
 8000e08:	bf08      	it	eq
 8000e0a:	4770      	bxeq	lr
 8000e0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e10:	4601      	mov	r1, r0
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	e01c      	b.n	8000e52 <__aeabi_l2f+0x2a>

08000e18 <__aeabi_ul2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e00a      	b.n	8000e3c <__aeabi_l2f+0x14>
 8000e26:	bf00      	nop

08000e28 <__aeabi_l2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e34:	d502      	bpl.n	8000e3c <__aeabi_l2f+0x14>
 8000e36:	4240      	negs	r0, r0
 8000e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3c:	ea5f 0c01 	movs.w	ip, r1
 8000e40:	bf02      	ittt	eq
 8000e42:	4684      	moveq	ip, r0
 8000e44:	4601      	moveq	r1, r0
 8000e46:	2000      	moveq	r0, #0
 8000e48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e4c:	bf08      	it	eq
 8000e4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e56:	fabc f28c 	clz	r2, ip
 8000e5a:	3a08      	subs	r2, #8
 8000e5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e60:	db10      	blt.n	8000e84 <__aeabi_l2f+0x5c>
 8000e62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6c:	f1c2 0220 	rsb	r2, r2, #32
 8000e70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e74:	fa20 f202 	lsr.w	r2, r0, r2
 8000e78:	eb43 0002 	adc.w	r0, r3, r2
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f102 0220 	add.w	r2, r2, #32
 8000e88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e94:	fa21 f202 	lsr.w	r2, r1, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_ldivmod>:
 8000ea4:	b97b      	cbnz	r3, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea6:	b972      	cbnz	r2, 8000ec6 <__aeabi_ldivmod+0x22>
 8000ea8:	2900      	cmp	r1, #0
 8000eaa:	bfbe      	ittt	lt
 8000eac:	2000      	movlt	r0, #0
 8000eae:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000eb2:	e006      	blt.n	8000ec2 <__aeabi_ldivmod+0x1e>
 8000eb4:	bf08      	it	eq
 8000eb6:	2800      	cmpeq	r0, #0
 8000eb8:	bf1c      	itt	ne
 8000eba:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ebe:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec2:	f000 b9eb 	b.w	800129c <__aeabi_idiv0>
 8000ec6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	db09      	blt.n	8000ee6 <__aeabi_ldivmod+0x42>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db1a      	blt.n	8000f0c <__aeabi_ldivmod+0x68>
 8000ed6:	f000 f883 	bl	8000fe0 <__udivmoddi4>
 8000eda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	4240      	negs	r0, r0
 8000ee8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db1b      	blt.n	8000f28 <__aeabi_ldivmod+0x84>
 8000ef0:	f000 f876 	bl	8000fe0 <__udivmoddi4>
 8000ef4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efc:	b004      	add	sp, #16
 8000efe:	4240      	negs	r0, r0
 8000f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f04:	4252      	negs	r2, r2
 8000f06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0a:	4770      	bx	lr
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	f000 f865 	bl	8000fe0 <__udivmoddi4>
 8000f16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f1e:	b004      	add	sp, #16
 8000f20:	4240      	negs	r0, r0
 8000f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f26:	4770      	bx	lr
 8000f28:	4252      	negs	r2, r2
 8000f2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f2e:	f000 f857 	bl	8000fe0 <__udivmoddi4>
 8000f32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	4770      	bx	lr

08000f44 <__aeabi_uldivmod>:
 8000f44:	b953      	cbnz	r3, 8000f5c <__aeabi_uldivmod+0x18>
 8000f46:	b94a      	cbnz	r2, 8000f5c <__aeabi_uldivmod+0x18>
 8000f48:	2900      	cmp	r1, #0
 8000f4a:	bf08      	it	eq
 8000f4c:	2800      	cmpeq	r0, #0
 8000f4e:	bf1c      	itt	ne
 8000f50:	f04f 31ff 	movne.w	r1, #4294967295
 8000f54:	f04f 30ff 	movne.w	r0, #4294967295
 8000f58:	f000 b9a0 	b.w	800129c <__aeabi_idiv0>
 8000f5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f64:	f000 f83c 	bl	8000fe0 <__udivmoddi4>
 8000f68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f70:	b004      	add	sp, #16
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdad 	bl	8000adc <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb23 	bl	80005f8 <__aeabi_dmul>
 8000fb2:	f7ff fdf9 	bl	8000ba8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff faa4 	bl	8000504 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb1a 	bl	80005f8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f95c 	bl	8000288 <__aeabi_dsub>
 8000fd0:	f7ff fdea 	bl	8000ba8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d14e      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fec:	4694      	mov	ip, r2
 8000fee:	458c      	cmp	ip, r1
 8000ff0:	4686      	mov	lr, r0
 8000ff2:	fab2 f282 	clz	r2, r2
 8000ff6:	d962      	bls.n	80010be <__udivmoddi4+0xde>
 8000ff8:	b14a      	cbz	r2, 800100e <__udivmoddi4+0x2e>
 8000ffa:	f1c2 0320 	rsb	r3, r2, #32
 8000ffe:	4091      	lsls	r1, r2
 8001000:	fa20 f303 	lsr.w	r3, r0, r3
 8001004:	fa0c fc02 	lsl.w	ip, ip, r2
 8001008:	4319      	orrs	r1, r3
 800100a:	fa00 fe02 	lsl.w	lr, r0, r2
 800100e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001012:	fa1f f68c 	uxth.w	r6, ip
 8001016:	fbb1 f4f7 	udiv	r4, r1, r7
 800101a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800101e:	fb07 1114 	mls	r1, r7, r4, r1
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb04 f106 	mul.w	r1, r4, r6
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f104 30ff 	add.w	r0, r4, #4294967295
 8001036:	f080 8112 	bcs.w	800125e <__udivmoddi4+0x27e>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 810f 	bls.w	800125e <__udivmoddi4+0x27e>
 8001040:	3c02      	subs	r4, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a59      	subs	r1, r3, r1
 8001046:	fa1f f38e 	uxth.w	r3, lr
 800104a:	fbb1 f0f7 	udiv	r0, r1, r7
 800104e:	fb07 1110 	mls	r1, r7, r0, r1
 8001052:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001056:	fb00 f606 	mul.w	r6, r0, r6
 800105a:	429e      	cmp	r6, r3
 800105c:	d90a      	bls.n	8001074 <__udivmoddi4+0x94>
 800105e:	eb1c 0303 	adds.w	r3, ip, r3
 8001062:	f100 31ff 	add.w	r1, r0, #4294967295
 8001066:	f080 80fc 	bcs.w	8001262 <__udivmoddi4+0x282>
 800106a:	429e      	cmp	r6, r3
 800106c:	f240 80f9 	bls.w	8001262 <__udivmoddi4+0x282>
 8001070:	4463      	add	r3, ip
 8001072:	3802      	subs	r0, #2
 8001074:	1b9b      	subs	r3, r3, r6
 8001076:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800107a:	2100      	movs	r1, #0
 800107c:	b11d      	cbz	r5, 8001086 <__udivmoddi4+0xa6>
 800107e:	40d3      	lsrs	r3, r2
 8001080:	2200      	movs	r2, #0
 8001082:	e9c5 3200 	strd	r3, r2, [r5]
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d905      	bls.n	800109a <__udivmoddi4+0xba>
 800108e:	b10d      	cbz	r5, 8001094 <__udivmoddi4+0xb4>
 8001090:	e9c5 0100 	strd	r0, r1, [r5]
 8001094:	2100      	movs	r1, #0
 8001096:	4608      	mov	r0, r1
 8001098:	e7f5      	b.n	8001086 <__udivmoddi4+0xa6>
 800109a:	fab3 f183 	clz	r1, r3
 800109e:	2900      	cmp	r1, #0
 80010a0:	d146      	bne.n	8001130 <__udivmoddi4+0x150>
 80010a2:	42a3      	cmp	r3, r4
 80010a4:	d302      	bcc.n	80010ac <__udivmoddi4+0xcc>
 80010a6:	4290      	cmp	r0, r2
 80010a8:	f0c0 80f0 	bcc.w	800128c <__udivmoddi4+0x2ac>
 80010ac:	1a86      	subs	r6, r0, r2
 80010ae:	eb64 0303 	sbc.w	r3, r4, r3
 80010b2:	2001      	movs	r0, #1
 80010b4:	2d00      	cmp	r5, #0
 80010b6:	d0e6      	beq.n	8001086 <__udivmoddi4+0xa6>
 80010b8:	e9c5 6300 	strd	r6, r3, [r5]
 80010bc:	e7e3      	b.n	8001086 <__udivmoddi4+0xa6>
 80010be:	2a00      	cmp	r2, #0
 80010c0:	f040 8090 	bne.w	80011e4 <__udivmoddi4+0x204>
 80010c4:	eba1 040c 	sub.w	r4, r1, ip
 80010c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010cc:	fa1f f78c 	uxth.w	r7, ip
 80010d0:	2101      	movs	r1, #1
 80010d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80010d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010da:	fb08 4416 	mls	r4, r8, r6, r4
 80010de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010e2:	fb07 f006 	mul.w	r0, r7, r6
 80010e6:	4298      	cmp	r0, r3
 80010e8:	d908      	bls.n	80010fc <__udivmoddi4+0x11c>
 80010ea:	eb1c 0303 	adds.w	r3, ip, r3
 80010ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80010f2:	d202      	bcs.n	80010fa <__udivmoddi4+0x11a>
 80010f4:	4298      	cmp	r0, r3
 80010f6:	f200 80cd 	bhi.w	8001294 <__udivmoddi4+0x2b4>
 80010fa:	4626      	mov	r6, r4
 80010fc:	1a1c      	subs	r4, r3, r0
 80010fe:	fa1f f38e 	uxth.w	r3, lr
 8001102:	fbb4 f0f8 	udiv	r0, r4, r8
 8001106:	fb08 4410 	mls	r4, r8, r0, r4
 800110a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800110e:	fb00 f707 	mul.w	r7, r0, r7
 8001112:	429f      	cmp	r7, r3
 8001114:	d908      	bls.n	8001128 <__udivmoddi4+0x148>
 8001116:	eb1c 0303 	adds.w	r3, ip, r3
 800111a:	f100 34ff 	add.w	r4, r0, #4294967295
 800111e:	d202      	bcs.n	8001126 <__udivmoddi4+0x146>
 8001120:	429f      	cmp	r7, r3
 8001122:	f200 80b0 	bhi.w	8001286 <__udivmoddi4+0x2a6>
 8001126:	4620      	mov	r0, r4
 8001128:	1bdb      	subs	r3, r3, r7
 800112a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800112e:	e7a5      	b.n	800107c <__udivmoddi4+0x9c>
 8001130:	f1c1 0620 	rsb	r6, r1, #32
 8001134:	408b      	lsls	r3, r1
 8001136:	fa22 f706 	lsr.w	r7, r2, r6
 800113a:	431f      	orrs	r7, r3
 800113c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001140:	fa04 f301 	lsl.w	r3, r4, r1
 8001144:	ea43 030c 	orr.w	r3, r3, ip
 8001148:	40f4      	lsrs	r4, r6
 800114a:	fa00 f801 	lsl.w	r8, r0, r1
 800114e:	0c38      	lsrs	r0, r7, #16
 8001150:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001154:	fbb4 fef0 	udiv	lr, r4, r0
 8001158:	fa1f fc87 	uxth.w	ip, r7
 800115c:	fb00 441e 	mls	r4, r0, lr, r4
 8001160:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001164:	fb0e f90c 	mul.w	r9, lr, ip
 8001168:	45a1      	cmp	r9, r4
 800116a:	fa02 f201 	lsl.w	r2, r2, r1
 800116e:	d90a      	bls.n	8001186 <__udivmoddi4+0x1a6>
 8001170:	193c      	adds	r4, r7, r4
 8001172:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001176:	f080 8084 	bcs.w	8001282 <__udivmoddi4+0x2a2>
 800117a:	45a1      	cmp	r9, r4
 800117c:	f240 8081 	bls.w	8001282 <__udivmoddi4+0x2a2>
 8001180:	f1ae 0e02 	sub.w	lr, lr, #2
 8001184:	443c      	add	r4, r7
 8001186:	eba4 0409 	sub.w	r4, r4, r9
 800118a:	fa1f f983 	uxth.w	r9, r3
 800118e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001192:	fb00 4413 	mls	r4, r0, r3, r4
 8001196:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800119a:	fb03 fc0c 	mul.w	ip, r3, ip
 800119e:	45a4      	cmp	ip, r4
 80011a0:	d907      	bls.n	80011b2 <__udivmoddi4+0x1d2>
 80011a2:	193c      	adds	r4, r7, r4
 80011a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011a8:	d267      	bcs.n	800127a <__udivmoddi4+0x29a>
 80011aa:	45a4      	cmp	ip, r4
 80011ac:	d965      	bls.n	800127a <__udivmoddi4+0x29a>
 80011ae:	3b02      	subs	r3, #2
 80011b0:	443c      	add	r4, r7
 80011b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011b6:	fba0 9302 	umull	r9, r3, r0, r2
 80011ba:	eba4 040c 	sub.w	r4, r4, ip
 80011be:	429c      	cmp	r4, r3
 80011c0:	46ce      	mov	lr, r9
 80011c2:	469c      	mov	ip, r3
 80011c4:	d351      	bcc.n	800126a <__udivmoddi4+0x28a>
 80011c6:	d04e      	beq.n	8001266 <__udivmoddi4+0x286>
 80011c8:	b155      	cbz	r5, 80011e0 <__udivmoddi4+0x200>
 80011ca:	ebb8 030e 	subs.w	r3, r8, lr
 80011ce:	eb64 040c 	sbc.w	r4, r4, ip
 80011d2:	fa04 f606 	lsl.w	r6, r4, r6
 80011d6:	40cb      	lsrs	r3, r1
 80011d8:	431e      	orrs	r6, r3
 80011da:	40cc      	lsrs	r4, r1
 80011dc:	e9c5 6400 	strd	r6, r4, [r5]
 80011e0:	2100      	movs	r1, #0
 80011e2:	e750      	b.n	8001086 <__udivmoddi4+0xa6>
 80011e4:	f1c2 0320 	rsb	r3, r2, #32
 80011e8:	fa20 f103 	lsr.w	r1, r0, r3
 80011ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80011f0:	fa24 f303 	lsr.w	r3, r4, r3
 80011f4:	4094      	lsls	r4, r2
 80011f6:	430c      	orrs	r4, r1
 80011f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8001200:	fa1f f78c 	uxth.w	r7, ip
 8001204:	fbb3 f0f8 	udiv	r0, r3, r8
 8001208:	fb08 3110 	mls	r1, r8, r0, r3
 800120c:	0c23      	lsrs	r3, r4, #16
 800120e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001212:	fb00 f107 	mul.w	r1, r0, r7
 8001216:	4299      	cmp	r1, r3
 8001218:	d908      	bls.n	800122c <__udivmoddi4+0x24c>
 800121a:	eb1c 0303 	adds.w	r3, ip, r3
 800121e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001222:	d22c      	bcs.n	800127e <__udivmoddi4+0x29e>
 8001224:	4299      	cmp	r1, r3
 8001226:	d92a      	bls.n	800127e <__udivmoddi4+0x29e>
 8001228:	3802      	subs	r0, #2
 800122a:	4463      	add	r3, ip
 800122c:	1a5b      	subs	r3, r3, r1
 800122e:	b2a4      	uxth	r4, r4
 8001230:	fbb3 f1f8 	udiv	r1, r3, r8
 8001234:	fb08 3311 	mls	r3, r8, r1, r3
 8001238:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800123c:	fb01 f307 	mul.w	r3, r1, r7
 8001240:	42a3      	cmp	r3, r4
 8001242:	d908      	bls.n	8001256 <__udivmoddi4+0x276>
 8001244:	eb1c 0404 	adds.w	r4, ip, r4
 8001248:	f101 36ff 	add.w	r6, r1, #4294967295
 800124c:	d213      	bcs.n	8001276 <__udivmoddi4+0x296>
 800124e:	42a3      	cmp	r3, r4
 8001250:	d911      	bls.n	8001276 <__udivmoddi4+0x296>
 8001252:	3902      	subs	r1, #2
 8001254:	4464      	add	r4, ip
 8001256:	1ae4      	subs	r4, r4, r3
 8001258:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800125c:	e739      	b.n	80010d2 <__udivmoddi4+0xf2>
 800125e:	4604      	mov	r4, r0
 8001260:	e6f0      	b.n	8001044 <__udivmoddi4+0x64>
 8001262:	4608      	mov	r0, r1
 8001264:	e706      	b.n	8001074 <__udivmoddi4+0x94>
 8001266:	45c8      	cmp	r8, r9
 8001268:	d2ae      	bcs.n	80011c8 <__udivmoddi4+0x1e8>
 800126a:	ebb9 0e02 	subs.w	lr, r9, r2
 800126e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001272:	3801      	subs	r0, #1
 8001274:	e7a8      	b.n	80011c8 <__udivmoddi4+0x1e8>
 8001276:	4631      	mov	r1, r6
 8001278:	e7ed      	b.n	8001256 <__udivmoddi4+0x276>
 800127a:	4603      	mov	r3, r0
 800127c:	e799      	b.n	80011b2 <__udivmoddi4+0x1d2>
 800127e:	4630      	mov	r0, r6
 8001280:	e7d4      	b.n	800122c <__udivmoddi4+0x24c>
 8001282:	46d6      	mov	lr, sl
 8001284:	e77f      	b.n	8001186 <__udivmoddi4+0x1a6>
 8001286:	4463      	add	r3, ip
 8001288:	3802      	subs	r0, #2
 800128a:	e74d      	b.n	8001128 <__udivmoddi4+0x148>
 800128c:	4606      	mov	r6, r0
 800128e:	4623      	mov	r3, r4
 8001290:	4608      	mov	r0, r1
 8001292:	e70f      	b.n	80010b4 <__udivmoddi4+0xd4>
 8001294:	3e02      	subs	r6, #2
 8001296:	4463      	add	r3, ip
 8001298:	e730      	b.n	80010fc <__udivmoddi4+0x11c>
 800129a:	bf00      	nop

0800129c <__aeabi_idiv0>:
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <Calc_config_crc>:
	return crc;
}

void Calc_config_crc(void)		// aktualizacja CRC struktury config
{
	config.checksum = 0xFFFF;
 80012a0:	480e      	ldr	r0, [pc, #56]	@ (80012dc <Calc_config_crc+0x3c>)
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	f880 303b 	strb.w	r3, [r0, #59]	@ 0x3b
 80012aa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
	uint8_t *p = (uint8_t*)&config;
 80012ae:	4601      	mov	r1, r0
	config.checksum = 0xFFFF;
 80012b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012b4:	f100 0c3b 	add.w	ip, r0, #59	@ 0x3b
	uint8_t x = crc >> 8 ^ data;
 80012b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80012bc:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80012c0:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 80012c4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80012c8:	ea83 3302 	eor.w	r3, r3, r2, lsl #12
 80012cc:	ea83 1342 	eor.w	r3, r3, r2, lsl #5
	for(int i=0; i<sizeof(config)-2; ++i) config.checksum = Crc16_up(config.checksum, *p++);
 80012d0:	4561      	cmp	r1, ip
 80012d2:	f8a0 303b 	strh.w	r3, [r0, #59]	@ 0x3b
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80012d6:	b29b      	uxth	r3, r3
	for(int i=0; i<sizeof(config)-2; ++i) config.checksum = Crc16_up(config.checksum, *p++);
 80012d8:	d1ee      	bne.n	80012b8 <Calc_config_crc+0x18>
}
 80012da:	4770      	bx	lr
 80012dc:	20000640 	.word	0x20000640

080012e0 <Flash_write_block>:

#define ADDR_FLASH_PAGE_0   ((uint32_t)0x08000000) /* Base @ of Page 0, 2 Kbytes */
#define FLASH_PAGE_ADDRESS 	(ADDR_FLASH_PAGE_0 | (FLASH_PAGE_SIZE * USE_FLASH_PAGE))

uint8_t Flash_write_block(uint32_t blk, uint8_t *buff, uint32_t len)
{
 80012e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e4:	b086      	sub	sp, #24
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 80012e6:	2300      	movs	r3, #0
{
 80012e8:	4606      	mov	r6, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	4690      	mov	r8, r2
	uint32_t PAGEError = 0;
 80012ee:	9301      	str	r3, [sp, #4]
//	WDR();
	HAL_FLASH_Unlock();
 80012f0:	f006 fc80 	bl	8007bf4 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80012f4:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <Flash_write_block+0x98>)
 80012f6:	699a      	ldr	r2, [r3, #24]
 80012f8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80012fc:	619a      	str	r2, [r3, #24]
 80012fe:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 8001302:	611a      	str	r2, [r3, #16]
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001304:	2301      	movs	r3, #1
 8001306:	2200      	movs	r2, #0
 8001308:	e9cd 2302 	strd	r2, r3, [sp, #8]
	EraseInitStruct.Banks       = FLASH_BANK_1;
	EraseInitStruct.Page        = blk;                                  // 2kb page
	EraseInitStruct.NbPages     = 1;
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 800130c:	a901      	add	r1, sp, #4
	EraseInitStruct.NbPages     = 1;
 800130e:	2301      	movs	r3, #1
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001310:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages     = 1;
 8001312:	e9cd 6304 	strd	r6, r3, [sp, #16]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)		// kasuj cala strone
 8001316:	f006 fd57 	bl	8007dc8 <HAL_FLASHEx_Erase>
 800131a:	bb28      	cbnz	r0, 8001368 <Flash_write_block+0x88>
		return 0;
	}
    blk *= FLASH_PAGE_SIZE;
    blk += ADDR_FLASH_PAGE_0;
	uint64_t data64;
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 800131c:	ebc4 26c6 	rsb	r6, r4, r6, lsl #11
    {
        data64 = *(uint64_t*)buff;
        buff += 8;
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 8001320:	f106 6600 	add.w	r6, r6, #134217728	@ 0x8000000
 8001324:	4605      	mov	r5, r0
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 8001326:	ea4f 08d8 	mov.w	r8, r8, lsr #3
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 800132a:	3e08      	subs	r6, #8
 800132c:	e002      	b.n	8001334 <Flash_write_block+0x54>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 800132e:	45a8      	cmp	r8, r5
 8001330:	d014      	beq.n	800135c <Flash_write_block+0x7c>
 8001332:	461d      	mov	r5, r3
        data64 = *(uint64_t*)buff;
 8001334:	e8f4 2302 	ldrd	r2, r3, [r4], #8
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 8001338:	19a7      	adds	r7, r4, r6
 800133a:	2000      	movs	r0, #0
 800133c:	4639      	mov	r1, r7
 800133e:	f006 fca3 	bl	8007c88 <HAL_FLASH_Program>
    for(uint32_t i=0; i<len/8 + 1; i++)          // zapisuj po 8 bajtow, o 8 bajtow wiecej niz trzeba
 8001342:	1c6b      	adds	r3, r5, #1
        if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, 8*i + blk, data64) != HAL_OK)    // zapisz 8 bajtow do flasha
 8001344:	2800      	cmp	r0, #0
 8001346:	d0f2      	beq.n	800132e <Flash_write_block+0x4e>
        {
            HAL_FLASH_Lock();
 8001348:	f006 fc68 	bl	8007c1c <HAL_FLASH_Lock>
//            HAL_IWDG_Refresh(&hiwdg);
            printf("Programming error at %X\r\n",(unsigned int)(8*i + blk));
 800134c:	4639      	mov	r1, r7
 800134e:	480b      	ldr	r0, [pc, #44]	@ (800137c <Flash_write_block+0x9c>)
 8001350:	f00c f9ee 	bl	800d730 <iprintf>
            return 1;                               // blad
 8001354:	2001      	movs	r0, #1
        }
    }
	HAL_FLASH_Lock();
//	WDR();
	return 0;										// OK
}
 8001356:	b006      	add	sp, #24
 8001358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	HAL_FLASH_Lock();
 800135c:	f006 fc5e 	bl	8007c1c <HAL_FLASH_Lock>
		return 0;
 8001360:	2000      	movs	r0, #0
}
 8001362:	b006      	add	sp, #24
 8001364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		HAL_FLASH_Lock();			// blad kasowania
 8001368:	f006 fc58 	bl	8007c1c <HAL_FLASH_Lock>
		printf("Erase error at %u\r\n", (int)blk);
 800136c:	4631      	mov	r1, r6
 800136e:	4804      	ldr	r0, [pc, #16]	@ (8001380 <Flash_write_block+0xa0>)
 8001370:	f00c f9de 	bl	800d730 <iprintf>
		return 0;
 8001374:	e7f4      	b.n	8001360 <Flash_write_block+0x80>
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000
 800137c:	08010448 	.word	0x08010448
 8001380:	08010434 	.word	0x08010434

08001384 <Save_config>:
    adr += (FLASH_PAGE_SIZE * USE_FLASH_PAGE);
    Flash_read(adr, data, size);
}

uint8_t Save_config(void)
{
 8001384:	b570      	push	{r4, r5, r6, lr}
    uint8_t err = 0;
    uint16_t oldcrc = config.checksum;
 8001386:	4e12      	ldr	r6, [pc, #72]	@ (80013d0 <Save_config+0x4c>)
 8001388:	f8b6 403b 	ldrh.w	r4, [r6, #59]	@ 0x3b
    Calc_config_crc();
 800138c:	f7ff ff88 	bl	80012a0 <Calc_config_crc>
    if(config.checksum != oldcrc)
 8001390:	f8b6 303b 	ldrh.w	r3, [r6, #59]	@ 0x3b
 8001394:	42a3      	cmp	r3, r4
 8001396:	d101      	bne.n	800139c <Save_config+0x18>
    uint8_t err = 0;
 8001398:	2000      	movs	r0, #0
        err  = FLASH_write_block(0, p, sizeof(config));     // zapisz do 1 kopii
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
        err++;
    }
    return err;         // 0=NotNeed, 1=OK, 2=blad
}
 800139a:	bd70      	pop	{r4, r5, r6, pc}
 800139c:	2504      	movs	r5, #4
        err =  Flash_write_block(adr, buff, len);
 800139e:	223d      	movs	r2, #61	@ 0x3d
 80013a0:	4631      	mov	r1, r6
 80013a2:	207e      	movs	r0, #126	@ 0x7e
 80013a4:	f7ff ff9c 	bl	80012e0 <Flash_write_block>
        if(err == 0) break;
 80013a8:	4604      	mov	r4, r0
 80013aa:	b108      	cbz	r0, 80013b0 <Save_config+0x2c>
    for(int i=0; i<4; ++i)
 80013ac:	3d01      	subs	r5, #1
 80013ae:	d1f6      	bne.n	800139e <Save_config+0x1a>
        err =  Flash_write_block(adr, buff, len);
 80013b0:	4e07      	ldr	r6, [pc, #28]	@ (80013d0 <Save_config+0x4c>)
 80013b2:	2504      	movs	r5, #4
 80013b4:	223d      	movs	r2, #61	@ 0x3d
 80013b6:	4631      	mov	r1, r6
 80013b8:	207f      	movs	r0, #127	@ 0x7f
 80013ba:	f7ff ff91 	bl	80012e0 <Flash_write_block>
        if(err == 0) break;
 80013be:	b118      	cbz	r0, 80013c8 <Save_config+0x44>
    for(int i=0; i<4; ++i)
 80013c0:	3d01      	subs	r5, #1
 80013c2:	d1f7      	bne.n	80013b4 <Save_config+0x30>
        err |= FLASH_write_block(1, p, sizeof(config));     // zapisz do 2 kopii
 80013c4:	4320      	orrs	r0, r4
 80013c6:	b2c4      	uxtb	r4, r0
        err++;
 80013c8:	1c60      	adds	r0, r4, #1
 80013ca:	b2c0      	uxtb	r0, r0
}
 80013cc:	bd70      	pop	{r4, r5, r6, pc}
 80013ce:	bf00      	nop
 80013d0:	20000640 	.word	0x20000640

080013d4 <Load_defaults>:
    }
    return 0;                                                   // config OK
}

void Load_defaults()
{
 80013d4:	b510      	push	{r4, lr}
	memset((uint8_t*)&config, 0, sizeof(config));
 80013d6:	4c15      	ldr	r4, [pc, #84]	@ (800142c <Load_defaults+0x58>)
 80013d8:	2236      	movs	r2, #54	@ 0x36
 80013da:	2100      	movs	r1, #0
 80013dc:	4620      	mov	r0, r4
 80013de:	f00c fb0f 	bl	800da00 <memset>

	config.version = CONFIG_VERSION;
	config.bat_scale = 0.0505f;
 80013e2:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <Load_defaults+0x5c>)
 80013e4:	f844 2c06 	str.w	r2, [r4, #-6]
	config.version = CONFIG_VERSION;
 80013e8:	1fe3      	subs	r3, r4, #7
 80013ea:	2101      	movs	r1, #1
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 80013ec:	2000      	movs	r0, #0
	config.reset_state = 0;
	config.disp_type = TXT;
 80013ee:	f04f 0200 	mov.w	r2, #0
	config.tim_interval = 8;
 80013f2:	70a0      	strb	r0, [r4, #2]
	config.disp_type = TXT;
 80013f4:	f361 0243 	bfi	r2, r1, #1, #3
	config.version = CONFIG_VERSION;
 80013f8:	f804 1c07 	strb.w	r1, [r4, #-7]
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 80013fc:	f06f 001b 	mvn.w	r0, #27
 8001400:	240c      	movs	r4, #12
	config.tim_interval = 8;
 8001402:	2108      	movs	r1, #8
	config.TMP117_use = 1;
 8001404:	f04f 0c23 	mov.w	ip, #35	@ 0x23
	config.batt_alarm = BATT_ALARM_VOLTAGE;  // definicja w main.h
 8001408:	719c      	strb	r4, [r3, #6]
 800140a:	7158      	strb	r0, [r3, #5]
	config.disp_type = TXT;
 800140c:	71da      	strb	r2, [r3, #7]
	config.TMP117_conf = 1;
	config.TMP117_t_use = 1;
	config.TMP117_t_offset = 0.0f;
	config.SHT3_use = 1;
 800140e:	2441      	movs	r4, #65	@ 0x41
	config.SHT3_conf = 0;
	config.SHT3_t_use = 0;
	config.SHT3_h_use = 1;
	config.SHT3_t_offset = 0.0f;
	config.SHT3_h_offset = 0.0f;
	config.MS8607_use = 1;
 8001410:	20e7      	movs	r0, #231	@ 0xe7
	config.tim_interval = 8;
 8001412:	7219      	strb	r1, [r3, #8]
	config.BME280_h_use = 1;
	config.BME280_p_use = 1;
	config.BME280_t_offset = 0.0f;
	config.BME280_h_offset = 0.0f;
	config.BME280_p_offset = 0.0f;
	config.DPS368_use = 1;
 8001414:	2271      	movs	r2, #113	@ 0x71
	config.BME280_use = 1;
 8001416:	21f5      	movs	r1, #245	@ 0xf5
	config.TMP117_use = 1;
 8001418:	f883 c00a 	strb.w	ip, [r3, #10]
	config.SHT3_use = 1;
 800141c:	73dc      	strb	r4, [r3, #15]
	config.MS8607_use = 1;
 800141e:	7618      	strb	r0, [r3, #24]
	config.BME280_use = 1;
 8001420:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
	config.DPS368_use = 1;
 8001424:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	config.DPS368_conf = 8;
	config.DPS368_t_use = 1;
	config.DPS368_p_use = 1;
	config.DPS368_t_offset = 0.0f;
	config.DPS368_p_offset = 0.0f;
}
 8001428:	bd10      	pop	{r4, pc}
 800142a:	bf00      	nop
 800142c:	20000647 	.word	0x20000647
 8001430:	3d4ed917 	.word	0x3d4ed917

08001434 <Load_config>:
{
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	4d39      	ldr	r5, [pc, #228]	@ (800151c <Load_config+0xe8>)
 8001438:	f1c5 6400 	rsb	r4, r5, #134217728	@ 0x8000000
 800143c:	1c6e      	adds	r6, r5, #1
 800143e:	f105 0e3d 	add.w	lr, r5, #61	@ 0x3d
 8001442:	462b      	mov	r3, r5
 8001444:	f504 347c 	add.w	r4, r4, #258048	@ 0x3f000
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 8001448:	5d1a      	ldrb	r2, [r3, r4]
 800144a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800144e:	459e      	cmp	lr, r3
 8001450:	d1fa      	bne.n	8001448 <Load_config+0x14>
    uint8_t *p = (uint8_t*)&config;
 8001452:	4933      	ldr	r1, [pc, #204]	@ (8001520 <Load_config+0xec>)
    uint16_t chk = 0xFFFF;
 8001454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001458:	f101 0c3b 	add.w	ip, r1, #59	@ 0x3b
	uint8_t x = crc >> 8 ^ data;
 800145c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001460:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001464:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
 8001468:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800146c:	ea82 3203 	eor.w	r2, r2, r3, lsl #12
 8001470:	ea82 1243 	eor.w	r2, r2, r3, lsl #5
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 8001474:	4561      	cmp	r1, ip
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 8001476:	b292      	uxth	r2, r2
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 8001478:	d1f0      	bne.n	800145c <Load_config+0x28>
    if(chk == config.checksum) eepok |= 1;                      // zaznacz ze jest ok
 800147a:	482a      	ldr	r0, [pc, #168]	@ (8001524 <Load_config+0xf0>)
 800147c:	f8b6 703b 	ldrh.w	r7, [r6, #59]	@ 0x3b
 8001480:	4b26      	ldr	r3, [pc, #152]	@ (800151c <Load_config+0xe8>)
 8001482:	1b80      	subs	r0, r0, r6
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 8001484:	5cc1      	ldrb	r1, [r0, r3]
 8001486:	f803 1f01 	strb.w	r1, [r3, #1]!
 800148a:	459e      	cmp	lr, r3
 800148c:	d1fa      	bne.n	8001484 <Load_config+0x50>
    p = (uint8_t*)&config;
 800148e:	4824      	ldr	r0, [pc, #144]	@ (8001520 <Load_config+0xec>)
    chk = 0xFFFF;
 8001490:	f64f 73ff 	movw	r3, #65535	@ 0xffff
	uint8_t x = crc >> 8 ^ data;
 8001494:	f810 1b01 	ldrb.w	r1, [r0], #1
 8001498:	ea81 2113 	eor.w	r1, r1, r3, lsr #8
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 800149c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80014a0:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80014a4:	ea83 3301 	eor.w	r3, r3, r1, lsl #12
 80014a8:	ea83 1341 	eor.w	r3, r3, r1, lsl #5
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014ac:	4560      	cmp	r0, ip
	crc = (crc << 8) ^ ((uint16_t)(x << 12)) ^ ((uint16_t)(x <<5)) ^ ((uint16_t)x);
 80014ae:	b29b      	uxth	r3, r3
    for(int i=0; i<len-2; i++) chk = Crc16_up(chk, *p++);
 80014b0:	d1f0      	bne.n	8001494 <Load_config+0x60>
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 80014b2:	f8b6 103b 	ldrh.w	r1, [r6, #59]	@ 0x3b
 80014b6:	4299      	cmp	r1, r3
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 80014b8:	f810 3c3b 	ldrb.w	r3, [r0, #-59]
    if(chk == config.checksum) eepok |= 2;                      // zaznacz ze jest ok
 80014bc:	d014      	beq.n	80014e8 <Load_config+0xb4>
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d114      	bne.n	80014ec <Load_config+0xb8>
    switch(eepok)
 80014c2:	4297      	cmp	r7, r2
 80014c4:	d112      	bne.n	80014ec <Load_config+0xb8>
    for(uint32_t i=0; i<size; ++i) data[i] = *psrc++;
 80014c6:	5d2b      	ldrb	r3, [r5, r4]
 80014c8:	f805 3f01 	strb.w	r3, [r5, #1]!
 80014cc:	45ae      	cmp	lr, r5
 80014ce:	d1fa      	bne.n	80014c6 <Load_config+0x92>
        err =  Flash_write_block(adr, buff, len);
 80014d0:	4d13      	ldr	r5, [pc, #76]	@ (8001520 <Load_config+0xec>)
 80014d2:	2404      	movs	r4, #4
 80014d4:	223d      	movs	r2, #61	@ 0x3d
 80014d6:	4629      	mov	r1, r5
 80014d8:	207f      	movs	r0, #127	@ 0x7f
 80014da:	f7ff ff01 	bl	80012e0 <Flash_write_block>
        if(err == 0) break;
 80014de:	b1d0      	cbz	r0, 8001516 <Load_config+0xe2>
    for(int i=0; i<4; ++i)
 80014e0:	3c01      	subs	r4, #1
 80014e2:	d1f7      	bne.n	80014d4 <Load_config+0xa0>
            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 80014e4:	2003      	movs	r0, #3
}
 80014e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(config.version != CONFIG_VERSION) eepok = 0;             // zmiana struktury -> laduj defaulty
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d007      	beq.n	80014fc <Load_config+0xc8>
            Load_defaults();
 80014ec:	f7ff ff72 	bl	80013d4 <Load_defaults>
            eepok = Save_config();
 80014f0:	f7ff ff48 	bl	8001384 <Save_config>
            if(eepok>1) return 3; else return 2;                // 2=zaladowano defaulty, 3=blad zapisu flash
 80014f4:	2801      	cmp	r0, #1
 80014f6:	d8f5      	bhi.n	80014e4 <Load_config+0xb0>
 80014f8:	2002      	movs	r0, #2
}
 80014fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(eepok)
 80014fc:	4297      	cmp	r7, r2
 80014fe:	d00a      	beq.n	8001516 <Load_config+0xe2>
        err =  Flash_write_block(adr, buff, len);
 8001500:	4d07      	ldr	r5, [pc, #28]	@ (8001520 <Load_config+0xec>)
    switch(eepok)
 8001502:	2404      	movs	r4, #4
        err =  Flash_write_block(adr, buff, len);
 8001504:	223d      	movs	r2, #61	@ 0x3d
 8001506:	4629      	mov	r1, r5
 8001508:	207e      	movs	r0, #126	@ 0x7e
 800150a:	f7ff fee9 	bl	80012e0 <Flash_write_block>
        if(err == 0) break;
 800150e:	b110      	cbz	r0, 8001516 <Load_config+0xe2>
    for(int i=0; i<4; ++i)
 8001510:	3c01      	subs	r4, #1
 8001512:	d1f7      	bne.n	8001504 <Load_config+0xd0>
 8001514:	e7e6      	b.n	80014e4 <Load_config+0xb0>
    return 0;                                                   // config OK
 8001516:	2000      	movs	r0, #0
}
 8001518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800151a:	bf00      	nop
 800151c:	2000063f 	.word	0x2000063f
 8001520:	20000640 	.word	0x20000640
 8001524:	0803f801 	.word	0x0803f801

08001528 <EEPROM_Print_config>:

void EEPROM_Print_config(void)
{
 8001528:	b570      	push	{r4, r5, r6, lr}
	printf("================================= \r\n");
 800152a:	4e9d      	ldr	r6, [pc, #628]	@ (80017a0 <EEPROM_Print_config+0x278>)
	printf("Config version: %i \r\n", config.version);
 800152c:	4c9d      	ldr	r4, [pc, #628]	@ (80017a4 <EEPROM_Print_config+0x27c>)
	printf("Battery scale: %f \r\n", config.bat_scale);
	printf("Low Batt alarm: %i \r\n", config.batt_alarm);
	printf("Meas interval: %i \r\n", config.tim_interval);
	printf("TMP117 sensor use %i %i \r\n", config.TMP117_use, TMP117.sensor_use);
 800152e:	4d9e      	ldr	r5, [pc, #632]	@ (80017a8 <EEPROM_Print_config+0x280>)
	printf("================================= \r\n");
 8001530:	4630      	mov	r0, r6
 8001532:	f00c f965 	bl	800d800 <puts>
	printf("Config version: %i \r\n", config.version);
 8001536:	7821      	ldrb	r1, [r4, #0]
 8001538:	489c      	ldr	r0, [pc, #624]	@ (80017ac <EEPROM_Print_config+0x284>)
 800153a:	f00c f8f9 	bl	800d730 <iprintf>
	printf("Battery scale: %f \r\n", config.bat_scale);
 800153e:	f8d4 0001 	ldr.w	r0, [r4, #1]
 8001542:	f7ff f801 	bl	8000548 <__aeabi_f2d>
 8001546:	460b      	mov	r3, r1
 8001548:	4602      	mov	r2, r0
 800154a:	4899      	ldr	r0, [pc, #612]	@ (80017b0 <EEPROM_Print_config+0x288>)
 800154c:	f00c f8f0 	bl	800d730 <iprintf>
	printf("Low Batt alarm: %i \r\n", config.batt_alarm);
 8001550:	f8b4 1005 	ldrh.w	r1, [r4, #5]
 8001554:	4897      	ldr	r0, [pc, #604]	@ (80017b4 <EEPROM_Print_config+0x28c>)
 8001556:	f00c f8eb 	bl	800d730 <iprintf>
	printf("Meas interval: %i \r\n", config.tim_interval);
 800155a:	8921      	ldrh	r1, [r4, #8]
 800155c:	4896      	ldr	r0, [pc, #600]	@ (80017b8 <EEPROM_Print_config+0x290>)
 800155e:	f00c f8e7 	bl	800d730 <iprintf>
	printf("TMP117 sensor use %i %i \r\n", config.TMP117_use, TMP117.sensor_use);
 8001562:	782a      	ldrb	r2, [r5, #0]
 8001564:	7aa1      	ldrb	r1, [r4, #10]
 8001566:	4895      	ldr	r0, [pc, #596]	@ (80017bc <EEPROM_Print_config+0x294>)
 8001568:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800156c:	f001 0101 	and.w	r1, r1, #1
 8001570:	f00c f8de 	bl	800d730 <iprintf>
	printf("TMP117 config %i %i \r\n", config.TMP117_conf, TMP117.sensor_conf);
 8001574:	782a      	ldrb	r2, [r5, #0]
 8001576:	7aa1      	ldrb	r1, [r4, #10]
 8001578:	4891      	ldr	r0, [pc, #580]	@ (80017c0 <EEPROM_Print_config+0x298>)
 800157a:	f3c2 0283 	ubfx	r2, r2, #2, #4
 800157e:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8001582:	f00c f8d5 	bl	800d730 <iprintf>
	printf("TMP117 temp meas %i %i \r\n", config.TMP117_t_use, TMP117.temp.use_meas);
 8001586:	786a      	ldrb	r2, [r5, #1]
 8001588:	7aa1      	ldrb	r1, [r4, #10]
 800158a:	488e      	ldr	r0, [pc, #568]	@ (80017c4 <EEPROM_Print_config+0x29c>)
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);

	printf("SHTC3 sensor use %i %i \r\n", config.SHT3_use, SHT3.sensor_use);
 800158c:	4d8e      	ldr	r5, [pc, #568]	@ (80017c8 <EEPROM_Print_config+0x2a0>)
	printf("TMP117 temp meas %i %i \r\n", config.TMP117_t_use, TMP117.temp.use_meas);
 800158e:	f002 0201 	and.w	r2, r2, #1
 8001592:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001596:	f00c f8cb 	bl	800d730 <iprintf>
	printf("TMP117 temp offset: %f \r\n", config.TMP117_t_offset);
 800159a:	f8d4 000b 	ldr.w	r0, [r4, #11]
 800159e:	f7fe ffd3 	bl	8000548 <__aeabi_f2d>
 80015a2:	460b      	mov	r3, r1
 80015a4:	4602      	mov	r2, r0
 80015a6:	4889      	ldr	r0, [pc, #548]	@ (80017cc <EEPROM_Print_config+0x2a4>)
 80015a8:	f00c f8c2 	bl	800d730 <iprintf>
	printf("SHTC3 sensor use %i %i \r\n", config.SHT3_use, SHT3.sensor_use);
 80015ac:	7be1      	ldrb	r1, [r4, #15]
 80015ae:	782a      	ldrb	r2, [r5, #0]
 80015b0:	4887      	ldr	r0, [pc, #540]	@ (80017d0 <EEPROM_Print_config+0x2a8>)
 80015b2:	f001 0101 	and.w	r1, r1, #1
 80015b6:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80015ba:	f00c f8b9 	bl	800d730 <iprintf>
	printf("SHTC3 config %i %i \r\n", config.SHT3_conf, SHT3.sensor_conf);
 80015be:	782a      	ldrb	r2, [r5, #0]
 80015c0:	7be1      	ldrb	r1, [r4, #15]
 80015c2:	4884      	ldr	r0, [pc, #528]	@ (80017d4 <EEPROM_Print_config+0x2ac>)
 80015c4:	f3c2 0283 	ubfx	r2, r2, #2, #4
 80015c8:	f3c1 0143 	ubfx	r1, r1, #1, #4
 80015cc:	f00c f8b0 	bl	800d730 <iprintf>
	printf("SHTC3 temp meas %i %i \r\n", config.SHT3_t_use, SHT3.temp.use_meas);
 80015d0:	786a      	ldrb	r2, [r5, #1]
 80015d2:	7be1      	ldrb	r1, [r4, #15]
 80015d4:	4880      	ldr	r0, [pc, #512]	@ (80017d8 <EEPROM_Print_config+0x2b0>)
 80015d6:	f002 0201 	and.w	r2, r2, #1
 80015da:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80015de:	f00c f8a7 	bl	800d730 <iprintf>
	printf("SHTC3 hum meas %i %i \r\n", config.SHT3_h_use, SHT3.hum.use_meas);
 80015e2:	7aaa      	ldrb	r2, [r5, #10]
 80015e4:	7be1      	ldrb	r1, [r4, #15]
 80015e6:	487d      	ldr	r0, [pc, #500]	@ (80017dc <EEPROM_Print_config+0x2b4>)
	printf("SHTC3 temp offset: %f \r\n", config.SHT3_t_offset);
	printf("SHTC3 hum offset: %f \r\n", config.SHT3_h_offset);

	printf("MS8607 sensor use %i %i \r\n", config.MS8607_use, MS8607.sensor_use);
 80015e8:	4d7d      	ldr	r5, [pc, #500]	@ (80017e0 <EEPROM_Print_config+0x2b8>)
	printf("SHTC3 hum meas %i %i \r\n", config.SHT3_h_use, SHT3.hum.use_meas);
 80015ea:	f002 0201 	and.w	r2, r2, #1
 80015ee:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80015f2:	f00c f89d 	bl	800d730 <iprintf>
	printf("SHTC3 temp offset: %f \r\n", config.SHT3_t_offset);
 80015f6:	6920      	ldr	r0, [r4, #16]
 80015f8:	f7fe ffa6 	bl	8000548 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4878      	ldr	r0, [pc, #480]	@ (80017e4 <EEPROM_Print_config+0x2bc>)
 8001602:	f00c f895 	bl	800d730 <iprintf>
	printf("SHTC3 hum offset: %f \r\n", config.SHT3_h_offset);
 8001606:	6960      	ldr	r0, [r4, #20]
 8001608:	f7fe ff9e 	bl	8000548 <__aeabi_f2d>
 800160c:	460b      	mov	r3, r1
 800160e:	4602      	mov	r2, r0
 8001610:	4875      	ldr	r0, [pc, #468]	@ (80017e8 <EEPROM_Print_config+0x2c0>)
 8001612:	f00c f88d 	bl	800d730 <iprintf>
	printf("MS8607 sensor use %i %i \r\n", config.MS8607_use, MS8607.sensor_use);
 8001616:	7e21      	ldrb	r1, [r4, #24]
 8001618:	782a      	ldrb	r2, [r5, #0]
 800161a:	4874      	ldr	r0, [pc, #464]	@ (80017ec <EEPROM_Print_config+0x2c4>)
 800161c:	f001 0101 	and.w	r1, r1, #1
 8001620:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001624:	f00c f884 	bl	800d730 <iprintf>
	printf("MS8607 config %i %i \r\n", config.MS8607_conf, MS8607.sensor_conf);
 8001628:	782a      	ldrb	r2, [r5, #0]
 800162a:	7e21      	ldrb	r1, [r4, #24]
 800162c:	4870      	ldr	r0, [pc, #448]	@ (80017f0 <EEPROM_Print_config+0x2c8>)
 800162e:	f3c2 0283 	ubfx	r2, r2, #2, #4
 8001632:	f3c1 0143 	ubfx	r1, r1, #1, #4
 8001636:	f00c f87b 	bl	800d730 <iprintf>
	printf("MS8607 temp meas %i %i \r\n", config.MS8607_t_use, MS8607.temp.use_meas);
 800163a:	786a      	ldrb	r2, [r5, #1]
 800163c:	7e21      	ldrb	r1, [r4, #24]
 800163e:	486d      	ldr	r0, [pc, #436]	@ (80017f4 <EEPROM_Print_config+0x2cc>)
 8001640:	f002 0201 	and.w	r2, r2, #1
 8001644:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001648:	f00c f872 	bl	800d730 <iprintf>
	printf("MS8607 press meas %i %i \r\n", config.MS8607_p_use, MS8607.press.use_meas);
 800164c:	7cea      	ldrb	r2, [r5, #19]
 800164e:	7e21      	ldrb	r1, [r4, #24]
 8001650:	4869      	ldr	r0, [pc, #420]	@ (80017f8 <EEPROM_Print_config+0x2d0>)
 8001652:	f002 0201 	and.w	r2, r2, #1
 8001656:	09c9      	lsrs	r1, r1, #7
 8001658:	f00c f86a 	bl	800d730 <iprintf>
	printf("MS8607 hum meas %i %i \r\n", config.MS8607_h_use, MS8607.hum.use_meas);
 800165c:	7aaa      	ldrb	r2, [r5, #10]
 800165e:	7e21      	ldrb	r1, [r4, #24]
 8001660:	4866      	ldr	r0, [pc, #408]	@ (80017fc <EEPROM_Print_config+0x2d4>)

	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);

	printf("BME280 sensor use %i %i \r\n", config.BME280_use, BME280.sensor_use);
 8001662:	4d67      	ldr	r5, [pc, #412]	@ (8001800 <EEPROM_Print_config+0x2d8>)
	printf("MS8607 hum meas %i %i \r\n", config.MS8607_h_use, MS8607.hum.use_meas);
 8001664:	f002 0201 	and.w	r2, r2, #1
 8001668:	f3c1 1180 	ubfx	r1, r1, #6, #1
 800166c:	f00c f860 	bl	800d730 <iprintf>
	printf("MS8607 temp offset: %f \r\n", config.MS8607_t_offset);
 8001670:	f8d4 0019 	ldr.w	r0, [r4, #25]
 8001674:	f7fe ff68 	bl	8000548 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4861      	ldr	r0, [pc, #388]	@ (8001804 <EEPROM_Print_config+0x2dc>)
 800167e:	f00c f857 	bl	800d730 <iprintf>
	printf("MS8607 press ofset: %f \r\n", config.MS8607_p_offset);
 8001682:	f8d4 0021 	ldr.w	r0, [r4, #33]	@ 0x21
 8001686:	f7fe ff5f 	bl	8000548 <__aeabi_f2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	485e      	ldr	r0, [pc, #376]	@ (8001808 <EEPROM_Print_config+0x2e0>)
 8001690:	f00c f84e 	bl	800d730 <iprintf>
	printf("MS8607 hum offset: %f  \r\n", config.MS8607_h_offset);
 8001694:	f8d4 001d 	ldr.w	r0, [r4, #29]
 8001698:	f7fe ff56 	bl	8000548 <__aeabi_f2d>
 800169c:	460b      	mov	r3, r1
 800169e:	4602      	mov	r2, r0
 80016a0:	485a      	ldr	r0, [pc, #360]	@ (800180c <EEPROM_Print_config+0x2e4>)
 80016a2:	f00c f845 	bl	800d730 <iprintf>
	printf("BME280 sensor use %i %i \r\n", config.BME280_use, BME280.sensor_use);
 80016a6:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80016aa:	782a      	ldrb	r2, [r5, #0]
 80016ac:	4858      	ldr	r0, [pc, #352]	@ (8001810 <EEPROM_Print_config+0x2e8>)
 80016ae:	f001 0101 	and.w	r1, r1, #1
 80016b2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80016b6:	f00c f83b 	bl	800d730 <iprintf>
	printf("BME280 temp meas %i %i \r\n", config.BME280_t_use, BME280.temp.use_meas);
 80016ba:	786a      	ldrb	r2, [r5, #1]
 80016bc:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80016c0:	4854      	ldr	r0, [pc, #336]	@ (8001814 <EEPROM_Print_config+0x2ec>)
 80016c2:	f002 0201 	and.w	r2, r2, #1
 80016c6:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80016ca:	f00c f831 	bl	800d730 <iprintf>
	printf("BME280 press meas %i %i \r\n", config.BME280_p_use, BME280.press.use_meas);
 80016ce:	7cea      	ldrb	r2, [r5, #19]
 80016d0:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80016d4:	4850      	ldr	r0, [pc, #320]	@ (8001818 <EEPROM_Print_config+0x2f0>)
 80016d6:	f002 0201 	and.w	r2, r2, #1
 80016da:	09c9      	lsrs	r1, r1, #7
 80016dc:	f00c f828 	bl	800d730 <iprintf>
	printf("BME280 hum meas %i %i \r\n", config.BME280_h_use, BME280.hum.use_meas);
 80016e0:	7aaa      	ldrb	r2, [r5, #10]
 80016e2:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
 80016e6:	484d      	ldr	r0, [pc, #308]	@ (800181c <EEPROM_Print_config+0x2f4>)

	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
	printf("BME280 hum offset: %f  \r\n", config.BME280_h_offset);

	printf("DPS368 sensor use %i %i \r\n", config.DPS368_use, DPS368.sensor_use);
 80016e8:	4d4d      	ldr	r5, [pc, #308]	@ (8001820 <EEPROM_Print_config+0x2f8>)
	printf("BME280 hum meas %i %i \r\n", config.BME280_h_use, BME280.hum.use_meas);
 80016ea:	f002 0201 	and.w	r2, r2, #1
 80016ee:	f3c1 1180 	ubfx	r1, r1, #6, #1
 80016f2:	f00c f81d 	bl	800d730 <iprintf>
	printf("BME280 temp offset: %f \r\n", config.BME280_t_offset);
 80016f6:	f8d4 0026 	ldr.w	r0, [r4, #38]	@ 0x26
 80016fa:	f7fe ff25 	bl	8000548 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4848      	ldr	r0, [pc, #288]	@ (8001824 <EEPROM_Print_config+0x2fc>)
 8001704:	f00c f814 	bl	800d730 <iprintf>
	printf("BME280 press ofset: %f \r\n", config.BME280_p_offset);
 8001708:	f8d4 002e 	ldr.w	r0, [r4, #46]	@ 0x2e
 800170c:	f7fe ff1c 	bl	8000548 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4844      	ldr	r0, [pc, #272]	@ (8001828 <EEPROM_Print_config+0x300>)
 8001716:	f00c f80b 	bl	800d730 <iprintf>
	printf("BME280 hum offset: %f  \r\n", config.BME280_h_offset);
 800171a:	f8d4 002a 	ldr.w	r0, [r4, #42]	@ 0x2a
 800171e:	f7fe ff13 	bl	8000548 <__aeabi_f2d>
 8001722:	460b      	mov	r3, r1
 8001724:	4602      	mov	r2, r0
 8001726:	4841      	ldr	r0, [pc, #260]	@ (800182c <EEPROM_Print_config+0x304>)
 8001728:	f00c f802 	bl	800d730 <iprintf>
	printf("DPS368 sensor use %i %i \r\n", config.DPS368_use, DPS368.sensor_use);
 800172c:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 8001730:	782a      	ldrb	r2, [r5, #0]
 8001732:	483f      	ldr	r0, [pc, #252]	@ (8001830 <EEPROM_Print_config+0x308>)
 8001734:	f001 0101 	and.w	r1, r1, #1
 8001738:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800173c:	f00b fff8 	bl	800d730 <iprintf>
	printf("DPS368 temp meas %i %i \r\n", config.DPS368_t_use, DPS368.temp.use_meas);
 8001740:	786a      	ldrb	r2, [r5, #1]
 8001742:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 8001746:	483b      	ldr	r0, [pc, #236]	@ (8001834 <EEPROM_Print_config+0x30c>)
 8001748:	f002 0201 	and.w	r2, r2, #1
 800174c:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001750:	f00b ffee 	bl	800d730 <iprintf>
	printf("DPS368 press meas %i %i \r\n", config.DPS368_p_use, DPS368.press.use_meas);
 8001754:	7aaa      	ldrb	r2, [r5, #10]
 8001756:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 800175a:	4837      	ldr	r0, [pc, #220]	@ (8001838 <EEPROM_Print_config+0x310>)
 800175c:	f002 0201 	and.w	r2, r2, #1
 8001760:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8001764:	f00b ffe4 	bl	800d730 <iprintf>
	printf("DPS368 temp offset: %f \r\n", config.DPS368_t_offset);
 8001768:	f8d4 0033 	ldr.w	r0, [r4, #51]	@ 0x33
 800176c:	f7fe feec 	bl	8000548 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4831      	ldr	r0, [pc, #196]	@ (800183c <EEPROM_Print_config+0x314>)
 8001776:	f00b ffdb 	bl	800d730 <iprintf>
	printf("DPS368 press offset: %f \r\n", config.DPS368_p_offset);
 800177a:	f8d4 0037 	ldr.w	r0, [r4, #55]	@ 0x37
 800177e:	f7fe fee3 	bl	8000548 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	482e      	ldr	r0, [pc, #184]	@ (8001840 <EEPROM_Print_config+0x318>)
 8001788:	f00b ffd2 	bl	800d730 <iprintf>

	printf("CHECKSUM: 0x%4X \r\n", config.checksum);
 800178c:	f8b4 103b 	ldrh.w	r1, [r4, #59]	@ 0x3b
 8001790:	482c      	ldr	r0, [pc, #176]	@ (8001844 <EEPROM_Print_config+0x31c>)
 8001792:	f00b ffcd 	bl	800d730 <iprintf>
	printf("================================= \r\n");
 8001796:	4630      	mov	r0, r6

}
 8001798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("================================= \r\n");
 800179c:	f00c b830 	b.w	800d800 <puts>
 80017a0:	08010464 	.word	0x08010464
 80017a4:	20000640 	.word	0x20000640
 80017a8:	2000072c 	.word	0x2000072c
 80017ac:	08010488 	.word	0x08010488
 80017b0:	080104a0 	.word	0x080104a0
 80017b4:	080104b8 	.word	0x080104b8
 80017b8:	080104d0 	.word	0x080104d0
 80017bc:	080104e8 	.word	0x080104e8
 80017c0:	08010504 	.word	0x08010504
 80017c4:	0801051c 	.word	0x0801051c
 80017c8:	20000714 	.word	0x20000714
 80017cc:	08010538 	.word	0x08010538
 80017d0:	08010554 	.word	0x08010554
 80017d4:	08010570 	.word	0x08010570
 80017d8:	08010588 	.word	0x08010588
 80017dc:	080105a4 	.word	0x080105a4
 80017e0:	200006f0 	.word	0x200006f0
 80017e4:	080105bc 	.word	0x080105bc
 80017e8:	080105d8 	.word	0x080105d8
 80017ec:	080105f0 	.word	0x080105f0
 80017f0:	0801060c 	.word	0x0801060c
 80017f4:	08010624 	.word	0x08010624
 80017f8:	08010640 	.word	0x08010640
 80017fc:	0801065c 	.word	0x0801065c
 8001800:	200006cc 	.word	0x200006cc
 8001804:	08010678 	.word	0x08010678
 8001808:	08010694 	.word	0x08010694
 800180c:	080106b0 	.word	0x080106b0
 8001810:	080106cc 	.word	0x080106cc
 8001814:	080106e8 	.word	0x080106e8
 8001818:	08010704 	.word	0x08010704
 800181c:	08010720 	.word	0x08010720
 8001820:	200006b4 	.word	0x200006b4
 8001824:	0801073c 	.word	0x0801073c
 8001828:	08010758 	.word	0x08010758
 800182c:	08010774 	.word	0x08010774
 8001830:	08010790 	.word	0x08010790
 8001834:	080107ac 	.word	0x080107ac
 8001838:	080107c8 	.word	0x080107c8
 800183c:	080107e4 	.word	0x080107e4
 8001840:	08010800 	.word	0x08010800
 8001844:	0801081c 	.word	0x0801081c

08001848 <SIM_HW_OFF>:
 */
#include "SIM868.h"

void SIM_HW_OFF()
{
	SIM_OFF();
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <SIM_HW_OFF+0xc>)
 800184a:	2200      	movs	r2, #0
 800184c:	2101      	movs	r1, #1
 800184e:	f006 bc45 	b.w	80080dc <HAL_GPIO_WritePin>
 8001852:	bf00      	nop
 8001854:	48000400 	.word	0x48000400

08001858 <GPS_ON>:
}

void GPS_ON()
{

}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <GPS_OFF>:

void GPS_OFF()
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <ADC_DMA_Start>:
	  printf("ADC 1: %d , ADC 2: %d ADC 3: %d ADC 4: %d ADC 5: %d \r\n", adc_data[0], adc_data[1], adc_data[2], adc_data[3], adc_data[4]);
}


void ADC_DMA_Start()
{
 8001860:	b510      	push	{r4, lr}
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);                    // ADC calibration
 8001862:	4c07      	ldr	r4, [pc, #28]	@ (8001880 <ADC_DMA_Start+0x20>)
 8001864:	217f      	movs	r1, #127	@ 0x7f
 8001866:	4620      	mov	r0, r4
 8001868:	f005 fed2 	bl	8007610 <HAL_ADCEx_Calibration_Start>
	  HAL_Delay(10);
 800186c:	200a      	movs	r0, #10
 800186e:	f005 fa5f 	bl	8006d30 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 8001872:	4620      	mov	r0, r4
 8001874:	4903      	ldr	r1, [pc, #12]	@ (8001884 <ADC_DMA_Start+0x24>)
}
 8001876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adc_data, 5);   // start ADC DMA (1 channel, 5 reads per channel)
 800187a:	2205      	movs	r2, #5
 800187c:	f005 be3a 	b.w	80074f4 <HAL_ADC_Start_DMA>
 8001880:	20000558 	.word	0x20000558
 8001884:	2000021c 	.word	0x2000021c

08001888 <GET_MCU_Temp>:
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
   	    uint16_t cal_value = *((uint16_t*) ((uint32_t)0x1FFF75CA));

	  	for(uint8_t i=0; i<5;i+=1)
	  	{
	  		tmp+=adc_data[i];
 8001888:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <GET_MCU_Temp+0x90>)
	  	}
	  	tmp*=0.2f;
 800188a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800191c <GET_MCU_Temp+0x94>
	  		tmp+=adc_data[i];
 800188e:	8811      	ldrh	r1, [r2, #0]
 8001890:	8853      	ldrh	r3, [r2, #2]
 8001892:	8890      	ldrh	r0, [r2, #4]
 8001894:	440b      	add	r3, r1
 8001896:	88d1      	ldrh	r1, [r2, #6]
 8001898:	8912      	ldrh	r2, [r2, #8]
 800189a:	4403      	add	r3, r0
 800189c:	440b      	add	r3, r1
 800189e:	4413      	add	r3, r2
	  	tmp*=0.2f;
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80018aa:	b570      	push	{r4, r5, r6, lr}
	  	tmp*=0.2f;
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
	    uint16_t cal_temp = *((uint16_t*) ((uint32_t)0x1FFF75A8));
 80018b0:	4e1b      	ldr	r6, [pc, #108]	@ (8001920 <GET_MCU_Temp+0x98>)
	  	tmp*=0.2f;
 80018b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15

	  	temperature = ((cal_temp - (float)tmp) * 4.3) / cal_value + 25.0;
 80018b6:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	@ 0xa8
 80018ba:	ee07 3a10 	vmov	s14, r3
 80018be:	ee17 3a90 	vmov	r3, s15
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80018cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d4:	ee17 0a90 	vmov	r0, s15
 80018d8:	f7fe fe36 	bl	8000548 <__aeabi_f2d>
 80018dc:	a30c      	add	r3, pc, #48	@ (adr r3, 8001910 <GET_MCU_Temp+0x88>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fe89 	bl	80005f8 <__aeabi_dmul>
 80018e6:	4604      	mov	r4, r0
 80018e8:	f8b6 00ca 	ldrh.w	r0, [r6, #202]	@ 0xca
 80018ec:	460d      	mov	r5, r1
 80018ee:	f7fe fe19 	bl	8000524 <__aeabi_i2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7fe ffa7 	bl	800084c <__aeabi_ddiv>
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <GET_MCU_Temp+0x9c>)
 8001900:	2200      	movs	r2, #0
 8001902:	f7fe fcc3 	bl	800028c <__adddf3>
 8001906:	f7ff f96f 	bl	8000be8 <__aeabi_d2f>
	  	return temperature;
}
 800190a:	ee00 0a10 	vmov	s0, r0
 800190e:	bd70      	pop	{r4, r5, r6, pc}
 8001910:	33333333 	.word	0x33333333
 8001914:	40113333 	.word	0x40113333
 8001918:	2000021c 	.word	0x2000021c
 800191c:	3e4ccccd 	.word	0x3e4ccccd
 8001920:	1fff7500 	.word	0x1fff7500
 8001924:	40390000 	.word	0x40390000

08001928 <read_register16.isra.0>:
	params->oversampling_temperature = BMP280_STANDARD;
	params->oversampling_humidity = BMP280_STANDARD;
	params->standby = BMP280_STANDBY_250;
}

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001928:	b510      	push	{r4, lr}
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800192a:	ea4f 0c40 	mov.w	ip, r0, lsl #1
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800192e:	b086      	sub	sp, #24
 8001930:	4608      	mov	r0, r1

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001932:	fa1f f18c 	uxth.w	r1, ip
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001936:	469c      	mov	ip, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001938:	2302      	movs	r3, #2
 800193a:	f241 3488 	movw	r4, #5000	@ 0x1388
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	ab05      	add	r3, sp, #20
 8001942:	9402      	str	r4, [sp, #8]
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2301      	movs	r3, #1
static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001948:	4664      	mov	r4, ip
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800194a:	f007 f825 	bl	8008998 <HAL_I2C_Mem_Read>
 800194e:	b928      	cbnz	r0, 800195c <read_register16.isra.0+0x34>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001950:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001954:	8023      	strh	r3, [r4, #0]
		return true;
 8001956:	2001      	movs	r0, #1
	} else
		return false;

}
 8001958:	b006      	add	sp, #24
 800195a:	bd10      	pop	{r4, pc}
		return false;
 800195c:	2000      	movs	r0, #0
}
 800195e:	b006      	add	sp, #24
 8001960:	bd10      	pop	{r4, pc}
 8001962:	bf00      	nop

08001964 <bmp280_init>:
		return false;
	else
		return true;
}

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001968:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 800196a:	f1a3 0276 	sub.w	r2, r3, #118	@ 0x76
 800196e:	2a01      	cmp	r2, #1
bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001970:	b087      	sub	sp, #28
	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001972:	d904      	bls.n	800197e <bmp280_init+0x1a>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {

		return false;
 8001974:	2700      	movs	r7, #0
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}

	return true;
}
 8001976:	4638      	mov	r0, r7
 8001978:	b007      	add	sp, #28
 800197a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	9202      	str	r2, [sp, #8]
 8001984:	460d      	mov	r5, r1
	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001986:	f100 0232 	add.w	r2, r0, #50	@ 0x32
	tx_buff = (dev->addr << 1);
 800198a:	0059      	lsls	r1, r3, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800198c:	2301      	movs	r3, #1
 800198e:	e9cd 2300 	strd	r2, r3, [sp]
 8001992:	4604      	mov	r4, r0
 8001994:	b289      	uxth	r1, r1
 8001996:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001998:	22d0      	movs	r2, #208	@ 0xd0
 800199a:	f006 fffd 	bl	8008998 <HAL_I2C_Mem_Read>
 800199e:	2800      	cmp	r0, #0
 80019a0:	d1e8      	bne.n	8001974 <bmp280_init+0x10>
	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80019a2:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 80019a6:	2b58      	cmp	r3, #88	@ 0x58
 80019a8:	d001      	beq.n	80019ae <bmp280_init+0x4a>
 80019aa:	2b60      	cmp	r3, #96	@ 0x60
 80019ac:	d1e2      	bne.n	8001974 <bmp280_init+0x10>
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80019ae:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80019b0:	2701      	movs	r7, #1
 80019b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019b6:	ae05      	add	r6, sp, #20
 80019b8:	23b6      	movs	r3, #182	@ 0xb6
 80019ba:	9202      	str	r2, [sp, #8]
	tx_buff = (dev->addr << 1);
 80019bc:	40b9      	lsls	r1, r7
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80019be:	9701      	str	r7, [sp, #4]
 80019c0:	9600      	str	r6, [sp, #0]
 80019c2:	f88d 3014 	strb.w	r3, [sp, #20]
 80019c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80019c8:	b289      	uxth	r1, r1
 80019ca:	463b      	mov	r3, r7
 80019cc:	22e0      	movs	r2, #224	@ 0xe0
 80019ce:	f006 febd 	bl	800874c <HAL_I2C_Mem_Write>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d1ce      	bne.n	8001974 <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80019d6:	f241 3888 	movw	r8, #5000	@ 0x1388
	tx_buff = (dev->addr << 1);
 80019da:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80019dc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80019de:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 80019e0:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80019e2:	2301      	movs	r3, #1
 80019e4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80019e8:	b289      	uxth	r1, r1
 80019ea:	22f3      	movs	r2, #243	@ 0xf3
 80019ec:	f006 ffd4 	bl	8008998 <HAL_I2C_Mem_Read>
				&& (status & 1) == 0)
 80019f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	4303      	orrs	r3, r0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ec      	bne.n	80019da <bmp280_init+0x76>
	tx_buff = (dev->addr << 1);
 8001a00:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a02:	f8cd 8008 	str.w	r8, [sp, #8]
 8001a06:	2702      	movs	r7, #2
	tx_buff = (dev->addr << 1);
 8001a08:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a0a:	9600      	str	r6, [sp, #0]
 8001a0c:	9701      	str	r7, [sp, #4]
 8001a0e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001a10:	b289      	uxth	r1, r1
 8001a12:	2301      	movs	r3, #1
 8001a14:	2288      	movs	r2, #136	@ 0x88
 8001a16:	f006 ffbf 	bl	8008998 <HAL_I2C_Mem_Read>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d1aa      	bne.n	8001974 <bmp280_init+0x10>
 8001a1e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8001a22:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001a24:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001a26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001a2a:	8023      	strh	r3, [r4, #0]
	tx_buff = (dev->addr << 1);
 8001a2c:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a2e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001a30:	b289      	uxth	r1, r1
 8001a32:	2301      	movs	r3, #1
 8001a34:	228a      	movs	r2, #138	@ 0x8a
 8001a36:	f006 ffaf 	bl	8008998 <HAL_I2C_Mem_Read>
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d19a      	bne.n	8001974 <bmp280_init+0x10>
 8001a3e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8001a42:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001a44:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001a46:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001a4a:	8063      	strh	r3, [r4, #2]
	tx_buff = (dev->addr << 1);
 8001a4c:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a4e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001a50:	b289      	uxth	r1, r1
 8001a52:	2301      	movs	r3, #1
 8001a54:	228c      	movs	r2, #140	@ 0x8c
 8001a56:	f006 ff9f 	bl	8008998 <HAL_I2C_Mem_Read>
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d18a      	bne.n	8001974 <bmp280_init+0x10>
 8001a5e:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8001a62:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001a64:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001a66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001a6a:	80a3      	strh	r3, [r4, #4]
	tx_buff = (dev->addr << 1);
 8001a6c:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a6e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001a70:	b289      	uxth	r1, r1
 8001a72:	2301      	movs	r3, #1
 8001a74:	228e      	movs	r2, #142	@ 0x8e
 8001a76:	f006 ff8f 	bl	8008998 <HAL_I2C_Mem_Read>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	f47f af7a 	bne.w	8001974 <bmp280_init+0x10>
 8001a80:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8001a84:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001a86:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001a88:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001a8c:	80e3      	strh	r3, [r4, #6]
	tx_buff = (dev->addr << 1);
 8001a8e:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001a90:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001a92:	b289      	uxth	r1, r1
 8001a94:	2301      	movs	r3, #1
 8001a96:	2290      	movs	r2, #144	@ 0x90
 8001a98:	f006 ff7e 	bl	8008998 <HAL_I2C_Mem_Read>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	f47f af69 	bne.w	8001974 <bmp280_init+0x10>
 8001aa2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8001aa6:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001aa8:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001aaa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001aae:	8123      	strh	r3, [r4, #8]
	tx_buff = (dev->addr << 1);
 8001ab0:	0049      	lsls	r1, r1, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001ab2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001ab4:	b289      	uxth	r1, r1
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2292      	movs	r2, #146	@ 0x92
 8001aba:	f006 ff6d 	bl	8008998 <HAL_I2C_Mem_Read>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	f47f af58 	bne.w	8001974 <bmp280_init+0x10>
 8001ac4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8001ac8:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001aca:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001acc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8001ad0:	8160      	strh	r0, [r4, #10]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001ad2:	2301      	movs	r3, #1
	tx_buff = (dev->addr << 1);
 8001ad4:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001ad6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001ad8:	2294      	movs	r2, #148	@ 0x94
 8001ada:	b289      	uxth	r1, r1
 8001adc:	f006 ff5c 	bl	8008998 <HAL_I2C_Mem_Read>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	f47f af47 	bne.w	8001974 <bmp280_init+0x10>
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001ae6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8001aea:	81a3      	strh	r3, [r4, #12]
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001aec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001aee:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8001af0:	f104 030e 	add.w	r3, r4, #14
 8001af4:	2296      	movs	r2, #150	@ 0x96
 8001af6:	f7ff ff17 	bl	8001928 <read_register16.isra.0>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	f43f af3a 	beq.w	8001974 <bmp280_init+0x10>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001b00:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001b02:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8001b04:	f104 0310 	add.w	r3, r4, #16
 8001b08:	2298      	movs	r2, #152	@ 0x98
 8001b0a:	f7ff ff0d 	bl	8001928 <read_register16.isra.0>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	f43f af30 	beq.w	8001974 <bmp280_init+0x10>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001b14:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001b16:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8001b18:	f104 0312 	add.w	r3, r4, #18
 8001b1c:	229a      	movs	r2, #154	@ 0x9a
 8001b1e:	f7ff ff03 	bl	8001928 <read_register16.isra.0>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	f43f af26 	beq.w	8001974 <bmp280_init+0x10>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001b28:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001b2a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8001b2c:	f104 0314 	add.w	r3, r4, #20
 8001b30:	229c      	movs	r2, #156	@ 0x9c
 8001b32:	f7ff fef9 	bl	8001928 <read_register16.isra.0>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	f43f af1c 	beq.w	8001974 <bmp280_init+0x10>
			&& read_register16(dev, 0x9e,
 8001b3c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001b3e:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8001b40:	f104 0316 	add.w	r3, r4, #22
 8001b44:	229e      	movs	r2, #158	@ 0x9e
 8001b46:	f7ff feef 	bl	8001928 <read_register16.isra.0>
 8001b4a:	4607      	mov	r7, r0
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	f43f af11 	beq.w	8001974 <bmp280_init+0x10>
	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001b52:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
 8001b56:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8001b58:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001b5a:	2a60      	cmp	r2, #96	@ 0x60
 8001b5c:	d03d      	beq.n	8001bda <bmp280_init+0x276>
	tx_buff = (dev->addr << 1);
 8001b5e:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001b60:	9600      	str	r6, [sp, #0]
 8001b62:	b299      	uxth	r1, r3
	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001b64:	786b      	ldrb	r3, [r5, #1]
 8001b66:	796a      	ldrb	r2, [r5, #5]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8001b6e:	f88d 3014 	strb.w	r3, [sp, #20]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001b72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b76:	2301      	movs	r3, #1
 8001b78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b7c:	22f5      	movs	r2, #245	@ 0xf5
 8001b7e:	f006 fde5 	bl	800874c <HAL_I2C_Mem_Write>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	f47f aef6 	bne.w	8001974 <bmp280_init+0x10>
	if (params->mode == BMP280_MODE_FORCED) {
 8001b88:	f895 8000 	ldrb.w	r8, [r5]
			| (params->oversampling_pressure << 2) | (params->mode);
 8001b8c:	78ab      	ldrb	r3, [r5, #2]
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001b8e:	78ea      	ldrb	r2, [r5, #3]
	if (params->mode == BMP280_MODE_FORCED) {
 8001b90:	f1b8 0f01 	cmp.w	r8, #1
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001b94:	bf08      	it	eq
 8001b96:	7028      	strbeq	r0, [r5, #0]
			| (params->oversampling_pressure << 2) | (params->mode);
 8001b98:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b9c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	if (dev->id == BME280_CHIP_ID) {
 8001ba0:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001ba4:	bf08      	it	eq
 8001ba6:	4680      	moveq	r8, r0
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001ba8:	ea48 0803 	orr.w	r8, r8, r3
	if (dev->id == BME280_CHIP_ID) {
 8001bac:	2a60      	cmp	r2, #96	@ 0x60
 8001bae:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8001bb0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001bb2:	fa5f f888 	uxtb.w	r8, r8
	if (dev->id == BME280_CHIP_ID) {
 8001bb6:	d07a      	beq.n	8001cae <bmp280_init+0x34a>
	tx_buff = (dev->addr << 1);
 8001bb8:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001bba:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001bbe:	b299      	uxth	r1, r3
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001bc6:	9600      	str	r6, [sp, #0]
 8001bc8:	22f4      	movs	r2, #244	@ 0xf4
 8001bca:	f88d 8014 	strb.w	r8, [sp, #20]
 8001bce:	f006 fdbd 	bl	800874c <HAL_I2C_Mem_Write>
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	f47f aece 	bne.w	8001974 <bmp280_init+0x10>
 8001bd8:	e6cd      	b.n	8001976 <bmp280_init+0x12>
	tx_buff = (dev->addr << 1);
 8001bda:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001bdc:	f04f 0801 	mov.w	r8, #1
 8001be0:	b299      	uxth	r1, r3
 8001be2:	f241 3988 	movw	r9, #5000	@ 0x1388
	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001be6:	f104 0318 	add.w	r3, r4, #24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8001bf0:	4643      	mov	r3, r8
 8001bf2:	22a1      	movs	r2, #161	@ 0xa1
 8001bf4:	f006 fed0 	bl	8008998 <HAL_I2C_Mem_Read>
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	f47f aebb 	bne.w	8001974 <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001bfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8001c02:	9600      	str	r6, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001c04:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001c06:	2302      	movs	r3, #2
 8001c08:	9301      	str	r3, [sp, #4]
	tx_buff = (dev->addr << 1);
 8001c0a:	fa01 f108 	lsl.w	r1, r1, r8
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001c0e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001c10:	b289      	uxth	r1, r1
 8001c12:	4643      	mov	r3, r8
 8001c14:	22e1      	movs	r2, #225	@ 0xe1
 8001c16:	f006 febf 	bl	8008998 <HAL_I2C_Mem_Read>
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	f47f aeaa 	bne.w	8001974 <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001c20:	e9cd 8901 	strd	r8, r9, [sp, #4]
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001c24:	f8bd 3014 	ldrh.w	r3, [sp, #20]
	tx_buff = (dev->addr << 1);
 8001c28:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001c2a:	8363      	strh	r3, [r4, #26]
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001c2c:	f104 031c 	add.w	r3, r4, #28
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001c30:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001c32:	fa01 f108 	lsl.w	r1, r1, r8
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001c36:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001c38:	b289      	uxth	r1, r1
 8001c3a:	4643      	mov	r3, r8
 8001c3c:	22e3      	movs	r2, #227	@ 0xe3
 8001c3e:	f006 feab 	bl	8008998 <HAL_I2C_Mem_Read>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	f47f ae96 	bne.w	8001974 <bmp280_init+0x10>
			&& read_register16(dev, 0xe4, &h4)
 8001c48:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001c4a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8001c4c:	f10d 0312 	add.w	r3, sp, #18
 8001c50:	22e4      	movs	r2, #228	@ 0xe4
 8001c52:	f7ff fe69 	bl	8001928 <read_register16.isra.0>
 8001c56:	2800      	cmp	r0, #0
 8001c58:	f43f ae8c 	beq.w	8001974 <bmp280_init+0x10>
			&& read_register16(dev, 0xe5, &h5)
 8001c5c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001c5e:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8001c60:	4633      	mov	r3, r6
 8001c62:	22e5      	movs	r2, #229	@ 0xe5
 8001c64:	f7ff fe60 	bl	8001928 <read_register16.isra.0>
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	f43f ae83 	beq.w	8001974 <bmp280_init+0x10>
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001c6e:	e9cd 8901 	strd	r8, r9, [sp, #4]
	tx_buff = (dev->addr << 1);
 8001c72:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001c74:	f104 0222 	add.w	r2, r4, #34	@ 0x22
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001c78:	4643      	mov	r3, r8
 8001c7a:	9200      	str	r2, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001c7c:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001c7e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001c80:	b289      	uxth	r1, r1
 8001c82:	22e7      	movs	r2, #231	@ 0xe7
 8001c84:	f006 fe88 	bl	8008998 <HAL_I2C_Mem_Read>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	f47f ae73 	bne.w	8001974 <bmp280_init+0x10>
		dev->dig_H5 = h5 >> 4;
 8001c8e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001c92:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8001c96:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
		dev->dig_H5 = h5 >> 4;
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	8423      	strh	r3, [r4, #32]
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001c9c:	0113      	lsls	r3, r2, #4
 8001c9e:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001ca2:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	83e3      	strh	r3, [r4, #30]
		return true;
 8001caa:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8001cac:	e757      	b.n	8001b5e <bmp280_init+0x1fa>
	tx_buff = (dev->addr << 1);
 8001cae:	005b      	lsls	r3, r3, #1
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001cb0:	b299      	uxth	r1, r3
 8001cb2:	792b      	ldrb	r3, [r5, #4]
 8001cb4:	f88d 3014 	strb.w	r3, [sp, #20]
 8001cb8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001cc2:	9600      	str	r6, [sp, #0]
 8001cc4:	22f2      	movs	r2, #242	@ 0xf2
 8001cc6:	f006 fd41 	bl	800874c <HAL_I2C_Mem_Write>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	f47f ae52 	bne.w	8001974 <bmp280_init+0x10>
 8001cd0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001cd2:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8001cd4:	e770      	b.n	8001bb8 <bmp280_init+0x254>
 8001cd6:	bf00      	nop

08001cd8 <bmp280_force_measurement>:

bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8001cd8:	b530      	push	{r4, r5, lr}
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001cda:	f241 3288 	movw	r2, #5000	@ 0x1388
bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8001cde:	b087      	sub	sp, #28
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001ce0:	2501      	movs	r5, #1
	tx_buff = (dev->addr << 1);
 8001ce2:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001ce4:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001ce8:	f10d 0316 	add.w	r3, sp, #22
 8001cec:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001cee:	40a9      	lsls	r1, r5
bool bmp280_force_measurement(BMP280_HandleTypedef *dev) {
 8001cf0:	4604      	mov	r4, r0
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001cf2:	b289      	uxth	r1, r1
 8001cf4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001cf6:	462b      	mov	r3, r5
 8001cf8:	22f4      	movs	r2, #244	@ 0xf4
 8001cfa:	f006 fe4d 	bl	8008998 <HAL_I2C_Mem_Read>
 8001cfe:	b110      	cbz	r0, 8001d06 <bmp280_force_measurement+0x2e>
	uint8_t ctrl;
	if (read_data(dev, BMP280_REG_CTRL, &ctrl, 1))
		return false;
 8001d00:	2000      	movs	r0, #0
	ctrl |= BMP280_MODE_FORCED;
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
		return false;
	}
	return true;
}
 8001d02:	b007      	add	sp, #28
 8001d04:	bd30      	pop	{r4, r5, pc}
	ctrl &= ~0b11;  // clear two lower bits
 8001d06:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001d0a:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001d0c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001d0e:	f242 7310 	movw	r3, #10000	@ 0x2710
	ctrl &= ~0b11;  // clear two lower bits
 8001d12:	f022 0203 	bic.w	r2, r2, #3
	ctrl |= BMP280_MODE_FORCED;
 8001d16:	432a      	orrs	r2, r5
	tx_buff = (dev->addr << 1);
 8001d18:	40a9      	lsls	r1, r5
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001d1a:	9302      	str	r3, [sp, #8]
 8001d1c:	f10d 0317 	add.w	r3, sp, #23
 8001d20:	e9cd 3500 	strd	r3, r5, [sp]
	ctrl |= BMP280_MODE_FORCED;
 8001d24:	f88d 2016 	strb.w	r2, [sp, #22]
	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001d28:	f88d 2017 	strb.w	r2, [sp, #23]
	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001d2c:	b289      	uxth	r1, r1
 8001d2e:	462b      	mov	r3, r5
 8001d30:	22f4      	movs	r2, #244	@ 0xf4
 8001d32:	f006 fd0b 	bl	800874c <HAL_I2C_Mem_Write>
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d1e2      	bne.n	8001d00 <bmp280_force_measurement+0x28>
	return true;
 8001d3a:	4628      	mov	r0, r5
}
 8001d3c:	b007      	add	sp, #28
 8001d3e:	bd30      	pop	{r4, r5, pc}

08001d40 <bmp280_is_measuring>:

bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8001d40:	b510      	push	{r4, lr}
	tx_buff = (dev->addr << 1);
 8001d42:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001d44:	6a80      	ldr	r0, [r0, #40]	@ 0x28
bool bmp280_is_measuring(BMP280_HandleTypedef *dev) {
 8001d46:	b086      	sub	sp, #24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f10d 0217 	add.w	r2, sp, #23
 8001d4e:	f241 3488 	movw	r4, #5000	@ 0x1388
	tx_buff = (dev->addr << 1);
 8001d52:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001d54:	9200      	str	r2, [sp, #0]
 8001d56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001d5a:	b289      	uxth	r1, r1
 8001d5c:	22f3      	movs	r2, #243	@ 0xf3
 8001d5e:	f006 fe1b 	bl	8008998 <HAL_I2C_Mem_Read>
 8001d62:	b110      	cbz	r0, 8001d6a <bmp280_is_measuring+0x2a>
	uint8_t status;
	if (read_data(dev, BMP280_REG_STATUS, &status, 1))
		return false;
 8001d64:	2000      	movs	r0, #0
	if (status & (1 << 3)) {
		return true;
	}
	return false;
}
 8001d66:	b006      	add	sp, #24
 8001d68:	bd10      	pop	{r4, pc}
	if (status & (1 << 3)) {
 8001d6a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001d6e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
}
 8001d72:	b006      	add	sp, #24
 8001d74:	bd10      	pop	{r4, pc}
 8001d76:	bf00      	nop

08001d78 <bmp280_read_fixed>:
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
	return v_x1_u32r >> 12;
}

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d7c:	4604      	mov	r4, r0
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001d7e:	f890 0032 	ldrb.w	r0, [r0, #50]	@ 0x32
		uint32_t *humidity) {
 8001d82:	b08f      	sub	sp, #60	@ 0x3c
	if (dev->id != BME280_CHIP_ID) {
 8001d84:	2860      	cmp	r0, #96	@ 0x60
		uint32_t *humidity) {
 8001d86:	4688      	mov	r8, r1
 8001d88:	9205      	str	r2, [sp, #20]
 8001d8a:	461e      	mov	r6, r3
	if (dev->id != BME280_CHIP_ID) {
 8001d8c:	f000 8153 	beq.w	8002036 <bmp280_read_fixed+0x2be>
		if (humidity)
 8001d90:	b10b      	cbz	r3, 8001d96 <bmp280_read_fixed+0x1e>
			*humidity = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	6033      	str	r3, [r6, #0]
 8001d96:	2306      	movs	r3, #6
 8001d98:	2600      	movs	r6, #0
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8001d9e:	9300      	str	r3, [sp, #0]
	tx_buff = (dev->addr << 1);
 8001da0:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da6:	2301      	movs	r3, #1
 8001da8:	9202      	str	r2, [sp, #8]
	tx_buff = (dev->addr << 1);
 8001daa:	4099      	lsls	r1, r3
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001dac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8001dae:	b289      	uxth	r1, r1
 8001db0:	22f7      	movs	r2, #247	@ 0xf7
 8001db2:	f006 fdf1 	bl	8008998 <HAL_I2C_Mem_Read>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	f040 8139 	bne.w	800202e <bmp280_read_fixed+0x2b6>
	if (read_data(dev, 0xf7, data, size)) {
		return false;
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001dbc:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 8001dc0:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 8001dc4:	f89d 1035 	ldrb.w	r1, [sp, #53]	@ 0x35
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001dc8:	f9b4 c00a 	ldrsh.w	ip, [r4, #10]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001dcc:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8001dd0:	9706      	str	r7, [sp, #24]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001dd8:	8822      	ldrh	r2, [r4, #0]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001dda:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001dde:	ebc2 1313 	rsb	r3, r2, r3, lsr #4
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001de2:	fb03 f503 	mul.w	r5, r3, r3
			* (int32_t) dev->dig_T3) >> 14;
 8001de6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001dea:	132d      	asrs	r5, r5, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001dec:	fb03 f505 	mul.w	r5, r3, r5
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001df0:	0052      	lsls	r2, r2, #1
			* (int32_t) dev->dig_T2) >> 11;
 8001df2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001df6:	ebc2 02d1 	rsb	r2, r2, r1, lsr #3
			* (int32_t) dev->dig_T2) >> 11;
 8001dfa:	fb03 f202 	mul.w	r2, r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001dfe:	13ad      	asrs	r5, r5, #14
	*fine_temp = var1 + var2;
 8001e00:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	return (*fine_temp * 5 + 128) >> 8;
 8001e04:	eb05 0985 	add.w	r9, r5, r5, lsl #2
 8001e08:	f109 0980 	add.w	r9, r9, #128	@ 0x80
 8001e0c:	ea4f 2929 	mov.w	r9, r9, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001e10:	88e1      	ldrh	r1, [r4, #6]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001e12:	f9b4 2008 	ldrsh.w	r2, [r4, #8]

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001e16:	f8c8 9000 	str.w	r9, [r8]
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001e1a:	f89d 8031 	ldrb.w	r8, [sp, #49]	@ 0x31
 8001e1e:	f8cd 801c 	str.w	r8, [sp, #28]
 8001e22:	f89d 8032 	ldrb.w	r8, [sp, #50]	@ 0x32
 8001e26:	f8cd 8020 	str.w	r8, [sp, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001e2a:	f9b4 8010 	ldrsh.w	r8, [r4, #16]
 8001e2e:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001e32:	f9b4 800e 	ldrsh.w	r8, [r4, #14]
 8001e36:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8001e3a:	f5a5 3efa 	sub.w	lr, r5, #128000	@ 0x1f400
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001e3e:	f9b4 800c 	ldrsh.w	r8, [r4, #12]
 8001e42:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001e46:	fb8e 890e 	smull	r8, r9, lr, lr
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001e4a:	ea4f 7bec 	mov.w	fp, ip, asr #31
 8001e4e:	fb0c fa09 	mul.w	sl, ip, r9
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001e52:	fb82 230e 	smull	r2, r3, r2, lr
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001e56:	fb08 aa0b 	mla	sl, r8, fp, sl
 8001e5a:	fbac cb08 	umull	ip, fp, ip, r8
 8001e5e:	44d3      	add	fp, sl
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001e60:	031b      	lsls	r3, r3, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001e62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001e66:	ea43 5312 	orr.w	r3, r3, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001e6a:	ea4c 6c0b 	orr.w	ip, ip, fp, lsl #24
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001e6e:	0312      	lsls	r2, r2, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001e70:	eb1c 0c02 	adds.w	ip, ip, r2
 8001e74:	eb43 232b 	adc.w	r3, r3, fp, asr #8
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001e78:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001e7c:	fbac c201 	umull	ip, r2, ip, r1
 8001e80:	fb01 2103 	mla	r1, r1, r3, r2
 8001e84:	17cb      	asrs	r3, r1, #31
 8001e86:	104a      	asrs	r2, r1, #1
	if (var1 == 0) {
 8001e88:	ea53 0161 	orrs.w	r1, r3, r1, asr #1
 8001e8c:	f000 808a 	beq.w	8001fa4 <bmp280_read_fixed+0x22c>
	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001e90:	9908      	ldr	r1, [sp, #32]
 8001e92:	9f07      	ldr	r7, [sp, #28]
 8001e94:	0909      	lsrs	r1, r1, #4
 8001e96:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8001e9a:	9f06      	ldr	r7, [sp, #24]
 8001e9c:	ea41 3107 	orr.w	r1, r1, r7, lsl #12
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001ea0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8001ea2:	fb87 ec0e 	smull	lr, ip, r7, lr
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001ea6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001ea8:	ea4f 4c4c 	mov.w	ip, ip, lsl #17
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001eac:	fb07 f909 	mul.w	r9, r7, r9
 8001eb0:	ea4f 7ae7 	mov.w	sl, r7, asr #31
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001eb4:	ea4c 3cde 	orr.w	ip, ip, lr, lsr #15
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001eb8:	fb08 9a0a 	mla	sl, r8, sl, r9
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001ebc:	ea4f 4e4e 	mov.w	lr, lr, lsl #17
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001ec0:	fba7 9808 	umull	r9, r8, r7, r8
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001ec4:	eb1e 0e09 	adds.w	lr, lr, r9
	p = 1048576 - adc_press;
 8001ec8:	f5c1 1180 	rsb	r1, r1, #1048576	@ 0x100000
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001ecc:	44c2      	add	sl, r8
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001ece:	eb4a 0a0c 	adc.w	sl, sl, ip
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001ed2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8001ed4:	eb10 000e 	adds.w	r0, r0, lr
	p = (((p << 31) - var2) * 3125) / var1;
 8001ed8:	f001 4e00 	and.w	lr, r1, #2147483648	@ 0x80000000
 8001edc:	ea4e 0e51 	orr.w	lr, lr, r1, lsr #1
 8001ee0:	07c9      	lsls	r1, r1, #31
 8001ee2:	ebb1 0800 	subs.w	r8, r1, r0
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001ee6:	eb0a 0ac7 	add.w	sl, sl, r7, lsl #3
	p = (((p << 31) - var2) * 3125) / var1;
 8001eea:	eb6e 0e0a 	sbc.w	lr, lr, sl
 8001eee:	eb18 0c08 	adds.w	ip, r8, r8
 8001ef2:	eb4e 010e 	adc.w	r1, lr, lr
 8001ef6:	eb1c 0c08 	adds.w	ip, ip, r8
 8001efa:	eb4e 0101 	adc.w	r1, lr, r1
 8001efe:	0188      	lsls	r0, r1, #6
 8001f00:	ea4f 198c 	mov.w	r9, ip, lsl #6
 8001f04:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 8001f08:	eb1c 0c09 	adds.w	ip, ip, r9
 8001f0c:	eb41 0100 	adc.w	r1, r1, r0
 8001f10:	0089      	lsls	r1, r1, #2
 8001f12:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8001f16:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001f1a:	eb1c 0c08 	adds.w	ip, ip, r8
 8001f1e:	eb4e 0101 	adc.w	r1, lr, r1
 8001f22:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8001f26:	0089      	lsls	r1, r1, #2
 8001f28:	eb10 0008 	adds.w	r0, r0, r8
 8001f2c:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8001f30:	eb4e 0101 	adc.w	r1, lr, r1
 8001f34:	f7fe ffb6 	bl	8000ea4 <__aeabi_ldivmod>
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001f38:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
	p = (((p << 31) - var2) * 3125) / var1;
 8001f3c:	4684      	mov	ip, r0
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001f3e:	ea4f 3e5c 	mov.w	lr, ip, lsr #13
 8001f42:	1348      	asrs	r0, r1, #13
 8001f44:	ea4e 4ec1 	orr.w	lr, lr, r1, lsl #19
 8001f48:	17d3      	asrs	r3, r2, #31
 8001f4a:	fb02 f800 	mul.w	r8, r2, r0
 8001f4e:	fb0e 8903 	mla	r9, lr, r3, r8
 8001f52:	fba2 280e 	umull	r2, r8, r2, lr
 8001f56:	fb02 f000 	mul.w	r0, r2, r0
 8001f5a:	44c8      	add	r8, r9
 8001f5c:	fb0e 0008 	mla	r0, lr, r8, r0
 8001f60:	fba2 2e0e 	umull	r2, lr, r2, lr
 8001f64:	4486      	add	lr, r0
 8001f66:	0e52      	lsrs	r2, r2, #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001f68:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001f6c:	ea42 12ce 	orr.w	r2, r2, lr, lsl #7
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001f70:	eb12 000c 	adds.w	r0, r2, ip
 8001f74:	eb41 626e 	adc.w	r2, r1, lr, asr #25
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001f78:	fb03 f101 	mul.w	r1, r3, r1
 8001f7c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
 8001f80:	fb0e 110c 	mla	r1, lr, ip, r1
 8001f84:	fba3 3c0c 	umull	r3, ip, r3, ip
 8001f88:	4461      	add	r1, ip
 8001f8a:	0cdb      	lsrs	r3, r3, #19
 8001f8c:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001f90:	18c0      	adds	r0, r0, r3
 8001f92:	eb42 42e1 	adc.w	r2, r2, r1, asr #19
 8001f96:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8001f9a:	0a00      	lsrs	r0, r0, #8
 8001f9c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
	return p;
 8001fa0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001fa4:	9b05      	ldr	r3, [sp, #20]
 8001fa6:	6018      	str	r0, [r3, #0]

	if (humidity) {
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	d03c      	beq.n	8002026 <bmp280_read_fixed+0x2ae>
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001fac:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8001fb0:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001fb4:	f994 1022 	ldrsb.w	r1, [r4, #34]	@ 0x22
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001fb8:	ba5b      	rev16	r3, r3
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	0512      	lsls	r2, r2, #20
 8001fbe:	ebc2 3283 	rsb	r2, r2, r3, lsl #14
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001fc2:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001fc6:	f5a5 3596 	sub.w	r5, r5, #76800	@ 0x12c00
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001fca:	fb05 2213 	mls	r2, r5, r3, r2
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001fce:	7f23      	ldrb	r3, [r4, #28]
 8001fd0:	fb05 f303 	mul.w	r3, r5, r3
 8001fd4:	12db      	asrs	r3, r3, #11
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001fd6:	fb05 f101 	mul.w	r1, r5, r1
 8001fda:	1289      	asrs	r1, r1, #10
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001fdc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001fe4:	129b      	asrs	r3, r3, #10
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001fe6:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001fea:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001ff2:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ff6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001ffa:	13d2      	asrs	r2, r2, #15
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ffc:	139b      	asrs	r3, r3, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002002:	13da      	asrs	r2, r3, #15
					* (int32_t) dev->dig_H1) >> 4);
 8002004:	7e21      	ldrb	r1, [r4, #24]
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002006:	fb02 f202 	mul.w	r2, r2, r2
 800200a:	11d2      	asrs	r2, r2, #7
					* (int32_t) dev->dig_H1) >> 4);
 800200c:	fb01 f202 	mul.w	r2, r1, r2
	v_x1_u32r = v_x1_u32r
 8002010:	eba3 1322 	sub.w	r3, r3, r2, asr #4
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002014:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002018:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800201c:	bfa8      	it	ge
 800201e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
	return v_x1_u32r >> 12;
 8002022:	131b      	asrs	r3, r3, #12
		int32_t adc_humidity = data[6] << 8 | data[7];
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002024:	6033      	str	r3, [r6, #0]
	}

	return true;
 8002026:	2001      	movs	r0, #1
}
 8002028:	b00f      	add	sp, #60	@ 0x3c
 800202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
 800202e:	2000      	movs	r0, #0
}
 8002030:	b00f      	add	sp, #60	@ 0x3c
 8002032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	size_t size = humidity ? 8 : 6;
 8002036:	2b00      	cmp	r3, #0
 8002038:	f43f aead 	beq.w	8001d96 <bmp280_read_fixed+0x1e>
 800203c:	2308      	movs	r3, #8
 800203e:	e6ac      	b.n	8001d9a <bmp280_read_fixed+0x22>

08002040 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	460d      	mov	r5, r1
 8002044:	b084      	sub	sp, #16
 8002046:	4616      	mov	r6, r2
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002048:	b313      	cbz	r3, 8002090 <bmp280_read_float+0x50>
 800204a:	461c      	mov	r4, r3
 800204c:	aa02      	add	r2, sp, #8
 800204e:	ab03      	add	r3, sp, #12
 8002050:	a901      	add	r1, sp, #4
 8002052:	f7ff fe91 	bl	8001d78 <bmp280_read_fixed>
 8002056:	b910      	cbnz	r0, 800205e <bmp280_read_float+0x1e>
		if (humidity)
			*humidity = (float) fixed_humidity / 1024;
		return true;
	}

	return false;
 8002058:	2000      	movs	r0, #0
}
 800205a:	b004      	add	sp, #16
 800205c:	bd70      	pop	{r4, r5, r6, pc}
		*temperature = (float) fixed_temperature / 100;
 800205e:	eddd 7a01 	vldr	s15, [sp, #4]
 8002062:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80020c0 <bmp280_read_float+0x80>
 8002066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206a:	eec7 6a87 	vdiv.f32	s13, s15, s14
		*pressure = (float) fixed_pressure / 256;
 800206e:	ed9d 7a02 	vldr	s14, [sp, #8]
			*humidity = (float) fixed_humidity / 1024;
 8002072:	eddd 7a03 	vldr	s15, [sp, #12]
		*temperature = (float) fixed_temperature / 100;
 8002076:	edc5 6a00 	vstr	s13, [r5]
		*pressure = (float) fixed_pressure / 256;
 800207a:	eebb 7acc 	vcvt.f32.u32	s14, s14, #8
			*humidity = (float) fixed_humidity / 1024;
 800207e:	eefb 7acb 	vcvt.f32.u32	s15, s15, #10
		*pressure = (float) fixed_pressure / 256;
 8002082:	ed86 7a00 	vstr	s14, [r6]
			*humidity = (float) fixed_humidity / 1024;
 8002086:	edc4 7a00 	vstr	s15, [r4]
		return true;
 800208a:	2001      	movs	r0, #1
}
 800208c:	b004      	add	sp, #16
 800208e:	bd70      	pop	{r4, r5, r6, pc}
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002090:	aa02      	add	r2, sp, #8
 8002092:	a901      	add	r1, sp, #4
 8002094:	f7ff fe70 	bl	8001d78 <bmp280_read_fixed>
 8002098:	2800      	cmp	r0, #0
 800209a:	d0dd      	beq.n	8002058 <bmp280_read_float+0x18>
		*temperature = (float) fixed_temperature / 100;
 800209c:	eddd 7a01 	vldr	s15, [sp, #4]
 80020a0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80020c0 <bmp280_read_float+0x80>
 80020a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		*pressure = (float) fixed_pressure / 256;
 80020ac:	eddd 7a02 	vldr	s15, [sp, #8]
		*temperature = (float) fixed_temperature / 100;
 80020b0:	ed85 7a00 	vstr	s14, [r5]
		*pressure = (float) fixed_pressure / 256;
 80020b4:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
 80020b8:	edc6 7a00 	vstr	s15, [r6]
		if (humidity)
 80020bc:	e7e5      	b.n	800208a <bmp280_read_float+0x4a>
 80020be:	bf00      	nop
 80020c0:	42c80000 	.word	0x42c80000

080020c4 <BQ25798_check>:
#define BQ25798_ADDR 0x6B << 1


// Checking
uint8_t BQ25798_check()
{
 80020c4:	b570      	push	{r4, r5, r6, lr}
	HAL_StatusTypeDef status;
	uint8_t res;
	printf("Checking BQ25798 ... ");
 80020c6:	4815      	ldr	r0, [pc, #84]	@ (800211c <BQ25798_check+0x58>)
	for (int i = 0; i < 5; i++) {
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 80020c8:	4e15      	ldr	r6, [pc, #84]	@ (8002120 <BQ25798_check+0x5c>)
	printf("Checking BQ25798 ... ");
 80020ca:	f00b fb31 	bl	800d730 <iprintf>
 80020ce:	2505      	movs	r5, #5
		status = HAL_I2C_IsDeviceReady(&hi2c1, BQ25798_ADDR, 3, 1500);
 80020d0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80020d4:	2203      	movs	r2, #3
 80020d6:	21d6      	movs	r1, #214	@ 0xd6
 80020d8:	4630      	mov	r0, r6
 80020da:	f006 fd7b 	bl	8008bd4 <HAL_I2C_IsDeviceReady>
 80020de:	4604      	mov	r4, r0
		osDelay(50);
 80020e0:	2032      	movs	r0, #50	@ 0x32
 80020e2:	f008 fc87 	bl	800a9f4 <osDelay>
	    	BQ25798_set_ADC();
	    	res = OK;
	        break;
	    } else {
	    	res = FAULT;
	    	osDelay(500);
 80020e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
	    if (status == HAL_OK) {
 80020ea:	b144      	cbz	r4, 80020fe <BQ25798_check+0x3a>
	    	osDelay(500);
 80020ec:	f008 fc82 	bl	800a9f4 <osDelay>
	for (int i = 0; i < 5; i++) {
 80020f0:	3d01      	subs	r5, #1
 80020f2:	d1ed      	bne.n	80020d0 <BQ25798_check+0xc>
	    }
	}
	if(res == FAULT) printf("not ready\r\n");
 80020f4:	480b      	ldr	r0, [pc, #44]	@ (8002124 <BQ25798_check+0x60>)
 80020f6:	f00b fb83 	bl	800d800 <puts>
 80020fa:	4628      	mov	r0, r5
	return res;
}
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
	    	printf("OK !\r\n");
 80020fe:	480a      	ldr	r0, [pc, #40]	@ (8002128 <BQ25798_check+0x64>)
 8002100:	f00b fb7e 	bl	800d800 <puts>

void BQ25798_set_ADC()
{
	uint8_t reg;
	reg = 0b10000000;
	i2c_write8(&hi2c1, REG2E_ADC_Control, reg, BQ25798_ADDR);
 8002104:	23d6      	movs	r3, #214	@ 0xd6
 8002106:	2280      	movs	r2, #128	@ 0x80
 8002108:	212e      	movs	r1, #46	@ 0x2e
 800210a:	4805      	ldr	r0, [pc, #20]	@ (8002120 <BQ25798_check+0x5c>)
 800210c:	f004 f8f6 	bl	80062fc <i2c_write8>
	osDelay(1);
 8002110:	2001      	movs	r0, #1
 8002112:	f008 fc6f 	bl	800a9f4 <osDelay>
	    	res = OK;
 8002116:	2001      	movs	r0, #1
}
 8002118:	bd70      	pop	{r4, r5, r6, pc}
 800211a:	bf00      	nop
 800211c:	08010830 	.word	0x08010830
 8002120:	20000498 	.word	0x20000498
 8002124:	08010850 	.word	0x08010850
 8002128:	08010848 	.word	0x08010848

0800212c <BQ25798_Vbat_read>:
}

uint16_t BQ25798_Vbat_read()
{
 800212c:	b500      	push	{lr}
 800212e:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG3B_VBAT_ADC, &value, BQ25798_ADDR);
 8002130:	23d6      	movs	r3, #214	@ 0xd6
 8002132:	f10d 0206 	add.w	r2, sp, #6
 8002136:	213b      	movs	r1, #59	@ 0x3b
 8002138:	4804      	ldr	r0, [pc, #16]	@ (800214c <BQ25798_Vbat_read+0x20>)
 800213a:	f004 f8c9 	bl	80062d0 <i2c_read16>
    return byteswap16(value);
 800213e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002142:	f004 f959 	bl	80063f8 <byteswap16>
}
 8002146:	b003      	add	sp, #12
 8002148:	f85d fb04 	ldr.w	pc, [sp], #4
 800214c:	20000498 	.word	0x20000498

08002150 <BQ25798_Vsys_read>:

uint16_t BQ25798_Vsys_read()
{
 8002150:	b500      	push	{lr}
 8002152:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG3D_VSYS_ADC, &value, BQ25798_ADDR);
 8002154:	23d6      	movs	r3, #214	@ 0xd6
 8002156:	f10d 0206 	add.w	r2, sp, #6
 800215a:	213d      	movs	r1, #61	@ 0x3d
 800215c:	4804      	ldr	r0, [pc, #16]	@ (8002170 <BQ25798_Vsys_read+0x20>)
 800215e:	f004 f8b7 	bl	80062d0 <i2c_read16>
    return byteswap16(value);
 8002162:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002166:	f004 f947 	bl	80063f8 <byteswap16>
}
 800216a:	b003      	add	sp, #12
 800216c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002170:	20000498 	.word	0x20000498

08002174 <BQ25798_Vac1_read>:
    i2c_read16(&hi2c1, REG35_VBUS_ADC, &value, BQ25798_ADDR);
    return byteswap16(value);
}

uint16_t BQ25798_Vac1_read()
{
 8002174:	b500      	push	{lr}
 8002176:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG37_VAC1_ADC, &value, BQ25798_ADDR);
 8002178:	23d6      	movs	r3, #214	@ 0xd6
 800217a:	f10d 0206 	add.w	r2, sp, #6
 800217e:	2137      	movs	r1, #55	@ 0x37
 8002180:	4804      	ldr	r0, [pc, #16]	@ (8002194 <BQ25798_Vac1_read+0x20>)
 8002182:	f004 f8a5 	bl	80062d0 <i2c_read16>
    return byteswap16(value);
 8002186:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800218a:	f004 f935 	bl	80063f8 <byteswap16>
}
 800218e:	b003      	add	sp, #12
 8002190:	f85d fb04 	ldr.w	pc, [sp], #4
 8002194:	20000498 	.word	0x20000498

08002198 <BQ25798_Vac2_read>:

uint16_t BQ25798_Vac2_read()
{
 8002198:	b500      	push	{lr}
 800219a:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG39_VAC2_ADC, &value, BQ25798_ADDR);
 800219c:	23d6      	movs	r3, #214	@ 0xd6
 800219e:	f10d 0206 	add.w	r2, sp, #6
 80021a2:	2139      	movs	r1, #57	@ 0x39
 80021a4:	4804      	ldr	r0, [pc, #16]	@ (80021b8 <BQ25798_Vac2_read+0x20>)
 80021a6:	f004 f893 	bl	80062d0 <i2c_read16>
    return byteswap16(value);
 80021aa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80021ae:	f004 f923 	bl	80063f8 <byteswap16>
}
 80021b2:	b003      	add	sp, #12
 80021b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80021b8:	20000498 	.word	0x20000498

080021bc <BQ25798_Ibus_read>:

uint16_t BQ25798_Ibus_read()
{
 80021bc:	b500      	push	{lr}
 80021be:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG31_IBUS_ADC, &value, BQ25798_ADDR);
 80021c0:	23d6      	movs	r3, #214	@ 0xd6
 80021c2:	f10d 0206 	add.w	r2, sp, #6
 80021c6:	2131      	movs	r1, #49	@ 0x31
 80021c8:	4804      	ldr	r0, [pc, #16]	@ (80021dc <BQ25798_Ibus_read+0x20>)
 80021ca:	f004 f881 	bl	80062d0 <i2c_read16>
    return byteswap16(value);
 80021ce:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80021d2:	f004 f911 	bl	80063f8 <byteswap16>
}
 80021d6:	b003      	add	sp, #12
 80021d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021dc:	20000498 	.word	0x20000498

080021e0 <BQ25798_Ibat_read>:

uint16_t BQ25798_Ibat_read()
{
 80021e0:	b500      	push	{lr}
 80021e2:	b083      	sub	sp, #12
	uint16_t value;
    i2c_read16(&hi2c1, REG33_IBAT_ADC, &value, BQ25798_ADDR);
 80021e4:	23d6      	movs	r3, #214	@ 0xd6
 80021e6:	f10d 0206 	add.w	r2, sp, #6
 80021ea:	2133      	movs	r1, #51	@ 0x33
 80021ec:	4804      	ldr	r0, [pc, #16]	@ (8002200 <BQ25798_Ibat_read+0x20>)
 80021ee:	f004 f86f 	bl	80062d0 <i2c_read16>
    return byteswap16(value);
 80021f2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80021f6:	f004 f8ff 	bl	80063f8 <byteswap16>
}
 80021fa:	b003      	add	sp, #12
 80021fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002200:	20000498 	.word	0x20000498

08002204 <BQ25798_Sys_Min_Voltage_read>:

uint16_t BQ25798_Sys_Min_Voltage_read()
{
 8002204:	b500      	push	{lr}
 8002206:	b087      	sub	sp, #28
	uint8_t value;
	uint8_t mask = 0x3F;
	uint16_t voltage;
    HAL_I2C_Mem_Read(&hi2c1, BQ25798_ADDR, REG00_Minimal_System_Voltage, I2C_MEMADD_SIZE_8BIT, &value, 1, 500);
 8002208:	2301      	movs	r3, #1
 800220a:	f10d 0217 	add.w	r2, sp, #23
 800220e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002212:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002216:	9200      	str	r2, [sp, #0]
 8002218:	21d6      	movs	r1, #214	@ 0xd6
 800221a:	2200      	movs	r2, #0
 800221c:	4808      	ldr	r0, [pc, #32]	@ (8002240 <BQ25798_Sys_Min_Voltage_read+0x3c>)
 800221e:	f006 fbbb 	bl	8008998 <HAL_I2C_Mem_Read>
    voltage= value & mask;
 8002222:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002226:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
    voltage *= 250;
 800222a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800222e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002232:	0040      	lsls	r0, r0, #1
    voltage += 2500;
 8002234:	f600 10c4 	addw	r0, r0, #2500	@ 0x9c4
    return voltage;
 8002238:	b280      	uxth	r0, r0
}
 800223a:	b007      	add	sp, #28
 800223c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002240:	20000498 	.word	0x20000498

08002244 <BQ25798_Chr_Volt_Limit_read>:

uint16_t BQ25798_Chr_Volt_Limit_read()
{
 8002244:	b500      	push	{lr}
 8002246:	b083      	sub	sp, #12
	uint16_t value;
	i2c_read16(&hi2c1, REG01_Charge_Voltage_Limit, &value, BQ25798_ADDR);
 8002248:	23d6      	movs	r3, #214	@ 0xd6
 800224a:	f10d 0206 	add.w	r2, sp, #6
 800224e:	2101      	movs	r1, #1
 8002250:	4806      	ldr	r0, [pc, #24]	@ (800226c <BQ25798_Chr_Volt_Limit_read+0x28>)
 8002252:	f004 f83d 	bl	80062d0 <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8002256:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800225a:	f004 f8cd 	bl	80063f8 <byteswap16>
    return swapvalue * 10;
 800225e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002262:	0040      	lsls	r0, r0, #1
 8002264:	b280      	uxth	r0, r0
}
 8002266:	b003      	add	sp, #12
 8002268:	f85d fb04 	ldr.w	pc, [sp], #4
 800226c:	20000498 	.word	0x20000498

08002270 <BQ25798_Chr_Curr_Limit_read>:

uint16_t BQ25798_Chr_Curr_Limit_read()
{
 8002270:	b500      	push	{lr}
 8002272:	b083      	sub	sp, #12
	uint16_t value;
	i2c_read16(&hi2c1, REG03_Charge_Current_Limit, &value, BQ25798_ADDR);
 8002274:	23d6      	movs	r3, #214	@ 0xd6
 8002276:	f10d 0206 	add.w	r2, sp, #6
 800227a:	2103      	movs	r1, #3
 800227c:	4806      	ldr	r0, [pc, #24]	@ (8002298 <BQ25798_Chr_Curr_Limit_read+0x28>)
 800227e:	f004 f827 	bl	80062d0 <i2c_read16>
    uint16_t swapvalue = byteswap16(value);
 8002282:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002286:	f004 f8b7 	bl	80063f8 <byteswap16>
    return swapvalue * 10;
 800228a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800228e:	0040      	lsls	r0, r0, #1
 8002290:	b280      	uxth	r0, r0
}
 8002292:	b003      	add	sp, #12
 8002294:	f85d fb04 	ldr.w	pc, [sp], #4
 8002298:	20000498 	.word	0x20000498

0800229c <BQ25798_Sys_Min_Voltage_write>:

uint8_t BQ25798_Sys_Min_Voltage_write(uint8_t bits) // 6 bits multiplier (2500mV + 6bits * 250mV) e.g 3000mV = 2500 + 3*250 = 3,25V / bits=3
{
 800229c:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG00_Minimal_System_Voltage, (bits & 0x3F), BQ25798_ADDR);
 800229e:	23d6      	movs	r3, #214	@ 0xd6
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <BQ25798_Sys_Min_Voltage_write+0x10>)
 80022a2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80022a6:	2100      	movs	r1, #0
 80022a8:	f004 b828 	b.w	80062fc <i2c_write8>
 80022ac:	20000498 	.word	0x20000498

080022b0 <BQ25798_Chr_Volt_Limit_write>:
}

uint8_t BQ25798_Chr_Volt_Limit_write(uint16_t val)
{
	uint8_t res;
	val /= 10;
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <BQ25798_Chr_Volt_Limit_write+0x20>)
{
 80022b2:	b510      	push	{r4, lr}
	val /= 10;
 80022b4:	fba3 3000 	umull	r3, r0, r3, r0
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 80022b8:	08c0      	lsrs	r0, r0, #3
 80022ba:	f004 f89d 	bl	80063f8 <byteswap16>
    return res;
}
 80022be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG01_Charge_Voltage_Limit, byteswap16(val), BQ25798_ADDR);
 80022c2:	4602      	mov	r2, r0
 80022c4:	23d6      	movs	r3, #214	@ 0xd6
 80022c6:	4803      	ldr	r0, [pc, #12]	@ (80022d4 <BQ25798_Chr_Volt_Limit_write+0x24>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	f004 b82b 	b.w	8006324 <i2c_write16>
 80022ce:	bf00      	nop
 80022d0:	cccccccd 	.word	0xcccccccd
 80022d4:	20000498 	.word	0x20000498

080022d8 <BQ25798_Chr_Curr_Limit_write>:

uint8_t BQ25798_Chr_Curr_Limit_write(uint16_t val)
{
	uint8_t res;
	val /= 10;
 80022d8:	4b07      	ldr	r3, [pc, #28]	@ (80022f8 <BQ25798_Chr_Curr_Limit_write+0x20>)
{
 80022da:	b510      	push	{r4, lr}
	val /= 10;
 80022dc:	fba3 3000 	umull	r3, r0, r3, r0
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 80022e0:	08c0      	lsrs	r0, r0, #3
 80022e2:	f004 f889 	bl	80063f8 <byteswap16>
    return res;
}
 80022e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG03_Charge_Current_Limit, byteswap16(val), BQ25798_ADDR);
 80022ea:	4602      	mov	r2, r0
 80022ec:	23d6      	movs	r3, #214	@ 0xd6
 80022ee:	4803      	ldr	r0, [pc, #12]	@ (80022fc <BQ25798_Chr_Curr_Limit_write+0x24>)
 80022f0:	2103      	movs	r1, #3
 80022f2:	f004 b817 	b.w	8006324 <i2c_write16>
 80022f6:	bf00      	nop
 80022f8:	cccccccd 	.word	0xcccccccd
 80022fc:	20000498 	.word	0x20000498

08002300 <BQ25798_Chr_Input_Voltage_Limit_write>:

uint8_t BQ25798_Chr_Input_Voltage_Limit_write(uint8_t val)
{
 8002300:	4602      	mov	r2, r0
	uint8_t res;
	res = i2c_write8(&hi2c1, REG05_Input_Voltage_Limit, val, BQ25798_ADDR);
 8002302:	23d6      	movs	r3, #214	@ 0xd6
 8002304:	4801      	ldr	r0, [pc, #4]	@ (800230c <BQ25798_Chr_Input_Voltage_Limit_write+0xc>)
 8002306:	2105      	movs	r1, #5
 8002308:	f003 bff8 	b.w	80062fc <i2c_write8>
 800230c:	20000498 	.word	0x20000498

08002310 <BQ25798_Chr_Input_Curr_Limit_write>:
    return res;
}

uint8_t BQ25798_Chr_Input_Curr_Limit_write(uint16_t val)
{
 8002310:	b510      	push	{r4, lr}
	uint8_t res;
	res = i2c_write16(&hi2c1, REG06_Input_Current_Limit, byteswap16(val), BQ25798_ADDR);
 8002312:	f004 f871 	bl	80063f8 <byteswap16>
    return res;
}
 8002316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	res = i2c_write16(&hi2c1, REG06_Input_Current_Limit, byteswap16(val), BQ25798_ADDR);
 800231a:	4602      	mov	r2, r0
 800231c:	23d6      	movs	r3, #214	@ 0xd6
 800231e:	4802      	ldr	r0, [pc, #8]	@ (8002328 <BQ25798_Chr_Input_Curr_Limit_write+0x18>)
 8002320:	2106      	movs	r1, #6
 8002322:	f003 bfff 	b.w	8006324 <i2c_write16>
 8002326:	bf00      	nop
 8002328:	20000498 	.word	0x20000498

0800232c <BQ25798_Chrg_CTRL1_write>:

uint8_t BQ25798_Chrg_CTRL1_write(uint8_t hex_val)
{
 800232c:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG10_Charger_Control_1, hex_val, BQ25798_ADDR);
 800232e:	23d6      	movs	r3, #214	@ 0xd6
 8002330:	4801      	ldr	r0, [pc, #4]	@ (8002338 <BQ25798_Chrg_CTRL1_write+0xc>)
 8002332:	2110      	movs	r1, #16
 8002334:	f003 bfe2 	b.w	80062fc <i2c_write8>
 8002338:	20000498 	.word	0x20000498

0800233c <BQ25798_Chrg_NTC_CTRL1_write>:
    return res;
}

uint8_t BQ25798_Chrg_NTC_CTRL1_write(uint8_t hex_val)
{
 800233c:	4602      	mov	r2, r0
	uint8_t res;
    res = i2c_write8(&hi2c1, REG18_NTC_Control_1, hex_val, BQ25798_ADDR);
 800233e:	23d6      	movs	r3, #214	@ 0xd6
 8002340:	4801      	ldr	r0, [pc, #4]	@ (8002348 <BQ25798_Chrg_NTC_CTRL1_write+0xc>)
 8002342:	2118      	movs	r1, #24
 8002344:	f003 bfda 	b.w	80062fc <i2c_write8>
 8002348:	20000498 	.word	0x20000498

0800234c <BQ25798_WD_RST>:
    return res;
}

uint8_t BQ25798_WD_RST()
{
 800234c:	b510      	push	{r4, lr}
	uint8_t res, value;
	i2c_read8(&hi2c1, REG10_Charger_Control_1, &value, BQ25798_ADDR);
 800234e:	4c0c      	ldr	r4, [pc, #48]	@ (8002380 <BQ25798_WD_RST+0x34>)
{
 8002350:	b082      	sub	sp, #8
	i2c_read8(&hi2c1, REG10_Charger_Control_1, &value, BQ25798_ADDR);
 8002352:	23d6      	movs	r3, #214	@ 0xd6
 8002354:	f10d 0207 	add.w	r2, sp, #7
 8002358:	2110      	movs	r1, #16
 800235a:	4620      	mov	r0, r4
 800235c:	f003 ffa4 	bl	80062a8 <i2c_read8>
//	printf("Reset REG (read): %x\r\n", value);
	setBit(&value,3,1);
 8002360:	f10d 0007 	add.w	r0, sp, #7
 8002364:	2201      	movs	r2, #1
 8002366:	2103      	movs	r1, #3
 8002368:	f003 fff2 	bl	8006350 <setBit>
//	printf("Reset REG (reset): %x\r\n", value);
    res = i2c_write8(&hi2c1, REG10_Charger_Control_1, value, BQ25798_ADDR);
 800236c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002370:	23d6      	movs	r3, #214	@ 0xd6
 8002372:	2110      	movs	r1, #16
 8002374:	4620      	mov	r0, r4
 8002376:	f003 ffc1 	bl	80062fc <i2c_write8>
    return res;
}
 800237a:	b002      	add	sp, #8
 800237c:	bd10      	pop	{r4, pc}
 800237e:	bf00      	nop
 8002380:	20000498 	.word	0x20000498

08002384 <BQ25798_MPPT_CTRL>:

uint8_t BQ25798_MPPT_CTRL(uint8_t set)
{
 8002384:	b530      	push	{r4, r5, lr}
	uint8_t res, value;
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 8002386:	4d0c      	ldr	r5, [pc, #48]	@ (80023b8 <BQ25798_MPPT_CTRL+0x34>)
{
 8002388:	b083      	sub	sp, #12
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 800238a:	23d6      	movs	r3, #214	@ 0xd6
{
 800238c:	4604      	mov	r4, r0
	i2c_read8(&hi2c1, REG15_MPPT_Control, &value, BQ25798_ADDR);
 800238e:	f10d 0207 	add.w	r2, sp, #7
 8002392:	2115      	movs	r1, #21
 8002394:	4628      	mov	r0, r5
 8002396:	f003 ff87 	bl	80062a8 <i2c_read8>
//	printf("Reset REG (read): %x\r\n", value);
	setBit(&value,0,set);
 800239a:	4622      	mov	r2, r4
 800239c:	f10d 0007 	add.w	r0, sp, #7
 80023a0:	2100      	movs	r1, #0
 80023a2:	f003 ffd5 	bl	8006350 <setBit>
//	printf("Reset REG (reset): %x\r\n", value);
    res = i2c_write8(&hi2c1, REG15_MPPT_Control, value, BQ25798_ADDR);
 80023a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80023aa:	23d6      	movs	r3, #214	@ 0xd6
 80023ac:	2115      	movs	r1, #21
 80023ae:	4628      	mov	r0, r5
 80023b0:	f003 ffa4 	bl	80062fc <i2c_write8>
    return res;
}
 80023b4:	b003      	add	sp, #12
 80023b6:	bd30      	pop	{r4, r5, pc}
 80023b8:	20000498 	.word	0x20000498

080023bc <_write>:

static char clibuf[64];
static int cliptr;

int _write(int file, char *ptr, int len)
{
 80023bc:	b510      	push	{r4, lr}
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 80023be:	1c53      	adds	r3, r2, #1
{
 80023c0:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, len+1);  // uart1
 80023c2:	4803      	ldr	r0, [pc, #12]	@ (80023d0 <_write+0x14>)
 80023c4:	b292      	uxth	r2, r2
 80023c6:	f008 f989 	bl	800a6dc <HAL_UART_Transmit>
    return len;
}
 80023ca:	4620      	mov	r0, r4
 80023cc:	bd10      	pop	{r4, pc}
 80023ce:	bf00      	nop
 80023d0:	2000036c 	.word	0x2000036c

080023d4 <HAL_UART_RxCpltCallback>:
    HAL_UART_Transmit(&huart1, &ch, 1, 2);  // debug uart
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_UART_RxCpltCallback+0x30>)
 80023d6:	4298      	cmp	r0, r3
{
 80023d8:	b510      	push	{r4, lr}
 80023da:	4604      	mov	r4, r0
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80023dc:	d003      	beq.n	80023e6 <HAL_UART_RxCpltCallback+0x12>
	if(huart == &huart2) {
 80023de:	4b0a      	ldr	r3, [pc, #40]	@ (8002408 <HAL_UART_RxCpltCallback+0x34>)
 80023e0:	429c      	cmp	r4, r3
 80023e2:	d007      	beq.n	80023f4 <HAL_UART_RxCpltCallback+0x20>
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
	}
}
 80023e4:	bd10      	pop	{r4, pc}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 80023e6:	4909      	ldr	r1, [pc, #36]	@ (800240c <HAL_UART_RxCpltCallback+0x38>)
 80023e8:	2240      	movs	r2, #64	@ 0x40
 80023ea:	f008 fab7 	bl	800a95c <HAL_UART_Receive_IT>
	if(huart == &huart2) {
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_UART_RxCpltCallback+0x34>)
 80023f0:	429c      	cmp	r4, r3
 80023f2:	d1f7      	bne.n	80023e4 <HAL_UART_RxCpltCallback+0x10>
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 80023f4:	4620      	mov	r0, r4
 80023f6:	4906      	ldr	r1, [pc, #24]	@ (8002410 <HAL_UART_RxCpltCallback+0x3c>)
}
 80023f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 80023fc:	2201      	movs	r2, #1
 80023fe:	f008 baad 	b.w	800a95c <HAL_UART_Receive_IT>
 8002402:	bf00      	nop
 8002404:	2000036c 	.word	0x2000036c
 8002408:	200002e8 	.word	0x200002e8
 800240c:	20000270 	.word	0x20000270
 8002410:	2000026c 	.word	0x2000026c

08002414 <HAL_UART_ErrorCallback>:
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_UART_ErrorCallback+0x30>)
 8002416:	4298      	cmp	r0, r3

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002418:	b510      	push	{r4, lr}
 800241a:	4604      	mov	r4, r0
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 800241c:	d003      	beq.n	8002426 <HAL_UART_ErrorCallback+0x12>
	if(huart == &huart2) {
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_UART_ErrorCallback+0x34>)
 8002420:	429c      	cmp	r4, r3
 8002422:	d007      	beq.n	8002434 <HAL_UART_ErrorCallback+0x20>
    HAL_UART_RxCpltCallback(huart);
}
 8002424:	bd10      	pop	{r4, pc}
	if(huart == &huart1) HAL_UART_Receive_IT(&huart1, debug_rx_buf, DEBUG_BUF_SIZE);  // Interrupt start Uart1 RX
 8002426:	4909      	ldr	r1, [pc, #36]	@ (800244c <HAL_UART_ErrorCallback+0x38>)
 8002428:	2240      	movs	r2, #64	@ 0x40
 800242a:	f008 fa97 	bl	800a95c <HAL_UART_Receive_IT>
	if(huart == &huart2) {
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_UART_ErrorCallback+0x34>)
 8002430:	429c      	cmp	r4, r3
 8002432:	d1f7      	bne.n	8002424 <HAL_UART_ErrorCallback+0x10>
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 8002434:	4620      	mov	r0, r4
 8002436:	4906      	ldr	r1, [pc, #24]	@ (8002450 <HAL_UART_ErrorCallback+0x3c>)
}
 8002438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart2, &simch, 1); // Interrupt start Uart2 RX
 800243c:	2201      	movs	r2, #1
 800243e:	f008 ba8d 	b.w	800a95c <HAL_UART_Receive_IT>
 8002442:	bf00      	nop
 8002444:	2000036c 	.word	0x2000036c
 8002448:	200002e8 	.word	0x200002e8
 800244c:	20000270 	.word	0x20000270
 8002450:	2000026c 	.word	0x2000026c

08002454 <find>:
}

// string functions

char * find(const char *arg2)							// find token in cmdline
{
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
	int i,j,k;
	for(i=0; clibuf[i]; i++)
 8002456:	4e12      	ldr	r6, [pc, #72]	@ (80024a0 <find+0x4c>)
 8002458:	7833      	ldrb	r3, [r6, #0]
 800245a:	b1db      	cbz	r3, 8002494 <find+0x40>
 800245c:	4c11      	ldr	r4, [pc, #68]	@ (80024a4 <find+0x50>)
 800245e:	4637      	mov	r7, r6
 8002460:	4245      	negs	r5, r0
{
 8002462:	4684      	mov	ip, r0
 8002464:	46be      	mov	lr, r7
 8002466:	e005      	b.n	8002474 <find+0x20>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
			if(!arg2[k+1]) return (clibuf+(j+1));
 8002468:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800246c:	b1a3      	cbz	r3, 8002498 <find+0x44>
		for(j=i, k=0; tolower(clibuf[j]) == arg2[k]; j++, k++)
 800246e:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8002472:	468c      	mov	ip, r1
 8002474:	5ce2      	ldrb	r2, [r4, r3]
 8002476:	4661      	mov	r1, ip
 8002478:	f002 0203 	and.w	r2, r2, #3
 800247c:	2a01      	cmp	r2, #1
 800247e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002482:	bf08      	it	eq
 8002484:	3320      	addeq	r3, #32
 8002486:	429a      	cmp	r2, r3
 8002488:	d0ee      	beq.n	8002468 <find+0x14>
	for(i=0; clibuf[i]; i++)
 800248a:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800248e:	3501      	adds	r5, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e6      	bne.n	8002462 <find+0xe>
	return NULL;
 8002494:	4618      	mov	r0, r3
}
 8002496:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(!arg2[k+1]) return (clibuf+(j+1));
 8002498:	4465      	add	r5, ip
 800249a:	3501      	adds	r5, #1
 800249c:	1970      	adds	r0, r6, r5
}
 800249e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a0:	2000022c 	.word	0x2000022c
 80024a4:	08011db1 	.word	0x08011db1

080024a8 <getval>:

char * getval(char *p, int32_t *val, int32_t min, int32_t max)		// get s32 value from cmdline
{
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int32_t tmp = 0;
	if(*p == ' ') p++;
 80024aa:	7807      	ldrb	r7, [r0, #0]
 80024ac:	2f20      	cmp	r7, #32
	uint8_t sign = (*p == '-') ? 1:0;
 80024ae:	bf08      	it	eq
 80024b0:	7847      	ldrbeq	r7, [r0, #1]
{
 80024b2:	4606      	mov	r6, r0
	if(*p == ' ') p++;
 80024b4:	bf08      	it	eq
 80024b6:	3601      	addeq	r6, #1
	while(*p)
 80024b8:	b1f7      	cbz	r7, 80024f8 <getval+0x50>
 80024ba:	463d      	mov	r5, r7
	int32_t tmp = 0;
 80024bc:	2400      	movs	r4, #0
 80024be:	e004      	b.n	80024ca <getval+0x22>
	while(*p)
 80024c0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
	{
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 80024c4:	eb0c 0440 	add.w	r4, ip, r0, lsl #1
	while(*p)
 80024c8:	b13d      	cbz	r5, 80024da <getval+0x32>
		if(*p >= '0' && *p <= '9') {tmp *= 10; tmp += *p - '0'; p++;}
 80024ca:	f1a5 0c30 	sub.w	ip, r5, #48	@ 0x30
 80024ce:	fa5f f08c 	uxtb.w	r0, ip
 80024d2:	2809      	cmp	r0, #9
 80024d4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80024d8:	d9f2      	bls.n	80024c0 <getval+0x18>
		else break;
	}
	if(sign) tmp = -tmp;
 80024da:	2f2d      	cmp	r7, #45	@ 0x2d
 80024dc:	d100      	bne.n	80024e0 <getval+0x38>
 80024de:	4264      	negs	r4, r4
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 80024e0:	4294      	cmp	r4, r2
 80024e2:	db01      	blt.n	80024e8 <getval+0x40>
 80024e4:	429c      	cmp	r4, r3
 80024e6:	dd04      	ble.n	80024f2 <getval+0x4a>
 80024e8:	4804      	ldr	r0, [pc, #16]	@ (80024fc <getval+0x54>)
 80024ea:	f00b f989 	bl	800d800 <puts>
	return p;
}
 80024ee:	4630      	mov	r0, r6
 80024f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(tmp >= min && tmp <= max) *val = tmp; else printf("Bad value\r\n");
 80024f2:	600c      	str	r4, [r1, #0]
}
 80024f4:	4630      	mov	r0, r6
 80024f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t tmp = 0;
 80024f8:	463c      	mov	r4, r7
 80024fa:	e7f1      	b.n	80024e0 <getval+0x38>
 80024fc:	0801085c 	.word	0x0801085c

08002500 <getFloat>:
	}
	printf("%s: %s\r\n", nam, dst);
}

char * getFloat (char *p, float *val, float min, float max)
{
 8002500:	b530      	push	{r4, r5, lr}
 8002502:	ed2d 8b02 	vpush	{d8}
	 char* pend;
	float tmp = 0;
		while(*p == ' ') p++;
 8002506:	7803      	ldrb	r3, [r0, #0]
 8002508:	2b20      	cmp	r3, #32
{
 800250a:	b083      	sub	sp, #12
 800250c:	4604      	mov	r4, r0
 800250e:	eeb0 8a40 	vmov.f32	s16, s0
 8002512:	eef0 8a60 	vmov.f32	s17, s1
 8002516:	460d      	mov	r5, r1
		while(*p == ' ') p++;
 8002518:	d103      	bne.n	8002522 <getFloat+0x22>
 800251a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800251e:	2b20      	cmp	r3, #32
 8002520:	d0fb      	beq.n	800251a <getFloat+0x1a>
		tmp = strtof(p, &pend);
 8002522:	a901      	add	r1, sp, #4
 8002524:	4620      	mov	r0, r4
 8002526:	f00a f971 	bl	800c80c <strtof>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 800252a:	eeb4 0ac8 	vcmpe.f32	s0, s16
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	db04      	blt.n	800253e <getFloat+0x3e>
 8002534:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8002538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253c:	d907      	bls.n	800254e <getFloat+0x4e>
 800253e:	4807      	ldr	r0, [pc, #28]	@ (800255c <getFloat+0x5c>)
 8002540:	f00b f95e 	bl	800d800 <puts>
		return p;
}
 8002544:	4620      	mov	r0, r4
 8002546:	b003      	add	sp, #12
 8002548:	ecbd 8b02 	vpop	{d8}
 800254c:	bd30      	pop	{r4, r5, pc}
 800254e:	4620      	mov	r0, r4
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8002550:	ed85 0a00 	vstr	s0, [r5]
}
 8002554:	b003      	add	sp, #12
 8002556:	ecbd 8b02 	vpop	{d8}
 800255a:	bd30      	pop	{r4, r5, pc}
 800255c:	0801085c 	.word	0x0801085c

08002560 <print_status>:
}*/



void print_status()
{
 8002560:	b500      	push	{lr}
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002562:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8002638 <print_status+0xd8>
{
 8002566:	b083      	sub	sp, #12
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002568:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <print_status+0xe0>)
 800256a:	4836      	ldr	r0, [pc, #216]	@ (8002644 <print_status+0xe4>)
 800256c:	ed8d 7b00 	vstr	d7, [sp]
 8002570:	2200      	movs	r2, #0
 8002572:	f00b f8dd 	bl	800d730 <iprintf>
	printf("Charger state : ");
 8002576:	4834      	ldr	r0, [pc, #208]	@ (8002648 <print_status+0xe8>)
 8002578:	f00b f8da 	bl	800d730 <iprintf>
	switch (charger_state)
 800257c:	4b33      	ldr	r3, [pc, #204]	@ (800264c <print_status+0xec>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d806      	bhi.n	8002592 <print_status+0x32>
 8002584:	e8df f003 	tbb	[pc, r3]
 8002588:	4c025054 	.word	0x4c025054
		break;
	case 1:
		printf("OK\r\n");
		break;
	case 2:
		printf("No charging ...\r\n");
 800258c:	4830      	ldr	r0, [pc, #192]	@ (8002650 <print_status+0xf0>)
 800258e:	f00b f937 	bl	800d800 <puts>
		break;
	case 3:
		printf("Charging ...\r\n");
		break;
	}
	printf("MCU Temp: %3.1f [degC]\r\n", GET_MCU_Temp());
 8002592:	f7ff f979 	bl	8001888 <GET_MCU_Temp>
 8002596:	ee10 0a10 	vmov	r0, s0
 800259a:	f7fd ffd5 	bl	8000548 <__aeabi_f2d>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	482c      	ldr	r0, [pc, #176]	@ (8002654 <print_status+0xf4>)
 80025a4:	f00b f8c4 	bl	800d730 <iprintf>
	printf("VBAT: %u [mV]  ", BQ25798_Vbat_read());
 80025a8:	f7ff fdc0 	bl	800212c <BQ25798_Vbat_read>
 80025ac:	4601      	mov	r1, r0
 80025ae:	482a      	ldr	r0, [pc, #168]	@ (8002658 <print_status+0xf8>)
 80025b0:	f00b f8be 	bl	800d730 <iprintf>
	printf("Vac1: %u [mV]  ", BQ25798_Vac1_read());
 80025b4:	f7ff fdde 	bl	8002174 <BQ25798_Vac1_read>
 80025b8:	4601      	mov	r1, r0
 80025ba:	4828      	ldr	r0, [pc, #160]	@ (800265c <print_status+0xfc>)
 80025bc:	f00b f8b8 	bl	800d730 <iprintf>
	printf("Vac2: %u [mV]  ", BQ25798_Vac2_read());
 80025c0:	f7ff fdea 	bl	8002198 <BQ25798_Vac2_read>
 80025c4:	4601      	mov	r1, r0
 80025c6:	4826      	ldr	r0, [pc, #152]	@ (8002660 <print_status+0x100>)
 80025c8:	f00b f8b2 	bl	800d730 <iprintf>
	printf("VSYS: %u [mV]  \r\n", BQ25798_Vsys_read());
 80025cc:	f7ff fdc0 	bl	8002150 <BQ25798_Vsys_read>
 80025d0:	4601      	mov	r1, r0
 80025d2:	4824      	ldr	r0, [pc, #144]	@ (8002664 <print_status+0x104>)
 80025d4:	f00b f8ac 	bl	800d730 <iprintf>
	printf("Ibus: %u [mA]  ", BQ25798_Ibus_read());
 80025d8:	f7ff fdf0 	bl	80021bc <BQ25798_Ibus_read>
 80025dc:	4601      	mov	r1, r0
 80025de:	4822      	ldr	r0, [pc, #136]	@ (8002668 <print_status+0x108>)
 80025e0:	f00b f8a6 	bl	800d730 <iprintf>
	printf("Ibat: %u [mA]  \r\n", BQ25798_Ibat_read());
 80025e4:	f7ff fdfc 	bl	80021e0 <BQ25798_Ibat_read>
 80025e8:	4601      	mov	r1, r0
 80025ea:	4820      	ldr	r0, [pc, #128]	@ (800266c <print_status+0x10c>)
 80025ec:	f00b f8a0 	bl	800d730 <iprintf>
	printf("Minimal SYS Voltage: %u [mV]  \r\n", BQ25798_Sys_Min_Voltage_read());
 80025f0:	f7ff fe08 	bl	8002204 <BQ25798_Sys_Min_Voltage_read>
 80025f4:	4601      	mov	r1, r0
 80025f6:	481e      	ldr	r0, [pc, #120]	@ (8002670 <print_status+0x110>)
 80025f8:	f00b f89a 	bl	800d730 <iprintf>
	printf("Charge Voltage Limit: %u [mV]  \r\n",BQ25798_Chr_Volt_Limit_read());
 80025fc:	f7ff fe22 	bl	8002244 <BQ25798_Chr_Volt_Limit_read>
 8002600:	4601      	mov	r1, r0
 8002602:	481c      	ldr	r0, [pc, #112]	@ (8002674 <print_status+0x114>)
 8002604:	f00b f894 	bl	800d730 <iprintf>
	printf("Charge Current Limit: %u [mA]  \r\n",BQ25798_Chr_Curr_Limit_read());
 8002608:	f7ff fe32 	bl	8002270 <BQ25798_Chr_Curr_Limit_read>
 800260c:	4601      	mov	r1, r0
 800260e:	481a      	ldr	r0, [pc, #104]	@ (8002678 <print_status+0x118>)
 8002610:	f00b f88e 	bl	800d730 <iprintf>
//	BQ25798_Chrg_STAT0_read();
//	BQ25798_Chrg_STAT1_read();
//	BQ25798_Chrg_STAT2_read();
//	BQ25798_Chrg_STAT3_read();
//	BQ25798_Chrg_STAT4_read();
	printf("-----------------\r\n");
 8002614:	4819      	ldr	r0, [pc, #100]	@ (800267c <print_status+0x11c>)

}
 8002616:	b003      	add	sp, #12
 8002618:	f85d eb04 	ldr.w	lr, [sp], #4
	printf("-----------------\r\n");
 800261c:	f00b b8f0 	b.w	800d800 <puts>
		printf("Charging ...\r\n");
 8002620:	4817      	ldr	r0, [pc, #92]	@ (8002680 <print_status+0x120>)
 8002622:	f00b f8ed 	bl	800d800 <puts>
		break;
 8002626:	e7b4      	b.n	8002592 <print_status+0x32>
		printf("OK\r\n");
 8002628:	4816      	ldr	r0, [pc, #88]	@ (8002684 <print_status+0x124>)
 800262a:	f00b f8e9 	bl	800d800 <puts>
		break;
 800262e:	e7b0      	b.n	8002592 <print_status+0x32>
		printf("FAULT\r\n");
 8002630:	4815      	ldr	r0, [pc, #84]	@ (8002688 <print_status+0x128>)
 8002632:	f00b f8e5 	bl	800d800 <puts>
		break;
 8002636:	e7ac      	b.n	8002592 <print_status+0x32>
 8002638:	00000000 	.word	0x00000000
 800263c:	3fe00000 	.word	0x3fe00000
 8002640:	3ff00000 	.word	0x3ff00000
 8002644:	08010868 	.word	0x08010868
 8002648:	0801088c 	.word	0x0801088c
 800264c:	2000073b 	.word	0x2000073b
 8002650:	080108a8 	.word	0x080108a8
 8002654:	080108cc 	.word	0x080108cc
 8002658:	080108e8 	.word	0x080108e8
 800265c:	080108f8 	.word	0x080108f8
 8002660:	08010908 	.word	0x08010908
 8002664:	08010918 	.word	0x08010918
 8002668:	0801092c 	.word	0x0801092c
 800266c:	0801093c 	.word	0x0801093c
 8002670:	08010950 	.word	0x08010950
 8002674:	08010974 	.word	0x08010974
 8002678:	08010998 	.word	0x08010998
 800267c:	080119a8 	.word	0x080119a8
 8002680:	080108bc 	.word	0x080108bc
 8002684:	08011bfc 	.word	0x08011bfc
 8002688:	080108a0 	.word	0x080108a0
 800268c:	00000000 	.word	0x00000000

08002690 <print_help>:

void print_help()
{
 8002690:	b510      	push	{r4, lr}
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002692:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8002738 <print_help+0xa8>
{
 8002696:	b082      	sub	sp, #8
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 8002698:	ed8d 7b00 	vstr	d7, [sp]
 800269c:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <print_help+0xb0>)
 800269e:	4829      	ldr	r0, [pc, #164]	@ (8002744 <print_help+0xb4>)
	printf("set [sensor] disable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - disable sensor\r\n");
	printf("set [sensor] [type] en - type=[temperature;press;hum] - enable sensor type\r\n");
	printf("set [sensor] [type] dis - type=[temperature;press;hum] - disable sensor type\r\n");
	printf("set [sensor] [type] offset X.X - set offset [X.X float]\r\n");
	printf("set [sensor] conf Y - set sensor config [Y - 0..15]\r\n");
	printf("-----------------\r\n");
 80026a0:	4c29      	ldr	r4, [pc, #164]	@ (8002748 <print_help+0xb8>)
	printf("--- THP HW v%1.1f  FW v%1.1f --- \r\n", HW_VER*0.1f,FW_VER*0.1f );
 80026a2:	2200      	movs	r2, #0
 80026a4:	f00b f844 	bl	800d730 <iprintf>
	printf("SET COMMANDS:\r\n");
 80026a8:	4828      	ldr	r0, [pc, #160]	@ (800274c <print_help+0xbc>)
 80026aa:	f00b f8a9 	bl	800d800 <puts>
	printf("set interval X - X=4..3600[s] - measurement interval\r\n");
 80026ae:	4828      	ldr	r0, [pc, #160]	@ (8002750 <print_help+0xc0>)
 80026b0:	f00b f8a6 	bl	800d800 <puts>
	printf("set disptype X - 0 - NONE(silent), 1 - TXT, 2 - CSV - measurement format\r\n");
 80026b4:	4827      	ldr	r0, [pc, #156]	@ (8002754 <print_help+0xc4>)
 80026b6:	f00b f8a3 	bl	800d800 <puts>
	printf("set [sensor] enable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - enable sensor\r\n");
 80026ba:	4827      	ldr	r0, [pc, #156]	@ (8002758 <print_help+0xc8>)
 80026bc:	f00b f8a0 	bl	800d800 <puts>
	printf("set [sensor] disable - sensor=[tmp117;bme280;shtc3;ms8607;dps368] - disable sensor\r\n");
 80026c0:	4826      	ldr	r0, [pc, #152]	@ (800275c <print_help+0xcc>)
 80026c2:	f00b f89d 	bl	800d800 <puts>
	printf("set [sensor] [type] en - type=[temperature;press;hum] - enable sensor type\r\n");
 80026c6:	4826      	ldr	r0, [pc, #152]	@ (8002760 <print_help+0xd0>)
 80026c8:	f00b f89a 	bl	800d800 <puts>
	printf("set [sensor] [type] dis - type=[temperature;press;hum] - disable sensor type\r\n");
 80026cc:	4825      	ldr	r0, [pc, #148]	@ (8002764 <print_help+0xd4>)
 80026ce:	f00b f897 	bl	800d800 <puts>
	printf("set [sensor] [type] offset X.X - set offset [X.X float]\r\n");
 80026d2:	4825      	ldr	r0, [pc, #148]	@ (8002768 <print_help+0xd8>)
 80026d4:	f00b f894 	bl	800d800 <puts>
	printf("set [sensor] conf Y - set sensor config [Y - 0..15]\r\n");
 80026d8:	4824      	ldr	r0, [pc, #144]	@ (800276c <print_help+0xdc>)
 80026da:	f00b f891 	bl	800d800 <puts>
	printf("-----------------\r\n");
 80026de:	4620      	mov	r0, r4
 80026e0:	f00b f88e 	bl	800d800 <puts>

	printf("CONFIG COMMANDS:\r\n");
 80026e4:	4822      	ldr	r0, [pc, #136]	@ (8002770 <print_help+0xe0>)
 80026e6:	f00b f88b 	bl	800d800 <puts>
	printf("printconfig - Print config values\r\n");
 80026ea:	4822      	ldr	r0, [pc, #136]	@ (8002774 <print_help+0xe4>)
 80026ec:	f00b f888 	bl	800d800 <puts>
	printf("clearconfig - load default config values\r\n");
 80026f0:	4821      	ldr	r0, [pc, #132]	@ (8002778 <print_help+0xe8>)
 80026f2:	f00b f885 	bl	800d800 <puts>
	printf("loadconfig - load config values\r\n");
 80026f6:	4821      	ldr	r0, [pc, #132]	@ (800277c <print_help+0xec>)
 80026f8:	f00b f882 	bl	800d800 <puts>
	printf("saveconfig - save config values\r\n");
 80026fc:	4820      	ldr	r0, [pc, #128]	@ (8002780 <print_help+0xf0>)
 80026fe:	f00b f87f 	bl	800d800 <puts>
	printf("-----------------\r\n");
 8002702:	4620      	mov	r0, r4
 8002704:	f00b f87c 	bl	800d800 <puts>

	printf("MEAS COMMANDS:\r\n");
 8002708:	481e      	ldr	r0, [pc, #120]	@ (8002784 <print_help+0xf4>)
 800270a:	f00b f879 	bl	800d800 <puts>
	printf("meas start cont [disp] - Start continuos measurement disp=[txt;csv]\r\n");
 800270e:	481e      	ldr	r0, [pc, #120]	@ (8002788 <print_help+0xf8>)
 8002710:	f00b f876 	bl	800d800 <puts>
	printf("meas start [disp] X - Start X measures disp=[txt;csv], X=1..500 \r\n");
 8002714:	481d      	ldr	r0, [pc, #116]	@ (800278c <print_help+0xfc>)
 8002716:	f00b f873 	bl	800d800 <puts>

	printf("-----------------\r\n");
 800271a:	4620      	mov	r0, r4
 800271c:	f00b f870 	bl	800d800 <puts>
	printf("? or help - help\r\n");
 8002720:	481b      	ldr	r0, [pc, #108]	@ (8002790 <print_help+0x100>)
 8002722:	f00b f86d 	bl	800d800 <puts>
	printf("-----------------\r\n");
 8002726:	4620      	mov	r0, r4

}
 8002728:	b002      	add	sp, #8
 800272a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("-----------------\r\n");
 800272e:	f00b b867 	b.w	800d800 <puts>
 8002732:	bf00      	nop
 8002734:	f3af 8000 	nop.w
 8002738:	00000000 	.word	0x00000000
 800273c:	3fe00000 	.word	0x3fe00000
 8002740:	3ff00000 	.word	0x3ff00000
 8002744:	08010868 	.word	0x08010868
 8002748:	080119a8 	.word	0x080119a8
 800274c:	080109bc 	.word	0x080109bc
 8002750:	080109cc 	.word	0x080109cc
 8002754:	08010a04 	.word	0x08010a04
 8002758:	08010a50 	.word	0x08010a50
 800275c:	08010aa4 	.word	0x08010aa4
 8002760:	08010af8 	.word	0x08010af8
 8002764:	08010b44 	.word	0x08010b44
 8002768:	08010b94 	.word	0x08010b94
 800276c:	08010bd0 	.word	0x08010bd0
 8002770:	08010c08 	.word	0x08010c08
 8002774:	08010c1c 	.word	0x08010c1c
 8002778:	08010c40 	.word	0x08010c40
 800277c:	08010c6c 	.word	0x08010c6c
 8002780:	08010c90 	.word	0x08010c90
 8002784:	08010cb4 	.word	0x08010cb4
 8002788:	08010cc4 	.word	0x08010cc4
 800278c:	08010d0c 	.word	0x08010d0c
 8002790:	08010d50 	.word	0x08010d50

08002794 <CLI_proc>:
{
 8002794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 8002798:	4c79      	ldr	r4, [pc, #484]	@ (8002980 <CLI_proc+0x1ec>)
{
 800279a:	ed2d 8b02 	vpush	{d8}
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	2b3f      	cmp	r3, #63	@ 0x3f
{
 80027a2:	b083      	sub	sp, #12
	if(cliptr < sizeof(clibuf)) clibuf[cliptr++] = ch;
 80027a4:	d803      	bhi.n	80027ae <CLI_proc+0x1a>
 80027a6:	4977      	ldr	r1, [pc, #476]	@ (8002984 <CLI_proc+0x1f0>)
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	54c8      	strb	r0, [r1, r3]
 80027ac:	6022      	str	r2, [r4, #0]
	if(ch == 10)	// LF
 80027ae:	280a      	cmp	r0, #10
 80027b0:	d004      	beq.n	80027bc <CLI_proc+0x28>
}
 80027b2:	b003      	add	sp, #12
 80027b4:	ecbd 8b02 	vpop	{d8}
 80027b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    if(clibuf[cliptr-1] == 13) cliptr--;
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	4d71      	ldr	r5, [pc, #452]	@ (8002984 <CLI_proc+0x1f0>)
 80027c0:	1e58      	subs	r0, r3, #1
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 80027c2:	2100      	movs	r1, #0
	    if(clibuf[cliptr-1] == 13) cliptr--;
 80027c4:	5c2a      	ldrb	r2, [r5, r0]
 80027c6:	2a0d      	cmp	r2, #13
 80027c8:	bf18      	it	ne
 80027ca:	4618      	movne	r0, r3
		memset(clibuf+cliptr, 0, sizeof(clibuf)-cliptr);
 80027cc:	f1c0 0240 	rsb	r2, r0, #64	@ 0x40
 80027d0:	4428      	add	r0, r5
 80027d2:	f00b f915 	bl	800da00 <memset>
		cliptr = 0;
 80027d6:	2300      	movs	r3, #0
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 80027d8:	486b      	ldr	r0, [pc, #428]	@ (8002988 <CLI_proc+0x1f4>)
		cliptr = 0;
 80027da:	6023      	str	r3, [r4, #0]
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 80027dc:	f7ff fe3a 	bl	8002454 <find>
 80027e0:	1c6b      	adds	r3, r5, #1
 80027e2:	4283      	cmp	r3, r0
 80027e4:	f000 80aa 	beq.w	800293c <CLI_proc+0x1a8>
 80027e8:	4868      	ldr	r0, [pc, #416]	@ (800298c <CLI_proc+0x1f8>)
 80027ea:	f7ff fe33 	bl	8002454 <find>
 80027ee:	1d2f      	adds	r7, r5, #4
 80027f0:	4287      	cmp	r7, r0
 80027f2:	f000 80a3 	beq.w	800293c <CLI_proc+0x1a8>
		if(find("status")==clibuf+6) {print_status(); return;}
 80027f6:	4866      	ldr	r0, [pc, #408]	@ (8002990 <CLI_proc+0x1fc>)
 80027f8:	f7ff fe2c 	bl	8002454 <find>
 80027fc:	1dae      	adds	r6, r5, #6
 80027fe:	4286      	cmp	r6, r0
 8002800:	f000 80ad 	beq.w	800295e <CLI_proc+0x1ca>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 8002804:	4863      	ldr	r0, [pc, #396]	@ (8002994 <CLI_proc+0x200>)
 8002806:	f7ff fe25 	bl	8002454 <find>
 800280a:	f105 0807 	add.w	r8, r5, #7
 800280e:	4580      	cmp	r8, r0
 8002810:	f000 80ac 	beq.w	800296c <CLI_proc+0x1d8>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 8002814:	4860      	ldr	r0, [pc, #384]	@ (8002998 <CLI_proc+0x204>)
 8002816:	f7ff fe1d 	bl	8002454 <find>
 800281a:	f105 040b 	add.w	r4, r5, #11
 800281e:	4284      	cmp	r4, r0
 8002820:	f000 8093 	beq.w	800294a <CLI_proc+0x1b6>
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 8002824:	485d      	ldr	r0, [pc, #372]	@ (800299c <CLI_proc+0x208>)
 8002826:	f7ff fe15 	bl	8002454 <find>
 800282a:	4284      	cmp	r4, r0
 800282c:	f000 81bd 	beq.w	8002baa <CLI_proc+0x416>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",Load_config()); return;}
 8002830:	485b      	ldr	r0, [pc, #364]	@ (80029a0 <CLI_proc+0x20c>)
 8002832:	f7ff fe0f 	bl	8002454 <find>
 8002836:	f105 090a 	add.w	r9, r5, #10
 800283a:	4581      	cmp	r9, r0
 800283c:	f000 81bc 	beq.w	8002bb8 <CLI_proc+0x424>
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",Save_config()); return;}
 8002840:	4858      	ldr	r0, [pc, #352]	@ (80029a4 <CLI_proc+0x210>)
 8002842:	f7ff fe07 	bl	8002454 <find>
 8002846:	4581      	cmp	r9, r0
 8002848:	f000 81c1 	beq.w	8002bce <CLI_proc+0x43a>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 800284c:	4856      	ldr	r0, [pc, #344]	@ (80029a8 <CLI_proc+0x214>)
 800284e:	f7ff fe01 	bl	8002454 <find>
 8002852:	f105 030c 	add.w	r3, r5, #12
 8002856:	4283      	cmp	r3, r0
 8002858:	f000 81be 	beq.w	8002bd8 <CLI_proc+0x444>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 800285c:	4853      	ldr	r0, [pc, #332]	@ (80029ac <CLI_proc+0x218>)
 800285e:	f7ff fdf9 	bl	8002454 <find>
 8002862:	4284      	cmp	r4, r0
 8002864:	f000 81c7 	beq.w	8002bf6 <CLI_proc+0x462>
		if(find("sim on")==clibuf+6) {SIM_ON(); return;}
 8002868:	4851      	ldr	r0, [pc, #324]	@ (80029b0 <CLI_proc+0x21c>)
 800286a:	f7ff fdf3 	bl	8002454 <find>
 800286e:	4286      	cmp	r6, r0
 8002870:	f000 81ef 	beq.w	8002c52 <CLI_proc+0x4be>
		if(find("sim off")==clibuf+7) {SIM_OFF(); return;}
 8002874:	484f      	ldr	r0, [pc, #316]	@ (80029b4 <CLI_proc+0x220>)
 8002876:	f7ff fded 	bl	8002454 <find>
 800287a:	4580      	cmp	r8, r0
 800287c:	f000 81f3 	beq.w	8002c66 <CLI_proc+0x4d2>
		if(find("gps on")==clibuf+6) {GPS_ON(); return;}
 8002880:	484d      	ldr	r0, [pc, #308]	@ (80029b8 <CLI_proc+0x224>)
 8002882:	f7ff fde7 	bl	8002454 <find>
 8002886:	4286      	cmp	r6, r0
 8002888:	f000 81f0 	beq.w	8002c6c <CLI_proc+0x4d8>
		if(find("gps off")==clibuf+7) {GPS_OFF(); return;}
 800288c:	484b      	ldr	r0, [pc, #300]	@ (80029bc <CLI_proc+0x228>)
 800288e:	f7ff fde1 	bl	8002454 <find>
 8002892:	4580      	cmp	r8, r0
 8002894:	f000 820c 	beq.w	8002cb0 <CLI_proc+0x51c>
		p = find("set ");
 8002898:	4849      	ldr	r0, [pc, #292]	@ (80029c0 <CLI_proc+0x22c>)
 800289a:	f7ff fddb 	bl	8002454 <find>
		if(p == clibuf+4)
 800289e:	4287      	cmp	r7, r0
 80028a0:	f000 80ae 	beq.w	8002a00 <CLI_proc+0x26c>
		p = find("meas ");
 80028a4:	4847      	ldr	r0, [pc, #284]	@ (80029c4 <CLI_proc+0x230>)
 80028a6:	f7ff fdd5 	bl	8002454 <find>
		if(p == clibuf+5)
 80028aa:	4b47      	ldr	r3, [pc, #284]	@ (80029c8 <CLI_proc+0x234>)
 80028ac:	4298      	cmp	r0, r3
		p = find("meas ");
 80028ae:	4605      	mov	r5, r0
		if(p == clibuf+5)
 80028b0:	f47f af7f 	bne.w	80027b2 <CLI_proc+0x1e>
			if((p = find("start ")))
 80028b4:	4845      	ldr	r0, [pc, #276]	@ (80029cc <CLI_proc+0x238>)
 80028b6:	f7ff fdcd 	bl	8002454 <find>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	f43f af79 	beq.w	80027b2 <CLI_proc+0x1e>
				if(p == clibuf+11)
 80028c0:	42a0      	cmp	r0, r4
 80028c2:	f47f af76 	bne.w	80027b2 <CLI_proc+0x1e>
					if((strstr(clibuf+11, "txt ")))
 80028c6:	4942      	ldr	r1, [pc, #264]	@ (80029d0 <CLI_proc+0x23c>)
 80028c8:	f00b f8b4 	bl	800da34 <strstr>
 80028cc:	4606      	mov	r6, r0
 80028ce:	2800      	cmp	r0, #0
 80028d0:	f040 8319 	bne.w	8002f06 <CLI_proc+0x772>
					if((strstr(clibuf+11, "csv ")))
 80028d4:	493f      	ldr	r1, [pc, #252]	@ (80029d4 <CLI_proc+0x240>)
 80028d6:	4620      	mov	r0, r4
 80028d8:	f00b f8ac 	bl	800da34 <strstr>
 80028dc:	2800      	cmp	r0, #0
 80028de:	f040 84a7 	bne.w	8003230 <CLI_proc+0xa9c>
						if((strstr(clibuf+11, "cont ")))
 80028e2:	493d      	ldr	r1, [pc, #244]	@ (80029d8 <CLI_proc+0x244>)
 80028e4:	4620      	mov	r0, r4
 80028e6:	f00b f8a5 	bl	800da34 <strstr>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	f43f af61 	beq.w	80027b2 <CLI_proc+0x1e>
							if((strstr(clibuf+16, "txt")))
 80028f0:	350b      	adds	r5, #11
 80028f2:	493a      	ldr	r1, [pc, #232]	@ (80029dc <CLI_proc+0x248>)
 80028f4:	4628      	mov	r0, r5
 80028f6:	f00b f89d 	bl	800da34 <strstr>
 80028fa:	4604      	mov	r4, r0
 80028fc:	2800      	cmp	r0, #0
 80028fe:	f040 8501 	bne.w	8003304 <CLI_proc+0xb70>
							if((strstr(clibuf+16, "csv")))
 8002902:	4937      	ldr	r1, [pc, #220]	@ (80029e0 <CLI_proc+0x24c>)
 8002904:	4628      	mov	r0, r5
 8002906:	f00b f895 	bl	800da34 <strstr>
 800290a:	2800      	cmp	r0, #0
 800290c:	f43f af51 	beq.w	80027b2 <CLI_proc+0x1e>
								meas_cont_mode = 1;
 8002910:	4a34      	ldr	r2, [pc, #208]	@ (80029e4 <CLI_proc+0x250>)
								disp_type = 2;
 8002912:	4b35      	ldr	r3, [pc, #212]	@ (80029e8 <CLI_proc+0x254>)
								printf("Start continuous measurement, TXT format\r\n");
 8002914:	4835      	ldr	r0, [pc, #212]	@ (80029ec <CLI_proc+0x258>)
								meas_cont_mode = 1;
 8002916:	2101      	movs	r1, #1
 8002918:	7011      	strb	r1, [r2, #0]
								disp_type = 2;
 800291a:	2202      	movs	r2, #2
 800291c:	701a      	strb	r2, [r3, #0]
								printf("Start continuous measurement, TXT format\r\n");
 800291e:	f00a ff6f 	bl	800d800 <puts>
								csvcnt = 0;
 8002922:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <CLI_proc+0x25c>)
 8002924:	801c      	strh	r4, [r3, #0]
								printCSVheader();
 8002926:	f002 fe73 	bl	8005610 <printCSVheader>
								ReinitTimer(tim_interval);
 800292a:	4b32      	ldr	r3, [pc, #200]	@ (80029f4 <CLI_proc+0x260>)
 800292c:	8818      	ldrh	r0, [r3, #0]
}
 800292e:	b003      	add	sp, #12
 8002930:	ecbd 8b02 	vpop	{d8}
 8002934:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
								ReinitTimer(tim_interval);
 8002938:	f002 bdce 	b.w	80054d8 <ReinitTimer>
}
 800293c:	b003      	add	sp, #12
 800293e:	ecbd 8b02 	vpop	{d8}
 8002942:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("?")==clibuf+1 || find("help")==clibuf+4)	{print_help(); return;}
 8002946:	f7ff bea3 	b.w	8002690 <print_help>
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 800294a:	482b      	ldr	r0, [pc, #172]	@ (80029f8 <CLI_proc+0x264>)
 800294c:	f00a ff58 	bl	800d800 <puts>
}
 8002950:	b003      	add	sp, #12
 8002952:	ecbd 8b02 	vpop	{d8}
 8002956:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("clearconfig")==clibuf+11) {printf("config reset to defaults\r\n"); Load_defaults(); return;}
 800295a:	f7fe bd3b 	b.w	80013d4 <Load_defaults>
}
 800295e:	b003      	add	sp, #12
 8002960:	ecbd 8b02 	vpop	{d8}
 8002964:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("status")==clibuf+6) {print_status(); return;}
 8002968:	f7ff bdfa 	b.w	8002560 <print_status>
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 800296c:	4823      	ldr	r0, [pc, #140]	@ (80029fc <CLI_proc+0x268>)
 800296e:	22a0      	movs	r2, #160	@ 0xa0
 8002970:	2138      	movs	r1, #56	@ 0x38
}
 8002972:	b003      	add	sp, #12
 8002974:	ecbd 8b02 	vpop	{d8}
 8002978:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("i2cscan")==clibuf+7) {i2c_scan(&hi2c2, 0x38, 0xA0); return;}
 800297c:	f003 bd06 	b.w	800638c <i2c_scan>
 8002980:	20000228 	.word	0x20000228
 8002984:	2000022c 	.word	0x2000022c
 8002988:	08010d64 	.word	0x08010d64
 800298c:	08010d68 	.word	0x08010d68
 8002990:	08010d70 	.word	0x08010d70
 8002994:	08010d78 	.word	0x08010d78
 8002998:	08010d80 	.word	0x08010d80
 800299c:	08010da8 	.word	0x08010da8
 80029a0:	08010db4 	.word	0x08010db4
 80029a4:	08010de8 	.word	0x08010de8
 80029a8:	08010e34 	.word	0x08010e34
 80029ac:	08010e54 	.word	0x08010e54
 80029b0:	08010e74 	.word	0x08010e74
 80029b4:	08010e7c 	.word	0x08010e7c
 80029b8:	08010e84 	.word	0x08010e84
 80029bc:	08010e8c 	.word	0x08010e8c
 80029c0:	08010e94 	.word	0x08010e94
 80029c4:	08011558 	.word	0x08011558
 80029c8:	20000231 	.word	0x20000231
 80029cc:	08011560 	.word	0x08011560
 80029d0:	08011568 	.word	0x08011568
 80029d4:	08011590 	.word	0x08011590
 80029d8:	080115b8 	.word	0x080115b8
 80029dc:	080115c0 	.word	0x080115c0
 80029e0:	080115f0 	.word	0x080115f0
 80029e4:	20000008 	.word	0x20000008
 80029e8:	20000639 	.word	0x20000639
 80029ec:	080115c4 	.word	0x080115c4
 80029f0:	200002b0 	.word	0x200002b0
 80029f4:	2000063a 	.word	0x2000063a
 80029f8:	08010d8c 	.word	0x08010d8c
 80029fc:	20000444 	.word	0x20000444
			if((p = find("interval ")))
 8002a00:	48af      	ldr	r0, [pc, #700]	@ (8002cc0 <CLI_proc+0x52c>)
 8002a02:	f7ff fd27 	bl	8002454 <find>
 8002a06:	4605      	mov	r5, r0
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	f040 8136 	bne.w	8002c7a <CLI_proc+0x4e6>
			if((p = find("disptype ")))
 8002a0e:	48ad      	ldr	r0, [pc, #692]	@ (8002cc4 <CLI_proc+0x530>)
 8002a10:	f7ff fd20 	bl	8002454 <find>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	f040 819b 	bne.w	8002d50 <CLI_proc+0x5bc>
			if((p = find("tmp117 ")))
 8002a1a:	48ab      	ldr	r0, [pc, #684]	@ (8002cc8 <CLI_proc+0x534>)
 8002a1c:	f7ff fd1a 	bl	8002454 <find>
 8002a20:	b110      	cbz	r0, 8002a28 <CLI_proc+0x294>
				if(p == clibuf+11)
 8002a22:	42a0      	cmp	r0, r4
 8002a24:	f000 8362 	beq.w	80030ec <CLI_proc+0x958>
			if((p = find("shtc3 ")))
 8002a28:	48a8      	ldr	r0, [pc, #672]	@ (8002ccc <CLI_proc+0x538>)
 8002a2a:	f7ff fd13 	bl	8002454 <find>
 8002a2e:	b110      	cbz	r0, 8002a36 <CLI_proc+0x2a2>
				if(p == clibuf+10)
 8002a30:	4548      	cmp	r0, r9
 8002a32:	f000 82bf 	beq.w	8002fb4 <CLI_proc+0x820>
			if((p = find("ms8607 ")))
 8002a36:	48a6      	ldr	r0, [pc, #664]	@ (8002cd0 <CLI_proc+0x53c>)
 8002a38:	f7ff fd0c 	bl	8002454 <find>
 8002a3c:	2800      	cmp	r0, #0
 8002a3e:	f000 819f 	beq.w	8002d80 <CLI_proc+0x5ec>
				if(p == clibuf+11)
 8002a42:	42a0      	cmp	r0, r4
 8002a44:	f47f aeb5 	bne.w	80027b2 <CLI_proc+0x1e>
					if((p = find("enable")))
 8002a48:	48a2      	ldr	r0, [pc, #648]	@ (8002cd4 <CLI_proc+0x540>)
 8002a4a:	f7ff fd03 	bl	8002454 <find>
 8002a4e:	b170      	cbz	r0, 8002a6e <CLI_proc+0x2da>
						MS8607.sensor_use = 1;
 8002a50:	49a1      	ldr	r1, [pc, #644]	@ (8002cd8 <CLI_proc+0x544>)
						config.MS8607_use = 1;
 8002a52:	4ca2      	ldr	r4, [pc, #648]	@ (8002cdc <CLI_proc+0x548>)
						MS8607.sensor_use = 1;
 8002a54:	780b      	ldrb	r3, [r1, #0]
						config.MS8607_use = 1;
 8002a56:	7e22      	ldrb	r2, [r4, #24]
						printf("MS8607 sensor enabled\r\n");
 8002a58:	48a1      	ldr	r0, [pc, #644]	@ (8002ce0 <CLI_proc+0x54c>)
						config.MS8607_use = 1;
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
						MS8607.sensor_use = 1;
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
						config.MS8607_use = 1;
 8002a62:	7622      	strb	r2, [r4, #24]
						MS8607.sensor_use = 1;
 8002a64:	700b      	strb	r3, [r1, #0]
						printf("MS8607 sensor enabled\r\n");
 8002a66:	f00a fecb 	bl	800d800 <puts>
						Save_config();
 8002a6a:	f7fe fc8b 	bl	8001384 <Save_config>
					if((p = find("disable")))
 8002a6e:	489d      	ldr	r0, [pc, #628]	@ (8002ce4 <CLI_proc+0x550>)
 8002a70:	f7ff fcf0 	bl	8002454 <find>
 8002a74:	b170      	cbz	r0, 8002a94 <CLI_proc+0x300>
						config.MS8607_use = 0;
 8002a76:	4999      	ldr	r1, [pc, #612]	@ (8002cdc <CLI_proc+0x548>)
						MS8607.sensor_use = 0;
 8002a78:	4b97      	ldr	r3, [pc, #604]	@ (8002cd8 <CLI_proc+0x544>)
						config.MS8607_use = 0;
 8002a7a:	7e0c      	ldrb	r4, [r1, #24]
						MS8607.sensor_use = 0;
 8002a7c:	781a      	ldrb	r2, [r3, #0]
						printf("MS8607 sensor disabled\r\n");
 8002a7e:	489a      	ldr	r0, [pc, #616]	@ (8002ce8 <CLI_proc+0x554>)
						MS8607.sensor_use = 0;
 8002a80:	f36f 0241 	bfc	r2, #1, #1
						config.MS8607_use = 0;
 8002a84:	f36f 0400 	bfc	r4, #0, #1
 8002a88:	760c      	strb	r4, [r1, #24]
						MS8607.sensor_use = 0;
 8002a8a:	701a      	strb	r2, [r3, #0]
						printf("MS8607 sensor disabled\r\n");
 8002a8c:	f00a feb8 	bl	800d800 <puts>
						Save_config();
 8002a90:	f7fe fc78 	bl	8001384 <Save_config>
					if((p = find("conf ")))
 8002a94:	4895      	ldr	r0, [pc, #596]	@ (8002cec <CLI_proc+0x558>)
 8002a96:	f7ff fcdd 	bl	8002454 <find>
 8002a9a:	b1f0      	cbz	r0, 8002ada <CLI_proc+0x346>
			            getval(clibuf+16, &tmp, 0, 5);
 8002a9c:	2305      	movs	r3, #5
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 8002aa2:	f04f 34ff 	mov.w	r4, #4294967295
			            getval(clibuf+16, &tmp, 0, 5);
 8002aa6:	4892      	ldr	r0, [pc, #584]	@ (8002cf0 <CLI_proc+0x55c>)
						int32_t tmp = -1;
 8002aa8:	9401      	str	r4, [sp, #4]
			            getval(clibuf+16, &tmp, 0, 5);
 8002aaa:	f7ff fcfd 	bl	80024a8 <getval>
			            config.MS8607_conf = tmp;
 8002aae:	498b      	ldr	r1, [pc, #556]	@ (8002cdc <CLI_proc+0x548>)
			            MS8607.sensor_conf = tmp;
 8002ab0:	4b89      	ldr	r3, [pc, #548]	@ (8002cd8 <CLI_proc+0x544>)
			            config.MS8607_conf = tmp;
 8002ab2:	9c01      	ldr	r4, [sp, #4]
 8002ab4:	7e08      	ldrb	r0, [r1, #24]
			            MS8607.sensor_conf = tmp;
 8002ab6:	781a      	ldrb	r2, [r3, #0]
			            config.MS8607_conf = tmp;
 8002ab8:	f004 050f 	and.w	r5, r4, #15
 8002abc:	f365 0044 	bfi	r0, r5, #1, #4
			            MS8607.sensor_conf = tmp;
 8002ac0:	f365 0285 	bfi	r2, r5, #2, #4
			            config.MS8607_conf = tmp;
 8002ac4:	7608      	strb	r0, [r1, #24]
			            MS8607_osr(tmp);
 8002ac6:	b2e0      	uxtb	r0, r4
			            MS8607.sensor_conf = tmp;
 8002ac8:	701a      	strb	r2, [r3, #0]
			            MS8607_osr(tmp);
 8002aca:	f001 ff0b 	bl	80048e4 <MS8607_osr>
			            printf("MS8607 config %li\r\n",tmp);
 8002ace:	4621      	mov	r1, r4
 8002ad0:	4888      	ldr	r0, [pc, #544]	@ (8002cf4 <CLI_proc+0x560>)
 8002ad2:	f00a fe2d 	bl	800d730 <iprintf>
						Save_config();
 8002ad6:	f7fe fc55 	bl	8001384 <Save_config>
					if((p = find("temperature ")))
 8002ada:	4887      	ldr	r0, [pc, #540]	@ (8002cf8 <CLI_proc+0x564>)
 8002adc:	f7ff fcba 	bl	8002454 <find>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	b118      	cbz	r0, 8002aec <CLI_proc+0x358>
						if(p == clibuf+23)
 8002ae4:	4b85      	ldr	r3, [pc, #532]	@ (8002cfc <CLI_proc+0x568>)
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	f000 841c 	beq.w	8003324 <CLI_proc+0xb90>
					if((p = find("press ")))
 8002aec:	4884      	ldr	r0, [pc, #528]	@ (8002d00 <CLI_proc+0x56c>)
 8002aee:	f7ff fcb1 	bl	8002454 <find>
 8002af2:	4604      	mov	r4, r0
 8002af4:	b118      	cbz	r0, 8002afe <CLI_proc+0x36a>
						if(p == clibuf+17)
 8002af6:	4b83      	ldr	r3, [pc, #524]	@ (8002d04 <CLI_proc+0x570>)
 8002af8:	4298      	cmp	r0, r3
 8002afa:	f000 845b 	beq.w	80033b4 <CLI_proc+0xc20>
					if((p = find("hum ")))
 8002afe:	4882      	ldr	r0, [pc, #520]	@ (8002d08 <CLI_proc+0x574>)
 8002b00:	f7ff fca8 	bl	8002454 <find>
 8002b04:	4604      	mov	r4, r0
 8002b06:	2800      	cmp	r0, #0
 8002b08:	f43f ae53 	beq.w	80027b2 <CLI_proc+0x1e>
						if(p == clibuf+15)
 8002b0c:	4b7f      	ldr	r3, [pc, #508]	@ (8002d0c <CLI_proc+0x578>)
 8002b0e:	4298      	cmp	r0, r3
 8002b10:	f47f ae4f 	bne.w	80027b2 <CLI_proc+0x1e>
							if((strstr(clibuf+15, "offset ")))
 8002b14:	497e      	ldr	r1, [pc, #504]	@ (8002d10 <CLI_proc+0x57c>)
 8002b16:	f00a ff8d 	bl	800da34 <strstr>
 8002b1a:	b1b8      	cbz	r0, 8002b4c <CLI_proc+0x3b8>
						        getFloat(clibuf+22, &tmp, MIN_OFFSET, MAX_OFFSET);
 8002b1c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8002b20:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8002b24:	a901      	add	r1, sp, #4
 8002b26:	1de0      	adds	r0, r4, #7
 8002b28:	f7ff fcea 	bl	8002500 <getFloat>
						        MS8607.hum.offset = tmp;
 8002b2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd8 <CLI_proc+0x544>)
						        config.MS8607_h_offset = tmp;
 8002b2e:	496b      	ldr	r1, [pc, #428]	@ (8002cdc <CLI_proc+0x548>)
 8002b30:	9801      	ldr	r0, [sp, #4]
						        MS8607.hum.offset = tmp;
 8002b32:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.MS8607_h_offset = tmp;
 8002b36:	f8c1 001d 	str.w	r0, [r1, #29]
						        printf("MS8607 humidity offset %.6f\r\n",tmp);
 8002b3a:	f7fd fd05 	bl	8000548 <__aeabi_f2d>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4874      	ldr	r0, [pc, #464]	@ (8002d14 <CLI_proc+0x580>)
 8002b44:	f00a fdf4 	bl	800d730 <iprintf>
						        Save_config();
 8002b48:	f7fe fc1c 	bl	8001384 <Save_config>
							if((strstr(clibuf+15, "en")))
 8002b4c:	4972      	ldr	r1, [pc, #456]	@ (8002d18 <CLI_proc+0x584>)
 8002b4e:	486f      	ldr	r0, [pc, #444]	@ (8002d0c <CLI_proc+0x578>)
 8002b50:	f00a ff70 	bl	800da34 <strstr>
 8002b54:	b170      	cbz	r0, 8002b74 <CLI_proc+0x3e0>
								MS8607.hum.use_meas = 1;
 8002b56:	4960      	ldr	r1, [pc, #384]	@ (8002cd8 <CLI_proc+0x544>)
								config.MS8607_h_use = 1;
 8002b58:	4c60      	ldr	r4, [pc, #384]	@ (8002cdc <CLI_proc+0x548>)
								MS8607.hum.use_meas = 1;
 8002b5a:	7a8b      	ldrb	r3, [r1, #10]
								config.MS8607_h_use = 1;
 8002b5c:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 humidity measure enabled\r\n");
 8002b5e:	486f      	ldr	r0, [pc, #444]	@ (8002d1c <CLI_proc+0x588>)
								config.MS8607_h_use = 1;
 8002b60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								MS8607.hum.use_meas = 1;
 8002b64:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_h_use = 1;
 8002b68:	7622      	strb	r2, [r4, #24]
								MS8607.hum.use_meas = 1;
 8002b6a:	728b      	strb	r3, [r1, #10]
								printf("MS8607 humidity measure enabled\r\n");
 8002b6c:	f00a fe48 	bl	800d800 <puts>
								Save_config();
 8002b70:	f7fe fc08 	bl	8001384 <Save_config>
							if((strstr(clibuf+15, "dis")))
 8002b74:	496a      	ldr	r1, [pc, #424]	@ (8002d20 <CLI_proc+0x58c>)
 8002b76:	4865      	ldr	r0, [pc, #404]	@ (8002d0c <CLI_proc+0x578>)
 8002b78:	f00a ff5c 	bl	800da34 <strstr>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	f43f ae18 	beq.w	80027b2 <CLI_proc+0x1e>
								config.MS8607_h_use = 0;
 8002b82:	4956      	ldr	r1, [pc, #344]	@ (8002cdc <CLI_proc+0x548>)
								MS8607.hum.use_meas = 0;
 8002b84:	4b54      	ldr	r3, [pc, #336]	@ (8002cd8 <CLI_proc+0x544>)
								config.MS8607_h_use = 0;
 8002b86:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.hum.use_meas = 0;
 8002b88:	7a9a      	ldrb	r2, [r3, #10]
								printf("MS8607 humidity measure disable\r\n");
 8002b8a:	4866      	ldr	r0, [pc, #408]	@ (8002d24 <CLI_proc+0x590>)
								config.MS8607_h_use = 0;
 8002b8c:	f36f 1486 	bfc	r4, #6, #1
								MS8607.hum.use_meas = 0;
 8002b90:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_h_use = 0;
 8002b94:	760c      	strb	r4, [r1, #24]
								DPS368.press.use_meas = 0;
 8002b96:	729a      	strb	r2, [r3, #10]
								printf("DPS368 pressure measure disable\r\n");
 8002b98:	f00a fe32 	bl	800d800 <puts>
}
 8002b9c:	b003      	add	sp, #12
 8002b9e:	ecbd 8b02 	vpop	{d8}
 8002ba2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
								Save_config();
 8002ba6:	f7fe bbed 	b.w	8001384 <Save_config>
}
 8002baa:	b003      	add	sp, #12
 8002bac:	ecbd 8b02 	vpop	{d8}
 8002bb0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("printconfig")==clibuf+11) {EEPROM_Print_config(); return;}
 8002bb4:	f7fe bcb8 	b.w	8001528 <EEPROM_Print_config>
		if(find("loadconfig")==clibuf+10) {printf("LOADING CONFIG. Status: %i (0==OK)\r\n",Load_config()); return;}
 8002bb8:	f7fe fc3c 	bl	8001434 <Load_config>
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	485a      	ldr	r0, [pc, #360]	@ (8002d28 <CLI_proc+0x594>)
}
 8002bc0:	b003      	add	sp, #12
 8002bc2:	ecbd 8b02 	vpop	{d8}
 8002bc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("saveconfig")==clibuf+10) {printf("SAVING CONFIG. Status: %i (0==NO CHANGES; 1==SAVE OK, 2==ERR)\r\n",Save_config()); return;}
 8002bca:	f00a bdb1 	b.w	800d730 <iprintf>
 8002bce:	f7fe fbd9 	bl	8001384 <Save_config>
 8002bd2:	4601      	mov	r1, r0
 8002bd4:	4855      	ldr	r0, [pc, #340]	@ (8002d2c <CLI_proc+0x598>)
 8002bd6:	e7f3      	b.n	8002bc0 <CLI_proc+0x42c>
		if(find("setbattalarm")==clibuf+12){getval(clibuf+13, &temp, 0, 15000); config.batt_alarm=temp; printf("Batt alarm:%i",config.batt_alarm); return;};
 8002bd8:	a901      	add	r1, sp, #4
 8002bda:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8002bde:	2200      	movs	r2, #0
 8002be0:	f105 000d 	add.w	r0, r5, #13
 8002be4:	f7ff fc60 	bl	80024a8 <getval>
 8002be8:	9b01      	ldr	r3, [sp, #4]
 8002bea:	4a3c      	ldr	r2, [pc, #240]	@ (8002cdc <CLI_proc+0x548>)
 8002bec:	4850      	ldr	r0, [pc, #320]	@ (8002d30 <CLI_proc+0x59c>)
 8002bee:	f8a2 3005 	strh.w	r3, [r2, #5]
 8002bf2:	b299      	uxth	r1, r3
 8002bf4:	e7e4      	b.n	8002bc0 <CLI_proc+0x42c>
		while(*p == ' ') p++;
 8002bf6:	7b2b      	ldrb	r3, [r5, #12]
 8002bf8:	484e      	ldr	r0, [pc, #312]	@ (8002d34 <CLI_proc+0x5a0>)
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d103      	bne.n	8002c06 <CLI_proc+0x472>
 8002bfe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d0fb      	beq.n	8002bfe <CLI_proc+0x46a>
		tmp = strtof(p, &pend);
 8002c06:	a901      	add	r1, sp, #4
 8002c08:	f009 fe00 	bl	800c80c <strtof>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8002c0c:	eefa 7a04 	vmov.f32	s15, #164	@ 0xc1200000 -10.0
 8002c10:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		tmp = strtof(p, &pend);
 8002c18:	eeb0 8a40 	vmov.f32	s16, s0
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8002c1c:	db40      	blt.n	8002ca0 <CLI_proc+0x50c>
 8002c1e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8002c22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	d839      	bhi.n	8002ca0 <CLI_proc+0x50c>
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 8002c2c:	ee10 0a10 	vmov	r0, s0
 8002c30:	f7fd fc8a 	bl	8000548 <__aeabi_f2d>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4c28      	ldr	r4, [pc, #160]	@ (8002cdc <CLI_proc+0x548>)
 8002c3a:	483f      	ldr	r0, [pc, #252]	@ (8002d38 <CLI_proc+0x5a4>)
 8002c3c:	ee18 1a10 	vmov	r1, s16
 8002c40:	f8c4 1001 	str.w	r1, [r4, #1]
}
 8002c44:	b003      	add	sp, #12
 8002c46:	ecbd 8b02 	vpop	{d8}
 8002c4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("setbatscale")==clibuf+11){getFloat(clibuf+12, &tempfloat, -10.0, 10.0); config.bat_scale=tempfloat; printf("Batt scale:%f \r\n",config.bat_scale); return;};
 8002c4e:	f00a bd6f 	b.w	800d730 <iprintf>
		if(find("sim on")==clibuf+6) {SIM_ON(); return;}
 8002c52:	483a      	ldr	r0, [pc, #232]	@ (8002d3c <CLI_proc+0x5a8>)
 8002c54:	2201      	movs	r2, #1
		if(find("sim off")==clibuf+7) {SIM_OFF(); return;}
 8002c56:	2101      	movs	r1, #1
}
 8002c58:	b003      	add	sp, #12
 8002c5a:	ecbd 8b02 	vpop	{d8}
 8002c5e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("sim off")==clibuf+7) {SIM_OFF(); return;}
 8002c62:	f005 ba3b 	b.w	80080dc <HAL_GPIO_WritePin>
 8002c66:	4835      	ldr	r0, [pc, #212]	@ (8002d3c <CLI_proc+0x5a8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	e7f4      	b.n	8002c56 <CLI_proc+0x4c2>
}
 8002c6c:	b003      	add	sp, #12
 8002c6e:	ecbd 8b02 	vpop	{d8}
 8002c72:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("gps on")==clibuf+6) {GPS_ON(); return;}
 8002c76:	f7fe bdef 	b.w	8001858 <GPS_ON>
	            getval(p, &tmp, 4, 3600);
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
				int32_t tmp = -1;
 8002c80:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 4, 3600);
 8002c84:	eb0d 0102 	add.w	r1, sp, r2
				int32_t tmp = -1;
 8002c88:	9401      	str	r4, [sp, #4]
	            getval(p, &tmp, 4, 3600);
 8002c8a:	f7ff fc0d 	bl	80024a8 <getval>
		            if(tmp >= 4)
 8002c8e:	9b01      	ldr	r3, [sp, #4]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	f77f ad8e 	ble.w	80027b2 <CLI_proc+0x1e>
		                new_tim_interval = tmp;
 8002c96:	4a2a      	ldr	r2, [pc, #168]	@ (8002d40 <CLI_proc+0x5ac>)
		                printf("New meas interval: %u\r\n", new_tim_interval);
 8002c98:	482a      	ldr	r0, [pc, #168]	@ (8002d44 <CLI_proc+0x5b0>)
		                new_tim_interval = tmp;
 8002c9a:	8013      	strh	r3, [r2, #0]
		                printf("New meas interval: %u\r\n", new_tim_interval);
 8002c9c:	b299      	uxth	r1, r3
 8002c9e:	e78f      	b.n	8002bc0 <CLI_proc+0x42c>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8002ca0:	4829      	ldr	r0, [pc, #164]	@ (8002d48 <CLI_proc+0x5b4>)
	float tempfloat = 0.0;
 8002ca2:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 8002d4c <CLI_proc+0x5b8>
		if(tmp >= min && tmp <= max) {*val = tmp; } else { printf("Bad value\r\n"); }
 8002ca6:	f00a fdab 	bl	800d800 <puts>
 8002caa:	2200      	movs	r2, #0
 8002cac:	2300      	movs	r3, #0
 8002cae:	e7c3      	b.n	8002c38 <CLI_proc+0x4a4>
}
 8002cb0:	b003      	add	sp, #12
 8002cb2:	ecbd 8b02 	vpop	{d8}
 8002cb6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		if(find("gps off")==clibuf+7) {GPS_OFF(); return;}
 8002cba:	f7fe bdcf 	b.w	800185c <GPS_OFF>
 8002cbe:	bf00      	nop
 8002cc0:	08010e9c 	.word	0x08010e9c
 8002cc4:	08010ec0 	.word	0x08010ec0
 8002cc8:	08010f04 	.word	0x08010f04
 8002ccc:	08011000 	.word	0x08011000
 8002cd0:	08011128 	.word	0x08011128
 8002cd4:	08010f0c 	.word	0x08010f0c
 8002cd8:	200006f0 	.word	0x200006f0
 8002cdc:	20000640 	.word	0x20000640
 8002ce0:	08011130 	.word	0x08011130
 8002ce4:	08010f2c 	.word	0x08010f2c
 8002ce8:	08011148 	.word	0x08011148
 8002cec:	08010f4c 	.word	0x08010f4c
 8002cf0:	2000023c 	.word	0x2000023c
 8002cf4:	08011160 	.word	0x08011160
 8002cf8:	08010f74 	.word	0x08010f74
 8002cfc:	20000243 	.word	0x20000243
 8002d00:	080111e0 	.word	0x080111e0
 8002d04:	2000023d 	.word	0x2000023d
 8002d08:	080110c0 	.word	0x080110c0
 8002d0c:	2000023b 	.word	0x2000023b
 8002d10:	08010f84 	.word	0x08010f84
 8002d14:	08011250 	.word	0x08011250
 8002d18:	08010fb0 	.word	0x08010fb0
 8002d1c:	08011270 	.word	0x08011270
 8002d20:	08010fd8 	.word	0x08010fd8
 8002d24:	08011294 	.word	0x08011294
 8002d28:	08010dc0 	.word	0x08010dc0
 8002d2c:	08010df4 	.word	0x08010df4
 8002d30:	08010e44 	.word	0x08010e44
 8002d34:	20000238 	.word	0x20000238
 8002d38:	08010e60 	.word	0x08010e60
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	2000063c 	.word	0x2000063c
 8002d44:	08010ea8 	.word	0x08010ea8
 8002d48:	0801085c 	.word	0x0801085c
 8002d4c:	00000000 	.word	0x00000000
				int32_t tmp = -1;
 8002d50:	f04f 34ff 	mov.w	r4, #4294967295
	            getval(p, &tmp, 0, 2);
 8002d54:	2302      	movs	r3, #2
 8002d56:	462a      	mov	r2, r5
 8002d58:	a901      	add	r1, sp, #4
				int32_t tmp = -1;
 8002d5a:	9401      	str	r4, [sp, #4]
	            getval(p, &tmp, 0, 2);
 8002d5c:	f7ff fba4 	bl	80024a8 <getval>
		            if(tmp >= 1)
 8002d60:	9c01      	ldr	r4, [sp, #4]
 8002d62:	2c00      	cmp	r4, #0
 8002d64:	f340 825a 	ble.w	800321c <CLI_proc+0xa88>
		            	if(tmp==1) printf("Display type TXT\r\n"); else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8002d68:	2c01      	cmp	r4, #1
 8002d6a:	f000 827c 	beq.w	8003266 <CLI_proc+0xad2>
 8002d6e:	2c02      	cmp	r4, #2
 8002d70:	f000 82d2 	beq.w	8003318 <CLI_proc+0xb84>
		            	csvcnt = 0;
 8002d74:	4a70      	ldr	r2, [pc, #448]	@ (8002f38 <CLI_proc+0x7a4>)
		            	disp_type = tmp;
 8002d76:	4b71      	ldr	r3, [pc, #452]	@ (8002f3c <CLI_proc+0x7a8>)
		            	csvcnt = 0;
 8002d78:	2100      	movs	r1, #0
 8002d7a:	8011      	strh	r1, [r2, #0]
		            	disp_type = tmp;
 8002d7c:	701c      	strb	r4, [r3, #0]
 8002d7e:	e518      	b.n	80027b2 <CLI_proc+0x1e>
			if((p = find("bme280 ")))
 8002d80:	486f      	ldr	r0, [pc, #444]	@ (8002f40 <CLI_proc+0x7ac>)
 8002d82:	f7ff fb67 	bl	8002454 <find>
 8002d86:	b110      	cbz	r0, 8002d8e <CLI_proc+0x5fa>
				if(p == clibuf+11)
 8002d88:	42a0      	cmp	r0, r4
 8002d8a:	f000 835a 	beq.w	8003442 <CLI_proc+0xcae>
			if((p = find("dps368 ")))
 8002d8e:	486d      	ldr	r0, [pc, #436]	@ (8002f44 <CLI_proc+0x7b0>)
 8002d90:	f7ff fb60 	bl	8002454 <find>
 8002d94:	2800      	cmp	r0, #0
 8002d96:	f43f ad85 	beq.w	80028a4 <CLI_proc+0x110>
				if(p == clibuf+11)
 8002d9a:	42a0      	cmp	r0, r4
 8002d9c:	f47f ad82 	bne.w	80028a4 <CLI_proc+0x110>
					if((p = find("enable")))
 8002da0:	4869      	ldr	r0, [pc, #420]	@ (8002f48 <CLI_proc+0x7b4>)
 8002da2:	f7ff fb57 	bl	8002454 <find>
 8002da6:	b180      	cbz	r0, 8002dca <CLI_proc+0x636>
						config.DPS368_use = 1;
 8002da8:	4868      	ldr	r0, [pc, #416]	@ (8002f4c <CLI_proc+0x7b8>)
						DPS368.sensor_use = 1;
 8002daa:	4969      	ldr	r1, [pc, #420]	@ (8002f50 <CLI_proc+0x7bc>)
						config.DPS368_use = 1;
 8002dac:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
						DPS368.sensor_use = 1;
 8002db0:	780b      	ldrb	r3, [r1, #0]
						config.DPS368_use = 1;
 8002db2:	f042 0201 	orr.w	r2, r2, #1
						DPS368.sensor_use = 1;
 8002db6:	f043 0302 	orr.w	r3, r3, #2
						config.DPS368_use = 1;
 8002dba:	f880 2032 	strb.w	r2, [r0, #50]	@ 0x32
						printf("DPS368 sensor enabled\r\n");
 8002dbe:	4865      	ldr	r0, [pc, #404]	@ (8002f54 <CLI_proc+0x7c0>)
						DPS368.sensor_use = 1;
 8002dc0:	700b      	strb	r3, [r1, #0]
						printf("DPS368 sensor enabled\r\n");
 8002dc2:	f00a fd1d 	bl	800d800 <puts>
						Save_config();
 8002dc6:	f7fe fadd 	bl	8001384 <Save_config>
					if((p = find("disable")))
 8002dca:	4863      	ldr	r0, [pc, #396]	@ (8002f58 <CLI_proc+0x7c4>)
 8002dcc:	f7ff fb42 	bl	8002454 <find>
 8002dd0:	b180      	cbz	r0, 8002df4 <CLI_proc+0x660>
						config.DPS368_use = 0;
 8002dd2:	495e      	ldr	r1, [pc, #376]	@ (8002f4c <CLI_proc+0x7b8>)
						DPS368.sensor_use = 0;
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f50 <CLI_proc+0x7bc>)
						config.DPS368_use = 0;
 8002dd6:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
						DPS368.sensor_use = 0;
 8002dda:	781a      	ldrb	r2, [r3, #0]
						config.DPS368_use = 0;
 8002ddc:	f36f 0000 	bfc	r0, #0, #1
						DPS368.sensor_use = 0;
 8002de0:	f36f 0241 	bfc	r2, #1, #1
						config.DPS368_use = 0;
 8002de4:	f881 0032 	strb.w	r0, [r1, #50]	@ 0x32
						printf("DPS368 sensor disabled\r\n");
 8002de8:	485c      	ldr	r0, [pc, #368]	@ (8002f5c <CLI_proc+0x7c8>)
						DPS368.sensor_use = 0;
 8002dea:	701a      	strb	r2, [r3, #0]
						printf("DPS368 sensor disabled\r\n");
 8002dec:	f00a fd08 	bl	800d800 <puts>
						Save_config();
 8002df0:	f7fe fac8 	bl	8001384 <Save_config>
					if((p = find("conf ")))
 8002df4:	485a      	ldr	r0, [pc, #360]	@ (8002f60 <CLI_proc+0x7cc>)
 8002df6:	f7ff fb2d 	bl	8002454 <find>
 8002dfa:	b350      	cbz	r0, 8002e52 <CLI_proc+0x6be>
			            getval(clibuf+16, &tmp, 0, 8);
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	2200      	movs	r2, #0
 8002e00:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 8002e02:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+16, &tmp, 0, 8);
 8002e06:	4857      	ldr	r0, [pc, #348]	@ (8002f64 <CLI_proc+0x7d0>)
						int32_t tmp = -1;
 8002e08:	9501      	str	r5, [sp, #4]
			            getval(clibuf+16, &tmp, 0, 8);
 8002e0a:	f7ff fb4d 	bl	80024a8 <getval>
			            config.DPS368_conf = tmp;
 8002e0e:	4a4f      	ldr	r2, [pc, #316]	@ (8002f4c <CLI_proc+0x7b8>)
 8002e10:	9d01      	ldr	r5, [sp, #4]
 8002e12:	f892 1032 	ldrb.w	r1, [r2, #50]	@ 0x32
			            DPS368.sensor_conf = tmp;
 8002e16:	4b4e      	ldr	r3, [pc, #312]	@ (8002f50 <CLI_proc+0x7bc>)
			            config.DPS368_conf = tmp;
 8002e18:	f005 000f 	and.w	r0, r5, #15
 8002e1c:	f360 0144 	bfi	r1, r0, #1, #4
 8002e20:	f882 1032 	strb.w	r1, [r2, #50]	@ 0x32
			            DPS368.sensor_conf = tmp;
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	f360 0285 	bfi	r2, r0, #2, #4
 8002e2a:	701a      	strb	r2, [r3, #0]
			            dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8002e2c:	f001 f936 	bl	800409c <dps368_ovr_config>
 8002e30:	4a4d      	ldr	r2, [pc, #308]	@ (8002f68 <CLI_proc+0x7d4>)
 8002e32:	4603      	mov	r3, r0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	7013      	strb	r3, [r2, #0]
			            dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8002e38:	4a4c      	ldr	r2, [pc, #304]	@ (8002f6c <CLI_proc+0x7d8>)
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	7010      	strb	r0, [r2, #0]
			            dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8002e3e:	4a4c      	ldr	r2, [pc, #304]	@ (8002f70 <CLI_proc+0x7dc>)
 8002e40:	7013      	strb	r3, [r2, #0]
			            DPS368_temp_correct(dps368_ovr_temp);
 8002e42:	f000 ffb1 	bl	8003da8 <DPS368_temp_correct>
			            printf("DPS368 temperature config %li\r\n",tmp);
 8002e46:	4629      	mov	r1, r5
 8002e48:	484a      	ldr	r0, [pc, #296]	@ (8002f74 <CLI_proc+0x7e0>)
 8002e4a:	f00a fc71 	bl	800d730 <iprintf>
						Save_config();
 8002e4e:	f7fe fa99 	bl	8001384 <Save_config>
					if((p = find("temperature ")))
 8002e52:	4849      	ldr	r0, [pc, #292]	@ (8002f78 <CLI_proc+0x7e4>)
 8002e54:	f7ff fafe 	bl	8002454 <find>
 8002e58:	4605      	mov	r5, r0
 8002e5a:	b118      	cbz	r0, 8002e64 <CLI_proc+0x6d0>
						if(p == clibuf+23)
 8002e5c:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <CLI_proc+0x7e8>)
 8002e5e:	4298      	cmp	r0, r3
 8002e60:	f000 8426 	beq.w	80036b0 <CLI_proc+0xf1c>
					if((p = find("press ")))
 8002e64:	4846      	ldr	r0, [pc, #280]	@ (8002f80 <CLI_proc+0x7ec>)
 8002e66:	f7ff faf5 	bl	8002454 <find>
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	f43f ad19 	beq.w	80028a4 <CLI_proc+0x110>
						if(p == clibuf+17)
 8002e72:	4b44      	ldr	r3, [pc, #272]	@ (8002f84 <CLI_proc+0x7f0>)
 8002e74:	4298      	cmp	r0, r3
 8002e76:	f47f ad15 	bne.w	80028a4 <CLI_proc+0x110>
							if((strstr(clibuf+17, "offset ")))
 8002e7a:	4943      	ldr	r1, [pc, #268]	@ (8002f88 <CLI_proc+0x7f4>)
 8002e7c:	f00a fdda 	bl	800da34 <strstr>
 8002e80:	b1b8      	cbz	r0, 8002eb2 <CLI_proc+0x71e>
					            getFloat(clibuf+24, &tmp, -500, 500);
 8002e82:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8002f8c <CLI_proc+0x7f8>
 8002e86:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8002f90 <CLI_proc+0x7fc>
 8002e8a:	a901      	add	r1, sp, #4
 8002e8c:	1de8      	adds	r0, r5, #7
 8002e8e:	f7ff fb37 	bl	8002500 <getFloat>
					            DPS368.press.offset = tmp;
 8002e92:	4b2f      	ldr	r3, [pc, #188]	@ (8002f50 <CLI_proc+0x7bc>)
					            config.DPS368_p_offset = tmp;
 8002e94:	492d      	ldr	r1, [pc, #180]	@ (8002f4c <CLI_proc+0x7b8>)
 8002e96:	9801      	ldr	r0, [sp, #4]
					            DPS368.press.offset = tmp;
 8002e98:	f8c3 000f 	str.w	r0, [r3, #15]
					            config.DPS368_p_offset = tmp;
 8002e9c:	f8c1 0037 	str.w	r0, [r1, #55]	@ 0x37
					            printf("DPS368 pressure offset %.6f\r\n",tmp);
 8002ea0:	f7fd fb52 	bl	8000548 <__aeabi_f2d>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	483a      	ldr	r0, [pc, #232]	@ (8002f94 <CLI_proc+0x800>)
 8002eaa:	f00a fc41 	bl	800d730 <iprintf>
								Save_config();
 8002eae:	f7fe fa69 	bl	8001384 <Save_config>
							if((strstr(clibuf+17, "en")))
 8002eb2:	4939      	ldr	r1, [pc, #228]	@ (8002f98 <CLI_proc+0x804>)
 8002eb4:	4833      	ldr	r0, [pc, #204]	@ (8002f84 <CLI_proc+0x7f0>)
 8002eb6:	f00a fdbd 	bl	800da34 <strstr>
 8002eba:	b180      	cbz	r0, 8002ede <CLI_proc+0x74a>
								DPS368.press.use_meas = 1;
 8002ebc:	4924      	ldr	r1, [pc, #144]	@ (8002f50 <CLI_proc+0x7bc>)
								config.DPS368_p_use = 1;
 8002ebe:	4c23      	ldr	r4, [pc, #140]	@ (8002f4c <CLI_proc+0x7b8>)
								DPS368.press.use_meas = 1;
 8002ec0:	7a8b      	ldrb	r3, [r1, #10]
								config.DPS368_p_use = 1;
 8002ec2:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
								printf("DPS368 pressure measure enabled\r\n");
 8002ec6:	4835      	ldr	r0, [pc, #212]	@ (8002f9c <CLI_proc+0x808>)
								config.DPS368_p_use = 1;
 8002ec8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								DPS368.press.use_meas = 1;
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
								config.DPS368_p_use = 1;
 8002ed0:	f884 2032 	strb.w	r2, [r4, #50]	@ 0x32
								DPS368.press.use_meas = 1;
 8002ed4:	728b      	strb	r3, [r1, #10]
								printf("DPS368 pressure measure enabled\r\n");
 8002ed6:	f00a fc93 	bl	800d800 <puts>
								Save_config();
 8002eda:	f7fe fa53 	bl	8001384 <Save_config>
							if((strstr(clibuf+17, "dis")))
 8002ede:	4930      	ldr	r1, [pc, #192]	@ (8002fa0 <CLI_proc+0x80c>)
 8002ee0:	4828      	ldr	r0, [pc, #160]	@ (8002f84 <CLI_proc+0x7f0>)
 8002ee2:	f00a fda7 	bl	800da34 <strstr>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	f43f ac63 	beq.w	80027b2 <CLI_proc+0x1e>
								config.DPS368_p_use = 0;
 8002eec:	4917      	ldr	r1, [pc, #92]	@ (8002f4c <CLI_proc+0x7b8>)
								DPS368.press.use_meas = 0;
 8002eee:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <CLI_proc+0x7bc>)
								config.DPS368_p_use = 0;
 8002ef0:	f891 4032 	ldrb.w	r4, [r1, #50]	@ 0x32
								DPS368.press.use_meas = 0;
 8002ef4:	7a9a      	ldrb	r2, [r3, #10]
								printf("DPS368 pressure measure disable\r\n");
 8002ef6:	482b      	ldr	r0, [pc, #172]	@ (8002fa4 <CLI_proc+0x810>)
								config.DPS368_p_use = 0;
 8002ef8:	f36f 1486 	bfc	r4, #6, #1
								DPS368.press.use_meas = 0;
 8002efc:	f36f 0200 	bfc	r2, #0, #1
								config.DPS368_p_use = 0;
 8002f00:	f881 4032 	strb.w	r4, [r1, #50]	@ 0x32
 8002f04:	e647      	b.n	8002b96 <CLI_proc+0x402>
						getval(clibuf+15, &tmp, 1, 500);
 8002f06:	a901      	add	r1, sp, #4
 8002f08:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002f0c:	2201      	movs	r2, #1
						int32_t tmp = -1;
 8002f0e:	f04f 34ff 	mov.w	r4, #4294967295
						getval(clibuf+15, &tmp, 1, 500);
 8002f12:	f105 000a 	add.w	r0, r5, #10
						int32_t tmp = -1;
 8002f16:	9401      	str	r4, [sp, #4]
						getval(clibuf+15, &tmp, 1, 500);
 8002f18:	f7ff fac6 	bl	80024a8 <getval>
						meas_count = tmp;
 8002f1c:	4c22      	ldr	r4, [pc, #136]	@ (8002fa8 <CLI_proc+0x814>)
 8002f1e:	9901      	ldr	r1, [sp, #4]
						meas_cont_mode = 0;
 8002f20:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <CLI_proc+0x818>)
						disp_type = 1;
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <CLI_proc+0x7a8>)
						meas_count = tmp;
 8002f24:	8021      	strh	r1, [r4, #0]
						meas_cont_mode = 0;
 8002f26:	2500      	movs	r5, #0
 8002f28:	7015      	strb	r5, [r2, #0]
						printf("Start %i measures, TXT output\r\n", meas_count);
 8002f2a:	b289      	uxth	r1, r1
						disp_type = 1;
 8002f2c:	2201      	movs	r2, #1
						printf("Start %i measures, TXT output\r\n", meas_count);
 8002f2e:	4820      	ldr	r0, [pc, #128]	@ (8002fb0 <CLI_proc+0x81c>)
						disp_type = 1;
 8002f30:	701a      	strb	r2, [r3, #0]
						printf("Start %i measures, TXT output\r\n", meas_count);
 8002f32:	f00a fbfd 	bl	800d730 <iprintf>
						ReinitTimer(tim_interval);
 8002f36:	e4f8      	b.n	800292a <CLI_proc+0x196>
 8002f38:	200002b0 	.word	0x200002b0
 8002f3c:	20000639 	.word	0x20000639
 8002f40:	080112b8 	.word	0x080112b8
 8002f44:	0801142c 	.word	0x0801142c
 8002f48:	08010f0c 	.word	0x08010f0c
 8002f4c:	20000640 	.word	0x20000640
 8002f50:	200006b4 	.word	0x200006b4
 8002f54:	08011434 	.word	0x08011434
 8002f58:	08010f2c 	.word	0x08010f2c
 8002f5c:	0801144c 	.word	0x0801144c
 8002f60:	08010f4c 	.word	0x08010f4c
 8002f64:	2000023c 	.word	0x2000023c
 8002f68:	20000632 	.word	0x20000632
 8002f6c:	20000635 	.word	0x20000635
 8002f70:	20000634 	.word	0x20000634
 8002f74:	08011464 	.word	0x08011464
 8002f78:	08010f74 	.word	0x08010f74
 8002f7c:	20000243 	.word	0x20000243
 8002f80:	080111e0 	.word	0x080111e0
 8002f84:	2000023d 	.word	0x2000023d
 8002f88:	08010f84 	.word	0x08010f84
 8002f8c:	43fa0000 	.word	0x43fa0000
 8002f90:	c3fa0000 	.word	0xc3fa0000
 8002f94:	080114f0 	.word	0x080114f0
 8002f98:	08010fb0 	.word	0x08010fb0
 8002f9c:	08011510 	.word	0x08011510
 8002fa0:	08010fd8 	.word	0x08010fd8
 8002fa4:	08011534 	.word	0x08011534
 8002fa8:	2000000a 	.word	0x2000000a
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	08011570 	.word	0x08011570
					if((p = find("enable")))
 8002fb4:	48ae      	ldr	r0, [pc, #696]	@ (8003270 <CLI_proc+0xadc>)
 8002fb6:	f7ff fa4d 	bl	8002454 <find>
 8002fba:	b170      	cbz	r0, 8002fda <CLI_proc+0x846>
						config.SHT3_use = 1;
 8002fbc:	48ad      	ldr	r0, [pc, #692]	@ (8003274 <CLI_proc+0xae0>)
						SHT3.sensor_use = 1;
 8002fbe:	49ae      	ldr	r1, [pc, #696]	@ (8003278 <CLI_proc+0xae4>)
						config.SHT3_use = 1;
 8002fc0:	7bc2      	ldrb	r2, [r0, #15]
						SHT3.sensor_use = 1;
 8002fc2:	780b      	ldrb	r3, [r1, #0]
						config.SHT3_use = 1;
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
						SHT3.sensor_use = 1;
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
						config.SHT3_use = 1;
 8002fcc:	73c2      	strb	r2, [r0, #15]
						printf("SHTC3 sensor enabled\r\n");
 8002fce:	48ab      	ldr	r0, [pc, #684]	@ (800327c <CLI_proc+0xae8>)
						SHT3.sensor_use = 1;
 8002fd0:	700b      	strb	r3, [r1, #0]
						printf("SHTC3 sensor enabled\r\n");
 8002fd2:	f00a fc15 	bl	800d800 <puts>
						Save_config();
 8002fd6:	f7fe f9d5 	bl	8001384 <Save_config>
					if((p = find("disable")))
 8002fda:	48a9      	ldr	r0, [pc, #676]	@ (8003280 <CLI_proc+0xaec>)
 8002fdc:	f7ff fa3a 	bl	8002454 <find>
 8002fe0:	b170      	cbz	r0, 8003000 <CLI_proc+0x86c>
						config.SHT3_use = 0;
 8002fe2:	49a4      	ldr	r1, [pc, #656]	@ (8003274 <CLI_proc+0xae0>)
						SHT3.sensor_use = 0;
 8002fe4:	4ba4      	ldr	r3, [pc, #656]	@ (8003278 <CLI_proc+0xae4>)
						config.SHT3_use = 0;
 8002fe6:	7bc8      	ldrb	r0, [r1, #15]
						SHT3.sensor_use = 0;
 8002fe8:	781a      	ldrb	r2, [r3, #0]
						config.SHT3_use = 0;
 8002fea:	f36f 0000 	bfc	r0, #0, #1
						SHT3.sensor_use = 0;
 8002fee:	f36f 0241 	bfc	r2, #1, #1
						config.SHT3_use = 0;
 8002ff2:	73c8      	strb	r0, [r1, #15]
						printf("SHTC3 sensor disabled\r\n");
 8002ff4:	48a3      	ldr	r0, [pc, #652]	@ (8003284 <CLI_proc+0xaf0>)
						SHT3.sensor_use = 0;
 8002ff6:	701a      	strb	r2, [r3, #0]
						printf("SHTC3 sensor disabled\r\n");
 8002ff8:	f00a fc02 	bl	800d800 <puts>
						Save_config();
 8002ffc:	f7fe f9c2 	bl	8001384 <Save_config>
					if((p = find("conf ")))
 8003000:	48a1      	ldr	r0, [pc, #644]	@ (8003288 <CLI_proc+0xaf4>)
 8003002:	f7ff fa27 	bl	8002454 <find>
 8003006:	b1e0      	cbz	r0, 8003042 <CLI_proc+0x8ae>
			            getval(clibuf+15, &tmp, 0, 1);
 8003008:	2301      	movs	r3, #1
 800300a:	2200      	movs	r2, #0
 800300c:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 800300e:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+15, &tmp, 0, 1);
 8003012:	489e      	ldr	r0, [pc, #632]	@ (800328c <CLI_proc+0xaf8>)
						int32_t tmp = -1;
 8003014:	9501      	str	r5, [sp, #4]
			            getval(clibuf+15, &tmp, 0, 1);
 8003016:	f7ff fa47 	bl	80024a8 <getval>
			            config.SHT3_conf = tmp;
 800301a:	4a96      	ldr	r2, [pc, #600]	@ (8003274 <CLI_proc+0xae0>)
 800301c:	9901      	ldr	r1, [sp, #4]
 800301e:	7bd5      	ldrb	r5, [r2, #15]
			            SHT3.sensor_conf = tmp;
 8003020:	4b95      	ldr	r3, [pc, #596]	@ (8003278 <CLI_proc+0xae4>)
			            config.SHT3_conf = tmp;
 8003022:	f001 000f 	and.w	r0, r1, #15
 8003026:	f360 0544 	bfi	r5, r0, #1, #4
 800302a:	73d5      	strb	r5, [r2, #15]
			            SHT3.sensor_conf = tmp;
 800302c:	781a      	ldrb	r2, [r3, #0]
			            sht3_mode=tmp;
 800302e:	4d98      	ldr	r5, [pc, #608]	@ (8003290 <CLI_proc+0xafc>)
			            SHT3.sensor_conf = tmp;
 8003030:	f360 0285 	bfi	r2, r0, #2, #4
			            printf("SHT3 temperature config %li\r\n",tmp);
 8003034:	4897      	ldr	r0, [pc, #604]	@ (8003294 <CLI_proc+0xb00>)
			            SHT3.sensor_conf = tmp;
 8003036:	701a      	strb	r2, [r3, #0]
			            sht3_mode=tmp;
 8003038:	7029      	strb	r1, [r5, #0]
			            printf("SHT3 temperature config %li\r\n",tmp);
 800303a:	f00a fb79 	bl	800d730 <iprintf>
						Save_config();
 800303e:	f7fe f9a1 	bl	8001384 <Save_config>
					if((p = find("temperature ")))
 8003042:	4895      	ldr	r0, [pc, #596]	@ (8003298 <CLI_proc+0xb04>)
 8003044:	f7ff fa06 	bl	8002454 <find>
 8003048:	4605      	mov	r5, r0
 800304a:	b118      	cbz	r0, 8003054 <CLI_proc+0x8c0>
						if(p == clibuf+22)
 800304c:	4b93      	ldr	r3, [pc, #588]	@ (800329c <CLI_proc+0xb08>)
 800304e:	4298      	cmp	r0, r3
 8003050:	f000 82e8 	beq.w	8003624 <CLI_proc+0xe90>
					if((p = find("hum ")))
 8003054:	4892      	ldr	r0, [pc, #584]	@ (80032a0 <CLI_proc+0xb0c>)
 8003056:	f7ff f9fd 	bl	8002454 <find>
 800305a:	4605      	mov	r5, r0
 800305c:	2800      	cmp	r0, #0
 800305e:	f43f acea 	beq.w	8002a36 <CLI_proc+0x2a2>
						if(p == clibuf+14)
 8003062:	4b90      	ldr	r3, [pc, #576]	@ (80032a4 <CLI_proc+0xb10>)
 8003064:	4298      	cmp	r0, r3
 8003066:	f47f ace6 	bne.w	8002a36 <CLI_proc+0x2a2>
							if((strstr(clibuf+14, "offset ")))
 800306a:	498f      	ldr	r1, [pc, #572]	@ (80032a8 <CLI_proc+0xb14>)
 800306c:	f00a fce2 	bl	800da34 <strstr>
 8003070:	b1b0      	cbz	r0, 80030a0 <CLI_proc+0x90c>
						        getFloat(clibuf+21, &tmp, MIN_OFFSET, MAX_OFFSET);
 8003072:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8003076:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 800307a:	a901      	add	r1, sp, #4
 800307c:	1de8      	adds	r0, r5, #7
 800307e:	f7ff fa3f 	bl	8002500 <getFloat>
						        SHT3.hum.offset = tmp;
 8003082:	4b7d      	ldr	r3, [pc, #500]	@ (8003278 <CLI_proc+0xae4>)
						        config.SHT3_h_offset = tmp;
 8003084:	497b      	ldr	r1, [pc, #492]	@ (8003274 <CLI_proc+0xae0>)
 8003086:	9801      	ldr	r0, [sp, #4]
						        SHT3.hum.offset = tmp;
 8003088:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.SHT3_h_offset = tmp;
 800308c:	6148      	str	r0, [r1, #20]
						        printf("SHTC3 humidity offset %.6f\r\n",tmp);
 800308e:	f7fd fa5b 	bl	8000548 <__aeabi_f2d>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4885      	ldr	r0, [pc, #532]	@ (80032ac <CLI_proc+0xb18>)
 8003098:	f00a fb4a 	bl	800d730 <iprintf>
						        Save_config();
 800309c:	f7fe f972 	bl	8001384 <Save_config>
							if((strstr(clibuf+14, "en")))
 80030a0:	4983      	ldr	r1, [pc, #524]	@ (80032b0 <CLI_proc+0xb1c>)
 80030a2:	4880      	ldr	r0, [pc, #512]	@ (80032a4 <CLI_proc+0xb10>)
 80030a4:	f00a fcc6 	bl	800da34 <strstr>
 80030a8:	b170      	cbz	r0, 80030c8 <CLI_proc+0x934>
								SHT3.hum.use_meas = 1;
 80030aa:	4973      	ldr	r1, [pc, #460]	@ (8003278 <CLI_proc+0xae4>)
								config.SHT3_h_use = 1;
 80030ac:	4c71      	ldr	r4, [pc, #452]	@ (8003274 <CLI_proc+0xae0>)
								SHT3.hum.use_meas = 1;
 80030ae:	7a8b      	ldrb	r3, [r1, #10]
								config.SHT3_h_use = 1;
 80030b0:	7be2      	ldrb	r2, [r4, #15]
								printf("SHTC3 humidity measure enabled\r\n");
 80030b2:	4880      	ldr	r0, [pc, #512]	@ (80032b4 <CLI_proc+0xb20>)
								config.SHT3_h_use = 1;
 80030b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								SHT3.hum.use_meas = 1;
 80030b8:	f043 0301 	orr.w	r3, r3, #1
								config.SHT3_h_use = 1;
 80030bc:	73e2      	strb	r2, [r4, #15]
								SHT3.hum.use_meas = 1;
 80030be:	728b      	strb	r3, [r1, #10]
								printf("SHTC3 humidity measure enabled\r\n");
 80030c0:	f00a fb9e 	bl	800d800 <puts>
								Save_config();
 80030c4:	f7fe f95e 	bl	8001384 <Save_config>
							if((strstr(clibuf+14, "dis")))
 80030c8:	497b      	ldr	r1, [pc, #492]	@ (80032b8 <CLI_proc+0xb24>)
 80030ca:	4876      	ldr	r0, [pc, #472]	@ (80032a4 <CLI_proc+0xb10>)
 80030cc:	f00a fcb2 	bl	800da34 <strstr>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	f43f ab6e 	beq.w	80027b2 <CLI_proc+0x1e>
								config.SHT3_h_use = 0;
 80030d6:	4967      	ldr	r1, [pc, #412]	@ (8003274 <CLI_proc+0xae0>)
								SHT3.hum.use_meas = 0;
 80030d8:	4b67      	ldr	r3, [pc, #412]	@ (8003278 <CLI_proc+0xae4>)
								config.SHT3_h_use = 0;
 80030da:	7bcc      	ldrb	r4, [r1, #15]
								SHT3.hum.use_meas = 0;
 80030dc:	7a9a      	ldrb	r2, [r3, #10]
								printf("SHTC3 humidity measure disable\r\n");
 80030de:	4877      	ldr	r0, [pc, #476]	@ (80032bc <CLI_proc+0xb28>)
								config.SHT3_h_use = 0;
 80030e0:	f36f 1486 	bfc	r4, #6, #1
								SHT3.hum.use_meas = 0;
 80030e4:	f36f 0200 	bfc	r2, #0, #1
								config.SHT3_h_use = 0;
 80030e8:	73cc      	strb	r4, [r1, #15]
								SHT3.hum.use_meas = 0;
 80030ea:	e554      	b.n	8002b96 <CLI_proc+0x402>
					if((p = find("enable")))
 80030ec:	4860      	ldr	r0, [pc, #384]	@ (8003270 <CLI_proc+0xadc>)
 80030ee:	f7ff f9b1 	bl	8002454 <find>
 80030f2:	b170      	cbz	r0, 8003112 <CLI_proc+0x97e>
						config.TMP117_use = 1;
 80030f4:	495f      	ldr	r1, [pc, #380]	@ (8003274 <CLI_proc+0xae0>)
						TMP117.sensor_use = 1;
 80030f6:	4a72      	ldr	r2, [pc, #456]	@ (80032c0 <CLI_proc+0xb2c>)
						config.TMP117_use = 1;
 80030f8:	7a8b      	ldrb	r3, [r1, #10]
						printf("TMP117 sensor enabled\r\n");
 80030fa:	4872      	ldr	r0, [pc, #456]	@ (80032c4 <CLI_proc+0xb30>)
						config.TMP117_use = 1;
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	728b      	strb	r3, [r1, #10]
						TMP117.sensor_use = 1;
 8003102:	7813      	ldrb	r3, [r2, #0]
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	7013      	strb	r3, [r2, #0]
						printf("TMP117 sensor enabled\r\n");
 800310a:	f00a fb79 	bl	800d800 <puts>
						Save_config();
 800310e:	f7fe f939 	bl	8001384 <Save_config>
					if((p = find("disable")))
 8003112:	485b      	ldr	r0, [pc, #364]	@ (8003280 <CLI_proc+0xaec>)
 8003114:	f7ff f99e 	bl	8002454 <find>
 8003118:	b170      	cbz	r0, 8003138 <CLI_proc+0x9a4>
						config.TMP117_use = 0;
 800311a:	4a56      	ldr	r2, [pc, #344]	@ (8003274 <CLI_proc+0xae0>)
						TMP117.sensor_use = 0;
 800311c:	4b68      	ldr	r3, [pc, #416]	@ (80032c0 <CLI_proc+0xb2c>)
						config.TMP117_use = 0;
 800311e:	7a91      	ldrb	r1, [r2, #10]
						printf("TMP117 sensor disabled\r\n");
 8003120:	4869      	ldr	r0, [pc, #420]	@ (80032c8 <CLI_proc+0xb34>)
						config.TMP117_use = 0;
 8003122:	f36f 0100 	bfc	r1, #0, #1
 8003126:	7291      	strb	r1, [r2, #10]
						TMP117.sensor_use = 0;
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	f36f 0241 	bfc	r2, #1, #1
 800312e:	701a      	strb	r2, [r3, #0]
						printf("TMP117 sensor disabled\r\n");
 8003130:	f00a fb66 	bl	800d800 <puts>
						Save_config();
 8003134:	f7fe f926 	bl	8001384 <Save_config>
					if((p = find("conf ")))
 8003138:	4853      	ldr	r0, [pc, #332]	@ (8003288 <CLI_proc+0xaf4>)
 800313a:	f7ff f98b 	bl	8002454 <find>
 800313e:	b1f8      	cbz	r0, 8003180 <CLI_proc+0x9ec>
						int32_t tmp = -1;
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+16, &tmp, 0, 3);
 8003144:	2303      	movs	r3, #3
 8003146:	2200      	movs	r2, #0
 8003148:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 800314a:	9001      	str	r0, [sp, #4]
						getval(clibuf+16, &tmp, 0, 3);
 800314c:	485f      	ldr	r0, [pc, #380]	@ (80032cc <CLI_proc+0xb38>)
 800314e:	f7ff f9ab 	bl	80024a8 <getval>
						config.TMP117_conf = tmp;
 8003152:	4948      	ldr	r1, [pc, #288]	@ (8003274 <CLI_proc+0xae0>)
						TMP117.sensor_conf = tmp;
 8003154:	4b5a      	ldr	r3, [pc, #360]	@ (80032c0 <CLI_proc+0xb2c>)
						config.TMP117_conf = tmp;
 8003156:	9d01      	ldr	r5, [sp, #4]
 8003158:	7a8e      	ldrb	r6, [r1, #10]
						TMP117.sensor_conf = tmp;
 800315a:	781a      	ldrb	r2, [r3, #0]
						config.TMP117_conf = tmp;
 800315c:	f005 000f 	and.w	r0, r5, #15
						TMP117.sensor_conf = tmp;
 8003160:	f360 0285 	bfi	r2, r0, #2, #4
						config.TMP117_conf = tmp;
 8003164:	f360 0644 	bfi	r6, r0, #1, #4
						TMP117.sensor_conf = tmp;
 8003168:	701a      	strb	r2, [r3, #0]
						config.TMP117_conf = tmp;
 800316a:	728e      	strb	r6, [r1, #10]
						tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 800316c:	f003 fa00 	bl	8006570 <tmp117_avr_conf>
 8003170:	4b57      	ldr	r3, [pc, #348]	@ (80032d0 <CLI_proc+0xb3c>)
						printf("TMP117 temperature config %li\r\n",tmp);
 8003172:	4629      	mov	r1, r5
						tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8003174:	8018      	strh	r0, [r3, #0]
						printf("TMP117 temperature config %li\r\n",tmp);
 8003176:	4857      	ldr	r0, [pc, #348]	@ (80032d4 <CLI_proc+0xb40>)
 8003178:	f00a fada 	bl	800d730 <iprintf>
						Save_config();
 800317c:	f7fe f902 	bl	8001384 <Save_config>
					if((p = find("temperature ")))
 8003180:	4845      	ldr	r0, [pc, #276]	@ (8003298 <CLI_proc+0xb04>)
 8003182:	f7ff f967 	bl	8002454 <find>
 8003186:	4605      	mov	r5, r0
 8003188:	2800      	cmp	r0, #0
 800318a:	f43f ac4d 	beq.w	8002a28 <CLI_proc+0x294>
						if(p == clibuf+23)
 800318e:	4b52      	ldr	r3, [pc, #328]	@ (80032d8 <CLI_proc+0xb44>)
 8003190:	4298      	cmp	r0, r3
 8003192:	f47f ac49 	bne.w	8002a28 <CLI_proc+0x294>
							if((strstr(clibuf+23, "offset ")))
 8003196:	4944      	ldr	r1, [pc, #272]	@ (80032a8 <CLI_proc+0xb14>)
 8003198:	f00a fc4c 	bl	800da34 <strstr>
 800319c:	b1b8      	cbz	r0, 80031ce <CLI_proc+0xa3a>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 800319e:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80031a2:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 80031a6:	a901      	add	r1, sp, #4
 80031a8:	1de8      	adds	r0, r5, #7
 80031aa:	f7ff f9a9 	bl	8002500 <getFloat>
					            TMP117.temp.offset = tmp;
 80031ae:	4b44      	ldr	r3, [pc, #272]	@ (80032c0 <CLI_proc+0xb2c>)
					            config.TMP117_t_offset = tmp;
 80031b0:	4930      	ldr	r1, [pc, #192]	@ (8003274 <CLI_proc+0xae0>)
 80031b2:	9801      	ldr	r0, [sp, #4]
					            TMP117.temp.offset = tmp;
 80031b4:	f8c3 0006 	str.w	r0, [r3, #6]
					            config.TMP117_t_offset = tmp;
 80031b8:	f8c1 000b 	str.w	r0, [r1, #11]
					            printf("TMP117 temperature offset %.6f\r\n",tmp);
 80031bc:	f7fd f9c4 	bl	8000548 <__aeabi_f2d>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4845      	ldr	r0, [pc, #276]	@ (80032dc <CLI_proc+0xb48>)
 80031c6:	f00a fab3 	bl	800d730 <iprintf>
								Save_config();
 80031ca:	f7fe f8db 	bl	8001384 <Save_config>
							if((strstr(clibuf+23, "en")))
 80031ce:	4938      	ldr	r1, [pc, #224]	@ (80032b0 <CLI_proc+0xb1c>)
 80031d0:	4841      	ldr	r0, [pc, #260]	@ (80032d8 <CLI_proc+0xb44>)
 80031d2:	f00a fc2f 	bl	800da34 <strstr>
 80031d6:	b170      	cbz	r0, 80031f6 <CLI_proc+0xa62>
								TMP117.temp.use_meas = 1;
 80031d8:	4939      	ldr	r1, [pc, #228]	@ (80032c0 <CLI_proc+0xb2c>)
								config.TMP117_t_use = 1;
 80031da:	4c26      	ldr	r4, [pc, #152]	@ (8003274 <CLI_proc+0xae0>)
								TMP117.temp.use_meas = 1;
 80031dc:	784b      	ldrb	r3, [r1, #1]
								config.TMP117_t_use = 1;
 80031de:	7aa2      	ldrb	r2, [r4, #10]
								printf("TMP117 temperature measure enabled\r\n");
 80031e0:	483f      	ldr	r0, [pc, #252]	@ (80032e0 <CLI_proc+0xb4c>)
								config.TMP117_t_use = 1;
 80031e2:	f042 0220 	orr.w	r2, r2, #32
								TMP117.temp.use_meas = 1;
 80031e6:	f043 0301 	orr.w	r3, r3, #1
								config.TMP117_t_use = 1;
 80031ea:	72a2      	strb	r2, [r4, #10]
								TMP117.temp.use_meas = 1;
 80031ec:	704b      	strb	r3, [r1, #1]
								printf("TMP117 temperature measure enabled\r\n");
 80031ee:	f00a fb07 	bl	800d800 <puts>
								Save_config();
 80031f2:	f7fe f8c7 	bl	8001384 <Save_config>
							if((strstr(clibuf+23, "dis")))
 80031f6:	4930      	ldr	r1, [pc, #192]	@ (80032b8 <CLI_proc+0xb24>)
 80031f8:	4837      	ldr	r0, [pc, #220]	@ (80032d8 <CLI_proc+0xb44>)
 80031fa:	f00a fc1b 	bl	800da34 <strstr>
 80031fe:	2800      	cmp	r0, #0
 8003200:	f43f aad7 	beq.w	80027b2 <CLI_proc+0x1e>
								config.TMP117_t_use = 0;
 8003204:	491b      	ldr	r1, [pc, #108]	@ (8003274 <CLI_proc+0xae0>)
								TMP117.temp.use_meas = 0;
 8003206:	4b2e      	ldr	r3, [pc, #184]	@ (80032c0 <CLI_proc+0xb2c>)
								config.TMP117_t_use = 0;
 8003208:	7a8c      	ldrb	r4, [r1, #10]
								TMP117.temp.use_meas = 0;
 800320a:	785a      	ldrb	r2, [r3, #1]
								printf("TMP117 temperature measure disable\r\n");
 800320c:	4835      	ldr	r0, [pc, #212]	@ (80032e4 <CLI_proc+0xb50>)
								config.TMP117_t_use = 0;
 800320e:	f36f 1445 	bfc	r4, #5, #1
								TMP117.temp.use_meas = 0;
 8003212:	f36f 0200 	bfc	r2, #0, #1
								config.TMP117_t_use = 0;
 8003216:	728c      	strb	r4, [r1, #10]
								TMP117.temp.use_meas = 0;
 8003218:	705a      	strb	r2, [r3, #1]
								printf("TMP117 temperature measure disable\r\n");
 800321a:	e4bd      	b.n	8002b98 <CLI_proc+0x404>
		            else {disp_type = tmp; printf("Silent mode\r\n");}
 800321c:	4b32      	ldr	r3, [pc, #200]	@ (80032e8 <CLI_proc+0xb54>)
 800321e:	4833      	ldr	r0, [pc, #204]	@ (80032ec <CLI_proc+0xb58>)
 8003220:	701c      	strb	r4, [r3, #0]
}
 8003222:	b003      	add	sp, #12
 8003224:	ecbd 8b02 	vpop	{d8}
 8003228:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		            else {disp_type = tmp; printf("Silent mode\r\n");}
 800322c:	f00a bae8 	b.w	800d800 <puts>
						int32_t tmp = -1;
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
						getval(clibuf+15, &tmp, 1, 500);
 8003234:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003238:	2201      	movs	r2, #1
 800323a:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 800323c:	9001      	str	r0, [sp, #4]
						getval(clibuf+15, &tmp, 1, 500);
 800323e:	f105 000a 	add.w	r0, r5, #10
 8003242:	f7ff f931 	bl	80024a8 <getval>
						meas_count = tmp;
 8003246:	9901      	ldr	r1, [sp, #4]
 8003248:	4829      	ldr	r0, [pc, #164]	@ (80032f0 <CLI_proc+0xb5c>)
						meas_cont_mode = 0;
 800324a:	4a2a      	ldr	r2, [pc, #168]	@ (80032f4 <CLI_proc+0xb60>)
						disp_type = 2;
 800324c:	4b26      	ldr	r3, [pc, #152]	@ (80032e8 <CLI_proc+0xb54>)
						meas_count = tmp;
 800324e:	8001      	strh	r1, [r0, #0]
						meas_cont_mode = 0;
 8003250:	7016      	strb	r6, [r2, #0]
						printf("Start %i measures, CSV output\r\n", meas_count);
 8003252:	4829      	ldr	r0, [pc, #164]	@ (80032f8 <CLI_proc+0xb64>)
						disp_type = 2;
 8003254:	2202      	movs	r2, #2
						printf("Start %i measures, CSV output\r\n", meas_count);
 8003256:	b289      	uxth	r1, r1
						disp_type = 2;
 8003258:	701a      	strb	r2, [r3, #0]
						printf("Start %i measures, CSV output\r\n", meas_count);
 800325a:	f00a fa69 	bl	800d730 <iprintf>
						csvcnt = 0;
 800325e:	4b27      	ldr	r3, [pc, #156]	@ (80032fc <CLI_proc+0xb68>)
 8003260:	801e      	strh	r6, [r3, #0]
						printCSVheader();
 8003262:	f7ff bb60 	b.w	8002926 <CLI_proc+0x192>
		            	if(tmp==1) printf("Display type TXT\r\n"); else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8003266:	4826      	ldr	r0, [pc, #152]	@ (8003300 <CLI_proc+0xb6c>)
 8003268:	f00a faca 	bl	800d800 <puts>
 800326c:	e582      	b.n	8002d74 <CLI_proc+0x5e0>
 800326e:	bf00      	nop
 8003270:	08010f0c 	.word	0x08010f0c
 8003274:	20000640 	.word	0x20000640
 8003278:	20000714 	.word	0x20000714
 800327c:	08011008 	.word	0x08011008
 8003280:	08010f2c 	.word	0x08010f2c
 8003284:	08011020 	.word	0x08011020
 8003288:	08010f4c 	.word	0x08010f4c
 800328c:	2000023b 	.word	0x2000023b
 8003290:	20000630 	.word	0x20000630
 8003294:	08011038 	.word	0x08011038
 8003298:	08010f74 	.word	0x08010f74
 800329c:	20000242 	.word	0x20000242
 80032a0:	080110c0 	.word	0x080110c0
 80032a4:	2000023a 	.word	0x2000023a
 80032a8:	08010f84 	.word	0x08010f84
 80032ac:	080110c8 	.word	0x080110c8
 80032b0:	08010fb0 	.word	0x08010fb0
 80032b4:	080110e8 	.word	0x080110e8
 80032b8:	08010fd8 	.word	0x08010fd8
 80032bc:	08011108 	.word	0x08011108
 80032c0:	2000072c 	.word	0x2000072c
 80032c4:	08010f14 	.word	0x08010f14
 80032c8:	08010f34 	.word	0x08010f34
 80032cc:	2000023c 	.word	0x2000023c
 80032d0:	20000636 	.word	0x20000636
 80032d4:	08010f54 	.word	0x08010f54
 80032d8:	20000243 	.word	0x20000243
 80032dc:	08010f8c 	.word	0x08010f8c
 80032e0:	08010fb4 	.word	0x08010fb4
 80032e4:	08010fdc 	.word	0x08010fdc
 80032e8:	20000639 	.word	0x20000639
 80032ec:	08010ef4 	.word	0x08010ef4
 80032f0:	2000000a 	.word	0x2000000a
 80032f4:	20000008 	.word	0x20000008
 80032f8:	08011598 	.word	0x08011598
 80032fc:	200002b0 	.word	0x200002b0
 8003300:	08010ecc 	.word	0x08010ecc
								meas_cont_mode = 1;
 8003304:	49a6      	ldr	r1, [pc, #664]	@ (80035a0 <CLI_proc+0xe0c>)
								disp_type = 1;
 8003306:	4aa7      	ldr	r2, [pc, #668]	@ (80035a4 <CLI_proc+0xe10>)
								printf("Start continuous measurement, TXT format\r\n");
 8003308:	48a7      	ldr	r0, [pc, #668]	@ (80035a8 <CLI_proc+0xe14>)
								meas_cont_mode = 1;
 800330a:	2301      	movs	r3, #1
 800330c:	700b      	strb	r3, [r1, #0]
								disp_type = 1;
 800330e:	7013      	strb	r3, [r2, #0]
								printf("Start continuous measurement, TXT format\r\n");
 8003310:	f00a fa76 	bl	800d800 <puts>
								ReinitTimer(tim_interval);
 8003314:	f7ff bb09 	b.w	800292a <CLI_proc+0x196>
		            	if(tmp==1) printf("Display type TXT\r\n"); else if(tmp==2) { printf("Display type CSV"); printCSVheader();}
 8003318:	48a4      	ldr	r0, [pc, #656]	@ (80035ac <CLI_proc+0xe18>)
 800331a:	f00a fa09 	bl	800d730 <iprintf>
 800331e:	f002 f977 	bl	8005610 <printCSVheader>
 8003322:	e527      	b.n	8002d74 <CLI_proc+0x5e0>
							if((strstr(clibuf+23, "offset ")))
 8003324:	49a2      	ldr	r1, [pc, #648]	@ (80035b0 <CLI_proc+0xe1c>)
 8003326:	f00a fb85 	bl	800da34 <strstr>
 800332a:	b1b8      	cbz	r0, 800335c <CLI_proc+0xbc8>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 800332c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8003330:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8003334:	a901      	add	r1, sp, #4
 8003336:	1de0      	adds	r0, r4, #7
 8003338:	f7ff f8e2 	bl	8002500 <getFloat>
					            MS8607.temp.offset = tmp;
 800333c:	4b9d      	ldr	r3, [pc, #628]	@ (80035b4 <CLI_proc+0xe20>)
					            config.MS8607_t_offset = tmp;
 800333e:	499e      	ldr	r1, [pc, #632]	@ (80035b8 <CLI_proc+0xe24>)
 8003340:	9801      	ldr	r0, [sp, #4]
					            MS8607.temp.offset = tmp;
 8003342:	f8c3 0006 	str.w	r0, [r3, #6]
					            config.MS8607_t_offset = tmp;
 8003346:	f8c1 0019 	str.w	r0, [r1, #25]
					            printf("MS8607 temperature offset %.6f\r\n",tmp);
 800334a:	f7fd f8fd 	bl	8000548 <__aeabi_f2d>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	489a      	ldr	r0, [pc, #616]	@ (80035bc <CLI_proc+0xe28>)
 8003354:	f00a f9ec 	bl	800d730 <iprintf>
								Save_config();
 8003358:	f7fe f814 	bl	8001384 <Save_config>
							if((strstr(clibuf+23, "en")))
 800335c:	4998      	ldr	r1, [pc, #608]	@ (80035c0 <CLI_proc+0xe2c>)
 800335e:	4899      	ldr	r0, [pc, #612]	@ (80035c4 <CLI_proc+0xe30>)
 8003360:	f00a fb68 	bl	800da34 <strstr>
 8003364:	b170      	cbz	r0, 8003384 <CLI_proc+0xbf0>
								MS8607.temp.use_meas = 1;
 8003366:	4993      	ldr	r1, [pc, #588]	@ (80035b4 <CLI_proc+0xe20>)
								config.MS8607_t_use = 1;
 8003368:	4c93      	ldr	r4, [pc, #588]	@ (80035b8 <CLI_proc+0xe24>)
								MS8607.temp.use_meas = 1;
 800336a:	784b      	ldrb	r3, [r1, #1]
								config.MS8607_t_use = 1;
 800336c:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 temperature measure enabled\r\n");
 800336e:	4896      	ldr	r0, [pc, #600]	@ (80035c8 <CLI_proc+0xe34>)
								config.MS8607_t_use = 1;
 8003370:	f042 0220 	orr.w	r2, r2, #32
								MS8607.temp.use_meas = 1;
 8003374:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_t_use = 1;
 8003378:	7622      	strb	r2, [r4, #24]
								MS8607.temp.use_meas = 1;
 800337a:	704b      	strb	r3, [r1, #1]
								printf("MS8607 temperature measure enabled\r\n");
 800337c:	f00a fa40 	bl	800d800 <puts>
								Save_config();
 8003380:	f7fe f800 	bl	8001384 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8003384:	4991      	ldr	r1, [pc, #580]	@ (80035cc <CLI_proc+0xe38>)
 8003386:	488f      	ldr	r0, [pc, #572]	@ (80035c4 <CLI_proc+0xe30>)
 8003388:	f00a fb54 	bl	800da34 <strstr>
 800338c:	2800      	cmp	r0, #0
 800338e:	f43f abad 	beq.w	8002aec <CLI_proc+0x358>
								config.MS8607_t_use = 0;
 8003392:	4989      	ldr	r1, [pc, #548]	@ (80035b8 <CLI_proc+0xe24>)
								MS8607.temp.use_meas = 0;
 8003394:	4b87      	ldr	r3, [pc, #540]	@ (80035b4 <CLI_proc+0xe20>)
								config.MS8607_t_use = 0;
 8003396:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.temp.use_meas = 0;
 8003398:	785a      	ldrb	r2, [r3, #1]
								printf("MS8607 temperature measure disable\r\n");
 800339a:	488d      	ldr	r0, [pc, #564]	@ (80035d0 <CLI_proc+0xe3c>)
								MS8607.temp.use_meas = 0;
 800339c:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_t_use = 0;
 80033a0:	f36f 1445 	bfc	r4, #5, #1
 80033a4:	760c      	strb	r4, [r1, #24]
								MS8607.temp.use_meas = 0;
 80033a6:	705a      	strb	r2, [r3, #1]
								printf("MS8607 temperature measure disable\r\n");
 80033a8:	f00a fa2a 	bl	800d800 <puts>
								Save_config();
 80033ac:	f7fd ffea 	bl	8001384 <Save_config>
 80033b0:	f7ff bb9c 	b.w	8002aec <CLI_proc+0x358>
							if((strstr(clibuf+17, "offset ")))
 80033b4:	497e      	ldr	r1, [pc, #504]	@ (80035b0 <CLI_proc+0xe1c>)
 80033b6:	f00a fb3d 	bl	800da34 <strstr>
 80033ba:	b1b0      	cbz	r0, 80033ea <CLI_proc+0xc56>
					            getFloat(clibuf+24, &tmp, -500, 500);
 80033bc:	eddf 0a85 	vldr	s1, [pc, #532]	@ 80035d4 <CLI_proc+0xe40>
 80033c0:	ed9f 0a85 	vldr	s0, [pc, #532]	@ 80035d8 <CLI_proc+0xe44>
 80033c4:	a901      	add	r1, sp, #4
 80033c6:	1de0      	adds	r0, r4, #7
 80033c8:	f7ff f89a 	bl	8002500 <getFloat>
					            MS8607.press.offset = tmp;
 80033cc:	4b79      	ldr	r3, [pc, #484]	@ (80035b4 <CLI_proc+0xe20>)
					            config.MS8607_p_offset = tmp;
 80033ce:	497a      	ldr	r1, [pc, #488]	@ (80035b8 <CLI_proc+0xe24>)
 80033d0:	9801      	ldr	r0, [sp, #4]
					            MS8607.press.offset = tmp;
 80033d2:	6198      	str	r0, [r3, #24]
					            config.MS8607_p_offset = tmp;
 80033d4:	f8c1 0021 	str.w	r0, [r1, #33]	@ 0x21
					            printf("MS8607 pressure offset %.6f\r\n",tmp);
 80033d8:	f7fd f8b6 	bl	8000548 <__aeabi_f2d>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	487e      	ldr	r0, [pc, #504]	@ (80035dc <CLI_proc+0xe48>)
 80033e2:	f00a f9a5 	bl	800d730 <iprintf>
								Save_config();
 80033e6:	f7fd ffcd 	bl	8001384 <Save_config>
							if((strstr(clibuf+17, "en")))
 80033ea:	4975      	ldr	r1, [pc, #468]	@ (80035c0 <CLI_proc+0xe2c>)
 80033ec:	487c      	ldr	r0, [pc, #496]	@ (80035e0 <CLI_proc+0xe4c>)
 80033ee:	f00a fb21 	bl	800da34 <strstr>
 80033f2:	b170      	cbz	r0, 8003412 <CLI_proc+0xc7e>
								MS8607.press.use_meas = 1;
 80033f4:	496f      	ldr	r1, [pc, #444]	@ (80035b4 <CLI_proc+0xe20>)
								config.MS8607_p_use = 1;
 80033f6:	4c70      	ldr	r4, [pc, #448]	@ (80035b8 <CLI_proc+0xe24>)
								MS8607.press.use_meas = 1;
 80033f8:	7ccb      	ldrb	r3, [r1, #19]
								config.MS8607_p_use = 1;
 80033fa:	7e22      	ldrb	r2, [r4, #24]
								printf("MS8607 pressure measure enabled\r\n");
 80033fc:	4879      	ldr	r0, [pc, #484]	@ (80035e4 <CLI_proc+0xe50>)
								config.MS8607_p_use = 1;
 80033fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
								MS8607.press.use_meas = 1;
 8003402:	f043 0301 	orr.w	r3, r3, #1
								config.MS8607_p_use = 1;
 8003406:	7622      	strb	r2, [r4, #24]
								MS8607.press.use_meas = 1;
 8003408:	74cb      	strb	r3, [r1, #19]
								printf("MS8607 pressure measure enabled\r\n");
 800340a:	f00a f9f9 	bl	800d800 <puts>
								Save_config();
 800340e:	f7fd ffb9 	bl	8001384 <Save_config>
							if((strstr(clibuf+17, "dis")))
 8003412:	496e      	ldr	r1, [pc, #440]	@ (80035cc <CLI_proc+0xe38>)
 8003414:	4872      	ldr	r0, [pc, #456]	@ (80035e0 <CLI_proc+0xe4c>)
 8003416:	f00a fb0d 	bl	800da34 <strstr>
 800341a:	2800      	cmp	r0, #0
 800341c:	f43f ab6f 	beq.w	8002afe <CLI_proc+0x36a>
								config.MS8607_p_use = 0;
 8003420:	4965      	ldr	r1, [pc, #404]	@ (80035b8 <CLI_proc+0xe24>)
								MS8607.press.use_meas = 0;
 8003422:	4b64      	ldr	r3, [pc, #400]	@ (80035b4 <CLI_proc+0xe20>)
								config.MS8607_p_use = 0;
 8003424:	7e0c      	ldrb	r4, [r1, #24]
								MS8607.press.use_meas = 0;
 8003426:	7cda      	ldrb	r2, [r3, #19]
								printf("MS8607 pressure measure disable\r\n");
 8003428:	486f      	ldr	r0, [pc, #444]	@ (80035e8 <CLI_proc+0xe54>)
								MS8607.press.use_meas = 0;
 800342a:	f36f 0200 	bfc	r2, #0, #1
								config.MS8607_p_use = 0;
 800342e:	f36f 14c7 	bfc	r4, #7, #1
 8003432:	760c      	strb	r4, [r1, #24]
								MS8607.press.use_meas = 0;
 8003434:	74da      	strb	r2, [r3, #19]
								printf("MS8607 pressure measure disable\r\n");
 8003436:	f00a f9e3 	bl	800d800 <puts>
								Save_config();
 800343a:	f7fd ffa3 	bl	8001384 <Save_config>
 800343e:	f7ff bb5e 	b.w	8002afe <CLI_proc+0x36a>
					if((p = find("enable")))
 8003442:	486a      	ldr	r0, [pc, #424]	@ (80035ec <CLI_proc+0xe58>)
 8003444:	f7ff f806 	bl	8002454 <find>
 8003448:	b180      	cbz	r0, 800346c <CLI_proc+0xcd8>
						config.BME280_use = 1;
 800344a:	485b      	ldr	r0, [pc, #364]	@ (80035b8 <CLI_proc+0xe24>)
						BME280.sensor_use = 1;
 800344c:	4968      	ldr	r1, [pc, #416]	@ (80035f0 <CLI_proc+0xe5c>)
						config.BME280_use = 1;
 800344e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
						BME280.sensor_use = 1;
 8003452:	780b      	ldrb	r3, [r1, #0]
						config.BME280_use = 1;
 8003454:	f042 0201 	orr.w	r2, r2, #1
						BME280.sensor_use = 1;
 8003458:	f043 0302 	orr.w	r3, r3, #2
						config.BME280_use = 1;
 800345c:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
						printf("BME280 sensor enabled\r\n");
 8003460:	4864      	ldr	r0, [pc, #400]	@ (80035f4 <CLI_proc+0xe60>)
						BME280.sensor_use = 1;
 8003462:	700b      	strb	r3, [r1, #0]
						printf("BME280 sensor enabled\r\n");
 8003464:	f00a f9cc 	bl	800d800 <puts>
						Save_config();
 8003468:	f7fd ff8c 	bl	8001384 <Save_config>
					if((p = find("disable")))
 800346c:	4862      	ldr	r0, [pc, #392]	@ (80035f8 <CLI_proc+0xe64>)
 800346e:	f7fe fff1 	bl	8002454 <find>
 8003472:	b180      	cbz	r0, 8003496 <CLI_proc+0xd02>
						config.BME280_use = 0;
 8003474:	4950      	ldr	r1, [pc, #320]	@ (80035b8 <CLI_proc+0xe24>)
						BME280.sensor_use = 0;
 8003476:	4b5e      	ldr	r3, [pc, #376]	@ (80035f0 <CLI_proc+0xe5c>)
						config.BME280_use = 0;
 8003478:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
						BME280.sensor_use = 0;
 800347c:	781a      	ldrb	r2, [r3, #0]
						config.BME280_use = 0;
 800347e:	f36f 0000 	bfc	r0, #0, #1
						BME280.sensor_use = 0;
 8003482:	f36f 0241 	bfc	r2, #1, #1
						config.BME280_use = 0;
 8003486:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
						printf("BME280 sensor disabled\r\n");
 800348a:	485c      	ldr	r0, [pc, #368]	@ (80035fc <CLI_proc+0xe68>)
						BME280.sensor_use = 0;
 800348c:	701a      	strb	r2, [r3, #0]
						printf("BME280 sensor disabled\r\n");
 800348e:	f00a f9b7 	bl	800d800 <puts>
						Save_config();
 8003492:	f7fd ff77 	bl	8001384 <Save_config>
					if((p = find("conf ")))
 8003496:	485a      	ldr	r0, [pc, #360]	@ (8003600 <CLI_proc+0xe6c>)
 8003498:	f7fe ffdc 	bl	8002454 <find>
 800349c:	b1e0      	cbz	r0, 80034d8 <CLI_proc+0xd44>
			            getval(clibuf+16, &tmp, 0, 10);
 800349e:	230a      	movs	r3, #10
 80034a0:	2200      	movs	r2, #0
 80034a2:	a901      	add	r1, sp, #4
						int32_t tmp = -1;
 80034a4:	f04f 35ff 	mov.w	r5, #4294967295
			            getval(clibuf+16, &tmp, 0, 10);
 80034a8:	4856      	ldr	r0, [pc, #344]	@ (8003604 <CLI_proc+0xe70>)
						int32_t tmp = -1;
 80034aa:	9501      	str	r5, [sp, #4]
			            getval(clibuf+16, &tmp, 0, 10);
 80034ac:	f7fe fffc 	bl	80024a8 <getval>
			            config.BME280_conf = tmp;
 80034b0:	4a41      	ldr	r2, [pc, #260]	@ (80035b8 <CLI_proc+0xe24>)
 80034b2:	9801      	ldr	r0, [sp, #4]
 80034b4:	f892 5025 	ldrb.w	r5, [r2, #37]	@ 0x25
			            BME280.sensor_conf = tmp;
 80034b8:	4b4d      	ldr	r3, [pc, #308]	@ (80035f0 <CLI_proc+0xe5c>)
			            config.BME280_conf = tmp;
 80034ba:	f000 010f 	and.w	r1, r0, #15
 80034be:	f361 0544 	bfi	r5, r1, #1, #4
 80034c2:	f882 5025 	strb.w	r5, [r2, #37]	@ 0x25
			            BME280.sensor_conf = tmp;
 80034c6:	781a      	ldrb	r2, [r3, #0]
			            bme280_conf_change(tmp);
 80034c8:	b2c0      	uxtb	r0, r0
			            BME280.sensor_conf = tmp;
 80034ca:	f361 0285 	bfi	r2, r1, #2, #4
 80034ce:	701a      	strb	r2, [r3, #0]
			            bme280_conf_change(tmp);
 80034d0:	f003 fb04 	bl	8006adc <bme280_conf_change>
						Save_config();
 80034d4:	f7fd ff56 	bl	8001384 <Save_config>
					if((p = find("temperature ")))
 80034d8:	484b      	ldr	r0, [pc, #300]	@ (8003608 <CLI_proc+0xe74>)
 80034da:	f7fe ffbb 	bl	8002454 <find>
 80034de:	4605      	mov	r5, r0
 80034e0:	b118      	cbz	r0, 80034ea <CLI_proc+0xd56>
						if(p == clibuf+23)
 80034e2:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <CLI_proc+0xe30>)
 80034e4:	4298      	cmp	r0, r3
 80034e6:	f000 812f 	beq.w	8003748 <CLI_proc+0xfb4>
					if((p = find("press ")))
 80034ea:	4848      	ldr	r0, [pc, #288]	@ (800360c <CLI_proc+0xe78>)
 80034ec:	f7fe ffb2 	bl	8002454 <find>
 80034f0:	4605      	mov	r5, r0
 80034f2:	b118      	cbz	r0, 80034fc <CLI_proc+0xd68>
						if(p == clibuf+17)
 80034f4:	4b3a      	ldr	r3, [pc, #232]	@ (80035e0 <CLI_proc+0xe4c>)
 80034f6:	4298      	cmp	r0, r3
 80034f8:	f000 8171 	beq.w	80037de <CLI_proc+0x104a>
					if((p = find("hum ")))
 80034fc:	4844      	ldr	r0, [pc, #272]	@ (8003610 <CLI_proc+0xe7c>)
 80034fe:	f7fe ffa9 	bl	8002454 <find>
 8003502:	4605      	mov	r5, r0
 8003504:	2800      	cmp	r0, #0
 8003506:	f43f ac42 	beq.w	8002d8e <CLI_proc+0x5fa>
						if(p == clibuf+15)
 800350a:	4b42      	ldr	r3, [pc, #264]	@ (8003614 <CLI_proc+0xe80>)
 800350c:	4298      	cmp	r0, r3
 800350e:	f47f ac3e 	bne.w	8002d8e <CLI_proc+0x5fa>
							if((strstr(clibuf+15, "offset ")))
 8003512:	4927      	ldr	r1, [pc, #156]	@ (80035b0 <CLI_proc+0xe1c>)
 8003514:	f00a fa8e 	bl	800da34 <strstr>
 8003518:	b1b8      	cbz	r0, 800354a <CLI_proc+0xdb6>
						        getFloat(clibuf+22, &tmp, MIN_OFFSET, MAX_OFFSET);
 800351a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800351e:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8003522:	a901      	add	r1, sp, #4
 8003524:	1de8      	adds	r0, r5, #7
 8003526:	f7fe ffeb 	bl	8002500 <getFloat>
						        BME280.hum.offset = tmp;
 800352a:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <CLI_proc+0xe5c>)
						        config.BME280_h_offset = tmp;
 800352c:	4922      	ldr	r1, [pc, #136]	@ (80035b8 <CLI_proc+0xe24>)
 800352e:	9801      	ldr	r0, [sp, #4]
						        BME280.hum.offset = tmp;
 8003530:	f8c3 000f 	str.w	r0, [r3, #15]
						        config.BME280_h_offset = tmp;
 8003534:	f8c1 002a 	str.w	r0, [r1, #42]	@ 0x2a
						        printf("BME280 humidity offset %.6f\r\n",tmp);
 8003538:	f7fd f806 	bl	8000548 <__aeabi_f2d>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4835      	ldr	r0, [pc, #212]	@ (8003618 <CLI_proc+0xe84>)
 8003542:	f00a f8f5 	bl	800d730 <iprintf>
						        Save_config();
 8003546:	f7fd ff1d 	bl	8001384 <Save_config>
							if((strstr(clibuf+15, "en")))
 800354a:	491d      	ldr	r1, [pc, #116]	@ (80035c0 <CLI_proc+0xe2c>)
 800354c:	4831      	ldr	r0, [pc, #196]	@ (8003614 <CLI_proc+0xe80>)
 800354e:	f00a fa71 	bl	800da34 <strstr>
 8003552:	b180      	cbz	r0, 8003576 <CLI_proc+0xde2>
								BME280.hum.use_meas = 1;
 8003554:	4926      	ldr	r1, [pc, #152]	@ (80035f0 <CLI_proc+0xe5c>)
								config.BME280_h_use = 1;
 8003556:	4c18      	ldr	r4, [pc, #96]	@ (80035b8 <CLI_proc+0xe24>)
								BME280.hum.use_meas = 1;
 8003558:	7a8b      	ldrb	r3, [r1, #10]
								config.BME280_h_use = 1;
 800355a:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
								printf("BME280 humidity measure enabled\r\n");
 800355e:	482f      	ldr	r0, [pc, #188]	@ (800361c <CLI_proc+0xe88>)
								config.BME280_h_use = 1;
 8003560:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
								BME280.hum.use_meas = 1;
 8003564:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_h_use = 1;
 8003568:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
								BME280.hum.use_meas = 1;
 800356c:	728b      	strb	r3, [r1, #10]
								printf("BME280 humidity measure enabled\r\n");
 800356e:	f00a f947 	bl	800d800 <puts>
								Save_config();
 8003572:	f7fd ff07 	bl	8001384 <Save_config>
							if((strstr(clibuf+15, "dis")))
 8003576:	4915      	ldr	r1, [pc, #84]	@ (80035cc <CLI_proc+0xe38>)
 8003578:	4826      	ldr	r0, [pc, #152]	@ (8003614 <CLI_proc+0xe80>)
 800357a:	f00a fa5b 	bl	800da34 <strstr>
 800357e:	2800      	cmp	r0, #0
 8003580:	f43f a917 	beq.w	80027b2 <CLI_proc+0x1e>
								config.BME280_h_use = 0;
 8003584:	490c      	ldr	r1, [pc, #48]	@ (80035b8 <CLI_proc+0xe24>)
								BME280.hum.use_meas = 0;
 8003586:	4b1a      	ldr	r3, [pc, #104]	@ (80035f0 <CLI_proc+0xe5c>)
								config.BME280_h_use = 0;
 8003588:	f891 4025 	ldrb.w	r4, [r1, #37]	@ 0x25
								BME280.hum.use_meas = 0;
 800358c:	7a9a      	ldrb	r2, [r3, #10]
								printf("BME280 humidity measure disable\r\n");
 800358e:	4824      	ldr	r0, [pc, #144]	@ (8003620 <CLI_proc+0xe8c>)
								config.BME280_h_use = 0;
 8003590:	f36f 1486 	bfc	r4, #6, #1
								BME280.hum.use_meas = 0;
 8003594:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_h_use = 0;
 8003598:	f881 4025 	strb.w	r4, [r1, #37]	@ 0x25
								BME280.hum.use_meas = 0;
 800359c:	f7ff bafb 	b.w	8002b96 <CLI_proc+0x402>
 80035a0:	20000008 	.word	0x20000008
 80035a4:	20000639 	.word	0x20000639
 80035a8:	080115c4 	.word	0x080115c4
 80035ac:	08010ee0 	.word	0x08010ee0
 80035b0:	08010f84 	.word	0x08010f84
 80035b4:	200006f0 	.word	0x200006f0
 80035b8:	20000640 	.word	0x20000640
 80035bc:	08011174 	.word	0x08011174
 80035c0:	08010fb0 	.word	0x08010fb0
 80035c4:	20000243 	.word	0x20000243
 80035c8:	08011198 	.word	0x08011198
 80035cc:	08010fd8 	.word	0x08010fd8
 80035d0:	080111bc 	.word	0x080111bc
 80035d4:	43fa0000 	.word	0x43fa0000
 80035d8:	c3fa0000 	.word	0xc3fa0000
 80035dc:	080111e8 	.word	0x080111e8
 80035e0:	2000023d 	.word	0x2000023d
 80035e4:	08011208 	.word	0x08011208
 80035e8:	0801122c 	.word	0x0801122c
 80035ec:	08010f0c 	.word	0x08010f0c
 80035f0:	200006cc 	.word	0x200006cc
 80035f4:	080112c0 	.word	0x080112c0
 80035f8:	08010f2c 	.word	0x08010f2c
 80035fc:	080112d8 	.word	0x080112d8
 8003600:	08010f4c 	.word	0x08010f4c
 8003604:	2000023c 	.word	0x2000023c
 8003608:	08010f74 	.word	0x08010f74
 800360c:	080111e0 	.word	0x080111e0
 8003610:	080110c0 	.word	0x080110c0
 8003614:	2000023b 	.word	0x2000023b
 8003618:	080113c4 	.word	0x080113c4
 800361c:	080113e4 	.word	0x080113e4
 8003620:	08011408 	.word	0x08011408
							if((strstr(clibuf+22, "offset ")))
 8003624:	4993      	ldr	r1, [pc, #588]	@ (8003874 <CLI_proc+0x10e0>)
 8003626:	f00a fa05 	bl	800da34 <strstr>
 800362a:	b1b0      	cbz	r0, 800365a <CLI_proc+0xec6>
					            getFloat(clibuf+29, &tmp, MIN_OFFSET, MAX_OFFSET);
 800362c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8003630:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8003634:	a901      	add	r1, sp, #4
 8003636:	1de8      	adds	r0, r5, #7
 8003638:	f7fe ff62 	bl	8002500 <getFloat>
					            config.SHT3_t_offset = tmp;
 800363c:	4b8e      	ldr	r3, [pc, #568]	@ (8003878 <CLI_proc+0x10e4>)
					            SHT3.temp.offset = tmp;
 800363e:	498f      	ldr	r1, [pc, #572]	@ (800387c <CLI_proc+0x10e8>)
					            config.SHT3_t_offset = tmp;
 8003640:	9801      	ldr	r0, [sp, #4]
 8003642:	6118      	str	r0, [r3, #16]
					            SHT3.temp.offset = tmp;
 8003644:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("SHTC3 temperature offset %.6f\r\n",tmp);
 8003648:	f7fc ff7e 	bl	8000548 <__aeabi_f2d>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	488b      	ldr	r0, [pc, #556]	@ (8003880 <CLI_proc+0x10ec>)
 8003652:	f00a f86d 	bl	800d730 <iprintf>
								Save_config();
 8003656:	f7fd fe95 	bl	8001384 <Save_config>
							if((strstr(clibuf+22, "en")))
 800365a:	498a      	ldr	r1, [pc, #552]	@ (8003884 <CLI_proc+0x10f0>)
 800365c:	488a      	ldr	r0, [pc, #552]	@ (8003888 <CLI_proc+0x10f4>)
 800365e:	f00a f9e9 	bl	800da34 <strstr>
 8003662:	b170      	cbz	r0, 8003682 <CLI_proc+0xeee>
								config.SHT3_t_use = 1;
 8003664:	4884      	ldr	r0, [pc, #528]	@ (8003878 <CLI_proc+0x10e4>)
								SHT3.temp.use_meas = 1;
 8003666:	4985      	ldr	r1, [pc, #532]	@ (800387c <CLI_proc+0x10e8>)
								config.SHT3_t_use = 1;
 8003668:	7bc2      	ldrb	r2, [r0, #15]
								SHT3.temp.use_meas = 1;
 800366a:	784b      	ldrb	r3, [r1, #1]
								config.SHT3_t_use = 1;
 800366c:	f042 0220 	orr.w	r2, r2, #32
								SHT3.temp.use_meas = 1;
 8003670:	f043 0301 	orr.w	r3, r3, #1
								config.SHT3_t_use = 1;
 8003674:	73c2      	strb	r2, [r0, #15]
								printf("SHTC3 temperature measure enabled\r\n");
 8003676:	4885      	ldr	r0, [pc, #532]	@ (800388c <CLI_proc+0x10f8>)
								SHT3.temp.use_meas = 1;
 8003678:	704b      	strb	r3, [r1, #1]
								printf("SHTC3 temperature measure enabled\r\n");
 800367a:	f00a f8c1 	bl	800d800 <puts>
								Save_config();
 800367e:	f7fd fe81 	bl	8001384 <Save_config>
							if((strstr(clibuf+22, "dis")))
 8003682:	4983      	ldr	r1, [pc, #524]	@ (8003890 <CLI_proc+0x10fc>)
 8003684:	4880      	ldr	r0, [pc, #512]	@ (8003888 <CLI_proc+0x10f4>)
 8003686:	f00a f9d5 	bl	800da34 <strstr>
 800368a:	2800      	cmp	r0, #0
 800368c:	f43f ace2 	beq.w	8003054 <CLI_proc+0x8c0>
								config.SHT3_t_use = 0;
 8003690:	4979      	ldr	r1, [pc, #484]	@ (8003878 <CLI_proc+0x10e4>)
								SHT3.temp.use_meas = 0;
 8003692:	4b7a      	ldr	r3, [pc, #488]	@ (800387c <CLI_proc+0x10e8>)
								config.SHT3_t_use = 0;
 8003694:	7bc8      	ldrb	r0, [r1, #15]
								SHT3.temp.use_meas = 0;
 8003696:	785a      	ldrb	r2, [r3, #1]
								config.SHT3_t_use = 0;
 8003698:	f36f 1045 	bfc	r0, #5, #1
								SHT3.temp.use_meas = 0;
 800369c:	f36f 0200 	bfc	r2, #0, #1
								config.SHT3_t_use = 0;
 80036a0:	73c8      	strb	r0, [r1, #15]
								printf("SHTC3 temperature measure disable\r\n");
 80036a2:	487c      	ldr	r0, [pc, #496]	@ (8003894 <CLI_proc+0x1100>)
								SHT3.temp.use_meas = 0;
 80036a4:	705a      	strb	r2, [r3, #1]
								printf("SHTC3 temperature measure disable\r\n");
 80036a6:	f00a f8ab 	bl	800d800 <puts>
								Save_config();
 80036aa:	f7fd fe6b 	bl	8001384 <Save_config>
 80036ae:	e4d1      	b.n	8003054 <CLI_proc+0x8c0>
							if((strstr(clibuf+23, "offset ")))
 80036b0:	4970      	ldr	r1, [pc, #448]	@ (8003874 <CLI_proc+0x10e0>)
 80036b2:	f00a f9bf 	bl	800da34 <strstr>
 80036b6:	b1b8      	cbz	r0, 80036e8 <CLI_proc+0xf54>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 80036b8:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80036bc:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 80036c0:	a901      	add	r1, sp, #4
 80036c2:	1de8      	adds	r0, r5, #7
 80036c4:	f7fe ff1c 	bl	8002500 <getFloat>
					            config.DPS368_t_offset = tmp;
 80036c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003878 <CLI_proc+0x10e4>)
					            DPS368.temp.offset = tmp;
 80036ca:	4973      	ldr	r1, [pc, #460]	@ (8003898 <CLI_proc+0x1104>)
					            config.DPS368_t_offset = tmp;
 80036cc:	9801      	ldr	r0, [sp, #4]
 80036ce:	f8c3 0033 	str.w	r0, [r3, #51]	@ 0x33
					            DPS368.temp.offset = tmp;
 80036d2:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("DPS368 temperature offset %.6f\r\n",tmp);
 80036d6:	f7fc ff37 	bl	8000548 <__aeabi_f2d>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	486f      	ldr	r0, [pc, #444]	@ (800389c <CLI_proc+0x1108>)
 80036e0:	f00a f826 	bl	800d730 <iprintf>
								Save_config();
 80036e4:	f7fd fe4e 	bl	8001384 <Save_config>
							if((strstr(clibuf+23, "en")))
 80036e8:	4966      	ldr	r1, [pc, #408]	@ (8003884 <CLI_proc+0x10f0>)
 80036ea:	486d      	ldr	r0, [pc, #436]	@ (80038a0 <CLI_proc+0x110c>)
 80036ec:	f00a f9a2 	bl	800da34 <strstr>
 80036f0:	b180      	cbz	r0, 8003714 <CLI_proc+0xf80>
								config.DPS368_t_use = 1;
 80036f2:	4861      	ldr	r0, [pc, #388]	@ (8003878 <CLI_proc+0x10e4>)
								DPS368.temp.use_meas = 1;
 80036f4:	4968      	ldr	r1, [pc, #416]	@ (8003898 <CLI_proc+0x1104>)
								config.DPS368_t_use = 1;
 80036f6:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
								DPS368.temp.use_meas = 1;
 80036fa:	784b      	ldrb	r3, [r1, #1]
								config.DPS368_t_use = 1;
 80036fc:	f042 0220 	orr.w	r2, r2, #32
								DPS368.temp.use_meas = 1;
 8003700:	f043 0301 	orr.w	r3, r3, #1
								config.DPS368_t_use = 1;
 8003704:	f880 2032 	strb.w	r2, [r0, #50]	@ 0x32
								printf("DPS368 temperature measure enabled\r\n");
 8003708:	4866      	ldr	r0, [pc, #408]	@ (80038a4 <CLI_proc+0x1110>)
								DPS368.temp.use_meas = 1;
 800370a:	704b      	strb	r3, [r1, #1]
								printf("DPS368 temperature measure enabled\r\n");
 800370c:	f00a f878 	bl	800d800 <puts>
								Save_config();
 8003710:	f7fd fe38 	bl	8001384 <Save_config>
							if((strstr(clibuf+23, "dis")))
 8003714:	495e      	ldr	r1, [pc, #376]	@ (8003890 <CLI_proc+0x10fc>)
 8003716:	4862      	ldr	r0, [pc, #392]	@ (80038a0 <CLI_proc+0x110c>)
 8003718:	f00a f98c 	bl	800da34 <strstr>
 800371c:	2800      	cmp	r0, #0
 800371e:	f43f aba1 	beq.w	8002e64 <CLI_proc+0x6d0>
								config.DPS368_t_use = 0;
 8003722:	4955      	ldr	r1, [pc, #340]	@ (8003878 <CLI_proc+0x10e4>)
								DPS368.temp.use_meas = 0;
 8003724:	4b5c      	ldr	r3, [pc, #368]	@ (8003898 <CLI_proc+0x1104>)
								config.DPS368_t_use = 0;
 8003726:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
								DPS368.temp.use_meas = 0;
 800372a:	785a      	ldrb	r2, [r3, #1]
								config.DPS368_t_use = 0;
 800372c:	f36f 1045 	bfc	r0, #5, #1
								DPS368.temp.use_meas = 0;
 8003730:	f36f 0200 	bfc	r2, #0, #1
								config.DPS368_t_use = 0;
 8003734:	f881 0032 	strb.w	r0, [r1, #50]	@ 0x32
								printf("DPS368 temperature measure disable\r\n");
 8003738:	485b      	ldr	r0, [pc, #364]	@ (80038a8 <CLI_proc+0x1114>)
								DPS368.temp.use_meas = 0;
 800373a:	705a      	strb	r2, [r3, #1]
								printf("DPS368 temperature measure disable\r\n");
 800373c:	f00a f860 	bl	800d800 <puts>
								Save_config();
 8003740:	f7fd fe20 	bl	8001384 <Save_config>
 8003744:	f7ff bb8e 	b.w	8002e64 <CLI_proc+0x6d0>
							if((strstr(clibuf+23, "offset ")))
 8003748:	494a      	ldr	r1, [pc, #296]	@ (8003874 <CLI_proc+0x10e0>)
 800374a:	f00a f973 	bl	800da34 <strstr>
 800374e:	b1b8      	cbz	r0, 8003780 <CLI_proc+0xfec>
					            getFloat(clibuf+30, &tmp, MIN_OFFSET, MAX_OFFSET);
 8003750:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8003754:	eeba 0a04 	vmov.f32	s0, #164	@ 0xc1200000 -10.0
 8003758:	a901      	add	r1, sp, #4
 800375a:	1de8      	adds	r0, r5, #7
 800375c:	f7fe fed0 	bl	8002500 <getFloat>
					            config.BME280_t_offset = tmp;
 8003760:	4b45      	ldr	r3, [pc, #276]	@ (8003878 <CLI_proc+0x10e4>)
					            BME280.temp.offset = tmp;
 8003762:	4952      	ldr	r1, [pc, #328]	@ (80038ac <CLI_proc+0x1118>)
					            config.BME280_t_offset = tmp;
 8003764:	9801      	ldr	r0, [sp, #4]
 8003766:	f8c3 0026 	str.w	r0, [r3, #38]	@ 0x26
					            BME280.temp.offset = tmp;
 800376a:	f8c1 0006 	str.w	r0, [r1, #6]
					            printf("BME280 temperature offset %.6f\r\n",tmp);
 800376e:	f7fc feeb 	bl	8000548 <__aeabi_f2d>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	484e      	ldr	r0, [pc, #312]	@ (80038b0 <CLI_proc+0x111c>)
 8003778:	f009 ffda 	bl	800d730 <iprintf>
								Save_config();
 800377c:	f7fd fe02 	bl	8001384 <Save_config>
							if((strstr(clibuf+23, "en")))
 8003780:	4940      	ldr	r1, [pc, #256]	@ (8003884 <CLI_proc+0x10f0>)
 8003782:	4847      	ldr	r0, [pc, #284]	@ (80038a0 <CLI_proc+0x110c>)
 8003784:	f00a f956 	bl	800da34 <strstr>
 8003788:	b180      	cbz	r0, 80037ac <CLI_proc+0x1018>
								config.BME280_t_use = 1;
 800378a:	483b      	ldr	r0, [pc, #236]	@ (8003878 <CLI_proc+0x10e4>)
								BME280.temp.use_meas = 1;
 800378c:	4947      	ldr	r1, [pc, #284]	@ (80038ac <CLI_proc+0x1118>)
								config.BME280_t_use = 1;
 800378e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
								BME280.temp.use_meas = 1;
 8003792:	784b      	ldrb	r3, [r1, #1]
								config.BME280_t_use = 1;
 8003794:	f042 0220 	orr.w	r2, r2, #32
								BME280.temp.use_meas = 1;
 8003798:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_t_use = 1;
 800379c:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
								printf("BME280 temperature measure enabled\r\n");
 80037a0:	4844      	ldr	r0, [pc, #272]	@ (80038b4 <CLI_proc+0x1120>)
								BME280.temp.use_meas = 1;
 80037a2:	704b      	strb	r3, [r1, #1]
								printf("BME280 temperature measure enabled\r\n");
 80037a4:	f00a f82c 	bl	800d800 <puts>
								Save_config();
 80037a8:	f7fd fdec 	bl	8001384 <Save_config>
							if((strstr(clibuf+23, "dis")))
 80037ac:	4938      	ldr	r1, [pc, #224]	@ (8003890 <CLI_proc+0x10fc>)
 80037ae:	483c      	ldr	r0, [pc, #240]	@ (80038a0 <CLI_proc+0x110c>)
 80037b0:	f00a f940 	bl	800da34 <strstr>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	f43f ae98 	beq.w	80034ea <CLI_proc+0xd56>
								config.BME280_t_use = 0;
 80037ba:	492f      	ldr	r1, [pc, #188]	@ (8003878 <CLI_proc+0x10e4>)
								BME280.temp.use_meas = 0;
 80037bc:	4b3b      	ldr	r3, [pc, #236]	@ (80038ac <CLI_proc+0x1118>)
								config.BME280_t_use = 0;
 80037be:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
								BME280.temp.use_meas = 0;
 80037c2:	785a      	ldrb	r2, [r3, #1]
								config.BME280_t_use = 0;
 80037c4:	f36f 1045 	bfc	r0, #5, #1
								BME280.temp.use_meas = 0;
 80037c8:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_t_use = 0;
 80037cc:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
								printf("BME280 temperature measure disable\r\n");
 80037d0:	4839      	ldr	r0, [pc, #228]	@ (80038b8 <CLI_proc+0x1124>)
								BME280.temp.use_meas = 0;
 80037d2:	705a      	strb	r2, [r3, #1]
								printf("BME280 temperature measure disable\r\n");
 80037d4:	f00a f814 	bl	800d800 <puts>
								Save_config();
 80037d8:	f7fd fdd4 	bl	8001384 <Save_config>
 80037dc:	e685      	b.n	80034ea <CLI_proc+0xd56>
							if((strstr(clibuf+17, "offset ")))
 80037de:	4925      	ldr	r1, [pc, #148]	@ (8003874 <CLI_proc+0x10e0>)
 80037e0:	f00a f928 	bl	800da34 <strstr>
 80037e4:	b1b0      	cbz	r0, 8003814 <CLI_proc+0x1080>
					            getFloat(clibuf+24, &tmp, -500, 500);
 80037e6:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80038bc <CLI_proc+0x1128>
 80037ea:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80038c0 <CLI_proc+0x112c>
 80037ee:	a901      	add	r1, sp, #4
 80037f0:	1de8      	adds	r0, r5, #7
 80037f2:	f7fe fe85 	bl	8002500 <getFloat>
					            config.BME280_p_offset = tmp;
 80037f6:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <CLI_proc+0x10e4>)
					            BME280.press.offset = tmp;
 80037f8:	492c      	ldr	r1, [pc, #176]	@ (80038ac <CLI_proc+0x1118>)
					            config.BME280_p_offset = tmp;
 80037fa:	9801      	ldr	r0, [sp, #4]
 80037fc:	f8c3 002e 	str.w	r0, [r3, #46]	@ 0x2e
					            BME280.press.offset = tmp;
 8003800:	6188      	str	r0, [r1, #24]
					            printf("BME280 pressure offset %.6f\r\n",tmp);
 8003802:	f7fc fea1 	bl	8000548 <__aeabi_f2d>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	482e      	ldr	r0, [pc, #184]	@ (80038c4 <CLI_proc+0x1130>)
 800380c:	f009 ff90 	bl	800d730 <iprintf>
								Save_config();
 8003810:	f7fd fdb8 	bl	8001384 <Save_config>
							if((strstr(clibuf+17, "en")))
 8003814:	491b      	ldr	r1, [pc, #108]	@ (8003884 <CLI_proc+0x10f0>)
 8003816:	482c      	ldr	r0, [pc, #176]	@ (80038c8 <CLI_proc+0x1134>)
 8003818:	f00a f90c 	bl	800da34 <strstr>
 800381c:	b180      	cbz	r0, 8003840 <CLI_proc+0x10ac>
								config.BME280_p_use = 1;
 800381e:	4816      	ldr	r0, [pc, #88]	@ (8003878 <CLI_proc+0x10e4>)
								BME280.press.use_meas = 1;
 8003820:	4922      	ldr	r1, [pc, #136]	@ (80038ac <CLI_proc+0x1118>)
								config.BME280_p_use = 1;
 8003822:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
								BME280.press.use_meas = 1;
 8003826:	7ccb      	ldrb	r3, [r1, #19]
								config.BME280_p_use = 1;
 8003828:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
								BME280.press.use_meas = 1;
 800382c:	f043 0301 	orr.w	r3, r3, #1
								config.BME280_p_use = 1;
 8003830:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
								printf("BME280 pressure measure enabled\r\n");
 8003834:	4825      	ldr	r0, [pc, #148]	@ (80038cc <CLI_proc+0x1138>)
								BME280.press.use_meas = 1;
 8003836:	74cb      	strb	r3, [r1, #19]
								printf("BME280 pressure measure enabled\r\n");
 8003838:	f009 ffe2 	bl	800d800 <puts>
								Save_config();
 800383c:	f7fd fda2 	bl	8001384 <Save_config>
							if((strstr(clibuf+17, "dis")))
 8003840:	4913      	ldr	r1, [pc, #76]	@ (8003890 <CLI_proc+0x10fc>)
 8003842:	4821      	ldr	r0, [pc, #132]	@ (80038c8 <CLI_proc+0x1134>)
 8003844:	f00a f8f6 	bl	800da34 <strstr>
 8003848:	2800      	cmp	r0, #0
 800384a:	f43f ae57 	beq.w	80034fc <CLI_proc+0xd68>
								config.BME280_p_use = 0;
 800384e:	490a      	ldr	r1, [pc, #40]	@ (8003878 <CLI_proc+0x10e4>)
								BME280.press.use_meas = 0;
 8003850:	4b16      	ldr	r3, [pc, #88]	@ (80038ac <CLI_proc+0x1118>)
								config.BME280_p_use = 0;
 8003852:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
								BME280.press.use_meas = 0;
 8003856:	7cda      	ldrb	r2, [r3, #19]
								config.BME280_p_use = 0;
 8003858:	f36f 10c7 	bfc	r0, #7, #1
								BME280.press.use_meas = 0;
 800385c:	f36f 0200 	bfc	r2, #0, #1
								config.BME280_p_use = 0;
 8003860:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
								printf("BME280 pressure measure disable\r\n");
 8003864:	481a      	ldr	r0, [pc, #104]	@ (80038d0 <CLI_proc+0x113c>)
								BME280.press.use_meas = 0;
 8003866:	74da      	strb	r2, [r3, #19]
								printf("BME280 pressure measure disable\r\n");
 8003868:	f009 ffca 	bl	800d800 <puts>
								Save_config();
 800386c:	f7fd fd8a 	bl	8001384 <Save_config>
 8003870:	e644      	b.n	80034fc <CLI_proc+0xd68>
 8003872:	bf00      	nop
 8003874:	08010f84 	.word	0x08010f84
 8003878:	20000640 	.word	0x20000640
 800387c:	20000714 	.word	0x20000714
 8003880:	08011058 	.word	0x08011058
 8003884:	08010fb0 	.word	0x08010fb0
 8003888:	20000242 	.word	0x20000242
 800388c:	08011078 	.word	0x08011078
 8003890:	08010fd8 	.word	0x08010fd8
 8003894:	0801109c 	.word	0x0801109c
 8003898:	200006b4 	.word	0x200006b4
 800389c:	08011484 	.word	0x08011484
 80038a0:	20000243 	.word	0x20000243
 80038a4:	080114a8 	.word	0x080114a8
 80038a8:	080114cc 	.word	0x080114cc
 80038ac:	200006cc 	.word	0x200006cc
 80038b0:	080112f0 	.word	0x080112f0
 80038b4:	08011314 	.word	0x08011314
 80038b8:	08011338 	.word	0x08011338
 80038bc:	43fa0000 	.word	0x43fa0000
 80038c0:	c3fa0000 	.word	0xc3fa0000
 80038c4:	0801135c 	.word	0x0801135c
 80038c8:	2000023d 	.word	0x2000023d
 80038cc:	0801137c 	.word	0x0801137c
 80038d0:	080113a0 	.word	0x080113a0

080038d4 <CLI>:
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 80038d4:	4a15      	ldr	r2, [pc, #84]	@ (800392c <CLI+0x58>)
 80038d6:	f8b2 305a 	ldrh.w	r3, [r2, #90]	@ 0x5a
void CLI() {
 80038da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (huart1.RxXferSize-huart1.RxXferCount+DEBUG_BUF_SIZE-debug_rxtail) % DEBUG_BUF_SIZE;
 80038de:	f8b2 4058 	ldrh.w	r4, [r2, #88]	@ 0x58
 80038e2:	4e13      	ldr	r6, [pc, #76]	@ (8003930 <CLI+0x5c>)
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	1ae4      	subs	r4, r4, r3
 80038e8:	8832      	ldrh	r2, [r6, #0]
 80038ea:	3440      	adds	r4, #64	@ 0x40
 80038ec:	1aa4      	subs	r4, r4, r2
 80038ee:	4263      	negs	r3, r4
 80038f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038f4:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 80038f8:	bf58      	it	pl
 80038fa:	425c      	negpl	r4, r3
 80038fc:	b2a4      	uxth	r4, r4
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 80038fe:	b194      	cbz	r4, 8003926 <CLI+0x52>
 8003900:	2500      	movs	r5, #0
 8003902:	4f0c      	ldr	r7, [pc, #48]	@ (8003934 <CLI+0x60>)
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8003904:	46a8      	mov	r8, r5
 8003906:	e000      	b.n	800390a <CLI+0x36>
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 8003908:	8832      	ldrh	r2, [r6, #0]
 800390a:	5cb8      	ldrb	r0, [r7, r2]
 800390c:	1c53      	adds	r3, r2, #1
 800390e:	b29b      	uxth	r3, r3
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8003910:	2b3f      	cmp	r3, #63	@ 0x3f
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 8003912:	f105 0501 	add.w	r5, r5, #1
    uint8_t tmp = debug_rx_buf[debug_rxtail++];
 8003916:	8033      	strh	r3, [r6, #0]
    if(debug_rxtail >= DEBUG_BUF_SIZE) debug_rxtail = 0;
 8003918:	bf88      	it	hi
 800391a:	f8a6 8000 	strhhi.w	r8, [r6]
    if(len) { for(int i=0; i<len; ++i) CLI_proc(UART_receive()); }
 800391e:	f7fe ff39 	bl	8002794 <CLI_proc>
 8003922:	42a5      	cmp	r5, r4
 8003924:	d1f0      	bne.n	8003908 <CLI+0x34>
}
 8003926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800392a:	bf00      	nop
 800392c:	2000036c 	.word	0x2000036c
 8003930:	2000026e 	.word	0x2000026e
 8003934:	20000270 	.word	0x20000270

08003938 <DPS368_check>:

DPS_coeff_t DPS_coef;
volatile int32_t Kt_coef, Kp_coef;

uint8_t DPS368_check()
{
 8003938:	b510      	push	{r4, lr}
 800393a:	b082      	sub	sp, #8
	uint8_t value;
	SET_DPS368();
 800393c:	f002 fd60 	bl	8006400 <SET_DPS368>
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, DPS368_ADDR, 3, 150);
 8003940:	4812      	ldr	r0, [pc, #72]	@ (800398c <DPS368_check+0x54>)
 8003942:	2396      	movs	r3, #150	@ 0x96
 8003944:	2203      	movs	r2, #3
 8003946:	21ee      	movs	r1, #238	@ 0xee
 8003948:	f005 f944 	bl	8008bd4 <HAL_I2C_IsDeviceReady>
 800394c:	4604      	mov	r4, r0
	osDelay(100);
 800394e:	2064      	movs	r0, #100	@ 0x64
 8003950:	f007 f850 	bl	800a9f4 <osDelay>
	if (status == HAL_OK) {
 8003954:	b9b4      	cbnz	r4, 8003984 <DPS368_check+0x4c>
		i2c_read8(&hi2c2, DPS368_REG_ID, &value, DPS368_ADDR);
 8003956:	23ee      	movs	r3, #238	@ 0xee
 8003958:	480c      	ldr	r0, [pc, #48]	@ (800398c <DPS368_check+0x54>)
 800395a:	f10d 0207 	add.w	r2, sp, #7
 800395e:	210d      	movs	r1, #13
 8003960:	f002 fca2 	bl	80062a8 <i2c_read8>
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8003964:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003968:	2b10      	cmp	r3, #16
 800396a:	d005      	beq.n	8003978 <DPS368_check+0x40>
 800396c:	4808      	ldr	r0, [pc, #32]	@ (8003990 <DPS368_check+0x58>)
 800396e:	f009 ff47 	bl	800d800 <puts>
 8003972:	2000      	movs	r0, #0
	} else {printf("DPS368 FAILED\r\n"); return 0;}
	return 0;
}
 8003974:	b002      	add	sp, #8
 8003976:	bd10      	pop	{r4, pc}
		if(value == DPS368_ID_CHK) {printf("DPS368 OK\r\n"); return 1;} else {printf("NOT DPS368\r\n"); return 0;}
 8003978:	4806      	ldr	r0, [pc, #24]	@ (8003994 <DPS368_check+0x5c>)
 800397a:	f009 ff41 	bl	800d800 <puts>
 800397e:	2001      	movs	r0, #1
}
 8003980:	b002      	add	sp, #8
 8003982:	bd10      	pop	{r4, pc}
	} else {printf("DPS368 FAILED\r\n"); return 0;}
 8003984:	4804      	ldr	r0, [pc, #16]	@ (8003998 <DPS368_check+0x60>)
 8003986:	f009 ff3b 	bl	800d800 <puts>
 800398a:	e7f2      	b.n	8003972 <DPS368_check+0x3a>
 800398c:	20000444 	.word	0x20000444
 8003990:	08011600 	.word	0x08011600
 8003994:	080115f4 	.word	0x080115f4
 8003998:	0801160c 	.word	0x0801160c

0800399c <DPS368_read_coeff>:
    }
}


void DPS368_read_coeff()
{
 800399c:	b500      	push	{lr}
 800399e:	b08b      	sub	sp, #44	@ 0x2c
	uint8_t regs[18];
	SET_DPS368();
 80039a0:	f002 fd2e 	bl	8006400 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x10, I2C_MEMADD_SIZE_8BIT, regs, 18, 250);
 80039a4:	ab05      	add	r3, sp, #20
 80039a6:	21fa      	movs	r1, #250	@ 0xfa
 80039a8:	2212      	movs	r2, #18
 80039aa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2210      	movs	r2, #16
 80039b2:	2301      	movs	r3, #1
 80039b4:	21ee      	movs	r1, #238	@ 0xee
 80039b6:	4835      	ldr	r0, [pc, #212]	@ (8003a8c <DPS368_read_coeff+0xf0>)
 80039b8:	f004 ffee 	bl	8008998 <HAL_I2C_Mem_Read>
//	for(uint8_t i=0; i<19;i++){
//		printf("Coef %d : %#x\r\n",i,regs[i]);
//	}
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 80039bc:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80039c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    getTwosComplement(&DPS_coef.C0, 12);
    // c0 is only used as c0*0.5, so c0_half is calculated immediately
    DPS_coef.C0 = DPS_coef.C0 / 2U;

    // now do the same thing for all other coefficients
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80039c4:	f89d 0016 	ldrb.w	r0, [sp, #22]
	DPS_coef.C0 = ((uint32_t)regs[0] << 4) | (((uint32_t)regs[1] >> 4) & 0x0F);
 80039c8:	0911      	lsrs	r1, r2, #4
 80039ca:	ea41 1103 	orr.w	r1, r1, r3, lsl #4
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80039ce:	0212      	lsls	r2, r2, #8
    if (*raw & ((uint32_t)1 << (length - 1)))
 80039d0:	09db      	lsrs	r3, r3, #7
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80039d2:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 80039d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003a90 <DPS368_read_coeff+0xf4>)
        *raw -= (uint32_t)1 << length;
 80039d8:	bf18      	it	ne
 80039da:	f5a1 5180 	subne.w	r1, r1, #4096	@ 0x1000
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80039de:	4310      	orrs	r0, r2
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 80039e0:	0849      	lsrs	r1, r1, #1
    if (*raw & ((uint32_t)1 << (length - 1)))
 80039e2:	0ad2      	lsrs	r2, r2, #11
    getTwosComplement(&DPS_coef.C1, 12);
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 80039e4:	f89d 2018 	ldrb.w	r2, [sp, #24]
    DPS_coef.C0 = DPS_coef.C0 / 2U;
 80039e8:	6019      	str	r1, [r3, #0]
    DPS_coef.C1 = (((uint32_t)regs[1] & 0x0F) << 8) | (uint32_t)regs[2];
 80039ea:	bf0c      	ite	eq
 80039ec:	6058      	streq	r0, [r3, #4]
        *raw -= (uint32_t)1 << length;
 80039ee:	f5a0 5180 	subne.w	r1, r0, #4096	@ 0x1000
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 80039f2:	f89d 0017 	ldrb.w	r0, [sp, #23]
        *raw -= (uint32_t)1 << length;
 80039f6:	bf18      	it	ne
 80039f8:	6059      	strne	r1, [r3, #4]
    DPS_coef.C00 = ((uint32_t)regs[3] << 12) | ((uint32_t)regs[4] << 4) | (((uint32_t)regs[5] >> 4) & 0x0F);
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	f89d 1019 	ldrb.w	r1, [sp, #25]
 8003a00:	ea42 3200 	orr.w	r2, r2, r0, lsl #12
 8003a04:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003a08:	0cd2      	lsrs	r2, r2, #19
        *raw -= (uint32_t)1 << length;
 8003a0a:	bf18      	it	ne
 8003a0c:	f5a0 1080 	subne.w	r0, r0, #1048576	@ 0x100000
 8003a10:	6098      	str	r0, [r3, #8]
    getTwosComplement(&DPS_coef.C00, 20);
    DPS_coef.C10 = (((uint32_t)regs[5] & 0x0F) << 16) | ((uint32_t)regs[6] << 8) | (uint32_t)regs[7];
 8003a12:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8003a16:	0409      	lsls	r1, r1, #16
 8003a18:	ba52      	rev16	r2, r2
 8003a1a:	f401 2170 	and.w	r1, r1, #983040	@ 0xf0000
 8003a1e:	b292      	uxth	r2, r2
 8003a20:	430a      	orrs	r2, r1
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003a22:	0cc9      	lsrs	r1, r1, #19
        *raw -= (uint32_t)1 << length;
 8003a24:	bf18      	it	ne
 8003a26:	f5a2 1280 	subne.w	r2, r2, #1048576	@ 0x100000
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8003a30:	ba52      	rev16	r2, r2
 8003a32:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003a34:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8003a36:	bf48      	it	mi
 8003a38:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8003a3c:	6119      	str	r1, [r3, #16]
 8003a3e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8003a42:	ba52      	rev16	r2, r2
 8003a44:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003a46:	0410      	lsls	r0, r2, #16
        *raw -= (uint32_t)1 << length;
 8003a48:	bf48      	it	mi
 8003a4a:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8003a4e:	6159      	str	r1, [r3, #20]
 8003a50:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8003a54:	ba52      	rev16	r2, r2
 8003a56:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003a58:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8003a5a:	bf48      	it	mi
 8003a5c:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8003a60:	6199      	str	r1, [r3, #24]
 8003a62:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8003a66:	ba52      	rev16	r2, r2
 8003a68:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003a6a:	0410      	lsls	r0, r2, #16
        *raw -= (uint32_t)1 << length;
 8003a6c:	bf48      	it	mi
 8003a6e:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8003a72:	61d9      	str	r1, [r3, #28]
 8003a74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8003a78:	ba52      	rev16	r2, r2
 8003a7a:	b291      	uxth	r1, r2
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003a7c:	0412      	lsls	r2, r2, #16
        *raw -= (uint32_t)1 << length;
 8003a7e:	bf48      	it	mi
 8003a80:	f5a1 3180 	submi.w	r1, r1, #65536	@ 0x10000
 8003a84:	6219      	str	r1, [r3, #32]
//    printf("C0: %ld   C1: %ld\r\n",DPS_coef.C0,DPS_coef.C1);
//    printf("C00: %ld   C01: %ld\r\n",DPS_coef.C00,DPS_coef.C01);
//    printf("C10: %ld   C11: %ld\r\n",DPS_coef.C10,DPS_coef.C11);
//    printf("C20: %ld   C21: %ld\r\n",DPS_coef.C20,DPS_coef.C21);
//    printf("C30: %ld\r\n",DPS_coef.C30);
}
 8003a86:	b00b      	add	sp, #44	@ 0x2c
 8003a88:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a8c:	20000444 	.word	0x20000444
 8003a90:	200002bc 	.word	0x200002bc

08003a94 <DPS368_fifo>:
	printf("CFG REG 0x09 DUMP (hex): %#x\r\n",reg);
	printbinaryMSB(reg);
}

void DPS368_fifo(uint8_t endis)
{
 8003a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003a98:	4f13      	ldr	r7, [pc, #76]	@ (8003ae8 <DPS368_fifo+0x54>)
{
 8003a9a:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003a9c:	2401      	movs	r4, #1
 8003a9e:	f10d 0517 	add.w	r5, sp, #23
 8003aa2:	f04f 08fa 	mov.w	r8, #250	@ 0xfa
{
 8003aa6:	4606      	mov	r6, r0
	SET_DPS368();
 8003aa8:	f002 fcaa 	bl	8006400 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003aac:	4623      	mov	r3, r4
 8003aae:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8003ab2:	9500      	str	r5, [sp, #0]
 8003ab4:	2209      	movs	r2, #9
 8003ab6:	21ee      	movs	r1, #238	@ 0xee
 8003ab8:	4638      	mov	r0, r7
 8003aba:	f004 ff6d 	bl	8008998 <HAL_I2C_Mem_Read>
//	printf("(fifo) CFG REG READ (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	setBit(&reg,1,endis);
 8003abe:	4632      	mov	r2, r6
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	f002 fc44 	bl	8006350 <setBit>
//	printf("SET FIFO EN\r\n");
//	printf("(fifo) CFG REG WRITE (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003ac8:	4623      	mov	r3, r4
 8003aca:	2209      	movs	r2, #9
 8003acc:	21ee      	movs	r1, #238	@ 0xee
 8003ace:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8003ad2:	9500      	str	r5, [sp, #0]
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	f004 fe39 	bl	800874c <HAL_I2C_Mem_Write>
	osDelay(1);
 8003ada:	4620      	mov	r0, r4
 8003adc:	f006 ff8a 	bl	800a9f4 <osDelay>
}
 8003ae0:	b006      	add	sp, #24
 8003ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000444 	.word	0x20000444

08003aec <DPS368_conf_int>:

void DPS368_conf_int(uint8_t ints)
{
 8003aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003af0:	4f13      	ldr	r7, [pc, #76]	@ (8003b40 <DPS368_conf_int+0x54>)
{
 8003af2:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003af4:	2401      	movs	r4, #1
 8003af6:	f10d 0517 	add.w	r5, sp, #23
 8003afa:	f04f 08fa 	mov.w	r8, #250	@ 0xfa
{
 8003afe:	4606      	mov	r6, r0
	SET_DPS368();
 8003b00:	f002 fc7e 	bl	8006400 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003b04:	4623      	mov	r3, r4
 8003b06:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8003b0a:	9500      	str	r5, [sp, #0]
 8003b0c:	21ee      	movs	r1, #238	@ 0xee
 8003b0e:	2209      	movs	r2, #9
 8003b10:	4638      	mov	r0, r7
 8003b12:	f004 ff41 	bl	8008998 <HAL_I2C_Mem_Read>
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	modifyRegister(&reg, 0xF0, ints);
 8003b16:	4632      	mov	r2, r6
 8003b18:	4628      	mov	r0, r5
 8003b1a:	21f0      	movs	r1, #240	@ 0xf0
 8003b1c:	f002 fc2e 	bl	800637c <modifyRegister>
//	printf("SET INT \r\n");
//	printf("CFG REG (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003b20:	4623      	mov	r3, r4
 8003b22:	2209      	movs	r2, #9
 8003b24:	21ee      	movs	r1, #238	@ 0xee
 8003b26:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8003b2a:	9500      	str	r5, [sp, #0]
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f004 fe0d 	bl	800874c <HAL_I2C_Mem_Write>
	osDelay(1);
 8003b32:	4620      	mov	r0, r4
 8003b34:	f006 ff5e 	bl	800a9f4 <osDelay>
}
 8003b38:	b006      	add	sp, #24
 8003b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000444 	.word	0x20000444

08003b44 <DPS368_temp_source>:

void DPS368_temp_source()
{
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	b086      	sub	sp, #24
	uint8_t reg, reg_mod;
	SET_DPS368();
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8003b48:	2401      	movs	r4, #1
 8003b4a:	f10d 0517 	add.w	r5, sp, #23
 8003b4e:	26fa      	movs	r6, #250	@ 0xfa
	SET_DPS368();
 8003b50:	f002 fc56 	bl	8006400 <SET_DPS368>
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8003b54:	4623      	mov	r3, r4
 8003b56:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003b5a:	2207      	movs	r2, #7
 8003b5c:	9500      	str	r5, [sp, #0]
 8003b5e:	21ee      	movs	r1, #238	@ 0xee
 8003b60:	4811      	ldr	r0, [pc, #68]	@ (8003ba8 <DPS368_temp_source+0x64>)
 8003b62:	f004 ff19 	bl	8008998 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x07 (hex) (NOMOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, 0x28, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003b66:	f10d 0316 	add.w	r3, sp, #22
 8003b6a:	2228      	movs	r2, #40	@ 0x28
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003b72:	4623      	mov	r3, r4
 8003b74:	21ee      	movs	r1, #238	@ 0xee
 8003b76:	480c      	ldr	r0, [pc, #48]	@ (8003ba8 <DPS368_temp_source+0x64>)
 8003b78:	f004 ff0e 	bl	8008998 <HAL_I2C_Mem_Read>
//	printf("CFG TEMP SRC 0x28 (hex): %#x\r\n",reg);
//	printbinaryMSB(reg);
	if((reg & 0x80) == 0) {
 8003b7c:	f99d 3016 	ldrsb.w	r3, [sp, #22]
 8003b80:	2b00      	cmp	r3, #0
//		printf("Internal Temp\r\n");
		setBit(&reg_mod, 7, 0);
 8003b82:	bfac      	ite	ge
 8003b84:	2200      	movge	r2, #0
	} else {
//		printf("External Temp\r\n");
		setBit(&reg_mod, 7, 1);
 8003b86:	4622      	movlt	r2, r4
 8003b88:	4628      	mov	r0, r5
 8003b8a:	2107      	movs	r1, #7
 8003b8c:	f002 fbe0 	bl	8006350 <setBit>
		}
//	printf("CFG TEMP SRC 0x07 (hex) (MOD): %#x\r\n",reg_mod);
//	printbinaryMSB(reg_mod);

	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg_mod, 1, 250);
 8003b90:	2301      	movs	r3, #1
 8003b92:	22fa      	movs	r2, #250	@ 0xfa
 8003b94:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b98:	9500      	str	r5, [sp, #0]
 8003b9a:	2207      	movs	r2, #7
 8003b9c:	21ee      	movs	r1, #238	@ 0xee
 8003b9e:	4802      	ldr	r0, [pc, #8]	@ (8003ba8 <DPS368_temp_source+0x64>)
 8003ba0:	f004 fdd4 	bl	800874c <HAL_I2C_Mem_Write>

}
 8003ba4:	b006      	add	sp, #24
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}
 8003ba8:	20000444 	.word	0x20000444

08003bac <DPS368_conf_temp>:


void DPS368_conf_temp(uint8_t ovr, uint8_t rate)
{
 8003bac:	b570      	push	{r4, r5, r6, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	460d      	mov	r5, r1
	uint8_t reg;
	SET_DPS368();
	reg = ovr + rate;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003bb4:	f10d 0617 	add.w	r6, sp, #23
	SET_DPS368();
 8003bb8:	f002 fc22 	bl	8006400 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	22fa      	movs	r2, #250	@ 0xfa
 8003bc0:	e9cd 3201 	strd	r3, r2, [sp, #4]
	reg = ovr + rate;
 8003bc4:	4425      	add	r5, r4
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003bc6:	9600      	str	r6, [sp, #0]
 8003bc8:	2207      	movs	r2, #7
 8003bca:	21ee      	movs	r1, #238	@ 0xee
 8003bcc:	4835      	ldr	r0, [pc, #212]	@ (8003ca4 <DPS368_conf_temp+0xf8>)
	reg = ovr + rate;
 8003bce:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_TEMP_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003bd2:	f004 fdbb 	bl	800874c <HAL_I2C_Mem_Write>
    switch (ovr)
 8003bd6:	2c07      	cmp	r4, #7
 8003bd8:	d858      	bhi.n	8003c8c <DPS368_conf_temp+0xe0>
 8003bda:	e8df f004 	tbb	[pc, r4]
 8003bde:	3925      	.short	0x3925
 8003be0:	4d48433e 	.word	0x4d48433e
 8003be4:	0452      	.short	0x0452
        case DPS_OVERSAMPLE_64:
        	Kt_coef = DPS_OSR_SF_64;
            break;

        case DPS_OVERSAMPLE_128:
        	Kt_coef = DPS_OSR_SF_128;
 8003be6:	4b30      	ldr	r3, [pc, #192]	@ (8003ca8 <DPS368_conf_temp+0xfc>)
 8003be8:	f44f 12ff 	mov.w	r2, #2088960	@ 0x1fe000
 8003bec:	601a      	str	r2, [r3, #0]
            break;
    }
//    printf("Kt_coef set: %lu\r\n",Kt_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003bee:	22fa      	movs	r2, #250	@ 0xfa
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003bf6:	482b      	ldr	r0, [pc, #172]	@ (8003ca4 <DPS368_conf_temp+0xf8>)
 8003bf8:	9600      	str	r6, [sp, #0]
 8003bfa:	2209      	movs	r2, #9
 8003bfc:	21ee      	movs	r1, #238	@ 0xee
 8003bfe:	f004 fecb 	bl	8008998 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 3, 1);
 8003c02:	2201      	movs	r2, #1
 8003c04:	2103      	movs	r1, #3
 8003c06:	4630      	mov	r0, r6
 8003c08:	f002 fba2 	bl	8006350 <setBit>
    else setBit(&reg, 3, 0);
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	21fa      	movs	r1, #250	@ 0xfa
 8003c10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8003c14:	2209      	movs	r2, #9
 8003c16:	21ee      	movs	r1, #238	@ 0xee
 8003c18:	9600      	str	r6, [sp, #0]
 8003c1a:	4822      	ldr	r0, [pc, #136]	@ (8003ca4 <DPS368_conf_temp+0xf8>)
 8003c1c:	f004 fd96 	bl	800874c <HAL_I2C_Mem_Write>

	DPS368_temp_source();
 8003c20:	f7ff ff90 	bl	8003b44 <DPS368_temp_source>

}
 8003c24:	b006      	add	sp, #24
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
            Kt_coef = DPS_OSR_SF_1;
 8003c28:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca8 <DPS368_conf_temp+0xfc>)
 8003c2a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003c2e:	601a      	str	r2, [r3, #0]
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003c30:	2301      	movs	r3, #1
 8003c32:	22fa      	movs	r2, #250	@ 0xfa
 8003c34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c38:	9600      	str	r6, [sp, #0]
 8003c3a:	2209      	movs	r2, #9
 8003c3c:	21ee      	movs	r1, #238	@ 0xee
 8003c3e:	4819      	ldr	r0, [pc, #100]	@ (8003ca4 <DPS368_conf_temp+0xf8>)
 8003c40:	f004 feaa 	bl	8008998 <HAL_I2C_Mem_Read>
    else setBit(&reg, 3, 0);
 8003c44:	2200      	movs	r2, #0
 8003c46:	2103      	movs	r1, #3
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f002 fb81 	bl	8006350 <setBit>
 8003c4e:	e7dd      	b.n	8003c0c <DPS368_conf_temp+0x60>
        	Kt_coef = DPS_OSR_SF_2;
 8003c50:	4b15      	ldr	r3, [pc, #84]	@ (8003ca8 <DPS368_conf_temp+0xfc>)
 8003c52:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 8003c56:	601a      	str	r2, [r3, #0]
            break;
 8003c58:	e7ea      	b.n	8003c30 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_4;
 8003c5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <DPS368_conf_temp+0xfc>)
 8003c5c:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
 8003c60:	601a      	str	r2, [r3, #0]
            break;
 8003c62:	e7e5      	b.n	8003c30 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_8;
 8003c64:	4b10      	ldr	r3, [pc, #64]	@ (8003ca8 <DPS368_conf_temp+0xfc>)
 8003c66:	f44f 02f0 	mov.w	r2, #7864320	@ 0x780000
 8003c6a:	601a      	str	r2, [r3, #0]
            break;
 8003c6c:	e7e0      	b.n	8003c30 <DPS368_conf_temp+0x84>
        	Kt_coef = DPS_OSR_SF_16;
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <DPS368_conf_temp+0xfc>)
 8003c70:	f44f 3278 	mov.w	r2, #253952	@ 0x3e000
 8003c74:	601a      	str	r2, [r3, #0]
            break;
 8003c76:	e7ba      	b.n	8003bee <DPS368_conf_temp+0x42>
        	Kt_coef = DPS_OSR_SF_32;
 8003c78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca8 <DPS368_conf_temp+0xfc>)
 8003c7a:	f44f 22fc 	mov.w	r2, #516096	@ 0x7e000
 8003c7e:	601a      	str	r2, [r3, #0]
            break;
 8003c80:	e7b5      	b.n	8003bee <DPS368_conf_temp+0x42>
        	Kt_coef = DPS_OSR_SF_64;
 8003c82:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <DPS368_conf_temp+0xfc>)
 8003c84:	f44f 227e 	mov.w	r2, #1040384	@ 0xfe000
 8003c88:	601a      	str	r2, [r3, #0]
            break;
 8003c8a:	e7b0      	b.n	8003bee <DPS368_conf_temp+0x42>
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	22fa      	movs	r2, #250	@ 0xfa
 8003c90:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003c94:	9600      	str	r6, [sp, #0]
 8003c96:	2209      	movs	r2, #9
 8003c98:	21ee      	movs	r1, #238	@ 0xee
 8003c9a:	4802      	ldr	r0, [pc, #8]	@ (8003ca4 <DPS368_conf_temp+0xf8>)
 8003c9c:	f004 fe7c 	bl	8008998 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 3, 1);
 8003ca0:	e7af      	b.n	8003c02 <DPS368_conf_temp+0x56>
 8003ca2:	bf00      	nop
 8003ca4:	20000444 	.word	0x20000444
 8003ca8:	200002b8 	.word	0x200002b8

08003cac <DPS368_conf_press>:

void DPS368_conf_press(uint8_t ovr, uint8_t rate)
{
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	460d      	mov	r5, r1
	uint8_t reg;
	SET_DPS368();
	reg = ovr + rate;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003cb4:	f10d 0617 	add.w	r6, sp, #23
	SET_DPS368();
 8003cb8:	f002 fba2 	bl	8006400 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	22fa      	movs	r2, #250	@ 0xfa
 8003cc0:	e9cd 3201 	strd	r3, r2, [sp, #4]
	reg = ovr + rate;
 8003cc4:	4425      	add	r5, r4
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003cc6:	9600      	str	r6, [sp, #0]
 8003cc8:	2206      	movs	r2, #6
 8003cca:	21ee      	movs	r1, #238	@ 0xee
 8003ccc:	4834      	ldr	r0, [pc, #208]	@ (8003da0 <DPS368_conf_press+0xf4>)
	reg = ovr + rate;
 8003cce:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_PRESS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003cd2:	f004 fd3b 	bl	800874c <HAL_I2C_Mem_Write>
    switch (ovr)
 8003cd6:	2c07      	cmp	r4, #7
 8003cd8:	d856      	bhi.n	8003d88 <DPS368_conf_press+0xdc>
 8003cda:	e8df f004 	tbb	[pc, r4]
 8003cde:	3723      	.short	0x3723
 8003ce0:	4b46413c 	.word	0x4b46413c
 8003ce4:	0450      	.short	0x0450
        case DPS_OVERSAMPLE_64:
        	Kp_coef = DPS_OSR_SF_64;
            break;

        case DPS_OVERSAMPLE_128:
        	Kp_coef = DPS_OSR_SF_128;
 8003ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8003da4 <DPS368_conf_press+0xf8>)
 8003ce8:	f44f 12ff 	mov.w	r2, #2088960	@ 0x1fe000
 8003cec:	601a      	str	r2, [r3, #0]
            break;
    }

//    printf("Kp_coef set: %lu\r\n",Kp_coef);

   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003cee:	22fa      	movs	r2, #250	@ 0xfa
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003cf6:	482a      	ldr	r0, [pc, #168]	@ (8003da0 <DPS368_conf_press+0xf4>)
 8003cf8:	9600      	str	r6, [sp, #0]
 8003cfa:	2209      	movs	r2, #9
 8003cfc:	21ee      	movs	r1, #238	@ 0xee
 8003cfe:	f004 fe4b 	bl	8008998 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 2, 1);
 8003d02:	2201      	movs	r2, #1
 8003d04:	2102      	movs	r1, #2
 8003d06:	4630      	mov	r0, r6
 8003d08:	f002 fb22 	bl	8006350 <setBit>
    else setBit(&reg, 2, 0);
   	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	22fa      	movs	r2, #250	@ 0xfa
 8003d10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d14:	9600      	str	r6, [sp, #0]
 8003d16:	2209      	movs	r2, #9
 8003d18:	21ee      	movs	r1, #238	@ 0xee
 8003d1a:	4821      	ldr	r0, [pc, #132]	@ (8003da0 <DPS368_conf_press+0xf4>)
 8003d1c:	f004 fd16 	bl	800874c <HAL_I2C_Mem_Write>


}
 8003d20:	b006      	add	sp, #24
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
            Kp_coef = DPS_OSR_SF_1;
 8003d24:	4b1f      	ldr	r3, [pc, #124]	@ (8003da4 <DPS368_conf_press+0xf8>)
 8003d26:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d2a:	601a      	str	r2, [r3, #0]
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	22fa      	movs	r2, #250	@ 0xfa
 8003d30:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d34:	9600      	str	r6, [sp, #0]
 8003d36:	2209      	movs	r2, #9
 8003d38:	21ee      	movs	r1, #238	@ 0xee
 8003d3a:	4819      	ldr	r0, [pc, #100]	@ (8003da0 <DPS368_conf_press+0xf4>)
 8003d3c:	f004 fe2c 	bl	8008998 <HAL_I2C_Mem_Read>
    else setBit(&reg, 2, 0);
 8003d40:	2200      	movs	r2, #0
 8003d42:	2102      	movs	r1, #2
 8003d44:	4630      	mov	r0, r6
 8003d46:	f002 fb03 	bl	8006350 <setBit>
 8003d4a:	e7df      	b.n	8003d0c <DPS368_conf_press+0x60>
        	Kp_coef = DPS_OSR_SF_2;
 8003d4c:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <DPS368_conf_press+0xf8>)
 8003d4e:	f44f 12c0 	mov.w	r2, #1572864	@ 0x180000
 8003d52:	601a      	str	r2, [r3, #0]
            break;
 8003d54:	e7ea      	b.n	8003d2c <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_4;
 8003d56:	4b13      	ldr	r3, [pc, #76]	@ (8003da4 <DPS368_conf_press+0xf8>)
 8003d58:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
 8003d5c:	601a      	str	r2, [r3, #0]
            break;
 8003d5e:	e7e5      	b.n	8003d2c <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_8;
 8003d60:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <DPS368_conf_press+0xf8>)
 8003d62:	f44f 02f0 	mov.w	r2, #7864320	@ 0x780000
 8003d66:	601a      	str	r2, [r3, #0]
            break;
 8003d68:	e7e0      	b.n	8003d2c <DPS368_conf_press+0x80>
        	Kp_coef = DPS_OSR_SF_16;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <DPS368_conf_press+0xf8>)
 8003d6c:	f44f 3278 	mov.w	r2, #253952	@ 0x3e000
 8003d70:	601a      	str	r2, [r3, #0]
            break;
 8003d72:	e7bc      	b.n	8003cee <DPS368_conf_press+0x42>
        	Kp_coef = DPS_OSR_SF_32;
 8003d74:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <DPS368_conf_press+0xf8>)
 8003d76:	f44f 22fc 	mov.w	r2, #516096	@ 0x7e000
 8003d7a:	601a      	str	r2, [r3, #0]
            break;
 8003d7c:	e7b7      	b.n	8003cee <DPS368_conf_press+0x42>
        	Kp_coef = DPS_OSR_SF_64;
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <DPS368_conf_press+0xf8>)
 8003d80:	f44f 227e 	mov.w	r2, #1040384	@ 0xfe000
 8003d84:	601a      	str	r2, [r3, #0]
            break;
 8003d86:	e7b2      	b.n	8003cee <DPS368_conf_press+0x42>
   	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003d88:	2301      	movs	r3, #1
 8003d8a:	22fa      	movs	r2, #250	@ 0xfa
 8003d8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d90:	9600      	str	r6, [sp, #0]
 8003d92:	2209      	movs	r2, #9
 8003d94:	21ee      	movs	r1, #238	@ 0xee
 8003d96:	4802      	ldr	r0, [pc, #8]	@ (8003da0 <DPS368_conf_press+0xf4>)
 8003d98:	f004 fdfe 	bl	8008998 <HAL_I2C_Mem_Read>
    if(ovr > DPS_OVERSAMPLE_8) setBit(&reg, 2, 1);
 8003d9c:	e7b1      	b.n	8003d02 <DPS368_conf_press+0x56>
 8003d9e:	bf00      	nop
 8003da0:	20000444 	.word	0x20000444
 8003da4:	200002b4 	.word	0x200002b4

08003da8 <DPS368_temp_correct>:
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);

}

void DPS368_temp_correct(uint8_t ovr)
{
 8003da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003daa:	b087      	sub	sp, #28
	SET_DPS368();
	HAL_StatusTypeDef status;
	uint8_t write_data = 0xA5;
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003dac:	2401      	movs	r4, #1
{
 8003dae:	4605      	mov	r5, r0
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003db0:	27fa      	movs	r7, #250	@ 0xfa
	SET_DPS368();
 8003db2:	f002 fb25 	bl	8006400 <SET_DPS368>
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003db6:	f10d 0616 	add.w	r6, sp, #22
	uint8_t write_data = 0xA5;
 8003dba:	23a5      	movs	r3, #165	@ 0xa5
 8003dbc:	f88d 3016 	strb.w	r3, [sp, #22]
	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003dc0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003dc4:	482b      	ldr	r0, [pc, #172]	@ (8003e74 <DPS368_temp_correct+0xcc>)
 8003dc6:	9600      	str	r6, [sp, #0]
 8003dc8:	4623      	mov	r3, r4
 8003dca:	220e      	movs	r2, #14
 8003dcc:	21ee      	movs	r1, #238	@ 0xee
 8003dce:	f004 fcbd 	bl	800874c <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8003dd2:	b1c8      	cbz	r0, 8003e08 <DPS368_temp_correct+0x60>
	}
	if (status == HAL_OK) {
        write_data = 0x00;
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
	}
	DPS368_conf_temp(ovr, DPS_RATE_1);
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f7ff fee8 	bl	8003bac <DPS368_conf_temp>
}


void DPS368_run_mode(uint8_t mode)
{
	SET_DPS368();
 8003ddc:	f002 fb10 	bl	8006400 <SET_DPS368>
	uint8_t reg;
//	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
//	reg = (reg & 0x0E) | mode;
	reg = mode;
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003de0:	2301      	movs	r3, #1
 8003de2:	f10d 0217 	add.w	r2, sp, #23
 8003de6:	21fa      	movs	r1, #250	@ 0xfa
 8003de8:	e9cd 3101 	strd	r3, r1, [sp, #4]
	reg = mode;
 8003dec:	2402      	movs	r4, #2
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003dee:	9200      	str	r2, [sp, #0]
 8003df0:	21ee      	movs	r1, #238	@ 0xee
 8003df2:	2208      	movs	r2, #8
 8003df4:	481f      	ldr	r0, [pc, #124]	@ (8003e74 <DPS368_temp_correct+0xcc>)
	reg = mode;
 8003df6:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003dfa:	f004 fca7 	bl	800874c <HAL_I2C_Mem_Write>
	osDelay(2);
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f006 fdf8 	bl	800a9f4 <osDelay>
}
 8003e04:	b007      	add	sp, #28
 8003e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_data = 0x96;
 8003e08:	2396      	movs	r3, #150	@ 0x96
 8003e0a:	f88d 3016 	strb.w	r3, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003e0e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003e12:	4818      	ldr	r0, [pc, #96]	@ (8003e74 <DPS368_temp_correct+0xcc>)
 8003e14:	9600      	str	r6, [sp, #0]
 8003e16:	4623      	mov	r3, r4
 8003e18:	220f      	movs	r2, #15
 8003e1a:	21ee      	movs	r1, #238	@ 0xee
 8003e1c:	f004 fc96 	bl	800874c <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d1d7      	bne.n	8003dd4 <DPS368_temp_correct+0x2c>
        write_data = 0x02;
 8003e24:	2302      	movs	r3, #2
 8003e26:	f88d 3016 	strb.w	r3, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x62, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003e2a:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003e2e:	4811      	ldr	r0, [pc, #68]	@ (8003e74 <DPS368_temp_correct+0xcc>)
 8003e30:	9600      	str	r6, [sp, #0]
 8003e32:	4623      	mov	r3, r4
 8003e34:	2262      	movs	r2, #98	@ 0x62
 8003e36:	21ee      	movs	r1, #238	@ 0xee
 8003e38:	f004 fc88 	bl	800874c <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d1c9      	bne.n	8003dd4 <DPS368_temp_correct+0x2c>
        write_data = 0x00;
 8003e40:	f88d 0016 	strb.w	r0, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0E, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003e44:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003e48:	480a      	ldr	r0, [pc, #40]	@ (8003e74 <DPS368_temp_correct+0xcc>)
 8003e4a:	9600      	str	r6, [sp, #0]
 8003e4c:	4623      	mov	r3, r4
 8003e4e:	220e      	movs	r2, #14
 8003e50:	21ee      	movs	r1, #238	@ 0xee
 8003e52:	f004 fc7b 	bl	800874c <HAL_I2C_Mem_Write>
	if (status == HAL_OK) {
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d1bc      	bne.n	8003dd4 <DPS368_temp_correct+0x2c>
        write_data = 0x00;
 8003e5a:	f88d 0016 	strb.w	r0, [sp, #22]
    	status = HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, 0x0F, I2C_MEMADD_SIZE_8BIT, &write_data, 1, 250);
 8003e5e:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8003e62:	9600      	str	r6, [sp, #0]
 8003e64:	4623      	mov	r3, r4
 8003e66:	220f      	movs	r2, #15
 8003e68:	21ee      	movs	r1, #238	@ 0xee
 8003e6a:	4802      	ldr	r0, [pc, #8]	@ (8003e74 <DPS368_temp_correct+0xcc>)
 8003e6c:	f004 fc6e 	bl	800874c <HAL_I2C_Mem_Write>
 8003e70:	e7b0      	b.n	8003dd4 <DPS368_temp_correct+0x2c>
 8003e72:	bf00      	nop
 8003e74:	20000444 	.word	0x20000444

08003e78 <calcBusyTime>:


uint32_t calcBusyTime(uint8_t osr)
{
    // formula from datasheet (optimized)
    return (((uint32_t)20U) + ((uint32_t)16U << ((uint16_t)osr)));
 8003e78:	2310      	movs	r3, #16
 8003e7a:	fa03 f000 	lsl.w	r0, r3, r0
}
 8003e7e:	3014      	adds	r0, #20
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop

08003e84 <DPS368_init>:

void DPS368_init(uint8_t fifo, uint8_t int_m)
{
 8003e84:	b530      	push	{r4, r5, lr}
 8003e86:	460d      	mov	r5, r1
 8003e88:	b087      	sub	sp, #28
 8003e8a:	4604      	mov	r4, r0
	DPS368_read_coeff();
 8003e8c:	f7ff fd86 	bl	800399c <DPS368_read_coeff>
	DPS368_conf_int(int_m);
 8003e90:	4628      	mov	r0, r5
 8003e92:	f7ff fe2b 	bl	8003aec <DPS368_conf_int>
	DPS368_fifo(fifo);
 8003e96:	4620      	mov	r0, r4
 8003e98:	f7ff fdfc 	bl	8003a94 <DPS368_fifo>
	SET_DPS368();
 8003e9c:	f002 fab0 	bl	8006400 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f10d 0217 	add.w	r2, sp, #23
 8003ea6:	21fa      	movs	r1, #250	@ 0xfa
 8003ea8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8003eac:	9200      	str	r2, [sp, #0]
 8003eae:	21ee      	movs	r1, #238	@ 0xee
 8003eb0:	2208      	movs	r2, #8
	reg = mode;
 8003eb2:	2400      	movs	r4, #0
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003eb4:	4804      	ldr	r0, [pc, #16]	@ (8003ec8 <DPS368_init+0x44>)
	reg = mode;
 8003eb6:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003eba:	f004 fc47 	bl	800874c <HAL_I2C_Mem_Write>
	osDelay(2);
 8003ebe:	2002      	movs	r0, #2
 8003ec0:	f006 fd98 	bl	800a9f4 <osDelay>
	DPS368_run_mode(MODE_IDLE);
}
 8003ec4:	b007      	add	sp, #28
 8003ec6:	bd30      	pop	{r4, r5, pc}
 8003ec8:	20000444 	.word	0x20000444

08003ecc <DPS368_start_meas_temp>:

void DPS368_start_meas_temp(uint8_t ovr)
{
 8003ecc:	b510      	push	{r4, lr}
	DPS368_conf_temp(ovr, 0U);
 8003ece:	2100      	movs	r1, #0
{
 8003ed0:	b086      	sub	sp, #24
	DPS368_conf_temp(ovr, 0U);
 8003ed2:	f7ff fe6b 	bl	8003bac <DPS368_conf_temp>
	SET_DPS368();
 8003ed6:	f002 fa93 	bl	8006400 <SET_DPS368>
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003eda:	2301      	movs	r3, #1
 8003edc:	f10d 0217 	add.w	r2, sp, #23
 8003ee0:	21fa      	movs	r1, #250	@ 0xfa
 8003ee2:	e9cd 3101 	strd	r3, r1, [sp, #4]
	reg = mode;
 8003ee6:	2402      	movs	r4, #2
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003ee8:	9200      	str	r2, [sp, #0]
 8003eea:	21ee      	movs	r1, #238	@ 0xee
 8003eec:	2208      	movs	r2, #8
 8003eee:	4805      	ldr	r0, [pc, #20]	@ (8003f04 <DPS368_start_meas_temp+0x38>)
	reg = mode;
 8003ef0:	f88d 4017 	strb.w	r4, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003ef4:	f004 fc2a 	bl	800874c <HAL_I2C_Mem_Write>
	osDelay(2);
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f006 fd7b 	bl	800a9f4 <osDelay>
	DPS368_run_mode(MODE_CMD_TEMP);
}
 8003efe:	b006      	add	sp, #24
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	bf00      	nop
 8003f04:	20000444 	.word	0x20000444

08003f08 <DPS368_calc_temp>:
float DPS368_calc_temp(float temp_scaled)
{
	float temperature;
//	temp_scaled = DPS368_get_scaled_temp();
//	printf("DPS TEMP SCALED VALUE: %.3f\r\n", temp_scaled);
	temperature = DPS_coef.C0 + DPS_coef.C1 * temp_scaled;
 8003f08:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <DPS368_calc_temp+0x1c>)
 8003f0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f0e:	edd3 7a00 	vldr	s15, [r3]
 8003f12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return temperature;
}
 8003f1a:	eee7 7a00 	vfma.f32	s15, s14, s0
 8003f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f22:	4770      	bx	lr
 8003f24:	200002bc 	.word	0x200002bc

08003f28 <DPS368_start_meas_press>:

void DPS368_start_meas_press(uint8_t ovr)
{
 8003f28:	b500      	push	{lr}
	DPS368_conf_press(ovr, 0U);
 8003f2a:	2100      	movs	r1, #0
{
 8003f2c:	b087      	sub	sp, #28
	DPS368_conf_press(ovr, 0U);
 8003f2e:	f7ff febd 	bl	8003cac <DPS368_conf_press>
	SET_DPS368();
 8003f32:	f002 fa65 	bl	8006400 <SET_DPS368>
	reg = mode;
 8003f36:	2301      	movs	r3, #1
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003f38:	f10d 0217 	add.w	r2, sp, #23
 8003f3c:	21fa      	movs	r1, #250	@ 0xfa
 8003f3e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8003f42:	9200      	str	r2, [sp, #0]
 8003f44:	21ee      	movs	r1, #238	@ 0xee
 8003f46:	2208      	movs	r2, #8
 8003f48:	4805      	ldr	r0, [pc, #20]	@ (8003f60 <DPS368_start_meas_press+0x38>)
	reg = mode;
 8003f4a:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c2, DPS368_ADDR, DPS368_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, &reg, 1, 250);
 8003f4e:	f004 fbfd 	bl	800874c <HAL_I2C_Mem_Write>
	osDelay(2);
 8003f52:	2002      	movs	r0, #2
 8003f54:	f006 fd4e 	bl	800a9f4 <osDelay>
	DPS368_run_mode(MODE_CMD_PRESS);
}
 8003f58:	b007      	add	sp, #28
 8003f5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f5e:	bf00      	nop
 8003f60:	20000444 	.word	0x20000444

08003f64 <DPS368_get_scaled_temp>:

float DPS368_get_scaled_temp()
{
 8003f64:	b500      	push	{lr}
 8003f66:	b087      	sub	sp, #28
	SET_DPS368();
 8003f68:	f002 fa4a 	bl	8006400 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_temp;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_TEMP, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	ab05      	add	r3, sp, #20
 8003f70:	21fa      	movs	r1, #250	@ 0xfa
 8003f72:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	21ee      	movs	r1, #238	@ 0xee
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	4810      	ldr	r0, [pc, #64]	@ (8003fc0 <DPS368_get_scaled_temp+0x5c>)
 8003f7e:	f004 fd0b 	bl	8008998 <HAL_I2C_Mem_Read>
	raw_temp = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8003f82:	f8bd 3015 	ldrh.w	r3, [sp, #21]
 8003f86:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003f8a:	ba5b      	rev16	r3, r3
 8003f8c:	0412      	lsls	r2, r2, #16
 8003f8e:	fa12 f383 	uxtah	r3, r2, r3
    if (*raw & ((uint32_t)1 << (length - 1)))
 8003f92:	0dd2      	lsrs	r2, r2, #23
	getTwosComplement(&raw_temp, 24);
	const float scalingT = 1.0f/Kt_coef;
 8003f94:	4a0b      	ldr	r2, [pc, #44]	@ (8003fc4 <DPS368_get_scaled_temp+0x60>)
 8003f96:	edd2 7a00 	vldr	s15, [r2]
        *raw -= (uint32_t)1 << length;
 8003f9a:	bf18      	it	ne
 8003f9c:	f103 437f 	addne.w	r3, r3, #4278190080	@ 0xff000000
	return ((float)raw_temp * scalingT);
 8003fa0:	ee07 3a10 	vmov	s14, r3
	const float scalingT = 1.0f/Kt_coef;
 8003fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
	return ((float)raw_temp * scalingT);
 8003fac:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
	const float scalingT = 1.0f/Kt_coef;
 8003fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
}
 8003fb4:	ee27 0a00 	vmul.f32	s0, s14, s0
 8003fb8:	b007      	add	sp, #28
 8003fba:	f85d fb04 	ldr.w	pc, [sp], #4
 8003fbe:	bf00      	nop
 8003fc0:	20000444 	.word	0x20000444
 8003fc4:	200002b8 	.word	0x200002b8

08003fc8 <DPS368_get_press>:

float DPS368_get_press(float temp_scaled)
{
 8003fc8:	b500      	push	{lr}
 8003fca:	ed2d 8b02 	vpush	{d8}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	eeb0 8a40 	vmov.f32	s16, s0
	SET_DPS368();
 8003fd4:	f002 fa14 	bl	8006400 <SET_DPS368>
	uint8_t value[3];
	int32_t raw_press;
	HAL_I2C_Mem_Read(&hi2c2, DPS368_ADDR, DPS368_PRESS, I2C_MEMADD_SIZE_8BIT, value, 3, 250);
 8003fd8:	ab05      	add	r3, sp, #20
 8003fda:	21fa      	movs	r1, #250	@ 0xfa
 8003fdc:	2203      	movs	r2, #3
 8003fde:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	21ee      	movs	r1, #238	@ 0xee
 8003fea:	4829      	ldr	r0, [pc, #164]	@ (8004090 <DPS368_get_press+0xc8>)
 8003fec:	f004 fcd4 	bl	8008998 <HAL_I2C_Mem_Read>
	raw_press = (int32_t)(value[2]) + (value[1] << 8) + (value[0] << 16);
 8003ff0:	f8bd 3015 	ldrh.w	r3, [sp, #21]
 8003ff4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003ff8:	ba5b      	rev16	r3, r3
 8003ffa:	0412      	lsls	r2, r2, #16
 8003ffc:	fa12 f383 	uxtah	r3, r2, r3
    if (*raw & ((uint32_t)1 << (length - 1)))
 8004000:	0dd2      	lsrs	r2, r2, #23
	getTwosComplement(&raw_press, 24);
	const float scalingP = 1.0f/Kp_coef;
 8004002:	4a24      	ldr	r2, [pc, #144]	@ (8004094 <DPS368_get_press+0xcc>)
 8004004:	edd2 6a00 	vldr	s13, [r2]
//	printf("DPS RAW PRESS VALUE: %ld\r\n", raw_press);
//	printf("DPS SCALING PRESS VALUE: %.12f\r\n", scalingP);
	float press_scaled, pressure;
	press_scaled = (float)raw_press * scalingP;
//	printf("DPS PRESS SCALED VALUE: %.3f\r\n", press_scaled);
    pressure = DPS_coef.C00;
 8004008:	4a23      	ldr	r2, [pc, #140]	@ (8004098 <DPS368_get_press+0xd0>)
	const float scalingP = 1.0f/Kp_coef;
 800400a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800400e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004012:	ee86 7a26 	vdiv.f32	s14, s12, s13
        *raw -= (uint32_t)1 << length;
 8004016:	bf18      	it	ne
 8004018:	f103 437f 	addne.w	r3, r3, #4278190080	@ 0xff000000
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 800401c:	edd2 6a08 	vldr	s13, [r2, #32]
	pressure += (temp_scaled * DPS_coef.C01);
 8004020:	ed92 5a04 	vldr	s10, [r2, #16]
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8004024:	edd2 4a07 	vldr	s9, [r2, #28]
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004028:	eeb8 4ae6 	vcvt.f32.s32	s8, s13
 800402c:	edd2 6a06 	vldr	s13, [r2, #24]
	press_scaled = (float)raw_press * scalingP;
 8004030:	ee07 3a90 	vmov	s15, r3
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004034:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8004038:	edd2 6a03 	vldr	s13, [r2, #12]
	press_scaled = (float)raw_press * scalingP;
 800403c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004040:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
    pressure = DPS_coef.C00;
 8004044:	edd2 6a02 	vldr	s13, [r2, #8]
	press_scaled = (float)raw_press * scalingP;
 8004048:	ee67 7a27 	vmul.f32	s15, s14, s15
    pressure = DPS_coef.C00;
 800404c:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8004050:	edd2 6a05 	vldr	s13, [r2, #20]
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004054:	eee4 5a27 	vfma.f32	s11, s8, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8004058:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	pressure += (temp_scaled * DPS_coef.C01);
 800405c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8004060:	eeb0 7a66 	vmov.f32	s14, s13
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004064:	eef0 6a46 	vmov.f32	s13, s12
 8004068:	eee5 6aa7 	vfma.f32	s13, s11, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 800406c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
	pressure += press_scaled * (DPS_coef.C10 + press_scaled * (DPS_coef.C20 + press_scaled * DPS_coef.C30));
 8004070:	eea6 0aa7 	vfma.f32	s0, s13, s15
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 8004074:	eea4 7aa7 	vfma.f32	s14, s9, s15
	pressure += (temp_scaled * DPS_coef.C01);
 8004078:	eea5 0a08 	vfma.f32	s0, s10, s16
	pressure += (temp_scaled * press_scaled * (DPS_coef.C11 + press_scaled * DPS_coef.C21));
 800407c:	ee67 4a88 	vmul.f32	s9, s15, s16
//	return pressure *0.01f;
	return pressure;
}
 8004080:	eea4 0a87 	vfma.f32	s0, s9, s14
 8004084:	b007      	add	sp, #28
 8004086:	ecbd 8b02 	vpop	{d8}
 800408a:	f85d fb04 	ldr.w	pc, [sp], #4
 800408e:	bf00      	nop
 8004090:	20000444 	.word	0x20000444
 8004094:	200002b4 	.word	0x200002b4
 8004098:	200002bc 	.word	0x200002bc

0800409c <dps368_ovr_config>:

uint16_t dps368_ovr_config(uint8_t sensor_conf)
{
 800409c:	b508      	push	{r3, lr}
    switch (sensor_conf) {
 800409e:	2807      	cmp	r0, #7
 80040a0:	d84d      	bhi.n	800413e <dps368_ovr_config+0xa2>
 80040a2:	e8df f000 	tbb	[pc, r0]
 80040a6:	160d      	.short	0x160d
 80040a8:	3a31281f 	.word	0x3a31281f
 80040ac:	0443      	.short	0x0443
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
        case 6:
        	printf("DPS368 set TEMP & PRESS Oversample x64\r\n");
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
        case 7:
        	printf("DPS368 set TEMP & PRESS Oversample x128\r\n");
 80040ae:	4828      	ldr	r0, [pc, #160]	@ (8004150 <dps368_ovr_config+0xb4>)
 80040b0:	f009 fba6 	bl	800d800 <puts>
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_128);
 80040b4:	2107      	movs	r1, #7

        default:
        	printf("DPS368 set TEMP Oversample x128, PRESS Oversample x4 \r\n");
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_4);
    }
}
 80040b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_128);
 80040ba:	4608      	mov	r0, r1
 80040bc:	f002 b95a 	b.w	8006374 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x1\r\n");
 80040c0:	4824      	ldr	r0, [pc, #144]	@ (8004154 <dps368_ovr_config+0xb8>)
 80040c2:	f009 fb9d 	bl	800d800 <puts>
            return combine_uint8(DPS_OVERSAMPLE_1,DPS_OVERSAMPLE_1);
 80040c6:	2100      	movs	r1, #0
}
 80040c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_1,DPS_OVERSAMPLE_1);
 80040cc:	4608      	mov	r0, r1
 80040ce:	f002 b951 	b.w	8006374 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x2\r\n");
 80040d2:	4821      	ldr	r0, [pc, #132]	@ (8004158 <dps368_ovr_config+0xbc>)
 80040d4:	f009 fb94 	bl	800d800 <puts>
            return combine_uint8(DPS_OVERSAMPLE_2,DPS_OVERSAMPLE_2);
 80040d8:	2101      	movs	r1, #1
}
 80040da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_2,DPS_OVERSAMPLE_2);
 80040de:	4608      	mov	r0, r1
 80040e0:	f002 b948 	b.w	8006374 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x4\r\n");
 80040e4:	481d      	ldr	r0, [pc, #116]	@ (800415c <dps368_ovr_config+0xc0>)
 80040e6:	f009 fb8b 	bl	800d800 <puts>
            return combine_uint8(DPS_OVERSAMPLE_4,DPS_OVERSAMPLE_4);
 80040ea:	2102      	movs	r1, #2
}
 80040ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_4,DPS_OVERSAMPLE_4);
 80040f0:	4608      	mov	r0, r1
 80040f2:	f002 b93f 	b.w	8006374 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x8\r\n");
 80040f6:	481a      	ldr	r0, [pc, #104]	@ (8004160 <dps368_ovr_config+0xc4>)
 80040f8:	f009 fb82 	bl	800d800 <puts>
            return combine_uint8(DPS_OVERSAMPLE_8,DPS_OVERSAMPLE_8);
 80040fc:	2103      	movs	r1, #3
}
 80040fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_8,DPS_OVERSAMPLE_8);
 8004102:	4608      	mov	r0, r1
 8004104:	f002 b936 	b.w	8006374 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x16\r\n");
 8004108:	4816      	ldr	r0, [pc, #88]	@ (8004164 <dps368_ovr_config+0xc8>)
 800410a:	f009 fb79 	bl	800d800 <puts>
            return combine_uint8(DPS_OVERSAMPLE_16,DPS_OVERSAMPLE_16);
 800410e:	2104      	movs	r1, #4
}
 8004110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_16,DPS_OVERSAMPLE_16);
 8004114:	4608      	mov	r0, r1
 8004116:	f002 b92d 	b.w	8006374 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x32\r\n");
 800411a:	4813      	ldr	r0, [pc, #76]	@ (8004168 <dps368_ovr_config+0xcc>)
 800411c:	f009 fb70 	bl	800d800 <puts>
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
 8004120:	2105      	movs	r1, #5
}
 8004122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_32,DPS_OVERSAMPLE_32);
 8004126:	4608      	mov	r0, r1
 8004128:	f002 b924 	b.w	8006374 <combine_uint8>
        	printf("DPS368 set TEMP & PRESS Oversample x64\r\n");
 800412c:	480f      	ldr	r0, [pc, #60]	@ (800416c <dps368_ovr_config+0xd0>)
 800412e:	f009 fb67 	bl	800d800 <puts>
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
 8004132:	2106      	movs	r1, #6
}
 8004134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_64,DPS_OVERSAMPLE_64);
 8004138:	4608      	mov	r0, r1
 800413a:	f002 b91b 	b.w	8006374 <combine_uint8>
        	printf("DPS368 set TEMP Oversample x128, PRESS Oversample x4 \r\n");
 800413e:	480c      	ldr	r0, [pc, #48]	@ (8004170 <dps368_ovr_config+0xd4>)
 8004140:	f009 fb5e 	bl	800d800 <puts>
}
 8004144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return combine_uint8(DPS_OVERSAMPLE_128,DPS_OVERSAMPLE_4);
 8004148:	2102      	movs	r1, #2
 800414a:	2007      	movs	r0, #7
 800414c:	f002 b912 	b.w	8006374 <combine_uint8>
 8004150:	08011734 	.word	0x08011734
 8004154:	0801161c 	.word	0x0801161c
 8004158:	08011644 	.word	0x08011644
 800415c:	0801166c 	.word	0x0801166c
 8004160:	08011694 	.word	0x08011694
 8004164:	080116bc 	.word	0x080116bc
 8004168:	080116e4 	.word	0x080116e4
 800416c:	0801170c 	.word	0x0801170c
 8004170:	08011760 	.word	0x08011760

08004174 <PreSleepProcessing>:

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
/* place for user code */
}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop

08004178 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop

0800417c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800417c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800417e:	2001      	movs	r0, #1
 8004180:	f006 fc38 	bl	800a9f4 <osDelay>
    __WFI();
 8004184:	bf30      	wfi
  for(;;)
 8004186:	e7fa      	b.n	800417e <StartDefaultTask+0x2>

08004188 <SystemClock_Config>:
{
 8004188:	b530      	push	{r4, r5, lr}
 800418a:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800418c:	2244      	movs	r2, #68	@ 0x44
 800418e:	2100      	movs	r1, #0
 8004190:	a806      	add	r0, sp, #24
 8004192:	f009 fc35 	bl	800da00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004196:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004198:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800419c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80041a0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80041a4:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80041a6:	f004 fe25 	bl	8008df4 <HAL_PWREx_ControlVoltageScaling>
 80041aa:	b108      	cbz	r0, 80041b0 <SystemClock_Config+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041ac:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041ae:	e7fe      	b.n	80041ae <SystemClock_Config+0x26>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041b0:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041b2:	2401      	movs	r4, #1
 80041b4:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041b8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041ba:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80041bc:	230a      	movs	r3, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041be:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 10;
 80041c2:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80041c4:	2207      	movs	r2, #7
 80041c6:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041c8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041ca:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = 1;
 80041cc:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80041ce:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 80041d2:	e9cd 4511 	strd	r4, r5, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041d6:	f004 feed 	bl	8008fb4 <HAL_RCC_OscConfig>
 80041da:	4603      	mov	r3, r0
 80041dc:	b108      	cbz	r0, 80041e2 <SystemClock_Config+0x5a>
 80041de:	b672      	cpsid	i
  while (1)
 80041e0:	e7fe      	b.n	80041e0 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041e2:	220f      	movs	r2, #15
 80041e4:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041e6:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80041e8:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041ea:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80041ec:	e9cd 4202 	strd	r4, r2, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041f4:	f005 f9e8 	bl	80095c8 <HAL_RCC_ClockConfig>
 80041f8:	b108      	cbz	r0, 80041fe <SystemClock_Config+0x76>
 80041fa:	b672      	cpsid	i
  while (1)
 80041fc:	e7fe      	b.n	80041fc <SystemClock_Config+0x74>
}
 80041fe:	b019      	add	sp, #100	@ 0x64
 8004200:	bd30      	pop	{r4, r5, pc}
 8004202:	bf00      	nop

08004204 <main>:
{
 8004204:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004206:	2400      	movs	r4, #0
{
 8004208:	b090      	sub	sp, #64	@ 0x40
  HAL_Init();
 800420a:	f002 fd6f 	bl	8006cec <HAL_Init>
  SystemClock_Config();
 800420e:	f7ff ffbb 	bl	8004188 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004212:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8004216:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	4db1      	ldr	r5, [pc, #708]	@ (80044e0 <main+0x2dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800421e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8004226:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004230:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8004232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004236:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8004238:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	9302      	str	r3, [sp, #8]
 8004240:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004242:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800424a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	9303      	str	r3, [sp, #12]
 8004252:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004254:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8004256:	f043 0302 	orr.w	r3, r3, #2
 800425a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800425c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800425e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 8004262:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004264:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 8004266:	2201      	movs	r2, #1
 8004268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800426c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(SIM_UART_DTR_GPIO_Port, SIM_UART_DTR_Pin, GPIO_PIN_SET);
 800426e:	f003 ff35 	bl	80080dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 8004272:	4622      	mov	r2, r4
 8004274:	489b      	ldr	r0, [pc, #620]	@ (80044e4 <main+0x2e0>)
 8004276:	f248 2101 	movw	r1, #33281	@ 0x8201
 800427a:	f003 ff2f 	bl	80080dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RST2_Pin|BQ_QON_Pin|BQ_CE_Pin, GPIO_PIN_RESET);
 800427e:	4622      	mov	r2, r4
 8004280:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8004284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004288:	f003 ff28 	bl	80080dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800428c:	2201      	movs	r2, #1
 800428e:	4895      	ldr	r0, [pc, #596]	@ (80044e4 <main+0x2e0>)
 8004290:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004294:	f003 ff22 	bl	80080dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004298:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = But_ONOFF_Pin;
 800429c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 80042a0:	4891      	ldr	r0, [pc, #580]	@ (80044e8 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042a2:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 80042a6:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042a8:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042aa:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(But_ONOFF_GPIO_Port, &GPIO_InitStruct);
 80042ae:	f003 fe15 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042b6:	488c      	ldr	r0, [pc, #560]	@ (80044e8 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ba:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042bc:	e9cd 370a 	strd	r3, r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c0:	f003 fe0c 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80042c4:	f248 0302 	movw	r3, #32770	@ 0x8002
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c8:	a90a      	add	r1, sp, #40	@ 0x28
 80042ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ce:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80042d2:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	f003 fe02 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80042d8:	2310      	movs	r3, #16
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80042da:	a90a      	add	r1, sp, #40	@ 0x28
 80042dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042e0:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 80042e6:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 80042e8:	f003 fdf8 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80042ec:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f0:	a90a      	add	r1, sp, #40	@ 0x28
 80042f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f6:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|BQ_QON_Pin|BQ_CE_Pin;
 80042fa:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042fc:	960b      	str	r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fe:	f003 fded 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 8004302:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8004304:	a90a      	add	r1, sp, #40	@ 0x28
 8004306:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800430a:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = GPS_1PPS_Pin;
 800430e:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPS_1PPS_GPIO_Port, &GPIO_InitStruct);
 8004310:	f003 fde4 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|LED2_Pin;
 8004314:	f248 1321 	movw	r3, #33057	@ 0x8121
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004318:	4872      	ldr	r0, [pc, #456]	@ (80044e4 <main+0x2e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800431a:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800431c:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|LED2_Pin;
 8004322:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004324:	f003 fdda 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8004328:	f241 0302 	movw	r3, #4098	@ 0x1002
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800432c:	486d      	ldr	r0, [pc, #436]	@ (80044e4 <main+0x2e0>)
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 800432e:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004330:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004332:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004336:	f003 fdd1 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 800433a:	f640 430c 	movw	r3, #3084	@ 0xc0c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433e:	4869      	ldr	r0, [pc, #420]	@ (80044e4 <main+0x2e0>)
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin|GPIO_PIN_11|GPIO_PIN_3;
 8004340:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004342:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = RST2_Pin;
 8004348:	f44f 7880 	mov.w	r8, #256	@ 0x100
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800434c:	f003 fdc6 	bl	8007edc <HAL_GPIO_Init>
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 8004350:	a90a      	add	r1, sp, #40	@ 0x28
 8004352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004356:	940d      	str	r4, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004358:	e9cd 660b 	strd	r6, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Pin = RST2_Pin;
 800435c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RST2_GPIO_Port, &GPIO_InitStruct);
 8004360:	f003 fdbc 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004364:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004366:	4861      	ldr	r0, [pc, #388]	@ (80044ec <main+0x2e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004368:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800436a:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004370:	f003 fdb4 	bl	8007edc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Main_SW_Pin;
 8004374:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 8004378:	485a      	ldr	r0, [pc, #360]	@ (80044e4 <main+0x2e0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437a:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 800437c:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pin = Main_SW_Pin;
 800437e:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004380:	e9cd 690b 	strd	r6, r9, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(Main_SW_GPIO_Port, &GPIO_InitStruct);
 8004384:	f003 fdaa 	bl	8007edc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004388:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800438a:	4f59      	ldr	r7, [pc, #356]	@ (80044f0 <main+0x2ec>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 800438c:	4333      	orrs	r3, r6
 800438e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8004390:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hadc1.Instance = ADC1;
 8004392:	4d58      	ldr	r5, [pc, #352]	@ (80044f4 <main+0x2f0>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004394:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8004396:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004398:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800439a:	2105      	movs	r1, #5
 800439c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800439e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80043a0:	f003 f994 	bl	80076cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80043a4:	200b      	movs	r0, #11
 80043a6:	f003 f9cd 	bl	8007744 <HAL_NVIC_EnableIRQ>
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80043aa:	230c      	movs	r3, #12
  ADC_ChannelConfTypeDef sConfig = {0};
 80043ac:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 80043b0:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 80043b4:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043b8:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043bc:	e9c5 440a 	strd	r4, r4, [r5, #40]	@ 0x28
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80043c0:	e9c5 4410 	strd	r4, r4, [r5, #64]	@ 0x40
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80043c4:	612c      	str	r4, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043c6:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80043ca:	636c      	str	r4, [r5, #52]	@ 0x34
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80043cc:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043ce:	2404      	movs	r4, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80043d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80043d4:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80043d6:	e9c5 7300 	strd	r7, r3, [r5]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80043da:	f8a5 8018 	strh.w	r8, [r5, #24]
  hadc1.Init.NbrOfConversion = 1;
 80043de:	61ee      	str	r6, [r5, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80043e0:	f885 6030 	strb.w	r6, [r5, #48]	@ 0x30
  hadc1.Init.OversamplingMode = ENABLE;
 80043e4:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80043e8:	64ae      	str	r6, [r5, #72]	@ 0x48
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043ea:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80043ec:	f002 fcb2 	bl	8006d54 <HAL_ADC_Init>
 80043f0:	b108      	cbz	r0, 80043f6 <main+0x1f2>
 80043f2:	b672      	cpsid	i
  while (1)
 80043f4:	e7fe      	b.n	80043f4 <main+0x1f0>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80043f6:	4603      	mov	r3, r0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80043f8:	4a3f      	ldr	r2, [pc, #252]	@ (80044f8 <main+0x2f4>)
  sConfig.Offset = 0;
 80043fa:	930f      	str	r3, [sp, #60]	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80043fc:	2306      	movs	r3, #6
 80043fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004402:	940e      	str	r4, [sp, #56]	@ 0x38
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004404:	237f      	movs	r3, #127	@ 0x7f
 8004406:	2407      	movs	r4, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004408:	a90a      	add	r1, sp, #40	@ 0x28
 800440a:	4628      	mov	r0, r5
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800440c:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004410:	f002 fdc8 	bl	8006fa4 <HAL_ADC_ConfigChannel>
 8004414:	b990      	cbnz	r0, 800443c <main+0x238>
  hi2c1.Instance = I2C1;
 8004416:	4c39      	ldr	r4, [pc, #228]	@ (80044fc <main+0x2f8>)
  hi2c1.Init.Timing = 0x00301347;
 8004418:	4b39      	ldr	r3, [pc, #228]	@ (8004500 <main+0x2fc>)
 800441a:	4d3a      	ldr	r5, [pc, #232]	@ (8004504 <main+0x300>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800441c:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800441e:	e9c4 0602 	strd	r0, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8004422:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004426:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800442a:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00301347;
 800442c:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004430:	f003 ff9e 	bl	8008370 <HAL_I2C_Init>
 8004434:	4601      	mov	r1, r0
 8004436:	b118      	cbz	r0, 8004440 <main+0x23c>
 8004438:	b672      	cpsid	i
  while (1)
 800443a:	e7fe      	b.n	800443a <main+0x236>
 800443c:	b672      	cpsid	i
 800443e:	e7fe      	b.n	800443e <main+0x23a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004440:	4620      	mov	r0, r4
 8004442:	f004 fc79 	bl	8008d38 <HAL_I2CEx_ConfigAnalogFilter>
 8004446:	4601      	mov	r1, r0
 8004448:	b108      	cbz	r0, 800444e <main+0x24a>
 800444a:	b672      	cpsid	i
  while (1)
 800444c:	e7fe      	b.n	800444c <main+0x248>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800444e:	4620      	mov	r0, r4
 8004450:	f004 fc9c 	bl	8008d8c <HAL_I2CEx_ConfigDigitalFilter>
 8004454:	b108      	cbz	r0, 800445a <main+0x256>
 8004456:	b672      	cpsid	i
  while (1)
 8004458:	e7fe      	b.n	8004458 <main+0x254>
  hi2c2.Instance = I2C2;
 800445a:	4c2b      	ldr	r4, [pc, #172]	@ (8004508 <main+0x304>)
 800445c:	4b2b      	ldr	r3, [pc, #172]	@ (800450c <main+0x308>)
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800445e:	61e0      	str	r0, [r4, #28]
  hi2c2.Init.OwnAddress1 = 0;
 8004460:	e9c4 5001 	strd	r5, r0, [r4, #4]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004464:	e9c4 6003 	strd	r6, r0, [r4, #12]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004468:	e9c4 0005 	strd	r0, r0, [r4, #20]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800446c:	f44f 3700 	mov.w	r7, #131072	@ 0x20000
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004470:	4620      	mov	r0, r4
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004472:	6227      	str	r7, [r4, #32]
  hi2c2.Instance = I2C2;
 8004474:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004476:	f003 ff7b 	bl	8008370 <HAL_I2C_Init>
 800447a:	4601      	mov	r1, r0
 800447c:	b108      	cbz	r0, 8004482 <main+0x27e>
 800447e:	b672      	cpsid	i
  while (1)
 8004480:	e7fe      	b.n	8004480 <main+0x27c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004482:	4620      	mov	r0, r4
 8004484:	f004 fc58 	bl	8008d38 <HAL_I2CEx_ConfigAnalogFilter>
 8004488:	4601      	mov	r1, r0
 800448a:	b108      	cbz	r0, 8004490 <main+0x28c>
 800448c:	b672      	cpsid	i
  while (1)
 800448e:	e7fe      	b.n	800448e <main+0x28a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004490:	4620      	mov	r0, r4
 8004492:	f004 fc7b 	bl	8008d8c <HAL_I2CEx_ConfigDigitalFilter>
 8004496:	4603      	mov	r3, r0
 8004498:	b108      	cbz	r0, 800449e <main+0x29a>
 800449a:	b672      	cpsid	i
  while (1)
 800449c:	e7fe      	b.n	800449c <main+0x298>
  hi2c3.Instance = I2C3;
 800449e:	4c1c      	ldr	r4, [pc, #112]	@ (8004510 <main+0x30c>)
  hi2c3.Init.OwnAddress1 = 0;
 80044a0:	e9c4 5001 	strd	r5, r0, [r4, #4]
  hi2c3.Init.OwnAddress2 = 0;
 80044a4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044a8:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80044ac:	4620      	mov	r0, r4
  hi2c3.Instance = I2C3;
 80044ae:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <main+0x310>)
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044b0:	60e6      	str	r6, [r4, #12]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80044b2:	6227      	str	r7, [r4, #32]
  hi2c3.Instance = I2C3;
 80044b4:	6023      	str	r3, [r4, #0]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80044b6:	f003 ff5b 	bl	8008370 <HAL_I2C_Init>
 80044ba:	4601      	mov	r1, r0
 80044bc:	b108      	cbz	r0, 80044c2 <main+0x2be>
 80044be:	b672      	cpsid	i
  while (1)
 80044c0:	e7fe      	b.n	80044c0 <main+0x2bc>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80044c2:	4620      	mov	r0, r4
 80044c4:	f004 fc38 	bl	8008d38 <HAL_I2CEx_ConfigAnalogFilter>
 80044c8:	b108      	cbz	r0, 80044ce <main+0x2ca>
 80044ca:	b672      	cpsid	i
  while (1)
 80044cc:	e7fe      	b.n	80044cc <main+0x2c8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80044ce:	4810      	ldr	r0, [pc, #64]	@ (8004510 <main+0x30c>)
 80044d0:	2100      	movs	r1, #0
 80044d2:	f004 fc5b 	bl	8008d8c <HAL_I2CEx_ConfigDigitalFilter>
 80044d6:	4603      	mov	r3, r0
 80044d8:	b1f0      	cbz	r0, 8004518 <main+0x314>
 80044da:	b672      	cpsid	i
  while (1)
 80044dc:	e7fe      	b.n	80044dc <main+0x2d8>
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	48000400 	.word	0x48000400
 80044e8:	48000800 	.word	0x48000800
 80044ec:	48001c00 	.word	0x48001c00
 80044f0:	50040000 	.word	0x50040000
 80044f4:	20000558 	.word	0x20000558
 80044f8:	c7520000 	.word	0xc7520000
 80044fc:	20000498 	.word	0x20000498
 8004500:	40005400 	.word	0x40005400
 8004504:	00301347 	.word	0x00301347
 8004508:	20000444 	.word	0x20000444
 800450c:	40005800 	.word	0x40005800
 8004510:	200003f0 	.word	0x200003f0
 8004514:	40005c00 	.word	0x40005c00
  huart1.Instance = USART1;
 8004518:	4833      	ldr	r0, [pc, #204]	@ (80045e8 <main+0x3e4>)
  huart1.Init.BaudRate = 115200;
 800451a:	4a34      	ldr	r2, [pc, #208]	@ (80045ec <main+0x3e8>)
  huart1.Init.Parity = UART_PARITY_NONE;
 800451c:	6103      	str	r3, [r0, #16]
  huart1.Init.BaudRate = 115200;
 800451e:	f44f 35e1 	mov.w	r5, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004522:	240c      	movs	r4, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004524:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004528:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800452c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart1.Init.BaudRate = 115200;
 8004530:	e9c0 2500 	strd	r2, r5, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004534:	6144      	str	r4, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004536:	f006 f973 	bl	800a820 <HAL_UART_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	b108      	cbz	r0, 8004542 <main+0x33e>
 800453e:	b672      	cpsid	i
  while (1)
 8004540:	e7fe      	b.n	8004540 <main+0x33c>
  huart2.Instance = USART2;
 8004542:	482b      	ldr	r0, [pc, #172]	@ (80045f0 <main+0x3ec>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004544:	e9c0 5301 	strd	r5, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004548:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800454c:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004550:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004554:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.Instance = USART2;
 8004556:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <main+0x3f0>)
 8004558:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800455a:	f006 f961 	bl	800a820 <HAL_UART_Init>
 800455e:	4603      	mov	r3, r0
 8004560:	b108      	cbz	r0, 8004566 <main+0x362>
 8004562:	b672      	cpsid	i
  while (1)
 8004564:	e7fe      	b.n	8004564 <main+0x360>
  hcrc.Instance = CRC;
 8004566:	4824      	ldr	r0, [pc, #144]	@ (80045f8 <main+0x3f4>)
 8004568:	4924      	ldr	r1, [pc, #144]	@ (80045fc <main+0x3f8>)
 800456a:	6001      	str	r1, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800456c:	f240 1201 	movw	r2, #257	@ 0x101
 8004570:	8082      	strh	r2, [r0, #4]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8004572:	2131      	movs	r1, #49	@ 0x31
 8004574:	2210      	movs	r2, #16
 8004576:	e9c0 1202 	strd	r1, r2, [r0, #8]
  hcrc.Init.InitValue = 0xFF;
 800457a:	21ff      	movs	r1, #255	@ 0xff
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800457c:	2201      	movs	r2, #1
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800457e:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004582:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004584:	6202      	str	r2, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004586:	f003 f94f 	bl	8007828 <HAL_CRC_Init>
 800458a:	4606      	mov	r6, r0
 800458c:	b108      	cbz	r0, 8004592 <main+0x38e>
 800458e:	b672      	cpsid	i
  while (1)
 8004590:	e7fe      	b.n	8004590 <main+0x38c>
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004592:	4602      	mov	r2, r0
 8004594:	2105      	movs	r1, #5
 8004596:	2025      	movs	r0, #37	@ 0x25
 8004598:	f003 f898 	bl	80076cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800459c:	2025      	movs	r0, #37	@ 0x25
 800459e:	f003 f8d1 	bl	8007744 <HAL_NVIC_EnableIRQ>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 80045a2:	4c17      	ldr	r4, [pc, #92]	@ (8004600 <main+0x3fc>)
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80045a4:	4632      	mov	r2, r6
 80045a6:	2105      	movs	r1, #5
 80045a8:	2026      	movs	r0, #38	@ 0x26
 80045aa:	f003 f88f 	bl	80076cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045ae:	2026      	movs	r0, #38	@ 0x26
 80045b0:	f003 f8c8 	bl	8007744 <HAL_NVIC_EnableIRQ>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
 80045b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b6:	ad05      	add	r5, sp, #20
 80045b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045ba:	f854 3b04 	ldr.w	r3, [r4], #4
 80045be:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80045c0:	4631      	mov	r1, r6
 80045c2:	a805      	add	r0, sp, #20
 80045c4:	f006 f9fa 	bl	800a9bc <osThreadCreate>
 80045c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004604 <main+0x400>)
 80045ca:	6018      	str	r0, [r3, #0]
  osThreadDef(THPMainTask, THP_MainTask, osPriorityNormal, 0, 512);
 80045cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ce:	ad0a      	add	r5, sp, #40	@ 0x28
 80045d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	602b      	str	r3, [r5, #0]
  THPMainTaskHandle = osThreadCreate(osThread(THPMainTask), NULL);
 80045d6:	4631      	mov	r1, r6
 80045d8:	a80a      	add	r0, sp, #40	@ 0x28
 80045da:	f006 f9ef 	bl	800a9bc <osThreadCreate>
 80045de:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <main+0x404>)
 80045e0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80045e2:	f006 f9e5 	bl	800a9b0 <osKernelStart>
  while (1)
 80045e6:	e7fe      	b.n	80045e6 <main+0x3e2>
 80045e8:	2000036c 	.word	0x2000036c
 80045ec:	40013800 	.word	0x40013800
 80045f0:	200002e8 	.word	0x200002e8
 80045f4:	40004400 	.word	0x40004400
 80045f8:	200004ec 	.word	0x200004ec
 80045fc:	40023000 	.word	0x40023000
 8004600:	080103f8 	.word	0x080103f8
 8004604:	200002e4 	.word	0x200002e4
 8004608:	200002e0 	.word	0x200002e0

0800460c <HAL_TIM_PeriodElapsedCallback>:
{
 800460c:	b538      	push	{r3, r4, r5, lr}
  if (htim->Instance == TIM7) {
 800460e:	4b07      	ldr	r3, [pc, #28]	@ (800462c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004610:	6805      	ldr	r5, [r0, #0]
 8004612:	429d      	cmp	r5, r3
 8004614:	d000      	beq.n	8004618 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	4604      	mov	r4, r0
    HAL_IncTick();
 800461a:	f002 fb77 	bl	8006d0c <HAL_IncTick>
  if (htim->Instance == TIM7) {
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	42ab      	cmp	r3, r5
 8004622:	d1f8      	bne.n	8004616 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8004624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  HAL_SYSTICK_Callback();
 8004628:	f000 bf5e 	b.w	80054e8 <HAL_SYSTICK_Callback>
 800462c:	40001400 	.word	0x40001400

08004630 <Error_Handler>:
 8004630:	b672      	cpsid	i
  while (1)
 8004632:	e7fe      	b.n	8004632 <Error_Handler+0x2>

08004634 <hsensor_humidity_conversion_and_read_adc>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error
 */
enum ms8607_status hsensor_humidity_conversion_and_read_adc( uint16_t *adc)
{
 8004634:	b5f0      	push	{r4, r5, r6, r7, lr}
		.address     = HSENSOR_ADDR,
		.data_length = 3,
		.data        = buffer,
	};
	
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 8004636:	4a35      	ldr	r2, [pc, #212]	@ (800470c <hsensor_humidity_conversion_and_read_adc+0xd8>)
    struct i2c_master_packet read_transfer = {
 8004638:	4c35      	ldr	r4, [pc, #212]	@ (8004710 <hsensor_humidity_conversion_and_read_adc+0xdc>)
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 800463a:	7812      	ldrb	r2, [r2, #0]
{
 800463c:	b087      	sub	sp, #28
	buffer[0] = 0;
 800463e:	2300      	movs	r3, #0
    struct i2c_master_packet read_transfer = {
 8004640:	a901      	add	r1, sp, #4
	buffer[0] = 0;
 8004642:	f8ad 3004 	strh.w	r3, [sp, #4]
	buffer[2] = 0;
 8004646:	f88d 3006 	strb.w	r3, [sp, #6]
    struct i2c_master_packet read_transfer = {
 800464a:	e9cd 4102 	strd	r4, r1, [sp, #8]
	struct i2c_master_packet transfer = {
 800464e:	4b31      	ldr	r3, [pc, #196]	@ (8004714 <hsensor_humidity_conversion_and_read_adc+0xe0>)
{
 8004650:	4605      	mov	r5, r0
	if( hsensor_i2c_master_mode == ms8607_i2c_hold) {
 8004652:	b96a      	cbnz	r2, 8004670 <hsensor_humidity_conversion_and_read_adc+0x3c>
	data[0] = cmd;
 8004654:	22e5      	movs	r2, #229	@ 0xe5
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 8004656:	a804      	add	r0, sp, #16
	data[0] = cmd;
 8004658:	f88d 2000 	strb.w	r2, [sp]
	struct i2c_master_packet transfer = {
 800465c:	9304      	str	r3, [sp, #16]
 800465e:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait_no_stop(&transfer);
 8004662:	f000 faf5 	bl	8004c50 <i2c_master_write_packet_wait_no_stop>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004666:	2801      	cmp	r0, #1
 8004668:	d04a      	beq.n	8004700 <hsensor_humidity_conversion_and_read_adc+0xcc>
	if( i2c_status != STATUS_OK)
 800466a:	b1b8      	cbz	r0, 800469c <hsensor_humidity_conversion_and_read_adc+0x68>
		return ms8607_status_i2c_transfer_error;
 800466c:	2002      	movs	r0, #2
 800466e:	e03d      	b.n	80046ec <hsensor_humidity_conversion_and_read_adc+0xb8>
	data[0] = cmd;
 8004670:	22f5      	movs	r2, #245	@ 0xf5
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8004672:	a804      	add	r0, sp, #16
	struct i2c_master_packet transfer = {
 8004674:	9304      	str	r3, [sp, #16]
	data[0] = cmd;
 8004676:	f88d 2000 	strb.w	r2, [sp]
	struct i2c_master_packet transfer = {
 800467a:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800467e:	f000 fad9 	bl	8004c34 <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004682:	2801      	cmp	r0, #1
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8004684:	4603      	mov	r3, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004686:	d033      	beq.n	80046f0 <hsensor_humidity_conversion_and_read_adc+0xbc>
		status = hsensor_write_command_no_stop(HSENSOR_READ_HUMIDITY_W_HOLD_COMMAND);
	}
	else {
		status = hsensor_write_command(HSENSOR_READ_HUMIDITY_WO_HOLD_COMMAND);
		// delay depending on resolution
		osDelay(hsensor_conversion_time/1000);
 8004688:	4923      	ldr	r1, [pc, #140]	@ (8004718 <hsensor_humidity_conversion_and_read_adc+0xe4>)
 800468a:	4a24      	ldr	r2, [pc, #144]	@ (800471c <hsensor_humidity_conversion_and_read_adc+0xe8>)
 800468c:	6808      	ldr	r0, [r1, #0]
 800468e:	fba2 2000 	umull	r2, r0, r2, r0
 8004692:	0980      	lsrs	r0, r0, #6
	if( i2c_status != STATUS_OK)
 8004694:	2b00      	cmp	r3, #0
 8004696:	d136      	bne.n	8004706 <hsensor_humidity_conversion_and_read_adc+0xd2>
		osDelay(hsensor_conversion_time/1000);
 8004698:	f006 f9ac 	bl	800a9f4 <osDelay>
	}
	if( status != ms8607_status_ok)
		return status;
		
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 800469c:	a802      	add	r0, sp, #8
 800469e:	f000 fabb 	bl	8004c18 <i2c_master_read_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 80046a2:	2801      	cmp	r0, #1
 80046a4:	d02c      	beq.n	8004700 <hsensor_humidity_conversion_and_read_adc+0xcc>
		return ms8607_status_no_i2c_acknowledge;
	if( i2c_status != STATUS_OK)
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d1e0      	bne.n	800466c <hsensor_humidity_conversion_and_read_adc+0x38>
		return ms8607_status_i2c_transfer_error;

	_adc = (buffer[0] << 8) | buffer[1];
 80046aa:	f8bd 6004 	ldrh.w	r6, [sp, #4]
	crc = buffer[2];
 80046ae:	f89d 7006 	ldrb.w	r7, [sp, #6]
	uint32_t mask    = 0xFF8000;
 80046b2:	4c1b      	ldr	r4, [pc, #108]	@ (8004720 <hsensor_humidity_conversion_and_read_adc+0xec>)
	uint32_t polynom = 0x988000; // x^8 + x^5 + x^4 + 1
 80046b4:	491b      	ldr	r1, [pc, #108]	@ (8004724 <hsensor_humidity_conversion_and_read_adc+0xf0>)
 80046b6:	ba76      	rev16	r6, r6
 80046b8:	fa1f fc86 	uxth.w	ip, r6
	uint32_t result  = (uint32_t)value<<8; // Pad with zeros as specified in spec
 80046bc:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 80046c0:	2210      	movs	r2, #16
	uint32_t msb     = 0x800000;
 80046c2:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
		if( result & msb )
 80046c6:	ea13 0f0c 	tst.w	r3, ip
			result = ((result ^ polynom) & mask) | ( result & ~mask);
 80046ca:	bf1c      	itt	ne
 80046cc:	ea04 0e01 	andne.w	lr, r4, r1
 80046d0:	ea8c 0c0e 	eorne.w	ip, ip, lr
	while( msb != 0x80 ) {
 80046d4:	3a01      	subs	r2, #1
		msb >>= 1;
 80046d6:	ea4f 0353 	mov.w	r3, r3, lsr #1
		mask >>= 1;
 80046da:	ea4f 0454 	mov.w	r4, r4, lsr #1
		polynom >>=1;
 80046de:	ea4f 0151 	mov.w	r1, r1, lsr #1
	while( msb != 0x80 ) {
 80046e2:	d1f0      	bne.n	80046c6 <hsensor_humidity_conversion_and_read_adc+0x92>
	if( result == crc )
 80046e4:	4567      	cmp	r7, ip
	// compute CRC
	status = hsensor_crc_check(_adc,crc);
	if( status != ms8607_status_ok)
		return status;
	
	*adc = _adc;
 80046e6:	bf0c      	ite	eq
 80046e8:	802e      	strheq	r6, [r5, #0]
		return ms8607_status_crc_error;
 80046ea:	2003      	movne	r0, #3

	return status;
}
 80046ec:	b007      	add	sp, #28
 80046ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(hsensor_conversion_time/1000);
 80046f0:	4a09      	ldr	r2, [pc, #36]	@ (8004718 <hsensor_humidity_conversion_and_read_adc+0xe4>)
 80046f2:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <hsensor_humidity_conversion_and_read_adc+0xe8>)
 80046f4:	6810      	ldr	r0, [r2, #0]
 80046f6:	fba3 3000 	umull	r3, r0, r3, r0
 80046fa:	0980      	lsrs	r0, r0, #6
 80046fc:	f006 f97a 	bl	800a9f4 <osDelay>
		return ms8607_status_no_i2c_acknowledge;
 8004700:	2001      	movs	r0, #1
}
 8004702:	b007      	add	sp, #28
 8004704:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(hsensor_conversion_time/1000);
 8004706:	f006 f975 	bl	800a9f4 <osDelay>
	if( status != ms8607_status_ok)
 800470a:	e7af      	b.n	800466c <hsensor_humidity_conversion_and_read_adc+0x38>
 800470c:	200005ce 	.word	0x200005ce
 8004710:	00030080 	.word	0x00030080
 8004714:	00010080 	.word	0x00010080
 8004718:	20000000 	.word	0x20000000
 800471c:	10624dd3 	.word	0x10624dd3
 8004720:	00ff8000 	.word	0x00ff8000
 8004724:	00988000 	.word	0x00988000

08004728 <psensor_read_eeprom>:
 *       - ms8607_status_i2c_transfer_error : Problem with i2c transfer
 *       - ms8607_status_no_i2c_acknowledge : I2C did not acknowledge
 *       - ms8607_status_crc_error : CRC check error on the coefficients
 */
enum ms8607_status psensor_read_eeprom(void)
{
 8004728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800472c:	b087      	sub	sp, #28
 800472e:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8004810 <psensor_read_eeprom+0xe8>
	struct i2c_master_packet read_transfer = {
 8004732:	4e33      	ldr	r6, [pc, #204]	@ (8004800 <psensor_read_eeprom+0xd8>)
	struct i2c_master_packet transfer = {
 8004734:	4d33      	ldr	r5, [pc, #204]	@ (8004804 <psensor_read_eeprom+0xdc>)
{
 8004736:	f04f 09a0 	mov.w	r9, #160	@ 0xa0
 800473a:	af01      	add	r7, sp, #4
	buffer[0] = 0;
 800473c:	2400      	movs	r4, #0
 800473e:	e013      	b.n	8004768 <psensor_read_eeprom+0x40>
	if( i2c_status != STATUS_OK)
 8004740:	bb33      	cbnz	r3, 8004790 <psensor_read_eeprom+0x68>
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8004742:	f000 fa69 	bl	8004c18 <i2c_master_read_packet_wait>
	enum ms8607_status status;
	uint8_t i;
	
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8004746:	f109 0902 	add.w	r9, r9, #2
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800474a:	2801      	cmp	r0, #1
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 800474c:	4601      	mov	r1, r0
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 800474e:	fa5f f989 	uxtb.w	r9, r9
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004752:	d019      	beq.n	8004788 <psensor_read_eeprom+0x60>
	if( i2c_status != STATUS_OK)
 8004754:	b9e0      	cbnz	r0, 8004790 <psensor_read_eeprom+0x68>
 8004756:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	*coeff = (buffer[0] << 8) | buffer[1];
 800475a:	ba5a      	rev16	r2, r3
 800475c:	f828 2f02 	strh.w	r2, [r8, #2]!
    if (*coeff == 0) {
 8004760:	b1b3      	cbz	r3, 8004790 <psensor_read_eeprom+0x68>
	for( i=0 ; i< COEFFICIENT_NUMBERS ; i++)
 8004762:	f1b9 0fae 	cmp.w	r9, #174	@ 0xae
 8004766:	d017      	beq.n	8004798 <psensor_read_eeprom+0x70>
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8004768:	a804      	add	r0, sp, #16
	struct i2c_master_packet read_transfer = {
 800476a:	e9cd 6702 	strd	r6, r7, [sp, #8]
	data[0] = cmd;
 800476e:	f88d 9000 	strb.w	r9, [sp]
	buffer[0] = 0;
 8004772:	f8ad 4004 	strh.w	r4, [sp, #4]
	struct i2c_master_packet transfer = {
 8004776:	9504      	str	r5, [sp, #16]
 8004778:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800477c:	f000 fa5a 	bl	8004c34 <i2c_master_write_packet_wait>
 8004780:	4603      	mov	r3, r0
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004782:	2b01      	cmp	r3, #1
	i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8004784:	a802      	add	r0, sp, #8
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004786:	d1db      	bne.n	8004740 <psensor_read_eeprom+0x18>
 8004788:	2001      	movs	r0, #1
		return ms8607_status_crc_error;
	
	psensor_coeff_read = true;
	
  	return ms8607_status_ok;
}
 800478a:	b007      	add	sp, #28
 800478c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ms8607_status_i2c_transfer_error;
 8004790:	2002      	movs	r0, #2
}
 8004792:	b007      	add	sp, #28
 8004794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 8004798:	4c1b      	ldr	r4, [pc, #108]	@ (8004808 <psensor_read_eeprom+0xe0>)
 800479a:	8825      	ldrh	r5, [r4, #0]
	uint8_t cnt, n_bit;
	uint16_t n_rem, crc_read;
	
	n_rem = 0x00;
	crc_read = n_prom[0];
	n_prom[COEFFICIENT_NUMBERS] = 0;
 800479c:	81e0      	strh	r0, [r4, #14]
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 800479e:	f3c5 030b 	ubfx	r3, r5, #0, #12
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 80047a2:	0b2e      	lsrs	r6, r5, #12
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
 80047a4:	8023      	strh	r3, [r4, #0]
	n_rem = 0x00;
 80047a6:	4602      	mov	r2, r0

	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {

		// Get next byte
		if (cnt%2 == 1)
 80047a8:	07c8      	lsls	r0, r1, #31
 80047aa:	bf46      	itte	mi
 80047ac:	b2db      	uxtbmi	r3, r3
 80047ae:	405a      	eormi	r2, r3
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
		else
			n_rem ^=  n_prom[cnt>>1]>>8 ;
 80047b0:	ea82 2213 	eorpl.w	r2, r2, r3, lsr #8
	n_rem = 0x00;
 80047b4:	2008      	movs	r0, #8

		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {

			if( n_rem & 0x8000 )
				n_rem = (n_rem << 1) ^ 0x3000;
 80047b6:	0053      	lsls	r3, r2, #1
			if( n_rem & 0x8000 )
 80047b8:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
				n_rem = (n_rem << 1) ^ 0x3000;
 80047bc:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
			else
				n_rem <<= 1;
 80047c0:	bf08      	it	eq
 80047c2:	0052      	lsleq	r2, r2, #1
				n_rem = (n_rem << 1) ^ 0x3000;
 80047c4:	b21b      	sxth	r3, r3
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 80047c6:	f100 30ff 	add.w	r0, r0, #4294967295
				n_rem = (n_rem << 1) ^ 0x3000;
 80047ca:	bf14      	ite	ne
 80047cc:	b29a      	uxthne	r2, r3
				n_rem <<= 1;
 80047ce:	b292      	uxtheq	r2, r2
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
 80047d0:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 80047d4:	d1ef      	bne.n	80047b6 <psensor_read_eeprom+0x8e>
	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
 80047d6:	3101      	adds	r1, #1
 80047d8:	b2c9      	uxtb	r1, r1
 80047da:	2910      	cmp	r1, #16
 80047dc:	d003      	beq.n	80047e6 <psensor_read_eeprom+0xbe>
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
 80047de:	084b      	lsrs	r3, r1, #1
 80047e0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80047e4:	e7e0      	b.n	80047a8 <psensor_read_eeprom+0x80>
	if( !psensor_crc_check( eeprom_coeff, (eeprom_coeff[CRC_INDEX] & 0xF000)>>12 ) )
 80047e6:	ebb6 3f12 	cmp.w	r6, r2, lsr #12
	psensor_coeff_read = true;
 80047ea:	bf08      	it	eq
 80047ec:	4b07      	ldreq	r3, [pc, #28]	@ (800480c <psensor_read_eeprom+0xe4>)
		}
	}
	n_rem >>= 12;
	n_prom[0] = crc_read;
 80047ee:	8025      	strh	r5, [r4, #0]
	psensor_coeff_read = true;
 80047f0:	bf0a      	itet	eq
 80047f2:	2201      	moveq	r2, #1
		return ms8607_status_crc_error;
 80047f4:	2003      	movne	r0, #3
	psensor_coeff_read = true;
 80047f6:	701a      	strbeq	r2, [r3, #0]
}
 80047f8:	b007      	add	sp, #28
 80047fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047fe:	bf00      	nop
 8004800:	000200ec 	.word	0x000200ec
 8004804:	000100ec 	.word	0x000100ec
 8004808:	200005bc 	.word	0x200005bc
 800480c:	200005cc 	.word	0x200005cc
 8004810:	200005ba 	.word	0x200005ba

08004814 <psensor_conversion_and_read_adc>:
{
 8004814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004816:	b087      	sub	sp, #28
 8004818:	4604      	mov	r4, r0
    struct i2c_master_packet read_transfer = {
 800481a:	a801      	add	r0, sp, #4
	buffer[0] = 0;
 800481c:	2300      	movs	r3, #0
    struct i2c_master_packet read_transfer = {
 800481e:	4a27      	ldr	r2, [pc, #156]	@ (80048bc <psensor_conversion_and_read_adc+0xa8>)
 8004820:	9003      	str	r0, [sp, #12]
	struct i2c_master_packet transfer = {
 8004822:	4f27      	ldr	r7, [pc, #156]	@ (80048c0 <psensor_conversion_and_read_adc+0xac>)
	data[0] = cmd;
 8004824:	f88d 4000 	strb.w	r4, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8004828:	a804      	add	r0, sp, #16
{
 800482a:	460e      	mov	r6, r1
	buffer[0] = 0;
 800482c:	f8ad 3004 	strh.w	r3, [sp, #4]
	buffer[2] = 0;
 8004830:	f88d 3006 	strb.w	r3, [sp, #6]
    struct i2c_master_packet read_transfer = {
 8004834:	9202      	str	r2, [sp, #8]
	struct i2c_master_packet transfer = {
 8004836:	9704      	str	r7, [sp, #16]
 8004838:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800483c:	f000 f9fa 	bl	8004c34 <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004840:	2801      	cmp	r0, #1
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8004842:	f3c4 0442 	ubfx	r4, r4, #1, #3
	if( i2c_status == STATUS_ERR_OVERFLOW )
 8004846:	d028      	beq.n	800489a <psensor_conversion_and_read_adc+0x86>
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 8004848:	4b1e      	ldr	r3, [pc, #120]	@ (80048c4 <psensor_conversion_and_read_adc+0xb0>)
 800484a:	4605      	mov	r5, r0
 800484c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004850:	4b1d      	ldr	r3, [pc, #116]	@ (80048c8 <psensor_conversion_and_read_adc+0xb4>)
 8004852:	fba3 3000 	umull	r3, r0, r3, r0
 8004856:	0980      	lsrs	r0, r0, #6
	if( i2c_status != STATUS_OK)
 8004858:	bb5d      	cbnz	r5, 80048b2 <psensor_conversion_and_read_adc+0x9e>
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 800485a:	f006 f8cb 	bl	800a9f4 <osDelay>
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800485e:	a804      	add	r0, sp, #16
	data[0] = cmd;
 8004860:	f88d 5000 	strb.w	r5, [sp]
	struct i2c_master_packet transfer = {
 8004864:	9704      	str	r7, [sp, #16]
 8004866:	f8cd d014 	str.w	sp, [sp, #20]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800486a:	f000 f9e3 	bl	8004c34 <i2c_master_write_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800486e:	2801      	cmp	r0, #1
 8004870:	d01c      	beq.n	80048ac <psensor_conversion_and_read_adc+0x98>
	if( i2c_status != STATUS_OK)
 8004872:	bb00      	cbnz	r0, 80048b6 <psensor_conversion_and_read_adc+0xa2>
    i2c_status = i2c_master_read_packet_wait(&read_transfer);
 8004874:	a802      	add	r0, sp, #8
 8004876:	f000 f9cf 	bl	8004c18 <i2c_master_read_packet_wait>
	if( i2c_status == STATUS_ERR_OVERFLOW )
 800487a:	2801      	cmp	r0, #1
 800487c:	d016      	beq.n	80048ac <psensor_conversion_and_read_adc+0x98>
	if( i2c_status != STATUS_OK)
 800487e:	b9d0      	cbnz	r0, 80048b6 <psensor_conversion_and_read_adc+0xa2>
	*adc = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8004880:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004884:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004888:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004892:	4313      	orrs	r3, r2
 8004894:	6033      	str	r3, [r6, #0]
}
 8004896:	b007      	add	sp, #28
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 800489a:	4a0a      	ldr	r2, [pc, #40]	@ (80048c4 <psensor_conversion_and_read_adc+0xb0>)
 800489c:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <psensor_conversion_and_read_adc+0xb4>)
 800489e:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80048a2:	fba3 3000 	umull	r3, r0, r3, r0
 80048a6:	0980      	lsrs	r0, r0, #6
 80048a8:	f006 f8a4 	bl	800a9f4 <osDelay>
		return ms8607_status_no_i2c_acknowledge;
 80048ac:	2001      	movs	r0, #1
}
 80048ae:	b007      	add	sp, #28
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	osDelay( psensor_conversion_time[ (cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
 80048b2:	f006 f89f 	bl	800a9f4 <osDelay>
		return ms8607_status_i2c_transfer_error;
 80048b6:	2002      	movs	r0, #2
}
 80048b8:	b007      	add	sp, #28
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048bc:	000300ec 	.word	0x000300ec
 80048c0:	000100ec 	.word	0x000100ec
 80048c4:	080117b0 	.word	0x080117b0
 80048c8:	10624dd3 	.word	0x10624dd3

080048cc <ms8607_init>:
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80048cc:	4903      	ldr	r1, [pc, #12]	@ (80048dc <ms8607_init+0x10>)
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80048ce:	4b04      	ldr	r3, [pc, #16]	@ (80048e0 <ms8607_init+0x14>)
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80048d0:	2000      	movs	r0, #0
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80048d2:	2205      	movs	r2, #5
	hsensor_i2c_master_mode = ms8607_i2c_hold;
 80048d4:	7008      	strb	r0, [r1, #0]
	psensor_resolution_osr = ms8607_pressure_resolution_osr_8192;
 80048d6:	701a      	strb	r2, [r3, #0]
	i2c_master_init();
 80048d8:	f000 b99c 	b.w	8004c14 <i2c_master_init>
 80048dc:	200005ce 	.word	0x200005ce
 80048e0:	200005cd 	.word	0x200005cd

080048e4 <MS8607_osr>:
	psensor_resolution_osr = osr;
 80048e4:	4b01      	ldr	r3, [pc, #4]	@ (80048ec <MS8607_osr+0x8>)
 80048e6:	7018      	strb	r0, [r3, #0]
	i2c_master_init();
 80048e8:	f000 b994 	b.w	8004c14 <i2c_master_init>
 80048ec:	200005cd 	.word	0x200005cd

080048f0 <ms8607_is_connected>:
{
 80048f0:	b500      	push	{lr}
 80048f2:	b083      	sub	sp, #12
	struct i2c_master_packet transfer = {
 80048f4:	2280      	movs	r2, #128	@ 0x80
 80048f6:	2300      	movs	r3, #0
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80048f8:	4668      	mov	r0, sp
	struct i2c_master_packet transfer = {
 80048fa:	e9cd 2300 	strd	r2, r3, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 80048fe:	f000 f999 	bl	8004c34 <i2c_master_write_packet_wait>
	if( i2c_status != STATUS_OK)
 8004902:	b958      	cbnz	r0, 800491c <ms8607_is_connected+0x2c>
	struct i2c_master_packet transfer = {
 8004904:	4603      	mov	r3, r0
 8004906:	22ec      	movs	r2, #236	@ 0xec
	i2c_status = i2c_master_write_packet_wait(&transfer);
 8004908:	4668      	mov	r0, sp
	struct i2c_master_packet transfer = {
 800490a:	e9cd 2300 	strd	r2, r3, [sp]
	i2c_status = i2c_master_write_packet_wait(&transfer);
 800490e:	f000 f991 	bl	8004c34 <i2c_master_write_packet_wait>
	if( i2c_status != STATUS_OK)
 8004912:	b918      	cbnz	r0, 800491c <ms8607_is_connected+0x2c>
 8004914:	2001      	movs	r0, #1
}
 8004916:	b003      	add	sp, #12
 8004918:	f85d fb04 	ldr.w	pc, [sp], #4
 800491c:	2000      	movs	r0, #0
 800491e:	b003      	add	sp, #12
 8004920:	f85d fb04 	ldr.w	pc, [sp], #4

08004924 <ms8607_read_humidity>:
{
 8004924:	b510      	push	{r4, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	4604      	mov	r4, r0
	status = hsensor_humidity_conversion_and_read_adc( &adc);
 800492a:	f10d 0006 	add.w	r0, sp, #6
 800492e:	f7ff fe81 	bl	8004634 <hsensor_humidity_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8004932:	b988      	cbnz	r0, 8004958 <ms8607_read_humidity+0x34>
	*humidity = (float)adc * HUMIDITY_COEFF_MUL / (1UL<<16) + HUMIDITY_COEFF_ADD;
 8004934:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004938:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800495c <ms8607_read_humidity+0x38>
 800493c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8004960 <ms8607_read_humidity+0x3c>
 8004940:	ee07 3a90 	vmov	s15, r3
 8004944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800494c:	eeb9 7a08 	vmov.f32	s14, #152	@ 0xc0c00000 -6.0
 8004950:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004954:	ed84 7a00 	vstr	s14, [r4]
	}
 8004958:	b002      	add	sp, #8
 800495a:	bd10      	pop	{r4, pc}
 800495c:	42fa0000 	.word	0x42fa0000
 8004960:	37800000 	.word	0x37800000

08004964 <psensor_read_temperature>:
{
 8004964:	b510      	push	{r4, lr}
	if( psensor_coeff_read == false )
 8004966:	4b28      	ldr	r3, [pc, #160]	@ (8004a08 <psensor_read_temperature+0xa4>)
 8004968:	781b      	ldrb	r3, [r3, #0]
{
 800496a:	b082      	sub	sp, #8
 800496c:	4604      	mov	r4, r0
	if( psensor_coeff_read == false )
 800496e:	b913      	cbnz	r3, 8004976 <psensor_read_temperature+0x12>
		status = psensor_read_eeprom();
 8004970:	f7ff feda 	bl	8004728 <psensor_read_eeprom>
	if( status != ms8607_status_ok)
 8004974:	bba8      	cbnz	r0, 80049e2 <psensor_read_temperature+0x7e>
	cmd = psensor_resolution_osr*2;
 8004976:	4b25      	ldr	r3, [pc, #148]	@ (8004a0c <psensor_read_temperature+0xa8>)
 8004978:	7818      	ldrb	r0, [r3, #0]
 800497a:	0040      	lsls	r0, r0, #1
 800497c:	b2c0      	uxtb	r0, r0
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 800497e:	a901      	add	r1, sp, #4
 8004980:	f040 0050 	orr.w	r0, r0, #80	@ 0x50
 8004984:	f7ff ff46 	bl	8004814 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8004988:	bb58      	cbnz	r0, 80049e2 <psensor_read_temperature+0x7e>
    if (adc_temperature == 0) {
 800498a:	9b01      	ldr	r3, [sp, #4]
 800498c:	b3cb      	cbz	r3, 8004a02 <psensor_read_temperature+0x9e>
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 800498e:	4a20      	ldr	r2, [pc, #128]	@ (8004a10 <psensor_read_temperature+0xac>)
 8004990:	8951      	ldrh	r1, [r2, #10]
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8004992:	8992      	ldrh	r2, [r2, #12]
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8004994:	eba3 2301 	sub.w	r3, r3, r1, lsl #8
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8004998:	fb82 2103 	smull	r2, r1, r2, r3
 800499c:	0dd2      	lsrs	r2, r2, #23
 800499e:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80049a2:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
	if( TEMP < 2000 )
 80049a6:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 80049aa:	fb83 3103 	smull	r3, r1, r3, r3
	if( TEMP < 2000 )
 80049ae:	da1a      	bge.n	80049e6 <psensor_read_temperature+0x82>
		T2 = ( 3 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 33;
 80049b0:	eb13 0c03 	adds.w	ip, r3, r3
 80049b4:	eb41 0e01 	adc.w	lr, r1, r1
 80049b8:	eb1c 0c03 	adds.w	ip, ip, r3
 80049bc:	eb41 010e 	adc.w	r1, r1, lr
 80049c0:	104b      	asrs	r3, r1, #1
 80049c2:	ee07 3a10 	vmov	s14, r3
	*temperature = ( (float)TEMP - T2 ) / 100;
 80049c6:	ee07 2a90 	vmov	s15, r2
 80049ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80049ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049d2:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8004a14 <psensor_read_temperature+0xb0>
 80049d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049de:	ed84 7a00 	vstr	s14, [r4]
}
 80049e2:	b002      	add	sp, #8
 80049e4:	bd10      	pop	{r4, pc}
		T2 = ( 5 * ( (int64_t)dT  * (int64_t)dT  ) ) >> 38;
 80049e6:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80049ea:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80049ee:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
 80049f2:	eb1c 0c03 	adds.w	ip, ip, r3
 80049f6:	eb41 010e 	adc.w	r1, r1, lr
 80049fa:	118b      	asrs	r3, r1, #6
 80049fc:	ee07 3a10 	vmov	s14, r3
		SENS2 = 0 ;
 8004a00:	e7e1      	b.n	80049c6 <psensor_read_temperature+0x62>
        return ms8607_status_i2c_transfer_error;
 8004a02:	2002      	movs	r0, #2
}
 8004a04:	b002      	add	sp, #8
 8004a06:	bd10      	pop	{r4, pc}
 8004a08:	200005cc 	.word	0x200005cc
 8004a0c:	200005cd 	.word	0x200005cd
 8004a10:	200005bc 	.word	0x200005bc
 8004a14:	42c80000 	.word	0x42c80000

08004a18 <ms8607_read_temperature>:
	status = psensor_read_temperature(t);
 8004a18:	f7ff bfa4 	b.w	8004964 <psensor_read_temperature>

08004a1c <psensor_read_pressure>:
{
 8004a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( psensor_coeff_read == false )
 8004a20:	4b77      	ldr	r3, [pc, #476]	@ (8004c00 <psensor_read_pressure+0x1e4>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
{
 8004a24:	b083      	sub	sp, #12
 8004a26:	4605      	mov	r5, r0
	if( psensor_coeff_read == false )
 8004a28:	b91b      	cbnz	r3, 8004a32 <psensor_read_pressure+0x16>
		status = psensor_read_eeprom();
 8004a2a:	f7ff fe7d 	bl	8004728 <psensor_read_eeprom>
	if( status != ms8607_status_ok)
 8004a2e:	4604      	mov	r4, r0
 8004a30:	b950      	cbnz	r0, 8004a48 <psensor_read_pressure+0x2c>
	cmd = psensor_resolution_osr*2;
 8004a32:	4e74      	ldr	r6, [pc, #464]	@ (8004c04 <psensor_read_pressure+0x1e8>)
 8004a34:	7833      	ldrb	r3, [r6, #0]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	b2db      	uxtb	r3, r3
	status = psensor_conversion_and_read_adc( cmd, &adc_temperature);
 8004a3a:	4669      	mov	r1, sp
 8004a3c:	f043 0050 	orr.w	r0, r3, #80	@ 0x50
 8004a40:	f7ff fee8 	bl	8004814 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8004a44:	4604      	mov	r4, r0
 8004a46:	b118      	cbz	r0, 8004a50 <psensor_read_pressure+0x34>
}
 8004a48:	4620      	mov	r0, r4
 8004a4a:	b003      	add	sp, #12
 8004a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cmd = psensor_resolution_osr*2;
 8004a50:	7830      	ldrb	r0, [r6, #0]
 8004a52:	0040      	lsls	r0, r0, #1
 8004a54:	b2c0      	uxtb	r0, r0
	status = psensor_conversion_and_read_adc( cmd, &adc_pressure);
 8004a56:	a901      	add	r1, sp, #4
 8004a58:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8004a5c:	f7ff feda 	bl	8004814 <psensor_conversion_and_read_adc>
	if( status != ms8607_status_ok)
 8004a60:	4604      	mov	r4, r0
 8004a62:	2800      	cmp	r0, #0
 8004a64:	d1f0      	bne.n	8004a48 <psensor_read_pressure+0x2c>
    if (adc_temperature == 0 || adc_pressure == 0) {
 8004a66:	9a00      	ldr	r2, [sp, #0]
 8004a68:	2a00      	cmp	r2, #0
 8004a6a:	f000 80be 	beq.w	8004bea <psensor_read_pressure+0x1ce>
 8004a6e:	9e01      	ldr	r6, [sp, #4]
 8004a70:	2e00      	cmp	r6, #0
 8004a72:	f000 80ba 	beq.w	8004bea <psensor_read_pressure+0x1ce>
	dT = (int32_t)adc_temperature - ( (int32_t)eeprom_coeff[REFERENCE_TEMPERATURE_INDEX] <<8 );
 8004a76:	4964      	ldr	r1, [pc, #400]	@ (8004c08 <psensor_read_pressure+0x1ec>)
 8004a78:	894b      	ldrh	r3, [r1, #10]
 8004a7a:	eba2 2203 	sub.w	r2, r2, r3, lsl #8
	TEMP = 2000 + ((int64_t)dT * (int64_t)eeprom_coeff[TEMP_COEFF_OF_TEMPERATURE_INDEX] >> 23) ;
 8004a7e:	898b      	ldrh	r3, [r1, #12]
 8004a80:	fb83 3002 	smull	r3, r0, r3, r2
 8004a84:	0ddb      	lsrs	r3, r3, #23
 8004a86:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8004a8a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
	if( TEMP < 2000 )
 8004a8e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004a92:	f280 80af 	bge.w	8004bf4 <psensor_read_pressure+0x1d8>
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004a96:	f5b3 6cfa 	subs.w	ip, r3, #2000	@ 0x7d0
 8004a9a:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8004a9e:	f169 0700 	sbc.w	r7, r9, #0
 8004aa2:	fb0c f707 	mul.w	r7, ip, r7
 8004aa6:	fbac 0c0c 	umull	r0, ip, ip, ip
 8004aaa:	eb0c 0c47 	add.w	ip, ip, r7, lsl #1
 8004aae:	ea4f 170c 	mov.w	r7, ip, lsl #4
 8004ab2:	ea4f 1e00 	mov.w	lr, r0, lsl #4
 8004ab6:	ebbe 0e00 	subs.w	lr, lr, r0
 8004aba:	ea47 7710 	orr.w	r7, r7, r0, lsr #28
 8004abe:	eb67 070c 	sbc.w	r7, r7, ip
 8004ac2:	00bf      	lsls	r7, r7, #2
 8004ac4:	ea47 779e 	orr.w	r7, r7, lr, lsr #30
 8004ac8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004acc:	eb1e 0e00 	adds.w	lr, lr, r0
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004ad0:	ea4f 0acc 	mov.w	sl, ip, lsl #3
 8004ad4:	ea4f 08c0 	mov.w	r8, r0, lsl #3
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004ad8:	eb4c 0707 	adc.w	r7, ip, r7
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004adc:	ea4a 7a50 	orr.w	sl, sl, r0, lsr #29
 8004ae0:	ebb8 0800 	subs.w	r8, r8, r0
 8004ae4:	eb6a 0a0c 	sbc.w	sl, sl, ip
 8004ae8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8004aec:	ea4a 7a98 	orr.w	sl, sl, r8, lsr #30
 8004af0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8004af4:	eb18 0800 	adds.w	r8, r8, r0
		if( TEMP < -1500 )
 8004af8:	4844      	ldr	r0, [pc, #272]	@ (8004c0c <psensor_read_pressure+0x1f0>)
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004afa:	eb4c 0c0a 	adc.w	ip, ip, sl
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004afe:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004b02:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if( TEMP < -1500 )
 8004b06:	4283      	cmp	r3, r0
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004b08:	ea4e 7e07 	orr.w	lr, lr, r7, lsl #28
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004b0c:	ea48 780c 	orr.w	r8, r8, ip, lsl #28
		OFF2 = 61 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004b10:	ea4f 1727 	mov.w	r7, r7, asr #4
		SENS2 = 29 * ((int64_t)TEMP - 2000) * ((int64_t)TEMP - 2000) / 16 ;
 8004b14:	ea4f 1c2c 	mov.w	ip, ip, asr #4
		if( TEMP < -1500 )
 8004b18:	da28      	bge.n	8004b6c <psensor_read_pressure+0x150>
			OFF2 += 17 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8004b1a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8004b1e:	181b      	adds	r3, r3, r0
 8004b20:	f149 0900 	adc.w	r9, r9, #0
 8004b24:	fb03 f909 	mul.w	r9, r3, r9
 8004b28:	fba3 a303 	umull	sl, r3, r3, r3
 8004b2c:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 8004b30:	ea4f 1903 	mov.w	r9, r3, lsl #4
 8004b34:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8004b38:	eb10 000a 	adds.w	r0, r0, sl
 8004b3c:	ea49 791a 	orr.w	r9, r9, sl, lsr #28
 8004b40:	eb43 0909 	adc.w	r9, r3, r9
 8004b44:	eb10 000e 	adds.w	r0, r0, lr
 8004b48:	eb47 0709 	adc.w	r7, r7, r9
 8004b4c:	4686      	mov	lr, r0
			SENS2 += 9 * ((int64_t)TEMP + 1500) * ((int64_t)TEMP + 1500) ;
 8004b4e:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004b52:	ea4f 00ca 	mov.w	r0, sl, lsl #3
 8004b56:	eb10 000a 	adds.w	r0, r0, sl
 8004b5a:	ea49 795a 	orr.w	r9, r9, sl, lsr #29
 8004b5e:	eb43 0309 	adc.w	r3, r3, r9
 8004b62:	eb10 0008 	adds.w	r0, r0, r8
 8004b66:	eb4c 0c03 	adc.w	ip, ip, r3
 8004b6a:	4680      	mov	r8, r0
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8004b6c:	f8b1 a008 	ldrh.w	sl, [r1, #8]
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8004b70:	88cb      	ldrh	r3, [r1, #6]
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8004b72:	8888      	ldrh	r0, [r1, #4]
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8004b74:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8004b78:	fb8a 1a02 	smull	r1, sl, sl, r2
 8004b7c:	0989      	lsrs	r1, r1, #6
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8004b7e:	fb83 3202 	smull	r3, r2, r3, r2
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8004b82:	ea4f 4b40 	mov.w	fp, r0, lsl #17
 8004b86:	ea41 618a 	orr.w	r1, r1, sl, lsl #26
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8004b8a:	09db      	lsrs	r3, r3, #7
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8004b8c:	eb11 010b 	adds.w	r1, r1, fp
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8004b90:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8004b94:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
	OFF = ( (int64_t)(eeprom_coeff[PRESSURE_OFFSET_INDEX]) << 17 ) + ( ( (int64_t)(eeprom_coeff[TEMP_COEFF_OF_PRESSURE_OFFSET_INDEX]) * dT ) >> 6 ) ;
 8004b98:	ea4f 30d0 	mov.w	r0, r0, lsr #15
 8004b9c:	eb40 10aa 	adc.w	r0, r0, sl, asr #6
	SENS = ( (int64_t)eeprom_coeff[PRESSURE_SENSITIVITY_INDEX] << 16 ) + ( ((int64_t)eeprom_coeff[TEMP_COEFF_OF_PRESSURE_SENSITIVITY_INDEX] * dT) >> 7 ) ;
 8004ba0:	11d2      	asrs	r2, r2, #7
 8004ba2:	eb13 0309 	adds.w	r3, r3, r9
 8004ba6:	f142 0200 	adc.w	r2, r2, #0
	SENS -= SENS2 ;
 8004baa:	ebb3 0308 	subs.w	r3, r3, r8
 8004bae:	eb62 020c 	sbc.w	r2, r2, ip
	OFF -= OFF2 ;
 8004bb2:	ebb1 0c0e 	subs.w	ip, r1, lr
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8004bb6:	fba3 3106 	umull	r3, r1, r3, r6
 8004bba:	fb06 1102 	mla	r1, r6, r2, r1
 8004bbe:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8004bc2:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
	OFF -= OFF2 ;
 8004bc6:	eb60 0707 	sbc.w	r7, r0, r7
	P = ( ( (adc_pressure * SENS) >> 21 ) - OFF ) >> 15 ;
 8004bca:	1549      	asrs	r1, r1, #21
 8004bcc:	ebb3 000c 	subs.w	r0, r3, ip
 8004bd0:	eb61 0107 	sbc.w	r1, r1, r7
 8004bd4:	0bc0      	lsrs	r0, r0, #15
	*pressure = (float)P;
 8004bd6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
 8004bda:	13c9      	asrs	r1, r1, #15
 8004bdc:	f7fc f924 	bl	8000e28 <__aeabi_l2f>
 8004be0:	6028      	str	r0, [r5, #0]
}
 8004be2:	4620      	mov	r0, r4
 8004be4:	b003      	add	sp, #12
 8004be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ms8607_status_i2c_transfer_error;
 8004bea:	2402      	movs	r4, #2
}
 8004bec:	4620      	mov	r0, r4
 8004bee:	b003      	add	sp, #12
 8004bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SENS2 = 0 ;
 8004bf4:	46a0      	mov	r8, r4
 8004bf6:	46a4      	mov	ip, r4
		OFF2 = 0 ;
 8004bf8:	46a6      	mov	lr, r4
 8004bfa:	4627      	mov	r7, r4
 8004bfc:	e7b6      	b.n	8004b6c <psensor_read_pressure+0x150>
 8004bfe:	bf00      	nop
 8004c00:	200005cc 	.word	0x200005cc
 8004c04:	200005cd 	.word	0x200005cd
 8004c08:	200005bc 	.word	0x200005bc
 8004c0c:	fffffa24 	.word	0xfffffa24

08004c10 <ms8607_read_pressure>:
	status = psensor_read_pressure(p);
 8004c10:	f7ff bf04 	b.w	8004a1c <psensor_read_pressure>

08004c14 <i2c_master_init>:
#include "ms8607.h"
#include "ms8607_i2c.h"

void i2c_master_init(void)
{
}
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop

08004c18 <i2c_master_read_packet_wait>:

enum status_code i2c_master_read_packet_wait(struct i2c_master_packet *const packet)
{
 8004c18:	b510      	push	{r4, lr}
 8004c1a:	b082      	sub	sp, #8
    uint8_t res = HAL_I2C_Master_Receive(&hi2c2, packet->address, packet->data, packet->data_length, 50);
 8004c1c:	2432      	movs	r4, #50	@ 0x32
 8004c1e:	8843      	ldrh	r3, [r0, #2]
 8004c20:	6842      	ldr	r2, [r0, #4]
 8004c22:	8801      	ldrh	r1, [r0, #0]
 8004c24:	9400      	str	r4, [sp, #0]
 8004c26:	4802      	ldr	r0, [pc, #8]	@ (8004c30 <i2c_master_read_packet_wait+0x18>)
 8004c28:	f003 fcc0 	bl	80085ac <HAL_I2C_Master_Receive>
    return (enum status_code)res;
}
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd10      	pop	{r4, pc}
 8004c30:	20000444 	.word	0x20000444

08004c34 <i2c_master_write_packet_wait>:


enum status_code i2c_master_write_packet_wait(struct i2c_master_packet *const packet)
{
 8004c34:	b510      	push	{r4, lr}
 8004c36:	b082      	sub	sp, #8
    uint8_t res = HAL_I2C_Master_Transmit(&hi2c2, packet->address, packet->data, packet->data_length, 50);
 8004c38:	2432      	movs	r4, #50	@ 0x32
 8004c3a:	8843      	ldrh	r3, [r0, #2]
 8004c3c:	6842      	ldr	r2, [r0, #4]
 8004c3e:	8801      	ldrh	r1, [r0, #0]
 8004c40:	9400      	str	r4, [sp, #0]
 8004c42:	4802      	ldr	r0, [pc, #8]	@ (8004c4c <i2c_master_write_packet_wait+0x18>)
 8004c44:	f003 fbe8 	bl	8008418 <HAL_I2C_Master_Transmit>
    return (enum status_code)res;
}
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd10      	pop	{r4, pc}
 8004c4c:	20000444 	.word	0x20000444

08004c50 <i2c_master_write_packet_wait_no_stop>:

enum status_code i2c_master_write_packet_wait_no_stop(struct i2c_master_packet *const packet)
 8004c50:	b510      	push	{r4, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	2432      	movs	r4, #50	@ 0x32
 8004c56:	8843      	ldrh	r3, [r0, #2]
 8004c58:	6842      	ldr	r2, [r0, #4]
 8004c5a:	8801      	ldrh	r1, [r0, #0]
 8004c5c:	9400      	str	r4, [sp, #0]
 8004c5e:	4802      	ldr	r0, [pc, #8]	@ (8004c68 <i2c_master_write_packet_wait_no_stop+0x18>)
 8004c60:	f003 fbda 	bl	8008418 <HAL_I2C_Master_Transmit>
 8004c64:	b002      	add	sp, #8
 8004c66:	bd10      	pop	{r4, pc}
 8004c68:	20000444 	.word	0x20000444

08004c6c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c6c:	4b11      	ldr	r3, [pc, #68]	@ (8004cb4 <HAL_MspInit+0x48>)
{
 8004c6e:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c70:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8004c72:	f040 0001 	orr.w	r0, r0, #1
 8004c76:	6618      	str	r0, [r3, #96]	@ 0x60
 8004c78:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
{
 8004c7a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c7c:	f004 0401 	and.w	r4, r4, #1
 8004c80:	9400      	str	r4, [sp, #0]
 8004c82:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8004c86:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 8004c8a:	659c      	str	r4, [r3, #88]	@ 0x58
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c94:	2200      	movs	r2, #0
 8004c96:	210f      	movs	r1, #15
 8004c98:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c9c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c9e:	f002 fd15 	bl	80076cc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004ca2:	2105      	movs	r1, #5
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4608      	mov	r0, r1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ca8:	b002      	add	sp, #8
 8004caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8004cae:	f002 bd0d 	b.w	80076cc <HAL_NVIC_SetPriority>
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004cb8:	b530      	push	{r4, r5, lr}
 8004cba:	4604      	mov	r4, r0
 8004cbc:	b09b      	sub	sp, #108	@ 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cbe:	225c      	movs	r2, #92	@ 0x5c
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	a802      	add	r0, sp, #8
 8004cc4:	f008 fe9c 	bl	800da00 <memset>
  if(hadc->Instance==ADC1)
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_ADC_MspInit+0xc0>)
 8004cca:	6822      	ldr	r2, [r4, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004cd0:	b01b      	add	sp, #108	@ 0x6c
 8004cd2:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004cd4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8004d58 <HAL_ADC_MspInit+0xa0>
 8004cd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004cdc:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8004d60 <HAL_ADC_MspInit+0xa8>
 8004ce0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004ce4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8004d68 <HAL_ADC_MspInit+0xb0>
 8004ce8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004cec:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8004d70 <HAL_ADC_MspInit+0xb8>
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004cf0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cf4:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004cf6:	ed8d 7b08 	vstr	d7, [sp, #32]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004cfa:	9316      	str	r3, [sp, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cfc:	f004 fdee 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8004d00:	bb18      	cbnz	r0, 8004d4a <HAL_ADC_MspInit+0x92>
    __HAL_RCC_ADC_CLK_ENABLE();
 8004d02:	4a1e      	ldr	r2, [pc, #120]	@ (8004d7c <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Instance = DMA1_Channel1;
 8004d04:	4d1e      	ldr	r5, [pc, #120]	@ (8004d80 <HAL_ADC_MspInit+0xc8>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8004d06:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8004d08:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8004d0c:	64d1      	str	r1, [r2, #76]	@ 0x4c
 8004d0e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 8004d10:	491c      	ldr	r1, [pc, #112]	@ (8004d84 <HAL_ADC_MspInit+0xcc>)
 8004d12:	6029      	str	r1, [r5, #0]
    __HAL_RCC_ADC_CLK_ENABLE();
 8004d14:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004d18:	9201      	str	r2, [sp, #4]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC_CLK_ENABLE();
 8004d1e:	9a01      	ldr	r2, [sp, #4]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004d20:	622b      	str	r3, [r5, #32]
 8004d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d26:	e9c5 3103 	strd	r3, r1, [r5, #12]
 8004d2a:	616a      	str	r2, [r5, #20]
 8004d2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d30:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d32:	4628      	mov	r0, r5
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8004d34:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8004d38:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d3c:	f002 fe12 	bl	8007964 <HAL_DMA_Init>
 8004d40:	b930      	cbnz	r0, 8004d50 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004d42:	64e5      	str	r5, [r4, #76]	@ 0x4c
 8004d44:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8004d46:	b01b      	add	sp, #108	@ 0x6c
 8004d48:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8004d4a:	f7ff fc71 	bl	8004630 <Error_Handler>
 8004d4e:	e7d8      	b.n	8004d02 <HAL_ADC_MspInit+0x4a>
      Error_Handler();
 8004d50:	f7ff fc6e 	bl	8004630 <Error_Handler>
 8004d54:	e7f5      	b.n	8004d42 <HAL_ADC_MspInit+0x8a>
 8004d56:	bf00      	nop
 8004d58:	00004000 	.word	0x00004000
 8004d5c:	00000003 	.word	0x00000003
 8004d60:	00000001 	.word	0x00000001
 8004d64:	00000008 	.word	0x00000008
 8004d68:	00000007 	.word	0x00000007
 8004d6c:	00000002 	.word	0x00000002
 8004d70:	00000002 	.word	0x00000002
 8004d74:	01000000 	.word	0x01000000
 8004d78:	50040000 	.word	0x50040000
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	20000510 	.word	0x20000510
 8004d84:	40020008 	.word	0x40020008

08004d88 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004d88:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <HAL_CRC_MspInit+0x28>)
 8004d8a:	6802      	ldr	r2, [r0, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d000      	beq.n	8004d92 <HAL_CRC_MspInit+0xa>
 8004d90:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004d92:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
{
 8004d96:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8004d98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d9e:	649a      	str	r2, [r3, #72]	@ 0x48
 8004da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004daa:	b002      	add	sp, #8
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40023000 	.word	0x40023000

08004db4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db6:	4604      	mov	r4, r0
 8004db8:	b0a5      	sub	sp, #148	@ 0x94
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dba:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dbc:	225c      	movs	r2, #92	@ 0x5c
 8004dbe:	a80d      	add	r0, sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8004dc4:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 8004dc8:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dca:	f008 fe19 	bl	800da00 <memset>
  if(hi2c->Instance==I2C1)
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8004f3c <HAL_I2C_MspInit+0x188>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d007      	beq.n	8004de6 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8004dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8004f40 <HAL_I2C_MspInit+0x18c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d034      	beq.n	8004e46 <HAL_I2C_MspInit+0x92>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 8004ddc:	4a59      	ldr	r2, [pc, #356]	@ (8004f44 <HAL_I2C_MspInit+0x190>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d05f      	beq.n	8004ea2 <HAL_I2C_MspInit+0xee>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004de2:	b025      	add	sp, #148	@ 0x94
 8004de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004de6:	2240      	movs	r2, #64	@ 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8004de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dec:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004dee:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8004df0:	9319      	str	r3, [sp, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004df2:	f004 fd73 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	f040 8096 	bne.w	8004f28 <HAL_I2C_MspInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfc:	4c52      	ldr	r4, [pc, #328]	@ (8004f48 <HAL_I2C_MspInit+0x194>)
 8004dfe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004e06:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e0e:	2304      	movs	r3, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e10:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e12:	930c      	str	r3, [sp, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e14:	2201      	movs	r2, #1
 8004e16:	2303      	movs	r3, #3
 8004e18:	f44f 66c0 	mov.w	r6, #1536	@ 0x600
 8004e1c:	2712      	movs	r7, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1e:	a908      	add	r1, sp, #32
 8004e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e24:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8004e28:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2c:	f003 f856 	bl	8007edc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e36:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004e38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	9b02      	ldr	r3, [sp, #8]
}
 8004e42:	b025      	add	sp, #148	@ 0x94
 8004e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004e46:	2280      	movs	r2, #128	@ 0x80
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8004e48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e4c:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004e4e:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8004e50:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e52:	f004 fd43 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d169      	bne.n	8004f2e <HAL_I2C_MspInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5a:	4c3b      	ldr	r4, [pc, #236]	@ (8004f48 <HAL_I2C_MspInit+0x194>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e5c:	483b      	ldr	r0, [pc, #236]	@ (8004f4c <HAL_I2C_MspInit+0x198>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004e66:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004e6e:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8004e72:	2312      	movs	r3, #18
 8004e74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e80:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004e82:	2304      	movs	r3, #4
 8004e84:	930c      	str	r3, [sp, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e86:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e88:	f003 f828 	bl	8007edc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004e8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e92:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004e94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	9b04      	ldr	r3, [sp, #16]
}
 8004e9e:	b025      	add	sp, #148	@ 0x94
 8004ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004ea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8004ea6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004eaa:	a80d      	add	r0, sp, #52	@ 0x34
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004eac:	920d      	str	r2, [sp, #52]	@ 0x34
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8004eae:	931b      	str	r3, [sp, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004eb0:	f004 fd14 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d13d      	bne.n	8004f34 <HAL_I2C_MspInit+0x180>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eb8:	4c23      	ldr	r4, [pc, #140]	@ (8004f48 <HAL_I2C_MspInit+0x194>)
 8004eba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004ec2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	9305      	str	r3, [sp, #20]
 8004eca:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ecc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004ece:	f043 0302 	orr.w	r3, r3, #2
 8004ed2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8004ed4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004edc:	2504      	movs	r5, #4
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ede:	2280      	movs	r2, #128	@ 0x80
 8004ee0:	2601      	movs	r6, #1
 8004ee2:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ee6:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004eec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ef0:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ef4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ef6:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef8:	f002 fff0 	bl	8007edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004efc:	2210      	movs	r2, #16
 8004efe:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f00:	4812      	ldr	r0, [pc, #72]	@ (8004f4c <HAL_I2C_MspInit+0x198>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004f02:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f04:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f0a:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f0e:	f002 ffe5 	bl	8007edc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004f12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f18:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004f1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f20:	9307      	str	r3, [sp, #28]
 8004f22:	9b07      	ldr	r3, [sp, #28]
}
 8004f24:	b025      	add	sp, #148	@ 0x94
 8004f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8004f28:	f7ff fb82 	bl	8004630 <Error_Handler>
 8004f2c:	e766      	b.n	8004dfc <HAL_I2C_MspInit+0x48>
      Error_Handler();
 8004f2e:	f7ff fb7f 	bl	8004630 <Error_Handler>
 8004f32:	e792      	b.n	8004e5a <HAL_I2C_MspInit+0xa6>
      Error_Handler();
 8004f34:	f7ff fb7c 	bl	8004630 <Error_Handler>
 8004f38:	e7be      	b.n	8004eb8 <HAL_I2C_MspInit+0x104>
 8004f3a:	bf00      	nop
 8004f3c:	40005400 	.word	0x40005400
 8004f40:	40005800 	.word	0x40005800
 8004f44:	40005c00 	.word	0x40005c00
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	48000400 	.word	0x48000400

08004f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f50:	b510      	push	{r4, lr}
 8004f52:	4604      	mov	r4, r0
 8004f54:	b0a0      	sub	sp, #128	@ 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f56:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f58:	225c      	movs	r2, #92	@ 0x5c
 8004f5a:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004f60:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004f64:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f66:	f008 fd4b 	bl	800da00 <memset>
  if(huart->Instance==USART1)
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8005058 <HAL_UART_MspInit+0x108>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8004f72:	4a3a      	ldr	r2, [pc, #232]	@ (800505c <HAL_UART_MspInit+0x10c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d039      	beq.n	8004fec <HAL_UART_MspInit+0x9c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004f78:	b020      	add	sp, #128	@ 0x80
 8004f7a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f7c:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f7e:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f80:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8004f82:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f84:	f004 fcaa 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d15f      	bne.n	800504c <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f8c:	4b34      	ldr	r3, [pc, #208]	@ (8005060 <HAL_UART_MspInit+0x110>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8e:	4835      	ldr	r0, [pc, #212]	@ (8005064 <HAL_UART_MspInit+0x114>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f96:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f9a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004f9e:	9200      	str	r2, [sp, #0]
 8004fa0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fa4:	f042 0202 	orr.w	r2, r2, #2
 8004fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004fb2:	2240      	movs	r2, #64	@ 0x40
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fba:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004fbc:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fbe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fc0:	2407      	movs	r4, #7
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fc8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fca:	f002 ff87 	bl	8007edc <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fce:	4825      	ldr	r0, [pc, #148]	@ (8005064 <HAL_UART_MspInit+0x114>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004fd0:	2280      	movs	r2, #128	@ 0x80
 8004fd2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = SIM_UART_RX_Pin;
 8004fd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fe2:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(SIM_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8004fe4:	f002 ff7a 	bl	8007edc <HAL_GPIO_Init>
}
 8004fe8:	b020      	add	sp, #128	@ 0x80
 8004fea:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004fec:	2202      	movs	r2, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8004fee:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ff0:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004ff2:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8004ff4:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ff6:	f004 fc71 	bl	80098dc <HAL_RCCEx_PeriphCLKConfig>
 8004ffa:	bb50      	cbnz	r0, 8005052 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ffc:	4b18      	ldr	r3, [pc, #96]	@ (8005060 <HAL_UART_MspInit+0x110>)
 8004ffe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005000:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005004:	659a      	str	r2, [r3, #88]	@ 0x58
 8005006:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005008:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800500c:	9202      	str	r2, [sp, #8]
 800500e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005010:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 8005020:	2204      	movs	r2, #4
 8005022:	2302      	movs	r3, #2
 8005024:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 8005028:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 800502a:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502c:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 800502e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 8005032:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005034:	2407      	movs	r4, #7
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin;
 8005036:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800503a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(SIM_UART_TX_GPIO_Port, &GPIO_InitStruct);
 800503c:	f002 ff4e 	bl	8007edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SIM_UART_RX_Pin;
 8005040:	2208      	movs	r2, #8
 8005042:	2302      	movs	r3, #2
    HAL_GPIO_Init(SIM_UART_RX_GPIO_Port, &GPIO_InitStruct);
 8005044:	a904      	add	r1, sp, #16
 8005046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800504a:	e7c4      	b.n	8004fd6 <HAL_UART_MspInit+0x86>
      Error_Handler();
 800504c:	f7ff faf0 	bl	8004630 <Error_Handler>
 8005050:	e79c      	b.n	8004f8c <HAL_UART_MspInit+0x3c>
      Error_Handler();
 8005052:	f7ff faed 	bl	8004630 <Error_Handler>
 8005056:	e7d1      	b.n	8004ffc <HAL_UART_MspInit+0xac>
 8005058:	40013800 	.word	0x40013800
 800505c:	40004400 	.word	0x40004400
 8005060:	40021000 	.word	0x40021000
 8005064:	48000400 	.word	0x48000400

08005068 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005068:	4b23      	ldr	r3, [pc, #140]	@ (80050f8 <HAL_InitTick+0x90>)
{
 800506a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM7_CLK_ENABLE();
 800506c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800506e:	f042 0220 	orr.w	r2, r2, #32
 8005072:	659a      	str	r2, [r3, #88]	@ 0x58
 8005074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
{
 8005076:	b088      	sub	sp, #32
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	9302      	str	r3, [sp, #8]
{
 800507e:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005080:	a901      	add	r1, sp, #4
 8005082:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005084:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005086:	f004 fb79 	bl	800977c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800508a:	9b06      	ldr	r3, [sp, #24]
 800508c:	b9d3      	cbnz	r3, 80050c4 <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800508e:	f004 fb51 	bl	8009734 <HAL_RCC_GetPCLK1Freq>
 8005092:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005094:	4a19      	ldr	r2, [pc, #100]	@ (80050fc <HAL_InitTick+0x94>)

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005096:	4c1a      	ldr	r4, [pc, #104]	@ (8005100 <HAL_InitTick+0x98>)
 8005098:	491a      	ldr	r1, [pc, #104]	@ (8005104 <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	0c9b      	lsrs	r3, r3, #18
 80050a0:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 80050a2:	2200      	movs	r2, #0
  htim7.Init.Prescaler = uwPrescalerValue;
 80050a4:	e9c4 1300 	strd	r1, r3, [r4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim7);
 80050a8:	4620      	mov	r0, r4
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80050aa:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim7.Init.ClockDivision = 0;
 80050ae:	6122      	str	r2, [r4, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050b0:	60a2      	str	r2, [r4, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050b2:	61a2      	str	r2, [r4, #24]
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80050b4:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim7);
 80050b6:	f004 fead 	bl	8009e14 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80050ba:	4606      	mov	r6, r0
 80050bc:	b130      	cbz	r0, 80050cc <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 80050be:	4630      	mov	r0, r6
 80050c0:	b008      	add	sp, #32
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80050c4:	f004 fb36 	bl	8009734 <HAL_RCC_GetPCLK1Freq>
 80050c8:	0043      	lsls	r3, r0, #1
 80050ca:	e7e3      	b.n	8005094 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim7);
 80050cc:	4620      	mov	r0, r4
 80050ce:	f004 fd6d 	bl	8009bac <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80050d2:	4606      	mov	r6, r0
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1f2      	bne.n	80050be <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80050d8:	2037      	movs	r0, #55	@ 0x37
 80050da:	f002 fb33 	bl	8007744 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050de:	2d0f      	cmp	r5, #15
 80050e0:	d901      	bls.n	80050e6 <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 80050e2:	2601      	movs	r6, #1
 80050e4:	e7eb      	b.n	80050be <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80050e6:	4632      	mov	r2, r6
 80050e8:	4629      	mov	r1, r5
 80050ea:	2037      	movs	r0, #55	@ 0x37
 80050ec:	f002 faee 	bl	80076cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80050f0:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <HAL_InitTick+0xa0>)
 80050f2:	601d      	str	r5, [r3, #0]
 80050f4:	e7e3      	b.n	80050be <HAL_InitTick+0x56>
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	431bde83 	.word	0x431bde83
 8005100:	200005d0 	.word	0x200005d0
 8005104:	40001400 	.word	0x40001400
 8005108:	20000010 	.word	0x20000010

0800510c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800510c:	e7fe      	b.n	800510c <NMI_Handler>
 800510e:	bf00      	nop

08005110 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005110:	e7fe      	b.n	8005110 <HardFault_Handler>
 8005112:	bf00      	nop

08005114 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005114:	e7fe      	b.n	8005114 <MemManage_Handler>
 8005116:	bf00      	nop

08005118 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005118:	e7fe      	b.n	8005118 <BusFault_Handler>
 800511a:	bf00      	nop

0800511c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800511c:	e7fe      	b.n	800511c <UsageFault_Handler>
 800511e:	bf00      	nop

08005120 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop

08005124 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005124:	4801      	ldr	r0, [pc, #4]	@ (800512c <DMA1_Channel1_IRQHandler+0x8>)
 8005126:	f002 bd17 	b.w	8007b58 <HAL_DMA_IRQHandler>
 800512a:	bf00      	nop
 800512c:	20000510 	.word	0x20000510

08005130 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005130:	4801      	ldr	r0, [pc, #4]	@ (8005138 <USART1_IRQHandler+0x8>)
 8005132:	f004 bee5 	b.w	8009f00 <HAL_UART_IRQHandler>
 8005136:	bf00      	nop
 8005138:	2000036c 	.word	0x2000036c

0800513c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800513c:	4801      	ldr	r0, [pc, #4]	@ (8005144 <USART2_IRQHandler+0x8>)
 800513e:	f004 bedf 	b.w	8009f00 <HAL_UART_IRQHandler>
 8005142:	bf00      	nop
 8005144:	200002e8 	.word	0x200002e8

08005148 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005148:	4801      	ldr	r0, [pc, #4]	@ (8005150 <TIM7_IRQHandler+0x8>)
 800514a:	f004 bd63 	b.w	8009c14 <HAL_TIM_IRQHandler>
 800514e:	bf00      	nop
 8005150:	200005d0 	.word	0x200005d0

08005154 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005154:	2001      	movs	r0, #1
 8005156:	4770      	bx	lr

08005158 <_kill>:

int _kill(int pid, int sig)
{
 8005158:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800515a:	f008 fd31 	bl	800dbc0 <__errno>
 800515e:	2316      	movs	r3, #22
 8005160:	6003      	str	r3, [r0, #0]
  return -1;
}
 8005162:	f04f 30ff 	mov.w	r0, #4294967295
 8005166:	bd08      	pop	{r3, pc}

08005168 <_exit>:

void _exit (int status)
{
 8005168:	b508      	push	{r3, lr}
  errno = EINVAL;
 800516a:	f008 fd29 	bl	800dbc0 <__errno>
 800516e:	2316      	movs	r3, #22
 8005170:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8005172:	e7fe      	b.n	8005172 <_exit+0xa>

08005174 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop

0800517c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800517c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005180:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005182:	2000      	movs	r0, #0
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop

08005188 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005188:	2001      	movs	r0, #1
 800518a:	4770      	bx	lr

0800518c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800518c:	2000      	movs	r0, #0
 800518e:	4770      	bx	lr

08005190 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005190:	490c      	ldr	r1, [pc, #48]	@ (80051c4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005192:	4a0d      	ldr	r2, [pc, #52]	@ (80051c8 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8005194:	680b      	ldr	r3, [r1, #0]
{
 8005196:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005198:	4c0c      	ldr	r4, [pc, #48]	@ (80051cc <_sbrk+0x3c>)
 800519a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800519c:	b12b      	cbz	r3, 80051aa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800519e:	4418      	add	r0, r3
 80051a0:	4290      	cmp	r0, r2
 80051a2:	d807      	bhi.n	80051b4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80051a4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80051aa:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <_sbrk+0x40>)
 80051ac:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80051ae:	4418      	add	r0, r3
 80051b0:	4290      	cmp	r0, r2
 80051b2:	d9f7      	bls.n	80051a4 <_sbrk+0x14>
    errno = ENOMEM;
 80051b4:	f008 fd04 	bl	800dbc0 <__errno>
 80051b8:	230c      	movs	r3, #12
 80051ba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd10      	pop	{r4, pc}
 80051c4:	2000061c 	.word	0x2000061c
 80051c8:	20010000 	.word	0x20010000
 80051cc:	00000400 	.word	0x00000400
 80051d0:	20004a00 	.word	0x20004a00

080051d4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80051d4:	4a03      	ldr	r2, [pc, #12]	@ (80051e4 <SystemInit+0x10>)
 80051d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80051da:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80051e2:	4770      	bx	lr
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <SensorsTask>:
}

// ******************************************************************************************************

void SensorsTask(void const *argument)
{
 80051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ec:	ed2d 8b02 	vpush	{d8}
	uint8_t shtc3_values[6];

	printf("Sensors task created\r\n\r\n\r\n");
 80051f0:	48a8      	ldr	r0, [pc, #672]	@ (8005494 <SensorsTask+0x2ac>)
 80051f2:	f8df 92d0 	ldr.w	r9, [pc, #720]	@ 80054c4 <SensorsTask+0x2dc>
 80051f6:	4ca8      	ldr	r4, [pc, #672]	@ (8005498 <SensorsTask+0x2b0>)
 80051f8:	f8df 82cc 	ldr.w	r8, [pc, #716]	@ 80054c8 <SensorsTask+0x2e0>
 80051fc:	4ea7      	ldr	r6, [pc, #668]	@ (800549c <SensorsTask+0x2b4>)
 80051fe:	f8df a2cc 	ldr.w	sl, [pc, #716]	@ 80054cc <SensorsTask+0x2e4>
	while(1)
	{
		vTaskSuspend(NULL);		// zatrzymaj taki i czekaj na komende start
		LED2_ON();				// mrugniecie czerwona
 8005202:	f8df b2cc 	ldr.w	fp, [pc, #716]	@ 80054d0 <SensorsTask+0x2e8>
{
 8005206:	b083      	sub	sp, #12
	printf("Sensors task created\r\n\r\n\r\n");
 8005208:	f008 fafa 	bl	800d800 <puts>
 800520c:	e01a      	b.n	8005244 <SensorsTask+0x5c>
		  if(TMP117.temp.use_meas) {
			  TMP117.temp.value = TMP117_get_temp();
		//    			  printf("Temperatura TMP117: %.2f\r\n", TMP117.temp.value);
		  }
		}
		if(BME280.present && BME280.sensor_use){
 800520e:	7823      	ldrb	r3, [r4, #0]
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	2b03      	cmp	r3, #3
 8005216:	d05d      	beq.n	80052d4 <SensorsTask+0xec>
		  if(BME280.hum.use_meas) {
			  BME280.hum.value = BME280_get_hum();
		//    		      printf("Wilgotnosc BME280: %.2f\r\n", BME280.hum.value);
		  }
		}
		if(SHT3.present && SHT3.sensor_use){
 8005218:	f898 3000 	ldrb.w	r3, [r8]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b03      	cmp	r3, #3
 8005222:	d06e      	beq.n	8005302 <SensorsTask+0x11a>
		  if(SHT3.hum.use_meas) {
			  SHT3.hum.value = SHTC3_get_hum(shtc3_values);
		//    			  printf("Wilgotnosc SHT3: %.2f\r\n", SHT3.hum.value);
		  }
		}
		if(MS8607.present && MS8607.sensor_use){
 8005224:	f89a 3000 	ldrb.w	r3, [sl]
 8005228:	f003 0303 	and.w	r3, r3, #3
 800522c:	2b03      	cmp	r3, #3
 800522e:	f000 8082 	beq.w	8005336 <SensorsTask+0x14e>
		  if(MS8607.hum.use_meas) {
			  MS8607.hum.value = MS8607_get_hum();
		//    			  printf("Wilgotnosc MS8607: %.2f\r\n", MS8607.hum.value);
		  }
		}
		if(DPS368.present && DPS368.sensor_use){
 8005232:	7833      	ldrb	r3, [r6, #0]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	2b03      	cmp	r3, #3
 800523a:	f000 8097 	beq.w	800536c <SensorsTask+0x184>
			  osDelay( calcBusyTime(dps368_ovr_press) + 10);			// zaczekaj na koniec przetwarzania
   			  DPS368.press.value = DPS368_get_press(dps_scaled_temp);	// pobierz cisnienie uzywając temperatury
//    		  printf("Cisnienie DPS368: %.2f\r\n", DPS368.press.value);
		  }
		}
		sensors_data_ready = 1;
 800523e:	4a98      	ldr	r2, [pc, #608]	@ (80054a0 <SensorsTask+0x2b8>)
 8005240:	2301      	movs	r3, #1
 8005242:	7013      	strb	r3, [r2, #0]
		vTaskSuspend(NULL);		// zatrzymaj taki i czekaj na komende start
 8005244:	2000      	movs	r0, #0
 8005246:	f006 f863 	bl	800b310 <vTaskSuspend>
		LED2_ON();				// mrugniecie czerwona
 800524a:	2200      	movs	r2, #0
 800524c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005250:	4658      	mov	r0, fp
 8005252:	f002 ff43 	bl	80080dc <HAL_GPIO_WritePin>
		  if(TMP117.sensor_use && TMP117.temp.use_meas) {
 8005256:	f899 3000 	ldrb.w	r3, [r9]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b03      	cmp	r3, #3
 8005260:	f000 80e8 	beq.w	8005434 <SensorsTask+0x24c>
		uint32_t meas_time = 0;
 8005264:	2500      	movs	r5, #0
		  if(BME280.sensor_use && (BME280.temp.use_meas || BME280.press.use_meas || BME280.hum.use_meas) ) {
 8005266:	7823      	ldrb	r3, [r4, #0]
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b03      	cmp	r3, #3
 800526e:	f000 80d4 	beq.w	800541a <SensorsTask+0x232>
		  if(SHT3.sensor_use && (SHT3.temp.use_meas || SHT3.hum.use_meas)) {
 8005272:	f898 3000 	ldrb.w	r3, [r8]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b03      	cmp	r3, #3
 800527c:	f000 80bd 	beq.w	80053fa <SensorsTask+0x212>
		  if(DPS368.sensor_use && (DPS368.temp.use_meas || DPS368.press.use_meas)) {
 8005280:	7833      	ldrb	r3, [r6, #0]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b03      	cmp	r3, #3
 8005288:	f000 8094 	beq.w	80053b4 <SensorsTask+0x1cc>
		uint8_t dps368_press = 0;
 800528c:	2700      	movs	r7, #0
		if(disp_type == 1) {
 800528e:	4b85      	ldr	r3, [pc, #532]	@ (80054a4 <SensorsTask+0x2bc>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b01      	cmp	r3, #1
 8005294:	f000 80a7 	beq.w	80053e6 <SensorsTask+0x1fe>
		LED2_OFF();						// mrugniecie czerwona
 8005298:	2201      	movs	r2, #1
 800529a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800529e:	4658      	mov	r0, fp
 80052a0:	f002 ff1c 	bl	80080dc <HAL_GPIO_WritePin>
		osDelay(meas_time);				// odczekaj czas potrzebny na przetworzenie (maksymalny wymagany)
 80052a4:	4628      	mov	r0, r5
 80052a6:	f005 fba5 	bl	800a9f4 <osDelay>
		if(TMP117.present && TMP117.sensor_use){
 80052aa:	f899 3000 	ldrb.w	r3, [r9]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d1ab      	bne.n	800520e <SensorsTask+0x26>
		  if(TMP117.temp.use_meas) {
 80052b6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80052ba:	07dd      	lsls	r5, r3, #31
 80052bc:	d5a7      	bpl.n	800520e <SensorsTask+0x26>
			  TMP117.temp.value = TMP117_get_temp();
 80052be:	f001 f8fb 	bl	80064b8 <TMP117_get_temp>
 80052c2:	ee10 3a10 	vmov	r3, s0
 80052c6:	f8c9 3002 	str.w	r3, [r9, #2]
		if(BME280.present && BME280.sensor_use){
 80052ca:	7823      	ldrb	r3, [r4, #0]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d1a1      	bne.n	8005218 <SensorsTask+0x30>
		  if(BME280.temp.use_meas) {
 80052d4:	7863      	ldrb	r3, [r4, #1]
 80052d6:	07d8      	lsls	r0, r3, #31
 80052d8:	f100 80cd 	bmi.w	8005476 <SensorsTask+0x28e>
		  if(BME280.press.use_meas) {
 80052dc:	7ce3      	ldrb	r3, [r4, #19]
 80052de:	07d9      	lsls	r1, r3, #31
 80052e0:	f100 80c4 	bmi.w	800546c <SensorsTask+0x284>
		  if(BME280.hum.use_meas) {
 80052e4:	7aa3      	ldrb	r3, [r4, #10]
 80052e6:	07da      	lsls	r2, r3, #31
 80052e8:	d596      	bpl.n	8005218 <SensorsTask+0x30>
			  BME280.hum.value = BME280_get_hum();
 80052ea:	f001 fb9b 	bl	8006a24 <BME280_get_hum>
 80052ee:	ee10 3a10 	vmov	r3, s0
 80052f2:	f8c4 300b 	str.w	r3, [r4, #11]
		if(SHT3.present && SHT3.sensor_use){
 80052f6:	f898 3000 	ldrb.w	r3, [r8]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d190      	bne.n	8005224 <SensorsTask+0x3c>
		  SHTC3_read_values(shtc3_values);
 8005302:	4668      	mov	r0, sp
 8005304:	f001 fa18 	bl	8006738 <SHTC3_read_values>
		  if(SHT3.temp.use_meas) {
 8005308:	f898 3001 	ldrb.w	r3, [r8, #1]
 800530c:	07db      	lsls	r3, r3, #31
 800530e:	f100 80b9 	bmi.w	8005484 <SensorsTask+0x29c>
		  if(SHT3.hum.use_meas) {
 8005312:	f898 300a 	ldrb.w	r3, [r8, #10]
 8005316:	07dd      	lsls	r5, r3, #31
 8005318:	d584      	bpl.n	8005224 <SensorsTask+0x3c>
			  SHT3.hum.value = SHTC3_get_hum(shtc3_values);
 800531a:	4668      	mov	r0, sp
 800531c:	f001 fa56 	bl	80067cc <SHTC3_get_hum>
 8005320:	ee10 3a10 	vmov	r3, s0
 8005324:	f8c8 300b 	str.w	r3, [r8, #11]
		if(MS8607.present && MS8607.sensor_use){
 8005328:	f89a 3000 	ldrb.w	r3, [sl]
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	2b03      	cmp	r3, #3
 8005332:	f47f af7e 	bne.w	8005232 <SensorsTask+0x4a>
		  if(MS8607.temp.use_meas) {
 8005336:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800533a:	07d8      	lsls	r0, r3, #31
 800533c:	f100 8086 	bmi.w	800544c <SensorsTask+0x264>
		  if(MS8607.press.use_meas) {
 8005340:	f89a 3013 	ldrb.w	r3, [sl, #19]
 8005344:	07d9      	lsls	r1, r3, #31
 8005346:	f100 808c 	bmi.w	8005462 <SensorsTask+0x27a>
		  if(MS8607.hum.use_meas) {
 800534a:	f89a 300a 	ldrb.w	r3, [sl, #10]
 800534e:	07da      	lsls	r2, r3, #31
 8005350:	f57f af6f 	bpl.w	8005232 <SensorsTask+0x4a>
			  MS8607.hum.value = MS8607_get_hum();
 8005354:	f001 f95a 	bl	800660c <MS8607_get_hum>
 8005358:	ee10 3a10 	vmov	r3, s0
 800535c:	f8ca 300b 	str.w	r3, [sl, #11]
		if(DPS368.present && DPS368.sensor_use){
 8005360:	7833      	ldrb	r3, [r6, #0]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b03      	cmp	r3, #3
 8005368:	f47f af69 	bne.w	800523e <SensorsTask+0x56>
		  float dps_scaled_temp = DPS368_get_scaled_temp();				// odczytaj temperature
 800536c:	f7fe fdfa 	bl	8003f64 <DPS368_get_scaled_temp>
		  if(DPS368.temp.use_meas) {
 8005370:	7873      	ldrb	r3, [r6, #1]
 8005372:	07db      	lsls	r3, r3, #31
		  float dps_scaled_temp = DPS368_get_scaled_temp();				// odczytaj temperature
 8005374:	eeb0 8a40 	vmov.f32	s16, s0
		  if(DPS368.temp.use_meas) {
 8005378:	d415      	bmi.n	80053a6 <SensorsTask+0x1be>
		  if(dps368_press) {											// jak ma byc cisnienie z DPS
 800537a:	2f00      	cmp	r7, #0
 800537c:	f43f af5f 	beq.w	800523e <SensorsTask+0x56>
			  DPS368_start_meas_press(dps368_ovr_press);				// uruchom przetworzenie cisnienia
 8005380:	4d49      	ldr	r5, [pc, #292]	@ (80054a8 <SensorsTask+0x2c0>)
 8005382:	7828      	ldrb	r0, [r5, #0]
 8005384:	f7fe fdd0 	bl	8003f28 <DPS368_start_meas_press>
			  osDelay( calcBusyTime(dps368_ovr_press) + 10);			// zaczekaj na koniec przetwarzania
 8005388:	7828      	ldrb	r0, [r5, #0]
 800538a:	f7fe fd75 	bl	8003e78 <calcBusyTime>
 800538e:	300a      	adds	r0, #10
 8005390:	f005 fb30 	bl	800a9f4 <osDelay>
   			  DPS368.press.value = DPS368_get_press(dps_scaled_temp);	// pobierz cisnienie uzywając temperatury
 8005394:	eeb0 0a48 	vmov.f32	s0, s16
 8005398:	f7fe fe16 	bl	8003fc8 <DPS368_get_press>
 800539c:	ee10 3a10 	vmov	r3, s0
 80053a0:	f8c6 300b 	str.w	r3, [r6, #11]
 80053a4:	e74b      	b.n	800523e <SensorsTask+0x56>
			  DPS368.temp.value = DPS368_calc_temp(dps_scaled_temp);
 80053a6:	f7fe fdaf 	bl	8003f08 <DPS368_calc_temp>
 80053aa:	ee10 3a10 	vmov	r3, s0
 80053ae:	f8c6 3002 	str.w	r3, [r6, #2]
 80053b2:	e7e2      	b.n	800537a <SensorsTask+0x192>
 80053b4:	7877      	ldrb	r7, [r6, #1]
 80053b6:	7ab3      	ldrb	r3, [r6, #10]
 80053b8:	431f      	orrs	r7, r3
		  if(DPS368.sensor_use && (DPS368.temp.use_meas || DPS368.press.use_meas)) {
 80053ba:	f017 0701 	ands.w	r7, r7, #1
 80053be:	f43f af66 	beq.w	800528e <SensorsTask+0xa6>
			  DPS368_start_meas_temp(dps368_ovr_temp);
 80053c2:	4f3a      	ldr	r7, [pc, #232]	@ (80054ac <SensorsTask+0x2c4>)
 80053c4:	7838      	ldrb	r0, [r7, #0]
 80053c6:	f7fe fd81 	bl	8003ecc <DPS368_start_meas_temp>
			  uint32_t dpstim = calcBusyTime(dps368_ovr_temp);
 80053ca:	7838      	ldrb	r0, [r7, #0]
 80053cc:	f7fe fd54 	bl	8003e78 <calcBusyTime>
		if(disp_type == 1) {
 80053d0:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <SensorsTask+0x2bc>)
			  if(DPS368.press.use_meas) dps368_press = 1;				// z DPS bedzie tez cisnienie
 80053d2:	7ab7      	ldrb	r7, [r6, #10]
		if(disp_type == 1) {
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	4285      	cmp	r5, r0
 80053d8:	bf38      	it	cc
 80053da:	4605      	movcc	r5, r0
 80053dc:	2b01      	cmp	r3, #1
			  if(DPS368.press.use_meas) dps368_press = 1;				// z DPS bedzie tez cisnienie
 80053de:	f007 0701 	and.w	r7, r7, #1
		if(disp_type == 1) {
 80053e2:	f47f af59 	bne.w	8005298 <SensorsTask+0xb0>
		  printf("Komenda startu pomiarow wyslana\r\n");
 80053e6:	4832      	ldr	r0, [pc, #200]	@ (80054b0 <SensorsTask+0x2c8>)
 80053e8:	f008 fa0a 	bl	800d800 <puts>
		  printf("Meas interval: %u\r\n", tim_interval);
 80053ec:	4b31      	ldr	r3, [pc, #196]	@ (80054b4 <SensorsTask+0x2cc>)
 80053ee:	4832      	ldr	r0, [pc, #200]	@ (80054b8 <SensorsTask+0x2d0>)
 80053f0:	8819      	ldrh	r1, [r3, #0]
 80053f2:	b289      	uxth	r1, r1
 80053f4:	f008 f99c 	bl	800d730 <iprintf>
 80053f8:	e74e      	b.n	8005298 <SensorsTask+0xb0>
		  if(SHT3.sensor_use && (SHT3.temp.use_meas || SHT3.hum.use_meas)) {
 80053fa:	f898 3001 	ldrb.w	r3, [r8, #1]
 80053fe:	f898 200a 	ldrb.w	r2, [r8, #10]
 8005402:	4313      	orrs	r3, r2
 8005404:	07df      	lsls	r7, r3, #31
 8005406:	f57f af3b 	bpl.w	8005280 <SensorsTask+0x98>
			  SHTC3_start_meas(sht3_mode);
 800540a:	4b2c      	ldr	r3, [pc, #176]	@ (80054bc <SensorsTask+0x2d4>)
			  if(meas_time < 100) meas_time = 100;
 800540c:	2d64      	cmp	r5, #100	@ 0x64
			  SHTC3_start_meas(sht3_mode);
 800540e:	7818      	ldrb	r0, [r3, #0]
			  if(meas_time < 100) meas_time = 100;
 8005410:	bf38      	it	cc
 8005412:	2564      	movcc	r5, #100	@ 0x64
			  SHTC3_start_meas(sht3_mode);
 8005414:	f001 f962 	bl	80066dc <SHTC3_start_meas>
			  if(meas_time < 100) meas_time = 100;
 8005418:	e732      	b.n	8005280 <SensorsTask+0x98>
		  if(BME280.sensor_use && (BME280.temp.use_meas || BME280.press.use_meas || BME280.hum.use_meas) ) {
 800541a:	7ce2      	ldrb	r2, [r4, #19]
 800541c:	7863      	ldrb	r3, [r4, #1]
 800541e:	4313      	orrs	r3, r2
 8005420:	7aa2      	ldrb	r2, [r4, #10]
 8005422:	4313      	orrs	r3, r2
 8005424:	07db      	lsls	r3, r3, #31
 8005426:	f57f af24 	bpl.w	8005272 <SensorsTask+0x8a>
			  BME280_start_meas();
 800542a:	f001 fb29 	bl	8006a80 <BME280_start_meas>
			  if(meas_time < 500) meas_time = 500;
 800542e:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8005432:	e71e      	b.n	8005272 <SensorsTask+0x8a>
		  if(TMP117.sensor_use && TMP117.temp.use_meas) {
 8005434:	f899 5001 	ldrb.w	r5, [r9, #1]
 8005438:	f015 0501 	ands.w	r5, r5, #1
 800543c:	f43f af13 	beq.w	8005266 <SensorsTask+0x7e>
			  TMP117_start_meas(tmp117_avr);
 8005440:	4b1f      	ldr	r3, [pc, #124]	@ (80054c0 <SensorsTask+0x2d8>)
 8005442:	7818      	ldrb	r0, [r3, #0]
 8005444:	f001 f854 	bl	80064f0 <TMP117_start_meas>
			  if(meas_time < 200) meas_time = 200;
 8005448:	25c8      	movs	r5, #200	@ 0xc8
 800544a:	e70c      	b.n	8005266 <SensorsTask+0x7e>
			  MS8607.temp.value = MS8607_get_temp();
 800544c:	f001 f8ca 	bl	80065e4 <MS8607_get_temp>
 8005450:	ee10 3a10 	vmov	r3, s0
 8005454:	f8ca 3002 	str.w	r3, [sl, #2]
		  if(MS8607.press.use_meas) {
 8005458:	f89a 3013 	ldrb.w	r3, [sl, #19]
 800545c:	07d9      	lsls	r1, r3, #31
 800545e:	f57f af74 	bpl.w	800534a <SensorsTask+0x162>
			  MS8607.press.value = MS8607_get_press();
 8005462:	f001 f8c9 	bl	80065f8 <MS8607_get_press>
 8005466:	ed8a 0a05 	vstr	s0, [sl, #20]
 800546a:	e76e      	b.n	800534a <SensorsTask+0x162>
			  BME280.press.value = BME280_get_press();
 800546c:	f001 faac 	bl	80069c8 <BME280_get_press>
 8005470:	ed84 0a05 	vstr	s0, [r4, #20]
 8005474:	e736      	b.n	80052e4 <SensorsTask+0xfc>
			  BME280.temp.value = BME280_get_temp();
 8005476:	f001 fa79 	bl	800696c <BME280_get_temp>
 800547a:	ee10 3a10 	vmov	r3, s0
 800547e:	f8c4 3002 	str.w	r3, [r4, #2]
 8005482:	e72b      	b.n	80052dc <SensorsTask+0xf4>
			  SHT3.temp.value = SHTC3_get_temp(shtc3_values);
 8005484:	4668      	mov	r0, sp
 8005486:	f001 f96b 	bl	8006760 <SHTC3_get_temp>
 800548a:	ee10 3a10 	vmov	r3, s0
 800548e:	f8c8 3002 	str.w	r3, [r8, #2]
 8005492:	e73e      	b.n	8005312 <SensorsTask+0x12a>
 8005494:	08011810 	.word	0x08011810
 8005498:	200006cc 	.word	0x200006cc
 800549c:	200006b4 	.word	0x200006b4
 80054a0:	20000638 	.word	0x20000638
 80054a4:	20000639 	.word	0x20000639
 80054a8:	20000634 	.word	0x20000634
 80054ac:	20000635 	.word	0x20000635
 80054b0:	0801182c 	.word	0x0801182c
 80054b4:	2000063a 	.word	0x2000063a
 80054b8:	08011850 	.word	0x08011850
 80054bc:	20000630 	.word	0x20000630
 80054c0:	20000636 	.word	0x20000636
 80054c4:	2000072c 	.word	0x2000072c
 80054c8:	20000714 	.word	0x20000714
 80054cc:	200006f0 	.word	0x200006f0
 80054d0:	48000400 	.word	0x48000400

080054d4 <_read>:
void _read(void)  {}
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop

080054d8 <ReinitTimer>:
{
 80054d8:	b508      	push	{r3, lr}
	ticksstart = HAL_GetTick();
 80054da:	f001 fc23 	bl	8006d24 <HAL_GetTick>
 80054de:	4b01      	ldr	r3, [pc, #4]	@ (80054e4 <ReinitTimer+0xc>)
 80054e0:	6018      	str	r0, [r3, #0]
}
 80054e2:	bd08      	pop	{r3, pc}
 80054e4:	20000624 	.word	0x20000624

080054e8 <HAL_SYSTICK_Callback>:
}
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop

080054ec <check_powerOn>:
{
 80054ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t timon = HAL_GetTick();
 80054ee:	f001 fc19 	bl	8006d24 <HAL_GetTick>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 80054f2:	4e0f      	ldr	r6, [pc, #60]	@ (8005530 <check_powerOn+0x44>)
	uint32_t timon = HAL_GetTick();
 80054f4:	4605      	mov	r5, r0
	  while(Power_SW_READ() == GPIO_PIN_SET)
 80054f6:	e005      	b.n	8005504 <check_powerOn+0x18>
	    if(HAL_GetTick() - timon > 1000)     // 1 sec pushing
 80054f8:	f001 fc14 	bl	8006d24 <HAL_GetTick>
 80054fc:	1b40      	subs	r0, r0, r5
 80054fe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005502:	d808      	bhi.n	8005516 <check_powerOn+0x2a>
	  while(Power_SW_READ() == GPIO_PIN_SET)
 8005504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005508:	4630      	mov	r0, r6
 800550a:	f002 fde1 	bl	80080d0 <HAL_GPIO_ReadPin>
 800550e:	2801      	cmp	r0, #1
 8005510:	4604      	mov	r4, r0
 8005512:	d0f1      	beq.n	80054f8 <check_powerOn+0xc>
}
 8005514:	bd70      	pop	{r4, r5, r6, pc}
	    	timon = HAL_GetTick();
 8005516:	f001 fc05 	bl	8006d24 <HAL_GetTick>
	        POWER_ON();    // pull-up power supply
 800551a:	4806      	ldr	r0, [pc, #24]	@ (8005534 <check_powerOn+0x48>)
 800551c:	4622      	mov	r2, r4
 800551e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005522:	f002 fddb 	bl	80080dc <HAL_GPIO_WritePin>
}
 8005526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	    	printf("Power ON\r\n");
 800552a:	4803      	ldr	r0, [pc, #12]	@ (8005538 <check_powerOn+0x4c>)
 800552c:	f008 b968 	b.w	800d800 <puts>
 8005530:	48000800 	.word	0x48000800
 8005534:	48000400 	.word	0x48000400
 8005538:	08011864 	.word	0x08011864

0800553c <check_powerOff>:
{
 800553c:	b538      	push	{r3, r4, r5, lr}
  if(Power_SW_READ()) //power button pressed
 800553e:	4824      	ldr	r0, [pc, #144]	@ (80055d0 <check_powerOff+0x94>)
 8005540:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005544:	f002 fdc4 	bl	80080d0 <HAL_GPIO_ReadPin>
 8005548:	b160      	cbz	r0, 8005564 <check_powerOff+0x28>
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 800554a:	4c22      	ldr	r4, [pc, #136]	@ (80055d4 <check_powerOff+0x98>)
	 LED2_ON();
 800554c:	4822      	ldr	r0, [pc, #136]	@ (80055d8 <check_powerOff+0x9c>)
 800554e:	2200      	movs	r2, #0
 8005550:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005554:	f002 fdc2 	bl	80080dc <HAL_GPIO_WritePin>
	 keystate = 1;
 8005558:	4a20      	ldr	r2, [pc, #128]	@ (80055dc <check_powerOff+0xa0>)
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 800555a:	6823      	ldr	r3, [r4, #0]
	 keystate = 1;
 800555c:	2501      	movs	r5, #1
 800555e:	7015      	strb	r5, [r2, #0]
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 8005560:	b99b      	cbnz	r3, 800558a <check_powerOff+0x4e>
}
 8005562:	bd38      	pop	{r3, r4, r5, pc}
	  if(keystate) LED2_OFF();
 8005564:	4c1d      	ldr	r4, [pc, #116]	@ (80055dc <check_powerOff+0xa0>)
	  offTim = HAL_GetTick();   // button released, update offTim
 8005566:	f001 fbdd 	bl	8006d24 <HAL_GetTick>
 800556a:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <check_powerOff+0x98>)
	  if(keystate) LED2_OFF();
 800556c:	7823      	ldrb	r3, [r4, #0]
	  offTim = HAL_GetTick();   // button released, update offTim
 800556e:	6010      	str	r0, [r2, #0]
	  if(keystate) LED2_OFF();
 8005570:	b913      	cbnz	r3, 8005578 <check_powerOff+0x3c>
	  keystate = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	7023      	strb	r3, [r4, #0]
}
 8005576:	bd38      	pop	{r3, r4, r5, pc}
	  if(keystate) LED2_OFF();
 8005578:	4817      	ldr	r0, [pc, #92]	@ (80055d8 <check_powerOff+0x9c>)
 800557a:	2201      	movs	r2, #1
 800557c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005580:	f002 fdac 	bl	80080dc <HAL_GPIO_WritePin>
	  keystate = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	7023      	strb	r3, [r4, #0]
 8005588:	e7f5      	b.n	8005576 <check_powerOff+0x3a>
     if(offTim && HAL_GetTick() - offTim > 2000)    // 2 sec pressed
 800558a:	f001 fbcb 	bl	8006d24 <HAL_GetTick>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	1ac0      	subs	r0, r0, r3
 8005592:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8005596:	d9e4      	bls.n	8005562 <check_powerOff+0x26>
    	 printf("Power off\r\n");
 8005598:	4811      	ldr	r0, [pc, #68]	@ (80055e0 <check_powerOff+0xa4>)
 800559a:	f008 f931 	bl	800d800 <puts>
    	 LED2_OFF();
 800559e:	462a      	mov	r2, r5
 80055a0:	480d      	ldr	r0, [pc, #52]	@ (80055d8 <check_powerOff+0x9c>)
 80055a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055a6:	f002 fd99 	bl	80080dc <HAL_GPIO_WritePin>
    	 LED1_OFF();
 80055aa:	462a      	mov	r2, r5
 80055ac:	480a      	ldr	r0, [pc, #40]	@ (80055d8 <check_powerOff+0x9c>)
 80055ae:	2120      	movs	r1, #32
 80055b0:	f002 fd94 	bl	80080dc <HAL_GPIO_WritePin>
    	 POWER_OFF();
 80055b4:	4808      	ldr	r0, [pc, #32]	@ (80055d8 <check_powerOff+0x9c>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055bc:	f002 fd8e 	bl	80080dc <HAL_GPIO_WritePin>
    	 osDelay(2000);
 80055c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80055c4:	f005 fa16 	bl	800a9f4 <osDelay>
}
 80055c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	 HAL_NVIC_SystemReset();
 80055cc:	f002 b8c8 	b.w	8007760 <HAL_NVIC_SystemReset>
 80055d0:	48000800 	.word	0x48000800
 80055d4:	2000062c 	.word	0x2000062c
 80055d8:	48000400 	.word	0x48000400
 80055dc:	20000620 	.word	0x20000620
 80055e0:	08011870 	.word	0x08011870

080055e4 <HALcalculateCRC>:
{
 80055e4:	b570      	push	{r4, r5, r6, lr}
    HAL_CRC_Init(&hcrc);
 80055e6:	4c09      	ldr	r4, [pc, #36]	@ (800560c <HALcalculateCRC+0x28>)
{
 80055e8:	4605      	mov	r5, r0
    HAL_CRC_Init(&hcrc);
 80055ea:	4620      	mov	r0, r4
{
 80055ec:	460e      	mov	r6, r1
    HAL_CRC_Init(&hcrc);
 80055ee:	f002 f91b 	bl	8007828 <HAL_CRC_Init>
    __HAL_CRC_DR_RESET(&hcrc);
 80055f2:	6820      	ldr	r0, [r4, #0]
 80055f4:	6883      	ldr	r3, [r0, #8]
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6083      	str	r3, [r0, #8]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t*)data, len);
 80055fc:	4632      	mov	r2, r6
 80055fe:	4629      	mov	r1, r5
 8005600:	4620      	mov	r0, r4
 8005602:	f002 f94f 	bl	80078a4 <HAL_CRC_Calculate>
}
 8005606:	b2c0      	uxtb	r0, r0
 8005608:	bd70      	pop	{r4, r5, r6, pc}
 800560a:	bf00      	nop
 800560c:	200004ec 	.word	0x200004ec

08005610 <printCSVheader>:
{
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 8005612:	4862      	ldr	r0, [pc, #392]	@ (800579c <printCSVheader+0x18c>)
 8005614:	f008 f8f4 	bl	800d800 <puts>
	printf("CNT;");
 8005618:	4861      	ldr	r0, [pc, #388]	@ (80057a0 <printCSVheader+0x190>)
 800561a:	f008 f889 	bl	800d730 <iprintf>
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 800561e:	4a61      	ldr	r2, [pc, #388]	@ (80057a4 <printCSVheader+0x194>)
 8005620:	7813      	ldrb	r3, [r2, #0]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b03      	cmp	r3, #3
 8005628:	d03a      	beq.n	80056a0 <printCSVheader+0x90>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 800562a:	4d5f      	ldr	r5, [pc, #380]	@ (80057a8 <printCSVheader+0x198>)
 800562c:	782b      	ldrb	r3, [r5, #0]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d040      	beq.n	80056b8 <printCSVheader+0xa8>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 8005636:	4e5d      	ldr	r6, [pc, #372]	@ (80057ac <printCSVheader+0x19c>)
 8005638:	7833      	ldrb	r3, [r6, #0]
 800563a:	f003 0303 	and.w	r3, r3, #3
 800563e:	2b03      	cmp	r3, #3
 8005640:	d046      	beq.n	80056d0 <printCSVheader+0xc0>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 8005642:	4c5b      	ldr	r4, [pc, #364]	@ (80057b0 <printCSVheader+0x1a0>)
 8005644:	7823      	ldrb	r3, [r4, #0]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	2b03      	cmp	r3, #3
 800564c:	d04c      	beq.n	80056e8 <printCSVheader+0xd8>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 800564e:	4f59      	ldr	r7, [pc, #356]	@ (80057b4 <printCSVheader+0x1a4>)
 8005650:	783b      	ldrb	r3, [r7, #0]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b03      	cmp	r3, #3
 8005658:	d052      	beq.n	8005700 <printCSVheader+0xf0>
	if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("PRESS_BME280;");
 800565a:	782b      	ldrb	r3, [r5, #0]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	2b03      	cmp	r3, #3
 8005662:	d058      	beq.n	8005716 <printCSVheader+0x106>
	if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("PRESS_MS8607;");
 8005664:	7823      	ldrb	r3, [r4, #0]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b03      	cmp	r3, #3
 800566c:	d05e      	beq.n	800572c <printCSVheader+0x11c>
	if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("PRESS_DPS368;");
 800566e:	783b      	ldrb	r3, [r7, #0]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	2b03      	cmp	r3, #3
 8005676:	d064      	beq.n	8005742 <printCSVheader+0x132>
	if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("HUM_BME280;");
 8005678:	782b      	ldrb	r3, [r5, #0]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b03      	cmp	r3, #3
 8005680:	d06a      	beq.n	8005758 <printCSVheader+0x148>
	if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("HUM_SHTC3;");
 8005682:	7833      	ldrb	r3, [r6, #0]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	2b03      	cmp	r3, #3
 800568a:	d070      	beq.n	800576e <printCSVheader+0x15e>
	if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("HUM_MS8607;");
 800568c:	7823      	ldrb	r3, [r4, #0]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b03      	cmp	r3, #3
 8005694:	d076      	beq.n	8005784 <printCSVheader+0x174>
}
 8005696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 800569a:	4840      	ldr	r0, [pc, #256]	@ (800579c <printCSVheader+0x18c>)
 800569c:	f008 b8b0 	b.w	800d800 <puts>
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 80056a0:	7853      	ldrb	r3, [r2, #1]
 80056a2:	07df      	lsls	r7, r3, #31
 80056a4:	d5c1      	bpl.n	800562a <printCSVheader+0x1a>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80056a6:	4d40      	ldr	r5, [pc, #256]	@ (80057a8 <printCSVheader+0x198>)
	if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TEMP_TMP117;");
 80056a8:	4843      	ldr	r0, [pc, #268]	@ (80057b8 <printCSVheader+0x1a8>)
 80056aa:	f008 f841 	bl	800d730 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80056ae:	782b      	ldrb	r3, [r5, #0]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d1be      	bne.n	8005636 <printCSVheader+0x26>
 80056b8:	786b      	ldrb	r3, [r5, #1]
 80056ba:	07de      	lsls	r6, r3, #31
 80056bc:	d5bb      	bpl.n	8005636 <printCSVheader+0x26>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 80056be:	4e3b      	ldr	r6, [pc, #236]	@ (80057ac <printCSVheader+0x19c>)
	if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("TEMP_BME280;");
 80056c0:	483e      	ldr	r0, [pc, #248]	@ (80057bc <printCSVheader+0x1ac>)
 80056c2:	f008 f835 	bl	800d730 <iprintf>
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 80056c6:	7833      	ldrb	r3, [r6, #0]
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d1b8      	bne.n	8005642 <printCSVheader+0x32>
 80056d0:	7873      	ldrb	r3, [r6, #1]
 80056d2:	07dc      	lsls	r4, r3, #31
 80056d4:	d5b5      	bpl.n	8005642 <printCSVheader+0x32>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 80056d6:	4c36      	ldr	r4, [pc, #216]	@ (80057b0 <printCSVheader+0x1a0>)
	if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("TEMP_SHTC3;");
 80056d8:	4839      	ldr	r0, [pc, #228]	@ (80057c0 <printCSVheader+0x1b0>)
 80056da:	f008 f829 	bl	800d730 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 80056de:	7823      	ldrb	r3, [r4, #0]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d1b2      	bne.n	800564e <printCSVheader+0x3e>
 80056e8:	7863      	ldrb	r3, [r4, #1]
 80056ea:	07d8      	lsls	r0, r3, #31
 80056ec:	d5af      	bpl.n	800564e <printCSVheader+0x3e>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 80056ee:	4f31      	ldr	r7, [pc, #196]	@ (80057b4 <printCSVheader+0x1a4>)
	if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("TEMP_MS8607;");
 80056f0:	4834      	ldr	r0, [pc, #208]	@ (80057c4 <printCSVheader+0x1b4>)
 80056f2:	f008 f81d 	bl	800d730 <iprintf>
	if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("TEMP_DPS368;");
 80056f6:	783b      	ldrb	r3, [r7, #0]
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d1ac      	bne.n	800565a <printCSVheader+0x4a>
 8005700:	787b      	ldrb	r3, [r7, #1]
 8005702:	07d9      	lsls	r1, r3, #31
 8005704:	d5a9      	bpl.n	800565a <printCSVheader+0x4a>
 8005706:	4830      	ldr	r0, [pc, #192]	@ (80057c8 <printCSVheader+0x1b8>)
 8005708:	f008 f812 	bl	800d730 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("PRESS_BME280;");
 800570c:	782b      	ldrb	r3, [r5, #0]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b03      	cmp	r3, #3
 8005714:	d1a6      	bne.n	8005664 <printCSVheader+0x54>
 8005716:	7ceb      	ldrb	r3, [r5, #19]
 8005718:	07da      	lsls	r2, r3, #31
 800571a:	d5a3      	bpl.n	8005664 <printCSVheader+0x54>
 800571c:	482b      	ldr	r0, [pc, #172]	@ (80057cc <printCSVheader+0x1bc>)
 800571e:	f008 f807 	bl	800d730 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("PRESS_MS8607;");
 8005722:	7823      	ldrb	r3, [r4, #0]
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	2b03      	cmp	r3, #3
 800572a:	d1a0      	bne.n	800566e <printCSVheader+0x5e>
 800572c:	7ce3      	ldrb	r3, [r4, #19]
 800572e:	07db      	lsls	r3, r3, #31
 8005730:	d59d      	bpl.n	800566e <printCSVheader+0x5e>
 8005732:	4827      	ldr	r0, [pc, #156]	@ (80057d0 <printCSVheader+0x1c0>)
 8005734:	f007 fffc 	bl	800d730 <iprintf>
	if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("PRESS_DPS368;");
 8005738:	783b      	ldrb	r3, [r7, #0]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b03      	cmp	r3, #3
 8005740:	d19a      	bne.n	8005678 <printCSVheader+0x68>
 8005742:	7abb      	ldrb	r3, [r7, #10]
 8005744:	07d8      	lsls	r0, r3, #31
 8005746:	d597      	bpl.n	8005678 <printCSVheader+0x68>
 8005748:	4822      	ldr	r0, [pc, #136]	@ (80057d4 <printCSVheader+0x1c4>)
 800574a:	f007 fff1 	bl	800d730 <iprintf>
	if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("HUM_BME280;");
 800574e:	782b      	ldrb	r3, [r5, #0]
 8005750:	f003 0303 	and.w	r3, r3, #3
 8005754:	2b03      	cmp	r3, #3
 8005756:	d194      	bne.n	8005682 <printCSVheader+0x72>
 8005758:	7aab      	ldrb	r3, [r5, #10]
 800575a:	07d9      	lsls	r1, r3, #31
 800575c:	d591      	bpl.n	8005682 <printCSVheader+0x72>
 800575e:	481e      	ldr	r0, [pc, #120]	@ (80057d8 <printCSVheader+0x1c8>)
 8005760:	f007 ffe6 	bl	800d730 <iprintf>
	if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("HUM_SHTC3;");
 8005764:	7833      	ldrb	r3, [r6, #0]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b03      	cmp	r3, #3
 800576c:	d18e      	bne.n	800568c <printCSVheader+0x7c>
 800576e:	7ab3      	ldrb	r3, [r6, #10]
 8005770:	07da      	lsls	r2, r3, #31
 8005772:	d58b      	bpl.n	800568c <printCSVheader+0x7c>
 8005774:	4819      	ldr	r0, [pc, #100]	@ (80057dc <printCSVheader+0x1cc>)
 8005776:	f007 ffdb 	bl	800d730 <iprintf>
	if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("HUM_MS8607;");
 800577a:	7823      	ldrb	r3, [r4, #0]
 800577c:	f003 0303 	and.w	r3, r3, #3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d188      	bne.n	8005696 <printCSVheader+0x86>
 8005784:	7aa3      	ldrb	r3, [r4, #10]
 8005786:	07db      	lsls	r3, r3, #31
 8005788:	d585      	bpl.n	8005696 <printCSVheader+0x86>
 800578a:	4815      	ldr	r0, [pc, #84]	@ (80057e0 <printCSVheader+0x1d0>)
 800578c:	f007 ffd0 	bl	800d730 <iprintf>
}
 8005790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("\r\n");
 8005794:	4801      	ldr	r0, [pc, #4]	@ (800579c <printCSVheader+0x18c>)
 8005796:	f008 b833 	b.w	800d800 <puts>
 800579a:	bf00      	nop
 800579c:	08011828 	.word	0x08011828
 80057a0:	0801187c 	.word	0x0801187c
 80057a4:	2000072c 	.word	0x2000072c
 80057a8:	200006cc 	.word	0x200006cc
 80057ac:	20000714 	.word	0x20000714
 80057b0:	200006f0 	.word	0x200006f0
 80057b4:	200006b4 	.word	0x200006b4
 80057b8:	08011884 	.word	0x08011884
 80057bc:	08011894 	.word	0x08011894
 80057c0:	080118a4 	.word	0x080118a4
 80057c4:	080118b0 	.word	0x080118b0
 80057c8:	080118c0 	.word	0x080118c0
 80057cc:	080118d0 	.word	0x080118d0
 80057d0:	080118e0 	.word	0x080118e0
 80057d4:	080118f0 	.word	0x080118f0
 80057d8:	08011900 	.word	0x08011900
 80057dc:	0801190c 	.word	0x0801190c
 80057e0:	08011918 	.word	0x08011918

080057e4 <display_values>:
	switch (format)
 80057e4:	2801      	cmp	r0, #1
{
 80057e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (format)
 80057e8:	d002      	beq.n	80057f0 <display_values+0xc>
 80057ea:	2802      	cmp	r0, #2
 80057ec:	d05e      	beq.n	80058ac <display_values+0xc8>
}
 80057ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("-----------------------\r\n");
 80057f0:	48bc      	ldr	r0, [pc, #752]	@ (8005ae4 <display_values+0x300>)
 80057f2:	f008 f805 	bl	800d800 <puts>
		printf("Temperature:\r\n");
 80057f6:	48bc      	ldr	r0, [pc, #752]	@ (8005ae8 <display_values+0x304>)
 80057f8:	f008 f802 	bl	800d800 <puts>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TMP117: %.2f   ", TMP117.temp.value+TMP117.temp.offset);
 80057fc:	4abb      	ldr	r2, [pc, #748]	@ (8005aec <display_values+0x308>)
 80057fe:	7813      	ldrb	r3, [r2, #0]
 8005800:	f003 0303 	and.w	r3, r3, #3
 8005804:	2b03      	cmp	r3, #3
 8005806:	f000 80a1 	beq.w	800594c <display_values+0x168>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("BME280: %.2f   ", BME280.temp.value+BME280.temp.offset);
 800580a:	4db9      	ldr	r5, [pc, #740]	@ (8005af0 <display_values+0x30c>)
 800580c:	782b      	ldrb	r3, [r5, #0]
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	2b03      	cmp	r3, #3
 8005814:	f000 829c 	beq.w	8005d50 <display_values+0x56c>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("SHTC3: %.2f   ", SHT3.temp.value+SHT3.temp.offset);
 8005818:	4eb6      	ldr	r6, [pc, #728]	@ (8005af4 <display_values+0x310>)
 800581a:	7833      	ldrb	r3, [r6, #0]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b03      	cmp	r3, #3
 8005822:	f000 827d 	beq.w	8005d20 <display_values+0x53c>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("MS8607: %.2f   ", MS8607.temp.value+MS8607.temp.offset);
 8005826:	4cb4      	ldr	r4, [pc, #720]	@ (8005af8 <display_values+0x314>)
 8005828:	7823      	ldrb	r3, [r4, #0]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b03      	cmp	r3, #3
 8005830:	f000 825e 	beq.w	8005cf0 <display_values+0x50c>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("DPS368: %.2f   ", DPS368.temp.value+DPS368.temp.offset);
 8005834:	4fb1      	ldr	r7, [pc, #708]	@ (8005afc <display_values+0x318>)
 8005836:	783b      	ldrb	r3, [r7, #0]
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	2b03      	cmp	r3, #3
 800583e:	f000 823f 	beq.w	8005cc0 <display_values+0x4dc>
		printf("\r\n-----------------------\r\n");
 8005842:	48af      	ldr	r0, [pc, #700]	@ (8005b00 <display_values+0x31c>)
 8005844:	f007 ffdc 	bl	800d800 <puts>
		printf("Press:\r\n");
 8005848:	48ae      	ldr	r0, [pc, #696]	@ (8005b04 <display_values+0x320>)
 800584a:	f007 ffd9 	bl	800d800 <puts>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("BME280: %.2f   ", BME280.press.value+BME280.press.offset);
 800584e:	782b      	ldrb	r3, [r5, #0]
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	2b03      	cmp	r3, #3
 8005856:	f000 821f 	beq.w	8005c98 <display_values+0x4b4>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("MS8607: %.2f   ", MS8607.press.value+MS8607.press.offset);
 800585a:	7823      	ldrb	r3, [r4, #0]
 800585c:	f003 0303 	and.w	r3, r3, #3
 8005860:	2b03      	cmp	r3, #3
 8005862:	f000 8205 	beq.w	8005c70 <display_values+0x48c>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("DPS368: %.2f   ", DPS368.press.value+DPS368.press.offset);
 8005866:	783b      	ldrb	r3, [r7, #0]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	2b03      	cmp	r3, #3
 800586e:	f000 81e7 	beq.w	8005c40 <display_values+0x45c>
		printf("\r\n-----------------------\r\n");
 8005872:	48a3      	ldr	r0, [pc, #652]	@ (8005b00 <display_values+0x31c>)
 8005874:	f007 ffc4 	bl	800d800 <puts>
		printf("Hum:\r\n");
 8005878:	48a3      	ldr	r0, [pc, #652]	@ (8005b08 <display_values+0x324>)
 800587a:	f007 ffc1 	bl	800d800 <puts>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("BME280: %.2f   ", BME280.hum.value+BME280.hum.offset);
 800587e:	782b      	ldrb	r3, [r5, #0]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	2b03      	cmp	r3, #3
 8005886:	f000 81c3 	beq.w	8005c10 <display_values+0x42c>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("SHTC3: %.2f   ", SHT3.hum.value+SHT3.hum.offset);
 800588a:	7833      	ldrb	r3, [r6, #0]
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	2b03      	cmp	r3, #3
 8005892:	f000 81a5 	beq.w	8005be0 <display_values+0x3fc>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("MS8607: %.2f   ", MS8607.hum.value+MS8607.hum.offset);
 8005896:	7823      	ldrb	r3, [r4, #0]
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	2b03      	cmp	r3, #3
 800589e:	f000 8187 	beq.w	8005bb0 <display_values+0x3cc>
}
 80058a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("\r\n-----------------------\r\n");
 80058a6:	4896      	ldr	r0, [pc, #600]	@ (8005b00 <display_values+0x31c>)
 80058a8:	f007 bfaa 	b.w	800d800 <puts>
		printf("%u;",++csvcnt);
 80058ac:	4b97      	ldr	r3, [pc, #604]	@ (8005b0c <display_values+0x328>)
 80058ae:	4898      	ldr	r0, [pc, #608]	@ (8005b10 <display_values+0x32c>)
 80058b0:	8819      	ldrh	r1, [r3, #0]
 80058b2:	3101      	adds	r1, #1
 80058b4:	b289      	uxth	r1, r1
 80058b6:	8019      	strh	r1, [r3, #0]
 80058b8:	f007 ff3a 	bl	800d730 <iprintf>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("%.2f;",TMP117.temp.value+TMP117.temp.offset);
 80058bc:	4a8b      	ldr	r2, [pc, #556]	@ (8005aec <display_values+0x308>)
 80058be:	7813      	ldrb	r3, [r2, #0]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	f000 815b 	beq.w	8005b80 <display_values+0x39c>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("%.2f;",BME280.temp.value+BME280.temp.offset);
 80058ca:	4d89      	ldr	r5, [pc, #548]	@ (8005af0 <display_values+0x30c>)
 80058cc:	782b      	ldrb	r3, [r5, #0]
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	f000 813c 	beq.w	8005b50 <display_values+0x36c>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("%.2f;",SHT3.temp.value+SHT3.temp.offset);
 80058d8:	4e86      	ldr	r6, [pc, #536]	@ (8005af4 <display_values+0x310>)
 80058da:	7833      	ldrb	r3, [r6, #0]
 80058dc:	f003 0303 	and.w	r3, r3, #3
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	f000 811d 	beq.w	8005b20 <display_values+0x33c>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("%.2f;",MS8607.temp.value+MS8607.temp.offset);
 80058e6:	4c84      	ldr	r4, [pc, #528]	@ (8005af8 <display_values+0x314>)
 80058e8:	7823      	ldrb	r3, [r4, #0]
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	f000 80e0 	beq.w	8005ab4 <display_values+0x2d0>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("%.2f;",DPS368.temp.value+DPS368.temp.offset);
 80058f4:	4f81      	ldr	r7, [pc, #516]	@ (8005afc <display_values+0x318>)
 80058f6:	783b      	ldrb	r3, [r7, #0]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	f000 80c1 	beq.w	8005a84 <display_values+0x2a0>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("%.2f;",BME280.press.value+BME280.press.offset);
 8005902:	782b      	ldrb	r3, [r5, #0]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	2b03      	cmp	r3, #3
 800590a:	f000 80a7 	beq.w	8005a5c <display_values+0x278>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("%.2f;",MS8607.press.value+MS8607.press.offset);
 800590e:	7823      	ldrb	r3, [r4, #0]
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	2b03      	cmp	r3, #3
 8005916:	f000 808d 	beq.w	8005a34 <display_values+0x250>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("%.2f;",DPS368.press.value+DPS368.press.offset);
 800591a:	783b      	ldrb	r3, [r7, #0]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	2b03      	cmp	r3, #3
 8005922:	d070      	beq.n	8005a06 <display_values+0x222>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("%.2f;",BME280.hum.value+BME280.hum.offset);
 8005924:	782b      	ldrb	r3, [r5, #0]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d054      	beq.n	80059d8 <display_values+0x1f4>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("%.2f;",SHT3.hum.value+SHT3.hum.offset);
 800592e:	7833      	ldrb	r3, [r6, #0]
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	2b03      	cmp	r3, #3
 8005936:	d038      	beq.n	80059aa <display_values+0x1c6>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("%.2f;",MS8607.hum.value+MS8607.hum.offset);
 8005938:	7823      	ldrb	r3, [r4, #0]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b03      	cmp	r3, #3
 8005940:	d01c      	beq.n	800597c <display_values+0x198>
}
 8005942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("\r\n");
 8005946:	4873      	ldr	r0, [pc, #460]	@ (8005b14 <display_values+0x330>)
 8005948:	f007 bf5a 	b.w	800d800 <puts>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("TMP117: %.2f   ", TMP117.temp.value+TMP117.temp.offset);
 800594c:	7853      	ldrb	r3, [r2, #1]
 800594e:	07df      	lsls	r7, r3, #31
 8005950:	f57f af5b 	bpl.w	800580a <display_values+0x26>
 8005954:	f8d2 0002 	ldr.w	r0, [r2, #2]
 8005958:	f8d2 3006 	ldr.w	r3, [r2, #6]
 800595c:	ee07 0a90 	vmov	s15, r0
 8005960:	ee07 3a10 	vmov	s14, r3
 8005964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005968:	ee17 0a90 	vmov	r0, s15
 800596c:	f7fa fdec 	bl	8000548 <__aeabi_f2d>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4868      	ldr	r0, [pc, #416]	@ (8005b18 <display_values+0x334>)
 8005976:	f007 fedb 	bl	800d730 <iprintf>
 800597a:	e746      	b.n	800580a <display_values+0x26>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("%.2f;",MS8607.hum.value+MS8607.hum.offset);
 800597c:	7aa3      	ldrb	r3, [r4, #10]
 800597e:	07db      	lsls	r3, r3, #31
 8005980:	d5df      	bpl.n	8005942 <display_values+0x15e>
 8005982:	f8d4 300f 	ldr.w	r3, [r4, #15]
 8005986:	f8d4 000b 	ldr.w	r0, [r4, #11]
 800598a:	ee07 3a10 	vmov	s14, r3
 800598e:	ee07 0a90 	vmov	s15, r0
 8005992:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005996:	ee17 0a90 	vmov	r0, s15
 800599a:	f7fa fdd5 	bl	8000548 <__aeabi_f2d>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	485e      	ldr	r0, [pc, #376]	@ (8005b1c <display_values+0x338>)
 80059a4:	f007 fec4 	bl	800d730 <iprintf>
 80059a8:	e7cb      	b.n	8005942 <display_values+0x15e>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("%.2f;",SHT3.hum.value+SHT3.hum.offset);
 80059aa:	7ab3      	ldrb	r3, [r6, #10]
 80059ac:	07da      	lsls	r2, r3, #31
 80059ae:	d5c3      	bpl.n	8005938 <display_values+0x154>
 80059b0:	f8d6 300f 	ldr.w	r3, [r6, #15]
 80059b4:	f8d6 000b 	ldr.w	r0, [r6, #11]
 80059b8:	ee07 3a10 	vmov	s14, r3
 80059bc:	ee07 0a90 	vmov	s15, r0
 80059c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059c4:	ee17 0a90 	vmov	r0, s15
 80059c8:	f7fa fdbe 	bl	8000548 <__aeabi_f2d>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4852      	ldr	r0, [pc, #328]	@ (8005b1c <display_values+0x338>)
 80059d2:	f007 fead 	bl	800d730 <iprintf>
 80059d6:	e7af      	b.n	8005938 <display_values+0x154>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("%.2f;",BME280.hum.value+BME280.hum.offset);
 80059d8:	7aab      	ldrb	r3, [r5, #10]
 80059da:	07d9      	lsls	r1, r3, #31
 80059dc:	d5a7      	bpl.n	800592e <display_values+0x14a>
 80059de:	f8d5 300f 	ldr.w	r3, [r5, #15]
 80059e2:	f8d5 000b 	ldr.w	r0, [r5, #11]
 80059e6:	ee07 3a10 	vmov	s14, r3
 80059ea:	ee07 0a90 	vmov	s15, r0
 80059ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059f2:	ee17 0a90 	vmov	r0, s15
 80059f6:	f7fa fda7 	bl	8000548 <__aeabi_f2d>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4847      	ldr	r0, [pc, #284]	@ (8005b1c <display_values+0x338>)
 8005a00:	f007 fe96 	bl	800d730 <iprintf>
 8005a04:	e793      	b.n	800592e <display_values+0x14a>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("%.2f;",DPS368.press.value+DPS368.press.offset);
 8005a06:	7abb      	ldrb	r3, [r7, #10]
 8005a08:	07d8      	lsls	r0, r3, #31
 8005a0a:	d58b      	bpl.n	8005924 <display_values+0x140>
 8005a0c:	f8d7 300f 	ldr.w	r3, [r7, #15]
 8005a10:	f8d7 000b 	ldr.w	r0, [r7, #11]
 8005a14:	ee07 3a10 	vmov	s14, r3
 8005a18:	ee07 0a90 	vmov	s15, r0
 8005a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a20:	ee17 0a90 	vmov	r0, s15
 8005a24:	f7fa fd90 	bl	8000548 <__aeabi_f2d>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	483b      	ldr	r0, [pc, #236]	@ (8005b1c <display_values+0x338>)
 8005a2e:	f007 fe7f 	bl	800d730 <iprintf>
 8005a32:	e777      	b.n	8005924 <display_values+0x140>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("%.2f;",MS8607.press.value+MS8607.press.offset);
 8005a34:	7ce3      	ldrb	r3, [r4, #19]
 8005a36:	07db      	lsls	r3, r3, #31
 8005a38:	f57f af6f 	bpl.w	800591a <display_values+0x136>
 8005a3c:	ed94 7a05 	vldr	s14, [r4, #20]
 8005a40:	edd4 7a06 	vldr	s15, [r4, #24]
 8005a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a48:	ee17 0a90 	vmov	r0, s15
 8005a4c:	f7fa fd7c 	bl	8000548 <__aeabi_f2d>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4831      	ldr	r0, [pc, #196]	@ (8005b1c <display_values+0x338>)
 8005a56:	f007 fe6b 	bl	800d730 <iprintf>
 8005a5a:	e75e      	b.n	800591a <display_values+0x136>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("%.2f;",BME280.press.value+BME280.press.offset);
 8005a5c:	7ceb      	ldrb	r3, [r5, #19]
 8005a5e:	07da      	lsls	r2, r3, #31
 8005a60:	f57f af55 	bpl.w	800590e <display_values+0x12a>
 8005a64:	ed95 7a05 	vldr	s14, [r5, #20]
 8005a68:	edd5 7a06 	vldr	s15, [r5, #24]
 8005a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a70:	ee17 0a90 	vmov	r0, s15
 8005a74:	f7fa fd68 	bl	8000548 <__aeabi_f2d>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4827      	ldr	r0, [pc, #156]	@ (8005b1c <display_values+0x338>)
 8005a7e:	f007 fe57 	bl	800d730 <iprintf>
 8005a82:	e744      	b.n	800590e <display_values+0x12a>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("%.2f;",DPS368.temp.value+DPS368.temp.offset);
 8005a84:	787b      	ldrb	r3, [r7, #1]
 8005a86:	07d9      	lsls	r1, r3, #31
 8005a88:	f57f af3b 	bpl.w	8005902 <display_values+0x11e>
 8005a8c:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8005a90:	f8d7 0002 	ldr.w	r0, [r7, #2]
 8005a94:	ee07 3a10 	vmov	s14, r3
 8005a98:	ee07 0a90 	vmov	s15, r0
 8005a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aa0:	ee17 0a90 	vmov	r0, s15
 8005aa4:	f7fa fd50 	bl	8000548 <__aeabi_f2d>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	481b      	ldr	r0, [pc, #108]	@ (8005b1c <display_values+0x338>)
 8005aae:	f007 fe3f 	bl	800d730 <iprintf>
 8005ab2:	e726      	b.n	8005902 <display_values+0x11e>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("%.2f;",MS8607.temp.value+MS8607.temp.offset);
 8005ab4:	7863      	ldrb	r3, [r4, #1]
 8005ab6:	07d8      	lsls	r0, r3, #31
 8005ab8:	f57f af1c 	bpl.w	80058f4 <display_values+0x110>
 8005abc:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8005ac0:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8005ac4:	ee07 3a10 	vmov	s14, r3
 8005ac8:	ee07 0a90 	vmov	s15, r0
 8005acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ad0:	ee17 0a90 	vmov	r0, s15
 8005ad4:	f7fa fd38 	bl	8000548 <__aeabi_f2d>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	480f      	ldr	r0, [pc, #60]	@ (8005b1c <display_values+0x338>)
 8005ade:	f007 fe27 	bl	800d730 <iprintf>
 8005ae2:	e707      	b.n	80058f4 <display_values+0x110>
 8005ae4:	08011924 	.word	0x08011924
 8005ae8:	08011940 	.word	0x08011940
 8005aec:	2000072c 	.word	0x2000072c
 8005af0:	200006cc 	.word	0x200006cc
 8005af4:	20000714 	.word	0x20000714
 8005af8:	200006f0 	.word	0x200006f0
 8005afc:	200006b4 	.word	0x200006b4
 8005b00:	080119a0 	.word	0x080119a0
 8005b04:	080119bc 	.word	0x080119bc
 8005b08:	080119c4 	.word	0x080119c4
 8005b0c:	200002b0 	.word	0x200002b0
 8005b10:	080119cc 	.word	0x080119cc
 8005b14:	08011828 	.word	0x08011828
 8005b18:	08011950 	.word	0x08011950
 8005b1c:	080119d0 	.word	0x080119d0
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("%.2f;",SHT3.temp.value+SHT3.temp.offset);
 8005b20:	7873      	ldrb	r3, [r6, #1]
 8005b22:	07dc      	lsls	r4, r3, #31
 8005b24:	f57f aedf 	bpl.w	80058e6 <display_values+0x102>
 8005b28:	f8d6 3006 	ldr.w	r3, [r6, #6]
 8005b2c:	f8d6 0002 	ldr.w	r0, [r6, #2]
 8005b30:	ee07 3a10 	vmov	s14, r3
 8005b34:	ee07 0a90 	vmov	s15, r0
 8005b38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b3c:	ee17 0a90 	vmov	r0, s15
 8005b40:	f7fa fd02 	bl	8000548 <__aeabi_f2d>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	488d      	ldr	r0, [pc, #564]	@ (8005d80 <display_values+0x59c>)
 8005b4a:	f007 fdf1 	bl	800d730 <iprintf>
 8005b4e:	e6ca      	b.n	80058e6 <display_values+0x102>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("%.2f;",BME280.temp.value+BME280.temp.offset);
 8005b50:	786b      	ldrb	r3, [r5, #1]
 8005b52:	07de      	lsls	r6, r3, #31
 8005b54:	f57f aec0 	bpl.w	80058d8 <display_values+0xf4>
 8005b58:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8005b5c:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8005b60:	ee07 3a10 	vmov	s14, r3
 8005b64:	ee07 0a90 	vmov	s15, r0
 8005b68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b6c:	ee17 0a90 	vmov	r0, s15
 8005b70:	f7fa fcea 	bl	8000548 <__aeabi_f2d>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4881      	ldr	r0, [pc, #516]	@ (8005d80 <display_values+0x59c>)
 8005b7a:	f007 fdd9 	bl	800d730 <iprintf>
 8005b7e:	e6ab      	b.n	80058d8 <display_values+0xf4>
		if(TMP117.present && TMP117.sensor_use && TMP117.temp.use_meas) printf("%.2f;",TMP117.temp.value+TMP117.temp.offset);
 8005b80:	7853      	ldrb	r3, [r2, #1]
 8005b82:	07df      	lsls	r7, r3, #31
 8005b84:	f57f aea1 	bpl.w	80058ca <display_values+0xe6>
 8005b88:	f8d2 0002 	ldr.w	r0, [r2, #2]
 8005b8c:	f8d2 3006 	ldr.w	r3, [r2, #6]
 8005b90:	ee07 0a90 	vmov	s15, r0
 8005b94:	ee07 3a10 	vmov	s14, r3
 8005b98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b9c:	ee17 0a90 	vmov	r0, s15
 8005ba0:	f7fa fcd2 	bl	8000548 <__aeabi_f2d>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4875      	ldr	r0, [pc, #468]	@ (8005d80 <display_values+0x59c>)
 8005baa:	f007 fdc1 	bl	800d730 <iprintf>
 8005bae:	e68c      	b.n	80058ca <display_values+0xe6>
		if(MS8607.present && MS8607.sensor_use && MS8607.hum.use_meas) printf("MS8607: %.2f   ", MS8607.hum.value+MS8607.hum.offset);
 8005bb0:	7aa3      	ldrb	r3, [r4, #10]
 8005bb2:	07db      	lsls	r3, r3, #31
 8005bb4:	f57f ae75 	bpl.w	80058a2 <display_values+0xbe>
 8005bb8:	f8d4 300f 	ldr.w	r3, [r4, #15]
 8005bbc:	f8d4 000b 	ldr.w	r0, [r4, #11]
 8005bc0:	ee07 3a10 	vmov	s14, r3
 8005bc4:	ee07 0a90 	vmov	s15, r0
 8005bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bcc:	ee17 0a90 	vmov	r0, s15
 8005bd0:	f7fa fcba 	bl	8000548 <__aeabi_f2d>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	486a      	ldr	r0, [pc, #424]	@ (8005d84 <display_values+0x5a0>)
 8005bda:	f007 fda9 	bl	800d730 <iprintf>
 8005bde:	e660      	b.n	80058a2 <display_values+0xbe>
		if(SHT3.present && SHT3.sensor_use && SHT3.hum.use_meas) printf("SHTC3: %.2f   ", SHT3.hum.value+SHT3.hum.offset);
 8005be0:	7ab3      	ldrb	r3, [r6, #10]
 8005be2:	07da      	lsls	r2, r3, #31
 8005be4:	f57f ae57 	bpl.w	8005896 <display_values+0xb2>
 8005be8:	f8d6 300f 	ldr.w	r3, [r6, #15]
 8005bec:	f8d6 000b 	ldr.w	r0, [r6, #11]
 8005bf0:	ee07 3a10 	vmov	s14, r3
 8005bf4:	ee07 0a90 	vmov	s15, r0
 8005bf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bfc:	ee17 0a90 	vmov	r0, s15
 8005c00:	f7fa fca2 	bl	8000548 <__aeabi_f2d>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	485f      	ldr	r0, [pc, #380]	@ (8005d88 <display_values+0x5a4>)
 8005c0a:	f007 fd91 	bl	800d730 <iprintf>
 8005c0e:	e642      	b.n	8005896 <display_values+0xb2>
		if(BME280.present && BME280.sensor_use && BME280.hum.use_meas) printf("BME280: %.2f   ", BME280.hum.value+BME280.hum.offset);
 8005c10:	7aab      	ldrb	r3, [r5, #10]
 8005c12:	07d9      	lsls	r1, r3, #31
 8005c14:	f57f ae39 	bpl.w	800588a <display_values+0xa6>
 8005c18:	f8d5 300f 	ldr.w	r3, [r5, #15]
 8005c1c:	f8d5 000b 	ldr.w	r0, [r5, #11]
 8005c20:	ee07 3a10 	vmov	s14, r3
 8005c24:	ee07 0a90 	vmov	s15, r0
 8005c28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c2c:	ee17 0a90 	vmov	r0, s15
 8005c30:	f7fa fc8a 	bl	8000548 <__aeabi_f2d>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4854      	ldr	r0, [pc, #336]	@ (8005d8c <display_values+0x5a8>)
 8005c3a:	f007 fd79 	bl	800d730 <iprintf>
 8005c3e:	e624      	b.n	800588a <display_values+0xa6>
		if(DPS368.present && DPS368.sensor_use && DPS368.press.use_meas) printf("DPS368: %.2f   ", DPS368.press.value+DPS368.press.offset);
 8005c40:	7abb      	ldrb	r3, [r7, #10]
 8005c42:	07d8      	lsls	r0, r3, #31
 8005c44:	f57f ae15 	bpl.w	8005872 <display_values+0x8e>
 8005c48:	f8d7 300f 	ldr.w	r3, [r7, #15]
 8005c4c:	f8d7 000b 	ldr.w	r0, [r7, #11]
 8005c50:	ee07 3a10 	vmov	s14, r3
 8005c54:	ee07 0a90 	vmov	s15, r0
 8005c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c5c:	ee17 0a90 	vmov	r0, s15
 8005c60:	f7fa fc72 	bl	8000548 <__aeabi_f2d>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4849      	ldr	r0, [pc, #292]	@ (8005d90 <display_values+0x5ac>)
 8005c6a:	f007 fd61 	bl	800d730 <iprintf>
 8005c6e:	e600      	b.n	8005872 <display_values+0x8e>
		if(MS8607.present && MS8607.sensor_use && MS8607.press.use_meas) printf("MS8607: %.2f   ", MS8607.press.value+MS8607.press.offset);
 8005c70:	7ce3      	ldrb	r3, [r4, #19]
 8005c72:	07db      	lsls	r3, r3, #31
 8005c74:	f57f adf7 	bpl.w	8005866 <display_values+0x82>
 8005c78:	ed94 7a05 	vldr	s14, [r4, #20]
 8005c7c:	edd4 7a06 	vldr	s15, [r4, #24]
 8005c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c84:	ee17 0a90 	vmov	r0, s15
 8005c88:	f7fa fc5e 	bl	8000548 <__aeabi_f2d>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	483c      	ldr	r0, [pc, #240]	@ (8005d84 <display_values+0x5a0>)
 8005c92:	f007 fd4d 	bl	800d730 <iprintf>
 8005c96:	e5e6      	b.n	8005866 <display_values+0x82>
		if(BME280.present && BME280.sensor_use && BME280.press.use_meas) printf("BME280: %.2f   ", BME280.press.value+BME280.press.offset);
 8005c98:	7ceb      	ldrb	r3, [r5, #19]
 8005c9a:	07da      	lsls	r2, r3, #31
 8005c9c:	f57f addd 	bpl.w	800585a <display_values+0x76>
 8005ca0:	ed95 7a05 	vldr	s14, [r5, #20]
 8005ca4:	edd5 7a06 	vldr	s15, [r5, #24]
 8005ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cac:	ee17 0a90 	vmov	r0, s15
 8005cb0:	f7fa fc4a 	bl	8000548 <__aeabi_f2d>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4834      	ldr	r0, [pc, #208]	@ (8005d8c <display_values+0x5a8>)
 8005cba:	f007 fd39 	bl	800d730 <iprintf>
 8005cbe:	e5cc      	b.n	800585a <display_values+0x76>
		if(DPS368.present && DPS368.sensor_use && DPS368.temp.use_meas) printf("DPS368: %.2f   ", DPS368.temp.value+DPS368.temp.offset);
 8005cc0:	787b      	ldrb	r3, [r7, #1]
 8005cc2:	07d9      	lsls	r1, r3, #31
 8005cc4:	f57f adbd 	bpl.w	8005842 <display_values+0x5e>
 8005cc8:	f8d7 3006 	ldr.w	r3, [r7, #6]
 8005ccc:	f8d7 0002 	ldr.w	r0, [r7, #2]
 8005cd0:	ee07 3a10 	vmov	s14, r3
 8005cd4:	ee07 0a90 	vmov	s15, r0
 8005cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cdc:	ee17 0a90 	vmov	r0, s15
 8005ce0:	f7fa fc32 	bl	8000548 <__aeabi_f2d>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4829      	ldr	r0, [pc, #164]	@ (8005d90 <display_values+0x5ac>)
 8005cea:	f007 fd21 	bl	800d730 <iprintf>
 8005cee:	e5a8      	b.n	8005842 <display_values+0x5e>
		if(MS8607.present && MS8607.sensor_use && MS8607.temp.use_meas) printf("MS8607: %.2f   ", MS8607.temp.value+MS8607.temp.offset);
 8005cf0:	7863      	ldrb	r3, [r4, #1]
 8005cf2:	07d8      	lsls	r0, r3, #31
 8005cf4:	f57f ad9e 	bpl.w	8005834 <display_values+0x50>
 8005cf8:	f8d4 3006 	ldr.w	r3, [r4, #6]
 8005cfc:	f8d4 0002 	ldr.w	r0, [r4, #2]
 8005d00:	ee07 3a10 	vmov	s14, r3
 8005d04:	ee07 0a90 	vmov	s15, r0
 8005d08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d0c:	ee17 0a90 	vmov	r0, s15
 8005d10:	f7fa fc1a 	bl	8000548 <__aeabi_f2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	481a      	ldr	r0, [pc, #104]	@ (8005d84 <display_values+0x5a0>)
 8005d1a:	f007 fd09 	bl	800d730 <iprintf>
 8005d1e:	e589      	b.n	8005834 <display_values+0x50>
		if(SHT3.present && SHT3.sensor_use && SHT3.temp.use_meas) printf("SHTC3: %.2f   ", SHT3.temp.value+SHT3.temp.offset);
 8005d20:	7873      	ldrb	r3, [r6, #1]
 8005d22:	07dc      	lsls	r4, r3, #31
 8005d24:	f57f ad7f 	bpl.w	8005826 <display_values+0x42>
 8005d28:	f8d6 3006 	ldr.w	r3, [r6, #6]
 8005d2c:	f8d6 0002 	ldr.w	r0, [r6, #2]
 8005d30:	ee07 3a10 	vmov	s14, r3
 8005d34:	ee07 0a90 	vmov	s15, r0
 8005d38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d3c:	ee17 0a90 	vmov	r0, s15
 8005d40:	f7fa fc02 	bl	8000548 <__aeabi_f2d>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	480f      	ldr	r0, [pc, #60]	@ (8005d88 <display_values+0x5a4>)
 8005d4a:	f007 fcf1 	bl	800d730 <iprintf>
 8005d4e:	e56a      	b.n	8005826 <display_values+0x42>
		if(BME280.present && BME280.sensor_use && BME280.temp.use_meas) printf("BME280: %.2f   ", BME280.temp.value+BME280.temp.offset);
 8005d50:	786b      	ldrb	r3, [r5, #1]
 8005d52:	07de      	lsls	r6, r3, #31
 8005d54:	f57f ad60 	bpl.w	8005818 <display_values+0x34>
 8005d58:	f8d5 3006 	ldr.w	r3, [r5, #6]
 8005d5c:	f8d5 0002 	ldr.w	r0, [r5, #2]
 8005d60:	ee07 3a10 	vmov	s14, r3
 8005d64:	ee07 0a90 	vmov	s15, r0
 8005d68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d6c:	ee17 0a90 	vmov	r0, s15
 8005d70:	f7fa fbea 	bl	8000548 <__aeabi_f2d>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4804      	ldr	r0, [pc, #16]	@ (8005d8c <display_values+0x5a8>)
 8005d7a:	f007 fcd9 	bl	800d730 <iprintf>
 8005d7e:	e54b      	b.n	8005818 <display_values+0x34>
 8005d80:	080119d0 	.word	0x080119d0
 8005d84:	08011980 	.word	0x08011980
 8005d88:	08011970 	.word	0x08011970
 8005d8c:	08011960 	.word	0x08011960
 8005d90:	08011990 	.word	0x08011990

08005d94 <getConfVars>:
{
 8005d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  BME280.sensor_use = config.BME280_use;
 8005d98:	495f      	ldr	r1, [pc, #380]	@ (8005f18 <getConfVars+0x184>)
	  SHT3.sensor_use = config.SHT3_use;
 8005d9a:	4b60      	ldr	r3, [pc, #384]	@ (8005f1c <getConfVars+0x188>)
	  BME280.sensor_use = config.BME280_use;
 8005d9c:	8808      	ldrh	r0, [r1, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8005d9e:	4e60      	ldr	r6, [pc, #384]	@ (8005f20 <getConfVars+0x18c>)
 8005da0:	7bda      	ldrb	r2, [r3, #15]
	  MS8607.sensor_use = config.MS8607_use;
 8005da2:	7e1d      	ldrb	r5, [r3, #24]
	  DPS368.sensor_use = config.DPS368_use;
 8005da4:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8005f28 <getConfVars+0x194>
	  TMP117.sensor_use = config.TMP117_use;
 8005da8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8005f2c <getConfVars+0x198>
	  TMP117.sensor_conf = config.TMP117_conf;
 8005dac:	7a9c      	ldrb	r4, [r3, #10]
	  TMP117.sensor_use = config.TMP117_use;
 8005dae:	f8bc e000 	ldrh.w	lr, [ip]
	  BME280.sensor_use = config.BME280_use;
 8005db2:	f893 7025 	ldrb.w	r7, [r3, #37]	@ 0x25
	  DPS368.sensor_use = config.DPS368_use;
 8005db6:	f893 b032 	ldrb.w	fp, [r3, #50]	@ 0x32
	  BME280.press.use_meas = config.BME280_p_use;
 8005dba:	f891 a013 	ldrb.w	sl, [r1, #19]
{
 8005dbe:	b087      	sub	sp, #28
	  BME280.sensor_use = config.BME280_use;
 8005dc0:	f420 709f 	bic.w	r0, r0, #318	@ 0x13e
	  SHT3.sensor_use = config.SHT3_use;
 8005dc4:	9200      	str	r2, [sp, #0]
	  BME280.sensor_use = config.BME280_use;
 8005dc6:	9002      	str	r0, [sp, #8]
	  MS8607.sensor_use = config.MS8607_use;
 8005dc8:	4a56      	ldr	r2, [pc, #344]	@ (8005f24 <getConfVars+0x190>)
	  SHT3.sensor_use = config.SHT3_use;
 8005dca:	8830      	ldrh	r0, [r6, #0]
	  MS8607.sensor_use = config.MS8607_use;
 8005dcc:	9501      	str	r5, [sp, #4]
	  SHT3.sensor_use = config.SHT3_use;
 8005dce:	f420 759f 	bic.w	r5, r0, #318	@ 0x13e
	  MS8607.sensor_use = config.MS8607_use;
 8005dd2:	8810      	ldrh	r0, [r2, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8005dd4:	9503      	str	r5, [sp, #12]
	  MS8607.sensor_use = config.MS8607_use;
 8005dd6:	f420 799f 	bic.w	r9, r0, #318	@ 0x13e
	  DPS368.sensor_use = config.DPS368_use;
 8005dda:	f8b8 0000 	ldrh.w	r0, [r8]
	  MS8607.sensor_use = config.MS8607_use;
 8005dde:	f8cd 9010 	str.w	r9, [sp, #16]
	  DPS368.sensor_use = config.DPS368_use;
 8005de2:	f420 799f 	bic.w	r9, r0, #318	@ 0x13e
 8005de6:	f8cd 9014 	str.w	r9, [sp, #20]
	  TMP117.temp.offset = config.TMP117_t_offset;
 8005dea:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8005dee:	f8cc 0006 	str.w	r0, [ip, #6]
	  BME280.temp.offset = config.BME280_t_offset;
 8005df2:	f8d3 0026 	ldr.w	r0, [r3, #38]	@ 0x26
 8005df6:	f8c1 0006 	str.w	r0, [r1, #6]
	  MS8607.temp.offset = config.MS8607_t_offset;
 8005dfa:	f8d3 0019 	ldr.w	r0, [r3, #25]
 8005dfe:	f8c2 0006 	str.w	r0, [r2, #6]
	  DPS368.temp.offset = config.DPS368_t_offset;
 8005e02:	f8d3 0033 	ldr.w	r0, [r3, #51]	@ 0x33
 8005e06:	f8c8 0006 	str.w	r0, [r8, #6]
	  TMP117.sensor_use = config.TMP117_use;
 8005e0a:	0060      	lsls	r0, r4, #1
 8005e0c:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8005e10:	f3c4 1440 	ubfx	r4, r4, #5, #1
	  MS8607.sensor_use = config.MS8607_use;
 8005e14:	9d01      	ldr	r5, [sp, #4]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8005e16:	f892 9013 	ldrb.w	r9, [r2, #19]
	  TMP117.sensor_use = config.TMP117_use;
 8005e1a:	f42e 7e9f 	bic.w	lr, lr, #318	@ 0x13e
 8005e1e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8005e22:	ea40 000e 	orr.w	r0, r0, lr
	  BME280.sensor_use = config.BME280_use;
 8005e26:	007c      	lsls	r4, r7, #1
	  TMP117.sensor_use = config.TMP117_use;
 8005e28:	f8ac 0000 	strh.w	r0, [ip]
	  BME280.sensor_use = config.BME280_use;
 8005e2c:	f004 043e 	and.w	r4, r4, #62	@ 0x3e
	  MS8607.sensor_use = config.MS8607_use;
 8005e30:	ea4f 0c45 	mov.w	ip, r5, lsl #1
	  BME280.sensor_use = config.BME280_use;
 8005e34:	f3c7 1540 	ubfx	r5, r7, #5, #1
 8005e38:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8005e3c:	9d02      	ldr	r5, [sp, #8]
	  SHT3.sensor_use = config.SHT3_use;
 8005e3e:	9800      	ldr	r0, [sp, #0]
	  BME280.sensor_use = config.BME280_use;
 8005e40:	432c      	orrs	r4, r5
 8005e42:	800c      	strh	r4, [r1, #0]
	  SHT3.sensor_use = config.SHT3_use;
 8005e44:	9c00      	ldr	r4, [sp, #0]
 8005e46:	9d03      	ldr	r5, [sp, #12]
 8005e48:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 8005e4c:	f3c4 1440 	ubfx	r4, r4, #5, #1
 8005e50:	f00e 0e3e 	and.w	lr, lr, #62	@ 0x3e
 8005e54:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
 8005e58:	ea4e 0e05 	orr.w	lr, lr, r5
	  MS8607.sensor_use = config.MS8607_use;
 8005e5c:	9d01      	ldr	r5, [sp, #4]
	  SHT3.sensor_use = config.SHT3_use;
 8005e5e:	f8a6 e000 	strh.w	lr, [r6]
	  MS8607.sensor_use = config.MS8607_use;
 8005e62:	f00c 0c3e 	and.w	ip, ip, #62	@ 0x3e
 8005e66:	f3c5 1e40 	ubfx	lr, r5, #5, #1
 8005e6a:	9d04      	ldr	r5, [sp, #16]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8005e6c:	9c00      	ldr	r4, [sp, #0]
	  MS8607.sensor_use = config.MS8607_use;
 8005e6e:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
 8005e72:	ea4c 0c05 	orr.w	ip, ip, r5
	  DPS368.sensor_use = config.DPS368_use;
 8005e76:	ea4f 004b 	mov.w	r0, fp, lsl #1
	  MS8607.sensor_use = config.MS8607_use;
 8005e7a:	f8a2 c000 	strh.w	ip, [r2]
	  DPS368.sensor_use = config.DPS368_use;
 8005e7e:	9d05      	ldr	r5, [sp, #20]
 8005e80:	f3cb 1c40 	ubfx	ip, fp, #5, #1
 8005e84:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 8005e88:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 8005e8c:	4328      	orrs	r0, r5
 8005e8e:	f8a8 0000 	strh.w	r0, [r8]
	  SHT3.temp.offset = config.SHT3_t_offset;
 8005e92:	6918      	ldr	r0, [r3, #16]
 8005e94:	f8c6 0006 	str.w	r0, [r6, #6]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8005e98:	9d01      	ldr	r5, [sp, #4]
	  BME280.press.offset = config.BME280_p_offset;
 8005e9a:	f8d3 002e 	ldr.w	r0, [r3, #46]	@ 0x2e
 8005e9e:	6188      	str	r0, [r1, #24]
	  BME280.press.use_meas = config.BME280_p_use;
 8005ea0:	ea4f 1ed7 	mov.w	lr, r7, lsr #7
 8005ea4:	f36e 0a00 	bfi	sl, lr, #0, #1
	  MS8607.press.use_meas = config.MS8607_p_use;
 8005ea8:	ea4f 1ed5 	mov.w	lr, r5, lsr #7
	  MS8607.press.offset = config.MS8607_p_offset;
 8005eac:	f8d3 0021 	ldr.w	r0, [r3, #33]	@ 0x21
 8005eb0:	6190      	str	r0, [r2, #24]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8005eb2:	f36e 0900 	bfi	r9, lr, #0, #1
	  BME280.press.use_meas = config.BME280_p_use;
 8005eb6:	f881 a013 	strb.w	sl, [r1, #19]
	  MS8607.press.use_meas = config.MS8607_p_use;
 8005eba:	f882 9013 	strb.w	r9, [r2, #19]
	  DPS368.press.offset = config.DPS368_p_offset;
 8005ebe:	f8d3 0037 	ldr.w	r0, [r3, #55]	@ 0x37
 8005ec2:	f8c8 000f 	str.w	r0, [r8, #15]
	  BME280.hum.offset = config.BME280_h_offset;
 8005ec6:	f8d3 002a 	ldr.w	r0, [r3, #42]	@ 0x2a
 8005eca:	f8c1 000f 	str.w	r0, [r1, #15]
	  MS8607.hum.offset = config.MS8607_h_offset;
 8005ece:	f8d3 001d 	ldr.w	r0, [r3, #29]
	  SHT3.hum.offset = config.SHT3_h_offset;
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	f8c6 300f 	str.w	r3, [r6, #15]
	  DPS368.press.use_meas = config.DPS368_p_use;
 8005ed8:	f898 300a 	ldrb.w	r3, [r8, #10]
	  MS8607.hum.offset = config.MS8607_h_offset;
 8005edc:	f8c2 000f 	str.w	r0, [r2, #15]
	  DPS368.press.use_meas = config.DPS368_p_use;
 8005ee0:	f3cb 1c80 	ubfx	ip, fp, #6, #1
 8005ee4:	f36c 0300 	bfi	r3, ip, #0, #1
 8005ee8:	f888 300a 	strb.w	r3, [r8, #10]
	  BME280.hum.use_meas = config.BME280_h_use;
 8005eec:	7a8b      	ldrb	r3, [r1, #10]
 8005eee:	f3c7 1780 	ubfx	r7, r7, #6, #1
 8005ef2:	f367 0300 	bfi	r3, r7, #0, #1
 8005ef6:	728b      	strb	r3, [r1, #10]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8005ef8:	7ab1      	ldrb	r1, [r6, #10]
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8005efa:	7a93      	ldrb	r3, [r2, #10]
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8005efc:	f3c4 1480 	ubfx	r4, r4, #6, #1
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8005f00:	f3c5 1580 	ubfx	r5, r5, #6, #1
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8005f04:	f364 0100 	bfi	r1, r4, #0, #1
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8005f08:	f365 0300 	bfi	r3, r5, #0, #1
	  SHT3.hum.use_meas = config.SHT3_h_use;
 8005f0c:	72b1      	strb	r1, [r6, #10]
	  MS8607.hum.use_meas = config.MS8607_h_use;
 8005f0e:	7293      	strb	r3, [r2, #10]
}
 8005f10:	b007      	add	sp, #28
 8005f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f16:	bf00      	nop
 8005f18:	200006cc 	.word	0x200006cc
 8005f1c:	20000640 	.word	0x20000640
 8005f20:	20000714 	.word	0x20000714
 8005f24:	200006f0 	.word	0x200006f0
 8005f28:	200006b4 	.word	0x200006b4
 8005f2c:	2000072c 	.word	0x2000072c

08005f30 <THP_MainTask>:
}

// ******************************************************************************************************

void THP_MainTask(void const *argument)
{
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	  POWER_OFF();
 8005f34:	48bb      	ldr	r0, [pc, #748]	@ (8006224 <THP_MainTask+0x2f4>)
{
 8005f36:	b087      	sub	sp, #28
	  POWER_OFF();
 8005f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f002 f8cd 	bl	80080dc <HAL_GPIO_WritePin>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8005f42:	48b9      	ldr	r0, [pc, #740]	@ (8006228 <THP_MainTask+0x2f8>)
 8005f44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f48:	f002 f8c2 	bl	80080d0 <HAL_GPIO_ReadPin>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f000 8132 	beq.w	80061b6 <THP_MainTask+0x286>
	  HAL_UART_RxCpltCallback(&huart1); //CLI
 8005f52:	48b6      	ldr	r0, [pc, #728]	@ (800622c <THP_MainTask+0x2fc>)
 8005f54:	f7fc fa3e 	bl	80023d4 <HAL_UART_RxCpltCallback>
	  HAL_UART_RxCpltCallback(&huart2); //SIM
 8005f58:	48b5      	ldr	r0, [pc, #724]	@ (8006230 <THP_MainTask+0x300>)
 8005f5a:	f7fc fa3b 	bl	80023d4 <HAL_UART_RxCpltCallback>
	  check_powerOn();
 8005f5e:	f7ff fac5 	bl	80054ec <check_powerOn>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 8005f62:	48b1      	ldr	r0, [pc, #708]	@ (8006228 <THP_MainTask+0x2f8>)
 8005f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f68:	f002 f8b2 	bl	80080d0 <HAL_GPIO_ReadPin>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	f000 8155 	beq.w	800621c <THP_MainTask+0x2ec>
	  SIM_HW_OFF();
 8005f72:	f7fb fc69 	bl	8001848 <SIM_HW_OFF>
	  printf("\r\n\r\n\r\nInitializing (RTOS version)...\r\n");
 8005f76:	48af      	ldr	r0, [pc, #700]	@ (8006234 <THP_MainTask+0x304>)
 8005f78:	f007 fc42 	bl	800d800 <puts>
	  if (Load_config()==0) {printf("Config loaded OK \r\n");};
 8005f7c:	f7fb fa5a 	bl	8001434 <Load_config>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f000 8147 	beq.w	8006214 <THP_MainTask+0x2e4>
	  charger_state = BQ25798_check();
 8005f86:	f7fc f89d 	bl	80020c4 <BQ25798_check>
 8005f8a:	4bab      	ldr	r3, [pc, #684]	@ (8006238 <THP_MainTask+0x308>)
 8005f8c:	7018      	strb	r0, [r3, #0]
	  if (charger_state) {
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 8113 	bne.w	80061bc <THP_MainTask+0x28c>
		  BQ25798_Chrg_NTC_CTRL1_write(1);
		  CE_EN();
		  BQ25798_MPPT_CTRL(1); //MPPT ON

	  }
	  LED1_ON();
 8005f96:	48a3      	ldr	r0, [pc, #652]	@ (8006224 <THP_MainTask+0x2f4>)
	  LED2_OFF();
	  ADC_DMA_Start();

	  TMP117.present = TMP117_check();
 8005f98:	f8df 92f0 	ldr.w	r9, [pc, #752]	@ 800628c <THP_MainTask+0x35c>
	  SHT3.present = SHTC3_check();
 8005f9c:	4fa7      	ldr	r7, [pc, #668]	@ (800623c <THP_MainTask+0x30c>)
	  MS8607.present = MS8607_check();
 8005f9e:	4ca8      	ldr	r4, [pc, #672]	@ (8006240 <THP_MainTask+0x310>)
	  BME280.present = BME280_check();
 8005fa0:	4ea8      	ldr	r6, [pc, #672]	@ (8006244 <THP_MainTask+0x314>)
	  DPS368.present = DPS368_check();
 8005fa2:	f8df 82ec 	ldr.w	r8, [pc, #748]	@ 8006290 <THP_MainTask+0x360>

	  getConfVars();

	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
	//  printf("TMP117 conf var %x\r\n", tmp117_avr);
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8005fa6:	4da8      	ldr	r5, [pc, #672]	@ (8006248 <THP_MainTask+0x318>)
 8005fa8:	f8df b2e8 	ldr.w	fp, [pc, #744]	@ 8006294 <THP_MainTask+0x364>
 8005fac:	f8df a2e8 	ldr.w	sl, [pc, #744]	@ 8006298 <THP_MainTask+0x368>
	  LED1_ON();
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2120      	movs	r1, #32
 8005fb4:	f002 f892 	bl	80080dc <HAL_GPIO_WritePin>
	  LED2_OFF();
 8005fb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4899      	ldr	r0, [pc, #612]	@ (8006224 <THP_MainTask+0x2f4>)
 8005fc0:	f002 f88c 	bl	80080dc <HAL_GPIO_WritePin>
	  ADC_DMA_Start();
 8005fc4:	f7fb fc4c 	bl	8001860 <ADC_DMA_Start>
	  TMP117.present = TMP117_check();
 8005fc8:	f000 fa3c 	bl	8006444 <TMP117_check>
 8005fcc:	f899 3000 	ldrb.w	r3, [r9]
 8005fd0:	f360 0300 	bfi	r3, r0, #0, #1
 8005fd4:	f889 3000 	strb.w	r3, [r9]
	  SHT3.present = SHTC3_check();
 8005fd8:	f000 fb22 	bl	8006620 <SHTC3_check>
 8005fdc:	783b      	ldrb	r3, [r7, #0]
 8005fde:	f360 0300 	bfi	r3, r0, #0, #1
 8005fe2:	703b      	strb	r3, [r7, #0]
	  MS8607.present = MS8607_check();
 8005fe4:	f000 fae8 	bl	80065b8 <MS8607_check>
 8005fe8:	7823      	ldrb	r3, [r4, #0]
 8005fea:	f360 0300 	bfi	r3, r0, #0, #1
 8005fee:	7023      	strb	r3, [r4, #0]
	  BME280.present = BME280_check();
 8005ff0:	f000 fc1e 	bl	8006830 <BME280_check>
 8005ff4:	7833      	ldrb	r3, [r6, #0]
 8005ff6:	f360 0300 	bfi	r3, r0, #0, #1
 8005ffa:	7033      	strb	r3, [r6, #0]
	  DPS368.present = DPS368_check();
 8005ffc:	f7fd fc9c 	bl	8003938 <DPS368_check>
 8006000:	f898 3000 	ldrb.w	r3, [r8]
 8006004:	f360 0300 	bfi	r3, r0, #0, #1
 8006008:	f888 3000 	strb.w	r3, [r8]
	  getConfVars();
 800600c:	f7ff fec2 	bl	8005d94 <getConfVars>
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8006010:	f899 0000 	ldrb.w	r0, [r9]
 8006014:	f8df 9284 	ldr.w	r9, [pc, #644]	@ 800629c <THP_MainTask+0x36c>
 8006018:	f3c0 0083 	ubfx	r0, r0, #2, #4
 800601c:	f000 faa8 	bl	8006570 <tmp117_avr_conf>
 8006020:	4602      	mov	r2, r0
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 8006022:	f898 0000 	ldrb.w	r0, [r8]
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 8006026:	4b89      	ldr	r3, [pc, #548]	@ (800624c <THP_MainTask+0x31c>)
	  printf("DPS368 conf var %x\r\n", dps368_ovr_conf);
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8006028:	f8df 8274 	ldr.w	r8, [pc, #628]	@ 80062a0 <THP_MainTask+0x370>
	  tmp117_avr=tmp117_avr_conf(TMP117.sensor_conf);
 800602c:	801a      	strh	r2, [r3, #0]
	  dps368_ovr_conf=dps368_ovr_config(DPS368.sensor_conf);
 800602e:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8006032:	f7fe f833 	bl	800409c <dps368_ovr_config>
 8006036:	8028      	strh	r0, [r5, #0]
	  printf("DPS368 conf var %x\r\n", dps368_ovr_conf);
 8006038:	8829      	ldrh	r1, [r5, #0]
 800603a:	4885      	ldr	r0, [pc, #532]	@ (8006250 <THP_MainTask+0x320>)
 800603c:	b289      	uxth	r1, r1
 800603e:	f007 fb77 	bl	800d730 <iprintf>
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8006042:	882b      	ldrh	r3, [r5, #0]
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8006044:	4a83      	ldr	r2, [pc, #524]	@ (8006254 <THP_MainTask+0x324>)
	  dps368_ovr_temp = (uint8_t)(dps368_ovr_conf >> 8);
 8006046:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800604a:	f888 3000 	strb.w	r3, [r8]
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 800604e:	882b      	ldrh	r3, [r5, #0]

	  DPS368_init(FIFO_DIS, INT_NONE);
 8006050:	2100      	movs	r1, #0
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8006052:	b2db      	uxtb	r3, r3
	  DPS368_init(FIFO_DIS, INT_NONE);
 8006054:	4608      	mov	r0, r1
	  dps368_ovr_press = (uint8_t)dps368_ovr_conf;
 8006056:	7013      	strb	r3, [r2, #0]
	  DPS368_init(FIFO_DIS, INT_NONE);
 8006058:	f7fd ff14 	bl	8003e84 <DPS368_init>
	  DPS368_temp_correct(dps368_ovr_temp);
 800605c:	f898 0000 	ldrb.w	r0, [r8]

	  MS8607_osr(MS8607.sensor_conf);
	  printf("MS8607 OSR %d\r\n", 256<<MS8607.sensor_conf);

	  disp_type = config.disp_type;
	  new_tim_interval = config.tim_interval; //w sekundach
 8006060:	f8df 8240 	ldr.w	r8, [pc, #576]	@ 80062a4 <THP_MainTask+0x374>
	  DPS368_temp_correct(dps368_ovr_temp);
 8006064:	f7fd fea0 	bl	8003da8 <DPS368_temp_correct>
	  sht3_mode=SHT3.sensor_conf;
 8006068:	783b      	ldrb	r3, [r7, #0]
 800606a:	4a7b      	ldr	r2, [pc, #492]	@ (8006258 <THP_MainTask+0x328>)
	  if(sht3_mode==normal) printf("SHTC3 normal mode\r\n");
 800606c:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
 8006070:	bf0c      	ite	eq
 8006072:	487a      	ldreq	r0, [pc, #488]	@ (800625c <THP_MainTask+0x32c>)
	  else printf("SHTC3 low power mode\r\n");
 8006074:	487a      	ldrne	r0, [pc, #488]	@ (8006260 <THP_MainTask+0x330>)
	  sht3_mode=SHT3.sensor_conf;
 8006076:	f3c3 0183 	ubfx	r1, r3, #2, #4
 800607a:	7011      	strb	r1, [r2, #0]
	  else printf("SHTC3 low power mode\r\n");
 800607c:	f007 fbc0 	bl	800d800 <puts>
	  bme280_conf_change(BME280.sensor_conf);
 8006080:	7830      	ldrb	r0, [r6, #0]

	  // uruchomienie taska sensorów
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 8006082:	4e78      	ldr	r6, [pc, #480]	@ (8006264 <THP_MainTask+0x334>)
	  bme280_conf_change(BME280.sensor_conf);
 8006084:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8006088:	f000 fd28 	bl	8006adc <bme280_conf_change>
	  MS8607_osr(MS8607.sensor_conf);
 800608c:	7820      	ldrb	r0, [r4, #0]
 800608e:	f3c0 0083 	ubfx	r0, r0, #2, #4
 8006092:	f7fe fc27 	bl	80048e4 <MS8607_osr>
	  printf("MS8607 OSR %d\r\n", 256<<MS8607.sensor_conf);
 8006096:	7823      	ldrb	r3, [r4, #0]
 8006098:	4873      	ldr	r0, [pc, #460]	@ (8006268 <THP_MainTask+0x338>)
 800609a:	4c74      	ldr	r4, [pc, #464]	@ (800626c <THP_MainTask+0x33c>)
 800609c:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80060a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80060a4:	4099      	lsls	r1, r3
 80060a6:	f007 fb43 	bl	800d730 <iprintf>
	  disp_type = config.disp_type;
 80060aa:	4a71      	ldr	r2, [pc, #452]	@ (8006270 <THP_MainTask+0x340>)
 80060ac:	4971      	ldr	r1, [pc, #452]	@ (8006274 <THP_MainTask+0x344>)
 80060ae:	79d3      	ldrb	r3, [r2, #7]
 80060b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80060b4:	700b      	strb	r3, [r1, #0]
	  new_tim_interval = config.tim_interval; //w sekundach
 80060b6:	8913      	ldrh	r3, [r2, #8]
 80060b8:	f8a8 3000 	strh.w	r3, [r8]
	  osThreadDef(SensorTask, SensorsTask, osPriorityNormal, 0, 512);
 80060bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80060be:	ad01      	add	r5, sp, #4
 80060c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c2:	6833      	ldr	r3, [r6, #0]
 80060c4:	602b      	str	r3, [r5, #0]
	  measTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 80060c6:	2100      	movs	r1, #0
 80060c8:	a801      	add	r0, sp, #4
 80060ca:	f004 fc77 	bl	800a9bc <osThreadCreate>
 80060ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006278 <THP_MainTask+0x348>)
 80060d0:	6018      	str	r0, [r3, #0]

	  uint32_t ticks30ms = HAL_GetTick();
 80060d2:	f000 fe27 	bl	8006d24 <HAL_GetTick>
 80060d6:	4606      	mov	r6, r0
	  uint32_t ticksbqwd = HAL_GetTick();
 80060d8:	f000 fe24 	bl	8006d24 <HAL_GetTick>
 80060dc:	4605      	mov	r5, r0
	  uint8_t firstrun = 1;
	  osDelay(100);
 80060de:	2064      	movs	r0, #100	@ 0x64
	  uint8_t firstrun = 1;
 80060e0:	2701      	movs	r7, #1
	  osDelay(100);
 80060e2:	f004 fc87 	bl	800a9f4 <osDelay>
 80060e6:	e015      	b.n	8006114 <THP_MainTask+0x1e4>

		  // uruchomienie pomiaru
		  if(HAL_GetTick() - ticksstart >= tim_interval*1000UL || firstrun) {	// czas uruchomic pomiar ?
			  ticksstart = HAL_GetTick();
			  firstrun = 0;
			  if (meas_count > 0 || meas_cont_mode) {
 80060e8:	4b64      	ldr	r3, [pc, #400]	@ (800627c <THP_MainTask+0x34c>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b11b      	cbz	r3, 80060f6 <THP_MainTask+0x1c6>
				  if(meas_cont_mode == 0) {
					  meas_count--;
					  if(meas_count == 0) printf("Last measure\r\n");
				  }
				  vTaskResume(measTaskHandle);						// odblokuj taks pomiarow
 80060ee:	4b62      	ldr	r3, [pc, #392]	@ (8006278 <THP_MainTask+0x348>)
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	f004 fe01 	bl	800acf8 <vTaskResume>
			  }
		  }

		  // wyswietlenie pomiarow
	      if(sensors_data_ready) {						// taks sensorow zakonczyl dzialanie ?
 80060f6:	f89a 3000 	ldrb.w	r3, [sl]
 80060fa:	b14b      	cbz	r3, 8006110 <THP_MainTask+0x1e0>
	    	  sensors_data_ready = 0;
	    	  if(disp_type > 0) {
 80060fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006274 <THP_MainTask+0x344>)
	    	  sensors_data_ready = 0;
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	f88a 3000 	strb.w	r3, [sl]
	    	  if(disp_type > 0) {
 8006106:	7813      	ldrb	r3, [r2, #0]
 8006108:	b113      	cbz	r3, 8006110 <THP_MainTask+0x1e0>
	    		  display_values(disp_type);
 800610a:	7810      	ldrb	r0, [r2, #0]
 800610c:	f7ff fb6a 	bl	80057e4 <display_values>
	    	  }
	      }

	      __WFI();
 8006110:	bf30      	wfi
		  if (new_tim_interval != tim_interval) {
 8006112:	2700      	movs	r7, #0
 8006114:	f8b8 2000 	ldrh.w	r2, [r8]
 8006118:	8823      	ldrh	r3, [r4, #0]
 800611a:	b292      	uxth	r2, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	429a      	cmp	r2, r3
 8006120:	d006      	beq.n	8006130 <THP_MainTask+0x200>
			  tim_interval = new_tim_interval;
 8006122:	f8b8 3000 	ldrh.w	r3, [r8]
			  config.tim_interval = tim_interval;
 8006126:	4a52      	ldr	r2, [pc, #328]	@ (8006270 <THP_MainTask+0x340>)
			  tim_interval = new_tim_interval;
 8006128:	b29b      	uxth	r3, r3
 800612a:	8023      	strh	r3, [r4, #0]
			  config.tim_interval = tim_interval;
 800612c:	8823      	ldrh	r3, [r4, #0]
 800612e:	8113      	strh	r3, [r2, #8]
		  CLI();
 8006130:	f7fd fbd0 	bl	80038d4 <CLI>
		  if(HAL_GetTick()-ticks30ms >= 30)
 8006134:	f000 fdf6 	bl	8006d24 <HAL_GetTick>
 8006138:	1b80      	subs	r0, r0, r6
 800613a:	281d      	cmp	r0, #29
 800613c:	d831      	bhi.n	80061a2 <THP_MainTask+0x272>
		  if(HAL_GetTick()-ticksbqwd >= 15000)
 800613e:	f000 fdf1 	bl	8006d24 <HAL_GetTick>
 8006142:	f643 2397 	movw	r3, #14999	@ 0x3a97
 8006146:	1b40      	subs	r0, r0, r5
 8006148:	4298      	cmp	r0, r3
 800614a:	d824      	bhi.n	8006196 <THP_MainTask+0x266>
		  if(HAL_GetTick() - ticksstart >= tim_interval*1000UL || firstrun) {	// czas uruchomic pomiar ?
 800614c:	f000 fdea 	bl	8006d24 <HAL_GetTick>
 8006150:	f8d9 2000 	ldr.w	r2, [r9]
 8006154:	8823      	ldrh	r3, [r4, #0]
 8006156:	1a80      	subs	r0, r0, r2
 8006158:	b29b      	uxth	r3, r3
 800615a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	4298      	cmp	r0, r3
 8006164:	d201      	bcs.n	800616a <THP_MainTask+0x23a>
 8006166:	2f00      	cmp	r7, #0
 8006168:	d0c5      	beq.n	80060f6 <THP_MainTask+0x1c6>
			  ticksstart = HAL_GetTick();
 800616a:	f000 fddb 	bl	8006d24 <HAL_GetTick>
			  if (meas_count > 0 || meas_cont_mode) {
 800616e:	f8bb 3000 	ldrh.w	r3, [fp]
			  ticksstart = HAL_GetTick();
 8006172:	f8c9 0000 	str.w	r0, [r9]
			  if (meas_count > 0 || meas_cont_mode) {
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0b6      	beq.n	80060e8 <THP_MainTask+0x1b8>
				  if(meas_cont_mode == 0) {
 800617a:	4a40      	ldr	r2, [pc, #256]	@ (800627c <THP_MainTask+0x34c>)
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	2a00      	cmp	r2, #0
 8006180:	d1b5      	bne.n	80060ee <THP_MainTask+0x1be>
					  meas_count--;
 8006182:	3b01      	subs	r3, #1
 8006184:	b29b      	uxth	r3, r3
 8006186:	f8ab 3000 	strh.w	r3, [fp]
					  if(meas_count == 0) printf("Last measure\r\n");
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1af      	bne.n	80060ee <THP_MainTask+0x1be>
 800618e:	483c      	ldr	r0, [pc, #240]	@ (8006280 <THP_MainTask+0x350>)
 8006190:	f007 fb36 	bl	800d800 <puts>
 8006194:	e7ab      	b.n	80060ee <THP_MainTask+0x1be>
			  ticksbqwd = HAL_GetTick();
 8006196:	f000 fdc5 	bl	8006d24 <HAL_GetTick>
 800619a:	4605      	mov	r5, r0
			  BQ25798_WD_RST();
 800619c:	f7fc f8d6 	bl	800234c <BQ25798_WD_RST>
 80061a0:	e7d4      	b.n	800614c <THP_MainTask+0x21c>
			  ticks30ms = HAL_GetTick();
 80061a2:	f000 fdbf 	bl	8006d24 <HAL_GetTick>
			  LED1_TOGGLE();
 80061a6:	2120      	movs	r1, #32
			  ticks30ms = HAL_GetTick();
 80061a8:	4606      	mov	r6, r0
			  LED1_TOGGLE();
 80061aa:	481e      	ldr	r0, [pc, #120]	@ (8006224 <THP_MainTask+0x2f4>)
 80061ac:	f001 ff9c 	bl	80080e8 <HAL_GPIO_TogglePin>
			  check_powerOff();
 80061b0:	f7ff f9c4 	bl	800553c <check_powerOff>
 80061b4:	e7c3      	b.n	800613e <THP_MainTask+0x20e>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 80061b6:	f001 fad3 	bl	8007760 <HAL_NVIC_SystemReset>
 80061ba:	e6ca      	b.n	8005f52 <THP_MainTask+0x22>
		  printf("Configure charger \r\n");
 80061bc:	4831      	ldr	r0, [pc, #196]	@ (8006284 <THP_MainTask+0x354>)
 80061be:	f007 fb1f 	bl	800d800 <puts>
		  QON_EN();
 80061c2:	2200      	movs	r2, #0
 80061c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80061c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061cc:	f001 ff86 	bl	80080dc <HAL_GPIO_WritePin>
		  BQ25798_Sys_Min_Voltage_write(3); 	// 3250mV
 80061d0:	2003      	movs	r0, #3
 80061d2:	f7fc f863 	bl	800229c <BQ25798_Sys_Min_Voltage_write>
		  BQ25798_Chr_Volt_Limit_write(4200); 	// 4200mV
 80061d6:	f241 0068 	movw	r0, #4200	@ 0x1068
 80061da:	f7fc f869 	bl	80022b0 <BQ25798_Chr_Volt_Limit_write>
		  BQ25798_Chr_Curr_Limit_write(2000); 	// 2000mA
 80061de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80061e2:	f7fc f879 	bl	80022d8 <BQ25798_Chr_Curr_Limit_write>
		  BQ25798_Chr_Input_Voltage_Limit_write(130); //*100mV
 80061e6:	2082      	movs	r0, #130	@ 0x82
 80061e8:	f7fc f88a 	bl	8002300 <BQ25798_Chr_Input_Voltage_Limit_write>
		  BQ25798_Chr_Input_Curr_Limit_write(200); //*10mA
 80061ec:	20c8      	movs	r0, #200	@ 0xc8
 80061ee:	f7fc f88f 	bl	8002310 <BQ25798_Chr_Input_Curr_Limit_write>
		  BQ25798_Chrg_CTRL1_write(0x95);
 80061f2:	2095      	movs	r0, #149	@ 0x95
 80061f4:	f7fc f89a 	bl	800232c <BQ25798_Chrg_CTRL1_write>
		  BQ25798_Chrg_NTC_CTRL1_write(1);
 80061f8:	2001      	movs	r0, #1
 80061fa:	f7fc f89f 	bl	800233c <BQ25798_Chrg_NTC_CTRL1_write>
		  CE_EN();
 80061fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006202:	2200      	movs	r2, #0
 8006204:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006208:	f001 ff68 	bl	80080dc <HAL_GPIO_WritePin>
		  BQ25798_MPPT_CTRL(1); //MPPT ON
 800620c:	2001      	movs	r0, #1
 800620e:	f7fc f8b9 	bl	8002384 <BQ25798_MPPT_CTRL>
 8006212:	e6c0      	b.n	8005f96 <THP_MainTask+0x66>
	  if (Load_config()==0) {printf("Config loaded OK \r\n");};
 8006214:	481c      	ldr	r0, [pc, #112]	@ (8006288 <THP_MainTask+0x358>)
 8006216:	f007 faf3 	bl	800d800 <puts>
 800621a:	e6b4      	b.n	8005f86 <THP_MainTask+0x56>
	  if(!Power_SW_READ()) HAL_NVIC_SystemReset();		// nie nacisniety power -> reset CPU
 800621c:	f001 faa0 	bl	8007760 <HAL_NVIC_SystemReset>
 8006220:	e6a7      	b.n	8005f72 <THP_MainTask+0x42>
 8006222:	bf00      	nop
 8006224:	48000400 	.word	0x48000400
 8006228:	48000800 	.word	0x48000800
 800622c:	2000036c 	.word	0x2000036c
 8006230:	200002e8 	.word	0x200002e8
 8006234:	080119d8 	.word	0x080119d8
 8006238:	2000073b 	.word	0x2000073b
 800623c:	20000714 	.word	0x20000714
 8006240:	200006f0 	.word	0x200006f0
 8006244:	200006cc 	.word	0x200006cc
 8006248:	20000632 	.word	0x20000632
 800624c:	20000636 	.word	0x20000636
 8006250:	08011a28 	.word	0x08011a28
 8006254:	20000634 	.word	0x20000634
 8006258:	20000630 	.word	0x20000630
 800625c:	08011a40 	.word	0x08011a40
 8006260:	08011a54 	.word	0x08011a54
 8006264:	08010420 	.word	0x08010420
 8006268:	08011a6c 	.word	0x08011a6c
 800626c:	2000063a 	.word	0x2000063a
 8006270:	20000640 	.word	0x20000640
 8006274:	20000639 	.word	0x20000639
 8006278:	20000628 	.word	0x20000628
 800627c:	20000008 	.word	0x20000008
 8006280:	08011a7c 	.word	0x08011a7c
 8006284:	08011a14 	.word	0x08011a14
 8006288:	08011a00 	.word	0x08011a00
 800628c:	2000072c 	.word	0x2000072c
 8006290:	200006b4 	.word	0x200006b4
 8006294:	2000000a 	.word	0x2000000a
 8006298:	20000638 	.word	0x20000638
 800629c:	20000624 	.word	0x20000624
 80062a0:	20000635 	.word	0x20000635
 80062a4:	2000063c 	.word	0x2000063c

080062a8 <i2c_read8>:
#include <math.h>



uint8_t i2c_read8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t *value, uint8_t addr)
{
 80062a8:	b530      	push	{r4, r5, lr}
 80062aa:	b087      	sub	sp, #28
 80062ac:	460d      	mov	r5, r1
 80062ae:	4619      	mov	r1, r3
	uint8_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 80062b0:	2308      	movs	r3, #8
{
 80062b2:	4614      	mov	r4, r2
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 80062b4:	9302      	str	r3, [sp, #8]
 80062b6:	462a      	mov	r2, r5
 80062b8:	2301      	movs	r3, #1
 80062ba:	f10d 0517 	add.w	r5, sp, #23
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	9500      	str	r5, [sp, #0]
 80062c2:	f002 fb69 	bl	8008998 <HAL_I2C_Mem_Read>
    *value = tmp;
 80062c6:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80062ca:	7023      	strb	r3, [r4, #0]
    return res;
}
 80062cc:	b007      	add	sp, #28
 80062ce:	bd30      	pop	{r4, r5, pc}

080062d0 <i2c_read16>:

uint8_t i2c_read16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t *value, uint8_t addr)
{
 80062d0:	b510      	push	{r4, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	468c      	mov	ip, r1
 80062d6:	4619      	mov	r1, r3
	uint16_t tmp;
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80062d8:	2308      	movs	r3, #8
 80062da:	9302      	str	r3, [sp, #8]
 80062dc:	2302      	movs	r3, #2
 80062de:	9301      	str	r3, [sp, #4]
 80062e0:	f10d 0316 	add.w	r3, sp, #22
{
 80062e4:	4614      	mov	r4, r2
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	4662      	mov	r2, ip
 80062ea:	2301      	movs	r3, #1
 80062ec:	f002 fb54 	bl	8008998 <HAL_I2C_Mem_Read>
    *value = tmp;
 80062f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80062f4:	8023      	strh	r3, [r4, #0]
    return res;
}
 80062f6:	b006      	add	sp, #24
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	bf00      	nop

080062fc <i2c_write8>:
    *value = tmp;
    return res;
}

uint8_t i2c_write8(I2C_HandleTypeDef * i2c, uint16_t offset, uint8_t value, uint8_t addr)
{
 80062fc:	b510      	push	{r4, lr}
 80062fe:	b086      	sub	sp, #24
	uint8_t tmp = value;
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 8006300:	2408      	movs	r4, #8
 8006302:	9402      	str	r4, [sp, #8]
{
 8006304:	4614      	mov	r4, r2
 8006306:	468c      	mov	ip, r1
	uint8_t tmp = value;
 8006308:	f88d 4017 	strb.w	r4, [sp, #23]
{
 800630c:	4619      	mov	r1, r3
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 800630e:	f10d 0417 	add.w	r4, sp, #23
 8006312:	2301      	movs	r3, #1
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	4662      	mov	r2, ip
 8006318:	9400      	str	r4, [sp, #0]
 800631a:	f002 fa17 	bl	800874c <HAL_I2C_Mem_Write>
    return res;
}
 800631e:	b006      	add	sp, #24
 8006320:	bd10      	pop	{r4, pc}
 8006322:	bf00      	nop

08006324 <i2c_write16>:

uint8_t i2c_write16(I2C_HandleTypeDef * i2c, uint16_t offset, uint16_t value, uint8_t addr)
{
 8006324:	b500      	push	{lr}
 8006326:	b087      	sub	sp, #28
 8006328:	468e      	mov	lr, r1
 800632a:	4619      	mov	r1, r3
	uint16_t tmp = value;
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800632c:	2308      	movs	r3, #8
 800632e:	9302      	str	r3, [sp, #8]
 8006330:	2302      	movs	r3, #2
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	f10d 0316 	add.w	r3, sp, #22
{
 8006338:	4694      	mov	ip, r2
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4672      	mov	r2, lr
 800633e:	2301      	movs	r3, #1
	uint16_t tmp = value;
 8006340:	f8ad c016 	strh.w	ip, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8006344:	f002 fa02 	bl	800874c <HAL_I2C_Mem_Write>
    return res;
}
 8006348:	b007      	add	sp, #28
 800634a:	f85d fb04 	ldr.w	pc, [sp], #4
 800634e:	bf00      	nop

08006350 <setBit>:
    old_word |= new_word;
    i2c_write16(i2c, sub_address, old_word, addr);
}

void setBit(uint8_t* reg, int bitNumber, int value) {
    if (value == 0) {
 8006350:	b932      	cbnz	r2, 8006360 <setBit+0x10>
        *reg &= ~(1 << bitNumber);  // Ustawienie bitu na 0
 8006352:	7803      	ldrb	r3, [r0, #0]
 8006354:	2201      	movs	r2, #1
 8006356:	408a      	lsls	r2, r1
 8006358:	ea23 0302 	bic.w	r3, r3, r2
 800635c:	7003      	strb	r3, [r0, #0]
 800635e:	4770      	bx	lr
    } else if (value == 1) {
 8006360:	2a01      	cmp	r2, #1
 8006362:	d000      	beq.n	8006366 <setBit+0x16>
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
    }
}
 8006364:	4770      	bx	lr
        *reg |= (1 << bitNumber);   // Ustawienie bitu na 1
 8006366:	7803      	ldrb	r3, [r0, #0]
 8006368:	fa02 f101 	lsl.w	r1, r2, r1
 800636c:	430b      	orrs	r3, r1
 800636e:	7003      	strb	r3, [r0, #0]
}
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop

08006374 <combine_uint8>:

uint16_t combine_uint8(uint8_t high, uint8_t low) {
    return ((uint16_t)high << 8) | low;
}
 8006374:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop

0800637c <modifyRegister>:

void modifyRegister(unsigned char* reg, unsigned char mask, unsigned char value) {
    *reg = (*reg & ~mask) | (value & mask);
 800637c:	7803      	ldrb	r3, [r0, #0]
 800637e:	ea23 0301 	bic.w	r3, r3, r1
 8006382:	4011      	ands	r1, r2
 8006384:	430b      	orrs	r3, r1
 8006386:	7003      	strb	r3, [r0, #0]
}
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop

0800638c <i2c_scan>:

void i2c_scan(I2C_HandleTypeDef * i2c, uint8_t addr_min, uint8_t addr_max)
{
 800638c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006390:	460c      	mov	r4, r1
 8006392:	4616      	mov	r6, r2
 8006394:	4607      	mov	r7, r0
	printf("Scanning I2C devices ...\r\n");
 8006396:	4815      	ldr	r0, [pc, #84]	@ (80063ec <i2c_scan+0x60>)
 8006398:	f007 fa32 	bl	800d800 <puts>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 800639c:	42b4      	cmp	r4, r6
 800639e:	d823      	bhi.n	80063e8 <i2c_scan+0x5c>
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
		osDelay(100);
		if (status == HAL_OK) {
			    	printf("Device found on %#x \r\n", addr);
			    } else {
			    	printf("Device NOTfound on %#x \r\n", addr);
 80063a0:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 80063f0 <i2c_scan+0x64>
			    	printf("Device found on %#x \r\n", addr);
 80063a4:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 80063f4 <i2c_scan+0x68>
 80063a8:	e006      	b.n	80063b8 <i2c_scan+0x2c>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80063aa:	3401      	adds	r4, #1
			    	printf("Device found on %#x \r\n", addr);
 80063ac:	4648      	mov	r0, r9
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80063ae:	b2e4      	uxtb	r4, r4
			    	printf("Device found on %#x \r\n", addr);
 80063b0:	f007 f9be 	bl	800d730 <iprintf>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	d317      	bcc.n	80063e8 <i2c_scan+0x5c>
		status = HAL_I2C_IsDeviceReady(i2c, addr << 1, 3, 500);
 80063b8:	0061      	lsls	r1, r4, #1
 80063ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80063be:	2203      	movs	r2, #3
 80063c0:	4638      	mov	r0, r7
 80063c2:	f002 fc07 	bl	8008bd4 <HAL_I2C_IsDeviceReady>
 80063c6:	4605      	mov	r5, r0
		osDelay(100);
 80063c8:	2064      	movs	r0, #100	@ 0x64
 80063ca:	f004 fb13 	bl	800a9f4 <osDelay>
			    	printf("Device NOTfound on %#x \r\n", addr);
 80063ce:	4621      	mov	r1, r4
 80063d0:	4640      	mov	r0, r8
		if (status == HAL_OK) {
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	d0e9      	beq.n	80063aa <i2c_scan+0x1e>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80063d6:	3401      	adds	r4, #1
			    	printf("Device NOTfound on %#x \r\n", addr);
 80063d8:	f007 f9aa 	bl	800d730 <iprintf>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80063dc:	b2e4      	uxtb	r4, r4
			    	osDelay(100);
 80063de:	2064      	movs	r0, #100	@ 0x64
 80063e0:	f004 fb08 	bl	800a9f4 <osDelay>
	for (uint8_t addr = addr_min; addr <= addr_max; addr++)
 80063e4:	42a6      	cmp	r6, r4
 80063e6:	d2e7      	bcs.n	80063b8 <i2c_scan+0x2c>
			    }
	}
}
 80063e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ec:	08011a98 	.word	0x08011a98
 80063f0:	08011acc 	.word	0x08011acc
 80063f4:	08011ab4 	.word	0x08011ab4

080063f8 <byteswap16>:
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80063f8:	ba40      	rev16	r0, r0

uint16_t byteswap16 (uint16_t bytes)
{
//	return ((bytes & 0xFF) << 8) | ((bytes >> 8) & 0xFF);
	return __REV16(bytes);
}
 80063fa:	b280      	uxth	r0, r0
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop

08006400 <SET_DPS368>:
{
	TCA9543A_SelectChannel(0);
}

void SET_DPS368()
{
 8006400:	b500      	push	{lr}
		I2C2TCA_NRST();
 8006402:	2201      	movs	r2, #1
{
 8006404:	b087      	sub	sp, #28
		I2C2TCA_NRST();
 8006406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800640a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800640e:	f001 fe65 	bl	80080dc <HAL_GPIO_WritePin>
		osDelay(1);
 8006412:	2001      	movs	r0, #1
 8006414:	f004 faee 	bl	800a9f4 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006418:	2301      	movs	r3, #1
 800641a:	f10d 0217 	add.w	r2, sp, #23
 800641e:	f04f 31ff 	mov.w	r1, #4294967295
 8006422:	e9cd 3101 	strd	r3, r1, [sp, #4]
		uint8_t data = 1 << channel;
 8006426:	f04f 0c02 	mov.w	ip, #2
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800642a:	9200      	str	r2, [sp, #0]
 800642c:	21e4      	movs	r1, #228	@ 0xe4
 800642e:	2200      	movs	r2, #0
 8006430:	4803      	ldr	r0, [pc, #12]	@ (8006440 <SET_DPS368+0x40>)
		uint8_t data = 1 << channel;
 8006432:	f88d c017 	strb.w	ip, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006436:	f002 f989 	bl	800874c <HAL_I2C_Mem_Write>
	TCA9543A_SelectChannel(1);
}
 800643a:	b007      	add	sp, #28
 800643c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006440:	20000444 	.word	0x20000444

08006444 <TMP117_check>:



uint8_t TMP117_check()
{
 8006444:	b510      	push	{r4, lr}
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 8006446:	4818      	ldr	r0, [pc, #96]	@ (80064a8 <TMP117_check+0x64>)
{
 8006448:	b086      	sub	sp, #24
	status = HAL_I2C_IsDeviceReady(&hi2c2, TMP117_ADDR << 1, 3, 500);
 800644a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800644e:	2203      	movs	r2, #3
 8006450:	2192      	movs	r1, #146	@ 0x92
 8006452:	f002 fbbf 	bl	8008bd4 <HAL_I2C_IsDeviceReady>
 8006456:	4604      	mov	r4, r0
	osDelay(100);
 8006458:	2064      	movs	r0, #100	@ 0x64
 800645a:	f004 facb 	bl	800a9f4 <osDelay>
	if (status == HAL_OK) {
 800645e:	b9f4      	cbnz	r4, 800649e <TMP117_check+0x5a>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8006460:	2108      	movs	r1, #8
 8006462:	2202      	movs	r2, #2
 8006464:	f10d 0316 	add.w	r3, sp, #22
 8006468:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	220f      	movs	r2, #15
 8006470:	2301      	movs	r3, #1
 8006472:	480d      	ldr	r0, [pc, #52]	@ (80064a8 <TMP117_check+0x64>)
 8006474:	2192      	movs	r1, #146	@ 0x92
 8006476:	f002 fa8f 	bl	8008998 <HAL_I2C_Mem_Read>
    *value = tmp;
 800647a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
		uint16_t value;
		i2c_read16(&hi2c2, TMP117_ID_REG, &value, TMP117_ADDR << 1);
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 800647e:	f241 7301 	movw	r3, #5889	@ 0x1701
 8006482:	429a      	cmp	r2, r3
 8006484:	d005      	beq.n	8006492 <TMP117_check+0x4e>
 8006486:	4809      	ldr	r0, [pc, #36]	@ (80064ac <TMP117_check+0x68>)
 8006488:	f007 f9ba 	bl	800d800 <puts>
 800648c:	2000      	movs	r0, #0
	} else {printf("TMP117 FAILED\r\n"); return 0;}
}
 800648e:	b006      	add	sp, #24
 8006490:	bd10      	pop	{r4, pc}
		if(value == TMP117_ID) {printf("TMP117 OK\r\n"); return 1;} else {printf("NOT TMP117\r\n"); return 0;}
 8006492:	4807      	ldr	r0, [pc, #28]	@ (80064b0 <TMP117_check+0x6c>)
 8006494:	f007 f9b4 	bl	800d800 <puts>
 8006498:	2001      	movs	r0, #1
}
 800649a:	b006      	add	sp, #24
 800649c:	bd10      	pop	{r4, pc}
	} else {printf("TMP117 FAILED\r\n"); return 0;}
 800649e:	4805      	ldr	r0, [pc, #20]	@ (80064b4 <TMP117_check+0x70>)
 80064a0:	f007 f9ae 	bl	800d800 <puts>
 80064a4:	e7f2      	b.n	800648c <TMP117_check+0x48>
 80064a6:	bf00      	nop
 80064a8:	20000444 	.word	0x20000444
 80064ac:	08011af4 	.word	0x08011af4
 80064b0:	08011ae8 	.word	0x08011ae8
 80064b4:	08011b00 	.word	0x08011b00

080064b8 <TMP117_get_temp>:
	osDelay(1);

}

float TMP117_get_temp()
{
 80064b8:	b500      	push	{lr}
 80064ba:	b087      	sub	sp, #28
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80064bc:	f10d 0316 	add.w	r3, sp, #22
 80064c0:	2108      	movs	r1, #8
 80064c2:	2202      	movs	r2, #2
 80064c4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	2200      	movs	r2, #0
 80064cc:	2301      	movs	r3, #1
 80064ce:	2192      	movs	r1, #146	@ 0x92
 80064d0:	4806      	ldr	r0, [pc, #24]	@ (80064ec <TMP117_get_temp+0x34>)
 80064d2:	f002 fa61 	bl	8008998 <HAL_I2C_Mem_Read>
    *value = tmp;
 80064d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80064da:	ba5b      	rev16	r3, r3
	uint16_t value;
	int16_t raw;
    i2c_read16(&hi2c2, TMP117_TEMP_REG, &value, TMP117_ADDR << 1);
    raw = byteswap16(value);
    return (float)(raw * TMP117_RESOLUTION);
 80064dc:	b21b      	sxth	r3, r3
 80064de:	ee00 3a10 	vmov	s0, r3
}
 80064e2:	eeba 0aec 	vcvt.f32.s32	s0, s0, #7
 80064e6:	b007      	add	sp, #28
 80064e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80064ec:	20000444 	.word	0x20000444

080064f0 <TMP117_start_meas>:

void TMP117_start_meas(uint8_t avg_mode)
{
 80064f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	b086      	sub	sp, #24
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80064f6:	4e1d      	ldr	r6, [pc, #116]	@ (800656c <TMP117_start_meas+0x7c>)
	uint16_t tmp = value;
 80064f8:	f44f 7308 	mov.w	r3, #544	@ 0x220
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 80064fc:	f04f 0808 	mov.w	r8, #8
 8006500:	2502      	movs	r5, #2
 8006502:	f10d 0716 	add.w	r7, sp, #22
	uint16_t tmp = value;
 8006506:	f8ad 3016 	strh.w	r3, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800650a:	2301      	movs	r3, #1
 800650c:	461a      	mov	r2, r3
 800650e:	2192      	movs	r1, #146	@ 0x92
 8006510:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8006514:	9700      	str	r7, [sp, #0]
{
 8006516:	4604      	mov	r4, r0
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8006518:	4630      	mov	r0, r6
 800651a:	f002 f917 	bl	800874c <HAL_I2C_Mem_Write>
	osDelay(1);
 800651e:	2001      	movs	r0, #1
 8006520:	f004 fa68 	bl	800a9f4 <osDelay>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8006524:	2301      	movs	r3, #1
 8006526:	461a      	mov	r2, r3
 8006528:	e9cd 5801 	strd	r5, r8, [sp, #4]
 800652c:	9700      	str	r7, [sp, #0]
 800652e:	2192      	movs	r1, #146	@ 0x92
 8006530:	4630      	mov	r0, r6
 8006532:	f002 fa31 	bl	8008998 <HAL_I2C_Mem_Read>
    *value = tmp;
 8006536:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800653a:	ba5b      	rev16	r3, r3
	uint16_t config, swapconfig;
	TMP117_RST_Conf_Reg();
	i2c_read16(&hi2c2, TMP117_CONF_REG, &config, TMP117_ADDR << 1);
	swapconfig = byteswap16(config);
//	printf("REG in TMP (hex): %x \r\n", swapconfig);
	swapconfig |= avg_mode;
 800653c:	431c      	orrs	r4, r3
 800653e:	b2a4      	uxth	r4, r4
	return __REV16(bytes);
 8006540:	f444 6440 	orr.w	r4, r4, #3072	@ 0xc00
 8006544:	ba64      	rev16	r4, r4
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 8006546:	2301      	movs	r3, #1
 8006548:	e9cd 7500 	strd	r7, r5, [sp]
 800654c:	f8cd 8008 	str.w	r8, [sp, #8]
 8006550:	4630      	mov	r0, r6
 8006552:	461a      	mov	r2, r3
 8006554:	2192      	movs	r1, #146	@ 0x92
	return __REV16(bytes);
 8006556:	f8ad 4016 	strh.w	r4, [sp, #22]
    uint8_t res = HAL_I2C_Mem_Write(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 2, 8);
 800655a:	f002 f8f7 	bl	800874c <HAL_I2C_Mem_Write>
	swapconfig |= one_shot;
	config = byteswap16(swapconfig);
	i2c_write16(&hi2c2, TMP117_CONF_REG, config, TMP117_ADDR << 1);
	osDelay(2);
 800655e:	4628      	mov	r0, r5
}
 8006560:	b006      	add	sp, #24
 8006562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(2);
 8006566:	f004 ba45 	b.w	800a9f4 <osDelay>
 800656a:	bf00      	nop
 800656c:	20000444 	.word	0x20000444

08006570 <tmp117_avr_conf>:

uint16_t tmp117_avr_conf(uint8_t sensor_conf)
{
    switch (sensor_conf) {
 8006570:	2802      	cmp	r0, #2
{
 8006572:	b508      	push	{r3, lr}
    switch (sensor_conf) {
 8006574:	d008      	beq.n	8006588 <tmp117_avr_conf+0x18>
 8006576:	2803      	cmp	r0, #3
 8006578:	d010      	beq.n	800659c <tmp117_avr_conf+0x2c>
 800657a:	2801      	cmp	r0, #1
 800657c:	d009      	beq.n	8006592 <tmp117_avr_conf+0x22>
        case 0:
        	printf("TMP117 set no_avg\r\n");
 800657e:	480a      	ldr	r0, [pc, #40]	@ (80065a8 <tmp117_avr_conf+0x38>)
 8006580:	f007 f93e 	bl	800d800 <puts>
            return no_avg;
 8006584:	2000      	movs	r0, #0
            return avg64;
        default:
        	printf("TMP117 set no_avg\r\n");
            return no_avg;
    }
}
 8006586:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg32\r\n");
 8006588:	4808      	ldr	r0, [pc, #32]	@ (80065ac <tmp117_avr_conf+0x3c>)
 800658a:	f007 f939 	bl	800d800 <puts>
            return avg32;
 800658e:	2040      	movs	r0, #64	@ 0x40
}
 8006590:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg8\r\n");
 8006592:	4807      	ldr	r0, [pc, #28]	@ (80065b0 <tmp117_avr_conf+0x40>)
 8006594:	f007 f934 	bl	800d800 <puts>
            return avg8;
 8006598:	2020      	movs	r0, #32
}
 800659a:	bd08      	pop	{r3, pc}
        	printf("TMP117 set avg64\r\n");
 800659c:	4805      	ldr	r0, [pc, #20]	@ (80065b4 <tmp117_avr_conf+0x44>)
 800659e:	f007 f92f 	bl	800d800 <puts>
            return avg64;
 80065a2:	2060      	movs	r0, #96	@ 0x60
}
 80065a4:	bd08      	pop	{r3, pc}
 80065a6:	bf00      	nop
 80065a8:	08011b10 	.word	0x08011b10
 80065ac:	08011b38 	.word	0x08011b38
 80065b0:	08011b24 	.word	0x08011b24
 80065b4:	08011b4c 	.word	0x08011b4c

080065b8 <MS8607_check>:

uint8_t MS8607_check()
{
 80065b8:	b510      	push	{r4, lr}
	ms8607_init();
 80065ba:	f7fe f987 	bl	80048cc <ms8607_init>
	if(ms8607_is_connected()) {printf("MS8607 OK\r\n"); return 1;
 80065be:	f7fe f997 	bl	80048f0 <ms8607_is_connected>
 80065c2:	b120      	cbz	r0, 80065ce <MS8607_check+0x16>
 80065c4:	4805      	ldr	r0, [pc, #20]	@ (80065dc <MS8607_check+0x24>)
 80065c6:	f007 f91b 	bl	800d800 <puts>
 80065ca:	2001      	movs	r0, #1
	} else {printf("MS8607 FAIL\r\n"); return 0;};
	ms8607_reset();
}
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	4604      	mov	r4, r0
	} else {printf("MS8607 FAIL\r\n"); return 0;};
 80065d0:	4803      	ldr	r0, [pc, #12]	@ (80065e0 <MS8607_check+0x28>)
 80065d2:	f007 f915 	bl	800d800 <puts>
 80065d6:	4620      	mov	r0, r4
}
 80065d8:	bd10      	pop	{r4, pc}
 80065da:	bf00      	nop
 80065dc:	08011b60 	.word	0x08011b60
 80065e0:	08011b6c 	.word	0x08011b6c

080065e4 <MS8607_get_temp>:




float MS8607_get_temp()
{
 80065e4:	b500      	push	{lr}
 80065e6:	b083      	sub	sp, #12
	float temp;
	ms8607_read_temperature(&temp);
 80065e8:	a801      	add	r0, sp, #4
 80065ea:	f7fe fa15 	bl	8004a18 <ms8607_read_temperature>
//	printf("MS Temp: %f\r\n",temp);
	return temp;
}
 80065ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80065f2:	b003      	add	sp, #12
 80065f4:	f85d fb04 	ldr.w	pc, [sp], #4

080065f8 <MS8607_get_press>:

float MS8607_get_press()
{
 80065f8:	b500      	push	{lr}
 80065fa:	b083      	sub	sp, #12
	float press;
	ms8607_read_pressure(&press);
 80065fc:	a801      	add	r0, sp, #4
 80065fe:	f7fe fb07 	bl	8004c10 <ms8607_read_pressure>
//	printf("MS Press: %f\r\n",press);
	return press;
}
 8006602:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006606:	b003      	add	sp, #12
 8006608:	f85d fb04 	ldr.w	pc, [sp], #4

0800660c <MS8607_get_hum>:

float MS8607_get_hum()
{
 800660c:	b500      	push	{lr}
 800660e:	b083      	sub	sp, #12
	float hum;
	ms8607_read_humidity(&hum);
 8006610:	a801      	add	r0, sp, #4
 8006612:	f7fe f987 	bl	8004924 <ms8607_read_humidity>
//	printf("MS Hum: %f\r\n",hum);
	return hum;
}
 8006616:	ed9d 0a01 	vldr	s0, [sp, #4]
 800661a:	b003      	add	sp, #12
 800661c:	f85d fb04 	ldr.w	pc, [sp], #4

08006620 <SHTC3_check>:
	else return 0;
}


uint8_t SHTC3_check()
{
 8006620:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef status, status2;
	uint8_t data[2];
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 8006622:	4829      	ldr	r0, [pc, #164]	@ (80066c8 <SHTC3_check+0xa8>)
{
 8006624:	b085      	sub	sp, #20
	status = HAL_I2C_IsDeviceReady(&hi2c2, SHTC3_ADDR_WRITE, 3, 500);
 8006626:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800662a:	2203      	movs	r2, #3
 800662c:	21e0      	movs	r1, #224	@ 0xe0
 800662e:	f002 fad1 	bl	8008bd4 <HAL_I2C_IsDeviceReady>
 8006632:	4604      	mov	r4, r0
	osDelay(2);
 8006634:	2002      	movs	r0, #2
 8006636:	f004 f9dd 	bl	800a9f4 <osDelay>
	if (status == HAL_OK) {
 800663a:	bbac      	cbnz	r4, 80066a8 <SHTC3_check+0x88>
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800663c:	2396      	movs	r3, #150	@ 0x96
	uint16_t command = SHTC3_CMD_WAKEUP;
 800663e:	f241 7135 	movw	r1, #5941	@ 0x1735
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8006642:	9300      	str	r3, [sp, #0]
	uint16_t command = SHTC3_CMD_WAKEUP;
 8006644:	f8ad 100e 	strh.w	r1, [sp, #14]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8006648:	481f      	ldr	r0, [pc, #124]	@ (80066c8 <SHTC3_check+0xa8>)
 800664a:	21e0      	movs	r1, #224	@ 0xe0
 800664c:	2302      	movs	r3, #2
 800664e:	f10d 020e 	add.w	r2, sp, #14
 8006652:	f001 fee1 	bl	8008418 <HAL_I2C_Master_Transmit>
	if(status == HAL_OK) { return 1; }
 8006656:	4601      	mov	r1, r0
 8006658:	bb10      	cbnz	r0, 80066a0 <SHTC3_check+0x80>
		SHTC3_wakeup();
		uint16_t command = SHTC3_CMD_READ_ID;
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800665a:	2596      	movs	r5, #150	@ 0x96
		uint16_t command = SHTC3_CMD_READ_ID;
 800665c:	f64c 00ef 	movw	r0, #51439	@ 0xc8ef
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8006660:	2302      	movs	r3, #2
 8006662:	f10d 020e 	add.w	r2, sp, #14
 8006666:	21e0      	movs	r1, #224	@ 0xe0
		uint16_t command = SHTC3_CMD_READ_ID;
 8006668:	f8ad 000e 	strh.w	r0, [sp, #14]
		status2 = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800666c:	9500      	str	r5, [sp, #0]
 800666e:	4816      	ldr	r0, [pc, #88]	@ (80066c8 <SHTC3_check+0xa8>)
 8006670:	f001 fed2 	bl	8008418 <HAL_I2C_Master_Transmit>
		status2 = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)data, 2, 150);
 8006674:	4814      	ldr	r0, [pc, #80]	@ (80066c8 <SHTC3_check+0xa8>)
 8006676:	9500      	str	r5, [sp, #0]
 8006678:	2302      	movs	r3, #2
 800667a:	aa03      	add	r2, sp, #12
 800667c:	21e1      	movs	r1, #225	@ 0xe1
 800667e:	f001 ff95 	bl	80085ac <HAL_I2C_Master_Receive>
		  if (status2 == HAL_OK) {
 8006682:	b9d0      	cbnz	r0, 80066ba <SHTC3_check+0x9a>
			  uint16_t id = data[0] << 8 | data[1];
			  uint16_t code = id & SHTC3_PRODUCT_CODE_MASK;
			  if (code == 0x807) {
 8006684:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8006688:	f640 033f 	movw	r3, #2111	@ 0x83f
 800668c:	ba52      	rev16	r2, r2
 800668e:	4013      	ands	r3, r2
 8006690:	f640 0207 	movw	r2, #2055	@ 0x807
 8006694:	4293      	cmp	r3, r2
 8006696:	d00b      	beq.n	80066b0 <SHTC3_check+0x90>
//				  SHTC3_start_meas(0);
//				  SHTC3_sleep();
				  return 1;
			  }
		  } else {printf("NO SHTC3\r\n"); return 0;}
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 8006698:	2400      	movs	r4, #0
	return 0;
}
 800669a:	4620      	mov	r0, r4
 800669c:	b005      	add	sp, #20
 800669e:	bd30      	pop	{r4, r5, pc}
	else {printf("SHTC3 Wake up fail %x\r\n", status); return 0; }
 80066a0:	480a      	ldr	r0, [pc, #40]	@ (80066cc <SHTC3_check+0xac>)
 80066a2:	f007 f845 	bl	800d730 <iprintf>
 80066a6:	e7d8      	b.n	800665a <SHTC3_check+0x3a>
	} else {printf("SHTC3 FAILED\r\n"); return 0;}
 80066a8:	4809      	ldr	r0, [pc, #36]	@ (80066d0 <SHTC3_check+0xb0>)
 80066aa:	f007 f8a9 	bl	800d800 <puts>
 80066ae:	e7f3      	b.n	8006698 <SHTC3_check+0x78>
				  printf("SHTC3 OK\r\n");
 80066b0:	4808      	ldr	r0, [pc, #32]	@ (80066d4 <SHTC3_check+0xb4>)
 80066b2:	f007 f8a5 	bl	800d800 <puts>
				  return 1;
 80066b6:	2401      	movs	r4, #1
 80066b8:	e7ef      	b.n	800669a <SHTC3_check+0x7a>
		  } else {printf("NO SHTC3\r\n"); return 0;}
 80066ba:	4807      	ldr	r0, [pc, #28]	@ (80066d8 <SHTC3_check+0xb8>)
 80066bc:	f007 f8a0 	bl	800d800 <puts>
}
 80066c0:	4620      	mov	r0, r4
 80066c2:	b005      	add	sp, #20
 80066c4:	bd30      	pop	{r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	20000444 	.word	0x20000444
 80066cc:	08011b7c 	.word	0x08011b7c
 80066d0:	08011bac 	.word	0x08011bac
 80066d4:	08011b94 	.word	0x08011b94
 80066d8:	08011ba0 	.word	0x08011ba0

080066dc <SHTC3_start_meas>:

uint8_t SHTC3_start_meas(uint8_t mode)
{
 80066dc:	b510      	push	{r4, lr}
 80066de:	b084      	sub	sp, #16
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80066e0:	2396      	movs	r3, #150	@ 0x96
	uint16_t command = SHTC3_CMD_WAKEUP;
 80066e2:	f241 7135 	movw	r1, #5941	@ 0x1735
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80066e6:	9300      	str	r3, [sp, #0]
{
 80066e8:	4604      	mov	r4, r0
	uint16_t command = SHTC3_CMD_WAKEUP;
 80066ea:	f8ad 100e 	strh.w	r1, [sp, #14]
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 80066ee:	4810      	ldr	r0, [pc, #64]	@ (8006730 <SHTC3_start_meas+0x54>)
 80066f0:	2302      	movs	r3, #2
 80066f2:	f10d 020e 	add.w	r2, sp, #14
 80066f6:	21e0      	movs	r1, #224	@ 0xe0
 80066f8:	f001 fe8e 	bl	8008418 <HAL_I2C_Master_Transmit>
	if(status == HAL_OK) { return 1; }
 80066fc:	b998      	cbnz	r0, 8006726 <SHTC3_start_meas+0x4a>
	HAL_StatusTypeDef status;
	uint16_t command;
	SHTC3_wakeup();
	if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 80066fe:	f24a 227c 	movw	r2, #41596	@ 0xa27c
	else command = SHTC3_CMD_TEMP_HUM_LP;
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 8006702:	2396      	movs	r3, #150	@ 0x96
	if(mode == 0) command = SHTC3_CMD_TEMP_HUM;
 8006704:	f645 0c64 	movw	ip, #22628	@ 0x5864
 8006708:	2c00      	cmp	r4, #0
 800670a:	bf08      	it	eq
 800670c:	4694      	moveq	ip, r2
	status = HAL_I2C_Master_Transmit(&hi2c2, SHTC3_ADDR_WRITE, (uint8_t*)&command, 2, 150);
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	f10d 020e 	add.w	r2, sp, #14
 8006714:	2302      	movs	r3, #2
 8006716:	21e0      	movs	r1, #224	@ 0xe0
 8006718:	4805      	ldr	r0, [pc, #20]	@ (8006730 <SHTC3_start_meas+0x54>)
 800671a:	f8ad c00e 	strh.w	ip, [sp, #14]
 800671e:	f001 fe7b 	bl	8008418 <HAL_I2C_Master_Transmit>
	return status; //0 = OK
}
 8006722:	b004      	add	sp, #16
 8006724:	bd10      	pop	{r4, pc}
 8006726:	4601      	mov	r1, r0
	else {printf("SHTC3 Wake up fail %x\r\n", status); return 0; }
 8006728:	4802      	ldr	r0, [pc, #8]	@ (8006734 <SHTC3_start_meas+0x58>)
 800672a:	f007 f801 	bl	800d730 <iprintf>
 800672e:	e7e6      	b.n	80066fe <SHTC3_start_meas+0x22>
 8006730:	20000444 	.word	0x20000444
 8006734:	08011b7c 	.word	0x08011b7c

08006738 <SHTC3_read_values>:

uint8_t SHTC3_read_values(uint8_t* result)
{
 8006738:	b500      	push	{lr}
 800673a:	b083      	sub	sp, #12
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)result, 6, 500);
 800673c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
{
 8006740:	4602      	mov	r2, r0
	status = HAL_I2C_Master_Receive(&hi2c2, SHTC3_ADDR_READ, (uint8_t*)result, 6, 500);
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	21e1      	movs	r1, #225	@ 0xe1
 8006746:	2306      	movs	r3, #6
 8006748:	4804      	ldr	r0, [pc, #16]	@ (800675c <SHTC3_read_values+0x24>)
 800674a:	f001 ff2f 	bl	80085ac <HAL_I2C_Master_Receive>
	if (status != HAL_OK) {
		return 0;
	} 	else {
		return 1;
	};
}
 800674e:	fab0 f080 	clz	r0, r0
 8006752:	0940      	lsrs	r0, r0, #5
 8006754:	b003      	add	sp, #12
 8006756:	f85d fb04 	ldr.w	pc, [sp], #4
 800675a:	bf00      	nop
 800675c:	20000444 	.word	0x20000444

08006760 <SHTC3_get_temp>:

float SHTC3_get_temp(uint8_t* result)
{
 8006760:	b530      	push	{r4, r5, lr}
 8006762:	8803      	ldrh	r3, [r0, #0]
 8006764:	b083      	sub	sp, #12
 8006766:	ba5b      	rev16	r3, r3
 8006768:	4604      	mov	r4, r0
 800676a:	b29d      	uxth	r5, r3
	uint16_t raw_temp = result[0] << 8 | result[1];
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
	uint8_t crc_hal = HALcalculateCRC(data,2);
 800676c:	2102      	movs	r1, #2
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
 800676e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	uint8_t crc_hal = HALcalculateCRC(data,2);
 8006772:	a801      	add	r0, sp, #4
	uint8_t data[2] = {raw_temp >> 8, raw_temp & 0xFF};
 8006774:	f88d 3004 	strb.w	r3, [sp, #4]
 8006778:	f88d 5005 	strb.w	r5, [sp, #5]
	uint8_t crc_hal = HALcalculateCRC(data,2);
 800677c:	f7fe ff32 	bl	80055e4 <HALcalculateCRC>
	if(result[2] == crc_hal) {
 8006780:	78a3      	ldrb	r3, [r4, #2]
 8006782:	4283      	cmp	r3, r0
 8006784:	d006      	beq.n	8006794 <SHTC3_get_temp+0x34>
		return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
	}
	else {printf("Bad CRC\r\n");};
 8006786:	480c      	ldr	r0, [pc, #48]	@ (80067b8 <SHTC3_get_temp+0x58>)
 8006788:	f007 f83a 	bl	800d800 <puts>
	return -1000.0;
 800678c:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80067bc <SHTC3_get_temp+0x5c>
}
 8006790:	b003      	add	sp, #12
 8006792:	bd30      	pop	{r4, r5, pc}
		return (float)(((raw_temp * 175.0f) / 65535.0f) - 45.0f);
 8006794:	ee07 5a90 	vmov	s15, r5
 8006798:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80067c0 <SHTC3_get_temp+0x60>
 800679c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80067c4 <SHTC3_get_temp+0x64>
 80067a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067a8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80067c8 <SHTC3_get_temp+0x68>
 80067ac:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80067b0:	ee30 0a47 	vsub.f32	s0, s0, s14
}
 80067b4:	b003      	add	sp, #12
 80067b6:	bd30      	pop	{r4, r5, pc}
 80067b8:	08011bbc 	.word	0x08011bbc
 80067bc:	c47a0000 	.word	0xc47a0000
 80067c0:	432f0000 	.word	0x432f0000
 80067c4:	477fff00 	.word	0x477fff00
 80067c8:	42340000 	.word	0x42340000

080067cc <SHTC3_get_hum>:

float SHTC3_get_hum(uint8_t* result)
{
 80067cc:	b530      	push	{r4, r5, lr}
 80067ce:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 80067d2:	b083      	sub	sp, #12
 80067d4:	ba5b      	rev16	r3, r3
 80067d6:	4604      	mov	r4, r0
 80067d8:	b29d      	uxth	r5, r3
	uint16_t raw_hum = result[3] << 8 | result[4];
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80067da:	2102      	movs	r1, #2
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
 80067dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80067e0:	a801      	add	r0, sp, #4
	uint8_t data[2] = {raw_hum >> 8, raw_hum & 0xFF};
 80067e2:	f88d 3004 	strb.w	r3, [sp, #4]
 80067e6:	f88d 5005 	strb.w	r5, [sp, #5]
	uint8_t crc_hal = HALcalculateCRC(data,2);
 80067ea:	f7fe fefb 	bl	80055e4 <HALcalculateCRC>
	if(result[5] == crc_hal) {
 80067ee:	7963      	ldrb	r3, [r4, #5]
 80067f0:	4283      	cmp	r3, r0
 80067f2:	d006      	beq.n	8006802 <SHTC3_get_hum+0x36>
		return (float)((raw_hum * 100.0f) / 65535.0f);
	}
	else {printf("Bad CRC\r\n");};
 80067f4:	480a      	ldr	r0, [pc, #40]	@ (8006820 <SHTC3_get_hum+0x54>)
 80067f6:	f007 f803 	bl	800d800 <puts>
	return -1000.0;
 80067fa:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8006824 <SHTC3_get_hum+0x58>
}
 80067fe:	b003      	add	sp, #12
 8006800:	bd30      	pop	{r4, r5, pc}
		return (float)((raw_hum * 100.0f) / 65535.0f);
 8006802:	ee07 5a90 	vmov	s15, r5
 8006806:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8006828 <SHTC3_get_hum+0x5c>
 800680a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800682c <SHTC3_get_hum+0x60>
 800680e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006812:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006816:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 800681a:	b003      	add	sp, #12
 800681c:	bd30      	pop	{r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	08011bbc 	.word	0x08011bbc
 8006824:	c47a0000 	.word	0xc47a0000
 8006828:	42c80000 	.word	0x42c80000
 800682c:	477fff00 	.word	0x477fff00

08006830 <BME280_check>:

uint8_t BME280_check()
{
 8006830:	b570      	push	{r4, r5, r6, lr}
		I2C2TCA_NRST();
 8006832:	2201      	movs	r2, #1
{
 8006834:	b086      	sub	sp, #24
		I2C2TCA_NRST();
 8006836:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800683a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800683e:	f001 fc4d 	bl	80080dc <HAL_GPIO_WritePin>
		osDelay(1);
 8006842:	2001      	movs	r0, #1
 8006844:	f004 f8d6 	bl	800a9f4 <osDelay>
		uint8_t data = 1 << channel;
 8006848:	2401      	movs	r4, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800684a:	f04f 31ff 	mov.w	r1, #4294967295
 800684e:	f10d 0617 	add.w	r6, sp, #23
 8006852:	e9cd 4101 	strd	r4, r1, [sp, #4]
 8006856:	4623      	mov	r3, r4
 8006858:	2200      	movs	r2, #0
 800685a:	21e4      	movs	r1, #228	@ 0xe4
 800685c:	4817      	ldr	r0, [pc, #92]	@ (80068bc <BME280_check+0x8c>)
 800685e:	9600      	str	r6, [sp, #0]
		uint8_t data = 1 << channel;
 8006860:	f88d 4017 	strb.w	r4, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006864:	f001 ff72 	bl	800874c <HAL_I2C_Mem_Write>
	uint8_t value;
	SET_BME280();
	HAL_StatusTypeDef status;
	status = HAL_I2C_IsDeviceReady(&hi2c2, BMP280_I2C_ADDRESS_1 << 1, 3, 150);
 8006868:	4814      	ldr	r0, [pc, #80]	@ (80068bc <BME280_check+0x8c>)
 800686a:	2396      	movs	r3, #150	@ 0x96
 800686c:	2203      	movs	r2, #3
 800686e:	21ee      	movs	r1, #238	@ 0xee
 8006870:	f002 f9b0 	bl	8008bd4 <HAL_I2C_IsDeviceReady>
 8006874:	4605      	mov	r5, r0
	osDelay(100);
 8006876:	2064      	movs	r0, #100	@ 0x64
 8006878:	f004 f8bc 	bl	800a9f4 <osDelay>
	if (status == HAL_OK) {
 800687c:	b9cd      	cbnz	r5, 80068b2 <BME280_check+0x82>
    uint8_t res = HAL_I2C_Mem_Read(i2c, addr, offset, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&tmp, 1, 8);
 800687e:	2308      	movs	r3, #8
 8006880:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8006884:	480d      	ldr	r0, [pc, #52]	@ (80068bc <BME280_check+0x8c>)
 8006886:	9600      	str	r6, [sp, #0]
 8006888:	4623      	mov	r3, r4
 800688a:	22d0      	movs	r2, #208	@ 0xd0
 800688c:	21ee      	movs	r1, #238	@ 0xee
 800688e:	f002 f883 	bl	8008998 <HAL_I2C_Mem_Read>
    *value = tmp;
 8006892:	f89d 3017 	ldrb.w	r3, [sp, #23]
		i2c_read8(&hi2c2, BMP280_REG_ID, &value, BMP280_I2C_ADDRESS_1 << 1);
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 8006896:	2b60      	cmp	r3, #96	@ 0x60
 8006898:	d005      	beq.n	80068a6 <BME280_check+0x76>
 800689a:	4809      	ldr	r0, [pc, #36]	@ (80068c0 <BME280_check+0x90>)
 800689c:	f006 ffb0 	bl	800d800 <puts>
 80068a0:	2000      	movs	r0, #0
	} else {printf("BME280 FAILED\r\n"); return 0;}
	return 0;

}
 80068a2:	b006      	add	sp, #24
 80068a4:	bd70      	pop	{r4, r5, r6, pc}
		if(value == BME280_CHIP_ID) {printf("BME280 OK\r\n"); return 1;} else {printf("NOT BME280\r\n"); return 0;}
 80068a6:	4807      	ldr	r0, [pc, #28]	@ (80068c4 <BME280_check+0x94>)
 80068a8:	f006 ffaa 	bl	800d800 <puts>
 80068ac:	4620      	mov	r0, r4
}
 80068ae:	b006      	add	sp, #24
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
	} else {printf("BME280 FAILED\r\n"); return 0;}
 80068b2:	4805      	ldr	r0, [pc, #20]	@ (80068c8 <BME280_check+0x98>)
 80068b4:	f006 ffa4 	bl	800d800 <puts>
 80068b8:	e7f2      	b.n	80068a0 <BME280_check+0x70>
 80068ba:	bf00      	nop
 80068bc:	20000444 	.word	0x20000444
 80068c0:	08011bd4 	.word	0x08011bd4
 80068c4:	08011bc8 	.word	0x08011bc8
 80068c8:	08011be0 	.word	0x08011be0

080068cc <BME280_init_config>:

void BME280_init_config(uint8_t conf_mode, uint8_t ovr_temp, uint8_t ovr_press, uint8_t ovr_hum, uint8_t coeff)
{
 80068cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068d0:	b087      	sub	sp, #28
 80068d2:	4604      	mov	r4, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	4690      	mov	r8, r2
		I2C2TCA_NRST();
 80068d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80068dc:	2201      	movs	r2, #1
 80068de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
{
 80068e2:	461e      	mov	r6, r3
 80068e4:	f89d 9038 	ldrb.w	r9, [sp, #56]	@ 0x38
		I2C2TCA_NRST();
 80068e8:	f001 fbf8 	bl	80080dc <HAL_GPIO_WritePin>
		osDelay(1);
 80068ec:	2001      	movs	r0, #1
 80068ee:	f004 f881 	bl	800a9f4 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80068f2:	f04f 32ff 	mov.w	r2, #4294967295
		uint8_t data = 1 << channel;
 80068f6:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80068f8:	9202      	str	r2, [sp, #8]
 80068fa:	f10d 0217 	add.w	r2, sp, #23
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	9200      	str	r2, [sp, #0]
 8006902:	21e4      	movs	r1, #228	@ 0xe4
 8006904:	2200      	movs	r2, #0
 8006906:	4815      	ldr	r0, [pc, #84]	@ (800695c <BME280_init_config+0x90>)
		uint8_t data = 1 << channel;
 8006908:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800690c:	f001 ff1e 	bl	800874c <HAL_I2C_Mem_Write>
	bmp280.params.oversampling_humidity = ovr_hum;
//	bmp280.params.standby = BMP280_STANDBY_250;
	bmp280.addr = BMP280_I2C_ADDRESS_1;
	bmp280.i2c = &hi2c2;

	switch (conf_mode)
 8006910:	2c01      	cmp	r4, #1
 8006912:	bf18      	it	ne
 8006914:	2403      	movne	r4, #3
	{
	case 1:
		bmp280.params.mode = BMP280_MODE_FORCED;
 8006916:	2500      	movs	r5, #0
	bmp280.params.oversampling_humidity = ovr_hum;
 8006918:	4811      	ldr	r0, [pc, #68]	@ (8006960 <BME280_init_config+0x94>)
	bmp280.i2c = &hi2c2;
 800691a:	4b10      	ldr	r3, [pc, #64]	@ (800695c <BME280_init_config+0x90>)
	bmp280.params.oversampling_humidity = ovr_hum;
 800691c:	f880 6030 	strb.w	r6, [r0, #48]	@ 0x30
		bmp280.params.mode = BMP280_MODE_FORCED;
 8006920:	f364 0507 	bfi	r5, r4, #0, #8
 8006924:	f369 250f 	bfi	r5, r9, #8, #8
 8006928:	f368 4517 	bfi	r5, r8, #16, #8
 800692c:	4601      	mov	r1, r0
 800692e:	f367 651f 	bfi	r5, r7, #24, #8
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8006932:	2277      	movs	r2, #119	@ 0x77
		bmp280.params.mode = BMP280_MODE_FORCED;
 8006934:	f841 5f2c 	str.w	r5, [r1, #44]!
	bmp280.addr = BMP280_I2C_ADDRESS_1;
 8006938:	8482      	strh	r2, [r0, #36]	@ 0x24
	bmp280.i2c = &hi2c2;
 800693a:	6283      	str	r3, [r0, #40]	@ 0x28
		bmp280.params.mode = BMP280_MODE_NORMAL;
		break;
	default:
		bmp280.params.mode = BMP280_MODE_NORMAL;
	  }
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 800693c:	f7fb f812 	bl	8001964 <bmp280_init>
 8006940:	b128      	cbz	r0, 800694e <BME280_init_config+0x82>
 8006942:	4808      	ldr	r0, [pc, #32]	@ (8006964 <BME280_init_config+0x98>)
}
 8006944:	b007      	add	sp, #28
 8006946:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 800694a:	f006 bf59 	b.w	800d800 <puts>
 800694e:	4806      	ldr	r0, [pc, #24]	@ (8006968 <BME280_init_config+0x9c>)
}
 8006950:	b007      	add	sp, #28
 8006952:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if(bmp280_init(&bmp280, &bmp280.params)) printf("BME280 init OK\r\n"); else printf("BME280 init FAIL\r\n");
 8006956:	f006 bf53 	b.w	800d800 <puts>
 800695a:	bf00      	nop
 800695c:	20000444 	.word	0x20000444
 8006960:	20000680 	.word	0x20000680
 8006964:	08011bf0 	.word	0x08011bf0
 8006968:	08011c00 	.word	0x08011c00

0800696c <BME280_get_temp>:

float BME280_get_temp()
{
 800696c:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 800696e:	2201      	movs	r2, #1
{
 8006970:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 8006972:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006976:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800697a:	f001 fbaf 	bl	80080dc <HAL_GPIO_WritePin>
		osDelay(1);
 800697e:	2001      	movs	r0, #1
 8006980:	f004 f838 	bl	800a9f4 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006984:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 8006986:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006988:	f04f 32ff 	mov.w	r2, #4294967295
 800698c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006990:	480b      	ldr	r0, [pc, #44]	@ (80069c0 <BME280_get_temp+0x54>)
 8006992:	9500      	str	r5, [sp, #0]
 8006994:	2200      	movs	r2, #0
 8006996:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 8006998:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800699c:	f001 fed6 	bl	800874c <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 80069a0:	4c08      	ldr	r4, [pc, #32]	@ (80069c4 <BME280_get_temp+0x58>)
 80069a2:	4620      	mov	r0, r4
 80069a4:	f7fb f9cc 	bl	8001d40 <bmp280_is_measuring>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d1fa      	bne.n	80069a2 <BME280_get_temp+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 80069ac:	462b      	mov	r3, r5
 80069ae:	aa06      	add	r2, sp, #24
 80069b0:	a905      	add	r1, sp, #20
 80069b2:	4804      	ldr	r0, [pc, #16]	@ (80069c4 <BME280_get_temp+0x58>)
 80069b4:	f7fb fb44 	bl	8002040 <bmp280_read_float>
	return temp;
}
 80069b8:	ed9d 0a05 	vldr	s0, [sp, #20]
 80069bc:	b009      	add	sp, #36	@ 0x24
 80069be:	bd30      	pop	{r4, r5, pc}
 80069c0:	20000444 	.word	0x20000444
 80069c4:	20000680 	.word	0x20000680

080069c8 <BME280_get_press>:

float BME280_get_press()
{
 80069c8:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 80069ca:	2201      	movs	r2, #1
{
 80069cc:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 80069ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80069d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80069d6:	f001 fb81 	bl	80080dc <HAL_GPIO_WritePin>
		osDelay(1);
 80069da:	2001      	movs	r0, #1
 80069dc:	f004 f80a 	bl	800a9f4 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80069e0:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 80069e2:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295
 80069e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80069ec:	480b      	ldr	r0, [pc, #44]	@ (8006a1c <BME280_get_press+0x54>)
 80069ee:	9500      	str	r5, [sp, #0]
 80069f0:	2200      	movs	r2, #0
 80069f2:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 80069f4:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80069f8:	f001 fea8 	bl	800874c <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 80069fc:	4c08      	ldr	r4, [pc, #32]	@ (8006a20 <BME280_get_press+0x58>)
 80069fe:	4620      	mov	r0, r4
 8006a00:	f7fb f99e 	bl	8001d40 <bmp280_is_measuring>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d1fa      	bne.n	80069fe <BME280_get_press+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8006a08:	462b      	mov	r3, r5
 8006a0a:	aa06      	add	r2, sp, #24
 8006a0c:	a905      	add	r1, sp, #20
 8006a0e:	4804      	ldr	r0, [pc, #16]	@ (8006a20 <BME280_get_press+0x58>)
 8006a10:	f7fb fb16 	bl	8002040 <bmp280_read_float>
	return press;
}
 8006a14:	ed9d 0a06 	vldr	s0, [sp, #24]
 8006a18:	b009      	add	sp, #36	@ 0x24
 8006a1a:	bd30      	pop	{r4, r5, pc}
 8006a1c:	20000444 	.word	0x20000444
 8006a20:	20000680 	.word	0x20000680

08006a24 <BME280_get_hum>:

float BME280_get_hum()
{
 8006a24:	b530      	push	{r4, r5, lr}
		I2C2TCA_NRST();
 8006a26:	2201      	movs	r2, #1
{
 8006a28:	b089      	sub	sp, #36	@ 0x24
		I2C2TCA_NRST();
 8006a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a32:	f001 fb53 	bl	80080dc <HAL_GPIO_WritePin>
		osDelay(1);
 8006a36:	2001      	movs	r0, #1
 8006a38:	f003 ffdc 	bl	800a9f4 <osDelay>
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006a3c:	ad07      	add	r5, sp, #28
		uint8_t data = 1 << channel;
 8006a3e:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295
 8006a44:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a48:	480b      	ldr	r0, [pc, #44]	@ (8006a78 <BME280_get_hum+0x54>)
 8006a4a:	9500      	str	r5, [sp, #0]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	21e4      	movs	r1, #228	@ 0xe4
		uint8_t data = 1 << channel;
 8006a50:	f88d 301c 	strb.w	r3, [sp, #28]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006a54:	f001 fe7a 	bl	800874c <HAL_I2C_Mem_Write>
	SET_BME280();
	float temp, press, hum;
	while(bmp280_is_measuring(&bmp280));
 8006a58:	4c08      	ldr	r4, [pc, #32]	@ (8006a7c <BME280_get_hum+0x58>)
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f7fb f970 	bl	8001d40 <bmp280_is_measuring>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1fa      	bne.n	8006a5a <BME280_get_hum+0x36>
	bmp280_read_float(&bmp280, &temp, &press, &hum);
 8006a64:	462b      	mov	r3, r5
 8006a66:	aa06      	add	r2, sp, #24
 8006a68:	a905      	add	r1, sp, #20
 8006a6a:	4804      	ldr	r0, [pc, #16]	@ (8006a7c <BME280_get_hum+0x58>)
 8006a6c:	f7fb fae8 	bl	8002040 <bmp280_read_float>
	return hum;
}
 8006a70:	ed9d 0a07 	vldr	s0, [sp, #28]
 8006a74:	b009      	add	sp, #36	@ 0x24
 8006a76:	bd30      	pop	{r4, r5, pc}
 8006a78:	20000444 	.word	0x20000444
 8006a7c:	20000680 	.word	0x20000680

08006a80 <BME280_start_meas>:

void BME280_start_meas()
{
 8006a80:	b500      	push	{lr}
		I2C2TCA_NRST();
 8006a82:	2201      	movs	r2, #1
{
 8006a84:	b087      	sub	sp, #28
		I2C2TCA_NRST();
 8006a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006a8e:	f001 fb25 	bl	80080dc <HAL_GPIO_WritePin>
		osDelay(1);
 8006a92:	2001      	movs	r0, #1
 8006a94:	f003 ffae 	bl	800a9f4 <osDelay>
		uint8_t data = 1 << channel;
 8006a98:	2301      	movs	r3, #1
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9e:	f10d 0117 	add.w	r1, sp, #23
 8006aa2:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8006aa6:	9100      	str	r1, [sp, #0]
 8006aa8:	4809      	ldr	r0, [pc, #36]	@ (8006ad0 <BME280_start_meas+0x50>)
		uint8_t data = 1 << channel;
 8006aaa:	f88d 3017 	strb.w	r3, [sp, #23]
		HAL_I2C_Mem_Write(&hi2c2, TCA9543A_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	21e4      	movs	r1, #228	@ 0xe4
 8006ab2:	f001 fe4b 	bl	800874c <HAL_I2C_Mem_Write>
	SET_BME280();
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8006ab6:	4807      	ldr	r0, [pc, #28]	@ (8006ad4 <BME280_start_meas+0x54>)
 8006ab8:	f7fb f90e 	bl	8001cd8 <bmp280_force_measurement>
 8006abc:	b110      	cbz	r0, 8006ac4 <BME280_start_meas+0x44>
}
 8006abe:	b007      	add	sp, #28
 8006ac0:	f85d fb04 	ldr.w	pc, [sp], #4
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8006ac4:	4804      	ldr	r0, [pc, #16]	@ (8006ad8 <BME280_start_meas+0x58>)
}
 8006ac6:	b007      	add	sp, #28
 8006ac8:	f85d eb04 	ldr.w	lr, [sp], #4
	if(!bmp280_force_measurement(&bmp280)) printf("Komenda w BME280 niewykonana\r\n");
 8006acc:	f006 be98 	b.w	800d800 <puts>
 8006ad0:	20000444 	.word	0x20000444
 8006ad4:	20000680 	.word	0x20000680
 8006ad8:	08011c14 	.word	0x08011c14

08006adc <bme280_conf_change>:

void bme280_conf_change(uint8_t sensor_conf)
{
 8006adc:	b500      	push	{lr}
 8006ade:	b083      	sub	sp, #12
    switch (sensor_conf) {
 8006ae0:	2809      	cmp	r0, #9
 8006ae2:	d869      	bhi.n	8006bb8 <bme280_conf_change+0xdc>
 8006ae4:	e8df f000 	tbb	[pc, r0]
 8006ae8:	30261c12 	.word	0x30261c12
 8006aec:	564d443a 	.word	0x564d443a
 8006af0:	055f      	.short	0x055f
        case 8:
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_2);
        	printf("BME280 set x8, 2 IIR\r\n");
            return;
        case 9:
        	BME280_init_config(1, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
 8006af2:	2305      	movs	r3, #5
 8006af4:	2001      	movs	r0, #1
 8006af6:	9000      	str	r0, [sp, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	4619      	mov	r1, r3
 8006afc:	f7ff fee6 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x16, 2 IIR\r\n");
 8006b00:	4832      	ldr	r0, [pc, #200]	@ (8006bcc <bme280_conf_change+0xf0>)
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
            return ;
    }

}
 8006b02:	b003      	add	sp, #12
 8006b04:	f85d eb04 	ldr.w	lr, [sp], #4
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
 8006b08:	f006 be7a 	b.w	800d800 <puts>
        	BME280_init_config(1, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_FILTER_OFF);
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	2200      	movs	r2, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	9200      	str	r2, [sp, #0]
 8006b14:	4619      	mov	r1, r3
 8006b16:	461a      	mov	r2, r3
 8006b18:	f7ff fed8 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x1, no IIR\r\n");
 8006b1c:	482c      	ldr	r0, [pc, #176]	@ (8006bd0 <bme280_conf_change+0xf4>)
 8006b1e:	e7f0      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_FILTER_OFF);
 8006b20:	2302      	movs	r3, #2
 8006b22:	2200      	movs	r2, #0
 8006b24:	2001      	movs	r0, #1
 8006b26:	9200      	str	r2, [sp, #0]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7ff fece 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x2, no IIR\r\n");
 8006b30:	4828      	ldr	r0, [pc, #160]	@ (8006bd4 <bme280_conf_change+0xf8>)
 8006b32:	e7e6      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_OFF);
 8006b34:	2303      	movs	r3, #3
 8006b36:	2200      	movs	r2, #0
 8006b38:	2001      	movs	r0, #1
 8006b3a:	9200      	str	r2, [sp, #0]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f7ff fec4 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x4, no IIR\r\n");
 8006b44:	4824      	ldr	r0, [pc, #144]	@ (8006bd8 <bme280_conf_change+0xfc>)
 8006b46:	e7dc      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_OFF);
 8006b48:	2304      	movs	r3, #4
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	9200      	str	r2, [sp, #0]
 8006b50:	4619      	mov	r1, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	f7ff feba 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x8, no IIR\r\n");
 8006b58:	4820      	ldr	r0, [pc, #128]	@ (8006bdc <bme280_conf_change+0x100>)
 8006b5a:	e7d2      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_OFF);
 8006b5c:	2305      	movs	r3, #5
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2001      	movs	r0, #1
 8006b62:	9200      	str	r2, [sp, #0]
 8006b64:	4619      	mov	r1, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	f7ff feb0 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x16, no IIR\r\n");
 8006b6c:	481c      	ldr	r0, [pc, #112]	@ (8006be0 <bme280_conf_change+0x104>)
 8006b6e:	e7c8      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_ULTRA_LOW_POWER, BMP280_FILTER_2);
 8006b70:	2101      	movs	r1, #1
 8006b72:	4608      	mov	r0, r1
 8006b74:	9100      	str	r1, [sp, #0]
 8006b76:	460b      	mov	r3, r1
 8006b78:	460a      	mov	r2, r1
 8006b7a:	f7ff fea7 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x1, 2 IIR\r\n");
 8006b7e:	4819      	ldr	r0, [pc, #100]	@ (8006be4 <bme280_conf_change+0x108>)
 8006b80:	e7bf      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_LOW_POWER, BMP280_FILTER_2);
 8006b82:	2302      	movs	r3, #2
 8006b84:	2001      	movs	r0, #1
 8006b86:	9000      	str	r0, [sp, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	f7ff fe9e 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x2, 2 IIR\r\n");
 8006b90:	4815      	ldr	r0, [pc, #84]	@ (8006be8 <bme280_conf_change+0x10c>)
 8006b92:	e7b6      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_STANDARD, BMP280_STANDARD, BMP280_STANDARD, BMP280_FILTER_2);
 8006b94:	2303      	movs	r3, #3
 8006b96:	2001      	movs	r0, #1
 8006b98:	9000      	str	r0, [sp, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	f7ff fe95 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x4, 2 IIR\r\n");
 8006ba2:	4812      	ldr	r0, [pc, #72]	@ (8006bec <bme280_conf_change+0x110>)
 8006ba4:	e7ad      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_HIGH_RES, BMP280_FILTER_2);
 8006ba6:	2304      	movs	r3, #4
 8006ba8:	2001      	movs	r0, #1
 8006baa:	9000      	str	r0, [sp, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	4619      	mov	r1, r3
 8006bb0:	f7ff fe8c 	bl	80068cc <BME280_init_config>
        	printf("BME280 set x8, 2 IIR\r\n");
 8006bb4:	480e      	ldr	r0, [pc, #56]	@ (8006bf0 <bme280_conf_change+0x114>)
 8006bb6:	e7a4      	b.n	8006b02 <bme280_conf_change+0x26>
        	BME280_init_config(1, BMP280_LOW_POWER, BMP280_HIGH_RES, BMP280_ULTRA_HIGH_RES, BMP280_FILTER_2);
 8006bb8:	2001      	movs	r0, #1
 8006bba:	9000      	str	r0, [sp, #0]
 8006bbc:	2305      	movs	r3, #5
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	2102      	movs	r1, #2
 8006bc2:	f7ff fe83 	bl	80068cc <BME280_init_config>
        	printf("BME280 set TEMP x4, PRESS x8, HUM x16, 2 IIR\r\n");
 8006bc6:	480b      	ldr	r0, [pc, #44]	@ (8006bf4 <bme280_conf_change+0x118>)
 8006bc8:	e79b      	b.n	8006b02 <bme280_conf_change+0x26>
 8006bca:	bf00      	nop
 8006bcc:	08011d0c 	.word	0x08011d0c
 8006bd0:	08011c34 	.word	0x08011c34
 8006bd4:	08011c4c 	.word	0x08011c4c
 8006bd8:	08011c64 	.word	0x08011c64
 8006bdc:	08011c7c 	.word	0x08011c7c
 8006be0:	08011c94 	.word	0x08011c94
 8006be4:	08011cac 	.word	0x08011cac
 8006be8:	08011cc4 	.word	0x08011cc4
 8006bec:	08011cdc 	.word	0x08011cdc
 8006bf0:	08011cf4 	.word	0x08011cf4
 8006bf4:	08011d24 	.word	0x08011d24

08006bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006c30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006bfc:	f7fe faea 	bl	80051d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c00:	480c      	ldr	r0, [pc, #48]	@ (8006c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8006c02:	490d      	ldr	r1, [pc, #52]	@ (8006c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006c04:	4a0d      	ldr	r2, [pc, #52]	@ (8006c3c <LoopForever+0xe>)
  movs r3, #0
 8006c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c08:	e002      	b.n	8006c10 <LoopCopyDataInit>

08006c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c0e:	3304      	adds	r3, #4

08006c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c14:	d3f9      	bcc.n	8006c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c16:	4a0a      	ldr	r2, [pc, #40]	@ (8006c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006c18:	4c0a      	ldr	r4, [pc, #40]	@ (8006c44 <LoopForever+0x16>)
  movs r3, #0
 8006c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c1c:	e001      	b.n	8006c22 <LoopFillZerobss>

08006c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c20:	3204      	adds	r2, #4

08006c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c24:	d3fb      	bcc.n	8006c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006c26:	f006 ffd1 	bl	800dbcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006c2a:	f7fd faeb 	bl	8004204 <main>

08006c2e <LoopForever>:

LoopForever:
    b LoopForever
 8006c2e:	e7fe      	b.n	8006c2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006c30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c38:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8006c3c:	08012198 	.word	0x08012198
  ldr r2, =_sbss
 8006c40:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8006c44:	20004a00 	.word	0x20004a00

08006c48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c48:	e7fe      	b.n	8006c48 <ADC1_IRQHandler>
 8006c4a:	0000      	movs	r0, r0
 8006c4c:	0000      	movs	r0, r0
	...

08006c50 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8006c50:	b510      	push	{r4, lr}
  if (lock == NULL)
 8006c52:	b160      	cbz	r0, 8006c6e <__retarget_lock_init_recursive+0x1e>
  {
    errno = EINVAL;
    return;
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8006c54:	4604      	mov	r4, r0
 8006c56:	200c      	movs	r0, #12
 8006c58:	f004 ff1a 	bl	800ba90 <malloc>
 8006c5c:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8006c5e:	b158      	cbz	r0, 8006c78 <__retarget_lock_init_recursive+0x28>
static inline void stm32_lock_init(LockingData_t *lock)
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
  {
    lock->basepri[i] = 0;
 8006c60:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8006c80 <__retarget_lock_init_recursive+0x30>
  }
  lock->nesting_level = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	7203      	strb	r3, [r0, #8]
    lock->basepri[i] = 0;
 8006c68:	ed80 7b00 	vstr	d7, [r0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8006c6c:	bd10      	pop	{r4, pc}
    errno = EINVAL;
 8006c6e:	f006 ffa7 	bl	800dbc0 <__errno>
 8006c72:	2316      	movs	r3, #22
 8006c74:	6003      	str	r3, [r0, #0]
}
 8006c76:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8006c78:	b672      	cpsid	i
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006c7a:	f7fd fcd9 	bl	8004630 <Error_Handler>
 8006c7e:	e7fe      	b.n	8006c7e <__retarget_lock_init_recursive+0x2e>
	...

08006c88 <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8006c88:	b508      	push	{r3, lr}
 8006c8a:	b1a8      	cbz	r0, 8006cb8 <__retarget_lock_acquire_recursive+0x30>
 8006c8c:	7a03      	ldrb	r3, [r0, #8]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d80e      	bhi.n	8006cb0 <__retarget_lock_acquire_recursive+0x28>
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	7202      	strb	r2, [r0, #8]
 8006c96:	f3ef 8211 	mrs	r2, BASEPRI
 8006c9a:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8006c9e:	f381 8811 	msr	BASEPRI, r1
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8006cae:	bd08      	pop	{r3, pc}
 8006cb0:	b672      	cpsid	i
 8006cb2:	f7fd fcbd 	bl	8004630 <Error_Handler>
 8006cb6:	e7fe      	b.n	8006cb6 <__retarget_lock_acquire_recursive+0x2e>
 8006cb8:	b672      	cpsid	i
 8006cba:	f7fd fcb9 	bl	8004630 <Error_Handler>
 8006cbe:	e7fe      	b.n	8006cbe <__retarget_lock_acquire_recursive+0x36>

08006cc0 <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8006cc0:	b508      	push	{r3, lr}
 8006cc2:	b170      	cbz	r0, 8006ce2 <__retarget_lock_release_recursive+0x22>
 8006cc4:	7a03      	ldrb	r3, [r0, #8]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	7203      	strb	r3, [r0, #8]
 8006cce:	d804      	bhi.n	8006cda <__retarget_lock_release_recursive+0x1a>
 8006cd0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	bd08      	pop	{r3, pc}
 8006cda:	b672      	cpsid	i
 8006cdc:	f7fd fca8 	bl	8004630 <Error_Handler>
 8006ce0:	e7fe      	b.n	8006ce0 <__retarget_lock_release_recursive+0x20>
 8006ce2:	b672      	cpsid	i
 8006ce4:	f7fd fca4 	bl	8004630 <Error_Handler>
 8006ce8:	e7fe      	b.n	8006ce8 <__retarget_lock_release_recursive+0x28>
 8006cea:	bf00      	nop

08006cec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cec:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cee:	2003      	movs	r0, #3
 8006cf0:	f000 fcda 	bl	80076a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006cf4:	200f      	movs	r0, #15
 8006cf6:	f7fe f9b7 	bl	8005068 <HAL_InitTick>
 8006cfa:	b110      	cbz	r0, 8006d02 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8006cfc:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8006cfe:	4620      	mov	r0, r4
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	4604      	mov	r4, r0
    HAL_MspInit();
 8006d04:	f7fd ffb2 	bl	8004c6c <HAL_MspInit>
}
 8006d08:	4620      	mov	r0, r4
 8006d0a:	bd10      	pop	{r4, pc}

08006d0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006d0c:	4a03      	ldr	r2, [pc, #12]	@ (8006d1c <HAL_IncTick+0x10>)
 8006d0e:	4b04      	ldr	r3, [pc, #16]	@ (8006d20 <HAL_IncTick+0x14>)
 8006d10:	6811      	ldr	r1, [r2, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	440b      	add	r3, r1
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000754 	.word	0x20000754
 8006d20:	2000000c 	.word	0x2000000c

08006d24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006d24:	4b01      	ldr	r3, [pc, #4]	@ (8006d2c <HAL_GetTick+0x8>)
 8006d26:	6818      	ldr	r0, [r3, #0]
}
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	20000754 	.word	0x20000754

08006d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006d34:	f7ff fff6 	bl	8006d24 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d38:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8006d3a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8006d3c:	d002      	beq.n	8006d44 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8006d3e:	4b04      	ldr	r3, [pc, #16]	@ (8006d50 <HAL_Delay+0x20>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d44:	f7ff ffee 	bl	8006d24 <HAL_GetTick>
 8006d48:	1b40      	subs	r0, r0, r5
 8006d4a:	42a0      	cmp	r0, r4
 8006d4c:	d3fa      	bcc.n	8006d44 <HAL_Delay+0x14>
  {
  }
}
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	2000000c 	.word	0x2000000c

08006d54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006d54:	b530      	push	{r4, r5, lr}
 8006d56:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f000 8087 	beq.w	8006e70 <HAL_ADC_Init+0x11c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006d62:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8006d64:	4604      	mov	r4, r0
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	f000 8087 	beq.w	8006e7a <HAL_ADC_Init+0x126>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006d6c:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d6e:	6893      	ldr	r3, [r2, #8]
 8006d70:	0098      	lsls	r0, r3, #2
 8006d72:	d505      	bpl.n	8006d80 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006d74:	6893      	ldr	r3, [r2, #8]
 8006d76:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006d7a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006d7e:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d80:	6893      	ldr	r3, [r2, #8]
 8006d82:	00d9      	lsls	r1, r3, #3
 8006d84:	d419      	bmi.n	8006dba <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d86:	4b5a      	ldr	r3, [pc, #360]	@ (8006ef0 <HAL_ADC_Init+0x19c>)
 8006d88:	485a      	ldr	r0, [pc, #360]	@ (8006ef4 <HAL_ADC_Init+0x1a0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8006d8c:	6891      	ldr	r1, [r2, #8]
 8006d8e:	099b      	lsrs	r3, r3, #6
 8006d90:	fba0 0303 	umull	r0, r3, r0, r3
 8006d94:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8006d98:	099b      	lsrs	r3, r3, #6
 8006d9a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006d9e:	3301      	adds	r3, #1
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8006da6:	6091      	str	r1, [r2, #8]
 8006da8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006daa:	9b01      	ldr	r3, [sp, #4]
 8006dac:	b12b      	cbz	r3, 8006dba <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8006dae:	9b01      	ldr	r3, [sp, #4]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1f9      	bne.n	8006dae <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006dba:	6893      	ldr	r3, [r2, #8]
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	d45a      	bmi.n	8006e76 <HAL_ADC_Init+0x122>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006dc2:	f043 0310 	orr.w	r3, r3, #16
 8006dc6:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006dca:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dcc:	4303      	orrs	r3, r0
 8006dce:	65a3      	str	r3, [r4, #88]	@ 0x58
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006dd0:	6893      	ldr	r3, [r2, #8]
 8006dd2:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006dd6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006dd8:	d146      	bne.n	8006e68 <HAL_ADC_Init+0x114>
 8006dda:	06dd      	lsls	r5, r3, #27
 8006ddc:	d444      	bmi.n	8006e68 <HAL_ADC_Init+0x114>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dde:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006de0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006dea:	6893      	ldr	r3, [r2, #8]
 8006dec:	07d9      	lsls	r1, r3, #31
 8006dee:	d40a      	bmi.n	8006e06 <HAL_ADC_Init+0xb2>
 8006df0:	4b41      	ldr	r3, [pc, #260]	@ (8006ef8 <HAL_ADC_Init+0x1a4>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	07db      	lsls	r3, r3, #31
 8006df6:	d406      	bmi.n	8006e06 <HAL_ADC_Init+0xb2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006df8:	4940      	ldr	r1, [pc, #256]	@ (8006efc <HAL_ADC_Init+0x1a8>)
 8006dfa:	6865      	ldr	r5, [r4, #4]
 8006dfc:	688b      	ldr	r3, [r1, #8]
 8006dfe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8006e02:	432b      	orrs	r3, r5
 8006e04:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8006e06:	68e5      	ldr	r5, [r4, #12]
 8006e08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e0a:	f894 1020 	ldrb.w	r1, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8006e0e:	432b      	orrs	r3, r5
 8006e10:	68a5      	ldr	r5, [r4, #8]
 8006e12:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e14:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e16:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8006e18:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e20:	d047      	beq.n	8006eb2 <HAL_ADC_Init+0x15e>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e22:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006e24:	b121      	cbz	r1, 8006e30 <HAL_ADC_Init+0xdc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8006e26:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e28:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006e2c:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e2e:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006e30:	68d5      	ldr	r5, [r2, #12]
 8006e32:	4933      	ldr	r1, [pc, #204]	@ (8006f00 <HAL_ADC_Init+0x1ac>)
 8006e34:	4029      	ands	r1, r5
 8006e36:	4319      	orrs	r1, r3
 8006e38:	60d1      	str	r1, [r2, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e3a:	6891      	ldr	r1, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e3c:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e3e:	f001 0104 	and.w	r1, r1, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	430b      	orrs	r3, r1
 8006e48:	d01d      	beq.n	8006e86 <HAL_ADC_Init+0x132>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006e4a:	6923      	ldr	r3, [r4, #16]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d035      	beq.n	8006ebc <HAL_ADC_Init+0x168>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006e50:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8006e52:	f023 030f 	bic.w	r3, r3, #15
 8006e56:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006e58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	f043 0301 	orr.w	r3, r3, #1
 8006e62:	6563      	str	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8006e64:	b003      	add	sp, #12
 8006e66:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e68:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006e6a:	f043 0310 	orr.w	r3, r3, #16
 8006e6e:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8006e70:	2001      	movs	r0, #1
}
 8006e72:	b003      	add	sp, #12
 8006e74:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e76:	2000      	movs	r0, #0
 8006e78:	e7aa      	b.n	8006dd0 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8006e7a:	f7fd ff1d 	bl	8004cb8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006e7e:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8006e80:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 8006e84:	e772      	b.n	8006d6c <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e86:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006e88:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e8c:	7e25      	ldrb	r5, [r4, #24]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e8e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006e92:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e94:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006e98:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	60d3      	str	r3, [r2, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8006ea0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d011      	beq.n	8006ecc <HAL_ADC_Init+0x178>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006ea8:	6913      	ldr	r3, [r2, #16]
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	6113      	str	r3, [r2, #16]
 8006eb0:	e7cb      	b.n	8006e4a <HAL_ADC_Init+0xf6>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006eb2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006eb4:	3901      	subs	r1, #1
 8006eb6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8006eba:	e7b2      	b.n	8006e22 <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006ebc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006ebe:	69e3      	ldr	r3, [r4, #28]
 8006ec0:	f021 010f 	bic.w	r1, r1, #15
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8006eca:	e7c5      	b.n	8006e58 <HAL_ADC_Init+0x104>
        MODIFY_REG(hadc->Instance->CFGR2,
 8006ecc:	6911      	ldr	r1, [r2, #16]
 8006ece:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006ed0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8006ed2:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8006ed6:	f021 0104 	bic.w	r1, r1, #4
 8006eda:	432b      	orrs	r3, r5
 8006edc:	430b      	orrs	r3, r1
 8006ede:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006ee4:	430b      	orrs	r3, r1
 8006ee6:	f043 0301 	orr.w	r3, r3, #1
 8006eea:	6113      	str	r3, [r2, #16]
 8006eec:	e7ad      	b.n	8006e4a <HAL_ADC_Init+0xf6>
 8006eee:	bf00      	nop
 8006ef0:	20000004 	.word	0x20000004
 8006ef4:	053e2d63 	.word	0x053e2d63
 8006ef8:	50040000 	.word	0x50040000
 8006efc:	50040300 	.word	0x50040300
 8006f00:	fff0c007 	.word	0xfff0c007

08006f04 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop

08006f08 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop

08006f0c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f0c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f0e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006f10:	f7ff fffa 	bl	8006f08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f14:	bd08      	pop	{r3, pc}
 8006f16:	bf00      	nop

08006f18 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop

08006f1c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006f1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f20:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8006f24:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006f28:	d11d      	bne.n	8006f66 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006f2a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f30:	655a      	str	r2, [r3, #84]	@ 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006f32:	680a      	ldr	r2, [r1, #0]
 8006f34:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006f38:	68ca      	ldr	r2, [r1, #12]
 8006f3a:	d01b      	beq.n	8006f74 <ADC_DMAConvCplt+0x58>
 8006f3c:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8006f40:	d10d      	bne.n	8006f5e <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006f42:	68ca      	ldr	r2, [r1, #12]
 8006f44:	0494      	lsls	r4, r2, #18
 8006f46:	d40a      	bmi.n	8006f5e <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006f48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f4e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f52:	04d1      	lsls	r1, r2, #19
 8006f54:	d403      	bmi.n	8006f5e <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f58:	f042 0201 	orr.w	r2, r2, #1
 8006f5c:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff ffd0 	bl	8006f04 <HAL_ADC_ConvCpltCallback>
}
 8006f64:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f66:	06d2      	lsls	r2, r2, #27
 8006f68:	d40a      	bmi.n	8006f80 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8006f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f72:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006f74:	0790      	lsls	r0, r2, #30
 8006f76:	d5e7      	bpl.n	8006f48 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff ffc3 	bl	8006f04 <HAL_ADC_ConvCpltCallback>
 8006f7e:	e7f1      	b.n	8006f64 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff ffc9 	bl	8006f18 <HAL_ADC_ErrorCallback>
}
 8006f86:	bd10      	pop	{r4, pc}

08006f88 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f88:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8006f8a:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006f8c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8006f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f92:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006f94:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006f96:	f043 0304 	orr.w	r3, r3, #4
 8006f9a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f9c:	f7ff ffbc 	bl	8006f18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006fa0:	bd08      	pop	{r3, pc}
 8006fa2:	bf00      	nop

08006fa4 <HAL_ADC_ConfigChannel>:
{
 8006fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8006fa6:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
{
 8006faa:	b083      	sub	sp, #12
 8006fac:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8006fae:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8006fb0:	f04f 0000 	mov.w	r0, #0
 8006fb4:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8006fb6:	f000 8115 	beq.w	80071e4 <HAL_ADC_ConfigChannel+0x240>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fba:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f883 0050 	strb.w	r0, [r3, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006fc2:	68a2      	ldr	r2, [r4, #8]
 8006fc4:	f012 0204 	ands.w	r2, r2, #4
 8006fc8:	d157      	bne.n	800707a <HAL_ADC_ConfigChannel+0xd6>
    if (sConfig->Rank <= 5U)
 8006fca:	6848      	ldr	r0, [r1, #4]
 8006fcc:	2805      	cmp	r0, #5
 8006fce:	f240 808f 	bls.w	80070f0 <HAL_ADC_ConfigChannel+0x14c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006fd2:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8006fd4:	261f      	movs	r6, #31
 8006fd6:	f000 001f 	and.w	r0, r0, #31
 8006fda:	4086      	lsls	r6, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006fdc:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8006fe0:	43f6      	mvns	r6, r6
 8006fe2:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006fe4:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8006fe8:	f3c5 6c84 	ubfx	ip, r5, #26, #5
 8006fec:	f85e 5002 	ldr.w	r5, [lr, r2]
 8006ff0:	fa0c f000 	lsl.w	r0, ip, r0
 8006ff4:	46f4      	mov	ip, lr
 8006ff6:	ea05 0e06 	and.w	lr, r5, r6
 8006ffa:	ea40 000e 	orr.w	r0, r0, lr
 8006ffe:	f84c 0002 	str.w	r0, [ip, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007002:	68a2      	ldr	r2, [r4, #8]
 8007004:	0752      	lsls	r2, r2, #29
 8007006:	d541      	bpl.n	800708c <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007008:	68a2      	ldr	r2, [r4, #8]
 800700a:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800700c:	68a0      	ldr	r0, [r4, #8]
 800700e:	07c6      	lsls	r6, r0, #31
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007010:	4615      	mov	r5, r2
 8007012:	d413      	bmi.n	800703c <HAL_ADC_ConfigChannel+0x98>
 8007014:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8007016:	48bd      	ldr	r0, [pc, #756]	@ (800730c <HAL_ADC_ConfigChannel+0x368>)
 8007018:	f8d4 60b0 	ldr.w	r6, [r4, #176]	@ 0xb0
 800701c:	f007 0c18 	and.w	ip, r7, #24
 8007020:	fa20 f00c 	lsr.w	r0, r0, ip
 8007024:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8007028:	4010      	ands	r0, r2
 800702a:	ea26 060c 	bic.w	r6, r6, ip
 800702e:	4330      	orrs	r0, r6
 8007030:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007034:	48b6      	ldr	r0, [pc, #728]	@ (8007310 <HAL_ADC_ConfigChannel+0x36c>)
 8007036:	4287      	cmp	r7, r0
 8007038:	f000 8084 	beq.w	8007144 <HAL_ADC_ConfigChannel+0x1a0>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800703c:	4ab5      	ldr	r2, [pc, #724]	@ (8007314 <HAL_ADC_ConfigChannel+0x370>)
 800703e:	4215      	tst	r5, r2
 8007040:	d019      	beq.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007042:	49b5      	ldr	r1, [pc, #724]	@ (8007318 <HAL_ADC_ConfigChannel+0x374>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007044:	48b5      	ldr	r0, [pc, #724]	@ (800731c <HAL_ADC_ConfigChannel+0x378>)
 8007046:	688a      	ldr	r2, [r1, #8]
 8007048:	4285      	cmp	r5, r0
 800704a:	f002 76e0 	and.w	r6, r2, #29360128	@ 0x1c00000
 800704e:	d057      	beq.n	8007100 <HAL_ADC_ConfigChannel+0x15c>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007050:	48b3      	ldr	r0, [pc, #716]	@ (8007320 <HAL_ADC_ConfigChannel+0x37c>)
 8007052:	4285      	cmp	r5, r0
 8007054:	f000 80c9 	beq.w	80071ea <HAL_ADC_ConfigChannel+0x246>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007058:	48b2      	ldr	r0, [pc, #712]	@ (8007324 <HAL_ADC_ConfigChannel+0x380>)
 800705a:	4285      	cmp	r5, r0
 800705c:	d10b      	bne.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800705e:	0252      	lsls	r2, r2, #9
 8007060:	d409      	bmi.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8007062:	4ab1      	ldr	r2, [pc, #708]	@ (8007328 <HAL_ADC_ConfigChannel+0x384>)
 8007064:	4294      	cmp	r4, r2
 8007066:	d106      	bne.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007068:	688a      	ldr	r2, [r1, #8]
 800706a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800706e:	4332      	orrs	r2, r6
 8007070:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8007074:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007076:	2000      	movs	r0, #0
 8007078:	e003      	b.n	8007082 <HAL_ADC_ConfigChannel+0xde>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800707a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800707c:	f042 0220 	orr.w	r2, r2, #32
 8007080:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8007088:	b003      	add	sp, #12
 800708a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800708c:	68a0      	ldr	r0, [r4, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800708e:	680a      	ldr	r2, [r1, #0]
 8007090:	0707      	lsls	r7, r0, #28
 8007092:	d4bb      	bmi.n	800700c <HAL_ADC_ConfigChannel+0x68>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007094:	0dd0      	lsrs	r0, r2, #23
 8007096:	f000 0004 	and.w	r0, r0, #4
 800709a:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 800709e:	f3c2 5c04 	ubfx	ip, r2, #20, #5
 80070a2:	688e      	ldr	r6, [r1, #8]
 80070a4:	582a      	ldr	r2, [r5, r0]
 80070a6:	2707      	movs	r7, #7
 80070a8:	fa07 f70c 	lsl.w	r7, r7, ip
 80070ac:	fa06 f60c 	lsl.w	r6, r6, ip
 80070b0:	ea22 0207 	bic.w	r2, r2, r7
 80070b4:	4332      	orrs	r2, r6
 80070b6:	502a      	str	r2, [r5, r0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80070b8:	e9d1 6204 	ldrd	r6, r2, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80070bc:	2e04      	cmp	r6, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80070be:	68e0      	ldr	r0, [r4, #12]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80070c0:	f104 0560 	add.w	r5, r4, #96	@ 0x60
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80070c4:	f000 80f2 	beq.w	80072ac <HAL_ADC_ConfigChannel+0x308>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80070c8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80070cc:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 80070ce:	f855 c026 	ldr.w	ip, [r5, r6, lsl #2]
 80070d2:	4f96      	ldr	r7, [pc, #600]	@ (800732c <HAL_ADC_ConfigChannel+0x388>)
 80070d4:	4082      	lsls	r2, r0
 80070d6:	6808      	ldr	r0, [r1, #0]
 80070d8:	ea0c 0707 	and.w	r7, ip, r7
 80070dc:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 80070e0:	4338      	orrs	r0, r7
 80070e2:	4302      	orrs	r2, r0
 80070e4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80070e8:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
 80070ec:	680a      	ldr	r2, [r1, #0]
}
 80070ee:	e78d      	b.n	800700c <HAL_ADC_ConfigChannel+0x68>
      switch (sConfig->Rank)
 80070f0:	3802      	subs	r0, #2
 80070f2:	2803      	cmp	r0, #3
 80070f4:	f200 8192 	bhi.w	800741c <HAL_ADC_ConfigChannel+0x478>
 80070f8:	e8df f000 	tbb	[pc, r0]
 80070fc:	8698938e 	.word	0x8698938e
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007100:	0215      	lsls	r5, r2, #8
 8007102:	d4b8      	bmi.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007104:	4a88      	ldr	r2, [pc, #544]	@ (8007328 <HAL_ADC_ConfigChannel+0x384>)
 8007106:	4294      	cmp	r4, r2
 8007108:	d1b5      	bne.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800710a:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800710c:	4888      	ldr	r0, [pc, #544]	@ (8007330 <HAL_ADC_ConfigChannel+0x38c>)
 800710e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8007112:	4332      	orrs	r2, r6
 8007114:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007118:	608a      	str	r2, [r1, #8]
 800711a:	6802      	ldr	r2, [r0, #0]
 800711c:	4985      	ldr	r1, [pc, #532]	@ (8007334 <HAL_ADC_ConfigChannel+0x390>)
 800711e:	0992      	lsrs	r2, r2, #6
 8007120:	fba1 1202 	umull	r1, r2, r1, r2
 8007124:	0992      	lsrs	r2, r2, #6
 8007126:	3201      	adds	r2, #1
 8007128:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800712c:	0092      	lsls	r2, r2, #2
 800712e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8007130:	9a01      	ldr	r2, [sp, #4]
 8007132:	2a00      	cmp	r2, #0
 8007134:	d09f      	beq.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
            wait_loop_index--;
 8007136:	9a01      	ldr	r2, [sp, #4]
 8007138:	3a01      	subs	r2, #1
 800713a:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800713c:	9a01      	ldr	r2, [sp, #4]
 800713e:	2a00      	cmp	r2, #0
 8007140:	d1f9      	bne.n	8007136 <HAL_ADC_ConfigChannel+0x192>
 8007142:	e798      	b.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007144:	f1bc 0f00 	cmp.w	ip, #0
 8007148:	d075      	beq.n	8007236 <HAL_ADC_ConfigChannel+0x292>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714a:	fa92 f0a2 	rbit	r0, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800714e:	2800      	cmp	r0, #0
 8007150:	f000 8085 	beq.w	800725e <HAL_ADC_ConfigChannel+0x2ba>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8007154:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007158:	3001      	adds	r0, #1
 800715a:	f000 001f 	and.w	r0, r0, #31
 800715e:	2809      	cmp	r0, #9
 8007160:	d97d      	bls.n	800725e <HAL_ADC_ConfigChannel+0x2ba>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007162:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8007166:	2800      	cmp	r0, #0
 8007168:	f000 8151 	beq.w	800740e <HAL_ADC_ConfigChannel+0x46a>
  return __builtin_clz(value);
 800716c:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007170:	3001      	adds	r0, #1
 8007172:	0680      	lsls	r0, r0, #26
 8007174:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007178:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800717c:	2d00      	cmp	r5, #0
 800717e:	f000 814b 	beq.w	8007418 <HAL_ADC_ConfigChannel+0x474>
  return __builtin_clz(value);
 8007182:	fab5 f585 	clz	r5, r5
 8007186:	3501      	adds	r5, #1
 8007188:	f005 051f 	and.w	r5, r5, #31
 800718c:	2601      	movs	r6, #1
 800718e:	fa06 f505 	lsl.w	r5, r6, r5
 8007192:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007194:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8007198:	2a00      	cmp	r2, #0
 800719a:	f000 813b 	beq.w	8007414 <HAL_ADC_ConfigChannel+0x470>
  return __builtin_clz(value);
 800719e:	fab2 f282 	clz	r2, r2
 80071a2:	1c55      	adds	r5, r2, #1
 80071a4:	f005 051f 	and.w	r5, r5, #31
 80071a8:	2203      	movs	r2, #3
 80071aa:	f06f 061d 	mvn.w	r6, #29
 80071ae:	fb12 6205 	smlabb	r2, r2, r5, r6
 80071b2:	0512      	lsls	r2, r2, #20
 80071b4:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071b8:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80071ba:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 80071bc:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80071be:	f005 0504 	and.w	r5, r5, #4
 80071c2:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 80071c6:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80071ca:	fa00 f702 	lsl.w	r7, r0, r2
 80071ce:	f04f 0c07 	mov.w	ip, #7
 80071d2:	5970      	ldr	r0, [r6, r5]
 80071d4:	fa0c f202 	lsl.w	r2, ip, r2
 80071d8:	ea20 0202 	bic.w	r2, r0, r2
 80071dc:	433a      	orrs	r2, r7
 80071de:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80071e0:	680d      	ldr	r5, [r1, #0]
}
 80071e2:	e72b      	b.n	800703c <HAL_ADC_ConfigChannel+0x98>
  __HAL_LOCK(hadc);
 80071e4:	2002      	movs	r0, #2
}
 80071e6:	b003      	add	sp, #12
 80071e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80071ea:	01d0      	lsls	r0, r2, #7
 80071ec:	f53f af43 	bmi.w	8007076 <HAL_ADC_ConfigChannel+0xd2>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071f0:	4a4d      	ldr	r2, [pc, #308]	@ (8007328 <HAL_ADC_ConfigChannel+0x384>)
 80071f2:	4294      	cmp	r4, r2
 80071f4:	f47f af3f 	bne.w	8007076 <HAL_ADC_ConfigChannel+0xd2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80071f8:	688a      	ldr	r2, [r1, #8]
 80071fa:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80071fe:	4332      	orrs	r2, r6
 8007200:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007204:	608a      	str	r2, [r1, #8]
}
 8007206:	e736      	b.n	8007076 <HAL_ADC_ConfigChannel+0xd2>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8007208:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800720c:	604a      	str	r2, [r1, #4]
          break;
 800720e:	2000      	movs	r0, #0
 8007210:	f06f 061f 	mvn.w	r6, #31
 8007214:	2204      	movs	r2, #4
 8007216:	e6e4      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8007218:	200c      	movs	r0, #12
 800721a:	6048      	str	r0, [r1, #4]
          break;
 800721c:	f46f 36f8 	mvn.w	r6, #126976	@ 0x1f000
 8007220:	e6df      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8007222:	2012      	movs	r0, #18
 8007224:	6048      	str	r0, [r1, #4]
          break;
 8007226:	f46f 06f8 	mvn.w	r6, #8126464	@ 0x7c0000
 800722a:	e6da      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x3e>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800722c:	2018      	movs	r0, #24
 800722e:	6048      	str	r0, [r1, #4]
          break;
 8007230:	f06f 56f8 	mvn.w	r6, #520093696	@ 0x1f000000
 8007234:	e6d5      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x3e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007236:	0e92      	lsrs	r2, r2, #26
 8007238:	3201      	adds	r2, #1
 800723a:	f002 061f 	and.w	r6, r2, #31
 800723e:	0692      	lsls	r2, r2, #26
 8007240:	f002 45f8 	and.w	r5, r2, #2080374784	@ 0x7c000000
 8007244:	2201      	movs	r2, #1
 8007246:	40b2      	lsls	r2, r6
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007248:	2e09      	cmp	r6, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800724a:	ea45 0002 	orr.w	r0, r5, r2
 800724e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007252:	d929      	bls.n	80072a8 <HAL_ADC_ConfigChannel+0x304>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007254:	3a1e      	subs	r2, #30
 8007256:	0512      	lsls	r2, r2, #20
 8007258:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800725c:	e7ac      	b.n	80071b8 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800725e:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8007262:	2800      	cmp	r0, #0
 8007264:	f000 80d0 	beq.w	8007408 <HAL_ADC_ConfigChannel+0x464>
  return __builtin_clz(value);
 8007268:	fab0 f080 	clz	r0, r0
 800726c:	3001      	adds	r0, #1
 800726e:	0680      	lsls	r0, r0, #26
 8007270:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007274:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8007278:	2d00      	cmp	r5, #0
 800727a:	f000 80c3 	beq.w	8007404 <HAL_ADC_ConfigChannel+0x460>
  return __builtin_clz(value);
 800727e:	fab5 f585 	clz	r5, r5
 8007282:	3501      	adds	r5, #1
 8007284:	f005 051f 	and.w	r5, r5, #31
 8007288:	2601      	movs	r6, #1
 800728a:	fa06 f505 	lsl.w	r5, r6, r5
 800728e:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007290:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8007294:	2a00      	cmp	r2, #0
 8007296:	f000 80b2 	beq.w	80073fe <HAL_ADC_ConfigChannel+0x45a>
  return __builtin_clz(value);
 800729a:	fab2 f282 	clz	r2, r2
 800729e:	3201      	adds	r2, #1
 80072a0:	f002 021f 	and.w	r2, r2, #31
 80072a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80072a8:	0512      	lsls	r2, r2, #20
 80072aa:	e785      	b.n	80071b8 <HAL_ADC_ConfigChannel+0x214>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80072ac:	6e22      	ldr	r2, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072ae:	680a      	ldr	r2, [r1, #0]
 80072b0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80072b2:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80072b6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072ba:	2e00      	cmp	r6, #0
 80072bc:	d13c      	bne.n	8007338 <HAL_ADC_ConfigChannel+0x394>
 80072be:	f3c2 6684 	ubfx	r6, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80072c2:	42b0      	cmp	r0, r6
 80072c4:	f000 808b 	beq.w	80073de <HAL_ADC_ConfigChannel+0x43a>
 80072c8:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80072ca:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80072cc:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80072d0:	42b0      	cmp	r0, r6
 80072d2:	d062      	beq.n	800739a <HAL_ADC_ConfigChannel+0x3f6>
 80072d4:	68a8      	ldr	r0, [r5, #8]
 80072d6:	68a8      	ldr	r0, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072d8:	f105 0708 	add.w	r7, r5, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80072dc:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072e0:	f3c2 6684 	ubfx	r6, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80072e4:	4286      	cmp	r6, r0
 80072e6:	d069      	beq.n	80073bc <HAL_ADC_ConfigChannel+0x418>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80072e8:	68e8      	ldr	r0, [r5, #12]
 80072ea:	68e8      	ldr	r0, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072ec:	f105 060c 	add.w	r6, r5, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80072f0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072f4:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80072f8:	4285      	cmp	r5, r0
 80072fa:	f47f ae87 	bne.w	800700c <HAL_ADC_ConfigChannel+0x68>
  MODIFY_REG(*preg,
 80072fe:	6832      	ldr	r2, [r6, #0]
 8007300:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007304:	6032      	str	r2, [r6, #0]
 8007306:	680a      	ldr	r2, [r1, #0]
}
 8007308:	e680      	b.n	800700c <HAL_ADC_ConfigChannel+0x68>
 800730a:	bf00      	nop
 800730c:	0007ffff 	.word	0x0007ffff
 8007310:	407f0000 	.word	0x407f0000
 8007314:	80080000 	.word	0x80080000
 8007318:	50040300 	.word	0x50040300
 800731c:	c7520000 	.word	0xc7520000
 8007320:	cb840000 	.word	0xcb840000
 8007324:	80000001 	.word	0x80000001
 8007328:	50040000 	.word	0x50040000
 800732c:	03fff000 	.word	0x03fff000
 8007330:	20000004 	.word	0x20000004
 8007334:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007338:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800733c:	b11e      	cbz	r6, 8007346 <HAL_ADC_ConfigChannel+0x3a2>
  return __builtin_clz(value);
 800733e:	fab6 f686 	clz	r6, r6
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007342:	42b0      	cmp	r0, r6
 8007344:	d04b      	beq.n	80073de <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007346:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8007348:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800734a:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800734e:	fa92 f6a2 	rbit	r6, r2
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007352:	f105 0708 	add.w	r7, r5, #8
 8007356:	46bc      	mov	ip, r7
  if (value == 0U)
 8007358:	b11e      	cbz	r6, 8007362 <HAL_ADC_ConfigChannel+0x3be>
  return __builtin_clz(value);
 800735a:	fab6 f686 	clz	r6, r6
 800735e:	4286      	cmp	r6, r0
 8007360:	d01d      	beq.n	800739e <HAL_ADC_ConfigChannel+0x3fa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007362:	68a8      	ldr	r0, [r5, #8]
 8007364:	68a8      	ldr	r0, [r5, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007366:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736a:	fa92 fca2 	rbit	ip, r2
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800736e:	f105 060c 	add.w	r6, r5, #12
 8007372:	46b6      	mov	lr, r6
  if (value == 0U)
 8007374:	f1bc 0f00 	cmp.w	ip, #0
 8007378:	d003      	beq.n	8007382 <HAL_ADC_ConfigChannel+0x3de>
  return __builtin_clz(value);
 800737a:	fabc fc8c 	clz	ip, ip
 800737e:	4584      	cmp	ip, r0
 8007380:	d01e      	beq.n	80073c0 <HAL_ADC_ConfigChannel+0x41c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007382:	68e8      	ldr	r0, [r5, #12]
 8007384:	68e8      	ldr	r0, [r5, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007386:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800738e:	2d00      	cmp	r5, #0
 8007390:	f43f ae3c 	beq.w	800700c <HAL_ADC_ConfigChannel+0x68>
  return __builtin_clz(value);
 8007394:	fab5 f585 	clz	r5, r5
 8007398:	e7ae      	b.n	80072f8 <HAL_ADC_ConfigChannel+0x354>
 800739a:	f105 0c08 	add.w	ip, r5, #8
  MODIFY_REG(*preg,
 800739e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073a0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80073a4:	6662      	str	r2, [r4, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80073a6:	68aa      	ldr	r2, [r5, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073a8:	680a      	ldr	r2, [r1, #0]
 80073aa:	68a8      	ldr	r0, [r5, #8]
 80073ac:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80073b0:	4667      	mov	r7, ip
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80073b2:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	d092      	beq.n	80072e0 <HAL_ADC_ConfigChannel+0x33c>
 80073ba:	e7d6      	b.n	800736a <HAL_ADC_ConfigChannel+0x3c6>
 80073bc:	f105 0e0c 	add.w	lr, r5, #12
  MODIFY_REG(*preg,
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80073c6:	603a      	str	r2, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80073c8:	68ea      	ldr	r2, [r5, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073ca:	680a      	ldr	r2, [r1, #0]
 80073cc:	68e8      	ldr	r0, [r5, #12]
 80073ce:	f3c2 0512 	ubfx	r5, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80073d2:	4676      	mov	r6, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80073d4:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073d8:	2d00      	cmp	r5, #0
 80073da:	d08b      	beq.n	80072f4 <HAL_ADC_ConfigChannel+0x350>
 80073dc:	e7d5      	b.n	800738a <HAL_ADC_ConfigChannel+0x3e6>
  MODIFY_REG(*preg,
 80073de:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80073e0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80073e4:	6622      	str	r2, [r4, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80073e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073e8:	680a      	ldr	r2, [r1, #0]
 80073ea:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80073ec:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80073f0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073f4:	2e00      	cmp	r6, #0
 80073f6:	d1aa      	bne.n	800734e <HAL_ADC_ConfigChannel+0x3aa>
 80073f8:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80073fc:	e768      	b.n	80072d0 <HAL_ADC_ConfigChannel+0x32c>
 80073fe:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8007402:	e6d9      	b.n	80071b8 <HAL_ADC_ConfigChannel+0x214>
 8007404:	2502      	movs	r5, #2
 8007406:	e742      	b.n	800728e <HAL_ADC_ConfigChannel+0x2ea>
 8007408:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800740c:	e732      	b.n	8007274 <HAL_ADC_ConfigChannel+0x2d0>
 800740e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8007412:	e6b1      	b.n	8007178 <HAL_ADC_ConfigChannel+0x1d4>
 8007414:	4a04      	ldr	r2, [pc, #16]	@ (8007428 <HAL_ADC_ConfigChannel+0x484>)
 8007416:	e6cf      	b.n	80071b8 <HAL_ADC_ConfigChannel+0x214>
 8007418:	2502      	movs	r5, #2
 800741a:	e6ba      	b.n	8007192 <HAL_ADC_ConfigChannel+0x1ee>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800741c:	2006      	movs	r0, #6
 800741e:	6048      	str	r0, [r1, #4]
          break;
 8007420:	f46f 66f8 	mvn.w	r6, #1984	@ 0x7c0
 8007424:	e5dd      	b.n	8006fe2 <HAL_ADC_ConfigChannel+0x3e>
 8007426:	bf00      	nop
 8007428:	fe500000 	.word	0xfe500000

0800742c <ADC_Enable>:
{
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8007430:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007432:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8007434:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	07d2      	lsls	r2, r2, #31
 800743a:	d42c      	bmi.n	8007496 <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800743c:	6899      	ldr	r1, [r3, #8]
 800743e:	4a28      	ldr	r2, [pc, #160]	@ (80074e0 <ADC_Enable+0xb4>)
 8007440:	4211      	tst	r1, r2
 8007442:	4604      	mov	r4, r0
 8007444:	d12a      	bne.n	800749c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8007446:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007448:	4926      	ldr	r1, [pc, #152]	@ (80074e4 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 800744a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800744e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8007452:	f042 0201 	orr.w	r2, r2, #1
 8007456:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007458:	688b      	ldr	r3, [r1, #8]
    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	d429      	bmi.n	80074b2 <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 800745e:	f7ff fc61 	bl	8006d24 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8007468:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800746a:	d414      	bmi.n	8007496 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 800746c:	4e1e      	ldr	r6, [pc, #120]	@ (80074e8 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	07d0      	lsls	r0, r2, #31
 8007472:	d404      	bmi.n	800747e <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	4032      	ands	r2, r6
 8007478:	f042 0201 	orr.w	r2, r2, #1
 800747c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800747e:	f7ff fc51 	bl	8006d24 <HAL_GetTick>
 8007482:	1b43      	subs	r3, r0, r5
 8007484:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007486:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007488:	d902      	bls.n	8007490 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	07d1      	lsls	r1, r2, #31
 800748e:	d505      	bpl.n	800749c <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	07d2      	lsls	r2, r2, #31
 8007494:	d5eb      	bpl.n	800746e <ADC_Enable+0x42>
  return HAL_OK;
 8007496:	2000      	movs	r0, #0
}
 8007498:	b002      	add	sp, #8
 800749a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800749c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800749e:	f043 0310 	orr.w	r3, r3, #16
 80074a2:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80074a6:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 80074ae:	b002      	add	sp, #8
 80074b0:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074b2:	4b0e      	ldr	r3, [pc, #56]	@ (80074ec <ADC_Enable+0xc0>)
 80074b4:	4a0e      	ldr	r2, [pc, #56]	@ (80074f0 <ADC_Enable+0xc4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	099b      	lsrs	r3, r3, #6
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	099b      	lsrs	r3, r3, #6
 80074c0:	3301      	adds	r3, #1
 80074c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80074ca:	9b01      	ldr	r3, [sp, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0c6      	beq.n	800745e <ADC_Enable+0x32>
        wait_loop_index--;
 80074d0:	9b01      	ldr	r3, [sp, #4]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f9      	bne.n	80074d0 <ADC_Enable+0xa4>
 80074dc:	e7bf      	b.n	800745e <ADC_Enable+0x32>
 80074de:	bf00      	nop
 80074e0:	8000003f 	.word	0x8000003f
 80074e4:	50040300 	.word	0x50040300
 80074e8:	7fffffc0 	.word	0x7fffffc0
 80074ec:	20000004 	.word	0x20000004
 80074f0:	053e2d63 	.word	0x053e2d63

080074f4 <HAL_ADC_Start_DMA>:
{
 80074f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074f6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80074f8:	689d      	ldr	r5, [r3, #8]
 80074fa:	f015 0504 	ands.w	r5, r5, #4
 80074fe:	d141      	bne.n	8007584 <HAL_ADC_Start_DMA+0x90>
    __HAL_LOCK(hadc);
 8007500:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8007504:	2b01      	cmp	r3, #1
 8007506:	4604      	mov	r4, r0
 8007508:	d03c      	beq.n	8007584 <HAL_ADC_Start_DMA+0x90>
 800750a:	2301      	movs	r3, #1
 800750c:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      tmp_hal_status = ADC_Enable(hadc);
 8007510:	460f      	mov	r7, r1
 8007512:	4616      	mov	r6, r2
 8007514:	f7ff ff8a 	bl	800742c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8007518:	2800      	cmp	r0, #0
 800751a:	d135      	bne.n	8007588 <HAL_ADC_Start_DMA+0x94>
        ADC_STATE_CLR_SET(hadc->State,
 800751c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800751e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007520:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8007522:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007526:	f023 0301 	bic.w	r3, r3, #1
 800752a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800752e:	6563      	str	r3, [r4, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007530:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007532:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007536:	bf1c      	itt	ne
 8007538:	6da3      	ldrne	r3, [r4, #88]	@ 0x58
 800753a:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800753e:	65a3      	str	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007540:	4b13      	ldr	r3, [pc, #76]	@ (8007590 <HAL_ADC_Start_DMA+0x9c>)
 8007542:	62c3      	str	r3, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007544:	4b13      	ldr	r3, [pc, #76]	@ (8007594 <HAL_ADC_Start_DMA+0xa0>)
 8007546:	6303      	str	r3, [r0, #48]	@ 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007548:	251c      	movs	r5, #28
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800754a:	4b13      	ldr	r3, [pc, #76]	@ (8007598 <HAL_ADC_Start_DMA+0xa4>)
 800754c:	6343      	str	r3, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800754e:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8007550:	2500      	movs	r5, #0
 8007552:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007556:	684d      	ldr	r5, [r1, #4]
 8007558:	f045 0510 	orr.w	r5, r5, #16
 800755c:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800755e:	68cd      	ldr	r5, [r1, #12]
 8007560:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007564:	4633      	mov	r3, r6
 8007566:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007568:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800756a:	3140      	adds	r1, #64	@ 0x40
 800756c:	f000 fa66 	bl	8007a3c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007570:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8007572:	6893      	ldr	r3, [r2, #8]
 8007574:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007578:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800757c:	f043 0304 	orr.w	r3, r3, #4
 8007580:	6093      	str	r3, [r2, #8]
}
 8007582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8007584:	2002      	movs	r0, #2
}
 8007586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8007588:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 800758c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800758e:	bf00      	nop
 8007590:	08006f1d 	.word	0x08006f1d
 8007594:	08006f0d 	.word	0x08006f0d
 8007598:	08006f89 	.word	0x08006f89

0800759c <ADC_Disable>:
{
 800759c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800759e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	0795      	lsls	r5, r2, #30
 80075a4:	d502      	bpl.n	80075ac <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80075a6:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80075a8:	2000      	movs	r0, #0
}
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	07d4      	lsls	r4, r2, #31
 80075b0:	d5fa      	bpl.n	80075a8 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	f002 020d 	and.w	r2, r2, #13
 80075b8:	2a01      	cmp	r2, #1
 80075ba:	4604      	mov	r4, r0
 80075bc:	d009      	beq.n	80075d2 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80075c0:	f043 0310 	orr.w	r3, r3, #16
 80075c4:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075c8:	f043 0301 	orr.w	r3, r3, #1
 80075cc:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80075ce:	2001      	movs	r0, #1
}
 80075d0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80075d8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80075dc:	2103      	movs	r1, #3
 80075de:	f042 0202 	orr.w	r2, r2, #2
 80075e2:	609a      	str	r2, [r3, #8]
 80075e4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80075e6:	f7ff fb9d 	bl	8006d24 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80075f0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80075f2:	d403      	bmi.n	80075fc <ADC_Disable+0x60>
 80075f4:	e7d8      	b.n	80075a8 <ADC_Disable+0xc>
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	07db      	lsls	r3, r3, #31
 80075fa:	d5d5      	bpl.n	80075a8 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80075fc:	f7ff fb92 	bl	8006d24 <HAL_GetTick>
 8007600:	1b40      	subs	r0, r0, r5
 8007602:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007604:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007606:	d9f6      	bls.n	80075f6 <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	07d2      	lsls	r2, r2, #31
 800760c:	d5f3      	bpl.n	80075f6 <ADC_Disable+0x5a>
 800760e:	e7d6      	b.n	80075be <ADC_Disable+0x22>

08007610 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007610:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007612:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 8007616:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8007618:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800761a:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 800761c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800761e:	d03f      	beq.n	80076a0 <HAL_ADCEx_Calibration_Start+0x90>
 8007620:	2301      	movs	r3, #1
 8007622:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007626:	4604      	mov	r4, r0
 8007628:	460d      	mov	r5, r1
 800762a:	f7ff ffb7 	bl	800759c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800762e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  if (tmp_hal_status == HAL_OK)
 8007630:	b9e0      	cbnz	r0, 800766c <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8007632:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007636:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800763a:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 800763c:	f043 0302 	orr.w	r3, r3, #2
 8007640:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 8007642:	6893      	ldr	r3, [r2, #8]
 8007644:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007648:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 800764c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007650:	430b      	orrs	r3, r1
 8007652:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007656:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007658:	6893      	ldr	r3, [r2, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	db0e      	blt.n	800767c <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800765e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007660:	f023 0303 	bic.w	r3, r3, #3
 8007664:	f043 0301 	orr.w	r3, r3, #1
 8007668:	6563      	str	r3, [r4, #84]	@ 0x54
 800766a:	e002      	b.n	8007672 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800766c:	f043 0310 	orr.w	r3, r3, #16
 8007670:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007672:	2300      	movs	r3, #0
 8007674:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8007678:	b003      	add	sp, #12
 800767a:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	3301      	adds	r3, #1
 8007680:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8007688:	d3e6      	bcc.n	8007658 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800768a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800768c:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8007690:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8007692:	f043 0310 	orr.w	r3, r3, #16
 8007696:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 8007698:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800769c:	2001      	movs	r0, #1
 800769e:	e7eb      	b.n	8007678 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 80076a0:	2002      	movs	r0, #2
}
 80076a2:	b003      	add	sp, #12
 80076a4:	bd30      	pop	{r4, r5, pc}
 80076a6:	bf00      	nop

080076a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80076a8:	4907      	ldr	r1, [pc, #28]	@ (80076c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80076aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076ac:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076ae:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80076b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80076b6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076b8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076ba:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80076be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80076c2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	e000ed00 	.word	0xe000ed00

080076cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076cc:	4b1b      	ldr	r3, [pc, #108]	@ (800773c <HAL_NVIC_SetPriority+0x70>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076d4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076d6:	f1c3 0e07 	rsb	lr, r3, #7
 80076da:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076de:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076e2:	bf28      	it	cs
 80076e4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076e8:	f1bc 0f06 	cmp.w	ip, #6
 80076ec:	d91c      	bls.n	8007728 <HAL_NVIC_SetPriority+0x5c>
 80076ee:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076f2:	f04f 33ff 	mov.w	r3, #4294967295
 80076f6:	fa03 f30c 	lsl.w	r3, r3, ip
 80076fa:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007702:	fa03 f30e 	lsl.w	r3, r3, lr
 8007706:	ea21 0303 	bic.w	r3, r1, r3
 800770a:	fa03 f30c 	lsl.w	r3, r3, ip
 800770e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007710:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8007712:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007714:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8007716:	db0a      	blt.n	800772e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007718:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800771c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007720:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007724:	f85d fb04 	ldr.w	pc, [sp], #4
 8007728:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800772a:	4694      	mov	ip, r2
 800772c:	e7e7      	b.n	80076fe <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800772e:	4a04      	ldr	r2, [pc, #16]	@ (8007740 <HAL_NVIC_SetPriority+0x74>)
 8007730:	f000 000f 	and.w	r0, r0, #15
 8007734:	4402      	add	r2, r0
 8007736:	7613      	strb	r3, [r2, #24]
 8007738:	f85d fb04 	ldr.w	pc, [sp], #4
 800773c:	e000ed00 	.word	0xe000ed00
 8007740:	e000ecfc 	.word	0xe000ecfc

08007744 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007744:	2800      	cmp	r0, #0
 8007746:	db07      	blt.n	8007758 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007748:	4a04      	ldr	r2, [pc, #16]	@ (800775c <HAL_NVIC_EnableIRQ+0x18>)
 800774a:	0941      	lsrs	r1, r0, #5
 800774c:	2301      	movs	r3, #1
 800774e:	f000 001f 	and.w	r0, r0, #31
 8007752:	4083      	lsls	r3, r0
 8007754:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	e000e100 	.word	0xe000e100

08007760 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8007760:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007764:	4905      	ldr	r1, [pc, #20]	@ (800777c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007766:	4b06      	ldr	r3, [pc, #24]	@ (8007780 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007768:	68ca      	ldr	r2, [r1, #12]
 800776a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800776e:	4313      	orrs	r3, r2
 8007770:	60cb      	str	r3, [r1, #12]
 8007772:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007776:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007778:	e7fd      	b.n	8007776 <HAL_NVIC_SystemReset+0x16>
 800777a:	bf00      	nop
 800777c:	e000ed00 	.word	0xe000ed00
 8007780:	05fa0004 	.word	0x05fa0004

08007784 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007788:	0897      	lsrs	r7, r2, #2
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
  {
    if ((BufferLength % 4U) == 1U)
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800778a:	6805      	ldr	r5, [r0, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800778c:	d015      	beq.n	80077ba <CRC_Handle_8+0x36>
 800778e:	468c      	mov	ip, r1
 8007790:	eb01 0687 	add.w	r6, r1, r7, lsl #2
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007794:	f89c 3001 	ldrb.w	r3, [ip, #1]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007798:	f89c 8000 	ldrb.w	r8, [ip]
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800779c:	f89c 4003 	ldrb.w	r4, [ip, #3]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80077a0:	f89c e002 	ldrb.w	lr, [ip, #2]
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80077a4:	041b      	lsls	r3, r3, #16
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80077a6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80077aa:	4323      	orrs	r3, r4
  for (i = 0U; i < (BufferLength / 4U); i++)
 80077ac:	f10c 0c04 	add.w	ip, ip, #4
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80077b0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
  for (i = 0U; i < (BufferLength / 4U); i++)
 80077b4:	45b4      	cmp	ip, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80077b6:	602b      	str	r3, [r5, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80077b8:	d1ec      	bne.n	8007794 <CRC_Handle_8+0x10>
  if ((BufferLength % 4U) != 0U)
 80077ba:	f012 0203 	ands.w	r2, r2, #3
 80077be:	d00c      	beq.n	80077da <CRC_Handle_8+0x56>
    if ((BufferLength % 4U) == 1U)
 80077c0:	2a01      	cmp	r2, #1
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80077c2:	f811 4027 	ldrb.w	r4, [r1, r7, lsl #2]
 80077c6:	ea4f 0787 	mov.w	r7, r7, lsl #2
    if ((BufferLength % 4U) == 1U)
 80077ca:	d009      	beq.n	80077e0 <CRC_Handle_8+0x5c>
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80077cc:	4439      	add	r1, r7
    if ((BufferLength % 4U) == 2U)
 80077ce:	2a02      	cmp	r2, #2
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80077d0:	784b      	ldrb	r3, [r1, #1]
 80077d2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      *pReg = data;
 80077d6:	802b      	strh	r3, [r5, #0]
    if ((BufferLength % 4U) == 2U)
 80077d8:	d107      	bne.n	80077ea <CRC_Handle_8+0x66>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80077da:	6828      	ldr	r0, [r5, #0]
}
 80077dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80077e0:	702c      	strb	r4, [r5, #0]
  return hcrc->Instance->DR;
 80077e2:	6805      	ldr	r5, [r0, #0]
 80077e4:	6828      	ldr	r0, [r5, #0]
}
 80077e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80077ea:	788b      	ldrb	r3, [r1, #2]
 80077ec:	702b      	strb	r3, [r5, #0]
  return hcrc->Instance->DR;
 80077ee:	6805      	ldr	r5, [r0, #0]
 80077f0:	6828      	ldr	r0, [r5, #0]
}
 80077f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f6:	bf00      	nop

080077f8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80077f8:	b530      	push	{r4, r5, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80077fa:	ea5f 0e52 	movs.w	lr, r2, lsr #1
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
  }
  if ((BufferLength % 2U) != 0U)
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80077fe:	6804      	ldr	r4, [r0, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007800:	d00b      	beq.n	800781a <CRC_Handle_16+0x22>
 8007802:	2300      	movs	r3, #0
 8007804:	1c8d      	adds	r5, r1, #2
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007806:	f831 c023 	ldrh.w	ip, [r1, r3, lsl #2]
 800780a:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800780e:	3301      	adds	r3, #1
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007810:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007814:	4573      	cmp	r3, lr
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8007816:	6020      	str	r0, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007818:	d1f5      	bne.n	8007806 <CRC_Handle_16+0xe>
  if ((BufferLength % 2U) != 0U)
 800781a:	07d3      	lsls	r3, r2, #31
    *pReg = pBuffer[2U * i];
 800781c:	bf44      	itt	mi
 800781e:	f831 302e 	ldrhmi.w	r3, [r1, lr, lsl #2]
 8007822:	8023      	strhmi	r3, [r4, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007824:	6820      	ldr	r0, [r4, #0]
}
 8007826:	bd30      	pop	{r4, r5, pc}

08007828 <HAL_CRC_Init>:
  if (hcrc == NULL)
 8007828:	2800      	cmp	r0, #0
 800782a:	d036      	beq.n	800789a <HAL_CRC_Init+0x72>
{
 800782c:	b510      	push	{r4, lr}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800782e:	7f43      	ldrb	r3, [r0, #29]
 8007830:	4604      	mov	r4, r0
 8007832:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007836:	b363      	cbz	r3, 8007892 <HAL_CRC_Init+0x6a>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007838:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800783a:	2202      	movs	r2, #2
 800783c:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800783e:	b9f3      	cbnz	r3, 800787e <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	4a17      	ldr	r2, [pc, #92]	@ (80078a0 <HAL_CRC_Init+0x78>)
 8007844:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	f022 0218 	bic.w	r2, r2, #24
 800784c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800784e:	7962      	ldrb	r2, [r4, #5]
 8007850:	b18a      	cbz	r2, 8007876 <HAL_CRC_Init+0x4e>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007852:	6922      	ldr	r2, [r4, #16]
 8007854:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	6961      	ldr	r1, [r4, #20]
 800785a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800785e:	430a      	orrs	r2, r1
 8007860:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	69a1      	ldr	r1, [r4, #24]
 8007866:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800786a:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
 800786c:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800786e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8007870:	7761      	strb	r1, [r4, #29]
  return HAL_OK;
 8007872:	2000      	movs	r0, #0
}
 8007874:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007876:	f04f 32ff 	mov.w	r2, #4294967295
 800787a:	611a      	str	r2, [r3, #16]
 800787c:	e7eb      	b.n	8007856 <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800787e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007882:	4620      	mov	r0, r4
 8007884:	f000 f83a 	bl	80078fc <HAL_CRCEx_Polynomial_Set>
 8007888:	b908      	cbnz	r0, 800788e <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	e7df      	b.n	800784e <HAL_CRC_Init+0x26>
    return HAL_ERROR;
 800788e:	2001      	movs	r0, #1
}
 8007890:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8007892:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007894:	f7fd fa78 	bl	8004d88 <HAL_CRC_MspInit>
 8007898:	e7ce      	b.n	8007838 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
 800789a:	2001      	movs	r0, #1
}
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	04c11db7 	.word	0x04c11db7

080078a4 <HAL_CRC_Calculate>:
{
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_CRC_DR_RESET(hcrc);
 80078a6:	6806      	ldr	r6, [r0, #0]
  switch (hcrc->InputDataFormat)
 80078a8:	6a07      	ldr	r7, [r0, #32]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80078aa:	2502      	movs	r5, #2
 80078ac:	7745      	strb	r5, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80078ae:	68b5      	ldr	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 80078b0:	2f02      	cmp	r7, #2
  __HAL_CRC_DR_RESET(hcrc);
 80078b2:	f045 0501 	orr.w	r5, r5, #1
{
 80078b6:	4604      	mov	r4, r0
  __HAL_CRC_DR_RESET(hcrc);
 80078b8:	60b5      	str	r5, [r6, #8]
  switch (hcrc->InputDataFormat)
 80078ba:	d007      	beq.n	80078cc <HAL_CRC_Calculate+0x28>
 80078bc:	2f03      	cmp	r7, #3
 80078be:	d00f      	beq.n	80078e0 <HAL_CRC_Calculate+0x3c>
 80078c0:	2f01      	cmp	r7, #1
 80078c2:	d008      	beq.n	80078d6 <HAL_CRC_Calculate+0x32>
  hcrc->State = HAL_CRC_STATE_READY;
 80078c4:	2301      	movs	r3, #1
 80078c6:	7763      	strb	r3, [r4, #29]
  switch (hcrc->InputDataFormat)
 80078c8:	2000      	movs	r0, #0
}
 80078ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80078cc:	f7ff ff94 	bl	80077f8 <CRC_Handle_16>
  hcrc->State = HAL_CRC_STATE_READY;
 80078d0:	2301      	movs	r3, #1
 80078d2:	7763      	strb	r3, [r4, #29]
}
 80078d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80078d6:	f7ff ff55 	bl	8007784 <CRC_Handle_8>
  hcrc->State = HAL_CRC_STATE_READY;
 80078da:	2301      	movs	r3, #1
 80078dc:	7763      	strb	r3, [r4, #29]
}
 80078de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (index = 0U; index < BufferLength; index++)
 80078e0:	b13a      	cbz	r2, 80078f2 <HAL_CRC_Calculate+0x4e>
 80078e2:	3904      	subs	r1, #4
 80078e4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
        hcrc->Instance->DR = pBuffer[index];
 80078e8:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80078ec:	6033      	str	r3, [r6, #0]
      for (index = 0U; index < BufferLength; index++)
 80078ee:	4291      	cmp	r1, r2
 80078f0:	d1fa      	bne.n	80078e8 <HAL_CRC_Calculate+0x44>
  hcrc->State = HAL_CRC_STATE_READY;
 80078f2:	2301      	movs	r3, #1
      temp = hcrc->Instance->DR;
 80078f4:	6830      	ldr	r0, [r6, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80078f6:	7763      	strb	r3, [r4, #29]
}
 80078f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078fa:	bf00      	nop

080078fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80078fc:	b410      	push	{r4}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80078fe:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007900:	3b01      	subs	r3, #1
 8007902:	1c5c      	adds	r4, r3, #1
 8007904:	fa21 fc03 	lsr.w	ip, r1, r3
 8007908:	d013      	beq.n	8007932 <HAL_CRCEx_Polynomial_Set+0x36>
 800790a:	f01c 0f01 	tst.w	ip, #1
 800790e:	d0f7      	beq.n	8007900 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8007910:	2a18      	cmp	r2, #24
 8007912:	d80f      	bhi.n	8007934 <HAL_CRCEx_Polynomial_Set+0x38>
 8007914:	e8df f002 	tbb	[pc, r2]
 8007918:	0e0e0e14 	.word	0x0e0e0e14
 800791c:	0e0e0e0e 	.word	0x0e0e0e0e
 8007920:	0e0e0e1f 	.word	0x0e0e0e1f
 8007924:	0e0e0e0e 	.word	0x0e0e0e0e
 8007928:	0e0e0e22 	.word	0x0e0e0e22
 800792c:	0e0e0e0e 	.word	0x0e0e0e0e
 8007930:	12          	.byte	0x12
 8007931:	00          	.byte	0x00
 8007932:	b12a      	cbz	r2, 8007940 <HAL_CRCEx_Polynomial_Set+0x44>
 8007934:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8007936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800793a:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_7B)
 800793c:	2b06      	cmp	r3, #6
 800793e:	d8f9      	bhi.n	8007934 <HAL_CRCEx_Polynomial_Set+0x38>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007940:	6804      	ldr	r4, [r0, #0]
 8007942:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007944:	68a3      	ldr	r3, [r4, #8]
 8007946:	f023 0318 	bic.w	r3, r3, #24
 800794a:	4313      	orrs	r3, r2
 800794c:	2000      	movs	r0, #0
 800794e:	60a3      	str	r3, [r4, #8]
}
 8007950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007954:	4770      	bx	lr
      if (msb >= HAL_CRC_LENGTH_16B)
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d9f2      	bls.n	8007940 <HAL_CRCEx_Polynomial_Set+0x44>
 800795a:	e7eb      	b.n	8007934 <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 800795c:	2b07      	cmp	r3, #7
 800795e:	d9ef      	bls.n	8007940 <HAL_CRCEx_Polynomial_Set+0x44>
 8007960:	e7e8      	b.n	8007934 <HAL_CRCEx_Polynomial_Set+0x38>
 8007962:	bf00      	nop

08007964 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007964:	2800      	cmp	r0, #0
 8007966:	d050      	beq.n	8007a0a <HAL_DMA_Init+0xa6>
{
 8007968:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800796a:	4a2e      	ldr	r2, [pc, #184]	@ (8007a24 <HAL_DMA_Init+0xc0>)
 800796c:	6804      	ldr	r4, [r0, #0]
 800796e:	4294      	cmp	r4, r2
 8007970:	4603      	mov	r3, r0
 8007972:	d941      	bls.n	80079f8 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007974:	492c      	ldr	r1, [pc, #176]	@ (8007a28 <HAL_DMA_Init+0xc4>)
 8007976:	4a2d      	ldr	r2, [pc, #180]	@ (8007a2c <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA2;
 8007978:	4d2d      	ldr	r5, [pc, #180]	@ (8007a30 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800797a:	4421      	add	r1, r4
 800797c:	fba2 2101 	umull	r2, r1, r2, r1
 8007980:	0909      	lsrs	r1, r1, #4
 8007982:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007984:	2202      	movs	r2, #2
 8007986:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800798a:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800798e:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8007990:	6820      	ldr	r0, [r4, #0]
 8007992:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 8007994:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007996:	433a      	orrs	r2, r7
 8007998:	695f      	ldr	r7, [r3, #20]
 800799a:	6459      	str	r1, [r3, #68]	@ 0x44
 800799c:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800799e:	699f      	ldr	r7, [r3, #24]
 80079a0:	433a      	orrs	r2, r7
 80079a2:	69df      	ldr	r7, [r3, #28]
 80079a4:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80079a6:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80079a8:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 80079ac:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80079b0:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 80079b2:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80079b4:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 80079b8:	6022      	str	r2, [r4, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80079ba:	d014      	beq.n	80079e6 <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80079bc:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80079be:	f001 011c 	and.w	r1, r1, #28
 80079c2:	220f      	movs	r2, #15
 80079c4:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80079c6:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 80079c8:	491a      	ldr	r1, [pc, #104]	@ (8007a34 <HAL_DMA_Init+0xd0>)
 80079ca:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80079cc:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 80079d0:	d01d      	beq.n	8007a0e <HAL_DMA_Init+0xaa>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80079d2:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 80079d6:	4022      	ands	r2, r4
 80079d8:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80079dc:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 80079e0:	4302      	orrs	r2, r0
 80079e2:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079e6:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80079e8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079ea:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80079ec:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80079f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 80079f4:	bcf0      	pop	{r4, r5, r6, r7}
 80079f6:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80079f8:	490f      	ldr	r1, [pc, #60]	@ (8007a38 <HAL_DMA_Init+0xd4>)
 80079fa:	4a0c      	ldr	r2, [pc, #48]	@ (8007a2c <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA1;
 80079fc:	4d0d      	ldr	r5, [pc, #52]	@ (8007a34 <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80079fe:	4421      	add	r1, r4
 8007a00:	fba2 2101 	umull	r2, r1, r2, r1
 8007a04:	0909      	lsrs	r1, r1, #4
 8007a06:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8007a08:	e7bc      	b.n	8007984 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8007a0a:	2001      	movs	r0, #1
}
 8007a0c:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007a0e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8007a12:	400a      	ands	r2, r1
 8007a14:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007a18:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8007a1c:	4302      	orrs	r2, r0
 8007a1e:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 8007a22:	e7e0      	b.n	80079e6 <HAL_DMA_Init+0x82>
 8007a24:	40020407 	.word	0x40020407
 8007a28:	bffdfbf8 	.word	0xbffdfbf8
 8007a2c:	cccccccd 	.word	0xcccccccd
 8007a30:	40020400 	.word	0x40020400
 8007a34:	40020000 	.word	0x40020000
 8007a38:	bffdfff8 	.word	0xbffdfff8

08007a3c <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a3c:	f890 c024 	ldrb.w	ip, [r0, #36]	@ 0x24
 8007a40:	f1bc 0f01 	cmp.w	ip, #1
 8007a44:	d03c      	beq.n	8007ac0 <HAL_DMA_Start_IT+0x84>
{
 8007a46:	b570      	push	{r4, r5, r6, lr}

  if(HAL_DMA_STATE_READY == hdma->State)
 8007a48:	f890 c025 	ldrb.w	ip, [r0, #37]	@ 0x25
  __HAL_LOCK(hdma);
 8007a4c:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a4e:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8007a50:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8007a54:	fa5f fe8c 	uxtb.w	lr, ip
 8007a58:	d004      	beq.n	8007a64 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8007a60:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a64:	2502      	movs	r5, #2
 8007a66:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 8007a6a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a6c:	2500      	movs	r5, #0
 8007a6e:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8007a70:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007a72:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8007a74:	f026 0601 	bic.w	r6, r6, #1
 8007a78:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007a7a:	f005 051c 	and.w	r5, r5, #28
 8007a7e:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8007a80:	fa0e f505 	lsl.w	r5, lr, r5
 8007a84:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007a86:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a88:	6883      	ldr	r3, [r0, #8]
 8007a8a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8007a8c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007a8e:	bf0b      	itete	eq
 8007a90:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8007a92:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007a94:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8007a96:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8007a98:	b14b      	cbz	r3, 8007aae <HAL_DMA_Start_IT+0x72>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	f043 030e 	orr.w	r3, r3, #14
 8007aa0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8007aa8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007aaa:	6023      	str	r3, [r4, #0]
}
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f023 0304 	bic.w	r3, r3, #4
 8007ab4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	f043 030a 	orr.w	r3, r3, #10
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	e7f0      	b.n	8007aa2 <HAL_DMA_Start_IT+0x66>
  __HAL_LOCK(hdma);
 8007ac0:	2002      	movs	r0, #2
}
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ac4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8007ac8:	2a02      	cmp	r2, #2
{
 8007aca:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007acc:	d006      	beq.n	8007adc <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ace:	2204      	movs	r2, #4
 8007ad0:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8007ad2:	2200      	movs	r2, #0
    return HAL_ERROR;
 8007ad4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8007ad6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8007ada:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007adc:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ade:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ae0:	6808      	ldr	r0, [r1, #0]
 8007ae2:	f020 000e 	bic.w	r0, r0, #14
 8007ae6:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8007ae8:	6808      	ldr	r0, [r1, #0]
 8007aea:	f020 0001 	bic.w	r0, r0, #1
 8007aee:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007af0:	f04f 0c01 	mov.w	ip, #1
 8007af4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007af6:	f002 021c 	and.w	r2, r2, #28
 8007afa:	fa0c f202 	lsl.w	r2, ip, r2
 8007afe:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8007b00:	2200      	movs	r2, #0
    return status;
 8007b02:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8007b04:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8007b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop

08007b10 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007b10:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8007b14:	2a02      	cmp	r2, #2
 8007b16:	d003      	beq.n	8007b20 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b18:	2204      	movs	r2, #4
 8007b1a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8007b1c:	2001      	movs	r0, #1
}
 8007b1e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b20:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b22:	6c42      	ldr	r2, [r0, #68]	@ 0x44
{
 8007b24:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b26:	680c      	ldr	r4, [r1, #0]
 8007b28:	f024 040e 	bic.w	r4, r4, #14
 8007b2c:	600c      	str	r4, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8007b2e:	680c      	ldr	r4, [r1, #0]
 8007b30:	f024 0401 	bic.w	r4, r4, #1
 8007b34:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b36:	f002 021c 	and.w	r2, r2, #28
 8007b3a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b42:	6062      	str	r2, [r4, #4]
    if(hdma->XferAbortCallback != NULL)
 8007b44:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8007b46:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8007b4a:	2400      	movs	r4, #0
 8007b4c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    if(hdma->XferAbortCallback != NULL)
 8007b50:	b102      	cbz	r2, 8007b54 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8007b52:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8007b54:	2000      	movs	r0, #0
}
 8007b56:	bd10      	pop	{r4, pc}

08007b58 <HAL_DMA_IRQHandler>:
{
 8007b58:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007b5a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007b5c:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8007b5e:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007b60:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8007b62:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007b64:	f003 031c 	and.w	r3, r3, #28
 8007b68:	2204      	movs	r2, #4
 8007b6a:	409a      	lsls	r2, r3
 8007b6c:	420a      	tst	r2, r1
 8007b6e:	d00e      	beq.n	8007b8e <HAL_DMA_IRQHandler+0x36>
 8007b70:	f014 0f04 	tst.w	r4, #4
 8007b74:	d00b      	beq.n	8007b8e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b76:	682b      	ldr	r3, [r5, #0]
 8007b78:	069b      	lsls	r3, r3, #26
 8007b7a:	d403      	bmi.n	8007b84 <HAL_DMA_IRQHandler+0x2c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	f023 0304 	bic.w	r3, r3, #4
 8007b82:	602b      	str	r3, [r5, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8007b84:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007b86:	6072      	str	r2, [r6, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 8007b88:	b1cb      	cbz	r3, 8007bbe <HAL_DMA_IRQHandler+0x66>
}
 8007b8a:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8007b8c:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007b8e:	2202      	movs	r2, #2
 8007b90:	409a      	lsls	r2, r3
 8007b92:	420a      	tst	r2, r1
 8007b94:	d015      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x6a>
 8007b96:	f014 0f02 	tst.w	r4, #2
 8007b9a:	d012      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	0699      	lsls	r1, r3, #26
 8007ba0:	d406      	bmi.n	8007bb0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	f023 030a 	bic.w	r3, r3, #10
 8007ba8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if(hdma->XferCpltCallback != NULL)
 8007bb0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bb2:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if(hdma->XferCpltCallback != NULL)
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e5      	bne.n	8007b8a <HAL_DMA_IRQHandler+0x32>
}
 8007bbe:	bc70      	pop	{r4, r5, r6}
 8007bc0:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	409a      	lsls	r2, r3
 8007bc6:	420a      	tst	r2, r1
 8007bc8:	d0f9      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x66>
 8007bca:	0722      	lsls	r2, r4, #28
 8007bcc:	d5f7      	bpl.n	8007bbe <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bce:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8007bd0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bd2:	f022 020e 	bic.w	r2, r2, #14
 8007bd6:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007bd8:	2201      	movs	r2, #1
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8007bde:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007be0:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007be2:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8007be4:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8007be8:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8007bec:	2900      	cmp	r1, #0
 8007bee:	d0e6      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x66>
}
 8007bf0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8007bf2:	4708      	bx	r1

08007bf4 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007bf4:	4b06      	ldr	r3, [pc, #24]	@ (8007c10 <HAL_FLASH_Unlock+0x1c>)
 8007bf6:	695a      	ldr	r2, [r3, #20]
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	db01      	blt.n	8007c00 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8007bfc:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8007bfe:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007c00:	4904      	ldr	r1, [pc, #16]	@ (8007c14 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007c02:	4a05      	ldr	r2, [pc, #20]	@ (8007c18 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007c04:	6099      	str	r1, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007c06:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007c08:	6958      	ldr	r0, [r3, #20]
 8007c0a:	0fc0      	lsrs	r0, r0, #31
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	40022000 	.word	0x40022000
 8007c14:	45670123 	.word	0x45670123
 8007c18:	cdef89ab 	.word	0xcdef89ab

08007c1c <HAL_FLASH_Lock>:
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007c1c:	4a03      	ldr	r2, [pc, #12]	@ (8007c2c <HAL_FLASH_Lock+0x10>)
 8007c1e:	6953      	ldr	r3, [r2, #20]
 8007c20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000

  return HAL_OK;
}
 8007c24:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007c26:	6153      	str	r3, [r2, #20]
}
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40022000 	.word	0x40022000

08007c30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	4605      	mov	r5, r0
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007c34:	f7ff f876 	bl	8006d24 <HAL_GetTick>
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c38:	4c10      	ldr	r4, [pc, #64]	@ (8007c7c <FLASH_WaitForLastOperation+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8007c3a:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c3c:	e001      	b.n	8007c42 <FLASH_WaitForLastOperation+0x12>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007c3e:	1c69      	adds	r1, r5, #1
 8007c40:	d10d      	bne.n	8007c5e <FLASH_WaitForLastOperation+0x2e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	03da      	lsls	r2, r3, #15
 8007c46:	d4fa      	bmi.n	8007c3e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8007c80 <FLASH_WaitForLastOperation+0x50>)

  if(error != 0u)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	d10d      	bne.n	8007c6c <FLASH_WaitForLastOperation+0x3c>

    return HAL_ERROR;
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007c50:	6923      	ldr	r3, [r4, #16]
 8007c52:	07db      	lsls	r3, r3, #31
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007c54:	bf44      	itt	mi
 8007c56:	2301      	movmi	r3, #1
 8007c58:	6123      	strmi	r3, [r4, #16]
    return HAL_ERROR;
 8007c5a:	2000      	movs	r0, #0
  }

  /* If there is an error flag set */
  return HAL_OK;
}
 8007c5c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) >= Timeout)
 8007c5e:	f7ff f861 	bl	8006d24 <HAL_GetTick>
 8007c62:	1b80      	subs	r0, r0, r6
 8007c64:	42a8      	cmp	r0, r5
 8007c66:	d3ec      	bcc.n	8007c42 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8007c68:	2003      	movs	r0, #3
}
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= error;
 8007c6c:	4905      	ldr	r1, [pc, #20]	@ (8007c84 <FLASH_WaitForLastOperation+0x54>)
 8007c6e:	684a      	ldr	r2, [r1, #4]
 8007c70:	431a      	orrs	r2, r3
 8007c72:	604a      	str	r2, [r1, #4]
    return HAL_ERROR;
 8007c74:	2001      	movs	r0, #1
    __HAL_FLASH_CLEAR_FLAG(error);
 8007c76:	6123      	str	r3, [r4, #16]
}
 8007c78:	bd70      	pop	{r4, r5, r6, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40022000 	.word	0x40022000
 8007c80:	0002c3fa 	.word	0x0002c3fa
 8007c84:	20000014 	.word	0x20000014

08007c88 <HAL_FLASH_Program>:
{
 8007c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8007c8c:	4e34      	ldr	r6, [pc, #208]	@ (8007d60 <HAL_FLASH_Program+0xd8>)
{
 8007c8e:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8007c90:	7833      	ldrb	r3, [r6, #0]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d027      	beq.n	8007ce6 <HAL_FLASH_Program+0x5e>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4607      	mov	r7, r0
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c9a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8007ca2:	7033      	strb	r3, [r6, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ca4:	f7ff ffc4 	bl	8007c30 <FLASH_WaitForLastOperation>
 8007ca8:	4681      	mov	r9, r0
  if(status == HAL_OK)
 8007caa:	b120      	cbz	r0, 8007cb6 <HAL_FLASH_Program+0x2e>
  __HAL_UNLOCK(&pFlash);
 8007cac:	2300      	movs	r3, #0
 8007cae:	7033      	strb	r3, [r6, #0]
}
 8007cb0:	4648      	mov	r0, r9
 8007cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8007d64 <HAL_FLASH_Program+0xdc>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007cb8:	6070      	str	r0, [r6, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007cba:	6813      	ldr	r3, [r2, #0]
 8007cbc:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007cc0:	bf1f      	itttt	ne
 8007cc2:	6813      	ldrne	r3, [r2, #0]
 8007cc4:	f423 6380 	bicne.w	r3, r3, #1024	@ 0x400
 8007cc8:	6013      	strne	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007cca:	2302      	movne	r3, #2
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007ccc:	7733      	strb	r3, [r6, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007cce:	b17f      	cbz	r7, 8007cf0 <HAL_FLASH_Program+0x68>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007cd0:	1e7b      	subs	r3, r7, #1
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d922      	bls.n	8007d1c <HAL_FLASH_Program+0x94>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cd6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007cda:	f7ff ffa9 	bl	8007c30 <FLASH_WaitForLastOperation>
 8007cde:	4681      	mov	r9, r0
    FLASH_FlushCaches();
 8007ce0:	f000 f842 	bl	8007d68 <FLASH_FlushCaches>
 8007ce4:	e7e2      	b.n	8007cac <HAL_FLASH_Program+0x24>
  __HAL_LOCK(&pFlash);
 8007ce6:	f04f 0902 	mov.w	r9, #2
}
 8007cea:	4648      	mov	r0, r9
 8007cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d64 <HAL_FLASH_Program+0xdc>)
 8007cf2:	6953      	ldr	r3, [r2, #20]
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007cfa:	602c      	str	r4, [r5, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007cfc:	f3bf 8f6f 	isb	sy
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d00:	f24c 3050 	movw	r0, #50000	@ 0xc350
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8007d04:	f8c5 8004 	str.w	r8, [r5, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d08:	f7ff ff92 	bl	8007c30 <FLASH_WaitForLastOperation>
 8007d0c:	f06f 0101 	mvn.w	r1, #1
 8007d10:	4681      	mov	r9, r0
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007d12:	4a14      	ldr	r2, [pc, #80]	@ (8007d64 <HAL_FLASH_Program+0xdc>)
 8007d14:	6953      	ldr	r3, [r2, #20]
 8007d16:	400b      	ands	r3, r1
 8007d18:	6153      	str	r3, [r2, #20]
 8007d1a:	e7e1      	b.n	8007ce0 <HAL_FLASH_Program+0x58>

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007d1c:	4911      	ldr	r1, [pc, #68]	@ (8007d64 <HAL_FLASH_Program+0xdc>)
 8007d1e:	694b      	ldr	r3, [r1, #20]
 8007d20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8007d24:	4622      	mov	r2, r4
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007d26:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d28:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007d2c:	b672      	cpsid	i
 8007d2e:	1aa9      	subs	r1, r5, r2
 8007d30:	f502 7080 	add.w	r0, r2, #256	@ 0x100
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8007d34:	6813      	ldr	r3, [r2, #0]
 8007d36:	5053      	str	r3, [r2, r1]
    dest_addr++;
    src_addr++;
 8007d38:	3204      	adds	r2, #4
    row_index--;
  } while (row_index != 0U);
 8007d3a:	4290      	cmp	r0, r2
 8007d3c:	d1fa      	bne.n	8007d34 <HAL_FLASH_Program+0xac>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d3e:	f384 8810 	msr	PRIMASK, r4
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007d42:	2f02      	cmp	r7, #2
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d44:	f24c 3050 	movw	r0, #50000	@ 0xc350
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007d48:	d003      	beq.n	8007d52 <HAL_FLASH_Program+0xca>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d4a:	f7ff ff71 	bl	8007c30 <FLASH_WaitForLastOperation>
 8007d4e:	4681      	mov	r9, r0
    if (prog_bit != 0U)
 8007d50:	e7c6      	b.n	8007ce0 <HAL_FLASH_Program+0x58>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d52:	f7ff ff6d 	bl	8007c30 <FLASH_WaitForLastOperation>
 8007d56:	f46f 2180 	mvn.w	r1, #262144	@ 0x40000
 8007d5a:	4681      	mov	r9, r0
    if (prog_bit != 0U)
 8007d5c:	e7d9      	b.n	8007d12 <HAL_FLASH_Program+0x8a>
 8007d5e:	bf00      	nop
 8007d60:	20000014 	.word	0x20000014
 8007d64:	40022000 	.word	0x40022000

08007d68 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007d68:	4915      	ldr	r1, [pc, #84]	@ (8007dc0 <FLASH_FlushCaches+0x58>)
 8007d6a:	7f0b      	ldrb	r3, [r1, #28]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007d6c:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
 8007d70:	2a01      	cmp	r2, #1
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007d72:	b2db      	uxtb	r3, r3
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007d74:	d110      	bne.n	8007d98 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007d76:	4a13      	ldr	r2, [pc, #76]	@ (8007dc4 <FLASH_FlushCaches+0x5c>)
 8007d78:	6810      	ldr	r0, [r2, #0]
 8007d7a:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
 8007d7e:	6010      	str	r0, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007d80:	6810      	ldr	r0, [r2, #0]
 8007d82:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8007d86:	6010      	str	r0, [r2, #0]
 8007d88:	6810      	ldr	r0, [r2, #0]
 8007d8a:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
 8007d8e:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d90:	6810      	ldr	r0, [r2, #0]
 8007d92:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8007d96:	6010      	str	r0, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007d98:	3b02      	subs	r3, #2
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d80c      	bhi.n	8007db8 <FLASH_FlushCaches+0x50>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007d9e:	4b09      	ldr	r3, [pc, #36]	@ (8007dc4 <FLASH_FlushCaches+0x5c>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007dae:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007db6:	601a      	str	r2, [r3, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007db8:	2300      	movs	r3, #0
 8007dba:	770b      	strb	r3, [r1, #28]
}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000014 	.word	0x20000014
 8007dc4:	40022000 	.word	0x40022000

08007dc8 <HAL_FLASHEx_Erase>:
{
 8007dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8007dcc:	4f40      	ldr	r7, [pc, #256]	@ (8007ed0 <HAL_FLASHEx_Erase+0x108>)
 8007dce:	783b      	ldrb	r3, [r7, #0]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d054      	beq.n	8007e7e <HAL_FLASHEx_Erase+0xb6>
 8007dd4:	4682      	mov	sl, r0
 8007dd6:	2401      	movs	r4, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007dd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007ddc:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8007dde:	703c      	strb	r4, [r7, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007de0:	f7ff ff26 	bl	8007c30 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8007de4:	4606      	mov	r6, r0
 8007de6:	b120      	cbz	r0, 8007df2 <HAL_FLASHEx_Erase+0x2a>
  __HAL_UNLOCK(&pFlash);
 8007de8:	2300      	movs	r3, #0
 8007dea:	703b      	strb	r3, [r7, #0]
}
 8007dec:	4630      	mov	r0, r6
 8007dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007df2:	4b38      	ldr	r3, [pc, #224]	@ (8007ed4 <HAL_FLASHEx_Erase+0x10c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007df4:	6078      	str	r0, [r7, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	f412 7f00 	tst.w	r2, #512	@ 0x200
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007dfc:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007dfe:	d142      	bne.n	8007e86 <HAL_FLASHEx_Erase+0xbe>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007e00:	0552      	lsls	r2, r2, #21
 8007e02:	d54b      	bpl.n	8007e9c <HAL_FLASHEx_Erase+0xd4>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e0a:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	773b      	strb	r3, [r7, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007e10:	f8da 3000 	ldr.w	r3, [sl]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d043      	beq.n	8007ea0 <HAL_FLASHEx_Erase+0xd8>
      *PageError = 0xFFFFFFFFU;
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1c:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007e20:	e9da 5302 	ldrd	r5, r3, [sl, #8]
 8007e24:	442b      	add	r3, r5
 8007e26:	429d      	cmp	r5, r3
 8007e28:	d226      	bcs.n	8007e78 <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007e2a:	4c2a      	ldr	r4, [pc, #168]	@ (8007ed4 <HAL_FLASHEx_Erase+0x10c>)
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007e2c:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8007ed8 <HAL_FLASHEx_Erase+0x110>
 8007e30:	e005      	b.n	8007e3e <HAL_FLASHEx_Erase+0x76>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007e32:	e9da 3202 	ldrd	r3, r2, [sl, #8]
 8007e36:	3501      	adds	r5, #1
 8007e38:	4413      	add	r3, r2
 8007e3a:	42ab      	cmp	r3, r5
 8007e3c:	d91c      	bls.n	8007e78 <HAL_FLASHEx_Erase+0xb0>
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007e3e:	6962      	ldr	r2, [r4, #20]
 8007e40:	00eb      	lsls	r3, r5, #3
 8007e42:	f422 727e 	bic.w	r2, r2, #1016	@ 0x3f8
 8007e46:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007e4e:	6963      	ldr	r3, [r4, #20]
 8007e50:	f043 0302 	orr.w	r3, r3, #2
 8007e54:	6163      	str	r3, [r4, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007e56:	6963      	ldr	r3, [r4, #20]
 8007e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e5c:	6163      	str	r3, [r4, #20]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e5e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007e62:	f7ff fee5 	bl	8007c30 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007e66:	6963      	ldr	r3, [r4, #20]
 8007e68:	ea03 0309 	and.w	r3, r3, r9
 8007e6c:	6163      	str	r3, [r4, #20]
        if (status != HAL_OK)
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d0df      	beq.n	8007e32 <HAL_FLASHEx_Erase+0x6a>
          *PageError = page_index;
 8007e72:	f8c8 5000 	str.w	r5, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e76:	4606      	mov	r6, r0
    FLASH_FlushCaches();
 8007e78:	f7ff ff76 	bl	8007d68 <FLASH_FlushCaches>
 8007e7c:	e7b4      	b.n	8007de8 <HAL_FLASHEx_Erase+0x20>
  __HAL_LOCK(&pFlash);
 8007e7e:	2602      	movs	r6, #2
}
 8007e80:	4630      	mov	r0, r6
 8007e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007e86:	0551      	lsls	r1, r2, #21
 8007e88:	d506      	bpl.n	8007e98 <HAL_FLASHEx_Erase+0xd0>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e90:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007e92:	2303      	movs	r3, #3
 8007e94:	773b      	strb	r3, [r7, #28]
 8007e96:	e7bb      	b.n	8007e10 <HAL_FLASHEx_Erase+0x48>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007e98:	773c      	strb	r4, [r7, #28]
 8007e9a:	e7b9      	b.n	8007e10 <HAL_FLASHEx_Erase+0x48>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007e9c:	7738      	strb	r0, [r7, #28]
 8007e9e:	e7b7      	b.n	8007e10 <HAL_FLASHEx_Erase+0x48>
    if((Banks & FLASH_BANK_1) != 0U)
 8007ea0:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007ea4:	07db      	lsls	r3, r3, #31
 8007ea6:	d504      	bpl.n	8007eb2 <HAL_FLASHEx_Erase+0xea>
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed4 <HAL_FLASHEx_Erase+0x10c>)
 8007eaa:	6953      	ldr	r3, [r2, #20]
 8007eac:	f043 0304 	orr.w	r3, r3, #4
 8007eb0:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007eb2:	4c08      	ldr	r4, [pc, #32]	@ (8007ed4 <HAL_FLASHEx_Erase+0x10c>)
 8007eb4:	6963      	ldr	r3, [r4, #20]
 8007eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eba:	6163      	str	r3, [r4, #20]
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ebc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007ec0:	f7ff feb6 	bl	8007c30 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007ec4:	6963      	ldr	r3, [r4, #20]
 8007ec6:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007eca:	4606      	mov	r6, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007ecc:	6163      	str	r3, [r4, #20]
 8007ece:	e7d3      	b.n	8007e78 <HAL_FLASHEx_Erase+0xb0>
 8007ed0:	20000014 	.word	0x20000014
 8007ed4:	40022000 	.word	0x40022000
 8007ed8:	fffffc05 	.word	0xfffffc05

08007edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ee0:	680c      	ldr	r4, [r1, #0]
{
 8007ee2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ee4:	2c00      	cmp	r4, #0
 8007ee6:	f000 8084 	beq.w	8007ff2 <HAL_GPIO_Init+0x116>
  uint32_t position = 0x00u;
 8007eea:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007eec:	f04f 0b01 	mov.w	fp, #1
 8007ef0:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8007ef4:	ea1e 0a04 	ands.w	sl, lr, r4
 8007ef8:	d076      	beq.n	8007fe8 <HAL_GPIO_Init+0x10c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007efa:	684d      	ldr	r5, [r1, #4]
 8007efc:	f005 0203 	and.w	r2, r5, #3
 8007f00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f04:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f06:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f0a:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f0e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007f12:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f16:	d96f      	bls.n	8007ff8 <HAL_GPIO_Init+0x11c>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f18:	2a03      	cmp	r2, #3
 8007f1a:	f040 80ab 	bne.w	8008074 <HAL_GPIO_Init+0x198>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f1e:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8007f22:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f26:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f2a:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f2c:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8007f30:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f32:	d059      	beq.n	8007fe8 <HAL_GPIO_Init+0x10c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f34:	4f60      	ldr	r7, [pc, #384]	@ (80080b8 <HAL_GPIO_Init+0x1dc>)
 8007f36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f38:	f042 0201 	orr.w	r2, r2, #1
 8007f3c:	663a      	str	r2, [r7, #96]	@ 0x60
 8007f3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f40:	f002 0201 	and.w	r2, r2, #1
 8007f44:	9203      	str	r2, [sp, #12]
 8007f46:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f48:	f023 0203 	bic.w	r2, r3, #3
 8007f4c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8007f50:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f54:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8007f58:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f5a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8007f5e:	260f      	movs	r6, #15
 8007f60:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f64:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f68:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f6c:	d018      	beq.n	8007fa0 <HAL_GPIO_Init+0xc4>
 8007f6e:	4e53      	ldr	r6, [pc, #332]	@ (80080bc <HAL_GPIO_Init+0x1e0>)
 8007f70:	42b0      	cmp	r0, r6
 8007f72:	f000 8092 	beq.w	800809a <HAL_GPIO_Init+0x1be>
 8007f76:	4e52      	ldr	r6, [pc, #328]	@ (80080c0 <HAL_GPIO_Init+0x1e4>)
 8007f78:	42b0      	cmp	r0, r6
 8007f7a:	f000 8095 	beq.w	80080a8 <HAL_GPIO_Init+0x1cc>
 8007f7e:	f8df e148 	ldr.w	lr, [pc, #328]	@ 80080c8 <HAL_GPIO_Init+0x1ec>
 8007f82:	4570      	cmp	r0, lr
 8007f84:	f000 8082 	beq.w	800808c <HAL_GPIO_Init+0x1b0>
 8007f88:	f8df e140 	ldr.w	lr, [pc, #320]	@ 80080cc <HAL_GPIO_Init+0x1f0>
 8007f8c:	4570      	cmp	r0, lr
 8007f8e:	bf0c      	ite	eq
 8007f90:	f04f 0e04 	moveq.w	lr, #4
 8007f94:	f04f 0e07 	movne.w	lr, #7
 8007f98:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007f9c:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007fa0:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fa2:	4a48      	ldr	r2, [pc, #288]	@ (80080c4 <HAL_GPIO_Init+0x1e8>)
 8007fa4:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007fa6:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8007fa8:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8007fac:	4e45      	ldr	r6, [pc, #276]	@ (80080c4 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8007fae:	bf54      	ite	pl
 8007fb0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8007fb2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8007fb6:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8007fb8:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fba:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8007fbc:	4e41      	ldr	r6, [pc, #260]	@ (80080c4 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8007fbe:	bf54      	ite	pl
 8007fc0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8007fc2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8007fc6:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007fc8:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007fca:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8007fcc:	4e3d      	ldr	r6, [pc, #244]	@ (80080c4 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8007fce:	bf54      	ite	pl
 8007fd0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8007fd2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8007fd6:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8007fd8:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007fda:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8007fdc:	4d39      	ldr	r5, [pc, #228]	@ (80080c4 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8007fde:	bf54      	ite	pl
 8007fe0:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8007fe2:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8007fe6:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8007fe8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fea:	fa34 f203 	lsrs.w	r2, r4, r3
 8007fee:	f47f af7f 	bne.w	8007ef0 <HAL_GPIO_Init+0x14>
  }
}
 8007ff2:	b005      	add	sp, #20
 8007ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007ff8:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007ffc:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007ffe:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008002:	fa06 f80c 	lsl.w	r8, r6, ip
 8008006:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800800a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800800e:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008012:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008014:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008018:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800801c:	fa0e fe03 	lsl.w	lr, lr, r3
 8008020:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8008024:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8008028:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800802c:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008030:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008034:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008038:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800803a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800803e:	f47f af6e 	bne.w	8007f1e <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008042:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8008044:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008048:	f003 0e07 	and.w	lr, r3, #7
 800804c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8008050:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008054:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8008058:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800805c:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800805e:	260f      	movs	r6, #15
 8008060:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008064:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008066:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800806a:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 800806e:	f8c8 e020 	str.w	lr, [r8, #32]
 8008072:	e754      	b.n	8007f1e <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8008074:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008078:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800807a:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800807e:	fa06 fe0c 	lsl.w	lr, r6, ip
 8008082:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8008086:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800808a:	e748      	b.n	8007f1e <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800808c:	f04f 0e03 	mov.w	lr, #3
 8008090:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008094:	ea47 070c 	orr.w	r7, r7, ip
 8008098:	e782      	b.n	8007fa0 <HAL_GPIO_Init+0xc4>
 800809a:	f04f 0e01 	mov.w	lr, #1
 800809e:	fa0e fc0c 	lsl.w	ip, lr, ip
 80080a2:	ea47 070c 	orr.w	r7, r7, ip
 80080a6:	e77b      	b.n	8007fa0 <HAL_GPIO_Init+0xc4>
 80080a8:	f04f 0e02 	mov.w	lr, #2
 80080ac:	fa0e fc0c 	lsl.w	ip, lr, ip
 80080b0:	ea47 070c 	orr.w	r7, r7, ip
 80080b4:	e774      	b.n	8007fa0 <HAL_GPIO_Init+0xc4>
 80080b6:	bf00      	nop
 80080b8:	40021000 	.word	0x40021000
 80080bc:	48000400 	.word	0x48000400
 80080c0:	48000800 	.word	0x48000800
 80080c4:	40010400 	.word	0x40010400
 80080c8:	48000c00 	.word	0x48000c00
 80080cc:	48001000 	.word	0x48001000

080080d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80080d0:	6903      	ldr	r3, [r0, #16]
 80080d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80080d4:	bf14      	ite	ne
 80080d6:	2001      	movne	r0, #1
 80080d8:	2000      	moveq	r0, #0
 80080da:	4770      	bx	lr

080080dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080dc:	b10a      	cbz	r2, 80080e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80080de:	6181      	str	r1, [r0, #24]
 80080e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80080e2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop

080080e8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80080e8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80080ea:	ea01 0203 	and.w	r2, r1, r3
 80080ee:	ea21 0103 	bic.w	r1, r1, r3
 80080f2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080f6:	6181      	str	r1, [r0, #24]
}
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop

080080fc <I2C_IsErrorOccurred>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 80080fc:	6803      	ldr	r3, [r0, #0]
{
 80080fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008102:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8008104:	6998      	ldr	r0, [r3, #24]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008106:	f010 0c10 	ands.w	ip, r0, #16
 800810a:	d043      	beq.n	8008194 <I2C_IsErrorOccurred+0x98>
 800810c:	4616      	mov	r6, r2
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800810e:	2210      	movs	r2, #16
 8008110:	460f      	mov	r7, r1
 8008112:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8008114:	f04f 0800 	mov.w	r8, #0

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008118:	699a      	ldr	r2, [r3, #24]
 800811a:	0692      	lsls	r2, r2, #26
 800811c:	f100 808d 	bmi.w	800823a <I2C_IsErrorOccurred+0x13e>
 8008120:	f1b8 0f00 	cmp.w	r8, #0
 8008124:	d106      	bne.n	8008134 <I2C_IsErrorOccurred+0x38>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008126:	1c78      	adds	r0, r7, #1
 8008128:	d150      	bne.n	80081cc <I2C_IsErrorOccurred+0xd0>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	0691      	lsls	r1, r2, #26
 800812e:	d5fc      	bpl.n	800812a <I2C_IsErrorOccurred+0x2e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008130:	2220      	movs	r2, #32
 8008132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008134:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008136:	05d5      	lsls	r5, r2, #23
    error_code |= HAL_I2C_ERROR_AF;
 8008138:	f04f 0c04 	mov.w	ip, #4
    status = HAL_ERROR;
 800813c:	f04f 0001 	mov.w	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008140:	d42c      	bmi.n	800819c <I2C_IsErrorOccurred+0xa0>

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008142:	0557      	lsls	r7, r2, #21
 8008144:	d53c      	bpl.n	80081c0 <I2C_IsErrorOccurred+0xc4>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008146:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800814a:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800814c:	f04c 0c08 	orr.w	ip, ip, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008150:	0596      	lsls	r6, r2, #22
 8008152:	d504      	bpl.n	800815e <I2C_IsErrorOccurred+0x62>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008154:	f44f 7200 	mov.w	r2, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008158:	f04c 0c02 	orr.w	ip, ip, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800815c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800815e:	699a      	ldr	r2, [r3, #24]
 8008160:	0791      	lsls	r1, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8008162:	bf44      	itt	mi
 8008164:	2200      	movmi	r2, #0
 8008166:	629a      	strmi	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008168:	699a      	ldr	r2, [r3, #24]
 800816a:	07d2      	lsls	r2, r2, #31
 800816c:	d523      	bpl.n	80081b6 <I2C_IsErrorOccurred+0xba>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	4934      	ldr	r1, [pc, #208]	@ (8008244 <I2C_IsErrorOccurred+0x148>)
 8008172:	400a      	ands	r2, r1
 8008174:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8008176:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008178:	2200      	movs	r2, #0
    hi2c->ErrorCode |= error_code;
 800817a:	ea43 030c 	orr.w	r3, r3, ip
    hi2c->State = HAL_I2C_STATE_READY;
 800817e:	2120      	movs	r1, #32
    hi2c->ErrorCode |= error_code;
 8008180:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008182:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8008186:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800818a:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800818e:	2001      	movs	r0, #1
  }

  return status;
}
 8008190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  itflag = hi2c->Instance->ISR;
 8008194:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008196:	05d5      	lsls	r5, r2, #23
  HAL_StatusTypeDef status = HAL_OK;
 8008198:	4660      	mov	r0, ip
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800819a:	d5d2      	bpl.n	8008142 <I2C_IsErrorOccurred+0x46>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800819c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80081a0:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80081a2:	0551      	lsls	r1, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 80081a4:	f04c 0c01 	orr.w	ip, ip, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80081a8:	d5d2      	bpl.n	8008150 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80081aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80081ae:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80081b0:	f04c 0c08 	orr.w	ip, ip, #8
 80081b4:	e7cc      	b.n	8008150 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80081b6:	699a      	ldr	r2, [r3, #24]
 80081b8:	f042 0201 	orr.w	r2, r2, #1
 80081bc:	619a      	str	r2, [r3, #24]
 80081be:	e7d6      	b.n	800816e <I2C_IsErrorOccurred+0x72>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80081c0:	0595      	lsls	r5, r2, #22
 80081c2:	d4c7      	bmi.n	8008154 <I2C_IsErrorOccurred+0x58>
  if (status != HAL_OK)
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d1ca      	bne.n	800815e <I2C_IsErrorOccurred+0x62>
}
 80081c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081cc:	f7fe fdaa 	bl	8006d24 <HAL_GetTick>
 80081d0:	1b80      	subs	r0, r0, r6
 80081d2:	42b8      	cmp	r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80081d4:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80081d6:	d804      	bhi.n	80081e2 <I2C_IsErrorOccurred+0xe6>
 80081d8:	b11f      	cbz	r7, 80081e2 <I2C_IsErrorOccurred+0xe6>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081da:	699a      	ldr	r2, [r3, #24]
 80081dc:	0692      	lsls	r2, r2, #26
 80081de:	d5a2      	bpl.n	8008126 <I2C_IsErrorOccurred+0x2a>
 80081e0:	e7a6      	b.n	8008130 <I2C_IsErrorOccurred+0x34>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80081e2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80081e4:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80081e8:	6999      	ldr	r1, [r3, #24]
 80081ea:	040d      	lsls	r5, r1, #16
          tmp2 = hi2c->Mode;
 80081ec:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80081ee:	d50d      	bpl.n	800820c <I2C_IsErrorOccurred+0x110>
 80081f0:	0441      	lsls	r1, r0, #17
 80081f2:	d40b      	bmi.n	800820c <I2C_IsErrorOccurred+0x110>
              (tmp1 != I2C_CR2_STOP) && \
 80081f4:	2a20      	cmp	r2, #32
 80081f6:	d009      	beq.n	800820c <I2C_IsErrorOccurred+0x110>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081fe:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8008200:	f7fe fd90 	bl	8006d24 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008204:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8008206:	4606      	mov	r6, r0
 8008208:	e000      	b.n	800820c <I2C_IsErrorOccurred+0x110>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	699d      	ldr	r5, [r3, #24]
 800820e:	f015 0520 	ands.w	r5, r5, #32
 8008212:	d181      	bne.n	8008118 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008214:	f7fe fd86 	bl	8006d24 <HAL_GetTick>
 8008218:	1b80      	subs	r0, r0, r6
 800821a:	2819      	cmp	r0, #25
 800821c:	d9f5      	bls.n	800820a <I2C_IsErrorOccurred+0x10e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800821e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
              __HAL_UNLOCK(hi2c);
 8008220:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
              hi2c->State = HAL_I2C_STATE_READY;
 8008224:	2220      	movs	r2, #32
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008226:	4313      	orrs	r3, r2
 8008228:	6463      	str	r3, [r4, #68]	@ 0x44
              status = HAL_ERROR;
 800822a:	f04f 0801 	mov.w	r8, #1
              hi2c->State = HAL_I2C_STATE_READY;
 800822e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008232:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008234:	f884 5042 	strb.w	r5, [r4, #66]	@ 0x42
              status = HAL_ERROR;
 8008238:	e7e8      	b.n	800820c <I2C_IsErrorOccurred+0x110>
    if (status == HAL_OK)
 800823a:	f1b8 0f00 	cmp.w	r8, #0
 800823e:	f47f af79 	bne.w	8008134 <I2C_IsErrorOccurred+0x38>
 8008242:	e775      	b.n	8008130 <I2C_IsErrorOccurred+0x34>
 8008244:	fe00e800 	.word	0xfe00e800

08008248 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	4604      	mov	r4, r0
 800824c:	460e      	mov	r6, r1
 800824e:	4615      	mov	r5, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008250:	e004      	b.n	800825c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008252:	f7ff ff53 	bl	80080fc <I2C_IsErrorOccurred>
 8008256:	b9e8      	cbnz	r0, 8008294 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 8008258:	1c72      	adds	r2, r6, #1
 800825a:	d108      	bne.n	800826e <I2C_WaitOnTXISFlagUntilTimeout+0x26>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	079b      	lsls	r3, r3, #30
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008262:	462a      	mov	r2, r5
 8008264:	4631      	mov	r1, r6
 8008266:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008268:	d5f3      	bpl.n	8008252 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800826a:	2000      	movs	r0, #0
}
 800826c:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826e:	f7fe fd59 	bl	8006d24 <HAL_GetTick>
 8008272:	1b40      	subs	r0, r0, r5
 8008274:	42b0      	cmp	r0, r6
 8008276:	d801      	bhi.n	800827c <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 8008278:	2e00      	cmp	r6, #0
 800827a:	d1ef      	bne.n	800825c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800827c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800827e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008280:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8008284:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008286:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008288:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800828c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008290:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008294:	2001      	movs	r0, #1
}
 8008296:	bd70      	pop	{r4, r5, r6, pc}

08008298 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	4605      	mov	r5, r0
 800829c:	460c      	mov	r4, r1
 800829e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082a0:	e008      	b.n	80082b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a2:	f7ff ff2b 	bl	80080fc <I2C_IsErrorOccurred>
 80082a6:	b9d0      	cbnz	r0, 80082de <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a8:	f7fe fd3c 	bl	8006d24 <HAL_GetTick>
 80082ac:	1b80      	subs	r0, r0, r6
 80082ae:	42a0      	cmp	r0, r4
 80082b0:	d809      	bhi.n	80082c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80082b2:	b144      	cbz	r4, 80082c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	069b      	lsls	r3, r3, #26
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ba:	4632      	mov	r2, r6
 80082bc:	4621      	mov	r1, r4
 80082be:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082c0:	d5ef      	bpl.n	80082a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 80082c2:	2000      	movs	r0, #0
}
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082c6:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c8:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082ca:	f043 0320 	orr.w	r3, r3, #32
      hi2c->State = HAL_I2C_STATE_READY;
 80082ce:	2120      	movs	r1, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082d0:	646b      	str	r3, [r5, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80082d2:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 80082d6:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082da:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
      return HAL_ERROR;
 80082de:	2001      	movs	r0, #1
}
 80082e0:	bd70      	pop	{r4, r5, r6, pc}
 80082e2:	bf00      	nop

080082e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4604      	mov	r4, r0
 80082e8:	460d      	mov	r5, r1
 80082ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082ec:	e00c      	b.n	8008308 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ee:	f7ff ff05 	bl	80080fc <I2C_IsErrorOccurred>
 80082f2:	b9d8      	cbnz	r0, 800832c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	0691      	lsls	r1, r2, #26
 80082fa:	d419      	bmi.n	8008330 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fc:	f7fe fd12 	bl	8006d24 <HAL_GetTick>
 8008300:	1b80      	subs	r0, r0, r6
 8008302:	42a8      	cmp	r0, r5
 8008304:	d809      	bhi.n	800831a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8008306:	b145      	cbz	r5, 800831a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	075b      	lsls	r3, r3, #29
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800830e:	4632      	mov	r2, r6
 8008310:	4629      	mov	r1, r5
 8008312:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008314:	d5eb      	bpl.n	80082ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 8008316:	2000      	movs	r0, #0
}
 8008318:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800831a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800831c:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800831e:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 8008320:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008322:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8008324:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8008328:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
      return HAL_ERROR;
 800832c:	2001      	movs	r0, #1
}
 800832e:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	0752      	lsls	r2, r2, #29
 8008334:	d502      	bpl.n	800833c <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
 8008336:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8008338:	2a00      	cmp	r2, #0
 800833a:	d1ec      	bne.n	8008316 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008342:	bf1c      	itt	ne
 8008344:	2110      	movne	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008346:	2204      	movne	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008348:	f04f 0020 	mov.w	r0, #32
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800834c:	bf18      	it	ne
 800834e:	61d9      	strne	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008350:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008352:	61d8      	str	r0, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	4905      	ldr	r1, [pc, #20]	@ (800836c <I2C_WaitOnRXNEFlagUntilTimeout+0x88>)
 8008358:	400a      	ands	r2, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800835a:	2100      	movs	r1, #0
        I2C_RESET_CR2(hi2c);
 800835c:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800835e:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8008362:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008366:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
        return HAL_ERROR;
 800836a:	e7df      	b.n	800832c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800836c:	fe00e800 	.word	0xfe00e800

08008370 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008370:	2800      	cmp	r0, #0
 8008372:	d04f      	beq.n	8008414 <HAL_I2C_Init+0xa4>
{
 8008374:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008376:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800837a:	4604      	mov	r4, r0
 800837c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008380:	2b00      	cmp	r3, #0
 8008382:	d042      	beq.n	800840a <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 8008384:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008386:	2224      	movs	r2, #36	@ 0x24
 8008388:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800838c:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800838e:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8008390:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008394:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8008398:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800839a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800839c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800839e:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083a4:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80083a6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80083a8:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083aa:	d02a      	beq.n	8008402 <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083ac:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083b0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083b2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80083b4:	bf04      	itt	eq
 80083b6:	f44f 6200 	moveq.w	r2, #2048	@ 0x800
 80083ba:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083bc:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083be:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083c0:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80083c4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80083c8:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083ca:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083cc:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083ce:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80083d0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083d2:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083da:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083dc:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083de:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80083e0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083e2:	4301      	orrs	r1, r0
 80083e4:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80083e6:	6819      	ldr	r1, [r3, #0]
 80083e8:	f041 0101 	orr.w	r1, r1, #1
 80083ec:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083ee:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80083f0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083f2:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80083f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083f8:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083fa:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  return HAL_OK;
 80083fe:	4610      	mov	r0, r2
}
 8008400:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008402:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008406:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008408:	e7d8      	b.n	80083bc <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800840a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800840e:	f7fc fcd1 	bl	8004db4 <HAL_I2C_MspInit>
 8008412:	e7b7      	b.n	8008384 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8008414:	2001      	movs	r0, #1
}
 8008416:	4770      	bx	lr

08008418 <HAL_I2C_Master_Transmit>:
{
 8008418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800841c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800841e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008422:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008424:	2b20      	cmp	r3, #32
 8008426:	d171      	bne.n	800850c <HAL_I2C_Master_Transmit+0xf4>
    __HAL_LOCK(hi2c);
 8008428:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800842c:	2b01      	cmp	r3, #1
 800842e:	4604      	mov	r4, r0
 8008430:	d06c      	beq.n	800850c <HAL_I2C_Master_Transmit+0xf4>
 8008432:	2301      	movs	r3, #1
 8008434:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8008438:	460f      	mov	r7, r1
 800843a:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 800843c:	f7fe fc72 	bl	8006d24 <HAL_GetTick>
 8008440:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008442:	e004      	b.n	800844e <HAL_I2C_Master_Transmit+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008444:	f7fe fc6e 	bl	8006d24 <HAL_GetTick>
 8008448:	1b80      	subs	r0, r0, r6
 800844a:	2819      	cmp	r0, #25
 800844c:	d861      	bhi.n	8008512 <HAL_I2C_Master_Transmit+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	6998      	ldr	r0, [r3, #24]
 8008452:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 8008456:	d1f5      	bne.n	8008444 <HAL_I2C_Master_Transmit+0x2c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008458:	2221      	movs	r2, #33	@ 0x21
 800845a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800845e:	2210      	movs	r2, #16
 8008460:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008464:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8008466:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800846a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr  = pData;
 800846c:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008470:	b292      	uxth	r2, r2
 8008472:	2aff      	cmp	r2, #255	@ 0xff
    hi2c->XferISR   = NULL;
 8008474:	6360      	str	r0, [r4, #52]	@ 0x34
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008476:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800847a:	d86e      	bhi.n	800855a <HAL_I2C_Master_Transmit+0x142>
      hi2c->XferSize = hi2c->XferCount;
 800847c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800847e:	4848      	ldr	r0, [pc, #288]	@ (80085a0 <HAL_I2C_Master_Transmit+0x188>)
 8008480:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8008482:	b292      	uxth	r2, r2
 8008484:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008486:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008488:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800848c:	4001      	ands	r1, r0
 800848e:	430a      	orrs	r2, r1
 8008490:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8008494:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008498:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 800849a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800849c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800849e:	4632      	mov	r2, r6
 80084a0:	4629      	mov	r1, r5
 80084a2:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80084a4:	b30b      	cbz	r3, 80084ea <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084a6:	f7ff fecf 	bl	8008248 <I2C_WaitOnTXISFlagUntilTimeout>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d13d      	bne.n	800852a <HAL_I2C_Master_Transmit+0x112>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084ae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80084b6:	6293      	str	r3, [r2, #40]	@ 0x28
      hi2c->XferCount--;
 80084b8:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80084bc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80084be:	6260      	str	r0, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80084c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80084c4:	fa1f fc8c 	uxth.w	ip, ip
 80084c8:	f8a4 c02a 	strh.w	ip, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084cc:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084d2:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 80084d4:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d0df      	beq.n	800849a <HAL_I2C_Master_Transmit+0x82>
 80084da:	b35b      	cbz	r3, 8008534 <HAL_I2C_Master_Transmit+0x11c>
    while (hi2c->XferCount > 0U)
 80084dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80084de:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084e0:	4632      	mov	r2, r6
 80084e2:	4629      	mov	r1, r5
 80084e4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1dd      	bne.n	80084a6 <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ea:	f7ff fed5 	bl	8008298 <I2C_WaitOnSTOPFlagUntilTimeout>
 80084ee:	b9e0      	cbnz	r0, 800852a <HAL_I2C_Master_Transmit+0x112>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084f0:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80084f2:	4d2c      	ldr	r5, [pc, #176]	@ (80085a4 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084f4:	2120      	movs	r1, #32
 80084f6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	402a      	ands	r2, r5
 80084fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80084fe:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008502:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008506:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800850a:	e000      	b.n	800850e <HAL_I2C_Master_Transmit+0xf6>
    __HAL_LOCK(hi2c);
 800850c:	2002      	movs	r0, #2
}
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008512:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008514:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008516:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 800851a:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800851c:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800851e:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8008522:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008526:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800852a:	2001      	movs	r0, #1
}
 800852c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8008530:	1c69      	adds	r1, r5, #1
 8008532:	d11e      	bne.n	8008572 <HAL_I2C_Master_Transmit+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008534:	6993      	ldr	r3, [r2, #24]
 8008536:	061b      	lsls	r3, r3, #24
 8008538:	d5fa      	bpl.n	8008530 <HAL_I2C_Master_Transmit+0x118>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800853a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800853c:	b29b      	uxth	r3, r3
 800853e:	2bff      	cmp	r3, #255	@ 0xff
 8008540:	d920      	bls.n	8008584 <HAL_I2C_Master_Transmit+0x16c>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008542:	6853      	ldr	r3, [r2, #4]
 8008544:	4918      	ldr	r1, [pc, #96]	@ (80085a8 <HAL_I2C_Master_Transmit+0x190>)
 8008546:	400b      	ands	r3, r1
 8008548:	433b      	orrs	r3, r7
 800854a:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800854e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008552:	21ff      	movs	r1, #255	@ 0xff
 8008554:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008556:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008558:	e79f      	b.n	800849a <HAL_I2C_Master_Transmit+0x82>
  MODIFY_REG(hi2c->Instance->CR2, \
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4910      	ldr	r1, [pc, #64]	@ (80085a0 <HAL_I2C_Master_Transmit+0x188>)
 800855e:	400a      	ands	r2, r1
 8008560:	433a      	orrs	r2, r7
 8008562:	f042 72ff 	orr.w	r2, r2, #33423360	@ 0x1fe0000
 8008566:	f442 3290 	orr.w	r2, r2, #73728	@ 0x12000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800856a:	21ff      	movs	r1, #255	@ 0xff
 800856c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800856e:	605a      	str	r2, [r3, #4]
}
 8008570:	e793      	b.n	800849a <HAL_I2C_Master_Transmit+0x82>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008572:	f7fe fbd7 	bl	8006d24 <HAL_GetTick>
 8008576:	1b80      	subs	r0, r0, r6
 8008578:	4285      	cmp	r5, r0
 800857a:	d3ca      	bcc.n	8008512 <HAL_I2C_Master_Transmit+0xfa>
 800857c:	2d00      	cmp	r5, #0
 800857e:	d0c8      	beq.n	8008512 <HAL_I2C_Master_Transmit+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008580:	6822      	ldr	r2, [r4, #0]
 8008582:	e7d7      	b.n	8008534 <HAL_I2C_Master_Transmit+0x11c>
          hi2c->XferSize = hi2c->XferCount;
 8008584:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008586:	4808      	ldr	r0, [pc, #32]	@ (80085a8 <HAL_I2C_Master_Transmit+0x190>)
          hi2c->XferSize = hi2c->XferCount;
 8008588:	b29b      	uxth	r3, r3
 800858a:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800858c:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800858e:	6853      	ldr	r3, [r2, #4]
 8008590:	4003      	ands	r3, r0
 8008592:	433b      	orrs	r3, r7
 8008594:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800859c:	6053      	str	r3, [r2, #4]
}
 800859e:	e77c      	b.n	800849a <HAL_I2C_Master_Transmit+0x82>
 80085a0:	fc009800 	.word	0xfc009800
 80085a4:	fe00e800 	.word	0xfe00e800
 80085a8:	fc009c00 	.word	0xfc009c00

080085ac <HAL_I2C_Master_Receive>:
{
 80085ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80085b2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80085b6:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	f040 808d 	bne.w	80086d8 <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
 80085be:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	4604      	mov	r4, r0
 80085c6:	f000 8087 	beq.w	80086d8 <HAL_I2C_Master_Receive+0x12c>
 80085ca:	2301      	movs	r3, #1
 80085cc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80085d0:	460f      	mov	r7, r1
 80085d2:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 80085d4:	f7fe fba6 	bl	8006d24 <HAL_GetTick>
 80085d8:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085da:	e005      	b.n	80085e8 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085dc:	f7fe fba2 	bl	8006d24 <HAL_GetTick>
 80085e0:	1b80      	subs	r0, r0, r6
 80085e2:	2819      	cmp	r0, #25
 80085e4:	f200 8082 	bhi.w	80086ec <HAL_I2C_Master_Receive+0x140>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	6998      	ldr	r0, [r3, #24]
 80085ec:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 80085f0:	d1f4      	bne.n	80085dc <HAL_I2C_Master_Receive+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80085f2:	2222      	movs	r2, #34	@ 0x22
 80085f4:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085f8:	2210      	movs	r2, #16
 80085fa:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085fe:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8008600:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008604:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr  = pData;
 8008606:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800860a:	b292      	uxth	r2, r2
 800860c:	2aff      	cmp	r2, #255	@ 0xff
    hi2c->XferISR   = NULL;
 800860e:	6360      	str	r0, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008610:	f3c7 0709 	ubfx	r7, r7, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008614:	d879      	bhi.n	800870a <HAL_I2C_Master_Receive+0x15e>
      hi2c->XferSize = hi2c->XferCount;
 8008616:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008618:	4849      	ldr	r0, [pc, #292]	@ (8008740 <HAL_I2C_Master_Receive+0x194>)
 800861a:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 800861c:	b292      	uxth	r2, r2
 800861e:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008620:	b2d2      	uxtb	r2, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008622:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008626:	4001      	ands	r1, r0
 8008628:	430a      	orrs	r2, r1
 800862a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800862e:	f442 5210 	orr.w	r2, r2, #9216	@ 0x2400
 8008632:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 8008634:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008636:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008638:	4632      	mov	r2, r6
 800863a:	4629      	mov	r1, r5
 800863c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800863e:	2b00      	cmp	r3, #0
 8008640:	d039      	beq.n	80086b6 <HAL_I2C_Master_Receive+0x10a>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008642:	f7ff fe4f 	bl	80082e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008646:	2800      	cmp	r0, #0
 8008648:	d15c      	bne.n	8008704 <HAL_I2C_Master_Receive+0x158>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800864e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008650:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8008652:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008656:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008658:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800865a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800865e:	fa1f fc8c 	uxth.w	ip, ip
 8008662:	f8a4 c02a 	strh.w	ip, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008666:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008668:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800866a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800866c:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800866e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008670:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008672:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008674:	2a00      	cmp	r2, #0
 8008676:	d0dd      	beq.n	8008634 <HAL_I2C_Master_Receive+0x88>
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1db      	bne.n	8008634 <HAL_I2C_Master_Receive+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	e001      	b.n	8008684 <HAL_I2C_Master_Receive+0xd8>
    if (Timeout != HAL_MAX_DELAY)
 8008680:	1c69      	adds	r1, r5, #1
 8008682:	d12c      	bne.n	80086de <HAL_I2C_Master_Receive+0x132>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008684:	6993      	ldr	r3, [r2, #24]
 8008686:	061b      	lsls	r3, r3, #24
 8008688:	d5fa      	bpl.n	8008680 <HAL_I2C_Master_Receive+0xd4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800868a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800868c:	b29b      	uxth	r3, r3
 800868e:	2bff      	cmp	r3, #255	@ 0xff
 8008690:	d947      	bls.n	8008722 <HAL_I2C_Master_Receive+0x176>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008692:	6853      	ldr	r3, [r2, #4]
 8008694:	492b      	ldr	r1, [pc, #172]	@ (8008744 <HAL_I2C_Master_Receive+0x198>)
 8008696:	400b      	ands	r3, r1
 8008698:	433b      	orrs	r3, r7
 800869a:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 800869e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086a2:	21ff      	movs	r1, #255	@ 0xff
 80086a4:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80086a6:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 80086a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80086aa:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086ac:	4632      	mov	r2, r6
 80086ae:	4629      	mov	r1, r5
 80086b0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1c5      	bne.n	8008642 <HAL_I2C_Master_Receive+0x96>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086b6:	f7ff fdef 	bl	8008298 <I2C_WaitOnSTOPFlagUntilTimeout>
 80086ba:	bb18      	cbnz	r0, 8008704 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086bc:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80086be:	4d22      	ldr	r5, [pc, #136]	@ (8008748 <HAL_I2C_Master_Receive+0x19c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086c0:	2120      	movs	r1, #32
 80086c2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	402a      	ands	r2, r5
 80086c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80086ca:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80086ce:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086d2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80086d6:	e000      	b.n	80086da <HAL_I2C_Master_Receive+0x12e>
    __HAL_LOCK(hi2c);
 80086d8:	2002      	movs	r0, #2
}
 80086da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086de:	f7fe fb21 	bl	8006d24 <HAL_GetTick>
 80086e2:	1b80      	subs	r0, r0, r6
 80086e4:	4285      	cmp	r5, r0
 80086e6:	d301      	bcc.n	80086ec <HAL_I2C_Master_Receive+0x140>
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	d1c7      	bne.n	800867c <HAL_I2C_Master_Receive+0xd0>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086ee:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086f0:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80086f4:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086f6:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80086f8:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80086fc:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008700:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008704:	2001      	movs	r0, #1
}
 8008706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	490c      	ldr	r1, [pc, #48]	@ (8008740 <HAL_I2C_Master_Receive+0x194>)
 800870e:	400a      	ands	r2, r1
 8008710:	433a      	orrs	r2, r7
 8008712:	f042 72ff 	orr.w	r2, r2, #33423360	@ 0x1fe0000
 8008716:	f442 3292 	orr.w	r2, r2, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800871a:	21ff      	movs	r1, #255	@ 0xff
 800871c:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800871e:	605a      	str	r2, [r3, #4]
}
 8008720:	e788      	b.n	8008634 <HAL_I2C_Master_Receive+0x88>
          hi2c->XferSize = hi2c->XferCount;
 8008722:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008724:	4807      	ldr	r0, [pc, #28]	@ (8008744 <HAL_I2C_Master_Receive+0x198>)
 8008726:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008728:	b29b      	uxth	r3, r3
 800872a:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800872c:	b2db      	uxtb	r3, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800872e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008732:	4001      	ands	r1, r0
 8008734:	430b      	orrs	r3, r1
 8008736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800873a:	6053      	str	r3, [r2, #4]
}
 800873c:	e77a      	b.n	8008634 <HAL_I2C_Master_Receive+0x88>
 800873e:	bf00      	nop
 8008740:	fc009800 	.word	0xfc009800
 8008744:	fc009c00 	.word	0xfc009c00
 8008748:	fe00e800 	.word	0xfe00e800

0800874c <HAL_I2C_Mem_Write>:
{
 800874c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008752:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008756:	f8bd b02c 	ldrh.w	fp, [sp, #44]	@ 0x2c
 800875a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 800875c:	2b20      	cmp	r3, #32
 800875e:	f040 80a5 	bne.w	80088ac <HAL_I2C_Mem_Write+0x160>
    if ((pData == NULL) || (Size == 0U))
 8008762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008764:	4604      	mov	r4, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 809a 	beq.w	80088a0 <HAL_I2C_Mem_Write+0x154>
 800876c:	f1bb 0f00 	cmp.w	fp, #0
 8008770:	f000 8096 	beq.w	80088a0 <HAL_I2C_Mem_Write+0x154>
    __HAL_LOCK(hi2c);
 8008774:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008778:	2b01      	cmp	r3, #1
 800877a:	f000 8097 	beq.w	80088ac <HAL_I2C_Mem_Write+0x160>
 800877e:	2301      	movs	r3, #1
 8008780:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8008784:	4688      	mov	r8, r1
 8008786:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 8008788:	f7fe facc 	bl	8006d24 <HAL_GetTick>
 800878c:	4607      	mov	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800878e:	e005      	b.n	800879c <HAL_I2C_Mem_Write+0x50>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008790:	f7fe fac8 	bl	8006d24 <HAL_GetTick>
 8008794:	1bc0      	subs	r0, r0, r7
 8008796:	2819      	cmp	r0, #25
 8008798:	f200 808b 	bhi.w	80088b2 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	699d      	ldr	r5, [r3, #24]
 80087a0:	f415 4500 	ands.w	r5, r5, #32768	@ 0x8000
 80087a4:	d1f4      	bne.n	8008790 <HAL_I2C_Mem_Write+0x44>
    hi2c->pBuffPtr  = pData;
 80087a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087a8:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087aa:	2221      	movs	r2, #33	@ 0x21
 80087ac:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087b0:	2240      	movs	r2, #64	@ 0x40
 80087b2:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087b6:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80087b8:	f8a4 b02a 	strh.w	fp, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	4973      	ldr	r1, [pc, #460]	@ (800898c <HAL_I2C_Mem_Write+0x240>)
    hi2c->XferISR   = NULL;
 80087c0:	6365      	str	r5, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 80087c2:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80087c4:	fa5f f18a 	uxtb.w	r1, sl
  MODIFY_REG(hi2c->Instance->CR2, \
 80087c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087cc:	f3c8 0809 	ubfx	r8, r8, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80087d0:	ea42 0208 	orr.w	r2, r2, r8
 80087d4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80087d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087dc:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087de:	4631      	mov	r1, r6
 80087e0:	463a      	mov	r2, r7
 80087e2:	4620      	mov	r0, r4
 80087e4:	f7ff fd30 	bl	8008248 <I2C_WaitOnTXISFlagUntilTimeout>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	f040 80a6 	bne.w	800893a <HAL_I2C_Mem_Write+0x1ee>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087ee:	f1ba 0f01 	cmp.w	sl, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087f2:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087f4:	d16a      	bne.n	80088cc <HAL_I2C_Mem_Write+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087f6:	fa5f f389 	uxtb.w	r3, r9
 80087fa:	6293      	str	r3, [r2, #40]	@ 0x28
 80087fc:	e002      	b.n	8008804 <HAL_I2C_Mem_Write+0xb8>
    if (Timeout != HAL_MAX_DELAY)
 80087fe:	1c75      	adds	r5, r6, #1
 8008800:	f040 808a 	bne.w	8008918 <HAL_I2C_Mem_Write+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008804:	6993      	ldr	r3, [r2, #24]
 8008806:	0618      	lsls	r0, r3, #24
 8008808:	d5f9      	bpl.n	80087fe <HAL_I2C_Mem_Write+0xb2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800880a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800880c:	b29b      	uxth	r3, r3
 800880e:	2bff      	cmp	r3, #255	@ 0xff
 8008810:	f240 8097 	bls.w	8008942 <HAL_I2C_Mem_Write+0x1f6>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008814:	6853      	ldr	r3, [r2, #4]
 8008816:	495e      	ldr	r1, [pc, #376]	@ (8008990 <HAL_I2C_Mem_Write+0x244>)
 8008818:	400b      	ands	r3, r1
 800881a:	ea43 0308 	orr.w	r3, r3, r8
 800881e:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008826:	21ff      	movs	r1, #255	@ 0xff
 8008828:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800882a:	6053      	str	r3, [r2, #4]
}
 800882c:	e004      	b.n	8008838 <HAL_I2C_Mem_Write+0xec>
    } while (hi2c->XferCount > 0U);
 800882e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008830:	b29b      	uxth	r3, r3
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8094 	beq.w	8008960 <HAL_I2C_Mem_Write+0x214>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008838:	463a      	mov	r2, r7
 800883a:	4631      	mov	r1, r6
 800883c:	4620      	mov	r0, r4
 800883e:	f7ff fd03 	bl	8008248 <I2C_WaitOnTXISFlagUntilTimeout>
 8008842:	2800      	cmp	r0, #0
 8008844:	d12f      	bne.n	80088a6 <HAL_I2C_Mem_Write+0x15a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008846:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008848:	6822      	ldr	r2, [r4, #0]
 800884a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800884e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008850:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008852:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008854:	3b01      	subs	r3, #1
 8008856:	b29b      	uxth	r3, r3
 8008858:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800885a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800885c:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800885e:	3b01      	subs	r3, #1
 8008860:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008862:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8008864:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008866:	2900      	cmp	r1, #0
 8008868:	d0e1      	beq.n	800882e <HAL_I2C_Mem_Write+0xe2>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1df      	bne.n	800882e <HAL_I2C_Mem_Write+0xe2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800886e:	6993      	ldr	r3, [r2, #24]
 8008870:	061b      	lsls	r3, r3, #24
 8008872:	d404      	bmi.n	800887e <HAL_I2C_Mem_Write+0x132>
    if (Timeout != HAL_MAX_DELAY)
 8008874:	1c71      	adds	r1, r6, #1
 8008876:	d137      	bne.n	80088e8 <HAL_I2C_Mem_Write+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008878:	6993      	ldr	r3, [r2, #24]
 800887a:	061b      	lsls	r3, r3, #24
 800887c:	d5fa      	bpl.n	8008874 <HAL_I2C_Mem_Write+0x128>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800887e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008880:	b29b      	uxth	r3, r3
 8008882:	2bff      	cmp	r3, #255	@ 0xff
 8008884:	d939      	bls.n	80088fa <HAL_I2C_Mem_Write+0x1ae>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008886:	6853      	ldr	r3, [r2, #4]
 8008888:	4941      	ldr	r1, [pc, #260]	@ (8008990 <HAL_I2C_Mem_Write+0x244>)
 800888a:	400b      	ands	r3, r1
 800888c:	ea43 0308 	orr.w	r3, r3, r8
 8008890:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008898:	21ff      	movs	r1, #255	@ 0xff
 800889a:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800889c:	6053      	str	r3, [r2, #4]
}
 800889e:	e7c6      	b.n	800882e <HAL_I2C_Mem_Write+0xe2>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088a4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80088a6:	2001      	movs	r0, #1
}
 80088a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80088ac:	2002      	movs	r0, #2
}
 80088ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088b6:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 80088ba:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088bc:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80088be:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80088c2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c6:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 80088ca:	e7ec      	b.n	80088a6 <HAL_I2C_Mem_Write+0x15a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80088cc:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80088d0:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088d2:	4631      	mov	r1, r6
 80088d4:	463a      	mov	r2, r7
 80088d6:	4620      	mov	r0, r4
 80088d8:	f7ff fcb6 	bl	8008248 <I2C_WaitOnTXISFlagUntilTimeout>
 80088dc:	bb68      	cbnz	r0, 800893a <HAL_I2C_Mem_Write+0x1ee>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	fa5f f389 	uxtb.w	r3, r9
 80088e4:	6293      	str	r3, [r2, #40]	@ 0x28
 80088e6:	e78d      	b.n	8008804 <HAL_I2C_Mem_Write+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088e8:	f7fe fa1c 	bl	8006d24 <HAL_GetTick>
 80088ec:	1bc0      	subs	r0, r0, r7
 80088ee:	4286      	cmp	r6, r0
 80088f0:	d3df      	bcc.n	80088b2 <HAL_I2C_Mem_Write+0x166>
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	d0dd      	beq.n	80088b2 <HAL_I2C_Mem_Write+0x166>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088f6:	6822      	ldr	r2, [r4, #0]
 80088f8:	e7be      	b.n	8008878 <HAL_I2C_Mem_Write+0x12c>
          hi2c->XferSize = hi2c->XferCount;
 80088fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80088fc:	4824      	ldr	r0, [pc, #144]	@ (8008990 <HAL_I2C_Mem_Write+0x244>)
          hi2c->XferSize = hi2c->XferCount;
 80088fe:	b29b      	uxth	r3, r3
 8008900:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008902:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008904:	6853      	ldr	r3, [r2, #4]
 8008906:	4003      	ands	r3, r0
 8008908:	ea43 0308 	orr.w	r3, r3, r8
 800890c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008910:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008914:	6053      	str	r3, [r2, #4]
}
 8008916:	e78a      	b.n	800882e <HAL_I2C_Mem_Write+0xe2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008918:	f7fe fa04 	bl	8006d24 <HAL_GetTick>
 800891c:	1bc0      	subs	r0, r0, r7
 800891e:	4286      	cmp	r6, r0
 8008920:	d302      	bcc.n	8008928 <HAL_I2C_Mem_Write+0x1dc>
 8008922:	b10e      	cbz	r6, 8008928 <HAL_I2C_Mem_Write+0x1dc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	e76d      	b.n	8008804 <HAL_I2C_Mem_Write+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008928:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800892a:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800892c:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800892e:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008930:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008932:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008936:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800893a:	2300      	movs	r3, #0
 800893c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008940:	e7b1      	b.n	80088a6 <HAL_I2C_Mem_Write+0x15a>
      hi2c->XferSize = hi2c->XferCount;
 8008942:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008944:	4812      	ldr	r0, [pc, #72]	@ (8008990 <HAL_I2C_Mem_Write+0x244>)
      hi2c->XferSize = hi2c->XferCount;
 8008946:	b29b      	uxth	r3, r3
 8008948:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800894a:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800894c:	6853      	ldr	r3, [r2, #4]
 800894e:	4003      	ands	r3, r0
 8008950:	ea43 0308 	orr.w	r3, r3, r8
 8008954:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008958:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800895c:	6053      	str	r3, [r2, #4]
}
 800895e:	e76b      	b.n	8008838 <HAL_I2C_Mem_Write+0xec>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008960:	463a      	mov	r2, r7
 8008962:	4631      	mov	r1, r6
 8008964:	4620      	mov	r0, r4
 8008966:	f7ff fc97 	bl	8008298 <I2C_WaitOnSTOPFlagUntilTimeout>
 800896a:	2800      	cmp	r0, #0
 800896c:	d19b      	bne.n	80088a6 <HAL_I2C_Mem_Write+0x15a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800896e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8008970:	4d08      	ldr	r5, [pc, #32]	@ (8008994 <HAL_I2C_Mem_Write+0x248>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008972:	2120      	movs	r1, #32
 8008974:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008976:	685a      	ldr	r2, [r3, #4]
 8008978:	402a      	ands	r2, r5
 800897a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800897c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008980:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008984:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008988:	e78e      	b.n	80088a8 <HAL_I2C_Mem_Write+0x15c>
 800898a:	bf00      	nop
 800898c:	fc009800 	.word	0xfc009800
 8008990:	fc009c00 	.word	0xfc009c00
 8008994:	fe00e800 	.word	0xfe00e800

08008998 <HAL_I2C_Mem_Read>:
{
 8008998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800899c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800899e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80089a2:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
 80089a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	f040 8081 	bne.w	8008ab0 <HAL_I2C_Mem_Read+0x118>
    if ((pData == NULL) || (Size == 0U))
 80089ae:	9b08      	ldr	r3, [sp, #32]
 80089b0:	4605      	mov	r5, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d076      	beq.n	8008aa4 <HAL_I2C_Mem_Read+0x10c>
 80089b6:	f1ba 0f00 	cmp.w	sl, #0
 80089ba:	d073      	beq.n	8008aa4 <HAL_I2C_Mem_Read+0x10c>
    __HAL_LOCK(hi2c);
 80089bc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d075      	beq.n	8008ab0 <HAL_I2C_Mem_Read+0x118>
 80089c4:	2301      	movs	r3, #1
 80089c6:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80089ca:	460f      	mov	r7, r1
 80089cc:	4691      	mov	r9, r2
    tickstart = HAL_GetTick();
 80089ce:	f7fe f9a9 	bl	8006d24 <HAL_GetTick>
 80089d2:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089d4:	e004      	b.n	80089e0 <HAL_I2C_Mem_Read+0x48>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d6:	f7fe f9a5 	bl	8006d24 <HAL_GetTick>
 80089da:	1b80      	subs	r0, r0, r6
 80089dc:	2819      	cmp	r0, #25
 80089de:	d871      	bhi.n	8008ac4 <HAL_I2C_Mem_Read+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	6998      	ldr	r0, [r3, #24]
 80089e4:	f410 4000 	ands.w	r0, r0, #32768	@ 0x8000
 80089e8:	d1f5      	bne.n	80089d6 <HAL_I2C_Mem_Read+0x3e>
    hi2c->pBuffPtr  = pData;
 80089ea:	9a08      	ldr	r2, [sp, #32]
 80089ec:	626a      	str	r2, [r5, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089ee:	2222      	movs	r2, #34	@ 0x22
 80089f0:	f885 2041 	strb.w	r2, [r5, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089f4:	2240      	movs	r2, #64	@ 0x40
 80089f6:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089fa:	6468      	str	r0, [r5, #68]	@ 0x44
    hi2c->XferCount = Size;
 80089fc:	f8a5 a02a 	strh.w	sl, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	4971      	ldr	r1, [pc, #452]	@ (8008bc8 <HAL_I2C_Mem_Read+0x230>)
    hi2c->XferISR   = NULL;
 8008a04:	6368      	str	r0, [r5, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a06:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a08:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a10:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a14:	433a      	orrs	r2, r7
 8008a16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a1a:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4632      	mov	r2, r6
 8008a20:	4628      	mov	r0, r5
 8008a22:	f7ff fc11 	bl	8008248 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f040 80a4 	bne.w	8008b74 <HAL_I2C_Mem_Read+0x1dc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a2c:	f1b8 0f01 	cmp.w	r8, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a30:	6829      	ldr	r1, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a32:	d172      	bne.n	8008b1a <HAL_I2C_Mem_Read+0x182>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a34:	fa5f f389 	uxtb.w	r3, r9
 8008a38:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a3a:	e002      	b.n	8008a42 <HAL_I2C_Mem_Read+0xaa>
    if (Timeout != HAL_MAX_DELAY)
 8008a3c:	1c60      	adds	r0, r4, #1
 8008a3e:	f040 8088 	bne.w	8008b52 <HAL_I2C_Mem_Read+0x1ba>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a42:	698b      	ldr	r3, [r1, #24]
 8008a44:	065a      	lsls	r2, r3, #25
 8008a46:	d5f9      	bpl.n	8008a3c <HAL_I2C_Mem_Read+0xa4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a48:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2bff      	cmp	r3, #255	@ 0xff
 8008a4e:	f240 8095 	bls.w	8008b7c <HAL_I2C_Mem_Read+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a52:	684b      	ldr	r3, [r1, #4]
 8008a54:	4a5c      	ldr	r2, [pc, #368]	@ (8008bc8 <HAL_I2C_Mem_Read+0x230>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	433b      	orrs	r3, r7
 8008a5a:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008a5e:	f443 3392 	orr.w	r3, r3, #74752	@ 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a62:	22ff      	movs	r2, #255	@ 0xff
 8008a64:	852a      	strh	r2, [r5, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a66:	604b      	str	r3, [r1, #4]
}
 8008a68:	e001      	b.n	8008a6e <HAL_I2C_Mem_Read+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8008a6a:	1c63      	adds	r3, r4, #1
 8008a6c:	d123      	bne.n	8008ab6 <HAL_I2C_Mem_Read+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a6e:	698b      	ldr	r3, [r1, #24]
 8008a70:	0758      	lsls	r0, r3, #29
 8008a72:	d5fa      	bpl.n	8008a6a <HAL_I2C_Mem_Read+0xd2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a74:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8008a76:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8008a78:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8008a7a:	8d6a      	ldrh	r2, [r5, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a7c:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008a7e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
      hi2c->XferCount--;
 8008a80:	3a01      	subs	r2, #1
 8008a82:	b292      	uxth	r2, r2
 8008a84:	856a      	strh	r2, [r5, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a86:	8d6a      	ldrh	r2, [r5, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a88:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8008a8a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8008a8c:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a8e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008a90:	6269      	str	r1, [r5, #36]	@ 0x24
      hi2c->XferSize--;
 8008a92:	852b      	strh	r3, [r5, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a94:	b102      	cbz	r2, 8008a98 <HAL_I2C_Mem_Read+0x100>
 8008a96:	b34b      	cbz	r3, 8008aec <HAL_I2C_Mem_Read+0x154>
    } while (hi2c->XferCount > 0U);
 8008a98:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d07d      	beq.n	8008b9c <HAL_I2C_Mem_Read+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aa0:	6829      	ldr	r1, [r5, #0]
 8008aa2:	e7e4      	b.n	8008a6e <HAL_I2C_Mem_Read+0xd6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008aa8:	646b      	str	r3, [r5, #68]	@ 0x44
      return  HAL_ERROR;
 8008aaa:	2001      	movs	r0, #1
}
 8008aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8008ab0:	2002      	movs	r0, #2
}
 8008ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab6:	f7fe f935 	bl	8006d24 <HAL_GetTick>
 8008aba:	1b80      	subs	r0, r0, r6
 8008abc:	4284      	cmp	r4, r0
 8008abe:	d301      	bcc.n	8008ac4 <HAL_I2C_Mem_Read+0x12c>
 8008ac0:	2c00      	cmp	r4, #0
 8008ac2:	d1ed      	bne.n	8008aa0 <HAL_I2C_Mem_Read+0x108>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ac4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ac6:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ac8:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State = HAL_I2C_STATE_READY;
 8008acc:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ace:	646b      	str	r3, [r5, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008ad0:	f885 2040 	strb.w	r2, [r5, #64]	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8008ad4:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ad8:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
        return HAL_ERROR;
 8008adc:	e7e5      	b.n	8008aaa <HAL_I2C_Mem_Read+0x112>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ade:	f7fe f921 	bl	8006d24 <HAL_GetTick>
 8008ae2:	1b83      	subs	r3, r0, r6
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	d3ed      	bcc.n	8008ac4 <HAL_I2C_Mem_Read+0x12c>
 8008ae8:	2c00      	cmp	r4, #0
 8008aea:	d0eb      	beq.n	8008ac4 <HAL_I2C_Mem_Read+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aec:	682a      	ldr	r2, [r5, #0]
 8008aee:	e001      	b.n	8008af4 <HAL_I2C_Mem_Read+0x15c>
    if (Timeout != HAL_MAX_DELAY)
 8008af0:	1c61      	adds	r1, r4, #1
 8008af2:	d1f4      	bne.n	8008ade <HAL_I2C_Mem_Read+0x146>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008af4:	6993      	ldr	r3, [r2, #24]
 8008af6:	061b      	lsls	r3, r3, #24
 8008af8:	d5fa      	bpl.n	8008af0 <HAL_I2C_Mem_Read+0x158>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008afa:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	2bff      	cmp	r3, #255	@ 0xff
 8008b00:	d919      	bls.n	8008b36 <HAL_I2C_Mem_Read+0x19e>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b02:	6853      	ldr	r3, [r2, #4]
 8008b04:	4931      	ldr	r1, [pc, #196]	@ (8008bcc <HAL_I2C_Mem_Read+0x234>)
 8008b06:	400b      	ands	r3, r1
 8008b08:	433b      	orrs	r3, r7
 8008b0a:	f043 73ff 	orr.w	r3, r3, #33423360	@ 0x1fe0000
 8008b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b12:	21ff      	movs	r1, #255	@ 0xff
 8008b14:	8529      	strh	r1, [r5, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b16:	6053      	str	r3, [r2, #4]
}
 8008b18:	e7be      	b.n	8008a98 <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b1a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8008b1e:	628b      	str	r3, [r1, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b20:	4632      	mov	r2, r6
 8008b22:	4621      	mov	r1, r4
 8008b24:	4628      	mov	r0, r5
 8008b26:	f7ff fb8f 	bl	8008248 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b2a:	bb18      	cbnz	r0, 8008b74 <HAL_I2C_Mem_Read+0x1dc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b2c:	6829      	ldr	r1, [r5, #0]
 8008b2e:	fa5f f389 	uxtb.w	r3, r9
 8008b32:	628b      	str	r3, [r1, #40]	@ 0x28
 8008b34:	e785      	b.n	8008a42 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8008b36:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b38:	4824      	ldr	r0, [pc, #144]	@ (8008bcc <HAL_I2C_Mem_Read+0x234>)
 8008b3a:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	852b      	strh	r3, [r5, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b40:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b42:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8008b46:	4001      	ands	r1, r0
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008b4e:	6053      	str	r3, [r2, #4]
}
 8008b50:	e7a2      	b.n	8008a98 <HAL_I2C_Mem_Read+0x100>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b52:	f7fe f8e7 	bl	8006d24 <HAL_GetTick>
 8008b56:	1b83      	subs	r3, r0, r6
 8008b58:	429c      	cmp	r4, r3
 8008b5a:	d302      	bcc.n	8008b62 <HAL_I2C_Mem_Read+0x1ca>
 8008b5c:	b10c      	cbz	r4, 8008b62 <HAL_I2C_Mem_Read+0x1ca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b5e:	6829      	ldr	r1, [r5, #0]
 8008b60:	e76f      	b.n	8008a42 <HAL_I2C_Mem_Read+0xaa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b62:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b64:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b66:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b68:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b6a:	646b      	str	r3, [r5, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b6c:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b70:	f885 2042 	strb.w	r2, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008b74:	2300      	movs	r3, #0
 8008b76:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 8008b7a:	e796      	b.n	8008aaa <HAL_I2C_Mem_Read+0x112>
      hi2c->XferSize = hi2c->XferCount;
 8008b7c:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b7e:	4812      	ldr	r0, [pc, #72]	@ (8008bc8 <HAL_I2C_Mem_Read+0x230>)
      hi2c->XferSize = hi2c->XferCount;
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	852b      	strh	r3, [r5, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b84:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b86:	684b      	ldr	r3, [r1, #4]
 8008b88:	4003      	ands	r3, r0
 8008b8a:	433b      	orrs	r3, r7
 8008b8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b90:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008b94:	f443 5310 	orr.w	r3, r3, #9216	@ 0x2400
 8008b98:	604b      	str	r3, [r1, #4]
}
 8008b9a:	e768      	b.n	8008a6e <HAL_I2C_Mem_Read+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	4621      	mov	r1, r4
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	f7ff fb79 	bl	8008298 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f47f af7f 	bne.w	8008aaa <HAL_I2C_Mem_Read+0x112>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bac:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8008bae:	4c08      	ldr	r4, [pc, #32]	@ (8008bd0 <HAL_I2C_Mem_Read+0x238>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bb0:	2120      	movs	r1, #32
 8008bb2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	4022      	ands	r2, r4
 8008bb8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008bba:	f885 1041 	strb.w	r1, [r5, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008bbe:	f885 0040 	strb.w	r0, [r5, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008bc2:	f885 0042 	strb.w	r0, [r5, #66]	@ 0x42
    return HAL_OK;
 8008bc6:	e771      	b.n	8008aac <HAL_I2C_Mem_Read+0x114>
 8008bc8:	fc009800 	.word	0xfc009800
 8008bcc:	fc009c00 	.word	0xfc009c00
 8008bd0:	fe00e800 	.word	0xfe00e800

08008bd4 <HAL_I2C_IsDeviceReady>:
{
 8008bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd8:	b082      	sub	sp, #8
 8008bda:	4604      	mov	r4, r0
  __IO uint32_t I2C_Trials = 0UL;
 8008bdc:	2000      	movs	r0, #0
 8008bde:	9001      	str	r0, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008be0:	f894 0041 	ldrb.w	r0, [r4, #65]	@ 0x41
 8008be4:	2820      	cmp	r0, #32
 8008be6:	d159      	bne.n	8008c9c <HAL_I2C_IsDeviceReady+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008be8:	4617      	mov	r7, r2
 8008bea:	6822      	ldr	r2, [r4, #0]
 8008bec:	461e      	mov	r6, r3
 8008bee:	6993      	ldr	r3, [r2, #24]
 8008bf0:	f413 4300 	ands.w	r3, r3, #32768	@ 0x8000
 8008bf4:	d152      	bne.n	8008c9c <HAL_I2C_IsDeviceReady+0xc8>
    __HAL_LOCK(hi2c);
 8008bf6:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 8008bfa:	2801      	cmp	r0, #1
 8008bfc:	d04e      	beq.n	8008c9c <HAL_I2C_IsDeviceReady+0xc8>
 8008bfe:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8008c02:	2101      	movs	r1, #1
 8008c04:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c08:	2124      	movs	r1, #36	@ 0x24
 8008c0a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008c0e:	f44a 5920 	orr.w	r9, sl, #10240	@ 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c12:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c14:	f04f 0810 	mov.w	r8, #16
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008c18:	68e3      	ldr	r3, [r4, #12]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	bf06      	itte	eq
 8008c1e:	f04a 7300 	orreq.w	r3, sl, #33554432	@ 0x2000000
 8008c22:	f443 5300 	orreq.w	r3, r3, #8192	@ 0x2000
 8008c26:	464b      	movne	r3, r9
 8008c28:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8008c2a:	f7fe f87b 	bl	8006d24 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c2e:	6821      	ldr	r1, [r4, #0]
      tickstart = HAL_GetTick();
 8008c30:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c32:	698b      	ldr	r3, [r1, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c34:	6988      	ldr	r0, [r1, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c36:	f003 0320 	and.w	r3, r3, #32
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c3a:	f000 0010 	and.w	r0, r0, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008c3e:	4303      	orrs	r3, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c40:	460a      	mov	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008c42:	d113      	bne.n	8008c6c <HAL_I2C_IsDeviceReady+0x98>
        if (Timeout != HAL_MAX_DELAY)
 8008c44:	1c72      	adds	r2, r6, #1
 8008c46:	d007      	beq.n	8008c58 <HAL_I2C_IsDeviceReady+0x84>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c48:	f7fe f86c 	bl	8006d24 <HAL_GetTick>
 8008c4c:	1b40      	subs	r0, r0, r5
 8008c4e:	42b0      	cmp	r0, r6
 8008c50:	d83e      	bhi.n	8008cd0 <HAL_I2C_IsDeviceReady+0xfc>
 8008c52:	2e00      	cmp	r6, #0
 8008c54:	d03c      	beq.n	8008cd0 <HAL_I2C_IsDeviceReady+0xfc>
 8008c56:	6821      	ldr	r1, [r4, #0]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c58:	698a      	ldr	r2, [r1, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c5a:	698b      	ldr	r3, [r1, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c5c:	f002 0c20 	and.w	ip, r2, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008c60:	f003 0310 	and.w	r3, r3, #16
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008c64:	ea5c 0c03 	orrs.w	ip, ip, r3
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c68:	460a      	mov	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008c6a:	d0eb      	beq.n	8008c44 <HAL_I2C_IsDeviceReady+0x70>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008c6c:	698b      	ldr	r3, [r1, #24]
 8008c6e:	06db      	lsls	r3, r3, #27
 8008c70:	d402      	bmi.n	8008c78 <HAL_I2C_IsDeviceReady+0xa4>
 8008c72:	e019      	b.n	8008ca8 <HAL_I2C_IsDeviceReady+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 8008c74:	1c73      	adds	r3, r6, #1
 8008c76:	d123      	bne.n	8008cc0 <HAL_I2C_IsDeviceReady+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c78:	698b      	ldr	r3, [r1, #24]
 8008c7a:	0698      	lsls	r0, r3, #26
 8008c7c:	d5fa      	bpl.n	8008c74 <HAL_I2C_IsDeviceReady+0xa0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c7e:	2320      	movs	r3, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c80:	f8c1 801c 	str.w	r8, [r1, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c84:	61cb      	str	r3, [r1, #28]
      if (I2C_Trials == Trials)
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	42bb      	cmp	r3, r7
 8008c8a:	d02d      	beq.n	8008ce8 <HAL_I2C_IsDeviceReady+0x114>
      I2C_Trials++;
 8008c8c:	9b01      	ldr	r3, [sp, #4]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	9301      	str	r3, [sp, #4]
    } while (I2C_Trials < Trials);
 8008c92:	9b01      	ldr	r3, [sp, #4]
 8008c94:	42bb      	cmp	r3, r7
 8008c96:	d21b      	bcs.n	8008cd0 <HAL_I2C_IsDeviceReady+0xfc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008c98:	460a      	mov	r2, r1
 8008c9a:	e7bd      	b.n	8008c18 <HAL_I2C_IsDeviceReady+0x44>
      return HAL_BUSY;
 8008c9c:	2002      	movs	r0, #2
}
 8008c9e:	b002      	add	sp, #8
 8008ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (Timeout != HAL_MAX_DELAY)
 8008ca4:	1c70      	adds	r0, r6, #1
 8008ca6:	d13e      	bne.n	8008d26 <HAL_I2C_IsDeviceReady+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ca8:	6993      	ldr	r3, [r2, #24]
 8008caa:	0699      	lsls	r1, r3, #26
 8008cac:	d5fa      	bpl.n	8008ca4 <HAL_I2C_IsDeviceReady+0xd0>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cae:	2120      	movs	r1, #32
        __HAL_UNLOCK(hi2c);
 8008cb0:	2300      	movs	r3, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cb2:	61d1      	str	r1, [r2, #28]
        return HAL_OK;
 8008cb4:	4618      	mov	r0, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8008cb6:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8008cba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_OK;
 8008cbe:	e7ee      	b.n	8008c9e <HAL_I2C_IsDeviceReady+0xca>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc0:	f7fe f830 	bl	8006d24 <HAL_GetTick>
 8008cc4:	1b40      	subs	r0, r0, r5
 8008cc6:	4286      	cmp	r6, r0
 8008cc8:	d323      	bcc.n	8008d12 <HAL_I2C_IsDeviceReady+0x13e>
 8008cca:	b316      	cbz	r6, 8008d12 <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ccc:	6821      	ldr	r1, [r4, #0]
 8008cce:	e7d3      	b.n	8008c78 <HAL_I2C_IsDeviceReady+0xa4>
    hi2c->State = HAL_I2C_STATE_READY;
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cd6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008cd8:	f043 0320 	orr.w	r3, r3, #32
 8008cdc:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            return HAL_ERROR;
 8008ce4:	2001      	movs	r0, #1
 8008ce6:	e7da      	b.n	8008c9e <HAL_I2C_IsDeviceReady+0xca>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008ce8:	684b      	ldr	r3, [r1, #4]
 8008cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008cee:	604b      	str	r3, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cf0:	e001      	b.n	8008cf6 <HAL_I2C_IsDeviceReady+0x122>
    if (Timeout != HAL_MAX_DELAY)
 8008cf2:	1c72      	adds	r2, r6, #1
 8008cf4:	d105      	bne.n	8008d02 <HAL_I2C_IsDeviceReady+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cf6:	698b      	ldr	r3, [r1, #24]
 8008cf8:	069b      	lsls	r3, r3, #26
 8008cfa:	d5fa      	bpl.n	8008cf2 <HAL_I2C_IsDeviceReady+0x11e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cfc:	2320      	movs	r3, #32
 8008cfe:	61cb      	str	r3, [r1, #28]
 8008d00:	e7c4      	b.n	8008c8c <HAL_I2C_IsDeviceReady+0xb8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d02:	f7fe f80f 	bl	8006d24 <HAL_GetTick>
 8008d06:	1b43      	subs	r3, r0, r5
 8008d08:	429e      	cmp	r6, r3
 8008d0a:	d302      	bcc.n	8008d12 <HAL_I2C_IsDeviceReady+0x13e>
 8008d0c:	b10e      	cbz	r6, 8008d12 <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d0e:	6821      	ldr	r1, [r4, #0]
 8008d10:	e7f1      	b.n	8008cf6 <HAL_I2C_IsDeviceReady+0x122>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d12:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d14:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d16:	430b      	orrs	r3, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d18:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d1a:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d1c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d20:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        return HAL_ERROR;
 8008d24:	e7db      	b.n	8008cde <HAL_I2C_IsDeviceReady+0x10a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d26:	f7fd fffd 	bl	8006d24 <HAL_GetTick>
 8008d2a:	1b43      	subs	r3, r0, r5
 8008d2c:	429e      	cmp	r6, r3
 8008d2e:	d3f0      	bcc.n	8008d12 <HAL_I2C_IsDeviceReady+0x13e>
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	d0ee      	beq.n	8008d12 <HAL_I2C_IsDeviceReady+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	e7b7      	b.n	8008ca8 <HAL_I2C_IsDeviceReady+0xd4>

08008d38 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d38:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8008d3c:	2a20      	cmp	r2, #32
 8008d3e:	d123      	bne.n	8008d88 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8008d40:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d44:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008d48:	2a01      	cmp	r2, #1
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	d01c      	beq.n	8008d88 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d4e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d50:	2024      	movs	r0, #36	@ 0x24
{
 8008d52:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d54:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008d58:	6810      	ldr	r0, [r2, #0]
 8008d5a:	f020 0001 	bic.w	r0, r0, #1
 8008d5e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008d60:	6810      	ldr	r0, [r2, #0]
 8008d62:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008d66:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008d68:	6810      	ldr	r0, [r2, #0]
 8008d6a:	4301      	orrs	r1, r0
 8008d6c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d6e:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d70:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8008d74:	f041 0101 	orr.w	r1, r1, #1
 8008d78:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008d7a:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008d7e:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8008d82:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008d84:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8008d88:	2002      	movs	r0, #2
}
 8008d8a:	4770      	bx	lr

08008d8c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d8c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8008d90:	2a20      	cmp	r2, #32
 8008d92:	d122      	bne.n	8008dda <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8008d94:	b500      	push	{lr}
 8008d96:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d9a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008d9e:	2a01      	cmp	r2, #1
 8008da0:	4603      	mov	r3, r0
 8008da2:	d01c      	beq.n	8008dde <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008da4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008da6:	2024      	movs	r0, #36	@ 0x24
 8008da8:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8008dac:	6810      	ldr	r0, [r2, #0]
 8008dae:	f020 0001 	bic.w	r0, r0, #1
 8008db2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008db4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008db6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008dba:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008dbe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008dc0:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dc2:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8008dc6:	f041 0101 	orr.w	r1, r1, #1
 8008dca:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008dcc:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008dd0:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8008dd4:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008dd6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8008dda:	2002      	movs	r0, #2
}
 8008ddc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8008dde:	2002      	movs	r0, #2
}
 8008de0:	f85d fb04 	ldr.w	pc, [sp], #4

08008de4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008de4:	4b02      	ldr	r3, [pc, #8]	@ (8008df0 <HAL_PWREx_GetVoltageRange+0xc>)
 8008de6:	6818      	ldr	r0, [r3, #0]
#endif
}
 8008de8:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	40007000 	.word	0x40007000

08008df4 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008df4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8008df8:	d00e      	beq.n	8008e18 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008dfc:	6813      	ldr	r3, [r2, #0]
 8008dfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e06:	d005      	beq.n	8008e14 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008e08:	6813      	ldr	r3, [r2, #0]
 8008e0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008e12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008e14:	2000      	movs	r0, #0
 8008e16:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e18:	4913      	ldr	r1, [pc, #76]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008e1a:	680b      	ldr	r3, [r1, #0]
 8008e1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e24:	d0f6      	beq.n	8008e14 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e26:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e28:	4a10      	ldr	r2, [pc, #64]	@ (8008e6c <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e32:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e34:	6813      	ldr	r3, [r2, #0]
 8008e36:	4a0e      	ldr	r2, [pc, #56]	@ (8008e70 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008e38:	2032      	movs	r0, #50	@ 0x32
 8008e3a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e3e:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e40:	fba2 2303 	umull	r2, r3, r2, r3
 8008e44:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e46:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e48:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e4c:	d506      	bpl.n	8008e5c <HAL_PWREx_ControlVoltageScaling+0x68>
 8008e4e:	e000      	b.n	8008e52 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8008e50:	b123      	cbz	r3, 8008e5c <HAL_PWREx_ControlVoltageScaling+0x68>
 8008e52:	694a      	ldr	r2, [r1, #20]
 8008e54:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8008e56:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e5a:	d4f9      	bmi.n	8008e50 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e5c:	4b02      	ldr	r3, [pc, #8]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	055b      	lsls	r3, r3, #21
 8008e62:	d5d7      	bpl.n	8008e14 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8008e64:	2003      	movs	r0, #3
}
 8008e66:	4770      	bx	lr
 8008e68:	40007000 	.word	0x40007000
 8008e6c:	20000004 	.word	0x20000004
 8008e70:	431bde83 	.word	0x431bde83

08008e74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008e74:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008e76:	4d20      	ldr	r5, [pc, #128]	@ (8008ef8 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8008e78:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8008e7a:	00db      	lsls	r3, r3, #3
{
 8008e7c:	b083      	sub	sp, #12
 8008e7e:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008e80:	d51a      	bpl.n	8008eb8 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008e82:	f7ff ffaf 	bl	8008de4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e86:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8008e8a:	d027      	beq.n	8008edc <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008e8c:	2c80      	cmp	r4, #128	@ 0x80
 8008e8e:	d82c      	bhi.n	8008eea <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008e90:	d02f      	beq.n	8008ef2 <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008e92:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8008e96:	fab4 f484 	clz	r4, r4
 8008e9a:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008e9c:	4917      	ldr	r1, [pc, #92]	@ (8008efc <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8008e9e:	680b      	ldr	r3, [r1, #0]
 8008ea0:	f023 0307 	bic.w	r3, r3, #7
 8008ea4:	4323      	orrs	r3, r4
 8008ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008ea8:	6808      	ldr	r0, [r1, #0]
 8008eaa:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8008eae:	1b00      	subs	r0, r0, r4
 8008eb0:	bf18      	it	ne
 8008eb2:	2001      	movne	r0, #1
 8008eb4:	b003      	add	sp, #12
 8008eb6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8008eb8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8008eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ebe:	65ab      	str	r3, [r5, #88]	@ 0x58
 8008ec0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8008ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ec6:	9301      	str	r3, [sp, #4]
 8008ec8:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8008eca:	f7ff ff8b 	bl	8008de4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8008ece:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ed0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8008ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ed8:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008eda:	d1d7      	bne.n	8008e8c <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8008edc:	2c80      	cmp	r4, #128	@ 0x80
 8008ede:	d906      	bls.n	8008eee <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ee0:	2ca1      	cmp	r4, #161	@ 0xa1
 8008ee2:	bf34      	ite	cc
 8008ee4:	2401      	movcc	r4, #1
 8008ee6:	2402      	movcs	r4, #2
 8008ee8:	e7d8      	b.n	8008e9c <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8008eea:	2403      	movs	r4, #3
 8008eec:	e7d6      	b.n	8008e9c <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008eee:	2400      	movs	r4, #0
 8008ef0:	e7d4      	b.n	8008e9c <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8008ef2:	2402      	movs	r4, #2
 8008ef4:	e7d2      	b.n	8008e9c <RCC_SetFlashLatencyFromMSIRange+0x28>
 8008ef6:	bf00      	nop
 8008ef8:	40021000 	.word	0x40021000
 8008efc:	40022000 	.word	0x40022000

08008f00 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f00:	4a28      	ldr	r2, [pc, #160]	@ (8008fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008f02:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f04:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f06:	f013 030c 	ands.w	r3, r3, #12
 8008f0a:	d005      	beq.n	8008f18 <HAL_RCC_GetSysClockFreq+0x18>
 8008f0c:	2b0c      	cmp	r3, #12
 8008f0e:	d035      	beq.n	8008f7c <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d141      	bne.n	8008f98 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8008f14:	4824      	ldr	r0, [pc, #144]	@ (8008fa8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008f16:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008f18:	4a22      	ldr	r2, [pc, #136]	@ (8008fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008f1a:	6811      	ldr	r1, [r2, #0]
 8008f1c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008f1e:	bf54      	ite	pl
 8008f20:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008f24:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8008f26:	4921      	ldr	r1, [pc, #132]	@ (8008fac <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008f28:	bf54      	ite	pl
 8008f2a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008f2e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8008f32:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f36:	b303      	cbz	r3, 8008f7a <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008f38:	2b0c      	cmp	r3, #12
 8008f3a:	d11d      	bne.n	8008f78 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f3c:	4b19      	ldr	r3, [pc, #100]	@ (8008fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d025      	beq.n	8008f94 <HAL_RCC_GetSysClockFreq+0x94>
 8008f48:	4a19      	ldr	r2, [pc, #100]	@ (8008fb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008f4a:	2b03      	cmp	r3, #3
 8008f4c:	bf08      	it	eq
 8008f4e:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f50:	4b14      	ldr	r3, [pc, #80]	@ (8008fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008f52:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f54:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f5c:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f60:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f64:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f66:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f6a:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f6c:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f6e:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8008f72:	fbb2 f0f3 	udiv	r0, r2, r3
 8008f76:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008f78:	2000      	movs	r0, #0
}
 8008f7a:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f7c:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008f80:	2a01      	cmp	r2, #1
 8008f82:	d0c9      	beq.n	8008f18 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f84:	4b07      	ldr	r3, [pc, #28]	@ (8008fa4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8008f8c:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008f8e:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8008f92:	d1d9      	bne.n	8008f48 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8008f94:	4804      	ldr	r0, [pc, #16]	@ (8008fa8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008f96:	e7db      	b.n	8008f50 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	4805      	ldr	r0, [pc, #20]	@ (8008fb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008f9c:	bf18      	it	ne
 8008f9e:	2000      	movne	r0, #0
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40021000 	.word	0x40021000
 8008fa8:	00f42400 	.word	0x00f42400
 8008fac:	080117c8 	.word	0x080117c8
 8008fb0:	007a1200 	.word	0x007a1200

08008fb4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f000 8300 	beq.w	80095ba <HAL_RCC_OscConfig+0x606>
{
 8008fba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fbe:	4a94      	ldr	r2, [pc, #592]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008fc0:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fc2:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fc4:	68d6      	ldr	r6, [r2, #12]
 8008fc6:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008fc8:	06d8      	lsls	r0, r3, #27
{
 8008fca:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fcc:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fd0:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008fd4:	d52e      	bpl.n	8009034 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	f000 8123 	beq.w	8009222 <HAL_RCC_OscConfig+0x26e>
 8008fdc:	2d0c      	cmp	r5, #12
 8008fde:	f000 811d 	beq.w	800921c <HAL_RCC_OscConfig+0x268>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008fe2:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8008fe4:	4f8a      	ldr	r7, [pc, #552]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 8192 	beq.w	8009310 <HAL_RCC_OscConfig+0x35c>
        __HAL_RCC_MSI_ENABLE();
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8008ff4:	f7fd fe96 	bl	8006d24 <HAL_GetTick>
 8008ff8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ffa:	e006      	b.n	800900a <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ffc:	f7fd fe92 	bl	8006d24 <HAL_GetTick>
 8009000:	eba0 0008 	sub.w	r0, r0, r8
 8009004:	2802      	cmp	r0, #2
 8009006:	f200 8193 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	079b      	lsls	r3, r3, #30
 800900e:	d5f5      	bpl.n	8008ffc <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	f043 0308 	orr.w	r3, r3, #8
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	6a22      	ldr	r2, [r4, #32]
 800901c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009020:	4313      	orrs	r3, r2
 8009022:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	69e2      	ldr	r2, [r4, #28]
 8009028:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800902c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009030:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	07d9      	lsls	r1, r3, #31
 8009036:	f100 80c1 	bmi.w	80091bc <HAL_RCC_OscConfig+0x208>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800903a:	0799      	lsls	r1, r3, #30
 800903c:	d523      	bpl.n	8009086 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800903e:	2d04      	cmp	r5, #4
 8009040:	f000 8156 	beq.w	80092f0 <HAL_RCC_OscConfig+0x33c>
 8009044:	2d0c      	cmp	r5, #12
 8009046:	f000 8150 	beq.w	80092ea <HAL_RCC_OscConfig+0x336>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800904a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800904c:	4e70      	ldr	r6, [pc, #448]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8189 	beq.w	8009366 <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_ENABLE();
 8009054:	6833      	ldr	r3, [r6, #0]
 8009056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800905a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800905c:	f7fd fe62 	bl	8006d24 <HAL_GetTick>
 8009060:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009062:	e005      	b.n	8009070 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009064:	f7fd fe5e 	bl	8006d24 <HAL_GetTick>
 8009068:	1bc0      	subs	r0, r0, r7
 800906a:	2802      	cmp	r0, #2
 800906c:	f200 8160 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009070:	6833      	ldr	r3, [r6, #0]
 8009072:	055b      	lsls	r3, r3, #21
 8009074:	d5f6      	bpl.n	8009064 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009076:	6873      	ldr	r3, [r6, #4]
 8009078:	6922      	ldr	r2, [r4, #16]
 800907a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800907e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009082:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	0719      	lsls	r1, r3, #28
 8009088:	d519      	bpl.n	80090be <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800908a:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800908c:	4e60      	ldr	r6, [pc, #384]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 8117 	beq.w	80092c2 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_LSI_ENABLE();
 8009094:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8009098:	f043 0301 	orr.w	r3, r3, #1
 800909c:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80090a0:	f7fd fe40 	bl	8006d24 <HAL_GetTick>
 80090a4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090a6:	e005      	b.n	80090b4 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090a8:	f7fd fe3c 	bl	8006d24 <HAL_GetTick>
 80090ac:	1bc0      	subs	r0, r0, r7
 80090ae:	2802      	cmp	r0, #2
 80090b0:	f200 813e 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090b4:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80090b8:	079a      	lsls	r2, r3, #30
 80090ba:	d5f5      	bpl.n	80090a8 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	075f      	lsls	r7, r3, #29
 80090c0:	d53f      	bpl.n	8009142 <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80090c2:	4b53      	ldr	r3, [pc, #332]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
 80090c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80090c6:	00d6      	lsls	r6, r2, #3
 80090c8:	f100 814b 	bmi.w	8009362 <HAL_RCC_OscConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 80090cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80090ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80090d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80090d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80090de:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090e0:	4f4c      	ldr	r7, [pc, #304]	@ (8009214 <HAL_RCC_OscConfig+0x260>)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	05d8      	lsls	r0, r3, #23
 80090e6:	f140 8198 	bpl.w	800941a <HAL_RCC_OscConfig+0x466>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	f000 814c 	beq.w	800938a <HAL_RCC_OscConfig+0x3d6>
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	f000 81bc 	beq.w	8009470 <HAL_RCC_OscConfig+0x4bc>
 80090f8:	4f45      	ldr	r7, [pc, #276]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
 80090fa:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80090fe:	f022 0201 	bic.w	r2, r2, #1
 8009102:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8009106:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800910a:	f022 0204 	bic.w	r2, r2, #4
 800910e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009112:	2b00      	cmp	r3, #0
 8009114:	f040 8140 	bne.w	8009398 <HAL_RCC_OscConfig+0x3e4>
      tickstart = HAL_GetTick();
 8009118:	f7fd fe04 	bl	8006d24 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800911c:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009120:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009122:	e006      	b.n	8009132 <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009124:	f7fd fdfe 	bl	8006d24 <HAL_GetTick>
 8009128:	eba0 0008 	sub.w	r0, r0, r8
 800912c:	4548      	cmp	r0, r9
 800912e:	f200 80ff 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009132:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009136:	079b      	lsls	r3, r3, #30
 8009138:	d4f4      	bmi.n	8009124 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 800913a:	2e00      	cmp	r6, #0
 800913c:	f040 817f 	bne.w	800943e <HAL_RCC_OscConfig+0x48a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	0698      	lsls	r0, r3, #26
 8009144:	d518      	bpl.n	8009178 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009146:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8009148:	4e31      	ldr	r6, [pc, #196]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8151 	beq.w	80093f2 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_ENABLE();
 8009150:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009154:	f043 0301 	orr.w	r3, r3, #1
 8009158:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800915c:	f7fd fde2 	bl	8006d24 <HAL_GetTick>
 8009160:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009162:	e005      	b.n	8009170 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009164:	f7fd fdde 	bl	8006d24 <HAL_GetTick>
 8009168:	1bc0      	subs	r0, r0, r7
 800916a:	2802      	cmp	r0, #2
 800916c:	f200 80e0 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009170:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009174:	0799      	lsls	r1, r3, #30
 8009176:	d5f5      	bpl.n	8009164 <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009178:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800917a:	b1db      	cbz	r3, 80091b4 <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800917c:	2b02      	cmp	r3, #2
 800917e:	f000 8185 	beq.w	800948c <HAL_RCC_OscConfig+0x4d8>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009182:	2d0c      	cmp	r5, #12
 8009184:	f000 808f 	beq.w	80092a6 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_PLL_DISABLE();
 8009188:	4c21      	ldr	r4, [pc, #132]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009190:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009192:	f7fd fdc7 	bl	8006d24 <HAL_GetTick>
 8009196:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009198:	e005      	b.n	80091a6 <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800919a:	f7fd fdc3 	bl	8006d24 <HAL_GetTick>
 800919e:	1b40      	subs	r0, r0, r5
 80091a0:	2802      	cmp	r0, #2
 80091a2:	f200 80c5 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	019b      	lsls	r3, r3, #6
 80091aa:	d4f6      	bmi.n	800919a <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80091ac:	68e2      	ldr	r2, [r4, #12]
 80091ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <HAL_RCC_OscConfig+0x264>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 80091b4:	2000      	movs	r0, #0
}
 80091b6:	b003      	add	sp, #12
 80091b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80091bc:	2d08      	cmp	r5, #8
 80091be:	d076      	beq.n	80092ae <HAL_RCC_OscConfig+0x2fa>
 80091c0:	2d0c      	cmp	r5, #12
 80091c2:	d072      	beq.n	80092aa <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091c4:	6863      	ldr	r3, [r4, #4]
 80091c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091ca:	f000 80b5 	beq.w	8009338 <HAL_RCC_OscConfig+0x384>
 80091ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80091d2:	f000 8140 	beq.w	8009456 <HAL_RCC_OscConfig+0x4a2>
 80091d6:	4f0e      	ldr	r7, [pc, #56]	@ (8009210 <HAL_RCC_OscConfig+0x25c>)
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80091de:	603a      	str	r2, [r7, #0]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80091e6:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 80aa 	bne.w	8009342 <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
 80091ee:	f7fd fd99 	bl	8006d24 <HAL_GetTick>
 80091f2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80091f4:	e006      	b.n	8009204 <HAL_RCC_OscConfig+0x250>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091f6:	f7fd fd95 	bl	8006d24 <HAL_GetTick>
 80091fa:	eba0 0008 	sub.w	r0, r0, r8
 80091fe:	2864      	cmp	r0, #100	@ 0x64
 8009200:	f200 8096 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	0398      	lsls	r0, r3, #14
 8009208:	d4f5      	bmi.n	80091f6 <HAL_RCC_OscConfig+0x242>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	e715      	b.n	800903a <HAL_RCC_OscConfig+0x86>
 800920e:	bf00      	nop
 8009210:	40021000 	.word	0x40021000
 8009214:	40007000 	.word	0x40007000
 8009218:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800921c:	2e01      	cmp	r6, #1
 800921e:	f47f aee0 	bne.w	8008fe2 <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009222:	4ba6      	ldr	r3, [pc, #664]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	0799      	lsls	r1, r3, #30
 8009228:	d43a      	bmi.n	80092a0 <HAL_RCC_OscConfig+0x2ec>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800922a:	4ba4      	ldr	r3, [pc, #656]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 800922c:	6a20      	ldr	r0, [r4, #32]
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	0712      	lsls	r2, r2, #28
 8009232:	bf56      	itet	pl
 8009234:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8009238:	681b      	ldrmi	r3, [r3, #0]
 800923a:	091b      	lsrpl	r3, r3, #4
 800923c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009240:	4298      	cmp	r0, r3
 8009242:	f200 80be 	bhi.w	80093c2 <HAL_RCC_OscConfig+0x40e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009246:	4b9d      	ldr	r3, [pc, #628]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	f042 0208 	orr.w	r2, r2, #8
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009256:	4302      	orrs	r2, r0
 8009258:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	69e1      	ldr	r1, [r4, #28]
 800925e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8009262:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009266:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009268:	2d00      	cmp	r5, #0
 800926a:	f000 80ee 	beq.w	800944a <HAL_RCC_OscConfig+0x496>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800926e:	f7ff fe47 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
 8009272:	4b92      	ldr	r3, [pc, #584]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 8009274:	4a92      	ldr	r2, [pc, #584]	@ (80094c0 <HAL_RCC_OscConfig+0x50c>)
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800927c:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 800927e:	4a91      	ldr	r2, [pc, #580]	@ (80094c4 <HAL_RCC_OscConfig+0x510>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009280:	f003 031f 	and.w	r3, r3, #31
 8009284:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8009288:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800928a:	4a8f      	ldr	r2, [pc, #572]	@ (80094c8 <HAL_RCC_OscConfig+0x514>)
 800928c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800928e:	f7fb feeb 	bl	8005068 <HAL_InitTick>
        if(status != HAL_OK)
 8009292:	2800      	cmp	r0, #0
 8009294:	d18f      	bne.n	80091b6 <HAL_RCC_OscConfig+0x202>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	07d9      	lsls	r1, r3, #31
 800929a:	f57f aece 	bpl.w	800903a <HAL_RCC_OscConfig+0x86>
 800929e:	e78d      	b.n	80091bc <HAL_RCC_OscConfig+0x208>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80092a0:	69a3      	ldr	r3, [r4, #24]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1c1      	bne.n	800922a <HAL_RCC_OscConfig+0x276>
    return HAL_ERROR;
 80092a6:	2001      	movs	r0, #1
 80092a8:	e785      	b.n	80091b6 <HAL_RCC_OscConfig+0x202>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80092aa:	2e03      	cmp	r6, #3
 80092ac:	d18a      	bne.n	80091c4 <HAL_RCC_OscConfig+0x210>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092ae:	4a83      	ldr	r2, [pc, #524]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 80092b0:	6812      	ldr	r2, [r2, #0]
 80092b2:	0392      	lsls	r2, r2, #14
 80092b4:	f57f aec1 	bpl.w	800903a <HAL_RCC_OscConfig+0x86>
 80092b8:	6862      	ldr	r2, [r4, #4]
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	f47f aebd 	bne.w	800903a <HAL_RCC_OscConfig+0x86>
 80092c0:	e7f1      	b.n	80092a6 <HAL_RCC_OscConfig+0x2f2>
      __HAL_RCC_LSI_DISABLE();
 80092c2:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80092c6:	f023 0301 	bic.w	r3, r3, #1
 80092ca:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80092ce:	f7fd fd29 	bl	8006d24 <HAL_GetTick>
 80092d2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092d4:	e004      	b.n	80092e0 <HAL_RCC_OscConfig+0x32c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092d6:	f7fd fd25 	bl	8006d24 <HAL_GetTick>
 80092da:	1bc0      	subs	r0, r0, r7
 80092dc:	2802      	cmp	r0, #2
 80092de:	d827      	bhi.n	8009330 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092e0:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80092e4:	079b      	lsls	r3, r3, #30
 80092e6:	d4f6      	bmi.n	80092d6 <HAL_RCC_OscConfig+0x322>
 80092e8:	e6e8      	b.n	80090bc <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80092ea:	2e02      	cmp	r6, #2
 80092ec:	f47f aead 	bne.w	800904a <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092f0:	4a72      	ldr	r2, [pc, #456]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 80092f2:	6812      	ldr	r2, [r2, #0]
 80092f4:	0552      	lsls	r2, r2, #21
 80092f6:	d502      	bpl.n	80092fe <HAL_RCC_OscConfig+0x34a>
 80092f8:	68e2      	ldr	r2, [r4, #12]
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	d0d3      	beq.n	80092a6 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092fe:	496f      	ldr	r1, [pc, #444]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 8009300:	6920      	ldr	r0, [r4, #16]
 8009302:	684a      	ldr	r2, [r1, #4]
 8009304:	f022 52f8 	bic.w	r2, r2, #520093696	@ 0x1f000000
 8009308:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800930c:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800930e:	e6ba      	b.n	8009086 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	f023 0301 	bic.w	r3, r3, #1
 8009316:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8009318:	f7fd fd04 	bl	8006d24 <HAL_GetTick>
 800931c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	0798      	lsls	r0, r3, #30
 8009322:	d5b8      	bpl.n	8009296 <HAL_RCC_OscConfig+0x2e2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009324:	f7fd fcfe 	bl	8006d24 <HAL_GetTick>
 8009328:	eba0 0008 	sub.w	r0, r0, r8
 800932c:	2802      	cmp	r0, #2
 800932e:	d9f6      	bls.n	800931e <HAL_RCC_OscConfig+0x36a>
            return HAL_TIMEOUT;
 8009330:	2003      	movs	r0, #3
}
 8009332:	b003      	add	sp, #12
 8009334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009338:	4a60      	ldr	r2, [pc, #384]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009340:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009342:	f7fd fcef 	bl	8006d24 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009346:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 80094bc <HAL_RCC_OscConfig+0x508>
        tickstart = HAL_GetTick();
 800934a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800934c:	e004      	b.n	8009358 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800934e:	f7fd fce9 	bl	8006d24 <HAL_GetTick>
 8009352:	1bc0      	subs	r0, r0, r7
 8009354:	2864      	cmp	r0, #100	@ 0x64
 8009356:	d8eb      	bhi.n	8009330 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009358:	f8d8 3000 	ldr.w	r3, [r8]
 800935c:	039b      	lsls	r3, r3, #14
 800935e:	d5f6      	bpl.n	800934e <HAL_RCC_OscConfig+0x39a>
 8009360:	e753      	b.n	800920a <HAL_RCC_OscConfig+0x256>
    FlagStatus       pwrclkchanged = RESET;
 8009362:	2600      	movs	r6, #0
 8009364:	e6bc      	b.n	80090e0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8009366:	6833      	ldr	r3, [r6, #0]
 8009368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800936c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800936e:	f7fd fcd9 	bl	8006d24 <HAL_GetTick>
 8009372:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009374:	e004      	b.n	8009380 <HAL_RCC_OscConfig+0x3cc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009376:	f7fd fcd5 	bl	8006d24 <HAL_GetTick>
 800937a:	1bc0      	subs	r0, r0, r7
 800937c:	2802      	cmp	r0, #2
 800937e:	d8d7      	bhi.n	8009330 <HAL_RCC_OscConfig+0x37c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009380:	6833      	ldr	r3, [r6, #0]
 8009382:	0558      	lsls	r0, r3, #21
 8009384:	d4f7      	bmi.n	8009376 <HAL_RCC_OscConfig+0x3c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	e67d      	b.n	8009086 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800938a:	4a4c      	ldr	r2, [pc, #304]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 800938c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8009390:	f043 0301 	orr.w	r3, r3, #1
 8009394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8009398:	f7fd fcc4 	bl	8006d24 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800939c:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 80094bc <HAL_RCC_OscConfig+0x508>
      tickstart = HAL_GetTick();
 80093a0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a2:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093a6:	e004      	b.n	80093b2 <HAL_RCC_OscConfig+0x3fe>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a8:	f7fd fcbc 	bl	8006d24 <HAL_GetTick>
 80093ac:	1bc0      	subs	r0, r0, r7
 80093ae:	4548      	cmp	r0, r9
 80093b0:	d8be      	bhi.n	8009330 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093b2:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 80093b6:	079a      	lsls	r2, r3, #30
 80093b8:	d5f6      	bpl.n	80093a8 <HAL_RCC_OscConfig+0x3f4>
    if(pwrclkchanged == SET)
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	f43f aec0 	beq.w	8009140 <HAL_RCC_OscConfig+0x18c>
 80093c0:	e03d      	b.n	800943e <HAL_RCC_OscConfig+0x48a>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80093c2:	f7ff fd57 	bl	8008e74 <RCC_SetFlashLatencyFromMSIRange>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	f47f af6d 	bne.w	80092a6 <HAL_RCC_OscConfig+0x2f2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80093cc:	4b3b      	ldr	r3, [pc, #236]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	f042 0208 	orr.w	r2, r2, #8
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	6a21      	ldr	r1, [r4, #32]
 80093da:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80093de:	430a      	orrs	r2, r1
 80093e0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80093e2:	685a      	ldr	r2, [r3, #4]
 80093e4:	69e1      	ldr	r1, [r4, #28]
 80093e6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80093ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80093ee:	605a      	str	r2, [r3, #4]
 80093f0:	e73d      	b.n	800926e <HAL_RCC_OscConfig+0x2ba>
      __HAL_RCC_HSI48_DISABLE();
 80093f2:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80093f6:	f023 0301 	bic.w	r3, r3, #1
 80093fa:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80093fe:	f7fd fc91 	bl	8006d24 <HAL_GetTick>
 8009402:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009404:	e004      	b.n	8009410 <HAL_RCC_OscConfig+0x45c>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009406:	f7fd fc8d 	bl	8006d24 <HAL_GetTick>
 800940a:	1bc0      	subs	r0, r0, r7
 800940c:	2802      	cmp	r0, #2
 800940e:	d88f      	bhi.n	8009330 <HAL_RCC_OscConfig+0x37c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009410:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8009414:	079a      	lsls	r2, r3, #30
 8009416:	d4f6      	bmi.n	8009406 <HAL_RCC_OscConfig+0x452>
 8009418:	e6ae      	b.n	8009178 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009420:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8009422:	f7fd fc7f 	bl	8006d24 <HAL_GetTick>
 8009426:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	05d9      	lsls	r1, r3, #23
 800942c:	f53f ae5d 	bmi.w	80090ea <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009430:	f7fd fc78 	bl	8006d24 <HAL_GetTick>
 8009434:	eba0 0008 	sub.w	r0, r0, r8
 8009438:	2802      	cmp	r0, #2
 800943a:	d9f5      	bls.n	8009428 <HAL_RCC_OscConfig+0x474>
 800943c:	e778      	b.n	8009330 <HAL_RCC_OscConfig+0x37c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800943e:	4a1f      	ldr	r2, [pc, #124]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 8009440:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8009442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009446:	6593      	str	r3, [r2, #88]	@ 0x58
 8009448:	e67a      	b.n	8009140 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800944a:	f7ff fd13 	bl	8008e74 <RCC_SetFlashLatencyFromMSIRange>
 800944e:	2800      	cmp	r0, #0
 8009450:	f43f af0d 	beq.w	800926e <HAL_RCC_OscConfig+0x2ba>
 8009454:	e727      	b.n	80092a6 <HAL_RCC_OscConfig+0x2f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800945a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800946c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800946e:	e768      	b.n	8009342 <HAL_RCC_OscConfig+0x38e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009470:	4b12      	ldr	r3, [pc, #72]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 8009472:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009476:	f042 0204 	orr.w	r2, r2, #4
 800947a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800947e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009482:	f042 0201 	orr.w	r2, r2, #1
 8009486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800948a:	e785      	b.n	8009398 <HAL_RCC_OscConfig+0x3e4>
      pll_config = RCC->PLLCFGR;
 800948c:	4e0b      	ldr	r6, [pc, #44]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800948e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8009490:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009492:	f003 0103 	and.w	r1, r3, #3
 8009496:	4291      	cmp	r1, r2
 8009498:	d052      	beq.n	8009540 <HAL_RCC_OscConfig+0x58c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800949a:	2d0c      	cmp	r5, #12
 800949c:	f43f af03 	beq.w	80092a6 <HAL_RCC_OscConfig+0x2f2>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80094a0:	4d06      	ldr	r5, [pc, #24]	@ (80094bc <HAL_RCC_OscConfig+0x508>)
 80094a2:	682b      	ldr	r3, [r5, #0]
 80094a4:	015b      	lsls	r3, r3, #5
 80094a6:	f53f aefe 	bmi.w	80092a6 <HAL_RCC_OscConfig+0x2f2>
            __HAL_RCC_PLL_DISABLE();
 80094aa:	682b      	ldr	r3, [r5, #0]
 80094ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094b0:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 80094b2:	f7fd fc37 	bl	8006d24 <HAL_GetTick>
 80094b6:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094b8:	e00e      	b.n	80094d8 <HAL_RCC_OscConfig+0x524>
 80094ba:	bf00      	nop
 80094bc:	40021000 	.word	0x40021000
 80094c0:	08011800 	.word	0x08011800
 80094c4:	20000010 	.word	0x20000010
 80094c8:	20000004 	.word	0x20000004
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094cc:	f7fd fc2a 	bl	8006d24 <HAL_GetTick>
 80094d0:	1b80      	subs	r0, r0, r6
 80094d2:	2802      	cmp	r0, #2
 80094d4:	f63f af2c 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	019f      	lsls	r7, r3, #6
 80094dc:	d4f6      	bmi.n	80094cc <HAL_RCC_OscConfig+0x518>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094de:	68e9      	ldr	r1, [r5, #12]
 80094e0:	4b37      	ldr	r3, [pc, #220]	@ (80095c0 <HAL_RCC_OscConfig+0x60c>)
 80094e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80094e4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094e6:	4e37      	ldr	r6, [pc, #220]	@ (80095c4 <HAL_RCC_OscConfig+0x610>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094e8:	400b      	ands	r3, r1
 80094ea:	4313      	orrs	r3, r2
 80094ec:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 80094f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80094f4:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80094f8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 80094fc:	3801      	subs	r0, #1
 80094fe:	0849      	lsrs	r1, r1, #1
 8009500:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8009504:	3901      	subs	r1, #1
 8009506:	0852      	lsrs	r2, r2, #1
 8009508:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800950c:	3a01      	subs	r2, #1
 800950e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8009512:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8009514:	682b      	ldr	r3, [r5, #0]
 8009516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800951a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800951c:	68eb      	ldr	r3, [r5, #12]
 800951e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009522:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8009524:	f7fd fbfe 	bl	8006d24 <HAL_GetTick>
 8009528:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800952a:	e005      	b.n	8009538 <HAL_RCC_OscConfig+0x584>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800952c:	f7fd fbfa 	bl	8006d24 <HAL_GetTick>
 8009530:	1b00      	subs	r0, r0, r4
 8009532:	2802      	cmp	r0, #2
 8009534:	f63f aefc 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009538:	6833      	ldr	r3, [r6, #0]
 800953a:	0198      	lsls	r0, r3, #6
 800953c:	d5f6      	bpl.n	800952c <HAL_RCC_OscConfig+0x578>
 800953e:	e639      	b.n	80091b4 <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009540:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009542:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009546:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009548:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800954c:	d1a5      	bne.n	800949a <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800954e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009550:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009554:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8009558:	d19f      	bne.n	800949a <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800955a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800955c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009560:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8009564:	d199      	bne.n	800949a <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009566:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009568:	0852      	lsrs	r2, r2, #1
 800956a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800956e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009570:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8009574:	d191      	bne.n	800949a <HAL_RCC_OscConfig+0x4e6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009576:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009578:	0852      	lsrs	r2, r2, #1
 800957a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800957e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009580:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8009584:	d189      	bne.n	800949a <HAL_RCC_OscConfig+0x4e6>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009586:	6833      	ldr	r3, [r6, #0]
 8009588:	0199      	lsls	r1, r3, #6
 800958a:	f53f ae13 	bmi.w	80091b4 <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 800958e:	6833      	ldr	r3, [r6, #0]
 8009590:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009594:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009596:	68f3      	ldr	r3, [r6, #12]
 8009598:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800959c:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 800959e:	f7fd fbc1 	bl	8006d24 <HAL_GetTick>
 80095a2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095a4:	e005      	b.n	80095b2 <HAL_RCC_OscConfig+0x5fe>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095a6:	f7fd fbbd 	bl	8006d24 <HAL_GetTick>
 80095aa:	1b03      	subs	r3, r0, r4
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	f63f aebf 	bhi.w	8009330 <HAL_RCC_OscConfig+0x37c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095b2:	6833      	ldr	r3, [r6, #0]
 80095b4:	019a      	lsls	r2, r3, #6
 80095b6:	d5f6      	bpl.n	80095a6 <HAL_RCC_OscConfig+0x5f2>
 80095b8:	e5fc      	b.n	80091b4 <HAL_RCC_OscConfig+0x200>
    return HAL_ERROR;
 80095ba:	2001      	movs	r0, #1
}
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	019d808c 	.word	0x019d808c
 80095c4:	40021000 	.word	0x40021000

080095c8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80095c8:	2800      	cmp	r0, #0
 80095ca:	f000 80a0 	beq.w	800970e <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095ce:	4a54      	ldr	r2, [pc, #336]	@ (8009720 <HAL_RCC_ClockConfig+0x158>)
 80095d0:	6813      	ldr	r3, [r2, #0]
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	428b      	cmp	r3, r1
{
 80095d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095dc:	460d      	mov	r5, r1
 80095de:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095e0:	d20c      	bcs.n	80095fc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095e2:	6813      	ldr	r3, [r2, #0]
 80095e4:	f023 0307 	bic.w	r3, r3, #7
 80095e8:	430b      	orrs	r3, r1
 80095ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ec:	6813      	ldr	r3, [r2, #0]
 80095ee:	f003 0307 	and.w	r3, r3, #7
 80095f2:	428b      	cmp	r3, r1
 80095f4:	d002      	beq.n	80095fc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80095f6:	2001      	movs	r0, #1
}
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009600:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009604:	d570      	bpl.n	80096e8 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009606:	4e47      	ldr	r6, [pc, #284]	@ (8009724 <HAL_RCC_ClockConfig+0x15c>)
 8009608:	68a0      	ldr	r0, [r4, #8]
 800960a:	68b1      	ldr	r1, [r6, #8]
 800960c:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8009610:	4288      	cmp	r0, r1
 8009612:	d904      	bls.n	800961e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009614:	68b1      	ldr	r1, [r6, #8]
 8009616:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 800961a:	4301      	orrs	r1, r0
 800961c:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800961e:	b332      	cbz	r2, 800966e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009620:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009622:	4b40      	ldr	r3, [pc, #256]	@ (8009724 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009624:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009626:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009628:	d065      	beq.n	80096f6 <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800962a:	2a02      	cmp	r2, #2
 800962c:	d06c      	beq.n	8009708 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800962e:	2a00      	cmp	r2, #0
 8009630:	d171      	bne.n	8009716 <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009632:	079e      	lsls	r6, r3, #30
 8009634:	d5df      	bpl.n	80095f6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009636:	4e3b      	ldr	r6, [pc, #236]	@ (8009724 <HAL_RCC_ClockConfig+0x15c>)
 8009638:	68b3      	ldr	r3, [r6, #8]
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	4313      	orrs	r3, r2
 8009640:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009642:	f7fd fb6f 	bl	8006d24 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009646:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800964a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800964c:	e004      	b.n	8009658 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800964e:	f7fd fb69 	bl	8006d24 <HAL_GetTick>
 8009652:	1bc0      	subs	r0, r0, r7
 8009654:	4540      	cmp	r0, r8
 8009656:	d85c      	bhi.n	8009712 <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009658:	68b3      	ldr	r3, [r6, #8]
 800965a:	6862      	ldr	r2, [r4, #4]
 800965c:	f003 030c 	and.w	r3, r3, #12
 8009660:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009664:	d1f3      	bne.n	800964e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	0799      	lsls	r1, r3, #30
 800966a:	d506      	bpl.n	800967a <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800966c:	68a0      	ldr	r0, [r4, #8]
 800966e:	492d      	ldr	r1, [pc, #180]	@ (8009724 <HAL_RCC_ClockConfig+0x15c>)
 8009670:	688a      	ldr	r2, [r1, #8]
 8009672:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8009676:	4282      	cmp	r2, r0
 8009678:	d840      	bhi.n	80096fc <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800967a:	4929      	ldr	r1, [pc, #164]	@ (8009720 <HAL_RCC_ClockConfig+0x158>)
 800967c:	680a      	ldr	r2, [r1, #0]
 800967e:	f002 0207 	and.w	r2, r2, #7
 8009682:	42aa      	cmp	r2, r5
 8009684:	d909      	bls.n	800969a <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009686:	680a      	ldr	r2, [r1, #0]
 8009688:	f022 0207 	bic.w	r2, r2, #7
 800968c:	432a      	orrs	r2, r5
 800968e:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009690:	680a      	ldr	r2, [r1, #0]
 8009692:	f002 0207 	and.w	r2, r2, #7
 8009696:	42aa      	cmp	r2, r5
 8009698:	d1ad      	bne.n	80095f6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800969a:	075a      	lsls	r2, r3, #29
 800969c:	d506      	bpl.n	80096ac <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800969e:	4921      	ldr	r1, [pc, #132]	@ (8009724 <HAL_RCC_ClockConfig+0x15c>)
 80096a0:	68e0      	ldr	r0, [r4, #12]
 80096a2:	688a      	ldr	r2, [r1, #8]
 80096a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80096a8:	4302      	orrs	r2, r0
 80096aa:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096ac:	071b      	lsls	r3, r3, #28
 80096ae:	d507      	bpl.n	80096c0 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009724 <HAL_RCC_ClockConfig+0x15c>)
 80096b2:	6921      	ldr	r1, [r4, #16]
 80096b4:	6893      	ldr	r3, [r2, #8]
 80096b6:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80096ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80096be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80096c0:	f7ff fc1e 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
 80096c4:	4a17      	ldr	r2, [pc, #92]	@ (8009724 <HAL_RCC_ClockConfig+0x15c>)
 80096c6:	4c18      	ldr	r4, [pc, #96]	@ (8009728 <HAL_RCC_ClockConfig+0x160>)
 80096c8:	6892      	ldr	r2, [r2, #8]
 80096ca:	4918      	ldr	r1, [pc, #96]	@ (800972c <HAL_RCC_ClockConfig+0x164>)
 80096cc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80096d0:	4603      	mov	r3, r0
 80096d2:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80096d4:	4816      	ldr	r0, [pc, #88]	@ (8009730 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80096d6:	f002 021f 	and.w	r2, r2, #31
 80096da:	40d3      	lsrs	r3, r2
}
 80096dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80096e0:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80096e2:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80096e4:	f7fb bcc0 	b.w	8005068 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	d0c6      	beq.n	800967a <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096ec:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009724 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096f0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096f2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096f4:	d199      	bne.n	800962a <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096f6:	019b      	lsls	r3, r3, #6
 80096f8:	d49d      	bmi.n	8009636 <HAL_RCC_ClockConfig+0x6e>
 80096fa:	e77c      	b.n	80095f6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096fc:	688a      	ldr	r2, [r1, #8]
 80096fe:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8009702:	4302      	orrs	r2, r0
 8009704:	608a      	str	r2, [r1, #8]
 8009706:	e7b8      	b.n	800967a <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009708:	039f      	lsls	r7, r3, #14
 800970a:	d494      	bmi.n	8009636 <HAL_RCC_ClockConfig+0x6e>
 800970c:	e773      	b.n	80095f6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800970e:	2001      	movs	r0, #1
}
 8009710:	4770      	bx	lr
        return HAL_TIMEOUT;
 8009712:	2003      	movs	r0, #3
 8009714:	e770      	b.n	80095f8 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009716:	0558      	lsls	r0, r3, #21
 8009718:	f57f af6d 	bpl.w	80095f6 <HAL_RCC_ClockConfig+0x2e>
 800971c:	e78b      	b.n	8009636 <HAL_RCC_ClockConfig+0x6e>
 800971e:	bf00      	nop
 8009720:	40022000 	.word	0x40022000
 8009724:	40021000 	.word	0x40021000
 8009728:	08011800 	.word	0x08011800
 800972c:	20000004 	.word	0x20000004
 8009730:	20000010 	.word	0x20000010

08009734 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009734:	4b05      	ldr	r3, [pc, #20]	@ (800974c <HAL_RCC_GetPCLK1Freq+0x18>)
 8009736:	4a06      	ldr	r2, [pc, #24]	@ (8009750 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009738:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800973a:	4906      	ldr	r1, [pc, #24]	@ (8009754 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800973c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009740:	6808      	ldr	r0, [r1, #0]
 8009742:	5cd3      	ldrb	r3, [r2, r3]
 8009744:	f003 031f 	and.w	r3, r3, #31
}
 8009748:	40d8      	lsrs	r0, r3
 800974a:	4770      	bx	lr
 800974c:	40021000 	.word	0x40021000
 8009750:	080117f8 	.word	0x080117f8
 8009754:	20000004 	.word	0x20000004

08009758 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009758:	4b05      	ldr	r3, [pc, #20]	@ (8009770 <HAL_RCC_GetPCLK2Freq+0x18>)
 800975a:	4a06      	ldr	r2, [pc, #24]	@ (8009774 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800975c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800975e:	4906      	ldr	r1, [pc, #24]	@ (8009778 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009760:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009764:	6808      	ldr	r0, [r1, #0]
 8009766:	5cd3      	ldrb	r3, [r2, r3]
 8009768:	f003 031f 	and.w	r3, r3, #31
}
 800976c:	40d8      	lsrs	r0, r3
 800976e:	4770      	bx	lr
 8009770:	40021000 	.word	0x40021000
 8009774:	080117f8 	.word	0x080117f8
 8009778:	20000004 	.word	0x20000004

0800977c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800977c:	4b0e      	ldr	r3, [pc, #56]	@ (80097b8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800977e:	220f      	movs	r2, #15
 8009780:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8009782:	689a      	ldr	r2, [r3, #8]
 8009784:	f002 0203 	and.w	r2, r2, #3
 8009788:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8009790:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009798:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	08db      	lsrs	r3, r3, #3
{
 800979e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80097a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80097a4:	4c05      	ldr	r4, [pc, #20]	@ (80097bc <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80097a6:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80097a8:	6823      	ldr	r3, [r4, #0]
}
 80097aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	600b      	str	r3, [r1, #0]
}
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	40021000 	.word	0x40021000
 80097bc:	40022000 	.word	0x40022000

080097c0 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097c0:	4a45      	ldr	r2, [pc, #276]	@ (80098d8 <RCCEx_PLLSAI1_Config+0x118>)
{
 80097c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097c4:	68d6      	ldr	r6, [r2, #12]
{
 80097c6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097c8:	07b1      	lsls	r1, r6, #30
{
 80097ca:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80097cc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097ce:	d006      	beq.n	80097de <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80097d0:	68d1      	ldr	r1, [r2, #12]
 80097d2:	f001 0103 	and.w	r1, r1, #3
 80097d6:	4281      	cmp	r1, r0
 80097d8:	d04b      	beq.n	8009872 <RCCEx_PLLSAI1_Config+0xb2>
 80097da:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80097dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80097de:	2802      	cmp	r0, #2
 80097e0:	d058      	beq.n	8009894 <RCCEx_PLLSAI1_Config+0xd4>
 80097e2:	2803      	cmp	r0, #3
 80097e4:	d04f      	beq.n	8009886 <RCCEx_PLLSAI1_Config+0xc6>
 80097e6:	2801      	cmp	r0, #1
 80097e8:	d1f7      	bne.n	80097da <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80097ea:	6812      	ldr	r2, [r2, #0]
 80097ec:	0793      	lsls	r3, r2, #30
 80097ee:	d5f5      	bpl.n	80097dc <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80097f0:	4939      	ldr	r1, [pc, #228]	@ (80098d8 <RCCEx_PLLSAI1_Config+0x118>)
 80097f2:	68ca      	ldr	r2, [r1, #12]
 80097f4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80097f8:	ea42 0300 	orr.w	r3, r2, r0
 80097fc:	6862      	ldr	r2, [r4, #4]
 80097fe:	3a01      	subs	r2, #1
 8009800:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009804:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8009806:	4e34      	ldr	r6, [pc, #208]	@ (80098d8 <RCCEx_PLLSAI1_Config+0x118>)
 8009808:	6833      	ldr	r3, [r6, #0]
 800980a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800980e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8009810:	f7fd fa88 	bl	8006d24 <HAL_GetTick>
 8009814:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009816:	e004      	b.n	8009822 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009818:	f7fd fa84 	bl	8006d24 <HAL_GetTick>
 800981c:	1bc3      	subs	r3, r0, r7
 800981e:	2b02      	cmp	r3, #2
 8009820:	d83c      	bhi.n	800989c <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009822:	6833      	ldr	r3, [r6, #0]
 8009824:	011a      	lsls	r2, r3, #4
 8009826:	d4f7      	bmi.n	8009818 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009828:	68a3      	ldr	r3, [r4, #8]
 800982a:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800982c:	2d00      	cmp	r5, #0
 800982e:	d137      	bne.n	80098a0 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009830:	6932      	ldr	r2, [r6, #16]
 8009832:	68e3      	ldr	r3, [r4, #12]
 8009834:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 8009838:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 800983c:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8009840:	4313      	orrs	r3, r2
 8009842:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8009844:	4d24      	ldr	r5, [pc, #144]	@ (80098d8 <RCCEx_PLLSAI1_Config+0x118>)
 8009846:	682b      	ldr	r3, [r5, #0]
 8009848:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800984c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800984e:	f7fd fa69 	bl	8006d24 <HAL_GetTick>
 8009852:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009854:	e004      	b.n	8009860 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009856:	f7fd fa65 	bl	8006d24 <HAL_GetTick>
 800985a:	1b80      	subs	r0, r0, r6
 800985c:	2802      	cmp	r0, #2
 800985e:	d81d      	bhi.n	800989c <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	d5f7      	bpl.n	8009856 <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009866:	692b      	ldr	r3, [r5, #16]
 8009868:	69a2      	ldr	r2, [r4, #24]
 800986a:	4313      	orrs	r3, r2
 800986c:	2000      	movs	r0, #0
 800986e:	612b      	str	r3, [r5, #16]
}
 8009870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8009872:	2900      	cmp	r1, #0
 8009874:	d0b1      	beq.n	80097da <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009876:	68d3      	ldr	r3, [r2, #12]
       ||
 8009878:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800987a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800987e:	3301      	adds	r3, #1
       ||
 8009880:	4293      	cmp	r3, r2
 8009882:	d1aa      	bne.n	80097da <RCCEx_PLLSAI1_Config+0x1a>
 8009884:	e7bf      	b.n	8009806 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009886:	6811      	ldr	r1, [r2, #0]
 8009888:	038e      	lsls	r6, r1, #14
 800988a:	d4b1      	bmi.n	80097f0 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800988c:	6812      	ldr	r2, [r2, #0]
 800988e:	0351      	lsls	r1, r2, #13
 8009890:	d5a3      	bpl.n	80097da <RCCEx_PLLSAI1_Config+0x1a>
 8009892:	e7ad      	b.n	80097f0 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009894:	6812      	ldr	r2, [r2, #0]
 8009896:	0557      	lsls	r7, r2, #21
 8009898:	d59f      	bpl.n	80097da <RCCEx_PLLSAI1_Config+0x1a>
 800989a:	e7a9      	b.n	80097f0 <RCCEx_PLLSAI1_Config+0x30>
 800989c:	2003      	movs	r0, #3
}
 800989e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 80098a0:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098a2:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80098a4:	d00b      	beq.n	80098be <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098a6:	6962      	ldr	r2, [r4, #20]
 80098a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80098ac:	0852      	lsrs	r2, r2, #1
 80098ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80098b2:	3a01      	subs	r2, #1
 80098b4:	430b      	orrs	r3, r1
 80098b6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80098ba:	6133      	str	r3, [r6, #16]
 80098bc:	e7c2      	b.n	8009844 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098be:	6922      	ldr	r2, [r4, #16]
 80098c0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80098c4:	0852      	lsrs	r2, r2, #1
 80098c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80098ca:	3a01      	subs	r2, #1
 80098cc:	430b      	orrs	r3, r1
 80098ce:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80098d2:	6133      	str	r3, [r6, #16]
 80098d4:	e7b6      	b.n	8009844 <RCCEx_PLLSAI1_Config+0x84>
 80098d6:	bf00      	nop
 80098d8:	40021000 	.word	0x40021000

080098dc <HAL_RCCEx_PeriphCLKConfig>:
{
 80098dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80098e0:	6803      	ldr	r3, [r0, #0]
 80098e2:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 80098e6:	b083      	sub	sp, #12
 80098e8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80098ea:	d00c      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80098ec:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80098ee:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80098f2:	f000 810c 	beq.w	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x232>
 80098f6:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 80098fa:	f000 810d 	beq.w	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 80098fe:	2900      	cmp	r1, #0
 8009900:	f000 8129 	beq.w	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8009904:	2601      	movs	r6, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009906:	0398      	lsls	r0, r3, #14
 8009908:	d554      	bpl.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800990a:	4ba5      	ldr	r3, [pc, #660]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800990c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800990e:	00d1      	lsls	r1, r2, #3
 8009910:	f140 80f2 	bpl.w	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    FlagStatus       pwrclkchanged = RESET;
 8009914:	2700      	movs	r7, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009916:	4da3      	ldr	r5, [pc, #652]	@ (8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8009918:	682b      	ldr	r3, [r5, #0]
 800991a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800991e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8009920:	f7fd fa00 	bl	8006d24 <HAL_GetTick>
 8009924:	4680      	mov	r8, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009926:	e006      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009928:	f7fd f9fc 	bl	8006d24 <HAL_GetTick>
 800992c:	eba0 0308 	sub.w	r3, r0, r8
 8009930:	2b02      	cmp	r3, #2
 8009932:	f200 80fb 	bhi.w	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x250>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009936:	682b      	ldr	r3, [r5, #0]
 8009938:	05da      	lsls	r2, r3, #23
 800993a:	d5f5      	bpl.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    if(ret == HAL_OK)
 800993c:	bbb6      	cbnz	r6, 80099ac <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800993e:	4d98      	ldr	r5, [pc, #608]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009940:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009942:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009946:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800994a:	d027      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800994c:	4293      	cmp	r3, r2
 800994e:	d025      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009950:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8009954:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8009958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800995c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009960:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8009964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009968:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800996c:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8009970:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009974:	07cb      	lsls	r3, r1, #31
 8009976:	d511      	bpl.n	800999c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        tickstart = HAL_GetTick();
 8009978:	f7fd f9d4 	bl	8006d24 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800997c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8009980:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009982:	e006      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xb6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009984:	f7fd f9ce 	bl	8006d24 <HAL_GetTick>
 8009988:	eba0 0008 	sub.w	r0, r0, r8
 800998c:	4548      	cmp	r0, r9
 800998e:	f200 80cd 	bhi.w	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x250>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009992:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8009996:	0798      	lsls	r0, r3, #30
 8009998:	d5f4      	bpl.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800999a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800999c:	4980      	ldr	r1, [pc, #512]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800999e:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80099a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099a6:	4313      	orrs	r3, r2
 80099a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80099ac:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	f040 80c1 	bne.w	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80099b4:	07d9      	lsls	r1, r3, #31
 80099b6:	d508      	bpl.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0xee>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80099b8:	4979      	ldr	r1, [pc, #484]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099ba:	6a20      	ldr	r0, [r4, #32]
 80099bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80099c0:	f022 0203 	bic.w	r2, r2, #3
 80099c4:	4302      	orrs	r2, r0
 80099c6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80099ca:	079a      	lsls	r2, r3, #30
 80099cc:	d508      	bpl.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80099ce:	4974      	ldr	r1, [pc, #464]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099d0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80099d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80099d6:	f022 020c 	bic.w	r2, r2, #12
 80099da:	4302      	orrs	r2, r0
 80099dc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80099e0:	075f      	lsls	r7, r3, #29
 80099e2:	d508      	bpl.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80099e4:	496e      	ldr	r1, [pc, #440]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80099e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80099ec:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80099f0:	4302      	orrs	r2, r0
 80099f2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099f6:	069d      	lsls	r5, r3, #26
 80099f8:	d508      	bpl.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099fa:	4969      	ldr	r1, [pc, #420]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80099fc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80099fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009a02:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009a06:	4302      	orrs	r2, r0
 8009a08:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009a0c:	0598      	lsls	r0, r3, #22
 8009a0e:	d508      	bpl.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x146>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a10:	4963      	ldr	r1, [pc, #396]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a12:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8009a14:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009a18:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8009a1c:	4302      	orrs	r2, r0
 8009a1e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009a22:	0559      	lsls	r1, r3, #21
 8009a24:	d508      	bpl.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a26:	495e      	ldr	r1, [pc, #376]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a28:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009a2a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009a2e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8009a32:	4302      	orrs	r2, r0
 8009a34:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a38:	065a      	lsls	r2, r3, #25
 8009a3a:	d508      	bpl.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x172>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a3c:	4958      	ldr	r1, [pc, #352]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a3e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009a40:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009a44:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009a48:	4302      	orrs	r2, r0
 8009a4a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a4e:	061f      	lsls	r7, r3, #24
 8009a50:	d508      	bpl.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x188>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a52:	4953      	ldr	r1, [pc, #332]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a54:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009a56:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009a5a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009a5e:	4302      	orrs	r2, r0
 8009a60:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a64:	05dd      	lsls	r5, r3, #23
 8009a66:	d508      	bpl.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a68:	494d      	ldr	r1, [pc, #308]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a6a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8009a6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009a70:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8009a74:	4302      	orrs	r2, r0
 8009a76:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009a7a:	0318      	lsls	r0, r3, #12
 8009a7c:	d50e      	bpl.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009a7e:	4948      	ldr	r1, [pc, #288]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a80:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8009a82:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009a86:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8009a8a:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009a8c:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009a90:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009a94:	d055      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x266>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009a96:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8009a9a:	d06c      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a9c:	0359      	lsls	r1, r3, #13
 8009a9e:	d50e      	bpl.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009aa0:	493f      	ldr	r1, [pc, #252]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009aa2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8009aa4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8009aa8:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8009aac:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009aae:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ab2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009ab6:	d049      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x270>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009ab8:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8009abc:	d064      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009abe:	045a      	lsls	r2, r3, #17
 8009ac0:	d50b      	bpl.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ac2:	4837      	ldr	r0, [pc, #220]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009ac4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8009ac6:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8009aca:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009ace:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009ad0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ad4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009ad8:	d044      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x288>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ada:	041b      	lsls	r3, r3, #16
 8009adc:	d508      	bpl.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009ade:	4a30      	ldr	r2, [pc, #192]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009ae0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009ae2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8009ae6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009aea:	430b      	orrs	r3, r1
 8009aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8009af0:	4630      	mov	r0, r6
 8009af2:	b003      	add	sp, #12
 8009af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8009af8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009afa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009afe:	659a      	str	r2, [r3, #88]	@ 0x58
 8009b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009b0a:	2701      	movs	r7, #1
 8009b0c:	e703      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8009b0e:	4824      	ldr	r0, [pc, #144]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009b10:	68c2      	ldr	r2, [r0, #12]
 8009b12:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009b16:	60c2      	str	r2, [r0, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b18:	4821      	ldr	r0, [pc, #132]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009b1a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8009b1e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8009b22:	430a      	orrs	r2, r1
 8009b24:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b28:	2600      	movs	r6, #0
 8009b2a:	e6ec      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b2c:	6823      	ldr	r3, [r4, #0]
        ret = HAL_TIMEOUT;
 8009b2e:	2603      	movs	r6, #3
    if(pwrclkchanged == SET)
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	f43f af3f 	beq.w	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b36:	491a      	ldr	r1, [pc, #104]	@ (8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009b38:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8009b3a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8009b3e:	658a      	str	r2, [r1, #88]	@ 0x58
 8009b40:	e738      	b.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b42:	68ca      	ldr	r2, [r1, #12]
 8009b44:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009b48:	60ca      	str	r2, [r1, #12]
 8009b4a:	e7a7      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b4c:	68ca      	ldr	r2, [r1, #12]
 8009b4e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009b52:	60ca      	str	r2, [r1, #12]
 8009b54:	e7b3      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009b56:	3004      	adds	r0, #4
 8009b58:	f7ff fe32 	bl	80097c0 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	b1e0      	cbz	r0, 8009b9a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	e6d0      	b.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009b64:	2102      	movs	r1, #2
 8009b66:	1d20      	adds	r0, r4, #4
 8009b68:	f7ff fe2a 	bl	80097c0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b6c:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d0b3      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b72:	4606      	mov	r6, r0
 8009b74:	e7b1      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b76:	2101      	movs	r1, #1
 8009b78:	1d20      	adds	r0, r4, #4
 8009b7a:	f7ff fe21 	bl	80097c0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b7e:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d08b      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b84:	4606      	mov	r6, r0
 8009b86:	e789      	b.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b88:	2101      	movs	r1, #1
 8009b8a:	1d20      	adds	r0, r4, #4
 8009b8c:	f7ff fe18 	bl	80097c0 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b90:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d093      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b96:	4606      	mov	r6, r0
 8009b98:	e791      	b.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b9a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	e7bb      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8009ba0:	40021000 	.word	0x40021000
 8009ba4:	40007000 	.word	0x40007000

08009ba8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop

08009bac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d116      	bne.n	8009be2 <HAL_TIM_Base_Start_IT+0x36>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bb4:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bb6:	4910      	ldr	r1, [pc, #64]	@ (8009bf8 <HAL_TIM_Base_Start_IT+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb8:	2202      	movs	r2, #2
 8009bba:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bbe:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bc0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bc2:	f042 0201 	orr.w	r2, r2, #1
 8009bc6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bc8:	d00d      	beq.n	8009be6 <HAL_TIM_Base_Start_IT+0x3a>
 8009bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bce:	d00a      	beq.n	8009be6 <HAL_TIM_Base_Start_IT+0x3a>
 8009bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8009bfc <HAL_TIM_Base_Start_IT+0x50>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d007      	beq.n	8009be6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    {
      __HAL_TIM_ENABLE(htim);
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	f042 0201 	orr.w	r2, r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8009bde:	2000      	movs	r0, #0
 8009be0:	4770      	bx	lr
    return HAL_ERROR;
 8009be2:	2001      	movs	r0, #1
}
 8009be4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009be6:	6899      	ldr	r1, [r3, #8]
 8009be8:	4a05      	ldr	r2, [pc, #20]	@ (8009c00 <HAL_TIM_Base_Start_IT+0x54>)
 8009bea:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bec:	2a06      	cmp	r2, #6
 8009bee:	d0f6      	beq.n	8009bde <HAL_TIM_Base_Start_IT+0x32>
 8009bf0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8009bf4:	d1ef      	bne.n	8009bd6 <HAL_TIM_Base_Start_IT+0x2a>
 8009bf6:	e7f2      	b.n	8009bde <HAL_TIM_Base_Start_IT+0x32>
 8009bf8:	40012c00 	.word	0x40012c00
 8009bfc:	40014000 	.word	0x40014000
 8009c00:	00010007 	.word	0x00010007

08009c04 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop

08009c08 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop

08009c0c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop

08009c10 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop

08009c14 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c14:	6803      	ldr	r3, [r0, #0]
 8009c16:	691a      	ldr	r2, [r3, #16]
 8009c18:	0791      	lsls	r1, r2, #30
{
 8009c1a:	b510      	push	{r4, lr}
 8009c1c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c1e:	d502      	bpl.n	8009c26 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	0792      	lsls	r2, r2, #30
 8009c24:	d468      	bmi.n	8009cf8 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c26:	691a      	ldr	r2, [r3, #16]
 8009c28:	0752      	lsls	r2, r2, #29
 8009c2a:	d502      	bpl.n	8009c32 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	0750      	lsls	r0, r2, #29
 8009c30:	d44f      	bmi.n	8009cd2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	0711      	lsls	r1, r2, #28
 8009c36:	d502      	bpl.n	8009c3e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c38:	68da      	ldr	r2, [r3, #12]
 8009c3a:	0712      	lsls	r2, r2, #28
 8009c3c:	d437      	bmi.n	8009cae <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c3e:	691a      	ldr	r2, [r3, #16]
 8009c40:	06d0      	lsls	r0, r2, #27
 8009c42:	d502      	bpl.n	8009c4a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c44:	68da      	ldr	r2, [r3, #12]
 8009c46:	06d1      	lsls	r1, r2, #27
 8009c48:	d41e      	bmi.n	8009c88 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c4a:	691a      	ldr	r2, [r3, #16]
 8009c4c:	07d2      	lsls	r2, r2, #31
 8009c4e:	d502      	bpl.n	8009c56 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	07d0      	lsls	r0, r2, #31
 8009c54:	d469      	bmi.n	8009d2a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c56:	691a      	ldr	r2, [r3, #16]
 8009c58:	0611      	lsls	r1, r2, #24
 8009c5a:	d502      	bpl.n	8009c62 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c5c:	68da      	ldr	r2, [r3, #12]
 8009c5e:	0612      	lsls	r2, r2, #24
 8009c60:	d46b      	bmi.n	8009d3a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c62:	691a      	ldr	r2, [r3, #16]
 8009c64:	05d0      	lsls	r0, r2, #23
 8009c66:	d502      	bpl.n	8009c6e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	0611      	lsls	r1, r2, #24
 8009c6c:	d46d      	bmi.n	8009d4a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c6e:	691a      	ldr	r2, [r3, #16]
 8009c70:	0652      	lsls	r2, r2, #25
 8009c72:	d502      	bpl.n	8009c7a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	0650      	lsls	r0, r2, #25
 8009c78:	d46f      	bmi.n	8009d5a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	0691      	lsls	r1, r2, #26
 8009c7e:	d502      	bpl.n	8009c86 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	0692      	lsls	r2, r2, #26
 8009c84:	d449      	bmi.n	8009d1a <HAL_TIM_IRQHandler+0x106>
}
 8009c86:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c88:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c8c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c8e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c90:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009c98:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c9a:	d16f      	bne.n	8009d7c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c9c:	f7ff ffb2 	bl	8009c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f7ff ffb3 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ca6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ca8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009caa:	7722      	strb	r2, [r4, #28]
 8009cac:	e7cd      	b.n	8009c4a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cae:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cb2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cb4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cb6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8009cbc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cbe:	d15a      	bne.n	8009d76 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc0:	f7ff ffa0 	bl	8009c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f7ff ffa1 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ccc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cce:	7722      	strb	r2, [r4, #28]
 8009cd0:	e7b5      	b.n	8009c3e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cd2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cd6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cd8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cda:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8009ce2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ce4:	d144      	bne.n	8009d70 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ce6:	f7ff ff8d 	bl	8009c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff ff8e 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cf0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cf2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cf4:	7722      	strb	r2, [r4, #28]
 8009cf6:	e79c      	b.n	8009c32 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cf8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cfc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cfe:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d00:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	0799      	lsls	r1, r3, #30
 8009d06:	d130      	bne.n	8009d6a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d08:	f7ff ff7c 	bl	8009c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f7ff ff7d 	bl	8009c0c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d12:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d14:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d16:	7722      	strb	r2, [r4, #28]
 8009d18:	e785      	b.n	8009c26 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d1a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8009d1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d20:	611a      	str	r2, [r3, #16]
}
 8009d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8009d26:	f000 b8a7 	b.w	8009e78 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d2a:	f06f 0201 	mvn.w	r2, #1
 8009d2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d30:	4620      	mov	r0, r4
 8009d32:	f7fa fc6b 	bl	800460c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	e78d      	b.n	8009c56 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d3a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009d3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 f89b 	bl	8009e7c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	e78b      	b.n	8009c62 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d4a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009d4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009d50:	4620      	mov	r0, r4
 8009d52:	f000 f895 	bl	8009e80 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	e789      	b.n	8009c6e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff ff55 	bl	8009c10 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d66:	6823      	ldr	r3, [r4, #0]
 8009d68:	e787      	b.n	8009c7a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8009d6a:	f7ff ff4d 	bl	8009c08 <HAL_TIM_IC_CaptureCallback>
 8009d6e:	e7d0      	b.n	8009d12 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d70:	f7ff ff4a 	bl	8009c08 <HAL_TIM_IC_CaptureCallback>
 8009d74:	e7bc      	b.n	8009cf0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d76:	f7ff ff47 	bl	8009c08 <HAL_TIM_IC_CaptureCallback>
 8009d7a:	e7a6      	b.n	8009cca <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d7c:	f7ff ff44 	bl	8009c08 <HAL_TIM_IC_CaptureCallback>
 8009d80:	e791      	b.n	8009ca6 <HAL_TIM_IRQHandler+0x92>
 8009d82:	bf00      	nop

08009d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d84:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d86:	4e21      	ldr	r6, [pc, #132]	@ (8009e0c <TIM_Base_SetConfig+0x88>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d88:	688c      	ldr	r4, [r1, #8]
  tmpcr1 = TIMx->CR1;
 8009d8a:	6803      	ldr	r3, [r0, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d8c:	694d      	ldr	r5, [r1, #20]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d8e:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d90:	42b0      	cmp	r0, r6
 8009d92:	d01c      	beq.n	8009dce <TIM_Base_SetConfig+0x4a>
 8009d94:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8009d98:	d010      	beq.n	8009dbc <TIM_Base_SetConfig+0x38>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d9a:	4e1d      	ldr	r6, [pc, #116]	@ (8009e10 <TIM_Base_SetConfig+0x8c>)
 8009d9c:	42b0      	cmp	r0, r6
 8009d9e:	d02a      	beq.n	8009df6 <TIM_Base_SetConfig+0x72>
 8009da0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8009da4:	42b0      	cmp	r0, r6
 8009da6:	d016      	beq.n	8009dd6 <TIM_Base_SetConfig+0x52>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dac:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009dae:	6003      	str	r3, [r0, #0]
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009db0:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009db2:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009db4:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8009db6:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8009db8:	6143      	str	r3, [r0, #20]
}
 8009dba:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009dbc:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dbe:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8009dc4:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dca:	430b      	orrs	r3, r1
 8009dcc:	e7ec      	b.n	8009da8 <TIM_Base_SetConfig+0x24>
    tmpcr1 |= Structure->CounterMode;
 8009dce:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8009dd4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dd6:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ddc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009de2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009de4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009de6:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009de8:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009dea:	690b      	ldr	r3, [r1, #16]
 8009dec:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009dee:	2301      	movs	r3, #1
}
 8009df0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 8009df2:	6143      	str	r3, [r0, #20]
}
 8009df4:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009df6:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dfc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e02:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8009e04:	6005      	str	r5, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e06:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009e08:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e0a:	e7ee      	b.n	8009dea <TIM_Base_SetConfig+0x66>
 8009e0c:	40012c00 	.word	0x40012c00
 8009e10:	40014000 	.word	0x40014000

08009e14 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009e14:	b370      	cbz	r0, 8009e74 <HAL_TIM_Base_Init+0x60>
{
 8009e16:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8009e18:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009e22:	b313      	cbz	r3, 8009e6a <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e24:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8009e26:	2302      	movs	r3, #2
 8009e28:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e2c:	f851 0b04 	ldr.w	r0, [r1], #4
 8009e30:	f7ff ffa8 	bl	8009d84 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e34:	2301      	movs	r3, #1
 8009e36:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e3a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8009e3e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8009e42:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8009e46:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8009e4a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e52:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009e56:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8009e5a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8009e5e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009e62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8009e66:	2000      	movs	r0, #0
}
 8009e68:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009e6a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009e6e:	f7ff fe9b 	bl	8009ba8 <HAL_TIM_Base_MspInit>
 8009e72:	e7d7      	b.n	8009e24 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8009e74:	2001      	movs	r0, #1
}
 8009e76:	4770      	bx	lr

08009e78 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop

08009e7c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop

08009e80 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop

08009e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e84:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e86:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8e:	e842 3100 	strex	r1, r3, [r2]
 8009e92:	2900      	cmp	r1, #0
 8009e94:	d1f7      	bne.n	8009e86 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	f102 0308 	add.w	r3, r2, #8
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea2:	f102 0c08 	add.w	ip, r2, #8
 8009ea6:	e84c 3100 	strex	r1, r3, [ip]
 8009eaa:	2900      	cmp	r1, #0
 8009eac:	d1f3      	bne.n	8009e96 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eae:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d005      	beq.n	8009ec0 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009eba:	6643      	str	r3, [r0, #100]	@ 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ebc:	6603      	str	r3, [r0, #96]	@ 0x60
}
 8009ebe:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ec4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec8:	e842 3100 	strex	r1, r3, [r2]
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d0f1      	beq.n	8009eb4 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed0:	e852 3f00 	ldrex	r3, [r2]
 8009ed4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	e842 3100 	strex	r1, r3, [r2]
 8009edc:	2900      	cmp	r1, #0
 8009ede:	d1ef      	bne.n	8009ec0 <UART_EndRxTransfer+0x3c>
 8009ee0:	e7e8      	b.n	8009eb4 <UART_EndRxTransfer+0x30>
 8009ee2:	bf00      	nop

08009ee4 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop

08009ee8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ee8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009eea:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8009eec:	2300      	movs	r3, #0
 8009eee:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009ef2:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ef6:	f7f8 fa8d 	bl	8002414 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009efa:	bd08      	pop	{r3, pc}

08009efc <HAL_UARTEx_RxEventCallback>:
}
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop

08009f00 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f00:	6803      	ldr	r3, [r0, #0]
 8009f02:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f04:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f06:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  if (errorflags == 0U)
 8009f0a:	ea12 0f0c 	tst.w	r2, ip
{
 8009f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f12:	689d      	ldr	r5, [r3, #8]
{
 8009f14:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8009f16:	d14f      	bne.n	8009fb8 <HAL_UART_IRQHandler+0xb8>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f18:	0697      	lsls	r7, r2, #26
 8009f1a:	d502      	bpl.n	8009f22 <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f1c:	068e      	lsls	r6, r1, #26
 8009f1e:	f100 80b8 	bmi.w	800a092 <HAL_UART_IRQHandler+0x192>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f22:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8009f24:	2801      	cmp	r0, #1
 8009f26:	d025      	beq.n	8009f74 <HAL_UART_IRQHandler+0x74>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009f28:	02d0      	lsls	r0, r2, #11
 8009f2a:	d502      	bpl.n	8009f32 <HAL_UART_IRQHandler+0x32>
 8009f2c:	026f      	lsls	r7, r5, #9
 8009f2e:	f100 80b5 	bmi.w	800a09c <HAL_UART_IRQHandler+0x19c>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009f32:	0616      	lsls	r6, r2, #24
 8009f34:	d415      	bmi.n	8009f62 <HAL_UART_IRQHandler+0x62>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f36:	0650      	lsls	r0, r2, #25
 8009f38:	d501      	bpl.n	8009f3e <HAL_UART_IRQHandler+0x3e>
 8009f3a:	064a      	lsls	r2, r1, #25
 8009f3c:	d401      	bmi.n	8009f42 <HAL_UART_IRQHandler+0x42>
}
 8009f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	e843 2100 	strex	r1, r2, [r3]
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	d1f7      	bne.n	8009f42 <HAL_UART_IRQHandler+0x42>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f52:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f54:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009f56:	67a2      	str	r2, [r4, #120]	@ 0x78
  huart->TxISR = NULL;
 8009f58:	66a3      	str	r3, [r4, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f7ff ffc2 	bl	8009ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f60:	e7ed      	b.n	8009f3e <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009f62:	060d      	lsls	r5, r1, #24
 8009f64:	d5e7      	bpl.n	8009f36 <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 8009f66:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d0e8      	beq.n	8009f3e <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 8009f6c:	4620      	mov	r0, r4
}
 8009f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8009f72:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f74:	06d6      	lsls	r6, r2, #27
 8009f76:	d5d7      	bpl.n	8009f28 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f78:	06c8      	lsls	r0, r1, #27
 8009f7a:	d5d5      	bpl.n	8009f28 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f7c:	2210      	movs	r2, #16
 8009f7e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f80:	689a      	ldr	r2, [r3, #8]
 8009f82:	0657      	lsls	r7, r2, #25
 8009f84:	f140 810c 	bpl.w	800a1a0 <HAL_UART_IRQHandler+0x2a0>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f88:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8009f8a:	6801      	ldr	r1, [r0, #0]
 8009f8c:	684a      	ldr	r2, [r1, #4]
 8009f8e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8009f90:	2a00      	cmp	r2, #0
 8009f92:	d0d4      	beq.n	8009f3e <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f94:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 8009f98:	4295      	cmp	r5, r2
 8009f9a:	d9d0      	bls.n	8009f3e <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 8009f9c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009fa0:	680a      	ldr	r2, [r1, #0]
 8009fa2:	0696      	lsls	r6, r2, #26
 8009fa4:	f140 80cc 	bpl.w	800a140 <HAL_UART_IRQHandler+0x240>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fa8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8009fac:	1ae9      	subs	r1, r5, r3
 8009fae:	4620      	mov	r0, r4
 8009fb0:	b289      	uxth	r1, r1
 8009fb2:	f7ff ffa3 	bl	8009efc <HAL_UARTEx_RxEventCallback>
 8009fb6:	e7c2      	b.n	8009f3e <HAL_UART_IRQHandler+0x3e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009fb8:	f015 0701 	ands.w	r7, r5, #1
 8009fbc:	461e      	mov	r6, r3
 8009fbe:	f040 8090 	bne.w	800a0e2 <HAL_UART_IRQHandler+0x1e2>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009fc2:	4894      	ldr	r0, [pc, #592]	@ (800a214 <HAL_UART_IRQHandler+0x314>)
 8009fc4:	4201      	tst	r1, r0
 8009fc6:	d0ac      	beq.n	8009f22 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fc8:	07d5      	lsls	r5, r2, #31
 8009fca:	d50e      	bpl.n	8009fea <HAL_UART_IRQHandler+0xea>
 8009fcc:	05c8      	lsls	r0, r1, #23
 8009fce:	f140 80b3 	bpl.w	800a138 <HAL_UART_IRQHandler+0x238>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fd6:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8009fda:	f040 0001 	orr.w	r0, r0, #1
 8009fde:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fe2:	0790      	lsls	r0, r2, #30
 8009fe4:	d566      	bpl.n	800a0b4 <HAL_UART_IRQHandler+0x1b4>
 8009fe6:	2f00      	cmp	r7, #0
 8009fe8:	d17f      	bne.n	800a0ea <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fea:	0755      	lsls	r5, r2, #29
 8009fec:	f140 8087 	bpl.w	800a0fe <HAL_UART_IRQHandler+0x1fe>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ff0:	0717      	lsls	r7, r2, #28
 8009ff2:	f100 8096 	bmi.w	800a122 <HAL_UART_IRQHandler+0x222>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ff6:	0515      	lsls	r5, r2, #20
 8009ff8:	d50a      	bpl.n	800a010 <HAL_UART_IRQHandler+0x110>
 8009ffa:	0148      	lsls	r0, r1, #5
 8009ffc:	d508      	bpl.n	800a010 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ffe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a002:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a004:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a008:	f043 0320 	orr.w	r3, r3, #32
 800a00c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a010:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a014:	2b00      	cmp	r3, #0
 800a016:	d092      	beq.n	8009f3e <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a018:	0692      	lsls	r2, r2, #26
 800a01a:	d502      	bpl.n	800a022 <HAL_UART_IRQHandler+0x122>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a01c:	068b      	lsls	r3, r1, #26
 800a01e:	f100 8083 	bmi.w	800a128 <HAL_UART_IRQHandler+0x228>
      errorcode = huart->ErrorCode;
 800a022:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a026:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a028:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a02c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a030:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 800a034:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a036:	f000 80e7 	beq.w	800a208 <HAL_UART_IRQHandler+0x308>
        UART_EndRxTransfer(huart);
 800a03a:	f7ff ff23 	bl	8009e84 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a03e:	68b3      	ldr	r3, [r6, #8]
 800a040:	065f      	lsls	r7, r3, #25
 800a042:	d565      	bpl.n	800a110 <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	f106 0308 	add.w	r3, r6, #8
 800a048:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a04c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	f106 0108 	add.w	r1, r6, #8
 800a054:	e841 3200 	strex	r2, r3, [r1]
 800a058:	b162      	cbz	r2, 800a074 <HAL_UART_IRQHandler+0x174>
 800a05a:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05c:	f103 0208 	add.w	r2, r3, #8
 800a060:	e852 2f00 	ldrex	r2, [r2]
 800a064:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a068:	f103 0008 	add.w	r0, r3, #8
 800a06c:	e840 2100 	strex	r1, r2, [r0]
 800a070:	2900      	cmp	r1, #0
 800a072:	d1f3      	bne.n	800a05c <HAL_UART_IRQHandler+0x15c>
          if (huart->hdmarx != NULL)
 800a074:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800a076:	2800      	cmp	r0, #0
 800a078:	d04a      	beq.n	800a110 <HAL_UART_IRQHandler+0x210>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a07a:	4b67      	ldr	r3, [pc, #412]	@ (800a218 <HAL_UART_IRQHandler+0x318>)
 800a07c:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a07e:	f7fd fd47 	bl	8007b10 <HAL_DMA_Abort_IT>
 800a082:	2800      	cmp	r0, #0
 800a084:	f43f af5b 	beq.w	8009f3e <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a088:	6f20      	ldr	r0, [r4, #112]	@ 0x70
}
 800a08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a08e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a090:	4718      	bx	r3
      if (huart->RxISR != NULL)
 800a092:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 800a094:	2b00      	cmp	r3, #0
 800a096:	f47f af6a 	bne.w	8009f6e <HAL_UART_IRQHandler+0x6e>
 800a09a:	e750      	b.n	8009f3e <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a09c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800a0a0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a0a2:	621a      	str	r2, [r3, #32]
}
 800a0a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800a0a8:	f000 bc80 	b.w	800a9ac <HAL_UARTEx_WakeupCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0ac:	05c8      	lsls	r0, r1, #23
 800a0ae:	d490      	bmi.n	8009fd2 <HAL_UART_IRQHandler+0xd2>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0b0:	0795      	lsls	r5, r2, #30
 800a0b2:	d41a      	bmi.n	800a0ea <HAL_UART_IRQHandler+0x1ea>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0b4:	0750      	lsls	r0, r2, #29
 800a0b6:	d522      	bpl.n	800a0fe <HAL_UART_IRQHandler+0x1fe>
 800a0b8:	2f00      	cmp	r7, #0
 800a0ba:	d099      	beq.n	8009ff0 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0bc:	2004      	movs	r0, #4
 800a0be:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0c0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0c4:	0715      	lsls	r5, r2, #28
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0c6:	f040 0002 	orr.w	r0, r0, #2
 800a0ca:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0ce:	d592      	bpl.n	8009ff6 <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0d0:	2008      	movs	r0, #8
 800a0d2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0d4:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800a0d8:	f040 0008 	orr.w	r0, r0, #8
 800a0dc:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
 800a0e0:	e789      	b.n	8009ff6 <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0e2:	07d0      	lsls	r0, r2, #31
 800a0e4:	d4e2      	bmi.n	800a0ac <HAL_UART_IRQHandler+0x1ac>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0e6:	0795      	lsls	r5, r2, #30
 800a0e8:	d516      	bpl.n	800a118 <HAL_UART_IRQHandler+0x218>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0ea:	2002      	movs	r0, #2
 800a0ec:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0ee:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800a0f2:	f040 0004 	orr.w	r0, r0, #4
 800a0f6:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0fa:	0750      	lsls	r0, r2, #29
 800a0fc:	d4de      	bmi.n	800a0bc <HAL_UART_IRQHandler+0x1bc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0fe:	0710      	lsls	r0, r2, #28
 800a100:	f57f af79 	bpl.w	8009ff6 <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a104:	f001 0020 	and.w	r0, r1, #32
 800a108:	4338      	orrs	r0, r7
 800a10a:	f43f af74 	beq.w	8009ff6 <HAL_UART_IRQHandler+0xf6>
 800a10e:	e7df      	b.n	800a0d0 <HAL_UART_IRQHandler+0x1d0>
            HAL_UART_ErrorCallback(huart);
 800a110:	4620      	mov	r0, r4
 800a112:	f7f8 f97f 	bl	8002414 <HAL_UART_ErrorCallback>
 800a116:	e712      	b.n	8009f3e <HAL_UART_IRQHandler+0x3e>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a118:	0757      	lsls	r7, r2, #29
 800a11a:	d4cf      	bmi.n	800a0bc <HAL_UART_IRQHandler+0x1bc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a11c:	0710      	lsls	r0, r2, #28
 800a11e:	d4d7      	bmi.n	800a0d0 <HAL_UART_IRQHandler+0x1d0>
 800a120:	e769      	b.n	8009ff6 <HAL_UART_IRQHandler+0xf6>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a122:	068d      	lsls	r5, r1, #26
 800a124:	d4d4      	bmi.n	800a0d0 <HAL_UART_IRQHandler+0x1d0>
 800a126:	e766      	b.n	8009ff6 <HAL_UART_IRQHandler+0xf6>
        if (huart->RxISR != NULL)
 800a128:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f43f af79 	beq.w	800a022 <HAL_UART_IRQHandler+0x122>
          huart->RxISR(huart);
 800a130:	4620      	mov	r0, r4
 800a132:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a134:	6826      	ldr	r6, [r4, #0]
 800a136:	e774      	b.n	800a022 <HAL_UART_IRQHandler+0x122>
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a138:	0795      	lsls	r5, r2, #30
 800a13a:	f53f af56 	bmi.w	8009fea <HAL_UART_IRQHandler+0xea>
 800a13e:	e7b9      	b.n	800a0b4 <HAL_UART_IRQHandler+0x1b4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a140:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a144:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a148:	e843 2100 	strex	r1, r2, [r3]
 800a14c:	2900      	cmp	r1, #0
 800a14e:	d1f7      	bne.n	800a140 <HAL_UART_IRQHandler+0x240>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	f103 0208 	add.w	r2, r3, #8
 800a154:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a158:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15c:	f103 0508 	add.w	r5, r3, #8
 800a160:	e845 2100 	strex	r1, r2, [r5]
 800a164:	2900      	cmp	r1, #0
 800a166:	d1f3      	bne.n	800a150 <HAL_UART_IRQHandler+0x250>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a168:	f103 0208 	add.w	r2, r3, #8
 800a16c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a174:	f103 0508 	add.w	r5, r3, #8
 800a178:	e845 2100 	strex	r1, r2, [r5]
 800a17c:	2900      	cmp	r1, #0
 800a17e:	d1f3      	bne.n	800a168 <HAL_UART_IRQHandler+0x268>
          huart->RxState = HAL_UART_STATE_READY;
 800a180:	2220      	movs	r2, #32
 800a182:	67e2      	str	r2, [r4, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a184:	6621      	str	r1, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a18a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	e843 2100 	strex	r1, r2, [r3]
 800a192:	2900      	cmp	r1, #0
 800a194:	d1f7      	bne.n	800a186 <HAL_UART_IRQHandler+0x286>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a196:	f7fd fc95 	bl	8007ac4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a19a:	f8b4 5058 	ldrh.w	r5, [r4, #88]	@ 0x58
 800a19e:	e703      	b.n	8009fa8 <HAL_UART_IRQHandler+0xa8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1a0:	f8b4 105a 	ldrh.w	r1, [r4, #90]	@ 0x5a
      if ((huart->RxXferCount > 0U)
 800a1a4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1a8:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
      if ((huart->RxXferCount > 0U)
 800a1ac:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1ae:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	f43f aec4 	beq.w	8009f3e <HAL_UART_IRQHandler+0x3e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1b6:	1a41      	subs	r1, r0, r1
 800a1b8:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a1ba:	2900      	cmp	r1, #0
 800a1bc:	f43f aebf 	beq.w	8009f3e <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1c4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	e843 2000 	strex	r0, r2, [r3]
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d1f7      	bne.n	800a1c0 <HAL_UART_IRQHandler+0x2c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	f103 0208 	add.w	r2, r3, #8
 800a1d4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1d8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	f103 0508 	add.w	r5, r3, #8
 800a1e0:	e845 2000 	strex	r0, r2, [r5]
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d1f3      	bne.n	800a1d0 <HAL_UART_IRQHandler+0x2d0>
        huart->RxState = HAL_UART_STATE_READY;
 800a1e8:	2220      	movs	r2, #32
 800a1ea:	67e2      	str	r2, [r4, #124]	@ 0x7c
        huart->RxISR = NULL;
 800a1ec:	6660      	str	r0, [r4, #100]	@ 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ee:	6620      	str	r0, [r4, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	e843 2000 	strex	r0, r2, [r3]
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d1f7      	bne.n	800a1f0 <HAL_UART_IRQHandler+0x2f0>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a200:	4620      	mov	r0, r4
 800a202:	f7ff fe7b 	bl	8009efc <HAL_UARTEx_RxEventCallback>
 800a206:	e69a      	b.n	8009f3e <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 800a208:	f7f8 f904 	bl	8002414 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a20c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 800a210:	e695      	b.n	8009f3e <HAL_UART_IRQHandler+0x3e>
 800a212:	bf00      	nop
 800a214:	04000120 	.word	0x04000120
 800a218:	08009ee9 	.word	0x08009ee9

0800a21c <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a21c:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a21e:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a220:	2922      	cmp	r1, #34	@ 0x22
{
 800a222:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800a224:	f8b0 305c 	ldrh.w	r3, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a228:	d005      	beq.n	800a236 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a22a:	8b13      	ldrh	r3, [r2, #24]
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	f043 0308 	orr.w	r3, r3, #8
 800a232:	8313      	strh	r3, [r2, #24]
  }
}
 800a234:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a236:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a238:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800a23a:	400b      	ands	r3, r1
 800a23c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800a23e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 800a242:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 800a244:	3b01      	subs	r3, #1
 800a246:	b29b      	uxth	r3, r3
 800a248:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 800a24c:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr++;
 800a250:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 800a252:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 800a254:	6542      	str	r2, [r0, #84]	@ 0x54
    if (huart->RxXferCount == 0U)
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1ec      	bne.n	800a234 <UART_RxISR_8BIT+0x18>
 800a25a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a260:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a264:	e843 2100 	strex	r1, r2, [r3]
 800a268:	2900      	cmp	r1, #0
 800a26a:	d1f7      	bne.n	800a25c <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	f103 0208 	add.w	r2, r3, #8
 800a270:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a274:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a278:	f103 0c08 	add.w	ip, r3, #8
 800a27c:	e84c 2100 	strex	r1, r2, [ip]
 800a280:	2900      	cmp	r1, #0
 800a282:	d1f3      	bne.n	800a26c <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 800a284:	2220      	movs	r2, #32
 800a286:	67c2      	str	r2, [r0, #124]	@ 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a288:	6e02      	ldr	r2, [r0, #96]	@ 0x60
      huart->RxISR = NULL;
 800a28a:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a28c:	2a01      	cmp	r2, #1
 800a28e:	d112      	bne.n	800a2b6 <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a290:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a292:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a296:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	e843 2100 	strex	r1, r2, [r3]
 800a29e:	2900      	cmp	r1, #0
 800a2a0:	d1f7      	bne.n	800a292 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2a2:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2a4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2a8:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2aa:	bf44      	itt	mi
 800a2ac:	2210      	movmi	r2, #16
 800a2ae:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2b0:	f7ff fe24 	bl	8009efc <HAL_UARTEx_RxEventCallback>
}
 800a2b4:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800a2b6:	f7f8 f88d 	bl	80023d4 <HAL_UART_RxCpltCallback>
}
 800a2ba:	bd08      	pop	{r3, pc}

0800a2bc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2bc:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 800a2be:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2c2:	2922      	cmp	r1, #34	@ 0x22
{
 800a2c4:	b508      	push	{r3, lr}
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2c6:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2c8:	d005      	beq.n	800a2d6 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2ca:	8b1a      	ldrh	r2, [r3, #24]
 800a2cc:	b292      	uxth	r2, r2
 800a2ce:	f042 0208 	orr.w	r2, r2, #8
 800a2d2:	831a      	strh	r2, [r3, #24]
  }
}
 800a2d4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2d6:	f8b3 c024 	ldrh.w	ip, [r3, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800a2da:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 800a2dc:	ea02 020c 	and.w	r2, r2, ip
 800a2e0:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 800a2e4:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
    huart->pRxBuffPtr += 2U;
 800a2e8:	6541      	str	r1, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 800a2ea:	3a01      	subs	r2, #1
 800a2ec:	b292      	uxth	r2, r2
 800a2ee:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 800a2f2:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
 800a2f6:	b292      	uxth	r2, r2
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	d1eb      	bne.n	800a2d4 <UART_RxISR_16BIT+0x18>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a300:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	e843 2100 	strex	r1, r2, [r3]
 800a308:	2900      	cmp	r1, #0
 800a30a:	d1f7      	bne.n	800a2fc <UART_RxISR_16BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	f103 0208 	add.w	r2, r3, #8
 800a310:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a314:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a318:	f103 0c08 	add.w	ip, r3, #8
 800a31c:	e84c 2100 	strex	r1, r2, [ip]
 800a320:	2900      	cmp	r1, #0
 800a322:	d1f3      	bne.n	800a30c <UART_RxISR_16BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 800a324:	2220      	movs	r2, #32
 800a326:	67c2      	str	r2, [r0, #124]	@ 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a328:	6e02      	ldr	r2, [r0, #96]	@ 0x60
      huart->RxISR = NULL;
 800a32a:	6641      	str	r1, [r0, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a32c:	2a01      	cmp	r2, #1
 800a32e:	d112      	bne.n	800a356 <UART_RxISR_16BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a330:	6601      	str	r1, [r0, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a332:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a336:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33a:	e843 2100 	strex	r1, r2, [r3]
 800a33e:	2900      	cmp	r1, #0
 800a340:	d1f7      	bne.n	800a332 <UART_RxISR_16BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a342:	69da      	ldr	r2, [r3, #28]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a344:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a348:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a34a:	bf44      	itt	mi
 800a34c:	2210      	movmi	r2, #16
 800a34e:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a350:	f7ff fdd4 	bl	8009efc <HAL_UARTEx_RxEventCallback>
}
 800a354:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 800a356:	f7f8 f83d 	bl	80023d4 <HAL_UART_RxCpltCallback>
}
 800a35a:	bd08      	pop	{r3, pc}

0800a35c <UART_SetConfig>:
{
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a360:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a362:	6883      	ldr	r3, [r0, #8]
 800a364:	6900      	ldr	r0, [r0, #16]
 800a366:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a368:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a36a:	4303      	orrs	r3, r0
 800a36c:	430b      	orrs	r3, r1
 800a36e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a370:	496d      	ldr	r1, [pc, #436]	@ (800a528 <UART_SetConfig+0x1cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a372:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a374:	4029      	ands	r1, r5
 800a376:	430b      	orrs	r3, r1
 800a378:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a37a:	6853      	ldr	r3, [r2, #4]
 800a37c:	68e1      	ldr	r1, [r4, #12]
 800a37e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a382:	430b      	orrs	r3, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a384:	4969      	ldr	r1, [pc, #420]	@ (800a52c <UART_SetConfig+0x1d0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a386:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a388:	428a      	cmp	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a38a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a38c:	6891      	ldr	r1, [r2, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a38e:	d032      	beq.n	800a3f6 <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 800a390:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a392:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 800a396:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a398:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a39a:	4965      	ldr	r1, [pc, #404]	@ (800a530 <UART_SetConfig+0x1d4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a39c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a39e:	428a      	cmp	r2, r1
 800a3a0:	d115      	bne.n	800a3ce <UART_SetConfig+0x72>
 800a3a2:	4b64      	ldr	r3, [pc, #400]	@ (800a534 <UART_SetConfig+0x1d8>)
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3a8:	f003 0303 	and.w	r3, r3, #3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	f000 8088 	beq.w	800a4c2 <UART_SetConfig+0x166>
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	d072      	beq.n	800a49c <UART_SetConfig+0x140>
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d068      	beq.n	800a48c <UART_SetConfig+0x130>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3ba:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a3be:	f000 808d 	beq.w	800a4dc <UART_SetConfig+0x180>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3c2:	f7ff f9c9 	bl	8009758 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d16d      	bne.n	800a4a6 <UART_SetConfig+0x14a>
        pclk = (uint32_t) HSI_VALUE;
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	e024      	b.n	800a418 <UART_SetConfig+0xbc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3ce:	4b5a      	ldr	r3, [pc, #360]	@ (800a538 <UART_SetConfig+0x1dc>)
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d14d      	bne.n	800a470 <UART_SetConfig+0x114>
 800a3d4:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 800a3d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3dc:	f003 030c 	and.w	r3, r3, #12
 800a3e0:	2b0c      	cmp	r3, #12
 800a3e2:	d818      	bhi.n	800a416 <UART_SetConfig+0xba>
 800a3e4:	e8df f003 	tbb	[pc, r3]
 800a3e8:	17171774 	.word	0x17171774
 800a3ec:	17171752 	.word	0x17171752
 800a3f0:	1717176d 	.word	0x1717176d
 800a3f4:	5a          	.byte	0x5a
 800a3f5:	00          	.byte	0x00
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3f6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a3fa:	430b      	orrs	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3fc:	484d      	ldr	r0, [pc, #308]	@ (800a534 <UART_SetConfig+0x1d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3fe:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a400:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800a404:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a40c:	d05e      	beq.n	800a4cc <UART_SetConfig+0x170>
 800a40e:	d907      	bls.n	800a420 <UART_SetConfig+0xc4>
 800a410:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a414:	d00c      	beq.n	800a430 <UART_SetConfig+0xd4>
        ret = HAL_ERROR;
 800a416:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800a418:	2300      	movs	r3, #0
 800a41a:	e9c4 3319 	strd	r3, r3, [r4, #100]	@ 0x64
}
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a420:	b30b      	cbz	r3, 800a466 <UART_SetConfig+0x10a>
 800a422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a426:	d1f6      	bne.n	800a416 <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 800a428:	f7fe fd6a 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800a42c:	b910      	cbnz	r0, 800a434 <UART_SetConfig+0xd8>
 800a42e:	e7cc      	b.n	800a3ca <UART_SetConfig+0x6e>
        pclk = (uint32_t) LSE_VALUE;
 800a430:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a434:	6862      	ldr	r2, [r4, #4]
 800a436:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800a43a:	4283      	cmp	r3, r0
 800a43c:	d8eb      	bhi.n	800a416 <UART_SetConfig+0xba>
 800a43e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800a442:	d8e8      	bhi.n	800a416 <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a444:	0851      	lsrs	r1, r2, #1
 800a446:	2300      	movs	r3, #0
 800a448:	468c      	mov	ip, r1
 800a44a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800a44e:	4619      	mov	r1, r3
 800a450:	fbe0 c105 	umlal	ip, r1, r0, r5
 800a454:	4660      	mov	r0, ip
 800a456:	f7f6 fd75 	bl	8000f44 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a45a:	4b38      	ldr	r3, [pc, #224]	@ (800a53c <UART_SetConfig+0x1e0>)
 800a45c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800a460:	429a      	cmp	r2, r3
 800a462:	d8d8      	bhi.n	800a416 <UART_SetConfig+0xba>
 800a464:	e02a      	b.n	800a4bc <UART_SetConfig+0x160>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a466:	f7ff f965 	bl	8009734 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d1e2      	bne.n	800a434 <UART_SetConfig+0xd8>
 800a46e:	e7ac      	b.n	800a3ca <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a470:	4b33      	ldr	r3, [pc, #204]	@ (800a540 <UART_SetConfig+0x1e4>)
 800a472:	429a      	cmp	r2, r3
 800a474:	d1cf      	bne.n	800a416 <UART_SetConfig+0xba>
 800a476:	4b2f      	ldr	r3, [pc, #188]	@ (800a534 <UART_SetConfig+0x1d8>)
 800a478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a47c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a480:	2b20      	cmp	r3, #32
 800a482:	d01e      	beq.n	800a4c2 <UART_SetConfig+0x166>
 800a484:	d808      	bhi.n	800a498 <UART_SetConfig+0x13c>
 800a486:	b31b      	cbz	r3, 800a4d0 <UART_SetConfig+0x174>
 800a488:	2b10      	cmp	r3, #16
 800a48a:	d1c4      	bne.n	800a416 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a48c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a490:	d043      	beq.n	800a51a <UART_SetConfig+0x1be>
        pclk = HAL_RCC_GetSysClockFreq();
 800a492:	f7fe fd35 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
        break;
 800a496:	e796      	b.n	800a3c6 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a498:	2b30      	cmp	r3, #48	@ 0x30
 800a49a:	d1bc      	bne.n	800a416 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a49c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a4a0:	d038      	beq.n	800a514 <UART_SetConfig+0x1b8>
        pclk = (uint32_t) LSE_VALUE;
 800a4a2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4a6:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800a4b0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b4:	f1a0 0310 	sub.w	r3, r0, #16
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d8ac      	bhi.n	800a416 <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4bc:	6823      	ldr	r3, [r4, #0]
 800a4be:	60d8      	str	r0, [r3, #12]
 800a4c0:	e783      	b.n	800a3ca <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4c2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a4c6:	d023      	beq.n	800a510 <UART_SetConfig+0x1b4>
        pclk = (uint32_t) HSI_VALUE;
 800a4c8:	481e      	ldr	r0, [pc, #120]	@ (800a544 <UART_SetConfig+0x1e8>)
 800a4ca:	e7ec      	b.n	800a4a6 <UART_SetConfig+0x14a>
        pclk = (uint32_t) HSI_VALUE;
 800a4cc:	481d      	ldr	r0, [pc, #116]	@ (800a544 <UART_SetConfig+0x1e8>)
 800a4ce:	e7b1      	b.n	800a434 <UART_SetConfig+0xd8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4d0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800a4d4:	d024      	beq.n	800a520 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4d6:	f7ff f92d 	bl	8009734 <HAL_RCC_GetPCLK1Freq>
        break;
 800a4da:	e774      	b.n	800a3c6 <UART_SetConfig+0x6a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4dc:	f7ff f93c 	bl	8009758 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f43f af72 	beq.w	800a3ca <UART_SetConfig+0x6e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4e6:	0043      	lsls	r3, r0, #1
 800a4e8:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4ea:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4ee:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a4f2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4f6:	f1a3 0210 	sub.w	r2, r3, #16
 800a4fa:	428a      	cmp	r2, r1
 800a4fc:	d88b      	bhi.n	800a416 <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4fe:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800a502:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a504:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a506:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800a50a:	4313      	orrs	r3, r2
 800a50c:	60cb      	str	r3, [r1, #12]
 800a50e:	e75c      	b.n	800a3ca <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a510:	4b0d      	ldr	r3, [pc, #52]	@ (800a548 <UART_SetConfig+0x1ec>)
 800a512:	e7e9      	b.n	800a4e8 <UART_SetConfig+0x18c>
 800a514:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a518:	e7e6      	b.n	800a4e8 <UART_SetConfig+0x18c>
        pclk = HAL_RCC_GetSysClockFreq();
 800a51a:	f7fe fcf1 	bl	8008f00 <HAL_RCC_GetSysClockFreq>
        break;
 800a51e:	e7df      	b.n	800a4e0 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a520:	f7ff f908 	bl	8009734 <HAL_RCC_GetPCLK1Freq>
        break;
 800a524:	e7dc      	b.n	800a4e0 <UART_SetConfig+0x184>
 800a526:	bf00      	nop
 800a528:	efff69f3 	.word	0xefff69f3
 800a52c:	40008000 	.word	0x40008000
 800a530:	40013800 	.word	0x40013800
 800a534:	40021000 	.word	0x40021000
 800a538:	40004400 	.word	0x40004400
 800a53c:	000ffcff 	.word	0x000ffcff
 800a540:	40004800 	.word	0x40004800
 800a544:	00f42400 	.word	0x00f42400
 800a548:	01e84800 	.word	0x01e84800

0800a54c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a54c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a54e:	07da      	lsls	r2, r3, #31
{
 800a550:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a552:	d506      	bpl.n	800a562 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a554:	6801      	ldr	r1, [r0, #0]
 800a556:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800a558:	684a      	ldr	r2, [r1, #4]
 800a55a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a55e:	4322      	orrs	r2, r4
 800a560:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a562:	079c      	lsls	r4, r3, #30
 800a564:	d506      	bpl.n	800a574 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a566:	6801      	ldr	r1, [r0, #0]
 800a568:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800a56a:	684a      	ldr	r2, [r1, #4]
 800a56c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a570:	4322      	orrs	r2, r4
 800a572:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a574:	0759      	lsls	r1, r3, #29
 800a576:	d506      	bpl.n	800a586 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a578:	6801      	ldr	r1, [r0, #0]
 800a57a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800a57c:	684a      	ldr	r2, [r1, #4]
 800a57e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a582:	4322      	orrs	r2, r4
 800a584:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a586:	071a      	lsls	r2, r3, #28
 800a588:	d506      	bpl.n	800a598 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a58a:	6801      	ldr	r1, [r0, #0]
 800a58c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800a58e:	684a      	ldr	r2, [r1, #4]
 800a590:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a594:	4322      	orrs	r2, r4
 800a596:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a598:	06dc      	lsls	r4, r3, #27
 800a59a:	d506      	bpl.n	800a5aa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a59c:	6801      	ldr	r1, [r0, #0]
 800a59e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800a5a0:	688a      	ldr	r2, [r1, #8]
 800a5a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a5a6:	4322      	orrs	r2, r4
 800a5a8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5aa:	0699      	lsls	r1, r3, #26
 800a5ac:	d506      	bpl.n	800a5bc <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ae:	6801      	ldr	r1, [r0, #0]
 800a5b0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800a5b2:	688a      	ldr	r2, [r1, #8]
 800a5b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a5b8:	4322      	orrs	r2, r4
 800a5ba:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5bc:	065a      	lsls	r2, r3, #25
 800a5be:	d509      	bpl.n	800a5d4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5c0:	6801      	ldr	r1, [r0, #0]
 800a5c2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800a5c4:	684a      	ldr	r2, [r1, #4]
 800a5c6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800a5ca:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5cc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5d0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5d2:	d00b      	beq.n	800a5ec <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5d4:	061b      	lsls	r3, r3, #24
 800a5d6:	d506      	bpl.n	800a5e6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5d8:	6802      	ldr	r2, [r0, #0]
 800a5da:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800a5dc:	6853      	ldr	r3, [r2, #4]
 800a5de:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800a5e2:	430b      	orrs	r3, r1
 800a5e4:	6053      	str	r3, [r2, #4]
}
 800a5e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ea:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5ec:	684a      	ldr	r2, [r1, #4]
 800a5ee:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800a5f0:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800a5f4:	4322      	orrs	r2, r4
 800a5f6:	604a      	str	r2, [r1, #4]
 800a5f8:	e7ec      	b.n	800a5d4 <UART_AdvFeatureConfig+0x88>
 800a5fa:	bf00      	nop

0800a5fc <UART_WaitOnFlagUntilTimeout>:
{
 800a5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a604:	6805      	ldr	r5, [r0, #0]
{
 800a606:	4681      	mov	r9, r0
 800a608:	460f      	mov	r7, r1
 800a60a:	4616      	mov	r6, r2
 800a60c:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a60e:	e002      	b.n	800a616 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 800a610:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a614:	d10a      	bne.n	800a62c <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a616:	69ec      	ldr	r4, [r5, #28]
 800a618:	ea37 0404 	bics.w	r4, r7, r4
 800a61c:	bf0c      	ite	eq
 800a61e:	2401      	moveq	r4, #1
 800a620:	2400      	movne	r4, #0
 800a622:	42b4      	cmp	r4, r6
 800a624:	d0f4      	beq.n	800a610 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800a626:	2000      	movs	r0, #0
}
 800a628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a62c:	f7fc fb7a 	bl	8006d24 <HAL_GetTick>
 800a630:	eba0 000a 	sub.w	r0, r0, sl
 800a634:	4540      	cmp	r0, r8
 800a636:	d831      	bhi.n	800a69c <UART_WaitOnFlagUntilTimeout+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a638:	f8d9 5000 	ldr.w	r5, [r9]
 800a63c:	462b      	mov	r3, r5
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a63e:	f1b8 0f00 	cmp.w	r8, #0
 800a642:	d02d      	beq.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a644:	682a      	ldr	r2, [r5, #0]
 800a646:	0751      	lsls	r1, r2, #29
 800a648:	d5e5      	bpl.n	800a616 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a64a:	69ea      	ldr	r2, [r5, #28]
 800a64c:	0512      	lsls	r2, r2, #20
 800a64e:	d5e2      	bpl.n	800a616 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a650:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a654:	622a      	str	r2, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a656:	e855 2f00 	ldrex	r2, [r5]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a65a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65e:	e845 2100 	strex	r1, r2, [r5]
 800a662:	b139      	cbz	r1, 800a674 <UART_WaitOnFlagUntilTimeout+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a664:	e853 2f00 	ldrex	r2, [r3]
 800a668:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	e843 2100 	strex	r1, r2, [r3]
 800a670:	2900      	cmp	r1, #0
 800a672:	d1f7      	bne.n	800a664 <UART_WaitOnFlagUntilTimeout+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a674:	f103 0208 	add.w	r2, r3, #8
 800a678:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a67c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a680:	f103 0008 	add.w	r0, r3, #8
 800a684:	e840 2100 	strex	r1, r2, [r0]
 800a688:	2900      	cmp	r1, #0
 800a68a:	d1f3      	bne.n	800a674 <UART_WaitOnFlagUntilTimeout+0x78>
          huart->gState = HAL_UART_STATE_READY;
 800a68c:	2320      	movs	r3, #32
 800a68e:	f8c9 3078 	str.w	r3, [r9, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a692:	f8c9 307c 	str.w	r3, [r9, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a696:	f8c9 3080 	str.w	r3, [r9, #128]	@ 0x80
          return HAL_TIMEOUT;
 800a69a:	e01a      	b.n	800a6d2 <UART_WaitOnFlagUntilTimeout+0xd6>
 800a69c:	f8d9 3000 	ldr.w	r3, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6a4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a8:	e843 2100 	strex	r1, r2, [r3]
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	d1f7      	bne.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b0:	f103 0208 	add.w	r2, r3, #8
 800a6b4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6bc:	f103 0008 	add.w	r0, r3, #8
 800a6c0:	e840 2100 	strex	r1, r2, [r0]
 800a6c4:	2900      	cmp	r1, #0
 800a6c6:	d1f3      	bne.n	800a6b0 <UART_WaitOnFlagUntilTimeout+0xb4>
        huart->gState = HAL_UART_STATE_READY;
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f8c9 3078 	str.w	r3, [r9, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a6ce:	f8c9 307c 	str.w	r3, [r9, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f889 3074 	strb.w	r3, [r9, #116]	@ 0x74
        return HAL_TIMEOUT;
 800a6d8:	2003      	movs	r0, #3
 800a6da:	e7a5      	b.n	800a628 <UART_WaitOnFlagUntilTimeout+0x2c>

0800a6dc <HAL_UART_Transmit>:
{
 800a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800a6e2:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800a6e4:	2820      	cmp	r0, #32
{
 800a6e6:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 800a6e8:	d148      	bne.n	800a77c <HAL_UART_Transmit+0xa0>
    if ((pData == NULL) || (Size == 0U))
 800a6ea:	460d      	mov	r5, r1
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	d041      	beq.n	800a774 <HAL_UART_Transmit+0x98>
 800a6f0:	4617      	mov	r7, r2
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	d03e      	beq.n	800a774 <HAL_UART_Transmit+0x98>
 800a6f6:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800a6f8:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d03d      	beq.n	800a77c <HAL_UART_Transmit+0xa0>
 800a700:	2301      	movs	r3, #1
 800a702:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a706:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a70a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a70c:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a710:	67a3      	str	r3, [r4, #120]	@ 0x78
    tickstart = HAL_GetTick();
 800a712:	f7fc fb07 	bl	8006d24 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a716:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800a718:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a71c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800a720:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 800a724:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a726:	d02d      	beq.n	800a784 <HAL_UART_Transmit+0xa8>
    while (huart->TxXferCount > 0U)
 800a728:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
    __HAL_UNLOCK(huart);
 800a72c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800a72e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800a730:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
    while (huart->TxXferCount > 0U)
 800a734:	b96b      	cbnz	r3, 800a752 <HAL_UART_Transmit+0x76>
 800a736:	e02f      	b.n	800a798 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a738:	f815 2b01 	ldrb.w	r2, [r5], #1
 800a73c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800a73e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800a742:	3a01      	subs	r2, #1
 800a744:	b292      	uxth	r2, r2
 800a746:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a74a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800a74e:	b29b      	uxth	r3, r3
 800a750:	b313      	cbz	r3, 800a798 <HAL_UART_Transmit+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a752:	9600      	str	r6, [sp, #0]
 800a754:	463b      	mov	r3, r7
 800a756:	2200      	movs	r2, #0
 800a758:	2180      	movs	r1, #128	@ 0x80
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff ff4e 	bl	800a5fc <UART_WaitOnFlagUntilTimeout>
 800a760:	b9b0      	cbnz	r0, 800a790 <HAL_UART_Transmit+0xb4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a762:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 800a764:	2d00      	cmp	r5, #0
 800a766:	d1e7      	bne.n	800a738 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a768:	f838 2b02 	ldrh.w	r2, [r8], #2
 800a76c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a770:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a772:	e7e4      	b.n	800a73e <HAL_UART_Transmit+0x62>
      return  HAL_ERROR;
 800a774:	2001      	movs	r0, #1
}
 800a776:	b002      	add	sp, #8
 800a778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(huart);
 800a77c:	2002      	movs	r0, #2
}
 800a77e:	b002      	add	sp, #8
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1ce      	bne.n	800a728 <HAL_UART_Transmit+0x4c>
 800a78a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800a78c:	461d      	mov	r5, r3
 800a78e:	e7cb      	b.n	800a728 <HAL_UART_Transmit+0x4c>
        return HAL_TIMEOUT;
 800a790:	2003      	movs	r0, #3
}
 800a792:	b002      	add	sp, #8
 800a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a798:	9600      	str	r6, [sp, #0]
 800a79a:	463b      	mov	r3, r7
 800a79c:	2200      	movs	r2, #0
 800a79e:	2140      	movs	r1, #64	@ 0x40
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f7ff ff2b 	bl	800a5fc <UART_WaitOnFlagUntilTimeout>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d1f2      	bne.n	800a790 <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 800a7aa:	2320      	movs	r3, #32
 800a7ac:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_OK;
 800a7ae:	e7e2      	b.n	800a776 <HAL_UART_Transmit+0x9a>

0800a7b0 <UART_CheckIdleState>:
{
 800a7b0:	b570      	push	{r4, r5, r6, lr}
 800a7b2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b4:	2600      	movs	r6, #0
{
 800a7b6:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b8:	f8c0 6080 	str.w	r6, [r0, #128]	@ 0x80
  tickstart = HAL_GetTick();
 800a7bc:	f7fc fab2 	bl	8006d24 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800a7c6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7c8:	d40c      	bmi.n	800a7e4 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	075b      	lsls	r3, r3, #29
 800a7ce:	d418      	bmi.n	800a802 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7d0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800a7d2:	2220      	movs	r2, #32
  return HAL_OK;
 800a7d4:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800a7d6:	67a2      	str	r2, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 800a7d8:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a7dc:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7de:	6623      	str	r3, [r4, #96]	@ 0x60
}
 800a7e0:	b002      	add	sp, #8
 800a7e2:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	4632      	mov	r2, r6
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7ff ff02 	bl	800a5fc <UART_WaitOnFlagUntilTimeout>
 800a7f8:	b978      	cbnz	r0, 800a81a <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7fa:	6823      	ldr	r3, [r4, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	075b      	lsls	r3, r3, #29
 800a800:	d5e6      	bpl.n	800a7d0 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a802:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	2200      	movs	r2, #0
 800a80a:	462b      	mov	r3, r5
 800a80c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a810:	4620      	mov	r0, r4
 800a812:	f7ff fef3 	bl	800a5fc <UART_WaitOnFlagUntilTimeout>
 800a816:	2800      	cmp	r0, #0
 800a818:	d0da      	beq.n	800a7d0 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800a81a:	2003      	movs	r0, #3
}
 800a81c:	b002      	add	sp, #8
 800a81e:	bd70      	pop	{r4, r5, r6, pc}

0800a820 <HAL_UART_Init>:
  if (huart == NULL)
 800a820:	b370      	cbz	r0, 800a880 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 800a822:	6f83      	ldr	r3, [r0, #120]	@ 0x78
{
 800a824:	b510      	push	{r4, lr}
 800a826:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800a828:	b32b      	cbz	r3, 800a876 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 800a82a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a82c:	2324      	movs	r3, #36	@ 0x24
 800a82e:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 800a830:	6813      	ldr	r3, [r2, #0]
 800a832:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a836:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800a838:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a83a:	f7ff fd8f 	bl	800a35c <UART_SetConfig>
 800a83e:	2801      	cmp	r0, #1
 800a840:	d017      	beq.n	800a872 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a842:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a844:	b98b      	cbnz	r3, 800a86a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	685a      	ldr	r2, [r3, #4]
 800a84a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a84e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a850:	689a      	ldr	r2, [r3, #8]
 800a852:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a856:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800a85e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800a860:	601a      	str	r2, [r3, #0]
}
 800a862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800a866:	f7ff bfa3 	b.w	800a7b0 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800a86a:	4620      	mov	r0, r4
 800a86c:	f7ff fe6e 	bl	800a54c <UART_AdvFeatureConfig>
 800a870:	e7e9      	b.n	800a846 <HAL_UART_Init+0x26>
}
 800a872:	2001      	movs	r0, #1
 800a874:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a876:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    HAL_UART_MspInit(huart);
 800a87a:	f7fa fb69 	bl	8004f50 <HAL_UART_MspInit>
 800a87e:	e7d4      	b.n	800a82a <HAL_UART_Init+0xa>
}
 800a880:	2001      	movs	r0, #1
 800a882:	4770      	bx	lr

0800a884 <UART_Start_Receive_IT>:
{
 800a884:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 800a886:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800a888:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxISR       = NULL;
 800a88a:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 800a88c:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
  huart->RxXferSize  = Size;
 800a890:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a894:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a898:	6643      	str	r3, [r0, #100]	@ 0x64
  UART_MASK_COMPUTATION(huart);
 800a89a:	d04e      	beq.n	800a93a <UART_Start_Receive_IT+0xb6>
 800a89c:	bb74      	cbnz	r4, 800a8fc <UART_Start_Receive_IT+0x78>
 800a89e:	6903      	ldr	r3, [r0, #16]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bf14      	ite	ne
 800a8a4:	237f      	movne	r3, #127	@ 0x7f
 800a8a6:	23ff      	moveq	r3, #255	@ 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a8:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8aa:	2122      	movs	r1, #34	@ 0x22
 800a8ac:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ae:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
  UART_MASK_COMPUTATION(huart);
 800a8b2:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8b6:	67c1      	str	r1, [r0, #124]	@ 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b8:	f102 0308 	add.w	r3, r2, #8
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	f102 0408 	add.w	r4, r2, #8
 800a8c8:	e844 3100 	strex	r1, r3, [r4]
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	d1f3      	bne.n	800a8b8 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8d0:	6884      	ldr	r4, [r0, #8]
 800a8d2:	6903      	ldr	r3, [r0, #16]
 800a8d4:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800a8d8:	d019      	beq.n	800a90e <UART_Start_Receive_IT+0x8a>
 800a8da:	4c1e      	ldr	r4, [pc, #120]	@ (800a954 <UART_Start_Receive_IT+0xd0>)
 800a8dc:	6644      	str	r4, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800a8de:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8e2:	b1cb      	cbz	r3, 800a918 <UART_Start_Receive_IT+0x94>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e4:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a8e8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ec:	e842 3100 	strex	r1, r3, [r2]
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	d1f7      	bne.n	800a8e4 <UART_Start_Receive_IT+0x60>
}
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8fa:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800a8fc:	f1b4 5f80 	cmp.w	r4, #268435456	@ 0x10000000
 800a900:	d1d2      	bne.n	800a8a8 <UART_Start_Receive_IT+0x24>
 800a902:	6903      	ldr	r3, [r0, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	bf14      	ite	ne
 800a908:	233f      	movne	r3, #63	@ 0x3f
 800a90a:	237f      	moveq	r3, #127	@ 0x7f
 800a90c:	e7cc      	b.n	800a8a8 <UART_Start_Receive_IT+0x24>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a90e:	b9db      	cbnz	r3, 800a948 <UART_Start_Receive_IT+0xc4>
 800a910:	4911      	ldr	r1, [pc, #68]	@ (800a958 <UART_Start_Receive_IT+0xd4>)
 800a912:	6641      	str	r1, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800a914:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a918:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a91c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a920:	e842 3100 	strex	r1, r3, [r2]
 800a924:	2900      	cmp	r1, #0
 800a926:	d0e5      	beq.n	800a8f4 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	e852 3f00 	ldrex	r3, [r2]
 800a92c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	e842 3100 	strex	r1, r3, [r2]
 800a934:	2900      	cmp	r1, #0
 800a936:	d1ef      	bne.n	800a918 <UART_Start_Receive_IT+0x94>
 800a938:	e7dc      	b.n	800a8f4 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 800a93a:	6902      	ldr	r2, [r0, #16]
 800a93c:	2a00      	cmp	r2, #0
 800a93e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800a942:	bf18      	it	ne
 800a944:	23ff      	movne	r3, #255	@ 0xff
 800a946:	e7af      	b.n	800a8a8 <UART_Start_Receive_IT+0x24>
 800a948:	4b02      	ldr	r3, [pc, #8]	@ (800a954 <UART_Start_Receive_IT+0xd0>)
 800a94a:	6643      	str	r3, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 800a94c:	f880 1074 	strb.w	r1, [r0, #116]	@ 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a950:	e7c8      	b.n	800a8e4 <UART_Start_Receive_IT+0x60>
 800a952:	bf00      	nop
 800a954:	0800a21d 	.word	0x0800a21d
 800a958:	0800a2bd 	.word	0x0800a2bd

0800a95c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800a95c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800a95e:	2b20      	cmp	r3, #32
 800a960:	d120      	bne.n	800a9a4 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800a962:	b1e9      	cbz	r1, 800a9a0 <HAL_UART_Receive_IT+0x44>
 800a964:	b1e2      	cbz	r2, 800a9a0 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 800a966:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d01a      	beq.n	800a9a4 <HAL_UART_Receive_IT+0x48>
{
 800a96e:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a970:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <HAL_UART_Receive_IT+0x4c>)
 800a972:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 800a974:	2501      	movs	r5, #1
 800a976:	f880 5074 	strb.w	r5, [r0, #116]	@ 0x74
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a97a:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97c:	f04f 0500 	mov.w	r5, #0
 800a980:	6605      	str	r5, [r0, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a982:	d00a      	beq.n	800a99a <HAL_UART_Receive_IT+0x3e>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a984:	6863      	ldr	r3, [r4, #4]
 800a986:	021b      	lsls	r3, r3, #8
 800a988:	d507      	bpl.n	800a99a <HAL_UART_Receive_IT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a98e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a992:	e844 3500 	strex	r5, r3, [r4]
 800a996:	2d00      	cmp	r5, #0
 800a998:	d1f7      	bne.n	800a98a <HAL_UART_Receive_IT+0x2e>
}
 800a99a:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800a99c:	f7ff bf72 	b.w	800a884 <UART_Start_Receive_IT>
      return HAL_ERROR;
 800a9a0:	2001      	movs	r0, #1
 800a9a2:	4770      	bx	lr
    __HAL_LOCK(huart);
 800a9a4:	2002      	movs	r0, #2
}
 800a9a6:	4770      	bx	lr
 800a9a8:	40008000 	.word	0x40008000

0800a9ac <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop

0800a9b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a9b0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800a9b2:	f000 f9ef 	bl	800ad94 <vTaskStartScheduler>
  
  return osOK;
}
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	bd08      	pop	{r3, pc}
 800a9ba:	bf00      	nop

0800a9bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	4684      	mov	ip, r0
 800a9c0:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9c2:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 800a9c6:	f8dc 1000 	ldr.w	r1, [ip]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a9ca:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9ce:	6840      	ldr	r0, [r0, #4]
{
 800a9d0:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 800a9d2:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 800a9d6:	bf14      	ite	ne
 800a9d8:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a9dc:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9de:	9400      	str	r4, [sp, #0]
 800a9e0:	ac03      	add	r4, sp, #12
 800a9e2:	9401      	str	r4, [sp, #4]
 800a9e4:	f000 f89e 	bl	800ab24 <xTaskCreate>
 800a9e8:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a9ea:	bf0c      	ite	eq
 800a9ec:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800a9ee:	2000      	movne	r0, #0
}
 800a9f0:	b004      	add	sp, #16
 800a9f2:	bd10      	pop	{r4, pc}

0800a9f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a9f4:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a9f6:	2801      	cmp	r0, #1
 800a9f8:	bf38      	it	cc
 800a9fa:	2001      	movcc	r0, #1
 800a9fc:	f000 fc1a 	bl	800b234 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aa00:	2000      	movs	r0, #0
 800aa02:	bd08      	pop	{r3, pc}

0800aa04 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa04:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa08:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa0c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa0e:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa12:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa16:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop

0800aa1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop

0800aa24 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa24:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800aa26:	6803      	ldr	r3, [r0, #0]
{
 800aa28:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa2a:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 800aa2c:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa2e:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa32:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa34:	6091      	str	r1, [r2, #8]
}
 800aa36:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800aa3a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800aa3c:	6003      	str	r3, [r0, #0]
}
 800aa3e:	4770      	bx	lr

0800aa40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa40:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa42:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa44:	1c6b      	adds	r3, r5, #1
 800aa46:	d010      	beq.n	800aa6a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa48:	f100 0308 	add.w	r3, r0, #8
 800aa4c:	461c      	mov	r4, r3
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	42aa      	cmp	r2, r5
 800aa54:	d9fa      	bls.n	800aa4c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800aa56:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa58:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800aa5a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa5c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa5e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa60:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800aa62:	6108      	str	r0, [r1, #16]
}
 800aa64:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800aa66:	6002      	str	r2, [r0, #0]
}
 800aa68:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa6a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa6c:	6863      	ldr	r3, [r4, #4]
 800aa6e:	e7f2      	b.n	800aa56 <vListInsert+0x16>

0800aa70 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa70:	6903      	ldr	r3, [r0, #16]
{
 800aa72:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa74:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa78:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa7a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800aa7c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa7e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa80:	bf08      	it	eq
 800aa82:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800aa84:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800aa86:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800aa8a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800aa8c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800aa8e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800aa90:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800aa92:	6818      	ldr	r0, [r3, #0]
}
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop

0800aa98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa9a:	4b1b      	ldr	r3, [pc, #108]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa9c:	4e1b      	ldr	r6, [pc, #108]	@ (800ab0c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800aa9e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaa0:	6833      	ldr	r3, [r6, #0]
{
 800aaa2:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaa4:	1d18      	adds	r0, r3, #4
{
 800aaa6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaa8:	f7ff ffe2 	bl	800aa70 <uxListRemove>
 800aaac:	b940      	cbnz	r0, 800aac0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aaae:	6833      	ldr	r3, [r6, #0]
 800aab0:	4917      	ldr	r1, [pc, #92]	@ (800ab10 <prvAddCurrentTaskToDelayedList+0x78>)
 800aab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab4:	2201      	movs	r2, #1
 800aab6:	409a      	lsls	r2, r3
 800aab8:	680b      	ldr	r3, [r1, #0]
 800aaba:	ea23 0302 	bic.w	r3, r3, r2
 800aabe:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aac0:	1c6b      	adds	r3, r5, #1
 800aac2:	d017      	beq.n	800aaf4 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aac4:	6833      	ldr	r3, [r6, #0]
 800aac6:	1964      	adds	r4, r4, r5
 800aac8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800aaca:	d307      	bcc.n	800aadc <prvAddCurrentTaskToDelayedList+0x44>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aacc:	4b11      	ldr	r3, [pc, #68]	@ (800ab14 <prvAddCurrentTaskToDelayedList+0x7c>)
 800aace:	6818      	ldr	r0, [r3, #0]
 800aad0:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aad6:	3104      	adds	r1, #4
 800aad8:	f7ff bfb2 	b.w	800aa40 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aadc:	4b0e      	ldr	r3, [pc, #56]	@ (800ab18 <prvAddCurrentTaskToDelayedList+0x80>)
 800aade:	6818      	ldr	r0, [r3, #0]
 800aae0:	6831      	ldr	r1, [r6, #0]
 800aae2:	3104      	adds	r1, #4
 800aae4:	f7ff ffac 	bl	800aa40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aae8:	4b0c      	ldr	r3, [pc, #48]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0x84>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800aaee:	bf88      	it	hi
 800aaf0:	601c      	strhi	r4, [r3, #0]
}
 800aaf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aaf4:	2f00      	cmp	r7, #0
 800aaf6:	d0e5      	beq.n	800aac4 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaf8:	6831      	ldr	r1, [r6, #0]
 800aafa:	4809      	ldr	r0, [pc, #36]	@ (800ab20 <prvAddCurrentTaskToDelayedList+0x88>)
}
 800aafc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab00:	3104      	adds	r1, #4
 800ab02:	f7ff bf8f 	b.w	800aa24 <vListInsertEnd>
 800ab06:	bf00      	nop
 800ab08:	2000077c 	.word	0x2000077c
 800ab0c:	20000880 	.word	0x20000880
 800ab10:	20000778 	.word	0x20000778
 800ab14:	200007c4 	.word	0x200007c4
 800ab18:	200007c8 	.word	0x200007c8
 800ab1c:	20000760 	.word	0x20000760
 800ab20:	20000784 	.word	0x20000784

0800ab24 <xTaskCreate>:
	{
 800ab24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab28:	0095      	lsls	r5, r2, #2
	{
 800ab2a:	4680      	mov	r8, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab2c:	4628      	mov	r0, r5
	{
 800ab2e:	460f      	mov	r7, r1
 800ab30:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab32:	f000 fed9 	bl	800b8e8 <pvPortMalloc>
			if( pxStack != NULL )
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f000 8087 	beq.w	800ac4a <xTaskCreate+0x126>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	20a0      	movs	r0, #160	@ 0xa0
 800ab40:	f000 fed2 	bl	800b8e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ab44:	4604      	mov	r4, r0
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d07c      	beq.n	800ac44 <xTaskCreate+0x120>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab4a:	3d04      	subs	r5, #4
 800ab4c:	4435      	add	r5, r6
					pxNewTCB->pxStack = pxStack;
 800ab4e:	6306      	str	r6, [r0, #48]	@ 0x30
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab50:	f025 0607 	bic.w	r6, r5, #7
	if( pcName != NULL )
 800ab54:	2f00      	cmp	r7, #0
 800ab56:	f000 808b 	beq.w	800ac70 <xTaskCreate+0x14c>
 800ab5a:	f107 3cff 	add.w	ip, r7, #4294967295
 800ab5e:	f100 0333 	add.w	r3, r0, #51	@ 0x33
 800ab62:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab64:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 800ab68:	f803 5f01 	strb.w	r5, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800ab6c:	b10d      	cbz	r5, 800ab72 <xTaskCreate+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab6e:	45bc      	cmp	ip, r7
 800ab70:	d1f8      	bne.n	800ab64 <xTaskCreate+0x40>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab72:	2300      	movs	r3, #0
 800ab74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab78:	9d08      	ldr	r5, [sp, #32]
 800ab7a:	2d06      	cmp	r5, #6
 800ab7c:	bf28      	it	cs
 800ab7e:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 800ab80:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab84:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800ab86:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ab88:	6465      	str	r5, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab8a:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 800ab8c:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab90:	f7ff ff44 	bl	800aa1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab94:	f104 0018 	add.w	r0, r4, #24
 800ab98:	f7ff ff40 	bl	800aa1c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab9c:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aba0:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aba2:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800aba4:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aba8:	4651      	mov	r1, sl
 800abaa:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abac:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abae:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abb0:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abb4:	f002 ff24 	bl	800da00 <memset>
 800abb8:	4b41      	ldr	r3, [pc, #260]	@ (800acc0 <xTaskCreate+0x19c>)
 800abba:	6523      	str	r3, [r4, #80]	@ 0x50
 800abbc:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 800abc0:	33d0      	adds	r3, #208	@ 0xd0
 800abc2:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abc4:	464a      	mov	r2, r9
 800abc6:	4641      	mov	r1, r8
 800abc8:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abca:	6565      	str	r5, [r4, #84]	@ 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abcc:	f000 fc80 	bl	800b4d0 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800abd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abd2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800abd4:	b103      	cbz	r3, 800abd8 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abd6:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 800abd8:	f000 fca4 	bl	800b524 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800abdc:	4a39      	ldr	r2, [pc, #228]	@ (800acc4 <xTaskCreate+0x1a0>)
		if( pxCurrentTCB == NULL )
 800abde:	4d3a      	ldr	r5, [pc, #232]	@ (800acc8 <xTaskCreate+0x1a4>)
		uxCurrentNumberOfTasks++;
 800abe0:	6813      	ldr	r3, [r2, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d038      	beq.n	800ac5e <xTaskCreate+0x13a>
			if( xSchedulerRunning == pdFALSE )
 800abec:	4e37      	ldr	r6, [pc, #220]	@ (800accc <xTaskCreate+0x1a8>)
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abee:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800abf0:	6833      	ldr	r3, [r6, #0]
 800abf2:	b373      	cbz	r3, 800ac52 <xTaskCreate+0x12e>
 800abf4:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800acf0 <xTaskCreate+0x1cc>
		prvAddTaskToReadyList( pxNewTCB );
 800abf8:	4a35      	ldr	r2, [pc, #212]	@ (800acd0 <xTaskCreate+0x1ac>)
 800abfa:	4639      	mov	r1, r7
		uxTaskNumber++;
 800abfc:	4f35      	ldr	r7, [pc, #212]	@ (800acd4 <xTaskCreate+0x1b0>)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	3301      	adds	r3, #1
 800ac02:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800ac04:	6817      	ldr	r7, [r2, #0]
 800ac06:	2301      	movs	r3, #1
 800ac08:	4083      	lsls	r3, r0
 800ac0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ac0e:	433b      	orrs	r3, r7
 800ac10:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	f7ff ff05 	bl	800aa24 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800ac1a:	f000 fca5 	bl	800b568 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ac1e:	6833      	ldr	r3, [r6, #0]
 800ac20:	b173      	cbz	r3, 800ac40 <xTaskCreate+0x11c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac22:	682a      	ldr	r2, [r5, #0]
 800ac24:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac26:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d209      	bcs.n	800ac40 <xTaskCreate+0x11c>
			taskYIELD_IF_USING_PREEMPTION();
 800ac2c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ac30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac34:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800ac40:	2001      	movs	r0, #1
		return xReturn;
 800ac42:	e004      	b.n	800ac4e <xTaskCreate+0x12a>
					vPortFree( pxStack );
 800ac44:	4630      	mov	r0, r6
 800ac46:	f000 fee3 	bl	800ba10 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac4a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800ac4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac52:	682b      	ldr	r3, [r5, #0]
 800ac54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac56:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800ac58:	bf98      	it	ls
 800ac5a:	602c      	strls	r4, [r5, #0]
 800ac5c:	e7ca      	b.n	800abf4 <xTaskCreate+0xd0>
			pxCurrentTCB = pxNewTCB;
 800ac5e:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac60:	6813      	ldr	r3, [r2, #0]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d007      	beq.n	800ac76 <xTaskCreate+0x152>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac66:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800ac68:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 800acf0 <xTaskCreate+0x1cc>
 800ac6c:	4e17      	ldr	r6, [pc, #92]	@ (800accc <xTaskCreate+0x1a8>)
 800ac6e:	e7c3      	b.n	800abf8 <xTaskCreate+0xd4>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac70:	f880 7034 	strb.w	r7, [r0, #52]	@ 0x34
 800ac74:	e780      	b.n	800ab78 <xTaskCreate+0x54>
 800ac76:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 800acf0 <xTaskCreate+0x1cc>
 800ac7a:	4646      	mov	r6, r8
 800ac7c:	f108 098c 	add.w	r9, r8, #140	@ 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac80:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac82:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac84:	f7ff febe 	bl	800aa04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac88:	454e      	cmp	r6, r9
 800ac8a:	d1f9      	bne.n	800ac80 <xTaskCreate+0x15c>
	vListInitialise( &xDelayedTaskList1 );
 800ac8c:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800acf4 <xTaskCreate+0x1d0>
	vListInitialise( &xDelayedTaskList2 );
 800ac90:	4e11      	ldr	r6, [pc, #68]	@ (800acd8 <xTaskCreate+0x1b4>)
	vListInitialise( &xDelayedTaskList1 );
 800ac92:	4648      	mov	r0, r9
 800ac94:	f7ff feb6 	bl	800aa04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac98:	4630      	mov	r0, r6
 800ac9a:	f7ff feb3 	bl	800aa04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac9e:	480f      	ldr	r0, [pc, #60]	@ (800acdc <xTaskCreate+0x1b8>)
 800aca0:	f7ff feb0 	bl	800aa04 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800aca4:	480e      	ldr	r0, [pc, #56]	@ (800ace0 <xTaskCreate+0x1bc>)
 800aca6:	f7ff fead 	bl	800aa04 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800acaa:	480e      	ldr	r0, [pc, #56]	@ (800ace4 <xTaskCreate+0x1c0>)
 800acac:	f7ff feaa 	bl	800aa04 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800acb0:	4b0d      	ldr	r3, [pc, #52]	@ (800ace8 <xTaskCreate+0x1c4>)
		prvAddTaskToReadyList( pxNewTCB );
 800acb2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800acb4:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acb8:	4b0c      	ldr	r3, [pc, #48]	@ (800acec <xTaskCreate+0x1c8>)
 800acba:	601e      	str	r6, [r3, #0]
 800acbc:	4e03      	ldr	r6, [pc, #12]	@ (800accc <xTaskCreate+0x1a8>)
}
 800acbe:	e79b      	b.n	800abf8 <xTaskCreate+0xd4>
 800acc0:	200048c0 	.word	0x200048c0
 800acc4:	20000780 	.word	0x20000780
 800acc8:	20000880 	.word	0x20000880
 800accc:	20000774 	.word	0x20000774
 800acd0:	20000778 	.word	0x20000778
 800acd4:	20000764 	.word	0x20000764
 800acd8:	200007cc 	.word	0x200007cc
 800acdc:	200007b0 	.word	0x200007b0
 800ace0:	2000079c 	.word	0x2000079c
 800ace4:	20000784 	.word	0x20000784
 800ace8:	200007c8 	.word	0x200007c8
 800acec:	200007c4 	.word	0x200007c4
 800acf0:	200007f4 	.word	0x200007f4
 800acf4:	200007e0 	.word	0x200007e0

0800acf8 <vTaskResume>:
	{
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800acfa:	b178      	cbz	r0, 800ad1c <vTaskResume+0x24>
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800acfc:	4d20      	ldr	r5, [pc, #128]	@ (800ad80 <vTaskResume+0x88>)
 800acfe:	682b      	ldr	r3, [r5, #0]
 800ad00:	4283      	cmp	r3, r0
 800ad02:	4604      	mov	r4, r0
 800ad04:	d009      	beq.n	800ad1a <vTaskResume+0x22>
			taskENTER_CRITICAL();
 800ad06:	f000 fc0d 	bl	800b524 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ad84 <vTaskResume+0x8c>)
 800ad0c:	6962      	ldr	r2, [r4, #20]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d00d      	beq.n	800ad2e <vTaskResume+0x36>
	}
 800ad12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			taskEXIT_CRITICAL();
 800ad16:	f000 bc27 	b.w	800b568 <vPortExitCritical>
	}
 800ad1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 800ad2c:	e7fe      	b.n	800ad2c <vTaskResume+0x34>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ad2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ad30:	4a15      	ldr	r2, [pc, #84]	@ (800ad88 <vTaskResume+0x90>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d0ed      	beq.n	800ad12 <vTaskResume+0x1a>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1eb      	bne.n	800ad12 <vTaskResume+0x1a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ad3a:	1d26      	adds	r6, r4, #4
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f7ff fe97 	bl	800aa70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad42:	4812      	ldr	r0, [pc, #72]	@ (800ad8c <vTaskResume+0x94>)
 800ad44:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ad46:	6807      	ldr	r7, [r0, #0]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	409a      	lsls	r2, r3
 800ad4e:	4e10      	ldr	r6, [pc, #64]	@ (800ad90 <vTaskResume+0x98>)
 800ad50:	433a      	orrs	r2, r7
 800ad52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ad56:	6002      	str	r2, [r0, #0]
 800ad58:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800ad5c:	f7ff fe62 	bl	800aa24 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d3d3      	bcc.n	800ad12 <vTaskResume+0x1a>
						taskYIELD_IF_USING_PREEMPTION();
 800ad6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ad6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad72:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	e7c8      	b.n	800ad12 <vTaskResume+0x1a>
 800ad80:	20000880 	.word	0x20000880
 800ad84:	20000784 	.word	0x20000784
 800ad88:	200007b0 	.word	0x200007b0
 800ad8c:	20000778 	.word	0x20000778
 800ad90:	200007f4 	.word	0x200007f4

0800ad94 <vTaskStartScheduler>:
{
 800ad94:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800ad96:	4b1a      	ldr	r3, [pc, #104]	@ (800ae00 <vTaskStartScheduler+0x6c>)
 800ad98:	491a      	ldr	r1, [pc, #104]	@ (800ae04 <vTaskStartScheduler+0x70>)
 800ad9a:	481b      	ldr	r0, [pc, #108]	@ (800ae08 <vTaskStartScheduler+0x74>)
{
 800ad9c:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 800ad9e:	2400      	movs	r4, #0
 800ada0:	e9cd 4300 	strd	r4, r3, [sp]
 800ada4:	2280      	movs	r2, #128	@ 0x80
 800ada6:	4623      	mov	r3, r4
 800ada8:	f7ff febc 	bl	800ab24 <xTaskCreate>
	if( xReturn == pdPASS )
 800adac:	2801      	cmp	r0, #1
 800adae:	d00c      	beq.n	800adca <vTaskStartScheduler+0x36>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adb0:	3001      	adds	r0, #1
 800adb2:	d001      	beq.n	800adb8 <vTaskStartScheduler+0x24>
}
 800adb4:	b003      	add	sp, #12
 800adb6:	bd30      	pop	{r4, r5, pc}
 800adb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adc8:	e7fe      	b.n	800adc8 <vTaskStartScheduler+0x34>
 800adca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800adda:	4b0c      	ldr	r3, [pc, #48]	@ (800ae0c <vTaskStartScheduler+0x78>)
 800addc:	4a0c      	ldr	r2, [pc, #48]	@ (800ae10 <vTaskStartScheduler+0x7c>)
 800adde:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800ade0:	490c      	ldr	r1, [pc, #48]	@ (800ae14 <vTaskStartScheduler+0x80>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ade2:	334c      	adds	r3, #76	@ 0x4c
 800ade4:	6013      	str	r3, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800ade6:	4a0c      	ldr	r2, [pc, #48]	@ (800ae18 <vTaskStartScheduler+0x84>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ade8:	4b0c      	ldr	r3, [pc, #48]	@ (800ae1c <vTaskStartScheduler+0x88>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800adea:	f04f 35ff 	mov.w	r5, #4294967295
 800adee:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800adf0:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800adf2:	601c      	str	r4, [r3, #0]
}
 800adf4:	b003      	add	sp, #12
 800adf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 800adfa:	f000 bcc1 	b.w	800b780 <xPortStartScheduler>
 800adfe:	bf00      	nop
 800ae00:	2000075c 	.word	0x2000075c
 800ae04:	08011d54 	.word	0x08011d54
 800ae08:	0800b109 	.word	0x0800b109
 800ae0c:	20000880 	.word	0x20000880
 800ae10:	200001b0 	.word	0x200001b0
 800ae14:	20000760 	.word	0x20000760
 800ae18:	20000774 	.word	0x20000774
 800ae1c:	2000077c 	.word	0x2000077c

0800ae20 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ae20:	4a02      	ldr	r2, [pc, #8]	@ (800ae2c <vTaskSuspendAll+0xc>)
 800ae22:	6813      	ldr	r3, [r2, #0]
 800ae24:	3301      	adds	r3, #1
 800ae26:	6013      	str	r3, [r2, #0]
}
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	20000758 	.word	0x20000758

0800ae30 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800ae30:	4a09      	ldr	r2, [pc, #36]	@ (800ae58 <vTaskStepTick+0x28>)
 800ae32:	490a      	ldr	r1, [pc, #40]	@ (800ae5c <vTaskStepTick+0x2c>)
 800ae34:	6813      	ldr	r3, [r2, #0]
 800ae36:	6809      	ldr	r1, [r1, #0]
 800ae38:	4403      	add	r3, r0
 800ae3a:	428b      	cmp	r3, r1
 800ae3c:	d908      	bls.n	800ae50 <vTaskStepTick+0x20>
 800ae3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	e7fe      	b.n	800ae4e <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800ae50:	6813      	ldr	r3, [r2, #0]
 800ae52:	4403      	add	r3, r0
 800ae54:	6013      	str	r3, [r2, #0]
	}
 800ae56:	4770      	bx	lr
 800ae58:	2000077c 	.word	0x2000077c
 800ae5c:	20000760 	.word	0x20000760

0800ae60 <xTaskIncrementTick>:
{
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae64:	4b4e      	ldr	r3, [pc, #312]	@ (800afa0 <xTaskIncrementTick+0x140>)
 800ae66:	681b      	ldr	r3, [r3, #0]
{
 800ae68:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d148      	bne.n	800af00 <xTaskIncrementTick+0xa0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae6e:	4b4d      	ldr	r3, [pc, #308]	@ (800afa4 <xTaskIncrementTick+0x144>)
 800ae70:	681d      	ldr	r5, [r3, #0]
 800ae72:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800ae74:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	d04b      	beq.n	800af12 <xTaskIncrementTick+0xb2>
 800ae7a:	4b4b      	ldr	r3, [pc, #300]	@ (800afa8 <xTaskIncrementTick+0x148>)
 800ae7c:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	429d      	cmp	r5, r3
 800ae84:	d352      	bcc.n	800af2c <xTaskIncrementTick+0xcc>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae86:	4e49      	ldr	r6, [pc, #292]	@ (800afac <xTaskIncrementTick+0x14c>)
 800ae88:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800afc4 <xTaskIncrementTick+0x164>
 800ae8c:	6833      	ldr	r3, [r6, #0]
 800ae8e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 800afc8 <xTaskIncrementTick+0x168>
 800ae92:	681c      	ldr	r4, [r3, #0]
 800ae94:	2c00      	cmp	r4, #0
 800ae96:	d075      	beq.n	800af84 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList( pxTCB );
 800ae98:	4f45      	ldr	r7, [pc, #276]	@ (800afb0 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 800ae9a:	2400      	movs	r4, #0
 800ae9c:	e022      	b.n	800aee4 <xTaskIncrementTick+0x84>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae9e:	f7ff fde7 	bl	800aa70 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aea2:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aea6:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aeaa:	b10a      	cbz	r2, 800aeb0 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aeac:	f7ff fde0 	bl	800aa70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aeb0:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	4082      	lsls	r2, r0
 800aeba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aebe:	431a      	orrs	r2, r3
 800aec0:	4651      	mov	r1, sl
 800aec2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800aec6:	603a      	str	r2, [r7, #0]
 800aec8:	f7ff fdac 	bl	800aa24 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aecc:	f8d9 3000 	ldr.w	r3, [r9]
 800aed0:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 800aed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800aed6:	429a      	cmp	r2, r3
 800aed8:	bf28      	it	cs
 800aeda:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aedc:	6833      	ldr	r3, [r6, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d04f      	beq.n	800af84 <xTaskIncrementTick+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aee4:	6833      	ldr	r3, [r6, #0]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aeec:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aef0:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 800aef4:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aef6:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800aef8:	d2d1      	bcs.n	800ae9e <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aefe:	e01a      	b.n	800af36 <xTaskIncrementTick+0xd6>
		++xPendedTicks;
 800af00:	4a2c      	ldr	r2, [pc, #176]	@ (800afb4 <xTaskIncrementTick+0x154>)
 800af02:	6813      	ldr	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800af04:	2400      	movs	r4, #0
		++xPendedTicks;
 800af06:	3301      	adds	r3, #1
}
 800af08:	4620      	mov	r0, r4
		++xPendedTicks;
 800af0a:	6013      	str	r3, [r2, #0]
}
 800af0c:	b003      	add	sp, #12
 800af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800af12:	4b26      	ldr	r3, [pc, #152]	@ (800afac <xTaskIncrementTick+0x14c>)
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	6812      	ldr	r2, [r2, #0]
 800af18:	b30a      	cbz	r2, 800af5e <xTaskIncrementTick+0xfe>
 800af1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	e7fe      	b.n	800af2a <xTaskIncrementTick+0xca>
 800af2c:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 800afc4 <xTaskIncrementTick+0x164>
 800af30:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 800afc8 <xTaskIncrementTick+0x168>
BaseType_t xSwitchRequired = pdFALSE;
 800af34:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af36:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 800af3a:	491f      	ldr	r1, [pc, #124]	@ (800afb8 <xTaskIncrementTick+0x158>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 800af48:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800af4a:	2a02      	cmp	r2, #2
 800af4c:	bf28      	it	cs
 800af4e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800af50:	2b00      	cmp	r3, #0
 800af52:	bf18      	it	ne
 800af54:	2401      	movne	r4, #1
}
 800af56:	4620      	mov	r0, r4
 800af58:	b003      	add	sp, #12
 800af5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800af5e:	4a17      	ldr	r2, [pc, #92]	@ (800afbc <xTaskIncrementTick+0x15c>)
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	6811      	ldr	r1, [r2, #0]
 800af64:	6019      	str	r1, [r3, #0]
 800af66:	4916      	ldr	r1, [pc, #88]	@ (800afc0 <xTaskIncrementTick+0x160>)
 800af68:	6010      	str	r0, [r2, #0]
 800af6a:	680a      	ldr	r2, [r1, #0]
 800af6c:	3201      	adds	r2, #1
 800af6e:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	6812      	ldr	r2, [r2, #0]
 800af74:	b95a      	cbnz	r2, 800af8e <xTaskIncrementTick+0x12e>
		xNextTaskUnblockTime = portMAX_DELAY;
 800af76:	4b0c      	ldr	r3, [pc, #48]	@ (800afa8 <xTaskIncrementTick+0x148>)
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f04f 33ff 	mov.w	r3, #4294967295
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	e77c      	b.n	800ae7e <xTaskIncrementTick+0x1e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af84:	9a01      	ldr	r2, [sp, #4]
 800af86:	f04f 33ff 	mov.w	r3, #4294967295
 800af8a:	6013      	str	r3, [r2, #0]
					break;
 800af8c:	e7d3      	b.n	800af36 <xTaskIncrementTick+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af8e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af90:	4a05      	ldr	r2, [pc, #20]	@ (800afa8 <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af92:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af94:	9201      	str	r2, [sp, #4]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	6013      	str	r3, [r2, #0]
}
 800af9c:	e76f      	b.n	800ae7e <xTaskIncrementTick+0x1e>
 800af9e:	bf00      	nop
 800afa0:	20000758 	.word	0x20000758
 800afa4:	2000077c 	.word	0x2000077c
 800afa8:	20000760 	.word	0x20000760
 800afac:	200007c8 	.word	0x200007c8
 800afb0:	20000778 	.word	0x20000778
 800afb4:	20000770 	.word	0x20000770
 800afb8:	2000076c 	.word	0x2000076c
 800afbc:	200007c4 	.word	0x200007c4
 800afc0:	20000768 	.word	0x20000768
 800afc4:	200007f4 	.word	0x200007f4
 800afc8:	20000880 	.word	0x20000880

0800afcc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800afcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 800afd0:	f000 faa8 	bl	800b524 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800afd4:	4b3a      	ldr	r3, [pc, #232]	@ (800b0c0 <xTaskResumeAll.part.0+0xf4>)
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	3a01      	subs	r2, #1
 800afda:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d160      	bne.n	800b0a4 <xTaskResumeAll.part.0+0xd8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afe2:	4b38      	ldr	r3, [pc, #224]	@ (800b0c4 <xTaskResumeAll.part.0+0xf8>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d05c      	beq.n	800b0a4 <xTaskResumeAll.part.0+0xd8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afea:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 800b0dc <xTaskResumeAll.part.0+0x110>
 800afee:	f8db 3000 	ldr.w	r3, [fp]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d061      	beq.n	800b0ba <xTaskResumeAll.part.0+0xee>
 800aff6:	4d34      	ldr	r5, [pc, #208]	@ (800b0c8 <xTaskResumeAll.part.0+0xfc>)
 800aff8:	f8df 80e4 	ldr.w	r8, [pc, #228]	@ 800b0e0 <xTaskResumeAll.part.0+0x114>
 800affc:	4f33      	ldr	r7, [pc, #204]	@ (800b0cc <xTaskResumeAll.part.0+0x100>)
 800affe:	f8df 90e4 	ldr.w	r9, [pc, #228]	@ 800b0e4 <xTaskResumeAll.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 800b002:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b004:	f8db 300c 	ldr.w	r3, [fp, #12]
 800b008:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b00c:	f10a 0404 	add.w	r4, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b010:	f10a 0018 	add.w	r0, sl, #24
 800b014:	f7ff fd2c 	bl	800aa70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b018:	4620      	mov	r0, r4
 800b01a:	f7ff fd29 	bl	800aa70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b01e:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 800b022:	682a      	ldr	r2, [r5, #0]
 800b024:	fa06 f300 	lsl.w	r3, r6, r0
 800b028:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800b02c:	4313      	orrs	r3, r2
 800b02e:	4621      	mov	r1, r4
 800b030:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	f7ff fcf5 	bl	800aa24 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	f8da 202c 	ldr.w	r2, [sl, #44]	@ 0x2c
 800b040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b042:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800b044:	bf28      	it	cs
 800b046:	f8c9 6000 	strcs.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b04a:	f8db 3000 	ldr.w	r3, [fp]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1d8      	bne.n	800b004 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b052:	4b1f      	ldr	r3, [pc, #124]	@ (800b0d0 <xTaskResumeAll.part.0+0x104>)
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	6812      	ldr	r2, [r2, #0]
 800b058:	b352      	cbz	r2, 800b0b0 <xTaskResumeAll.part.0+0xe4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b05a:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b05c:	4b1d      	ldr	r3, [pc, #116]	@ (800b0d4 <xTaskResumeAll.part.0+0x108>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b05e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b060:	68d2      	ldr	r2, [r2, #12]
 800b062:	6852      	ldr	r2, [r2, #4]
 800b064:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b066:	4e1c      	ldr	r6, [pc, #112]	@ (800b0d8 <xTaskResumeAll.part.0+0x10c>)
 800b068:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800b06a:	b144      	cbz	r4, 800b07e <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 800b06c:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800b06e:	f7ff fef7 	bl	800ae60 <xTaskIncrementTick>
 800b072:	b108      	cbz	r0, 800b078 <xTaskResumeAll.part.0+0xac>
								xYieldPending = pdTRUE;
 800b074:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b078:	3c01      	subs	r4, #1
 800b07a:	d1f8      	bne.n	800b06e <xTaskResumeAll.part.0+0xa2>
						xPendedTicks = 0;
 800b07c:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800b07e:	f8d9 3000 	ldr.w	r3, [r9]
 800b082:	b17b      	cbz	r3, 800b0a4 <xTaskResumeAll.part.0+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
 800b084:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b08c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800b098:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800b09a:	f000 fa65 	bl	800b568 <vPortExitCritical>
}
 800b09e:	4620      	mov	r0, r4
 800b0a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800b0a4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b0a6:	f000 fa5f 	bl	800b568 <vPortExitCritical>
}
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0b0:	4b08      	ldr	r3, [pc, #32]	@ (800b0d4 <xTaskResumeAll.part.0+0x108>)
 800b0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	e7d5      	b.n	800b066 <xTaskResumeAll.part.0+0x9a>
 800b0ba:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 800b0e4 <xTaskResumeAll.part.0+0x118>
 800b0be:	e7d2      	b.n	800b066 <xTaskResumeAll.part.0+0x9a>
 800b0c0:	20000758 	.word	0x20000758
 800b0c4:	20000780 	.word	0x20000780
 800b0c8:	20000778 	.word	0x20000778
 800b0cc:	20000880 	.word	0x20000880
 800b0d0:	200007c8 	.word	0x200007c8
 800b0d4:	20000760 	.word	0x20000760
 800b0d8:	20000770 	.word	0x20000770
 800b0dc:	200007b0 	.word	0x200007b0
 800b0e0:	200007f4 	.word	0x200007f4
 800b0e4:	2000076c 	.word	0x2000076c

0800b0e8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800b0e8:	4b06      	ldr	r3, [pc, #24]	@ (800b104 <xTaskResumeAll+0x1c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	b943      	cbnz	r3, 800b100 <xTaskResumeAll+0x18>
 800b0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	e7fe      	b.n	800b0fe <xTaskResumeAll+0x16>
 800b100:	f7ff bf64 	b.w	800afcc <xTaskResumeAll.part.0>
 800b104:	20000758 	.word	0x20000758

0800b108 <prvIdleTask>:
{
 800b108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	4d40      	ldr	r5, [pc, #256]	@ (800b210 <prvIdleTask+0x108>)
 800b10e:	4f41      	ldr	r7, [pc, #260]	@ (800b214 <prvIdleTask+0x10c>)
 800b110:	4e41      	ldr	r6, [pc, #260]	@ (800b218 <prvIdleTask+0x110>)
 800b112:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 800b228 <prvIdleTask+0x120>
 800b116:	f8df 9114 	ldr.w	r9, [pc, #276]	@ 800b22c <prvIdleTask+0x124>
 800b11a:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800b230 <prvIdleTask+0x128>
				taskYIELD();
 800b11e:	f04f 2be0 	mov.w	fp, #3758153728	@ 0xe000e000
 800b122:	e018      	b.n	800b156 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
 800b124:	f000 f9fe 	bl	800b524 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b12c:	1d20      	adds	r0, r4, #4
 800b12e:	f7ff fc9f 	bl	800aa70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b132:	6833      	ldr	r3, [r6, #0]
 800b134:	3b01      	subs	r3, #1
 800b136:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800b13e:	f000 fa13 	bl	800b568 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b142:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800b146:	f002 fc9f 	bl	800da88 <_reclaim_reent>
			vPortFree( pxTCB->pxStack );
 800b14a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800b14c:	f000 fc60 	bl	800ba10 <vPortFree>
			vPortFree( pxTCB );
 800b150:	4620      	mov	r0, r4
 800b152:	f000 fc5d 	bl	800ba10 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b156:	682b      	ldr	r3, [r5, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e3      	bne.n	800b124 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b15c:	f8d8 3000 	ldr.w	r3, [r8]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d907      	bls.n	800b174 <prvIdleTask+0x6c>
				taskYIELD();
 800b164:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b168:	f8cb 3d04 	str.w	r3, [fp, #3332]	@ 0xd04
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	f3bf 8f6f 	isb	sy
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800b174:	f8d9 3000 	ldr.w	r3, [r9]
 800b178:	2b01      	cmp	r3, #1
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b17a:	f8da 3000 	ldr.w	r3, [sl]
 800b17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800b180:	d904      	bls.n	800b18c <prvIdleTask+0x84>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e7      	bne.n	800b156 <prvIdleTask+0x4e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b186:	f8d8 3000 	ldr.w	r3, [r8]
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b18a:	e7e4      	b.n	800b156 <prvIdleTask+0x4e>
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e2      	bne.n	800b156 <prvIdleTask+0x4e>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b190:	f8d8 3000 	ldr.w	r3, [r8]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d8de      	bhi.n	800b156 <prvIdleTask+0x4e>
			xReturn = xNextTaskUnblockTime - xTickCount;
 800b198:	4920      	ldr	r1, [pc, #128]	@ (800b21c <prvIdleTask+0x114>)
 800b19a:	4821      	ldr	r0, [pc, #132]	@ (800b220 <prvIdleTask+0x118>)
 800b19c:	680b      	ldr	r3, [r1, #0]
 800b19e:	6802      	ldr	r2, [r0, #0]
 800b1a0:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d9d7      	bls.n	800b156 <prvIdleTask+0x4e>
	++uxSchedulerSuspended;
 800b1a6:	4a1f      	ldr	r2, [pc, #124]	@ (800b224 <prvIdleTask+0x11c>)
 800b1a8:	6813      	ldr	r3, [r2, #0]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	6013      	str	r3, [r2, #0]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b1ae:	680a      	ldr	r2, [r1, #0]
 800b1b0:	6803      	ldr	r3, [r0, #0]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d323      	bcc.n	800b1fe <prvIdleTask+0xf6>
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800b1b6:	f8d9 3000 	ldr.w	r3, [r9]
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800b1ba:	f8da 2000 	ldr.w	r2, [sl]
 800b1be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b1c0:	b922      	cbnz	r2, 800b1cc <prvIdleTask+0xc4>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800b1c2:	f8d8 2000 	ldr.w	r2, [r8]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d90e      	bls.n	800b1ea <prvIdleTask+0xe2>
	configASSERT( uxSchedulerSuspended );
 800b1cc:	4b15      	ldr	r3, [pc, #84]	@ (800b224 <prvIdleTask+0x11c>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	b943      	cbnz	r3, 800b1e4 <prvIdleTask+0xdc>
 800b1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	e7fe      	b.n	800b1e2 <prvIdleTask+0xda>
 800b1e4:	f7ff fef2 	bl	800afcc <xTaskResumeAll.part.0>
 800b1e8:	e7b5      	b.n	800b156 <prvIdleTask+0x4e>
			xReturn = xNextTaskUnblockTime - xTickCount;
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b21c <prvIdleTask+0x114>)
 800b1ec:	6818      	ldr	r0, [r3, #0]
 800b1ee:	4b0c      	ldr	r3, [pc, #48]	@ (800b220 <prvIdleTask+0x118>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800b1f4:	2801      	cmp	r0, #1
 800b1f6:	d9e9      	bls.n	800b1cc <prvIdleTask+0xc4>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800b1f8:	f000 fa12 	bl	800b620 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 800b1fc:	e7e6      	b.n	800b1cc <prvIdleTask+0xc4>
 800b1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800b20e:	e7fe      	b.n	800b20e <prvIdleTask+0x106>
 800b210:	20000798 	.word	0x20000798
 800b214:	2000079c 	.word	0x2000079c
 800b218:	20000780 	.word	0x20000780
 800b21c:	20000760 	.word	0x20000760
 800b220:	2000077c 	.word	0x2000077c
 800b224:	20000758 	.word	0x20000758
 800b228:	200007f4 	.word	0x200007f4
 800b22c:	20000778 	.word	0x20000778
 800b230:	20000880 	.word	0x20000880

0800b234 <vTaskDelay>:
	{
 800b234:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b236:	b950      	cbnz	r0, 800b24e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800b238:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b23c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b240:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b244:	f3bf 8f4f 	dsb	sy
 800b248:	f3bf 8f6f 	isb	sy
	}
 800b24c:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800b24e:	4c10      	ldr	r4, [pc, #64]	@ (800b290 <vTaskDelay+0x5c>)
 800b250:	6821      	ldr	r1, [r4, #0]
 800b252:	b141      	cbz	r1, 800b266 <vTaskDelay+0x32>
 800b254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	e7fe      	b.n	800b264 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	3301      	adds	r3, #1
 800b26a:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b26c:	f7ff fc14 	bl	800aa98 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	b943      	cbnz	r3, 800b286 <vTaskDelay+0x52>
 800b274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	e7fe      	b.n	800b284 <vTaskDelay+0x50>
 800b286:	f7ff fea1 	bl	800afcc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d0d4      	beq.n	800b238 <vTaskDelay+0x4>
	}
 800b28e:	bd10      	pop	{r4, pc}
 800b290:	20000758 	.word	0x20000758

0800b294 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b294:	4b18      	ldr	r3, [pc, #96]	@ (800b2f8 <vTaskSwitchContext+0x64>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	b11b      	cbz	r3, 800b2a2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800b29a:	4b18      	ldr	r3, [pc, #96]	@ (800b2fc <vTaskSwitchContext+0x68>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800b2a2:	4916      	ldr	r1, [pc, #88]	@ (800b2fc <vTaskSwitchContext+0x68>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a4:	4a16      	ldr	r2, [pc, #88]	@ (800b300 <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 800b2a6:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a8:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b2aa:	fab3 f383 	clz	r3, r3
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	f1c3 031f 	rsb	r3, r3, #31
 800b2b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b2b8:	4912      	ldr	r1, [pc, #72]	@ (800b304 <vTaskSwitchContext+0x70>)
 800b2ba:	009a      	lsls	r2, r3, #2
 800b2bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b2c0:	5888      	ldr	r0, [r1, r2]
 800b2c2:	b940      	cbnz	r0, 800b2d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	e7fe      	b.n	800b2d4 <vTaskSwitchContext+0x40>
 800b2d6:	6858      	ldr	r0, [r3, #4]
 800b2d8:	3208      	adds	r2, #8
 800b2da:	6840      	ldr	r0, [r0, #4]
 800b2dc:	6058      	str	r0, [r3, #4]
 800b2de:	440a      	add	r2, r1
 800b2e0:	4290      	cmp	r0, r2
 800b2e2:	bf04      	itt	eq
 800b2e4:	6840      	ldreq	r0, [r0, #4]
 800b2e6:	6058      	streq	r0, [r3, #4]
 800b2e8:	4b07      	ldr	r3, [pc, #28]	@ (800b308 <vTaskSwitchContext+0x74>)
 800b2ea:	68c2      	ldr	r2, [r0, #12]
 800b2ec:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a06      	ldr	r2, [pc, #24]	@ (800b30c <vTaskSwitchContext+0x78>)
 800b2f2:	334c      	adds	r3, #76	@ 0x4c
 800b2f4:	6013      	str	r3, [r2, #0]
}
 800b2f6:	4770      	bx	lr
 800b2f8:	20000758 	.word	0x20000758
 800b2fc:	2000076c 	.word	0x2000076c
 800b300:	20000778 	.word	0x20000778
 800b304:	200007f4 	.word	0x200007f4
 800b308:	20000880 	.word	0x20000880
 800b30c:	200001b0 	.word	0x200001b0

0800b310 <vTaskSuspend>:
	{
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b314:	4e38      	ldr	r6, [pc, #224]	@ (800b3f8 <vTaskSuspend+0xe8>)
		taskENTER_CRITICAL();
 800b316:	f000 f905 	bl	800b524 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b31a:	2c00      	cmp	r4, #0
 800b31c:	d04d      	beq.n	800b3ba <vTaskSuspend+0xaa>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b31e:	1d25      	adds	r5, r4, #4
 800b320:	4628      	mov	r0, r5
 800b322:	f7ff fba5 	bl	800aa70 <uxListRemove>
 800b326:	b930      	cbnz	r0, 800b336 <vTaskSuspend+0x26>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b328:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b32a:	4934      	ldr	r1, [pc, #208]	@ (800b3fc <vTaskSuspend+0xec>)
 800b32c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	58cb      	ldr	r3, [r1, r3]
 800b334:	b34b      	cbz	r3, 800b38a <vTaskSuspend+0x7a>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b336:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b338:	b11b      	cbz	r3, 800b342 <vTaskSuspend+0x32>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b33a:	f104 0018 	add.w	r0, r4, #24
 800b33e:	f7ff fb97 	bl	800aa70 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b342:	4629      	mov	r1, r5
 800b344:	482e      	ldr	r0, [pc, #184]	@ (800b400 <vTaskSuspend+0xf0>)
		if( xSchedulerRunning != pdFALSE )
 800b346:	4d2f      	ldr	r5, [pc, #188]	@ (800b404 <vTaskSuspend+0xf4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b348:	f7ff fb6c 	bl	800aa24 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b34c:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 800b350:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b352:	bf04      	itt	eq
 800b354:	2300      	moveq	r3, #0
 800b356:	f884 309c 	strbeq.w	r3, [r4, #156]	@ 0x9c
		taskEXIT_CRITICAL();
 800b35a:	f000 f905 	bl	800b568 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	b9e3      	cbnz	r3, 800b39c <vTaskSuspend+0x8c>
		if( pxTCB == pxCurrentTCB )
 800b362:	6833      	ldr	r3, [r6, #0]
 800b364:	42a3      	cmp	r3, r4
 800b366:	d000      	beq.n	800b36a <vTaskSuspend+0x5a>
	}
 800b368:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d02b      	beq.n	800b3c8 <vTaskSuspend+0xb8>
				configASSERT( uxSchedulerSuspended == 0 );
 800b370:	4b25      	ldr	r3, [pc, #148]	@ (800b408 <vTaskSuspend+0xf8>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d02f      	beq.n	800b3d8 <vTaskSuspend+0xc8>
 800b378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	e7fe      	b.n	800b388 <vTaskSuspend+0x78>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b38a:	4920      	ldr	r1, [pc, #128]	@ (800b40c <vTaskSuspend+0xfc>)
 800b38c:	2301      	movs	r3, #1
 800b38e:	fa03 f202 	lsl.w	r2, r3, r2
 800b392:	680b      	ldr	r3, [r1, #0]
 800b394:	ea23 0302 	bic.w	r3, r3, r2
 800b398:	600b      	str	r3, [r1, #0]
 800b39a:	e7cc      	b.n	800b336 <vTaskSuspend+0x26>
			taskENTER_CRITICAL();
 800b39c:	f000 f8c2 	bl	800b524 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3a0:	4b1b      	ldr	r3, [pc, #108]	@ (800b410 <vTaskSuspend+0x100>)
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	6812      	ldr	r2, [r2, #0]
 800b3a6:	b152      	cbz	r2, 800b3be <vTaskSuspend+0xae>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3a8:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b414 <vTaskSuspend+0x104>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ac:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3ae:	68d2      	ldr	r2, [r2, #12]
 800b3b0:	6852      	ldr	r2, [r2, #4]
 800b3b2:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800b3b4:	f000 f8d8 	bl	800b568 <vPortExitCritical>
 800b3b8:	e7d3      	b.n	800b362 <vTaskSuspend+0x52>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b3ba:	6834      	ldr	r4, [r6, #0]
 800b3bc:	e7af      	b.n	800b31e <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3be:	4b15      	ldr	r3, [pc, #84]	@ (800b414 <vTaskSuspend+0x104>)
 800b3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	e7f5      	b.n	800b3b4 <vTaskSuspend+0xa4>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b3c8:	490d      	ldr	r1, [pc, #52]	@ (800b400 <vTaskSuspend+0xf0>)
 800b3ca:	4a13      	ldr	r2, [pc, #76]	@ (800b418 <vTaskSuspend+0x108>)
 800b3cc:	6809      	ldr	r1, [r1, #0]
 800b3ce:	6812      	ldr	r2, [r2, #0]
 800b3d0:	4291      	cmp	r1, r2
 800b3d2:	d10c      	bne.n	800b3ee <vTaskSuspend+0xde>
					pxCurrentTCB = NULL;
 800b3d4:	6033      	str	r3, [r6, #0]
	}
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 800b3d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b3dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	f3bf 8f6f 	isb	sy
	}
 800b3ec:	bd70      	pop	{r4, r5, r6, pc}
 800b3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800b3f2:	f7ff bf4f 	b.w	800b294 <vTaskSwitchContext>
 800b3f6:	bf00      	nop
 800b3f8:	20000880 	.word	0x20000880
 800b3fc:	200007f4 	.word	0x200007f4
 800b400:	20000784 	.word	0x20000784
 800b404:	20000774 	.word	0x20000774
 800b408:	20000758 	.word	0x20000758
 800b40c:	20000778 	.word	0x20000778
 800b410:	200007c8 	.word	0x200007c8
 800b414:	20000760 	.word	0x20000760
 800b418:	20000780 	.word	0x20000780

0800b41c <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800b41c:	4b09      	ldr	r3, [pc, #36]	@ (800b444 <eTaskConfirmSleepModeStatus+0x28>)
 800b41e:	6818      	ldr	r0, [r3, #0]
 800b420:	b918      	cbnz	r0, 800b42a <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
 800b422:	4b09      	ldr	r3, [pc, #36]	@ (800b448 <eTaskConfirmSleepModeStatus+0x2c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	b113      	cbz	r3, 800b42e <eTaskConfirmSleepModeStatus+0x12>
	}
 800b428:	4770      	bx	lr
			eReturn = eAbortSleep;
 800b42a:	2000      	movs	r0, #0
	}
 800b42c:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800b42e:	4a07      	ldr	r2, [pc, #28]	@ (800b44c <eTaskConfirmSleepModeStatus+0x30>)
 800b430:	4b07      	ldr	r3, [pc, #28]	@ (800b450 <eTaskConfirmSleepModeStatus+0x34>)
 800b432:	6810      	ldr	r0, [r2, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3b01      	subs	r3, #1
	eSleepModeStatus eReturn = eStandardSleep;
 800b438:	4298      	cmp	r0, r3
 800b43a:	bf0c      	ite	eq
 800b43c:	2002      	moveq	r0, #2
 800b43e:	2001      	movne	r0, #1
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	200007b0 	.word	0x200007b0
 800b448:	2000076c 	.word	0x2000076c
 800b44c:	20000784 	.word	0x20000784
 800b450:	20000780 	.word	0x20000780

0800b454 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b454:	4808      	ldr	r0, [pc, #32]	@ (800b478 <prvPortStartFirstTask+0x24>)
 800b456:	6800      	ldr	r0, [r0, #0]
 800b458:	6800      	ldr	r0, [r0, #0]
 800b45a:	f380 8808 	msr	MSP, r0
 800b45e:	f04f 0000 	mov.w	r0, #0
 800b462:	f380 8814 	msr	CONTROL, r0
 800b466:	b662      	cpsie	i
 800b468:	b661      	cpsie	f
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	df00      	svc	0
 800b474:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b476:	0000      	.short	0x0000
 800b478:	e000ed08 	.word	0xe000ed08

0800b47c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b47c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b48c <vPortEnableVFP+0x10>
 800b480:	6801      	ldr	r1, [r0, #0]
 800b482:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b486:	6001      	str	r1, [r0, #0]
 800b488:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b48a:	0000      	.short	0x0000
 800b48c:	e000ed88 	.word	0xe000ed88

0800b490 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800b490:	4b0e      	ldr	r3, [pc, #56]	@ (800b4cc <prvTaskExitError+0x3c>)
 800b492:	681b      	ldr	r3, [r3, #0]
{
 800b494:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b496:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800b498:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800b49a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b49c:	d008      	beq.n	800b4b0 <prvTaskExitError+0x20>
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	e7fe      	b.n	800b4ae <prvTaskExitError+0x1e>
 800b4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b4c0:	9b01      	ldr	r3, [sp, #4]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d0fc      	beq.n	800b4c0 <prvTaskExitError+0x30>
}
 800b4c6:	b002      	add	sp, #8
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	20000034 	.word	0x20000034

0800b4d0 <pxPortInitialiseStack>:
{
 800b4d0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4d6:	4c07      	ldr	r4, [pc, #28]	@ (800b4f4 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4d8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4dc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4e0:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4e4:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4e8:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 800b4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4f0:	3844      	subs	r0, #68	@ 0x44
 800b4f2:	4770      	bx	lr
 800b4f4:	0800b491 	.word	0x0800b491
	...

0800b500 <SVC_Handler>:
	__asm volatile (
 800b500:	4b07      	ldr	r3, [pc, #28]	@ (800b520 <pxCurrentTCBConst2>)
 800b502:	6819      	ldr	r1, [r3, #0]
 800b504:	6808      	ldr	r0, [r1, #0]
 800b506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50a:	f380 8809 	msr	PSP, r0
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	f04f 0000 	mov.w	r0, #0
 800b516:	f380 8811 	msr	BASEPRI, r0
 800b51a:	4770      	bx	lr
 800b51c:	f3af 8000 	nop.w

0800b520 <pxCurrentTCBConst2>:
 800b520:	20000880 	.word	0x20000880

0800b524 <vPortEnterCritical>:
 800b524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b534:	4a0b      	ldr	r2, [pc, #44]	@ (800b564 <vPortEnterCritical+0x40>)
 800b536:	6813      	ldr	r3, [r2, #0]
 800b538:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b53a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b53c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b53e:	d000      	beq.n	800b542 <vPortEnterCritical+0x1e>
}
 800b540:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b542:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b546:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d0f7      	beq.n	800b540 <vPortEnterCritical+0x1c>
 800b550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b554:	f383 8811 	msr	BASEPRI, r3
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	e7fe      	b.n	800b560 <vPortEnterCritical+0x3c>
 800b562:	bf00      	nop
 800b564:	20000034 	.word	0x20000034

0800b568 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b568:	4a08      	ldr	r2, [pc, #32]	@ (800b58c <vPortExitCritical+0x24>)
 800b56a:	6813      	ldr	r3, [r2, #0]
 800b56c:	b943      	cbnz	r3, 800b580 <vPortExitCritical+0x18>
 800b56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	e7fe      	b.n	800b57e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b580:	3b01      	subs	r3, #1
 800b582:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b584:	b90b      	cbnz	r3, 800b58a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b586:	f383 8811 	msr	BASEPRI, r3
}
 800b58a:	4770      	bx	lr
 800b58c:	20000034 	.word	0x20000034

0800b590 <PendSV_Handler>:
	__asm volatile
 800b590:	f3ef 8009 	mrs	r0, PSP
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4b15      	ldr	r3, [pc, #84]	@ (800b5f0 <pxCurrentTCBConst>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	f01e 0f10 	tst.w	lr, #16
 800b5a0:	bf08      	it	eq
 800b5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5aa:	6010      	str	r0, [r2, #0]
 800b5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b5b4:	f380 8811 	msr	BASEPRI, r0
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f7ff fe68 	bl	800b294 <vTaskSwitchContext>
 800b5c4:	f04f 0000 	mov.w	r0, #0
 800b5c8:	f380 8811 	msr	BASEPRI, r0
 800b5cc:	bc09      	pop	{r0, r3}
 800b5ce:	6819      	ldr	r1, [r3, #0]
 800b5d0:	6808      	ldr	r0, [r1, #0]
 800b5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d6:	f01e 0f10 	tst.w	lr, #16
 800b5da:	bf08      	it	eq
 800b5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b5e0:	f380 8809 	msr	PSP, r0
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	f3af 8000 	nop.w

0800b5f0 <pxCurrentTCBConst>:
 800b5f0:	20000880 	.word	0x20000880

0800b5f4 <SysTick_Handler>:
{
 800b5f4:	b508      	push	{r3, lr}
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b606:	f7ff fc2b 	bl	800ae60 <xTaskIncrementTick>
 800b60a:	b128      	cbz	r0, 800b618 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b60c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b614:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800b618:	2300      	movs	r3, #0
 800b61a:	f383 8811 	msr	BASEPRI, r3
}
 800b61e:	bd08      	pop	{r3, pc}

0800b620 <vPortSuppressTicksAndSleep>:
	{
 800b620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b624:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800b628:	493c      	ldr	r1, [pc, #240]	@ (800b71c <vPortSuppressTicksAndSleep+0xfc>)
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	6809      	ldr	r1, [r1, #0]
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b62e:	4f3c      	ldr	r7, [pc, #240]	@ (800b720 <vPortSuppressTicksAndSleep+0x100>)
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b630:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 800b724 <vPortSuppressTicksAndSleep+0x104>
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800b634:	f022 0201 	bic.w	r2, r2, #1
 800b638:	611a      	str	r2, [r3, #16]
 800b63a:	4288      	cmp	r0, r1
 800b63c:	bf28      	it	cs
 800b63e:	4608      	movcs	r0, r1
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800b640:	699c      	ldr	r4, [r3, #24]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	f100 38ff 	add.w	r8, r0, #4294967295
 800b648:	fb03 4408 	mla	r4, r3, r8, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 800b64c:	f8d9 3000 	ldr.w	r3, [r9]
 800b650:	42a3      	cmp	r3, r4
			ulReloadValue -= ulStoppedTimerCompensation;
 800b652:	bf38      	it	cc
 800b654:	1ae4      	subcc	r4, r4, r3
 800b656:	4606      	mov	r6, r0
		__asm volatile( "cpsid i" ::: "memory" );
 800b658:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800b65a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800b65e:	f3bf 8f6f 	isb	sy
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800b662:	f7ff fedb 	bl	800b41c <eTaskConfirmSleepModeStatus>
 800b666:	b968      	cbnz	r0, 800b684 <vPortSuppressTicksAndSleep+0x64>
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b668:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b66c:	699a      	ldr	r2, [r3, #24]
 800b66e:	615a      	str	r2, [r3, #20]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b670:	691a      	ldr	r2, [r3, #16]
 800b672:	f042 0201 	orr.w	r2, r2, #1
 800b676:	611a      	str	r2, [r3, #16]
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	3a01      	subs	r2, #1
 800b67c:	615a      	str	r2, [r3, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800b67e:	b662      	cpsie	i
	}
 800b680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b684:	f04f 25e0 	mov.w	r5, #3758153728	@ 0xe000e000
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b688:	2000      	movs	r0, #0
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800b68a:	616c      	str	r4, [r5, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b68c:	61a8      	str	r0, [r5, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b68e:	692b      	ldr	r3, [r5, #16]
 800b690:	f043 0301 	orr.w	r3, r3, #1
 800b694:	612b      	str	r3, [r5, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 800b696:	f7f8 fd6d 	bl	8004174 <PreSleepProcessing>
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 800b69a:	4630      	mov	r0, r6
 800b69c:	f7f8 fd6c 	bl	8004178 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800b6a0:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800b6a2:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b6a6:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800b6aa:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800b6ac:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800b6b0:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800b6b4:	2306      	movs	r3, #6
 800b6b6:	612b      	str	r3, [r5, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800b6b8:	692b      	ldr	r3, [r5, #16]
 800b6ba:	03db      	lsls	r3, r3, #15
 800b6bc:	d50f      	bpl.n	800b6de <vPortSuppressTicksAndSleep+0xbe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b6be:	69ab      	ldr	r3, [r5, #24]
 800b6c0:	683a      	ldr	r2, [r7, #0]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b6c2:	f8d9 1000 	ldr.w	r1, [r9]
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800b6c6:	4413      	add	r3, r2
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	1b1b      	subs	r3, r3, r4
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800b6cc:	4299      	cmp	r1, r3
 800b6ce:	d801      	bhi.n	800b6d4 <vPortSuppressTicksAndSleep+0xb4>
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d200      	bcs.n	800b6d6 <vPortSuppressTicksAndSleep+0xb6>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800b6d4:	1e53      	subs	r3, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800b6d6:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b6da:	6153      	str	r3, [r2, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800b6dc:	e00c      	b.n	800b6f8 <vPortSuppressTicksAndSleep+0xd8>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	69aa      	ldr	r2, [r5, #24]
 800b6e2:	fb06 f003 	mul.w	r0, r6, r3
 800b6e6:	eba0 0802 	sub.w	r8, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b6ea:	1a12      	subs	r2, r2, r0
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800b6ec:	fbb8 f8f3 	udiv	r8, r8, r3
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800b6f0:	fb08 3303 	mla	r3, r8, r3, r3
 800b6f4:	4413      	add	r3, r2
 800b6f6:	616b      	str	r3, [r5, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6f8:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	f043 0301 	orr.w	r3, r3, #1
 800b706:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 800b708:	4640      	mov	r0, r8
 800b70a:	f7ff fb91 	bl	800ae30 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	3b01      	subs	r3, #1
 800b712:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800b714:	b662      	cpsie	i
	}
 800b716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71a:	bf00      	nop
 800b71c:	20000890 	.word	0x20000890
 800b720:	20000894 	.word	0x20000894
 800b724:	2000088c 	.word	0x2000088c

0800b728 <vPortSetupTimerInterrupt>:
{
 800b728:	b4f0      	push	{r4, r5, r6, r7}
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b72a:	4c10      	ldr	r4, [pc, #64]	@ (800b76c <vPortSetupTimerInterrupt+0x44>)
 800b72c:	4910      	ldr	r1, [pc, #64]	@ (800b770 <vPortSetupTimerInterrupt+0x48>)
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	4a10      	ldr	r2, [pc, #64]	@ (800b774 <vPortSetupTimerInterrupt+0x4c>)
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b732:	4e11      	ldr	r6, [pc, #68]	@ (800b778 <vPortSetupTimerInterrupt+0x50>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b734:	fba1 0303 	umull	r0, r3, r1, r3
 800b738:	099b      	lsrs	r3, r3, #6
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b73a:	4810      	ldr	r0, [pc, #64]	@ (800b77c <vPortSetupTimerInterrupt+0x54>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800b73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b73e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b742:	2500      	movs	r5, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800b744:	272d      	movs	r7, #45	@ 0x2d
 800b746:	6007      	str	r7, [r0, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800b748:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800b74c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b750:	6033      	str	r3, [r6, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b752:	6115      	str	r5, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b754:	6195      	str	r5, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b756:	6823      	ldr	r3, [r4, #0]
 800b758:	fba1 1303 	umull	r1, r3, r1, r3
 800b75c:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b75e:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b760:	3b01      	subs	r3, #1
 800b762:	6153      	str	r3, [r2, #20]
}
 800b764:	bcf0      	pop	{r4, r5, r6, r7}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b766:	6110      	str	r0, [r2, #16]
}
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	20000004 	.word	0x20000004
 800b770:	10624dd3 	.word	0x10624dd3
 800b774:	20000894 	.word	0x20000894
 800b778:	20000890 	.word	0x20000890
 800b77c:	2000088c 	.word	0x2000088c

0800b780 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b780:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b784:	4a3d      	ldr	r2, [pc, #244]	@ (800b87c <xPortStartScheduler+0xfc>)
 800b786:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800b78a:	4291      	cmp	r1, r2
 800b78c:	d041      	beq.n	800b812 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b78e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800b792:	4b3b      	ldr	r3, [pc, #236]	@ (800b880 <xPortStartScheduler+0x100>)
 800b794:	429a      	cmp	r2, r3
 800b796:	d033      	beq.n	800b800 <xPortStartScheduler+0x80>
{
 800b798:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b79a:	4b3a      	ldr	r3, [pc, #232]	@ (800b884 <xPortStartScheduler+0x104>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b79c:	4c3a      	ldr	r4, [pc, #232]	@ (800b888 <xPortStartScheduler+0x108>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b79e:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7a0:	483a      	ldr	r0, [pc, #232]	@ (800b88c <xPortStartScheduler+0x10c>)
{
 800b7a2:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7a4:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7a6:	b2d2      	uxtb	r2, r2
 800b7a8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7aa:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7c0:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7c2:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7c4:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7c6:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7c8:	bf48      	it	mi
 800b7ca:	2206      	movmi	r2, #6
 800b7cc:	d50f      	bpl.n	800b7ee <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b7de:	061b      	lsls	r3, r3, #24
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	f102 32ff 	add.w	r2, r2, #4294967295
 800b7e6:	d4f2      	bmi.n	800b7ce <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7e8:	2903      	cmp	r1, #3
 800b7ea:	d01b      	beq.n	800b824 <xPortStartScheduler+0xa4>
 800b7ec:	6001      	str	r1, [r0, #0]
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	e7fe      	b.n	800b7fe <xPortStartScheduler+0x7e>
 800b800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b810:	e7fe      	b.n	800b810 <xPortStartScheduler+0x90>
 800b812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b822:	e7fe      	b.n	800b822 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	4a17      	ldr	r2, [pc, #92]	@ (800b884 <xPortStartScheduler+0x104>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b828:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b82c:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b830:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b832:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b834:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b836:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b83a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b83e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b842:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b846:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b84a:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800b84e:	f7ff ff6b 	bl	800b728 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b852:	4b0f      	ldr	r3, [pc, #60]	@ (800b890 <xPortStartScheduler+0x110>)
 800b854:	2500      	movs	r5, #0
 800b856:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b858:	f7ff fe10 	bl	800b47c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b85c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800b860:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b864:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800b868:	f7ff fdf4 	bl	800b454 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b86c:	f7ff fd12 	bl	800b294 <vTaskSwitchContext>
	prvTaskExitError();
 800b870:	f7ff fe0e 	bl	800b490 <prvTaskExitError>
}
 800b874:	4628      	mov	r0, r5
 800b876:	b003      	add	sp, #12
 800b878:	bd30      	pop	{r4, r5, pc}
 800b87a:	bf00      	nop
 800b87c:	410fc271 	.word	0x410fc271
 800b880:	410fc270 	.word	0x410fc270
 800b884:	e000e400 	.word	0xe000e400
 800b888:	20000888 	.word	0x20000888
 800b88c:	20000884 	.word	0x20000884
 800b890:	20000034 	.word	0x20000034

0800b894 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b894:	b430      	push	{r4, r5}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b896:	4b12      	ldr	r3, [pc, #72]	@ (800b8e0 <prvInsertBlockIntoFreeList+0x4c>)
 800b898:	461a      	mov	r2, r3
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4283      	cmp	r3, r0
 800b89e:	d3fb      	bcc.n	800b898 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8a0:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8a2:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8a4:	eb02 0c04 	add.w	ip, r2, r4
 800b8a8:	4560      	cmp	r0, ip
 800b8aa:	d008      	beq.n	800b8be <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8ac:	1844      	adds	r4, r0, r1
 800b8ae:	42a3      	cmp	r3, r4
 800b8b0:	d00b      	beq.n	800b8ca <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8b2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b8b4:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b8b6:	bf18      	it	ne
 800b8b8:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8ba:	bc30      	pop	{r4, r5}
 800b8bc:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8be:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8c0:	1850      	adds	r0, r2, r1
 800b8c2:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8c4:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8c6:	d1f8      	bne.n	800b8ba <prvInsertBlockIntoFreeList+0x26>
 800b8c8:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8ca:	4c06      	ldr	r4, [pc, #24]	@ (800b8e4 <prvInsertBlockIntoFreeList+0x50>)
 800b8cc:	6824      	ldr	r4, [r4, #0]
 800b8ce:	42a3      	cmp	r3, r4
 800b8d0:	d003      	beq.n	800b8da <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8d2:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8d6:	4429      	add	r1, r5
 800b8d8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8da:	6004      	str	r4, [r0, #0]
 800b8dc:	e7ea      	b.n	800b8b4 <prvInsertBlockIntoFreeList+0x20>
 800b8de:	bf00      	nop
 800b8e0:	200008b0 	.word	0x200008b0
 800b8e4:	200008ac 	.word	0x200008ac

0800b8e8 <pvPortMalloc>:
{
 800b8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 800b8ec:	4e40      	ldr	r6, [pc, #256]	@ (800b9f0 <pvPortMalloc+0x108>)
{
 800b8ee:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b8f0:	f7ff fa96 	bl	800ae20 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b8f4:	6833      	ldr	r3, [r6, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d05c      	beq.n	800b9b4 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8fa:	4b3e      	ldr	r3, [pc, #248]	@ (800b9f4 <pvPortMalloc+0x10c>)
 800b8fc:	681d      	ldr	r5, [r3, #0]
 800b8fe:	422c      	tst	r4, r5
 800b900:	d12e      	bne.n	800b960 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 800b902:	b36c      	cbz	r4, 800b960 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 800b904:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b908:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b90a:	bf1c      	itt	ne
 800b90c:	f021 0107 	bicne.w	r1, r1, #7
 800b910:	3108      	addne	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b912:	b329      	cbz	r1, 800b960 <pvPortMalloc+0x78>
 800b914:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 800ba0c <pvPortMalloc+0x124>
 800b918:	f8d8 7000 	ldr.w	r7, [r8]
 800b91c:	428f      	cmp	r7, r1
 800b91e:	d31f      	bcc.n	800b960 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 800b920:	4835      	ldr	r0, [pc, #212]	@ (800b9f8 <pvPortMalloc+0x110>)
 800b922:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b924:	e003      	b.n	800b92e <pvPortMalloc+0x46>
 800b926:	6823      	ldr	r3, [r4, #0]
 800b928:	b123      	cbz	r3, 800b934 <pvPortMalloc+0x4c>
 800b92a:	4620      	mov	r0, r4
 800b92c:	461c      	mov	r4, r3
 800b92e:	6862      	ldr	r2, [r4, #4]
 800b930:	428a      	cmp	r2, r1
 800b932:	d3f8      	bcc.n	800b926 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800b934:	6833      	ldr	r3, [r6, #0]
 800b936:	42a3      	cmp	r3, r4
 800b938:	d012      	beq.n	800b960 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b93a:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b93c:	6826      	ldr	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b93e:	f8d0 9000 	ldr.w	r9, [r0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b942:	6006      	str	r6, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b944:	2b10      	cmp	r3, #16
 800b946:	d916      	bls.n	800b976 <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b948:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b94a:	0742      	lsls	r2, r0, #29
 800b94c:	d00e      	beq.n	800b96c <pvPortMalloc+0x84>
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	e7fe      	b.n	800b95e <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 800b960:	f7ff fbc2 	bl	800b0e8 <xTaskResumeAll>
void *pvReturn = NULL;
 800b964:	2600      	movs	r6, #0
}
 800b966:	4630      	mov	r0, r6
 800b968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b96c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b96e:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b970:	f7ff ff90 	bl	800b894 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b974:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b976:	4b21      	ldr	r3, [pc, #132]	@ (800b9fc <pvPortMalloc+0x114>)
 800b978:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b97a:	1abf      	subs	r7, r7, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b97c:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 800b97e:	4920      	ldr	r1, [pc, #128]	@ (800ba00 <pvPortMalloc+0x118>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b980:	bf38      	it	cc
 800b982:	601f      	strcc	r7, [r3, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b984:	432a      	orrs	r2, r5
					pxBlock->pxNextFreeBlock = NULL;
 800b986:	2300      	movs	r3, #0
 800b988:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 800b98c:	680b      	ldr	r3, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b98e:	f8c8 7000 	str.w	r7, [r8]
					xNumberOfSuccessfulAllocations++;
 800b992:	3301      	adds	r3, #1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b994:	f109 0608 	add.w	r6, r9, #8
					xNumberOfSuccessfulAllocations++;
 800b998:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800b99a:	f7ff fba5 	bl	800b0e8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b99e:	0773      	lsls	r3, r6, #29
 800b9a0:	d0e1      	beq.n	800b966 <pvPortMalloc+0x7e>
 800b9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	e7fe      	b.n	800b9b2 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 800b9b4:	4b13      	ldr	r3, [pc, #76]	@ (800ba04 <pvPortMalloc+0x11c>)
	uxAddress -= xHeapStructSize;
 800b9b6:	4a14      	ldr	r2, [pc, #80]	@ (800ba08 <pvPortMalloc+0x120>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9b8:	4910      	ldr	r1, [pc, #64]	@ (800b9fc <pvPortMalloc+0x114>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9ba:	4f0e      	ldr	r7, [pc, #56]	@ (800b9f4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9bc:	075d      	lsls	r5, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9be:	bf18      	it	ne
 800b9c0:	3307      	addne	r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9c2:	4d0d      	ldr	r5, [pc, #52]	@ (800b9f8 <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9c4:	f022 0207 	bic.w	r2, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9c8:	bf18      	it	ne
 800b9ca:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9ce:	602b      	str	r3, [r5, #0]
 800b9d0:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b9d2:	1ad3      	subs	r3, r2, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9d4:	600b      	str	r3, [r1, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9d6:	490d      	ldr	r1, [pc, #52]	@ (800ba0c <pvPortMalloc+0x124>)
	pxEnd = ( void * ) uxAddress;
 800b9d8:	6032      	str	r2, [r6, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b9da:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9dc:	2100      	movs	r1, #0
 800b9de:	6069      	str	r1, [r5, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9e0:	f04f 4500 	mov.w	r5, #2147483648	@ 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
 800b9e4:	e9c2 1100 	strd	r1, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b9e8:	603d      	str	r5, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b9ea:	e9c0 2300 	strd	r2, r3, [r0]
}
 800b9ee:	e786      	b.n	800b8fe <pvPortMalloc+0x16>
 800b9f0:	200008ac 	.word	0x200008ac
 800b9f4:	20000898 	.word	0x20000898
 800b9f8:	200008b0 	.word	0x200008b0
 800b9fc:	200008a4 	.word	0x200008a4
 800ba00:	200008a0 	.word	0x200008a0
 800ba04:	200008b8 	.word	0x200008b8
 800ba08:	200048b0 	.word	0x200048b0
 800ba0c:	200008a8 	.word	0x200008a8

0800ba10 <vPortFree>:
	if( pv != NULL )
 800ba10:	b1d0      	cbz	r0, 800ba48 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba12:	4a1c      	ldr	r2, [pc, #112]	@ (800ba84 <vPortFree+0x74>)
 800ba14:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	4213      	tst	r3, r2
 800ba1c:	d00b      	beq.n	800ba36 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba1e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ba22:	b191      	cbz	r1, 800ba4a <vPortFree+0x3a>
 800ba24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	e7fe      	b.n	800ba34 <vPortFree+0x24>
 800ba36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba46:	e7fe      	b.n	800ba46 <vPortFree+0x36>
 800ba48:	4770      	bx	lr
{
 800ba4a:	b500      	push	{lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba4c:	ea23 0302 	bic.w	r3, r3, r2
{
 800ba50:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba52:	f840 3c04 	str.w	r3, [r0, #-4]
 800ba56:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 800ba58:	f7ff f9e2 	bl	800ae20 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba5c:	4a0a      	ldr	r2, [pc, #40]	@ (800ba88 <vPortFree+0x78>)
 800ba5e:	9801      	ldr	r0, [sp, #4]
 800ba60:	6811      	ldr	r1, [r2, #0]
 800ba62:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba66:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba68:	440b      	add	r3, r1
 800ba6a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba6c:	f7ff ff12 	bl	800b894 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba70:	4a06      	ldr	r2, [pc, #24]	@ (800ba8c <vPortFree+0x7c>)
 800ba72:	6813      	ldr	r3, [r2, #0]
 800ba74:	3301      	adds	r3, #1
 800ba76:	6013      	str	r3, [r2, #0]
}
 800ba78:	b003      	add	sp, #12
 800ba7a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 800ba7e:	f7ff bb33 	b.w	800b0e8 <xTaskResumeAll>
 800ba82:	bf00      	nop
 800ba84:	20000898 	.word	0x20000898
 800ba88:	200008a8 	.word	0x200008a8
 800ba8c:	2000089c 	.word	0x2000089c

0800ba90 <malloc>:
 800ba90:	4b02      	ldr	r3, [pc, #8]	@ (800ba9c <malloc+0xc>)
 800ba92:	4601      	mov	r1, r0
 800ba94:	6818      	ldr	r0, [r3, #0]
 800ba96:	f000 b825 	b.w	800bae4 <_malloc_r>
 800ba9a:	bf00      	nop
 800ba9c:	200001b0 	.word	0x200001b0

0800baa0 <sbrk_aligned>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	4e0f      	ldr	r6, [pc, #60]	@ (800bae0 <sbrk_aligned+0x40>)
 800baa4:	460c      	mov	r4, r1
 800baa6:	6831      	ldr	r1, [r6, #0]
 800baa8:	4605      	mov	r5, r0
 800baaa:	b911      	cbnz	r1, 800bab2 <sbrk_aligned+0x12>
 800baac:	f002 f866 	bl	800db7c <_sbrk_r>
 800bab0:	6030      	str	r0, [r6, #0]
 800bab2:	4621      	mov	r1, r4
 800bab4:	4628      	mov	r0, r5
 800bab6:	f002 f861 	bl	800db7c <_sbrk_r>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	d103      	bne.n	800bac6 <sbrk_aligned+0x26>
 800babe:	f04f 34ff 	mov.w	r4, #4294967295
 800bac2:	4620      	mov	r0, r4
 800bac4:	bd70      	pop	{r4, r5, r6, pc}
 800bac6:	1cc4      	adds	r4, r0, #3
 800bac8:	f024 0403 	bic.w	r4, r4, #3
 800bacc:	42a0      	cmp	r0, r4
 800bace:	d0f8      	beq.n	800bac2 <sbrk_aligned+0x22>
 800bad0:	1a21      	subs	r1, r4, r0
 800bad2:	4628      	mov	r0, r5
 800bad4:	f002 f852 	bl	800db7c <_sbrk_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	d1f2      	bne.n	800bac2 <sbrk_aligned+0x22>
 800badc:	e7ef      	b.n	800babe <sbrk_aligned+0x1e>
 800bade:	bf00      	nop
 800bae0:	200048b8 	.word	0x200048b8

0800bae4 <_malloc_r>:
 800bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	1ccd      	adds	r5, r1, #3
 800baea:	f025 0503 	bic.w	r5, r5, #3
 800baee:	3508      	adds	r5, #8
 800baf0:	2d0c      	cmp	r5, #12
 800baf2:	bf38      	it	cc
 800baf4:	250c      	movcc	r5, #12
 800baf6:	2d00      	cmp	r5, #0
 800baf8:	4606      	mov	r6, r0
 800bafa:	db01      	blt.n	800bb00 <_malloc_r+0x1c>
 800bafc:	42a9      	cmp	r1, r5
 800bafe:	d904      	bls.n	800bb0a <_malloc_r+0x26>
 800bb00:	230c      	movs	r3, #12
 800bb02:	6033      	str	r3, [r6, #0]
 800bb04:	2000      	movs	r0, #0
 800bb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbe0 <_malloc_r+0xfc>
 800bb0e:	f000 f869 	bl	800bbe4 <__malloc_lock>
 800bb12:	f8d8 3000 	ldr.w	r3, [r8]
 800bb16:	461c      	mov	r4, r3
 800bb18:	bb44      	cbnz	r4, 800bb6c <_malloc_r+0x88>
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7ff ffbf 	bl	800baa0 <sbrk_aligned>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	4604      	mov	r4, r0
 800bb26:	d158      	bne.n	800bbda <_malloc_r+0xf6>
 800bb28:	f8d8 4000 	ldr.w	r4, [r8]
 800bb2c:	4627      	mov	r7, r4
 800bb2e:	2f00      	cmp	r7, #0
 800bb30:	d143      	bne.n	800bbba <_malloc_r+0xd6>
 800bb32:	2c00      	cmp	r4, #0
 800bb34:	d04b      	beq.n	800bbce <_malloc_r+0xea>
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	4639      	mov	r1, r7
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	eb04 0903 	add.w	r9, r4, r3
 800bb40:	f002 f81c 	bl	800db7c <_sbrk_r>
 800bb44:	4581      	cmp	r9, r0
 800bb46:	d142      	bne.n	800bbce <_malloc_r+0xea>
 800bb48:	6821      	ldr	r1, [r4, #0]
 800bb4a:	1a6d      	subs	r5, r5, r1
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f7ff ffa6 	bl	800baa0 <sbrk_aligned>
 800bb54:	3001      	adds	r0, #1
 800bb56:	d03a      	beq.n	800bbce <_malloc_r+0xea>
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	442b      	add	r3, r5
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb62:	685a      	ldr	r2, [r3, #4]
 800bb64:	bb62      	cbnz	r2, 800bbc0 <_malloc_r+0xdc>
 800bb66:	f8c8 7000 	str.w	r7, [r8]
 800bb6a:	e00f      	b.n	800bb8c <_malloc_r+0xa8>
 800bb6c:	6822      	ldr	r2, [r4, #0]
 800bb6e:	1b52      	subs	r2, r2, r5
 800bb70:	d420      	bmi.n	800bbb4 <_malloc_r+0xd0>
 800bb72:	2a0b      	cmp	r2, #11
 800bb74:	d917      	bls.n	800bba6 <_malloc_r+0xc2>
 800bb76:	1961      	adds	r1, r4, r5
 800bb78:	42a3      	cmp	r3, r4
 800bb7a:	6025      	str	r5, [r4, #0]
 800bb7c:	bf18      	it	ne
 800bb7e:	6059      	strne	r1, [r3, #4]
 800bb80:	6863      	ldr	r3, [r4, #4]
 800bb82:	bf08      	it	eq
 800bb84:	f8c8 1000 	streq.w	r1, [r8]
 800bb88:	5162      	str	r2, [r4, r5]
 800bb8a:	604b      	str	r3, [r1, #4]
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f000 f82f 	bl	800bbf0 <__malloc_unlock>
 800bb92:	f104 000b 	add.w	r0, r4, #11
 800bb96:	1d23      	adds	r3, r4, #4
 800bb98:	f020 0007 	bic.w	r0, r0, #7
 800bb9c:	1ac2      	subs	r2, r0, r3
 800bb9e:	bf1c      	itt	ne
 800bba0:	1a1b      	subne	r3, r3, r0
 800bba2:	50a3      	strne	r3, [r4, r2]
 800bba4:	e7af      	b.n	800bb06 <_malloc_r+0x22>
 800bba6:	6862      	ldr	r2, [r4, #4]
 800bba8:	42a3      	cmp	r3, r4
 800bbaa:	bf0c      	ite	eq
 800bbac:	f8c8 2000 	streq.w	r2, [r8]
 800bbb0:	605a      	strne	r2, [r3, #4]
 800bbb2:	e7eb      	b.n	800bb8c <_malloc_r+0xa8>
 800bbb4:	4623      	mov	r3, r4
 800bbb6:	6864      	ldr	r4, [r4, #4]
 800bbb8:	e7ae      	b.n	800bb18 <_malloc_r+0x34>
 800bbba:	463c      	mov	r4, r7
 800bbbc:	687f      	ldr	r7, [r7, #4]
 800bbbe:	e7b6      	b.n	800bb2e <_malloc_r+0x4a>
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	42a3      	cmp	r3, r4
 800bbc6:	d1fb      	bne.n	800bbc0 <_malloc_r+0xdc>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	6053      	str	r3, [r2, #4]
 800bbcc:	e7de      	b.n	800bb8c <_malloc_r+0xa8>
 800bbce:	230c      	movs	r3, #12
 800bbd0:	6033      	str	r3, [r6, #0]
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	f000 f80c 	bl	800bbf0 <__malloc_unlock>
 800bbd8:	e794      	b.n	800bb04 <_malloc_r+0x20>
 800bbda:	6005      	str	r5, [r0, #0]
 800bbdc:	e7d6      	b.n	800bb8c <_malloc_r+0xa8>
 800bbde:	bf00      	nop
 800bbe0:	200048bc 	.word	0x200048bc

0800bbe4 <__malloc_lock>:
 800bbe4:	4801      	ldr	r0, [pc, #4]	@ (800bbec <__malloc_lock+0x8>)
 800bbe6:	f7fb b84f 	b.w	8006c88 <__retarget_lock_acquire_recursive>
 800bbea:	bf00      	nop
 800bbec:	2000073c 	.word	0x2000073c

0800bbf0 <__malloc_unlock>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	@ (800bbf8 <__malloc_unlock+0x8>)
 800bbf2:	f7fb b865 	b.w	8006cc0 <__retarget_lock_release_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	2000073c 	.word	0x2000073c

0800bbfc <sulp>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	4604      	mov	r4, r0
 800bc00:	460d      	mov	r5, r1
 800bc02:	ec45 4b10 	vmov	d0, r4, r5
 800bc06:	4616      	mov	r6, r2
 800bc08:	f003 fd78 	bl	800f6fc <__ulp>
 800bc0c:	ec51 0b10 	vmov	r0, r1, d0
 800bc10:	b17e      	cbz	r6, 800bc32 <sulp+0x36>
 800bc12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc16:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	dd09      	ble.n	800bc32 <sulp+0x36>
 800bc1e:	051b      	lsls	r3, r3, #20
 800bc20:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bc24:	2400      	movs	r4, #0
 800bc26:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	462b      	mov	r3, r5
 800bc2e:	f7f4 fce3 	bl	80005f8 <__aeabi_dmul>
 800bc32:	ec41 0b10 	vmov	d0, r0, r1
 800bc36:	bd70      	pop	{r4, r5, r6, pc}

0800bc38 <_strtod_l>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	b09f      	sub	sp, #124	@ 0x7c
 800bc3e:	460c      	mov	r4, r1
 800bc40:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bc42:	2200      	movs	r2, #0
 800bc44:	921a      	str	r2, [sp, #104]	@ 0x68
 800bc46:	9005      	str	r0, [sp, #20]
 800bc48:	f04f 0a00 	mov.w	sl, #0
 800bc4c:	f04f 0b00 	mov.w	fp, #0
 800bc50:	460a      	mov	r2, r1
 800bc52:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc54:	7811      	ldrb	r1, [r2, #0]
 800bc56:	292b      	cmp	r1, #43	@ 0x2b
 800bc58:	d04a      	beq.n	800bcf0 <_strtod_l+0xb8>
 800bc5a:	d838      	bhi.n	800bcce <_strtod_l+0x96>
 800bc5c:	290d      	cmp	r1, #13
 800bc5e:	d832      	bhi.n	800bcc6 <_strtod_l+0x8e>
 800bc60:	2908      	cmp	r1, #8
 800bc62:	d832      	bhi.n	800bcca <_strtod_l+0x92>
 800bc64:	2900      	cmp	r1, #0
 800bc66:	d03b      	beq.n	800bce0 <_strtod_l+0xa8>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bc6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bc6e:	782a      	ldrb	r2, [r5, #0]
 800bc70:	2a30      	cmp	r2, #48	@ 0x30
 800bc72:	f040 80b3 	bne.w	800bddc <_strtod_l+0x1a4>
 800bc76:	786a      	ldrb	r2, [r5, #1]
 800bc78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bc7c:	2a58      	cmp	r2, #88	@ 0x58
 800bc7e:	d16e      	bne.n	800bd5e <_strtod_l+0x126>
 800bc80:	9302      	str	r3, [sp, #8]
 800bc82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	ab1a      	add	r3, sp, #104	@ 0x68
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	4a8e      	ldr	r2, [pc, #568]	@ (800bec4 <_strtod_l+0x28c>)
 800bc8c:	9805      	ldr	r0, [sp, #20]
 800bc8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bc90:	a919      	add	r1, sp, #100	@ 0x64
 800bc92:	f002 fedb 	bl	800ea4c <__gethex>
 800bc96:	f010 060f 	ands.w	r6, r0, #15
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	d005      	beq.n	800bcaa <_strtod_l+0x72>
 800bc9e:	2e06      	cmp	r6, #6
 800bca0:	d128      	bne.n	800bcf4 <_strtod_l+0xbc>
 800bca2:	3501      	adds	r5, #1
 800bca4:	2300      	movs	r3, #0
 800bca6:	9519      	str	r5, [sp, #100]	@ 0x64
 800bca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f040 858e 	bne.w	800c7ce <_strtod_l+0xb96>
 800bcb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcb4:	b1cb      	cbz	r3, 800bcea <_strtod_l+0xb2>
 800bcb6:	4652      	mov	r2, sl
 800bcb8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bcbc:	ec43 2b10 	vmov	d0, r2, r3
 800bcc0:	b01f      	add	sp, #124	@ 0x7c
 800bcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc6:	2920      	cmp	r1, #32
 800bcc8:	d1ce      	bne.n	800bc68 <_strtod_l+0x30>
 800bcca:	3201      	adds	r2, #1
 800bccc:	e7c1      	b.n	800bc52 <_strtod_l+0x1a>
 800bcce:	292d      	cmp	r1, #45	@ 0x2d
 800bcd0:	d1ca      	bne.n	800bc68 <_strtod_l+0x30>
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bcd6:	1c51      	adds	r1, r2, #1
 800bcd8:	9119      	str	r1, [sp, #100]	@ 0x64
 800bcda:	7852      	ldrb	r2, [r2, #1]
 800bcdc:	2a00      	cmp	r2, #0
 800bcde:	d1c5      	bne.n	800bc6c <_strtod_l+0x34>
 800bce0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bce2:	9419      	str	r4, [sp, #100]	@ 0x64
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f040 8570 	bne.w	800c7ca <_strtod_l+0xb92>
 800bcea:	4652      	mov	r2, sl
 800bcec:	465b      	mov	r3, fp
 800bcee:	e7e5      	b.n	800bcbc <_strtod_l+0x84>
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	e7ef      	b.n	800bcd4 <_strtod_l+0x9c>
 800bcf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bcf6:	b13a      	cbz	r2, 800bd08 <_strtod_l+0xd0>
 800bcf8:	2135      	movs	r1, #53	@ 0x35
 800bcfa:	a81c      	add	r0, sp, #112	@ 0x70
 800bcfc:	f003 fdf8 	bl	800f8f0 <__copybits>
 800bd00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd02:	9805      	ldr	r0, [sp, #20]
 800bd04:	f003 f9c6 	bl	800f094 <_Bfree>
 800bd08:	3e01      	subs	r6, #1
 800bd0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bd0c:	2e04      	cmp	r6, #4
 800bd0e:	d806      	bhi.n	800bd1e <_strtod_l+0xe6>
 800bd10:	e8df f006 	tbb	[pc, r6]
 800bd14:	201d0314 	.word	0x201d0314
 800bd18:	14          	.byte	0x14
 800bd19:	00          	.byte	0x00
 800bd1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bd1e:	05e1      	lsls	r1, r4, #23
 800bd20:	bf48      	it	mi
 800bd22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bd26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd2a:	0d1b      	lsrs	r3, r3, #20
 800bd2c:	051b      	lsls	r3, r3, #20
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1bb      	bne.n	800bcaa <_strtod_l+0x72>
 800bd32:	f001 ff45 	bl	800dbc0 <__errno>
 800bd36:	2322      	movs	r3, #34	@ 0x22
 800bd38:	6003      	str	r3, [r0, #0]
 800bd3a:	e7b6      	b.n	800bcaa <_strtod_l+0x72>
 800bd3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bd40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bd44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bd48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bd4c:	e7e7      	b.n	800bd1e <_strtod_l+0xe6>
 800bd4e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800becc <_strtod_l+0x294>
 800bd52:	e7e4      	b.n	800bd1e <_strtod_l+0xe6>
 800bd54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bd58:	f04f 3aff 	mov.w	sl, #4294967295
 800bd5c:	e7df      	b.n	800bd1e <_strtod_l+0xe6>
 800bd5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd64:	785b      	ldrb	r3, [r3, #1]
 800bd66:	2b30      	cmp	r3, #48	@ 0x30
 800bd68:	d0f9      	beq.n	800bd5e <_strtod_l+0x126>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d09d      	beq.n	800bcaa <_strtod_l+0x72>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd74:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd76:	2300      	movs	r3, #0
 800bd78:	9308      	str	r3, [sp, #32]
 800bd7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd7c:	461f      	mov	r7, r3
 800bd7e:	220a      	movs	r2, #10
 800bd80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bd82:	7805      	ldrb	r5, [r0, #0]
 800bd84:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bd88:	b2d9      	uxtb	r1, r3
 800bd8a:	2909      	cmp	r1, #9
 800bd8c:	d928      	bls.n	800bde0 <_strtod_l+0x1a8>
 800bd8e:	494e      	ldr	r1, [pc, #312]	@ (800bec8 <_strtod_l+0x290>)
 800bd90:	2201      	movs	r2, #1
 800bd92:	f001 fe3d 	bl	800da10 <strncmp>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d032      	beq.n	800be00 <_strtod_l+0x1c8>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	4681      	mov	r9, r0
 800bda0:	463d      	mov	r5, r7
 800bda2:	4603      	mov	r3, r0
 800bda4:	2a65      	cmp	r2, #101	@ 0x65
 800bda6:	d001      	beq.n	800bdac <_strtod_l+0x174>
 800bda8:	2a45      	cmp	r2, #69	@ 0x45
 800bdaa:	d114      	bne.n	800bdd6 <_strtod_l+0x19e>
 800bdac:	b91d      	cbnz	r5, 800bdb6 <_strtod_l+0x17e>
 800bdae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdb0:	4302      	orrs	r2, r0
 800bdb2:	d095      	beq.n	800bce0 <_strtod_l+0xa8>
 800bdb4:	2500      	movs	r5, #0
 800bdb6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bdb8:	1c62      	adds	r2, r4, #1
 800bdba:	9219      	str	r2, [sp, #100]	@ 0x64
 800bdbc:	7862      	ldrb	r2, [r4, #1]
 800bdbe:	2a2b      	cmp	r2, #43	@ 0x2b
 800bdc0:	d077      	beq.n	800beb2 <_strtod_l+0x27a>
 800bdc2:	2a2d      	cmp	r2, #45	@ 0x2d
 800bdc4:	d07b      	beq.n	800bebe <_strtod_l+0x286>
 800bdc6:	f04f 0c00 	mov.w	ip, #0
 800bdca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bdce:	2909      	cmp	r1, #9
 800bdd0:	f240 8082 	bls.w	800bed8 <_strtod_l+0x2a0>
 800bdd4:	9419      	str	r4, [sp, #100]	@ 0x64
 800bdd6:	f04f 0800 	mov.w	r8, #0
 800bdda:	e0a2      	b.n	800bf22 <_strtod_l+0x2ea>
 800bddc:	2300      	movs	r3, #0
 800bdde:	e7c7      	b.n	800bd70 <_strtod_l+0x138>
 800bde0:	2f08      	cmp	r7, #8
 800bde2:	bfd5      	itete	le
 800bde4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bde6:	9908      	ldrgt	r1, [sp, #32]
 800bde8:	fb02 3301 	mlale	r3, r2, r1, r3
 800bdec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bdf0:	f100 0001 	add.w	r0, r0, #1
 800bdf4:	bfd4      	ite	le
 800bdf6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bdf8:	9308      	strgt	r3, [sp, #32]
 800bdfa:	3701      	adds	r7, #1
 800bdfc:	9019      	str	r0, [sp, #100]	@ 0x64
 800bdfe:	e7bf      	b.n	800bd80 <_strtod_l+0x148>
 800be00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be02:	1c5a      	adds	r2, r3, #1
 800be04:	9219      	str	r2, [sp, #100]	@ 0x64
 800be06:	785a      	ldrb	r2, [r3, #1]
 800be08:	b37f      	cbz	r7, 800be6a <_strtod_l+0x232>
 800be0a:	4681      	mov	r9, r0
 800be0c:	463d      	mov	r5, r7
 800be0e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800be12:	2b09      	cmp	r3, #9
 800be14:	d912      	bls.n	800be3c <_strtod_l+0x204>
 800be16:	2301      	movs	r3, #1
 800be18:	e7c4      	b.n	800bda4 <_strtod_l+0x16c>
 800be1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be1c:	1c5a      	adds	r2, r3, #1
 800be1e:	9219      	str	r2, [sp, #100]	@ 0x64
 800be20:	785a      	ldrb	r2, [r3, #1]
 800be22:	3001      	adds	r0, #1
 800be24:	2a30      	cmp	r2, #48	@ 0x30
 800be26:	d0f8      	beq.n	800be1a <_strtod_l+0x1e2>
 800be28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800be2c:	2b08      	cmp	r3, #8
 800be2e:	f200 84d3 	bhi.w	800c7d8 <_strtod_l+0xba0>
 800be32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be34:	930c      	str	r3, [sp, #48]	@ 0x30
 800be36:	4681      	mov	r9, r0
 800be38:	2000      	movs	r0, #0
 800be3a:	4605      	mov	r5, r0
 800be3c:	3a30      	subs	r2, #48	@ 0x30
 800be3e:	f100 0301 	add.w	r3, r0, #1
 800be42:	d02a      	beq.n	800be9a <_strtod_l+0x262>
 800be44:	4499      	add	r9, r3
 800be46:	eb00 0c05 	add.w	ip, r0, r5
 800be4a:	462b      	mov	r3, r5
 800be4c:	210a      	movs	r1, #10
 800be4e:	4563      	cmp	r3, ip
 800be50:	d10d      	bne.n	800be6e <_strtod_l+0x236>
 800be52:	1c69      	adds	r1, r5, #1
 800be54:	4401      	add	r1, r0
 800be56:	4428      	add	r0, r5
 800be58:	2808      	cmp	r0, #8
 800be5a:	dc16      	bgt.n	800be8a <_strtod_l+0x252>
 800be5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be5e:	230a      	movs	r3, #10
 800be60:	fb03 2300 	mla	r3, r3, r0, r2
 800be64:	930a      	str	r3, [sp, #40]	@ 0x28
 800be66:	2300      	movs	r3, #0
 800be68:	e018      	b.n	800be9c <_strtod_l+0x264>
 800be6a:	4638      	mov	r0, r7
 800be6c:	e7da      	b.n	800be24 <_strtod_l+0x1ec>
 800be6e:	2b08      	cmp	r3, #8
 800be70:	f103 0301 	add.w	r3, r3, #1
 800be74:	dc03      	bgt.n	800be7e <_strtod_l+0x246>
 800be76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800be78:	434e      	muls	r6, r1
 800be7a:	960a      	str	r6, [sp, #40]	@ 0x28
 800be7c:	e7e7      	b.n	800be4e <_strtod_l+0x216>
 800be7e:	2b10      	cmp	r3, #16
 800be80:	bfde      	ittt	le
 800be82:	9e08      	ldrle	r6, [sp, #32]
 800be84:	434e      	mulle	r6, r1
 800be86:	9608      	strle	r6, [sp, #32]
 800be88:	e7e1      	b.n	800be4e <_strtod_l+0x216>
 800be8a:	280f      	cmp	r0, #15
 800be8c:	dceb      	bgt.n	800be66 <_strtod_l+0x22e>
 800be8e:	9808      	ldr	r0, [sp, #32]
 800be90:	230a      	movs	r3, #10
 800be92:	fb03 2300 	mla	r3, r3, r0, r2
 800be96:	9308      	str	r3, [sp, #32]
 800be98:	e7e5      	b.n	800be66 <_strtod_l+0x22e>
 800be9a:	4629      	mov	r1, r5
 800be9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800be9e:	1c50      	adds	r0, r2, #1
 800bea0:	9019      	str	r0, [sp, #100]	@ 0x64
 800bea2:	7852      	ldrb	r2, [r2, #1]
 800bea4:	4618      	mov	r0, r3
 800bea6:	460d      	mov	r5, r1
 800bea8:	e7b1      	b.n	800be0e <_strtod_l+0x1d6>
 800beaa:	f04f 0900 	mov.w	r9, #0
 800beae:	2301      	movs	r3, #1
 800beb0:	e77d      	b.n	800bdae <_strtod_l+0x176>
 800beb2:	f04f 0c00 	mov.w	ip, #0
 800beb6:	1ca2      	adds	r2, r4, #2
 800beb8:	9219      	str	r2, [sp, #100]	@ 0x64
 800beba:	78a2      	ldrb	r2, [r4, #2]
 800bebc:	e785      	b.n	800bdca <_strtod_l+0x192>
 800bebe:	f04f 0c01 	mov.w	ip, #1
 800bec2:	e7f8      	b.n	800beb6 <_strtod_l+0x27e>
 800bec4:	08011d70 	.word	0x08011d70
 800bec8:	08011d59 	.word	0x08011d59
 800becc:	7ff00000 	.word	0x7ff00000
 800bed0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bed2:	1c51      	adds	r1, r2, #1
 800bed4:	9119      	str	r1, [sp, #100]	@ 0x64
 800bed6:	7852      	ldrb	r2, [r2, #1]
 800bed8:	2a30      	cmp	r2, #48	@ 0x30
 800beda:	d0f9      	beq.n	800bed0 <_strtod_l+0x298>
 800bedc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bee0:	2908      	cmp	r1, #8
 800bee2:	f63f af78 	bhi.w	800bdd6 <_strtod_l+0x19e>
 800bee6:	3a30      	subs	r2, #48	@ 0x30
 800bee8:	920e      	str	r2, [sp, #56]	@ 0x38
 800beea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800beec:	920f      	str	r2, [sp, #60]	@ 0x3c
 800beee:	f04f 080a 	mov.w	r8, #10
 800bef2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bef4:	1c56      	adds	r6, r2, #1
 800bef6:	9619      	str	r6, [sp, #100]	@ 0x64
 800bef8:	7852      	ldrb	r2, [r2, #1]
 800befa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800befe:	f1be 0f09 	cmp.w	lr, #9
 800bf02:	d939      	bls.n	800bf78 <_strtod_l+0x340>
 800bf04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bf06:	1a76      	subs	r6, r6, r1
 800bf08:	2e08      	cmp	r6, #8
 800bf0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bf0e:	dc03      	bgt.n	800bf18 <_strtod_l+0x2e0>
 800bf10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bf12:	4588      	cmp	r8, r1
 800bf14:	bfa8      	it	ge
 800bf16:	4688      	movge	r8, r1
 800bf18:	f1bc 0f00 	cmp.w	ip, #0
 800bf1c:	d001      	beq.n	800bf22 <_strtod_l+0x2ea>
 800bf1e:	f1c8 0800 	rsb	r8, r8, #0
 800bf22:	2d00      	cmp	r5, #0
 800bf24:	d14e      	bne.n	800bfc4 <_strtod_l+0x38c>
 800bf26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf28:	4308      	orrs	r0, r1
 800bf2a:	f47f aebe 	bne.w	800bcaa <_strtod_l+0x72>
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f47f aed6 	bne.w	800bce0 <_strtod_l+0xa8>
 800bf34:	2a69      	cmp	r2, #105	@ 0x69
 800bf36:	d028      	beq.n	800bf8a <_strtod_l+0x352>
 800bf38:	dc25      	bgt.n	800bf86 <_strtod_l+0x34e>
 800bf3a:	2a49      	cmp	r2, #73	@ 0x49
 800bf3c:	d025      	beq.n	800bf8a <_strtod_l+0x352>
 800bf3e:	2a4e      	cmp	r2, #78	@ 0x4e
 800bf40:	f47f aece 	bne.w	800bce0 <_strtod_l+0xa8>
 800bf44:	499b      	ldr	r1, [pc, #620]	@ (800c1b4 <_strtod_l+0x57c>)
 800bf46:	a819      	add	r0, sp, #100	@ 0x64
 800bf48:	f002 ffa2 	bl	800ee90 <__match>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	f43f aec7 	beq.w	800bce0 <_strtod_l+0xa8>
 800bf52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	2b28      	cmp	r3, #40	@ 0x28
 800bf58:	d12e      	bne.n	800bfb8 <_strtod_l+0x380>
 800bf5a:	4997      	ldr	r1, [pc, #604]	@ (800c1b8 <_strtod_l+0x580>)
 800bf5c:	aa1c      	add	r2, sp, #112	@ 0x70
 800bf5e:	a819      	add	r0, sp, #100	@ 0x64
 800bf60:	f002 ffaa 	bl	800eeb8 <__hexnan>
 800bf64:	2805      	cmp	r0, #5
 800bf66:	d127      	bne.n	800bfb8 <_strtod_l+0x380>
 800bf68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bf6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bf72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bf76:	e698      	b.n	800bcaa <_strtod_l+0x72>
 800bf78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bf7a:	fb08 2101 	mla	r1, r8, r1, r2
 800bf7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bf82:	920e      	str	r2, [sp, #56]	@ 0x38
 800bf84:	e7b5      	b.n	800bef2 <_strtod_l+0x2ba>
 800bf86:	2a6e      	cmp	r2, #110	@ 0x6e
 800bf88:	e7da      	b.n	800bf40 <_strtod_l+0x308>
 800bf8a:	498c      	ldr	r1, [pc, #560]	@ (800c1bc <_strtod_l+0x584>)
 800bf8c:	a819      	add	r0, sp, #100	@ 0x64
 800bf8e:	f002 ff7f 	bl	800ee90 <__match>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	f43f aea4 	beq.w	800bce0 <_strtod_l+0xa8>
 800bf98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf9a:	4989      	ldr	r1, [pc, #548]	@ (800c1c0 <_strtod_l+0x588>)
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	a819      	add	r0, sp, #100	@ 0x64
 800bfa0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bfa2:	f002 ff75 	bl	800ee90 <__match>
 800bfa6:	b910      	cbnz	r0, 800bfae <_strtod_l+0x376>
 800bfa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfaa:	3301      	adds	r3, #1
 800bfac:	9319      	str	r3, [sp, #100]	@ 0x64
 800bfae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c1d0 <_strtod_l+0x598>
 800bfb2:	f04f 0a00 	mov.w	sl, #0
 800bfb6:	e678      	b.n	800bcaa <_strtod_l+0x72>
 800bfb8:	4882      	ldr	r0, [pc, #520]	@ (800c1c4 <_strtod_l+0x58c>)
 800bfba:	f001 fe39 	bl	800dc30 <nan>
 800bfbe:	ec5b ab10 	vmov	sl, fp, d0
 800bfc2:	e672      	b.n	800bcaa <_strtod_l+0x72>
 800bfc4:	eba8 0309 	sub.w	r3, r8, r9
 800bfc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bfca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfcc:	2f00      	cmp	r7, #0
 800bfce:	bf08      	it	eq
 800bfd0:	462f      	moveq	r7, r5
 800bfd2:	2d10      	cmp	r5, #16
 800bfd4:	462c      	mov	r4, r5
 800bfd6:	bfa8      	it	ge
 800bfd8:	2410      	movge	r4, #16
 800bfda:	f7f4 fa93 	bl	8000504 <__aeabi_ui2d>
 800bfde:	2d09      	cmp	r5, #9
 800bfe0:	4682      	mov	sl, r0
 800bfe2:	468b      	mov	fp, r1
 800bfe4:	dc13      	bgt.n	800c00e <_strtod_l+0x3d6>
 800bfe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f43f ae5e 	beq.w	800bcaa <_strtod_l+0x72>
 800bfee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff0:	dd78      	ble.n	800c0e4 <_strtod_l+0x4ac>
 800bff2:	2b16      	cmp	r3, #22
 800bff4:	dc5f      	bgt.n	800c0b6 <_strtod_l+0x47e>
 800bff6:	4974      	ldr	r1, [pc, #464]	@ (800c1c8 <_strtod_l+0x590>)
 800bff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bffc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c000:	4652      	mov	r2, sl
 800c002:	465b      	mov	r3, fp
 800c004:	f7f4 faf8 	bl	80005f8 <__aeabi_dmul>
 800c008:	4682      	mov	sl, r0
 800c00a:	468b      	mov	fp, r1
 800c00c:	e64d      	b.n	800bcaa <_strtod_l+0x72>
 800c00e:	4b6e      	ldr	r3, [pc, #440]	@ (800c1c8 <_strtod_l+0x590>)
 800c010:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c014:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c018:	f7f4 faee 	bl	80005f8 <__aeabi_dmul>
 800c01c:	4682      	mov	sl, r0
 800c01e:	9808      	ldr	r0, [sp, #32]
 800c020:	468b      	mov	fp, r1
 800c022:	f7f4 fa6f 	bl	8000504 <__aeabi_ui2d>
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	4650      	mov	r0, sl
 800c02c:	4659      	mov	r1, fp
 800c02e:	f7f4 f92d 	bl	800028c <__adddf3>
 800c032:	2d0f      	cmp	r5, #15
 800c034:	4682      	mov	sl, r0
 800c036:	468b      	mov	fp, r1
 800c038:	ddd5      	ble.n	800bfe6 <_strtod_l+0x3ae>
 800c03a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03c:	1b2c      	subs	r4, r5, r4
 800c03e:	441c      	add	r4, r3
 800c040:	2c00      	cmp	r4, #0
 800c042:	f340 8096 	ble.w	800c172 <_strtod_l+0x53a>
 800c046:	f014 030f 	ands.w	r3, r4, #15
 800c04a:	d00a      	beq.n	800c062 <_strtod_l+0x42a>
 800c04c:	495e      	ldr	r1, [pc, #376]	@ (800c1c8 <_strtod_l+0x590>)
 800c04e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c052:	4652      	mov	r2, sl
 800c054:	465b      	mov	r3, fp
 800c056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c05a:	f7f4 facd 	bl	80005f8 <__aeabi_dmul>
 800c05e:	4682      	mov	sl, r0
 800c060:	468b      	mov	fp, r1
 800c062:	f034 040f 	bics.w	r4, r4, #15
 800c066:	d073      	beq.n	800c150 <_strtod_l+0x518>
 800c068:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c06c:	dd48      	ble.n	800c100 <_strtod_l+0x4c8>
 800c06e:	2400      	movs	r4, #0
 800c070:	46a0      	mov	r8, r4
 800c072:	940a      	str	r4, [sp, #40]	@ 0x28
 800c074:	46a1      	mov	r9, r4
 800c076:	9a05      	ldr	r2, [sp, #20]
 800c078:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c1d0 <_strtod_l+0x598>
 800c07c:	2322      	movs	r3, #34	@ 0x22
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	f04f 0a00 	mov.w	sl, #0
 800c084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c086:	2b00      	cmp	r3, #0
 800c088:	f43f ae0f 	beq.w	800bcaa <_strtod_l+0x72>
 800c08c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c08e:	9805      	ldr	r0, [sp, #20]
 800c090:	f003 f800 	bl	800f094 <_Bfree>
 800c094:	9805      	ldr	r0, [sp, #20]
 800c096:	4649      	mov	r1, r9
 800c098:	f002 fffc 	bl	800f094 <_Bfree>
 800c09c:	9805      	ldr	r0, [sp, #20]
 800c09e:	4641      	mov	r1, r8
 800c0a0:	f002 fff8 	bl	800f094 <_Bfree>
 800c0a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0a6:	9805      	ldr	r0, [sp, #20]
 800c0a8:	f002 fff4 	bl	800f094 <_Bfree>
 800c0ac:	9805      	ldr	r0, [sp, #20]
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	f002 fff0 	bl	800f094 <_Bfree>
 800c0b4:	e5f9      	b.n	800bcaa <_strtod_l+0x72>
 800c0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	dbbc      	blt.n	800c03a <_strtod_l+0x402>
 800c0c0:	4c41      	ldr	r4, [pc, #260]	@ (800c1c8 <_strtod_l+0x590>)
 800c0c2:	f1c5 050f 	rsb	r5, r5, #15
 800c0c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c0ca:	4652      	mov	r2, sl
 800c0cc:	465b      	mov	r3, fp
 800c0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0d2:	f7f4 fa91 	bl	80005f8 <__aeabi_dmul>
 800c0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d8:	1b5d      	subs	r5, r3, r5
 800c0da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c0de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c0e2:	e78f      	b.n	800c004 <_strtod_l+0x3cc>
 800c0e4:	3316      	adds	r3, #22
 800c0e6:	dba8      	blt.n	800c03a <_strtod_l+0x402>
 800c0e8:	4b37      	ldr	r3, [pc, #220]	@ (800c1c8 <_strtod_l+0x590>)
 800c0ea:	eba9 0808 	sub.w	r8, r9, r8
 800c0ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c0f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c0f6:	4650      	mov	r0, sl
 800c0f8:	4659      	mov	r1, fp
 800c0fa:	f7f4 fba7 	bl	800084c <__aeabi_ddiv>
 800c0fe:	e783      	b.n	800c008 <_strtod_l+0x3d0>
 800c100:	4b32      	ldr	r3, [pc, #200]	@ (800c1cc <_strtod_l+0x594>)
 800c102:	9308      	str	r3, [sp, #32]
 800c104:	2300      	movs	r3, #0
 800c106:	1124      	asrs	r4, r4, #4
 800c108:	4650      	mov	r0, sl
 800c10a:	4659      	mov	r1, fp
 800c10c:	461e      	mov	r6, r3
 800c10e:	2c01      	cmp	r4, #1
 800c110:	dc21      	bgt.n	800c156 <_strtod_l+0x51e>
 800c112:	b10b      	cbz	r3, 800c118 <_strtod_l+0x4e0>
 800c114:	4682      	mov	sl, r0
 800c116:	468b      	mov	fp, r1
 800c118:	492c      	ldr	r1, [pc, #176]	@ (800c1cc <_strtod_l+0x594>)
 800c11a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c11e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c122:	4652      	mov	r2, sl
 800c124:	465b      	mov	r3, fp
 800c126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c12a:	f7f4 fa65 	bl	80005f8 <__aeabi_dmul>
 800c12e:	4b28      	ldr	r3, [pc, #160]	@ (800c1d0 <_strtod_l+0x598>)
 800c130:	460a      	mov	r2, r1
 800c132:	400b      	ands	r3, r1
 800c134:	4927      	ldr	r1, [pc, #156]	@ (800c1d4 <_strtod_l+0x59c>)
 800c136:	428b      	cmp	r3, r1
 800c138:	4682      	mov	sl, r0
 800c13a:	d898      	bhi.n	800c06e <_strtod_l+0x436>
 800c13c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c140:	428b      	cmp	r3, r1
 800c142:	bf86      	itte	hi
 800c144:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c1d8 <_strtod_l+0x5a0>
 800c148:	f04f 3aff 	movhi.w	sl, #4294967295
 800c14c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c150:	2300      	movs	r3, #0
 800c152:	9308      	str	r3, [sp, #32]
 800c154:	e07a      	b.n	800c24c <_strtod_l+0x614>
 800c156:	07e2      	lsls	r2, r4, #31
 800c158:	d505      	bpl.n	800c166 <_strtod_l+0x52e>
 800c15a:	9b08      	ldr	r3, [sp, #32]
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 fa4a 	bl	80005f8 <__aeabi_dmul>
 800c164:	2301      	movs	r3, #1
 800c166:	9a08      	ldr	r2, [sp, #32]
 800c168:	3208      	adds	r2, #8
 800c16a:	3601      	adds	r6, #1
 800c16c:	1064      	asrs	r4, r4, #1
 800c16e:	9208      	str	r2, [sp, #32]
 800c170:	e7cd      	b.n	800c10e <_strtod_l+0x4d6>
 800c172:	d0ed      	beq.n	800c150 <_strtod_l+0x518>
 800c174:	4264      	negs	r4, r4
 800c176:	f014 020f 	ands.w	r2, r4, #15
 800c17a:	d00a      	beq.n	800c192 <_strtod_l+0x55a>
 800c17c:	4b12      	ldr	r3, [pc, #72]	@ (800c1c8 <_strtod_l+0x590>)
 800c17e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c182:	4650      	mov	r0, sl
 800c184:	4659      	mov	r1, fp
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	f7f4 fb5f 	bl	800084c <__aeabi_ddiv>
 800c18e:	4682      	mov	sl, r0
 800c190:	468b      	mov	fp, r1
 800c192:	1124      	asrs	r4, r4, #4
 800c194:	d0dc      	beq.n	800c150 <_strtod_l+0x518>
 800c196:	2c1f      	cmp	r4, #31
 800c198:	dd20      	ble.n	800c1dc <_strtod_l+0x5a4>
 800c19a:	2400      	movs	r4, #0
 800c19c:	46a0      	mov	r8, r4
 800c19e:	940a      	str	r4, [sp, #40]	@ 0x28
 800c1a0:	46a1      	mov	r9, r4
 800c1a2:	9a05      	ldr	r2, [sp, #20]
 800c1a4:	2322      	movs	r3, #34	@ 0x22
 800c1a6:	f04f 0a00 	mov.w	sl, #0
 800c1aa:	f04f 0b00 	mov.w	fp, #0
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	e768      	b.n	800c084 <_strtod_l+0x44c>
 800c1b2:	bf00      	nop
 800c1b4:	08011ebe 	.word	0x08011ebe
 800c1b8:	08011d5c 	.word	0x08011d5c
 800c1bc:	08011eb6 	.word	0x08011eb6
 800c1c0:	08011ef5 	.word	0x08011ef5
 800c1c4:	08012184 	.word	0x08012184
 800c1c8:	08012070 	.word	0x08012070
 800c1cc:	08012048 	.word	0x08012048
 800c1d0:	7ff00000 	.word	0x7ff00000
 800c1d4:	7ca00000 	.word	0x7ca00000
 800c1d8:	7fefffff 	.word	0x7fefffff
 800c1dc:	f014 0310 	ands.w	r3, r4, #16
 800c1e0:	bf18      	it	ne
 800c1e2:	236a      	movne	r3, #106	@ 0x6a
 800c1e4:	4ea9      	ldr	r6, [pc, #676]	@ (800c48c <_strtod_l+0x854>)
 800c1e6:	9308      	str	r3, [sp, #32]
 800c1e8:	4650      	mov	r0, sl
 800c1ea:	4659      	mov	r1, fp
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	07e2      	lsls	r2, r4, #31
 800c1f0:	d504      	bpl.n	800c1fc <_strtod_l+0x5c4>
 800c1f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1f6:	f7f4 f9ff 	bl	80005f8 <__aeabi_dmul>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	1064      	asrs	r4, r4, #1
 800c1fe:	f106 0608 	add.w	r6, r6, #8
 800c202:	d1f4      	bne.n	800c1ee <_strtod_l+0x5b6>
 800c204:	b10b      	cbz	r3, 800c20a <_strtod_l+0x5d2>
 800c206:	4682      	mov	sl, r0
 800c208:	468b      	mov	fp, r1
 800c20a:	9b08      	ldr	r3, [sp, #32]
 800c20c:	b1b3      	cbz	r3, 800c23c <_strtod_l+0x604>
 800c20e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c212:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c216:	2b00      	cmp	r3, #0
 800c218:	4659      	mov	r1, fp
 800c21a:	dd0f      	ble.n	800c23c <_strtod_l+0x604>
 800c21c:	2b1f      	cmp	r3, #31
 800c21e:	dd55      	ble.n	800c2cc <_strtod_l+0x694>
 800c220:	2b34      	cmp	r3, #52	@ 0x34
 800c222:	bfde      	ittt	le
 800c224:	f04f 33ff 	movle.w	r3, #4294967295
 800c228:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c22c:	4093      	lslle	r3, r2
 800c22e:	f04f 0a00 	mov.w	sl, #0
 800c232:	bfcc      	ite	gt
 800c234:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c238:	ea03 0b01 	andle.w	fp, r3, r1
 800c23c:	2200      	movs	r2, #0
 800c23e:	2300      	movs	r3, #0
 800c240:	4650      	mov	r0, sl
 800c242:	4659      	mov	r1, fp
 800c244:	f7f4 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d1a6      	bne.n	800c19a <_strtod_l+0x562>
 800c24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c252:	9805      	ldr	r0, [sp, #20]
 800c254:	462b      	mov	r3, r5
 800c256:	463a      	mov	r2, r7
 800c258:	f002 ff84 	bl	800f164 <__s2b>
 800c25c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c25e:	2800      	cmp	r0, #0
 800c260:	f43f af05 	beq.w	800c06e <_strtod_l+0x436>
 800c264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c266:	2a00      	cmp	r2, #0
 800c268:	eba9 0308 	sub.w	r3, r9, r8
 800c26c:	bfa8      	it	ge
 800c26e:	2300      	movge	r3, #0
 800c270:	9312      	str	r3, [sp, #72]	@ 0x48
 800c272:	2400      	movs	r4, #0
 800c274:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c278:	9316      	str	r3, [sp, #88]	@ 0x58
 800c27a:	46a0      	mov	r8, r4
 800c27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c27e:	9805      	ldr	r0, [sp, #20]
 800c280:	6859      	ldr	r1, [r3, #4]
 800c282:	f002 fec7 	bl	800f014 <_Balloc>
 800c286:	4681      	mov	r9, r0
 800c288:	2800      	cmp	r0, #0
 800c28a:	f43f aef4 	beq.w	800c076 <_strtod_l+0x43e>
 800c28e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c290:	691a      	ldr	r2, [r3, #16]
 800c292:	3202      	adds	r2, #2
 800c294:	f103 010c 	add.w	r1, r3, #12
 800c298:	0092      	lsls	r2, r2, #2
 800c29a:	300c      	adds	r0, #12
 800c29c:	f001 fcba 	bl	800dc14 <memcpy>
 800c2a0:	ec4b ab10 	vmov	d0, sl, fp
 800c2a4:	9805      	ldr	r0, [sp, #20]
 800c2a6:	aa1c      	add	r2, sp, #112	@ 0x70
 800c2a8:	a91b      	add	r1, sp, #108	@ 0x6c
 800c2aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c2ae:	f003 fa95 	bl	800f7dc <__d2b>
 800c2b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	f43f aede 	beq.w	800c076 <_strtod_l+0x43e>
 800c2ba:	9805      	ldr	r0, [sp, #20]
 800c2bc:	2101      	movs	r1, #1
 800c2be:	f002 ffe7 	bl	800f290 <__i2b>
 800c2c2:	4680      	mov	r8, r0
 800c2c4:	b948      	cbnz	r0, 800c2da <_strtod_l+0x6a2>
 800c2c6:	f04f 0800 	mov.w	r8, #0
 800c2ca:	e6d4      	b.n	800c076 <_strtod_l+0x43e>
 800c2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d4:	ea03 0a0a 	and.w	sl, r3, sl
 800c2d8:	e7b0      	b.n	800c23c <_strtod_l+0x604>
 800c2da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c2dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c2de:	2d00      	cmp	r5, #0
 800c2e0:	bfab      	itete	ge
 800c2e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c2e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c2e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c2e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c2ea:	bfac      	ite	ge
 800c2ec:	18ef      	addge	r7, r5, r3
 800c2ee:	1b5e      	sublt	r6, r3, r5
 800c2f0:	9b08      	ldr	r3, [sp, #32]
 800c2f2:	1aed      	subs	r5, r5, r3
 800c2f4:	4415      	add	r5, r2
 800c2f6:	4b66      	ldr	r3, [pc, #408]	@ (800c490 <_strtod_l+0x858>)
 800c2f8:	3d01      	subs	r5, #1
 800c2fa:	429d      	cmp	r5, r3
 800c2fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c300:	da50      	bge.n	800c3a4 <_strtod_l+0x76c>
 800c302:	1b5b      	subs	r3, r3, r5
 800c304:	2b1f      	cmp	r3, #31
 800c306:	eba2 0203 	sub.w	r2, r2, r3
 800c30a:	f04f 0101 	mov.w	r1, #1
 800c30e:	dc3d      	bgt.n	800c38c <_strtod_l+0x754>
 800c310:	fa01 f303 	lsl.w	r3, r1, r3
 800c314:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c316:	2300      	movs	r3, #0
 800c318:	9310      	str	r3, [sp, #64]	@ 0x40
 800c31a:	18bd      	adds	r5, r7, r2
 800c31c:	9b08      	ldr	r3, [sp, #32]
 800c31e:	42af      	cmp	r7, r5
 800c320:	4416      	add	r6, r2
 800c322:	441e      	add	r6, r3
 800c324:	463b      	mov	r3, r7
 800c326:	bfa8      	it	ge
 800c328:	462b      	movge	r3, r5
 800c32a:	42b3      	cmp	r3, r6
 800c32c:	bfa8      	it	ge
 800c32e:	4633      	movge	r3, r6
 800c330:	2b00      	cmp	r3, #0
 800c332:	bfc2      	ittt	gt
 800c334:	1aed      	subgt	r5, r5, r3
 800c336:	1af6      	subgt	r6, r6, r3
 800c338:	1aff      	subgt	r7, r7, r3
 800c33a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	dd16      	ble.n	800c36e <_strtod_l+0x736>
 800c340:	4641      	mov	r1, r8
 800c342:	9805      	ldr	r0, [sp, #20]
 800c344:	461a      	mov	r2, r3
 800c346:	f003 f863 	bl	800f410 <__pow5mult>
 800c34a:	4680      	mov	r8, r0
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d0ba      	beq.n	800c2c6 <_strtod_l+0x68e>
 800c350:	4601      	mov	r1, r0
 800c352:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c354:	9805      	ldr	r0, [sp, #20]
 800c356:	f002 ffb1 	bl	800f2bc <__multiply>
 800c35a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c35c:	2800      	cmp	r0, #0
 800c35e:	f43f ae8a 	beq.w	800c076 <_strtod_l+0x43e>
 800c362:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c364:	9805      	ldr	r0, [sp, #20]
 800c366:	f002 fe95 	bl	800f094 <_Bfree>
 800c36a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c36c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c36e:	2d00      	cmp	r5, #0
 800c370:	dc1d      	bgt.n	800c3ae <_strtod_l+0x776>
 800c372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c374:	2b00      	cmp	r3, #0
 800c376:	dd23      	ble.n	800c3c0 <_strtod_l+0x788>
 800c378:	4649      	mov	r1, r9
 800c37a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c37c:	9805      	ldr	r0, [sp, #20]
 800c37e:	f003 f847 	bl	800f410 <__pow5mult>
 800c382:	4681      	mov	r9, r0
 800c384:	b9e0      	cbnz	r0, 800c3c0 <_strtod_l+0x788>
 800c386:	f04f 0900 	mov.w	r9, #0
 800c38a:	e674      	b.n	800c076 <_strtod_l+0x43e>
 800c38c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c390:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c394:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c398:	35e2      	adds	r5, #226	@ 0xe2
 800c39a:	fa01 f305 	lsl.w	r3, r1, r5
 800c39e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c3a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c3a2:	e7ba      	b.n	800c31a <_strtod_l+0x6e2>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c3ac:	e7b5      	b.n	800c31a <_strtod_l+0x6e2>
 800c3ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3b0:	9805      	ldr	r0, [sp, #20]
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	f003 f886 	bl	800f4c4 <__lshift>
 800c3b8:	901a      	str	r0, [sp, #104]	@ 0x68
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d1d9      	bne.n	800c372 <_strtod_l+0x73a>
 800c3be:	e65a      	b.n	800c076 <_strtod_l+0x43e>
 800c3c0:	2e00      	cmp	r6, #0
 800c3c2:	dd07      	ble.n	800c3d4 <_strtod_l+0x79c>
 800c3c4:	4649      	mov	r1, r9
 800c3c6:	9805      	ldr	r0, [sp, #20]
 800c3c8:	4632      	mov	r2, r6
 800c3ca:	f003 f87b 	bl	800f4c4 <__lshift>
 800c3ce:	4681      	mov	r9, r0
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d0d8      	beq.n	800c386 <_strtod_l+0x74e>
 800c3d4:	2f00      	cmp	r7, #0
 800c3d6:	dd08      	ble.n	800c3ea <_strtod_l+0x7b2>
 800c3d8:	4641      	mov	r1, r8
 800c3da:	9805      	ldr	r0, [sp, #20]
 800c3dc:	463a      	mov	r2, r7
 800c3de:	f003 f871 	bl	800f4c4 <__lshift>
 800c3e2:	4680      	mov	r8, r0
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	f43f ae46 	beq.w	800c076 <_strtod_l+0x43e>
 800c3ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c3ec:	9805      	ldr	r0, [sp, #20]
 800c3ee:	464a      	mov	r2, r9
 800c3f0:	f003 f8f0 	bl	800f5d4 <__mdiff>
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	f43f ae3d 	beq.w	800c076 <_strtod_l+0x43e>
 800c3fc:	68c3      	ldr	r3, [r0, #12]
 800c3fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c400:	2300      	movs	r3, #0
 800c402:	60c3      	str	r3, [r0, #12]
 800c404:	4641      	mov	r1, r8
 800c406:	f003 f8c9 	bl	800f59c <__mcmp>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	da46      	bge.n	800c49c <_strtod_l+0x864>
 800c40e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c410:	ea53 030a 	orrs.w	r3, r3, sl
 800c414:	d16c      	bne.n	800c4f0 <_strtod_l+0x8b8>
 800c416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d168      	bne.n	800c4f0 <_strtod_l+0x8b8>
 800c41e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c422:	0d1b      	lsrs	r3, r3, #20
 800c424:	051b      	lsls	r3, r3, #20
 800c426:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c42a:	d961      	bls.n	800c4f0 <_strtod_l+0x8b8>
 800c42c:	6963      	ldr	r3, [r4, #20]
 800c42e:	b913      	cbnz	r3, 800c436 <_strtod_l+0x7fe>
 800c430:	6923      	ldr	r3, [r4, #16]
 800c432:	2b01      	cmp	r3, #1
 800c434:	dd5c      	ble.n	800c4f0 <_strtod_l+0x8b8>
 800c436:	4621      	mov	r1, r4
 800c438:	2201      	movs	r2, #1
 800c43a:	9805      	ldr	r0, [sp, #20]
 800c43c:	f003 f842 	bl	800f4c4 <__lshift>
 800c440:	4641      	mov	r1, r8
 800c442:	4604      	mov	r4, r0
 800c444:	f003 f8aa 	bl	800f59c <__mcmp>
 800c448:	2800      	cmp	r0, #0
 800c44a:	dd51      	ble.n	800c4f0 <_strtod_l+0x8b8>
 800c44c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c450:	9a08      	ldr	r2, [sp, #32]
 800c452:	0d1b      	lsrs	r3, r3, #20
 800c454:	051b      	lsls	r3, r3, #20
 800c456:	2a00      	cmp	r2, #0
 800c458:	d06b      	beq.n	800c532 <_strtod_l+0x8fa>
 800c45a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c45e:	d868      	bhi.n	800c532 <_strtod_l+0x8fa>
 800c460:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c464:	f67f ae9d 	bls.w	800c1a2 <_strtod_l+0x56a>
 800c468:	4b0a      	ldr	r3, [pc, #40]	@ (800c494 <_strtod_l+0x85c>)
 800c46a:	4650      	mov	r0, sl
 800c46c:	4659      	mov	r1, fp
 800c46e:	2200      	movs	r2, #0
 800c470:	f7f4 f8c2 	bl	80005f8 <__aeabi_dmul>
 800c474:	4b08      	ldr	r3, [pc, #32]	@ (800c498 <_strtod_l+0x860>)
 800c476:	400b      	ands	r3, r1
 800c478:	4682      	mov	sl, r0
 800c47a:	468b      	mov	fp, r1
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f47f ae05 	bne.w	800c08c <_strtod_l+0x454>
 800c482:	9a05      	ldr	r2, [sp, #20]
 800c484:	2322      	movs	r3, #34	@ 0x22
 800c486:	6013      	str	r3, [r2, #0]
 800c488:	e600      	b.n	800c08c <_strtod_l+0x454>
 800c48a:	bf00      	nop
 800c48c:	08011d88 	.word	0x08011d88
 800c490:	fffffc02 	.word	0xfffffc02
 800c494:	39500000 	.word	0x39500000
 800c498:	7ff00000 	.word	0x7ff00000
 800c49c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c4a0:	d165      	bne.n	800c56e <_strtod_l+0x936>
 800c4a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c4a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4a8:	b35a      	cbz	r2, 800c502 <_strtod_l+0x8ca>
 800c4aa:	4a9f      	ldr	r2, [pc, #636]	@ (800c728 <_strtod_l+0xaf0>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d12b      	bne.n	800c508 <_strtod_l+0x8d0>
 800c4b0:	9b08      	ldr	r3, [sp, #32]
 800c4b2:	4651      	mov	r1, sl
 800c4b4:	b303      	cbz	r3, 800c4f8 <_strtod_l+0x8c0>
 800c4b6:	4b9d      	ldr	r3, [pc, #628]	@ (800c72c <_strtod_l+0xaf4>)
 800c4b8:	465a      	mov	r2, fp
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c4:	d81b      	bhi.n	800c4fe <_strtod_l+0x8c6>
 800c4c6:	0d1b      	lsrs	r3, r3, #20
 800c4c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c4cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d0:	4299      	cmp	r1, r3
 800c4d2:	d119      	bne.n	800c508 <_strtod_l+0x8d0>
 800c4d4:	4b96      	ldr	r3, [pc, #600]	@ (800c730 <_strtod_l+0xaf8>)
 800c4d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d102      	bne.n	800c4e2 <_strtod_l+0x8aa>
 800c4dc:	3101      	adds	r1, #1
 800c4de:	f43f adca 	beq.w	800c076 <_strtod_l+0x43e>
 800c4e2:	4b92      	ldr	r3, [pc, #584]	@ (800c72c <_strtod_l+0xaf4>)
 800c4e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4e6:	401a      	ands	r2, r3
 800c4e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c4ec:	f04f 0a00 	mov.w	sl, #0
 800c4f0:	9b08      	ldr	r3, [sp, #32]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1b8      	bne.n	800c468 <_strtod_l+0x830>
 800c4f6:	e5c9      	b.n	800c08c <_strtod_l+0x454>
 800c4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4fc:	e7e8      	b.n	800c4d0 <_strtod_l+0x898>
 800c4fe:	4613      	mov	r3, r2
 800c500:	e7e6      	b.n	800c4d0 <_strtod_l+0x898>
 800c502:	ea53 030a 	orrs.w	r3, r3, sl
 800c506:	d0a1      	beq.n	800c44c <_strtod_l+0x814>
 800c508:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c50a:	b1db      	cbz	r3, 800c544 <_strtod_l+0x90c>
 800c50c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c50e:	4213      	tst	r3, r2
 800c510:	d0ee      	beq.n	800c4f0 <_strtod_l+0x8b8>
 800c512:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c514:	9a08      	ldr	r2, [sp, #32]
 800c516:	4650      	mov	r0, sl
 800c518:	4659      	mov	r1, fp
 800c51a:	b1bb      	cbz	r3, 800c54c <_strtod_l+0x914>
 800c51c:	f7ff fb6e 	bl	800bbfc <sulp>
 800c520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c524:	ec53 2b10 	vmov	r2, r3, d0
 800c528:	f7f3 feb0 	bl	800028c <__adddf3>
 800c52c:	4682      	mov	sl, r0
 800c52e:	468b      	mov	fp, r1
 800c530:	e7de      	b.n	800c4f0 <_strtod_l+0x8b8>
 800c532:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c536:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c53a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c53e:	f04f 3aff 	mov.w	sl, #4294967295
 800c542:	e7d5      	b.n	800c4f0 <_strtod_l+0x8b8>
 800c544:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c546:	ea13 0f0a 	tst.w	r3, sl
 800c54a:	e7e1      	b.n	800c510 <_strtod_l+0x8d8>
 800c54c:	f7ff fb56 	bl	800bbfc <sulp>
 800c550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c554:	ec53 2b10 	vmov	r2, r3, d0
 800c558:	f7f3 fe96 	bl	8000288 <__aeabi_dsub>
 800c55c:	2200      	movs	r2, #0
 800c55e:	2300      	movs	r3, #0
 800c560:	4682      	mov	sl, r0
 800c562:	468b      	mov	fp, r1
 800c564:	f7f4 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c568:	2800      	cmp	r0, #0
 800c56a:	d0c1      	beq.n	800c4f0 <_strtod_l+0x8b8>
 800c56c:	e619      	b.n	800c1a2 <_strtod_l+0x56a>
 800c56e:	4641      	mov	r1, r8
 800c570:	4620      	mov	r0, r4
 800c572:	f003 f98b 	bl	800f88c <__ratio>
 800c576:	ec57 6b10 	vmov	r6, r7, d0
 800c57a:	2200      	movs	r2, #0
 800c57c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c580:	4630      	mov	r0, r6
 800c582:	4639      	mov	r1, r7
 800c584:	f7f4 fab4 	bl	8000af0 <__aeabi_dcmple>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d06f      	beq.n	800c66c <_strtod_l+0xa34>
 800c58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d17a      	bne.n	800c688 <_strtod_l+0xa50>
 800c592:	f1ba 0f00 	cmp.w	sl, #0
 800c596:	d158      	bne.n	800c64a <_strtod_l+0xa12>
 800c598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c59a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d15a      	bne.n	800c658 <_strtod_l+0xa20>
 800c5a2:	4b64      	ldr	r3, [pc, #400]	@ (800c734 <_strtod_l+0xafc>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	4639      	mov	r1, r7
 800c5aa:	f7f4 fa97 	bl	8000adc <__aeabi_dcmplt>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d159      	bne.n	800c666 <_strtod_l+0xa2e>
 800c5b2:	4630      	mov	r0, r6
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	4b60      	ldr	r3, [pc, #384]	@ (800c738 <_strtod_l+0xb00>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f7f4 f81d 	bl	80005f8 <__aeabi_dmul>
 800c5be:	4606      	mov	r6, r0
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c5c6:	9606      	str	r6, [sp, #24]
 800c5c8:	9307      	str	r3, [sp, #28]
 800c5ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5ce:	4d57      	ldr	r5, [pc, #348]	@ (800c72c <_strtod_l+0xaf4>)
 800c5d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c5d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5d6:	401d      	ands	r5, r3
 800c5d8:	4b58      	ldr	r3, [pc, #352]	@ (800c73c <_strtod_l+0xb04>)
 800c5da:	429d      	cmp	r5, r3
 800c5dc:	f040 80b2 	bne.w	800c744 <_strtod_l+0xb0c>
 800c5e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c5e6:	ec4b ab10 	vmov	d0, sl, fp
 800c5ea:	f003 f887 	bl	800f6fc <__ulp>
 800c5ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c5f2:	ec51 0b10 	vmov	r0, r1, d0
 800c5f6:	f7f3 ffff 	bl	80005f8 <__aeabi_dmul>
 800c5fa:	4652      	mov	r2, sl
 800c5fc:	465b      	mov	r3, fp
 800c5fe:	f7f3 fe45 	bl	800028c <__adddf3>
 800c602:	460b      	mov	r3, r1
 800c604:	4949      	ldr	r1, [pc, #292]	@ (800c72c <_strtod_l+0xaf4>)
 800c606:	4a4e      	ldr	r2, [pc, #312]	@ (800c740 <_strtod_l+0xb08>)
 800c608:	4019      	ands	r1, r3
 800c60a:	4291      	cmp	r1, r2
 800c60c:	4682      	mov	sl, r0
 800c60e:	d942      	bls.n	800c696 <_strtod_l+0xa5e>
 800c610:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c612:	4b47      	ldr	r3, [pc, #284]	@ (800c730 <_strtod_l+0xaf8>)
 800c614:	429a      	cmp	r2, r3
 800c616:	d103      	bne.n	800c620 <_strtod_l+0x9e8>
 800c618:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c61a:	3301      	adds	r3, #1
 800c61c:	f43f ad2b 	beq.w	800c076 <_strtod_l+0x43e>
 800c620:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c730 <_strtod_l+0xaf8>
 800c624:	f04f 3aff 	mov.w	sl, #4294967295
 800c628:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c62a:	9805      	ldr	r0, [sp, #20]
 800c62c:	f002 fd32 	bl	800f094 <_Bfree>
 800c630:	9805      	ldr	r0, [sp, #20]
 800c632:	4649      	mov	r1, r9
 800c634:	f002 fd2e 	bl	800f094 <_Bfree>
 800c638:	9805      	ldr	r0, [sp, #20]
 800c63a:	4641      	mov	r1, r8
 800c63c:	f002 fd2a 	bl	800f094 <_Bfree>
 800c640:	9805      	ldr	r0, [sp, #20]
 800c642:	4621      	mov	r1, r4
 800c644:	f002 fd26 	bl	800f094 <_Bfree>
 800c648:	e618      	b.n	800c27c <_strtod_l+0x644>
 800c64a:	f1ba 0f01 	cmp.w	sl, #1
 800c64e:	d103      	bne.n	800c658 <_strtod_l+0xa20>
 800c650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c652:	2b00      	cmp	r3, #0
 800c654:	f43f ada5 	beq.w	800c1a2 <_strtod_l+0x56a>
 800c658:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c708 <_strtod_l+0xad0>
 800c65c:	4f35      	ldr	r7, [pc, #212]	@ (800c734 <_strtod_l+0xafc>)
 800c65e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c662:	2600      	movs	r6, #0
 800c664:	e7b1      	b.n	800c5ca <_strtod_l+0x992>
 800c666:	4f34      	ldr	r7, [pc, #208]	@ (800c738 <_strtod_l+0xb00>)
 800c668:	2600      	movs	r6, #0
 800c66a:	e7aa      	b.n	800c5c2 <_strtod_l+0x98a>
 800c66c:	4b32      	ldr	r3, [pc, #200]	@ (800c738 <_strtod_l+0xb00>)
 800c66e:	4630      	mov	r0, r6
 800c670:	4639      	mov	r1, r7
 800c672:	2200      	movs	r2, #0
 800c674:	f7f3 ffc0 	bl	80005f8 <__aeabi_dmul>
 800c678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c67a:	4606      	mov	r6, r0
 800c67c:	460f      	mov	r7, r1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d09f      	beq.n	800c5c2 <_strtod_l+0x98a>
 800c682:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c686:	e7a0      	b.n	800c5ca <_strtod_l+0x992>
 800c688:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c710 <_strtod_l+0xad8>
 800c68c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c690:	ec57 6b17 	vmov	r6, r7, d7
 800c694:	e799      	b.n	800c5ca <_strtod_l+0x992>
 800c696:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c69a:	9b08      	ldr	r3, [sp, #32]
 800c69c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1c1      	bne.n	800c628 <_strtod_l+0x9f0>
 800c6a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c6a8:	0d1b      	lsrs	r3, r3, #20
 800c6aa:	051b      	lsls	r3, r3, #20
 800c6ac:	429d      	cmp	r5, r3
 800c6ae:	d1bb      	bne.n	800c628 <_strtod_l+0x9f0>
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	4639      	mov	r1, r7
 800c6b4:	f7f4 fc5e 	bl	8000f74 <__aeabi_d2lz>
 800c6b8:	f7f3 ff70 	bl	800059c <__aeabi_l2d>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	f7f3 fde0 	bl	8000288 <__aeabi_dsub>
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c6d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6d6:	ea46 060a 	orr.w	r6, r6, sl
 800c6da:	431e      	orrs	r6, r3
 800c6dc:	d06f      	beq.n	800c7be <_strtod_l+0xb86>
 800c6de:	a30e      	add	r3, pc, #56	@ (adr r3, 800c718 <_strtod_l+0xae0>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f4 f9fa 	bl	8000adc <__aeabi_dcmplt>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f47f accf 	bne.w	800c08c <_strtod_l+0x454>
 800c6ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800c720 <_strtod_l+0xae8>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6f8:	f7f4 fa0e 	bl	8000b18 <__aeabi_dcmpgt>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d093      	beq.n	800c628 <_strtod_l+0x9f0>
 800c700:	e4c4      	b.n	800c08c <_strtod_l+0x454>
 800c702:	bf00      	nop
 800c704:	f3af 8000 	nop.w
 800c708:	00000000 	.word	0x00000000
 800c70c:	bff00000 	.word	0xbff00000
 800c710:	00000000 	.word	0x00000000
 800c714:	3ff00000 	.word	0x3ff00000
 800c718:	94a03595 	.word	0x94a03595
 800c71c:	3fdfffff 	.word	0x3fdfffff
 800c720:	35afe535 	.word	0x35afe535
 800c724:	3fe00000 	.word	0x3fe00000
 800c728:	000fffff 	.word	0x000fffff
 800c72c:	7ff00000 	.word	0x7ff00000
 800c730:	7fefffff 	.word	0x7fefffff
 800c734:	3ff00000 	.word	0x3ff00000
 800c738:	3fe00000 	.word	0x3fe00000
 800c73c:	7fe00000 	.word	0x7fe00000
 800c740:	7c9fffff 	.word	0x7c9fffff
 800c744:	9b08      	ldr	r3, [sp, #32]
 800c746:	b323      	cbz	r3, 800c792 <_strtod_l+0xb5a>
 800c748:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c74c:	d821      	bhi.n	800c792 <_strtod_l+0xb5a>
 800c74e:	a328      	add	r3, pc, #160	@ (adr r3, 800c7f0 <_strtod_l+0xbb8>)
 800c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c754:	4630      	mov	r0, r6
 800c756:	4639      	mov	r1, r7
 800c758:	f7f4 f9ca 	bl	8000af0 <__aeabi_dcmple>
 800c75c:	b1a0      	cbz	r0, 800c788 <_strtod_l+0xb50>
 800c75e:	4639      	mov	r1, r7
 800c760:	4630      	mov	r0, r6
 800c762:	f7f4 fa21 	bl	8000ba8 <__aeabi_d2uiz>
 800c766:	2801      	cmp	r0, #1
 800c768:	bf38      	it	cc
 800c76a:	2001      	movcc	r0, #1
 800c76c:	f7f3 feca 	bl	8000504 <__aeabi_ui2d>
 800c770:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c772:	4606      	mov	r6, r0
 800c774:	460f      	mov	r7, r1
 800c776:	b9fb      	cbnz	r3, 800c7b8 <_strtod_l+0xb80>
 800c778:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c77c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c77e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c780:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c784:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c788:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c78a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c78e:	1b5b      	subs	r3, r3, r5
 800c790:	9311      	str	r3, [sp, #68]	@ 0x44
 800c792:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c796:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c79a:	f002 ffaf 	bl	800f6fc <__ulp>
 800c79e:	4650      	mov	r0, sl
 800c7a0:	ec53 2b10 	vmov	r2, r3, d0
 800c7a4:	4659      	mov	r1, fp
 800c7a6:	f7f3 ff27 	bl	80005f8 <__aeabi_dmul>
 800c7aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c7ae:	f7f3 fd6d 	bl	800028c <__adddf3>
 800c7b2:	4682      	mov	sl, r0
 800c7b4:	468b      	mov	fp, r1
 800c7b6:	e770      	b.n	800c69a <_strtod_l+0xa62>
 800c7b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c7bc:	e7e0      	b.n	800c780 <_strtod_l+0xb48>
 800c7be:	a30e      	add	r3, pc, #56	@ (adr r3, 800c7f8 <_strtod_l+0xbc0>)
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f4 f98a 	bl	8000adc <__aeabi_dcmplt>
 800c7c8:	e798      	b.n	800c6fc <_strtod_l+0xac4>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c7d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	f7ff ba6d 	b.w	800bcb2 <_strtod_l+0x7a>
 800c7d8:	2a65      	cmp	r2, #101	@ 0x65
 800c7da:	f43f ab66 	beq.w	800beaa <_strtod_l+0x272>
 800c7de:	2a45      	cmp	r2, #69	@ 0x45
 800c7e0:	f43f ab63 	beq.w	800beaa <_strtod_l+0x272>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f7ff bb9e 	b.w	800bf26 <_strtod_l+0x2ee>
 800c7ea:	bf00      	nop
 800c7ec:	f3af 8000 	nop.w
 800c7f0:	ffc00000 	.word	0xffc00000
 800c7f4:	41dfffff 	.word	0x41dfffff
 800c7f8:	94a03595 	.word	0x94a03595
 800c7fc:	3fcfffff 	.word	0x3fcfffff

0800c800 <_strtod_r>:
 800c800:	4b01      	ldr	r3, [pc, #4]	@ (800c808 <_strtod_r+0x8>)
 800c802:	f7ff ba19 	b.w	800bc38 <_strtod_l>
 800c806:	bf00      	nop
 800c808:	20000044 	.word	0x20000044

0800c80c <strtof>:
 800c80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c810:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800c8d0 <strtof+0xc4>
 800c814:	4b29      	ldr	r3, [pc, #164]	@ (800c8bc <strtof+0xb0>)
 800c816:	460a      	mov	r2, r1
 800c818:	ed2d 8b02 	vpush	{d8}
 800c81c:	4601      	mov	r1, r0
 800c81e:	f8d8 0000 	ldr.w	r0, [r8]
 800c822:	f7ff fa09 	bl	800bc38 <_strtod_l>
 800c826:	ec55 4b10 	vmov	r4, r5, d0
 800c82a:	4622      	mov	r2, r4
 800c82c:	462b      	mov	r3, r5
 800c82e:	4620      	mov	r0, r4
 800c830:	4629      	mov	r1, r5
 800c832:	f7f4 f97b 	bl	8000b2c <__aeabi_dcmpun>
 800c836:	b190      	cbz	r0, 800c85e <strtof+0x52>
 800c838:	2d00      	cmp	r5, #0
 800c83a:	4821      	ldr	r0, [pc, #132]	@ (800c8c0 <strtof+0xb4>)
 800c83c:	da09      	bge.n	800c852 <strtof+0x46>
 800c83e:	f001 f9ff 	bl	800dc40 <nanf>
 800c842:	eeb1 8a40 	vneg.f32	s16, s0
 800c846:	eeb0 0a48 	vmov.f32	s0, s16
 800c84a:	ecbd 8b02 	vpop	{d8}
 800c84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c852:	ecbd 8b02 	vpop	{d8}
 800c856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c85a:	f001 b9f1 	b.w	800dc40 <nanf>
 800c85e:	4620      	mov	r0, r4
 800c860:	4629      	mov	r1, r5
 800c862:	f7f4 f9c1 	bl	8000be8 <__aeabi_d2f>
 800c866:	ee08 0a10 	vmov	s16, r0
 800c86a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800c8c4 <strtof+0xb8>
 800c86e:	eeb0 7ac8 	vabs.f32	s14, s16
 800c872:	eeb4 7a67 	vcmp.f32	s14, s15
 800c876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c87a:	dd11      	ble.n	800c8a0 <strtof+0x94>
 800c87c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800c880:	4b11      	ldr	r3, [pc, #68]	@ (800c8c8 <strtof+0xbc>)
 800c882:	f04f 32ff 	mov.w	r2, #4294967295
 800c886:	4620      	mov	r0, r4
 800c888:	4639      	mov	r1, r7
 800c88a:	f7f4 f94f 	bl	8000b2c <__aeabi_dcmpun>
 800c88e:	b980      	cbnz	r0, 800c8b2 <strtof+0xa6>
 800c890:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c8 <strtof+0xbc>)
 800c892:	f04f 32ff 	mov.w	r2, #4294967295
 800c896:	4620      	mov	r0, r4
 800c898:	4639      	mov	r1, r7
 800c89a:	f7f4 f929 	bl	8000af0 <__aeabi_dcmple>
 800c89e:	b940      	cbnz	r0, 800c8b2 <strtof+0xa6>
 800c8a0:	ee18 3a10 	vmov	r3, s16
 800c8a4:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c8a8:	d1cd      	bne.n	800c846 <strtof+0x3a>
 800c8aa:	4b08      	ldr	r3, [pc, #32]	@ (800c8cc <strtof+0xc0>)
 800c8ac:	402b      	ands	r3, r5
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0c9      	beq.n	800c846 <strtof+0x3a>
 800c8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b6:	2222      	movs	r2, #34	@ 0x22
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	e7c4      	b.n	800c846 <strtof+0x3a>
 800c8bc:	20000044 	.word	0x20000044
 800c8c0:	08012184 	.word	0x08012184
 800c8c4:	7f7fffff 	.word	0x7f7fffff
 800c8c8:	7fefffff 	.word	0x7fefffff
 800c8cc:	7ff00000 	.word	0x7ff00000
 800c8d0:	200001b0 	.word	0x200001b0

0800c8d4 <__cvt>:
 800c8d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d8:	ec57 6b10 	vmov	r6, r7, d0
 800c8dc:	2f00      	cmp	r7, #0
 800c8de:	460c      	mov	r4, r1
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	463b      	mov	r3, r7
 800c8e4:	bfbb      	ittet	lt
 800c8e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c8ea:	461f      	movlt	r7, r3
 800c8ec:	2300      	movge	r3, #0
 800c8ee:	232d      	movlt	r3, #45	@ 0x2d
 800c8f0:	700b      	strb	r3, [r1, #0]
 800c8f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c8f8:	4691      	mov	r9, r2
 800c8fa:	f023 0820 	bic.w	r8, r3, #32
 800c8fe:	bfbc      	itt	lt
 800c900:	4632      	movlt	r2, r6
 800c902:	4616      	movlt	r6, r2
 800c904:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c908:	d005      	beq.n	800c916 <__cvt+0x42>
 800c90a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c90e:	d100      	bne.n	800c912 <__cvt+0x3e>
 800c910:	3401      	adds	r4, #1
 800c912:	2102      	movs	r1, #2
 800c914:	e000      	b.n	800c918 <__cvt+0x44>
 800c916:	2103      	movs	r1, #3
 800c918:	ab03      	add	r3, sp, #12
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	ab02      	add	r3, sp, #8
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	ec47 6b10 	vmov	d0, r6, r7
 800c924:	4653      	mov	r3, sl
 800c926:	4622      	mov	r2, r4
 800c928:	f001 fa1a 	bl	800dd60 <_dtoa_r>
 800c92c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c930:	4605      	mov	r5, r0
 800c932:	d119      	bne.n	800c968 <__cvt+0x94>
 800c934:	f019 0f01 	tst.w	r9, #1
 800c938:	d00e      	beq.n	800c958 <__cvt+0x84>
 800c93a:	eb00 0904 	add.w	r9, r0, r4
 800c93e:	2200      	movs	r2, #0
 800c940:	2300      	movs	r3, #0
 800c942:	4630      	mov	r0, r6
 800c944:	4639      	mov	r1, r7
 800c946:	f7f4 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c94a:	b108      	cbz	r0, 800c950 <__cvt+0x7c>
 800c94c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c950:	2230      	movs	r2, #48	@ 0x30
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	454b      	cmp	r3, r9
 800c956:	d31e      	bcc.n	800c996 <__cvt+0xc2>
 800c958:	9b03      	ldr	r3, [sp, #12]
 800c95a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c95c:	1b5b      	subs	r3, r3, r5
 800c95e:	4628      	mov	r0, r5
 800c960:	6013      	str	r3, [r2, #0]
 800c962:	b004      	add	sp, #16
 800c964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c968:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c96c:	eb00 0904 	add.w	r9, r0, r4
 800c970:	d1e5      	bne.n	800c93e <__cvt+0x6a>
 800c972:	7803      	ldrb	r3, [r0, #0]
 800c974:	2b30      	cmp	r3, #48	@ 0x30
 800c976:	d10a      	bne.n	800c98e <__cvt+0xba>
 800c978:	2200      	movs	r2, #0
 800c97a:	2300      	movs	r3, #0
 800c97c:	4630      	mov	r0, r6
 800c97e:	4639      	mov	r1, r7
 800c980:	f7f4 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c984:	b918      	cbnz	r0, 800c98e <__cvt+0xba>
 800c986:	f1c4 0401 	rsb	r4, r4, #1
 800c98a:	f8ca 4000 	str.w	r4, [sl]
 800c98e:	f8da 3000 	ldr.w	r3, [sl]
 800c992:	4499      	add	r9, r3
 800c994:	e7d3      	b.n	800c93e <__cvt+0x6a>
 800c996:	1c59      	adds	r1, r3, #1
 800c998:	9103      	str	r1, [sp, #12]
 800c99a:	701a      	strb	r2, [r3, #0]
 800c99c:	e7d9      	b.n	800c952 <__cvt+0x7e>

0800c99e <__exponent>:
 800c99e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9a0:	2900      	cmp	r1, #0
 800c9a2:	bfba      	itte	lt
 800c9a4:	4249      	neglt	r1, r1
 800c9a6:	232d      	movlt	r3, #45	@ 0x2d
 800c9a8:	232b      	movge	r3, #43	@ 0x2b
 800c9aa:	2909      	cmp	r1, #9
 800c9ac:	7002      	strb	r2, [r0, #0]
 800c9ae:	7043      	strb	r3, [r0, #1]
 800c9b0:	dd29      	ble.n	800ca06 <__exponent+0x68>
 800c9b2:	f10d 0307 	add.w	r3, sp, #7
 800c9b6:	461d      	mov	r5, r3
 800c9b8:	270a      	movs	r7, #10
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	fbb1 f6f7 	udiv	r6, r1, r7
 800c9c0:	fb07 1416 	mls	r4, r7, r6, r1
 800c9c4:	3430      	adds	r4, #48	@ 0x30
 800c9c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	2c63      	cmp	r4, #99	@ 0x63
 800c9ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9d2:	4631      	mov	r1, r6
 800c9d4:	dcf1      	bgt.n	800c9ba <__exponent+0x1c>
 800c9d6:	3130      	adds	r1, #48	@ 0x30
 800c9d8:	1e94      	subs	r4, r2, #2
 800c9da:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c9de:	1c41      	adds	r1, r0, #1
 800c9e0:	4623      	mov	r3, r4
 800c9e2:	42ab      	cmp	r3, r5
 800c9e4:	d30a      	bcc.n	800c9fc <__exponent+0x5e>
 800c9e6:	f10d 0309 	add.w	r3, sp, #9
 800c9ea:	1a9b      	subs	r3, r3, r2
 800c9ec:	42ac      	cmp	r4, r5
 800c9ee:	bf88      	it	hi
 800c9f0:	2300      	movhi	r3, #0
 800c9f2:	3302      	adds	r3, #2
 800c9f4:	4403      	add	r3, r0
 800c9f6:	1a18      	subs	r0, r3, r0
 800c9f8:	b003      	add	sp, #12
 800c9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ca00:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ca04:	e7ed      	b.n	800c9e2 <__exponent+0x44>
 800ca06:	2330      	movs	r3, #48	@ 0x30
 800ca08:	3130      	adds	r1, #48	@ 0x30
 800ca0a:	7083      	strb	r3, [r0, #2]
 800ca0c:	70c1      	strb	r1, [r0, #3]
 800ca0e:	1d03      	adds	r3, r0, #4
 800ca10:	e7f1      	b.n	800c9f6 <__exponent+0x58>
	...

0800ca14 <_printf_float>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	b08d      	sub	sp, #52	@ 0x34
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ca20:	4616      	mov	r6, r2
 800ca22:	461f      	mov	r7, r3
 800ca24:	4605      	mov	r5, r0
 800ca26:	f001 f81b 	bl	800da60 <_localeconv_r>
 800ca2a:	6803      	ldr	r3, [r0, #0]
 800ca2c:	9304      	str	r3, [sp, #16]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f3 fc1e 	bl	8000270 <strlen>
 800ca34:	2300      	movs	r3, #0
 800ca36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca38:	f8d8 3000 	ldr.w	r3, [r8]
 800ca3c:	9005      	str	r0, [sp, #20]
 800ca3e:	3307      	adds	r3, #7
 800ca40:	f023 0307 	bic.w	r3, r3, #7
 800ca44:	f103 0208 	add.w	r2, r3, #8
 800ca48:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ca4c:	f8d4 b000 	ldr.w	fp, [r4]
 800ca50:	f8c8 2000 	str.w	r2, [r8]
 800ca54:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ca5c:	9307      	str	r3, [sp, #28]
 800ca5e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ca66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca6a:	4b9c      	ldr	r3, [pc, #624]	@ (800ccdc <_printf_float+0x2c8>)
 800ca6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca70:	f7f4 f85c 	bl	8000b2c <__aeabi_dcmpun>
 800ca74:	bb70      	cbnz	r0, 800cad4 <_printf_float+0xc0>
 800ca76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca7a:	4b98      	ldr	r3, [pc, #608]	@ (800ccdc <_printf_float+0x2c8>)
 800ca7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca80:	f7f4 f836 	bl	8000af0 <__aeabi_dcmple>
 800ca84:	bb30      	cbnz	r0, 800cad4 <_printf_float+0xc0>
 800ca86:	2200      	movs	r2, #0
 800ca88:	2300      	movs	r3, #0
 800ca8a:	4640      	mov	r0, r8
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	f7f4 f825 	bl	8000adc <__aeabi_dcmplt>
 800ca92:	b110      	cbz	r0, 800ca9a <_printf_float+0x86>
 800ca94:	232d      	movs	r3, #45	@ 0x2d
 800ca96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca9a:	4a91      	ldr	r2, [pc, #580]	@ (800cce0 <_printf_float+0x2cc>)
 800ca9c:	4b91      	ldr	r3, [pc, #580]	@ (800cce4 <_printf_float+0x2d0>)
 800ca9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800caa2:	bf94      	ite	ls
 800caa4:	4690      	movls	r8, r2
 800caa6:	4698      	movhi	r8, r3
 800caa8:	2303      	movs	r3, #3
 800caaa:	6123      	str	r3, [r4, #16]
 800caac:	f02b 0304 	bic.w	r3, fp, #4
 800cab0:	6023      	str	r3, [r4, #0]
 800cab2:	f04f 0900 	mov.w	r9, #0
 800cab6:	9700      	str	r7, [sp, #0]
 800cab8:	4633      	mov	r3, r6
 800caba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cabc:	4621      	mov	r1, r4
 800cabe:	4628      	mov	r0, r5
 800cac0:	f000 f9d2 	bl	800ce68 <_printf_common>
 800cac4:	3001      	adds	r0, #1
 800cac6:	f040 808d 	bne.w	800cbe4 <_printf_float+0x1d0>
 800caca:	f04f 30ff 	mov.w	r0, #4294967295
 800cace:	b00d      	add	sp, #52	@ 0x34
 800cad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad4:	4642      	mov	r2, r8
 800cad6:	464b      	mov	r3, r9
 800cad8:	4640      	mov	r0, r8
 800cada:	4649      	mov	r1, r9
 800cadc:	f7f4 f826 	bl	8000b2c <__aeabi_dcmpun>
 800cae0:	b140      	cbz	r0, 800caf4 <_printf_float+0xe0>
 800cae2:	464b      	mov	r3, r9
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	bfbc      	itt	lt
 800cae8:	232d      	movlt	r3, #45	@ 0x2d
 800caea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800caee:	4a7e      	ldr	r2, [pc, #504]	@ (800cce8 <_printf_float+0x2d4>)
 800caf0:	4b7e      	ldr	r3, [pc, #504]	@ (800ccec <_printf_float+0x2d8>)
 800caf2:	e7d4      	b.n	800ca9e <_printf_float+0x8a>
 800caf4:	6863      	ldr	r3, [r4, #4]
 800caf6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cafa:	9206      	str	r2, [sp, #24]
 800cafc:	1c5a      	adds	r2, r3, #1
 800cafe:	d13b      	bne.n	800cb78 <_printf_float+0x164>
 800cb00:	2306      	movs	r3, #6
 800cb02:	6063      	str	r3, [r4, #4]
 800cb04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cb08:	2300      	movs	r3, #0
 800cb0a:	6022      	str	r2, [r4, #0]
 800cb0c:	9303      	str	r3, [sp, #12]
 800cb0e:	ab0a      	add	r3, sp, #40	@ 0x28
 800cb10:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cb14:	ab09      	add	r3, sp, #36	@ 0x24
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	6861      	ldr	r1, [r4, #4]
 800cb1a:	ec49 8b10 	vmov	d0, r8, r9
 800cb1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cb22:	4628      	mov	r0, r5
 800cb24:	f7ff fed6 	bl	800c8d4 <__cvt>
 800cb28:	9b06      	ldr	r3, [sp, #24]
 800cb2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb2c:	2b47      	cmp	r3, #71	@ 0x47
 800cb2e:	4680      	mov	r8, r0
 800cb30:	d129      	bne.n	800cb86 <_printf_float+0x172>
 800cb32:	1cc8      	adds	r0, r1, #3
 800cb34:	db02      	blt.n	800cb3c <_printf_float+0x128>
 800cb36:	6863      	ldr	r3, [r4, #4]
 800cb38:	4299      	cmp	r1, r3
 800cb3a:	dd41      	ble.n	800cbc0 <_printf_float+0x1ac>
 800cb3c:	f1aa 0a02 	sub.w	sl, sl, #2
 800cb40:	fa5f fa8a 	uxtb.w	sl, sl
 800cb44:	3901      	subs	r1, #1
 800cb46:	4652      	mov	r2, sl
 800cb48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cb4c:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb4e:	f7ff ff26 	bl	800c99e <__exponent>
 800cb52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb54:	1813      	adds	r3, r2, r0
 800cb56:	2a01      	cmp	r2, #1
 800cb58:	4681      	mov	r9, r0
 800cb5a:	6123      	str	r3, [r4, #16]
 800cb5c:	dc02      	bgt.n	800cb64 <_printf_float+0x150>
 800cb5e:	6822      	ldr	r2, [r4, #0]
 800cb60:	07d2      	lsls	r2, r2, #31
 800cb62:	d501      	bpl.n	800cb68 <_printf_float+0x154>
 800cb64:	3301      	adds	r3, #1
 800cb66:	6123      	str	r3, [r4, #16]
 800cb68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d0a2      	beq.n	800cab6 <_printf_float+0xa2>
 800cb70:	232d      	movs	r3, #45	@ 0x2d
 800cb72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb76:	e79e      	b.n	800cab6 <_printf_float+0xa2>
 800cb78:	9a06      	ldr	r2, [sp, #24]
 800cb7a:	2a47      	cmp	r2, #71	@ 0x47
 800cb7c:	d1c2      	bne.n	800cb04 <_printf_float+0xf0>
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1c0      	bne.n	800cb04 <_printf_float+0xf0>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e7bd      	b.n	800cb02 <_printf_float+0xee>
 800cb86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cb8a:	d9db      	bls.n	800cb44 <_printf_float+0x130>
 800cb8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cb90:	d118      	bne.n	800cbc4 <_printf_float+0x1b0>
 800cb92:	2900      	cmp	r1, #0
 800cb94:	6863      	ldr	r3, [r4, #4]
 800cb96:	dd0b      	ble.n	800cbb0 <_printf_float+0x19c>
 800cb98:	6121      	str	r1, [r4, #16]
 800cb9a:	b913      	cbnz	r3, 800cba2 <_printf_float+0x18e>
 800cb9c:	6822      	ldr	r2, [r4, #0]
 800cb9e:	07d0      	lsls	r0, r2, #31
 800cba0:	d502      	bpl.n	800cba8 <_printf_float+0x194>
 800cba2:	3301      	adds	r3, #1
 800cba4:	440b      	add	r3, r1
 800cba6:	6123      	str	r3, [r4, #16]
 800cba8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cbaa:	f04f 0900 	mov.w	r9, #0
 800cbae:	e7db      	b.n	800cb68 <_printf_float+0x154>
 800cbb0:	b913      	cbnz	r3, 800cbb8 <_printf_float+0x1a4>
 800cbb2:	6822      	ldr	r2, [r4, #0]
 800cbb4:	07d2      	lsls	r2, r2, #31
 800cbb6:	d501      	bpl.n	800cbbc <_printf_float+0x1a8>
 800cbb8:	3302      	adds	r3, #2
 800cbba:	e7f4      	b.n	800cba6 <_printf_float+0x192>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e7f2      	b.n	800cba6 <_printf_float+0x192>
 800cbc0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cbc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbc6:	4299      	cmp	r1, r3
 800cbc8:	db05      	blt.n	800cbd6 <_printf_float+0x1c2>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	6121      	str	r1, [r4, #16]
 800cbce:	07d8      	lsls	r0, r3, #31
 800cbd0:	d5ea      	bpl.n	800cba8 <_printf_float+0x194>
 800cbd2:	1c4b      	adds	r3, r1, #1
 800cbd4:	e7e7      	b.n	800cba6 <_printf_float+0x192>
 800cbd6:	2900      	cmp	r1, #0
 800cbd8:	bfd4      	ite	le
 800cbda:	f1c1 0202 	rsble	r2, r1, #2
 800cbde:	2201      	movgt	r2, #1
 800cbe0:	4413      	add	r3, r2
 800cbe2:	e7e0      	b.n	800cba6 <_printf_float+0x192>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	055a      	lsls	r2, r3, #21
 800cbe8:	d407      	bmi.n	800cbfa <_printf_float+0x1e6>
 800cbea:	6923      	ldr	r3, [r4, #16]
 800cbec:	4642      	mov	r2, r8
 800cbee:	4631      	mov	r1, r6
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b8      	blx	r7
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d12b      	bne.n	800cc50 <_printf_float+0x23c>
 800cbf8:	e767      	b.n	800caca <_printf_float+0xb6>
 800cbfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cbfe:	f240 80dd 	bls.w	800cdbc <_printf_float+0x3a8>
 800cc02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cc06:	2200      	movs	r2, #0
 800cc08:	2300      	movs	r3, #0
 800cc0a:	f7f3 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d033      	beq.n	800cc7a <_printf_float+0x266>
 800cc12:	4a37      	ldr	r2, [pc, #220]	@ (800ccf0 <_printf_float+0x2dc>)
 800cc14:	2301      	movs	r3, #1
 800cc16:	4631      	mov	r1, r6
 800cc18:	4628      	mov	r0, r5
 800cc1a:	47b8      	blx	r7
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	f43f af54 	beq.w	800caca <_printf_float+0xb6>
 800cc22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cc26:	4543      	cmp	r3, r8
 800cc28:	db02      	blt.n	800cc30 <_printf_float+0x21c>
 800cc2a:	6823      	ldr	r3, [r4, #0]
 800cc2c:	07d8      	lsls	r0, r3, #31
 800cc2e:	d50f      	bpl.n	800cc50 <_printf_float+0x23c>
 800cc30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc34:	4631      	mov	r1, r6
 800cc36:	4628      	mov	r0, r5
 800cc38:	47b8      	blx	r7
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	f43f af45 	beq.w	800caca <_printf_float+0xb6>
 800cc40:	f04f 0900 	mov.w	r9, #0
 800cc44:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc48:	f104 0a1a 	add.w	sl, r4, #26
 800cc4c:	45c8      	cmp	r8, r9
 800cc4e:	dc09      	bgt.n	800cc64 <_printf_float+0x250>
 800cc50:	6823      	ldr	r3, [r4, #0]
 800cc52:	079b      	lsls	r3, r3, #30
 800cc54:	f100 8103 	bmi.w	800ce5e <_printf_float+0x44a>
 800cc58:	68e0      	ldr	r0, [r4, #12]
 800cc5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc5c:	4298      	cmp	r0, r3
 800cc5e:	bfb8      	it	lt
 800cc60:	4618      	movlt	r0, r3
 800cc62:	e734      	b.n	800cace <_printf_float+0xba>
 800cc64:	2301      	movs	r3, #1
 800cc66:	4652      	mov	r2, sl
 800cc68:	4631      	mov	r1, r6
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	47b8      	blx	r7
 800cc6e:	3001      	adds	r0, #1
 800cc70:	f43f af2b 	beq.w	800caca <_printf_float+0xb6>
 800cc74:	f109 0901 	add.w	r9, r9, #1
 800cc78:	e7e8      	b.n	800cc4c <_printf_float+0x238>
 800cc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	dc39      	bgt.n	800ccf4 <_printf_float+0x2e0>
 800cc80:	4a1b      	ldr	r2, [pc, #108]	@ (800ccf0 <_printf_float+0x2dc>)
 800cc82:	2301      	movs	r3, #1
 800cc84:	4631      	mov	r1, r6
 800cc86:	4628      	mov	r0, r5
 800cc88:	47b8      	blx	r7
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	f43f af1d 	beq.w	800caca <_printf_float+0xb6>
 800cc90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cc94:	ea59 0303 	orrs.w	r3, r9, r3
 800cc98:	d102      	bne.n	800cca0 <_printf_float+0x28c>
 800cc9a:	6823      	ldr	r3, [r4, #0]
 800cc9c:	07d9      	lsls	r1, r3, #31
 800cc9e:	d5d7      	bpl.n	800cc50 <_printf_float+0x23c>
 800cca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cca4:	4631      	mov	r1, r6
 800cca6:	4628      	mov	r0, r5
 800cca8:	47b8      	blx	r7
 800ccaa:	3001      	adds	r0, #1
 800ccac:	f43f af0d 	beq.w	800caca <_printf_float+0xb6>
 800ccb0:	f04f 0a00 	mov.w	sl, #0
 800ccb4:	f104 0b1a 	add.w	fp, r4, #26
 800ccb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccba:	425b      	negs	r3, r3
 800ccbc:	4553      	cmp	r3, sl
 800ccbe:	dc01      	bgt.n	800ccc4 <_printf_float+0x2b0>
 800ccc0:	464b      	mov	r3, r9
 800ccc2:	e793      	b.n	800cbec <_printf_float+0x1d8>
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	465a      	mov	r2, fp
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4628      	mov	r0, r5
 800cccc:	47b8      	blx	r7
 800ccce:	3001      	adds	r0, #1
 800ccd0:	f43f aefb 	beq.w	800caca <_printf_float+0xb6>
 800ccd4:	f10a 0a01 	add.w	sl, sl, #1
 800ccd8:	e7ee      	b.n	800ccb8 <_printf_float+0x2a4>
 800ccda:	bf00      	nop
 800ccdc:	7fefffff 	.word	0x7fefffff
 800cce0:	08011eb1 	.word	0x08011eb1
 800cce4:	08011eb5 	.word	0x08011eb5
 800cce8:	08011eb9 	.word	0x08011eb9
 800ccec:	08011ebd 	.word	0x08011ebd
 800ccf0:	08011ec1 	.word	0x08011ec1
 800ccf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ccf6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ccfa:	4553      	cmp	r3, sl
 800ccfc:	bfa8      	it	ge
 800ccfe:	4653      	movge	r3, sl
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	4699      	mov	r9, r3
 800cd04:	dc36      	bgt.n	800cd74 <_printf_float+0x360>
 800cd06:	f04f 0b00 	mov.w	fp, #0
 800cd0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd0e:	f104 021a 	add.w	r2, r4, #26
 800cd12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd14:	9306      	str	r3, [sp, #24]
 800cd16:	eba3 0309 	sub.w	r3, r3, r9
 800cd1a:	455b      	cmp	r3, fp
 800cd1c:	dc31      	bgt.n	800cd82 <_printf_float+0x36e>
 800cd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd20:	459a      	cmp	sl, r3
 800cd22:	dc3a      	bgt.n	800cd9a <_printf_float+0x386>
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	07da      	lsls	r2, r3, #31
 800cd28:	d437      	bmi.n	800cd9a <_printf_float+0x386>
 800cd2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd2c:	ebaa 0903 	sub.w	r9, sl, r3
 800cd30:	9b06      	ldr	r3, [sp, #24]
 800cd32:	ebaa 0303 	sub.w	r3, sl, r3
 800cd36:	4599      	cmp	r9, r3
 800cd38:	bfa8      	it	ge
 800cd3a:	4699      	movge	r9, r3
 800cd3c:	f1b9 0f00 	cmp.w	r9, #0
 800cd40:	dc33      	bgt.n	800cdaa <_printf_float+0x396>
 800cd42:	f04f 0800 	mov.w	r8, #0
 800cd46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd4a:	f104 0b1a 	add.w	fp, r4, #26
 800cd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd50:	ebaa 0303 	sub.w	r3, sl, r3
 800cd54:	eba3 0309 	sub.w	r3, r3, r9
 800cd58:	4543      	cmp	r3, r8
 800cd5a:	f77f af79 	ble.w	800cc50 <_printf_float+0x23c>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	465a      	mov	r2, fp
 800cd62:	4631      	mov	r1, r6
 800cd64:	4628      	mov	r0, r5
 800cd66:	47b8      	blx	r7
 800cd68:	3001      	adds	r0, #1
 800cd6a:	f43f aeae 	beq.w	800caca <_printf_float+0xb6>
 800cd6e:	f108 0801 	add.w	r8, r8, #1
 800cd72:	e7ec      	b.n	800cd4e <_printf_float+0x33a>
 800cd74:	4642      	mov	r2, r8
 800cd76:	4631      	mov	r1, r6
 800cd78:	4628      	mov	r0, r5
 800cd7a:	47b8      	blx	r7
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	d1c2      	bne.n	800cd06 <_printf_float+0x2f2>
 800cd80:	e6a3      	b.n	800caca <_printf_float+0xb6>
 800cd82:	2301      	movs	r3, #1
 800cd84:	4631      	mov	r1, r6
 800cd86:	4628      	mov	r0, r5
 800cd88:	9206      	str	r2, [sp, #24]
 800cd8a:	47b8      	blx	r7
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	f43f ae9c 	beq.w	800caca <_printf_float+0xb6>
 800cd92:	9a06      	ldr	r2, [sp, #24]
 800cd94:	f10b 0b01 	add.w	fp, fp, #1
 800cd98:	e7bb      	b.n	800cd12 <_printf_float+0x2fe>
 800cd9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd9e:	4631      	mov	r1, r6
 800cda0:	4628      	mov	r0, r5
 800cda2:	47b8      	blx	r7
 800cda4:	3001      	adds	r0, #1
 800cda6:	d1c0      	bne.n	800cd2a <_printf_float+0x316>
 800cda8:	e68f      	b.n	800caca <_printf_float+0xb6>
 800cdaa:	9a06      	ldr	r2, [sp, #24]
 800cdac:	464b      	mov	r3, r9
 800cdae:	4442      	add	r2, r8
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	47b8      	blx	r7
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	d1c3      	bne.n	800cd42 <_printf_float+0x32e>
 800cdba:	e686      	b.n	800caca <_printf_float+0xb6>
 800cdbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cdc0:	f1ba 0f01 	cmp.w	sl, #1
 800cdc4:	dc01      	bgt.n	800cdca <_printf_float+0x3b6>
 800cdc6:	07db      	lsls	r3, r3, #31
 800cdc8:	d536      	bpl.n	800ce38 <_printf_float+0x424>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	4642      	mov	r2, r8
 800cdce:	4631      	mov	r1, r6
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	47b8      	blx	r7
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	f43f ae78 	beq.w	800caca <_printf_float+0xb6>
 800cdda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdde:	4631      	mov	r1, r6
 800cde0:	4628      	mov	r0, r5
 800cde2:	47b8      	blx	r7
 800cde4:	3001      	adds	r0, #1
 800cde6:	f43f ae70 	beq.w	800caca <_printf_float+0xb6>
 800cdea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cdee:	2200      	movs	r2, #0
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cdf6:	f7f3 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdfa:	b9c0      	cbnz	r0, 800ce2e <_printf_float+0x41a>
 800cdfc:	4653      	mov	r3, sl
 800cdfe:	f108 0201 	add.w	r2, r8, #1
 800ce02:	4631      	mov	r1, r6
 800ce04:	4628      	mov	r0, r5
 800ce06:	47b8      	blx	r7
 800ce08:	3001      	adds	r0, #1
 800ce0a:	d10c      	bne.n	800ce26 <_printf_float+0x412>
 800ce0c:	e65d      	b.n	800caca <_printf_float+0xb6>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	465a      	mov	r2, fp
 800ce12:	4631      	mov	r1, r6
 800ce14:	4628      	mov	r0, r5
 800ce16:	47b8      	blx	r7
 800ce18:	3001      	adds	r0, #1
 800ce1a:	f43f ae56 	beq.w	800caca <_printf_float+0xb6>
 800ce1e:	f108 0801 	add.w	r8, r8, #1
 800ce22:	45d0      	cmp	r8, sl
 800ce24:	dbf3      	blt.n	800ce0e <_printf_float+0x3fa>
 800ce26:	464b      	mov	r3, r9
 800ce28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ce2c:	e6df      	b.n	800cbee <_printf_float+0x1da>
 800ce2e:	f04f 0800 	mov.w	r8, #0
 800ce32:	f104 0b1a 	add.w	fp, r4, #26
 800ce36:	e7f4      	b.n	800ce22 <_printf_float+0x40e>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	4642      	mov	r2, r8
 800ce3c:	e7e1      	b.n	800ce02 <_printf_float+0x3ee>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	464a      	mov	r2, r9
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b8      	blx	r7
 800ce48:	3001      	adds	r0, #1
 800ce4a:	f43f ae3e 	beq.w	800caca <_printf_float+0xb6>
 800ce4e:	f108 0801 	add.w	r8, r8, #1
 800ce52:	68e3      	ldr	r3, [r4, #12]
 800ce54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce56:	1a5b      	subs	r3, r3, r1
 800ce58:	4543      	cmp	r3, r8
 800ce5a:	dcf0      	bgt.n	800ce3e <_printf_float+0x42a>
 800ce5c:	e6fc      	b.n	800cc58 <_printf_float+0x244>
 800ce5e:	f04f 0800 	mov.w	r8, #0
 800ce62:	f104 0919 	add.w	r9, r4, #25
 800ce66:	e7f4      	b.n	800ce52 <_printf_float+0x43e>

0800ce68 <_printf_common>:
 800ce68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce6c:	4616      	mov	r6, r2
 800ce6e:	4698      	mov	r8, r3
 800ce70:	688a      	ldr	r2, [r1, #8]
 800ce72:	690b      	ldr	r3, [r1, #16]
 800ce74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	bfb8      	it	lt
 800ce7c:	4613      	movlt	r3, r2
 800ce7e:	6033      	str	r3, [r6, #0]
 800ce80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ce84:	4607      	mov	r7, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	b10a      	cbz	r2, 800ce8e <_printf_common+0x26>
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	6033      	str	r3, [r6, #0]
 800ce8e:	6823      	ldr	r3, [r4, #0]
 800ce90:	0699      	lsls	r1, r3, #26
 800ce92:	bf42      	ittt	mi
 800ce94:	6833      	ldrmi	r3, [r6, #0]
 800ce96:	3302      	addmi	r3, #2
 800ce98:	6033      	strmi	r3, [r6, #0]
 800ce9a:	6825      	ldr	r5, [r4, #0]
 800ce9c:	f015 0506 	ands.w	r5, r5, #6
 800cea0:	d106      	bne.n	800ceb0 <_printf_common+0x48>
 800cea2:	f104 0a19 	add.w	sl, r4, #25
 800cea6:	68e3      	ldr	r3, [r4, #12]
 800cea8:	6832      	ldr	r2, [r6, #0]
 800ceaa:	1a9b      	subs	r3, r3, r2
 800ceac:	42ab      	cmp	r3, r5
 800ceae:	dc26      	bgt.n	800cefe <_printf_common+0x96>
 800ceb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ceb4:	6822      	ldr	r2, [r4, #0]
 800ceb6:	3b00      	subs	r3, #0
 800ceb8:	bf18      	it	ne
 800ceba:	2301      	movne	r3, #1
 800cebc:	0692      	lsls	r2, r2, #26
 800cebe:	d42b      	bmi.n	800cf18 <_printf_common+0xb0>
 800cec0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cec4:	4641      	mov	r1, r8
 800cec6:	4638      	mov	r0, r7
 800cec8:	47c8      	blx	r9
 800ceca:	3001      	adds	r0, #1
 800cecc:	d01e      	beq.n	800cf0c <_printf_common+0xa4>
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	6922      	ldr	r2, [r4, #16]
 800ced2:	f003 0306 	and.w	r3, r3, #6
 800ced6:	2b04      	cmp	r3, #4
 800ced8:	bf02      	ittt	eq
 800ceda:	68e5      	ldreq	r5, [r4, #12]
 800cedc:	6833      	ldreq	r3, [r6, #0]
 800cede:	1aed      	subeq	r5, r5, r3
 800cee0:	68a3      	ldr	r3, [r4, #8]
 800cee2:	bf0c      	ite	eq
 800cee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cee8:	2500      	movne	r5, #0
 800ceea:	4293      	cmp	r3, r2
 800ceec:	bfc4      	itt	gt
 800ceee:	1a9b      	subgt	r3, r3, r2
 800cef0:	18ed      	addgt	r5, r5, r3
 800cef2:	2600      	movs	r6, #0
 800cef4:	341a      	adds	r4, #26
 800cef6:	42b5      	cmp	r5, r6
 800cef8:	d11a      	bne.n	800cf30 <_printf_common+0xc8>
 800cefa:	2000      	movs	r0, #0
 800cefc:	e008      	b.n	800cf10 <_printf_common+0xa8>
 800cefe:	2301      	movs	r3, #1
 800cf00:	4652      	mov	r2, sl
 800cf02:	4641      	mov	r1, r8
 800cf04:	4638      	mov	r0, r7
 800cf06:	47c8      	blx	r9
 800cf08:	3001      	adds	r0, #1
 800cf0a:	d103      	bne.n	800cf14 <_printf_common+0xac>
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf14:	3501      	adds	r5, #1
 800cf16:	e7c6      	b.n	800cea6 <_printf_common+0x3e>
 800cf18:	18e1      	adds	r1, r4, r3
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	2030      	movs	r0, #48	@ 0x30
 800cf1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cf22:	4422      	add	r2, r4
 800cf24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cf28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cf2c:	3302      	adds	r3, #2
 800cf2e:	e7c7      	b.n	800cec0 <_printf_common+0x58>
 800cf30:	2301      	movs	r3, #1
 800cf32:	4622      	mov	r2, r4
 800cf34:	4641      	mov	r1, r8
 800cf36:	4638      	mov	r0, r7
 800cf38:	47c8      	blx	r9
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	d0e6      	beq.n	800cf0c <_printf_common+0xa4>
 800cf3e:	3601      	adds	r6, #1
 800cf40:	e7d9      	b.n	800cef6 <_printf_common+0x8e>
	...

0800cf44 <_printf_i>:
 800cf44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf48:	7e0f      	ldrb	r7, [r1, #24]
 800cf4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cf4c:	2f78      	cmp	r7, #120	@ 0x78
 800cf4e:	4691      	mov	r9, r2
 800cf50:	4680      	mov	r8, r0
 800cf52:	460c      	mov	r4, r1
 800cf54:	469a      	mov	sl, r3
 800cf56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cf5a:	d807      	bhi.n	800cf6c <_printf_i+0x28>
 800cf5c:	2f62      	cmp	r7, #98	@ 0x62
 800cf5e:	d80a      	bhi.n	800cf76 <_printf_i+0x32>
 800cf60:	2f00      	cmp	r7, #0
 800cf62:	f000 80d2 	beq.w	800d10a <_printf_i+0x1c6>
 800cf66:	2f58      	cmp	r7, #88	@ 0x58
 800cf68:	f000 80b9 	beq.w	800d0de <_printf_i+0x19a>
 800cf6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cf74:	e03a      	b.n	800cfec <_printf_i+0xa8>
 800cf76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cf7a:	2b15      	cmp	r3, #21
 800cf7c:	d8f6      	bhi.n	800cf6c <_printf_i+0x28>
 800cf7e:	a101      	add	r1, pc, #4	@ (adr r1, 800cf84 <_printf_i+0x40>)
 800cf80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf84:	0800cfdd 	.word	0x0800cfdd
 800cf88:	0800cff1 	.word	0x0800cff1
 800cf8c:	0800cf6d 	.word	0x0800cf6d
 800cf90:	0800cf6d 	.word	0x0800cf6d
 800cf94:	0800cf6d 	.word	0x0800cf6d
 800cf98:	0800cf6d 	.word	0x0800cf6d
 800cf9c:	0800cff1 	.word	0x0800cff1
 800cfa0:	0800cf6d 	.word	0x0800cf6d
 800cfa4:	0800cf6d 	.word	0x0800cf6d
 800cfa8:	0800cf6d 	.word	0x0800cf6d
 800cfac:	0800cf6d 	.word	0x0800cf6d
 800cfb0:	0800d0f1 	.word	0x0800d0f1
 800cfb4:	0800d01b 	.word	0x0800d01b
 800cfb8:	0800d0ab 	.word	0x0800d0ab
 800cfbc:	0800cf6d 	.word	0x0800cf6d
 800cfc0:	0800cf6d 	.word	0x0800cf6d
 800cfc4:	0800d113 	.word	0x0800d113
 800cfc8:	0800cf6d 	.word	0x0800cf6d
 800cfcc:	0800d01b 	.word	0x0800d01b
 800cfd0:	0800cf6d 	.word	0x0800cf6d
 800cfd4:	0800cf6d 	.word	0x0800cf6d
 800cfd8:	0800d0b3 	.word	0x0800d0b3
 800cfdc:	6833      	ldr	r3, [r6, #0]
 800cfde:	1d1a      	adds	r2, r3, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6032      	str	r2, [r6, #0]
 800cfe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cfe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cfec:	2301      	movs	r3, #1
 800cfee:	e09d      	b.n	800d12c <_printf_i+0x1e8>
 800cff0:	6833      	ldr	r3, [r6, #0]
 800cff2:	6820      	ldr	r0, [r4, #0]
 800cff4:	1d19      	adds	r1, r3, #4
 800cff6:	6031      	str	r1, [r6, #0]
 800cff8:	0606      	lsls	r6, r0, #24
 800cffa:	d501      	bpl.n	800d000 <_printf_i+0xbc>
 800cffc:	681d      	ldr	r5, [r3, #0]
 800cffe:	e003      	b.n	800d008 <_printf_i+0xc4>
 800d000:	0645      	lsls	r5, r0, #25
 800d002:	d5fb      	bpl.n	800cffc <_printf_i+0xb8>
 800d004:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d008:	2d00      	cmp	r5, #0
 800d00a:	da03      	bge.n	800d014 <_printf_i+0xd0>
 800d00c:	232d      	movs	r3, #45	@ 0x2d
 800d00e:	426d      	negs	r5, r5
 800d010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d014:	4859      	ldr	r0, [pc, #356]	@ (800d17c <_printf_i+0x238>)
 800d016:	230a      	movs	r3, #10
 800d018:	e011      	b.n	800d03e <_printf_i+0xfa>
 800d01a:	6821      	ldr	r1, [r4, #0]
 800d01c:	6833      	ldr	r3, [r6, #0]
 800d01e:	0608      	lsls	r0, r1, #24
 800d020:	f853 5b04 	ldr.w	r5, [r3], #4
 800d024:	d402      	bmi.n	800d02c <_printf_i+0xe8>
 800d026:	0649      	lsls	r1, r1, #25
 800d028:	bf48      	it	mi
 800d02a:	b2ad      	uxthmi	r5, r5
 800d02c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d02e:	4853      	ldr	r0, [pc, #332]	@ (800d17c <_printf_i+0x238>)
 800d030:	6033      	str	r3, [r6, #0]
 800d032:	bf14      	ite	ne
 800d034:	230a      	movne	r3, #10
 800d036:	2308      	moveq	r3, #8
 800d038:	2100      	movs	r1, #0
 800d03a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d03e:	6866      	ldr	r6, [r4, #4]
 800d040:	60a6      	str	r6, [r4, #8]
 800d042:	2e00      	cmp	r6, #0
 800d044:	bfa2      	ittt	ge
 800d046:	6821      	ldrge	r1, [r4, #0]
 800d048:	f021 0104 	bicge.w	r1, r1, #4
 800d04c:	6021      	strge	r1, [r4, #0]
 800d04e:	b90d      	cbnz	r5, 800d054 <_printf_i+0x110>
 800d050:	2e00      	cmp	r6, #0
 800d052:	d04b      	beq.n	800d0ec <_printf_i+0x1a8>
 800d054:	4616      	mov	r6, r2
 800d056:	fbb5 f1f3 	udiv	r1, r5, r3
 800d05a:	fb03 5711 	mls	r7, r3, r1, r5
 800d05e:	5dc7      	ldrb	r7, [r0, r7]
 800d060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d064:	462f      	mov	r7, r5
 800d066:	42bb      	cmp	r3, r7
 800d068:	460d      	mov	r5, r1
 800d06a:	d9f4      	bls.n	800d056 <_printf_i+0x112>
 800d06c:	2b08      	cmp	r3, #8
 800d06e:	d10b      	bne.n	800d088 <_printf_i+0x144>
 800d070:	6823      	ldr	r3, [r4, #0]
 800d072:	07df      	lsls	r7, r3, #31
 800d074:	d508      	bpl.n	800d088 <_printf_i+0x144>
 800d076:	6923      	ldr	r3, [r4, #16]
 800d078:	6861      	ldr	r1, [r4, #4]
 800d07a:	4299      	cmp	r1, r3
 800d07c:	bfde      	ittt	le
 800d07e:	2330      	movle	r3, #48	@ 0x30
 800d080:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d084:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d088:	1b92      	subs	r2, r2, r6
 800d08a:	6122      	str	r2, [r4, #16]
 800d08c:	f8cd a000 	str.w	sl, [sp]
 800d090:	464b      	mov	r3, r9
 800d092:	aa03      	add	r2, sp, #12
 800d094:	4621      	mov	r1, r4
 800d096:	4640      	mov	r0, r8
 800d098:	f7ff fee6 	bl	800ce68 <_printf_common>
 800d09c:	3001      	adds	r0, #1
 800d09e:	d14a      	bne.n	800d136 <_printf_i+0x1f2>
 800d0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a4:	b004      	add	sp, #16
 800d0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	f043 0320 	orr.w	r3, r3, #32
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	4833      	ldr	r0, [pc, #204]	@ (800d180 <_printf_i+0x23c>)
 800d0b4:	2778      	movs	r7, #120	@ 0x78
 800d0b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	6831      	ldr	r1, [r6, #0]
 800d0be:	061f      	lsls	r7, r3, #24
 800d0c0:	f851 5b04 	ldr.w	r5, [r1], #4
 800d0c4:	d402      	bmi.n	800d0cc <_printf_i+0x188>
 800d0c6:	065f      	lsls	r7, r3, #25
 800d0c8:	bf48      	it	mi
 800d0ca:	b2ad      	uxthmi	r5, r5
 800d0cc:	6031      	str	r1, [r6, #0]
 800d0ce:	07d9      	lsls	r1, r3, #31
 800d0d0:	bf44      	itt	mi
 800d0d2:	f043 0320 	orrmi.w	r3, r3, #32
 800d0d6:	6023      	strmi	r3, [r4, #0]
 800d0d8:	b11d      	cbz	r5, 800d0e2 <_printf_i+0x19e>
 800d0da:	2310      	movs	r3, #16
 800d0dc:	e7ac      	b.n	800d038 <_printf_i+0xf4>
 800d0de:	4827      	ldr	r0, [pc, #156]	@ (800d17c <_printf_i+0x238>)
 800d0e0:	e7e9      	b.n	800d0b6 <_printf_i+0x172>
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	f023 0320 	bic.w	r3, r3, #32
 800d0e8:	6023      	str	r3, [r4, #0]
 800d0ea:	e7f6      	b.n	800d0da <_printf_i+0x196>
 800d0ec:	4616      	mov	r6, r2
 800d0ee:	e7bd      	b.n	800d06c <_printf_i+0x128>
 800d0f0:	6833      	ldr	r3, [r6, #0]
 800d0f2:	6825      	ldr	r5, [r4, #0]
 800d0f4:	6961      	ldr	r1, [r4, #20]
 800d0f6:	1d18      	adds	r0, r3, #4
 800d0f8:	6030      	str	r0, [r6, #0]
 800d0fa:	062e      	lsls	r6, r5, #24
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	d501      	bpl.n	800d104 <_printf_i+0x1c0>
 800d100:	6019      	str	r1, [r3, #0]
 800d102:	e002      	b.n	800d10a <_printf_i+0x1c6>
 800d104:	0668      	lsls	r0, r5, #25
 800d106:	d5fb      	bpl.n	800d100 <_printf_i+0x1bc>
 800d108:	8019      	strh	r1, [r3, #0]
 800d10a:	2300      	movs	r3, #0
 800d10c:	6123      	str	r3, [r4, #16]
 800d10e:	4616      	mov	r6, r2
 800d110:	e7bc      	b.n	800d08c <_printf_i+0x148>
 800d112:	6833      	ldr	r3, [r6, #0]
 800d114:	1d1a      	adds	r2, r3, #4
 800d116:	6032      	str	r2, [r6, #0]
 800d118:	681e      	ldr	r6, [r3, #0]
 800d11a:	6862      	ldr	r2, [r4, #4]
 800d11c:	2100      	movs	r1, #0
 800d11e:	4630      	mov	r0, r6
 800d120:	f7f3 f856 	bl	80001d0 <memchr>
 800d124:	b108      	cbz	r0, 800d12a <_printf_i+0x1e6>
 800d126:	1b80      	subs	r0, r0, r6
 800d128:	6060      	str	r0, [r4, #4]
 800d12a:	6863      	ldr	r3, [r4, #4]
 800d12c:	6123      	str	r3, [r4, #16]
 800d12e:	2300      	movs	r3, #0
 800d130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d134:	e7aa      	b.n	800d08c <_printf_i+0x148>
 800d136:	6923      	ldr	r3, [r4, #16]
 800d138:	4632      	mov	r2, r6
 800d13a:	4649      	mov	r1, r9
 800d13c:	4640      	mov	r0, r8
 800d13e:	47d0      	blx	sl
 800d140:	3001      	adds	r0, #1
 800d142:	d0ad      	beq.n	800d0a0 <_printf_i+0x15c>
 800d144:	6823      	ldr	r3, [r4, #0]
 800d146:	079b      	lsls	r3, r3, #30
 800d148:	d413      	bmi.n	800d172 <_printf_i+0x22e>
 800d14a:	68e0      	ldr	r0, [r4, #12]
 800d14c:	9b03      	ldr	r3, [sp, #12]
 800d14e:	4298      	cmp	r0, r3
 800d150:	bfb8      	it	lt
 800d152:	4618      	movlt	r0, r3
 800d154:	e7a6      	b.n	800d0a4 <_printf_i+0x160>
 800d156:	2301      	movs	r3, #1
 800d158:	4632      	mov	r2, r6
 800d15a:	4649      	mov	r1, r9
 800d15c:	4640      	mov	r0, r8
 800d15e:	47d0      	blx	sl
 800d160:	3001      	adds	r0, #1
 800d162:	d09d      	beq.n	800d0a0 <_printf_i+0x15c>
 800d164:	3501      	adds	r5, #1
 800d166:	68e3      	ldr	r3, [r4, #12]
 800d168:	9903      	ldr	r1, [sp, #12]
 800d16a:	1a5b      	subs	r3, r3, r1
 800d16c:	42ab      	cmp	r3, r5
 800d16e:	dcf2      	bgt.n	800d156 <_printf_i+0x212>
 800d170:	e7eb      	b.n	800d14a <_printf_i+0x206>
 800d172:	2500      	movs	r5, #0
 800d174:	f104 0619 	add.w	r6, r4, #25
 800d178:	e7f5      	b.n	800d166 <_printf_i+0x222>
 800d17a:	bf00      	nop
 800d17c:	08011ec3 	.word	0x08011ec3
 800d180:	08011ed4 	.word	0x08011ed4

0800d184 <_scanf_float>:
 800d184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d188:	b087      	sub	sp, #28
 800d18a:	4617      	mov	r7, r2
 800d18c:	9303      	str	r3, [sp, #12]
 800d18e:	688b      	ldr	r3, [r1, #8]
 800d190:	1e5a      	subs	r2, r3, #1
 800d192:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d196:	bf81      	itttt	hi
 800d198:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d19c:	eb03 0b05 	addhi.w	fp, r3, r5
 800d1a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d1a4:	608b      	strhi	r3, [r1, #8]
 800d1a6:	680b      	ldr	r3, [r1, #0]
 800d1a8:	460a      	mov	r2, r1
 800d1aa:	f04f 0500 	mov.w	r5, #0
 800d1ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d1b2:	f842 3b1c 	str.w	r3, [r2], #28
 800d1b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	460c      	mov	r4, r1
 800d1be:	bf98      	it	ls
 800d1c0:	f04f 0b00 	movls.w	fp, #0
 800d1c4:	9201      	str	r2, [sp, #4]
 800d1c6:	4616      	mov	r6, r2
 800d1c8:	46aa      	mov	sl, r5
 800d1ca:	46a9      	mov	r9, r5
 800d1cc:	9502      	str	r5, [sp, #8]
 800d1ce:	68a2      	ldr	r2, [r4, #8]
 800d1d0:	b152      	cbz	r2, 800d1e8 <_scanf_float+0x64>
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	2b4e      	cmp	r3, #78	@ 0x4e
 800d1d8:	d864      	bhi.n	800d2a4 <_scanf_float+0x120>
 800d1da:	2b40      	cmp	r3, #64	@ 0x40
 800d1dc:	d83c      	bhi.n	800d258 <_scanf_float+0xd4>
 800d1de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d1e2:	b2c8      	uxtb	r0, r1
 800d1e4:	280e      	cmp	r0, #14
 800d1e6:	d93a      	bls.n	800d25e <_scanf_float+0xda>
 800d1e8:	f1b9 0f00 	cmp.w	r9, #0
 800d1ec:	d003      	beq.n	800d1f6 <_scanf_float+0x72>
 800d1ee:	6823      	ldr	r3, [r4, #0]
 800d1f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1fa:	f1ba 0f01 	cmp.w	sl, #1
 800d1fe:	f200 8117 	bhi.w	800d430 <_scanf_float+0x2ac>
 800d202:	9b01      	ldr	r3, [sp, #4]
 800d204:	429e      	cmp	r6, r3
 800d206:	f200 8108 	bhi.w	800d41a <_scanf_float+0x296>
 800d20a:	2001      	movs	r0, #1
 800d20c:	b007      	add	sp, #28
 800d20e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d212:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d216:	2a0d      	cmp	r2, #13
 800d218:	d8e6      	bhi.n	800d1e8 <_scanf_float+0x64>
 800d21a:	a101      	add	r1, pc, #4	@ (adr r1, 800d220 <_scanf_float+0x9c>)
 800d21c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d220:	0800d367 	.word	0x0800d367
 800d224:	0800d1e9 	.word	0x0800d1e9
 800d228:	0800d1e9 	.word	0x0800d1e9
 800d22c:	0800d1e9 	.word	0x0800d1e9
 800d230:	0800d3c7 	.word	0x0800d3c7
 800d234:	0800d39f 	.word	0x0800d39f
 800d238:	0800d1e9 	.word	0x0800d1e9
 800d23c:	0800d1e9 	.word	0x0800d1e9
 800d240:	0800d375 	.word	0x0800d375
 800d244:	0800d1e9 	.word	0x0800d1e9
 800d248:	0800d1e9 	.word	0x0800d1e9
 800d24c:	0800d1e9 	.word	0x0800d1e9
 800d250:	0800d1e9 	.word	0x0800d1e9
 800d254:	0800d32d 	.word	0x0800d32d
 800d258:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d25c:	e7db      	b.n	800d216 <_scanf_float+0x92>
 800d25e:	290e      	cmp	r1, #14
 800d260:	d8c2      	bhi.n	800d1e8 <_scanf_float+0x64>
 800d262:	a001      	add	r0, pc, #4	@ (adr r0, 800d268 <_scanf_float+0xe4>)
 800d264:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d268:	0800d31d 	.word	0x0800d31d
 800d26c:	0800d1e9 	.word	0x0800d1e9
 800d270:	0800d31d 	.word	0x0800d31d
 800d274:	0800d3b3 	.word	0x0800d3b3
 800d278:	0800d1e9 	.word	0x0800d1e9
 800d27c:	0800d2c5 	.word	0x0800d2c5
 800d280:	0800d303 	.word	0x0800d303
 800d284:	0800d303 	.word	0x0800d303
 800d288:	0800d303 	.word	0x0800d303
 800d28c:	0800d303 	.word	0x0800d303
 800d290:	0800d303 	.word	0x0800d303
 800d294:	0800d303 	.word	0x0800d303
 800d298:	0800d303 	.word	0x0800d303
 800d29c:	0800d303 	.word	0x0800d303
 800d2a0:	0800d303 	.word	0x0800d303
 800d2a4:	2b6e      	cmp	r3, #110	@ 0x6e
 800d2a6:	d809      	bhi.n	800d2bc <_scanf_float+0x138>
 800d2a8:	2b60      	cmp	r3, #96	@ 0x60
 800d2aa:	d8b2      	bhi.n	800d212 <_scanf_float+0x8e>
 800d2ac:	2b54      	cmp	r3, #84	@ 0x54
 800d2ae:	d07b      	beq.n	800d3a8 <_scanf_float+0x224>
 800d2b0:	2b59      	cmp	r3, #89	@ 0x59
 800d2b2:	d199      	bne.n	800d1e8 <_scanf_float+0x64>
 800d2b4:	2d07      	cmp	r5, #7
 800d2b6:	d197      	bne.n	800d1e8 <_scanf_float+0x64>
 800d2b8:	2508      	movs	r5, #8
 800d2ba:	e02c      	b.n	800d316 <_scanf_float+0x192>
 800d2bc:	2b74      	cmp	r3, #116	@ 0x74
 800d2be:	d073      	beq.n	800d3a8 <_scanf_float+0x224>
 800d2c0:	2b79      	cmp	r3, #121	@ 0x79
 800d2c2:	e7f6      	b.n	800d2b2 <_scanf_float+0x12e>
 800d2c4:	6821      	ldr	r1, [r4, #0]
 800d2c6:	05c8      	lsls	r0, r1, #23
 800d2c8:	d51b      	bpl.n	800d302 <_scanf_float+0x17e>
 800d2ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d2ce:	6021      	str	r1, [r4, #0]
 800d2d0:	f109 0901 	add.w	r9, r9, #1
 800d2d4:	f1bb 0f00 	cmp.w	fp, #0
 800d2d8:	d003      	beq.n	800d2e2 <_scanf_float+0x15e>
 800d2da:	3201      	adds	r2, #1
 800d2dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d2e0:	60a2      	str	r2, [r4, #8]
 800d2e2:	68a3      	ldr	r3, [r4, #8]
 800d2e4:	3b01      	subs	r3, #1
 800d2e6:	60a3      	str	r3, [r4, #8]
 800d2e8:	6923      	ldr	r3, [r4, #16]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	6123      	str	r3, [r4, #16]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	607b      	str	r3, [r7, #4]
 800d2f6:	f340 8087 	ble.w	800d408 <_scanf_float+0x284>
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	603b      	str	r3, [r7, #0]
 800d300:	e765      	b.n	800d1ce <_scanf_float+0x4a>
 800d302:	eb1a 0105 	adds.w	r1, sl, r5
 800d306:	f47f af6f 	bne.w	800d1e8 <_scanf_float+0x64>
 800d30a:	6822      	ldr	r2, [r4, #0]
 800d30c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d310:	6022      	str	r2, [r4, #0]
 800d312:	460d      	mov	r5, r1
 800d314:	468a      	mov	sl, r1
 800d316:	f806 3b01 	strb.w	r3, [r6], #1
 800d31a:	e7e2      	b.n	800d2e2 <_scanf_float+0x15e>
 800d31c:	6822      	ldr	r2, [r4, #0]
 800d31e:	0610      	lsls	r0, r2, #24
 800d320:	f57f af62 	bpl.w	800d1e8 <_scanf_float+0x64>
 800d324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d328:	6022      	str	r2, [r4, #0]
 800d32a:	e7f4      	b.n	800d316 <_scanf_float+0x192>
 800d32c:	f1ba 0f00 	cmp.w	sl, #0
 800d330:	d10e      	bne.n	800d350 <_scanf_float+0x1cc>
 800d332:	f1b9 0f00 	cmp.w	r9, #0
 800d336:	d10e      	bne.n	800d356 <_scanf_float+0x1d2>
 800d338:	6822      	ldr	r2, [r4, #0]
 800d33a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d33e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d342:	d108      	bne.n	800d356 <_scanf_float+0x1d2>
 800d344:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d348:	6022      	str	r2, [r4, #0]
 800d34a:	f04f 0a01 	mov.w	sl, #1
 800d34e:	e7e2      	b.n	800d316 <_scanf_float+0x192>
 800d350:	f1ba 0f02 	cmp.w	sl, #2
 800d354:	d055      	beq.n	800d402 <_scanf_float+0x27e>
 800d356:	2d01      	cmp	r5, #1
 800d358:	d002      	beq.n	800d360 <_scanf_float+0x1dc>
 800d35a:	2d04      	cmp	r5, #4
 800d35c:	f47f af44 	bne.w	800d1e8 <_scanf_float+0x64>
 800d360:	3501      	adds	r5, #1
 800d362:	b2ed      	uxtb	r5, r5
 800d364:	e7d7      	b.n	800d316 <_scanf_float+0x192>
 800d366:	f1ba 0f01 	cmp.w	sl, #1
 800d36a:	f47f af3d 	bne.w	800d1e8 <_scanf_float+0x64>
 800d36e:	f04f 0a02 	mov.w	sl, #2
 800d372:	e7d0      	b.n	800d316 <_scanf_float+0x192>
 800d374:	b97d      	cbnz	r5, 800d396 <_scanf_float+0x212>
 800d376:	f1b9 0f00 	cmp.w	r9, #0
 800d37a:	f47f af38 	bne.w	800d1ee <_scanf_float+0x6a>
 800d37e:	6822      	ldr	r2, [r4, #0]
 800d380:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d384:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d388:	f040 8108 	bne.w	800d59c <_scanf_float+0x418>
 800d38c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d390:	6022      	str	r2, [r4, #0]
 800d392:	2501      	movs	r5, #1
 800d394:	e7bf      	b.n	800d316 <_scanf_float+0x192>
 800d396:	2d03      	cmp	r5, #3
 800d398:	d0e2      	beq.n	800d360 <_scanf_float+0x1dc>
 800d39a:	2d05      	cmp	r5, #5
 800d39c:	e7de      	b.n	800d35c <_scanf_float+0x1d8>
 800d39e:	2d02      	cmp	r5, #2
 800d3a0:	f47f af22 	bne.w	800d1e8 <_scanf_float+0x64>
 800d3a4:	2503      	movs	r5, #3
 800d3a6:	e7b6      	b.n	800d316 <_scanf_float+0x192>
 800d3a8:	2d06      	cmp	r5, #6
 800d3aa:	f47f af1d 	bne.w	800d1e8 <_scanf_float+0x64>
 800d3ae:	2507      	movs	r5, #7
 800d3b0:	e7b1      	b.n	800d316 <_scanf_float+0x192>
 800d3b2:	6822      	ldr	r2, [r4, #0]
 800d3b4:	0591      	lsls	r1, r2, #22
 800d3b6:	f57f af17 	bpl.w	800d1e8 <_scanf_float+0x64>
 800d3ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d3be:	6022      	str	r2, [r4, #0]
 800d3c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3c4:	e7a7      	b.n	800d316 <_scanf_float+0x192>
 800d3c6:	6822      	ldr	r2, [r4, #0]
 800d3c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d3cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d3d0:	d006      	beq.n	800d3e0 <_scanf_float+0x25c>
 800d3d2:	0550      	lsls	r0, r2, #21
 800d3d4:	f57f af08 	bpl.w	800d1e8 <_scanf_float+0x64>
 800d3d8:	f1b9 0f00 	cmp.w	r9, #0
 800d3dc:	f000 80de 	beq.w	800d59c <_scanf_float+0x418>
 800d3e0:	0591      	lsls	r1, r2, #22
 800d3e2:	bf58      	it	pl
 800d3e4:	9902      	ldrpl	r1, [sp, #8]
 800d3e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d3ea:	bf58      	it	pl
 800d3ec:	eba9 0101 	subpl.w	r1, r9, r1
 800d3f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d3f4:	bf58      	it	pl
 800d3f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d3fa:	6022      	str	r2, [r4, #0]
 800d3fc:	f04f 0900 	mov.w	r9, #0
 800d400:	e789      	b.n	800d316 <_scanf_float+0x192>
 800d402:	f04f 0a03 	mov.w	sl, #3
 800d406:	e786      	b.n	800d316 <_scanf_float+0x192>
 800d408:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d40c:	4639      	mov	r1, r7
 800d40e:	4640      	mov	r0, r8
 800d410:	4798      	blx	r3
 800d412:	2800      	cmp	r0, #0
 800d414:	f43f aedb 	beq.w	800d1ce <_scanf_float+0x4a>
 800d418:	e6e6      	b.n	800d1e8 <_scanf_float+0x64>
 800d41a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d41e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d422:	463a      	mov	r2, r7
 800d424:	4640      	mov	r0, r8
 800d426:	4798      	blx	r3
 800d428:	6923      	ldr	r3, [r4, #16]
 800d42a:	3b01      	subs	r3, #1
 800d42c:	6123      	str	r3, [r4, #16]
 800d42e:	e6e8      	b.n	800d202 <_scanf_float+0x7e>
 800d430:	1e6b      	subs	r3, r5, #1
 800d432:	2b06      	cmp	r3, #6
 800d434:	d824      	bhi.n	800d480 <_scanf_float+0x2fc>
 800d436:	2d02      	cmp	r5, #2
 800d438:	d836      	bhi.n	800d4a8 <_scanf_float+0x324>
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	429e      	cmp	r6, r3
 800d43e:	f67f aee4 	bls.w	800d20a <_scanf_float+0x86>
 800d442:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d44a:	463a      	mov	r2, r7
 800d44c:	4640      	mov	r0, r8
 800d44e:	4798      	blx	r3
 800d450:	6923      	ldr	r3, [r4, #16]
 800d452:	3b01      	subs	r3, #1
 800d454:	6123      	str	r3, [r4, #16]
 800d456:	e7f0      	b.n	800d43a <_scanf_float+0x2b6>
 800d458:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d45c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d460:	463a      	mov	r2, r7
 800d462:	4640      	mov	r0, r8
 800d464:	4798      	blx	r3
 800d466:	6923      	ldr	r3, [r4, #16]
 800d468:	3b01      	subs	r3, #1
 800d46a:	6123      	str	r3, [r4, #16]
 800d46c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d470:	fa5f fa8a 	uxtb.w	sl, sl
 800d474:	f1ba 0f02 	cmp.w	sl, #2
 800d478:	d1ee      	bne.n	800d458 <_scanf_float+0x2d4>
 800d47a:	3d03      	subs	r5, #3
 800d47c:	b2ed      	uxtb	r5, r5
 800d47e:	1b76      	subs	r6, r6, r5
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	05da      	lsls	r2, r3, #23
 800d484:	d530      	bpl.n	800d4e8 <_scanf_float+0x364>
 800d486:	055b      	lsls	r3, r3, #21
 800d488:	d511      	bpl.n	800d4ae <_scanf_float+0x32a>
 800d48a:	9b01      	ldr	r3, [sp, #4]
 800d48c:	429e      	cmp	r6, r3
 800d48e:	f67f aebc 	bls.w	800d20a <_scanf_float+0x86>
 800d492:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d496:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d49a:	463a      	mov	r2, r7
 800d49c:	4640      	mov	r0, r8
 800d49e:	4798      	blx	r3
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	6123      	str	r3, [r4, #16]
 800d4a6:	e7f0      	b.n	800d48a <_scanf_float+0x306>
 800d4a8:	46aa      	mov	sl, r5
 800d4aa:	46b3      	mov	fp, r6
 800d4ac:	e7de      	b.n	800d46c <_scanf_float+0x2e8>
 800d4ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d4b2:	6923      	ldr	r3, [r4, #16]
 800d4b4:	2965      	cmp	r1, #101	@ 0x65
 800d4b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d4ba:	f106 35ff 	add.w	r5, r6, #4294967295
 800d4be:	6123      	str	r3, [r4, #16]
 800d4c0:	d00c      	beq.n	800d4dc <_scanf_float+0x358>
 800d4c2:	2945      	cmp	r1, #69	@ 0x45
 800d4c4:	d00a      	beq.n	800d4dc <_scanf_float+0x358>
 800d4c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d4ca:	463a      	mov	r2, r7
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	4798      	blx	r3
 800d4d0:	6923      	ldr	r3, [r4, #16]
 800d4d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	1eb5      	subs	r5, r6, #2
 800d4da:	6123      	str	r3, [r4, #16]
 800d4dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d4e0:	463a      	mov	r2, r7
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	4798      	blx	r3
 800d4e6:	462e      	mov	r6, r5
 800d4e8:	6822      	ldr	r2, [r4, #0]
 800d4ea:	f012 0210 	ands.w	r2, r2, #16
 800d4ee:	d001      	beq.n	800d4f4 <_scanf_float+0x370>
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	e68b      	b.n	800d20c <_scanf_float+0x88>
 800d4f4:	7032      	strb	r2, [r6, #0]
 800d4f6:	6823      	ldr	r3, [r4, #0]
 800d4f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d4fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d500:	d11c      	bne.n	800d53c <_scanf_float+0x3b8>
 800d502:	9b02      	ldr	r3, [sp, #8]
 800d504:	454b      	cmp	r3, r9
 800d506:	eba3 0209 	sub.w	r2, r3, r9
 800d50a:	d123      	bne.n	800d554 <_scanf_float+0x3d0>
 800d50c:	9901      	ldr	r1, [sp, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	4640      	mov	r0, r8
 800d512:	f7ff f975 	bl	800c800 <_strtod_r>
 800d516:	9b03      	ldr	r3, [sp, #12]
 800d518:	6821      	ldr	r1, [r4, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f011 0f02 	tst.w	r1, #2
 800d520:	ec57 6b10 	vmov	r6, r7, d0
 800d524:	f103 0204 	add.w	r2, r3, #4
 800d528:	d01f      	beq.n	800d56a <_scanf_float+0x3e6>
 800d52a:	9903      	ldr	r1, [sp, #12]
 800d52c:	600a      	str	r2, [r1, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	e9c3 6700 	strd	r6, r7, [r3]
 800d534:	68e3      	ldr	r3, [r4, #12]
 800d536:	3301      	adds	r3, #1
 800d538:	60e3      	str	r3, [r4, #12]
 800d53a:	e7d9      	b.n	800d4f0 <_scanf_float+0x36c>
 800d53c:	9b04      	ldr	r3, [sp, #16]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d0e4      	beq.n	800d50c <_scanf_float+0x388>
 800d542:	9905      	ldr	r1, [sp, #20]
 800d544:	230a      	movs	r3, #10
 800d546:	3101      	adds	r1, #1
 800d548:	4640      	mov	r0, r8
 800d54a:	f002 fa8f 	bl	800fa6c <_strtol_r>
 800d54e:	9b04      	ldr	r3, [sp, #16]
 800d550:	9e05      	ldr	r6, [sp, #20]
 800d552:	1ac2      	subs	r2, r0, r3
 800d554:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d558:	429e      	cmp	r6, r3
 800d55a:	bf28      	it	cs
 800d55c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d560:	4910      	ldr	r1, [pc, #64]	@ (800d5a4 <_scanf_float+0x420>)
 800d562:	4630      	mov	r0, r6
 800d564:	f000 f954 	bl	800d810 <siprintf>
 800d568:	e7d0      	b.n	800d50c <_scanf_float+0x388>
 800d56a:	f011 0f04 	tst.w	r1, #4
 800d56e:	9903      	ldr	r1, [sp, #12]
 800d570:	600a      	str	r2, [r1, #0]
 800d572:	d1dc      	bne.n	800d52e <_scanf_float+0x3aa>
 800d574:	681d      	ldr	r5, [r3, #0]
 800d576:	4632      	mov	r2, r6
 800d578:	463b      	mov	r3, r7
 800d57a:	4630      	mov	r0, r6
 800d57c:	4639      	mov	r1, r7
 800d57e:	f7f3 fad5 	bl	8000b2c <__aeabi_dcmpun>
 800d582:	b128      	cbz	r0, 800d590 <_scanf_float+0x40c>
 800d584:	4808      	ldr	r0, [pc, #32]	@ (800d5a8 <_scanf_float+0x424>)
 800d586:	f000 fb5b 	bl	800dc40 <nanf>
 800d58a:	ed85 0a00 	vstr	s0, [r5]
 800d58e:	e7d1      	b.n	800d534 <_scanf_float+0x3b0>
 800d590:	4630      	mov	r0, r6
 800d592:	4639      	mov	r1, r7
 800d594:	f7f3 fb28 	bl	8000be8 <__aeabi_d2f>
 800d598:	6028      	str	r0, [r5, #0]
 800d59a:	e7cb      	b.n	800d534 <_scanf_float+0x3b0>
 800d59c:	f04f 0900 	mov.w	r9, #0
 800d5a0:	e629      	b.n	800d1f6 <_scanf_float+0x72>
 800d5a2:	bf00      	nop
 800d5a4:	08011ee5 	.word	0x08011ee5
 800d5a8:	08012184 	.word	0x08012184

0800d5ac <std>:
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	b510      	push	{r4, lr}
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5ba:	6083      	str	r3, [r0, #8]
 800d5bc:	8181      	strh	r1, [r0, #12]
 800d5be:	6643      	str	r3, [r0, #100]	@ 0x64
 800d5c0:	81c2      	strh	r2, [r0, #14]
 800d5c2:	6183      	str	r3, [r0, #24]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	2208      	movs	r2, #8
 800d5c8:	305c      	adds	r0, #92	@ 0x5c
 800d5ca:	f000 fa19 	bl	800da00 <memset>
 800d5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d604 <std+0x58>)
 800d5d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d608 <std+0x5c>)
 800d5d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d60c <std+0x60>)
 800d5d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d5da:	4b0d      	ldr	r3, [pc, #52]	@ (800d610 <std+0x64>)
 800d5dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d5de:	4b0d      	ldr	r3, [pc, #52]	@ (800d614 <std+0x68>)
 800d5e0:	6224      	str	r4, [r4, #32]
 800d5e2:	429c      	cmp	r4, r3
 800d5e4:	d006      	beq.n	800d5f4 <std+0x48>
 800d5e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d5ea:	4294      	cmp	r4, r2
 800d5ec:	d002      	beq.n	800d5f4 <std+0x48>
 800d5ee:	33d0      	adds	r3, #208	@ 0xd0
 800d5f0:	429c      	cmp	r4, r3
 800d5f2:	d105      	bne.n	800d600 <std+0x54>
 800d5f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5fc:	f7f9 bb28 	b.w	8006c50 <__retarget_lock_init_recursive>
 800d600:	bd10      	pop	{r4, pc}
 800d602:	bf00      	nop
 800d604:	0800d851 	.word	0x0800d851
 800d608:	0800d873 	.word	0x0800d873
 800d60c:	0800d8ab 	.word	0x0800d8ab
 800d610:	0800d8cf 	.word	0x0800d8cf
 800d614:	200048c0 	.word	0x200048c0

0800d618 <stdio_exit_handler>:
 800d618:	4a02      	ldr	r2, [pc, #8]	@ (800d624 <stdio_exit_handler+0xc>)
 800d61a:	4903      	ldr	r1, [pc, #12]	@ (800d628 <stdio_exit_handler+0x10>)
 800d61c:	4803      	ldr	r0, [pc, #12]	@ (800d62c <stdio_exit_handler+0x14>)
 800d61e:	f000 b869 	b.w	800d6f4 <_fwalk_sglue>
 800d622:	bf00      	nop
 800d624:	20000038 	.word	0x20000038
 800d628:	080100c5 	.word	0x080100c5
 800d62c:	200001b4 	.word	0x200001b4

0800d630 <cleanup_stdio>:
 800d630:	6841      	ldr	r1, [r0, #4]
 800d632:	4b0c      	ldr	r3, [pc, #48]	@ (800d664 <cleanup_stdio+0x34>)
 800d634:	4299      	cmp	r1, r3
 800d636:	b510      	push	{r4, lr}
 800d638:	4604      	mov	r4, r0
 800d63a:	d001      	beq.n	800d640 <cleanup_stdio+0x10>
 800d63c:	f002 fd42 	bl	80100c4 <_fflush_r>
 800d640:	68a1      	ldr	r1, [r4, #8]
 800d642:	4b09      	ldr	r3, [pc, #36]	@ (800d668 <cleanup_stdio+0x38>)
 800d644:	4299      	cmp	r1, r3
 800d646:	d002      	beq.n	800d64e <cleanup_stdio+0x1e>
 800d648:	4620      	mov	r0, r4
 800d64a:	f002 fd3b 	bl	80100c4 <_fflush_r>
 800d64e:	68e1      	ldr	r1, [r4, #12]
 800d650:	4b06      	ldr	r3, [pc, #24]	@ (800d66c <cleanup_stdio+0x3c>)
 800d652:	4299      	cmp	r1, r3
 800d654:	d004      	beq.n	800d660 <cleanup_stdio+0x30>
 800d656:	4620      	mov	r0, r4
 800d658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d65c:	f002 bd32 	b.w	80100c4 <_fflush_r>
 800d660:	bd10      	pop	{r4, pc}
 800d662:	bf00      	nop
 800d664:	200048c0 	.word	0x200048c0
 800d668:	20004928 	.word	0x20004928
 800d66c:	20004990 	.word	0x20004990

0800d670 <global_stdio_init.part.0>:
 800d670:	b510      	push	{r4, lr}
 800d672:	4b0b      	ldr	r3, [pc, #44]	@ (800d6a0 <global_stdio_init.part.0+0x30>)
 800d674:	4c0b      	ldr	r4, [pc, #44]	@ (800d6a4 <global_stdio_init.part.0+0x34>)
 800d676:	4a0c      	ldr	r2, [pc, #48]	@ (800d6a8 <global_stdio_init.part.0+0x38>)
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	4620      	mov	r0, r4
 800d67c:	2200      	movs	r2, #0
 800d67e:	2104      	movs	r1, #4
 800d680:	f7ff ff94 	bl	800d5ac <std>
 800d684:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d688:	2201      	movs	r2, #1
 800d68a:	2109      	movs	r1, #9
 800d68c:	f7ff ff8e 	bl	800d5ac <std>
 800d690:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d694:	2202      	movs	r2, #2
 800d696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d69a:	2112      	movs	r1, #18
 800d69c:	f7ff bf86 	b.w	800d5ac <std>
 800d6a0:	200049f8 	.word	0x200049f8
 800d6a4:	200048c0 	.word	0x200048c0
 800d6a8:	0800d619 	.word	0x0800d619

0800d6ac <__sfp_lock_acquire>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	@ (800d6b4 <__sfp_lock_acquire+0x8>)
 800d6ae:	f7f9 baeb 	b.w	8006c88 <__retarget_lock_acquire_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	20000748 	.word	0x20000748

0800d6b8 <__sfp_lock_release>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	@ (800d6c0 <__sfp_lock_release+0x8>)
 800d6ba:	f7f9 bb01 	b.w	8006cc0 <__retarget_lock_release_recursive>
 800d6be:	bf00      	nop
 800d6c0:	20000748 	.word	0x20000748

0800d6c4 <__sinit>:
 800d6c4:	b510      	push	{r4, lr}
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	f7ff fff0 	bl	800d6ac <__sfp_lock_acquire>
 800d6cc:	6a23      	ldr	r3, [r4, #32]
 800d6ce:	b11b      	cbz	r3, 800d6d8 <__sinit+0x14>
 800d6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d4:	f7ff bff0 	b.w	800d6b8 <__sfp_lock_release>
 800d6d8:	4b04      	ldr	r3, [pc, #16]	@ (800d6ec <__sinit+0x28>)
 800d6da:	6223      	str	r3, [r4, #32]
 800d6dc:	4b04      	ldr	r3, [pc, #16]	@ (800d6f0 <__sinit+0x2c>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1f5      	bne.n	800d6d0 <__sinit+0xc>
 800d6e4:	f7ff ffc4 	bl	800d670 <global_stdio_init.part.0>
 800d6e8:	e7f2      	b.n	800d6d0 <__sinit+0xc>
 800d6ea:	bf00      	nop
 800d6ec:	0800d631 	.word	0x0800d631
 800d6f0:	200049f8 	.word	0x200049f8

0800d6f4 <_fwalk_sglue>:
 800d6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f8:	4607      	mov	r7, r0
 800d6fa:	4688      	mov	r8, r1
 800d6fc:	4614      	mov	r4, r2
 800d6fe:	2600      	movs	r6, #0
 800d700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d704:	f1b9 0901 	subs.w	r9, r9, #1
 800d708:	d505      	bpl.n	800d716 <_fwalk_sglue+0x22>
 800d70a:	6824      	ldr	r4, [r4, #0]
 800d70c:	2c00      	cmp	r4, #0
 800d70e:	d1f7      	bne.n	800d700 <_fwalk_sglue+0xc>
 800d710:	4630      	mov	r0, r6
 800d712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d716:	89ab      	ldrh	r3, [r5, #12]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d907      	bls.n	800d72c <_fwalk_sglue+0x38>
 800d71c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d720:	3301      	adds	r3, #1
 800d722:	d003      	beq.n	800d72c <_fwalk_sglue+0x38>
 800d724:	4629      	mov	r1, r5
 800d726:	4638      	mov	r0, r7
 800d728:	47c0      	blx	r8
 800d72a:	4306      	orrs	r6, r0
 800d72c:	3568      	adds	r5, #104	@ 0x68
 800d72e:	e7e9      	b.n	800d704 <_fwalk_sglue+0x10>

0800d730 <iprintf>:
 800d730:	b40f      	push	{r0, r1, r2, r3}
 800d732:	b507      	push	{r0, r1, r2, lr}
 800d734:	4906      	ldr	r1, [pc, #24]	@ (800d750 <iprintf+0x20>)
 800d736:	ab04      	add	r3, sp, #16
 800d738:	6808      	ldr	r0, [r1, #0]
 800d73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d73e:	6881      	ldr	r1, [r0, #8]
 800d740:	9301      	str	r3, [sp, #4]
 800d742:	f002 fb23 	bl	800fd8c <_vfiprintf_r>
 800d746:	b003      	add	sp, #12
 800d748:	f85d eb04 	ldr.w	lr, [sp], #4
 800d74c:	b004      	add	sp, #16
 800d74e:	4770      	bx	lr
 800d750:	200001b0 	.word	0x200001b0

0800d754 <_puts_r>:
 800d754:	6a03      	ldr	r3, [r0, #32]
 800d756:	b570      	push	{r4, r5, r6, lr}
 800d758:	6884      	ldr	r4, [r0, #8]
 800d75a:	4605      	mov	r5, r0
 800d75c:	460e      	mov	r6, r1
 800d75e:	b90b      	cbnz	r3, 800d764 <_puts_r+0x10>
 800d760:	f7ff ffb0 	bl	800d6c4 <__sinit>
 800d764:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d766:	07db      	lsls	r3, r3, #31
 800d768:	d405      	bmi.n	800d776 <_puts_r+0x22>
 800d76a:	89a3      	ldrh	r3, [r4, #12]
 800d76c:	0598      	lsls	r0, r3, #22
 800d76e:	d402      	bmi.n	800d776 <_puts_r+0x22>
 800d770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d772:	f7f9 fa89 	bl	8006c88 <__retarget_lock_acquire_recursive>
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	0719      	lsls	r1, r3, #28
 800d77a:	d502      	bpl.n	800d782 <_puts_r+0x2e>
 800d77c:	6923      	ldr	r3, [r4, #16]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d135      	bne.n	800d7ee <_puts_r+0x9a>
 800d782:	4621      	mov	r1, r4
 800d784:	4628      	mov	r0, r5
 800d786:	f000 f8e5 	bl	800d954 <__swsetup_r>
 800d78a:	b380      	cbz	r0, 800d7ee <_puts_r+0x9a>
 800d78c:	f04f 35ff 	mov.w	r5, #4294967295
 800d790:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d792:	07da      	lsls	r2, r3, #31
 800d794:	d405      	bmi.n	800d7a2 <_puts_r+0x4e>
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	059b      	lsls	r3, r3, #22
 800d79a:	d402      	bmi.n	800d7a2 <_puts_r+0x4e>
 800d79c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d79e:	f7f9 fa8f 	bl	8006cc0 <__retarget_lock_release_recursive>
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	bd70      	pop	{r4, r5, r6, pc}
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	da04      	bge.n	800d7b4 <_puts_r+0x60>
 800d7aa:	69a2      	ldr	r2, [r4, #24]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	dc17      	bgt.n	800d7e0 <_puts_r+0x8c>
 800d7b0:	290a      	cmp	r1, #10
 800d7b2:	d015      	beq.n	800d7e0 <_puts_r+0x8c>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	1c5a      	adds	r2, r3, #1
 800d7b8:	6022      	str	r2, [r4, #0]
 800d7ba:	7019      	strb	r1, [r3, #0]
 800d7bc:	68a3      	ldr	r3, [r4, #8]
 800d7be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	60a3      	str	r3, [r4, #8]
 800d7c6:	2900      	cmp	r1, #0
 800d7c8:	d1ed      	bne.n	800d7a6 <_puts_r+0x52>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	da11      	bge.n	800d7f2 <_puts_r+0x9e>
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	210a      	movs	r1, #10
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f000 f87f 	bl	800d8d6 <__swbuf_r>
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d0d7      	beq.n	800d78c <_puts_r+0x38>
 800d7dc:	250a      	movs	r5, #10
 800d7de:	e7d7      	b.n	800d790 <_puts_r+0x3c>
 800d7e0:	4622      	mov	r2, r4
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f000 f877 	bl	800d8d6 <__swbuf_r>
 800d7e8:	3001      	adds	r0, #1
 800d7ea:	d1e7      	bne.n	800d7bc <_puts_r+0x68>
 800d7ec:	e7ce      	b.n	800d78c <_puts_r+0x38>
 800d7ee:	3e01      	subs	r6, #1
 800d7f0:	e7e4      	b.n	800d7bc <_puts_r+0x68>
 800d7f2:	6823      	ldr	r3, [r4, #0]
 800d7f4:	1c5a      	adds	r2, r3, #1
 800d7f6:	6022      	str	r2, [r4, #0]
 800d7f8:	220a      	movs	r2, #10
 800d7fa:	701a      	strb	r2, [r3, #0]
 800d7fc:	e7ee      	b.n	800d7dc <_puts_r+0x88>
	...

0800d800 <puts>:
 800d800:	4b02      	ldr	r3, [pc, #8]	@ (800d80c <puts+0xc>)
 800d802:	4601      	mov	r1, r0
 800d804:	6818      	ldr	r0, [r3, #0]
 800d806:	f7ff bfa5 	b.w	800d754 <_puts_r>
 800d80a:	bf00      	nop
 800d80c:	200001b0 	.word	0x200001b0

0800d810 <siprintf>:
 800d810:	b40e      	push	{r1, r2, r3}
 800d812:	b500      	push	{lr}
 800d814:	b09c      	sub	sp, #112	@ 0x70
 800d816:	ab1d      	add	r3, sp, #116	@ 0x74
 800d818:	9002      	str	r0, [sp, #8]
 800d81a:	9006      	str	r0, [sp, #24]
 800d81c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d820:	4809      	ldr	r0, [pc, #36]	@ (800d848 <siprintf+0x38>)
 800d822:	9107      	str	r1, [sp, #28]
 800d824:	9104      	str	r1, [sp, #16]
 800d826:	4909      	ldr	r1, [pc, #36]	@ (800d84c <siprintf+0x3c>)
 800d828:	f853 2b04 	ldr.w	r2, [r3], #4
 800d82c:	9105      	str	r1, [sp, #20]
 800d82e:	6800      	ldr	r0, [r0, #0]
 800d830:	9301      	str	r3, [sp, #4]
 800d832:	a902      	add	r1, sp, #8
 800d834:	f002 f984 	bl	800fb40 <_svfiprintf_r>
 800d838:	9b02      	ldr	r3, [sp, #8]
 800d83a:	2200      	movs	r2, #0
 800d83c:	701a      	strb	r2, [r3, #0]
 800d83e:	b01c      	add	sp, #112	@ 0x70
 800d840:	f85d eb04 	ldr.w	lr, [sp], #4
 800d844:	b003      	add	sp, #12
 800d846:	4770      	bx	lr
 800d848:	200001b0 	.word	0x200001b0
 800d84c:	ffff0208 	.word	0xffff0208

0800d850 <__sread>:
 800d850:	b510      	push	{r4, lr}
 800d852:	460c      	mov	r4, r1
 800d854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d858:	f000 f97e 	bl	800db58 <_read_r>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	bfab      	itete	ge
 800d860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d862:	89a3      	ldrhlt	r3, [r4, #12]
 800d864:	181b      	addge	r3, r3, r0
 800d866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d86a:	bfac      	ite	ge
 800d86c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d86e:	81a3      	strhlt	r3, [r4, #12]
 800d870:	bd10      	pop	{r4, pc}

0800d872 <__swrite>:
 800d872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d876:	461f      	mov	r7, r3
 800d878:	898b      	ldrh	r3, [r1, #12]
 800d87a:	05db      	lsls	r3, r3, #23
 800d87c:	4605      	mov	r5, r0
 800d87e:	460c      	mov	r4, r1
 800d880:	4616      	mov	r6, r2
 800d882:	d505      	bpl.n	800d890 <__swrite+0x1e>
 800d884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d888:	2302      	movs	r3, #2
 800d88a:	2200      	movs	r2, #0
 800d88c:	f000 f952 	bl	800db34 <_lseek_r>
 800d890:	89a3      	ldrh	r3, [r4, #12]
 800d892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d896:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d89a:	81a3      	strh	r3, [r4, #12]
 800d89c:	4632      	mov	r2, r6
 800d89e:	463b      	mov	r3, r7
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a6:	f000 b979 	b.w	800db9c <_write_r>

0800d8aa <__sseek>:
 800d8aa:	b510      	push	{r4, lr}
 800d8ac:	460c      	mov	r4, r1
 800d8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b2:	f000 f93f 	bl	800db34 <_lseek_r>
 800d8b6:	1c43      	adds	r3, r0, #1
 800d8b8:	89a3      	ldrh	r3, [r4, #12]
 800d8ba:	bf15      	itete	ne
 800d8bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d8be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d8c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d8c6:	81a3      	strheq	r3, [r4, #12]
 800d8c8:	bf18      	it	ne
 800d8ca:	81a3      	strhne	r3, [r4, #12]
 800d8cc:	bd10      	pop	{r4, pc}

0800d8ce <__sclose>:
 800d8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d2:	f000 b8c9 	b.w	800da68 <_close_r>

0800d8d6 <__swbuf_r>:
 800d8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d8:	460e      	mov	r6, r1
 800d8da:	4614      	mov	r4, r2
 800d8dc:	4605      	mov	r5, r0
 800d8de:	b118      	cbz	r0, 800d8e8 <__swbuf_r+0x12>
 800d8e0:	6a03      	ldr	r3, [r0, #32]
 800d8e2:	b90b      	cbnz	r3, 800d8e8 <__swbuf_r+0x12>
 800d8e4:	f7ff feee 	bl	800d6c4 <__sinit>
 800d8e8:	69a3      	ldr	r3, [r4, #24]
 800d8ea:	60a3      	str	r3, [r4, #8]
 800d8ec:	89a3      	ldrh	r3, [r4, #12]
 800d8ee:	071a      	lsls	r2, r3, #28
 800d8f0:	d501      	bpl.n	800d8f6 <__swbuf_r+0x20>
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	b943      	cbnz	r3, 800d908 <__swbuf_r+0x32>
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f000 f82b 	bl	800d954 <__swsetup_r>
 800d8fe:	b118      	cbz	r0, 800d908 <__swbuf_r+0x32>
 800d900:	f04f 37ff 	mov.w	r7, #4294967295
 800d904:	4638      	mov	r0, r7
 800d906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	6922      	ldr	r2, [r4, #16]
 800d90c:	1a98      	subs	r0, r3, r2
 800d90e:	6963      	ldr	r3, [r4, #20]
 800d910:	b2f6      	uxtb	r6, r6
 800d912:	4283      	cmp	r3, r0
 800d914:	4637      	mov	r7, r6
 800d916:	dc05      	bgt.n	800d924 <__swbuf_r+0x4e>
 800d918:	4621      	mov	r1, r4
 800d91a:	4628      	mov	r0, r5
 800d91c:	f002 fbd2 	bl	80100c4 <_fflush_r>
 800d920:	2800      	cmp	r0, #0
 800d922:	d1ed      	bne.n	800d900 <__swbuf_r+0x2a>
 800d924:	68a3      	ldr	r3, [r4, #8]
 800d926:	3b01      	subs	r3, #1
 800d928:	60a3      	str	r3, [r4, #8]
 800d92a:	6823      	ldr	r3, [r4, #0]
 800d92c:	1c5a      	adds	r2, r3, #1
 800d92e:	6022      	str	r2, [r4, #0]
 800d930:	701e      	strb	r6, [r3, #0]
 800d932:	6962      	ldr	r2, [r4, #20]
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	429a      	cmp	r2, r3
 800d938:	d004      	beq.n	800d944 <__swbuf_r+0x6e>
 800d93a:	89a3      	ldrh	r3, [r4, #12]
 800d93c:	07db      	lsls	r3, r3, #31
 800d93e:	d5e1      	bpl.n	800d904 <__swbuf_r+0x2e>
 800d940:	2e0a      	cmp	r6, #10
 800d942:	d1df      	bne.n	800d904 <__swbuf_r+0x2e>
 800d944:	4621      	mov	r1, r4
 800d946:	4628      	mov	r0, r5
 800d948:	f002 fbbc 	bl	80100c4 <_fflush_r>
 800d94c:	2800      	cmp	r0, #0
 800d94e:	d0d9      	beq.n	800d904 <__swbuf_r+0x2e>
 800d950:	e7d6      	b.n	800d900 <__swbuf_r+0x2a>
	...

0800d954 <__swsetup_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4b29      	ldr	r3, [pc, #164]	@ (800d9fc <__swsetup_r+0xa8>)
 800d958:	4605      	mov	r5, r0
 800d95a:	6818      	ldr	r0, [r3, #0]
 800d95c:	460c      	mov	r4, r1
 800d95e:	b118      	cbz	r0, 800d968 <__swsetup_r+0x14>
 800d960:	6a03      	ldr	r3, [r0, #32]
 800d962:	b90b      	cbnz	r3, 800d968 <__swsetup_r+0x14>
 800d964:	f7ff feae 	bl	800d6c4 <__sinit>
 800d968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96c:	0719      	lsls	r1, r3, #28
 800d96e:	d422      	bmi.n	800d9b6 <__swsetup_r+0x62>
 800d970:	06da      	lsls	r2, r3, #27
 800d972:	d407      	bmi.n	800d984 <__swsetup_r+0x30>
 800d974:	2209      	movs	r2, #9
 800d976:	602a      	str	r2, [r5, #0]
 800d978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d97c:	81a3      	strh	r3, [r4, #12]
 800d97e:	f04f 30ff 	mov.w	r0, #4294967295
 800d982:	e033      	b.n	800d9ec <__swsetup_r+0x98>
 800d984:	0758      	lsls	r0, r3, #29
 800d986:	d512      	bpl.n	800d9ae <__swsetup_r+0x5a>
 800d988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d98a:	b141      	cbz	r1, 800d99e <__swsetup_r+0x4a>
 800d98c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d990:	4299      	cmp	r1, r3
 800d992:	d002      	beq.n	800d99a <__swsetup_r+0x46>
 800d994:	4628      	mov	r0, r5
 800d996:	f000 ffa7 	bl	800e8e8 <_free_r>
 800d99a:	2300      	movs	r3, #0
 800d99c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d9a4:	81a3      	strh	r3, [r4, #12]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	6063      	str	r3, [r4, #4]
 800d9aa:	6923      	ldr	r3, [r4, #16]
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	f043 0308 	orr.w	r3, r3, #8
 800d9b4:	81a3      	strh	r3, [r4, #12]
 800d9b6:	6923      	ldr	r3, [r4, #16]
 800d9b8:	b94b      	cbnz	r3, 800d9ce <__swsetup_r+0x7a>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d9c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9c4:	d003      	beq.n	800d9ce <__swsetup_r+0x7a>
 800d9c6:	4621      	mov	r1, r4
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	f002 fbc9 	bl	8010160 <__smakebuf_r>
 800d9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d2:	f013 0201 	ands.w	r2, r3, #1
 800d9d6:	d00a      	beq.n	800d9ee <__swsetup_r+0x9a>
 800d9d8:	2200      	movs	r2, #0
 800d9da:	60a2      	str	r2, [r4, #8]
 800d9dc:	6962      	ldr	r2, [r4, #20]
 800d9de:	4252      	negs	r2, r2
 800d9e0:	61a2      	str	r2, [r4, #24]
 800d9e2:	6922      	ldr	r2, [r4, #16]
 800d9e4:	b942      	cbnz	r2, 800d9f8 <__swsetup_r+0xa4>
 800d9e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9ea:	d1c5      	bne.n	800d978 <__swsetup_r+0x24>
 800d9ec:	bd38      	pop	{r3, r4, r5, pc}
 800d9ee:	0799      	lsls	r1, r3, #30
 800d9f0:	bf58      	it	pl
 800d9f2:	6962      	ldrpl	r2, [r4, #20]
 800d9f4:	60a2      	str	r2, [r4, #8]
 800d9f6:	e7f4      	b.n	800d9e2 <__swsetup_r+0x8e>
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	e7f7      	b.n	800d9ec <__swsetup_r+0x98>
 800d9fc:	200001b0 	.word	0x200001b0

0800da00 <memset>:
 800da00:	4402      	add	r2, r0
 800da02:	4603      	mov	r3, r0
 800da04:	4293      	cmp	r3, r2
 800da06:	d100      	bne.n	800da0a <memset+0xa>
 800da08:	4770      	bx	lr
 800da0a:	f803 1b01 	strb.w	r1, [r3], #1
 800da0e:	e7f9      	b.n	800da04 <memset+0x4>

0800da10 <strncmp>:
 800da10:	b510      	push	{r4, lr}
 800da12:	b16a      	cbz	r2, 800da30 <strncmp+0x20>
 800da14:	3901      	subs	r1, #1
 800da16:	1884      	adds	r4, r0, r2
 800da18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da20:	429a      	cmp	r2, r3
 800da22:	d103      	bne.n	800da2c <strncmp+0x1c>
 800da24:	42a0      	cmp	r0, r4
 800da26:	d001      	beq.n	800da2c <strncmp+0x1c>
 800da28:	2a00      	cmp	r2, #0
 800da2a:	d1f5      	bne.n	800da18 <strncmp+0x8>
 800da2c:	1ad0      	subs	r0, r2, r3
 800da2e:	bd10      	pop	{r4, pc}
 800da30:	4610      	mov	r0, r2
 800da32:	e7fc      	b.n	800da2e <strncmp+0x1e>

0800da34 <strstr>:
 800da34:	780a      	ldrb	r2, [r1, #0]
 800da36:	b570      	push	{r4, r5, r6, lr}
 800da38:	b96a      	cbnz	r2, 800da56 <strstr+0x22>
 800da3a:	bd70      	pop	{r4, r5, r6, pc}
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d109      	bne.n	800da54 <strstr+0x20>
 800da40:	460c      	mov	r4, r1
 800da42:	4605      	mov	r5, r0
 800da44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d0f6      	beq.n	800da3a <strstr+0x6>
 800da4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800da50:	429e      	cmp	r6, r3
 800da52:	d0f7      	beq.n	800da44 <strstr+0x10>
 800da54:	3001      	adds	r0, #1
 800da56:	7803      	ldrb	r3, [r0, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1ef      	bne.n	800da3c <strstr+0x8>
 800da5c:	4618      	mov	r0, r3
 800da5e:	e7ec      	b.n	800da3a <strstr+0x6>

0800da60 <_localeconv_r>:
 800da60:	4800      	ldr	r0, [pc, #0]	@ (800da64 <_localeconv_r+0x4>)
 800da62:	4770      	bx	lr
 800da64:	20000134 	.word	0x20000134

0800da68 <_close_r>:
 800da68:	b538      	push	{r3, r4, r5, lr}
 800da6a:	4d06      	ldr	r5, [pc, #24]	@ (800da84 <_close_r+0x1c>)
 800da6c:	2300      	movs	r3, #0
 800da6e:	4604      	mov	r4, r0
 800da70:	4608      	mov	r0, r1
 800da72:	602b      	str	r3, [r5, #0]
 800da74:	f7f7 fb7e 	bl	8005174 <_close>
 800da78:	1c43      	adds	r3, r0, #1
 800da7a:	d102      	bne.n	800da82 <_close_r+0x1a>
 800da7c:	682b      	ldr	r3, [r5, #0]
 800da7e:	b103      	cbz	r3, 800da82 <_close_r+0x1a>
 800da80:	6023      	str	r3, [r4, #0]
 800da82:	bd38      	pop	{r3, r4, r5, pc}
 800da84:	200049fc 	.word	0x200049fc

0800da88 <_reclaim_reent>:
 800da88:	4b29      	ldr	r3, [pc, #164]	@ (800db30 <_reclaim_reent+0xa8>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4283      	cmp	r3, r0
 800da8e:	b570      	push	{r4, r5, r6, lr}
 800da90:	4604      	mov	r4, r0
 800da92:	d04b      	beq.n	800db2c <_reclaim_reent+0xa4>
 800da94:	69c3      	ldr	r3, [r0, #28]
 800da96:	b1ab      	cbz	r3, 800dac4 <_reclaim_reent+0x3c>
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	b16b      	cbz	r3, 800dab8 <_reclaim_reent+0x30>
 800da9c:	2500      	movs	r5, #0
 800da9e:	69e3      	ldr	r3, [r4, #28]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	5959      	ldr	r1, [r3, r5]
 800daa4:	2900      	cmp	r1, #0
 800daa6:	d13b      	bne.n	800db20 <_reclaim_reent+0x98>
 800daa8:	3504      	adds	r5, #4
 800daaa:	2d80      	cmp	r5, #128	@ 0x80
 800daac:	d1f7      	bne.n	800da9e <_reclaim_reent+0x16>
 800daae:	69e3      	ldr	r3, [r4, #28]
 800dab0:	4620      	mov	r0, r4
 800dab2:	68d9      	ldr	r1, [r3, #12]
 800dab4:	f000 ff18 	bl	800e8e8 <_free_r>
 800dab8:	69e3      	ldr	r3, [r4, #28]
 800daba:	6819      	ldr	r1, [r3, #0]
 800dabc:	b111      	cbz	r1, 800dac4 <_reclaim_reent+0x3c>
 800dabe:	4620      	mov	r0, r4
 800dac0:	f000 ff12 	bl	800e8e8 <_free_r>
 800dac4:	6961      	ldr	r1, [r4, #20]
 800dac6:	b111      	cbz	r1, 800dace <_reclaim_reent+0x46>
 800dac8:	4620      	mov	r0, r4
 800daca:	f000 ff0d 	bl	800e8e8 <_free_r>
 800dace:	69e1      	ldr	r1, [r4, #28]
 800dad0:	b111      	cbz	r1, 800dad8 <_reclaim_reent+0x50>
 800dad2:	4620      	mov	r0, r4
 800dad4:	f000 ff08 	bl	800e8e8 <_free_r>
 800dad8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dada:	b111      	cbz	r1, 800dae2 <_reclaim_reent+0x5a>
 800dadc:	4620      	mov	r0, r4
 800dade:	f000 ff03 	bl	800e8e8 <_free_r>
 800dae2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dae4:	b111      	cbz	r1, 800daec <_reclaim_reent+0x64>
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 fefe 	bl	800e8e8 <_free_r>
 800daec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800daee:	b111      	cbz	r1, 800daf6 <_reclaim_reent+0x6e>
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fef9 	bl	800e8e8 <_free_r>
 800daf6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800daf8:	b111      	cbz	r1, 800db00 <_reclaim_reent+0x78>
 800dafa:	4620      	mov	r0, r4
 800dafc:	f000 fef4 	bl	800e8e8 <_free_r>
 800db00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800db02:	b111      	cbz	r1, 800db0a <_reclaim_reent+0x82>
 800db04:	4620      	mov	r0, r4
 800db06:	f000 feef 	bl	800e8e8 <_free_r>
 800db0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800db0c:	b111      	cbz	r1, 800db14 <_reclaim_reent+0x8c>
 800db0e:	4620      	mov	r0, r4
 800db10:	f000 feea 	bl	800e8e8 <_free_r>
 800db14:	6a23      	ldr	r3, [r4, #32]
 800db16:	b14b      	cbz	r3, 800db2c <_reclaim_reent+0xa4>
 800db18:	4620      	mov	r0, r4
 800db1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db1e:	4718      	bx	r3
 800db20:	680e      	ldr	r6, [r1, #0]
 800db22:	4620      	mov	r0, r4
 800db24:	f000 fee0 	bl	800e8e8 <_free_r>
 800db28:	4631      	mov	r1, r6
 800db2a:	e7bb      	b.n	800daa4 <_reclaim_reent+0x1c>
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	bf00      	nop
 800db30:	200001b0 	.word	0x200001b0

0800db34 <_lseek_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	4d07      	ldr	r5, [pc, #28]	@ (800db54 <_lseek_r+0x20>)
 800db38:	4604      	mov	r4, r0
 800db3a:	4608      	mov	r0, r1
 800db3c:	4611      	mov	r1, r2
 800db3e:	2200      	movs	r2, #0
 800db40:	602a      	str	r2, [r5, #0]
 800db42:	461a      	mov	r2, r3
 800db44:	f7f7 fb22 	bl	800518c <_lseek>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	d102      	bne.n	800db52 <_lseek_r+0x1e>
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	b103      	cbz	r3, 800db52 <_lseek_r+0x1e>
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	bd38      	pop	{r3, r4, r5, pc}
 800db54:	200049fc 	.word	0x200049fc

0800db58 <_read_r>:
 800db58:	b538      	push	{r3, r4, r5, lr}
 800db5a:	4d07      	ldr	r5, [pc, #28]	@ (800db78 <_read_r+0x20>)
 800db5c:	4604      	mov	r4, r0
 800db5e:	4608      	mov	r0, r1
 800db60:	4611      	mov	r1, r2
 800db62:	2200      	movs	r2, #0
 800db64:	602a      	str	r2, [r5, #0]
 800db66:	461a      	mov	r2, r3
 800db68:	f7f7 fcb4 	bl	80054d4 <_read>
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	d102      	bne.n	800db76 <_read_r+0x1e>
 800db70:	682b      	ldr	r3, [r5, #0]
 800db72:	b103      	cbz	r3, 800db76 <_read_r+0x1e>
 800db74:	6023      	str	r3, [r4, #0]
 800db76:	bd38      	pop	{r3, r4, r5, pc}
 800db78:	200049fc 	.word	0x200049fc

0800db7c <_sbrk_r>:
 800db7c:	b538      	push	{r3, r4, r5, lr}
 800db7e:	4d06      	ldr	r5, [pc, #24]	@ (800db98 <_sbrk_r+0x1c>)
 800db80:	2300      	movs	r3, #0
 800db82:	4604      	mov	r4, r0
 800db84:	4608      	mov	r0, r1
 800db86:	602b      	str	r3, [r5, #0]
 800db88:	f7f7 fb02 	bl	8005190 <_sbrk>
 800db8c:	1c43      	adds	r3, r0, #1
 800db8e:	d102      	bne.n	800db96 <_sbrk_r+0x1a>
 800db90:	682b      	ldr	r3, [r5, #0]
 800db92:	b103      	cbz	r3, 800db96 <_sbrk_r+0x1a>
 800db94:	6023      	str	r3, [r4, #0]
 800db96:	bd38      	pop	{r3, r4, r5, pc}
 800db98:	200049fc 	.word	0x200049fc

0800db9c <_write_r>:
 800db9c:	b538      	push	{r3, r4, r5, lr}
 800db9e:	4d07      	ldr	r5, [pc, #28]	@ (800dbbc <_write_r+0x20>)
 800dba0:	4604      	mov	r4, r0
 800dba2:	4608      	mov	r0, r1
 800dba4:	4611      	mov	r1, r2
 800dba6:	2200      	movs	r2, #0
 800dba8:	602a      	str	r2, [r5, #0]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	f7f4 fc06 	bl	80023bc <_write>
 800dbb0:	1c43      	adds	r3, r0, #1
 800dbb2:	d102      	bne.n	800dbba <_write_r+0x1e>
 800dbb4:	682b      	ldr	r3, [r5, #0]
 800dbb6:	b103      	cbz	r3, 800dbba <_write_r+0x1e>
 800dbb8:	6023      	str	r3, [r4, #0]
 800dbba:	bd38      	pop	{r3, r4, r5, pc}
 800dbbc:	200049fc 	.word	0x200049fc

0800dbc0 <__errno>:
 800dbc0:	4b01      	ldr	r3, [pc, #4]	@ (800dbc8 <__errno+0x8>)
 800dbc2:	6818      	ldr	r0, [r3, #0]
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop
 800dbc8:	200001b0 	.word	0x200001b0

0800dbcc <__libc_init_array>:
 800dbcc:	b570      	push	{r4, r5, r6, lr}
 800dbce:	4d0d      	ldr	r5, [pc, #52]	@ (800dc04 <__libc_init_array+0x38>)
 800dbd0:	4c0d      	ldr	r4, [pc, #52]	@ (800dc08 <__libc_init_array+0x3c>)
 800dbd2:	1b64      	subs	r4, r4, r5
 800dbd4:	10a4      	asrs	r4, r4, #2
 800dbd6:	2600      	movs	r6, #0
 800dbd8:	42a6      	cmp	r6, r4
 800dbda:	d109      	bne.n	800dbf0 <__libc_init_array+0x24>
 800dbdc:	4d0b      	ldr	r5, [pc, #44]	@ (800dc0c <__libc_init_array+0x40>)
 800dbde:	4c0c      	ldr	r4, [pc, #48]	@ (800dc10 <__libc_init_array+0x44>)
 800dbe0:	f002 fbfc 	bl	80103dc <_init>
 800dbe4:	1b64      	subs	r4, r4, r5
 800dbe6:	10a4      	asrs	r4, r4, #2
 800dbe8:	2600      	movs	r6, #0
 800dbea:	42a6      	cmp	r6, r4
 800dbec:	d105      	bne.n	800dbfa <__libc_init_array+0x2e>
 800dbee:	bd70      	pop	{r4, r5, r6, pc}
 800dbf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbf4:	4798      	blx	r3
 800dbf6:	3601      	adds	r6, #1
 800dbf8:	e7ee      	b.n	800dbd8 <__libc_init_array+0xc>
 800dbfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbfe:	4798      	blx	r3
 800dc00:	3601      	adds	r6, #1
 800dc02:	e7f2      	b.n	800dbea <__libc_init_array+0x1e>
 800dc04:	08012190 	.word	0x08012190
 800dc08:	08012190 	.word	0x08012190
 800dc0c:	08012190 	.word	0x08012190
 800dc10:	08012194 	.word	0x08012194

0800dc14 <memcpy>:
 800dc14:	440a      	add	r2, r1
 800dc16:	4291      	cmp	r1, r2
 800dc18:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc1c:	d100      	bne.n	800dc20 <memcpy+0xc>
 800dc1e:	4770      	bx	lr
 800dc20:	b510      	push	{r4, lr}
 800dc22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc2a:	4291      	cmp	r1, r2
 800dc2c:	d1f9      	bne.n	800dc22 <memcpy+0xe>
 800dc2e:	bd10      	pop	{r4, pc}

0800dc30 <nan>:
 800dc30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dc38 <nan+0x8>
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	00000000 	.word	0x00000000
 800dc3c:	7ff80000 	.word	0x7ff80000

0800dc40 <nanf>:
 800dc40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dc48 <nanf+0x8>
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop
 800dc48:	7fc00000 	.word	0x7fc00000

0800dc4c <quorem>:
 800dc4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc50:	6903      	ldr	r3, [r0, #16]
 800dc52:	690c      	ldr	r4, [r1, #16]
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	4607      	mov	r7, r0
 800dc58:	db7e      	blt.n	800dd58 <quorem+0x10c>
 800dc5a:	3c01      	subs	r4, #1
 800dc5c:	f101 0814 	add.w	r8, r1, #20
 800dc60:	00a3      	lsls	r3, r4, #2
 800dc62:	f100 0514 	add.w	r5, r0, #20
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc76:	3301      	adds	r3, #1
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc7e:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc82:	d32e      	bcc.n	800dce2 <quorem+0x96>
 800dc84:	f04f 0a00 	mov.w	sl, #0
 800dc88:	46c4      	mov	ip, r8
 800dc8a:	46ae      	mov	lr, r5
 800dc8c:	46d3      	mov	fp, sl
 800dc8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc92:	b298      	uxth	r0, r3
 800dc94:	fb06 a000 	mla	r0, r6, r0, sl
 800dc98:	0c02      	lsrs	r2, r0, #16
 800dc9a:	0c1b      	lsrs	r3, r3, #16
 800dc9c:	fb06 2303 	mla	r3, r6, r3, r2
 800dca0:	f8de 2000 	ldr.w	r2, [lr]
 800dca4:	b280      	uxth	r0, r0
 800dca6:	b292      	uxth	r2, r2
 800dca8:	1a12      	subs	r2, r2, r0
 800dcaa:	445a      	add	r2, fp
 800dcac:	f8de 0000 	ldr.w	r0, [lr]
 800dcb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dcba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dcbe:	b292      	uxth	r2, r2
 800dcc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dcc4:	45e1      	cmp	r9, ip
 800dcc6:	f84e 2b04 	str.w	r2, [lr], #4
 800dcca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dcce:	d2de      	bcs.n	800dc8e <quorem+0x42>
 800dcd0:	9b00      	ldr	r3, [sp, #0]
 800dcd2:	58eb      	ldr	r3, [r5, r3]
 800dcd4:	b92b      	cbnz	r3, 800dce2 <quorem+0x96>
 800dcd6:	9b01      	ldr	r3, [sp, #4]
 800dcd8:	3b04      	subs	r3, #4
 800dcda:	429d      	cmp	r5, r3
 800dcdc:	461a      	mov	r2, r3
 800dcde:	d32f      	bcc.n	800dd40 <quorem+0xf4>
 800dce0:	613c      	str	r4, [r7, #16]
 800dce2:	4638      	mov	r0, r7
 800dce4:	f001 fc5a 	bl	800f59c <__mcmp>
 800dce8:	2800      	cmp	r0, #0
 800dcea:	db25      	blt.n	800dd38 <quorem+0xec>
 800dcec:	4629      	mov	r1, r5
 800dcee:	2000      	movs	r0, #0
 800dcf0:	f858 2b04 	ldr.w	r2, [r8], #4
 800dcf4:	f8d1 c000 	ldr.w	ip, [r1]
 800dcf8:	fa1f fe82 	uxth.w	lr, r2
 800dcfc:	fa1f f38c 	uxth.w	r3, ip
 800dd00:	eba3 030e 	sub.w	r3, r3, lr
 800dd04:	4403      	add	r3, r0
 800dd06:	0c12      	lsrs	r2, r2, #16
 800dd08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dd0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd16:	45c1      	cmp	r9, r8
 800dd18:	f841 3b04 	str.w	r3, [r1], #4
 800dd1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd20:	d2e6      	bcs.n	800dcf0 <quorem+0xa4>
 800dd22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd2a:	b922      	cbnz	r2, 800dd36 <quorem+0xea>
 800dd2c:	3b04      	subs	r3, #4
 800dd2e:	429d      	cmp	r5, r3
 800dd30:	461a      	mov	r2, r3
 800dd32:	d30b      	bcc.n	800dd4c <quorem+0x100>
 800dd34:	613c      	str	r4, [r7, #16]
 800dd36:	3601      	adds	r6, #1
 800dd38:	4630      	mov	r0, r6
 800dd3a:	b003      	add	sp, #12
 800dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd40:	6812      	ldr	r2, [r2, #0]
 800dd42:	3b04      	subs	r3, #4
 800dd44:	2a00      	cmp	r2, #0
 800dd46:	d1cb      	bne.n	800dce0 <quorem+0x94>
 800dd48:	3c01      	subs	r4, #1
 800dd4a:	e7c6      	b.n	800dcda <quorem+0x8e>
 800dd4c:	6812      	ldr	r2, [r2, #0]
 800dd4e:	3b04      	subs	r3, #4
 800dd50:	2a00      	cmp	r2, #0
 800dd52:	d1ef      	bne.n	800dd34 <quorem+0xe8>
 800dd54:	3c01      	subs	r4, #1
 800dd56:	e7ea      	b.n	800dd2e <quorem+0xe2>
 800dd58:	2000      	movs	r0, #0
 800dd5a:	e7ee      	b.n	800dd3a <quorem+0xee>
 800dd5c:	0000      	movs	r0, r0
	...

0800dd60 <_dtoa_r>:
 800dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd64:	69c7      	ldr	r7, [r0, #28]
 800dd66:	b099      	sub	sp, #100	@ 0x64
 800dd68:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd6c:	ec55 4b10 	vmov	r4, r5, d0
 800dd70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd72:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd74:	4683      	mov	fp, r0
 800dd76:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd7a:	b97f      	cbnz	r7, 800dd9c <_dtoa_r+0x3c>
 800dd7c:	2010      	movs	r0, #16
 800dd7e:	f7fd fe87 	bl	800ba90 <malloc>
 800dd82:	4602      	mov	r2, r0
 800dd84:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd88:	b920      	cbnz	r0, 800dd94 <_dtoa_r+0x34>
 800dd8a:	4ba7      	ldr	r3, [pc, #668]	@ (800e028 <_dtoa_r+0x2c8>)
 800dd8c:	21ef      	movs	r1, #239	@ 0xef
 800dd8e:	48a7      	ldr	r0, [pc, #668]	@ (800e02c <_dtoa_r+0x2cc>)
 800dd90:	f002 fa5e 	bl	8010250 <__assert_func>
 800dd94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd98:	6007      	str	r7, [r0, #0]
 800dd9a:	60c7      	str	r7, [r0, #12]
 800dd9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dda0:	6819      	ldr	r1, [r3, #0]
 800dda2:	b159      	cbz	r1, 800ddbc <_dtoa_r+0x5c>
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	604a      	str	r2, [r1, #4]
 800dda8:	2301      	movs	r3, #1
 800ddaa:	4093      	lsls	r3, r2
 800ddac:	608b      	str	r3, [r1, #8]
 800ddae:	4658      	mov	r0, fp
 800ddb0:	f001 f970 	bl	800f094 <_Bfree>
 800ddb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	601a      	str	r2, [r3, #0]
 800ddbc:	1e2b      	subs	r3, r5, #0
 800ddbe:	bfb9      	ittee	lt
 800ddc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ddc4:	9303      	strlt	r3, [sp, #12]
 800ddc6:	2300      	movge	r3, #0
 800ddc8:	6033      	strge	r3, [r6, #0]
 800ddca:	9f03      	ldr	r7, [sp, #12]
 800ddcc:	4b98      	ldr	r3, [pc, #608]	@ (800e030 <_dtoa_r+0x2d0>)
 800ddce:	bfbc      	itt	lt
 800ddd0:	2201      	movlt	r2, #1
 800ddd2:	6032      	strlt	r2, [r6, #0]
 800ddd4:	43bb      	bics	r3, r7
 800ddd6:	d112      	bne.n	800ddfe <_dtoa_r+0x9e>
 800ddd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dde4:	4323      	orrs	r3, r4
 800dde6:	f000 854d 	beq.w	800e884 <_dtoa_r+0xb24>
 800ddea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e044 <_dtoa_r+0x2e4>
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f000 854f 	beq.w	800e894 <_dtoa_r+0xb34>
 800ddf6:	f10a 0303 	add.w	r3, sl, #3
 800ddfa:	f000 bd49 	b.w	800e890 <_dtoa_r+0xb30>
 800ddfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de02:	2200      	movs	r2, #0
 800de04:	ec51 0b17 	vmov	r0, r1, d7
 800de08:	2300      	movs	r3, #0
 800de0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800de0e:	f7f2 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800de12:	4680      	mov	r8, r0
 800de14:	b158      	cbz	r0, 800de2e <_dtoa_r+0xce>
 800de16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800de18:	2301      	movs	r3, #1
 800de1a:	6013      	str	r3, [r2, #0]
 800de1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de1e:	b113      	cbz	r3, 800de26 <_dtoa_r+0xc6>
 800de20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de22:	4b84      	ldr	r3, [pc, #528]	@ (800e034 <_dtoa_r+0x2d4>)
 800de24:	6013      	str	r3, [r2, #0]
 800de26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e048 <_dtoa_r+0x2e8>
 800de2a:	f000 bd33 	b.w	800e894 <_dtoa_r+0xb34>
 800de2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800de32:	aa16      	add	r2, sp, #88	@ 0x58
 800de34:	a917      	add	r1, sp, #92	@ 0x5c
 800de36:	4658      	mov	r0, fp
 800de38:	f001 fcd0 	bl	800f7dc <__d2b>
 800de3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800de40:	4681      	mov	r9, r0
 800de42:	2e00      	cmp	r6, #0
 800de44:	d077      	beq.n	800df36 <_dtoa_r+0x1d6>
 800de46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800de4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800de58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800de5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de60:	4619      	mov	r1, r3
 800de62:	2200      	movs	r2, #0
 800de64:	4b74      	ldr	r3, [pc, #464]	@ (800e038 <_dtoa_r+0x2d8>)
 800de66:	f7f2 fa0f 	bl	8000288 <__aeabi_dsub>
 800de6a:	a369      	add	r3, pc, #420	@ (adr r3, 800e010 <_dtoa_r+0x2b0>)
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	f7f2 fbc2 	bl	80005f8 <__aeabi_dmul>
 800de74:	a368      	add	r3, pc, #416	@ (adr r3, 800e018 <_dtoa_r+0x2b8>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	f7f2 fa07 	bl	800028c <__adddf3>
 800de7e:	4604      	mov	r4, r0
 800de80:	4630      	mov	r0, r6
 800de82:	460d      	mov	r5, r1
 800de84:	f7f2 fb4e 	bl	8000524 <__aeabi_i2d>
 800de88:	a365      	add	r3, pc, #404	@ (adr r3, 800e020 <_dtoa_r+0x2c0>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	f7f2 fbb3 	bl	80005f8 <__aeabi_dmul>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4620      	mov	r0, r4
 800de98:	4629      	mov	r1, r5
 800de9a:	f7f2 f9f7 	bl	800028c <__adddf3>
 800de9e:	4604      	mov	r4, r0
 800dea0:	460d      	mov	r5, r1
 800dea2:	f7f2 fe59 	bl	8000b58 <__aeabi_d2iz>
 800dea6:	2200      	movs	r2, #0
 800dea8:	4607      	mov	r7, r0
 800deaa:	2300      	movs	r3, #0
 800deac:	4620      	mov	r0, r4
 800deae:	4629      	mov	r1, r5
 800deb0:	f7f2 fe14 	bl	8000adc <__aeabi_dcmplt>
 800deb4:	b140      	cbz	r0, 800dec8 <_dtoa_r+0x168>
 800deb6:	4638      	mov	r0, r7
 800deb8:	f7f2 fb34 	bl	8000524 <__aeabi_i2d>
 800debc:	4622      	mov	r2, r4
 800debe:	462b      	mov	r3, r5
 800dec0:	f7f2 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 800dec4:	b900      	cbnz	r0, 800dec8 <_dtoa_r+0x168>
 800dec6:	3f01      	subs	r7, #1
 800dec8:	2f16      	cmp	r7, #22
 800deca:	d851      	bhi.n	800df70 <_dtoa_r+0x210>
 800decc:	4b5b      	ldr	r3, [pc, #364]	@ (800e03c <_dtoa_r+0x2dc>)
 800dece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800deda:	f7f2 fdff 	bl	8000adc <__aeabi_dcmplt>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d048      	beq.n	800df74 <_dtoa_r+0x214>
 800dee2:	3f01      	subs	r7, #1
 800dee4:	2300      	movs	r3, #0
 800dee6:	9312      	str	r3, [sp, #72]	@ 0x48
 800dee8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800deea:	1b9b      	subs	r3, r3, r6
 800deec:	1e5a      	subs	r2, r3, #1
 800deee:	bf44      	itt	mi
 800def0:	f1c3 0801 	rsbmi	r8, r3, #1
 800def4:	2300      	movmi	r3, #0
 800def6:	9208      	str	r2, [sp, #32]
 800def8:	bf54      	ite	pl
 800defa:	f04f 0800 	movpl.w	r8, #0
 800defe:	9308      	strmi	r3, [sp, #32]
 800df00:	2f00      	cmp	r7, #0
 800df02:	db39      	blt.n	800df78 <_dtoa_r+0x218>
 800df04:	9b08      	ldr	r3, [sp, #32]
 800df06:	970f      	str	r7, [sp, #60]	@ 0x3c
 800df08:	443b      	add	r3, r7
 800df0a:	9308      	str	r3, [sp, #32]
 800df0c:	2300      	movs	r3, #0
 800df0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800df10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df12:	2b09      	cmp	r3, #9
 800df14:	d864      	bhi.n	800dfe0 <_dtoa_r+0x280>
 800df16:	2b05      	cmp	r3, #5
 800df18:	bfc4      	itt	gt
 800df1a:	3b04      	subgt	r3, #4
 800df1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800df1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df20:	f1a3 0302 	sub.w	r3, r3, #2
 800df24:	bfcc      	ite	gt
 800df26:	2400      	movgt	r4, #0
 800df28:	2401      	movle	r4, #1
 800df2a:	2b03      	cmp	r3, #3
 800df2c:	d863      	bhi.n	800dff6 <_dtoa_r+0x296>
 800df2e:	e8df f003 	tbb	[pc, r3]
 800df32:	372a      	.short	0x372a
 800df34:	5535      	.short	0x5535
 800df36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800df3a:	441e      	add	r6, r3
 800df3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800df40:	2b20      	cmp	r3, #32
 800df42:	bfc1      	itttt	gt
 800df44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800df48:	409f      	lslgt	r7, r3
 800df4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800df4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800df52:	bfd6      	itet	le
 800df54:	f1c3 0320 	rsble	r3, r3, #32
 800df58:	ea47 0003 	orrgt.w	r0, r7, r3
 800df5c:	fa04 f003 	lslle.w	r0, r4, r3
 800df60:	f7f2 fad0 	bl	8000504 <__aeabi_ui2d>
 800df64:	2201      	movs	r2, #1
 800df66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df6a:	3e01      	subs	r6, #1
 800df6c:	9214      	str	r2, [sp, #80]	@ 0x50
 800df6e:	e777      	b.n	800de60 <_dtoa_r+0x100>
 800df70:	2301      	movs	r3, #1
 800df72:	e7b8      	b.n	800dee6 <_dtoa_r+0x186>
 800df74:	9012      	str	r0, [sp, #72]	@ 0x48
 800df76:	e7b7      	b.n	800dee8 <_dtoa_r+0x188>
 800df78:	427b      	negs	r3, r7
 800df7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df7c:	2300      	movs	r3, #0
 800df7e:	eba8 0807 	sub.w	r8, r8, r7
 800df82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df84:	e7c4      	b.n	800df10 <_dtoa_r+0x1b0>
 800df86:	2300      	movs	r3, #0
 800df88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	dc35      	bgt.n	800dffc <_dtoa_r+0x29c>
 800df90:	2301      	movs	r3, #1
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	9307      	str	r3, [sp, #28]
 800df96:	461a      	mov	r2, r3
 800df98:	920e      	str	r2, [sp, #56]	@ 0x38
 800df9a:	e00b      	b.n	800dfb4 <_dtoa_r+0x254>
 800df9c:	2301      	movs	r3, #1
 800df9e:	e7f3      	b.n	800df88 <_dtoa_r+0x228>
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfa6:	18fb      	adds	r3, r7, r3
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	9307      	str	r3, [sp, #28]
 800dfb0:	bfb8      	it	lt
 800dfb2:	2301      	movlt	r3, #1
 800dfb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dfb8:	2100      	movs	r1, #0
 800dfba:	2204      	movs	r2, #4
 800dfbc:	f102 0514 	add.w	r5, r2, #20
 800dfc0:	429d      	cmp	r5, r3
 800dfc2:	d91f      	bls.n	800e004 <_dtoa_r+0x2a4>
 800dfc4:	6041      	str	r1, [r0, #4]
 800dfc6:	4658      	mov	r0, fp
 800dfc8:	f001 f824 	bl	800f014 <_Balloc>
 800dfcc:	4682      	mov	sl, r0
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d13c      	bne.n	800e04c <_dtoa_r+0x2ec>
 800dfd2:	4b1b      	ldr	r3, [pc, #108]	@ (800e040 <_dtoa_r+0x2e0>)
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	f240 11af 	movw	r1, #431	@ 0x1af
 800dfda:	e6d8      	b.n	800dd8e <_dtoa_r+0x2e>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e7e0      	b.n	800dfa2 <_dtoa_r+0x242>
 800dfe0:	2401      	movs	r4, #1
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	9307      	str	r3, [sp, #28]
 800dff0:	2200      	movs	r2, #0
 800dff2:	2312      	movs	r3, #18
 800dff4:	e7d0      	b.n	800df98 <_dtoa_r+0x238>
 800dff6:	2301      	movs	r3, #1
 800dff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dffa:	e7f5      	b.n	800dfe8 <_dtoa_r+0x288>
 800dffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	9307      	str	r3, [sp, #28]
 800e002:	e7d7      	b.n	800dfb4 <_dtoa_r+0x254>
 800e004:	3101      	adds	r1, #1
 800e006:	0052      	lsls	r2, r2, #1
 800e008:	e7d8      	b.n	800dfbc <_dtoa_r+0x25c>
 800e00a:	bf00      	nop
 800e00c:	f3af 8000 	nop.w
 800e010:	636f4361 	.word	0x636f4361
 800e014:	3fd287a7 	.word	0x3fd287a7
 800e018:	8b60c8b3 	.word	0x8b60c8b3
 800e01c:	3fc68a28 	.word	0x3fc68a28
 800e020:	509f79fb 	.word	0x509f79fb
 800e024:	3fd34413 	.word	0x3fd34413
 800e028:	08011eff 	.word	0x08011eff
 800e02c:	08011f16 	.word	0x08011f16
 800e030:	7ff00000 	.word	0x7ff00000
 800e034:	08011ec2 	.word	0x08011ec2
 800e038:	3ff80000 	.word	0x3ff80000
 800e03c:	08012070 	.word	0x08012070
 800e040:	08011f6e 	.word	0x08011f6e
 800e044:	08011efb 	.word	0x08011efb
 800e048:	08011ec1 	.word	0x08011ec1
 800e04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e050:	6018      	str	r0, [r3, #0]
 800e052:	9b07      	ldr	r3, [sp, #28]
 800e054:	2b0e      	cmp	r3, #14
 800e056:	f200 80a4 	bhi.w	800e1a2 <_dtoa_r+0x442>
 800e05a:	2c00      	cmp	r4, #0
 800e05c:	f000 80a1 	beq.w	800e1a2 <_dtoa_r+0x442>
 800e060:	2f00      	cmp	r7, #0
 800e062:	dd33      	ble.n	800e0cc <_dtoa_r+0x36c>
 800e064:	4bad      	ldr	r3, [pc, #692]	@ (800e31c <_dtoa_r+0x5bc>)
 800e066:	f007 020f 	and.w	r2, r7, #15
 800e06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e06e:	ed93 7b00 	vldr	d7, [r3]
 800e072:	05f8      	lsls	r0, r7, #23
 800e074:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e078:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e07c:	d516      	bpl.n	800e0ac <_dtoa_r+0x34c>
 800e07e:	4ba8      	ldr	r3, [pc, #672]	@ (800e320 <_dtoa_r+0x5c0>)
 800e080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e088:	f7f2 fbe0 	bl	800084c <__aeabi_ddiv>
 800e08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e090:	f004 040f 	and.w	r4, r4, #15
 800e094:	2603      	movs	r6, #3
 800e096:	4da2      	ldr	r5, [pc, #648]	@ (800e320 <_dtoa_r+0x5c0>)
 800e098:	b954      	cbnz	r4, 800e0b0 <_dtoa_r+0x350>
 800e09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e09e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0a2:	f7f2 fbd3 	bl	800084c <__aeabi_ddiv>
 800e0a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0aa:	e028      	b.n	800e0fe <_dtoa_r+0x39e>
 800e0ac:	2602      	movs	r6, #2
 800e0ae:	e7f2      	b.n	800e096 <_dtoa_r+0x336>
 800e0b0:	07e1      	lsls	r1, r4, #31
 800e0b2:	d508      	bpl.n	800e0c6 <_dtoa_r+0x366>
 800e0b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0bc:	f7f2 fa9c 	bl	80005f8 <__aeabi_dmul>
 800e0c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0c4:	3601      	adds	r6, #1
 800e0c6:	1064      	asrs	r4, r4, #1
 800e0c8:	3508      	adds	r5, #8
 800e0ca:	e7e5      	b.n	800e098 <_dtoa_r+0x338>
 800e0cc:	f000 80d2 	beq.w	800e274 <_dtoa_r+0x514>
 800e0d0:	427c      	negs	r4, r7
 800e0d2:	4b92      	ldr	r3, [pc, #584]	@ (800e31c <_dtoa_r+0x5bc>)
 800e0d4:	4d92      	ldr	r5, [pc, #584]	@ (800e320 <_dtoa_r+0x5c0>)
 800e0d6:	f004 020f 	and.w	r2, r4, #15
 800e0da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0e6:	f7f2 fa87 	bl	80005f8 <__aeabi_dmul>
 800e0ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0ee:	1124      	asrs	r4, r4, #4
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	2602      	movs	r6, #2
 800e0f4:	2c00      	cmp	r4, #0
 800e0f6:	f040 80b2 	bne.w	800e25e <_dtoa_r+0x4fe>
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1d3      	bne.n	800e0a6 <_dtoa_r+0x346>
 800e0fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e100:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 80b7 	beq.w	800e278 <_dtoa_r+0x518>
 800e10a:	4b86      	ldr	r3, [pc, #536]	@ (800e324 <_dtoa_r+0x5c4>)
 800e10c:	2200      	movs	r2, #0
 800e10e:	4620      	mov	r0, r4
 800e110:	4629      	mov	r1, r5
 800e112:	f7f2 fce3 	bl	8000adc <__aeabi_dcmplt>
 800e116:	2800      	cmp	r0, #0
 800e118:	f000 80ae 	beq.w	800e278 <_dtoa_r+0x518>
 800e11c:	9b07      	ldr	r3, [sp, #28]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f000 80aa 	beq.w	800e278 <_dtoa_r+0x518>
 800e124:	9b00      	ldr	r3, [sp, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	dd37      	ble.n	800e19a <_dtoa_r+0x43a>
 800e12a:	1e7b      	subs	r3, r7, #1
 800e12c:	9304      	str	r3, [sp, #16]
 800e12e:	4620      	mov	r0, r4
 800e130:	4b7d      	ldr	r3, [pc, #500]	@ (800e328 <_dtoa_r+0x5c8>)
 800e132:	2200      	movs	r2, #0
 800e134:	4629      	mov	r1, r5
 800e136:	f7f2 fa5f 	bl	80005f8 <__aeabi_dmul>
 800e13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e13e:	9c00      	ldr	r4, [sp, #0]
 800e140:	3601      	adds	r6, #1
 800e142:	4630      	mov	r0, r6
 800e144:	f7f2 f9ee 	bl	8000524 <__aeabi_i2d>
 800e148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e14c:	f7f2 fa54 	bl	80005f8 <__aeabi_dmul>
 800e150:	4b76      	ldr	r3, [pc, #472]	@ (800e32c <_dtoa_r+0x5cc>)
 800e152:	2200      	movs	r2, #0
 800e154:	f7f2 f89a 	bl	800028c <__adddf3>
 800e158:	4605      	mov	r5, r0
 800e15a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e15e:	2c00      	cmp	r4, #0
 800e160:	f040 808d 	bne.w	800e27e <_dtoa_r+0x51e>
 800e164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e168:	4b71      	ldr	r3, [pc, #452]	@ (800e330 <_dtoa_r+0x5d0>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	f7f2 f88c 	bl	8000288 <__aeabi_dsub>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e178:	462a      	mov	r2, r5
 800e17a:	4633      	mov	r3, r6
 800e17c:	f7f2 fccc 	bl	8000b18 <__aeabi_dcmpgt>
 800e180:	2800      	cmp	r0, #0
 800e182:	f040 828b 	bne.w	800e69c <_dtoa_r+0x93c>
 800e186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e18a:	462a      	mov	r2, r5
 800e18c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e190:	f7f2 fca4 	bl	8000adc <__aeabi_dcmplt>
 800e194:	2800      	cmp	r0, #0
 800e196:	f040 8128 	bne.w	800e3ea <_dtoa_r+0x68a>
 800e19a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e19e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e1a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f2c0 815a 	blt.w	800e45e <_dtoa_r+0x6fe>
 800e1aa:	2f0e      	cmp	r7, #14
 800e1ac:	f300 8157 	bgt.w	800e45e <_dtoa_r+0x6fe>
 800e1b0:	4b5a      	ldr	r3, [pc, #360]	@ (800e31c <_dtoa_r+0x5bc>)
 800e1b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e1b6:	ed93 7b00 	vldr	d7, [r3]
 800e1ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	ed8d 7b00 	vstr	d7, [sp]
 800e1c2:	da03      	bge.n	800e1cc <_dtoa_r+0x46c>
 800e1c4:	9b07      	ldr	r3, [sp, #28]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f340 8101 	ble.w	800e3ce <_dtoa_r+0x66e>
 800e1cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e1d0:	4656      	mov	r6, sl
 800e1d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	4629      	mov	r1, r5
 800e1da:	f7f2 fb37 	bl	800084c <__aeabi_ddiv>
 800e1de:	f7f2 fcbb 	bl	8000b58 <__aeabi_d2iz>
 800e1e2:	4680      	mov	r8, r0
 800e1e4:	f7f2 f99e 	bl	8000524 <__aeabi_i2d>
 800e1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ec:	f7f2 fa04 	bl	80005f8 <__aeabi_dmul>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e1fc:	f7f2 f844 	bl	8000288 <__aeabi_dsub>
 800e200:	f806 4b01 	strb.w	r4, [r6], #1
 800e204:	9d07      	ldr	r5, [sp, #28]
 800e206:	eba6 040a 	sub.w	r4, r6, sl
 800e20a:	42a5      	cmp	r5, r4
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	f040 8117 	bne.w	800e442 <_dtoa_r+0x6e2>
 800e214:	f7f2 f83a 	bl	800028c <__adddf3>
 800e218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e21c:	4604      	mov	r4, r0
 800e21e:	460d      	mov	r5, r1
 800e220:	f7f2 fc7a 	bl	8000b18 <__aeabi_dcmpgt>
 800e224:	2800      	cmp	r0, #0
 800e226:	f040 80f9 	bne.w	800e41c <_dtoa_r+0x6bc>
 800e22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e22e:	4620      	mov	r0, r4
 800e230:	4629      	mov	r1, r5
 800e232:	f7f2 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 800e236:	b118      	cbz	r0, 800e240 <_dtoa_r+0x4e0>
 800e238:	f018 0f01 	tst.w	r8, #1
 800e23c:	f040 80ee 	bne.w	800e41c <_dtoa_r+0x6bc>
 800e240:	4649      	mov	r1, r9
 800e242:	4658      	mov	r0, fp
 800e244:	f000 ff26 	bl	800f094 <_Bfree>
 800e248:	2300      	movs	r3, #0
 800e24a:	7033      	strb	r3, [r6, #0]
 800e24c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e24e:	3701      	adds	r7, #1
 800e250:	601f      	str	r7, [r3, #0]
 800e252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 831d 	beq.w	800e894 <_dtoa_r+0xb34>
 800e25a:	601e      	str	r6, [r3, #0]
 800e25c:	e31a      	b.n	800e894 <_dtoa_r+0xb34>
 800e25e:	07e2      	lsls	r2, r4, #31
 800e260:	d505      	bpl.n	800e26e <_dtoa_r+0x50e>
 800e262:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e266:	f7f2 f9c7 	bl	80005f8 <__aeabi_dmul>
 800e26a:	3601      	adds	r6, #1
 800e26c:	2301      	movs	r3, #1
 800e26e:	1064      	asrs	r4, r4, #1
 800e270:	3508      	adds	r5, #8
 800e272:	e73f      	b.n	800e0f4 <_dtoa_r+0x394>
 800e274:	2602      	movs	r6, #2
 800e276:	e742      	b.n	800e0fe <_dtoa_r+0x39e>
 800e278:	9c07      	ldr	r4, [sp, #28]
 800e27a:	9704      	str	r7, [sp, #16]
 800e27c:	e761      	b.n	800e142 <_dtoa_r+0x3e2>
 800e27e:	4b27      	ldr	r3, [pc, #156]	@ (800e31c <_dtoa_r+0x5bc>)
 800e280:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e286:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e28a:	4454      	add	r4, sl
 800e28c:	2900      	cmp	r1, #0
 800e28e:	d053      	beq.n	800e338 <_dtoa_r+0x5d8>
 800e290:	4928      	ldr	r1, [pc, #160]	@ (800e334 <_dtoa_r+0x5d4>)
 800e292:	2000      	movs	r0, #0
 800e294:	f7f2 fada 	bl	800084c <__aeabi_ddiv>
 800e298:	4633      	mov	r3, r6
 800e29a:	462a      	mov	r2, r5
 800e29c:	f7f1 fff4 	bl	8000288 <__aeabi_dsub>
 800e2a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2a4:	4656      	mov	r6, sl
 800e2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2aa:	f7f2 fc55 	bl	8000b58 <__aeabi_d2iz>
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	f7f2 f938 	bl	8000524 <__aeabi_i2d>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2bc:	f7f1 ffe4 	bl	8000288 <__aeabi_dsub>
 800e2c0:	3530      	adds	r5, #48	@ 0x30
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2ca:	f806 5b01 	strb.w	r5, [r6], #1
 800e2ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2d2:	f7f2 fc03 	bl	8000adc <__aeabi_dcmplt>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d171      	bne.n	800e3be <_dtoa_r+0x65e>
 800e2da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2de:	4911      	ldr	r1, [pc, #68]	@ (800e324 <_dtoa_r+0x5c4>)
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	f7f1 ffd1 	bl	8000288 <__aeabi_dsub>
 800e2e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2ea:	f7f2 fbf7 	bl	8000adc <__aeabi_dcmplt>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	f040 8095 	bne.w	800e41e <_dtoa_r+0x6be>
 800e2f4:	42a6      	cmp	r6, r4
 800e2f6:	f43f af50 	beq.w	800e19a <_dtoa_r+0x43a>
 800e2fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e328 <_dtoa_r+0x5c8>)
 800e300:	2200      	movs	r2, #0
 800e302:	f7f2 f979 	bl	80005f8 <__aeabi_dmul>
 800e306:	4b08      	ldr	r3, [pc, #32]	@ (800e328 <_dtoa_r+0x5c8>)
 800e308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e30c:	2200      	movs	r2, #0
 800e30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e312:	f7f2 f971 	bl	80005f8 <__aeabi_dmul>
 800e316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e31a:	e7c4      	b.n	800e2a6 <_dtoa_r+0x546>
 800e31c:	08012070 	.word	0x08012070
 800e320:	08012048 	.word	0x08012048
 800e324:	3ff00000 	.word	0x3ff00000
 800e328:	40240000 	.word	0x40240000
 800e32c:	401c0000 	.word	0x401c0000
 800e330:	40140000 	.word	0x40140000
 800e334:	3fe00000 	.word	0x3fe00000
 800e338:	4631      	mov	r1, r6
 800e33a:	4628      	mov	r0, r5
 800e33c:	f7f2 f95c 	bl	80005f8 <__aeabi_dmul>
 800e340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e344:	9415      	str	r4, [sp, #84]	@ 0x54
 800e346:	4656      	mov	r6, sl
 800e348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e34c:	f7f2 fc04 	bl	8000b58 <__aeabi_d2iz>
 800e350:	4605      	mov	r5, r0
 800e352:	f7f2 f8e7 	bl	8000524 <__aeabi_i2d>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e35e:	f7f1 ff93 	bl	8000288 <__aeabi_dsub>
 800e362:	3530      	adds	r5, #48	@ 0x30
 800e364:	f806 5b01 	strb.w	r5, [r6], #1
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	42a6      	cmp	r6, r4
 800e36e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e372:	f04f 0200 	mov.w	r2, #0
 800e376:	d124      	bne.n	800e3c2 <_dtoa_r+0x662>
 800e378:	4bac      	ldr	r3, [pc, #688]	@ (800e62c <_dtoa_r+0x8cc>)
 800e37a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e37e:	f7f1 ff85 	bl	800028c <__adddf3>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e38a:	f7f2 fbc5 	bl	8000b18 <__aeabi_dcmpgt>
 800e38e:	2800      	cmp	r0, #0
 800e390:	d145      	bne.n	800e41e <_dtoa_r+0x6be>
 800e392:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e396:	49a5      	ldr	r1, [pc, #660]	@ (800e62c <_dtoa_r+0x8cc>)
 800e398:	2000      	movs	r0, #0
 800e39a:	f7f1 ff75 	bl	8000288 <__aeabi_dsub>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3a6:	f7f2 fb99 	bl	8000adc <__aeabi_dcmplt>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	f43f aef5 	beq.w	800e19a <_dtoa_r+0x43a>
 800e3b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e3b2:	1e73      	subs	r3, r6, #1
 800e3b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e3b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3ba:	2b30      	cmp	r3, #48	@ 0x30
 800e3bc:	d0f8      	beq.n	800e3b0 <_dtoa_r+0x650>
 800e3be:	9f04      	ldr	r7, [sp, #16]
 800e3c0:	e73e      	b.n	800e240 <_dtoa_r+0x4e0>
 800e3c2:	4b9b      	ldr	r3, [pc, #620]	@ (800e630 <_dtoa_r+0x8d0>)
 800e3c4:	f7f2 f918 	bl	80005f8 <__aeabi_dmul>
 800e3c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3cc:	e7bc      	b.n	800e348 <_dtoa_r+0x5e8>
 800e3ce:	d10c      	bne.n	800e3ea <_dtoa_r+0x68a>
 800e3d0:	4b98      	ldr	r3, [pc, #608]	@ (800e634 <_dtoa_r+0x8d4>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3d8:	f7f2 f90e 	bl	80005f8 <__aeabi_dmul>
 800e3dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3e0:	f7f2 fb90 	bl	8000b04 <__aeabi_dcmpge>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f000 8157 	beq.w	800e698 <_dtoa_r+0x938>
 800e3ea:	2400      	movs	r4, #0
 800e3ec:	4625      	mov	r5, r4
 800e3ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f0:	43db      	mvns	r3, r3
 800e3f2:	9304      	str	r3, [sp, #16]
 800e3f4:	4656      	mov	r6, sl
 800e3f6:	2700      	movs	r7, #0
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	4658      	mov	r0, fp
 800e3fc:	f000 fe4a 	bl	800f094 <_Bfree>
 800e400:	2d00      	cmp	r5, #0
 800e402:	d0dc      	beq.n	800e3be <_dtoa_r+0x65e>
 800e404:	b12f      	cbz	r7, 800e412 <_dtoa_r+0x6b2>
 800e406:	42af      	cmp	r7, r5
 800e408:	d003      	beq.n	800e412 <_dtoa_r+0x6b2>
 800e40a:	4639      	mov	r1, r7
 800e40c:	4658      	mov	r0, fp
 800e40e:	f000 fe41 	bl	800f094 <_Bfree>
 800e412:	4629      	mov	r1, r5
 800e414:	4658      	mov	r0, fp
 800e416:	f000 fe3d 	bl	800f094 <_Bfree>
 800e41a:	e7d0      	b.n	800e3be <_dtoa_r+0x65e>
 800e41c:	9704      	str	r7, [sp, #16]
 800e41e:	4633      	mov	r3, r6
 800e420:	461e      	mov	r6, r3
 800e422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e426:	2a39      	cmp	r2, #57	@ 0x39
 800e428:	d107      	bne.n	800e43a <_dtoa_r+0x6da>
 800e42a:	459a      	cmp	sl, r3
 800e42c:	d1f8      	bne.n	800e420 <_dtoa_r+0x6c0>
 800e42e:	9a04      	ldr	r2, [sp, #16]
 800e430:	3201      	adds	r2, #1
 800e432:	9204      	str	r2, [sp, #16]
 800e434:	2230      	movs	r2, #48	@ 0x30
 800e436:	f88a 2000 	strb.w	r2, [sl]
 800e43a:	781a      	ldrb	r2, [r3, #0]
 800e43c:	3201      	adds	r2, #1
 800e43e:	701a      	strb	r2, [r3, #0]
 800e440:	e7bd      	b.n	800e3be <_dtoa_r+0x65e>
 800e442:	4b7b      	ldr	r3, [pc, #492]	@ (800e630 <_dtoa_r+0x8d0>)
 800e444:	2200      	movs	r2, #0
 800e446:	f7f2 f8d7 	bl	80005f8 <__aeabi_dmul>
 800e44a:	2200      	movs	r2, #0
 800e44c:	2300      	movs	r3, #0
 800e44e:	4604      	mov	r4, r0
 800e450:	460d      	mov	r5, r1
 800e452:	f7f2 fb39 	bl	8000ac8 <__aeabi_dcmpeq>
 800e456:	2800      	cmp	r0, #0
 800e458:	f43f aebb 	beq.w	800e1d2 <_dtoa_r+0x472>
 800e45c:	e6f0      	b.n	800e240 <_dtoa_r+0x4e0>
 800e45e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e460:	2a00      	cmp	r2, #0
 800e462:	f000 80db 	beq.w	800e61c <_dtoa_r+0x8bc>
 800e466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e468:	2a01      	cmp	r2, #1
 800e46a:	f300 80bf 	bgt.w	800e5ec <_dtoa_r+0x88c>
 800e46e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e470:	2a00      	cmp	r2, #0
 800e472:	f000 80b7 	beq.w	800e5e4 <_dtoa_r+0x884>
 800e476:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e47a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e47c:	4646      	mov	r6, r8
 800e47e:	9a08      	ldr	r2, [sp, #32]
 800e480:	2101      	movs	r1, #1
 800e482:	441a      	add	r2, r3
 800e484:	4658      	mov	r0, fp
 800e486:	4498      	add	r8, r3
 800e488:	9208      	str	r2, [sp, #32]
 800e48a:	f000 ff01 	bl	800f290 <__i2b>
 800e48e:	4605      	mov	r5, r0
 800e490:	b15e      	cbz	r6, 800e4aa <_dtoa_r+0x74a>
 800e492:	9b08      	ldr	r3, [sp, #32]
 800e494:	2b00      	cmp	r3, #0
 800e496:	dd08      	ble.n	800e4aa <_dtoa_r+0x74a>
 800e498:	42b3      	cmp	r3, r6
 800e49a:	9a08      	ldr	r2, [sp, #32]
 800e49c:	bfa8      	it	ge
 800e49e:	4633      	movge	r3, r6
 800e4a0:	eba8 0803 	sub.w	r8, r8, r3
 800e4a4:	1af6      	subs	r6, r6, r3
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	9308      	str	r3, [sp, #32]
 800e4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4ac:	b1f3      	cbz	r3, 800e4ec <_dtoa_r+0x78c>
 800e4ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f000 80b7 	beq.w	800e624 <_dtoa_r+0x8c4>
 800e4b6:	b18c      	cbz	r4, 800e4dc <_dtoa_r+0x77c>
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	4658      	mov	r0, fp
 800e4be:	f000 ffa7 	bl	800f410 <__pow5mult>
 800e4c2:	464a      	mov	r2, r9
 800e4c4:	4601      	mov	r1, r0
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	4658      	mov	r0, fp
 800e4ca:	f000 fef7 	bl	800f2bc <__multiply>
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	9004      	str	r0, [sp, #16]
 800e4d2:	4658      	mov	r0, fp
 800e4d4:	f000 fdde 	bl	800f094 <_Bfree>
 800e4d8:	9b04      	ldr	r3, [sp, #16]
 800e4da:	4699      	mov	r9, r3
 800e4dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4de:	1b1a      	subs	r2, r3, r4
 800e4e0:	d004      	beq.n	800e4ec <_dtoa_r+0x78c>
 800e4e2:	4649      	mov	r1, r9
 800e4e4:	4658      	mov	r0, fp
 800e4e6:	f000 ff93 	bl	800f410 <__pow5mult>
 800e4ea:	4681      	mov	r9, r0
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	4658      	mov	r0, fp
 800e4f0:	f000 fece 	bl	800f290 <__i2b>
 800e4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f000 81cf 	beq.w	800e89c <_dtoa_r+0xb3c>
 800e4fe:	461a      	mov	r2, r3
 800e500:	4601      	mov	r1, r0
 800e502:	4658      	mov	r0, fp
 800e504:	f000 ff84 	bl	800f410 <__pow5mult>
 800e508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	4604      	mov	r4, r0
 800e50e:	f300 8095 	bgt.w	800e63c <_dtoa_r+0x8dc>
 800e512:	9b02      	ldr	r3, [sp, #8]
 800e514:	2b00      	cmp	r3, #0
 800e516:	f040 8087 	bne.w	800e628 <_dtoa_r+0x8c8>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e520:	2b00      	cmp	r3, #0
 800e522:	f040 8089 	bne.w	800e638 <_dtoa_r+0x8d8>
 800e526:	9b03      	ldr	r3, [sp, #12]
 800e528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e52c:	0d1b      	lsrs	r3, r3, #20
 800e52e:	051b      	lsls	r3, r3, #20
 800e530:	b12b      	cbz	r3, 800e53e <_dtoa_r+0x7de>
 800e532:	9b08      	ldr	r3, [sp, #32]
 800e534:	3301      	adds	r3, #1
 800e536:	9308      	str	r3, [sp, #32]
 800e538:	f108 0801 	add.w	r8, r8, #1
 800e53c:	2301      	movs	r3, #1
 800e53e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 81b0 	beq.w	800e8a8 <_dtoa_r+0xb48>
 800e548:	6923      	ldr	r3, [r4, #16]
 800e54a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e54e:	6918      	ldr	r0, [r3, #16]
 800e550:	f000 fe52 	bl	800f1f8 <__hi0bits>
 800e554:	f1c0 0020 	rsb	r0, r0, #32
 800e558:	9b08      	ldr	r3, [sp, #32]
 800e55a:	4418      	add	r0, r3
 800e55c:	f010 001f 	ands.w	r0, r0, #31
 800e560:	d077      	beq.n	800e652 <_dtoa_r+0x8f2>
 800e562:	f1c0 0320 	rsb	r3, r0, #32
 800e566:	2b04      	cmp	r3, #4
 800e568:	dd6b      	ble.n	800e642 <_dtoa_r+0x8e2>
 800e56a:	9b08      	ldr	r3, [sp, #32]
 800e56c:	f1c0 001c 	rsb	r0, r0, #28
 800e570:	4403      	add	r3, r0
 800e572:	4480      	add	r8, r0
 800e574:	4406      	add	r6, r0
 800e576:	9308      	str	r3, [sp, #32]
 800e578:	f1b8 0f00 	cmp.w	r8, #0
 800e57c:	dd05      	ble.n	800e58a <_dtoa_r+0x82a>
 800e57e:	4649      	mov	r1, r9
 800e580:	4642      	mov	r2, r8
 800e582:	4658      	mov	r0, fp
 800e584:	f000 ff9e 	bl	800f4c4 <__lshift>
 800e588:	4681      	mov	r9, r0
 800e58a:	9b08      	ldr	r3, [sp, #32]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	dd05      	ble.n	800e59c <_dtoa_r+0x83c>
 800e590:	4621      	mov	r1, r4
 800e592:	461a      	mov	r2, r3
 800e594:	4658      	mov	r0, fp
 800e596:	f000 ff95 	bl	800f4c4 <__lshift>
 800e59a:	4604      	mov	r4, r0
 800e59c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d059      	beq.n	800e656 <_dtoa_r+0x8f6>
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4648      	mov	r0, r9
 800e5a6:	f000 fff9 	bl	800f59c <__mcmp>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	da53      	bge.n	800e656 <_dtoa_r+0x8f6>
 800e5ae:	1e7b      	subs	r3, r7, #1
 800e5b0:	9304      	str	r3, [sp, #16]
 800e5b2:	4649      	mov	r1, r9
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	220a      	movs	r2, #10
 800e5b8:	4658      	mov	r0, fp
 800e5ba:	f000 fd8d 	bl	800f0d8 <__multadd>
 800e5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5c0:	4681      	mov	r9, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 8172 	beq.w	800e8ac <_dtoa_r+0xb4c>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	220a      	movs	r2, #10
 800e5ce:	4658      	mov	r0, fp
 800e5d0:	f000 fd82 	bl	800f0d8 <__multadd>
 800e5d4:	9b00      	ldr	r3, [sp, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	4605      	mov	r5, r0
 800e5da:	dc67      	bgt.n	800e6ac <_dtoa_r+0x94c>
 800e5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	dc41      	bgt.n	800e666 <_dtoa_r+0x906>
 800e5e2:	e063      	b.n	800e6ac <_dtoa_r+0x94c>
 800e5e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e5e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e5ea:	e746      	b.n	800e47a <_dtoa_r+0x71a>
 800e5ec:	9b07      	ldr	r3, [sp, #28]
 800e5ee:	1e5c      	subs	r4, r3, #1
 800e5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5f2:	42a3      	cmp	r3, r4
 800e5f4:	bfbf      	itttt	lt
 800e5f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e5f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e5fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e5fc:	1ae3      	sublt	r3, r4, r3
 800e5fe:	bfb4      	ite	lt
 800e600:	18d2      	addlt	r2, r2, r3
 800e602:	1b1c      	subge	r4, r3, r4
 800e604:	9b07      	ldr	r3, [sp, #28]
 800e606:	bfbc      	itt	lt
 800e608:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e60a:	2400      	movlt	r4, #0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	bfb5      	itete	lt
 800e610:	eba8 0603 	sublt.w	r6, r8, r3
 800e614:	9b07      	ldrge	r3, [sp, #28]
 800e616:	2300      	movlt	r3, #0
 800e618:	4646      	movge	r6, r8
 800e61a:	e730      	b.n	800e47e <_dtoa_r+0x71e>
 800e61c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e61e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e620:	4646      	mov	r6, r8
 800e622:	e735      	b.n	800e490 <_dtoa_r+0x730>
 800e624:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e626:	e75c      	b.n	800e4e2 <_dtoa_r+0x782>
 800e628:	2300      	movs	r3, #0
 800e62a:	e788      	b.n	800e53e <_dtoa_r+0x7de>
 800e62c:	3fe00000 	.word	0x3fe00000
 800e630:	40240000 	.word	0x40240000
 800e634:	40140000 	.word	0x40140000
 800e638:	9b02      	ldr	r3, [sp, #8]
 800e63a:	e780      	b.n	800e53e <_dtoa_r+0x7de>
 800e63c:	2300      	movs	r3, #0
 800e63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e640:	e782      	b.n	800e548 <_dtoa_r+0x7e8>
 800e642:	d099      	beq.n	800e578 <_dtoa_r+0x818>
 800e644:	9a08      	ldr	r2, [sp, #32]
 800e646:	331c      	adds	r3, #28
 800e648:	441a      	add	r2, r3
 800e64a:	4498      	add	r8, r3
 800e64c:	441e      	add	r6, r3
 800e64e:	9208      	str	r2, [sp, #32]
 800e650:	e792      	b.n	800e578 <_dtoa_r+0x818>
 800e652:	4603      	mov	r3, r0
 800e654:	e7f6      	b.n	800e644 <_dtoa_r+0x8e4>
 800e656:	9b07      	ldr	r3, [sp, #28]
 800e658:	9704      	str	r7, [sp, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	dc20      	bgt.n	800e6a0 <_dtoa_r+0x940>
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e662:	2b02      	cmp	r3, #2
 800e664:	dd1e      	ble.n	800e6a4 <_dtoa_r+0x944>
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f47f aec0 	bne.w	800e3ee <_dtoa_r+0x68e>
 800e66e:	4621      	mov	r1, r4
 800e670:	2205      	movs	r2, #5
 800e672:	4658      	mov	r0, fp
 800e674:	f000 fd30 	bl	800f0d8 <__multadd>
 800e678:	4601      	mov	r1, r0
 800e67a:	4604      	mov	r4, r0
 800e67c:	4648      	mov	r0, r9
 800e67e:	f000 ff8d 	bl	800f59c <__mcmp>
 800e682:	2800      	cmp	r0, #0
 800e684:	f77f aeb3 	ble.w	800e3ee <_dtoa_r+0x68e>
 800e688:	4656      	mov	r6, sl
 800e68a:	2331      	movs	r3, #49	@ 0x31
 800e68c:	f806 3b01 	strb.w	r3, [r6], #1
 800e690:	9b04      	ldr	r3, [sp, #16]
 800e692:	3301      	adds	r3, #1
 800e694:	9304      	str	r3, [sp, #16]
 800e696:	e6ae      	b.n	800e3f6 <_dtoa_r+0x696>
 800e698:	9c07      	ldr	r4, [sp, #28]
 800e69a:	9704      	str	r7, [sp, #16]
 800e69c:	4625      	mov	r5, r4
 800e69e:	e7f3      	b.n	800e688 <_dtoa_r+0x928>
 800e6a0:	9b07      	ldr	r3, [sp, #28]
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f000 8104 	beq.w	800e8b4 <_dtoa_r+0xb54>
 800e6ac:	2e00      	cmp	r6, #0
 800e6ae:	dd05      	ble.n	800e6bc <_dtoa_r+0x95c>
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	4632      	mov	r2, r6
 800e6b4:	4658      	mov	r0, fp
 800e6b6:	f000 ff05 	bl	800f4c4 <__lshift>
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d05a      	beq.n	800e778 <_dtoa_r+0xa18>
 800e6c2:	6869      	ldr	r1, [r5, #4]
 800e6c4:	4658      	mov	r0, fp
 800e6c6:	f000 fca5 	bl	800f014 <_Balloc>
 800e6ca:	4606      	mov	r6, r0
 800e6cc:	b928      	cbnz	r0, 800e6da <_dtoa_r+0x97a>
 800e6ce:	4b84      	ldr	r3, [pc, #528]	@ (800e8e0 <_dtoa_r+0xb80>)
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e6d6:	f7ff bb5a 	b.w	800dd8e <_dtoa_r+0x2e>
 800e6da:	692a      	ldr	r2, [r5, #16]
 800e6dc:	3202      	adds	r2, #2
 800e6de:	0092      	lsls	r2, r2, #2
 800e6e0:	f105 010c 	add.w	r1, r5, #12
 800e6e4:	300c      	adds	r0, #12
 800e6e6:	f7ff fa95 	bl	800dc14 <memcpy>
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	4658      	mov	r0, fp
 800e6f0:	f000 fee8 	bl	800f4c4 <__lshift>
 800e6f4:	f10a 0301 	add.w	r3, sl, #1
 800e6f8:	9307      	str	r3, [sp, #28]
 800e6fa:	9b00      	ldr	r3, [sp, #0]
 800e6fc:	4453      	add	r3, sl
 800e6fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e700:	9b02      	ldr	r3, [sp, #8]
 800e702:	f003 0301 	and.w	r3, r3, #1
 800e706:	462f      	mov	r7, r5
 800e708:	930a      	str	r3, [sp, #40]	@ 0x28
 800e70a:	4605      	mov	r5, r0
 800e70c:	9b07      	ldr	r3, [sp, #28]
 800e70e:	4621      	mov	r1, r4
 800e710:	3b01      	subs	r3, #1
 800e712:	4648      	mov	r0, r9
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	f7ff fa99 	bl	800dc4c <quorem>
 800e71a:	4639      	mov	r1, r7
 800e71c:	9002      	str	r0, [sp, #8]
 800e71e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e722:	4648      	mov	r0, r9
 800e724:	f000 ff3a 	bl	800f59c <__mcmp>
 800e728:	462a      	mov	r2, r5
 800e72a:	9008      	str	r0, [sp, #32]
 800e72c:	4621      	mov	r1, r4
 800e72e:	4658      	mov	r0, fp
 800e730:	f000 ff50 	bl	800f5d4 <__mdiff>
 800e734:	68c2      	ldr	r2, [r0, #12]
 800e736:	4606      	mov	r6, r0
 800e738:	bb02      	cbnz	r2, 800e77c <_dtoa_r+0xa1c>
 800e73a:	4601      	mov	r1, r0
 800e73c:	4648      	mov	r0, r9
 800e73e:	f000 ff2d 	bl	800f59c <__mcmp>
 800e742:	4602      	mov	r2, r0
 800e744:	4631      	mov	r1, r6
 800e746:	4658      	mov	r0, fp
 800e748:	920e      	str	r2, [sp, #56]	@ 0x38
 800e74a:	f000 fca3 	bl	800f094 <_Bfree>
 800e74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e750:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e752:	9e07      	ldr	r6, [sp, #28]
 800e754:	ea43 0102 	orr.w	r1, r3, r2
 800e758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e75a:	4319      	orrs	r1, r3
 800e75c:	d110      	bne.n	800e780 <_dtoa_r+0xa20>
 800e75e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e762:	d029      	beq.n	800e7b8 <_dtoa_r+0xa58>
 800e764:	9b08      	ldr	r3, [sp, #32]
 800e766:	2b00      	cmp	r3, #0
 800e768:	dd02      	ble.n	800e770 <_dtoa_r+0xa10>
 800e76a:	9b02      	ldr	r3, [sp, #8]
 800e76c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e770:	9b00      	ldr	r3, [sp, #0]
 800e772:	f883 8000 	strb.w	r8, [r3]
 800e776:	e63f      	b.n	800e3f8 <_dtoa_r+0x698>
 800e778:	4628      	mov	r0, r5
 800e77a:	e7bb      	b.n	800e6f4 <_dtoa_r+0x994>
 800e77c:	2201      	movs	r2, #1
 800e77e:	e7e1      	b.n	800e744 <_dtoa_r+0x9e4>
 800e780:	9b08      	ldr	r3, [sp, #32]
 800e782:	2b00      	cmp	r3, #0
 800e784:	db04      	blt.n	800e790 <_dtoa_r+0xa30>
 800e786:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e788:	430b      	orrs	r3, r1
 800e78a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e78c:	430b      	orrs	r3, r1
 800e78e:	d120      	bne.n	800e7d2 <_dtoa_r+0xa72>
 800e790:	2a00      	cmp	r2, #0
 800e792:	dded      	ble.n	800e770 <_dtoa_r+0xa10>
 800e794:	4649      	mov	r1, r9
 800e796:	2201      	movs	r2, #1
 800e798:	4658      	mov	r0, fp
 800e79a:	f000 fe93 	bl	800f4c4 <__lshift>
 800e79e:	4621      	mov	r1, r4
 800e7a0:	4681      	mov	r9, r0
 800e7a2:	f000 fefb 	bl	800f59c <__mcmp>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	dc03      	bgt.n	800e7b2 <_dtoa_r+0xa52>
 800e7aa:	d1e1      	bne.n	800e770 <_dtoa_r+0xa10>
 800e7ac:	f018 0f01 	tst.w	r8, #1
 800e7b0:	d0de      	beq.n	800e770 <_dtoa_r+0xa10>
 800e7b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7b6:	d1d8      	bne.n	800e76a <_dtoa_r+0xa0a>
 800e7b8:	9a00      	ldr	r2, [sp, #0]
 800e7ba:	2339      	movs	r3, #57	@ 0x39
 800e7bc:	7013      	strb	r3, [r2, #0]
 800e7be:	4633      	mov	r3, r6
 800e7c0:	461e      	mov	r6, r3
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e7c8:	2a39      	cmp	r2, #57	@ 0x39
 800e7ca:	d052      	beq.n	800e872 <_dtoa_r+0xb12>
 800e7cc:	3201      	adds	r2, #1
 800e7ce:	701a      	strb	r2, [r3, #0]
 800e7d0:	e612      	b.n	800e3f8 <_dtoa_r+0x698>
 800e7d2:	2a00      	cmp	r2, #0
 800e7d4:	dd07      	ble.n	800e7e6 <_dtoa_r+0xa86>
 800e7d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7da:	d0ed      	beq.n	800e7b8 <_dtoa_r+0xa58>
 800e7dc:	9a00      	ldr	r2, [sp, #0]
 800e7de:	f108 0301 	add.w	r3, r8, #1
 800e7e2:	7013      	strb	r3, [r2, #0]
 800e7e4:	e608      	b.n	800e3f8 <_dtoa_r+0x698>
 800e7e6:	9b07      	ldr	r3, [sp, #28]
 800e7e8:	9a07      	ldr	r2, [sp, #28]
 800e7ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d028      	beq.n	800e846 <_dtoa_r+0xae6>
 800e7f4:	4649      	mov	r1, r9
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	220a      	movs	r2, #10
 800e7fa:	4658      	mov	r0, fp
 800e7fc:	f000 fc6c 	bl	800f0d8 <__multadd>
 800e800:	42af      	cmp	r7, r5
 800e802:	4681      	mov	r9, r0
 800e804:	f04f 0300 	mov.w	r3, #0
 800e808:	f04f 020a 	mov.w	r2, #10
 800e80c:	4639      	mov	r1, r7
 800e80e:	4658      	mov	r0, fp
 800e810:	d107      	bne.n	800e822 <_dtoa_r+0xac2>
 800e812:	f000 fc61 	bl	800f0d8 <__multadd>
 800e816:	4607      	mov	r7, r0
 800e818:	4605      	mov	r5, r0
 800e81a:	9b07      	ldr	r3, [sp, #28]
 800e81c:	3301      	adds	r3, #1
 800e81e:	9307      	str	r3, [sp, #28]
 800e820:	e774      	b.n	800e70c <_dtoa_r+0x9ac>
 800e822:	f000 fc59 	bl	800f0d8 <__multadd>
 800e826:	4629      	mov	r1, r5
 800e828:	4607      	mov	r7, r0
 800e82a:	2300      	movs	r3, #0
 800e82c:	220a      	movs	r2, #10
 800e82e:	4658      	mov	r0, fp
 800e830:	f000 fc52 	bl	800f0d8 <__multadd>
 800e834:	4605      	mov	r5, r0
 800e836:	e7f0      	b.n	800e81a <_dtoa_r+0xaba>
 800e838:	9b00      	ldr	r3, [sp, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	bfcc      	ite	gt
 800e83e:	461e      	movgt	r6, r3
 800e840:	2601      	movle	r6, #1
 800e842:	4456      	add	r6, sl
 800e844:	2700      	movs	r7, #0
 800e846:	4649      	mov	r1, r9
 800e848:	2201      	movs	r2, #1
 800e84a:	4658      	mov	r0, fp
 800e84c:	f000 fe3a 	bl	800f4c4 <__lshift>
 800e850:	4621      	mov	r1, r4
 800e852:	4681      	mov	r9, r0
 800e854:	f000 fea2 	bl	800f59c <__mcmp>
 800e858:	2800      	cmp	r0, #0
 800e85a:	dcb0      	bgt.n	800e7be <_dtoa_r+0xa5e>
 800e85c:	d102      	bne.n	800e864 <_dtoa_r+0xb04>
 800e85e:	f018 0f01 	tst.w	r8, #1
 800e862:	d1ac      	bne.n	800e7be <_dtoa_r+0xa5e>
 800e864:	4633      	mov	r3, r6
 800e866:	461e      	mov	r6, r3
 800e868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e86c:	2a30      	cmp	r2, #48	@ 0x30
 800e86e:	d0fa      	beq.n	800e866 <_dtoa_r+0xb06>
 800e870:	e5c2      	b.n	800e3f8 <_dtoa_r+0x698>
 800e872:	459a      	cmp	sl, r3
 800e874:	d1a4      	bne.n	800e7c0 <_dtoa_r+0xa60>
 800e876:	9b04      	ldr	r3, [sp, #16]
 800e878:	3301      	adds	r3, #1
 800e87a:	9304      	str	r3, [sp, #16]
 800e87c:	2331      	movs	r3, #49	@ 0x31
 800e87e:	f88a 3000 	strb.w	r3, [sl]
 800e882:	e5b9      	b.n	800e3f8 <_dtoa_r+0x698>
 800e884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e886:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e8e4 <_dtoa_r+0xb84>
 800e88a:	b11b      	cbz	r3, 800e894 <_dtoa_r+0xb34>
 800e88c:	f10a 0308 	add.w	r3, sl, #8
 800e890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e892:	6013      	str	r3, [r2, #0]
 800e894:	4650      	mov	r0, sl
 800e896:	b019      	add	sp, #100	@ 0x64
 800e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	f77f ae37 	ble.w	800e512 <_dtoa_r+0x7b2>
 800e8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8a8:	2001      	movs	r0, #1
 800e8aa:	e655      	b.n	800e558 <_dtoa_r+0x7f8>
 800e8ac:	9b00      	ldr	r3, [sp, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f77f aed6 	ble.w	800e660 <_dtoa_r+0x900>
 800e8b4:	4656      	mov	r6, sl
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4648      	mov	r0, r9
 800e8ba:	f7ff f9c7 	bl	800dc4c <quorem>
 800e8be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8c2:	f806 8b01 	strb.w	r8, [r6], #1
 800e8c6:	9b00      	ldr	r3, [sp, #0]
 800e8c8:	eba6 020a 	sub.w	r2, r6, sl
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	ddb3      	ble.n	800e838 <_dtoa_r+0xad8>
 800e8d0:	4649      	mov	r1, r9
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	220a      	movs	r2, #10
 800e8d6:	4658      	mov	r0, fp
 800e8d8:	f000 fbfe 	bl	800f0d8 <__multadd>
 800e8dc:	4681      	mov	r9, r0
 800e8de:	e7ea      	b.n	800e8b6 <_dtoa_r+0xb56>
 800e8e0:	08011f6e 	.word	0x08011f6e
 800e8e4:	08011ef2 	.word	0x08011ef2

0800e8e8 <_free_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	d041      	beq.n	800e974 <_free_r+0x8c>
 800e8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f4:	1f0c      	subs	r4, r1, #4
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	bfb8      	it	lt
 800e8fa:	18e4      	addlt	r4, r4, r3
 800e8fc:	f7fd f972 	bl	800bbe4 <__malloc_lock>
 800e900:	4a1d      	ldr	r2, [pc, #116]	@ (800e978 <_free_r+0x90>)
 800e902:	6813      	ldr	r3, [r2, #0]
 800e904:	b933      	cbnz	r3, 800e914 <_free_r+0x2c>
 800e906:	6063      	str	r3, [r4, #4]
 800e908:	6014      	str	r4, [r2, #0]
 800e90a:	4628      	mov	r0, r5
 800e90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e910:	f7fd b96e 	b.w	800bbf0 <__malloc_unlock>
 800e914:	42a3      	cmp	r3, r4
 800e916:	d908      	bls.n	800e92a <_free_r+0x42>
 800e918:	6820      	ldr	r0, [r4, #0]
 800e91a:	1821      	adds	r1, r4, r0
 800e91c:	428b      	cmp	r3, r1
 800e91e:	bf01      	itttt	eq
 800e920:	6819      	ldreq	r1, [r3, #0]
 800e922:	685b      	ldreq	r3, [r3, #4]
 800e924:	1809      	addeq	r1, r1, r0
 800e926:	6021      	streq	r1, [r4, #0]
 800e928:	e7ed      	b.n	800e906 <_free_r+0x1e>
 800e92a:	461a      	mov	r2, r3
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	b10b      	cbz	r3, 800e934 <_free_r+0x4c>
 800e930:	42a3      	cmp	r3, r4
 800e932:	d9fa      	bls.n	800e92a <_free_r+0x42>
 800e934:	6811      	ldr	r1, [r2, #0]
 800e936:	1850      	adds	r0, r2, r1
 800e938:	42a0      	cmp	r0, r4
 800e93a:	d10b      	bne.n	800e954 <_free_r+0x6c>
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	4401      	add	r1, r0
 800e940:	1850      	adds	r0, r2, r1
 800e942:	4283      	cmp	r3, r0
 800e944:	6011      	str	r1, [r2, #0]
 800e946:	d1e0      	bne.n	800e90a <_free_r+0x22>
 800e948:	6818      	ldr	r0, [r3, #0]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	6053      	str	r3, [r2, #4]
 800e94e:	4408      	add	r0, r1
 800e950:	6010      	str	r0, [r2, #0]
 800e952:	e7da      	b.n	800e90a <_free_r+0x22>
 800e954:	d902      	bls.n	800e95c <_free_r+0x74>
 800e956:	230c      	movs	r3, #12
 800e958:	602b      	str	r3, [r5, #0]
 800e95a:	e7d6      	b.n	800e90a <_free_r+0x22>
 800e95c:	6820      	ldr	r0, [r4, #0]
 800e95e:	1821      	adds	r1, r4, r0
 800e960:	428b      	cmp	r3, r1
 800e962:	bf04      	itt	eq
 800e964:	6819      	ldreq	r1, [r3, #0]
 800e966:	685b      	ldreq	r3, [r3, #4]
 800e968:	6063      	str	r3, [r4, #4]
 800e96a:	bf04      	itt	eq
 800e96c:	1809      	addeq	r1, r1, r0
 800e96e:	6021      	streq	r1, [r4, #0]
 800e970:	6054      	str	r4, [r2, #4]
 800e972:	e7ca      	b.n	800e90a <_free_r+0x22>
 800e974:	bd38      	pop	{r3, r4, r5, pc}
 800e976:	bf00      	nop
 800e978:	200048bc 	.word	0x200048bc

0800e97c <rshift>:
 800e97c:	6903      	ldr	r3, [r0, #16]
 800e97e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e982:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e986:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e98a:	f100 0414 	add.w	r4, r0, #20
 800e98e:	dd45      	ble.n	800ea1c <rshift+0xa0>
 800e990:	f011 011f 	ands.w	r1, r1, #31
 800e994:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e998:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e99c:	d10c      	bne.n	800e9b8 <rshift+0x3c>
 800e99e:	f100 0710 	add.w	r7, r0, #16
 800e9a2:	4629      	mov	r1, r5
 800e9a4:	42b1      	cmp	r1, r6
 800e9a6:	d334      	bcc.n	800ea12 <rshift+0x96>
 800e9a8:	1a9b      	subs	r3, r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	1eea      	subs	r2, r5, #3
 800e9ae:	4296      	cmp	r6, r2
 800e9b0:	bf38      	it	cc
 800e9b2:	2300      	movcc	r3, #0
 800e9b4:	4423      	add	r3, r4
 800e9b6:	e015      	b.n	800e9e4 <rshift+0x68>
 800e9b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e9bc:	f1c1 0820 	rsb	r8, r1, #32
 800e9c0:	40cf      	lsrs	r7, r1
 800e9c2:	f105 0e04 	add.w	lr, r5, #4
 800e9c6:	46a1      	mov	r9, r4
 800e9c8:	4576      	cmp	r6, lr
 800e9ca:	46f4      	mov	ip, lr
 800e9cc:	d815      	bhi.n	800e9fa <rshift+0x7e>
 800e9ce:	1a9a      	subs	r2, r3, r2
 800e9d0:	0092      	lsls	r2, r2, #2
 800e9d2:	3a04      	subs	r2, #4
 800e9d4:	3501      	adds	r5, #1
 800e9d6:	42ae      	cmp	r6, r5
 800e9d8:	bf38      	it	cc
 800e9da:	2200      	movcc	r2, #0
 800e9dc:	18a3      	adds	r3, r4, r2
 800e9de:	50a7      	str	r7, [r4, r2]
 800e9e0:	b107      	cbz	r7, 800e9e4 <rshift+0x68>
 800e9e2:	3304      	adds	r3, #4
 800e9e4:	1b1a      	subs	r2, r3, r4
 800e9e6:	42a3      	cmp	r3, r4
 800e9e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e9ec:	bf08      	it	eq
 800e9ee:	2300      	moveq	r3, #0
 800e9f0:	6102      	str	r2, [r0, #16]
 800e9f2:	bf08      	it	eq
 800e9f4:	6143      	streq	r3, [r0, #20]
 800e9f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9fa:	f8dc c000 	ldr.w	ip, [ip]
 800e9fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea02:	ea4c 0707 	orr.w	r7, ip, r7
 800ea06:	f849 7b04 	str.w	r7, [r9], #4
 800ea0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea0e:	40cf      	lsrs	r7, r1
 800ea10:	e7da      	b.n	800e9c8 <rshift+0x4c>
 800ea12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea1a:	e7c3      	b.n	800e9a4 <rshift+0x28>
 800ea1c:	4623      	mov	r3, r4
 800ea1e:	e7e1      	b.n	800e9e4 <rshift+0x68>

0800ea20 <__hexdig_fun>:
 800ea20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ea24:	2b09      	cmp	r3, #9
 800ea26:	d802      	bhi.n	800ea2e <__hexdig_fun+0xe>
 800ea28:	3820      	subs	r0, #32
 800ea2a:	b2c0      	uxtb	r0, r0
 800ea2c:	4770      	bx	lr
 800ea2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ea32:	2b05      	cmp	r3, #5
 800ea34:	d801      	bhi.n	800ea3a <__hexdig_fun+0x1a>
 800ea36:	3847      	subs	r0, #71	@ 0x47
 800ea38:	e7f7      	b.n	800ea2a <__hexdig_fun+0xa>
 800ea3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ea3e:	2b05      	cmp	r3, #5
 800ea40:	d801      	bhi.n	800ea46 <__hexdig_fun+0x26>
 800ea42:	3827      	subs	r0, #39	@ 0x27
 800ea44:	e7f1      	b.n	800ea2a <__hexdig_fun+0xa>
 800ea46:	2000      	movs	r0, #0
 800ea48:	4770      	bx	lr
	...

0800ea4c <__gethex>:
 800ea4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea50:	b085      	sub	sp, #20
 800ea52:	468a      	mov	sl, r1
 800ea54:	9302      	str	r3, [sp, #8]
 800ea56:	680b      	ldr	r3, [r1, #0]
 800ea58:	9001      	str	r0, [sp, #4]
 800ea5a:	4690      	mov	r8, r2
 800ea5c:	1c9c      	adds	r4, r3, #2
 800ea5e:	46a1      	mov	r9, r4
 800ea60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ea64:	2830      	cmp	r0, #48	@ 0x30
 800ea66:	d0fa      	beq.n	800ea5e <__gethex+0x12>
 800ea68:	eba9 0303 	sub.w	r3, r9, r3
 800ea6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ea70:	f7ff ffd6 	bl	800ea20 <__hexdig_fun>
 800ea74:	4605      	mov	r5, r0
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d168      	bne.n	800eb4c <__gethex+0x100>
 800ea7a:	49a0      	ldr	r1, [pc, #640]	@ (800ecfc <__gethex+0x2b0>)
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	4648      	mov	r0, r9
 800ea80:	f7fe ffc6 	bl	800da10 <strncmp>
 800ea84:	4607      	mov	r7, r0
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d167      	bne.n	800eb5a <__gethex+0x10e>
 800ea8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ea8e:	4626      	mov	r6, r4
 800ea90:	f7ff ffc6 	bl	800ea20 <__hexdig_fun>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d062      	beq.n	800eb5e <__gethex+0x112>
 800ea98:	4623      	mov	r3, r4
 800ea9a:	7818      	ldrb	r0, [r3, #0]
 800ea9c:	2830      	cmp	r0, #48	@ 0x30
 800ea9e:	4699      	mov	r9, r3
 800eaa0:	f103 0301 	add.w	r3, r3, #1
 800eaa4:	d0f9      	beq.n	800ea9a <__gethex+0x4e>
 800eaa6:	f7ff ffbb 	bl	800ea20 <__hexdig_fun>
 800eaaa:	fab0 f580 	clz	r5, r0
 800eaae:	096d      	lsrs	r5, r5, #5
 800eab0:	f04f 0b01 	mov.w	fp, #1
 800eab4:	464a      	mov	r2, r9
 800eab6:	4616      	mov	r6, r2
 800eab8:	3201      	adds	r2, #1
 800eaba:	7830      	ldrb	r0, [r6, #0]
 800eabc:	f7ff ffb0 	bl	800ea20 <__hexdig_fun>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d1f8      	bne.n	800eab6 <__gethex+0x6a>
 800eac4:	498d      	ldr	r1, [pc, #564]	@ (800ecfc <__gethex+0x2b0>)
 800eac6:	2201      	movs	r2, #1
 800eac8:	4630      	mov	r0, r6
 800eaca:	f7fe ffa1 	bl	800da10 <strncmp>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d13f      	bne.n	800eb52 <__gethex+0x106>
 800ead2:	b944      	cbnz	r4, 800eae6 <__gethex+0x9a>
 800ead4:	1c74      	adds	r4, r6, #1
 800ead6:	4622      	mov	r2, r4
 800ead8:	4616      	mov	r6, r2
 800eada:	3201      	adds	r2, #1
 800eadc:	7830      	ldrb	r0, [r6, #0]
 800eade:	f7ff ff9f 	bl	800ea20 <__hexdig_fun>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	d1f8      	bne.n	800ead8 <__gethex+0x8c>
 800eae6:	1ba4      	subs	r4, r4, r6
 800eae8:	00a7      	lsls	r7, r4, #2
 800eaea:	7833      	ldrb	r3, [r6, #0]
 800eaec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eaf0:	2b50      	cmp	r3, #80	@ 0x50
 800eaf2:	d13e      	bne.n	800eb72 <__gethex+0x126>
 800eaf4:	7873      	ldrb	r3, [r6, #1]
 800eaf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800eaf8:	d033      	beq.n	800eb62 <__gethex+0x116>
 800eafa:	2b2d      	cmp	r3, #45	@ 0x2d
 800eafc:	d034      	beq.n	800eb68 <__gethex+0x11c>
 800eafe:	1c71      	adds	r1, r6, #1
 800eb00:	2400      	movs	r4, #0
 800eb02:	7808      	ldrb	r0, [r1, #0]
 800eb04:	f7ff ff8c 	bl	800ea20 <__hexdig_fun>
 800eb08:	1e43      	subs	r3, r0, #1
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	2b18      	cmp	r3, #24
 800eb0e:	d830      	bhi.n	800eb72 <__gethex+0x126>
 800eb10:	f1a0 0210 	sub.w	r2, r0, #16
 800eb14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb18:	f7ff ff82 	bl	800ea20 <__hexdig_fun>
 800eb1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800eb20:	fa5f fc8c 	uxtb.w	ip, ip
 800eb24:	f1bc 0f18 	cmp.w	ip, #24
 800eb28:	f04f 030a 	mov.w	r3, #10
 800eb2c:	d91e      	bls.n	800eb6c <__gethex+0x120>
 800eb2e:	b104      	cbz	r4, 800eb32 <__gethex+0xe6>
 800eb30:	4252      	negs	r2, r2
 800eb32:	4417      	add	r7, r2
 800eb34:	f8ca 1000 	str.w	r1, [sl]
 800eb38:	b1ed      	cbz	r5, 800eb76 <__gethex+0x12a>
 800eb3a:	f1bb 0f00 	cmp.w	fp, #0
 800eb3e:	bf0c      	ite	eq
 800eb40:	2506      	moveq	r5, #6
 800eb42:	2500      	movne	r5, #0
 800eb44:	4628      	mov	r0, r5
 800eb46:	b005      	add	sp, #20
 800eb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4c:	2500      	movs	r5, #0
 800eb4e:	462c      	mov	r4, r5
 800eb50:	e7b0      	b.n	800eab4 <__gethex+0x68>
 800eb52:	2c00      	cmp	r4, #0
 800eb54:	d1c7      	bne.n	800eae6 <__gethex+0x9a>
 800eb56:	4627      	mov	r7, r4
 800eb58:	e7c7      	b.n	800eaea <__gethex+0x9e>
 800eb5a:	464e      	mov	r6, r9
 800eb5c:	462f      	mov	r7, r5
 800eb5e:	2501      	movs	r5, #1
 800eb60:	e7c3      	b.n	800eaea <__gethex+0x9e>
 800eb62:	2400      	movs	r4, #0
 800eb64:	1cb1      	adds	r1, r6, #2
 800eb66:	e7cc      	b.n	800eb02 <__gethex+0xb6>
 800eb68:	2401      	movs	r4, #1
 800eb6a:	e7fb      	b.n	800eb64 <__gethex+0x118>
 800eb6c:	fb03 0002 	mla	r0, r3, r2, r0
 800eb70:	e7ce      	b.n	800eb10 <__gethex+0xc4>
 800eb72:	4631      	mov	r1, r6
 800eb74:	e7de      	b.n	800eb34 <__gethex+0xe8>
 800eb76:	eba6 0309 	sub.w	r3, r6, r9
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	4629      	mov	r1, r5
 800eb7e:	2b07      	cmp	r3, #7
 800eb80:	dc0a      	bgt.n	800eb98 <__gethex+0x14c>
 800eb82:	9801      	ldr	r0, [sp, #4]
 800eb84:	f000 fa46 	bl	800f014 <_Balloc>
 800eb88:	4604      	mov	r4, r0
 800eb8a:	b940      	cbnz	r0, 800eb9e <__gethex+0x152>
 800eb8c:	4b5c      	ldr	r3, [pc, #368]	@ (800ed00 <__gethex+0x2b4>)
 800eb8e:	4602      	mov	r2, r0
 800eb90:	21e4      	movs	r1, #228	@ 0xe4
 800eb92:	485c      	ldr	r0, [pc, #368]	@ (800ed04 <__gethex+0x2b8>)
 800eb94:	f001 fb5c 	bl	8010250 <__assert_func>
 800eb98:	3101      	adds	r1, #1
 800eb9a:	105b      	asrs	r3, r3, #1
 800eb9c:	e7ef      	b.n	800eb7e <__gethex+0x132>
 800eb9e:	f100 0a14 	add.w	sl, r0, #20
 800eba2:	2300      	movs	r3, #0
 800eba4:	4655      	mov	r5, sl
 800eba6:	469b      	mov	fp, r3
 800eba8:	45b1      	cmp	r9, r6
 800ebaa:	d337      	bcc.n	800ec1c <__gethex+0x1d0>
 800ebac:	f845 bb04 	str.w	fp, [r5], #4
 800ebb0:	eba5 050a 	sub.w	r5, r5, sl
 800ebb4:	10ad      	asrs	r5, r5, #2
 800ebb6:	6125      	str	r5, [r4, #16]
 800ebb8:	4658      	mov	r0, fp
 800ebba:	f000 fb1d 	bl	800f1f8 <__hi0bits>
 800ebbe:	016d      	lsls	r5, r5, #5
 800ebc0:	f8d8 6000 	ldr.w	r6, [r8]
 800ebc4:	1a2d      	subs	r5, r5, r0
 800ebc6:	42b5      	cmp	r5, r6
 800ebc8:	dd54      	ble.n	800ec74 <__gethex+0x228>
 800ebca:	1bad      	subs	r5, r5, r6
 800ebcc:	4629      	mov	r1, r5
 800ebce:	4620      	mov	r0, r4
 800ebd0:	f000 feb1 	bl	800f936 <__any_on>
 800ebd4:	4681      	mov	r9, r0
 800ebd6:	b178      	cbz	r0, 800ebf8 <__gethex+0x1ac>
 800ebd8:	1e6b      	subs	r3, r5, #1
 800ebda:	1159      	asrs	r1, r3, #5
 800ebdc:	f003 021f 	and.w	r2, r3, #31
 800ebe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ebe4:	f04f 0901 	mov.w	r9, #1
 800ebe8:	fa09 f202 	lsl.w	r2, r9, r2
 800ebec:	420a      	tst	r2, r1
 800ebee:	d003      	beq.n	800ebf8 <__gethex+0x1ac>
 800ebf0:	454b      	cmp	r3, r9
 800ebf2:	dc36      	bgt.n	800ec62 <__gethex+0x216>
 800ebf4:	f04f 0902 	mov.w	r9, #2
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f7ff febe 	bl	800e97c <rshift>
 800ec00:	442f      	add	r7, r5
 800ec02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec06:	42bb      	cmp	r3, r7
 800ec08:	da42      	bge.n	800ec90 <__gethex+0x244>
 800ec0a:	9801      	ldr	r0, [sp, #4]
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	f000 fa41 	bl	800f094 <_Bfree>
 800ec12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec14:	2300      	movs	r3, #0
 800ec16:	6013      	str	r3, [r2, #0]
 800ec18:	25a3      	movs	r5, #163	@ 0xa3
 800ec1a:	e793      	b.n	800eb44 <__gethex+0xf8>
 800ec1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ec20:	2a2e      	cmp	r2, #46	@ 0x2e
 800ec22:	d012      	beq.n	800ec4a <__gethex+0x1fe>
 800ec24:	2b20      	cmp	r3, #32
 800ec26:	d104      	bne.n	800ec32 <__gethex+0x1e6>
 800ec28:	f845 bb04 	str.w	fp, [r5], #4
 800ec2c:	f04f 0b00 	mov.w	fp, #0
 800ec30:	465b      	mov	r3, fp
 800ec32:	7830      	ldrb	r0, [r6, #0]
 800ec34:	9303      	str	r3, [sp, #12]
 800ec36:	f7ff fef3 	bl	800ea20 <__hexdig_fun>
 800ec3a:	9b03      	ldr	r3, [sp, #12]
 800ec3c:	f000 000f 	and.w	r0, r0, #15
 800ec40:	4098      	lsls	r0, r3
 800ec42:	ea4b 0b00 	orr.w	fp, fp, r0
 800ec46:	3304      	adds	r3, #4
 800ec48:	e7ae      	b.n	800eba8 <__gethex+0x15c>
 800ec4a:	45b1      	cmp	r9, r6
 800ec4c:	d8ea      	bhi.n	800ec24 <__gethex+0x1d8>
 800ec4e:	492b      	ldr	r1, [pc, #172]	@ (800ecfc <__gethex+0x2b0>)
 800ec50:	9303      	str	r3, [sp, #12]
 800ec52:	2201      	movs	r2, #1
 800ec54:	4630      	mov	r0, r6
 800ec56:	f7fe fedb 	bl	800da10 <strncmp>
 800ec5a:	9b03      	ldr	r3, [sp, #12]
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d1e1      	bne.n	800ec24 <__gethex+0x1d8>
 800ec60:	e7a2      	b.n	800eba8 <__gethex+0x15c>
 800ec62:	1ea9      	subs	r1, r5, #2
 800ec64:	4620      	mov	r0, r4
 800ec66:	f000 fe66 	bl	800f936 <__any_on>
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d0c2      	beq.n	800ebf4 <__gethex+0x1a8>
 800ec6e:	f04f 0903 	mov.w	r9, #3
 800ec72:	e7c1      	b.n	800ebf8 <__gethex+0x1ac>
 800ec74:	da09      	bge.n	800ec8a <__gethex+0x23e>
 800ec76:	1b75      	subs	r5, r6, r5
 800ec78:	4621      	mov	r1, r4
 800ec7a:	9801      	ldr	r0, [sp, #4]
 800ec7c:	462a      	mov	r2, r5
 800ec7e:	f000 fc21 	bl	800f4c4 <__lshift>
 800ec82:	1b7f      	subs	r7, r7, r5
 800ec84:	4604      	mov	r4, r0
 800ec86:	f100 0a14 	add.w	sl, r0, #20
 800ec8a:	f04f 0900 	mov.w	r9, #0
 800ec8e:	e7b8      	b.n	800ec02 <__gethex+0x1b6>
 800ec90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec94:	42bd      	cmp	r5, r7
 800ec96:	dd6f      	ble.n	800ed78 <__gethex+0x32c>
 800ec98:	1bed      	subs	r5, r5, r7
 800ec9a:	42ae      	cmp	r6, r5
 800ec9c:	dc34      	bgt.n	800ed08 <__gethex+0x2bc>
 800ec9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	d022      	beq.n	800ecec <__gethex+0x2a0>
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d024      	beq.n	800ecf4 <__gethex+0x2a8>
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d115      	bne.n	800ecda <__gethex+0x28e>
 800ecae:	42ae      	cmp	r6, r5
 800ecb0:	d113      	bne.n	800ecda <__gethex+0x28e>
 800ecb2:	2e01      	cmp	r6, #1
 800ecb4:	d10b      	bne.n	800ecce <__gethex+0x282>
 800ecb6:	9a02      	ldr	r2, [sp, #8]
 800ecb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ecbc:	6013      	str	r3, [r2, #0]
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	6123      	str	r3, [r4, #16]
 800ecc2:	f8ca 3000 	str.w	r3, [sl]
 800ecc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecc8:	2562      	movs	r5, #98	@ 0x62
 800ecca:	601c      	str	r4, [r3, #0]
 800eccc:	e73a      	b.n	800eb44 <__gethex+0xf8>
 800ecce:	1e71      	subs	r1, r6, #1
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f000 fe30 	bl	800f936 <__any_on>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d1ed      	bne.n	800ecb6 <__gethex+0x26a>
 800ecda:	9801      	ldr	r0, [sp, #4]
 800ecdc:	4621      	mov	r1, r4
 800ecde:	f000 f9d9 	bl	800f094 <_Bfree>
 800ece2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ece4:	2300      	movs	r3, #0
 800ece6:	6013      	str	r3, [r2, #0]
 800ece8:	2550      	movs	r5, #80	@ 0x50
 800ecea:	e72b      	b.n	800eb44 <__gethex+0xf8>
 800ecec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1f3      	bne.n	800ecda <__gethex+0x28e>
 800ecf2:	e7e0      	b.n	800ecb6 <__gethex+0x26a>
 800ecf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1dd      	bne.n	800ecb6 <__gethex+0x26a>
 800ecfa:	e7ee      	b.n	800ecda <__gethex+0x28e>
 800ecfc:	08011d59 	.word	0x08011d59
 800ed00:	08011f6e 	.word	0x08011f6e
 800ed04:	08011f7f 	.word	0x08011f7f
 800ed08:	1e6f      	subs	r7, r5, #1
 800ed0a:	f1b9 0f00 	cmp.w	r9, #0
 800ed0e:	d130      	bne.n	800ed72 <__gethex+0x326>
 800ed10:	b127      	cbz	r7, 800ed1c <__gethex+0x2d0>
 800ed12:	4639      	mov	r1, r7
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 fe0e 	bl	800f936 <__any_on>
 800ed1a:	4681      	mov	r9, r0
 800ed1c:	117a      	asrs	r2, r7, #5
 800ed1e:	2301      	movs	r3, #1
 800ed20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ed24:	f007 071f 	and.w	r7, r7, #31
 800ed28:	40bb      	lsls	r3, r7
 800ed2a:	4213      	tst	r3, r2
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	4620      	mov	r0, r4
 800ed30:	bf18      	it	ne
 800ed32:	f049 0902 	orrne.w	r9, r9, #2
 800ed36:	f7ff fe21 	bl	800e97c <rshift>
 800ed3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ed3e:	1b76      	subs	r6, r6, r5
 800ed40:	2502      	movs	r5, #2
 800ed42:	f1b9 0f00 	cmp.w	r9, #0
 800ed46:	d047      	beq.n	800edd8 <__gethex+0x38c>
 800ed48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed4c:	2b02      	cmp	r3, #2
 800ed4e:	d015      	beq.n	800ed7c <__gethex+0x330>
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d017      	beq.n	800ed84 <__gethex+0x338>
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d109      	bne.n	800ed6c <__gethex+0x320>
 800ed58:	f019 0f02 	tst.w	r9, #2
 800ed5c:	d006      	beq.n	800ed6c <__gethex+0x320>
 800ed5e:	f8da 3000 	ldr.w	r3, [sl]
 800ed62:	ea49 0903 	orr.w	r9, r9, r3
 800ed66:	f019 0f01 	tst.w	r9, #1
 800ed6a:	d10e      	bne.n	800ed8a <__gethex+0x33e>
 800ed6c:	f045 0510 	orr.w	r5, r5, #16
 800ed70:	e032      	b.n	800edd8 <__gethex+0x38c>
 800ed72:	f04f 0901 	mov.w	r9, #1
 800ed76:	e7d1      	b.n	800ed1c <__gethex+0x2d0>
 800ed78:	2501      	movs	r5, #1
 800ed7a:	e7e2      	b.n	800ed42 <__gethex+0x2f6>
 800ed7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed7e:	f1c3 0301 	rsb	r3, r3, #1
 800ed82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d0f0      	beq.n	800ed6c <__gethex+0x320>
 800ed8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ed8e:	f104 0314 	add.w	r3, r4, #20
 800ed92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ed96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ed9a:	f04f 0c00 	mov.w	ip, #0
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eda4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eda8:	d01b      	beq.n	800ede2 <__gethex+0x396>
 800edaa:	3201      	adds	r2, #1
 800edac:	6002      	str	r2, [r0, #0]
 800edae:	2d02      	cmp	r5, #2
 800edb0:	f104 0314 	add.w	r3, r4, #20
 800edb4:	d13c      	bne.n	800ee30 <__gethex+0x3e4>
 800edb6:	f8d8 2000 	ldr.w	r2, [r8]
 800edba:	3a01      	subs	r2, #1
 800edbc:	42b2      	cmp	r2, r6
 800edbe:	d109      	bne.n	800edd4 <__gethex+0x388>
 800edc0:	1171      	asrs	r1, r6, #5
 800edc2:	2201      	movs	r2, #1
 800edc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800edc8:	f006 061f 	and.w	r6, r6, #31
 800edcc:	fa02 f606 	lsl.w	r6, r2, r6
 800edd0:	421e      	tst	r6, r3
 800edd2:	d13a      	bne.n	800ee4a <__gethex+0x3fe>
 800edd4:	f045 0520 	orr.w	r5, r5, #32
 800edd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edda:	601c      	str	r4, [r3, #0]
 800eddc:	9b02      	ldr	r3, [sp, #8]
 800edde:	601f      	str	r7, [r3, #0]
 800ede0:	e6b0      	b.n	800eb44 <__gethex+0xf8>
 800ede2:	4299      	cmp	r1, r3
 800ede4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ede8:	d8d9      	bhi.n	800ed9e <__gethex+0x352>
 800edea:	68a3      	ldr	r3, [r4, #8]
 800edec:	459b      	cmp	fp, r3
 800edee:	db17      	blt.n	800ee20 <__gethex+0x3d4>
 800edf0:	6861      	ldr	r1, [r4, #4]
 800edf2:	9801      	ldr	r0, [sp, #4]
 800edf4:	3101      	adds	r1, #1
 800edf6:	f000 f90d 	bl	800f014 <_Balloc>
 800edfa:	4681      	mov	r9, r0
 800edfc:	b918      	cbnz	r0, 800ee06 <__gethex+0x3ba>
 800edfe:	4b1a      	ldr	r3, [pc, #104]	@ (800ee68 <__gethex+0x41c>)
 800ee00:	4602      	mov	r2, r0
 800ee02:	2184      	movs	r1, #132	@ 0x84
 800ee04:	e6c5      	b.n	800eb92 <__gethex+0x146>
 800ee06:	6922      	ldr	r2, [r4, #16]
 800ee08:	3202      	adds	r2, #2
 800ee0a:	f104 010c 	add.w	r1, r4, #12
 800ee0e:	0092      	lsls	r2, r2, #2
 800ee10:	300c      	adds	r0, #12
 800ee12:	f7fe feff 	bl	800dc14 <memcpy>
 800ee16:	4621      	mov	r1, r4
 800ee18:	9801      	ldr	r0, [sp, #4]
 800ee1a:	f000 f93b 	bl	800f094 <_Bfree>
 800ee1e:	464c      	mov	r4, r9
 800ee20:	6923      	ldr	r3, [r4, #16]
 800ee22:	1c5a      	adds	r2, r3, #1
 800ee24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee28:	6122      	str	r2, [r4, #16]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	615a      	str	r2, [r3, #20]
 800ee2e:	e7be      	b.n	800edae <__gethex+0x362>
 800ee30:	6922      	ldr	r2, [r4, #16]
 800ee32:	455a      	cmp	r2, fp
 800ee34:	dd0b      	ble.n	800ee4e <__gethex+0x402>
 800ee36:	2101      	movs	r1, #1
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f7ff fd9f 	bl	800e97c <rshift>
 800ee3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee42:	3701      	adds	r7, #1
 800ee44:	42bb      	cmp	r3, r7
 800ee46:	f6ff aee0 	blt.w	800ec0a <__gethex+0x1be>
 800ee4a:	2501      	movs	r5, #1
 800ee4c:	e7c2      	b.n	800edd4 <__gethex+0x388>
 800ee4e:	f016 061f 	ands.w	r6, r6, #31
 800ee52:	d0fa      	beq.n	800ee4a <__gethex+0x3fe>
 800ee54:	4453      	add	r3, sl
 800ee56:	f1c6 0620 	rsb	r6, r6, #32
 800ee5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ee5e:	f000 f9cb 	bl	800f1f8 <__hi0bits>
 800ee62:	42b0      	cmp	r0, r6
 800ee64:	dbe7      	blt.n	800ee36 <__gethex+0x3ea>
 800ee66:	e7f0      	b.n	800ee4a <__gethex+0x3fe>
 800ee68:	08011f6e 	.word	0x08011f6e

0800ee6c <L_shift>:
 800ee6c:	f1c2 0208 	rsb	r2, r2, #8
 800ee70:	0092      	lsls	r2, r2, #2
 800ee72:	b570      	push	{r4, r5, r6, lr}
 800ee74:	f1c2 0620 	rsb	r6, r2, #32
 800ee78:	6843      	ldr	r3, [r0, #4]
 800ee7a:	6804      	ldr	r4, [r0, #0]
 800ee7c:	fa03 f506 	lsl.w	r5, r3, r6
 800ee80:	432c      	orrs	r4, r5
 800ee82:	40d3      	lsrs	r3, r2
 800ee84:	6004      	str	r4, [r0, #0]
 800ee86:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee8a:	4288      	cmp	r0, r1
 800ee8c:	d3f4      	bcc.n	800ee78 <L_shift+0xc>
 800ee8e:	bd70      	pop	{r4, r5, r6, pc}

0800ee90 <__match>:
 800ee90:	b530      	push	{r4, r5, lr}
 800ee92:	6803      	ldr	r3, [r0, #0]
 800ee94:	3301      	adds	r3, #1
 800ee96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee9a:	b914      	cbnz	r4, 800eea2 <__match+0x12>
 800ee9c:	6003      	str	r3, [r0, #0]
 800ee9e:	2001      	movs	r0, #1
 800eea0:	bd30      	pop	{r4, r5, pc}
 800eea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eea6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eeaa:	2d19      	cmp	r5, #25
 800eeac:	bf98      	it	ls
 800eeae:	3220      	addls	r2, #32
 800eeb0:	42a2      	cmp	r2, r4
 800eeb2:	d0f0      	beq.n	800ee96 <__match+0x6>
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	e7f3      	b.n	800eea0 <__match+0x10>

0800eeb8 <__hexnan>:
 800eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eebc:	680b      	ldr	r3, [r1, #0]
 800eebe:	6801      	ldr	r1, [r0, #0]
 800eec0:	115e      	asrs	r6, r3, #5
 800eec2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eec6:	f013 031f 	ands.w	r3, r3, #31
 800eeca:	b087      	sub	sp, #28
 800eecc:	bf18      	it	ne
 800eece:	3604      	addne	r6, #4
 800eed0:	2500      	movs	r5, #0
 800eed2:	1f37      	subs	r7, r6, #4
 800eed4:	4682      	mov	sl, r0
 800eed6:	4690      	mov	r8, r2
 800eed8:	9301      	str	r3, [sp, #4]
 800eeda:	f846 5c04 	str.w	r5, [r6, #-4]
 800eede:	46b9      	mov	r9, r7
 800eee0:	463c      	mov	r4, r7
 800eee2:	9502      	str	r5, [sp, #8]
 800eee4:	46ab      	mov	fp, r5
 800eee6:	784a      	ldrb	r2, [r1, #1]
 800eee8:	1c4b      	adds	r3, r1, #1
 800eeea:	9303      	str	r3, [sp, #12]
 800eeec:	b342      	cbz	r2, 800ef40 <__hexnan+0x88>
 800eeee:	4610      	mov	r0, r2
 800eef0:	9105      	str	r1, [sp, #20]
 800eef2:	9204      	str	r2, [sp, #16]
 800eef4:	f7ff fd94 	bl	800ea20 <__hexdig_fun>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d151      	bne.n	800efa0 <__hexnan+0xe8>
 800eefc:	9a04      	ldr	r2, [sp, #16]
 800eefe:	9905      	ldr	r1, [sp, #20]
 800ef00:	2a20      	cmp	r2, #32
 800ef02:	d818      	bhi.n	800ef36 <__hexnan+0x7e>
 800ef04:	9b02      	ldr	r3, [sp, #8]
 800ef06:	459b      	cmp	fp, r3
 800ef08:	dd13      	ble.n	800ef32 <__hexnan+0x7a>
 800ef0a:	454c      	cmp	r4, r9
 800ef0c:	d206      	bcs.n	800ef1c <__hexnan+0x64>
 800ef0e:	2d07      	cmp	r5, #7
 800ef10:	dc04      	bgt.n	800ef1c <__hexnan+0x64>
 800ef12:	462a      	mov	r2, r5
 800ef14:	4649      	mov	r1, r9
 800ef16:	4620      	mov	r0, r4
 800ef18:	f7ff ffa8 	bl	800ee6c <L_shift>
 800ef1c:	4544      	cmp	r4, r8
 800ef1e:	d952      	bls.n	800efc6 <__hexnan+0x10e>
 800ef20:	2300      	movs	r3, #0
 800ef22:	f1a4 0904 	sub.w	r9, r4, #4
 800ef26:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef2a:	f8cd b008 	str.w	fp, [sp, #8]
 800ef2e:	464c      	mov	r4, r9
 800ef30:	461d      	mov	r5, r3
 800ef32:	9903      	ldr	r1, [sp, #12]
 800ef34:	e7d7      	b.n	800eee6 <__hexnan+0x2e>
 800ef36:	2a29      	cmp	r2, #41	@ 0x29
 800ef38:	d157      	bne.n	800efea <__hexnan+0x132>
 800ef3a:	3102      	adds	r1, #2
 800ef3c:	f8ca 1000 	str.w	r1, [sl]
 800ef40:	f1bb 0f00 	cmp.w	fp, #0
 800ef44:	d051      	beq.n	800efea <__hexnan+0x132>
 800ef46:	454c      	cmp	r4, r9
 800ef48:	d206      	bcs.n	800ef58 <__hexnan+0xa0>
 800ef4a:	2d07      	cmp	r5, #7
 800ef4c:	dc04      	bgt.n	800ef58 <__hexnan+0xa0>
 800ef4e:	462a      	mov	r2, r5
 800ef50:	4649      	mov	r1, r9
 800ef52:	4620      	mov	r0, r4
 800ef54:	f7ff ff8a 	bl	800ee6c <L_shift>
 800ef58:	4544      	cmp	r4, r8
 800ef5a:	d936      	bls.n	800efca <__hexnan+0x112>
 800ef5c:	f1a8 0204 	sub.w	r2, r8, #4
 800ef60:	4623      	mov	r3, r4
 800ef62:	f853 1b04 	ldr.w	r1, [r3], #4
 800ef66:	f842 1f04 	str.w	r1, [r2, #4]!
 800ef6a:	429f      	cmp	r7, r3
 800ef6c:	d2f9      	bcs.n	800ef62 <__hexnan+0xaa>
 800ef6e:	1b3b      	subs	r3, r7, r4
 800ef70:	f023 0303 	bic.w	r3, r3, #3
 800ef74:	3304      	adds	r3, #4
 800ef76:	3401      	adds	r4, #1
 800ef78:	3e03      	subs	r6, #3
 800ef7a:	42b4      	cmp	r4, r6
 800ef7c:	bf88      	it	hi
 800ef7e:	2304      	movhi	r3, #4
 800ef80:	4443      	add	r3, r8
 800ef82:	2200      	movs	r2, #0
 800ef84:	f843 2b04 	str.w	r2, [r3], #4
 800ef88:	429f      	cmp	r7, r3
 800ef8a:	d2fb      	bcs.n	800ef84 <__hexnan+0xcc>
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	b91b      	cbnz	r3, 800ef98 <__hexnan+0xe0>
 800ef90:	4547      	cmp	r7, r8
 800ef92:	d128      	bne.n	800efe6 <__hexnan+0x12e>
 800ef94:	2301      	movs	r3, #1
 800ef96:	603b      	str	r3, [r7, #0]
 800ef98:	2005      	movs	r0, #5
 800ef9a:	b007      	add	sp, #28
 800ef9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa0:	3501      	adds	r5, #1
 800efa2:	2d08      	cmp	r5, #8
 800efa4:	f10b 0b01 	add.w	fp, fp, #1
 800efa8:	dd06      	ble.n	800efb8 <__hexnan+0x100>
 800efaa:	4544      	cmp	r4, r8
 800efac:	d9c1      	bls.n	800ef32 <__hexnan+0x7a>
 800efae:	2300      	movs	r3, #0
 800efb0:	f844 3c04 	str.w	r3, [r4, #-4]
 800efb4:	2501      	movs	r5, #1
 800efb6:	3c04      	subs	r4, #4
 800efb8:	6822      	ldr	r2, [r4, #0]
 800efba:	f000 000f 	and.w	r0, r0, #15
 800efbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800efc2:	6020      	str	r0, [r4, #0]
 800efc4:	e7b5      	b.n	800ef32 <__hexnan+0x7a>
 800efc6:	2508      	movs	r5, #8
 800efc8:	e7b3      	b.n	800ef32 <__hexnan+0x7a>
 800efca:	9b01      	ldr	r3, [sp, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d0dd      	beq.n	800ef8c <__hexnan+0xd4>
 800efd0:	f1c3 0320 	rsb	r3, r3, #32
 800efd4:	f04f 32ff 	mov.w	r2, #4294967295
 800efd8:	40da      	lsrs	r2, r3
 800efda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800efde:	4013      	ands	r3, r2
 800efe0:	f846 3c04 	str.w	r3, [r6, #-4]
 800efe4:	e7d2      	b.n	800ef8c <__hexnan+0xd4>
 800efe6:	3f04      	subs	r7, #4
 800efe8:	e7d0      	b.n	800ef8c <__hexnan+0xd4>
 800efea:	2004      	movs	r0, #4
 800efec:	e7d5      	b.n	800ef9a <__hexnan+0xe2>

0800efee <__ascii_mbtowc>:
 800efee:	b082      	sub	sp, #8
 800eff0:	b901      	cbnz	r1, 800eff4 <__ascii_mbtowc+0x6>
 800eff2:	a901      	add	r1, sp, #4
 800eff4:	b142      	cbz	r2, 800f008 <__ascii_mbtowc+0x1a>
 800eff6:	b14b      	cbz	r3, 800f00c <__ascii_mbtowc+0x1e>
 800eff8:	7813      	ldrb	r3, [r2, #0]
 800effa:	600b      	str	r3, [r1, #0]
 800effc:	7812      	ldrb	r2, [r2, #0]
 800effe:	1e10      	subs	r0, r2, #0
 800f000:	bf18      	it	ne
 800f002:	2001      	movne	r0, #1
 800f004:	b002      	add	sp, #8
 800f006:	4770      	bx	lr
 800f008:	4610      	mov	r0, r2
 800f00a:	e7fb      	b.n	800f004 <__ascii_mbtowc+0x16>
 800f00c:	f06f 0001 	mvn.w	r0, #1
 800f010:	e7f8      	b.n	800f004 <__ascii_mbtowc+0x16>
	...

0800f014 <_Balloc>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	69c6      	ldr	r6, [r0, #28]
 800f018:	4604      	mov	r4, r0
 800f01a:	460d      	mov	r5, r1
 800f01c:	b976      	cbnz	r6, 800f03c <_Balloc+0x28>
 800f01e:	2010      	movs	r0, #16
 800f020:	f7fc fd36 	bl	800ba90 <malloc>
 800f024:	4602      	mov	r2, r0
 800f026:	61e0      	str	r0, [r4, #28]
 800f028:	b920      	cbnz	r0, 800f034 <_Balloc+0x20>
 800f02a:	4b18      	ldr	r3, [pc, #96]	@ (800f08c <_Balloc+0x78>)
 800f02c:	4818      	ldr	r0, [pc, #96]	@ (800f090 <_Balloc+0x7c>)
 800f02e:	216b      	movs	r1, #107	@ 0x6b
 800f030:	f001 f90e 	bl	8010250 <__assert_func>
 800f034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f038:	6006      	str	r6, [r0, #0]
 800f03a:	60c6      	str	r6, [r0, #12]
 800f03c:	69e6      	ldr	r6, [r4, #28]
 800f03e:	68f3      	ldr	r3, [r6, #12]
 800f040:	b183      	cbz	r3, 800f064 <_Balloc+0x50>
 800f042:	69e3      	ldr	r3, [r4, #28]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f04a:	b9b8      	cbnz	r0, 800f07c <_Balloc+0x68>
 800f04c:	2101      	movs	r1, #1
 800f04e:	fa01 f605 	lsl.w	r6, r1, r5
 800f052:	1d72      	adds	r2, r6, #5
 800f054:	0092      	lsls	r2, r2, #2
 800f056:	4620      	mov	r0, r4
 800f058:	f001 f918 	bl	801028c <_calloc_r>
 800f05c:	b160      	cbz	r0, 800f078 <_Balloc+0x64>
 800f05e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f062:	e00e      	b.n	800f082 <_Balloc+0x6e>
 800f064:	2221      	movs	r2, #33	@ 0x21
 800f066:	2104      	movs	r1, #4
 800f068:	4620      	mov	r0, r4
 800f06a:	f001 f90f 	bl	801028c <_calloc_r>
 800f06e:	69e3      	ldr	r3, [r4, #28]
 800f070:	60f0      	str	r0, [r6, #12]
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d1e4      	bne.n	800f042 <_Balloc+0x2e>
 800f078:	2000      	movs	r0, #0
 800f07a:	bd70      	pop	{r4, r5, r6, pc}
 800f07c:	6802      	ldr	r2, [r0, #0]
 800f07e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f082:	2300      	movs	r3, #0
 800f084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f088:	e7f7      	b.n	800f07a <_Balloc+0x66>
 800f08a:	bf00      	nop
 800f08c:	08011eff 	.word	0x08011eff
 800f090:	08011fdf 	.word	0x08011fdf

0800f094 <_Bfree>:
 800f094:	b570      	push	{r4, r5, r6, lr}
 800f096:	69c6      	ldr	r6, [r0, #28]
 800f098:	4605      	mov	r5, r0
 800f09a:	460c      	mov	r4, r1
 800f09c:	b976      	cbnz	r6, 800f0bc <_Bfree+0x28>
 800f09e:	2010      	movs	r0, #16
 800f0a0:	f7fc fcf6 	bl	800ba90 <malloc>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	61e8      	str	r0, [r5, #28]
 800f0a8:	b920      	cbnz	r0, 800f0b4 <_Bfree+0x20>
 800f0aa:	4b09      	ldr	r3, [pc, #36]	@ (800f0d0 <_Bfree+0x3c>)
 800f0ac:	4809      	ldr	r0, [pc, #36]	@ (800f0d4 <_Bfree+0x40>)
 800f0ae:	218f      	movs	r1, #143	@ 0x8f
 800f0b0:	f001 f8ce 	bl	8010250 <__assert_func>
 800f0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0b8:	6006      	str	r6, [r0, #0]
 800f0ba:	60c6      	str	r6, [r0, #12]
 800f0bc:	b13c      	cbz	r4, 800f0ce <_Bfree+0x3a>
 800f0be:	69eb      	ldr	r3, [r5, #28]
 800f0c0:	6862      	ldr	r2, [r4, #4]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0c8:	6021      	str	r1, [r4, #0]
 800f0ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0ce:	bd70      	pop	{r4, r5, r6, pc}
 800f0d0:	08011eff 	.word	0x08011eff
 800f0d4:	08011fdf 	.word	0x08011fdf

0800f0d8 <__multadd>:
 800f0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0dc:	690d      	ldr	r5, [r1, #16]
 800f0de:	4607      	mov	r7, r0
 800f0e0:	460c      	mov	r4, r1
 800f0e2:	461e      	mov	r6, r3
 800f0e4:	f101 0c14 	add.w	ip, r1, #20
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	f8dc 3000 	ldr.w	r3, [ip]
 800f0ee:	b299      	uxth	r1, r3
 800f0f0:	fb02 6101 	mla	r1, r2, r1, r6
 800f0f4:	0c1e      	lsrs	r6, r3, #16
 800f0f6:	0c0b      	lsrs	r3, r1, #16
 800f0f8:	fb02 3306 	mla	r3, r2, r6, r3
 800f0fc:	b289      	uxth	r1, r1
 800f0fe:	3001      	adds	r0, #1
 800f100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f104:	4285      	cmp	r5, r0
 800f106:	f84c 1b04 	str.w	r1, [ip], #4
 800f10a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f10e:	dcec      	bgt.n	800f0ea <__multadd+0x12>
 800f110:	b30e      	cbz	r6, 800f156 <__multadd+0x7e>
 800f112:	68a3      	ldr	r3, [r4, #8]
 800f114:	42ab      	cmp	r3, r5
 800f116:	dc19      	bgt.n	800f14c <__multadd+0x74>
 800f118:	6861      	ldr	r1, [r4, #4]
 800f11a:	4638      	mov	r0, r7
 800f11c:	3101      	adds	r1, #1
 800f11e:	f7ff ff79 	bl	800f014 <_Balloc>
 800f122:	4680      	mov	r8, r0
 800f124:	b928      	cbnz	r0, 800f132 <__multadd+0x5a>
 800f126:	4602      	mov	r2, r0
 800f128:	4b0c      	ldr	r3, [pc, #48]	@ (800f15c <__multadd+0x84>)
 800f12a:	480d      	ldr	r0, [pc, #52]	@ (800f160 <__multadd+0x88>)
 800f12c:	21ba      	movs	r1, #186	@ 0xba
 800f12e:	f001 f88f 	bl	8010250 <__assert_func>
 800f132:	6922      	ldr	r2, [r4, #16]
 800f134:	3202      	adds	r2, #2
 800f136:	f104 010c 	add.w	r1, r4, #12
 800f13a:	0092      	lsls	r2, r2, #2
 800f13c:	300c      	adds	r0, #12
 800f13e:	f7fe fd69 	bl	800dc14 <memcpy>
 800f142:	4621      	mov	r1, r4
 800f144:	4638      	mov	r0, r7
 800f146:	f7ff ffa5 	bl	800f094 <_Bfree>
 800f14a:	4644      	mov	r4, r8
 800f14c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f150:	3501      	adds	r5, #1
 800f152:	615e      	str	r6, [r3, #20]
 800f154:	6125      	str	r5, [r4, #16]
 800f156:	4620      	mov	r0, r4
 800f158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f15c:	08011f6e 	.word	0x08011f6e
 800f160:	08011fdf 	.word	0x08011fdf

0800f164 <__s2b>:
 800f164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f168:	460c      	mov	r4, r1
 800f16a:	4615      	mov	r5, r2
 800f16c:	461f      	mov	r7, r3
 800f16e:	2209      	movs	r2, #9
 800f170:	3308      	adds	r3, #8
 800f172:	4606      	mov	r6, r0
 800f174:	fb93 f3f2 	sdiv	r3, r3, r2
 800f178:	2100      	movs	r1, #0
 800f17a:	2201      	movs	r2, #1
 800f17c:	429a      	cmp	r2, r3
 800f17e:	db09      	blt.n	800f194 <__s2b+0x30>
 800f180:	4630      	mov	r0, r6
 800f182:	f7ff ff47 	bl	800f014 <_Balloc>
 800f186:	b940      	cbnz	r0, 800f19a <__s2b+0x36>
 800f188:	4602      	mov	r2, r0
 800f18a:	4b19      	ldr	r3, [pc, #100]	@ (800f1f0 <__s2b+0x8c>)
 800f18c:	4819      	ldr	r0, [pc, #100]	@ (800f1f4 <__s2b+0x90>)
 800f18e:	21d3      	movs	r1, #211	@ 0xd3
 800f190:	f001 f85e 	bl	8010250 <__assert_func>
 800f194:	0052      	lsls	r2, r2, #1
 800f196:	3101      	adds	r1, #1
 800f198:	e7f0      	b.n	800f17c <__s2b+0x18>
 800f19a:	9b08      	ldr	r3, [sp, #32]
 800f19c:	6143      	str	r3, [r0, #20]
 800f19e:	2d09      	cmp	r5, #9
 800f1a0:	f04f 0301 	mov.w	r3, #1
 800f1a4:	6103      	str	r3, [r0, #16]
 800f1a6:	dd16      	ble.n	800f1d6 <__s2b+0x72>
 800f1a8:	f104 0909 	add.w	r9, r4, #9
 800f1ac:	46c8      	mov	r8, r9
 800f1ae:	442c      	add	r4, r5
 800f1b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f1b4:	4601      	mov	r1, r0
 800f1b6:	3b30      	subs	r3, #48	@ 0x30
 800f1b8:	220a      	movs	r2, #10
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	f7ff ff8c 	bl	800f0d8 <__multadd>
 800f1c0:	45a0      	cmp	r8, r4
 800f1c2:	d1f5      	bne.n	800f1b0 <__s2b+0x4c>
 800f1c4:	f1a5 0408 	sub.w	r4, r5, #8
 800f1c8:	444c      	add	r4, r9
 800f1ca:	1b2d      	subs	r5, r5, r4
 800f1cc:	1963      	adds	r3, r4, r5
 800f1ce:	42bb      	cmp	r3, r7
 800f1d0:	db04      	blt.n	800f1dc <__s2b+0x78>
 800f1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d6:	340a      	adds	r4, #10
 800f1d8:	2509      	movs	r5, #9
 800f1da:	e7f6      	b.n	800f1ca <__s2b+0x66>
 800f1dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1e0:	4601      	mov	r1, r0
 800f1e2:	3b30      	subs	r3, #48	@ 0x30
 800f1e4:	220a      	movs	r2, #10
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f7ff ff76 	bl	800f0d8 <__multadd>
 800f1ec:	e7ee      	b.n	800f1cc <__s2b+0x68>
 800f1ee:	bf00      	nop
 800f1f0:	08011f6e 	.word	0x08011f6e
 800f1f4:	08011fdf 	.word	0x08011fdf

0800f1f8 <__hi0bits>:
 800f1f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	bf36      	itet	cc
 800f200:	0403      	lslcc	r3, r0, #16
 800f202:	2000      	movcs	r0, #0
 800f204:	2010      	movcc	r0, #16
 800f206:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f20a:	bf3c      	itt	cc
 800f20c:	021b      	lslcc	r3, r3, #8
 800f20e:	3008      	addcc	r0, #8
 800f210:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f214:	bf3c      	itt	cc
 800f216:	011b      	lslcc	r3, r3, #4
 800f218:	3004      	addcc	r0, #4
 800f21a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f21e:	bf3c      	itt	cc
 800f220:	009b      	lslcc	r3, r3, #2
 800f222:	3002      	addcc	r0, #2
 800f224:	2b00      	cmp	r3, #0
 800f226:	db05      	blt.n	800f234 <__hi0bits+0x3c>
 800f228:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f22c:	f100 0001 	add.w	r0, r0, #1
 800f230:	bf08      	it	eq
 800f232:	2020      	moveq	r0, #32
 800f234:	4770      	bx	lr

0800f236 <__lo0bits>:
 800f236:	6803      	ldr	r3, [r0, #0]
 800f238:	4602      	mov	r2, r0
 800f23a:	f013 0007 	ands.w	r0, r3, #7
 800f23e:	d00b      	beq.n	800f258 <__lo0bits+0x22>
 800f240:	07d9      	lsls	r1, r3, #31
 800f242:	d421      	bmi.n	800f288 <__lo0bits+0x52>
 800f244:	0798      	lsls	r0, r3, #30
 800f246:	bf49      	itett	mi
 800f248:	085b      	lsrmi	r3, r3, #1
 800f24a:	089b      	lsrpl	r3, r3, #2
 800f24c:	2001      	movmi	r0, #1
 800f24e:	6013      	strmi	r3, [r2, #0]
 800f250:	bf5c      	itt	pl
 800f252:	6013      	strpl	r3, [r2, #0]
 800f254:	2002      	movpl	r0, #2
 800f256:	4770      	bx	lr
 800f258:	b299      	uxth	r1, r3
 800f25a:	b909      	cbnz	r1, 800f260 <__lo0bits+0x2a>
 800f25c:	0c1b      	lsrs	r3, r3, #16
 800f25e:	2010      	movs	r0, #16
 800f260:	b2d9      	uxtb	r1, r3
 800f262:	b909      	cbnz	r1, 800f268 <__lo0bits+0x32>
 800f264:	3008      	adds	r0, #8
 800f266:	0a1b      	lsrs	r3, r3, #8
 800f268:	0719      	lsls	r1, r3, #28
 800f26a:	bf04      	itt	eq
 800f26c:	091b      	lsreq	r3, r3, #4
 800f26e:	3004      	addeq	r0, #4
 800f270:	0799      	lsls	r1, r3, #30
 800f272:	bf04      	itt	eq
 800f274:	089b      	lsreq	r3, r3, #2
 800f276:	3002      	addeq	r0, #2
 800f278:	07d9      	lsls	r1, r3, #31
 800f27a:	d403      	bmi.n	800f284 <__lo0bits+0x4e>
 800f27c:	085b      	lsrs	r3, r3, #1
 800f27e:	f100 0001 	add.w	r0, r0, #1
 800f282:	d003      	beq.n	800f28c <__lo0bits+0x56>
 800f284:	6013      	str	r3, [r2, #0]
 800f286:	4770      	bx	lr
 800f288:	2000      	movs	r0, #0
 800f28a:	4770      	bx	lr
 800f28c:	2020      	movs	r0, #32
 800f28e:	4770      	bx	lr

0800f290 <__i2b>:
 800f290:	b510      	push	{r4, lr}
 800f292:	460c      	mov	r4, r1
 800f294:	2101      	movs	r1, #1
 800f296:	f7ff febd 	bl	800f014 <_Balloc>
 800f29a:	4602      	mov	r2, r0
 800f29c:	b928      	cbnz	r0, 800f2aa <__i2b+0x1a>
 800f29e:	4b05      	ldr	r3, [pc, #20]	@ (800f2b4 <__i2b+0x24>)
 800f2a0:	4805      	ldr	r0, [pc, #20]	@ (800f2b8 <__i2b+0x28>)
 800f2a2:	f240 1145 	movw	r1, #325	@ 0x145
 800f2a6:	f000 ffd3 	bl	8010250 <__assert_func>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	6144      	str	r4, [r0, #20]
 800f2ae:	6103      	str	r3, [r0, #16]
 800f2b0:	bd10      	pop	{r4, pc}
 800f2b2:	bf00      	nop
 800f2b4:	08011f6e 	.word	0x08011f6e
 800f2b8:	08011fdf 	.word	0x08011fdf

0800f2bc <__multiply>:
 800f2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c0:	4614      	mov	r4, r2
 800f2c2:	690a      	ldr	r2, [r1, #16]
 800f2c4:	6923      	ldr	r3, [r4, #16]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	bfa8      	it	ge
 800f2ca:	4623      	movge	r3, r4
 800f2cc:	460f      	mov	r7, r1
 800f2ce:	bfa4      	itt	ge
 800f2d0:	460c      	movge	r4, r1
 800f2d2:	461f      	movge	r7, r3
 800f2d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f2d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f2dc:	68a3      	ldr	r3, [r4, #8]
 800f2de:	6861      	ldr	r1, [r4, #4]
 800f2e0:	eb0a 0609 	add.w	r6, sl, r9
 800f2e4:	42b3      	cmp	r3, r6
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	bfb8      	it	lt
 800f2ea:	3101      	addlt	r1, #1
 800f2ec:	f7ff fe92 	bl	800f014 <_Balloc>
 800f2f0:	b930      	cbnz	r0, 800f300 <__multiply+0x44>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	4b44      	ldr	r3, [pc, #272]	@ (800f408 <__multiply+0x14c>)
 800f2f6:	4845      	ldr	r0, [pc, #276]	@ (800f40c <__multiply+0x150>)
 800f2f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f2fc:	f000 ffa8 	bl	8010250 <__assert_func>
 800f300:	f100 0514 	add.w	r5, r0, #20
 800f304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f308:	462b      	mov	r3, r5
 800f30a:	2200      	movs	r2, #0
 800f30c:	4543      	cmp	r3, r8
 800f30e:	d321      	bcc.n	800f354 <__multiply+0x98>
 800f310:	f107 0114 	add.w	r1, r7, #20
 800f314:	f104 0214 	add.w	r2, r4, #20
 800f318:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f31c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f320:	9302      	str	r3, [sp, #8]
 800f322:	1b13      	subs	r3, r2, r4
 800f324:	3b15      	subs	r3, #21
 800f326:	f023 0303 	bic.w	r3, r3, #3
 800f32a:	3304      	adds	r3, #4
 800f32c:	f104 0715 	add.w	r7, r4, #21
 800f330:	42ba      	cmp	r2, r7
 800f332:	bf38      	it	cc
 800f334:	2304      	movcc	r3, #4
 800f336:	9301      	str	r3, [sp, #4]
 800f338:	9b02      	ldr	r3, [sp, #8]
 800f33a:	9103      	str	r1, [sp, #12]
 800f33c:	428b      	cmp	r3, r1
 800f33e:	d80c      	bhi.n	800f35a <__multiply+0x9e>
 800f340:	2e00      	cmp	r6, #0
 800f342:	dd03      	ble.n	800f34c <__multiply+0x90>
 800f344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d05b      	beq.n	800f404 <__multiply+0x148>
 800f34c:	6106      	str	r6, [r0, #16]
 800f34e:	b005      	add	sp, #20
 800f350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f354:	f843 2b04 	str.w	r2, [r3], #4
 800f358:	e7d8      	b.n	800f30c <__multiply+0x50>
 800f35a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f35e:	f1ba 0f00 	cmp.w	sl, #0
 800f362:	d024      	beq.n	800f3ae <__multiply+0xf2>
 800f364:	f104 0e14 	add.w	lr, r4, #20
 800f368:	46a9      	mov	r9, r5
 800f36a:	f04f 0c00 	mov.w	ip, #0
 800f36e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f372:	f8d9 3000 	ldr.w	r3, [r9]
 800f376:	fa1f fb87 	uxth.w	fp, r7
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f380:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f384:	f8d9 7000 	ldr.w	r7, [r9]
 800f388:	4463      	add	r3, ip
 800f38a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f38e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f392:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f396:	b29b      	uxth	r3, r3
 800f398:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f39c:	4572      	cmp	r2, lr
 800f39e:	f849 3b04 	str.w	r3, [r9], #4
 800f3a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f3a6:	d8e2      	bhi.n	800f36e <__multiply+0xb2>
 800f3a8:	9b01      	ldr	r3, [sp, #4]
 800f3aa:	f845 c003 	str.w	ip, [r5, r3]
 800f3ae:	9b03      	ldr	r3, [sp, #12]
 800f3b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f3b4:	3104      	adds	r1, #4
 800f3b6:	f1b9 0f00 	cmp.w	r9, #0
 800f3ba:	d021      	beq.n	800f400 <__multiply+0x144>
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	f104 0c14 	add.w	ip, r4, #20
 800f3c2:	46ae      	mov	lr, r5
 800f3c4:	f04f 0a00 	mov.w	sl, #0
 800f3c8:	f8bc b000 	ldrh.w	fp, [ip]
 800f3cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f3d0:	fb09 770b 	mla	r7, r9, fp, r7
 800f3d4:	4457      	add	r7, sl
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f3dc:	f84e 3b04 	str.w	r3, [lr], #4
 800f3e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f3e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3e8:	f8be 3000 	ldrh.w	r3, [lr]
 800f3ec:	fb09 330a 	mla	r3, r9, sl, r3
 800f3f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f3f4:	4562      	cmp	r2, ip
 800f3f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3fa:	d8e5      	bhi.n	800f3c8 <__multiply+0x10c>
 800f3fc:	9f01      	ldr	r7, [sp, #4]
 800f3fe:	51eb      	str	r3, [r5, r7]
 800f400:	3504      	adds	r5, #4
 800f402:	e799      	b.n	800f338 <__multiply+0x7c>
 800f404:	3e01      	subs	r6, #1
 800f406:	e79b      	b.n	800f340 <__multiply+0x84>
 800f408:	08011f6e 	.word	0x08011f6e
 800f40c:	08011fdf 	.word	0x08011fdf

0800f410 <__pow5mult>:
 800f410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f414:	4615      	mov	r5, r2
 800f416:	f012 0203 	ands.w	r2, r2, #3
 800f41a:	4607      	mov	r7, r0
 800f41c:	460e      	mov	r6, r1
 800f41e:	d007      	beq.n	800f430 <__pow5mult+0x20>
 800f420:	4c25      	ldr	r4, [pc, #148]	@ (800f4b8 <__pow5mult+0xa8>)
 800f422:	3a01      	subs	r2, #1
 800f424:	2300      	movs	r3, #0
 800f426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f42a:	f7ff fe55 	bl	800f0d8 <__multadd>
 800f42e:	4606      	mov	r6, r0
 800f430:	10ad      	asrs	r5, r5, #2
 800f432:	d03d      	beq.n	800f4b0 <__pow5mult+0xa0>
 800f434:	69fc      	ldr	r4, [r7, #28]
 800f436:	b97c      	cbnz	r4, 800f458 <__pow5mult+0x48>
 800f438:	2010      	movs	r0, #16
 800f43a:	f7fc fb29 	bl	800ba90 <malloc>
 800f43e:	4602      	mov	r2, r0
 800f440:	61f8      	str	r0, [r7, #28]
 800f442:	b928      	cbnz	r0, 800f450 <__pow5mult+0x40>
 800f444:	4b1d      	ldr	r3, [pc, #116]	@ (800f4bc <__pow5mult+0xac>)
 800f446:	481e      	ldr	r0, [pc, #120]	@ (800f4c0 <__pow5mult+0xb0>)
 800f448:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f44c:	f000 ff00 	bl	8010250 <__assert_func>
 800f450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f454:	6004      	str	r4, [r0, #0]
 800f456:	60c4      	str	r4, [r0, #12]
 800f458:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f45c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f460:	b94c      	cbnz	r4, 800f476 <__pow5mult+0x66>
 800f462:	f240 2171 	movw	r1, #625	@ 0x271
 800f466:	4638      	mov	r0, r7
 800f468:	f7ff ff12 	bl	800f290 <__i2b>
 800f46c:	2300      	movs	r3, #0
 800f46e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f472:	4604      	mov	r4, r0
 800f474:	6003      	str	r3, [r0, #0]
 800f476:	f04f 0900 	mov.w	r9, #0
 800f47a:	07eb      	lsls	r3, r5, #31
 800f47c:	d50a      	bpl.n	800f494 <__pow5mult+0x84>
 800f47e:	4631      	mov	r1, r6
 800f480:	4622      	mov	r2, r4
 800f482:	4638      	mov	r0, r7
 800f484:	f7ff ff1a 	bl	800f2bc <__multiply>
 800f488:	4631      	mov	r1, r6
 800f48a:	4680      	mov	r8, r0
 800f48c:	4638      	mov	r0, r7
 800f48e:	f7ff fe01 	bl	800f094 <_Bfree>
 800f492:	4646      	mov	r6, r8
 800f494:	106d      	asrs	r5, r5, #1
 800f496:	d00b      	beq.n	800f4b0 <__pow5mult+0xa0>
 800f498:	6820      	ldr	r0, [r4, #0]
 800f49a:	b938      	cbnz	r0, 800f4ac <__pow5mult+0x9c>
 800f49c:	4622      	mov	r2, r4
 800f49e:	4621      	mov	r1, r4
 800f4a0:	4638      	mov	r0, r7
 800f4a2:	f7ff ff0b 	bl	800f2bc <__multiply>
 800f4a6:	6020      	str	r0, [r4, #0]
 800f4a8:	f8c0 9000 	str.w	r9, [r0]
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	e7e4      	b.n	800f47a <__pow5mult+0x6a>
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4b6:	bf00      	nop
 800f4b8:	08012038 	.word	0x08012038
 800f4bc:	08011eff 	.word	0x08011eff
 800f4c0:	08011fdf 	.word	0x08011fdf

0800f4c4 <__lshift>:
 800f4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	6849      	ldr	r1, [r1, #4]
 800f4cc:	6923      	ldr	r3, [r4, #16]
 800f4ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f4d2:	68a3      	ldr	r3, [r4, #8]
 800f4d4:	4607      	mov	r7, r0
 800f4d6:	4691      	mov	r9, r2
 800f4d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4dc:	f108 0601 	add.w	r6, r8, #1
 800f4e0:	42b3      	cmp	r3, r6
 800f4e2:	db0b      	blt.n	800f4fc <__lshift+0x38>
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f7ff fd95 	bl	800f014 <_Balloc>
 800f4ea:	4605      	mov	r5, r0
 800f4ec:	b948      	cbnz	r0, 800f502 <__lshift+0x3e>
 800f4ee:	4602      	mov	r2, r0
 800f4f0:	4b28      	ldr	r3, [pc, #160]	@ (800f594 <__lshift+0xd0>)
 800f4f2:	4829      	ldr	r0, [pc, #164]	@ (800f598 <__lshift+0xd4>)
 800f4f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f4f8:	f000 feaa 	bl	8010250 <__assert_func>
 800f4fc:	3101      	adds	r1, #1
 800f4fe:	005b      	lsls	r3, r3, #1
 800f500:	e7ee      	b.n	800f4e0 <__lshift+0x1c>
 800f502:	2300      	movs	r3, #0
 800f504:	f100 0114 	add.w	r1, r0, #20
 800f508:	f100 0210 	add.w	r2, r0, #16
 800f50c:	4618      	mov	r0, r3
 800f50e:	4553      	cmp	r3, sl
 800f510:	db33      	blt.n	800f57a <__lshift+0xb6>
 800f512:	6920      	ldr	r0, [r4, #16]
 800f514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f518:	f104 0314 	add.w	r3, r4, #20
 800f51c:	f019 091f 	ands.w	r9, r9, #31
 800f520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f528:	d02b      	beq.n	800f582 <__lshift+0xbe>
 800f52a:	f1c9 0e20 	rsb	lr, r9, #32
 800f52e:	468a      	mov	sl, r1
 800f530:	2200      	movs	r2, #0
 800f532:	6818      	ldr	r0, [r3, #0]
 800f534:	fa00 f009 	lsl.w	r0, r0, r9
 800f538:	4310      	orrs	r0, r2
 800f53a:	f84a 0b04 	str.w	r0, [sl], #4
 800f53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f542:	459c      	cmp	ip, r3
 800f544:	fa22 f20e 	lsr.w	r2, r2, lr
 800f548:	d8f3      	bhi.n	800f532 <__lshift+0x6e>
 800f54a:	ebac 0304 	sub.w	r3, ip, r4
 800f54e:	3b15      	subs	r3, #21
 800f550:	f023 0303 	bic.w	r3, r3, #3
 800f554:	3304      	adds	r3, #4
 800f556:	f104 0015 	add.w	r0, r4, #21
 800f55a:	4584      	cmp	ip, r0
 800f55c:	bf38      	it	cc
 800f55e:	2304      	movcc	r3, #4
 800f560:	50ca      	str	r2, [r1, r3]
 800f562:	b10a      	cbz	r2, 800f568 <__lshift+0xa4>
 800f564:	f108 0602 	add.w	r6, r8, #2
 800f568:	3e01      	subs	r6, #1
 800f56a:	4638      	mov	r0, r7
 800f56c:	612e      	str	r6, [r5, #16]
 800f56e:	4621      	mov	r1, r4
 800f570:	f7ff fd90 	bl	800f094 <_Bfree>
 800f574:	4628      	mov	r0, r5
 800f576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f57a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f57e:	3301      	adds	r3, #1
 800f580:	e7c5      	b.n	800f50e <__lshift+0x4a>
 800f582:	3904      	subs	r1, #4
 800f584:	f853 2b04 	ldr.w	r2, [r3], #4
 800f588:	f841 2f04 	str.w	r2, [r1, #4]!
 800f58c:	459c      	cmp	ip, r3
 800f58e:	d8f9      	bhi.n	800f584 <__lshift+0xc0>
 800f590:	e7ea      	b.n	800f568 <__lshift+0xa4>
 800f592:	bf00      	nop
 800f594:	08011f6e 	.word	0x08011f6e
 800f598:	08011fdf 	.word	0x08011fdf

0800f59c <__mcmp>:
 800f59c:	690a      	ldr	r2, [r1, #16]
 800f59e:	4603      	mov	r3, r0
 800f5a0:	6900      	ldr	r0, [r0, #16]
 800f5a2:	1a80      	subs	r0, r0, r2
 800f5a4:	b530      	push	{r4, r5, lr}
 800f5a6:	d10e      	bne.n	800f5c6 <__mcmp+0x2a>
 800f5a8:	3314      	adds	r3, #20
 800f5aa:	3114      	adds	r1, #20
 800f5ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f5b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f5b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f5b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f5bc:	4295      	cmp	r5, r2
 800f5be:	d003      	beq.n	800f5c8 <__mcmp+0x2c>
 800f5c0:	d205      	bcs.n	800f5ce <__mcmp+0x32>
 800f5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5c6:	bd30      	pop	{r4, r5, pc}
 800f5c8:	42a3      	cmp	r3, r4
 800f5ca:	d3f3      	bcc.n	800f5b4 <__mcmp+0x18>
 800f5cc:	e7fb      	b.n	800f5c6 <__mcmp+0x2a>
 800f5ce:	2001      	movs	r0, #1
 800f5d0:	e7f9      	b.n	800f5c6 <__mcmp+0x2a>
	...

0800f5d4 <__mdiff>:
 800f5d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d8:	4689      	mov	r9, r1
 800f5da:	4606      	mov	r6, r0
 800f5dc:	4611      	mov	r1, r2
 800f5de:	4648      	mov	r0, r9
 800f5e0:	4614      	mov	r4, r2
 800f5e2:	f7ff ffdb 	bl	800f59c <__mcmp>
 800f5e6:	1e05      	subs	r5, r0, #0
 800f5e8:	d112      	bne.n	800f610 <__mdiff+0x3c>
 800f5ea:	4629      	mov	r1, r5
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f7ff fd11 	bl	800f014 <_Balloc>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	b928      	cbnz	r0, 800f602 <__mdiff+0x2e>
 800f5f6:	4b3f      	ldr	r3, [pc, #252]	@ (800f6f4 <__mdiff+0x120>)
 800f5f8:	f240 2137 	movw	r1, #567	@ 0x237
 800f5fc:	483e      	ldr	r0, [pc, #248]	@ (800f6f8 <__mdiff+0x124>)
 800f5fe:	f000 fe27 	bl	8010250 <__assert_func>
 800f602:	2301      	movs	r3, #1
 800f604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f608:	4610      	mov	r0, r2
 800f60a:	b003      	add	sp, #12
 800f60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f610:	bfbc      	itt	lt
 800f612:	464b      	movlt	r3, r9
 800f614:	46a1      	movlt	r9, r4
 800f616:	4630      	mov	r0, r6
 800f618:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f61c:	bfba      	itte	lt
 800f61e:	461c      	movlt	r4, r3
 800f620:	2501      	movlt	r5, #1
 800f622:	2500      	movge	r5, #0
 800f624:	f7ff fcf6 	bl	800f014 <_Balloc>
 800f628:	4602      	mov	r2, r0
 800f62a:	b918      	cbnz	r0, 800f634 <__mdiff+0x60>
 800f62c:	4b31      	ldr	r3, [pc, #196]	@ (800f6f4 <__mdiff+0x120>)
 800f62e:	f240 2145 	movw	r1, #581	@ 0x245
 800f632:	e7e3      	b.n	800f5fc <__mdiff+0x28>
 800f634:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f638:	6926      	ldr	r6, [r4, #16]
 800f63a:	60c5      	str	r5, [r0, #12]
 800f63c:	f109 0310 	add.w	r3, r9, #16
 800f640:	f109 0514 	add.w	r5, r9, #20
 800f644:	f104 0e14 	add.w	lr, r4, #20
 800f648:	f100 0b14 	add.w	fp, r0, #20
 800f64c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f650:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f654:	9301      	str	r3, [sp, #4]
 800f656:	46d9      	mov	r9, fp
 800f658:	f04f 0c00 	mov.w	ip, #0
 800f65c:	9b01      	ldr	r3, [sp, #4]
 800f65e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f662:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f666:	9301      	str	r3, [sp, #4]
 800f668:	fa1f f38a 	uxth.w	r3, sl
 800f66c:	4619      	mov	r1, r3
 800f66e:	b283      	uxth	r3, r0
 800f670:	1acb      	subs	r3, r1, r3
 800f672:	0c00      	lsrs	r0, r0, #16
 800f674:	4463      	add	r3, ip
 800f676:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f67a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f67e:	b29b      	uxth	r3, r3
 800f680:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f684:	4576      	cmp	r6, lr
 800f686:	f849 3b04 	str.w	r3, [r9], #4
 800f68a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f68e:	d8e5      	bhi.n	800f65c <__mdiff+0x88>
 800f690:	1b33      	subs	r3, r6, r4
 800f692:	3b15      	subs	r3, #21
 800f694:	f023 0303 	bic.w	r3, r3, #3
 800f698:	3415      	adds	r4, #21
 800f69a:	3304      	adds	r3, #4
 800f69c:	42a6      	cmp	r6, r4
 800f69e:	bf38      	it	cc
 800f6a0:	2304      	movcc	r3, #4
 800f6a2:	441d      	add	r5, r3
 800f6a4:	445b      	add	r3, fp
 800f6a6:	461e      	mov	r6, r3
 800f6a8:	462c      	mov	r4, r5
 800f6aa:	4544      	cmp	r4, r8
 800f6ac:	d30e      	bcc.n	800f6cc <__mdiff+0xf8>
 800f6ae:	f108 0103 	add.w	r1, r8, #3
 800f6b2:	1b49      	subs	r1, r1, r5
 800f6b4:	f021 0103 	bic.w	r1, r1, #3
 800f6b8:	3d03      	subs	r5, #3
 800f6ba:	45a8      	cmp	r8, r5
 800f6bc:	bf38      	it	cc
 800f6be:	2100      	movcc	r1, #0
 800f6c0:	440b      	add	r3, r1
 800f6c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f6c6:	b191      	cbz	r1, 800f6ee <__mdiff+0x11a>
 800f6c8:	6117      	str	r7, [r2, #16]
 800f6ca:	e79d      	b.n	800f608 <__mdiff+0x34>
 800f6cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800f6d0:	46e6      	mov	lr, ip
 800f6d2:	0c08      	lsrs	r0, r1, #16
 800f6d4:	fa1c fc81 	uxtah	ip, ip, r1
 800f6d8:	4471      	add	r1, lr
 800f6da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f6de:	b289      	uxth	r1, r1
 800f6e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f6e4:	f846 1b04 	str.w	r1, [r6], #4
 800f6e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f6ec:	e7dd      	b.n	800f6aa <__mdiff+0xd6>
 800f6ee:	3f01      	subs	r7, #1
 800f6f0:	e7e7      	b.n	800f6c2 <__mdiff+0xee>
 800f6f2:	bf00      	nop
 800f6f4:	08011f6e 	.word	0x08011f6e
 800f6f8:	08011fdf 	.word	0x08011fdf

0800f6fc <__ulp>:
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	ed8d 0b00 	vstr	d0, [sp]
 800f702:	9a01      	ldr	r2, [sp, #4]
 800f704:	4b0f      	ldr	r3, [pc, #60]	@ (800f744 <__ulp+0x48>)
 800f706:	4013      	ands	r3, r2
 800f708:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	dc08      	bgt.n	800f722 <__ulp+0x26>
 800f710:	425b      	negs	r3, r3
 800f712:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f716:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f71a:	da04      	bge.n	800f726 <__ulp+0x2a>
 800f71c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f720:	4113      	asrs	r3, r2
 800f722:	2200      	movs	r2, #0
 800f724:	e008      	b.n	800f738 <__ulp+0x3c>
 800f726:	f1a2 0314 	sub.w	r3, r2, #20
 800f72a:	2b1e      	cmp	r3, #30
 800f72c:	bfda      	itte	le
 800f72e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f732:	40da      	lsrle	r2, r3
 800f734:	2201      	movgt	r2, #1
 800f736:	2300      	movs	r3, #0
 800f738:	4619      	mov	r1, r3
 800f73a:	4610      	mov	r0, r2
 800f73c:	ec41 0b10 	vmov	d0, r0, r1
 800f740:	b002      	add	sp, #8
 800f742:	4770      	bx	lr
 800f744:	7ff00000 	.word	0x7ff00000

0800f748 <__b2d>:
 800f748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f74c:	6906      	ldr	r6, [r0, #16]
 800f74e:	f100 0814 	add.w	r8, r0, #20
 800f752:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f756:	1f37      	subs	r7, r6, #4
 800f758:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f75c:	4610      	mov	r0, r2
 800f75e:	f7ff fd4b 	bl	800f1f8 <__hi0bits>
 800f762:	f1c0 0320 	rsb	r3, r0, #32
 800f766:	280a      	cmp	r0, #10
 800f768:	600b      	str	r3, [r1, #0]
 800f76a:	491b      	ldr	r1, [pc, #108]	@ (800f7d8 <__b2d+0x90>)
 800f76c:	dc15      	bgt.n	800f79a <__b2d+0x52>
 800f76e:	f1c0 0c0b 	rsb	ip, r0, #11
 800f772:	fa22 f30c 	lsr.w	r3, r2, ip
 800f776:	45b8      	cmp	r8, r7
 800f778:	ea43 0501 	orr.w	r5, r3, r1
 800f77c:	bf34      	ite	cc
 800f77e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f782:	2300      	movcs	r3, #0
 800f784:	3015      	adds	r0, #21
 800f786:	fa02 f000 	lsl.w	r0, r2, r0
 800f78a:	fa23 f30c 	lsr.w	r3, r3, ip
 800f78e:	4303      	orrs	r3, r0
 800f790:	461c      	mov	r4, r3
 800f792:	ec45 4b10 	vmov	d0, r4, r5
 800f796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f79a:	45b8      	cmp	r8, r7
 800f79c:	bf3a      	itte	cc
 800f79e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f7a2:	f1a6 0708 	subcc.w	r7, r6, #8
 800f7a6:	2300      	movcs	r3, #0
 800f7a8:	380b      	subs	r0, #11
 800f7aa:	d012      	beq.n	800f7d2 <__b2d+0x8a>
 800f7ac:	f1c0 0120 	rsb	r1, r0, #32
 800f7b0:	fa23 f401 	lsr.w	r4, r3, r1
 800f7b4:	4082      	lsls	r2, r0
 800f7b6:	4322      	orrs	r2, r4
 800f7b8:	4547      	cmp	r7, r8
 800f7ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f7be:	bf8c      	ite	hi
 800f7c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f7c4:	2200      	movls	r2, #0
 800f7c6:	4083      	lsls	r3, r0
 800f7c8:	40ca      	lsrs	r2, r1
 800f7ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	e7de      	b.n	800f790 <__b2d+0x48>
 800f7d2:	ea42 0501 	orr.w	r5, r2, r1
 800f7d6:	e7db      	b.n	800f790 <__b2d+0x48>
 800f7d8:	3ff00000 	.word	0x3ff00000

0800f7dc <__d2b>:
 800f7dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7e0:	460f      	mov	r7, r1
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	ec59 8b10 	vmov	r8, r9, d0
 800f7e8:	4616      	mov	r6, r2
 800f7ea:	f7ff fc13 	bl	800f014 <_Balloc>
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	b930      	cbnz	r0, 800f800 <__d2b+0x24>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	4b23      	ldr	r3, [pc, #140]	@ (800f884 <__d2b+0xa8>)
 800f7f6:	4824      	ldr	r0, [pc, #144]	@ (800f888 <__d2b+0xac>)
 800f7f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f7fc:	f000 fd28 	bl	8010250 <__assert_func>
 800f800:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f804:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f808:	b10d      	cbz	r5, 800f80e <__d2b+0x32>
 800f80a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f80e:	9301      	str	r3, [sp, #4]
 800f810:	f1b8 0300 	subs.w	r3, r8, #0
 800f814:	d023      	beq.n	800f85e <__d2b+0x82>
 800f816:	4668      	mov	r0, sp
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	f7ff fd0c 	bl	800f236 <__lo0bits>
 800f81e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f822:	b1d0      	cbz	r0, 800f85a <__d2b+0x7e>
 800f824:	f1c0 0320 	rsb	r3, r0, #32
 800f828:	fa02 f303 	lsl.w	r3, r2, r3
 800f82c:	430b      	orrs	r3, r1
 800f82e:	40c2      	lsrs	r2, r0
 800f830:	6163      	str	r3, [r4, #20]
 800f832:	9201      	str	r2, [sp, #4]
 800f834:	9b01      	ldr	r3, [sp, #4]
 800f836:	61a3      	str	r3, [r4, #24]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	bf0c      	ite	eq
 800f83c:	2201      	moveq	r2, #1
 800f83e:	2202      	movne	r2, #2
 800f840:	6122      	str	r2, [r4, #16]
 800f842:	b1a5      	cbz	r5, 800f86e <__d2b+0x92>
 800f844:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f848:	4405      	add	r5, r0
 800f84a:	603d      	str	r5, [r7, #0]
 800f84c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f850:	6030      	str	r0, [r6, #0]
 800f852:	4620      	mov	r0, r4
 800f854:	b003      	add	sp, #12
 800f856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f85a:	6161      	str	r1, [r4, #20]
 800f85c:	e7ea      	b.n	800f834 <__d2b+0x58>
 800f85e:	a801      	add	r0, sp, #4
 800f860:	f7ff fce9 	bl	800f236 <__lo0bits>
 800f864:	9b01      	ldr	r3, [sp, #4]
 800f866:	6163      	str	r3, [r4, #20]
 800f868:	3020      	adds	r0, #32
 800f86a:	2201      	movs	r2, #1
 800f86c:	e7e8      	b.n	800f840 <__d2b+0x64>
 800f86e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f872:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f876:	6038      	str	r0, [r7, #0]
 800f878:	6918      	ldr	r0, [r3, #16]
 800f87a:	f7ff fcbd 	bl	800f1f8 <__hi0bits>
 800f87e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f882:	e7e5      	b.n	800f850 <__d2b+0x74>
 800f884:	08011f6e 	.word	0x08011f6e
 800f888:	08011fdf 	.word	0x08011fdf

0800f88c <__ratio>:
 800f88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f890:	b085      	sub	sp, #20
 800f892:	e9cd 1000 	strd	r1, r0, [sp]
 800f896:	a902      	add	r1, sp, #8
 800f898:	f7ff ff56 	bl	800f748 <__b2d>
 800f89c:	9800      	ldr	r0, [sp, #0]
 800f89e:	a903      	add	r1, sp, #12
 800f8a0:	ec55 4b10 	vmov	r4, r5, d0
 800f8a4:	f7ff ff50 	bl	800f748 <__b2d>
 800f8a8:	9b01      	ldr	r3, [sp, #4]
 800f8aa:	6919      	ldr	r1, [r3, #16]
 800f8ac:	9b00      	ldr	r3, [sp, #0]
 800f8ae:	691b      	ldr	r3, [r3, #16]
 800f8b0:	1ac9      	subs	r1, r1, r3
 800f8b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f8b6:	1a9b      	subs	r3, r3, r2
 800f8b8:	ec5b ab10 	vmov	sl, fp, d0
 800f8bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	bfce      	itee	gt
 800f8c4:	462a      	movgt	r2, r5
 800f8c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f8ca:	465a      	movle	r2, fp
 800f8cc:	462f      	mov	r7, r5
 800f8ce:	46d9      	mov	r9, fp
 800f8d0:	bfcc      	ite	gt
 800f8d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f8d6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f8da:	464b      	mov	r3, r9
 800f8dc:	4652      	mov	r2, sl
 800f8de:	4620      	mov	r0, r4
 800f8e0:	4639      	mov	r1, r7
 800f8e2:	f7f0 ffb3 	bl	800084c <__aeabi_ddiv>
 800f8e6:	ec41 0b10 	vmov	d0, r0, r1
 800f8ea:	b005      	add	sp, #20
 800f8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8f0 <__copybits>:
 800f8f0:	3901      	subs	r1, #1
 800f8f2:	b570      	push	{r4, r5, r6, lr}
 800f8f4:	1149      	asrs	r1, r1, #5
 800f8f6:	6914      	ldr	r4, [r2, #16]
 800f8f8:	3101      	adds	r1, #1
 800f8fa:	f102 0314 	add.w	r3, r2, #20
 800f8fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f902:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f906:	1f05      	subs	r5, r0, #4
 800f908:	42a3      	cmp	r3, r4
 800f90a:	d30c      	bcc.n	800f926 <__copybits+0x36>
 800f90c:	1aa3      	subs	r3, r4, r2
 800f90e:	3b11      	subs	r3, #17
 800f910:	f023 0303 	bic.w	r3, r3, #3
 800f914:	3211      	adds	r2, #17
 800f916:	42a2      	cmp	r2, r4
 800f918:	bf88      	it	hi
 800f91a:	2300      	movhi	r3, #0
 800f91c:	4418      	add	r0, r3
 800f91e:	2300      	movs	r3, #0
 800f920:	4288      	cmp	r0, r1
 800f922:	d305      	bcc.n	800f930 <__copybits+0x40>
 800f924:	bd70      	pop	{r4, r5, r6, pc}
 800f926:	f853 6b04 	ldr.w	r6, [r3], #4
 800f92a:	f845 6f04 	str.w	r6, [r5, #4]!
 800f92e:	e7eb      	b.n	800f908 <__copybits+0x18>
 800f930:	f840 3b04 	str.w	r3, [r0], #4
 800f934:	e7f4      	b.n	800f920 <__copybits+0x30>

0800f936 <__any_on>:
 800f936:	f100 0214 	add.w	r2, r0, #20
 800f93a:	6900      	ldr	r0, [r0, #16]
 800f93c:	114b      	asrs	r3, r1, #5
 800f93e:	4298      	cmp	r0, r3
 800f940:	b510      	push	{r4, lr}
 800f942:	db11      	blt.n	800f968 <__any_on+0x32>
 800f944:	dd0a      	ble.n	800f95c <__any_on+0x26>
 800f946:	f011 011f 	ands.w	r1, r1, #31
 800f94a:	d007      	beq.n	800f95c <__any_on+0x26>
 800f94c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f950:	fa24 f001 	lsr.w	r0, r4, r1
 800f954:	fa00 f101 	lsl.w	r1, r0, r1
 800f958:	428c      	cmp	r4, r1
 800f95a:	d10b      	bne.n	800f974 <__any_on+0x3e>
 800f95c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f960:	4293      	cmp	r3, r2
 800f962:	d803      	bhi.n	800f96c <__any_on+0x36>
 800f964:	2000      	movs	r0, #0
 800f966:	bd10      	pop	{r4, pc}
 800f968:	4603      	mov	r3, r0
 800f96a:	e7f7      	b.n	800f95c <__any_on+0x26>
 800f96c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f970:	2900      	cmp	r1, #0
 800f972:	d0f5      	beq.n	800f960 <__any_on+0x2a>
 800f974:	2001      	movs	r0, #1
 800f976:	e7f6      	b.n	800f966 <__any_on+0x30>

0800f978 <_strtol_l.constprop.0>:
 800f978:	2b24      	cmp	r3, #36	@ 0x24
 800f97a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f97e:	4686      	mov	lr, r0
 800f980:	4690      	mov	r8, r2
 800f982:	d801      	bhi.n	800f988 <_strtol_l.constprop.0+0x10>
 800f984:	2b01      	cmp	r3, #1
 800f986:	d106      	bne.n	800f996 <_strtol_l.constprop.0+0x1e>
 800f988:	f7fe f91a 	bl	800dbc0 <__errno>
 800f98c:	2316      	movs	r3, #22
 800f98e:	6003      	str	r3, [r0, #0]
 800f990:	2000      	movs	r0, #0
 800f992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f996:	4834      	ldr	r0, [pc, #208]	@ (800fa68 <_strtol_l.constprop.0+0xf0>)
 800f998:	460d      	mov	r5, r1
 800f99a:	462a      	mov	r2, r5
 800f99c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9a0:	5d06      	ldrb	r6, [r0, r4]
 800f9a2:	f016 0608 	ands.w	r6, r6, #8
 800f9a6:	d1f8      	bne.n	800f99a <_strtol_l.constprop.0+0x22>
 800f9a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800f9aa:	d12d      	bne.n	800fa08 <_strtol_l.constprop.0+0x90>
 800f9ac:	782c      	ldrb	r4, [r5, #0]
 800f9ae:	2601      	movs	r6, #1
 800f9b0:	1c95      	adds	r5, r2, #2
 800f9b2:	f033 0210 	bics.w	r2, r3, #16
 800f9b6:	d109      	bne.n	800f9cc <_strtol_l.constprop.0+0x54>
 800f9b8:	2c30      	cmp	r4, #48	@ 0x30
 800f9ba:	d12a      	bne.n	800fa12 <_strtol_l.constprop.0+0x9a>
 800f9bc:	782a      	ldrb	r2, [r5, #0]
 800f9be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f9c2:	2a58      	cmp	r2, #88	@ 0x58
 800f9c4:	d125      	bne.n	800fa12 <_strtol_l.constprop.0+0x9a>
 800f9c6:	786c      	ldrb	r4, [r5, #1]
 800f9c8:	2310      	movs	r3, #16
 800f9ca:	3502      	adds	r5, #2
 800f9cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f9d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	fbbc f9f3 	udiv	r9, ip, r3
 800f9da:	4610      	mov	r0, r2
 800f9dc:	fb03 ca19 	mls	sl, r3, r9, ip
 800f9e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f9e4:	2f09      	cmp	r7, #9
 800f9e6:	d81b      	bhi.n	800fa20 <_strtol_l.constprop.0+0xa8>
 800f9e8:	463c      	mov	r4, r7
 800f9ea:	42a3      	cmp	r3, r4
 800f9ec:	dd27      	ble.n	800fa3e <_strtol_l.constprop.0+0xc6>
 800f9ee:	1c57      	adds	r7, r2, #1
 800f9f0:	d007      	beq.n	800fa02 <_strtol_l.constprop.0+0x8a>
 800f9f2:	4581      	cmp	r9, r0
 800f9f4:	d320      	bcc.n	800fa38 <_strtol_l.constprop.0+0xc0>
 800f9f6:	d101      	bne.n	800f9fc <_strtol_l.constprop.0+0x84>
 800f9f8:	45a2      	cmp	sl, r4
 800f9fa:	db1d      	blt.n	800fa38 <_strtol_l.constprop.0+0xc0>
 800f9fc:	fb00 4003 	mla	r0, r0, r3, r4
 800fa00:	2201      	movs	r2, #1
 800fa02:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa06:	e7eb      	b.n	800f9e0 <_strtol_l.constprop.0+0x68>
 800fa08:	2c2b      	cmp	r4, #43	@ 0x2b
 800fa0a:	bf04      	itt	eq
 800fa0c:	782c      	ldrbeq	r4, [r5, #0]
 800fa0e:	1c95      	addeq	r5, r2, #2
 800fa10:	e7cf      	b.n	800f9b2 <_strtol_l.constprop.0+0x3a>
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d1da      	bne.n	800f9cc <_strtol_l.constprop.0+0x54>
 800fa16:	2c30      	cmp	r4, #48	@ 0x30
 800fa18:	bf0c      	ite	eq
 800fa1a:	2308      	moveq	r3, #8
 800fa1c:	230a      	movne	r3, #10
 800fa1e:	e7d5      	b.n	800f9cc <_strtol_l.constprop.0+0x54>
 800fa20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fa24:	2f19      	cmp	r7, #25
 800fa26:	d801      	bhi.n	800fa2c <_strtol_l.constprop.0+0xb4>
 800fa28:	3c37      	subs	r4, #55	@ 0x37
 800fa2a:	e7de      	b.n	800f9ea <_strtol_l.constprop.0+0x72>
 800fa2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fa30:	2f19      	cmp	r7, #25
 800fa32:	d804      	bhi.n	800fa3e <_strtol_l.constprop.0+0xc6>
 800fa34:	3c57      	subs	r4, #87	@ 0x57
 800fa36:	e7d8      	b.n	800f9ea <_strtol_l.constprop.0+0x72>
 800fa38:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3c:	e7e1      	b.n	800fa02 <_strtol_l.constprop.0+0x8a>
 800fa3e:	1c53      	adds	r3, r2, #1
 800fa40:	d108      	bne.n	800fa54 <_strtol_l.constprop.0+0xdc>
 800fa42:	2322      	movs	r3, #34	@ 0x22
 800fa44:	f8ce 3000 	str.w	r3, [lr]
 800fa48:	4660      	mov	r0, ip
 800fa4a:	f1b8 0f00 	cmp.w	r8, #0
 800fa4e:	d0a0      	beq.n	800f992 <_strtol_l.constprop.0+0x1a>
 800fa50:	1e69      	subs	r1, r5, #1
 800fa52:	e006      	b.n	800fa62 <_strtol_l.constprop.0+0xea>
 800fa54:	b106      	cbz	r6, 800fa58 <_strtol_l.constprop.0+0xe0>
 800fa56:	4240      	negs	r0, r0
 800fa58:	f1b8 0f00 	cmp.w	r8, #0
 800fa5c:	d099      	beq.n	800f992 <_strtol_l.constprop.0+0x1a>
 800fa5e:	2a00      	cmp	r2, #0
 800fa60:	d1f6      	bne.n	800fa50 <_strtol_l.constprop.0+0xd8>
 800fa62:	f8c8 1000 	str.w	r1, [r8]
 800fa66:	e794      	b.n	800f992 <_strtol_l.constprop.0+0x1a>
 800fa68:	08011db1 	.word	0x08011db1

0800fa6c <_strtol_r>:
 800fa6c:	f7ff bf84 	b.w	800f978 <_strtol_l.constprop.0>

0800fa70 <__ascii_wctomb>:
 800fa70:	4603      	mov	r3, r0
 800fa72:	4608      	mov	r0, r1
 800fa74:	b141      	cbz	r1, 800fa88 <__ascii_wctomb+0x18>
 800fa76:	2aff      	cmp	r2, #255	@ 0xff
 800fa78:	d904      	bls.n	800fa84 <__ascii_wctomb+0x14>
 800fa7a:	228a      	movs	r2, #138	@ 0x8a
 800fa7c:	601a      	str	r2, [r3, #0]
 800fa7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa82:	4770      	bx	lr
 800fa84:	700a      	strb	r2, [r1, #0]
 800fa86:	2001      	movs	r0, #1
 800fa88:	4770      	bx	lr

0800fa8a <__ssputs_r>:
 800fa8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa8e:	688e      	ldr	r6, [r1, #8]
 800fa90:	461f      	mov	r7, r3
 800fa92:	42be      	cmp	r6, r7
 800fa94:	680b      	ldr	r3, [r1, #0]
 800fa96:	4682      	mov	sl, r0
 800fa98:	460c      	mov	r4, r1
 800fa9a:	4690      	mov	r8, r2
 800fa9c:	d82d      	bhi.n	800fafa <__ssputs_r+0x70>
 800fa9e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800faa2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800faa6:	d026      	beq.n	800faf6 <__ssputs_r+0x6c>
 800faa8:	6965      	ldr	r5, [r4, #20]
 800faaa:	6909      	ldr	r1, [r1, #16]
 800faac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fab0:	eba3 0901 	sub.w	r9, r3, r1
 800fab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fab8:	1c7b      	adds	r3, r7, #1
 800faba:	444b      	add	r3, r9
 800fabc:	106d      	asrs	r5, r5, #1
 800fabe:	429d      	cmp	r5, r3
 800fac0:	bf38      	it	cc
 800fac2:	461d      	movcc	r5, r3
 800fac4:	0553      	lsls	r3, r2, #21
 800fac6:	d527      	bpl.n	800fb18 <__ssputs_r+0x8e>
 800fac8:	4629      	mov	r1, r5
 800faca:	f7fc f80b 	bl	800bae4 <_malloc_r>
 800face:	4606      	mov	r6, r0
 800fad0:	b360      	cbz	r0, 800fb2c <__ssputs_r+0xa2>
 800fad2:	6921      	ldr	r1, [r4, #16]
 800fad4:	464a      	mov	r2, r9
 800fad6:	f7fe f89d 	bl	800dc14 <memcpy>
 800fada:	89a3      	ldrh	r3, [r4, #12]
 800fadc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fae4:	81a3      	strh	r3, [r4, #12]
 800fae6:	6126      	str	r6, [r4, #16]
 800fae8:	6165      	str	r5, [r4, #20]
 800faea:	444e      	add	r6, r9
 800faec:	eba5 0509 	sub.w	r5, r5, r9
 800faf0:	6026      	str	r6, [r4, #0]
 800faf2:	60a5      	str	r5, [r4, #8]
 800faf4:	463e      	mov	r6, r7
 800faf6:	42be      	cmp	r6, r7
 800faf8:	d900      	bls.n	800fafc <__ssputs_r+0x72>
 800fafa:	463e      	mov	r6, r7
 800fafc:	6820      	ldr	r0, [r4, #0]
 800fafe:	4632      	mov	r2, r6
 800fb00:	4641      	mov	r1, r8
 800fb02:	f000 fb69 	bl	80101d8 <memmove>
 800fb06:	68a3      	ldr	r3, [r4, #8]
 800fb08:	1b9b      	subs	r3, r3, r6
 800fb0a:	60a3      	str	r3, [r4, #8]
 800fb0c:	6823      	ldr	r3, [r4, #0]
 800fb0e:	4433      	add	r3, r6
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	2000      	movs	r0, #0
 800fb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb18:	462a      	mov	r2, r5
 800fb1a:	f000 fbcb 	bl	80102b4 <_realloc_r>
 800fb1e:	4606      	mov	r6, r0
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d1e0      	bne.n	800fae6 <__ssputs_r+0x5c>
 800fb24:	6921      	ldr	r1, [r4, #16]
 800fb26:	4650      	mov	r0, sl
 800fb28:	f7fe fede 	bl	800e8e8 <_free_r>
 800fb2c:	230c      	movs	r3, #12
 800fb2e:	f8ca 3000 	str.w	r3, [sl]
 800fb32:	89a3      	ldrh	r3, [r4, #12]
 800fb34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb38:	81a3      	strh	r3, [r4, #12]
 800fb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb3e:	e7e9      	b.n	800fb14 <__ssputs_r+0x8a>

0800fb40 <_svfiprintf_r>:
 800fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	4698      	mov	r8, r3
 800fb46:	898b      	ldrh	r3, [r1, #12]
 800fb48:	061b      	lsls	r3, r3, #24
 800fb4a:	b09d      	sub	sp, #116	@ 0x74
 800fb4c:	4607      	mov	r7, r0
 800fb4e:	460d      	mov	r5, r1
 800fb50:	4614      	mov	r4, r2
 800fb52:	d510      	bpl.n	800fb76 <_svfiprintf_r+0x36>
 800fb54:	690b      	ldr	r3, [r1, #16]
 800fb56:	b973      	cbnz	r3, 800fb76 <_svfiprintf_r+0x36>
 800fb58:	2140      	movs	r1, #64	@ 0x40
 800fb5a:	f7fb ffc3 	bl	800bae4 <_malloc_r>
 800fb5e:	6028      	str	r0, [r5, #0]
 800fb60:	6128      	str	r0, [r5, #16]
 800fb62:	b930      	cbnz	r0, 800fb72 <_svfiprintf_r+0x32>
 800fb64:	230c      	movs	r3, #12
 800fb66:	603b      	str	r3, [r7, #0]
 800fb68:	f04f 30ff 	mov.w	r0, #4294967295
 800fb6c:	b01d      	add	sp, #116	@ 0x74
 800fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb72:	2340      	movs	r3, #64	@ 0x40
 800fb74:	616b      	str	r3, [r5, #20]
 800fb76:	2300      	movs	r3, #0
 800fb78:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb7a:	2320      	movs	r3, #32
 800fb7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb80:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb84:	2330      	movs	r3, #48	@ 0x30
 800fb86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fd24 <_svfiprintf_r+0x1e4>
 800fb8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb8e:	f04f 0901 	mov.w	r9, #1
 800fb92:	4623      	mov	r3, r4
 800fb94:	469a      	mov	sl, r3
 800fb96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb9a:	b10a      	cbz	r2, 800fba0 <_svfiprintf_r+0x60>
 800fb9c:	2a25      	cmp	r2, #37	@ 0x25
 800fb9e:	d1f9      	bne.n	800fb94 <_svfiprintf_r+0x54>
 800fba0:	ebba 0b04 	subs.w	fp, sl, r4
 800fba4:	d00b      	beq.n	800fbbe <_svfiprintf_r+0x7e>
 800fba6:	465b      	mov	r3, fp
 800fba8:	4622      	mov	r2, r4
 800fbaa:	4629      	mov	r1, r5
 800fbac:	4638      	mov	r0, r7
 800fbae:	f7ff ff6c 	bl	800fa8a <__ssputs_r>
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	f000 80a7 	beq.w	800fd06 <_svfiprintf_r+0x1c6>
 800fbb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbba:	445a      	add	r2, fp
 800fbbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbbe:	f89a 3000 	ldrb.w	r3, [sl]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f000 809f 	beq.w	800fd06 <_svfiprintf_r+0x1c6>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	f04f 32ff 	mov.w	r2, #4294967295
 800fbce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbd2:	f10a 0a01 	add.w	sl, sl, #1
 800fbd6:	9304      	str	r3, [sp, #16]
 800fbd8:	9307      	str	r3, [sp, #28]
 800fbda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fbde:	931a      	str	r3, [sp, #104]	@ 0x68
 800fbe0:	4654      	mov	r4, sl
 800fbe2:	2205      	movs	r2, #5
 800fbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbe8:	484e      	ldr	r0, [pc, #312]	@ (800fd24 <_svfiprintf_r+0x1e4>)
 800fbea:	f7f0 faf1 	bl	80001d0 <memchr>
 800fbee:	9a04      	ldr	r2, [sp, #16]
 800fbf0:	b9d8      	cbnz	r0, 800fc2a <_svfiprintf_r+0xea>
 800fbf2:	06d0      	lsls	r0, r2, #27
 800fbf4:	bf44      	itt	mi
 800fbf6:	2320      	movmi	r3, #32
 800fbf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fbfc:	0711      	lsls	r1, r2, #28
 800fbfe:	bf44      	itt	mi
 800fc00:	232b      	movmi	r3, #43	@ 0x2b
 800fc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fc06:	f89a 3000 	ldrb.w	r3, [sl]
 800fc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc0c:	d015      	beq.n	800fc3a <_svfiprintf_r+0xfa>
 800fc0e:	9a07      	ldr	r2, [sp, #28]
 800fc10:	4654      	mov	r4, sl
 800fc12:	2000      	movs	r0, #0
 800fc14:	f04f 0c0a 	mov.w	ip, #10
 800fc18:	4621      	mov	r1, r4
 800fc1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc1e:	3b30      	subs	r3, #48	@ 0x30
 800fc20:	2b09      	cmp	r3, #9
 800fc22:	d94b      	bls.n	800fcbc <_svfiprintf_r+0x17c>
 800fc24:	b1b0      	cbz	r0, 800fc54 <_svfiprintf_r+0x114>
 800fc26:	9207      	str	r2, [sp, #28]
 800fc28:	e014      	b.n	800fc54 <_svfiprintf_r+0x114>
 800fc2a:	eba0 0308 	sub.w	r3, r0, r8
 800fc2e:	fa09 f303 	lsl.w	r3, r9, r3
 800fc32:	4313      	orrs	r3, r2
 800fc34:	9304      	str	r3, [sp, #16]
 800fc36:	46a2      	mov	sl, r4
 800fc38:	e7d2      	b.n	800fbe0 <_svfiprintf_r+0xa0>
 800fc3a:	9b03      	ldr	r3, [sp, #12]
 800fc3c:	1d19      	adds	r1, r3, #4
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	9103      	str	r1, [sp, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	bfbb      	ittet	lt
 800fc46:	425b      	neglt	r3, r3
 800fc48:	f042 0202 	orrlt.w	r2, r2, #2
 800fc4c:	9307      	strge	r3, [sp, #28]
 800fc4e:	9307      	strlt	r3, [sp, #28]
 800fc50:	bfb8      	it	lt
 800fc52:	9204      	strlt	r2, [sp, #16]
 800fc54:	7823      	ldrb	r3, [r4, #0]
 800fc56:	2b2e      	cmp	r3, #46	@ 0x2e
 800fc58:	d10a      	bne.n	800fc70 <_svfiprintf_r+0x130>
 800fc5a:	7863      	ldrb	r3, [r4, #1]
 800fc5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fc5e:	d132      	bne.n	800fcc6 <_svfiprintf_r+0x186>
 800fc60:	9b03      	ldr	r3, [sp, #12]
 800fc62:	1d1a      	adds	r2, r3, #4
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	9203      	str	r2, [sp, #12]
 800fc68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc6c:	3402      	adds	r4, #2
 800fc6e:	9305      	str	r3, [sp, #20]
 800fc70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fd34 <_svfiprintf_r+0x1f4>
 800fc74:	7821      	ldrb	r1, [r4, #0]
 800fc76:	2203      	movs	r2, #3
 800fc78:	4650      	mov	r0, sl
 800fc7a:	f7f0 faa9 	bl	80001d0 <memchr>
 800fc7e:	b138      	cbz	r0, 800fc90 <_svfiprintf_r+0x150>
 800fc80:	9b04      	ldr	r3, [sp, #16]
 800fc82:	eba0 000a 	sub.w	r0, r0, sl
 800fc86:	2240      	movs	r2, #64	@ 0x40
 800fc88:	4082      	lsls	r2, r0
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	3401      	adds	r4, #1
 800fc8e:	9304      	str	r3, [sp, #16]
 800fc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc94:	4824      	ldr	r0, [pc, #144]	@ (800fd28 <_svfiprintf_r+0x1e8>)
 800fc96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc9a:	2206      	movs	r2, #6
 800fc9c:	f7f0 fa98 	bl	80001d0 <memchr>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	d036      	beq.n	800fd12 <_svfiprintf_r+0x1d2>
 800fca4:	4b21      	ldr	r3, [pc, #132]	@ (800fd2c <_svfiprintf_r+0x1ec>)
 800fca6:	bb1b      	cbnz	r3, 800fcf0 <_svfiprintf_r+0x1b0>
 800fca8:	9b03      	ldr	r3, [sp, #12]
 800fcaa:	3307      	adds	r3, #7
 800fcac:	f023 0307 	bic.w	r3, r3, #7
 800fcb0:	3308      	adds	r3, #8
 800fcb2:	9303      	str	r3, [sp, #12]
 800fcb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcb6:	4433      	add	r3, r6
 800fcb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcba:	e76a      	b.n	800fb92 <_svfiprintf_r+0x52>
 800fcbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcc0:	460c      	mov	r4, r1
 800fcc2:	2001      	movs	r0, #1
 800fcc4:	e7a8      	b.n	800fc18 <_svfiprintf_r+0xd8>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	3401      	adds	r4, #1
 800fcca:	9305      	str	r3, [sp, #20]
 800fccc:	4619      	mov	r1, r3
 800fcce:	f04f 0c0a 	mov.w	ip, #10
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcd8:	3a30      	subs	r2, #48	@ 0x30
 800fcda:	2a09      	cmp	r2, #9
 800fcdc:	d903      	bls.n	800fce6 <_svfiprintf_r+0x1a6>
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d0c6      	beq.n	800fc70 <_svfiprintf_r+0x130>
 800fce2:	9105      	str	r1, [sp, #20]
 800fce4:	e7c4      	b.n	800fc70 <_svfiprintf_r+0x130>
 800fce6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcea:	4604      	mov	r4, r0
 800fcec:	2301      	movs	r3, #1
 800fcee:	e7f0      	b.n	800fcd2 <_svfiprintf_r+0x192>
 800fcf0:	ab03      	add	r3, sp, #12
 800fcf2:	9300      	str	r3, [sp, #0]
 800fcf4:	462a      	mov	r2, r5
 800fcf6:	4b0e      	ldr	r3, [pc, #56]	@ (800fd30 <_svfiprintf_r+0x1f0>)
 800fcf8:	a904      	add	r1, sp, #16
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	f7fc fe8a 	bl	800ca14 <_printf_float>
 800fd00:	1c42      	adds	r2, r0, #1
 800fd02:	4606      	mov	r6, r0
 800fd04:	d1d6      	bne.n	800fcb4 <_svfiprintf_r+0x174>
 800fd06:	89ab      	ldrh	r3, [r5, #12]
 800fd08:	065b      	lsls	r3, r3, #25
 800fd0a:	f53f af2d 	bmi.w	800fb68 <_svfiprintf_r+0x28>
 800fd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd10:	e72c      	b.n	800fb6c <_svfiprintf_r+0x2c>
 800fd12:	ab03      	add	r3, sp, #12
 800fd14:	9300      	str	r3, [sp, #0]
 800fd16:	462a      	mov	r2, r5
 800fd18:	4b05      	ldr	r3, [pc, #20]	@ (800fd30 <_svfiprintf_r+0x1f0>)
 800fd1a:	a904      	add	r1, sp, #16
 800fd1c:	4638      	mov	r0, r7
 800fd1e:	f7fd f911 	bl	800cf44 <_printf_i>
 800fd22:	e7ed      	b.n	800fd00 <_svfiprintf_r+0x1c0>
 800fd24:	08012138 	.word	0x08012138
 800fd28:	08012142 	.word	0x08012142
 800fd2c:	0800ca15 	.word	0x0800ca15
 800fd30:	0800fa8b 	.word	0x0800fa8b
 800fd34:	0801213e 	.word	0x0801213e

0800fd38 <__sfputc_r>:
 800fd38:	6893      	ldr	r3, [r2, #8]
 800fd3a:	3b01      	subs	r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	b410      	push	{r4}
 800fd40:	6093      	str	r3, [r2, #8]
 800fd42:	da08      	bge.n	800fd56 <__sfputc_r+0x1e>
 800fd44:	6994      	ldr	r4, [r2, #24]
 800fd46:	42a3      	cmp	r3, r4
 800fd48:	db01      	blt.n	800fd4e <__sfputc_r+0x16>
 800fd4a:	290a      	cmp	r1, #10
 800fd4c:	d103      	bne.n	800fd56 <__sfputc_r+0x1e>
 800fd4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd52:	f7fd bdc0 	b.w	800d8d6 <__swbuf_r>
 800fd56:	6813      	ldr	r3, [r2, #0]
 800fd58:	1c58      	adds	r0, r3, #1
 800fd5a:	6010      	str	r0, [r2, #0]
 800fd5c:	7019      	strb	r1, [r3, #0]
 800fd5e:	4608      	mov	r0, r1
 800fd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd64:	4770      	bx	lr

0800fd66 <__sfputs_r>:
 800fd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd68:	4606      	mov	r6, r0
 800fd6a:	460f      	mov	r7, r1
 800fd6c:	4614      	mov	r4, r2
 800fd6e:	18d5      	adds	r5, r2, r3
 800fd70:	42ac      	cmp	r4, r5
 800fd72:	d101      	bne.n	800fd78 <__sfputs_r+0x12>
 800fd74:	2000      	movs	r0, #0
 800fd76:	e007      	b.n	800fd88 <__sfputs_r+0x22>
 800fd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd7c:	463a      	mov	r2, r7
 800fd7e:	4630      	mov	r0, r6
 800fd80:	f7ff ffda 	bl	800fd38 <__sfputc_r>
 800fd84:	1c43      	adds	r3, r0, #1
 800fd86:	d1f3      	bne.n	800fd70 <__sfputs_r+0xa>
 800fd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd8c <_vfiprintf_r>:
 800fd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd90:	460d      	mov	r5, r1
 800fd92:	b09d      	sub	sp, #116	@ 0x74
 800fd94:	4614      	mov	r4, r2
 800fd96:	4698      	mov	r8, r3
 800fd98:	4606      	mov	r6, r0
 800fd9a:	b118      	cbz	r0, 800fda4 <_vfiprintf_r+0x18>
 800fd9c:	6a03      	ldr	r3, [r0, #32]
 800fd9e:	b90b      	cbnz	r3, 800fda4 <_vfiprintf_r+0x18>
 800fda0:	f7fd fc90 	bl	800d6c4 <__sinit>
 800fda4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fda6:	07d9      	lsls	r1, r3, #31
 800fda8:	d405      	bmi.n	800fdb6 <_vfiprintf_r+0x2a>
 800fdaa:	89ab      	ldrh	r3, [r5, #12]
 800fdac:	059a      	lsls	r2, r3, #22
 800fdae:	d402      	bmi.n	800fdb6 <_vfiprintf_r+0x2a>
 800fdb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdb2:	f7f6 ff69 	bl	8006c88 <__retarget_lock_acquire_recursive>
 800fdb6:	89ab      	ldrh	r3, [r5, #12]
 800fdb8:	071b      	lsls	r3, r3, #28
 800fdba:	d501      	bpl.n	800fdc0 <_vfiprintf_r+0x34>
 800fdbc:	692b      	ldr	r3, [r5, #16]
 800fdbe:	b99b      	cbnz	r3, 800fde8 <_vfiprintf_r+0x5c>
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4630      	mov	r0, r6
 800fdc4:	f7fd fdc6 	bl	800d954 <__swsetup_r>
 800fdc8:	b170      	cbz	r0, 800fde8 <_vfiprintf_r+0x5c>
 800fdca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdcc:	07dc      	lsls	r4, r3, #31
 800fdce:	d504      	bpl.n	800fdda <_vfiprintf_r+0x4e>
 800fdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd4:	b01d      	add	sp, #116	@ 0x74
 800fdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdda:	89ab      	ldrh	r3, [r5, #12]
 800fddc:	0598      	lsls	r0, r3, #22
 800fdde:	d4f7      	bmi.n	800fdd0 <_vfiprintf_r+0x44>
 800fde0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fde2:	f7f6 ff6d 	bl	8006cc0 <__retarget_lock_release_recursive>
 800fde6:	e7f3      	b.n	800fdd0 <_vfiprintf_r+0x44>
 800fde8:	2300      	movs	r3, #0
 800fdea:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdec:	2320      	movs	r3, #32
 800fdee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fdf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdf6:	2330      	movs	r3, #48	@ 0x30
 800fdf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ffa8 <_vfiprintf_r+0x21c>
 800fdfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe00:	f04f 0901 	mov.w	r9, #1
 800fe04:	4623      	mov	r3, r4
 800fe06:	469a      	mov	sl, r3
 800fe08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe0c:	b10a      	cbz	r2, 800fe12 <_vfiprintf_r+0x86>
 800fe0e:	2a25      	cmp	r2, #37	@ 0x25
 800fe10:	d1f9      	bne.n	800fe06 <_vfiprintf_r+0x7a>
 800fe12:	ebba 0b04 	subs.w	fp, sl, r4
 800fe16:	d00b      	beq.n	800fe30 <_vfiprintf_r+0xa4>
 800fe18:	465b      	mov	r3, fp
 800fe1a:	4622      	mov	r2, r4
 800fe1c:	4629      	mov	r1, r5
 800fe1e:	4630      	mov	r0, r6
 800fe20:	f7ff ffa1 	bl	800fd66 <__sfputs_r>
 800fe24:	3001      	adds	r0, #1
 800fe26:	f000 80a7 	beq.w	800ff78 <_vfiprintf_r+0x1ec>
 800fe2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe2c:	445a      	add	r2, fp
 800fe2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe30:	f89a 3000 	ldrb.w	r3, [sl]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 809f 	beq.w	800ff78 <_vfiprintf_r+0x1ec>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe44:	f10a 0a01 	add.w	sl, sl, #1
 800fe48:	9304      	str	r3, [sp, #16]
 800fe4a:	9307      	str	r3, [sp, #28]
 800fe4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fe50:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe52:	4654      	mov	r4, sl
 800fe54:	2205      	movs	r2, #5
 800fe56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe5a:	4853      	ldr	r0, [pc, #332]	@ (800ffa8 <_vfiprintf_r+0x21c>)
 800fe5c:	f7f0 f9b8 	bl	80001d0 <memchr>
 800fe60:	9a04      	ldr	r2, [sp, #16]
 800fe62:	b9d8      	cbnz	r0, 800fe9c <_vfiprintf_r+0x110>
 800fe64:	06d1      	lsls	r1, r2, #27
 800fe66:	bf44      	itt	mi
 800fe68:	2320      	movmi	r3, #32
 800fe6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe6e:	0713      	lsls	r3, r2, #28
 800fe70:	bf44      	itt	mi
 800fe72:	232b      	movmi	r3, #43	@ 0x2b
 800fe74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe78:	f89a 3000 	ldrb.w	r3, [sl]
 800fe7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe7e:	d015      	beq.n	800feac <_vfiprintf_r+0x120>
 800fe80:	9a07      	ldr	r2, [sp, #28]
 800fe82:	4654      	mov	r4, sl
 800fe84:	2000      	movs	r0, #0
 800fe86:	f04f 0c0a 	mov.w	ip, #10
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe90:	3b30      	subs	r3, #48	@ 0x30
 800fe92:	2b09      	cmp	r3, #9
 800fe94:	d94b      	bls.n	800ff2e <_vfiprintf_r+0x1a2>
 800fe96:	b1b0      	cbz	r0, 800fec6 <_vfiprintf_r+0x13a>
 800fe98:	9207      	str	r2, [sp, #28]
 800fe9a:	e014      	b.n	800fec6 <_vfiprintf_r+0x13a>
 800fe9c:	eba0 0308 	sub.w	r3, r0, r8
 800fea0:	fa09 f303 	lsl.w	r3, r9, r3
 800fea4:	4313      	orrs	r3, r2
 800fea6:	9304      	str	r3, [sp, #16]
 800fea8:	46a2      	mov	sl, r4
 800feaa:	e7d2      	b.n	800fe52 <_vfiprintf_r+0xc6>
 800feac:	9b03      	ldr	r3, [sp, #12]
 800feae:	1d19      	adds	r1, r3, #4
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	9103      	str	r1, [sp, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	bfbb      	ittet	lt
 800feb8:	425b      	neglt	r3, r3
 800feba:	f042 0202 	orrlt.w	r2, r2, #2
 800febe:	9307      	strge	r3, [sp, #28]
 800fec0:	9307      	strlt	r3, [sp, #28]
 800fec2:	bfb8      	it	lt
 800fec4:	9204      	strlt	r2, [sp, #16]
 800fec6:	7823      	ldrb	r3, [r4, #0]
 800fec8:	2b2e      	cmp	r3, #46	@ 0x2e
 800feca:	d10a      	bne.n	800fee2 <_vfiprintf_r+0x156>
 800fecc:	7863      	ldrb	r3, [r4, #1]
 800fece:	2b2a      	cmp	r3, #42	@ 0x2a
 800fed0:	d132      	bne.n	800ff38 <_vfiprintf_r+0x1ac>
 800fed2:	9b03      	ldr	r3, [sp, #12]
 800fed4:	1d1a      	adds	r2, r3, #4
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	9203      	str	r2, [sp, #12]
 800feda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fede:	3402      	adds	r4, #2
 800fee0:	9305      	str	r3, [sp, #20]
 800fee2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ffb8 <_vfiprintf_r+0x22c>
 800fee6:	7821      	ldrb	r1, [r4, #0]
 800fee8:	2203      	movs	r2, #3
 800feea:	4650      	mov	r0, sl
 800feec:	f7f0 f970 	bl	80001d0 <memchr>
 800fef0:	b138      	cbz	r0, 800ff02 <_vfiprintf_r+0x176>
 800fef2:	9b04      	ldr	r3, [sp, #16]
 800fef4:	eba0 000a 	sub.w	r0, r0, sl
 800fef8:	2240      	movs	r2, #64	@ 0x40
 800fefa:	4082      	lsls	r2, r0
 800fefc:	4313      	orrs	r3, r2
 800fefe:	3401      	adds	r4, #1
 800ff00:	9304      	str	r3, [sp, #16]
 800ff02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff06:	4829      	ldr	r0, [pc, #164]	@ (800ffac <_vfiprintf_r+0x220>)
 800ff08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff0c:	2206      	movs	r2, #6
 800ff0e:	f7f0 f95f 	bl	80001d0 <memchr>
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d03f      	beq.n	800ff96 <_vfiprintf_r+0x20a>
 800ff16:	4b26      	ldr	r3, [pc, #152]	@ (800ffb0 <_vfiprintf_r+0x224>)
 800ff18:	bb1b      	cbnz	r3, 800ff62 <_vfiprintf_r+0x1d6>
 800ff1a:	9b03      	ldr	r3, [sp, #12]
 800ff1c:	3307      	adds	r3, #7
 800ff1e:	f023 0307 	bic.w	r3, r3, #7
 800ff22:	3308      	adds	r3, #8
 800ff24:	9303      	str	r3, [sp, #12]
 800ff26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff28:	443b      	add	r3, r7
 800ff2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff2c:	e76a      	b.n	800fe04 <_vfiprintf_r+0x78>
 800ff2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff32:	460c      	mov	r4, r1
 800ff34:	2001      	movs	r0, #1
 800ff36:	e7a8      	b.n	800fe8a <_vfiprintf_r+0xfe>
 800ff38:	2300      	movs	r3, #0
 800ff3a:	3401      	adds	r4, #1
 800ff3c:	9305      	str	r3, [sp, #20]
 800ff3e:	4619      	mov	r1, r3
 800ff40:	f04f 0c0a 	mov.w	ip, #10
 800ff44:	4620      	mov	r0, r4
 800ff46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff4a:	3a30      	subs	r2, #48	@ 0x30
 800ff4c:	2a09      	cmp	r2, #9
 800ff4e:	d903      	bls.n	800ff58 <_vfiprintf_r+0x1cc>
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d0c6      	beq.n	800fee2 <_vfiprintf_r+0x156>
 800ff54:	9105      	str	r1, [sp, #20]
 800ff56:	e7c4      	b.n	800fee2 <_vfiprintf_r+0x156>
 800ff58:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e7f0      	b.n	800ff44 <_vfiprintf_r+0x1b8>
 800ff62:	ab03      	add	r3, sp, #12
 800ff64:	9300      	str	r3, [sp, #0]
 800ff66:	462a      	mov	r2, r5
 800ff68:	4b12      	ldr	r3, [pc, #72]	@ (800ffb4 <_vfiprintf_r+0x228>)
 800ff6a:	a904      	add	r1, sp, #16
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	f7fc fd51 	bl	800ca14 <_printf_float>
 800ff72:	4607      	mov	r7, r0
 800ff74:	1c78      	adds	r0, r7, #1
 800ff76:	d1d6      	bne.n	800ff26 <_vfiprintf_r+0x19a>
 800ff78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff7a:	07d9      	lsls	r1, r3, #31
 800ff7c:	d405      	bmi.n	800ff8a <_vfiprintf_r+0x1fe>
 800ff7e:	89ab      	ldrh	r3, [r5, #12]
 800ff80:	059a      	lsls	r2, r3, #22
 800ff82:	d402      	bmi.n	800ff8a <_vfiprintf_r+0x1fe>
 800ff84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff86:	f7f6 fe9b 	bl	8006cc0 <__retarget_lock_release_recursive>
 800ff8a:	89ab      	ldrh	r3, [r5, #12]
 800ff8c:	065b      	lsls	r3, r3, #25
 800ff8e:	f53f af1f 	bmi.w	800fdd0 <_vfiprintf_r+0x44>
 800ff92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff94:	e71e      	b.n	800fdd4 <_vfiprintf_r+0x48>
 800ff96:	ab03      	add	r3, sp, #12
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	462a      	mov	r2, r5
 800ff9c:	4b05      	ldr	r3, [pc, #20]	@ (800ffb4 <_vfiprintf_r+0x228>)
 800ff9e:	a904      	add	r1, sp, #16
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f7fc ffcf 	bl	800cf44 <_printf_i>
 800ffa6:	e7e4      	b.n	800ff72 <_vfiprintf_r+0x1e6>
 800ffa8:	08012138 	.word	0x08012138
 800ffac:	08012142 	.word	0x08012142
 800ffb0:	0800ca15 	.word	0x0800ca15
 800ffb4:	0800fd67 	.word	0x0800fd67
 800ffb8:	0801213e 	.word	0x0801213e

0800ffbc <__sflush_r>:
 800ffbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ffc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc4:	0716      	lsls	r6, r2, #28
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	460c      	mov	r4, r1
 800ffca:	d454      	bmi.n	8010076 <__sflush_r+0xba>
 800ffcc:	684b      	ldr	r3, [r1, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	dc02      	bgt.n	800ffd8 <__sflush_r+0x1c>
 800ffd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	dd48      	ble.n	801006a <__sflush_r+0xae>
 800ffd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ffda:	2e00      	cmp	r6, #0
 800ffdc:	d045      	beq.n	801006a <__sflush_r+0xae>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ffe4:	682f      	ldr	r7, [r5, #0]
 800ffe6:	6a21      	ldr	r1, [r4, #32]
 800ffe8:	602b      	str	r3, [r5, #0]
 800ffea:	d030      	beq.n	801004e <__sflush_r+0x92>
 800ffec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ffee:	89a3      	ldrh	r3, [r4, #12]
 800fff0:	0759      	lsls	r1, r3, #29
 800fff2:	d505      	bpl.n	8010000 <__sflush_r+0x44>
 800fff4:	6863      	ldr	r3, [r4, #4]
 800fff6:	1ad2      	subs	r2, r2, r3
 800fff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fffa:	b10b      	cbz	r3, 8010000 <__sflush_r+0x44>
 800fffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fffe:	1ad2      	subs	r2, r2, r3
 8010000:	2300      	movs	r3, #0
 8010002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010004:	6a21      	ldr	r1, [r4, #32]
 8010006:	4628      	mov	r0, r5
 8010008:	47b0      	blx	r6
 801000a:	1c43      	adds	r3, r0, #1
 801000c:	89a3      	ldrh	r3, [r4, #12]
 801000e:	d106      	bne.n	801001e <__sflush_r+0x62>
 8010010:	6829      	ldr	r1, [r5, #0]
 8010012:	291d      	cmp	r1, #29
 8010014:	d82b      	bhi.n	801006e <__sflush_r+0xb2>
 8010016:	4a2a      	ldr	r2, [pc, #168]	@ (80100c0 <__sflush_r+0x104>)
 8010018:	410a      	asrs	r2, r1
 801001a:	07d6      	lsls	r6, r2, #31
 801001c:	d427      	bmi.n	801006e <__sflush_r+0xb2>
 801001e:	2200      	movs	r2, #0
 8010020:	6062      	str	r2, [r4, #4]
 8010022:	04d9      	lsls	r1, r3, #19
 8010024:	6922      	ldr	r2, [r4, #16]
 8010026:	6022      	str	r2, [r4, #0]
 8010028:	d504      	bpl.n	8010034 <__sflush_r+0x78>
 801002a:	1c42      	adds	r2, r0, #1
 801002c:	d101      	bne.n	8010032 <__sflush_r+0x76>
 801002e:	682b      	ldr	r3, [r5, #0]
 8010030:	b903      	cbnz	r3, 8010034 <__sflush_r+0x78>
 8010032:	6560      	str	r0, [r4, #84]	@ 0x54
 8010034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010036:	602f      	str	r7, [r5, #0]
 8010038:	b1b9      	cbz	r1, 801006a <__sflush_r+0xae>
 801003a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801003e:	4299      	cmp	r1, r3
 8010040:	d002      	beq.n	8010048 <__sflush_r+0x8c>
 8010042:	4628      	mov	r0, r5
 8010044:	f7fe fc50 	bl	800e8e8 <_free_r>
 8010048:	2300      	movs	r3, #0
 801004a:	6363      	str	r3, [r4, #52]	@ 0x34
 801004c:	e00d      	b.n	801006a <__sflush_r+0xae>
 801004e:	2301      	movs	r3, #1
 8010050:	4628      	mov	r0, r5
 8010052:	47b0      	blx	r6
 8010054:	4602      	mov	r2, r0
 8010056:	1c50      	adds	r0, r2, #1
 8010058:	d1c9      	bne.n	800ffee <__sflush_r+0x32>
 801005a:	682b      	ldr	r3, [r5, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d0c6      	beq.n	800ffee <__sflush_r+0x32>
 8010060:	2b1d      	cmp	r3, #29
 8010062:	d001      	beq.n	8010068 <__sflush_r+0xac>
 8010064:	2b16      	cmp	r3, #22
 8010066:	d11e      	bne.n	80100a6 <__sflush_r+0xea>
 8010068:	602f      	str	r7, [r5, #0]
 801006a:	2000      	movs	r0, #0
 801006c:	e022      	b.n	80100b4 <__sflush_r+0xf8>
 801006e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010072:	b21b      	sxth	r3, r3
 8010074:	e01b      	b.n	80100ae <__sflush_r+0xf2>
 8010076:	690f      	ldr	r7, [r1, #16]
 8010078:	2f00      	cmp	r7, #0
 801007a:	d0f6      	beq.n	801006a <__sflush_r+0xae>
 801007c:	0793      	lsls	r3, r2, #30
 801007e:	680e      	ldr	r6, [r1, #0]
 8010080:	bf08      	it	eq
 8010082:	694b      	ldreq	r3, [r1, #20]
 8010084:	600f      	str	r7, [r1, #0]
 8010086:	bf18      	it	ne
 8010088:	2300      	movne	r3, #0
 801008a:	eba6 0807 	sub.w	r8, r6, r7
 801008e:	608b      	str	r3, [r1, #8]
 8010090:	f1b8 0f00 	cmp.w	r8, #0
 8010094:	dde9      	ble.n	801006a <__sflush_r+0xae>
 8010096:	6a21      	ldr	r1, [r4, #32]
 8010098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801009a:	4643      	mov	r3, r8
 801009c:	463a      	mov	r2, r7
 801009e:	4628      	mov	r0, r5
 80100a0:	47b0      	blx	r6
 80100a2:	2800      	cmp	r0, #0
 80100a4:	dc08      	bgt.n	80100b8 <__sflush_r+0xfc>
 80100a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100ae:	81a3      	strh	r3, [r4, #12]
 80100b0:	f04f 30ff 	mov.w	r0, #4294967295
 80100b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100b8:	4407      	add	r7, r0
 80100ba:	eba8 0800 	sub.w	r8, r8, r0
 80100be:	e7e7      	b.n	8010090 <__sflush_r+0xd4>
 80100c0:	dfbffffe 	.word	0xdfbffffe

080100c4 <_fflush_r>:
 80100c4:	b538      	push	{r3, r4, r5, lr}
 80100c6:	690b      	ldr	r3, [r1, #16]
 80100c8:	4605      	mov	r5, r0
 80100ca:	460c      	mov	r4, r1
 80100cc:	b913      	cbnz	r3, 80100d4 <_fflush_r+0x10>
 80100ce:	2500      	movs	r5, #0
 80100d0:	4628      	mov	r0, r5
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	b118      	cbz	r0, 80100de <_fflush_r+0x1a>
 80100d6:	6a03      	ldr	r3, [r0, #32]
 80100d8:	b90b      	cbnz	r3, 80100de <_fflush_r+0x1a>
 80100da:	f7fd faf3 	bl	800d6c4 <__sinit>
 80100de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d0f3      	beq.n	80100ce <_fflush_r+0xa>
 80100e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80100e8:	07d0      	lsls	r0, r2, #31
 80100ea:	d404      	bmi.n	80100f6 <_fflush_r+0x32>
 80100ec:	0599      	lsls	r1, r3, #22
 80100ee:	d402      	bmi.n	80100f6 <_fflush_r+0x32>
 80100f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100f2:	f7f6 fdc9 	bl	8006c88 <__retarget_lock_acquire_recursive>
 80100f6:	4628      	mov	r0, r5
 80100f8:	4621      	mov	r1, r4
 80100fa:	f7ff ff5f 	bl	800ffbc <__sflush_r>
 80100fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010100:	07da      	lsls	r2, r3, #31
 8010102:	4605      	mov	r5, r0
 8010104:	d4e4      	bmi.n	80100d0 <_fflush_r+0xc>
 8010106:	89a3      	ldrh	r3, [r4, #12]
 8010108:	059b      	lsls	r3, r3, #22
 801010a:	d4e1      	bmi.n	80100d0 <_fflush_r+0xc>
 801010c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801010e:	f7f6 fdd7 	bl	8006cc0 <__retarget_lock_release_recursive>
 8010112:	e7dd      	b.n	80100d0 <_fflush_r+0xc>

08010114 <__swhatbuf_r>:
 8010114:	b570      	push	{r4, r5, r6, lr}
 8010116:	460c      	mov	r4, r1
 8010118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801011c:	2900      	cmp	r1, #0
 801011e:	b096      	sub	sp, #88	@ 0x58
 8010120:	4615      	mov	r5, r2
 8010122:	461e      	mov	r6, r3
 8010124:	da0d      	bge.n	8010142 <__swhatbuf_r+0x2e>
 8010126:	89a3      	ldrh	r3, [r4, #12]
 8010128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801012c:	f04f 0100 	mov.w	r1, #0
 8010130:	bf14      	ite	ne
 8010132:	2340      	movne	r3, #64	@ 0x40
 8010134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010138:	2000      	movs	r0, #0
 801013a:	6031      	str	r1, [r6, #0]
 801013c:	602b      	str	r3, [r5, #0]
 801013e:	b016      	add	sp, #88	@ 0x58
 8010140:	bd70      	pop	{r4, r5, r6, pc}
 8010142:	466a      	mov	r2, sp
 8010144:	f000 f862 	bl	801020c <_fstat_r>
 8010148:	2800      	cmp	r0, #0
 801014a:	dbec      	blt.n	8010126 <__swhatbuf_r+0x12>
 801014c:	9901      	ldr	r1, [sp, #4]
 801014e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010156:	4259      	negs	r1, r3
 8010158:	4159      	adcs	r1, r3
 801015a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801015e:	e7eb      	b.n	8010138 <__swhatbuf_r+0x24>

08010160 <__smakebuf_r>:
 8010160:	898b      	ldrh	r3, [r1, #12]
 8010162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010164:	079d      	lsls	r5, r3, #30
 8010166:	4606      	mov	r6, r0
 8010168:	460c      	mov	r4, r1
 801016a:	d507      	bpl.n	801017c <__smakebuf_r+0x1c>
 801016c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	6123      	str	r3, [r4, #16]
 8010174:	2301      	movs	r3, #1
 8010176:	6163      	str	r3, [r4, #20]
 8010178:	b003      	add	sp, #12
 801017a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801017c:	ab01      	add	r3, sp, #4
 801017e:	466a      	mov	r2, sp
 8010180:	f7ff ffc8 	bl	8010114 <__swhatbuf_r>
 8010184:	9f00      	ldr	r7, [sp, #0]
 8010186:	4605      	mov	r5, r0
 8010188:	4639      	mov	r1, r7
 801018a:	4630      	mov	r0, r6
 801018c:	f7fb fcaa 	bl	800bae4 <_malloc_r>
 8010190:	b948      	cbnz	r0, 80101a6 <__smakebuf_r+0x46>
 8010192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010196:	059a      	lsls	r2, r3, #22
 8010198:	d4ee      	bmi.n	8010178 <__smakebuf_r+0x18>
 801019a:	f023 0303 	bic.w	r3, r3, #3
 801019e:	f043 0302 	orr.w	r3, r3, #2
 80101a2:	81a3      	strh	r3, [r4, #12]
 80101a4:	e7e2      	b.n	801016c <__smakebuf_r+0xc>
 80101a6:	89a3      	ldrh	r3, [r4, #12]
 80101a8:	6020      	str	r0, [r4, #0]
 80101aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101ae:	81a3      	strh	r3, [r4, #12]
 80101b0:	9b01      	ldr	r3, [sp, #4]
 80101b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80101b6:	b15b      	cbz	r3, 80101d0 <__smakebuf_r+0x70>
 80101b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101bc:	4630      	mov	r0, r6
 80101be:	f000 f837 	bl	8010230 <_isatty_r>
 80101c2:	b128      	cbz	r0, 80101d0 <__smakebuf_r+0x70>
 80101c4:	89a3      	ldrh	r3, [r4, #12]
 80101c6:	f023 0303 	bic.w	r3, r3, #3
 80101ca:	f043 0301 	orr.w	r3, r3, #1
 80101ce:	81a3      	strh	r3, [r4, #12]
 80101d0:	89a3      	ldrh	r3, [r4, #12]
 80101d2:	431d      	orrs	r5, r3
 80101d4:	81a5      	strh	r5, [r4, #12]
 80101d6:	e7cf      	b.n	8010178 <__smakebuf_r+0x18>

080101d8 <memmove>:
 80101d8:	4288      	cmp	r0, r1
 80101da:	b510      	push	{r4, lr}
 80101dc:	eb01 0402 	add.w	r4, r1, r2
 80101e0:	d902      	bls.n	80101e8 <memmove+0x10>
 80101e2:	4284      	cmp	r4, r0
 80101e4:	4623      	mov	r3, r4
 80101e6:	d807      	bhi.n	80101f8 <memmove+0x20>
 80101e8:	1e43      	subs	r3, r0, #1
 80101ea:	42a1      	cmp	r1, r4
 80101ec:	d008      	beq.n	8010200 <memmove+0x28>
 80101ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101f6:	e7f8      	b.n	80101ea <memmove+0x12>
 80101f8:	4402      	add	r2, r0
 80101fa:	4601      	mov	r1, r0
 80101fc:	428a      	cmp	r2, r1
 80101fe:	d100      	bne.n	8010202 <memmove+0x2a>
 8010200:	bd10      	pop	{r4, pc}
 8010202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801020a:	e7f7      	b.n	80101fc <memmove+0x24>

0801020c <_fstat_r>:
 801020c:	b538      	push	{r3, r4, r5, lr}
 801020e:	4d07      	ldr	r5, [pc, #28]	@ (801022c <_fstat_r+0x20>)
 8010210:	2300      	movs	r3, #0
 8010212:	4604      	mov	r4, r0
 8010214:	4608      	mov	r0, r1
 8010216:	4611      	mov	r1, r2
 8010218:	602b      	str	r3, [r5, #0]
 801021a:	f7f4 ffaf 	bl	800517c <_fstat>
 801021e:	1c43      	adds	r3, r0, #1
 8010220:	d102      	bne.n	8010228 <_fstat_r+0x1c>
 8010222:	682b      	ldr	r3, [r5, #0]
 8010224:	b103      	cbz	r3, 8010228 <_fstat_r+0x1c>
 8010226:	6023      	str	r3, [r4, #0]
 8010228:	bd38      	pop	{r3, r4, r5, pc}
 801022a:	bf00      	nop
 801022c:	200049fc 	.word	0x200049fc

08010230 <_isatty_r>:
 8010230:	b538      	push	{r3, r4, r5, lr}
 8010232:	4d06      	ldr	r5, [pc, #24]	@ (801024c <_isatty_r+0x1c>)
 8010234:	2300      	movs	r3, #0
 8010236:	4604      	mov	r4, r0
 8010238:	4608      	mov	r0, r1
 801023a:	602b      	str	r3, [r5, #0]
 801023c:	f7f4 ffa4 	bl	8005188 <_isatty>
 8010240:	1c43      	adds	r3, r0, #1
 8010242:	d102      	bne.n	801024a <_isatty_r+0x1a>
 8010244:	682b      	ldr	r3, [r5, #0]
 8010246:	b103      	cbz	r3, 801024a <_isatty_r+0x1a>
 8010248:	6023      	str	r3, [r4, #0]
 801024a:	bd38      	pop	{r3, r4, r5, pc}
 801024c:	200049fc 	.word	0x200049fc

08010250 <__assert_func>:
 8010250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010252:	4614      	mov	r4, r2
 8010254:	461a      	mov	r2, r3
 8010256:	4b09      	ldr	r3, [pc, #36]	@ (801027c <__assert_func+0x2c>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4605      	mov	r5, r0
 801025c:	68d8      	ldr	r0, [r3, #12]
 801025e:	b954      	cbnz	r4, 8010276 <__assert_func+0x26>
 8010260:	4b07      	ldr	r3, [pc, #28]	@ (8010280 <__assert_func+0x30>)
 8010262:	461c      	mov	r4, r3
 8010264:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010268:	9100      	str	r1, [sp, #0]
 801026a:	462b      	mov	r3, r5
 801026c:	4905      	ldr	r1, [pc, #20]	@ (8010284 <__assert_func+0x34>)
 801026e:	f000 f84f 	bl	8010310 <fiprintf>
 8010272:	f000 f85f 	bl	8010334 <abort>
 8010276:	4b04      	ldr	r3, [pc, #16]	@ (8010288 <__assert_func+0x38>)
 8010278:	e7f4      	b.n	8010264 <__assert_func+0x14>
 801027a:	bf00      	nop
 801027c:	200001b0 	.word	0x200001b0
 8010280:	08012184 	.word	0x08012184
 8010284:	08012156 	.word	0x08012156
 8010288:	08012149 	.word	0x08012149

0801028c <_calloc_r>:
 801028c:	b570      	push	{r4, r5, r6, lr}
 801028e:	fba1 5402 	umull	r5, r4, r1, r2
 8010292:	b93c      	cbnz	r4, 80102a4 <_calloc_r+0x18>
 8010294:	4629      	mov	r1, r5
 8010296:	f7fb fc25 	bl	800bae4 <_malloc_r>
 801029a:	4606      	mov	r6, r0
 801029c:	b928      	cbnz	r0, 80102aa <_calloc_r+0x1e>
 801029e:	2600      	movs	r6, #0
 80102a0:	4630      	mov	r0, r6
 80102a2:	bd70      	pop	{r4, r5, r6, pc}
 80102a4:	220c      	movs	r2, #12
 80102a6:	6002      	str	r2, [r0, #0]
 80102a8:	e7f9      	b.n	801029e <_calloc_r+0x12>
 80102aa:	462a      	mov	r2, r5
 80102ac:	4621      	mov	r1, r4
 80102ae:	f7fd fba7 	bl	800da00 <memset>
 80102b2:	e7f5      	b.n	80102a0 <_calloc_r+0x14>

080102b4 <_realloc_r>:
 80102b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102b8:	4680      	mov	r8, r0
 80102ba:	4615      	mov	r5, r2
 80102bc:	460c      	mov	r4, r1
 80102be:	b921      	cbnz	r1, 80102ca <_realloc_r+0x16>
 80102c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102c4:	4611      	mov	r1, r2
 80102c6:	f7fb bc0d 	b.w	800bae4 <_malloc_r>
 80102ca:	b92a      	cbnz	r2, 80102d8 <_realloc_r+0x24>
 80102cc:	f7fe fb0c 	bl	800e8e8 <_free_r>
 80102d0:	2400      	movs	r4, #0
 80102d2:	4620      	mov	r0, r4
 80102d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d8:	f000 f833 	bl	8010342 <_malloc_usable_size_r>
 80102dc:	4285      	cmp	r5, r0
 80102de:	4606      	mov	r6, r0
 80102e0:	d802      	bhi.n	80102e8 <_realloc_r+0x34>
 80102e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80102e6:	d8f4      	bhi.n	80102d2 <_realloc_r+0x1e>
 80102e8:	4629      	mov	r1, r5
 80102ea:	4640      	mov	r0, r8
 80102ec:	f7fb fbfa 	bl	800bae4 <_malloc_r>
 80102f0:	4607      	mov	r7, r0
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d0ec      	beq.n	80102d0 <_realloc_r+0x1c>
 80102f6:	42b5      	cmp	r5, r6
 80102f8:	462a      	mov	r2, r5
 80102fa:	4621      	mov	r1, r4
 80102fc:	bf28      	it	cs
 80102fe:	4632      	movcs	r2, r6
 8010300:	f7fd fc88 	bl	800dc14 <memcpy>
 8010304:	4621      	mov	r1, r4
 8010306:	4640      	mov	r0, r8
 8010308:	f7fe faee 	bl	800e8e8 <_free_r>
 801030c:	463c      	mov	r4, r7
 801030e:	e7e0      	b.n	80102d2 <_realloc_r+0x1e>

08010310 <fiprintf>:
 8010310:	b40e      	push	{r1, r2, r3}
 8010312:	b503      	push	{r0, r1, lr}
 8010314:	4601      	mov	r1, r0
 8010316:	ab03      	add	r3, sp, #12
 8010318:	4805      	ldr	r0, [pc, #20]	@ (8010330 <fiprintf+0x20>)
 801031a:	f853 2b04 	ldr.w	r2, [r3], #4
 801031e:	6800      	ldr	r0, [r0, #0]
 8010320:	9301      	str	r3, [sp, #4]
 8010322:	f7ff fd33 	bl	800fd8c <_vfiprintf_r>
 8010326:	b002      	add	sp, #8
 8010328:	f85d eb04 	ldr.w	lr, [sp], #4
 801032c:	b003      	add	sp, #12
 801032e:	4770      	bx	lr
 8010330:	200001b0 	.word	0x200001b0

08010334 <abort>:
 8010334:	b508      	push	{r3, lr}
 8010336:	2006      	movs	r0, #6
 8010338:	f000 f834 	bl	80103a4 <raise>
 801033c:	2001      	movs	r0, #1
 801033e:	f7f4 ff13 	bl	8005168 <_exit>

08010342 <_malloc_usable_size_r>:
 8010342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010346:	1f18      	subs	r0, r3, #4
 8010348:	2b00      	cmp	r3, #0
 801034a:	bfbc      	itt	lt
 801034c:	580b      	ldrlt	r3, [r1, r0]
 801034e:	18c0      	addlt	r0, r0, r3
 8010350:	4770      	bx	lr

08010352 <_raise_r>:
 8010352:	291f      	cmp	r1, #31
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4605      	mov	r5, r0
 8010358:	460c      	mov	r4, r1
 801035a:	d904      	bls.n	8010366 <_raise_r+0x14>
 801035c:	2316      	movs	r3, #22
 801035e:	6003      	str	r3, [r0, #0]
 8010360:	f04f 30ff 	mov.w	r0, #4294967295
 8010364:	bd38      	pop	{r3, r4, r5, pc}
 8010366:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010368:	b112      	cbz	r2, 8010370 <_raise_r+0x1e>
 801036a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801036e:	b94b      	cbnz	r3, 8010384 <_raise_r+0x32>
 8010370:	4628      	mov	r0, r5
 8010372:	f000 f831 	bl	80103d8 <_getpid_r>
 8010376:	4622      	mov	r2, r4
 8010378:	4601      	mov	r1, r0
 801037a:	4628      	mov	r0, r5
 801037c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010380:	f000 b818 	b.w	80103b4 <_kill_r>
 8010384:	2b01      	cmp	r3, #1
 8010386:	d00a      	beq.n	801039e <_raise_r+0x4c>
 8010388:	1c59      	adds	r1, r3, #1
 801038a:	d103      	bne.n	8010394 <_raise_r+0x42>
 801038c:	2316      	movs	r3, #22
 801038e:	6003      	str	r3, [r0, #0]
 8010390:	2001      	movs	r0, #1
 8010392:	e7e7      	b.n	8010364 <_raise_r+0x12>
 8010394:	2100      	movs	r1, #0
 8010396:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801039a:	4620      	mov	r0, r4
 801039c:	4798      	blx	r3
 801039e:	2000      	movs	r0, #0
 80103a0:	e7e0      	b.n	8010364 <_raise_r+0x12>
	...

080103a4 <raise>:
 80103a4:	4b02      	ldr	r3, [pc, #8]	@ (80103b0 <raise+0xc>)
 80103a6:	4601      	mov	r1, r0
 80103a8:	6818      	ldr	r0, [r3, #0]
 80103aa:	f7ff bfd2 	b.w	8010352 <_raise_r>
 80103ae:	bf00      	nop
 80103b0:	200001b0 	.word	0x200001b0

080103b4 <_kill_r>:
 80103b4:	b538      	push	{r3, r4, r5, lr}
 80103b6:	4d07      	ldr	r5, [pc, #28]	@ (80103d4 <_kill_r+0x20>)
 80103b8:	2300      	movs	r3, #0
 80103ba:	4604      	mov	r4, r0
 80103bc:	4608      	mov	r0, r1
 80103be:	4611      	mov	r1, r2
 80103c0:	602b      	str	r3, [r5, #0]
 80103c2:	f7f4 fec9 	bl	8005158 <_kill>
 80103c6:	1c43      	adds	r3, r0, #1
 80103c8:	d102      	bne.n	80103d0 <_kill_r+0x1c>
 80103ca:	682b      	ldr	r3, [r5, #0]
 80103cc:	b103      	cbz	r3, 80103d0 <_kill_r+0x1c>
 80103ce:	6023      	str	r3, [r4, #0]
 80103d0:	bd38      	pop	{r3, r4, r5, pc}
 80103d2:	bf00      	nop
 80103d4:	200049fc 	.word	0x200049fc

080103d8 <_getpid_r>:
 80103d8:	f7f4 bebc 	b.w	8005154 <_getpid>

080103dc <_init>:
 80103dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103de:	bf00      	nop
 80103e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103e2:	bc08      	pop	{r3}
 80103e4:	469e      	mov	lr, r3
 80103e6:	4770      	bx	lr

080103e8 <_fini>:
 80103e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ea:	bf00      	nop
 80103ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103ee:	bc08      	pop	{r3}
 80103f0:	469e      	mov	lr, r3
 80103f2:	4770      	bx	lr
