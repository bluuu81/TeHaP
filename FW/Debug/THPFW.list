
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ac  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062a0  080062a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062a8  080062a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062a8  080062a8  000162a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  2000000c  080062bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  080062bc  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c52  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba6  00000000  00000000  00037c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0003bd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002419d  00000000  00000000  0003d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019297  00000000  00000000  0006128d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1bb3  00000000  00000000  0007a524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c0d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  0015c128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006220 	.word	0x08006220

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08006220 	.word	0x08006220

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f001 f933 	bl	800173e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f83e 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 fbb2 	bl	8000c44 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 fb6a 	bl	8000bb8 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e4:	f000 f88a 	bl	80005fc <MX_ADC1_Init>
  MX_I2C1_Init();
 80004e8:	f000 f92c 	bl	8000744 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004ec:	f000 f96a 	bl	80007c4 <MX_I2C2_Init>
  MX_I2C3_Init();
 80004f0:	f000 f9a8 	bl	8000844 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 fb00 	bl	8000af8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 fb2e 	bl	8000b58 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80004fc:	f000 f900 	bl	8000700 <MX_CRC_Init>
//  MX_IWDG_Init();
  MX_TIM1_Init();
 8000500:	f000 f9e0 	bl	80008c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000504:	f000 fa32 	bl	800096c <MX_TIM2_Init>
  MX_TIM16_Init();
 8000508:	f000 fa7e 	bl	8000a08 <MX_TIM16_Init>
  PWM_Init_Timers();
 800050c:	f001 f8e4 	bl	80016d8 <PWM_Init_Timers>
  /* USER CODE BEGIN 2 */
  LED1_ON();
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	480f      	ldr	r0, [pc, #60]	; (8000554 <main+0x84>)
 8000516:	f002 fd3d 	bl	8002f94 <HAL_GPIO_WritePin>
  LED2_ON();
 800051a:	201f      	movs	r0, #31
 800051c:	f001 f8ca 	bl	80016b4 <setLed2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LED1_ON();
 8000520:	2200      	movs	r2, #0
 8000522:	2120      	movs	r1, #32
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <main+0x84>)
 8000526:	f002 fd35 	bl	8002f94 <HAL_GPIO_WritePin>
	  LED2_ON();
 800052a:	201f      	movs	r0, #31
 800052c:	f001 f8c2 	bl	80016b4 <setLed2>
	  HAL_Delay(1000);
 8000530:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000534:	f001 f978 	bl	8001828 <HAL_Delay>
	  LED1_OFF();
 8000538:	2201      	movs	r2, #1
 800053a:	2120      	movs	r1, #32
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <main+0x84>)
 800053e:	f002 fd29 	bl	8002f94 <HAL_GPIO_WritePin>
	  LED2_OFF();
 8000542:	2000      	movs	r0, #0
 8000544:	f001 f8b6 	bl	80016b4 <setLed2>
	  HAL_Delay(1000);
 8000548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054c:	f001 f96c 	bl	8001828 <HAL_Delay>
	  LED1_ON();
 8000550:	e7e6      	b.n	8000520 <main+0x50>
 8000552:	bf00      	nop
 8000554:	48000400 	.word	0x48000400

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	; 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fe52 	bl	8006210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f002 fe55 	bl	800322c <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 fbf2 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800058c:	2309      	movs	r3, #9
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000596:	2301      	movs	r3, #1
 8000598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	2303      	movs	r3, #3
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fe8c 	bl	80032d8 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005c6:	f000 fbd3 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 fa8c 	bl	8003b00 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 fbbf 	bl	8000d70 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	; 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000614:	4a37      	ldr	r2, [pc, #220]	; (80006f4 <MX_ADC1_Init+0xf8>)
 8000616:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000618:	4b35      	ldr	r3, [pc, #212]	; (80006f0 <MX_ADC1_Init+0xf4>)
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000624:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <MX_ADC1_Init+0xf4>)
 800062c:	2201      	movs	r2, #1
 800062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000632:	2204      	movs	r2, #4
 8000634:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000638:	2200      	movs	r2, #0
 800063a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_ADC1_Init+0xf4>)
 800063e:	2200      	movs	r2, #0
 8000640:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000644:	2202      	movs	r2, #2
 8000646:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_ADC1_Init+0xf4>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <MX_ADC1_Init+0xf4>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000666:	2200      	movs	r2, #0
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC1_Init+0xf4>)
 800066c:	2201      	movs	r2, #1
 800066e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000674:	220c      	movs	r2, #12
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_ADC1_Init+0xf4>)
 800067a:	2200      	movs	r2, #0
 800067c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000680:	2200      	movs	r2, #0
 8000682:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_ADC1_Init+0xf4>)
 8000686:	2201      	movs	r2, #1
 8000688:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068a:	4819      	ldr	r0, [pc, #100]	; (80006f0 <MX_ADC1_Init+0xf4>)
 800068c:	f001 fa7c 	bl	8001b88 <HAL_ADC_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000696:	f000 fb6b 	bl	8000d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0xfc>)
 800069c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069e:	2306      	movs	r3, #6
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a6:	237f      	movs	r3, #127	; 0x7f
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006aa:	2304      	movs	r3, #4
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <MX_ADC1_Init+0xf4>)
 80006b8:	f001 fbae 	bl	8001e18 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80006c2:	f000 fb55 	bl	8000d70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_ADC1_Init+0x100>)
 80006c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006ca:	230c      	movs	r3, #12
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80006ce:	2303      	movs	r3, #3
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <MX_ADC1_Init+0xf4>)
 80006d8:	f001 fb9e 	bl	8001e18 <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80006e2:	f000 fb45 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	50040000 	.word	0x50040000
 80006f8:	c7520000 	.word	0xc7520000
 80006fc:	19200040 	.word	0x19200040

08000700 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_CRC_Init+0x3c>)
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <MX_CRC_Init+0x40>)
 8000708:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_CRC_Init+0x3c>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_CRC_Init+0x3c>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_CRC_Init+0x3c>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_CRC_Init+0x3c>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_CRC_Init+0x3c>)
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_CRC_Init+0x3c>)
 800072a:	f002 f867 	bl	80027fc <HAL_CRC_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000734:	f000 fb1c 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c
 8000740:	40023000 	.word	0x40023000

08000744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_I2C1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_I2C1_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C1_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000780:	f002 fc20 	bl	8002fc4 <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 faf1 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000792:	f002 fca6 	bl	80030e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 fae8 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2C1_Init+0x74>)
 80007a4:	f002 fce8 	bl	8003178 <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fadf 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000b0 	.word	0x200000b0
 80007bc:	40005400 	.word	0x40005400
 80007c0:	00301347 	.word	0x00301347

080007c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C2_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C2_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C2_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C2_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C2_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <MX_I2C2_Init+0x74>)
 8000800:	f002 fbe0 	bl	8002fc4 <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 fab1 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C2_Init+0x74>)
 8000812:	f002 fc66 	bl	80030e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 faa8 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2C2_Init+0x74>)
 8000824:	f002 fca8 	bl	8003178 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fa9f 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000104 	.word	0x20000104
 800083c:	40005800 	.word	0x40005800
 8000840:	00301347 	.word	0x00301347

08000844 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_I2C3_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_I2C3_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00301347;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_I2C3_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_I2C3_Init+0x74>)
 800085c:	2201      	movs	r2, #1
 800085e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C3_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000880:	f002 fba0 	bl	8002fc4 <HAL_I2C_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 fa71 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_I2C3_Init+0x74>)
 8000892:	f002 fc26 	bl	80030e2 <HAL_I2CEx_ConfigAnalogFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 fa68 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_I2C3_Init+0x74>)
 80008a4:	f002 fc68 	bl	8003178 <HAL_I2CEx_ConfigDigitalFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 fa5f 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000158 	.word	0x20000158
 80008bc:	40005c00 	.word	0x40005c00
 80008c0:	00301347 	.word	0x00301347

080008c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008e2:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_TIM1_Init+0xa0>)
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <MX_TIM1_Init+0xa4>)
 80008e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008e8:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_TIM1_Init+0xa0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_TIM1_Init+0xa0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_TIM1_Init+0xa0>)
 80008f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_TIM1_Init+0xa0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_TIM1_Init+0xa0>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_TIM1_Init+0xa0>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800090e:	4815      	ldr	r0, [pc, #84]	; (8000964 <MX_TIM1_Init+0xa0>)
 8000910:	f003 fe24 	bl	800455c <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800091a:	f000 fa29 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_TIM1_Init+0xa0>)
 800092c:	f004 fa5a 	bl	8004de4 <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000936:	f000 fa1b 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_TIM1_Init+0xa0>)
 800094c:	f004 fee8 	bl	8005720 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000956:	f000 fa0b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200002cc 	.word	0x200002cc
 8000968:	40012c00 	.word	0x40012c00

0800096c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0310 	add.w	r3, r7, #16
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_TIM2_Init+0x98>)
 800098c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000990:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_TIM2_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <MX_TIM2_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_TIM2_Init+0x98>)
 80009a0:	f04f 32ff 	mov.w	r2, #4294967295
 80009a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_TIM2_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_TIM2_Init+0x98>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_TIM2_Init+0x98>)
 80009b4:	f003 fdd2 	bl	800455c <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009be:	f000 f9d7 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_TIM2_Init+0x98>)
 80009d0:	f004 fa08 	bl	8004de4 <HAL_TIM_ConfigClockSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009da:	f000 f9c9 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_TIM2_Init+0x98>)
 80009ec:	f004 fe98 	bl	8005720 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009f6:	f000 f9bb 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000318 	.word	0x20000318

08000a08 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b092      	sub	sp, #72	; 0x48
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a22:	463b      	mov	r3, r7
 8000a24:	222c      	movs	r2, #44	; 0x2c
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 fbf1 	bl	8006210 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a2e:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a30:	4a30      	ldr	r2, [pc, #192]	; (8000af4 <MX_TIM16_Init+0xec>)
 8000a32:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 537;
 8000a34:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a36:	f240 2219 	movw	r2, #537	; 0x219
 8000a3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256;
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a48:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4a:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a50:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a5c:	4824      	ldr	r0, [pc, #144]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a5e:	f003 fd7d 	bl	800455c <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8000a68:	f000 f982 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000a6c:	4820      	ldr	r0, [pc, #128]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000a6e:	f003 fdcc 	bl	800460a <HAL_TIM_PWM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8000a78:	f000 f97a 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a90:	2300      	movs	r3, #0
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000aa2:	f004 f88b 	bl	8004bbc <HAL_TIM_PWM_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000aac:	f000 f960 	bl	8000d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000ad4:	f004 fe8a 	bl	80057ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000ade:	f000 f947 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_TIM16_Init+0xe8>)
 8000ae4:	f000 fc0a 	bl	80012fc <HAL_TIM_MspPostInit>

}
 8000ae8:	bf00      	nop
 8000aea:	3748      	adds	r7, #72	; 0x48
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000364 	.word	0x20000364
 8000af4:	40014400 	.word	0x40014400

08000af8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <MX_USART1_UART_Init+0x5c>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b3c:	f004 feec 	bl	8005918 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b46:	f000 f913 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200003b0 	.word	0x200003b0
 8000b54:	40013800 	.word	0x40013800

08000b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b5e:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <MX_USART2_UART_Init+0x5c>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_USART2_UART_Init+0x58>)
 8000b9c:	f004 febc 	bl	8005918 <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ba6:	f000 f8e3 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000434 	.word	0x20000434
 8000bb4:	40004400 	.word	0x40004400

08000bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <MX_DMA_Init+0x88>)
 8000bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <MX_DMA_Init+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_DMA_Init+0x88>)
 8000bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	200c      	movs	r0, #12
 8000bdc:	f001 fdd7 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000be0:	200c      	movs	r0, #12
 8000be2:	f001 fdf0 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	200d      	movs	r0, #13
 8000bec:	f001 fdcf 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000bf0:	200d      	movs	r0, #13
 8000bf2:	f001 fde8 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	200e      	movs	r0, #14
 8000bfc:	f001 fdc7 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c00:	200e      	movs	r0, #14
 8000c02:	f001 fde0 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f001 fdbf 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c10:	200f      	movs	r0, #15
 8000c12:	f001 fdd8 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2010      	movs	r0, #16
 8000c1c:	f001 fdb7 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c20:	2010      	movs	r0, #16
 8000c22:	f001 fdd0 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2011      	movs	r0, #17
 8000c2c:	f001 fdaf 	bl	800278e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c30:	2011      	movs	r0, #17
 8000c32:	f001 fdc8 	bl	80027c6 <HAL_NVIC_EnableIRQ>

}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a42      	ldr	r2, [pc, #264]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c72:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a3c      	ldr	r2, [pc, #240]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a36      	ldr	r2, [pc, #216]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a30      	ldr	r2, [pc, #192]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <MX_GPIO_Init+0x124>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 51cb 	mov.w	r1, #6496	; 0x1960
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f002 f966 	bl	8002f94 <HAL_GPIO_WritePin>
                          |BQ_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f248 2121 	movw	r1, #33313	; 0x8221
 8000cce:	4827      	ldr	r0, [pc, #156]	; (8000d6c <MX_GPIO_Init+0x128>)
 8000cd0:	f002 f960 	bl	8002f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SIM_UART_RI_Pin */
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f001 ffd9 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_UART_DTR_Pin SIM_GPS_Pin RST2_Pin BQ_QON_Pin
                           BQ_CE_Pin */
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8000cee:	f44f 53cb 	mov.w	r3, #6496	; 0x1960
 8000cf2:	617b      	str	r3, [r7, #20]
                          |BQ_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f001 ffc9 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_PWR_Pin RST3_Pin LED1_Pin Main_SW_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin;
 8000d0e:	f248 2321 	movw	r3, #33313	; 0x8221
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4811      	ldr	r0, [pc, #68]	; (8000d6c <MX_GPIO_Init+0x128>)
 8000d28:	f001 ffba 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_WDT_Pin BQ_INT_Pin */
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8000d2c:	f241 0302 	movw	r3, #4098	; 0x1002
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480a      	ldr	r0, [pc, #40]	; (8000d6c <MX_GPIO_Init+0x128>)
 8000d42:	f001 ffad 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP7_Pin TP8_Pin */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin;
 8000d46:	f240 4304 	movw	r3, #1028	; 0x404
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_GPIO_Init+0x128>)
 8000d5c:	f001 ffa0 	bl	8002ca0 <HAL_GPIO_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000400 	.word	0x48000400

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0a0      	sub	sp, #128	; 0x80
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	225c      	movs	r2, #92	; 0x5c
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 fa13 	bl	8006210 <memset>
  if(hadc->Instance==ADC1)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_ADC_MspInit+0xc0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d143      	bne.n	8000e7c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000df8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000dfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dfe:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000e00:	2303      	movs	r3, #3
 8000e02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 f890 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000e2e:	f7ff ff9f 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_ADC_MspInit+0xc4>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC_AUX_Pin;
 8000e62:	2302      	movs	r3, #2
 8000e64:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e66:	230b      	movs	r3, #11
 8000e68:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(ADC_AUX_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f001 ff12 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3780      	adds	r7, #128	; 0x80
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	50040000 	.word	0x50040000
 8000e88:	40021000 	.word	0x40021000

08000e8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_CRC_MspInit+0x38>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_CRC_MspInit+0x3c>)
 8000ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <HAL_CRC_MspInit+0x3c>)
 8000ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea8:	6493      	str	r3, [r2, #72]	; 0x48
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <HAL_CRC_MspInit+0x3c>)
 8000eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023000 	.word	0x40023000
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0a6      	sub	sp, #152	; 0x98
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee8:	225c      	movs	r2, #92	; 0x5c
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f005 f98f 	bl	8006210 <memset>
  if(hi2c->Instance==I2C1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6b      	ldr	r2, [pc, #428]	; (80010a4 <HAL_I2C_MspInit+0x1d8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d13d      	bne.n	8000f78 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 f81d 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f14:	f7ff ff2c 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a62      	ldr	r2, [pc, #392]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f24:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f38:	2312      	movs	r3, #18
 8000f3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f001 fea1 	bl	8002ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f5e:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f68:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6a:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f72:	623b      	str	r3, [r7, #32]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f76:	e15b      	b.n	8001230 <HAL_I2C_MspInit+0x364>
  else if(hi2c->Instance==I2C2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	; (80010ac <HAL_I2C_MspInit+0x1e0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 80a0 	bne.w	80010c4 <HAL_I2C_MspInit+0x1f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 ffd9 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8000f9c:	f7ff fee8 	bl	8000d70 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa4:	4a40      	ldr	r2, [pc, #256]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000fa6:	f043 0302 	orr.w	r3, r3, #2
 8000faa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000fb8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc0:	2312      	movs	r3, #18
 8000fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4834      	ldr	r0, [pc, #208]	; (80010b0 <HAL_I2C_MspInit+0x1e4>)
 8000fe0:	f001 fe5e 	bl	8002ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000fea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fee:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_I2C_MspInit+0x1dc>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 8000ffe:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <HAL_I2C_MspInit+0x1ec>)
 8001000:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 8001002:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 8001004:	2203      	movs	r2, #3
 8001006:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001032:	4820      	ldr	r0, [pc, #128]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 8001034:	f001 fccc 	bl	80029d0 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_I2C_MspInit+0x176>
      Error_Handler();
 800103e:	f7ff fe97 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 8001046:	63da      	str	r2, [r3, #60]	; 0x3c
 8001048:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <HAL_I2C_MspInit+0x1e8>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 8001050:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <HAL_I2C_MspInit+0x1f4>)
 8001052:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 8001056:	2203      	movs	r2, #3
 8001058:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 800105c:	2210      	movs	r2, #16
 800105e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 8001086:	f001 fca3 	bl	80029d0 <HAL_DMA_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_MspInit+0x1c8>
      Error_Handler();
 8001090:	f7ff fe6e 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 8001098:	639a      	str	r2, [r3, #56]	; 0x38
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_I2C_MspInit+0x1f0>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6293      	str	r3, [r2, #40]	; 0x28
}
 80010a0:	e0c6      	b.n	8001230 <HAL_I2C_MspInit+0x364>
 80010a2:	bf00      	nop
 80010a4:	40005400 	.word	0x40005400
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40005800 	.word	0x40005800
 80010b0:	48000400 	.word	0x48000400
 80010b4:	200001ac 	.word	0x200001ac
 80010b8:	40020058 	.word	0x40020058
 80010bc:	200001f4 	.word	0x200001f4
 80010c0:	40020044 	.word	0x40020044
  else if(hi2c->Instance==I2C3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a5b      	ldr	r2, [pc, #364]	; (8001238 <HAL_I2C_MspInit+0x36c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	f040 80b0 	bne.w	8001230 <HAL_I2C_MspInit+0x364>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80010d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 ff32 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_I2C_MspInit+0x222>
      Error_Handler();
 80010ea:	f7ff fe41 	bl	8000d70 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b53      	ldr	r3, [pc, #332]	; (800123c <HAL_I2C_MspInit+0x370>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a52      	ldr	r2, [pc, #328]	; (800123c <HAL_I2C_MspInit+0x370>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b50      	ldr	r3, [pc, #320]	; (800123c <HAL_I2C_MspInit+0x370>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b4d      	ldr	r3, [pc, #308]	; (800123c <HAL_I2C_MspInit+0x370>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a4c      	ldr	r2, [pc, #304]	; (800123c <HAL_I2C_MspInit+0x370>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b4a      	ldr	r3, [pc, #296]	; (800123c <HAL_I2C_MspInit+0x370>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001124:	2312      	movs	r3, #18
 8001126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001136:	2304      	movs	r3, #4
 8001138:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001140:	4619      	mov	r1, r3
 8001142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001146:	f001 fdab 	bl	8002ca0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114a:	2310      	movs	r3, #16
 800114c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001150:	2312      	movs	r3, #18
 8001152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001162:	2304      	movs	r3, #4
 8001164:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800116c:	4619      	mov	r1, r3
 800116e:	4834      	ldr	r0, [pc, #208]	; (8001240 <HAL_I2C_MspInit+0x374>)
 8001170:	f001 fd96 	bl	8002ca0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <HAL_I2C_MspInit+0x370>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	4a30      	ldr	r2, [pc, #192]	; (800123c <HAL_I2C_MspInit+0x370>)
 800117a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800117e:	6593      	str	r3, [r2, #88]	; 0x58
 8001180:	4b2e      	ldr	r3, [pc, #184]	; (800123c <HAL_I2C_MspInit+0x370>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c3_rx.Instance = DMA1_Channel3;
 800118c:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <HAL_I2C_MspInit+0x378>)
 800118e:	4a2e      	ldr	r2, [pc, #184]	; (8001248 <HAL_I2C_MspInit+0x37c>)
 8001190:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_3;
 8001192:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <HAL_I2C_MspInit+0x378>)
 8001194:	2203      	movs	r2, #3
 8001196:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001198:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <HAL_I2C_MspInit+0x378>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80011c2:	4820      	ldr	r0, [pc, #128]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011c4:	f001 fc04 	bl	80029d0 <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_MspInit+0x306>
      Error_Handler();
 80011ce:	f7ff fdcf 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80011d8:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <HAL_I2C_MspInit+0x378>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c3_tx.Instance = DMA1_Channel2;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_I2C_MspInit+0x380>)
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <HAL_I2C_MspInit+0x384>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_3;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_I2C_MspInit+0x380>)
 80011e6:	2203      	movs	r2, #3
 80011e8:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_I2C_MspInit+0x380>)
 80011ec:	2210      	movs	r2, #16
 80011ee:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_I2C_MspInit+0x380>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_I2C_MspInit+0x380>)
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_I2C_MspInit+0x380>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_I2C_MspInit+0x380>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_I2C_MspInit+0x380>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <HAL_I2C_MspInit+0x380>)
 8001210:	2200      	movs	r2, #0
 8001212:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <HAL_I2C_MspInit+0x380>)
 8001216:	f001 fbdb 	bl	80029d0 <HAL_DMA_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_I2C_MspInit+0x358>
      Error_Handler();
 8001220:	f7ff fda6 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_I2C_MspInit+0x380>)
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
 800122a:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_I2C_MspInit+0x380>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001230:	bf00      	nop
 8001232:	3798      	adds	r7, #152	; 0x98
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40005c00 	.word	0x40005c00
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400
 8001244:	2000023c 	.word	0x2000023c
 8001248:	40020030 	.word	0x40020030
 800124c:	20000284 	.word	0x20000284
 8001250:	4002001c 	.word	0x4002001c

08001254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <HAL_TIM_Base_MspInit+0x9c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d114      	bne.n	8001290 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 800126c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001270:	6613      	str	r3, [r2, #96]	; 0x60
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2019      	movs	r0, #25
 8001284:	f001 fa83 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001288:	2019      	movs	r0, #25
 800128a:	f001 fa9c 	bl	80027c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800128e:	e02a      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001298:	d10c      	bne.n	80012b4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6593      	str	r3, [r2, #88]	; 0x58
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
}
 80012b2:	e018      	b.n	80012e6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <HAL_TIM_Base_MspInit+0xa4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d113      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_TIM_Base_MspInit+0xa0>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2019      	movs	r0, #25
 80012dc:	f001 fa57 	bl	800278e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012e0:	2019      	movs	r0, #25
 80012e2:	f001 fa70 	bl	80027c6 <HAL_NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40014400 	.word	0x40014400

080012fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_TIM_MspPostInit+0x64>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d11c      	bne.n	8001358 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_TIM_MspPostInit+0x68>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <HAL_TIM_MspPostInit+0x68>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_TIM_MspPostInit+0x68>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001348:	230e      	movs	r3, #14
 800134a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <HAL_TIM_MspPostInit+0x6c>)
 8001354:	f001 fca4 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40014400 	.word	0x40014400
 8001364:	40021000 	.word	0x40021000
 8001368:	48000400 	.word	0x48000400

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0a2      	sub	sp, #136	; 0x88
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	f107 0318 	add.w	r3, r7, #24
 8001388:	225c      	movs	r2, #92	; 0x5c
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 ff3f 	bl	8006210 <memset>
  if(huart->Instance==USART1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a68      	ldr	r2, [pc, #416]	; (8001538 <HAL_UART_MspInit+0x1cc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d138      	bne.n	800140e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80013a0:	2301      	movs	r3, #1
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fdcd 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013b4:	f7ff fcdc 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013b8:	4b60      	ldr	r3, [pc, #384]	; (800153c <HAL_UART_MspInit+0x1d0>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	4a5f      	ldr	r2, [pc, #380]	; (800153c <HAL_UART_MspInit+0x1d0>)
 80013be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c2:	6613      	str	r3, [r2, #96]	; 0x60
 80013c4:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_UART_MspInit+0x1d0>)
 80013c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d0:	4b5a      	ldr	r3, [pc, #360]	; (800153c <HAL_UART_MspInit+0x1d0>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	4a59      	ldr	r2, [pc, #356]	; (800153c <HAL_UART_MspInit+0x1d0>)
 80013d6:	f043 0302 	orr.w	r3, r3, #2
 80013da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013dc:	4b57      	ldr	r3, [pc, #348]	; (800153c <HAL_UART_MspInit+0x1d0>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e8:	23c0      	movs	r3, #192	; 0xc0
 80013ea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013fa:	2307      	movs	r3, #7
 80013fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001404:	4619      	mov	r1, r3
 8001406:	484e      	ldr	r0, [pc, #312]	; (8001540 <HAL_UART_MspInit+0x1d4>)
 8001408:	f001 fc4a 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140c:	e090      	b.n	8001530 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_UART_MspInit+0x1d8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	f040 808b 	bne.w	8001530 <HAL_UART_MspInit+0x1c4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800141e:	2304      	movs	r3, #4
 8001420:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	4618      	mov	r0, r3
 8001428:	f002 fd8e 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8001432:	f7ff fc9d 	bl	8000d70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_UART_MspInit+0x1d0>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	4a40      	ldr	r2, [pc, #256]	; (800153c <HAL_UART_MspInit+0x1d0>)
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <HAL_UART_MspInit+0x1d0>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_UART_MspInit+0x1d0>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a3a      	ldr	r2, [pc, #232]	; (800153c <HAL_UART_MspInit+0x1d0>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <HAL_UART_MspInit+0x1d0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin|SIM_UART_RX_Pin;
 8001466:	230c      	movs	r3, #12
 8001468:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001478:	2307      	movs	r3, #7
 800147a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f001 fc0a 	bl	8002ca0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800148c:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 800148e:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_UART_MspInit+0x1e0>)
 8001490:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 8001494:	2202      	movs	r2, #2
 8001496:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014aa:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014c2:	4821      	ldr	r0, [pc, #132]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014c4:	f001 fa84 	bl	80029d0 <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_UART_MspInit+0x166>
      Error_Handler();
 80014ce:	f7ff fc4f 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014d6:	671a      	str	r2, [r3, #112]	; 0x70
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <HAL_UART_MspInit+0x1dc>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 80014e0:	4a1c      	ldr	r2, [pc, #112]	; (8001554 <HAL_UART_MspInit+0x1e8>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 80014e6:	2202      	movs	r2, #2
 80014e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 80014ec:	2210      	movs	r2, #16
 80014ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001514:	480e      	ldr	r0, [pc, #56]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 8001516:	f001 fa5b 	bl	80029d0 <HAL_DMA_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8001520:	f7ff fc26 	bl	8000d70 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 8001528:	66da      	str	r2, [r3, #108]	; 0x6c
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <HAL_UART_MspInit+0x1e4>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001530:	bf00      	nop
 8001532:	3788      	adds	r7, #136	; 0x88
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40013800 	.word	0x40013800
 800153c:	40021000 	.word	0x40021000
 8001540:	48000400 	.word	0x48000400
 8001544:	40004400 	.word	0x40004400
 8001548:	200004b8 	.word	0x200004b8
 800154c:	4002006c 	.word	0x4002006c
 8001550:	20000500 	.word	0x20000500
 8001554:	40020080 	.word	0x40020080

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 f920 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA1_Channel2_IRQHandler+0x10>)
 80015b2:	f001 fac5 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000284 	.word	0x20000284

080015c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA1_Channel3_IRQHandler+0x10>)
 80015c6:	f001 fabb 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000023c 	.word	0x2000023c

080015d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <DMA1_Channel4_IRQHandler+0x10>)
 80015da:	f001 fab1 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001f4 	.word	0x200001f4

080015e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <DMA1_Channel5_IRQHandler+0x10>)
 80015ee:	f001 faa7 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200001ac 	.word	0x200001ac

080015fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <DMA1_Channel6_IRQHandler+0x10>)
 8001602:	f001 fa9d 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200004b8 	.word	0x200004b8

08001610 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <DMA1_Channel7_IRQHandler+0x10>)
 8001616:	f001 fa93 	bl	8002b40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000500 	.word	0x20000500

08001624 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001628:	4803      	ldr	r0, [pc, #12]	; (8001638 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800162a:	f003 f92d 	bl	8004888 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800162e:	4803      	ldr	r0, [pc, #12]	; (800163c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001630:	f003 f92a 	bl	8004888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200002cc 	.word	0x200002cc
 800163c:	20000364 	.word	0x20000364

08001640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <setPwmLed>:
     } else if(led2_tim == 0) {led2swp=0; led2lev=0;}
}


void setPwmLed(uint8_t pwm, uint32_t channel)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
    TIM_OC_InitTypeDef sConfig;
    memset(&sConfig, 0, sizeof(sConfig));
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	221c      	movs	r2, #28
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f004 fdc9 	bl	8006210 <memset>
    sConfig.OCMode = (pwm==0) ? TIM_OCMODE_FORCED_INACTIVE : TIM_OCMODE_PWM1;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <setPwmLed+0x24>
 8001684:	2340      	movs	r3, #64	; 0x40
 8001686:	e000      	b.n	800168a <setPwmLed+0x26>
 8001688:	2360      	movs	r3, #96	; 0x60
 800168a:	60fb      	str	r3, [r7, #12]
    sConfig.Pulse = pwm;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	613b      	str	r3, [r7, #16]
    HAL_TIM_OC_ConfigChannel(&htim16, &sConfig, channel);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <setPwmLed+0x4c>)
 800169a:	f003 fa15 	bl	8004ac8 <HAL_TIM_OC_ConfigChannel>
    HAL_TIM_PWM_Start(&htim16, channel);
 800169e:	6839      	ldr	r1, [r7, #0]
 80016a0:	4803      	ldr	r0, [pc, #12]	; (80016b0 <setPwmLed+0x4c>)
 80016a2:	f003 f813 	bl	80046cc <HAL_TIM_PWM_Start>
}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000364 	.word	0x20000364

080016b4 <setLed2>:

void setLed2(uint8_t bri)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
    setPwmLed(bri_corr[bri], TIM_CHANNEL_1);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <setLed2+0x20>)
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ffcc 	bl	8001664 <setPwmLed>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	08006280 	.word	0x08006280

080016d8 <PWM_Init_Timers>:
    led2_tim = spd;
    led2_cycles = cnt | (wait<<16);
}

void PWM_Init_Timers()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80016dc:	2100      	movs	r1, #0
 80016de:	4802      	ldr	r0, [pc, #8]	; (80016e8 <PWM_Init_Timers+0x10>)
 80016e0:	f002 fff4 	bl	80046cc <HAL_TIM_PWM_Start>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000364 	.word	0x20000364

080016ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f0:	f7ff ffa6 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <LoopForever+0x6>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <LoopForever+0xe>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	; (8001738 <LoopForever+0x16>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f004 fd55 	bl	80061c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171e:	f7fe fed7 	bl	80004d0 <main>

08001722 <LoopForever>:

LoopForever:
    b LoopForever
 8001722:	e7fe      	b.n	8001722 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001724:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001730:	080062b0 	.word	0x080062b0
  ldr r2, =_sbss
 8001734:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001738:	2000054c 	.word	0x2000054c

0800173c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC1_IRQHandler>

0800173e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f001 f815 	bl	8002778 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174e:	200f      	movs	r0, #15
 8001750:	f000 f80e 	bl	8001770 <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	71fb      	strb	r3, [r7, #7]
 800175e:	e001      	b.n	8001764 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001760:	f7ff fb0c 	bl	8000d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001764:	79fb      	ldrb	r3, [r7, #7]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_InitTick+0x6c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d023      	beq.n	80017cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_InitTick+0x70>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_InitTick+0x6c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001792:	fbb3 f3f1 	udiv	r3, r3, r1
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f001 f821 	bl	80027e2 <HAL_SYSTICK_Config>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10f      	bne.n	80017c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d809      	bhi.n	80017c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f000 ffeb 	bl	800278e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_InitTick+0x74>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e007      	b.n	80017d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e004      	b.n	80017d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
 80017ca:	e001      	b.n	80017d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20000000 	.word	0x20000000
 80017e4:	20000004 	.word	0x20000004

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008
 800180c:	20000548 	.word	0x20000548

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000548 	.word	0x20000548

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008

08001870 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	609a      	str	r2, [r3, #8]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	609a      	str	r2, [r3, #8]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3360      	adds	r3, #96	; 0x60
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <LL_ADC_SetOffset+0x44>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	4313      	orrs	r3, r2
 8001908:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	03fff000 	.word	0x03fff000

08001920 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3360      	adds	r3, #96	; 0x60
 800192e:	461a      	mov	r2, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3360      	adds	r3, #96	; 0x60
 800195c:	461a      	mov	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001976:	bf00      	nop
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001982:	b480      	push	{r7}
 8001984:	b087      	sub	sp, #28
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3330      	adds	r3, #48	; 0x30
 8001992:	461a      	mov	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	4413      	add	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	211f      	movs	r1, #31
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	0e9b      	lsrs	r3, r3, #26
 80019ba:	f003 011f 	and.w	r1, r3, #31
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	431a      	orrs	r2, r3
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019da:	b480      	push	{r7}
 80019dc:	b087      	sub	sp, #28
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3314      	adds	r3, #20
 80019ea:	461a      	mov	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	0e5b      	lsrs	r3, r3, #25
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	4413      	add	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	0d1b      	lsrs	r3, r3, #20
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2107      	movs	r1, #7
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0d1b      	lsrs	r3, r3, #20
 8001a14:	f003 031f 	and.w	r3, r3, #31
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a24:	bf00      	nop
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0318 	and.w	r3, r3, #24
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a54:	40d9      	lsrs	r1, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	400b      	ands	r3, r1
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	0007ffff 	.word	0x0007ffff

08001a78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6093      	str	r3, [r2, #8]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ab0:	d101      	bne.n	8001ab6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b00:	d101      	bne.n	8001b06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <LL_ADC_IsEnabled+0x18>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <LL_ADC_IsEnabled+0x1a>
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d101      	bne.n	8001b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d101      	bne.n	8001b78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e12c      	b.n	8001dfc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d109      	bne.n	8001bc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff f907 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff67 	bl	8001a9c <LL_ADC_IsDeepPowerDownEnabled>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff4d 	bl	8001a78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff82 	bl	8001aec <LL_ADC_IsInternalRegulatorEnabled>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d115      	bne.n	8001c1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff66 	bl	8001ac4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_ADC_Init+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	4a82      	ldr	r2, [pc, #520]	; (8001e08 <HAL_ADC_Init+0x280>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	3301      	adds	r3, #1
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c0c:	e002      	b.n	8001c14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff64 	bl	8001aec <LL_ADC_IsInternalRegulatorEnabled>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff75 	bl	8001b3a <LL_ADC_REG_IsConversionOngoing>
 8001c50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80c5 	bne.w	8001dea <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 80c1 	bne.w	8001dea <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c70:	f043 0202 	orr.w	r2, r3, #2
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff49 	bl	8001b14 <LL_ADC_IsEnabled>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c88:	4860      	ldr	r0, [pc, #384]	; (8001e0c <HAL_ADC_Init+0x284>)
 8001c8a:	f7ff ff43 	bl	8001b14 <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	485d      	ldr	r0, [pc, #372]	; (8001e10 <HAL_ADC_Init+0x288>)
 8001c9c:	f7ff fde8 	bl	8001870 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7e5b      	ldrb	r3, [r3, #25]
 8001ca4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001caa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001cb0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cb6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cbe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	045b      	lsls	r3, r3, #17
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <HAL_ADC_Init+0x28c>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff12 	bl	8001b3a <LL_ADC_REG_IsConversionOngoing>
 8001d16:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff1f 	bl	8001b60 <LL_ADC_INJ_IsConversionOngoing>
 8001d22:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d13d      	bne.n	8001da6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d13a      	bne.n	8001da6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d34:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d3c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d4c:	f023 0302 	bic.w	r3, r3, #2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	69b9      	ldr	r1, [r7, #24]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d118      	bne.n	8001d96 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d6e:	f023 0304 	bic.w	r3, r3, #4
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d7a:	4311      	orrs	r1, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d86:	430a      	orrs	r2, r1
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	e007      	b.n	8001da6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10c      	bne.n	8001dc8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f023 010f 	bic.w	r1, r3, #15
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020f 	bic.w	r2, r2, #15
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f023 0303 	bic.w	r3, r3, #3
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
 8001de8:	e007      	b.n	8001dfa <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f043 0210 	orr.w	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	053e2d63 	.word	0x053e2d63
 8001e0c:	50040000 	.word	0x50040000
 8001e10:	50040300 	.word	0x50040300
 8001e14:	fff0c007 	.word	0xfff0c007

08001e18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0b6      	sub	sp, #216	; 0xd8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x22>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e3b9      	b.n	80025ae <HAL_ADC_ConfigChannel+0x796>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fe77 	bl	8001b3a <LL_ADC_REG_IsConversionOngoing>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 839e 	bne.w	8002590 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d824      	bhi.n	8001ea6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	3b02      	subs	r3, #2
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d81b      	bhi.n	8001e9e <HAL_ADC_ConfigChannel+0x86>
 8001e66:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <HAL_ADC_ConfigChannel+0x54>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001e7d 	.word	0x08001e7d
 8001e70:	08001e85 	.word	0x08001e85
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001e95 	.word	0x08001e95
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	220c      	movs	r2, #12
 8001e80:	605a      	str	r2, [r3, #4]
          break;
 8001e82:	e011      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	2212      	movs	r2, #18
 8001e88:	605a      	str	r2, [r3, #4]
          break;
 8001e8a:	e00d      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2218      	movs	r2, #24
 8001e90:	605a      	str	r2, [r3, #4]
          break;
 8001e92:	e009      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9a:	605a      	str	r2, [r3, #4]
          break;
 8001e9c:	e004      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2206      	movs	r2, #6
 8001ea2:	605a      	str	r2, [r3, #4]
          break;
 8001ea4:	e000      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001ea6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f7ff fd64 	bl	8001982 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fe3b 	bl	8001b3a <LL_ADC_REG_IsConversionOngoing>
 8001ec4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fe47 	bl	8001b60 <LL_ADC_INJ_IsConversionOngoing>
 8001ed2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 81a6 	bne.w	800222c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f040 81a1 	bne.w	800222c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7ff fd6f 	bl	80019da <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d00a      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6919      	ldr	r1, [r3, #16]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f2e:	f7ff fcd3 	bl	80018d8 <LL_ADC_SetOffset>
 8001f32:	e17b      	b.n	800222c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fcf0 	bl	8001920 <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x148>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fce5 	bl	8001920 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 021f 	and.w	r2, r3, #31
 8001f5e:	e01e      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x186>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fcda 	bl	8001920 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e004      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x19e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	e018      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d0>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e004      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fca9 	bl	800194c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fc8d 	bl	8001920 <LL_ADC_GetOffsetChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10a      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x20e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fc82 	bl	8001920 <LL_ADC_GetOffsetChannel>
 800201c:	4603      	mov	r3, r0
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	e01e      	b.n	8002064 <HAL_ADC_ConfigChannel+0x24c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fc77 	bl	8001920 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002044:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800204c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e004      	b.n	8002062 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_ADC_ConfigChannel+0x264>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	e018      	b.n	80020ae <HAL_ADC_ConfigChannel+0x296>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002090:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80020a0:	2320      	movs	r3, #32
 80020a2:	e004      	b.n	80020ae <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80020a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fc46 	bl	800194c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fc2a 	bl	8001920 <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x2d4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2102      	movs	r1, #2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fc1f 	bl	8001920 <LL_ADC_GetOffsetChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	e01e      	b.n	800212a <HAL_ADC_ConfigChannel+0x312>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fc14 	bl	8001920 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800210a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800210e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002112:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800211a:	2320      	movs	r3, #32
 800211c:	e004      	b.n	8002128 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800211e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d105      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x32a>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	e016      	b.n	8002170 <HAL_ADC_ConfigChannel+0x358>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800215a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e004      	b.n	8002170 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002170:	429a      	cmp	r2, r3
 8002172:	d106      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	2102      	movs	r1, #2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fbe5 	bl	800194c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2103      	movs	r1, #3
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fbc9 	bl	8001920 <LL_ADC_GetOffsetChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x396>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2103      	movs	r1, #3
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fbbe 	bl	8001920 <LL_ADC_GetOffsetChannel>
 80021a4:	4603      	mov	r3, r0
 80021a6:	0e9b      	lsrs	r3, r3, #26
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	e017      	b.n	80021de <HAL_ADC_ConfigChannel+0x3c6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2103      	movs	r1, #3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fbb3 	bl	8001920 <LL_ADC_GetOffsetChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80021d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x3de>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	e011      	b.n	800221a <HAL_ADC_ConfigChannel+0x402>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002206:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e003      	b.n	800221a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800221a:	429a      	cmp	r2, r3
 800221c:	d106      	bne.n	800222c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fb90 	bl	800194c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fc6f 	bl	8001b14 <LL_ADC_IsEnabled>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f040 813f 	bne.w	80024bc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	461a      	mov	r2, r3
 800224c:	f7ff fbf0 	bl	8001a30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a8e      	ldr	r2, [pc, #568]	; (8002490 <HAL_ADC_ConfigChannel+0x678>)
 8002256:	4293      	cmp	r3, r2
 8002258:	f040 8130 	bne.w	80024bc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x46c>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	3301      	adds	r3, #1
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b09      	cmp	r3, #9
 800227a:	bf94      	ite	ls
 800227c:	2301      	movls	r3, #1
 800227e:	2300      	movhi	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e019      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x4a0>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002294:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800229c:	2320      	movs	r3, #32
 800229e:	e003      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3301      	adds	r3, #1
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	bf94      	ite	ls
 80022b2:	2301      	movls	r3, #1
 80022b4:	2300      	movhi	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d079      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x4c0>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	3301      	adds	r3, #1
 80022d0:	069b      	lsls	r3, r3, #26
 80022d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d6:	e015      	b.n	8002304 <HAL_ADC_ConfigChannel+0x4ec>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80022f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	069b      	lsls	r3, r3, #26
 8002300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x50c>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0e9b      	lsrs	r3, r3, #26
 8002316:	3301      	adds	r3, #1
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	e017      	b.n	8002354 <HAL_ADC_ConfigChannel+0x53c>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2101      	movs	r1, #1
 8002350:	fa01 f303 	lsl.w	r3, r1, r3
 8002354:	ea42 0103 	orr.w	r1, r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10a      	bne.n	800237a <HAL_ADC_ConfigChannel+0x562>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	3301      	adds	r3, #1
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	051b      	lsls	r3, r3, #20
 8002378:	e018      	b.n	80023ac <HAL_ADC_ConfigChannel+0x594>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800238c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e003      	b.n	800239e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023ac:	430b      	orrs	r3, r1
 80023ae:	e080      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x5b4>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0e9b      	lsrs	r3, r3, #26
 80023c2:	3301      	adds	r3, #1
 80023c4:	069b      	lsls	r3, r3, #26
 80023c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ca:	e015      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5e0>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x600>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e9b      	lsrs	r3, r3, #26
 800240a:	3301      	adds	r3, #1
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	e017      	b.n	8002448 <HAL_ADC_ConfigChannel+0x630>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	61fb      	str	r3, [r7, #28]
  return result;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002430:	2320      	movs	r3, #32
 8002432:	e003      	b.n	800243c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x65c>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	3301      	adds	r3, #1
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3b1e      	subs	r3, #30
 800246c:	051b      	lsls	r3, r3, #20
 800246e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002472:	e01d      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x698>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa93 f3a3 	rbit	r3, r3
 8002480:	613b      	str	r3, [r7, #16]
  return result;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d103      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800248c:	2320      	movs	r3, #32
 800248e:	e005      	b.n	800249c <HAL_ADC_ConfigChannel+0x684>
 8002490:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f003 021f 	and.w	r2, r3, #31
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	3b1e      	subs	r3, #30
 80024aa:	051b      	lsls	r3, r3, #20
 80024ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b0:	430b      	orrs	r3, r1
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7ff fa8f 	bl	80019da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_ADC_ConfigChannel+0x7a0>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d06c      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024c8:	483c      	ldr	r0, [pc, #240]	; (80025bc <HAL_ADC_ConfigChannel+0x7a4>)
 80024ca:	f7ff f9f7 	bl	80018bc <LL_ADC_GetCommonPathInternalCh>
 80024ce:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a3a      	ldr	r2, [pc, #232]	; (80025c0 <HAL_ADC_ConfigChannel+0x7a8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d127      	bne.n	800252c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d121      	bne.n	800252c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a35      	ldr	r2, [pc, #212]	; (80025c4 <HAL_ADC_ConfigChannel+0x7ac>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d157      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024fa:	4619      	mov	r1, r3
 80024fc:	482f      	ldr	r0, [pc, #188]	; (80025bc <HAL_ADC_ConfigChannel+0x7a4>)
 80024fe:	f7ff f9ca 	bl	8001896 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	099b      	lsrs	r3, r3, #6
 8002508:	4a30      	ldr	r2, [pc, #192]	; (80025cc <HAL_ADC_ConfigChannel+0x7b4>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800251c:	e002      	b.n	8002524 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3b01      	subs	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f9      	bne.n	800251e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800252a:	e03a      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d113      	bne.n	800255e <HAL_ADC_ConfigChannel+0x746>
 8002536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800253a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10d      	bne.n	800255e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d12a      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800254c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002554:	4619      	mov	r1, r3
 8002556:	4819      	ldr	r0, [pc, #100]	; (80025bc <HAL_ADC_ConfigChannel+0x7a4>)
 8002558:	f7ff f99d 	bl	8001896 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255c:	e021      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d11c      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800256c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d116      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_ADC_ConfigChannel+0x7ac>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d111      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002586:	4619      	mov	r1, r3
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <HAL_ADC_ConfigChannel+0x7a4>)
 800258a:	f7ff f984 	bl	8001896 <LL_ADC_SetCommonPathInternalCh>
 800258e:	e008      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	37d8      	adds	r7, #216	; 0xd8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	80080000 	.word	0x80080000
 80025bc:	50040300 	.word	0x50040300
 80025c0:	c7520000 	.word	0xc7520000
 80025c4:	50040000 	.word	0x50040000
 80025c8:	20000000 	.word	0x20000000
 80025cc:	053e2d63 	.word	0x053e2d63
 80025d0:	cb840000 	.word	0xcb840000
 80025d4:	80000001 	.word	0x80000001

080025d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f4:	4013      	ands	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <__NVIC_SetPriorityGrouping+0x44>)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	60d3      	str	r3, [r2, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_GetPriorityGrouping+0x18>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	f003 0307 	and.w	r3, r3, #7
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db0b      	blt.n	8002666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 021f 	and.w	r2, r3, #31
 8002654:	4907      	ldr	r1, [pc, #28]	; (8002674 <__NVIC_EnableIRQ+0x38>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	2001      	movs	r0, #1
 800265e:	fa00 f202 	lsl.w	r2, r0, r2
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002744:	d301      	bcc.n	800274a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <SysTick_Config+0x40>)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002752:	210f      	movs	r1, #15
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f7ff ff8e 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <SysTick_Config+0x40>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <SysTick_Config+0x40>)
 8002764:	2207      	movs	r2, #7
 8002766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	e000e010 	.word	0xe000e010

08002778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff29 	bl	80025d8 <__NVIC_SetPriorityGrouping>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a0:	f7ff ff3e 	bl	8002620 <__NVIC_GetPriorityGrouping>
 80027a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	6978      	ldr	r0, [r7, #20]
 80027ac:	f7ff ff8e 	bl	80026cc <NVIC_EncodePriority>
 80027b0:	4602      	mov	r2, r0
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff31 	bl	800263c <__NVIC_EnableIRQ>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffa2 	bl	8002734 <SysTick_Config>
 80027f0:	4603      	mov	r3, r0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e054      	b.n	80028b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7f5b      	ldrb	r3, [r3, #29]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe fb34 	bl	8000e8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	791b      	ldrb	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <HAL_CRC_Init+0xc4>)
 8002838:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0218 	bic.w	r2, r2, #24
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	e00c      	b.n	8002866 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	461a      	mov	r2, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f834 	bl	80028c4 <HAL_CRCEx_Polynomial_Set>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e028      	b.n	80028b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	795b      	ldrb	r3, [r3, #5]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f04f 32ff 	mov.w	r2, #4294967295
 8002876:	611a      	str	r2, [r3, #16]
 8002878:	e004      	b.n	8002884 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6912      	ldr	r2, [r2, #16]
 8002882:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699a      	ldr	r2, [r3, #24]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	04c11db7 	.word	0x04c11db7

080028c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80028d4:	231f      	movs	r3, #31
 80028d6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80028d8:	bf00      	nop
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	613a      	str	r2, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <HAL_CRCEx_Polynomial_Set+0x34>
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b18      	cmp	r3, #24
 80028fc:	d846      	bhi.n	800298c <HAL_CRCEx_Polynomial_Set+0xc8>
 80028fe:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002993 	.word	0x08002993
 8002908:	0800298d 	.word	0x0800298d
 800290c:	0800298d 	.word	0x0800298d
 8002910:	0800298d 	.word	0x0800298d
 8002914:	0800298d 	.word	0x0800298d
 8002918:	0800298d 	.word	0x0800298d
 800291c:	0800298d 	.word	0x0800298d
 8002920:	0800298d 	.word	0x0800298d
 8002924:	08002981 	.word	0x08002981
 8002928:	0800298d 	.word	0x0800298d
 800292c:	0800298d 	.word	0x0800298d
 8002930:	0800298d 	.word	0x0800298d
 8002934:	0800298d 	.word	0x0800298d
 8002938:	0800298d 	.word	0x0800298d
 800293c:	0800298d 	.word	0x0800298d
 8002940:	0800298d 	.word	0x0800298d
 8002944:	08002975 	.word	0x08002975
 8002948:	0800298d 	.word	0x0800298d
 800294c:	0800298d 	.word	0x0800298d
 8002950:	0800298d 	.word	0x0800298d
 8002954:	0800298d 	.word	0x0800298d
 8002958:	0800298d 	.word	0x0800298d
 800295c:	0800298d 	.word	0x0800298d
 8002960:	0800298d 	.word	0x0800298d
 8002964:	08002969 	.word	0x08002969
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d913      	bls.n	8002996 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002972:	e010      	b.n	8002996 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b07      	cmp	r3, #7
 8002978:	d90f      	bls.n	800299a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800297e:	e00c      	b.n	800299a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	d90b      	bls.n	800299e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800298a:	e008      	b.n	800299e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
      break;
 8002990:	e006      	b.n	80029a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002992:	bf00      	nop
 8002994:	e004      	b.n	80029a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002996:	bf00      	nop
 8002998:	e002      	b.n	80029a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800299e:	bf00      	nop
  }
  if (status == HAL_OK)
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 0118 	bic.w	r1, r3, #24
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	371c      	adds	r7, #28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e098      	b.n	8002b14 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <HAL_DMA_Init+0x150>)
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d80f      	bhi.n	8002a0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_DMA_Init+0x154>)
 80029f6:	4413      	add	r3, r2
 80029f8:	4a4b      	ldr	r2, [pc, #300]	; (8002b28 <HAL_DMA_Init+0x158>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	091b      	lsrs	r3, r3, #4
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <HAL_DMA_Init+0x15c>)
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a0c:	e00e      	b.n	8002a2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_DMA_Init+0x160>)
 8002a16:	4413      	add	r3, r2
 8002a18:	4a43      	ldr	r2, [pc, #268]	; (8002b28 <HAL_DMA_Init+0x158>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	009a      	lsls	r2, r3, #2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a42      	ldr	r2, [pc, #264]	; (8002b34 <HAL_DMA_Init+0x164>)
 8002a2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a86:	d039      	beq.n	8002afc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_DMA_Init+0x15c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d11a      	bne.n	8002ac8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a92:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <HAL_DMA_Init+0x168>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 031c 	and.w	r3, r3, #28
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	4924      	ldr	r1, [pc, #144]	; (8002b38 <HAL_DMA_Init+0x168>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_DMA_Init+0x168>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f003 031c 	and.w	r3, r3, #28
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	491d      	ldr	r1, [pc, #116]	; (8002b38 <HAL_DMA_Init+0x168>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
 8002ac6:	e019      	b.n	8002afc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <HAL_DMA_Init+0x16c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f003 031c 	and.w	r3, r3, #28
 8002ad4:	210f      	movs	r1, #15
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	4917      	ldr	r1, [pc, #92]	; (8002b3c <HAL_DMA_Init+0x16c>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_DMA_Init+0x16c>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f003 031c 	and.w	r3, r3, #28
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	4911      	ldr	r1, [pc, #68]	; (8002b3c <HAL_DMA_Init+0x16c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40020407 	.word	0x40020407
 8002b24:	bffdfff8 	.word	0xbffdfff8
 8002b28:	cccccccd 	.word	0xcccccccd
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	bffdfbf8 	.word	0xbffdfbf8
 8002b34:	40020400 	.word	0x40020400
 8002b38:	400200a8 	.word	0x400200a8
 8002b3c:	400204a8 	.word	0x400204a8

08002b40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f003 031c 	and.w	r3, r3, #28
 8002b60:	2204      	movs	r2, #4
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d026      	beq.n	8002bba <HAL_DMA_IRQHandler+0x7a>
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d021      	beq.n	8002bba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0204 	bic.w	r2, r2, #4
 8002b92:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	f003 021c 	and.w	r2, r3, #28
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d071      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002bb8:	e06c      	b.n	8002c94 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f003 031c 	and.w	r3, r3, #28
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d02e      	beq.n	8002c2c <HAL_DMA_IRQHandler+0xec>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d029      	beq.n	8002c2c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 020a 	bic.w	r2, r2, #10
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f003 021c 	and.w	r2, r3, #28
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d038      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c2a:	e033      	b.n	8002c94 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f003 031c 	and.w	r3, r3, #28
 8002c34:	2208      	movs	r2, #8
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d02a      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x156>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d025      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 020e 	bic.w	r2, r2, #14
 8002c58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f003 021c 	and.w	r2, r3, #28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
}
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cae:	e154      	b.n	8002f5a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8146 	beq.w	8002f54 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d005      	beq.n	8002ce0 <HAL_GPIO_Init+0x40>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d130      	bne.n	8002d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	2203      	movs	r2, #3
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d16:	2201      	movs	r2, #1
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	091b      	lsrs	r3, r3, #4
 8002d2c:	f003 0201 	and.w	r2, r3, #1
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d017      	beq.n	8002d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d123      	bne.n	8002dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	220f      	movs	r2, #15
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	08da      	lsrs	r2, r3, #3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3208      	adds	r2, #8
 8002dcc:	6939      	ldr	r1, [r7, #16]
 8002dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2203      	movs	r2, #3
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0203 	and.w	r2, r3, #3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80a0 	beq.w	8002f54 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e14:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <HAL_GPIO_Init+0x2d8>)
 8002e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e18:	4a57      	ldr	r2, [pc, #348]	; (8002f78 <HAL_GPIO_Init+0x2d8>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6613      	str	r3, [r2, #96]	; 0x60
 8002e20:	4b55      	ldr	r3, [pc, #340]	; (8002f78 <HAL_GPIO_Init+0x2d8>)
 8002e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e2c:	4a53      	ldr	r2, [pc, #332]	; (8002f7c <HAL_GPIO_Init+0x2dc>)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	3302      	adds	r3, #2
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	220f      	movs	r2, #15
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e56:	d019      	beq.n	8002e8c <HAL_GPIO_Init+0x1ec>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a49      	ldr	r2, [pc, #292]	; (8002f80 <HAL_GPIO_Init+0x2e0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_GPIO_Init+0x1e8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a48      	ldr	r2, [pc, #288]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00d      	beq.n	8002e84 <HAL_GPIO_Init+0x1e4>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a47      	ldr	r2, [pc, #284]	; (8002f88 <HAL_GPIO_Init+0x2e8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <HAL_GPIO_Init+0x1e0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a46      	ldr	r2, [pc, #280]	; (8002f8c <HAL_GPIO_Init+0x2ec>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_GPIO_Init+0x1dc>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e008      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e7c:	2307      	movs	r3, #7
 8002e7e:	e006      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e80:	2303      	movs	r3, #3
 8002e82:	e004      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e002      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_GPIO_Init+0x1ee>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	f002 0203 	and.w	r2, r2, #3
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	4093      	lsls	r3, r2
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9e:	4937      	ldr	r1, [pc, #220]	; (8002f7c <HAL_GPIO_Init+0x2dc>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eac:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ed0:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ed6:	4b2e      	ldr	r3, [pc, #184]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f2a:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_GPIO_Init+0x2f0>)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f aea3 	bne.w	8002cb0 <HAL_GPIO_Init+0x10>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	48001000 	.word	0x48001000
 8002f90:	40010400 	.word	0x40010400

08002f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa4:	787b      	ldrb	r3, [r7, #1]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e081      	b.n	80030da <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd ff6e 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003014:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003024:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e006      	b.n	800304c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800304a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d104      	bne.n	800305e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800305c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6812      	ldr	r2, [r2, #0]
 8003068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800306c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003070:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003080:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69d9      	ldr	r1, [r3, #28]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1a      	ldr	r2, [r3, #32]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d138      	bne.n	800316a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003102:	2302      	movs	r3, #2
 8003104:	e032      	b.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2224      	movs	r2, #36	; 0x24
 8003112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003134:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	e000      	b.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800316a:	2302      	movs	r3, #2
  }
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b20      	cmp	r3, #32
 800318c:	d139      	bne.n	8003202 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003198:	2302      	movs	r3, #2
 800319a:	e033      	b.n	8003204 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e000      	b.n	8003204 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003214:	4b04      	ldr	r3, [pc, #16]	; (8003228 <HAL_PWREx_GetVoltageRange+0x18>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40007000 	.word	0x40007000

0800322c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323a:	d130      	bne.n	800329e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800323c:	4b23      	ldr	r3, [pc, #140]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003248:	d038      	beq.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003252:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2232      	movs	r2, #50	; 0x32
 8003260:	fb02 f303 	mul.w	r3, r2, r3
 8003264:	4a1b      	ldr	r2, [pc, #108]	; (80032d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0c9b      	lsrs	r3, r3, #18
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003270:	e002      	b.n	8003278 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b01      	subs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d102      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f2      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003298:	d110      	bne.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e00f      	b.n	80032be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032aa:	d007      	beq.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032ac:	4b07      	ldr	r3, [pc, #28]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032b4:	4a05      	ldr	r2, [pc, #20]	; (80032cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40007000 	.word	0x40007000
 80032d0:	20000000 	.word	0x20000000
 80032d4:	431bde83 	.word	0x431bde83

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f000 bc02 	b.w	8003af0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ec:	4b96      	ldr	r3, [pc, #600]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032f6:	4b94      	ldr	r3, [pc, #592]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80e4 	beq.w	80034d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <HAL_RCC_OscConfig+0x4c>
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b0c      	cmp	r3, #12
 8003318:	f040 808b 	bne.w	8003432 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b01      	cmp	r3, #1
 8003320:	f040 8087 	bne.w	8003432 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003324:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_OscConfig+0x64>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e3d9      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	4b81      	ldr	r3, [pc, #516]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_RCC_OscConfig+0x7e>
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003354:	e005      	b.n	8003362 <HAL_RCC_OscConfig+0x8a>
 8003356:	4b7c      	ldr	r3, [pc, #496]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003362:	4293      	cmp	r3, r2
 8003364:	d223      	bcs.n	80033ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fd8c 	bl	8003e88 <RCC_SetFlashLatencyFromMSIRange>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e3ba      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800337a:	4b73      	ldr	r3, [pc, #460]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a72      	ldr	r2, [pc, #456]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	496d      	ldr	r1, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003398:	4b6b      	ldr	r3, [pc, #428]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	4968      	ldr	r1, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
 80033ac:	e025      	b.n	80033fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ae:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80033b4:	f043 0308 	orr.w	r3, r3, #8
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4960      	ldr	r1, [pc, #384]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033cc:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	495b      	ldr	r1, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fd4c 	bl	8003e88 <RCC_SetFlashLatencyFromMSIRange>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e37a      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033fa:	f000 fc81 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	4950      	ldr	r1, [pc, #320]	; (800354c <HAL_RCC_OscConfig+0x274>)
 800340c:	5ccb      	ldrb	r3, [r1, r3]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	fa22 f303 	lsr.w	r3, r2, r3
 8003416:	4a4e      	ldr	r2, [pc, #312]	; (8003550 <HAL_RCC_OscConfig+0x278>)
 8003418:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800341a:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <HAL_RCC_OscConfig+0x27c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe f9a6 	bl	8001770 <HAL_InitTick>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d052      	beq.n	80034d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	e35e      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d032      	beq.n	80034a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800343a:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a42      	ldr	r2, [pc, #264]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003446:	f7fe f9e3 	bl	8001810 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800344e:	f7fe f9df 	bl	8001810 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e347      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346c:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a35      	ldr	r2, [pc, #212]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003472:	f043 0308 	orr.w	r3, r3, #8
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b33      	ldr	r3, [pc, #204]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4930      	ldr	r1, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	492b      	ldr	r1, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800349a:	4313      	orrs	r3, r2
 800349c:	604b      	str	r3, [r1, #4]
 800349e:	e01a      	b.n	80034d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034a0:	4b29      	ldr	r3, [pc, #164]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a28      	ldr	r2, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ac:	f7fe f9b0 	bl	8001810 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034b4:	f7fe f9ac 	bl	8001810 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e314      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1dc>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d073      	beq.n	80035ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_OscConfig+0x21c>
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d10e      	bne.n	800350c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d10b      	bne.n	800350c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d063      	beq.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d15f      	bne.n	80035c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e2f1      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x24c>
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e025      	b.n	8003570 <HAL_RCC_OscConfig+0x298>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352c:	d114      	bne.n	8003558 <HAL_RCC_OscConfig+0x280>
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a02      	ldr	r2, [pc, #8]	; (8003548 <HAL_RCC_OscConfig+0x270>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e013      	b.n	8003570 <HAL_RCC_OscConfig+0x298>
 8003548:	40021000 	.word	0x40021000
 800354c:	08006238 	.word	0x08006238
 8003550:	20000000 	.word	0x20000000
 8003554:	20000004 	.word	0x20000004
 8003558:	4ba0      	ldr	r3, [pc, #640]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a9f      	ldr	r2, [pc, #636]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b9d      	ldr	r3, [pc, #628]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a9c      	ldr	r2, [pc, #624]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe f94a 	bl	8001810 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe f946 	bl	8001810 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e2ae      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	4b92      	ldr	r3, [pc, #584]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x2a8>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f936 	bl	8001810 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe f932 	bl	8001810 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e29a      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ba:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2d0>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d060      	beq.n	8003698 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_OscConfig+0x310>
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d119      	bne.n	8003616 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d116      	bne.n	8003616 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e8:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_OscConfig+0x328>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e277      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	4973      	ldr	r1, [pc, #460]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003614:	e040      	b.n	8003698 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d023      	beq.n	8003666 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800361e:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6e      	ldr	r2, [pc, #440]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fe f8f1 	bl	8001810 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003632:	f7fe f8ed 	bl	8001810 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e255      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003644:	4b65      	ldr	r3, [pc, #404]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003650:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	495f      	ldr	r1, [pc, #380]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
 8003664:	e018      	b.n	8003698 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003666:	4b5d      	ldr	r3, [pc, #372]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5c      	ldr	r2, [pc, #368]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fe f8cd 	bl	8001810 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367a:	f7fe f8c9 	bl	8001810 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e231      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800368c:	4b53      	ldr	r3, [pc, #332]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d03c      	beq.n	800371e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01c      	beq.n	80036e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ac:	4b4b      	ldr	r3, [pc, #300]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80036ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b2:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fe f8a8 	bl	8001810 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c4:	f7fe f8a4 	bl	8001810 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e20c      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036d6:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80036d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ef      	beq.n	80036c4 <HAL_RCC_OscConfig+0x3ec>
 80036e4:	e01b      	b.n	800371e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e6:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80036e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ec:	4a3b      	ldr	r2, [pc, #236]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f6:	f7fe f88b 	bl	8001810 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fe:	f7fe f887 	bl	8001810 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1ef      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1ef      	bne.n	80036fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80a6 	beq.w	8003878 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10d      	bne.n	8003758 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	4a26      	ldr	r2, [pc, #152]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003746:	6593      	str	r3, [r2, #88]	; 0x58
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003758:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <HAL_RCC_OscConfig+0x508>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d118      	bne.n	8003796 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003764:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <HAL_RCC_OscConfig+0x508>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <HAL_RCC_OscConfig+0x508>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003770:	f7fe f84e 	bl	8001810 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fe f84a 	bl	8001810 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e1b2      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_RCC_OscConfig+0x508>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d108      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4d8>
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ae:	e029      	b.n	8003804 <HAL_RCC_OscConfig+0x52c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d115      	bne.n	80037e4 <HAL_RCC_OscConfig+0x50c>
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	4a03      	ldr	r2, [pc, #12]	; (80037dc <HAL_RCC_OscConfig+0x504>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d8:	e014      	b.n	8003804 <HAL_RCC_OscConfig+0x52c>
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40007000 	.word	0x40007000
 80037e4:	4b9a      	ldr	r3, [pc, #616]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	4a99      	ldr	r2, [pc, #612]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f4:	4b96      	ldr	r3, [pc, #600]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	4a95      	ldr	r2, [pc, #596]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d016      	beq.n	800383a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe f800 	bl	8001810 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003812:	e00a      	b.n	800382a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f7fd fffc 	bl	8001810 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e162      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382a:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 800382c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ed      	beq.n	8003814 <HAL_RCC_OscConfig+0x53c>
 8003838:	e015      	b.n	8003866 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fd ffe9 	bl	8001810 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd ffe5 	bl	8001810 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e14b      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003858:	4b7d      	ldr	r3, [pc, #500]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1ed      	bne.n	8003842 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003866:	7ffb      	ldrb	r3, [r7, #31]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d105      	bne.n	8003878 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386c:	4b78      	ldr	r3, [pc, #480]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003870:	4a77      	ldr	r2, [pc, #476]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003876:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03c      	beq.n	80038fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01c      	beq.n	80038c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800388c:	4b70      	ldr	r3, [pc, #448]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003892:	4a6f      	ldr	r2, [pc, #444]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd ffb8 	bl	8001810 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038a4:	f7fd ffb4 	bl	8001810 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e11c      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038b6:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80038b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0ef      	beq.n	80038a4 <HAL_RCC_OscConfig+0x5cc>
 80038c4:	e01b      	b.n	80038fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038c6:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80038c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038cc:	4a60      	ldr	r2, [pc, #384]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fd ff9b 	bl	8001810 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038de:	f7fd ff97 	bl	8001810 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0ff      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038f0:	4b57      	ldr	r3, [pc, #348]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80038f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1ef      	bne.n	80038de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80f3 	beq.w	8003aee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	2b02      	cmp	r3, #2
 800390e:	f040 80c9 	bne.w	8003aa4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003912:	4b4f      	ldr	r3, [pc, #316]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0203 	and.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	429a      	cmp	r2, r3
 8003924:	d12c      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003930:	3b01      	subs	r3, #1
 8003932:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d123      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d11b      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d113      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	3b01      	subs	r3, #1
 8003966:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d109      	bne.n	8003980 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	3b01      	subs	r3, #1
 800397a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d06b      	beq.n	8003a58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d062      	beq.n	8003a4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003986:	4b32      	ldr	r3, [pc, #200]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0ac      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003996:	4b2e      	ldr	r3, [pc, #184]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 800399c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039a2:	f7fd ff35 	bl	8001810 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fd ff31 	bl	8001810 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e099      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c8:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_RCC_OscConfig+0x77c>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d8:	3a01      	subs	r2, #1
 80039da:	0112      	lsls	r2, r2, #4
 80039dc:	4311      	orrs	r1, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e2:	0212      	lsls	r2, r2, #8
 80039e4:	4311      	orrs	r1, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039ea:	0852      	lsrs	r2, r2, #1
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0552      	lsls	r2, r2, #21
 80039f0:	4311      	orrs	r1, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039f6:	0852      	lsrs	r2, r2, #1
 80039f8:	3a01      	subs	r2, #1
 80039fa:	0652      	lsls	r2, r2, #25
 80039fc:	4311      	orrs	r1, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a02:	06d2      	lsls	r2, r2, #27
 8003a04:	430a      	orrs	r2, r1
 8003a06:	4912      	ldr	r1, [pc, #72]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a0c:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a18:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a24:	f7fd fef4 	bl	8001810 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd fef0 	bl	8001810 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e058      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <HAL_RCC_OscConfig+0x778>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a4a:	e050      	b.n	8003aee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e04f      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
 8003a50:	40021000 	.word	0x40021000
 8003a54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a58:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d144      	bne.n	8003aee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a64:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a7c:	f7fd fec8 	bl	8001810 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd fec4 	bl	8001810 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e02c      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a96:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x7ac>
 8003aa2:	e024      	b.n	8003aee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d01f      	beq.n	8003aea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab6:	f7fd feab 	bl	8001810 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd fea7 	bl	8001810 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e00f      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	4905      	ldr	r1, [pc, #20]	; (8003af8 <HAL_RCC_OscConfig+0x820>)
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_OscConfig+0x824>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60cb      	str	r3, [r1, #12]
 8003ae8:	e001      	b.n	8003aee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	feeefffc 	.word	0xfeeefffc

08003b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0e7      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b75      	ldr	r3, [pc, #468]	; (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d910      	bls.n	8003b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b72      	ldr	r3, [pc, #456]	; (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 0207 	bic.w	r2, r3, #7
 8003b2a:	4970      	ldr	r1, [pc, #448]	; (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b6e      	ldr	r3, [pc, #440]	; (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0cf      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	4b66      	ldr	r3, [pc, #408]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d908      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4960      	ldr	r1, [pc, #384]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d04c      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b86:	4b5a      	ldr	r3, [pc, #360]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d121      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0a6      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9e:	4b54      	ldr	r3, [pc, #336]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d115      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e09a      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bb6:	4b4e      	ldr	r3, [pc, #312]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e08e      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc6:	4b4a      	ldr	r3, [pc, #296]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e086      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4943      	ldr	r1, [pc, #268]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7fd fe12 	bl	8001810 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7fd fe0e 	bl	8001810 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e06e      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 020c 	and.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1eb      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d010      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d208      	bcs.n	8003c46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c34:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	492b      	ldr	r1, [pc, #172]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c46:	4b29      	ldr	r3, [pc, #164]	; (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d210      	bcs.n	8003c76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 0207 	bic.w	r2, r3, #7
 8003c5c:	4923      	ldr	r1, [pc, #140]	; (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c64:	4b21      	ldr	r3, [pc, #132]	; (8003cec <HAL_RCC_ClockConfig+0x1ec>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d001      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e036      	b.n	8003ce4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c82:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4918      	ldr	r1, [pc, #96]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4910      	ldr	r1, [pc, #64]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cb4:	f000 f824 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	490b      	ldr	r1, [pc, #44]	; (8003cf4 <HAL_RCC_ClockConfig+0x1f4>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_ClockConfig+0x1f8>)
 8003cd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1fc>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fd fd49 	bl	8001770 <HAL_InitTick>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ce2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40022000 	.word	0x40022000
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08006238 	.word	0x08006238
 8003cf8:	20000000 	.word	0x20000000
 8003cfc:	20000004 	.word	0x20000004

08003d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0e:	4b3e      	ldr	r3, [pc, #248]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d18:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x34>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d121      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d11e      	bne.n	8003d72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d40:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d46:	0a1b      	lsrs	r3, r3, #8
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	61fb      	str	r3, [r7, #28]
 8003d4e:	e005      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d50:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d102      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e004      	b.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d84:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	2b0c      	cmp	r3, #12
 8003d8c:	d134      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d003      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0xac>
 8003da4:	e005      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003da6:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x110>)
 8003da8:	617b      	str	r3, [r7, #20]
      break;
 8003daa:	e005      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dae:	617b      	str	r3, [r7, #20]
      break;
 8003db0:	e002      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	617b      	str	r3, [r7, #20]
      break;
 8003db6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	fb03 f202 	mul.w	r2, r3, r2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dde:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	0e5b      	lsrs	r3, r3, #25
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	3301      	adds	r3, #1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003df8:	69bb      	ldr	r3, [r7, #24]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	08006250 	.word	0x08006250
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	007a1200 	.word	0x007a1200

08003e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000000 	.word	0x20000000

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4904      	ldr	r1, [pc, #16]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	08006248 	.word	0x08006248

08003e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e60:	f7ff ffda 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0adb      	lsrs	r3, r3, #11
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4904      	ldr	r1, [pc, #16]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	08006248 	.word	0x08006248

08003e88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e94:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ea0:	f7ff f9b6 	bl	8003210 <HAL_PWREx_GetVoltageRange>
 8003ea4:	6178      	str	r0, [r7, #20]
 8003ea6:	e014      	b.n	8003ed2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb4:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ec0:	f7ff f9a6 	bl	8003210 <HAL_PWREx_GetVoltageRange>
 8003ec4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed8:	d10b      	bne.n	8003ef2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b80      	cmp	r3, #128	; 0x80
 8003ede:	d919      	bls.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ee4:	d902      	bls.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	e013      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eec:	2301      	movs	r3, #1
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e010      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b80      	cmp	r3, #128	; 0x80
 8003ef6:	d902      	bls.n	8003efe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ef8:	2303      	movs	r3, #3
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	e00a      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d102      	bne.n	8003f0a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f04:	2302      	movs	r3, #2
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e004      	b.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b70      	cmp	r3, #112	; 0x70
 8003f0e:	d101      	bne.n	8003f14 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f10:	2301      	movs	r3, #1
 8003f12:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f023 0207 	bic.w	r2, r3, #7
 8003f1c:	4909      	ldr	r1, [pc, #36]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d001      	beq.n	8003f36 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40022000 	.word	0x40022000

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f50:	2300      	movs	r3, #0
 8003f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d031      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f6c:	d01a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f72:	d814      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f7e:	4b5d      	ldr	r3, [pc, #372]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4a5c      	ldr	r2, [pc, #368]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f8a:	e00c      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f9f0 	bl	8004378 <RCCEx_PLLSAI1_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f9c:	e003      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fac:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	494e      	ldr	r1, [pc, #312]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fc2:	e001      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 809e 	beq.w	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fda:	4b46      	ldr	r3, [pc, #280]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00d      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff0:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff4:	4a3f      	ldr	r2, [pc, #252]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8003ffc:	4b3d      	ldr	r3, [pc, #244]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004008:	2301      	movs	r3, #1
 800400a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800400c:	4b3a      	ldr	r3, [pc, #232]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a39      	ldr	r2, [pc, #228]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004018:	f7fd fbfa 	bl	8001810 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800401e:	e009      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004020:	f7fd fbf6 	bl	8001810 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d902      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	74fb      	strb	r3, [r7, #19]
        break;
 8004032:	e005      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004034:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ef      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d15a      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004046:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01e      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	429a      	cmp	r2, r3
 8004060:	d019      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406e:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	4a1f      	ldr	r2, [pc, #124]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800407e:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800408e:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d016      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd fbb6 	bl	8001810 <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a6:	e00b      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fd fbb2 	bl	8001810 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d902      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	74fb      	strb	r3, [r7, #19]
            break;
 80040be:	e006      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0ec      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d4:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	4904      	ldr	r1, [pc, #16]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040ea:	e009      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	74bb      	strb	r3, [r7, #18]
 80040f0:	e006      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004100:	7c7b      	ldrb	r3, [r7, #17]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004106:	4b9b      	ldr	r3, [pc, #620]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4a9a      	ldr	r2, [pc, #616]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411e:	4b95      	ldr	r3, [pc, #596]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f023 0203 	bic.w	r2, r3, #3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4991      	ldr	r1, [pc, #580]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004140:	4b8c      	ldr	r3, [pc, #560]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 020c 	bic.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	4989      	ldr	r1, [pc, #548]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004162:	4b84      	ldr	r3, [pc, #528]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	4980      	ldr	r1, [pc, #512]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004184:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	4978      	ldr	r1, [pc, #480]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041a6:	4b73      	ldr	r3, [pc, #460]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b4:	496f      	ldr	r1, [pc, #444]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041c8:	4b6a      	ldr	r3, [pc, #424]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4967      	ldr	r1, [pc, #412]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ea:	4b62      	ldr	r3, [pc, #392]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	495e      	ldr	r1, [pc, #376]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421a:	4956      	ldr	r1, [pc, #344]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800422e:	4b51      	ldr	r3, [pc, #324]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d028      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004250:	4b48      	ldr	r3, [pc, #288]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	4945      	ldr	r1, [pc, #276]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800426e:	d106      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004270:	4b40      	ldr	r3, [pc, #256]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4a3f      	ldr	r2, [pc, #252]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427a:	60d3      	str	r3, [r2, #12]
 800427c:	e011      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004286:	d10c      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	2101      	movs	r1, #1
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f872 	bl	8004378 <RCCEx_PLLSAI1_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004298:	7cfb      	ldrb	r3, [r7, #19]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d028      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ae:	4b31      	ldr	r3, [pc, #196]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042bc:	492d      	ldr	r1, [pc, #180]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042cc:	d106      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	4a28      	ldr	r2, [pc, #160]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d8:	60d3      	str	r3, [r2, #12]
 80042da:	e011      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2101      	movs	r1, #1
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f843 	bl	8004378 <RCCEx_PLLSAI1_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042f6:	7cfb      	ldrb	r3, [r7, #19]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01c      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800431a:	4916      	ldr	r1, [pc, #88]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800432a:	d10c      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	2102      	movs	r1, #2
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f820 	bl	8004378 <RCCEx_PLLSAI1_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	4904      	ldr	r1, [pc, #16]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004368:	7cbb      	ldrb	r3, [r7, #18]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000

08004378 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004386:	4b74      	ldr	r3, [pc, #464]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d018      	beq.n	80043c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004392:	4b71      	ldr	r3, [pc, #452]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 0203 	and.w	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d10d      	bne.n	80043be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
       ||
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043aa:	4b6b      	ldr	r3, [pc, #428]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
       ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d047      	beq.n	800444e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	e044      	b.n	800444e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d018      	beq.n	80043fe <RCCEx_PLLSAI1_Config+0x86>
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d825      	bhi.n	800441c <RCCEx_PLLSAI1_Config+0xa4>
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d002      	beq.n	80043da <RCCEx_PLLSAI1_Config+0x62>
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d009      	beq.n	80043ec <RCCEx_PLLSAI1_Config+0x74>
 80043d8:	e020      	b.n	800441c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043da:	4b5f      	ldr	r3, [pc, #380]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11d      	bne.n	8004422 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ea:	e01a      	b.n	8004422 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043ec:	4b5a      	ldr	r3, [pc, #360]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d116      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fc:	e013      	b.n	8004426 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043fe:	4b56      	ldr	r3, [pc, #344]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800440a:	4b53      	ldr	r3, [pc, #332]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d109      	bne.n	800442a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800441a:	e006      	b.n	800442a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
      break;
 8004420:	e004      	b.n	800442c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004422:	bf00      	nop
 8004424:	e002      	b.n	800442c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004426:	bf00      	nop
 8004428:	e000      	b.n	800442c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800442a:	bf00      	nop
    }

    if(status == HAL_OK)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10d      	bne.n	800444e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004432:	4b49      	ldr	r3, [pc, #292]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6819      	ldr	r1, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	3b01      	subs	r3, #1
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	430b      	orrs	r3, r1
 8004448:	4943      	ldr	r1, [pc, #268]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800444a:	4313      	orrs	r3, r2
 800444c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d17c      	bne.n	800454e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004454:	4b40      	ldr	r3, [pc, #256]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3f      	ldr	r2, [pc, #252]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800445a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800445e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004460:	f7fd f9d6 	bl	8001810 <HAL_GetTick>
 8004464:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004466:	e009      	b.n	800447c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004468:	f7fd f9d2 	bl	8001810 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d902      	bls.n	800447c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	73fb      	strb	r3, [r7, #15]
        break;
 800447a:	e005      	b.n	8004488 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800447c:	4b36      	ldr	r3, [pc, #216]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ef      	bne.n	8004468 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d15f      	bne.n	800454e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d110      	bne.n	80044b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004494:	4b30      	ldr	r3, [pc, #192]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800449c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6892      	ldr	r2, [r2, #8]
 80044a4:	0211      	lsls	r1, r2, #8
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68d2      	ldr	r2, [r2, #12]
 80044aa:	06d2      	lsls	r2, r2, #27
 80044ac:	430a      	orrs	r2, r1
 80044ae:	492a      	ldr	r1, [pc, #168]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	610b      	str	r3, [r1, #16]
 80044b4:	e027      	b.n	8004506 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d112      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044bc:	4b26      	ldr	r3, [pc, #152]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6892      	ldr	r2, [r2, #8]
 80044cc:	0211      	lsls	r1, r2, #8
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6912      	ldr	r2, [r2, #16]
 80044d2:	0852      	lsrs	r2, r2, #1
 80044d4:	3a01      	subs	r2, #1
 80044d6:	0552      	lsls	r2, r2, #21
 80044d8:	430a      	orrs	r2, r1
 80044da:	491f      	ldr	r1, [pc, #124]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
 80044e0:	e011      	b.n	8004506 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6892      	ldr	r2, [r2, #8]
 80044f2:	0211      	lsls	r1, r2, #8
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6952      	ldr	r2, [r2, #20]
 80044f8:	0852      	lsrs	r2, r2, #1
 80044fa:	3a01      	subs	r2, #1
 80044fc:	0652      	lsls	r2, r2, #25
 80044fe:	430a      	orrs	r2, r1
 8004500:	4915      	ldr	r1, [pc, #84]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004506:	4b14      	ldr	r3, [pc, #80]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a13      	ldr	r2, [pc, #76]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004510:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004512:	f7fd f97d 	bl	8001810 <HAL_GetTick>
 8004516:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004518:	e009      	b.n	800452e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800451a:	f7fd f979 	bl	8001810 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d902      	bls.n	800452e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	73fb      	strb	r3, [r7, #15]
          break;
 800452c:	e005      	b.n	800453a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800452e:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ef      	beq.n	800451a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	4903      	ldr	r1, [pc, #12]	; (8004558 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000

0800455c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e049      	b.n	8004602 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fc fe66 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 fd1e 	bl	8004fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e049      	b.n	80046b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f841 	bl	80046b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f000 fcc7 	bl	8004fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x24>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e03c      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d109      	bne.n	800470a <HAL_TIM_PWM_Start+0x3e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	e02f      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x58>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e022      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d109      	bne.n	800473e <HAL_TIM_PWM_Start+0x72>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e015      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b10      	cmp	r3, #16
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start+0x8c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e008      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07e      	b.n	8004870 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0xb6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	e023      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0xc6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004790:	e01b      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xd6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a0:	e013      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xe6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b0:	e00b      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xf6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	e003      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 ff7e 	bl	80056d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <HAL_TIM_PWM_Start+0x1ac>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x12a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a25      	ldr	r2, [pc, #148]	; (800487c <HAL_TIM_PWM_Start+0x1b0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x12a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a23      	ldr	r2, [pc, #140]	; (8004880 <HAL_TIM_PWM_Start+0x1b4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_PWM_Start+0x12e>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_TIM_PWM_Start+0x130>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800480e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a18      	ldr	r2, [pc, #96]	; (8004878 <HAL_TIM_PWM_Start+0x1ac>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_TIM_PWM_Start+0x162>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d004      	beq.n	800482e <HAL_TIM_PWM_Start+0x162>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a14      	ldr	r2, [pc, #80]	; (800487c <HAL_TIM_PWM_Start+0x1b0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d115      	bne.n	800485a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	4b13      	ldr	r3, [pc, #76]	; (8004884 <HAL_TIM_PWM_Start+0x1b8>)
 8004836:	4013      	ands	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b06      	cmp	r3, #6
 800483e:	d015      	beq.n	800486c <HAL_TIM_PWM_Start+0x1a0>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d011      	beq.n	800486c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	e008      	b.n	800486c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e000      	b.n	800486e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40014000 	.word	0x40014000
 8004880:	40014400 	.word	0x40014400
 8004884:	00010007 	.word	0x00010007

08004888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d122      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d11b      	bne.n	80048e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f06f 0202 	mvn.w	r2, #2
 80048b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fb67 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 80048d0:	e005      	b.n	80048de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fb59 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb6a 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d122      	bne.n	8004938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d11b      	bne.n	8004938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0204 	mvn.w	r2, #4
 8004908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fb3d 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004924:	e005      	b.n	8004932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fb2f 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fb40 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b08      	cmp	r3, #8
 8004944:	d122      	bne.n	800498c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b08      	cmp	r3, #8
 8004952:	d11b      	bne.n	800498c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0208 	mvn.w	r2, #8
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fb13 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fb05 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fb16 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b10      	cmp	r3, #16
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0210 	mvn.w	r2, #16
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2208      	movs	r2, #8
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fae9 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fadb 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 faec 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d10e      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0201 	mvn.w	r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fab5 	bl	8004f76 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a16:	2b80      	cmp	r3, #128	; 0x80
 8004a18:	d10e      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d107      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 ff5c 	bl	80058f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a46:	d10e      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b80      	cmp	r3, #128	; 0x80
 8004a54:	d107      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 ff4f 	bl	8005904 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	d10e      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d107      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 fa9a 	bl	8004fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d10e      	bne.n	8004abe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d107      	bne.n	8004abe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0220 	mvn.w	r2, #32
 8004ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 ff0f 	bl	80058dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e066      	b.n	8004bb4 <HAL_TIM_OC_ConfigChannel+0xec>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b14      	cmp	r3, #20
 8004af2:	d857      	bhi.n	8004ba4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <HAL_TIM_OC_ConfigChannel+0x34>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004ba5 	.word	0x08004ba5
 8004b04:	08004ba5 	.word	0x08004ba5
 8004b08:	08004ba5 	.word	0x08004ba5
 8004b0c:	08004b5f 	.word	0x08004b5f
 8004b10:	08004ba5 	.word	0x08004ba5
 8004b14:	08004ba5 	.word	0x08004ba5
 8004b18:	08004ba5 	.word	0x08004ba5
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004ba5 	.word	0x08004ba5
 8004b24:	08004ba5 	.word	0x08004ba5
 8004b28:	08004ba5 	.word	0x08004ba5
 8004b2c:	08004b7b 	.word	0x08004b7b
 8004b30:	08004ba5 	.word	0x08004ba5
 8004b34:	08004ba5 	.word	0x08004ba5
 8004b38:	08004ba5 	.word	0x08004ba5
 8004b3c:	08004b89 	.word	0x08004b89
 8004b40:	08004ba5 	.word	0x08004ba5
 8004b44:	08004ba5 	.word	0x08004ba5
 8004b48:	08004ba5 	.word	0x08004ba5
 8004b4c:	08004b97 	.word	0x08004b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 faa4 	bl	80050a4 <TIM_OC1_SetConfig>
      break;
 8004b5c:	e025      	b.n	8004baa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb19 	bl	800519c <TIM_OC2_SetConfig>
      break;
 8004b6a:	e01e      	b.n	8004baa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb8c 	bl	8005290 <TIM_OC3_SetConfig>
      break;
 8004b78:	e017      	b.n	8004baa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fbfd 	bl	8005380 <TIM_OC4_SetConfig>
      break;
 8004b86:	e010      	b.n	8004baa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fc54 	bl	800543c <TIM_OC5_SetConfig>
      break;
 8004b94:	e009      	b.n	8004baa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fca5 	bl	80054ec <TIM_OC6_SetConfig>
      break;
 8004ba2:	e002      	b.n	8004baa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0ff      	b.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b14      	cmp	r3, #20
 8004be6:	f200 80f0 	bhi.w	8004dca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c45 	.word	0x08004c45
 8004bf4:	08004dcb 	.word	0x08004dcb
 8004bf8:	08004dcb 	.word	0x08004dcb
 8004bfc:	08004dcb 	.word	0x08004dcb
 8004c00:	08004c85 	.word	0x08004c85
 8004c04:	08004dcb 	.word	0x08004dcb
 8004c08:	08004dcb 	.word	0x08004dcb
 8004c0c:	08004dcb 	.word	0x08004dcb
 8004c10:	08004cc7 	.word	0x08004cc7
 8004c14:	08004dcb 	.word	0x08004dcb
 8004c18:	08004dcb 	.word	0x08004dcb
 8004c1c:	08004dcb 	.word	0x08004dcb
 8004c20:	08004d07 	.word	0x08004d07
 8004c24:	08004dcb 	.word	0x08004dcb
 8004c28:	08004dcb 	.word	0x08004dcb
 8004c2c:	08004dcb 	.word	0x08004dcb
 8004c30:	08004d49 	.word	0x08004d49
 8004c34:	08004dcb 	.word	0x08004dcb
 8004c38:	08004dcb 	.word	0x08004dcb
 8004c3c:	08004dcb 	.word	0x08004dcb
 8004c40:	08004d89 	.word	0x08004d89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fa2a 	bl	80050a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0208 	orr.w	r2, r2, #8
 8004c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0204 	bic.w	r2, r2, #4
 8004c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6999      	ldr	r1, [r3, #24]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	619a      	str	r2, [r3, #24]
      break;
 8004c82:	e0a5      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fa86 	bl	800519c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	021a      	lsls	r2, r3, #8
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	619a      	str	r2, [r3, #24]
      break;
 8004cc4:	e084      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fadf 	bl	8005290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0208 	orr.w	r2, r2, #8
 8004ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0204 	bic.w	r2, r2, #4
 8004cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	61da      	str	r2, [r3, #28]
      break;
 8004d04:	e064      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fb37 	bl	8005380 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69d9      	ldr	r1, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	021a      	lsls	r2, r3, #8
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	61da      	str	r2, [r3, #28]
      break;
 8004d46:	e043      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fb74 	bl	800543c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0208 	orr.w	r2, r2, #8
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0204 	bic.w	r2, r2, #4
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d86:	e023      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68b9      	ldr	r1, [r7, #8]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fbac 	bl	80054ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	021a      	lsls	r2, r3, #8
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004dc8:	e002      	b.n	8004dd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop

08004de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIM_ConfigClockSource+0x1c>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e0b6      	b.n	8004f6e <HAL_TIM_ConfigClockSource+0x18a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3c:	d03e      	beq.n	8004ebc <HAL_TIM_ConfigClockSource+0xd8>
 8004e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e42:	f200 8087 	bhi.w	8004f54 <HAL_TIM_ConfigClockSource+0x170>
 8004e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4a:	f000 8086 	beq.w	8004f5a <HAL_TIM_ConfigClockSource+0x176>
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	d87f      	bhi.n	8004f54 <HAL_TIM_ConfigClockSource+0x170>
 8004e54:	2b70      	cmp	r3, #112	; 0x70
 8004e56:	d01a      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0xaa>
 8004e58:	2b70      	cmp	r3, #112	; 0x70
 8004e5a:	d87b      	bhi.n	8004f54 <HAL_TIM_ConfigClockSource+0x170>
 8004e5c:	2b60      	cmp	r3, #96	; 0x60
 8004e5e:	d050      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x11e>
 8004e60:	2b60      	cmp	r3, #96	; 0x60
 8004e62:	d877      	bhi.n	8004f54 <HAL_TIM_ConfigClockSource+0x170>
 8004e64:	2b50      	cmp	r3, #80	; 0x50
 8004e66:	d03c      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0xfe>
 8004e68:	2b50      	cmp	r3, #80	; 0x50
 8004e6a:	d873      	bhi.n	8004f54 <HAL_TIM_ConfigClockSource+0x170>
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d058      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x13e>
 8004e70:	2b40      	cmp	r3, #64	; 0x40
 8004e72:	d86f      	bhi.n	8004f54 <HAL_TIM_ConfigClockSource+0x170>
 8004e74:	2b30      	cmp	r3, #48	; 0x30
 8004e76:	d064      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x15e>
 8004e78:	2b30      	cmp	r3, #48	; 0x30
 8004e7a:	d86b      	bhi.n	8004f54 <HAL_TIM_ConfigClockSource+0x170>
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d060      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x15e>
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d867      	bhi.n	8004f54 <HAL_TIM_ConfigClockSource+0x170>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d05c      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x15e>
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d05a      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x15e>
 8004e8c:	e062      	b.n	8004f54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6899      	ldr	r1, [r3, #8]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f000 fbf9 	bl	8005694 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	609a      	str	r2, [r3, #8]
      break;
 8004eba:	e04f      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	6899      	ldr	r1, [r3, #8]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f000 fbe2 	bl	8005694 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ede:	609a      	str	r2, [r3, #8]
      break;
 8004ee0:	e03c      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f000 fb56 	bl	80055a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2150      	movs	r1, #80	; 0x50
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fbaf 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8004f00:	e02c      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f000 fb75 	bl	80055fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2160      	movs	r1, #96	; 0x60
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fb9f 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8004f20:	e01c      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6859      	ldr	r1, [r3, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f000 fb36 	bl	80055a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2140      	movs	r1, #64	; 0x40
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fb8f 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8004f40:	e00c      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f000 fb86 	bl	800565e <TIM_ITRx_SetConfig>
      break;
 8004f52:	e003      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
      break;
 8004f58:	e000      	b.n	8004f5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a2a      	ldr	r2, [pc, #168]	; (8005098 <TIM_Base_SetConfig+0xbc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x20>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a21      	ldr	r2, [pc, #132]	; (8005098 <TIM_Base_SetConfig+0xbc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_Base_SetConfig+0x52>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d007      	beq.n	800502e <TIM_Base_SetConfig+0x52>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1e      	ldr	r2, [pc, #120]	; (800509c <TIM_Base_SetConfig+0xc0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_Base_SetConfig+0x52>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a1d      	ldr	r2, [pc, #116]	; (80050a0 <TIM_Base_SetConfig+0xc4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <TIM_Base_SetConfig+0xbc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d007      	beq.n	800507c <TIM_Base_SetConfig+0xa0>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a0b      	ldr	r2, [pc, #44]	; (800509c <TIM_Base_SetConfig+0xc0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d003      	beq.n	800507c <TIM_Base_SetConfig+0xa0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <TIM_Base_SetConfig+0xc4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d103      	bne.n	8005084 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	615a      	str	r2, [r3, #20]
}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400

080050a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 0302 	bic.w	r3, r3, #2
 80050f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a24      	ldr	r2, [pc, #144]	; (8005190 <TIM_OC1_SetConfig+0xec>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_OC1_SetConfig+0x70>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a23      	ldr	r2, [pc, #140]	; (8005194 <TIM_OC1_SetConfig+0xf0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC1_SetConfig+0x70>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a22      	ldr	r2, [pc, #136]	; (8005198 <TIM_OC1_SetConfig+0xf4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10c      	bne.n	800512e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0308 	bic.w	r3, r3, #8
 800511a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 0304 	bic.w	r3, r3, #4
 800512c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a17      	ldr	r2, [pc, #92]	; (8005190 <TIM_OC1_SetConfig+0xec>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <TIM_OC1_SetConfig+0xa2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a16      	ldr	r2, [pc, #88]	; (8005194 <TIM_OC1_SetConfig+0xf0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <TIM_OC1_SetConfig+0xa2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a15      	ldr	r2, [pc, #84]	; (8005198 <TIM_OC1_SetConfig+0xf4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d111      	bne.n	800516a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800514c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	621a      	str	r2, [r3, #32]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40014000 	.word	0x40014000
 8005198:	40014400 	.word	0x40014400

0800519c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0210 	bic.w	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0320 	bic.w	r3, r3, #32
 80051ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a22      	ldr	r2, [pc, #136]	; (8005284 <TIM_OC2_SetConfig+0xe8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10d      	bne.n	800521c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a19      	ldr	r2, [pc, #100]	; (8005284 <TIM_OC2_SetConfig+0xe8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_OC2_SetConfig+0x98>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a18      	ldr	r2, [pc, #96]	; (8005288 <TIM_OC2_SetConfig+0xec>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC2_SetConfig+0x98>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a17      	ldr	r2, [pc, #92]	; (800528c <TIM_OC2_SetConfig+0xf0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d113      	bne.n	800525c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800523a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40012c00 	.word	0x40012c00
 8005288:	40014000 	.word	0x40014000
 800528c:	40014400 	.word	0x40014400

08005290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0303 	bic.w	r3, r3, #3
 80052ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	021b      	lsls	r3, r3, #8
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a21      	ldr	r2, [pc, #132]	; (8005374 <TIM_OC3_SetConfig+0xe4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d10d      	bne.n	800530e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800530c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a18      	ldr	r2, [pc, #96]	; (8005374 <TIM_OC3_SetConfig+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_OC3_SetConfig+0x96>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a17      	ldr	r2, [pc, #92]	; (8005378 <TIM_OC3_SetConfig+0xe8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC3_SetConfig+0x96>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a16      	ldr	r2, [pc, #88]	; (800537c <TIM_OC3_SetConfig+0xec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d113      	bne.n	800534e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800532c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	621a      	str	r2, [r3, #32]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400

08005380 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	031b      	lsls	r3, r3, #12
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a14      	ldr	r2, [pc, #80]	; (8005430 <TIM_OC4_SetConfig+0xb0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_OC4_SetConfig+0x74>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a13      	ldr	r2, [pc, #76]	; (8005434 <TIM_OC4_SetConfig+0xb4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC4_SetConfig+0x74>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a12      	ldr	r2, [pc, #72]	; (8005438 <TIM_OC4_SetConfig+0xb8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d109      	bne.n	8005408 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40014000 	.word	0x40014000
 8005438:	40014400 	.word	0x40014400

0800543c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005480:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	041b      	lsls	r3, r3, #16
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a13      	ldr	r2, [pc, #76]	; (80054e0 <TIM_OC5_SetConfig+0xa4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d007      	beq.n	80054a6 <TIM_OC5_SetConfig+0x6a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <TIM_OC5_SetConfig+0xa8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_OC5_SetConfig+0x6a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <TIM_OC5_SetConfig+0xac>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d109      	bne.n	80054ba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400

080054ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	021b      	lsls	r3, r3, #8
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	051b      	lsls	r3, r3, #20
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	4313      	orrs	r3, r2
 800553e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a14      	ldr	r2, [pc, #80]	; (8005594 <TIM_OC6_SetConfig+0xa8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d007      	beq.n	8005558 <TIM_OC6_SetConfig+0x6c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a13      	ldr	r2, [pc, #76]	; (8005598 <TIM_OC6_SetConfig+0xac>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_OC6_SetConfig+0x6c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a12      	ldr	r2, [pc, #72]	; (800559c <TIM_OC6_SetConfig+0xb0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d109      	bne.n	800556c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	029b      	lsls	r3, r3, #10
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40014000 	.word	0x40014000
 800559c:	40014400 	.word	0x40014400

080055a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f023 0201 	bic.w	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f023 030a 	bic.w	r3, r3, #10
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	621a      	str	r2, [r3, #32]
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f023 0210 	bic.w	r2, r3, #16
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005628:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	031b      	lsls	r3, r3, #12
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4313      	orrs	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800563a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800565e:	b480      	push	{r7}
 8005660:	b085      	sub	sp, #20
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4313      	orrs	r3, r2
 800567c:	f043 0307 	orr.w	r3, r3, #7
 8005680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	609a      	str	r2, [r3, #8]
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	021a      	lsls	r2, r3, #8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 031f 	and.w	r3, r3, #31
 80056e6:	2201      	movs	r2, #1
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a1a      	ldr	r2, [r3, #32]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	401a      	ands	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1a      	ldr	r2, [r3, #32]
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	431a      	orrs	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005734:	2302      	movs	r3, #2
 8005736:	e04f      	b.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005768:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d009      	beq.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d004      	beq.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10c      	bne.n	80057c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40014000 	.word	0x40014000

080057ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005804:	2302      	movs	r3, #2
 8005806:	e060      	b.n	80058ca <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	041b      	lsls	r3, r3, #16
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a14      	ldr	r2, [pc, #80]	; (80058d8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d115      	bne.n	80058b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	051b      	lsls	r3, r3, #20
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40012c00 	.word	0x40012c00

080058dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e040      	b.n	80059ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fb fd16 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2224      	movs	r2, #36	; 0x24
 8005944:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0201 	bic.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f82c 	bl	80059b4 <UART_SetConfig>
 800595c:	4603      	mov	r3, r0
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e022      	b.n	80059ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa7a 	bl	8005e68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb01 	bl	8005fac <UART_CheckIdleState>
 80059aa:	4603      	mov	r3, r0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b8:	b08a      	sub	sp, #40	; 0x28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	4313      	orrs	r3, r2
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b9e      	ldr	r3, [pc, #632]	; (8005c5c <UART_SetConfig+0x2a8>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a93      	ldr	r2, [pc, #588]	; (8005c60 <UART_SetConfig+0x2ac>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a30:	430a      	orrs	r2, r1
 8005a32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a8a      	ldr	r2, [pc, #552]	; (8005c64 <UART_SetConfig+0x2b0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d126      	bne.n	8005a8c <UART_SetConfig+0xd8>
 8005a3e:	4b8a      	ldr	r3, [pc, #552]	; (8005c68 <UART_SetConfig+0x2b4>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d81b      	bhi.n	8005a84 <UART_SetConfig+0xd0>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <UART_SetConfig+0xa0>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a75 	.word	0x08005a75
 8005a5c:	08005a6d 	.word	0x08005a6d
 8005a60:	08005a7d 	.word	0x08005a7d
 8005a64:	2301      	movs	r3, #1
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6a:	e0ab      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a72:	e0a7      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005a74:	2304      	movs	r3, #4
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e0a3      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e09f      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a8a:	e09b      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a76      	ldr	r2, [pc, #472]	; (8005c6c <UART_SetConfig+0x2b8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d138      	bne.n	8005b08 <UART_SetConfig+0x154>
 8005a96:	4b74      	ldr	r3, [pc, #464]	; (8005c68 <UART_SetConfig+0x2b4>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f003 030c 	and.w	r3, r3, #12
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	d82d      	bhi.n	8005b00 <UART_SetConfig+0x14c>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <UART_SetConfig+0xf8>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ae1 	.word	0x08005ae1
 8005ab0:	08005b01 	.word	0x08005b01
 8005ab4:	08005b01 	.word	0x08005b01
 8005ab8:	08005b01 	.word	0x08005b01
 8005abc:	08005af1 	.word	0x08005af1
 8005ac0:	08005b01 	.word	0x08005b01
 8005ac4:	08005b01 	.word	0x08005b01
 8005ac8:	08005b01 	.word	0x08005b01
 8005acc:	08005ae9 	.word	0x08005ae9
 8005ad0:	08005b01 	.word	0x08005b01
 8005ad4:	08005b01 	.word	0x08005b01
 8005ad8:	08005b01 	.word	0x08005b01
 8005adc:	08005af9 	.word	0x08005af9
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae6:	e06d      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aee:	e069      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005af0:	2304      	movs	r3, #4
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af6:	e065      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005af8:	2308      	movs	r3, #8
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afe:	e061      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005b00:	2310      	movs	r3, #16
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e05d      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a58      	ldr	r2, [pc, #352]	; (8005c70 <UART_SetConfig+0x2bc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d125      	bne.n	8005b5e <UART_SetConfig+0x1aa>
 8005b12:	4b55      	ldr	r3, [pc, #340]	; (8005c68 <UART_SetConfig+0x2b4>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b1c:	2b30      	cmp	r3, #48	; 0x30
 8005b1e:	d016      	beq.n	8005b4e <UART_SetConfig+0x19a>
 8005b20:	2b30      	cmp	r3, #48	; 0x30
 8005b22:	d818      	bhi.n	8005b56 <UART_SetConfig+0x1a2>
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	d00a      	beq.n	8005b3e <UART_SetConfig+0x18a>
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d814      	bhi.n	8005b56 <UART_SetConfig+0x1a2>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <UART_SetConfig+0x182>
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d008      	beq.n	8005b46 <UART_SetConfig+0x192>
 8005b34:	e00f      	b.n	8005b56 <UART_SetConfig+0x1a2>
 8005b36:	2300      	movs	r3, #0
 8005b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3c:	e042      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b44:	e03e      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005b46:	2304      	movs	r3, #4
 8005b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b4c:	e03a      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005b4e:	2308      	movs	r3, #8
 8005b50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b54:	e036      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005b56:	2310      	movs	r3, #16
 8005b58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b5c:	e032      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a3f      	ldr	r2, [pc, #252]	; (8005c60 <UART_SetConfig+0x2ac>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d12a      	bne.n	8005bbe <UART_SetConfig+0x20a>
 8005b68:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <UART_SetConfig+0x2b4>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b76:	d01a      	beq.n	8005bae <UART_SetConfig+0x1fa>
 8005b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b7c:	d81b      	bhi.n	8005bb6 <UART_SetConfig+0x202>
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b82:	d00c      	beq.n	8005b9e <UART_SetConfig+0x1ea>
 8005b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b88:	d815      	bhi.n	8005bb6 <UART_SetConfig+0x202>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <UART_SetConfig+0x1e2>
 8005b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b92:	d008      	beq.n	8005ba6 <UART_SetConfig+0x1f2>
 8005b94:	e00f      	b.n	8005bb6 <UART_SetConfig+0x202>
 8005b96:	2300      	movs	r3, #0
 8005b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b9c:	e012      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba4:	e00e      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bac:	e00a      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005bae:	2308      	movs	r3, #8
 8005bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bb4:	e006      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005bb6:	2310      	movs	r3, #16
 8005bb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bbc:	e002      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005bbe:	2310      	movs	r3, #16
 8005bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a25      	ldr	r2, [pc, #148]	; (8005c60 <UART_SetConfig+0x2ac>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	f040 808a 	bne.w	8005ce4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d824      	bhi.n	8005c22 <UART_SetConfig+0x26e>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x22c>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c23 	.word	0x08005c23
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c23 	.word	0x08005c23
 8005bf0:	08005c13 	.word	0x08005c13
 8005bf4:	08005c23 	.word	0x08005c23
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c23 	.word	0x08005c23
 8005c00:	08005c1b 	.word	0x08005c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fe f914 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8005c08:	61f8      	str	r0, [r7, #28]
        break;
 8005c0a:	e010      	b.n	8005c2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <UART_SetConfig+0x2c0>)
 8005c0e:	61fb      	str	r3, [r7, #28]
        break;
 8005c10:	e00d      	b.n	8005c2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c12:	f7fe f875 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8005c16:	61f8      	str	r0, [r7, #28]
        break;
 8005c18:	e009      	b.n	8005c2e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c1e:	61fb      	str	r3, [r7, #28]
        break;
 8005c20:	e005      	b.n	8005c2e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8109 	beq.w	8005e48 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4413      	add	r3, r2
 8005c40:	69fa      	ldr	r2, [r7, #28]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d305      	bcc.n	8005c52 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c4c:	69fa      	ldr	r2, [r7, #28]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d912      	bls.n	8005c78 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c58:	e0f6      	b.n	8005e48 <UART_SetConfig+0x494>
 8005c5a:	bf00      	nop
 8005c5c:	efff69f3 	.word	0xefff69f3
 8005c60:	40008000 	.word	0x40008000
 8005c64:	40013800 	.word	0x40013800
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40004400 	.word	0x40004400
 8005c70:	40004800 	.word	0x40004800
 8005c74:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	461c      	mov	r4, r3
 8005c7e:	4615      	mov	r5, r2
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	022b      	lsls	r3, r5, #8
 8005c8a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c8e:	0222      	lsls	r2, r4, #8
 8005c90:	68f9      	ldr	r1, [r7, #12]
 8005c92:	6849      	ldr	r1, [r1, #4]
 8005c94:	0849      	lsrs	r1, r1, #1
 8005c96:	2000      	movs	r0, #0
 8005c98:	4688      	mov	r8, r1
 8005c9a:	4681      	mov	r9, r0
 8005c9c:	eb12 0a08 	adds.w	sl, r2, r8
 8005ca0:	eb43 0b09 	adc.w	fp, r3, r9
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	f7fa fa89 	bl	80001cc <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cc8:	d308      	bcc.n	8005cdc <UART_SetConfig+0x328>
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd0:	d204      	bcs.n	8005cdc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	e0b5      	b.n	8005e48 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ce2:	e0b1      	b.n	8005e48 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cec:	d15d      	bne.n	8005daa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005cee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d827      	bhi.n	8005d46 <UART_SetConfig+0x392>
 8005cf6:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <UART_SetConfig+0x348>)
 8005cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	08005d47 	.word	0x08005d47
 8005d0c:	08005d37 	.word	0x08005d37
 8005d10:	08005d47 	.word	0x08005d47
 8005d14:	08005d47 	.word	0x08005d47
 8005d18:	08005d47 	.word	0x08005d47
 8005d1c:	08005d3f 	.word	0x08005d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d20:	f7fe f886 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8005d24:	61f8      	str	r0, [r7, #28]
        break;
 8005d26:	e014      	b.n	8005d52 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d28:	f7fe f898 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8005d2c:	61f8      	str	r0, [r7, #28]
        break;
 8005d2e:	e010      	b.n	8005d52 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d30:	4b4c      	ldr	r3, [pc, #304]	; (8005e64 <UART_SetConfig+0x4b0>)
 8005d32:	61fb      	str	r3, [r7, #28]
        break;
 8005d34:	e00d      	b.n	8005d52 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d36:	f7fd ffe3 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8005d3a:	61f8      	str	r0, [r7, #28]
        break;
 8005d3c:	e009      	b.n	8005d52 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d42:	61fb      	str	r3, [r7, #28]
        break;
 8005d44:	e005      	b.n	8005d52 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d077      	beq.n	8005e48 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	005a      	lsls	r2, r3, #1
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	441a      	add	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b0f      	cmp	r3, #15
 8005d72:	d916      	bls.n	8005da2 <UART_SetConfig+0x3ee>
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d7a:	d212      	bcs.n	8005da2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f023 030f 	bic.w	r3, r3, #15
 8005d84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	8afb      	ldrh	r3, [r7, #22]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	8afa      	ldrh	r2, [r7, #22]
 8005d9e:	60da      	str	r2, [r3, #12]
 8005da0:	e052      	b.n	8005e48 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005da8:	e04e      	b.n	8005e48 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d827      	bhi.n	8005e02 <UART_SetConfig+0x44e>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x404>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	08005e03 	.word	0x08005e03
 8005dc8:	08005df3 	.word	0x08005df3
 8005dcc:	08005e03 	.word	0x08005e03
 8005dd0:	08005e03 	.word	0x08005e03
 8005dd4:	08005e03 	.word	0x08005e03
 8005dd8:	08005dfb 	.word	0x08005dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ddc:	f7fe f828 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8005de0:	61f8      	str	r0, [r7, #28]
        break;
 8005de2:	e014      	b.n	8005e0e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de4:	f7fe f83a 	bl	8003e5c <HAL_RCC_GetPCLK2Freq>
 8005de8:	61f8      	str	r0, [r7, #28]
        break;
 8005dea:	e010      	b.n	8005e0e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dec:	4b1d      	ldr	r3, [pc, #116]	; (8005e64 <UART_SetConfig+0x4b0>)
 8005dee:	61fb      	str	r3, [r7, #28]
        break;
 8005df0:	e00d      	b.n	8005e0e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df2:	f7fd ff85 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8005df6:	61f8      	str	r0, [r7, #28]
        break;
 8005df8:	e009      	b.n	8005e0e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfe:	61fb      	str	r3, [r7, #28]
        break;
 8005e00:	e005      	b.n	8005e0e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d019      	beq.n	8005e48 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	085a      	lsrs	r2, r3, #1
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	441a      	add	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	2b0f      	cmp	r3, #15
 8005e2c:	d909      	bls.n	8005e42 <UART_SetConfig+0x48e>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e34:	d205      	bcs.n	8005e42 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60da      	str	r2, [r3, #12]
 8005e40:	e002      	b.n	8005e48 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3728      	adds	r7, #40	; 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e62:	bf00      	nop
 8005e64:	00f42400 	.word	0x00f42400

08005e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	f003 0304 	and.w	r3, r3, #4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f66:	d10a      	bne.n	8005f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fbc:	f7fb fc28 	bl	8001810 <HAL_GetTick>
 8005fc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d10e      	bne.n	8005fee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f82d 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e023      	b.n	8006036 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d10e      	bne.n	800601a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f817 	bl	800603e <UART_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e00d      	b.n	8006036 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b09c      	sub	sp, #112	; 0x70
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604e:	e0a5      	b.n	800619c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006056:	f000 80a1 	beq.w	800619c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7fb fbd9 	bl	8001810 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006066:	429a      	cmp	r2, r3
 8006068:	d302      	bcc.n	8006070 <UART_WaitOnFlagUntilTimeout+0x32>
 800606a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800606c:	2b00      	cmp	r3, #0
 800606e:	d13e      	bne.n	80060ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800607e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006080:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006084:	667b      	str	r3, [r7, #100]	; 0x64
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006090:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006094:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800609c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e6      	bne.n	8006070 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3308      	adds	r3, #8
 80060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	663b      	str	r3, [r7, #96]	; 0x60
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3308      	adds	r3, #8
 80060c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e067      	b.n	80061be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d04f      	beq.n	800619c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610a:	d147      	bne.n	800619c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006114:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800612a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
 8006136:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800613a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e6      	bne.n	8006116 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3308      	adds	r3, #8
 800614e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	613b      	str	r3, [r7, #16]
   return(result);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f023 0301 	bic.w	r3, r3, #1
 800615e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3308      	adds	r3, #8
 8006166:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006168:	623a      	str	r2, [r7, #32]
 800616a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	69f9      	ldr	r1, [r7, #28]
 800616e:	6a3a      	ldr	r2, [r7, #32]
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	61bb      	str	r3, [r7, #24]
   return(result);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e5      	bne.n	8006148 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e010      	b.n	80061be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69da      	ldr	r2, [r3, #28]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4013      	ands	r3, r2
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	f43f af4a 	beq.w	8006050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3770      	adds	r7, #112	; 0x70
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <__libc_init_array>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	4d0d      	ldr	r5, [pc, #52]	; (8006200 <__libc_init_array+0x38>)
 80061cc:	4c0d      	ldr	r4, [pc, #52]	; (8006204 <__libc_init_array+0x3c>)
 80061ce:	1b64      	subs	r4, r4, r5
 80061d0:	10a4      	asrs	r4, r4, #2
 80061d2:	2600      	movs	r6, #0
 80061d4:	42a6      	cmp	r6, r4
 80061d6:	d109      	bne.n	80061ec <__libc_init_array+0x24>
 80061d8:	4d0b      	ldr	r5, [pc, #44]	; (8006208 <__libc_init_array+0x40>)
 80061da:	4c0c      	ldr	r4, [pc, #48]	; (800620c <__libc_init_array+0x44>)
 80061dc:	f000 f820 	bl	8006220 <_init>
 80061e0:	1b64      	subs	r4, r4, r5
 80061e2:	10a4      	asrs	r4, r4, #2
 80061e4:	2600      	movs	r6, #0
 80061e6:	42a6      	cmp	r6, r4
 80061e8:	d105      	bne.n	80061f6 <__libc_init_array+0x2e>
 80061ea:	bd70      	pop	{r4, r5, r6, pc}
 80061ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f0:	4798      	blx	r3
 80061f2:	3601      	adds	r6, #1
 80061f4:	e7ee      	b.n	80061d4 <__libc_init_array+0xc>
 80061f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fa:	4798      	blx	r3
 80061fc:	3601      	adds	r6, #1
 80061fe:	e7f2      	b.n	80061e6 <__libc_init_array+0x1e>
 8006200:	080062a8 	.word	0x080062a8
 8006204:	080062a8 	.word	0x080062a8
 8006208:	080062a8 	.word	0x080062a8
 800620c:	080062ac 	.word	0x080062ac

08006210 <memset>:
 8006210:	4402      	add	r2, r0
 8006212:	4603      	mov	r3, r0
 8006214:	4293      	cmp	r3, r2
 8006216:	d100      	bne.n	800621a <memset+0xa>
 8006218:	4770      	bx	lr
 800621a:	f803 1b01 	strb.w	r1, [r3], #1
 800621e:	e7f9      	b.n	8006214 <memset+0x4>

08006220 <_init>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	bf00      	nop
 8006224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006226:	bc08      	pop	{r3}
 8006228:	469e      	mov	lr, r3
 800622a:	4770      	bx	lr

0800622c <_fini>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	bf00      	nop
 8006230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006232:	bc08      	pop	{r3}
 8006234:	469e      	mov	lr, r3
 8006236:	4770      	bx	lr
