
THPFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d8c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f60  08005f60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f68  08005f68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  2000000c  08005f7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08005f7c  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cac  00000000  00000000  0003790d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003bad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024407  00000000  00000000  0003ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019aa2  00000000  00000000  000612bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1f44  00000000  00000000  0007ad61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015cca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d4  00000000  00000000  0015ccf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005f00 	.word	0x08005f00

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005f00 	.word	0x08005f00

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f001 f936 	bl	8001746 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f84f 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 fbed 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 fba5 	bl	8000c30 <MX_DMA_Init>
  MX_ADC1_Init();
 80004e6:	f000 f8a7 	bl	8000638 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004ea:	f000 f949 	bl	8000780 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004ee:	f000 f987 	bl	8000800 <MX_I2C2_Init>
  MX_I2C3_Init();
 80004f2:	f000 f9c5 	bl	8000880 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80004f6:	f000 fb3b 	bl	8000b70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 fb69 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80004fe:	f000 f91d 	bl	800073c <MX_CRC_Init>
  MX_IWDG_Init();
 8000502:	f000 f9fd 	bl	8000900 <MX_IWDG_Init>
  MX_TIM1_Init();
 8000506:	f000 fa19 	bl	800093c <MX_TIM1_Init>
  MX_TIM2_Init();
 800050a:	f000 fa6b 	bl	80009e4 <MX_TIM2_Init>
  MX_TIM16_Init();
 800050e:	f000 fab7 	bl	8000a80 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000512:	f000 f884 	bl	800061e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000516:	2100      	movs	r1, #0
 8000518:	4814      	ldr	r0, [pc, #80]	; (800056c <main+0x9c>)
 800051a:	f004 f931 	bl	8004780 <HAL_TIM_PWM_Start>
  LED1_ON();
 800051e:	2200      	movs	r2, #0
 8000520:	2120      	movs	r1, #32
 8000522:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0xa0>)
 8000524:	f002 fd16 	bl	8002f54 <HAL_GPIO_WritePin>
  led2Sweep(100,0xFFFF,50);
 8000528:	2232      	movs	r2, #50	; 0x32
 800052a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800052e:	2064      	movs	r0, #100	; 0x64
 8000530:	f001 f8c0 	bl	80016b4 <led2Sweep>
  uint32_t ticks1s = HAL_GetTick();
 8000534:	f001 f970 	bl	8001818 <HAL_GetTick>
 8000538:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick()-ticks1s >= 1000)
 800053a:	f001 f96d 	bl	8001818 <HAL_GetTick>
 800053e:	4602      	mov	r2, r0
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000548:	d306      	bcc.n	8000558 <main+0x88>
		  {
		  	    ticks1s = HAL_GetTick();
 800054a:	f001 f965 	bl	8001818 <HAL_GetTick>
 800054e:	6078      	str	r0, [r7, #4]
			    LED1_TOGGLE();
 8000550:	2120      	movs	r1, #32
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <main+0xa0>)
 8000554:	f002 fd16 	bl	8002f84 <HAL_GPIO_TogglePin>
//			    led2Sweep(100,0xFFFF,50);
		  }

    /* USER CODE END WHILE */
	  WDR();
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <main+0xa4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <main+0xa8>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d1eb      	bne.n	800053a <main+0x6a>
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <main+0xa4>)
 8000564:	f002 fe9d 	bl	80032a2 <HAL_IWDG_Refresh>
	  if(HAL_GetTick()-ticks1s >= 1000)
 8000568:	e7e7      	b.n	800053a <main+0x6a>
 800056a:	bf00      	nop
 800056c:	20000374 	.word	0x20000374
 8000570:	48000400 	.word	0x48000400
 8000574:	200002cc 	.word	0x200002cc
 8000578:	40003000 	.word	0x40003000

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	; 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	; 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fcb0 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005a2:	f002 fe9d 	bl	80032e0 <HAL_PWREx_ControlVoltageScaling>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ac:	f000 fc1c 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80005b0:	2309      	movs	r3, #9
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	2303      	movs	r3, #3
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ca:	230a      	movs	r3, #10
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fed4 	bl	800338c <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ea:	f000 fbfd 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fad4 	bl	8003bb4 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000612:	f000 fbe9 	bl	8000de8 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3758      	adds	r7, #88	; 0x58
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2005      	movs	r0, #5
 8000628:	f002 f891 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800062c:	2005      	movs	r0, #5
 800062e:	f002 f8aa 	bl	8002786 <HAL_NVIC_EnableIRQ>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <MX_ADC1_Init+0xf4>)
 8000650:	4a37      	ldr	r2, [pc, #220]	; (8000730 <MX_ADC1_Init+0xf8>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000654:	4b35      	ldr	r3, [pc, #212]	; (800072c <MX_ADC1_Init+0xf4>)
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065a:	4b34      	ldr	r3, [pc, #208]	; (800072c <MX_ADC1_Init+0xf4>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000660:	4b32      	ldr	r3, [pc, #200]	; (800072c <MX_ADC1_Init+0xf4>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <MX_ADC1_Init+0xf4>)
 8000668:	2201      	movs	r2, #1
 800066a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066c:	4b2f      	ldr	r3, [pc, #188]	; (800072c <MX_ADC1_Init+0xf4>)
 800066e:	2204      	movs	r2, #4
 8000670:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <MX_ADC1_Init+0xf4>)
 8000674:	2200      	movs	r2, #0
 8000676:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <MX_ADC1_Init+0xf4>)
 800067a:	2200      	movs	r2, #0
 800067c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800067e:	4b2b      	ldr	r3, [pc, #172]	; (800072c <MX_ADC1_Init+0xf4>)
 8000680:	2202      	movs	r2, #2
 8000682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <MX_ADC1_Init+0xf4>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_ADC1_Init+0xf4>)
 800068e:	2200      	movs	r2, #0
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <MX_ADC1_Init+0xf4>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_ADC1_Init+0xf4>)
 800069a:	2200      	movs	r2, #0
 800069c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_ADC1_Init+0xf4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80006a6:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_ADC1_Init+0xf4>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_ADC1_Init+0xf4>)
 80006b0:	220c      	movs	r2, #12
 80006b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_ADC1_Init+0xf4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_ADC1_Init+0xf4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_ADC1_Init+0xf4>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c6:	4819      	ldr	r0, [pc, #100]	; (800072c <MX_ADC1_Init+0xf4>)
 80006c8:	f001 fa3e 	bl	8001b48 <HAL_ADC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80006d2:	f000 fb89 	bl	8000de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_ADC1_Init+0xfc>)
 80006d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006da:	2306      	movs	r3, #6
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80006de:	2306      	movs	r3, #6
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e2:	237f      	movs	r3, #127	; 0x7f
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e6:	2304      	movs	r3, #4
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <MX_ADC1_Init+0xf4>)
 80006f4:	f001 fb70 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80006fe:	f000 fb73 	bl	8000de8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_ADC1_Init+0x100>)
 8000704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000706:	230c      	movs	r3, #12
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800070a:	2303      	movs	r3, #3
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_ADC1_Init+0xf4>)
 8000714:	f001 fb60 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800071e:	f000 fb63 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028
 8000730:	50040000 	.word	0x50040000
 8000734:	c7520000 	.word	0xc7520000
 8000738:	19200040 	.word	0x19200040

0800073c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_CRC_Init+0x3c>)
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <MX_CRC_Init+0x40>)
 8000744:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_CRC_Init+0x3c>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_CRC_Init+0x3c>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_CRC_Init+0x3c>)
 8000754:	2200      	movs	r2, #0
 8000756:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_CRC_Init+0x3c>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_CRC_Init+0x3c>)
 8000760:	2201      	movs	r2, #1
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_CRC_Init+0x3c>)
 8000766:	f002 f829 	bl	80027bc <HAL_CRC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000770:	f000 fb3a 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000008c 	.word	0x2000008c
 800077c:	40023000 	.word	0x40023000

08000780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C1_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301347;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C1_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C1_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C1_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007bc:	f002 fbfc 	bl	8002fb8 <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 fb0f 	bl	8000de8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007ce:	f002 fc82 	bl	80030d6 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 fb06 	bl	8000de8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C1_Init+0x74>)
 80007e0:	f002 fcc4 	bl	800316c <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 fafd 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000b0 	.word	0x200000b0
 80007f8:	40005400 	.word	0x40005400
 80007fc:	00301347 	.word	0x00301347

08000800 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C2_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C2_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301347;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C2_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C2_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C2_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_I2C2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C2_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <MX_I2C2_Init+0x74>)
 800083c:	f002 fbbc 	bl	8002fb8 <HAL_I2C_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000846:	f000 facf 	bl	8000de8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_I2C2_Init+0x74>)
 800084e:	f002 fc42 	bl	80030d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 fac6 	bl	8000de8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2C2_Init+0x74>)
 8000860:	f002 fc84 	bl	800316c <HAL_I2CEx_ConfigDigitalFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 fabd 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000104 	.word	0x20000104
 8000878:	40005800 	.word	0x40005800
 800087c:	00301347 	.word	0x00301347

08000880 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_I2C3_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_I2C3_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00301347;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_I2C3_Init+0x74>)
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <MX_I2C3_Init+0x7c>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_I2C3_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_I2C3_Init+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_I2C3_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_I2C3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C3_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C3_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <MX_I2C3_Init+0x74>)
 80008bc:	f002 fb7c 	bl	8002fb8 <HAL_I2C_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80008c6:	f000 fa8f 	bl	8000de8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_I2C3_Init+0x74>)
 80008ce:	f002 fc02 	bl	80030d6 <HAL_I2CEx_ConfigAnalogFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008d8:	f000 fa86 	bl	8000de8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_I2C3_Init+0x74>)
 80008e0:	f002 fc44 	bl	800316c <HAL_I2CEx_ConfigDigitalFilter>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 fa7d 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000158 	.word	0x20000158
 80008f8:	40005c00 	.word	0x40005c00
 80008fc:	00301347 	.word	0x00301347

08000900 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_IWDG_Init+0x34>)
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <MX_IWDG_Init+0x38>)
 8000908:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_IWDG_Init+0x34>)
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_IWDG_Init+0x34>)
 8000912:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000916:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_IWDG_Init+0x34>)
 800091a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800091e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_IWDG_Init+0x34>)
 8000922:	f002 fc6f 	bl	8003204 <HAL_IWDG_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800092c:	f000 fa5c 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200002cc 	.word	0x200002cc
 8000938:	40003000 	.word	0x40003000

0800093c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800095a:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_TIM1_Init+0xa0>)
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <MX_TIM1_Init+0xa4>)
 800095e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_TIM1_Init+0xa0>)
 800096e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_TIM1_Init+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000986:	4815      	ldr	r0, [pc, #84]	; (80009dc <MX_TIM1_Init+0xa0>)
 8000988:	f003 fe42 	bl	8004610 <HAL_TIM_Base_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000992:	f000 fa29 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <MX_TIM1_Init+0xa0>)
 80009a4:	f004 f8de 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009ae:	f000 fa1b 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_TIM1_Init+0xa0>)
 80009c4:	f004 fd3a 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009ce:	f000 fa0b 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200002dc 	.word	0x200002dc
 80009e0:	40012c00 	.word	0x40012c00

080009e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2a:	4814      	ldr	r0, [pc, #80]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a2c:	f003 fdf0 	bl	8004610 <HAL_TIM_Base_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a36:	f000 f9d7 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a48:	f004 f88c 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a52:	f000 f9c9 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <MX_TIM2_Init+0x98>)
 8000a64:	f004 fcea 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a6e:	f000 f9bb 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000328 	.word	0x20000328

08000a80 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b092      	sub	sp, #72	; 0x48
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	222c      	movs	r2, #44	; 0x2c
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f005 fa25 	bl	8005ef0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000aa6:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000aa8:	4a30      	ldr	r2, [pc, #192]	; (8000b6c <MX_TIM16_Init+0xec>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 537;
 8000aac:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000aae:	f240 2219 	movw	r2, #537	; 0x219
 8000ab2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256;
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ad4:	4824      	ldr	r0, [pc, #144]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000ad6:	f003 fd9b 	bl	8004610 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8000ae0:	f000 f982 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000ae4:	4820      	ldr	r0, [pc, #128]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000ae6:	f003 fdea 	bl	80046be <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8000af0:	f000 f97a 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af4:	2360      	movs	r3, #96	; 0x60
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afc:	2300      	movs	r3, #0
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b14:	2200      	movs	r2, #0
 8000b16:	4619      	mov	r1, r3
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000b1a:	f003 ff0f 	bl	800493c <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000b24:	f000 f960 	bl	8000de8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000b4c:	f004 fcdc 	bl	8005508 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000b56:	f000 f947 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000b5a:	4803      	ldr	r0, [pc, #12]	; (8000b68 <MX_TIM16_Init+0xe8>)
 8000b5c:	f000 fbfc 	bl	8001358 <HAL_TIM_MspPostInit>

}
 8000b60:	bf00      	nop
 8000b62:	3748      	adds	r7, #72	; 0x48
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000374 	.word	0x20000374
 8000b6c:	40014400 	.word	0x40014400

08000b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_USART1_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000bb4:	f004 fd20 	bl	80055f8 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f000 f913 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200003c0 	.word	0x200003c0
 8000bcc:	40013800 	.word	0x40013800

08000bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_USART2_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c14:	f004 fcf0 	bl	80055f8 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f8e3 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000444 	.word	0x20000444
 8000c2c:	40004400 	.word	0x40004400

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_DMA_Init+0x88>)
 8000c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <MX_DMA_Init+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6493      	str	r3, [r2, #72]	; 0x48
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_DMA_Init+0x88>)
 8000c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	200c      	movs	r0, #12
 8000c54:	f001 fd7b 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c58:	200c      	movs	r0, #12
 8000c5a:	f001 fd94 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	200d      	movs	r0, #13
 8000c64:	f001 fd73 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c68:	200d      	movs	r0, #13
 8000c6a:	f001 fd8c 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	200e      	movs	r0, #14
 8000c74:	f001 fd6b 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000c78:	200e      	movs	r0, #14
 8000c7a:	f001 fd84 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	200f      	movs	r0, #15
 8000c84:	f001 fd63 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c88:	200f      	movs	r0, #15
 8000c8a:	f001 fd7c 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2010      	movs	r0, #16
 8000c94:	f001 fd5b 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c98:	2010      	movs	r0, #16
 8000c9a:	f001 fd74 	bl	8002786 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2011      	movs	r0, #17
 8000ca4:	f001 fd53 	bl	800274e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ca8:	2011      	movs	r0, #17
 8000caa:	f001 fd6c 	bl	8002786 <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a42      	ldr	r2, [pc, #264]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b40      	ldr	r3, [pc, #256]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a3c      	ldr	r2, [pc, #240]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b37      	ldr	r3, [pc, #220]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	4a36      	ldr	r2, [pc, #216]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a30      	ldr	r2, [pc, #192]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b2e      	ldr	r3, [pc, #184]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 51cb 	mov.w	r1, #6496	; 0x1960
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f002 f90a 	bl	8002f54 <HAL_GPIO_WritePin>
                          |BQ_CE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f248 2121 	movw	r1, #33313	; 0x8221
 8000d46:	4827      	ldr	r0, [pc, #156]	; (8000de4 <MX_GPIO_Init+0x128>)
 8000d48:	f002 f904 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SIM_UART_RI_Pin */
  GPIO_InitStruct.Pin = SIM_UART_RI_Pin;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIM_UART_RI_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f001 ff7d 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_UART_DTR_Pin SIM_GPS_Pin RST2_Pin BQ_QON_Pin
                           BQ_CE_Pin */
  GPIO_InitStruct.Pin = SIM_UART_DTR_Pin|SIM_GPS_Pin|RST2_Pin|BQ_QON_Pin
 8000d66:	f44f 53cb 	mov.w	r3, #6496	; 0x1960
 8000d6a:	617b      	str	r3, [r7, #20]
                          |BQ_CE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f001 ff6d 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_PWR_Pin RST3_Pin LED1_Pin Main_SW_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin|RST3_Pin|LED1_Pin|Main_SW_Pin;
 8000d86:	f248 2321 	movw	r3, #33313	; 0x8221
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_GPIO_Init+0x128>)
 8000da0:	f001 ff5e 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_WDT_Pin BQ_INT_Pin */
  GPIO_InitStruct.Pin = SIM_WDT_Pin|BQ_INT_Pin;
 8000da4:	f241 0302 	movw	r3, #4098	; 0x1002
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	480a      	ldr	r0, [pc, #40]	; (8000de4 <MX_GPIO_Init+0x128>)
 8000dba:	f001 ff51 	bl	8002c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP7_Pin TP8_Pin */
  GPIO_InitStruct.Pin = TP7_Pin|TP8_Pin;
 8000dbe:	f240 4304 	movw	r3, #1028	; 0x404
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_GPIO_Init+0x128>)
 8000dd4:	f001 ff44 	bl	8002c60 <HAL_GPIO_Init>

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48000400 	.word	0x48000400

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_MspInit+0x44>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_MspInit+0x44>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6613      	str	r3, [r2, #96]	; 0x60
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_MspInit+0x44>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_MspInit+0x44>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x44>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x44>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0a0      	sub	sp, #128	; 0x80
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	225c      	movs	r2, #92	; 0x5c
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f005 f847 	bl	8005ef0 <memset>
  if(hadc->Instance==ADC1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_ADC_MspInit+0xc0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d143      	bne.n	8000ef4 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e70:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e76:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e80:	2308      	movs	r3, #8
 8000e82:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e84:	2307      	movs	r3, #7
 8000e86:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 f8ae 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000ea6:	f7ff ff9f 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_ADC_MspInit+0xc4>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_ADC_MspInit+0xc4>)
 8000eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_ADC_MspInit+0xc4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_ADC_MspInit+0xc4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_ADC_MspInit+0xc4>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_ADC_MspInit+0xc4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC_AUX_Pin;
 8000eda:	2302      	movs	r3, #2
 8000edc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ede:	230b      	movs	r3, #11
 8000ee0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(ADC_AUX_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 feb6 	bl	8002c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3780      	adds	r7, #128	; 0x80
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	50040000 	.word	0x50040000
 8000f00:	40021000 	.word	0x40021000

08000f04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_CRC_MspInit+0x38>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d10b      	bne.n	8000f2e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_CRC_MspInit+0x3c>)
 8000f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1a:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <HAL_CRC_MspInit+0x3c>)
 8000f1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f20:	6493      	str	r3, [r2, #72]	; 0x48
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_CRC_MspInit+0x3c>)
 8000f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023000 	.word	0x40023000
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0a6      	sub	sp, #152	; 0x98
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f60:	225c      	movs	r2, #92	; 0x5c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 ffc3 	bl	8005ef0 <memset>
  if(hi2c->Instance==I2C1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6b      	ldr	r2, [pc, #428]	; (800111c <HAL_I2C_MspInit+0x1d8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d13d      	bne.n	8000ff0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f74:	2340      	movs	r3, #64	; 0x40
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 f83b 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f8c:	f7ff ff2c 	bl	8000de8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	4b63      	ldr	r3, [pc, #396]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	4a62      	ldr	r2, [pc, #392]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9c:	4b60      	ldr	r3, [pc, #384]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f001 fe45 	bl	8002c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd6:	4b52      	ldr	r3, [pc, #328]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a51      	ldr	r2, [pc, #324]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 8000fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fee:	e15b      	b.n	80012a8 <HAL_I2C_MspInit+0x364>
  else if(hi2c->Instance==I2C2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a4b      	ldr	r2, [pc, #300]	; (8001124 <HAL_I2C_MspInit+0x1e0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	f040 80a0 	bne.w	800113c <HAL_I2C_MspInit+0x1f8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001000:	2300      	movs	r3, #0
 8001002:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fff7 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001014:	f7ff fee8 	bl	8000de8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	4a40      	ldr	r2, [pc, #256]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001030:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001038:	2312      	movs	r3, #18
 800103a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800104a:	2304      	movs	r3, #4
 800104c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001050:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001054:	4619      	mov	r1, r3
 8001056:	4834      	ldr	r0, [pc, #208]	; (8001128 <HAL_I2C_MspInit+0x1e4>)
 8001058:	f001 fe02 	bl	8002c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 8001062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001066:	6593      	str	r3, [r2, #88]	; 0x58
 8001068:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_I2C_MspInit+0x1dc>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	69bb      	ldr	r3, [r7, #24]
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 8001076:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <HAL_I2C_MspInit+0x1ec>)
 8001078:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 800107c:	2203      	movs	r2, #3
 800107e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80010aa:	4820      	ldr	r0, [pc, #128]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 80010ac:	f001 fc70 	bl	8002990 <HAL_DMA_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_I2C_MspInit+0x176>
      Error_Handler();
 80010b6:	f7ff fe97 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a1b      	ldr	r2, [pc, #108]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c
 80010c0:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_I2C_MspInit+0x1e8>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_I2C_MspInit+0x1f4>)
 80010ca:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_3;
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010ce:	2203      	movs	r2, #3
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010d4:	2210      	movs	r2, #16
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 80010fe:	f001 fc47 	bl	8002990 <HAL_DMA_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_I2C_MspInit+0x1c8>
      Error_Handler();
 8001108:	f7ff fe6e 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 8001110:	639a      	str	r2, [r3, #56]	; 0x38
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <HAL_I2C_MspInit+0x1f0>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001118:	e0c6      	b.n	80012a8 <HAL_I2C_MspInit+0x364>
 800111a:	bf00      	nop
 800111c:	40005400 	.word	0x40005400
 8001120:	40021000 	.word	0x40021000
 8001124:	40005800 	.word	0x40005800
 8001128:	48000400 	.word	0x48000400
 800112c:	200001ac 	.word	0x200001ac
 8001130:	40020058 	.word	0x40020058
 8001134:	200001f4 	.word	0x200001f4
 8001138:	40020044 	.word	0x40020044
  else if(hi2c->Instance==I2C3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a5b      	ldr	r2, [pc, #364]	; (80012b0 <HAL_I2C_MspInit+0x36c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	f040 80b0 	bne.w	80012a8 <HAL_I2C_MspInit+0x364>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800114e:	2300      	movs	r3, #0
 8001150:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	4618      	mov	r0, r3
 8001158:	f002 ff50 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_MspInit+0x222>
      Error_Handler();
 8001162:	f7ff fe41 	bl	8000de8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a52      	ldr	r2, [pc, #328]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119c:	2312      	movs	r3, #18
 800119e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ae:	2304      	movs	r3, #4
 80011b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f001 fd4f 	bl	8002c60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011c2:	2310      	movs	r3, #16
 80011c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c8:	2312      	movs	r3, #18
 80011ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011da:	2304      	movs	r3, #4
 80011dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011e4:	4619      	mov	r1, r3
 80011e6:	4834      	ldr	r0, [pc, #208]	; (80012b8 <HAL_I2C_MspInit+0x374>)
 80011e8:	f001 fd3a 	bl	8002c60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f0:	4a30      	ldr	r2, [pc, #192]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 80011f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011f6:	6593      	str	r3, [r2, #88]	; 0x58
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <HAL_I2C_MspInit+0x370>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c3_rx.Instance = DMA1_Channel3;
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_I2C_MspInit+0x378>)
 8001206:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <HAL_I2C_MspInit+0x37c>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_3;
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_I2C_MspInit+0x378>)
 800120c:	2203      	movs	r2, #3
 800120e:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_I2C_MspInit+0x378>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_I2C_MspInit+0x378>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_I2C_MspInit+0x378>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_I2C_MspInit+0x378>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_I2C_MspInit+0x378>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <HAL_I2C_MspInit+0x378>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_I2C_MspInit+0x378>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800123a:	4820      	ldr	r0, [pc, #128]	; (80012bc <HAL_I2C_MspInit+0x378>)
 800123c:	f001 fba8 	bl	8002990 <HAL_DMA_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2C_MspInit+0x306>
      Error_Handler();
 8001246:	f7ff fdcf 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <HAL_I2C_MspInit+0x378>)
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001250:	4a1a      	ldr	r2, [pc, #104]	; (80012bc <HAL_I2C_MspInit+0x378>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_i2c3_tx.Instance = DMA1_Channel2;
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_I2C_MspInit+0x384>)
 800125a:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_3;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 800125e:	2203      	movs	r2, #3
 8001260:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 8001264:	2210      	movs	r2, #16
 8001266:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 800128e:	f001 fb7f 	bl	8002990 <HAL_DMA_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_I2C_MspInit+0x358>
      Error_Handler();
 8001298:	f7ff fda6 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_I2C_MspInit+0x380>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012a8:	bf00      	nop
 80012aa:	3798      	adds	r7, #152	; 0x98
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40005c00 	.word	0x40005c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000400 	.word	0x48000400
 80012bc:	2000023c 	.word	0x2000023c
 80012c0:	40020030 	.word	0x40020030
 80012c4:	20000284 	.word	0x20000284
 80012c8:	4002001c 	.word	0x4002001c

080012cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_TIM_Base_MspInit+0x80>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d10c      	bne.n	80012f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 80012e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012e8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80012f6:	e022      	b.n	800133e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001300:	d10c      	bne.n	800131c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6593      	str	r3, [r2, #88]	; 0x58
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
}
 800131a:	e010      	b.n	800133e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_TIM_Base_MspInit+0x88>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10b      	bne.n	800133e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	6613      	str	r3, [r2, #96]	; 0x60
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_TIM_Base_MspInit+0x84>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
}
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40012c00 	.word	0x40012c00
 8001350:	40021000 	.word	0x40021000
 8001354:	40014400 	.word	0x40014400

08001358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_TIM_MspPostInit+0x64>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d11c      	bne.n	80013b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_TIM_MspPostInit+0x68>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_TIM_MspPostInit+0x68>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_TIM_MspPostInit+0x68>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = LED2_Pin;
 8001392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80013a4:	230e      	movs	r3, #14
 80013a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	4619      	mov	r1, r3
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_TIM_MspPostInit+0x6c>)
 80013b0:	f001 fc56 	bl	8002c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40014400 	.word	0x40014400
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000400 	.word	0x48000400

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b0a2      	sub	sp, #136	; 0x88
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	225c      	movs	r2, #92	; 0x5c
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 fd81 	bl	8005ef0 <memset>
  if(huart->Instance==USART1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a68      	ldr	r2, [pc, #416]	; (8001594 <HAL_UART_MspInit+0x1cc>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d138      	bne.n	800146a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80013fc:	2301      	movs	r3, #1
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fdf9 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001410:	f7ff fcea 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001414:	4b60      	ldr	r3, [pc, #384]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 8001416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001418:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 800141a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141e:	6613      	str	r3, [r2, #96]	; 0x60
 8001420:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b5a      	ldr	r3, [pc, #360]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	4a59      	ldr	r2, [pc, #356]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001438:	4b57      	ldr	r3, [pc, #348]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001444:	23c0      	movs	r3, #192	; 0xc0
 8001446:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001456:	2307      	movs	r3, #7
 8001458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001460:	4619      	mov	r1, r3
 8001462:	484e      	ldr	r0, [pc, #312]	; (800159c <HAL_UART_MspInit+0x1d4>)
 8001464:	f001 fbfc 	bl	8002c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001468:	e090      	b.n	800158c <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a4c      	ldr	r2, [pc, #304]	; (80015a0 <HAL_UART_MspInit+0x1d8>)
 8001470:	4293      	cmp	r3, r2
 8001472:	f040 808b 	bne.w	800158c <HAL_UART_MspInit+0x1c4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800147a:	2304      	movs	r3, #4
 800147c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4618      	mov	r0, r3
 8001484:	f002 fdba 	bl	8003ffc <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_UART_MspInit+0xca>
      Error_Handler();
 800148e:	f7ff fcab 	bl	8000de8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	4a40      	ldr	r2, [pc, #256]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	6593      	str	r3, [r2, #88]	; 0x58
 800149e:	4b3e      	ldr	r3, [pc, #248]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a3a      	ldr	r2, [pc, #232]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <HAL_UART_MspInit+0x1d0>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SIM_UART_TX_Pin|SIM_UART_RX_Pin;
 80014c2:	230c      	movs	r3, #12
 80014c4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014d4:	2307      	movs	r3, #7
 80014d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f001 fbbc 	bl	8002c60 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 80014ea:	4a2f      	ldr	r2, [pc, #188]	; (80015a8 <HAL_UART_MspInit+0x1e0>)
 80014ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 80014f0:	2202      	movs	r2, #2
 80014f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 8001508:	2200      	movs	r2, #0
 800150a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800151e:	4821      	ldr	r0, [pc, #132]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 8001520:	f001 fa36 	bl	8002990 <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_UART_MspInit+0x166>
      Error_Handler();
 800152a:	f7ff fc5d 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 8001532:	671a      	str	r2, [r3, #112]	; 0x70
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_UART_MspInit+0x1dc>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 800153c:	4a1c      	ldr	r2, [pc, #112]	; (80015b0 <HAL_UART_MspInit+0x1e8>)
 800153e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 8001542:	2202      	movs	r2, #2
 8001544:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 8001548:	2210      	movs	r2, #16
 800154a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 8001572:	f001 fa0d 	bl	8002990 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 800157c:	f7ff fc34 	bl	8000de8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 8001584:	66da      	str	r2, [r3, #108]	; 0x6c
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <HAL_UART_MspInit+0x1e4>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800158c:	bf00      	nop
 800158e:	3788      	adds	r7, #136	; 0x88
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40013800 	.word	0x40013800
 8001598:	40021000 	.word	0x40021000
 800159c:	48000400 	.word	0x48000400
 80015a0:	40004400 	.word	0x40004400
 80015a4:	200004c8 	.word	0x200004c8
 80015a8:	4002006c 	.word	0x4002006c
 80015ac:	20000510 	.word	0x20000510
 80015b0:	40020080 	.word	0x40020080

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 f8f6 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Channel2_IRQHandler+0x10>)
 800161e:	f001 fa6f 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000284 	.word	0x20000284

0800162c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA1_Channel3_IRQHandler+0x10>)
 8001632:	f001 fa65 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000023c 	.word	0x2000023c

08001640 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <DMA1_Channel4_IRQHandler+0x10>)
 8001646:	f001 fa5b 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200001f4 	.word	0x200001f4

08001654 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA1_Channel5_IRQHandler+0x10>)
 800165a:	f001 fa51 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200001ac 	.word	0x200001ac

08001668 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA1_Channel6_IRQHandler+0x10>)
 800166e:	f001 fa47 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200004c8 	.word	0x200004c8

0800167c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Channel7_IRQHandler+0x10>)
 8001682:	f001 fa3d 	bl	8002b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000510 	.word	0x20000510

08001690 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <led2Sweep>:
{
    setPwmLed(bri_corr[bri], TIM_CHANNEL_1);
}

void led2Sweep(uint16_t spd, uint16_t cnt, uint16_t wait)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
 80016be:	460b      	mov	r3, r1
 80016c0:	80bb      	strh	r3, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	807b      	strh	r3, [r7, #2]
    led2_tim = spd;
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <led2Sweep+0x38>)
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	8013      	strh	r3, [r2, #0]
    led2_cycles = cnt | (wait<<16);
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21b      	sxth	r3, r3
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <led2Sweep+0x3c>)
 80016de:	801a      	strh	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000558 	.word	0x20000558
 80016f0:	2000055a 	.word	0x2000055a

080016f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f8:	f7ff ffca 	bl	8001690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <LoopForever+0x6>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	; (8001734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <LoopForever+0xe>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	; (8001740 <LoopForever+0x16>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001722:	f004 fbc1 	bl	8005ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001726:	f7fe fed3 	bl	80004d0 <main>

0800172a <LoopForever>:

LoopForever:
    b LoopForever
 800172a:	e7fe      	b.n	800172a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800172c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001738:	08005f70 	.word	0x08005f70
  ldr r2, =_sbss
 800173c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001740:	20000560 	.word	0x20000560

08001744 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC1_IRQHandler>

08001746 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 fff1 	bl	8002738 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001756:	200f      	movs	r0, #15
 8001758:	f000 f80e 	bl	8001778 <HAL_InitTick>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d002      	beq.n	8001768 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	71fb      	strb	r3, [r7, #7]
 8001766:	e001      	b.n	800176c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001768:	f7ff fb44 	bl	8000df4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_InitTick+0x6c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d023      	beq.n	80017d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_InitTick+0x70>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_InitTick+0x6c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fffd 	bl	80027a2 <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d809      	bhi.n	80017c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 ffc7 	bl	800274e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c0:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_InitTick+0x74>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e004      	b.n	80017d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e001      	b.n	80017d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	2000055c 	.word	0x2000055c

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	2000055c 	.word	0x2000055c

08001830 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3360      	adds	r3, #96	; 0x60
 80018aa:	461a      	mov	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <LL_ADC_SetOffset+0x44>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	4313      	orrs	r3, r2
 80018c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	03fff000 	.word	0x03fff000

080018e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3360      	adds	r3, #96	; 0x60
 80018ee:	461a      	mov	r2, r3
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3360      	adds	r3, #96	; 0x60
 800191c:	461a      	mov	r2, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001936:	bf00      	nop
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3330      	adds	r3, #48	; 0x30
 8001952:	461a      	mov	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	4413      	add	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	211f      	movs	r1, #31
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	401a      	ands	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 011f 	and.w	r1, r3, #31
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	431a      	orrs	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800199a:	b480      	push	{r7}
 800199c:	b087      	sub	sp, #28
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3314      	adds	r3, #20
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0e5b      	lsrs	r3, r3, #25
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	0d1b      	lsrs	r3, r3, #20
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	2107      	movs	r1, #7
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	0d1b      	lsrs	r3, r3, #20
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	431a      	orrs	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019e4:	bf00      	nop
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0318 	and.w	r3, r3, #24
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a14:	40d9      	lsrs	r1, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	400b      	ands	r3, r1
 8001a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	0007ffff 	.word	0x0007ffff

08001a38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6093      	str	r3, [r2, #8]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ac0:	d101      	bne.n	8001ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_IsEnabled+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_IsEnabled+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d101      	bne.n	8001b38 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e12c      	b.n	8001dbc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff f963 	bl	8000e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff67 	bl	8001a5c <LL_ADC_IsDeepPowerDownEnabled>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d004      	beq.n	8001b9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff4d 	bl	8001a38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff82 	bl	8001aac <LL_ADC_IsInternalRegulatorEnabled>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff66 	bl	8001a84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb8:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <HAL_ADC_Init+0x27c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	4a82      	ldr	r2, [pc, #520]	; (8001dc8 <HAL_ADC_Init+0x280>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bcc:	e002      	b.n	8001bd4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f9      	bne.n	8001bce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff64 	bl	8001aac <LL_ADC_IsInternalRegulatorEnabled>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff75 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001c10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 80c5 	bne.w	8001daa <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80c1 	bne.w	8001daa <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c30:	f043 0202 	orr.w	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff49 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10b      	bne.n	8001c60 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c48:	4860      	ldr	r0, [pc, #384]	; (8001dcc <HAL_ADC_Init+0x284>)
 8001c4a:	f7ff ff43 	bl	8001ad4 <LL_ADC_IsEnabled>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	485d      	ldr	r0, [pc, #372]	; (8001dd0 <HAL_ADC_Init+0x288>)
 8001c5c:	f7ff fde8 	bl	8001830 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	7e5b      	ldrb	r3, [r3, #25]
 8001c64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d106      	bne.n	8001c9c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	3b01      	subs	r3, #1
 8001c94:	045b      	lsls	r3, r3, #17
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	4b45      	ldr	r3, [pc, #276]	; (8001dd4 <HAL_ADC_Init+0x28c>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	69b9      	ldr	r1, [r7, #24]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff12 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001cd6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff1f 	bl	8001b20 <LL_ADC_INJ_IsConversionOngoing>
 8001ce2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d13d      	bne.n	8001d66 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d13a      	bne.n	8001d66 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cf4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cfc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d0c:	f023 0302 	bic.w	r3, r3, #2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	69b9      	ldr	r1, [r7, #24]
 8001d16:	430b      	orrs	r3, r1
 8001d18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d118      	bne.n	8001d56 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d2e:	f023 0304 	bic.w	r3, r3, #4
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d46:	430a      	orrs	r2, r1
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	e007      	b.n	8001d66 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10c      	bne.n	8001d88 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f023 010f 	bic.w	r1, r3, #15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	1e5a      	subs	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
 8001d86:	e007      	b.n	8001d98 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020f 	bic.w	r2, r2, #15
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f023 0303 	bic.w	r3, r3, #3
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
 8001da8:	e007      	b.n	8001dba <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f043 0210 	orr.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3720      	adds	r7, #32
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	053e2d63 	.word	0x053e2d63
 8001dcc:	50040000 	.word	0x50040000
 8001dd0:	50040300 	.word	0x50040300
 8001dd4:	fff0c007 	.word	0xfff0c007

08001dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0b6      	sub	sp, #216	; 0xd8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x22>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e3b9      	b.n	800256e <HAL_ADC_ConfigChannel+0x796>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fe77 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 839e 	bne.w	8002550 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d824      	bhi.n	8001e66 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	3b02      	subs	r3, #2
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d81b      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0x86>
 8001e26:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <HAL_ADC_ConfigChannel+0x54>)
 8001e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2c:	08001e3d 	.word	0x08001e3d
 8001e30:	08001e45 	.word	0x08001e45
 8001e34:	08001e4d 	.word	0x08001e4d
 8001e38:	08001e55 	.word	0x08001e55
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	220c      	movs	r2, #12
 8001e40:	605a      	str	r2, [r3, #4]
          break;
 8001e42:	e011      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2212      	movs	r2, #18
 8001e48:	605a      	str	r2, [r3, #4]
          break;
 8001e4a:	e00d      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2218      	movs	r2, #24
 8001e50:	605a      	str	r2, [r3, #4]
          break;
 8001e52:	e009      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5a:	605a      	str	r2, [r3, #4]
          break;
 8001e5c:	e004      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2206      	movs	r2, #6
 8001e62:	605a      	str	r2, [r3, #4]
          break;
 8001e64:	e000      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001e66:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	f7ff fd64 	bl	8001942 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe3b 	bl	8001afa <LL_ADC_REG_IsConversionOngoing>
 8001e84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fe47 	bl	8001b20 <LL_ADC_INJ_IsConversionOngoing>
 8001e92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 81a6 	bne.w	80021ec <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 81a1 	bne.w	80021ec <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f7ff fd6f 	bl	800199a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	08db      	lsrs	r3, r3, #3
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d00a      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6919      	ldr	r1, [r3, #16]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001eee:	f7ff fcd3 	bl	8001898 <LL_ADC_SetOffset>
 8001ef2:	e17b      	b.n	80021ec <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fcf0 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x148>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fce5 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 021f 	and.w	r2, r3, #31
 8001f1e:	e01e      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x186>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fcda 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e004      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x19e>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	e018      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x1d0>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e004      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fca9 	bl	800190c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fc8d 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x20e>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fc82 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	e01e      	b.n	8002024 <HAL_ADC_ConfigChannel+0x24c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fc77 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800200c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_ConfigChannel+0x264>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e9b      	lsrs	r3, r3, #26
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	e018      	b.n	800206e <HAL_ADC_ConfigChannel+0x296>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e004      	b.n	800206e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800206e:	429a      	cmp	r2, r3
 8002070:	d106      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	2101      	movs	r1, #1
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fc46 	bl	800190c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2102      	movs	r1, #2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fc2a 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x2d4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2102      	movs	r1, #2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fc1f 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 80020a2:	4603      	mov	r3, r0
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	e01e      	b.n	80020ea <HAL_ADC_ConfigChannel+0x312>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2102      	movs	r1, #2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fc14 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e004      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80020de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x32a>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	e016      	b.n	8002130 <HAL_ADC_ConfigChannel+0x358>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800211a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002122:	2320      	movs	r3, #32
 8002124:	e004      	b.n	8002130 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2200      	movs	r2, #0
 800213a:	2102      	movs	r1, #2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fbe5 	bl	800190c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2103      	movs	r1, #3
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fbc9 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x396>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2103      	movs	r1, #3
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fbbe 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	e017      	b.n	800219e <HAL_ADC_ConfigChannel+0x3c6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2103      	movs	r1, #3
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fbb3 	bl	80018e0 <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002188:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800218a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002190:	2320      	movs	r3, #32
 8002192:	e003      	b.n	800219c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x3de>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0e9b      	lsrs	r3, r3, #26
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	e011      	b.n	80021da <HAL_ADC_ConfigChannel+0x402>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80021ce:	2320      	movs	r3, #32
 80021d0:	e003      	b.n	80021da <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80021d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021da:	429a      	cmp	r2, r3
 80021dc:	d106      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	2103      	movs	r1, #3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fb90 	bl	800190c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fc6f 	bl	8001ad4 <LL_ADC_IsEnabled>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 813f 	bne.w	800247c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	461a      	mov	r2, r3
 800220c:	f7ff fbf0 	bl	80019f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4a8e      	ldr	r2, [pc, #568]	; (8002450 <HAL_ADC_ConfigChannel+0x678>)
 8002216:	4293      	cmp	r3, r2
 8002218:	f040 8130 	bne.w	800247c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x46c>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	3301      	adds	r3, #1
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2b09      	cmp	r3, #9
 800223a:	bf94      	ite	ls
 800223c:	2301      	movls	r3, #1
 800223e:	2300      	movhi	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e019      	b.n	8002278 <HAL_ADC_ConfigChannel+0x4a0>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002254:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800225c:	2320      	movs	r3, #32
 800225e:	e003      	b.n	8002268 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2b09      	cmp	r3, #9
 8002270:	bf94      	ite	ls
 8002272:	2301      	movls	r3, #1
 8002274:	2300      	movhi	r3, #0
 8002276:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002278:	2b00      	cmp	r3, #0
 800227a:	d079      	beq.n	8002370 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d107      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x4c0>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	3301      	adds	r3, #1
 8002290:	069b      	lsls	r3, r3, #26
 8002292:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002296:	e015      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x4ec>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80022b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	069b      	lsls	r3, r3, #26
 80022c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x50c>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0e9b      	lsrs	r3, r3, #26
 80022d6:	3301      	adds	r3, #1
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f303 	lsl.w	r3, r1, r3
 80022e2:	e017      	b.n	8002314 <HAL_ADC_ConfigChannel+0x53c>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80022f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80022f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80022fc:	2320      	movs	r3, #32
 80022fe:	e003      	b.n	8002308 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	2101      	movs	r1, #1
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	ea42 0103 	orr.w	r1, r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_ADC_ConfigChannel+0x562>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	3301      	adds	r3, #1
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	051b      	lsls	r3, r3, #20
 8002338:	e018      	b.n	800236c <HAL_ADC_ConfigChannel+0x594>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e003      	b.n	800235e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236c:	430b      	orrs	r3, r1
 800236e:	e080      	b.n	8002472 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002378:	2b00      	cmp	r3, #0
 800237a:	d107      	bne.n	800238c <HAL_ADC_ConfigChannel+0x5b4>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	3301      	adds	r3, #1
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238a:	e015      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x5e0>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	069b      	lsls	r3, r3, #26
 80023b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x600>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0e9b      	lsrs	r3, r3, #26
 80023ca:	3301      	adds	r3, #1
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	e017      	b.n	8002408 <HAL_ADC_ConfigChannel+0x630>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	61fb      	str	r3, [r7, #28]
  return result;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80023f0:	2320      	movs	r3, #32
 80023f2:	e003      	b.n	80023fc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	ea42 0103 	orr.w	r1, r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10d      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x65c>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	3301      	adds	r3, #1
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	3b1e      	subs	r3, #30
 800242c:	051b      	lsls	r3, r3, #20
 800242e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002432:	e01d      	b.n	8002470 <HAL_ADC_ConfigChannel+0x698>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	613b      	str	r3, [r7, #16]
  return result;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d103      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e005      	b.n	800245c <HAL_ADC_ConfigChannel+0x684>
 8002450:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	3301      	adds	r3, #1
 800245e:	f003 021f 	and.w	r2, r3, #31
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	3b1e      	subs	r3, #30
 800246a:	051b      	lsls	r3, r3, #20
 800246c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	430b      	orrs	r3, r1
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	6892      	ldr	r2, [r2, #8]
 8002476:	4619      	mov	r1, r3
 8002478:	f7ff fa8f 	bl	800199a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_ADC_ConfigChannel+0x7a0>)
 8002482:	4013      	ands	r3, r2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d06c      	beq.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002488:	483c      	ldr	r0, [pc, #240]	; (800257c <HAL_ADC_ConfigChannel+0x7a4>)
 800248a:	f7ff f9f7 	bl	800187c <LL_ADC_GetCommonPathInternalCh>
 800248e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_ADC_ConfigChannel+0x7a8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d127      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800249c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d121      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a35      	ldr	r2, [pc, #212]	; (8002584 <HAL_ADC_ConfigChannel+0x7ac>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d157      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024ba:	4619      	mov	r1, r3
 80024bc:	482f      	ldr	r0, [pc, #188]	; (800257c <HAL_ADC_ConfigChannel+0x7a4>)
 80024be:	f7ff f9ca 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c2:	4b31      	ldr	r3, [pc, #196]	; (8002588 <HAL_ADC_ConfigChannel+0x7b0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_ADC_ConfigChannel+0x7b4>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	099b      	lsrs	r3, r3, #6
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	4613      	mov	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024dc:	e002      	b.n	80024e4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f9      	bne.n	80024de <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ea:	e03a      	b.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a27      	ldr	r2, [pc, #156]	; (8002590 <HAL_ADC_ConfigChannel+0x7b8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d113      	bne.n	800251e <HAL_ADC_ConfigChannel+0x746>
 80024f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_ADC_ConfigChannel+0x7ac>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d12a      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002514:	4619      	mov	r1, r3
 8002516:	4819      	ldr	r0, [pc, #100]	; (800257c <HAL_ADC_ConfigChannel+0x7a4>)
 8002518:	f7ff f99d 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800251c:	e021      	b.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_ADC_ConfigChannel+0x7bc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d11c      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800252c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d116      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a12      	ldr	r2, [pc, #72]	; (8002584 <HAL_ADC_ConfigChannel+0x7ac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d111      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800253e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002542:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002546:	4619      	mov	r1, r3
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <HAL_ADC_ConfigChannel+0x7a4>)
 800254a:	f7ff f984 	bl	8001856 <LL_ADC_SetCommonPathInternalCh>
 800254e:	e008      	b.n	8002562 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800256a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800256e:	4618      	mov	r0, r3
 8002570:	37d8      	adds	r7, #216	; 0xd8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	80080000 	.word	0x80080000
 800257c:	50040300 	.word	0x50040300
 8002580:	c7520000 	.word	0xc7520000
 8002584:	50040000 	.word	0x50040000
 8002588:	20000000 	.word	0x20000000
 800258c:	053e2d63 	.word	0x053e2d63
 8002590:	cb840000 	.word	0xcb840000
 8002594:	80000001 	.word	0x80000001

08002598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b4:	4013      	ands	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ca:	4a04      	ldr	r2, [pc, #16]	; (80025dc <__NVIC_SetPriorityGrouping+0x44>)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	60d3      	str	r3, [r2, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <__NVIC_GetPriorityGrouping+0x18>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	f003 0307 	and.w	r3, r3, #7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	2b00      	cmp	r3, #0
 800260c:	db0b      	blt.n	8002626 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4907      	ldr	r1, [pc, #28]	; (8002634 <__NVIC_EnableIRQ+0x38>)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	2001      	movs	r0, #1
 800261e:	fa00 f202 	lsl.w	r2, r0, r2
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000e100 	.word	0xe000e100

08002638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	db0a      	blt.n	8002662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	490c      	ldr	r1, [pc, #48]	; (8002684 <__NVIC_SetPriority+0x4c>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	440b      	add	r3, r1
 800265c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002660:	e00a      	b.n	8002678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <__NVIC_SetPriority+0x50>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3b04      	subs	r3, #4
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	440b      	add	r3, r1
 8002676:	761a      	strb	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	; 0x24
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f1c3 0307 	rsb	r3, r3, #7
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	bf28      	it	cs
 80026aa:	2304      	movcs	r3, #4
 80026ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	d902      	bls.n	80026bc <NVIC_EncodePriority+0x30>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3b03      	subs	r3, #3
 80026ba:	e000      	b.n	80026be <NVIC_EncodePriority+0x32>
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c0:	f04f 32ff 	mov.w	r2, #4294967295
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	401a      	ands	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43d9      	mvns	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	4313      	orrs	r3, r2
         );
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002704:	d301      	bcc.n	800270a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002706:	2301      	movs	r3, #1
 8002708:	e00f      	b.n	800272a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270a:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <SysTick_Config+0x40>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002712:	210f      	movs	r1, #15
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	f7ff ff8e 	bl	8002638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <SysTick_Config+0x40>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002722:	4b04      	ldr	r3, [pc, #16]	; (8002734 <SysTick_Config+0x40>)
 8002724:	2207      	movs	r2, #7
 8002726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000e010 	.word	0xe000e010

08002738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff29 	bl	8002598 <__NVIC_SetPriorityGrouping>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002760:	f7ff ff3e 	bl	80025e0 <__NVIC_GetPriorityGrouping>
 8002764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6978      	ldr	r0, [r7, #20]
 800276c:	f7ff ff8e 	bl	800268c <NVIC_EncodePriority>
 8002770:	4602      	mov	r2, r0
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff5d 	bl	8002638 <__NVIC_SetPriority>
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff31 	bl	80025fc <__NVIC_EnableIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffa2 	bl	80026f4 <SysTick_Config>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e054      	b.n	8002878 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7f5b      	ldrb	r3, [r3, #29]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fb90 	bl	8000f04 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	791b      	ldrb	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a22      	ldr	r2, [pc, #136]	; (8002880 <HAL_CRC_Init+0xc4>)
 80027f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0218 	bic.w	r2, r2, #24
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	e00c      	b.n	8002826 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6899      	ldr	r1, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	461a      	mov	r2, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f834 	bl	8002884 <HAL_CRCEx_Polynomial_Set>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e028      	b.n	8002878 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	795b      	ldrb	r3, [r3, #5]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f04f 32ff 	mov.w	r2, #4294967295
 8002836:	611a      	str	r2, [r3, #16]
 8002838:	e004      	b.n	8002844 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6912      	ldr	r2, [r2, #16]
 8002842:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	04c11db7 	.word	0x04c11db7

08002884 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002894:	231f      	movs	r3, #31
 8002896:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002898:	bf00      	nop
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1e5a      	subs	r2, r3, #1
 800289e:	613a      	str	r2, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_CRCEx_Polynomial_Set+0x34>
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b18      	cmp	r3, #24
 80028bc:	d846      	bhi.n	800294c <HAL_CRCEx_Polynomial_Set+0xc8>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	08002953 	.word	0x08002953
 80028c8:	0800294d 	.word	0x0800294d
 80028cc:	0800294d 	.word	0x0800294d
 80028d0:	0800294d 	.word	0x0800294d
 80028d4:	0800294d 	.word	0x0800294d
 80028d8:	0800294d 	.word	0x0800294d
 80028dc:	0800294d 	.word	0x0800294d
 80028e0:	0800294d 	.word	0x0800294d
 80028e4:	08002941 	.word	0x08002941
 80028e8:	0800294d 	.word	0x0800294d
 80028ec:	0800294d 	.word	0x0800294d
 80028f0:	0800294d 	.word	0x0800294d
 80028f4:	0800294d 	.word	0x0800294d
 80028f8:	0800294d 	.word	0x0800294d
 80028fc:	0800294d 	.word	0x0800294d
 8002900:	0800294d 	.word	0x0800294d
 8002904:	08002935 	.word	0x08002935
 8002908:	0800294d 	.word	0x0800294d
 800290c:	0800294d 	.word	0x0800294d
 8002910:	0800294d 	.word	0x0800294d
 8002914:	0800294d 	.word	0x0800294d
 8002918:	0800294d 	.word	0x0800294d
 800291c:	0800294d 	.word	0x0800294d
 8002920:	0800294d 	.word	0x0800294d
 8002924:	08002929 	.word	0x08002929
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d913      	bls.n	8002956 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002932:	e010      	b.n	8002956 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b07      	cmp	r3, #7
 8002938:	d90f      	bls.n	800295a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800293e:	e00c      	b.n	800295a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	2b0f      	cmp	r3, #15
 8002944:	d90b      	bls.n	800295e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800294a:	e008      	b.n	800295e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
      break;
 8002950:	e006      	b.n	8002960 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002952:	bf00      	nop
 8002954:	e004      	b.n	8002960 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002956:	bf00      	nop
 8002958:	e002      	b.n	8002960 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800295a:	bf00      	nop
 800295c:	e000      	b.n	8002960 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800295e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 0118 	bic.w	r1, r3, #24
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
}
 8002984:	4618      	mov	r0, r3
 8002986:	371c      	adds	r7, #28
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e098      	b.n	8002ad4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b4d      	ldr	r3, [pc, #308]	; (8002ae0 <HAL_DMA_Init+0x150>)
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d80f      	bhi.n	80029ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <HAL_DMA_Init+0x154>)
 80029b6:	4413      	add	r3, r2
 80029b8:	4a4b      	ldr	r2, [pc, #300]	; (8002ae8 <HAL_DMA_Init+0x158>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	009a      	lsls	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a48      	ldr	r2, [pc, #288]	; (8002aec <HAL_DMA_Init+0x15c>)
 80029ca:	641a      	str	r2, [r3, #64]	; 0x40
 80029cc:	e00e      	b.n	80029ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_DMA_Init+0x160>)
 80029d6:	4413      	add	r3, r2
 80029d8:	4a43      	ldr	r2, [pc, #268]	; (8002ae8 <HAL_DMA_Init+0x158>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	009a      	lsls	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a42      	ldr	r2, [pc, #264]	; (8002af4 <HAL_DMA_Init+0x164>)
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a46:	d039      	beq.n	8002abc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_DMA_Init+0x15c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d11a      	bne.n	8002a88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a52:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_DMA_Init+0x168>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f003 031c 	and.w	r3, r3, #28
 8002a5e:	210f      	movs	r1, #15
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4924      	ldr	r1, [pc, #144]	; (8002af8 <HAL_DMA_Init+0x168>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_DMA_Init+0x168>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f003 031c 	and.w	r3, r3, #28
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	491d      	ldr	r1, [pc, #116]	; (8002af8 <HAL_DMA_Init+0x168>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
 8002a86:	e019      	b.n	8002abc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <HAL_DMA_Init+0x16c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	f003 031c 	and.w	r3, r3, #28
 8002a94:	210f      	movs	r1, #15
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	4917      	ldr	r1, [pc, #92]	; (8002afc <HAL_DMA_Init+0x16c>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <HAL_DMA_Init+0x16c>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f003 031c 	and.w	r3, r3, #28
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	4911      	ldr	r1, [pc, #68]	; (8002afc <HAL_DMA_Init+0x16c>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40020407 	.word	0x40020407
 8002ae4:	bffdfff8 	.word	0xbffdfff8
 8002ae8:	cccccccd 	.word	0xcccccccd
 8002aec:	40020000 	.word	0x40020000
 8002af0:	bffdfbf8 	.word	0xbffdfbf8
 8002af4:	40020400 	.word	0x40020400
 8002af8:	400200a8 	.word	0x400200a8
 8002afc:	400204a8 	.word	0x400204a8

08002b00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	f003 031c 	and.w	r3, r3, #28
 8002b20:	2204      	movs	r2, #4
 8002b22:	409a      	lsls	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d026      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x7a>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d021      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f003 021c 	and.w	r2, r3, #28
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2104      	movs	r1, #4
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d071      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002b78:	e06c      	b.n	8002c54 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f003 031c 	and.w	r3, r3, #28
 8002b82:	2202      	movs	r2, #2
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d02e      	beq.n	8002bec <HAL_DMA_IRQHandler+0xec>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d029      	beq.n	8002bec <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 020a 	bic.w	r2, r2, #10
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f003 021c 	and.w	r2, r3, #28
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2102      	movs	r1, #2
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d038      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bea:	e033      	b.n	8002c54 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f003 031c 	and.w	r3, r3, #28
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d02a      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x156>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d025      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 020e 	bic.w	r2, r2, #14
 8002c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f003 021c 	and.w	r2, r3, #28
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2101      	movs	r1, #1
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
}
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6e:	e154      	b.n	8002f1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2101      	movs	r1, #1
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8146 	beq.w	8002f14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d005      	beq.n	8002ca0 <HAL_GPIO_Init+0x40>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d130      	bne.n	8002d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	f003 0201 	and.w	r2, r3, #1
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d017      	beq.n	8002d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	2203      	movs	r2, #3
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d123      	bne.n	8002d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	08da      	lsrs	r2, r3, #3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3208      	adds	r2, #8
 8002d8c:	6939      	ldr	r1, [r7, #16]
 8002d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0203 	and.w	r2, r3, #3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80a0 	beq.w	8002f14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd4:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <HAL_GPIO_Init+0x2d8>)
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	4a57      	ldr	r2, [pc, #348]	; (8002f38 <HAL_GPIO_Init+0x2d8>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6613      	str	r3, [r2, #96]	; 0x60
 8002de0:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <HAL_GPIO_Init+0x2d8>)
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dec:	4a53      	ldr	r2, [pc, #332]	; (8002f3c <HAL_GPIO_Init+0x2dc>)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	220f      	movs	r2, #15
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e16:	d019      	beq.n	8002e4c <HAL_GPIO_Init+0x1ec>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a49      	ldr	r2, [pc, #292]	; (8002f40 <HAL_GPIO_Init+0x2e0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <HAL_GPIO_Init+0x1e8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a48      	ldr	r2, [pc, #288]	; (8002f44 <HAL_GPIO_Init+0x2e4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00d      	beq.n	8002e44 <HAL_GPIO_Init+0x1e4>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a47      	ldr	r2, [pc, #284]	; (8002f48 <HAL_GPIO_Init+0x2e8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <HAL_GPIO_Init+0x1e0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a46      	ldr	r2, [pc, #280]	; (8002f4c <HAL_GPIO_Init+0x2ec>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_GPIO_Init+0x1dc>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e008      	b.n	8002e4e <HAL_GPIO_Init+0x1ee>
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	e006      	b.n	8002e4e <HAL_GPIO_Init+0x1ee>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e004      	b.n	8002e4e <HAL_GPIO_Init+0x1ee>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e002      	b.n	8002e4e <HAL_GPIO_Init+0x1ee>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_GPIO_Init+0x1ee>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	f002 0203 	and.w	r2, r2, #3
 8002e54:	0092      	lsls	r2, r2, #2
 8002e56:	4093      	lsls	r3, r2
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e5e:	4937      	ldr	r1, [pc, #220]	; (8002f3c <HAL_GPIO_Init+0x2dc>)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	3302      	adds	r3, #2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e6c:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e90:	4a2f      	ldr	r2, [pc, #188]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eba:	4a25      	ldr	r2, [pc, #148]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ec0:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eea:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f0e:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <HAL_GPIO_Init+0x2f0>)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f47f aea3 	bne.w	8002c70 <HAL_GPIO_Init+0x10>
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40010000 	.word	0x40010000
 8002f40:	48000400 	.word	0x48000400
 8002f44:	48000800 	.word	0x48000800
 8002f48:	48000c00 	.word	0x48000c00
 8002f4c:	48001000 	.word	0x48001000
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f70:	e002      	b.n	8002f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	43d9      	mvns	r1, r3
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e081      	b.n	80030ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd ffb0 	bl	8000f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003008:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003018:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	e006      	b.n	8003040 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800303e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d104      	bne.n	8003052 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003050:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003064:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003074:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69d9      	ldr	r1, [r3, #28]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d138      	bne.n	800315e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e032      	b.n	8003160 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2224      	movs	r2, #36	; 0x24
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003128:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b20      	cmp	r3, #32
 8003180:	d139      	bne.n	80031f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800318c:	2302      	movs	r3, #2
 800318e:	e033      	b.n	80031f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
  }
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e041      	b.n	800329a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800321e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f245 5255 	movw	r2, #21845	; 0x5555
 8003228:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6852      	ldr	r2, [r2, #4]
 8003232:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6892      	ldr	r2, [r2, #8]
 800323c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800323e:	f7fe faeb 	bl	8001818 <HAL_GetTick>
 8003242:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003244:	e00f      	b.n	8003266 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003246:	f7fe fae7 	bl	8001818 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b31      	cmp	r3, #49	; 0x31
 8003252:	d908      	bls.n	8003266 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e019      	b.n	800329a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e8      	bne.n	8003246 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	429a      	cmp	r2, r3
 8003280:	d005      	beq.n	800328e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68d2      	ldr	r2, [r2, #12]
 800328a:	611a      	str	r2, [r3, #16]
 800328c:	e004      	b.n	8003298 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80032b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <HAL_PWREx_GetVoltageRange+0x18>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40007000 	.word	0x40007000

080032e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ee:	d130      	bne.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fc:	d038      	beq.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003306:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003308:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800330c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2232      	movs	r2, #50	; 0x32
 8003314:	fb02 f303 	mul.w	r3, r2, r3
 8003318:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	0c9b      	lsrs	r3, r3, #18
 8003320:	3301      	adds	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003324:	e002      	b.n	800332c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3b01      	subs	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	d102      	bne.n	8003340 <HAL_PWREx_ControlVoltageScaling+0x60>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f2      	bne.n	8003326 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334c:	d110      	bne.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e00f      	b.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335e:	d007      	beq.n	8003370 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003368:	4a05      	ldr	r2, [pc, #20]	; (8003380 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40007000 	.word	0x40007000
 8003384:	20000000 	.word	0x20000000
 8003388:	431bde83 	.word	0x431bde83

0800338c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f000 bc02 	b.w	8003ba4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a0:	4b96      	ldr	r3, [pc, #600]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033aa:	4b94      	ldr	r3, [pc, #592]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80e4 	beq.w	800358a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4c>
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	f040 808b 	bne.w	80034e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	f040 8087 	bne.w	80034e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_OscConfig+0x64>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e3d9      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1a      	ldr	r2, [r3, #32]
 80033f4:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d004      	beq.n	800340a <HAL_RCC_OscConfig+0x7e>
 8003400:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003408:	e005      	b.n	8003416 <HAL_RCC_OscConfig+0x8a>
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800340c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003416:	4293      	cmp	r3, r2
 8003418:	d223      	bcs.n	8003462 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fd8c 	bl	8003f3c <RCC_SetFlashLatencyFromMSIRange>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e3ba      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342e:	4b73      	ldr	r3, [pc, #460]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a72      	ldr	r2, [pc, #456]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003434:	f043 0308 	orr.w	r3, r3, #8
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b70      	ldr	r3, [pc, #448]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	496d      	ldr	r1, [pc, #436]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800344c:	4b6b      	ldr	r3, [pc, #428]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	4968      	ldr	r1, [pc, #416]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]
 8003460:	e025      	b.n	80034ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003462:	4b66      	ldr	r3, [pc, #408]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a65      	ldr	r2, [pc, #404]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b63      	ldr	r3, [pc, #396]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4960      	ldr	r1, [pc, #384]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003480:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	495b      	ldr	r1, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fd4c 	bl	8003f3c <RCC_SetFlashLatencyFromMSIRange>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e37a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ae:	f000 fc81 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b51      	ldr	r3, [pc, #324]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	4950      	ldr	r1, [pc, #320]	; (8003600 <HAL_RCC_OscConfig+0x274>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	4a4e      	ldr	r2, [pc, #312]	; (8003604 <HAL_RCC_OscConfig+0x278>)
 80034cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034ce:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <HAL_RCC_OscConfig+0x27c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fe f950 	bl	8001778 <HAL_InitTick>
 80034d8:	4603      	mov	r3, r0
 80034da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d052      	beq.n	8003588 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	e35e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d032      	beq.n	8003554 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ee:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a42      	ldr	r2, [pc, #264]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034fa:	f7fe f98d 	bl	8001818 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003502:	f7fe f989 	bl	8001818 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e347      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003520:	4b36      	ldr	r3, [pc, #216]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a35      	ldr	r2, [pc, #212]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003526:	f043 0308 	orr.w	r3, r3, #8
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b33      	ldr	r3, [pc, #204]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4930      	ldr	r1, [pc, #192]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800353e:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	492b      	ldr	r1, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
 8003552:	e01a      	b.n	800358a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003554:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a28      	ldr	r2, [pc, #160]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800355a:	f023 0301 	bic.w	r3, r3, #1
 800355e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003560:	f7fe f95a 	bl	8001818 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003568:	f7fe f956 	bl	8001818 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e314      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1dc>
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003588:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d073      	beq.n	800367e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_OscConfig+0x21c>
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d10e      	bne.n	80035c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d10b      	bne.n	80035c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d063      	beq.n	800367c <HAL_RCC_OscConfig+0x2f0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d15f      	bne.n	800367c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e2f1      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c8:	d106      	bne.n	80035d8 <HAL_RCC_OscConfig+0x24c>
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	e025      	b.n	8003624 <HAL_RCC_OscConfig+0x298>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e0:	d114      	bne.n	800360c <HAL_RCC_OscConfig+0x280>
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a05      	ldr	r2, [pc, #20]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a02      	ldr	r2, [pc, #8]	; (80035fc <HAL_RCC_OscConfig+0x270>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e013      	b.n	8003624 <HAL_RCC_OscConfig+0x298>
 80035fc:	40021000 	.word	0x40021000
 8003600:	08005f18 	.word	0x08005f18
 8003604:	20000000 	.word	0x20000000
 8003608:	20000004 	.word	0x20000004
 800360c:	4ba0      	ldr	r3, [pc, #640]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a9f      	ldr	r2, [pc, #636]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	4b9d      	ldr	r3, [pc, #628]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a9c      	ldr	r2, [pc, #624]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800361e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d013      	beq.n	8003654 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362c:	f7fe f8f4 	bl	8001818 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe f8f0 	bl	8001818 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e2ae      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003646:	4b92      	ldr	r3, [pc, #584]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x2a8>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fe f8e0 	bl	8001818 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800365c:	f7fe f8dc 	bl	8001818 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b64      	cmp	r3, #100	; 0x64
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e29a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800366e:	4b88      	ldr	r3, [pc, #544]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x2d0>
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d060      	beq.n	800374c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d005      	beq.n	800369c <HAL_RCC_OscConfig+0x310>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b0c      	cmp	r3, #12
 8003694:	d119      	bne.n	80036ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d116      	bne.n	80036ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800369c:	4b7c      	ldr	r3, [pc, #496]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_OscConfig+0x328>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e277      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b4:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	4973      	ldr	r1, [pc, #460]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c8:	e040      	b.n	800374c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d023      	beq.n	800371a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d2:	4b6f      	ldr	r3, [pc, #444]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6e      	ldr	r2, [pc, #440]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fe f89b 	bl	8001818 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e6:	f7fe f897 	bl	8001818 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e255      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f8:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4b62      	ldr	r3, [pc, #392]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	495f      	ldr	r1, [pc, #380]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
 8003718:	e018      	b.n	800374c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371a:	4b5d      	ldr	r3, [pc, #372]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5c      	ldr	r2, [pc, #368]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003726:	f7fe f877 	bl	8001818 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372e:	f7fe f873 	bl	8001818 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e231      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003740:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f0      	bne.n	800372e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d03c      	beq.n	80037d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01c      	beq.n	800379a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003760:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003766:	4a4a      	ldr	r2, [pc, #296]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003770:	f7fe f852 	bl	8001818 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003778:	f7fe f84e 	bl	8001818 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e20c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800378c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ef      	beq.n	8003778 <HAL_RCC_OscConfig+0x3ec>
 8003798:	e01b      	b.n	80037d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800379c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a0:	4a3b      	ldr	r2, [pc, #236]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fe f835 	bl	8001818 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b2:	f7fe f831 	bl	8001818 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e1ef      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c4:	4b32      	ldr	r3, [pc, #200]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ef      	bne.n	80037b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80a6 	beq.w	800392c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037e4:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10d      	bne.n	800380c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f0:	4b27      	ldr	r3, [pc, #156]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80037f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f4:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6593      	str	r3, [r2, #88]	; 0x58
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 80037fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003808:	2301      	movs	r3, #1
 800380a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCC_OscConfig+0x508>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d118      	bne.n	800384a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <HAL_RCC_OscConfig+0x508>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_RCC_OscConfig+0x508>)
 800381e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003822:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003824:	f7fd fff8 	bl	8001818 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382c:	f7fd fff4 	bl	8001818 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e1b2      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x508>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d108      	bne.n	8003864 <HAL_RCC_OscConfig+0x4d8>
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003862:	e029      	b.n	80038b8 <HAL_RCC_OscConfig+0x52c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b05      	cmp	r3, #5
 800386a:	d115      	bne.n	8003898 <HAL_RCC_OscConfig+0x50c>
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	4a07      	ldr	r2, [pc, #28]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	4a03      	ldr	r2, [pc, #12]	; (8003890 <HAL_RCC_OscConfig+0x504>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800388c:	e014      	b.n	80038b8 <HAL_RCC_OscConfig+0x52c>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	40007000 	.word	0x40007000
 8003898:	4b9a      	ldr	r3, [pc, #616]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 800389a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389e:	4a99      	ldr	r2, [pc, #612]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a8:	4b96      	ldr	r3, [pc, #600]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	4a95      	ldr	r2, [pc, #596]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 80038b0:	f023 0304 	bic.w	r3, r3, #4
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d016      	beq.n	80038ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fd ffaa 	bl	8001818 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c6:	e00a      	b.n	80038de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c8:	f7fd ffa6 	bl	8001818 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e162      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038de:	4b89      	ldr	r3, [pc, #548]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0ed      	beq.n	80038c8 <HAL_RCC_OscConfig+0x53c>
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ee:	f7fd ff93 	bl	8001818 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f4:	e00a      	b.n	800390c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fd ff8f 	bl	8001818 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f241 3288 	movw	r2, #5000	; 0x1388
 8003904:	4293      	cmp	r3, r2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e14b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800390c:	4b7d      	ldr	r3, [pc, #500]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ed      	bne.n	80038f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391a:	7ffb      	ldrb	r3, [r7, #31]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003920:	4b78      	ldr	r3, [pc, #480]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4a77      	ldr	r2, [pc, #476]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d03c      	beq.n	80039b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01c      	beq.n	800397a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003940:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003946:	4a6f      	ldr	r2, [pc, #444]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003948:	f043 0301 	orr.w	r3, r3, #1
 800394c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fd ff62 	bl	8001818 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003958:	f7fd ff5e 	bl	8001818 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e11c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800396a:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 800396c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0ef      	beq.n	8003958 <HAL_RCC_OscConfig+0x5cc>
 8003978:	e01b      	b.n	80039b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800397a:	4b62      	ldr	r3, [pc, #392]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 800397c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003980:	4a60      	ldr	r2, [pc, #384]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fd ff45 	bl	8001818 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003992:	f7fd ff41 	bl	8001818 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0ff      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a4:	4b57      	ldr	r3, [pc, #348]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 80039a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1ef      	bne.n	8003992 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80f3 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	f040 80c9 	bne.w	8003b58 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039c6:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d12c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	3b01      	subs	r3, #1
 80039e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d123      	bne.n	8003a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d11b      	bne.n	8003a34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d113      	bne.n	8003a34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d109      	bne.n	8003a34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d06b      	beq.n	8003b0c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d062      	beq.n	8003b00 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a3a:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e0ac      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003a50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a56:	f7fd fedf 	bl	8001818 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fd fedb 	bl	8001818 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e099      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a70:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <HAL_RCC_OscConfig+0x77c>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a96:	0212      	lsls	r2, r2, #8
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a9e:	0852      	lsrs	r2, r2, #1
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	0552      	lsls	r2, r2, #21
 8003aa4:	4311      	orrs	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aaa:	0852      	lsrs	r2, r2, #1
 8003aac:	3a01      	subs	r2, #1
 8003aae:	0652      	lsls	r2, r2, #25
 8003ab0:	4311      	orrs	r1, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ab6:	06d2      	lsls	r2, r2, #27
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	4912      	ldr	r1, [pc, #72]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0f      	ldr	r2, [pc, #60]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ad6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ad8:	f7fd fe9e 	bl	8001818 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fd fe9a 	bl	8001818 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e058      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_RCC_OscConfig+0x778>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003afe:	e050      	b.n	8003ba2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e04f      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
 8003b04:	40021000 	.word	0x40021000
 8003b08:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d144      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a23      	ldr	r2, [pc, #140]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b30:	f7fd fe72 	bl	8001818 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fd fe6e 	bl	8001818 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e02c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4a:	4b18      	ldr	r3, [pc, #96]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0x7ac>
 8003b56:	e024      	b.n	8003ba2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d01f      	beq.n	8003b9e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fd fe55 	bl	8001818 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fd fe51 	bl	8001818 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e00f      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	4905      	ldr	r1, [pc, #20]	; (8003bac <HAL_RCC_OscConfig+0x820>)
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_OscConfig+0x824>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60cb      	str	r3, [r1, #12]
 8003b9c:	e001      	b.n	8003ba2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	feeefffc 	.word	0xfeeefffc

08003bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0e7      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b75      	ldr	r3, [pc, #468]	; (8003da0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d910      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b72      	ldr	r3, [pc, #456]	; (8003da0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	4970      	ldr	r1, [pc, #448]	; (8003da0 <HAL_RCC_ClockConfig+0x1ec>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b6e      	ldr	r3, [pc, #440]	; (8003da0 <HAL_RCC_ClockConfig+0x1ec>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0cf      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d010      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	4b66      	ldr	r3, [pc, #408]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d908      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c14:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4960      	ldr	r1, [pc, #384]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d04c      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3a:	4b5a      	ldr	r3, [pc, #360]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d121      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e0a6      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c52:	4b54      	ldr	r3, [pc, #336]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d115      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e09a      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6a:	4b4e      	ldr	r3, [pc, #312]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e08e      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c7a:	4b4a      	ldr	r3, [pc, #296]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e086      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c8a:	4b46      	ldr	r3, [pc, #280]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f023 0203 	bic.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4943      	ldr	r1, [pc, #268]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9c:	f7fd fdbc 	bl	8001818 <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca4:	f7fd fdb8 	bl	8001818 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e06e      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	4b3a      	ldr	r3, [pc, #232]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 020c 	and.w	r2, r3, #12
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d1eb      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d208      	bcs.n	8003cfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b2e      	ldr	r3, [pc, #184]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	492b      	ldr	r1, [pc, #172]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d210      	bcs.n	8003d2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d08:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 0207 	bic.w	r2, r3, #7
 8003d10:	4923      	ldr	r1, [pc, #140]	; (8003da0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e036      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d36:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4918      	ldr	r1, [pc, #96]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d009      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4910      	ldr	r1, [pc, #64]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d68:	f000 f824 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	490b      	ldr	r1, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1f4>)
 8003d7a:	5ccb      	ldrb	r3, [r1, r3]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
 8003d84:	4a09      	ldr	r2, [pc, #36]	; (8003dac <HAL_RCC_ClockConfig+0x1f8>)
 8003d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1fc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd fcf3 	bl	8001778 <HAL_InitTick>
 8003d92:	4603      	mov	r3, r0
 8003d94:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d96:	7afb      	ldrb	r3, [r7, #11]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40022000 	.word	0x40022000
 8003da4:	40021000 	.word	0x40021000
 8003da8:	08005f18 	.word	0x08005f18
 8003dac:	20000000 	.word	0x20000000
 8003db0:	20000004 	.word	0x20000004

08003db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc2:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dcc:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d121      	bne.n	8003e26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d11e      	bne.n	8003e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003de8:	4b34      	ldr	r3, [pc, #208]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d107      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003df4:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	e005      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e04:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e10:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10d      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d102      	bne.n	8003e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	e004      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e38:	4b23      	ldr	r3, [pc, #140]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d134      	bne.n	8003eac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e42:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0xa6>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d003      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0xac>
 8003e58:	e005      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e5c:	617b      	str	r3, [r7, #20]
      break;
 8003e5e:	e005      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e62:	617b      	str	r3, [r7, #20]
      break;
 8003e64:	e002      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	617b      	str	r3, [r7, #20]
      break;
 8003e6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	3301      	adds	r3, #1
 8003e78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	fb03 f202 	mul.w	r2, r3, r2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	0e5b      	lsrs	r3, r3, #25
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003eac:	69bb      	ldr	r3, [r7, #24]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3724      	adds	r7, #36	; 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	08005f30 	.word	0x08005f30
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	007a1200 	.word	0x007a1200

08003ecc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4904      	ldr	r1, [pc, #16]	; (8003f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08005f28 	.word	0x08005f28

08003f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f14:	f7ff ffda 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0adb      	lsrs	r3, r3, #11
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4904      	ldr	r1, [pc, #16]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08005f28 	.word	0x08005f28

08003f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f54:	f7ff f9b6 	bl	80032c4 <HAL_PWREx_GetVoltageRange>
 8003f58:	6178      	str	r0, [r7, #20]
 8003f5a:	e014      	b.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a24      	ldr	r2, [pc, #144]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
 8003f68:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f74:	f7ff f9a6 	bl	80032c4 <HAL_PWREx_GetVoltageRange>
 8003f78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8c:	d10b      	bne.n	8003fa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d919      	bls.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2ba0      	cmp	r3, #160	; 0xa0
 8003f98:	d902      	bls.n	8003fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e013      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e010      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d902      	bls.n	8003fb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fac:	2303      	movs	r3, #3
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	e00a      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b80      	cmp	r3, #128	; 0x80
 8003fb6:	d102      	bne.n	8003fbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fb8:	2302      	movs	r3, #2
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	e004      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b70      	cmp	r3, #112	; 0x70
 8003fc2:	d101      	bne.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 0207 	bic.w	r2, r3, #7
 8003fd0:	4909      	ldr	r1, [pc, #36]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d001      	beq.n	8003fea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40022000 	.word	0x40022000

08003ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004004:	2300      	movs	r3, #0
 8004006:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004008:	2300      	movs	r3, #0
 800400a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004014:	2b00      	cmp	r3, #0
 8004016:	d031      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004020:	d01a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004022:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004026:	d814      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d009      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800402c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004030:	d10f      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004032:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	4a5c      	ldr	r2, [pc, #368]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800403e:	e00c      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f9f0 	bl	800442c <RCCEx_PLLSAI1_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004050:	e003      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	74fb      	strb	r3, [r7, #19]
      break;
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004060:	4b51      	ldr	r3, [pc, #324]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406e:	494e      	ldr	r1, [pc, #312]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004076:	e001      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 809e 	beq.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408a:	2300      	movs	r3, #0
 800408c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800408e:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a4:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a8:	4a3f      	ldr	r2, [pc, #252]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ae:	6593      	str	r3, [r2, #88]	; 0x58
 80040b0:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040bc:	2301      	movs	r3, #1
 80040be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c0:	4b3a      	ldr	r3, [pc, #232]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a39      	ldr	r2, [pc, #228]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040cc:	f7fd fba4 	bl	8001818 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040d2:	e009      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d4:	f7fd fba0 	bl	8001818 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d902      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	74fb      	strb	r3, [r7, #19]
        break;
 80040e6:	e005      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ef      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d15a      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004104:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01e      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	429a      	cmp	r2, r3
 8004114:	d019      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004122:	4b21      	ldr	r3, [pc, #132]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800412a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004142:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d016      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd fb60 	bl	8001818 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415a:	e00b      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fd fb5c 	bl	8001818 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d902      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	74fb      	strb	r3, [r7, #19]
            break;
 8004172:	e006      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ec      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004188:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	4904      	ldr	r1, [pc, #16]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800419e:	e009      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b4:	7c7b      	ldrb	r3, [r7, #17]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d105      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ba:	4b9b      	ldr	r3, [pc, #620]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	4a9a      	ldr	r2, [pc, #616]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d2:	4b95      	ldr	r3, [pc, #596]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f023 0203 	bic.w	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4991      	ldr	r1, [pc, #580]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041f4:	4b8c      	ldr	r3, [pc, #560]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 020c 	bic.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	4989      	ldr	r1, [pc, #548]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004216:	4b84      	ldr	r3, [pc, #528]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	4980      	ldr	r1, [pc, #512]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004238:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	4978      	ldr	r1, [pc, #480]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800425a:	4b73      	ldr	r3, [pc, #460]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	496f      	ldr	r1, [pc, #444]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800427c:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	4967      	ldr	r1, [pc, #412]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800429e:	4b62      	ldr	r3, [pc, #392]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	495e      	ldr	r1, [pc, #376]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ce:	4956      	ldr	r1, [pc, #344]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e2:	4b51      	ldr	r3, [pc, #324]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	494d      	ldr	r1, [pc, #308]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d028      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004304:	4b48      	ldr	r3, [pc, #288]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	4945      	ldr	r1, [pc, #276]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004322:	d106      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004324:	4b40      	ldr	r3, [pc, #256]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800432a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432e:	60d3      	str	r3, [r2, #12]
 8004330:	e011      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800433a:	d10c      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	2101      	movs	r1, #1
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f872 	bl	800442c <RCCEx_PLLSAI1_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d028      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004370:	492d      	ldr	r1, [pc, #180]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004380:	d106      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004382:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a28      	ldr	r2, [pc, #160]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438c:	60d3      	str	r3, [r2, #12]
 800438e:	e011      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 f843 	bl	800442c <RCCEx_PLLSAI1_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043aa:	7cfb      	ldrb	r3, [r7, #19]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01c      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	4916      	ldr	r1, [pc, #88]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043de:	d10c      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	2102      	movs	r1, #2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f820 	bl	800442c <RCCEx_PLLSAI1_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	4904      	ldr	r1, [pc, #16]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800441c:	7cbb      	ldrb	r3, [r7, #18]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40021000 	.word	0x40021000

0800442c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800443a:	4b74      	ldr	r3, [pc, #464]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d018      	beq.n	8004478 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004446:	4b71      	ldr	r3, [pc, #452]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0203 	and.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d10d      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
       ||
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800445e:	4b6b      	ldr	r3, [pc, #428]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	091b      	lsrs	r3, r3, #4
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
       ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d047      	beq.n	8004502 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
 8004476:	e044      	b.n	8004502 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d018      	beq.n	80044b2 <RCCEx_PLLSAI1_Config+0x86>
 8004480:	2b03      	cmp	r3, #3
 8004482:	d825      	bhi.n	80044d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004484:	2b01      	cmp	r3, #1
 8004486:	d002      	beq.n	800448e <RCCEx_PLLSAI1_Config+0x62>
 8004488:	2b02      	cmp	r3, #2
 800448a:	d009      	beq.n	80044a0 <RCCEx_PLLSAI1_Config+0x74>
 800448c:	e020      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800448e:	4b5f      	ldr	r3, [pc, #380]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11d      	bne.n	80044d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800449e:	e01a      	b.n	80044d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044a0:	4b5a      	ldr	r3, [pc, #360]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d116      	bne.n	80044da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b0:	e013      	b.n	80044da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044b2:	4b56      	ldr	r3, [pc, #344]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044be:	4b53      	ldr	r3, [pc, #332]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ce:	e006      	b.n	80044de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      break;
 80044d4:	e004      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044de:	bf00      	nop
    }

    if(status == HAL_OK)
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10d      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044e6:	4b49      	ldr	r3, [pc, #292]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	430b      	orrs	r3, r1
 80044fc:	4943      	ldr	r1, [pc, #268]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d17c      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004508:	4b40      	ldr	r3, [pc, #256]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3f      	ldr	r2, [pc, #252]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004514:	f7fd f980 	bl	8001818 <HAL_GetTick>
 8004518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800451a:	e009      	b.n	8004530 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800451c:	f7fd f97c 	bl	8001818 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d902      	bls.n	8004530 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	73fb      	strb	r3, [r7, #15]
        break;
 800452e:	e005      	b.n	800453c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004530:	4b36      	ldr	r3, [pc, #216]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ef      	bne.n	800451c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d15f      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d110      	bne.n	800456a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004548:	4b30      	ldr	r3, [pc, #192]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004550:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6892      	ldr	r2, [r2, #8]
 8004558:	0211      	lsls	r1, r2, #8
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68d2      	ldr	r2, [r2, #12]
 800455e:	06d2      	lsls	r2, r2, #27
 8004560:	430a      	orrs	r2, r1
 8004562:	492a      	ldr	r1, [pc, #168]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004564:	4313      	orrs	r3, r2
 8004566:	610b      	str	r3, [r1, #16]
 8004568:	e027      	b.n	80045ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d112      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004570:	4b26      	ldr	r3, [pc, #152]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004578:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6892      	ldr	r2, [r2, #8]
 8004580:	0211      	lsls	r1, r2, #8
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6912      	ldr	r2, [r2, #16]
 8004586:	0852      	lsrs	r2, r2, #1
 8004588:	3a01      	subs	r2, #1
 800458a:	0552      	lsls	r2, r2, #21
 800458c:	430a      	orrs	r2, r1
 800458e:	491f      	ldr	r1, [pc, #124]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	610b      	str	r3, [r1, #16]
 8004594:	e011      	b.n	80045ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004596:	4b1d      	ldr	r3, [pc, #116]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800459e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6892      	ldr	r2, [r2, #8]
 80045a6:	0211      	lsls	r1, r2, #8
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6952      	ldr	r2, [r2, #20]
 80045ac:	0852      	lsrs	r2, r2, #1
 80045ae:	3a01      	subs	r2, #1
 80045b0:	0652      	lsls	r2, r2, #25
 80045b2:	430a      	orrs	r2, r1
 80045b4:	4915      	ldr	r1, [pc, #84]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045ba:	4b14      	ldr	r3, [pc, #80]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a13      	ldr	r2, [pc, #76]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c6:	f7fd f927 	bl	8001818 <HAL_GetTick>
 80045ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045cc:	e009      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045ce:	f7fd f923 	bl	8001818 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d902      	bls.n	80045e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	73fb      	strb	r3, [r7, #15]
          break;
 80045e0:	e005      	b.n	80045ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ef      	beq.n	80045ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	4903      	ldr	r1, [pc, #12]	; (800460c <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000

08004610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e049      	b.n	80046b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc fe48 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f000 fb52 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e049      	b.n	8004764 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f841 	bl	800476c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f000 fafb 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_PWM_Start+0x24>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e03c      	b.n	800481e <HAL_TIM_PWM_Start+0x9e>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d109      	bne.n	80047be <HAL_TIM_PWM_Start+0x3e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e02f      	b.n	800481e <HAL_TIM_PWM_Start+0x9e>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x58>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e022      	b.n	800481e <HAL_TIM_PWM_Start+0x9e>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d109      	bne.n	80047f2 <HAL_TIM_PWM_Start+0x72>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	e015      	b.n	800481e <HAL_TIM_PWM_Start+0x9e>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d109      	bne.n	800480c <HAL_TIM_PWM_Start+0x8c>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	bf14      	ite	ne
 8004804:	2301      	movne	r3, #1
 8004806:	2300      	moveq	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e008      	b.n	800481e <HAL_TIM_PWM_Start+0x9e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07e      	b.n	8004924 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0xb6>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004834:	e023      	b.n	800487e <HAL_TIM_PWM_Start+0xfe>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b04      	cmp	r3, #4
 800483a:	d104      	bne.n	8004846 <HAL_TIM_PWM_Start+0xc6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004844:	e01b      	b.n	800487e <HAL_TIM_PWM_Start+0xfe>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b08      	cmp	r3, #8
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0xd6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004854:	e013      	b.n	800487e <HAL_TIM_PWM_Start+0xfe>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start+0xe6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004864:	e00b      	b.n	800487e <HAL_TIM_PWM_Start+0xfe>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b10      	cmp	r3, #16
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0xf6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004874:	e003      	b.n	800487e <HAL_TIM_PWM_Start+0xfe>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2201      	movs	r2, #1
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fdb2 	bl	80053f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a26      	ldr	r2, [pc, #152]	; (800492c <HAL_TIM_PWM_Start+0x1ac>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_TIM_PWM_Start+0x12a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a25      	ldr	r2, [pc, #148]	; (8004930 <HAL_TIM_PWM_Start+0x1b0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_TIM_PWM_Start+0x12a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a23      	ldr	r2, [pc, #140]	; (8004934 <HAL_TIM_PWM_Start+0x1b4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <HAL_TIM_PWM_Start+0x12e>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <HAL_TIM_PWM_Start+0x130>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_TIM_PWM_Start+0x1ac>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x162>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d6:	d004      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x162>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a14      	ldr	r2, [pc, #80]	; (8004930 <HAL_TIM_PWM_Start+0x1b0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d115      	bne.n	800490e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <HAL_TIM_PWM_Start+0x1b8>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d015      	beq.n	8004920 <HAL_TIM_PWM_Start+0x1a0>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d011      	beq.n	8004920 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490c:	e008      	b.n	8004920 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e000      	b.n	8004922 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004920:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40014000 	.word	0x40014000
 8004934:	40014400 	.word	0x40014400
 8004938:	00010007 	.word	0x00010007

0800493c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004956:	2302      	movs	r3, #2
 8004958:	e0ff      	b.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b14      	cmp	r3, #20
 8004966:	f200 80f0 	bhi.w	8004b4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049c5 	.word	0x080049c5
 8004974:	08004b4b 	.word	0x08004b4b
 8004978:	08004b4b 	.word	0x08004b4b
 800497c:	08004b4b 	.word	0x08004b4b
 8004980:	08004a05 	.word	0x08004a05
 8004984:	08004b4b 	.word	0x08004b4b
 8004988:	08004b4b 	.word	0x08004b4b
 800498c:	08004b4b 	.word	0x08004b4b
 8004990:	08004a47 	.word	0x08004a47
 8004994:	08004b4b 	.word	0x08004b4b
 8004998:	08004b4b 	.word	0x08004b4b
 800499c:	08004b4b 	.word	0x08004b4b
 80049a0:	08004a87 	.word	0x08004a87
 80049a4:	08004b4b 	.word	0x08004b4b
 80049a8:	08004b4b 	.word	0x08004b4b
 80049ac:	08004b4b 	.word	0x08004b4b
 80049b0:	08004ac9 	.word	0x08004ac9
 80049b4:	08004b4b 	.word	0x08004b4b
 80049b8:	08004b4b 	.word	0x08004b4b
 80049bc:	08004b4b 	.word	0x08004b4b
 80049c0:	08004b09 	.word	0x08004b09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f9f8 	bl	8004dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0208 	orr.w	r2, r2, #8
 80049de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0204 	bic.w	r2, r2, #4
 80049ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6999      	ldr	r1, [r3, #24]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	619a      	str	r2, [r3, #24]
      break;
 8004a02:	e0a5      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fa54 	bl	8004eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6999      	ldr	r1, [r3, #24]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	021a      	lsls	r2, r3, #8
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	619a      	str	r2, [r3, #24]
      break;
 8004a44:	e084      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 faad 	bl	8004fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0208 	orr.w	r2, r2, #8
 8004a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0204 	bic.w	r2, r2, #4
 8004a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69d9      	ldr	r1, [r3, #28]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	61da      	str	r2, [r3, #28]
      break;
 8004a84:	e064      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fb05 	bl	800509c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69d9      	ldr	r1, [r3, #28]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	021a      	lsls	r2, r3, #8
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	61da      	str	r2, [r3, #28]
      break;
 8004ac6:	e043      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fb42 	bl	8005158 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0208 	orr.w	r2, r2, #8
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0204 	bic.w	r2, r2, #4
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b06:	e023      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb7a 	bl	8005208 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	021a      	lsls	r2, r3, #8
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b48:	e002      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop

08004b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_ConfigClockSource+0x1c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0b6      	b.n	8004cee <HAL_TIM_ConfigClockSource+0x18a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d03e      	beq.n	8004c3c <HAL_TIM_ConfigClockSource+0xd8>
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	f200 8087 	bhi.w	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	f000 8086 	beq.w	8004cda <HAL_TIM_ConfigClockSource+0x176>
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	d87f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
 8004bd4:	2b70      	cmp	r3, #112	; 0x70
 8004bd6:	d01a      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0xaa>
 8004bd8:	2b70      	cmp	r3, #112	; 0x70
 8004bda:	d87b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d050      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x11e>
 8004be0:	2b60      	cmp	r3, #96	; 0x60
 8004be2:	d877      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d03c      	beq.n	8004c62 <HAL_TIM_ConfigClockSource+0xfe>
 8004be8:	2b50      	cmp	r3, #80	; 0x50
 8004bea:	d873      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d058      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x13e>
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d86f      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
 8004bf4:	2b30      	cmp	r3, #48	; 0x30
 8004bf6:	d064      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004bf8:	2b30      	cmp	r3, #48	; 0x30
 8004bfa:	d86b      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d060      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d867      	bhi.n	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d05c      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c08:	2b10      	cmp	r3, #16
 8004c0a:	d05a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c0c:	e062      	b.n	8004cd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	6899      	ldr	r1, [r3, #8]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	f000 fbc7 	bl	80053b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	609a      	str	r2, [r3, #8]
      break;
 8004c3a:	e04f      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6899      	ldr	r1, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f000 fbb0 	bl	80053b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c5e:	609a      	str	r2, [r3, #8]
      break;
 8004c60:	e03c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6818      	ldr	r0, [r3, #0]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f000 fb24 	bl	80052bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2150      	movs	r1, #80	; 0x50
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fb7d 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004c80:	e02c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f000 fb43 	bl	800531a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2160      	movs	r1, #96	; 0x60
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fb6d 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004ca0:	e01c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fb04 	bl	80052bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fb5d 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e00c      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f000 fb54 	bl	800537a <TIM_ITRx_SetConfig>
      break;
 8004cd2:	e003      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd8:	e000      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <TIM_Base_SetConfig+0xbc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0x20>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d108      	bne.n	8004d2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <TIM_Base_SetConfig+0xbc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00b      	beq.n	8004d4a <TIM_Base_SetConfig+0x52>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d38:	d007      	beq.n	8004d4a <TIM_Base_SetConfig+0x52>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <TIM_Base_SetConfig+0xc0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d003      	beq.n	8004d4a <TIM_Base_SetConfig+0x52>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <TIM_Base_SetConfig+0xc4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d108      	bne.n	8004d5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <TIM_Base_SetConfig+0xbc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d007      	beq.n	8004d98 <TIM_Base_SetConfig+0xa0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <TIM_Base_SetConfig+0xc0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d003      	beq.n	8004d98 <TIM_Base_SetConfig+0xa0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <TIM_Base_SetConfig+0xc4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d103      	bne.n	8004da0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	615a      	str	r2, [r3, #20]
}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40012c00 	.word	0x40012c00
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400

08004dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f023 0201 	bic.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f023 0302 	bic.w	r3, r3, #2
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a24      	ldr	r2, [pc, #144]	; (8004eac <TIM_OC1_SetConfig+0xec>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_OC1_SetConfig+0x70>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <TIM_OC1_SetConfig+0xf0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_OC1_SetConfig+0x70>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <TIM_OC1_SetConfig+0xf4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10c      	bne.n	8004e4a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0308 	bic.w	r3, r3, #8
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 0304 	bic.w	r3, r3, #4
 8004e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a17      	ldr	r2, [pc, #92]	; (8004eac <TIM_OC1_SetConfig+0xec>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_OC1_SetConfig+0xa2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <TIM_OC1_SetConfig+0xf0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_OC1_SetConfig+0xa2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <TIM_OC1_SetConfig+0xf4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d111      	bne.n	8004e86 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	621a      	str	r2, [r3, #32]
}
 8004ea0:	bf00      	nop
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400

08004eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0210 	bic.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a22      	ldr	r2, [pc, #136]	; (8004fa0 <TIM_OC2_SetConfig+0xe8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10d      	bne.n	8004f38 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <TIM_OC2_SetConfig+0xe8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_OC2_SetConfig+0x98>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <TIM_OC2_SetConfig+0xec>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_OC2_SetConfig+0x98>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <TIM_OC2_SetConfig+0xf0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d113      	bne.n	8004f78 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400

08004fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a21      	ldr	r2, [pc, #132]	; (8005090 <TIM_OC3_SetConfig+0xe4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <TIM_OC3_SetConfig+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <TIM_OC3_SetConfig+0x96>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a17      	ldr	r2, [pc, #92]	; (8005094 <TIM_OC3_SetConfig+0xe8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_OC3_SetConfig+0x96>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a16      	ldr	r2, [pc, #88]	; (8005098 <TIM_OC3_SetConfig+0xec>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d113      	bne.n	800506a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40014000 	.word	0x40014000
 8005098:	40014400 	.word	0x40014400

0800509c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	031b      	lsls	r3, r3, #12
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a14      	ldr	r2, [pc, #80]	; (800514c <TIM_OC4_SetConfig+0xb0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <TIM_OC4_SetConfig+0x74>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a13      	ldr	r2, [pc, #76]	; (8005150 <TIM_OC4_SetConfig+0xb4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <TIM_OC4_SetConfig+0x74>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a12      	ldr	r2, [pc, #72]	; (8005154 <TIM_OC4_SetConfig+0xb8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d109      	bne.n	8005124 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	019b      	lsls	r3, r3, #6
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400

08005158 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800519c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a13      	ldr	r2, [pc, #76]	; (80051fc <TIM_OC5_SetConfig+0xa4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <TIM_OC5_SetConfig+0x6a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a12      	ldr	r2, [pc, #72]	; (8005200 <TIM_OC5_SetConfig+0xa8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d003      	beq.n	80051c2 <TIM_OC5_SetConfig+0x6a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a11      	ldr	r2, [pc, #68]	; (8005204 <TIM_OC5_SetConfig+0xac>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d109      	bne.n	80051d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400

08005208 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800524e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	051b      	lsls	r3, r3, #20
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <TIM_OC6_SetConfig+0xa8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d007      	beq.n	8005274 <TIM_OC6_SetConfig+0x6c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a13      	ldr	r2, [pc, #76]	; (80052b4 <TIM_OC6_SetConfig+0xac>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d003      	beq.n	8005274 <TIM_OC6_SetConfig+0x6c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <TIM_OC6_SetConfig+0xb0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d109      	bne.n	8005288 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800527a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	029b      	lsls	r3, r3, #10
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	4313      	orrs	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40014000 	.word	0x40014000
 80052b8:	40014400 	.word	0x40014400

080052bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f023 0201 	bic.w	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 030a 	bic.w	r3, r3, #10
 80052f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b087      	sub	sp, #28
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0210 	bic.w	r2, r3, #16
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005356:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	f043 0307 	orr.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e04f      	b.n	80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a21      	ldr	r2, [pc, #132]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d108      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005484:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a14      	ldr	r2, [pc, #80]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054bc:	d004      	beq.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d10c      	bne.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	40012c00 	.word	0x40012c00
 8005504:	40014000 	.word	0x40014000

08005508 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005520:	2302      	movs	r3, #2
 8005522:	e060      	b.n	80055e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	041b      	lsls	r3, r3, #16
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a14      	ldr	r2, [pc, #80]	; (80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d115      	bne.n	80055d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	051b      	lsls	r3, r3, #20
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40012c00 	.word	0x40012c00

080055f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e040      	b.n	800568c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fb fed4 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2224      	movs	r2, #36	; 0x24
 8005624:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0201 	bic.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f82c 	bl	8005694 <UART_SetConfig>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e022      	b.n	800568c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa7a 	bl	8005b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fb01 	bl	8005c8c <UART_CheckIdleState>
 800568a:	4603      	mov	r3, r0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005698:	b08a      	sub	sp, #40	; 0x28
 800569a:	af00      	add	r7, sp, #0
 800569c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b9e      	ldr	r3, [pc, #632]	; (800593c <UART_SetConfig+0x2a8>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a93      	ldr	r2, [pc, #588]	; (8005940 <UART_SetConfig+0x2ac>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fc:	4313      	orrs	r3, r2
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005710:	430a      	orrs	r2, r1
 8005712:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a8a      	ldr	r2, [pc, #552]	; (8005944 <UART_SetConfig+0x2b0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d126      	bne.n	800576c <UART_SetConfig+0xd8>
 800571e:	4b8a      	ldr	r3, [pc, #552]	; (8005948 <UART_SetConfig+0x2b4>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f003 0303 	and.w	r3, r3, #3
 8005728:	2b03      	cmp	r3, #3
 800572a:	d81b      	bhi.n	8005764 <UART_SetConfig+0xd0>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <UART_SetConfig+0xa0>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005745 	.word	0x08005745
 8005738:	08005755 	.word	0x08005755
 800573c:	0800574d 	.word	0x0800574d
 8005740:	0800575d 	.word	0x0800575d
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574a:	e0ab      	b.n	80058a4 <UART_SetConfig+0x210>
 800574c:	2302      	movs	r3, #2
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005752:	e0a7      	b.n	80058a4 <UART_SetConfig+0x210>
 8005754:	2304      	movs	r3, #4
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575a:	e0a3      	b.n	80058a4 <UART_SetConfig+0x210>
 800575c:	2308      	movs	r3, #8
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005762:	e09f      	b.n	80058a4 <UART_SetConfig+0x210>
 8005764:	2310      	movs	r3, #16
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576a:	e09b      	b.n	80058a4 <UART_SetConfig+0x210>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a76      	ldr	r2, [pc, #472]	; (800594c <UART_SetConfig+0x2b8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d138      	bne.n	80057e8 <UART_SetConfig+0x154>
 8005776:	4b74      	ldr	r3, [pc, #464]	; (8005948 <UART_SetConfig+0x2b4>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f003 030c 	and.w	r3, r3, #12
 8005780:	2b0c      	cmp	r3, #12
 8005782:	d82d      	bhi.n	80057e0 <UART_SetConfig+0x14c>
 8005784:	a201      	add	r2, pc, #4	; (adr r2, 800578c <UART_SetConfig+0xf8>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080057e1 	.word	0x080057e1
 8005794:	080057e1 	.word	0x080057e1
 8005798:	080057e1 	.word	0x080057e1
 800579c:	080057d1 	.word	0x080057d1
 80057a0:	080057e1 	.word	0x080057e1
 80057a4:	080057e1 	.word	0x080057e1
 80057a8:	080057e1 	.word	0x080057e1
 80057ac:	080057c9 	.word	0x080057c9
 80057b0:	080057e1 	.word	0x080057e1
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	080057e1 	.word	0x080057e1
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c6:	e06d      	b.n	80058a4 <UART_SetConfig+0x210>
 80057c8:	2302      	movs	r3, #2
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ce:	e069      	b.n	80058a4 <UART_SetConfig+0x210>
 80057d0:	2304      	movs	r3, #4
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057d6:	e065      	b.n	80058a4 <UART_SetConfig+0x210>
 80057d8:	2308      	movs	r3, #8
 80057da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057de:	e061      	b.n	80058a4 <UART_SetConfig+0x210>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e6:	e05d      	b.n	80058a4 <UART_SetConfig+0x210>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a58      	ldr	r2, [pc, #352]	; (8005950 <UART_SetConfig+0x2bc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d125      	bne.n	800583e <UART_SetConfig+0x1aa>
 80057f2:	4b55      	ldr	r3, [pc, #340]	; (8005948 <UART_SetConfig+0x2b4>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057fc:	2b30      	cmp	r3, #48	; 0x30
 80057fe:	d016      	beq.n	800582e <UART_SetConfig+0x19a>
 8005800:	2b30      	cmp	r3, #48	; 0x30
 8005802:	d818      	bhi.n	8005836 <UART_SetConfig+0x1a2>
 8005804:	2b20      	cmp	r3, #32
 8005806:	d00a      	beq.n	800581e <UART_SetConfig+0x18a>
 8005808:	2b20      	cmp	r3, #32
 800580a:	d814      	bhi.n	8005836 <UART_SetConfig+0x1a2>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <UART_SetConfig+0x182>
 8005810:	2b10      	cmp	r3, #16
 8005812:	d008      	beq.n	8005826 <UART_SetConfig+0x192>
 8005814:	e00f      	b.n	8005836 <UART_SetConfig+0x1a2>
 8005816:	2300      	movs	r3, #0
 8005818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800581c:	e042      	b.n	80058a4 <UART_SetConfig+0x210>
 800581e:	2302      	movs	r3, #2
 8005820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005824:	e03e      	b.n	80058a4 <UART_SetConfig+0x210>
 8005826:	2304      	movs	r3, #4
 8005828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800582c:	e03a      	b.n	80058a4 <UART_SetConfig+0x210>
 800582e:	2308      	movs	r3, #8
 8005830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005834:	e036      	b.n	80058a4 <UART_SetConfig+0x210>
 8005836:	2310      	movs	r3, #16
 8005838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800583c:	e032      	b.n	80058a4 <UART_SetConfig+0x210>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a3f      	ldr	r2, [pc, #252]	; (8005940 <UART_SetConfig+0x2ac>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d12a      	bne.n	800589e <UART_SetConfig+0x20a>
 8005848:	4b3f      	ldr	r3, [pc, #252]	; (8005948 <UART_SetConfig+0x2b4>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005856:	d01a      	beq.n	800588e <UART_SetConfig+0x1fa>
 8005858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800585c:	d81b      	bhi.n	8005896 <UART_SetConfig+0x202>
 800585e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005862:	d00c      	beq.n	800587e <UART_SetConfig+0x1ea>
 8005864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005868:	d815      	bhi.n	8005896 <UART_SetConfig+0x202>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <UART_SetConfig+0x1e2>
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005872:	d008      	beq.n	8005886 <UART_SetConfig+0x1f2>
 8005874:	e00f      	b.n	8005896 <UART_SetConfig+0x202>
 8005876:	2300      	movs	r3, #0
 8005878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800587c:	e012      	b.n	80058a4 <UART_SetConfig+0x210>
 800587e:	2302      	movs	r3, #2
 8005880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005884:	e00e      	b.n	80058a4 <UART_SetConfig+0x210>
 8005886:	2304      	movs	r3, #4
 8005888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588c:	e00a      	b.n	80058a4 <UART_SetConfig+0x210>
 800588e:	2308      	movs	r3, #8
 8005890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005894:	e006      	b.n	80058a4 <UART_SetConfig+0x210>
 8005896:	2310      	movs	r3, #16
 8005898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800589c:	e002      	b.n	80058a4 <UART_SetConfig+0x210>
 800589e:	2310      	movs	r3, #16
 80058a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a25      	ldr	r2, [pc, #148]	; (8005940 <UART_SetConfig+0x2ac>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	f040 808a 	bne.w	80059c4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d824      	bhi.n	8005902 <UART_SetConfig+0x26e>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0x22c>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	08005903 	.word	0x08005903
 80058c8:	080058ed 	.word	0x080058ed
 80058cc:	08005903 	.word	0x08005903
 80058d0:	080058f3 	.word	0x080058f3
 80058d4:	08005903 	.word	0x08005903
 80058d8:	08005903 	.word	0x08005903
 80058dc:	08005903 	.word	0x08005903
 80058e0:	080058fb 	.word	0x080058fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e4:	f7fe fafe 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 80058e8:	61f8      	str	r0, [r7, #28]
        break;
 80058ea:	e010      	b.n	800590e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058ec:	4b19      	ldr	r3, [pc, #100]	; (8005954 <UART_SetConfig+0x2c0>)
 80058ee:	61fb      	str	r3, [r7, #28]
        break;
 80058f0:	e00d      	b.n	800590e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f2:	f7fe fa5f 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 80058f6:	61f8      	str	r0, [r7, #28]
        break;
 80058f8:	e009      	b.n	800590e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fe:	61fb      	str	r3, [r7, #28]
        break;
 8005900:	e005      	b.n	800590e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800590c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 8109 	beq.w	8005b28 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	429a      	cmp	r2, r3
 8005924:	d305      	bcc.n	8005932 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	429a      	cmp	r2, r3
 8005930:	d912      	bls.n	8005958 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005938:	e0f6      	b.n	8005b28 <UART_SetConfig+0x494>
 800593a:	bf00      	nop
 800593c:	efff69f3 	.word	0xefff69f3
 8005940:	40008000 	.word	0x40008000
 8005944:	40013800 	.word	0x40013800
 8005948:	40021000 	.word	0x40021000
 800594c:	40004400 	.word	0x40004400
 8005950:	40004800 	.word	0x40004800
 8005954:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2200      	movs	r2, #0
 800595c:	461c      	mov	r4, r3
 800595e:	4615      	mov	r5, r2
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	022b      	lsls	r3, r5, #8
 800596a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800596e:	0222      	lsls	r2, r4, #8
 8005970:	68f9      	ldr	r1, [r7, #12]
 8005972:	6849      	ldr	r1, [r1, #4]
 8005974:	0849      	lsrs	r1, r1, #1
 8005976:	2000      	movs	r0, #0
 8005978:	4688      	mov	r8, r1
 800597a:	4681      	mov	r9, r0
 800597c:	eb12 0a08 	adds.w	sl, r2, r8
 8005980:	eb43 0b09 	adc.w	fp, r3, r9
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005992:	4650      	mov	r0, sl
 8005994:	4659      	mov	r1, fp
 8005996:	f7fa fc19 	bl	80001cc <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4613      	mov	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a8:	d308      	bcc.n	80059bc <UART_SetConfig+0x328>
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b0:	d204      	bcs.n	80059bc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	60da      	str	r2, [r3, #12]
 80059ba:	e0b5      	b.n	8005b28 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059c2:	e0b1      	b.n	8005b28 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059cc:	d15d      	bne.n	8005a8a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80059ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d827      	bhi.n	8005a26 <UART_SetConfig+0x392>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <UART_SetConfig+0x348>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a11 	.word	0x08005a11
 80059e8:	08005a27 	.word	0x08005a27
 80059ec:	08005a17 	.word	0x08005a17
 80059f0:	08005a27 	.word	0x08005a27
 80059f4:	08005a27 	.word	0x08005a27
 80059f8:	08005a27 	.word	0x08005a27
 80059fc:	08005a1f 	.word	0x08005a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a00:	f7fe fa70 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8005a04:	61f8      	str	r0, [r7, #28]
        break;
 8005a06:	e014      	b.n	8005a32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a08:	f7fe fa82 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8005a0c:	61f8      	str	r0, [r7, #28]
        break;
 8005a0e:	e010      	b.n	8005a32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a10:	4b4c      	ldr	r3, [pc, #304]	; (8005b44 <UART_SetConfig+0x4b0>)
 8005a12:	61fb      	str	r3, [r7, #28]
        break;
 8005a14:	e00d      	b.n	8005a32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a16:	f7fe f9cd 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8005a1a:	61f8      	str	r0, [r7, #28]
        break;
 8005a1c:	e009      	b.n	8005a32 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a22:	61fb      	str	r3, [r7, #28]
        break;
 8005a24:	e005      	b.n	8005a32 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d077      	beq.n	8005b28 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	005a      	lsls	r2, r3, #1
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	085b      	lsrs	r3, r3, #1
 8005a42:	441a      	add	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2b0f      	cmp	r3, #15
 8005a52:	d916      	bls.n	8005a82 <UART_SetConfig+0x3ee>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a5a:	d212      	bcs.n	8005a82 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f023 030f 	bic.w	r3, r3, #15
 8005a64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	8afb      	ldrh	r3, [r7, #22]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	8afa      	ldrh	r2, [r7, #22]
 8005a7e:	60da      	str	r2, [r3, #12]
 8005a80:	e052      	b.n	8005b28 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a88:	e04e      	b.n	8005b28 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d827      	bhi.n	8005ae2 <UART_SetConfig+0x44e>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <UART_SetConfig+0x404>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005acd 	.word	0x08005acd
 8005aa4:	08005ae3 	.word	0x08005ae3
 8005aa8:	08005ad3 	.word	0x08005ad3
 8005aac:	08005ae3 	.word	0x08005ae3
 8005ab0:	08005ae3 	.word	0x08005ae3
 8005ab4:	08005ae3 	.word	0x08005ae3
 8005ab8:	08005adb 	.word	0x08005adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005abc:	f7fe fa12 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8005ac0:	61f8      	str	r0, [r7, #28]
        break;
 8005ac2:	e014      	b.n	8005aee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ac4:	f7fe fa24 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8005ac8:	61f8      	str	r0, [r7, #28]
        break;
 8005aca:	e010      	b.n	8005aee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005acc:	4b1d      	ldr	r3, [pc, #116]	; (8005b44 <UART_SetConfig+0x4b0>)
 8005ace:	61fb      	str	r3, [r7, #28]
        break;
 8005ad0:	e00d      	b.n	8005aee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad2:	f7fe f96f 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8005ad6:	61f8      	str	r0, [r7, #28]
        break;
 8005ad8:	e009      	b.n	8005aee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ade:	61fb      	str	r3, [r7, #28]
        break;
 8005ae0:	e005      	b.n	8005aee <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005aec:	bf00      	nop
    }

    if (pclk != 0U)
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d019      	beq.n	8005b28 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	085a      	lsrs	r2, r3, #1
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	441a      	add	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	d909      	bls.n	8005b22 <UART_SetConfig+0x48e>
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b14:	d205      	bcs.n	8005b22 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60da      	str	r2, [r3, #12]
 8005b20:	e002      	b.n	8005b28 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3728      	adds	r7, #40	; 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b42:	bf00      	nop
 8005b44:	00f42400 	.word	0x00f42400

08005b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00a      	beq.n	8005bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c46:	d10a      	bne.n	8005c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c9c:	f7fb fdbc 	bl	8001818 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d10e      	bne.n	8005cce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f82d 	bl	8005d1e <UART_WaitOnFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e023      	b.n	8005d16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d10e      	bne.n	8005cfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f817 	bl	8005d1e <UART_WaitOnFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e00d      	b.n	8005d16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b09c      	sub	sp, #112	; 0x70
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d2e:	e0a5      	b.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d36:	f000 80a1 	beq.w	8005e7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d3a:	f7fb fd6d 	bl	8001818 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d302      	bcc.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x32>
 8005d4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d13e      	bne.n	8005dce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d64:	667b      	str	r3, [r7, #100]	; 0x64
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	663b      	str	r3, [r7, #96]	; 0x60
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005da2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005da4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e5      	bne.n	8005d82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e067      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d04f      	beq.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dea:	d147      	bne.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005df4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
 8005e16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	613b      	str	r3, [r7, #16]
   return(result);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e48:	623a      	str	r2, [r7, #32]
 8005e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	69f9      	ldr	r1, [r7, #28]
 8005e4e:	6a3a      	ldr	r2, [r7, #32]
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2220      	movs	r2, #32
 8005e66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e010      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69da      	ldr	r2, [r3, #28]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4013      	ands	r3, r2
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	f43f af4a 	beq.w	8005d30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3770      	adds	r7, #112	; 0x70
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4d0d      	ldr	r5, [pc, #52]	; (8005ee0 <__libc_init_array+0x38>)
 8005eac:	4c0d      	ldr	r4, [pc, #52]	; (8005ee4 <__libc_init_array+0x3c>)
 8005eae:	1b64      	subs	r4, r4, r5
 8005eb0:	10a4      	asrs	r4, r4, #2
 8005eb2:	2600      	movs	r6, #0
 8005eb4:	42a6      	cmp	r6, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	4d0b      	ldr	r5, [pc, #44]	; (8005ee8 <__libc_init_array+0x40>)
 8005eba:	4c0c      	ldr	r4, [pc, #48]	; (8005eec <__libc_init_array+0x44>)
 8005ebc:	f000 f820 	bl	8005f00 <_init>
 8005ec0:	1b64      	subs	r4, r4, r5
 8005ec2:	10a4      	asrs	r4, r4, #2
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	42a6      	cmp	r6, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed0:	4798      	blx	r3
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eda:	4798      	blx	r3
 8005edc:	3601      	adds	r6, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	08005f68 	.word	0x08005f68
 8005ee4:	08005f68 	.word	0x08005f68
 8005ee8:	08005f68 	.word	0x08005f68
 8005eec:	08005f6c 	.word	0x08005f6c

08005ef0 <memset>:
 8005ef0:	4402      	add	r2, r0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <_init>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr

08005f0c <_fini>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr
